---
title: Techniques to generate custom electronic forms using custom content
abstract: Techniques to generate custom electronic forms are described. An apparatus may comprise a logic device and an application having a form manager component. The form manager component may be operative on the logic device to manage one or more forms for a user interface of the application during a run-time mode of the application. The form manager component may have a custom prompt module operative to determine whether an application context interface is available for a dynamic form prompt of a form. The form manager component may determine whether a custom language interface is available for the dynamic form prompt when the application context interface is available. The form manager component may retrieve custom content in a custom presentation language for the dynamic form prompt when the custom language interface is available. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09645989&OS=09645989&RS=09645989
owner: SAS Institute Inc.
number: 09645989
owner_city: Cary
owner_country: US
publication_date: 20111104
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A user interface is a system by which people (users) interact with an electronic device, such as a computer. In general, a user interface allows users to input information to manipulate an electronic device. A user interface also allows an electronic device to output information as to the effects of the manipulation. In computing, a graphical user interface (GUI) is a type of user interface that allows users to interact with electronic devices with images rather than text commands. A GUI represents the information and actions available to a user through graphical icons and visual indicators such as secondary notation, as opposed to text-based interfaces, typed command labels or text navigation. The actions are usually performed through direct manipulation of the graphical elements.","An electronic form is a type of GUI view that is specifically designed to allow a user to enter data in a structured manner for processing by an electronic device. An electronic form is an electronic version of a physical form, such as a paper document with blank spaces for insertion of required or requested information. An electronic form provides an input template comprising various combinations of checkboxes, radio buttons, form fields, and other GUI elements designed to query and display data.","Electronic forms are typically designed for use in a particular geographic region. For instance, a form designer might design an electronic form with various GUI elements presenting a series of form fields arranged to accept user information. A form field may have a form prompt proximate to the form field to prompt a user to enter certain types of information in the form field, such as a form prompt \u201cName\u201d next to a form field for entering a user name. The form labels are typically presented in a human language appropriate for a given geographical region. For instance, an electronic form presented to form users in the United States of America (USA) would use form labels presented in the English language.","A potential problem arises, however, when an electronic form designed for one geographic region is presented in a different geographic region. For instance, if an electronic form originally designed in the English language was to be used in a geographic region other than the USA, such as Korea, an administrator or a developer of an application generating a form would need to manually change form prompts from the English language to the Korean language usually by creating another copy of the form. For business class form generators, a team of language specialists may be employed to \u201clocalize\u201d an electronic form for a particular geographic region. This manual process is inefficient, expensive, and raises potential security risks. There are some automated localization techniques, although these techniques are typically limited to use at design time rather than run-time of a form generator. Further, automated techniques are typically limited to performing language translations for a form, which can produce unpredictable results depending on a quality of a translation program or algorithm. It is with respect to these and other considerations that the present improvements are needed.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended as an aid in determining the scope of the claimed subject matter.","In one embodiment, for example, an apparatus may comprise a logic device and an application having a form manager component. The form manager component may be operative on the logic device to manage one or more forms for a user interface of the application during a run-time mode of the application. The form manager component may have a custom prompt module operative to determine whether an application context interface is available for a dynamic form prompt of a form. The form manager component may determine whether a custom language interface is available for the dynamic form prompt when the application context interface is available. The form manager component may retrieve custom content in a custom presentation language for the dynamic form prompt when the custom language interface is available. Other embodiments are described and claimed.","These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.","Embodiments are generally directed to enhanced document customization techniques to generate custom electronic documents for an application. Some embodiments are particularly directed to enhanced document customization techniques to automatically generate an electronic document, such as an electronic form, having content in different human languages during run-time of an application based on a location of a user of the electronic document. The content may be stored in local or remote datastores accessible by the application.","In one embodiment, for example, enhanced document customization techniques may generate an electronic form having one or more form fields with associated form prompts. The form prompts can be static form prompts or dynamic form prompts. Static form prompts may present static content in one or more static presentation languages suitable for one or more geographic locations. Static form prompts typically cannot be changed after creation of a form. Dynamic form prompts may present custom content in a custom presentation language suitable for different geographic locations. Dynamic form prompts can be changed after creation of a form. The dynamic form prompts may be generated during run-time of an application generating the electronic form, thereby allowing content for the dynamic form prompts to be constantly changed and updated. The content is typically not translated in real-time, but rather pre-translated content is retrieved and substituted during run-time of an application. In this manner, content for an electronic form may be automatically or programmatically transformed into different human languages suitable for multiple geographies during run-time of the application without manual human intervention. As a result, the embodiments can improve affordability, scalability, modularity, extendibility, or interoperability for an operator, device or network.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 1","FIGS. 17, 18","FIG. 1"],"b":["100","100","100","100"]},"In various embodiments, the custom form generation system  may comprise or implement multiple components or modules. As used herein the terms \u201ccomponent\u201d and \u201cmodule\u201d are intended to refer to computer-related entities, comprising either hardware, a combination of hardware and software, software, or software in execution. For example, a component and\/or module can be implemented as a process running on a processor, a hard disk drive, multiple storage drives (of optical and\/or magnetic storage medium), an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component and\/or module. One or more components and\/or modules can reside within a process and\/or thread of execution, and a component and\/or module can be localized on one computer and\/or distributed between two or more computers as desired for a given implementation. The embodiments are not limited in this context.","In the illustrated embodiment shown in , the custom form generation system  comprises a mid-tier server . The mid-tier server  may comprise any electronic device capable of executing a defined set of logic using a logic device . In one embodiment, the logic device  may comprise a processing system. The processing system may comprise, for example, a general purpose processor or a special purpose processor and one or more memory units, as described in more detail with reference to . The embodiments, however, are not limited in this context.","The mid-tier server  includes an application . The application  may comprise any software program that generally allows a user to accomplish one or more specific tasks. In various implementations, the application  may provide a graphical user interface (GUI) either natively or via the user interface component  to communicate information between the application  and a user via an output device, such as an electronic display. Examples of applications  may include without limitation information technology (IT) management applications, human resource management applications, financial management applications, business intelligence applications, customer relationship management applications, report generating applications, statistical analysis applications, business planning applications, project management applications, productivity applications, word processing applications, spreadsheet applications, database applications, and so forth. In one embodiment, for example, the application  may be implemented as one or more SAS\u00ae software application programs made by SAS Institute Inc., Cary, N.C., such as SAS\/Management Console, SAS Information Map Studio, SAS Web Report Studio, Business Intelligence (BI) Dashboard, and so forth. The embodiments, however, are not limited to these examples.","The application  may include a form manager component . The form manager component  may be operative on the logic device  to generate, modify, or otherwise manage one or more electronic forms  for the application . Electronic forms  are an exemplary type of electronic document. Although embodiments may perform certain operations using electronic forms  as an example of an electronic document, it may be appreciated that the embodiments may perform the same or similar operations using any electronic documents as desired for a given implementation. The embodiments are not limited in this context.","In one embodiment, the form manager component  may manage one or more forms  of the application  during a run-time mode of the application . For example, assume an insurance company implements an online web application and web service in the mid-tier server  to allow insurance customers to fill-out and complete an electronic accident claims form. The form manager component  may store, retrieve, generate and otherwise manage various electronic accident claim forms as an example of the forms  on behalf of the web application implemented as the application .","A form  may be implemented using various GUI elements presented in a GUI view, or portion of a GUI view, that is specifically designed to allow a user to enter user data in a structured manner for processing by the application  on the logic device . A form  may comprise electronic media that provides an input template rendered using various GUI elements, such as checkboxes, radio buttons, text fields, and other GUI elements designed to query, present and receive data for a user. Similar to a paper form, a form  may comprise an electronic form implementing some combination of GUI elements arranged in a defined pattern to solicit requested or required information from a user. Each form  may be designed for a specific application . For instance, if the application  is an insurance application, the form  may comprise a claims form having questions, formatting, and style options suitable for an insurance customer. If the application  is a custom service application for a telecommunications company, the form  may comprise a subscriber form having questions, formatting, and style options suitable for a telecommunications subscriber. The type of application  and form  may vary according to implementation, and the embodiments are not limited in this context.","As shown in , the form manager component  may generate one or more forms  for the application . A form  may comprise, among other GUI elements, one or more form fields -, static form prompts -, and\/or dynamic form prompts -. It is worthy to note that \u201ca\u201d and \u201cb\u201d and \u201cc\u201d and similar designators as used herein are intended to be variables representing any positive integer. Thus, for example, if an implementation sets a value for a=5, then a complete set of form fields -may include form fields -, -, -, - and -. The embodiments are not limited in this context.","The form  may comprise one or more form fields -each capable of presenting and\/or receiving form values of different data types (e.g., text, numbers, symbols, etc.). A user may enter a form value, or select a form value from a list of form values, to populate a respective form field -of the form . For instance, a claims form for an insurance application may have a form field - for a name of a customer, a form field - for an address of a customer, a form field - for a contact number for a customer, and so forth. Each form field -may have content control to control a data type or formatting of information that can be entered into the form field -, such as textual information, numeric information, spacing, symbols, and so forth.","The form  may further comprise one or more static form prompts -and\/or dynamic form prompts -. A static form prompt -and a dynamic form prompt -are similar in that they are both designed to present content to assist a user in entering or selecting a form value for a form field -. Using the previous insurance example, a static form prompt - or a custom form prompt - associated with a form field - might have a text string such as \u201cYour name?\u201d to prompt a user to enter her name into the form field -. Further, content for a static form prompt -and -are similar in that the type of content may comprise any form of multimedia content, including textual information, numeric information, alphanumeric information, symbol information, sign information, graphical information, image information, audio information, video information, tactile information, olfactory information, and other multimedia content. A major difference between content for a static form prompt -and a dynamic form prompt -, however, is permanence of the content.","A static form prompt -may comprise a type of form prompt designed to present static content in a static presentation language. Static content may refer to fixed or unchanging content. During a design phase of a form , a form designer may define a static form prompt -with static content in the static presentation language that is presented during run-time of the application . The static content in the static presentation language remains the same during run-time of the application , and does not vary when the form  is presented in different geographic locations.","A dynamic form prompt -may comprise a type of form prompt designed to present custom content in a custom presentation language. Custom content may refer to dynamic or changing content. During a design phase of a form , a form designer may define a key for the dynamic form prompt -that corresponds to a resource stored in a database, such as a table. During run-time of the application , custom content for the dynamic form prompt -may be retrieved from the resource using the key, and the dynamic form prompt -may be presented with the custom content. When custom content for a resource changes, either before or after run-time of the application , the dynamic form prompt -may access and present the updated custom content during run-time of the application .","As previously described, a static form prompt -for a form  is typically designed with static content in a static presentation language appropriate for a given geographical region. For instance, a form  designed for presentation to users in the USA would use static form prompts -with content presented in the English language. A problem may occur, however, when a form  designed for one geographic region is presented in a different geographic region. For instance, if form  originally designed in the English language was to be used in a geographic region other than the USA, such as Korea, an administrator or a user of an application generating a form  would need to manually change static content for static form prompts -from the English language to the Korean language.","To solve these and other problems, the form manager component  may implement a custom prompt module  arranged to retrieve or generate custom content for dynamic form prompts -of a form . The custom prompt module  may determine whether an application context is available for a form prompt of a form , determine whether a custom language is available for the form prompt when the application context is available, and retrieve custom content for the form prompt when the custom language is available. In this manner, a form  may be automatically or programmatically transformed into different human languages suitable for multiple geographies during run-time of the application  without any manual human intervention.","It is worthy to note that although various embodiments describe the form manager component  and the custom prompt module  as generating custom content for dynamic form prompts -of a form , it may be appreciated that the form manager component  and the custom prompt module  may generate custom content for any configurable content of a form  using techniques similar to those described for processing dynamic form prompts -. Examples of configurable content may include without limitation a form description, version numbers, metadata, form values for a form field -, and any other configurable content of a form . The embodiments are not limited in this context.","The custom prompt module  may retrieve or generate custom content for dynamic form prompts -from a data structure storing custom prompt information . Custom prompt information  may include different versions of custom content, with each version of custom content comprising a same set of multimedia information such as textual information translated into a different custom presentation language. A custom presentation language may refer to a human language, such as the English language, the French language, the Spanish language, the German language, the Korean language, and other human languages. For instance, an English version of custom content may comprise textual information \u201cYour name?\u201d in the English language may have other versions of custom content such as a French version \u201cVotre nom?\u201d in the French language, a Spanish version \u201cSu nombre?\u201d in the Spanish language, and so forth.","In addition to actual custom content, custom prompt information  may include other types of control information useful for retrieving or locating custom content for a dynamic form prompt -. Examples of control information may include without limitation control words, codes, indices, properties, attributes, identifiers, metadata and other information useful in identifying custom content in a custom presentation language for a dynamic form prompt -. The embodiments are not limited in this context.","Custom prompt information  may be stored anywhere in the custom form generation system , including the client device , the mid-tier server , the back-end server , or another network device accessible by the custom prompt module  via the network . As shown in , for example, custom prompt information  may be provided by a form information source  implemented locally with the mid-tier server . This implementation may be suitable for stand-alone applications , such as productivity applications (e.g., word processor application, spreadsheet application, contact management application, scheduling application, etc.) typically used on a single computer. Additionally or alternatively, custom prompt information  may be provided by a form information source  implemented remotely in the back-end server . This implement may be desirable for large scale commercial business applications, such as a line-of-business (LOB) application for a LOB system. A LOB system generally includes various LOB application programs typically implemented on enterprise hardware platforms for a business entity. LOB application programs are application programs designed to provide various business application services. Examples of LOB application programs may include a Customer Relationship Management (CRM) application program, an Enterprise Resource Planning (ERP) application program, a Supply Chain Management (SCM) application program, Business Intelligence (BI) application program, and other business application programs using business-oriented application logic.","The mid-tier server  may further include a user interface component . The user interface component  may generally provide a user interface, such as a GUI engine, for the application . The user interface component  may be implemented natively as part of the application , or as part of another software program, such as an operating system (OS) or other system program. In one embodiment, the user interface component  may be operative on the logic device  to generate a user interface view  with a form  having form fields -, static form prompts -, and\/or dynamic form prompts -in the form  for presentation on an electronic display.","The mid-tier server  may be communicatively coupled to other network devices of the custom form generation system  via a network , including a client device  and a back-end server , for example. The network  may communicate information between the client device , the mid-tier server , and the back-end server , as well as any other network devices connected to the network . The network  may comprise any type of private or public network, including packet-switched networks (e.g., public networks such as the Internet, private networks such as an enterprise intranet, and so forth), circuit-switched networks (e.g., the public switched telephone network), or a combination of packet-switched networks and circuit-switched networks (with suitable gateways and translators). Further, the network  may be implemented as a wired network, a wireless network, or a combination of both.","When implemented as a wired network, for example, the network  may include one or more elements arranged to communicate information over one or more wired communications media. Examples of wired communications media may include a wire, cable, printed circuit board (PCB), backplane, switch fabric, semiconductor material, twisted-pair wire, co-axial cable, fiber optics, and so forth. The wired communications media may be connected to a device using an input\/output (I\/O) adapter. The I\/O adapter may be arranged to operate with any suitable technique for controlling information signals between elements using a desired set of communications protocols, services or operating procedures. The I\/O adapter may also include the appropriate physical connectors to connect the I\/O adapter with a corresponding communications medium. Examples of an I\/O adapter may include a network interface, a network interface card (NIC), disc controller, video controller, audio controller, and so forth. The embodiments are not limited in this context.","When implemented as a wireless network, for example, the network  may include one or more wireless elements arranged to communicate information over one or more types of wireless communication media. An example of wireless communication media may include portions of a wireless spectrum, such as the radio-frequency (RF) spectrum. The wireless elements may include components and interfaces suitable for communicating information signals over the designated wireless spectrum, such as one or more antennas, wireless transmitters, receiver, transmitters\/receivers (\u201ctransceivers\u201d), amplifiers, filters, control logic, antennas, and so forth. The embodiments are not limited in this context.","The mid-tier server  may communicate information with one or more back-end servers  via the network . A back-end server  may comprise any electronic device capable of executing a defined set of logic using a logic device . In one embodiment, the logic device  may comprise a processing system. The processing system may comprise, for example, a general purpose processor or a special purpose processor and one or more memory units, as described in more detail with reference to . The embodiments, however, are not limited in this context.","The back-end server  may comprise or implement one or more form information sources . Each of the form information sources  may comprise or implement database technologies arranged to store, update, retrieve and\/or manage various types of custom prompt information , such as a database management system (DBMS) comprising database management software and network storage units. For instance, a form information source  may be implemented as a storage area network (SAN).","The back-end server  may include one or more form information sources  arranged for execution by a logic device . The form information source  may have one or more sets of custom prompt information . During run-time of the application , the custom prompt module  of the form manager component  may retrieve custom content from custom prompt information  managed by the form information source  of the back-end server  via the network . The back-end server  may implement any number of server technologies to allow such remote access.","In one embodiment, for example, the back-end server  may implement a web service to manage and access custom prompt information  stored by form information source . A web service is any software system designed to support interoperable machine-to-machine (M2M) interaction over the network . In one embodiment, the implemented web service has an interface described in a machine-processable format, such as a web services description language (WSDL) format. Other systems interact with the web service in a manner prescribed by its description using simple object access protocol (SOAP) messages, typically conveyed using hypertext transfer protocol (HTTP) with an XML serialization in conjunction with other web-related standards. The web service may use different classes of web services. Two major classes of web services may include representational state transfer (REST)-compliant web services, in which the primary purpose of the service is to manipulate XML representations of web resources using a uniform set of \u201cstateless\u201d operations, and arbitrary web services, in which the service may expose an arbitrary set of operations. The web service may implement web services using a number of different techniques, including without limitation remote procedure call (RPC) techniques, service-oriented architecture (SOA) techniques, and REST techniques. The embodiments are not limited in this context.","The mid-tier server  may also communicate information to one or more client devices  via the network . A client device  may comprise any electronic device capable of executing a defined set of logic using a logic device . In one embodiment, the logic device  may comprise a processing system. The processing system may comprise, for example, a general purpose processor or a special purpose processor and one or more memory units, as described in more detail with reference to . The embodiments, however, are not limited in this context.","The client device  may include a form viewer  arranged for execution by the logic device . The form viewer  may be arranged to present a user interface view  with a form  having one or more form fields and dynamic form prompts presenting various types of custom prompt information . As shown in , the form viewer  may comprise a separate stand-alone software program, such as a thin-client application installed on the client device . In this case, the form viewer  may comprise software executed by the logic device  of the client device  and capable of presenting a user interface view  with a form . Additionally or alternatively, the form viewer  may comprise software integrated with the application  and accessible by the client device  via a web browser. In this case, the form viewer  may comprise software executed by the logic device  of the mid-tier server  and capable of generating web pages with a form . The embodiments are not limited in this context.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 2","b":["200","100","200","160","154","200","100","160","154","144","106"],"i":["c ","c "]},"As previously described, the custom prompt module  may supply custom content for all relevant parts of a form , such as a set of dynamic form prompts -, to present the form  in a language specifically suited to an end-user of the form . In the illustrated embodiment shown in , the custom prompt module  may comprise or implement an application context interface  arranged to establish an application context for a dynamic form prompt -of a form . The application context interface  provides an application context class that allows a form designer to provide a set of translations and store them as custom content in the custom prompt information  of the form information source . The application context is passed to the custom prompt module  where it becomes recursively available to all dynamic form prompts -or groups of dynamic form prompts -that are part of a form .","As shown in , the custom prompt module  may include an application context interface . In one embodiment, for example, the application context interface  may be implemented as an application program interface (API) of the form manager component  or the custom prompt module . The application context interface  may receive a form prompt query  from the form viewer  arranged to present a form . The form prompt query  may initiate customization operations to retrieve or generate custom content for dynamic form prompts -of the form . The application context interface  may receive the form prompt query , and set or check for presence of a delegate that may be used to retrieve or generate custom content for dynamic form prompts -for a form . In some cases, prior to setting a new delegate, the application context interface  may need to void a previous delegate used to generate a previous dynamic form prompt -and\/or a previous form .","The custom prompt module  may further include a custom language interface . The custom language interface  may comprise an example of a delegate for the application context interface . In one embodiment, for example, the custom language interface  may be implemented as an application program interface (API) of the form manager component  or the custom prompt module .","The custom language interface  may retrieve custom content for dynamic form prompts -using a form prompt identifier  and a location identifier . The custom language interface  may receive a form prompt identifier  and a location identifier  from the application context interface  or the custom prompt module  to initiate generation of a dynamic form prompt -. The form prompt identifier  may uniquely identify a dynamic form prompt -. The location identifier  may uniquely identify a geographic location and\/or a custom presentation language for a geographic location for a dynamic form prompt -. For instance, the location identifier  may identify an actual human language, such as the English language, or a geographic location that implies an actual human language, such as the USA implying the English language. The custom language interface  may use the form prompt identifier  and the location identifier  to access custom content stored as part of the custom prompt information . The custom language interface  may then generate or present a dynamic form prompt -using the custom content.","The custom language interface  may retrieve custom content needed to generate the dynamic form prompts -from custom prompt information  managed by a form information source , . The operating environment  illustrates a case where the custom language interface  retrieves custom content from custom prompt information  managed by the form information source  implemented by the back-end server  using a series of messages communicated via the network . In this case, the form information source  is operative on a logic device  to retrieve the custom content from the custom prompt information . However, the custom language interface  may also retrieve custom content from custom prompt information  managed by the form information source  implemented by the mid-tier server  using similar messages or signals communicated via a local bus structure or communication fabric of the mid-tier server . In this case, the form information source  is operative on the logic device  to retrieve the custom content from the custom prompt information .","The custom language interface  may generate a form prompt translation query  in response to a form prompt query  using information from the form prompt query  and\/or the application context interface . The form prompt query  may include, for example, the form prompt identifier  and the location identifier . The form prompt translation query  may include, for example, the form prompt identifier  and the location identifier  retrieved from the form prompt query . Alternatively, form prompt identifiers and location identifiers  may be stored and retrieved from a data structure managed by the form manager component . The custom language interface  may send the form prompt translation query  to retrieve custom content from custom prompt information  managed by the form information source  stored by the back-end server .","The back-end server  may receive the prompt translation query , and the form information source  may search for custom content stored as part of the custom prompt information  using the form prompt identifier  and location identifier  retrieved from the prompt translation query . Once located, the form information source  may send a prompt translation response  with the custom content retrieved from the custom prompt information  to the mid-tier server .","The custom language interface  may receive the prompt translation response  with the custom content from the form information source . The custom content may comprise, for example, a presentation string having one or more signs from a vocabulary of the custom presentation language. The custom language interface  may perform any necessary processing of the custom content, such as formatting operations, style operations, data schema conversations, and so forth. The custom language interface  may forward the custom content to the form viewer  of the client device  via a form prompt response .","The form viewer  may receive the form prompt response , retrieve the custom content, and present the dynamic form prompt -with the custom content as part of a user interface view  on the digital display. The operating environment  illustrates a case where the custom language interface  sends the custom content to the form viewer  implemented by the client device  using a series of messages communicated via the network . In this case, the form viewer  is operative on a logic device  to present the form  and the dynamic form prompts -with the custom content on a digital display. However, the custom language interface  may also send the custom content to a form viewer  implemented by the mid-tier server  using similar messages or signals communicated via a local bus structure or communication fabric of the mid-tier server . In this case, the form viewer  is operative on the logic device  to present the form  and the dynamic form prompts -with the custom content on a digital display.","The unique custom form generation system  provides a robust architecture for presenting and localizing electronic form  in that it can handle both static form prompts -and dynamic form prompts -in varying combinations and conditions. For example, in addition to the above-described exemplary scenarios for dynamic form prompts -, in those cases where a form  includes only static form prompts -, the form viewer  may present the form  with static content coded for the static form prompts -. This allows the form viewer  to handle and present any legacy forms  of the application . In those cases where a form  includes both static form prompts -and dynamic form prompts -, the form viewer  may present the form  with static content coded for the static form prompts -and custom content retrieved for the dynamic form prompts -. This may be desired for forms  designed for multi-lingual users where one language is known at design time while other languages are dependent on a geographic location. In those cases where a form  includes only dynamic form prompts -, and resources needed to support dynamic form prompts -are missing or unavailable, the form viewer  may present the form  with default custom content or default static content for the dynamic form prompts -. This will allow the form viewer  to present a form  even with missing or unavailable resources. Examples of missing or unavailable resources may include without limitation a missing or failed custom prompt module  for the application , an application context interface , a custom language interface , a form identifier , a location identifier , a lost message (e.g., messages , , , or ), a network , a network connection for the network , a communication component for a device (e.g., devices , , or ), and so forth.","Operations for the above-described embodiments may be further described with reference to one or more logic flows. It may be appreciated that the representative logic flows do not necessarily have to be executed in the order presented, or in any particular order, unless otherwise indicated. Moreover, various activities described with respect to the logic flows can be executed in serial or parallel fashion. The logic flows may be implemented using one or more hardware elements and\/or software elements of the described embodiments or alternative elements as desired for a given set of design and performance constraints. For example, the logic flows may be implemented as logic (e.g., computer program instructions) for execution by a logic device (e.g., a general-purpose or specific-purpose computer).",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 3","b":["300","300","300","100","122"]},"In the illustrated embodiment shown in , the logic flow  may receive by a processor circuit a request for custom content for a dynamic form prompt of an electronic form at block . For example, the custom prompt module  of the form manager component  of the application  may receive by a processor circuit a request for custom content for a dynamic form prompt - of an electronic form.","The logic flow  may retrieve custom content in a custom presentation language for the dynamic form prompt from custom prompt information managed by a form information source at block . For example, the custom prompt module  may retrieve custom content in a custom presentation language for the dynamic form prompt - from custom prompt information  managed by a form information source , .","The logic flow  may present the dynamic form prompt with the custom content in the custom presentation language in the form on an electronic display at block . For example, the custom prompt module  may send the custom content to the form viewer , and the form viewer  may present the dynamic form prompt with the custom content in the custom presentation language in the form  on an electronic display of the client device .","Additionally or alternatively, the logic flow  may present a static form prompt - with static content in a static presentation language in the form  on the electronic display. For example, the form viewer  may present both the static form prompt - with static content in a static presentation language and the dynamic form prompt - in the same form  on the electronic display, thereby allowing the form  to present multiple types of prompt information.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 4","b":["400","100","400","144","400","120","122","120","160","400","120","400","126","142"],"i":"c"},"As shown in , the table  may include a first column for a form prompt identifier  (sometimes referred to as a \u201cprompt key\u201d), a second column for a set of custom content , and a third column for a location identifier . The form prompt identifier  corresponds to the form prompt identifier  and is used to index the table . The content  is a translation of content in a given language as identified by the location identifier . The location identifier  corresponds to the location identifier , and indicates a custom presentation language for a given geographic location.","When a form information source  (or ) receives the prompt translation query , the form information source  may retrieve an embedded form prompt identifier  and location identifier  for a dynamic form prompt -, such as a dynamic form prompt -. The form information source  may search the table  for a form prompt identifier  that matches the form prompt identifier . For instance, as shown in , assume the form prompt identifier  is \u201cname.text.\u201d The form information source  may search and locate a row - having a form prompt identifier  of \u201cname.text.\u201d The form information source  may then use the location identifier  to search column - for a matching location identifier . For instance, as shown in , assume the location identifier  is \u201cFrench.\u201d The form information source  may search and locate a row - in the column - having a location identifier  of \u201cFrench.\u201d The form information source  may then retrieve the custom content  of row -, which in this example is \u201cVotre nom.\u201d The form information source  may return the custom content  in a prompt translation response  to the prompt translation query .",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 5","FIG. 5"],"b":["220","100","220","220"]},"One purpose of the application context interface  is to let the application  provide some context to the form manager component  embedded in the application . The application context interface  provides for setting and getting a custom language interface , referred to in the example as a ResourceBundleDelegate interface. The form manager component  may take a form designer's implementation of the ResourceBundleDelegate interface and set it on the application context interface . The application  and\/or the form manager component  should set the application context on a well-known object so that the form manager component  can automatically obtain it. In one embodiment, for example, the form manager component  looks on the Java ServletContext object. However, using the ServletContext object is merely by way of example and not limitation. Other objects can be used as well, and the embodiments are not limited in this context.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 6","FIG. 6"],"b":["230","100","230","230"]},"The custom language interface  implements an interface referred to in  as a ResourceBundleDelegate interface. The ResourceBundleDelegate interface includes a getText method to accept a String key and a Java Locale class. The String key is an implementation for the form prompt identifier . The Java Locale class is an implementation for the location identifier . Using these two inputs, the getText method returns localized text (e.g., custom content ) corresponding to the String key (e.g., form prompt identifier ).","The custom language interface  also implements a destroy method. The destroy method is an optional feature that allows for life cycle management of resources used in the concrete implementation. When included as part of the custom language interface , the form manager component  can be certain that the destroy method will be called after a dynamic form prompt -has been generated. The destroy method can then do clean-up of resources such as closing databases or file handles.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 7","b":["700","700","700","100","120","122"]},"The dynamic form prompts -that make up a form  may be organized into logical groups, and logical groups can have an indefinite number of subgroups. Each group can have an indefinite number of dynamic form prompts -. This supports creation of rather complex forms. To make them ready for use in a user interface view , dynamic form prompts -and groups of dynamic form prompts -are loaded from a persistence format of extensible markup language (XML). At the time of loading, the form manager component  injects the application context recursively into all prompts. Thus all dynamic form prompts -have access to the application context. This process is demonstrated in the logic flow .","In the illustrated embodiment shown in , the logic flow  begins when the application  creates an application context interface  for the form manager component  at block . The application  creates a custom language interface  called ResourceBundleDele gate and sets it on the application context interface  at block . The application  displays a form  via the form viewer  to a user using the application context interface  at block . The form  gets form prompt identifiers  for the dynamic form prompts -of the form  from a form prompt definition at block . The form manager component  is now ready to generate a form  with custom content for one or more dynamic form prompts -",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 8","b":["800","800","800","100","120","122","160","154"],"i":"c "},"To display dynamic form prompts -in a form  shown as part of a user interface view , calls are made from the form  to get custom content for each dynamic form prompt -. As shown in logic flow , the form manager component  determines whether an application context interface  is available for a dynamic form prompt - at diamond 802.1f an application context interface  is not available, then default content for the dynamic form prompt -is used at block , and the dynamic form prompt - with the default content is presented in the form  to a user at block . However, if an application context interface  is available, then the form manager component  calls the custom language interface  (e.g., getResourceBundleDelegate method) on the application context interface  to determine whether the custom language interface  is available at diamond . If the application context interface  returns a null value indicating a ResourceBundleDelegate is not available, then default content for the dynamic form prompt - is used at block , and the dynamic form prompt - with the default content is presented in the form  to a user at block . However, if the application context interface  returns a ResourceBundleDelegate indicating the custom language interface  is available, the form manager component  calls the getText method on the ResourceBundleDelegate. The form manager component  and\/or the application context interface  passes in a form prompt identifier  (e.g., a String key parameter) and a location identifier  (e.g., a Locale parameter) to retrieve appropriate custom content  from custom prompt information  from a form information source ,  at block . The form manager component  uses the custom content  for the dynamic form prompt - at block . The logic flow  may then be repeated for a next dynamic form prompt - of the form . This logic may be repeated until custom content  has been retrieved for all the dynamic form prompts -(or other localizable content) of the form .","The logic flow , or a similar process as the logic flow , may be implemented to process static form prompts -as well. In this case, where there is no application context interface  or custom language interface  (e.g., a ResourceBundleDelegate) available for a static form prompt - at diamonds  or , then the form manager component  retrieves static content for the static form prompt - at block , and presents the static form prompt - with the static content in the form  at block . This process may be repeated for static form prompt -, - . . . -until all static form prompts -for an electronic form  have been processed. In this manner, the logic flow  may process both static form prompts -and dynamic form prompts -in a single logic flow.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 9","b":["900","900","900","100","120","122","160","154"],"i":"c "},"As previously described, the custom language interface  as described with reference to  also implements a destroy method. The destroy method is an optional feature that allows for life cycle management of resources used in the concrete implementation. When included as part of the custom language interface , the form manager component  can be certain that the destroy method will be called after a dynamic form prompt -has been generated. The destroy method can then do clean-up of resources such as closing databases or file handles. This process may be demonstrated by the logic flow .","In the illustrated embodiment shown in , the logic flow  may begin when the application context interface  receives a SessionDestroyed event indicating a session for a form  has been terminated at block . When a user terminates a session or it times out, the application context interface  will be automatically notified by existing behavior of the Java HttpSession or the Adobe Flex session objects because the application context interface  is programmed to listen for this type of event. When this occurs, the application context interface  calls a destroy method on itself at block . The application context interface  then calls a destroy method on the custom language interface  at block . The delegate implementation provided by a form designer will now be able to clean up any resources and do an orderly shutdown of operations.","The architecture of a custom prompt module  having an application context interface  and a custom language interface  allows a form manager component  to process both a set of electronic forms  that need localization and a set of electronic forms  (legacy forms) that do not need localization or do not have resources for localization. For those use scenarios where a form designer does not need localization, the form designer would design a form  with static form prompts -without a form prompt identifier , and the static form prompts -would simply return that text. For example, the form designer could provide a static form prompt - with static content such as \u201cYour name?\u201d without a custom language interface  for the static form prompt -, and the static form prompt - would simply display the text string \u201cYour name?\u201d as the static form prompt -. This technique does not burden form designers with the complexity of localization when they do not need or want localization services.","However, when a form designer does need localization services, the form designer may create dynamic form prompts -using a form prompt identifier  matching a form prompt identifier  in the table  of the custom prompt information . For example, if a form prompt identifier  is \u201cname.text,\u201d then \u201cname.text\u201d will be passed to the form information source  to match it with a form prompt identifier  in the table  of the custom prompt information . In our previous example, the form information source  could return custom content  of \u201cYour name?\u201d for a match of intersection -, - in table  in an English language, or \u201cVotre nom?\u201d for a match of intersection -, - in table  in a French language. By checking for the presence of the application context interface  and the custom language interface , the custom prompt module  will use custom content  for a dynamic form prompt -if present, or continue with its original behavior if not.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 10","b":["1000","1000","100","1020","1020","102","104","106","100","1020"]},"The device  may execute processing operations or logic for the custom form generation system  as previously described using a processing component . The processing component  may comprise various hardware elements, software elements, or a combination of both. Examples of hardware elements may include devices, logic devices, components, processors, microprocessors, circuits, processor circuits, circuit elements (e.g., transistors, resistors, capacitors, inductors, and so forth), integrated circuits, application specific integrated circuits (ASIC), programmable logic devices (PLD), digital signal processors (DSP), field programmable gate array (FPGA), memory units, logic gates, registers, semiconductor device, chips, microchips, chip sets, and so forth. Examples of software elements may include software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces (API), instruction sets, computing code, computer code, code segments, computer code segments, words, values, symbols, or any combination thereof. Determining whether an embodiment is implemented using hardware elements and\/or software elements may vary in accordance with any number of factors, such as desired computational rate, power levels, heat tolerances, processing cycle budget, input data rates, output data rates, memory resources, data bus speeds and other design or performance constraints, as desired for a given implementation.","The device  may execute communications operations or logic for the custom form generation system  as previously described using communications component . The communications component  may implement any well-known communications techniques and protocols, such as techniques suitable for use with packet-switched networks (e.g., public networks such as the Internet, private networks such as an enterprise intranet, and so forth), circuit-switched networks (e.g., the public switched telephone network), or a combination of packet-switched networks and circuit-switched networks (with suitable gateways and translators). The communications component  may include various types of standard communication elements, such as one or more communications interfaces, network interfaces, network interface cards (NIC), radios, wireless transmitters\/receivers (transceivers), wired and\/or wireless communication media, physical connectors, and so forth. By way of example, and not limitation, communication media  includes wired communications media and wireless communications media. Examples of wired communications media may include a wire, cable, metal leads, printed circuit boards (PCB), backplanes, switch fabrics, semiconductor material, twisted-pair wire, co-axial cable, fiber optics, a propagated signal, and so forth. Examples of wireless communications media may include acoustic, radio-frequency (RF) spectrum, infrared and other wireless media .","The device  may communicate with other devices ,  over a communications media  using communications signals  via the communications component . For instance, assume the logic device , the application , the form manager component , the custom prompt module , the application context interface , the custom language interface , the form information source , the custom prompt information , the user interface component , and the form viewer  are all implemented by a server or server array using web technologies, such as web applications and web services, as part of a cloud computing framework. For instance, the application  may comprise a SAS software application such as BI software or statistical analysis software implemented as a hosted application by a server of a server array represented by the device .","The devices ,  may comprise fixed or mobile electronic devices, such as smart phones or tablet computers, accessing the computer device  to execute and manipulate the application  and the form manager component , including generating and populating a form . The devices ,  may access applications and services using a web browser, a thin-client application interoperable with the application , a web gadget, a web part, a web application, or other client software suitable for accessing cloud computing applications and services. Information may be communicated between the devices , ,  as communications signals  via communications media  (e.g., part of network ).","In various embodiments, the devices , , and  may comprise or be implemented as electronic devices each having computing and\/or communications capabilities provided by exemplary processing component  and communications component , respectively. Example electronic devices may include without limitation a mobile device, a personal digital assistant, a mobile computing device, a smart phone, a cellular telephone, a handset, a one-way pager, a two-way pager, a messaging device, a computer, a personal computer (PC), a desktop computer, a laptop computer, a notebook computer, a handheld computer, a tablet computer, a server, a server array or server farm, a web server, a network server, an Internet server, a work station, a mini-computer, a mainframe computer, a supercomputer, a network appliance, a web appliance, multiprocessor systems, processor-based systems, or any combination thereof. The embodiments are not limited in this context.","In various embodiments, components and\/or modules of the custom form generation system , and any electronic devices implementing some or all of the components and\/or modules of the custom form generation system , such as the client device , the mid-tier server , the back-end server , the device , the device , and the device , may be communicatively coupled via various types of communications media  as indicated by various lines, arrows, or clouds. The devices, components and\/or modules may coordinate operations between each other. The coordination may involve the uni-directional or bi-directional exchange of information. For instance, the devices, components and\/or modules may communicate information in the form of signals  communicated over the communications media . The information can be implemented as signals  allocated to various signal lines. In such allocations, each message is a signal. Further embodiments, however, may alternatively employ data messages. Such data messages may be sent across various connections. Exemplary connections within a device include parallel interfaces, serial interfaces, and bus interfaces. Exemplary connections between devices may comprise network connections over a wired or wireless communications network .",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 11","b":["1100","1100","100"]},"In various embodiments, the custom form generation system  may be implemented as part of a distributed system . A distributed system  typically comprises multiple autonomous computers that communicate through a computer network, such as network . The computers interact with each other in order to achieve a common goal, such as solving computational problems. For example, a computational problem may be divided into many tasks, each of which is solved by one computer. A computer program that runs in a distributed system is called a distributed program, and distributed programming is the process of writing such programs. Examples of a distributed system may include without limitation a client-server architecture, a 3-tier architecture, an N-tier architecture, a tightly-coupled or clustered architecture, a peer-to-peer architecture, a master-slave architecture, a shared database architecture, and other types of distributed systems. It is worthy to note that although some embodiments may utilize a distributed system  when describing various enhanced document customization techniques, it may be appreciated that the enhanced document customization techniques may be implemented by a single computing device as well. The embodiments are not limited in this context.","The client device  and the server device  may process information using the processing components , which are similar to the processing component  described with reference to . The client device  and the server device  may communicate with each over a communications media  using communications signals  via communications components , which are similar to the communications component  described with reference to .","In one embodiment, for example, the distributed system  may be implemented as a client-server system. A client device  may implement the application  of the custom form generation system , a browser , a processing component , and a communications component . A server device  may implement all other software components and modules of the custom form generation system , as well as a processing component  and a communications component .","In various embodiments, the client device  may comprise or employ one or more client computing devices and\/or client programs that operate to perform various methodologies in accordance with the described embodiments. For instance, assume the logic device  and the application  are implemented by a client device , such as a smart phone, hand held computer, or tablet computer. In this case, the application  may comprise a SAS software application such as BI software or statistical analysis software implemented as a client application on the client device . The client device  may execute and manipulate the application  via local input\/output (I\/O) devices attached to the client device  (e.g., a keyboard, touchscreen display, mouse, pointing device, etc.).","In various embodiments, the server device  may comprise or employ one or more server computing devices and\/or server programs that operate to perform various methodologies in accordance with the described embodiments. For example, when installed and\/or deployed, a server program may support one or more server roles of the server computing device for providing certain services and features. Exemplary server systems  may include, for example, stand-alone and enterprise-class server computers operating a server OS such as a MICROSOFT\u00ae OS, a UNIX\u00ae OS, a LINUX\u00ae OS, or other suitable server-based OS. Exemplary server programs may include, for example, communications server programs for managing incoming and outgoing messages, messaging server programs for providing unified messaging (UM) for e-mail, voicemail, VoIP, instant messaging (IM), group IM, enhanced presence, and audio-video conferencing, and\/or other types of programs, applications, or services in accordance with the described embodiments. In one embodiment, the server device  may implement a web services framework for hosting form generating services of the dynamic form prompt system  as implemented by the server device . For instance, the server device  may implement the form manager component , the custom prompt module , the application context interface , the custom language interface , the form information source , the custom prompt information , the user interface component , and the form viewer .","When the application  needs to generate or access a form , the client device  may establish a network connection with the server device  over communications media  using signals  to access the form generating services provided by the server device . For example, the application  may communicate a request to the form manager component  over a network connection between devices , . The form manager component  may use the custom prompt module  to populate a form  with dynamic form prompts -using custom prompt information  stored by the server device . Additionally or alternatively, the client device  may access the form generating services hosted by the server device  via the browser . The browser  may render a form  as a web page, such as a hypertext markup language (HTML) or extensible markup language (XML) document, and use web browsing technology to populate the form  with dynamic form prompts -",{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 12","b":["1200","100","1200","160","154","160","154"],"i":["c ","c "]},"As shown in the GUI view , a form designer can enter into a field labeled \u201cName:\u201d a prompt name as a convenient identifier. The form designer can next enter into a field labeled \u201cDisplayed text:\u201d a prompt label key , which in this case is a key \u201cname.text.\u201d The form designer can enter into a field labeled \u201cDescription:\u201d a prompt description key , which in this case is \u201cnameDesc.text.\u201d Each of the keys ,  may serve as form prompt identifiers  to retrieve associated custom content . This illustrates a case where a single dynamic form prompt - can use multiple keys ,  to retrieve different types of custom content  for multiple areas of localized text, such as a prompt label, a prompt description, a list of prompt values from which to select for a form field - corresponding to the dynamic form prompt -, and other localized text. The embodiments are not limited in this context.","Once configured, the dynamic form prompt - can take advantage of runtime localization. Since the information entered for the dynamic form prompt - are keys rather than human-readable text strings, the dynamic form prompt - may present custom content  as human-readable text strings in a custom presentation language as returned from the custom language interface  at run-time of the application . Which particular custom content  may be determined based on a geographical location as indicated by a location identifier .",{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 13","b":["1300","100","1300","150","154","154","160","1","160","2","160","3","404","1300","154","160","1","156","1","154","160","2","156","2","154","160","3","156","3"]},"The form  may further comprise other types of dynamic content, such as one or more dynamic prompt descriptions -. The dynamic prompt descriptions -may present custom content  for a geographic location using techniques similar to those described with respect to dynamic form prompts -. As shown in the GUI view , for example, the form  may include three dynamic prompt descriptions -, - and -, each with custom content  for a geographic location USA that utilizes the English language. As shown in the GUI view , the form  may comprise a dynamic prompt description - with a localized text string \u201cGive your first name and last name.\u201d to provide a more detailed description for custom form prompt - to assist a user in entering her name into a form field -. The form  may comprise a dynamic prompt description - with a localized text string \u201cPlease give your street address.\u201d to provide a more detailed description for custom form prompt - to assist a user in entering her address into a form field -. The form  may comprise a dynamic prompt description - with a localized text string \u201cWhere do you live?\u201d to provide a more detailed description for custom form prompt - to assist a user in entering her city into a form field -.","Once the user enters her information, the user may select the control button  labeled \u201cOK\u201d to complete the form . The completed form  may then be processed using conventional techniques.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 14","b":["1400","100","1300","1400","150","154","1300","154","160","1","160","2","160","3","404","154","404","1300","154","160","1","156","1","154","160","2","156","2","154","160","3","156","3","1304","1","1304","2","1304","3","1302","154"]},{"@attributes":{"id":"p-0114","num":"0113"},"figref":["FIG. 15","FIGS. 13, 14"],"b":["1500","100","1500","160","1","160","2","160","3","1502","160","1","1504","160","2","1506","160","3"]},{"@attributes":{"id":"p-0115","num":"0114"},"figref":["FIG. 16","FIG. 16"],"b":["230","100","230","230"]},"The custom language interface  as shown in  is an implementation of a ResourceBundleDele gate interface that supports a prompt group of the three dynamic form prompts -, - and - as shown in . As indicated in , a code portion  is designed to return localized for the text custom form prompt -, a code portion  is designed to return localized text for the custom form prompt -, and a code portion  is designed to return localized text for the custom form prompt -. A code portion  may call a destroy method to clean-up and release resources.",{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 17","b":["1700","100","1700","1700"]},"As shown in , the computing architecture  comprises a processing unit , a system memory  and a system bus . The processing unit  can be any of various commercially available processors. Dual microprocessors and other multi-processor architectures may also be employed as the processing unit . The system bus  provides an interface for system components including, but not limited to, the system memory  to the processing unit . The system bus  can be any of several types of bus structure that may further interconnect to a memory bus (with or without a memory controller), a peripheral bus, and a local bus using any of a variety of commercially available bus architectures.","The system memory  may include various types of memory units, such as read-only memory (ROM), random-access memory (RAM), dynamic RAM (DRAM), Double-Data-Rate DRAM (DDRAM), synchronous DRAM (SDRAM), static RAM (SRAM), programmable ROM (PROM), erasable programmable ROM (EPROM), electrically erasable programmable ROM (EEPROM), flash memory, polymer memory such as ferroelectric polymer memory, ovonic memory, phase change or ferroelectric memory, silicon-oxide-nitride-oxide-silicon (SONOS) memory, magnetic or optical cards, or any other type of media suitable for storing information. In the illustrated embodiment shown in , the system memory  can include non-volatile memory  and\/or volatile memory . A basic input\/output system (BIOS) can be stored in the non-volatile memory .","The computer  may include various types of computer-readable storage media, including an internal hard disk drive (HDD) , a magnetic floppy disk drive (FDD)  to read from or write to a removable magnetic disk , and an optical disk drive  to read from or write to a removable optical disk  (e.g., a CD-ROM or DVD). The HDD , FDD  and optical disk drive  can be connected to the system bus  by a HDD interface , an FDD interface  and an optical drive interface , respectively. The HDD interface  for external drive implementations can include at least one or both of Universal Serial Bus (USB) and IEEE 1394 interface technologies.","The drives and associated computer-readable media provide volatile and\/or nonvolatile storage of data, data structures, computer-executable instructions, and so forth. For example, a number of program modules can be stored in the drives and memory units , , including an operating system , one or more application programs , other program modules , and program data . The one or more application programs , other program modules , and program data  can include, for example, the dynamic form system , the IPC component , the remote event bridge , and other software elements described with the embodiments.","A user can enter commands and information into the computer  through one or more wire\/wireless input devices, for example, a keyboard  and a pointing device, such as a mouse . Other input devices may include a microphone, an infra-red (IR) remote control, a joystick, a game pad, a stylus pen, touch screen, or the like. These and other input devices are often connected to the processing unit  through an input device interface  that is coupled to the system bus , but can be connected by other interfaces such as a parallel port, IEEE 1394 serial port, a game port, a USB port, an IR interface, and so forth.","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , a computer typically includes other peripheral output devices, such as speakers, printers, and so forth.","The computer  may operate in a networked environment using logical connections via wire and\/or wireless communications to one or more remote computers, such as a remote computer . The remote computer  can be a workstation, a server computer, a router, a personal computer, portable computer, microprocessor-based entertainment appliance, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer , although, for purposes of brevity, only a memory\/storage device  is illustrated. The logical connections depicted include wire\/wireless connectivity to a local area network (LAN)  and\/or larger networks, for example, a wide area network (WAN) . Such LAN and WAN networking environments are commonplace in offices and companies, and facilitate enterprise-wide computer networks, such as intranets, all of which may connect to a global communications network, for example, the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a wire and\/or wireless communication network interface or adapter . The adapter  can facilitate wire and\/or wireless communications to the LAN , which may also include a wireless access point disposed thereon for communicating with the wireless functionality of the adapter .","When used in a WAN networking environment, the computer  can include a modem , or is connected to a communications server on the WAN , or has other means for establishing communications over the WAN , such as by way of the Internet. The modem , which can be internal or external and a wire and\/or wireless device, connects to the system bus  via the input device interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, can be stored in the remote memory\/storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.","The computer  is operable to communicate with wire and wireless devices or entities using the IEEE 802 family of standards, such as wireless devices operatively disposed in wireless communication (e.g., IEEE 802.11 over-the-air modulation techniques) with, for example, a printer, scanner, desktop and\/or portable computer, personal digital assistant (PDA), communications satellite, any piece of equipment or location associated with a wirelessly detectable tag (e.g., a kiosk, news stand, restroom), and telephone. This includes at least Wi-Fi (or Wireless Fidelity), WiMax, and Bluetooth\u2122 wireless technologies. Thus, the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices. Wi-Fi networks use radio technologies called IEEE 802.11x (a, b, g, etc.) to provide secure, reliable, fast wireless connectivity. A Wi-Fi network can be used to connect computers to each other, to the Internet, and to wire networks (which use IEEE 802.3-related media and functions).",{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 18","b":["1800","100","130","1800","1800"]},"As shown in , the communications architecture  comprises includes one or more clients  and servers . The clients  may comprise or implement the client devices , . The servers  may comprise or implement the server devices , , . The clients  and the servers  are operatively connected to one or more respective client data stores  and server data stores  that can be employed to store information local to the respective clients  and servers , such as cookies and\/or associated contextual information.","The clients  and the servers  may communicate information between each other using a communication framework . The communications framework  may implement any well-known communications techniques, such as techniques suitable for use with packet-switched networks (e.g., public networks such as the Internet, private networks such as an enterprise intranet, and so forth), circuit-switched networks (e.g., the public switched telephone network), or a combination of packet-switched networks and circuit-switched networks (with suitable gateways and translators). The clients  and the servers  may include various types of standard communication elements designed to be interoperable with the communications framework , such as one or more communications interfaces, network interfaces, network interface cards (NIC), radios, wireless transmitters\/receivers (transceivers), wired and\/or wireless communication media, physical connectors, and so forth. By way of example, and not limitation, communication media includes wired communications media and wireless communications media. Examples of wired communications media may include a wire, cable, metal leads, printed circuit boards (PCB), backplanes, switch fabrics, semiconductor material, twisted-pair wire, co-axial cable, fiber optics, a propagated signal, and so forth. Examples of wireless communications media may include acoustic, radio-frequency (RF) spectrum, infrared and other wireless media. One possible communication between a client  and a server  can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and\/or associated contextual information, for example.","Some embodiments may comprise an article of manufacture. An article of manufacture may comprise a storage medium to store logic. Examples of a storage medium may include one or more types of computer-readable storage media capable of storing electronic data, including volatile memory or non-volatile memory, removable or non-removable memory, erasable or non-erasable memory, writeable or re-writeable memory, and so forth. Examples of the logic may include various software elements, such as software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces (API), instruction sets, computing code, computer code, code segments, computer code segments, words, values, symbols, or any combination thereof. In one embodiment, for example, an article of manufacture may store executable computer program instructions that, when executed by a computer, cause the computer to perform methods and\/or operations in accordance with the described embodiments. The executable computer program instructions may include any suitable type of code, such as source code, compiled code, interpreted code, executable code, static code, dynamic code, and the like. The executable computer program instructions may be implemented according to a predefined computer language, manner or syntax, for instructing a computer to perform a certain function. The instructions may be implemented using any suitable high-level, low-level, object-oriented, visual, compiled and\/or interpreted programming language.","Some embodiments may be described using the expression \u201cone embodiment\u201d or \u201can embodiment\u201d along with their derivatives. These terms mean that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","Some embodiments may be described using the expression \u201ccoupled\u201d and \u201cconnected\u201d along with their derivatives. These terms are not necessarily intended as synonyms for each other. For example, some embodiments may be described using the terms \u201cconnected\u201d and\/or \u201ccoupled\u201d to indicate that two or more elements are in direct physical or electrical contact with each other. The term \u201ccoupled,\u201d however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other.","It is emphasized that the Abstract of the Disclosure is provided to comply with 37 C.F.R. Section 1.72(b), requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment. In the appended claims, the terms \u201cincluding\u201d and \u201cin which\u201d are used as the plain-English equivalents of the respective terms \u201ccomprising\u201d and \u201cwherein,\u201d respectively. Moreover, the terms \u201cfirst,\u201d \u201csecond,\u201d \u201cthird,\u201d and so forth, are used merely as labels, and are not intended to impose numerical requirements on their objects.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
