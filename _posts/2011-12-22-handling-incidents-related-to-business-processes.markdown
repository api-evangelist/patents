---
title: Handling incidents related to business processes
abstract: In one embodiment, the method includes identifying an incident associated with a scene. The incident is identified through a reporter object associated with the scene. Based upon the identified incident, one or more observer objects related to the scene is determined. The incident is communicated to the one or more observer objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09064217&OS=09064217&RS=09064217
owner: SAP SE
number: 09064217
owner_city: Walldorf
owner_country: DE
publication_date: 20111222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["Business processes involve several data related to an entity or a business object. A status of a data may change while executing the business processes. The status change may correspond to a modification of content or a value of the data. For example, the value of an address of a customer business object may change or be modified. The modification of the data may correspond to an event or incident. It may be required to execute an action based upon the event. Typically, in response to the event, a specific reaction is executed. Usually, an event handler executes such reaction corresponding to the event.","The event handler is required to be aware of the business processes in detail in order to handle the event and\/or to execute a specific reaction corresponding to the events. For example, the event handler may be required to know about a software module (e.g., software code) responsible for triggering the event. Further, the event handler may also be required to know which implementation deals with which event. Therefore, the coding triggering the event and its corresponding reaction code is hardcoded in the event handler. Typically, there is a strict coupling between the event and the event handler.","However, it may be a waste of resource, time, and effort to link all possible incidents and their corresponding reaction codes. Further, if there is more than one software module triggering the same incident, an event handler is required to be hardcoded exactly about the incident triggered by a particular software module. Also, the event handler is not flexible and robust to adapt to changes. For example, if a new process is included, the details of the new process will need to be explicitly hardcoded in the event handler. Also, if there is any change in an existing process, the code of the event handler is required to be updated accordingly.","Various embodiments of systems and methods for handling incidents related to business processes are described herein. In one aspect, the method executed by one or more computers in a network of computers includes identifying an incident associated with a scene related to a business process. The incident is identified through a reporter object associated with the scene. One or more observer objects related to the scene are determined. The incident is communicated to the one or more observer objects. The reporter object and the observer object are loosely coupled by the scene and its access control. The loose coupling provides flexibility and robustness needed to adapt to changes. The business processes, the reporter object, and the observer object can be independently modified without affecting each other. Additionally, the observer object is not required to be hardcoded with the details of the incident. For example, the observer object is not required to be hardcoded with either the details of the reporter object of the incident nor the business process in which the incident occurred.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for handling incidents occurring during a business process are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","The following terminology is used while disclosing embodiments of the invention:","A scene is a collection of one or more incidents. The scene may be represented as a set comprising the one or more incidents. The set defines which incidents might occur within the scene.","An incident is an occurrence happening within the scene. According to one embodiment, the incident might be triggered due to a modification of data associated with the scene and\/or changes of status, e.g., navigation to a new view or window.","A reporter object is an object that is allowed as a reporter for one or more scenes. An observation center grants admittance to the reporter object to report about incidents related to one or more scenes. The reporter object calls a function to register itself as the reporter at the observation center. The observation center grants admittance to the registering reporter object with respect to a defined reporter admittances specified for a scene. If a reporter object satisfies admittances defined across all scenes, the reporter object might report for all of the scenes. Alternately, the reporter object is not allowed to report about the incidents in the scene for which the reporter object has no admittance for. The reporter object identifies the incidents related to the one or more scenes for which the reporter object is registered as the reporter. The reporter object reports about the identified incidents to the observation center.","An observer object is an object that is allowed as an observer for one or more scenes by the observation center. The observer object calls a function to register itself as the observer at the observation center. The observation center grants admittance to the registering observer object with respect to a defined observer admittances specified for a scene. If the observer object satisfies admittances defined across all scenes, the observer object might observe all of the scenes. Alternately, the observer object is not allowed to observe the incidents in the scene for which the observer object has no admittance for. The observer object is reported by the observation center about the incidents related to the one or more scenes for which the observer object is registered as the observer. The observer object observes and reacts upon the reported incidents.","The observation center is a central entity that receives incident information from the reporter object associated with a scene and communicates the received incident information to the observer object related to that scene. The observation center loosely couples the reporter object and the observer object. The observation center also implements an access control to allow only specified object types as the reporters and\/or observers. The object types that may be allowed as the reporters (reporter admittances) and\/or the observers (observer admittances) are specified in respective database tables of the reporter object and\/or the observer object.","One or more reporter objects may be registered as the reporter for a scene.","One or more observer objects may be registered as the observer for a scene.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 1","FIG. 2"],"b":["100","110","120","1","120","130","1","130","210","1","110","120","1","1","110","110","1","110","130","1","130","110","210","1","110","130","1","210","1","1","130","1"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["210","1","210","210","1","1","1","210","1","210","1","210","210","1","1","210","1","210","1","210","1","1"]},"Various information related to each scene ()-(Q) may be maintained in data structures related to the respective scene ()-(Q). In one embodiment, there may be one database table maintaining the information related to all scenes ()-(Q). An exemplary template of such a database table ()-(Q) is shown in table 1 below.",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Field","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NAME","BS_INOB_SCENE_NAME","Unique Name "]},{"entry":[{},"(CHAR (n))","of the Scene"]},{"entry":["IS_DYNAMIC","BS_INOB_DYNAMIC_SCENE","Defines if the "]},{"entry":[{},"(BOOL)","scene is Dynamic"]},{"entry":["DESCRIPTION","BS_INOB_SCENE_DESCRIPTION","A short description "]},{"entry":[{},{},"of the scene"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In the above shown Table 1, \u201cNAME\u201d indicates unique name of a scene. For example, the name of scene () may be \u201cabc\u201d. A value of the \u201cNAME\u201d field may be a variable of data type \u201cCharacter\u201d (indicated as \u201cCHAR\u201d in Table 1) and there may be a limitation on the maximum number of characters that may be included in the name of the scene (indicated as \u201c(n)\u201d in Table 1, \u201cn\u201d being natural number). For example, the value of \u201cn\u201d may be 30.","\u201cIS_DYNAMIC\u201d indicates if the scene (e.g., scene ()) is a dynamic scene. The values of the \u201cIS_DYNAMIC\u201d field could be of \u201cBoolean\u201d data type (indicated as \u201cBOOL\u201d in Table 1). For example, \u201cBoolean\u201d value may be \u201cYES\u201d or \u201cNO\u201d, or it may be \u201c1\u201d or \u201c0\u201d. If the scene is dynamic, the value of the \u201cIS_DYNAMIC\u201d field may be \u201cYES,\u201d while if the scene is static or non-dynamic, the value of the \u201cIS_DYNAMIC\u201d field may be \u201cNO\u201d. In one embodiment, the \u201cIS_DYNAMIC\u201d field may store a \u201cBoolean\u201d value as defined by a specific programming language, e.g., Advanced Business Application Programming (ABAP) developed by the company SAP AG. \u201cDESCRIPTION\u201d field could include a short description of a scene, e.g., the description of scene ().","Once the scene () is defined, e.g., declared in the database table with a structure similar to the structure presented with Table 1, the one or more incidents IC()-IC(N) may be defined for the scene (). An incident, e.g., incident IC may be triggered if there is any modification (updation, deletion, and addition) of data related to a scene, e.g., the scene (). For example, if address data associated with a customer business object is modified, the incident IC related to scene () may be triggered. A type of incident IC may be the type of the modified data for which the incident IC is triggered. For example, the type of the incident IC may be \u201cCharacter\u201d if the incident IC is related to data of \u201cCharacter\u201d type (e.g., the customer's address). In one embodiment, all valid data types or incident types are defined in a data dictionary. For example, the data dictionary may be an ABAP dictionary defined in SAP library as DDIC. In one embodiment, the incident IC may be a multivalued incident. The multivalued incident IC is triggered for a multivalued data. In one embodiment, the multivalued data may be a table comprising a plurality of records (rows). The type of the multivalued incident IC may be the table, e.g., a DDIC table.","Various information related to incidents IC()-IC(N) may be maintained in data structure, e.g., related to the respective incidents IC()-IC(N). In one embodiment, there may be one database table maintaining the information related to the possible types of incidents IC()-IC(N) in a scene. Table 2 below shows an exemplary template of database table, e.g., associated with incident IC()-IC(N):",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Field","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SCENE","BS_INOB_SCENE_NAME","Unique name of "]},{"entry":[{},"(CHAR(n))","the scene"]},{"entry":["INCIDENT","BS_INOB_INCIDENT_NAME","Name of the incident, "]},{"entry":[{},"(CHAR(m))","unique per scene"]},{"entry":["TYPE","TYPENAME","DDIC type of the "]},{"entry":[{},"(CHAR(o))","incident's value"]},{"entry":["IS_MULTIPLE","BS_INOB_MULTIPLE_INCIDENT","Defines if the "]},{"entry":[{},"BOOL","incident is multivalued"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Field \u201cSCENE\u201d indicates the unique name of the scene to which an incident belongs or to which the incident is assigned to. For example, the \u201cSCENE\u201d field may store the unique name of the scene () to which the incident IC belongs to. The values of the \u201cSCENE\u201d field may be of \u201cCharacter\u201d data type with maximum number of characters \u201cn\u201d (indicated as \u201cCHAR(n)\u201d in Table 2). For example, the name may include maximum 30 characters.","Field \u201cINCIDENT\u201d indicates a name of the incident. The name of the incident has to be unique per scene. If two incidents (e.g., IC and IC) belong to two different scenes (e.g., () and (Q), respectively), they can have same name, however, if the incidents (e.g., IC() and IC (N)) belong to the same scene (e.g., ()), they should have unique names. The names of the incidents may be values of type \u201cCharacter\u201d with maximum number of characters \u201cm\u201d. For example, the name may include maximum 30 characters.","Field \u201cTYPE\u201d indicates the DDIC type of the incident. The DDIC type of the incident corresponds to the DDIC type of the value of data that is being modified. Alternately, the DDIC type of the incident corresponds to the DDIC type of the value of data for which the incident is triggered. The DDIC type may \u201cCharacter\u201d with maximum number of characters \u201co\u201d. For example, the DDIC type may include maximum 30 characters.","Field \u201cIS_MULTIPLE\u201d indicates if the incident is a multivalued incident, i.e., if the incident is triggered in response to a modification to multivalued data. The multivalued data may include more than one value, e.g., stored as different elements, records (rows), etc. If an incident is of multivalued data type, the \u201cTYPE\u201d field may include DDIC name corresponding to the multivalued data type. The values of the \u201cIS_MULTIPLE\u201d field are of type \u201cBoolean\u201d (indicated as \u201cBOOL\u201d in Table 2). If an incident is multivalued, the corresponding value of the \u201cIS_MULTIPLE\u201d field may be \u2018YES,\u2019 while if the incident is not multivalued, the value of the \u201cIS_MULTIPLE\u201d field may be \u2018NO.\u2019 In one embodiment, the possible values of the \u201cIS_MULTIPLE\u201d field may be the \u201cBoolean\u201d values in ABAP.","The incidents IC()-IC(N) related to the scene () may be identified by the reporter object () associated with the scene (). In one embodiment, the reporter object () should be granted an access as the reporter to report about incidents IC()-IC(N) associated with the scene (). In one embodiment, if the scene () is dynamic scene, the reporter object () can report about other incident or incidents besides the incidents IC()-IC(N) explicitly assigned to the scene (). In one embodiment, one or more of the reporter object ()-(N) may be associated each with more than one of the scenes ()-(N).","Various information related to a reporter object ()-(N) may be maintained in a corresponding data structure. In one embodiment, there may be one database table maintaining the information related to the reporter objects ()-(N). An exemplary template of such database table for the reporter objects ()-(N) is shown in Table 3 below:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Field","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SCENE","BS_INOB_SCENE_NAME","Name of the scene for which the reporter is allowed "]},{"entry":[{},"(CHAR (m))",{}]},{"entry":["REPORTER_TYPE","BS_INOB_ REPORTER_TYPE","Type of reporter"]},{"entry":[{},"(CHAR (n))",{}]},{"entry":["REPORT_DESCR","BS_INOB_ REPORTER_DESCRIPTION","Description of reporter"]},{"entry":[{},"(CHAR (0))"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"As illustrated in Table 2 above, field \u201cREPORTER_TYPE\u201d of the database table indicates a type of an object (e.g., ABAP object) that is registered as a reporter for the SCENE. In one embodiment, the object TYPE may be specified by a class name or the name of an interface to which the reporter object may belongs to. In one embodiment, objects of the above-mentioned object types may be accepted by an observation center as reporters for a scene indicates with the field \u201cSCENE\u201d. The values of the \u201cREPORTER_TYPE\u201d may be of type \u201cCharacter\u201d with maximum number of characters \u201cn\u201d (indicates as \u201cCHAR(n)\u201d in the Table 3).","The field \u201cSCENE\u201d indicates the name of the scene. Field \u201cREPORT_DESCR\u201d includes a description of the reporter. For example, the \u201cREPORT_DESCR\u201d field may include description of admittance or explanation why this type of reporter is allowed or applicable as reporter.","The reporter objects ()-(N) get registered as the reporter for one or more of scenes ()-(Q). For example, the reporter object () may register itself as the reporter. In one embodiment, reporter objects (e.g., ()-(N)) register themselves at the corresponding observation center (e.g., ).","The observation center  is a central instance for incident observation. The reporter objects ()-(N) and the observer objects ()-(P) register at the observation center  to report about the incidents and to observe the incidents, respectively. The observation center  may be defined as an access interface , as shown in . In one embodiment, the name of the access interface  may be \u201cIF_BS_INOB_OBSERVATION_CENTER\u201d. The access interface  includes one or more functions. For example, the access interface  includes a function \u201cESTABLISH_REPORTER( )\u201d. The function \u201cESTABLISH_REPORTER( )\u201d may be called by the reporter objects ()-(N) to register themselves as the reporters at the observation center . In one embodiment, by calling the function \u201cESTABLISH_REPORTER( )\u201d an object let establishes itself or any other object as a reporter. The access interface  may also include a function \u201cENGAGE_OBSERVER( )\u201d. The function \u201cENGAGE_OBSERVER( )\u201d may be called by observer objects ()-(P) to register themselves as observers at the observation center .","The access interface  may be implemented by an observation center class . The name of the observation center class  may be \u201cCL_BS_INOB-OBSERVATION_CENTER\u201d (\u201cCL\u201d indicates \u201cclass\u201d). The observation center class  has a single runtime instance (singleton instance) per logical unit of work (LUW). The observation center class  includes one or more attributes and one or more functions. In one embodiment, the observation center class  includes the attribute","\u201cGO_INSTANCE\u201d to hold the singleton instance of the observation center . An attribute \u201cGT_REPORTERS\u201d (\u201cGT\u201d indicates \u201cglobal table\u201d) is a table including names or references of one or more reporters (e.g., reporter objects ()-(N)) that are registered at the observation center . The observation center class  also includes an attribute \u201cGT_SCENE_INSTANCES\u201d that is the table comprising references of existing scenes. In one embodiment, the table \u201cGT_SCENE_INSTANCES\u201d comprises the references of those scenes which can be accessed by at least one reporter object and\/or one observer object. The names of all the scenes ()-(Q) that are registered at the observation center . Similarly, the observation center class  also includes an attribute \u201cGT_SCENE_OBSERVERS\u201d that is the table comprising names and\/or reference to the observer objects ()-(P) per scene.","In one embodiment, the observation center class  includes a function \u201cGET_INSTANCE( )\u201d which may be used or called by an external entity, e.g., the reporters ()-(N) and\/or the observers ()-(P) to invoke an instance of the observation center . Once the instance is invoked, the observation center  becomes visible to the reporters ()-(N) and the observers ()-(P). A subsequent call of the function \u201cGET_INSTANCE\u201d returns an identical instance or reference to the observation center . The observation center class  also includes a function \u201cGET_OBSERVER_OF_SCENE( )\u201d which may be exclusively called by the observation center  to retrieve names and references or instances of the objects to access or communicate with the objects. A function \u201cGET_SCENE( )\u201d of the observation center class  may be called by the observation center  to retrieve a reference to a scene as an object that will be used by the observation center  to determine whether the incidents (e.g., IC-ICN) and their reported values are valid for instance. Typically, the function \u201cGET_SCENE( )\u201d is used to check if the incident reported by the reporter object is the valid incident that belongs to the specified scene. The observation center class  also includes a function \u201cGET_SUPER_CLASS_NAMES( )\u201d which may be called by the observation center  to check if the reporters ()-(N) and\/or the observers ()-(P) are valid and belongs to the objects that are allowed as the reporters and observers, respectively, for the scene. The function \u201cGET_SUPER_CLASS_NAMES( )\u201d allows to get access to all super types of an object. The function \u201cGET_SUPER_CLASS_NAMES( )\u201d may be called during determination whether an object trying to register as an observer and\/or a reporter has a valid type to be accepted the observer and\/or the reporter, respectively. Alternately, the observation center  may call the function \u201cGET_SUPER-CLASS_NAMES( )\u201d while registering the reporters ()-(N) and\/or the observers ()-(P).","For getting registered as the reporter, the reporter object () calls the function \u201cGET_INSTANCED\u201d of the observation center . Once the function \u201cGET_INSTANCE( )\u201d is called, the instance of the observation center  becomes visible to the reporter object (). Once the observation center  becomes visible to the reporter object (), the reporter object () can access or call the functions of the observation center interface (i.e., the access interface ). In one embodiment, the reporter object () calls the function \u201cESTABLISH_REPORTER( )\u201d to register itself as the reporter. Once the function \u201cESTABLISH_REPORTER( )\u201d is called, the observation center  may internally call the function \u201cGET_SUPER_CLASS_NAMES( )\u201d to check if the reporter object () can be allowed as the reporter. If the reporter object () can be allowed, the observation center  registers the reporter object () as the reporter all scenes that allow objects of that type.","Once the reporter object () is registered, the observation center  can access the database table of the reporter object (). In one embodiment, the name of the reporter object () may be entered in the \u201cGT_REPORTERS\u201d table. In one embodiment, the registered reporter object () can access a reporter protocol  (). The reporter protocol  enables the reporter object () to report incidents to the observation center . The reporter protocol  is defined by an interface . A name of the interface  may be \u201cIF_INOB_REPORTING.\u201d The interface  includes one or more attributes and one or more functions. For example, the interface  may include the attributes namely \u201cMO_ACTUAL_SCENE\u201d and \u201cMT_SCENE_NAMES.\u201d","The attribute \u201cMT_SCENE_NAMES\u201d holds names of all the scenes for which the reporter protocol  can be used. Alternately, the attribute \u201cMT_SCENE_NAMES\u201d contains names of all the scenes for which the reporter () is allowed to report about. Each reporter (-N) gets its own reporter protocol after acceptance by the observation center . In one embodiment, if the reporter object () reports about the scene that is not included in the \u201cMT_SCENE_NAMES,\u201d an error (e.g., catchable exception) may occur.","The attribute \u201cMO_ACTUAL_SCENE\u201d allows the reporter object () to access its current scene. The reporter object () can access its current scene and can directly query the current scene. For example, the reporter object () may directly query the scene () for questions like the DDIC type of the incident IC, whether the scene is dynamic, etc. Typically, the reporter object () can access a scene interface  (\u201cIF_BS_INOB_SCENE\u201d) to directly query the scene (). The scene () may be represented by the scene interface  that can be accessed by the observers ()-(P) and\/or the reporters ()-(N). Through the scene interface  the reporters and observers can directly query the scene ().","In one embodiment, as illustrated in , the scene interface  includes an attribute \u201cMV_NAME\u201d to hold the name of the scene () and an attribute \u201cMV_IS_DYNAMIC\u201d to hold the Boolean value to define if the scene () is dynamic or not. For example, if the scene () is dynamic then \u201cMV_IS_DYNAMIC\u201d may hold 1. The scene interface  also includes one or more functions. For example, the scene interface  includes a function \u201cGET_INCIDENT_TYPE( )\u201d The function \u201cGET_INCIDENT_TYPE( )\u201d may be called by the reporters ()-(N) and\/or observers ()-(P) to get the type, e.g., DDIC type of the incident. Alternately, the function \u201cGET_INCIDENT_TYPE( )\u201d returns the DDIC type of the incident. In one embodiment, if the scene () is dynamic, the type of the incident may not be identified and therefore, the function \u201cGET_INCIDENT_TYPE( )\u201d may return an empty value.","The scene interface  may also include a function \u201cIS_INCIDENT_VALUE_VALID( ).\u201d The function \u201cIS_INCIDENT_VALUE_VALID( )\u201d may be called by the reporters ()-(N) and\/or the observers ()-(P) to determine if the incident value is valid or applies to the incident's type. The function \u201cIS_INCIDENT_VALUE_VALID( )\u201d may return \u2018true\u2019 in case the value is valid. If the value is not valid, the function \u201cIS_INCIDENT_VALUE_VALID( )\u201d may return \u2018false.\u2019 A function \u201cIS_MULTIPLE_INCIDENT( )\u201d may be called by the reporters ()-(N) and\/or the observers ()-(P) to determine if the incident is the multivalued incident (e.g., a data table). If the incident is the multivalued incident, the function \u201cIS_MULTIPLE_INCIDENT( )\u201d may return \u2018true.\u2019 The scene interface  includes another function \u201cIS_NOTED_FOR_INCIDENT( )\u201d to determine if the incident (i.e., name of the incident) is known to the scene (). The function \u201cIS_NOTED_FOR_INCIDENT( )\u201d returns \u2018true\u2019 in case the incident name is known to the scene (). In one embodiment, if the scene () is the dynamic scene any incident name may be allowed.","The scene interface  may be instantiated by a scene class  (\u201cCL_BS_INOB_SCENE\u201d), as illustrated in . The scene class  includes an attribute \u201cMT_INCIDENTS.\u201d The attribute \u201cMT_INCIDENTS\u201d contains names and types of all the incidents (IC-ICN) that are assigned to the scene (). In one embodiment, if the scene () is dynamic and has some explicitly assigned incidents (IC-ICN) then the attribute \u201cMT_INCIDENTS\u201d includes the explicitly assigned incidents (IC-ICN).","The reporter object () reports about the incident IC to the observation center . The reporter object () reports about the incident IC to the observation center  through the reporter protocol . In one embodiment, the reporter protocol  includes one or more functions namely \u201cSWITCH_TO_SCENE( ),\u201d \u201cVALUE_WAS-ADDED( ),\u201d \u201cVALUE_WAS_CHANGED( )\u201d and \u201cVALUE_WAS_DELETED( ).\u201d The function may be used by the reporter object () to report about the incident IC. For example, the reporter object () may use the function \u201cVALUE_WAS_CHANGED( )\u201d to report an incident that relates to the change of data. The scene name, the incident name, and a current (changed) value of the data are handed over to the observation center . In one embodiment, if the incident IC is multivalued, an index may also be handed over. The index identifies the row of the table that is being modified or changed. The function \u201cVALUE_WAS_ADDED( )\u201d may be called by the reporter object () to report an incident that relates to a newly added value in the multivalued data. The name of the scene, incident name, the newly added value, and the index related to the corresponding record or row where the value is added is handed over to the observation center . Similarly, the function \u201cVALUE_WAS_DELETED( )\u201d may be called to report about the deletion of the row of the multivalued data or table. The scene name, the incident name, the deleted value, and the index identifying the row of the table that is deleted are handed over.","In one embodiment, the reporter object () may be associated with multiple scenes ()-(Q). Alternately, the reporter object () may be allowed to report about multiple scenes ()-(Q). The function \u201cSWITCH_TO_SCENE( )\u201d may be called by the reporter object () to switch between the scenes to report about. For example, the reporter object () may call the function \u201cSWITCH_TO_SCENE( )\u201d to switch to the scene (). Once the reporter object () is switched to the scene (), the reporter object () may not be required to provide the scene name (i.e., the name of the scene ()) every time reporting about the incident. Alternately, the scene name would be an optional parameter once the reporter object () is switched to the particular scene. The reporter object () switch to the scene () and afterwards can report about several incidents related to that scene (i.e., scene ()) without handling explicit scene name every time. In one embodiment, the interface  including the reporter protocol  may be implemented by a class  (\u201cCL_BS_INOB_REPORTING\u201d). The class  includes one or more functions and\/or one or more attributes. For example, the class  includes \u201cMO_OBSERVATION_CENTER\u201d (\u201cMO\u201d indicates \u201cmember object\u201d). Typically, the class  is instantiated by the observation center .","Once the reporter object () reports about the incident IC to the observation center , the observation center  calls the function \u201cGET_SCENE( )\u201d to determine if the incident IC is a valid incident related to the scene (). Alternately, as the reporter object () of the dynamic scene () can report about any arbitrary incident, therefore, the observation center  does not check the incident IC related to the dynamic scene ().","Once the incident IC related to the scene () is validated, the observation center  calls the function \u201cGET_OBSERVER_OF_SCENE( )\u201d to determine the observer objects related to the scene. For example, the observation center  may determine that the observer object () is registered observer of the scene ().","In one embodiment, the observer object () can be a type of ABAP object. Typically, the observer object () is the ABAP object implementing a specific ABAP interface. The observer object () may be the class, the interface, the logical runtime instance. In one embodiment, the objects and its subtypes may be allowed as the observer for the scene. Various information related to each observer object ()-(P) may be maintained in the database table related to the respective observer object ()-(P). In one embodiment, there may be one database table maintaining the information related to all the observer objects ()-(P). In one embodiment, the template of the database table for the observer objects ()-(P) may be as shown in table 4 below:",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Field","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SCENE","BS_INOB_SCENE_NAME","Name of the assigned scene"]},{"entry":[{},"(CHAR (n))",{}]},{"entry":["OBSERVER","BS_INOB_OBSERVER","Type of allowed observer object"]},{"entry":[{},"(CHAR (n))",{}]},{"entry":["OBSERVE_DESCR","BS_INOB_OBSERVE_DESCRIPTION","Description of observer"]},{"entry":[{},"(CHAR (n))"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"As illustrated in Table 4 above, field \u201cOBSERVER\u201d of the database table indicates a type of the object (e.g., ABAP object) that is registered as an observer for the SCENE. In one embodiment, the object may be a name of the class object, the interface, the logical runtime instance, the subclass, etc. In one embodiment, objects of the above-mentioned object types may be accepted by an observation center as observers for a scene indicates with the field \u201cOBSERVER\u201d. The values of the \u201cOBSERVER\u201d may be of type \u201cCharacter\u201d with maximum number of characters \u201cn\u201d (indicates as \u201cCHAR(n)\u201d in the Table 4).","The field \u201cSCENE\u201d indicates the name of the scene that describes a list of types to which the observer objects apply. Field \u201cOBSERVE_DESCR\u201d includes a description of the observer. For example, the field \u201cOBSERVE_DESCR\u201d may include description of admittance or explanation why this type of object is allowed\/applicable as the observer.","In one embodiment, the observer object () register itself at the observation center  by calling the observation center interface function \u201cENGAGE_OBSERVER( )\u201d Typically, the observer object () required to first call the function \u201cGET_INSTANCE( )\u201d to get a singleton instance of the observation center . Once the observation center  becomes visible to the observer objects  (), the observer object () can call the function \u201cENGAGE_OBSERVER( )\u201d to register itself at the observation center  as the observer of the scene (). The observation center  determines if the observer object () can be allowed as an observer. Typically, the observation center  calls the function \u201cGET_SUPER_CLASS_NAMES( )\u201d to determine all types of the objects that can be allowed as an observer. If the observer object () is of an allowed type, the observer object () is registered as the observer for all corresponding scenes.","In one embodiment, the observer object () needs to implement an observer interface  () to get registered as the observer of the scene (). The observer interface  enables the observation center  to communicate with the observer object (). In one embodiment, the observation center  can call one or more functions included in the observer interface  to report about the incident to the observer object (). The observer interface  includes a function \u201cVALUE_WAS_CHANGED( )\u201d The function \u201cVALUE_WAS_CHANGED( )\u201d is called by the observation center  to immediately forward reporting of an incident by any reporter that reported about the incident IC related to the change in the value of the data to the observer object (). The scene name, incident name, and the current (changed) value may be handed over to the observer object (). In one embodiment, if the incident is the multivalued incident, the index indicating the row of the table in which the value is changed is also handed over. A function \u201cVALUE_WAS_ADDED( )\u201d may be called by the observation center  to report about the newly added record into the multivalued data or table to the observer object (). The function \u201cVALUE_WAS_ADDED( )\u201d may be called by the observation center  to report that the new value is added to the multivalued data. The name of the scene, incident name, the newly added value, and the index related to the corresponding record or row where the value is added is handed over to the observer object (). Similarly, the function \u201cVALUE_WAS_DELETED( )\u201d may be called by the observation center  when the reporter object () reports about the deletion of the line of the multivalued data to report about the deletion of the row of the multivalued data to the observer object (). The scene name, the incident name, the deleted value, and the index identifying the row from the table that is deleted is handed over to the observer object ().","The embodiments described above provide techniques to implement security\/authority by preventing unauthorized objects from reporting the incidents and\/or observing the incidents. The observation center grants admittance to the observer object and\/or the reporter object by determining the defined observer admittances and\/or the defined reporter admittances, respectively, specified for one or more scenes. Alternately, the observation center implements the access control to allow only specified object types as the reporters and\/or observers. The object types that may be allowed as the reporters (reporter admittances) and\/or the observers (observer admittances) are specified in respective database tables of the reporter object and\/or the observer object. The access control implemented by referring to the admittances specified in the respective database tables provides security or authority such that the unauthorized objects may be prevented from reporting the incidents and\/or observing the incidents related to the scenes. Additionally, the scenes, the incidents, the reporters, the observers, the reporter admittances, and the observer admittances, etc., is published that enables a user, e.g., a developer to easily access and integrate his or her development (e.g., the scenes, the incidents, the reporters, and the observers) into incident observation.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 7","b":["110","1","210","1","110","120","1","1","110","110","1","110","1","210","1","701","120","1","1","110","110","1","120","1","1","110","130","1","210","1","702","110","130","1","210","1","130","1","110","130","1","1","703","110","600","1","130","1","130","1","130","210","1","130","1","130","1","110"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 8","b":["110","1","110","110","1","120","1","801","110","210","1","1","802","210","1","802","110","1","210","1","803","110","1","210","1","110","1","1","803","804","1","803","110","130","1","210","1","805","210","1","110","1","210","1","210","1","110","805","130","1","210","1","130","1","1","130","1","806","110","1","130","1","600","130","1","1"]},"The embodiments described above provide techniques to separate the reporter object (reporting the incident) and the observer object (reacting upon the incidents). The observer object, e.g., event handler, need not know about the reporter object or the business process (triggering the incident) and vice versa. The reporter object and the observer object are loosely connected through the observation center. The loose connection between the reporter object and the observer object makes the system flexible and robust to adapt to changes or modification. Precisely, the event and the event handler can be independently modified without affecting each other. The modification of the existing business process or the addition of the new business process need not be hardcoded or linked into the event handler (reaction code) that makes system flexible and robust to adapt to the modification. Moreover, obviating the requirement of hardcoding the details of the incident into the observer object saves resource, time, and effort, and provides an efficient technique for handling the incidents.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer readable storage media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic indicator devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 9","b":["900","900","905","955","900","940","955","910","915","910","915","905","915","900","925","930","900","925","930","900","935","900","950","950","900","945","900","920","960","960","960","950","960"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system, e.g., an ERP system, and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
