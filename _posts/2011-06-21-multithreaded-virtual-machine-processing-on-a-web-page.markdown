---
title: Multi-threaded virtual machine processing on a web page
abstract: A system, method and a computer-readable medium for processing resources on a multithreaded browser. The browser includes a main thread and receives a resource. The browser initializes the main thread, the main thread includes an event loop and initializes a plurality of virtual machines, one virtual machine for each code segment within the resource. Each virtual machine includes a UI thread and is configured to share the main thread within the browser with the UI thread. Each UI thread is further configured to execute an event scheduled on the event loop on the virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832690&OS=08832690&RS=08832690
owner: Google Inc.
number: 08832690
owner_city: Mountain View
owner_country: US
publication_date: 20110621
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The emergence and development of computer networks and protocols, including the World Wide Web (or simply \u201cthe web\u201d), allows users to access a wide variety of websites, and download webpages from those websites.","When a client receives web pages using a conventional web browser, a single event thread executes scripts embedded in webpages using a single virtual machine. Because scripts are executed using a single thread within a browser, scripts cannot be executed in parallel and impact the web browser's performance.","A system, method and a computer-readable medium processes resources on a multithreaded browser. The browser includes a main thread and receives a resource. The browser initializes the main thread. The main thread includes an event loop and initializes a plurality of virtual machines, one virtual machine for each code segment within the resource. Each virtual machine includes a user interface (UI) thread and is configured to share the main thread within the browser with the UI thread. Each UI thread is further configured to execute an event scheduled on the event loop on the virtual machine.","A system, method and a computer-readable medium processes a stop-the-world event on a browser. The browser includes a main thread. The main thread receives the stop-the-world event issued by a virtual machine. The main thread asynchronously schedules the stop-the-world event using an event loop. When the main thread retrieves the stop-the-world event from the event loop, the main thread attaches to the virtual machine that issued the stop-the-world event and processes the event within the virtual machine.","A system, method and a computer-readable medium context switches on a browser. The browser includes a main thread. The main thread executes an event handler associated with a first virtual machine. While executing on the first virtual machine, the main thread receives a call to access an event handler associated with a second virtual machine from the event handler within the first virtual machine. The main thread saves a record associated with the first virtual machine on the main thread and context switches from the first virtual machine to the second virtual machine. The main thread executes the event handler on the second virtual machine and returns to execute the event handler on the first virtual machine once the execution on the second virtual machine is complete.","Further embodiments, features, and advantages of the invention, as well as the structure and operation of the various embodiments of the invention are described in detail below with reference to accompanying drawings.","The invention will now be described with reference to the accompanying drawings. In the drawings, generally, like reference numbers indicate identical or functionally similar elements. Additionally, generally, the left-most digit(s) of a reference number identifies the drawing in which the reference number first appears.","The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments consistent with this invention. Other embodiments are possible, and modifications can be made to the embodiments within the spirit and scope of the invention. Therefore, the detailed description is not meant to limit the invention. Rather, the scope of the invention is defined by the appended claims.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","100","102","104","106"]},"Network  may be any network or combination of networks that can carry data communication. Such a network  may include, but is not limited to, a local area network, metropolitan area network, and\/or wide area network such as the Internet. Network  can support protocols and technology including, but not limited to, Web protocols and\/or services. Intermediate web servers, gateways, or other servers may be provided between components of the system shown in  depending upon a particular application or environment.","Web server  is a computing device or an application executing on a computing device that helps deliver resources  from websites  to clients . Website  includes one or more resources  associated with a domain name and hosted by one or more web servers . An example website is a collection of webpages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements, such as scripts.","A resource  is any data that can be provided over network . Resource  is identified by a resource address that is associated with resource . Resources  include HTML pages, word processing documents, and portable document format (PDF) documents, images, video, and feed sources, to name only a few. Resources  can include content, such as words, phrases, images and sounds, that may include embedded information (such as meta-information in hyperlinks) and\/or embedded instructions (such as JavaScript code).","Client  is an electronic device that is under the control of a user and is capable of requesting and receiving resources  over network . Example clients  include personal computers, mobile communication devices, (e.g. smartphones, tablet computing devices, notebooks), set-top boxes, game-console embedded systems, and other devices that can send and receive data over the network .","Client  typically includes a user application, such as a web browser (or browser)  that facilitates the sending and receiving of resources  over network . Browser  displays resources  as webpages .","Browser  displays webpages  using one or more virtual machines . Virtual machine  is a software implementation of a computing device, such as client , capable of executing software applications or processes. Virtual machine , such as a Java Virtual Machine (\u201cJVM\u201d), may execute a single process or application. Virtual machine  is created in the beginning of the process and is destroyed when the process completes.","Each virtual machine  executes a process in an isolated domain. Processes executing in an isolated domain do not share objects, variables or static classes with processes outside of the isolated domain.","Virtual machine  processes software code embedded in webpages . Example software code may be Java or JavaScript code embedded in webpage  using script tags, such as HTML script tags. Each virtual machine  processes software code embedded in one webpage  (or \u201cframe\u201d).","Because one or more virtual machine  display webpage , resources  that display multiple webpages  may include nested frames. Nested frames include parent frames and children frames. For example, a parent frame may include one or more child frames. Because each virtual machine  operates on any one particular frame in the isolated domain, different virtual machines  process the source code in the parent and child frames, yet do not share variables or objects that may contain overlapping or dependent data.","There is limited communication between virtual machines  that process parent and child frames. For example, one virtual machine  may communicate with other virtual machines  using an application programming interface (API) provided by the Document Object Model (\u201cDOM). A person skilled in the art will appreciate that DOM is a cross-platform, language-independent convention that represents and interacts with objects contained in HTML, XHTML and XML tagged resources . For example browser  parses resources  into a DOM tree.","Because of the limited communication, conventional browsers use one virtual machine to process resources. Because one virtual machine processes the webpages associated with a resource, those conventional browsers may not be as efficient or as fast as a browser  that includes multiple virtual machines  that each process a webpage.","System Architecture",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":"200"},"Environment  includes multiple threads that execute on browser  and virtual machines .","Browser  executes a main thread . Main thread  is a native thread provided to browser  by an operating system or a browser runtime. Main thread  is an event-driven thread that creates virtual machine . Each created virtual machine may be virtual machine , virtual machine , etc. Main thread also schedules and dispatches events for execution to virtual machines  using an event loop.","For example, main thread  creates virtual machine  and the associated isolated domain for each webpage  that includes software code using a JNI_CreateJavaVM method below:","jint JNI_CreateJavaVM(JavaVM **p_vm, JNIEnv **p_env, void *mv_args);","Main thread  may create up to n virtual machines , where n is a maximum number of virtual machines  that can execute on client .","Each virtual machine  executes a user interface (UI) thread , such as UI thread executing on virtual machine , UI thread executing on virtual machine , etc., and multiple background threads . UI thread  and background thread  may be Java threads. A Java thread is a thread defined in the Java's \u201cjava.lang.Thread\u201d library so that the Java thread's local state is visible to the JVM. Once created, main thread  attaches to UI thread  within virtual machine  and dispatches workload to UI thread .","UI thread  is an event-driven thread that receives dispatched events from main thread . For example, UI thread  uses main thread  to communicate with the DOM tree and processes DOM events. Multiple UI threads  share main thread  in a cooperative mapping. A person skilled in the art will appreciate that in the cooperative mapping, one resource is shared by multiple processes. For example, each UI thread  is mapped to main thread  one thread at a time, resulting in an N:1 mapping.","In one embodiment, only one UI thread  may exist in each virtual machine .","Background thread  is an event-driven thread that executes in the background of virtual machine . Background thread  is a work thread that communicates with UI thread  within virtual machine  and processes work received from UI thread . Multiple background threads  may exist on virtual machine .","Environment  also includes native helper thread . Native helper thread  is a system thread operating on client . Typically, native helper thread  is included in a native helper thread pool that is administered by the operating system on client . Each native helper thread  is mapped to each background thread  in a 1:1 mapping. Background thread  processes workload received from UI thread  using native helper thread .","As described herein, main thread  is a native thread that is shared cooperatively by multiple UI threads  in an event-driven model. For example, main thread  reaches an event loop and dispatches events to multiple virtual machines . Main thread  dispatches events to virtual machine  by invoking an event handler included in UI thread . For example, when main thread  contains an event that requires processing on virtual machine , main thread  attaches itself to UI thread that will process the event. In one embodiment, main thread  may create a new virtual machine and attach itself to the newly created UI thread ","After main thread  attaches to UI thread , main thread  activates the event handler and assigns the workload to UI thread . Once the workload is assigned, main thread  detaches itself from UI thread  as UI thread  begins to process the workload.","Once virtual machine  completes processing the workload, main thread  may terminate virtual machine . For example, when main thread  does not have any workload in its memory stack to allocate to virtual machine , it may elect to destroy virtual machine . Main thread  may destroy virtual machine  using a DestroyJavaVM method, such as:","Jint DestroyJavaVM(javaVM *vm);","When main thread  destroys virtual machine , native helper threads  detach themselves from background threads  and return to a native helper thread pool for assignment to other background threads .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":"300"},"At stage , resource  is received. For example, browser  receives resource  from web server .","At stage , virtual machine  is initialized. For example, main thread  within browser  initializes virtual machine  for each webpage  included in resource  that includes software code.","At stage , virtual machine  is assigned a workload. For example, main thread  attaches to UI thread  within virtual machine  and activates the event handler. The event handler retrieves the workload for UI thread  from the event loop of main thread . After the workload is assigned, main thread  detaches from virtual machine .","At stage , virtual machine  processes the workload. For example, UI thread  passes the workload to background threads , which process the workload using native helper threads . Stages - may be executed multiple times as browser  processes resource  received in stage .","At stage , virtual machine  is destroyed. For example, main thread  destroys virtual machine  when it does not have any more workload.","Cooperative Sharing of the Main Thread","Unlike conventional systems, environment  may context switch between virtual machines . Going back to , when main thread  executes an event handler in one virtual machine , such as virtual machine , and the even handler dispatches an event that invokes an event handler in another virtual machine , such as virtual machine , main thread  context switches between virtual machine and virtual machine . A person skilled in the art will appreciate that context switching is a programming methodology where the state of a computing process is stored in memory in such a way that the computing process can be resumed from the same point at a later time.","To facilitate context switching, main thread  includes a virtual machine invocation (VMI) stack . VMI stack  stores a record of invocation calls made by different virtual machines . For example, when main thread  mapped to the event handler in virtual machine invokes an event handler in virtual machine , main thread  saves the record that includes the identity and credentials of virtual machine in VMI stack . After the record is stored in VMI stack , main thread  makes a context switch to virtual machine . Main thread  continues to execute the event handler on virtual machine until either main thread  completes execution or makes a context switch to another virtual machine .","When main thread  completes executing the event handler on virtual machine , main thread  reinstates the processing on virtual machine . For example, main thread  accesses and retrieves the record associated with virtual machine from VMI stack . From the record, main thread  retrieves credentials associated with virtual machine , attaches to virtual machines and resumes executing the event handler on virtual machine from the point just prior to the context switch.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 4","b":"400"},"At stage , main thread  executes on virtual machine , that includes a UI thread . For example, main thread  executes the event handler associated with UI thread on virtual machine ","At stage , main thread  receives a request to make a context switch. For example, main thread  receives an instruction on UI thread that invokes an event handler in virtual machine ","At stage , a record of a virtual machine  is saved. For example, main thread  saves the record associated with virtual machine in VMI stack . The record includes an identity of virtual machine and associated credentials that enable main thread  to resume execution on virtual machine in the future.","At stage , main thread  makes a context switch. For example, main thread  makes a context switch to virtual machine . After main thread  makes a context switch, main thread  is mapped to UI thread ","At stage , main thread  executes an event handler on the second virtual machine, such as virtual machine . For example, main thread  executes the event handler associated with UI thread until the event handler requests another context switch. When another context switch is requested, main thread  proceeds to stage . In another embodiment, main thread  completes execution and the method proceeds to stage .","At stage , main thread  retrieves a record associated with virtual machine from VMI stack .","At stage , main thread  maps to UI thread and executes an event handler on virtual machine ","Asynchronous Invocation Calls and Stop-the-World Operations","Virtual machine  may need to perform a stop-the-world event, such as a garbage collection. A garbage collection operation frees memory on client  that is occupied by objects, such as inactive threads, deleted data objects, etc. that are no longer used by virtual machine . A person skilled in the art will appreciate that the garbage collection event will free resources on client  and may increase its efficiency to process software code and display webpages .","To process a special event, such as, a stop-the-world operation, virtual machine  may inject an asynchronous event into the event loop on main thread . When main thread  retrieves the asynchronous event from the event loop, main thread  makes a context switch to virtual machine  that requested the event.","After main thread  maps to virtual machine , main thread  processes the event.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 5","b":"500"},"At stage , a stop-the-world event is injected into the main thread . For example, virtual machine  injects an event into the event loop of main thread  when it requires a stop-the-world event, such as garbage collection.","At stage , main thread  retrieves the event from the event loop.","At stage , main thread  makes a context switch. For example, main thread  makes a context switch to virtual machine  that made the request.","At stage , main thread  processes the event. For example, main thread  performs the stop-the-world event on virtual machine .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 6","FIGS. 1-5"],"b":["600","100","600"]},"Computing device  may include one or more processors , one or more non-volatile storage mediums , one or more memory devices , a communication infrastructure , a display screen  and a communication interface . Processors  may include any conventional or special purpose processor, including, but not limited to, digital signal processor (DSP), field programmable gate array (FPGA), and application specific integrated circuit (ASIC). Non-volatile storage  may include one or more of a hard disk drive, flash memory, and like devices that may store computer program instructions and data on computer-readable media. One or more of non-volatile storage device  may be a removable storage device. Memory devices  may include one or more volatile memory devices such as but not limited to, random access memory. Communication infrastructure  may include one or more device interconnection buses such as Ethernet, Peripheral Component Interconnect (PCI), and the like.","Typically, computer instructions are executed using one or more processors  and can be stored in non-volatile storage medium  or memory devices .","Display screen  allows the results of the computer operations to be displayed to a user or an application developer.","Communication interface  allows software and data to be transferred between computer system  and external devices. Communication interface  may include a modem, a network interface (such as an Ethernet card), a communications port, a PCMCIA slot and card, or the like. Software and data transferred via communication interface  may be in the form of signals, which may be electronic, electromagnetic, optical, or other signals capable of being received by communication interface . These signals may be provided to communication interface  via a communication path. The communication path carries signals and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, an RF link or other communications channels.","Embodiments also may be directed to computer program products comprising software stored on any computer-useable medium. Such software, when executed in one or more data processing device, causes a data processing device(s) to operate as described herein. Embodiments of the invention employ any computer-useable or readable medium. Examples of computer-useable mediums include, but are not limited to, primary storage devices (e.g., any type of random access memory), secondary storage devices (e.g., hard drives, floppy disks, CD ROMS, ZIP disks, tapes, magnetic storage devices, and optical storage devices, MEMS, nanotechnological storage device, etc.).","The embodiments have been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.","The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can, by applying knowledge within the skill of the art, readily modify and\/or adapt for various applications such specific embodiments, without undue experimentation, without departing from the general concept of the present invention. Therefore, such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments, based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation, such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.","The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor(s), and thus, are not intended to limit the present invention and the appended claims in any way.","The breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form a part of the specification, illustrate embodiments of the invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the relevant art to make and use the invention.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
