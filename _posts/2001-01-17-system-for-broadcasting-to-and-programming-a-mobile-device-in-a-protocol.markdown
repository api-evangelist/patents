---
title: System for broadcasting to, and programming, a mobile device in a protocol
abstract: The present invention is directed, in one embodiment, to a programming interface which enables device/protocol/network independent transmission of messages to, and programming of, mobile devices. In another embodiment, the present invention is directed to data structures maintained on, and supported by, the mobile devices. The present invention also, in another embodiment, provides security for programming messages and an acknowledgement channel over which the mobile device can acknowledge receipt of, and successful implementation of, a programming message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06981137&OS=06981137&RS=06981137
owner: Microsoft Corporation
number: 06981137
owner_city: Redmond
owner_country: US
publication_date: 20010117
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["REFERENCE TO CO-PENDING APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is a divisional application stemming from U.S. patent application Ser. No. 09\/108,953, filed on Jun. 30, 1998. The benefit of the filing date of the above-mentioned application is hereby claimed.","The present application claims priority from U.S. provisional application Ser. No. 60\/070,720 filed on Jan. 7, 1998 entitled FEATURES OF TRANSMISSION AND MANIPULATION OF DATA and Ser. No. 60\/075,123 filed Feb. 13, 1998 entitled FEATURES OF A COMMUNICATION CHANNEL and Ser. No. 60\/074,236 filed Feb. 10, 1998 entitled FEATURES OF DEVICE DRIVER.","The present invention hereby fully incorporates by reference U.S. application entitled SYSTEM FOR EFFICIENT ROUTING AND TRANSLATION OF DATA, Ser. No. 09\/107,899 filed on Jun. 30, 1998.","The present invention relates to personal mobile computing devices commonly known as mobile devices. More particularly, the present invention relates to a system and method for delivering information to, and programming mobile devices.","Mobile devices are small electronic computing devices often referred to as personal digital assistants. Many such mobile devices are hand held devices, or palm size devices, which comfortably fit within the hand. One commercially available device is sold under the tradename HandHeld PC (or H\/PC) having software provided by Microsoft Corporation of Redmond, Wash.","Generally, the mobile device includes a processor, random access memory (RAM), and an input device such as a keyboard and a display. The keyboard can be integrated with the display, such as when the keyboard is incorporated as a touch sensitive display. A communication interface is optionally provided and is commonly used to communicate with the desktop computer. A replaceable or rechargeable battery powers the mobile device. Optionally, the mobile device can receive power from an external power source that overrides or recharges the built-in battery.","In some prior applications, the mobile device is used in conjunction with the desktop computer. For example, the user of the mobile device may also have access to, and use, a desktop computer at work or at home or both. The user typically runs the same types of applications on both the desktop computer and on the mobile device. Thus, it is quite advantageous for the mobile device to be designed to be coupled to the desktop computer to exchange information with, and share information with, the desktop computer.","Another technique for providing information to such mobile devices is through a wireless transmission link. Such information can include electronic mail or news, weather, sports, traffic and local event information. The information is typically obtained from a desktop computer connected to the Internet and delivered over a wired connection. However, it may be desirable to deliver such information over a wireless connection as well. A wireless receiver on the mobile device can act to receive information as it is being sent to the mobile device.","Where the mobile device is or has a pager, each pager in a given system has one or more addresses. When a message is transmitted over a wireless channel, it is destined for an address. All pagers assigned to that wireless channel receive the message and check the address contained in the message against its own addresses. This address-matching algorithm can be implemented either in the hardware, or in software, or in a combination of hardware and software. If the address associated with the incoming message does not match any of the addresses on the pager, then the message is discarded. However, if the address does match one of the addresses on the pager, then the message is accepted and forwarded to higher level software in the protocol stack on the pager for suitable processing.","Addresses can typically be of two types. The first is a personal address which is unique within a given wireless network (i.e., only one pager has that address). The personal address is used for sending a message to a particular pager.","The second type of address is a broadcast address. A broadcast address is typically programmed into many pagers within a given wireless network. Thus, a single message delivered over a broadcast address is received and accepted by multiple pagers in the network. Such addresses are used for implementing broadcast services, such as the news, traffic, weather, etc. services mentioned above.","There is currently no convenient way to reprogram the addresses in mobile devices, such as pagers. Instead, the pagers must be brought back to a service center where special tools are used to access and modify the internal storage of the pager, where the addresses are stored. Some prior systems have attempted to accomplish over-the-air programming. In such systems, the network owner (or carrier) sends a special message to the pager that changes the addresses in the pager.","However, to date, this has been quite uncommon. Each manufacturer of pagers has its own proprietary message formats and methods in the radio hardware and software associated with the pager. Thus, a special message needs to be specially formatted for the reprogramming of each of the different manufacturers' pagers. In addition, some manufacturers have more than one model or style of pager, each with its own internal proprietary message formats and methods. Thus, even a single manufacturer of pagers would be required to have a variety of special programming messages sent, based upon the particular type of pager being used by the user.","Further, over-the-air programming presents significant difficulties with respect to security. In other words, if the provider of the broadcast services being programmed wishes to charge users a fee or subscription price to receive the broadcast services, then the programming messages must be highly secure. Otherwise, unauthorized programming of the pager devices to receive the broadcast services would be problematic.","Further, with the advent of global computer networks, such as the Internet, and information, broadcast services, have become prevalent and important. However, a typical pager can only have a limited number of addresses (usually 2-8). A much larger number of broadcast services would desirably be offered to suit a wide range of interests and needs for the various users of the pagers. That being the case, each individual user would need to have the pager reprogrammed (by taking it back to a service center) so that it contained the addresses which would select desired broadcast services, desired by the individual user. This would need to be done each time the user wished to add, delete, or change the broadcast services selection. This is highly cost inefficient and is believed to have at least stunted the growth and proliferation of such broadcast services.","Over-the-air programming also presents another significant hurdle\u2014reliability. For instance, even if a programming message were to be transmitted over the air, the programming message could contain errors once received by the pager, or the pager could be out of the service area, or turned off, when the programming message was transmitted. In a one-way paging system (which is the most prevalent system in the world today) there is no way for a sender to know that the programming message was actually received successfully by the desired pager.","The present invention is directed, in one embodiment, to a programming interface which enables device\/protocol\/network independent transmission of messages to, and programming of, mobile devices. In another embodiment, the present invention is directed to data structures maintained on, and supported by, the mobile devices. The present invention also, in another embodiment, provides security for programming messages and an acknowledgement channel over which the mobile device can acknowledge receipt of, and successful implementation of, a programming message.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["10","10","12","14","16","18","12","12","18"]},"Wireless carrier  is described in greater detail later in the application. Briefly, however, wireless carrier  is configured to receive service content and programming messages (hereinafter content) from content provider  via dial-up or direct internet connection, or a network connection. The way in which wireless carrier  obtains information from content provider  can include proprietary or non-proprietary means. For example, in one illustrative embodiment, wireless carrier  subscribes to active channels at a content provider's web site using the Internet Explorer product available from Microsoft Corporation. The Internet Explorer component pulls data from the web site and stores it on a cache for later transmission to mobile device .","Wireless carrier  also includes a wireless information server (WIS) . Server  has components which can pull data from content provider  as well. Server  also splits the content received from content provider  into pieces which are compatible with the particular type of transport being used by wireless carrier . For instance, server  may split the data such that it conforms to maximum packet size constraints, character set requirements, etc. for the channel type or transport type being used. Prior to transmission, the data is preferably translated to a different form. As is described in greater detail later in the application, such translation may include various forms of encryption, and may also include compression, encoding, etc. Once the data has been split appropriately such that it conforms to the transport constraints, the data is then configured for transmission over the air through a wireless network (such as through a paging channel) to be received directly on mobile device . The transmitted data is received by a wireless receiver and driver component  on mobile device  where the data is prepared for use by mobile device .","Mobile device  also preferably includes a modem . Thus, rather than being transmitted through wireless carrier , the service content can be transmitted directly from content provider  through a direct dial-up modem connection to mobile device .","Desktop computer  will also be described in greater detail later in the specification. Briefly, however, desktop computer  is preferably provided with a standard web browser, such as Internet Explorer 4.0, commercially available from the Microsoft Corporation of Redmond, Wash. That being the case, the users of desktop computer  can preferably subscribe to channels in a standard fashion which provide the user with certain channel content which can be browsed off-line or on-line. Desktop computer  can thus periodically retrieve or receive new content for further transmission to mobile device .","Desktop computer  also preferably includes synchronization component . Briefly, synchronization component  is configured to interact with a similar synchronization component  on mobile device  such that files which are the subject of synchronization can be synchronized from desktop computer  to mobile device , or vice versa. Once synchronized, both files (those on computer  and mobile device ) contain up to date information.","More specifically, mobile device , in the preferred embodiment, can be synchronized with either desktop computer , or another mobile device , or both. In that instance, properties of objects stored in an object store on mobile device  are similar to properties of other instances of the same object stored in an object store on desktop computer  or another mobile device . Thus, for example, when a user changes one instance of an object stored in an object store on desktop computer , the second instance of that object in the object store of mobile device  is updated the next time mobile device  is connected to desktop computer  so that both instances of the same object contain up-to-date data. This is referred to as synchronization.","In order to accomplish synchronization, synchronization components  and  run on both mobile device  and desktop computer  (or another mobile device ). The synchronization components communicate with one another through well defined interfaces to manage communication and synchronization","It is worth noting that, in the preferred embodiment, while mobile device  can be coupled to desktop computer , it can be also coupled to another mobile device . This connection can be made using any suitable, and commercially available, communication link and using a suitable communications protocol. For instance, in one preferred embodiment, mobile device  communicates with either desktop computer  or another mobile device  with a physical cable which communicates using a serial communications protocol. Other communication mechanisms are also contemplated by the present invention, such as infra-red (IR) communication or other suitable communication mechanisms.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2","b":["18","18","30","32","34","36","37","39","10","38"]},"Memory  is preferably implemented as non-volatile electronic memory such as random access memory (RAM) with a battery back-up module (not shown) such that information stored in memory  is not lost when the general power to mobile device  is shut down. A portion of memory  is preferably allocated as addressable memory for program execution, while another portion of memory  is preferably used for storage, such as to simulate storage on a disc drive.","Memory  includes operating system , an application program  (such as a personal information manager or PIM) as well as an object store . During operation, operating system  is preferably executed by processor  from memory . Operating system , in one preferred embodiment, is a Windows CE brand operating system commercially available from Microsoft Corporation. The operating system  is preferably designed for mobile devices, and implements database features which can be utilized by PIM  through a set of exposed application programming interfaces and methods. The objects in object store  are preferably maintained by PIM  and operating system , at least partially in response to calls to the exposed application programming interfaces and methods.","I\/O components , in one preferred embodiment, are provided to facilitate input and output operations from a user of mobile device . I\/O components  are described in greater detail with respect to .","Desktop communication interface  is optionally provided as any suitable communication interface. Interface  is preferably used to communicate with desktop computer , content provider , wireless carrier  and optionally another mobile device , as described with respect to FIG. . Thus, communication interface  preferably includes synchronization components  for communicating with desktop computer  and modem  for communicating with content provider . Wireless receiver and driver  are used for communicating with wireless carrier .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["18","18","18","43","45","46","45","46","46","45","43"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 4","FIG. 3","FIG. 4"],"b":["18","18","18","45","46","18","45","46"]},"It should be noted that the display  for the mobile device as shown in  can be the same size as one another, or different sizes from one another, but would typically be much smaller than a conventional display used with a desktop computer. For example, displays  shown in  may be defined by a matrix of only 240\u00d7320 coordinates, or 160\u00d7160 coordinates, or any other suitable size.","The mobile device  shown in  also includes a number of user input keys or buttons (such as scroll buttons ) which allow the user to scroll through menu options or other display options which are displayed on display , or which allow the user to change applications or select user input functions, without contacting display . In addition, the mobile device  also shown in  also preferably includes a power button  which can be used to turn on and off the general power to the mobile device .","It should also be noted that, in the embodiment illustrated in , mobile device  includes a hand writing area . Hand writing area  can be used in conjunction with stylus  such that the user can write messages which are stored in memory  for later use by the mobile device . In one illustrative embodiment, the hand written messages are simply stored in hand written form and can be recalled by the user and displayed on the display screen  such that the user can review the hand written messages entered into the mobile device . In another preferred embodiment, mobile device  is provided with a character recognition module such that the user can enter alpha-numeric information into mobile device  by writing that alpha-numeric information on area  with stylus . In that instance, character recognition module in the mobile device  recognizes the alpha-numeric characters and converts the characters into computer recognizable alpha-numeric characters which can be used by the application programs  in mobile device .","Of course, where mobile device  is implemented as a pager, stylus  and handwriting area  are not needed. Instead, mobile device  is simply provided with screen , user input buttons  and power button , or other suitable items.","FIG.  and the related discussion are intended to provide a brief, general description of a suitable desktop computer  in which portions of the invention may be implemented. Although not required, the invention will be described, at least in part, in the general context of computer-executable instructions, such as program modules, being executed by a personal computer  or mobile device . Generally, program modules include routine programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that desktop computer  may be implemented with other computer system configurations, including multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for implementing desktop computer  includes a general purpose computing device in the form of a conventional personal computer , including processing unit , a system memory , and a system bus  that couples various system components including the system memory  to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory  includes read only memory (ROM)  a random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routine that helps to transfer information between elements within the desktop computer , such as during start-up, is stored in ROM . The desktop computer  further includes a hard disk drive  for reading from and writing to a hard disk (not shown) a magnetic disk drive  for reading from or writing to removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , magnetic disk drive interface , and an optical drive interface , respectively. The drives and the associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the desktop computer .","Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks (DVDs), Bernoulli cartridges, random access memories (RAMs), read only memory (ROM), and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the s hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs  (which may include PIMs), other program modules  (which may include synchronization component ), and program data . A user may enter commands and information into the desktop computer  through input devices such as a keyboard , pointing device  and microphone . Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus , but may be connected by other interfaces, such as a sound card, a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , desktop computers may typically include other peripheral output devices such as speaker  and printers.","The desktop computer  may operate in a networked environment using logic connections to one or more remote computers (other than mobile device ), such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other network node, and typically includes many or all of the elements described above relative to desktop computer , although only a memory storage device  has been illustrated in FIG. . The logic connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer network intranets and the Internet.","When used in a LAN networking environment, the desktop computer  is connected to the local area network  through a network interface or adapter . When used in a WAN networking environment, the desktop computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a network environment, program modules depicted relative to desktop computer , or portions thereof, including synchronization component , may be stored in local or remote memory storage devices. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Desktop computer  runs operating system  that is typically stored in non-volatile memory  and executes on the processor . One suitable operating system is a Windows brand operating system sold by Microsoft Corporation, such as Windows 95 or Windows NT, operating systems, other derivative versions of Windows brand operating systems, or another suitable operating system. Other suitable operating systems include systems such as the Macintosh OS sold from Apple Corporation, and the OS\/2 operating system sold by International Business Machines (IBM) of Armonk, N.Y. Application programs are preferably stored in program module , in volatile memory or non-volatile memory, or can be loaded into any of the components shown in  from a floppy diskette , CDROM drive , downloaded from a network via network adapter , or loaded using another suitable mechanism.","A dynamically linked library (DLL), comprising a plurality of executable functions is associated with PIMs in the memory for execution by processor . Interprocessor and intercomponent calls are facilitated using the component object model (COM) as is common in programs written for Microsoft Windows brand operating systems. Briefly, when using COM, a software component such as a DLL has a number of interfaces. Each interface exposes a plurality of methods, which can be called individually to utilize different services offered by the software component. In addition, interfaces are provided such that methods or functions can be called from other software components which optionally receive and return one or more parameter arguments.","In general, the DLL associated with the particular PIM or other program is designed specifically to work in conjunction with that PIM and to expose desktop synchronization interfaces that function as described in more detail in the above-referenced co-pending U.S. patent application according to a synchronization protocol. The DLL, in turn, calls interfaces exposed by the PIM in order to access data representing individual properties of objects maintained in an object store. The object store , of course, can reside in any one of the suitable memory components described with respect to FIG. .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 6","FIG. 6"],"b":["200","18","18","200","12","14","200","202","204","206","200","18","206","26","28"]},"Mobile device  is also illustrated in greater detail. Mobile device  includes radio hardware (or radio HW)  which corresponds to the actual radio receiver hardware in mobile device . Mobile device  also includes driver  which interfaces with radio HW  to pass information to radio HW  and receive information from radio HW . Device  also includes programming message processing component (PMPC)  which can be implemented in any suitable memory in mobile device . PMPC  receives messages transmitted over transmission link  and processes them in accordance with the techniques described below.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["18","6","18","204","200","18","214"]},"PMOC  then accesses cryptography component  and creates a signed and encrypted programming message for transmission over transmission link  to mobile device . Encryption of the programming data into an encrypted programming message can be accomplished in any number of suitable ways. One method by which the encryption is implemented is described in greater detail below with respect to . Encryption of the programming data into an encrypted programming message is indicated by block . The data can also be subjected to additional processing, such as compression, encoding, etc.","Next, the data is transmitted from originator  to mobile device . As described with respect to , the data can be transmitted over any suitable transmission link. With respect to the embodiment described in , transmission link  is a wireless transmission link, such as a radio frequency paging channel in which PMOC  provides the encrypted programming message to a radio transmitter which transmits it to radio HW  of mobile device , where the message is received. Transmission of the encrypted programming message to mobile device  is illustrated by block  in FIG. .","As is described in greater detail below, the encrypted programming message has a header appended thereto. The message is passed to a message router component which routes the message to PMPC  and through various processing steps. The header indicates the types of processing the message was subjected to prior to transmission, and the message is subjected to complementary processing (such as decoding, decompression, etc.) after being received. Receiving the message is indicated by block .","The router passes the message to PMPC  on mobile device . This is indicated by block . PMPC  performs any necessary translations on the encrypted programming message. PMPC  also detects, based on the header information, that the message is a programming message and invokes an appropriate input\/output (I\/O) control call to place the message in proper form so that it can be passed back to driver  in a desired format. In the preferred embodiment, PMPC  invokes I\/O control calls to driver  using appropriate application programming interfaces (APIs) which are described in greater detail below. For example, the header information may identify that the programming message is a new address programming message. In that case, PMPC  invokes a RADIO_PROGRAMMING I\/O control call with a subparameter ADDRESS_PROGRAMMING to program a new address. The encrypted programming data is passed to driver  which calls a library function DecryptAndValidatePgmData( ) to decrypt and validate the programming data. Passage of the programming data, in the proper form, to the driver  is illustrated by block .","After driver  has decrypted and validated the programming message, the programming data is obtained in its original, unencrypted form. Driver  then places the actual programming data in appropriate output buffers in driver  for retrieval, or places them in input buffers on radio HW . Radio HW  can then perform the necessary programming in accordance with the actual programming data provided. This is indicated by blocks  and .",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 8","b":["18","18","200","16","18","230","8"]},"The user then requests a change in the subscription services received on mobile device . Such a change may include addition of a service, deletion of a service or modification of a service and will likely require reprogramming of the addresses, or other information, stored in mobile device , so that mobile device  can receive a new subscription service, or so that a subscription service can be cancelled and no longer provided to mobile device . The user typically provides this information from the desktop computer through which the originator's website has been accessed. This is indicated by block .","Originator  then creates a signed and encrypted programming message for eventual transmission to mobile device . This is described in greater detail below and is illustrated by block .","After the encrypted programming message is created at originator , it is transmitted over transmission link  to mobile device . In the embodiment illustrated in , transmission link  comprises an Internet connection between the user's desktop computer and the website of the originator. Thus, the crypted programming message is transferred to the user's desktop computer, as illustrated by block .","The user then connects mobile device  to the desktop computer. As described above, this type of connection can be formed in any suitable manner, such as through a hardwire connection (or cable) using serial communication, through an infrared transmission link, or through any other suitable connection mechanism. This is indicated by block .","The user then requests synchronization between the desktop computer and mobile device . As described above, synchronization components  and  interact according to a synchronization protocol which causes the encrypted programming message to be synchronized to mobile device . More specifically, synchronization component  causes the encrypted message to be transferred to PMPC  on mobile device . The synchronization step is illustrated by block .","From this point, processing continues in exactly the same fashion as it did beginning with block  of the over-the-air programming system set out in FIG. . Similar blocks are similarly numbered to those shown in FIG. . Specifically, PMPC  executes any translations required on the encrypted programming message and places the encrypted programming message in proper form so that it can be passed to driver . PMPC  then invokes I\/O control calls to driver  using appropriate APIs, in order to pass the encrypted programming message back to driver  for decryption and validation. This is indicated by block .","Once the data has been decrypted and validated by driver , the programming data, in its unencrypted form, is placed in appropriate buffers. This is indicated by block .","Radio HW  then executes the programming operation according to the programming data received by driver . This is indicated by block .","It should be noted that the present system for programming the radio HW  on mobile device  is protocol, channel, and device independent. In other words, once the encrypted programming message is provided to PMPC , the process for providing that information to driver , and decrypting and validating the programming message at driver  is exactly the same, regardless of what specific radio HW device  is provided, and regardless of the channel or transmission protocol over which the programming message was received.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIGS. 9A and 9B","FIGS. 9A and 9B","FIGS. 9A and 9B"],"b":["202","204","200"]},"In order to obtain the encryption key, the present invention uses message specific data , base key , and encryption data . The message specific data  is preferably a part of the message itself with a required property that it changes with each programming message being sent. Base key , in one illustrative embodiment, is the electronic identification (EID) of mobile device . However, base key  could also be any other key as well. Encryption data  is preferably formed of other known bytes or data strings. The information in blocks ,  and  is provided to a hashed messaged authentication code (HMAC) generator . HMAC generator  derives a hash value that is used for seeding or biasing a key derivation algorithm. This biasing component is provided to key derivation component , which acts upon the biasing component in order to derive an encryption key .",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 9B","b":["9","242","244","246","254","256","258","260","254","262"]},"It should be noted that, since the message specific data  changes with each message, the derived encryption key  will also be different for each message. This is a preferred technique for deriving such a key. Without this technique, one can compare an encrypted message with a decrypted message and simply use those two items to compute the key for subsequent messages. However, since the key changes with each message, even if one key is derived, it cannot be used to decipher later messages.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIGS. 10A and 10B","FIGS. 9A and 9B","FIG. 9A","FIGS. 9A and 9B","FIG. 9A"],"b":["266","242","244","264","248","242","244","264","246","264","248","250","266"]},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 10B","b":["10","242","244","264","268","270","272","248","274"]},"The biasing component is then used to bias the signing key derivation algorithm in order to obtain the signing key . This is indicated by block .","Once the signing key and encryption keys have been derived, the programming message can be prepared for transmission over transmission link .  illustrate the preparation of the programming message for transmission over transmission link . The programming data  and the signing key  are applied to HMAC generator . This provides a signature value  which is based on the programming data  and the signing key . The digital signature  is then added to programming data  as indicated by block . The programming data , along with its signature , are then encrypted using encryption key . In other words, the programming data , along with its signature , and encryption key , are provided to encryption component  and any suitable encryption technique can be used. The output of encryption component  is an encrypted message  which corresponds to the programming data , along with its signature , as encrypted by the encryption key .","The encrypted message  is appended to the message specific data , in its unencrypted form (or plain text form). A header is added to the encrypted message  and message specific data . This is indicated by block . The message can be further passed through other translations such as compression, encoding, etc. The entire programming message  thus includes header , encrypted message , and message specific data . Header  is preferably a sequence of bytes which serves a number of purposes. First, it identifies the message  as a programming message. Next, it identifies the start and end of the encrypted portion  of the message, and the start and end of the message specific data portion  of the message (which is not encrypted). Finally, header  identifies whether the EID was used as the base key.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 11B","b":["11","292","266","294","282","280","296"]},"The programming data is then joined with its signature. This is indicated by block . The encryption key is obtained and the programming data, along with its signature, is encrypted using the encryption key in order to form the encrypted message. This is indicated by blocks  and . The message specific data  is appended to the encrypted message, and a header is added in order to from the entire programming message transmitted over transmission link . Other translations can also be performed prior to transmission. These final steps are indicated by blocks  and .","The prepared message is transmitted over transmission link  where it eventually ends up at PMPC component , as described above. Once the programming message is received by PMPC , it is placed in proper form for being passed to driver  and eventually radio HW , where the programming is actually carried out.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 12A","FIG. 12A","FIG. 12A"],"b":["208","210","208","208","208"]},"Also, it is not necessary for radio HW  to store these data structures at all. That may simply be a preferable implementation when radio HW  is implemented as a removable hardware item (e.g., a radio PCMCIA type card). Storing the data structures on the radio HW  in non-volatile memory enables a user to remove the card from one mobile device  and plug it into another and carry the information easily to the new device. It also allows for implementing more of the functions in the radio hardware. However, device driver  can also store these data structures in system memory and carry out the functions in software, although this may be less preferable in some respects.","In any case,  illustrates one embodiment in which radio HW  maintains key table , address table , group information table , group index table , and carrier and manufacturer information table . These data structures are fully described below.","Address Table","This table is used to store address related information.",{"@attributes":{"id":"p-0095","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":[{},"ey","Expiration","Address","Address","ddressN",{}]},{"entry":["Status","ndex","Date","Tag","Info","me","escrip-tion"]},{"entry":["(1)","1)","(2)","(8)","n)","32)*","64)*"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0\u00d701",{},"401","PERSONAL",{},{},{}]},{"entry":["0\u00d701",{},"0","EXEC"]},{"entry":["0\u00d701",{},"534","NEWS"]},{"entry":[{},{},{},{},"\u2014"]},{"entry":["0\u00d700",{},"0","(empty)"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":"Fields marked with \u2018*\u2019 can be stored in volatile memory (e.g. in the registry) to save memory size of the nonvolatile memory in radio HW. These have not been included in the size calculations. "}]}}]}}},"Status: This is a flag byte. The following are illustrative flags:",{"@attributes":{"id":"p-0097","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Flag Name","Value","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ADDRESS_FLAG_ENABLE","0\u00d701","If set, the address is"]},{"entry":[{},{},"enabled (message received on"]},{"entry":[{},{},"this address will be"]},{"entry":[{},{},"processed). If not set,"]},{"entry":[{},{},"messages received on this"]},{"entry":[{},{},"address are discarded by the"]},{"entry":[{},{},"card."]},{"entry":["ADDRESS_FLAG_PRIORITY","0\u00d702","If set, messages of this"]},{"entry":[{},{},"address should be delivered"]},{"entry":[{},{},"to the higher levels"]},{"entry":[{},{},"immediately (e.g. personal"]},{"entry":[{},{},"address). If not set, the"]},{"entry":[{},{},"messages can be buffered"]},{"entry":[{},{},"internally for later"]},{"entry":[{},{},"delivery."]},{"entry":["ADDRESS_FLAG_AC_ONLY","0\u00d704","This address is enabled only"]},{"entry":[{},{},"when external power is"]},{"entry":[{},{},"available."]},{"entry":["ADDRESS_FLAG_PO_ONLY","0\u00d708","This address is enabled only"]},{"entry":[{},{},"when the device is powered"]},{"entry":[{},{},"on."]},{"entry":[{},"0\u00d710-0\u00d780","Reserved for future use"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["KeyIndex: If non-0, index into the key table for the associated key. This key is used when a message arrives on this address that does not use any service group code.","ExpirationDate If non-0, it indicates the date on which this address would be disabled. It is stored as, for example, number of days from Jan. 1, 1997. Midnight is assumed (thus the expiration date is the last day of the service). Note that card or the driver may not be expected to act on this value\u2014higher level applications will access and act on this value.","AddressTag: Tag for the address. The address tag is used only internally for programming and accessing the addresses.","AddressInfo: This is the address and associated information for the use of the underlying network (e.g. in FLEX system, this would be the capcode and associated properties such as Collapse value, Phase, etc. In cellular systems, this would be the EIN (equipment identification number)).","AddressName: Descriptive name for the address (e.g. MSNBC, NewsNow, etc.).","Description: Descriptive text for the address (e.g. \u201cYour stock and company news channel\u201d).\n\nOverall Size=(1+1+2+8+32)*16=704 Bytes (For a Flex radio)\n        \n        ","This table is used to store security related information. This is illustratively a pooled resource as one or more service groups or addresses can share the same key."]}}}},{"@attributes":{"id":"p-0098","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"KeyTag","AlgCode","Key"]},{"entry":[{},"(8)","(4)","(16)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":{"@attributes":{"id":"ul0004-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":["KeyTag: Tag for the key. The key tag is used only internally for programming and accessing the key.","AlgCode: Encryption algorithm code. This is for use with the security algorithms.","Key: The security key. The driver illustratively supports storage of 16 byte keys (128-bits) for future versions.\n\nOverall Size=(8+4+16)*16=448 bytes\n"]}}}},"Service Group Info. Table and Service Group Index Table\n\n",{"@attributes":{"id":"p-0100","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00001","num":"00001"},"img":{"@attributes":{"id":"EMI-C00001","he":"83.48mm","wi":"107.44mm","file":"US06981137-20051227-C00001.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Fields marked with \u2018*\u2019 can be stored in volatile memory (e.g. in the registry to save memory size in the radio HW. These have not been included in the size calculations. "}]}}}},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":{"@attributes":{"id":"ul0008-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":["ServiceGroupCode Service group code in the printable ASCII range of 0\u00d720 and 0\u00d77E.","Status: This is a flag byte. The following flags are illustratively defined:"]}}}},{"@attributes":{"id":"p-0101","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Flag Name","Value","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GROUP_FLAG_ENABLE","0x01","If set, the service group is"]},{"entry":[{},{},"enabled (message received on"]},{"entry":[{},{},"this service group will be"]},{"entry":[{},{},"processed). If not set,"]},{"entry":[{},{},"messages received on this"]},{"entry":[{},{},"service group are discarded"]},{"entry":[{},{},"by the driver."]},{"entry":["GROUP_FLAG_PRIORITY","0x02","If set, messages of this"]},{"entry":[{},{},"service group should be"]},{"entry":[{},{},"delivered to the higher"]},{"entry":[{},{},"levels immediately (e.g."]},{"entry":[{},{},"Stock alert service group)."]},{"entry":[{},{},"If not set, the messages can"]},{"entry":[{},{},"be buffered internally for"]},{"entry":[{},{},"a later delivery."]},{"entry":["GROUP_FLAG_AC_ONLY","0x04","This service group is enabled"]},{"entry":[{},{},"only external when power is"]},{"entry":[{},{},"available."]},{"entry":["GROUP_FLAG_PO_ONLY","0x08","This service group is enabled"]},{"entry":[{},{},"only when the device is"]},{"entry":[{},{},"powered on."]},{"entry":[{},"0x10-","Reserved for future use"]},{"entry":[{},"0x80"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":{"@attributes":{"id":"ul0010-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":["The driver preferably detects AC and device ON\/OFF status changes to enable\/disable service groups based on GROUP_FLAG_AC_ONLY and GROUP_FLAG_PU_ONLY.","KeyIndex: If non-0, index into the key table for the associated key. This key is used when a message arrives on this service group code.","ExpirationDate If non-0, it indicates the date on which this service group would be disabled. It is stored, for example, as number of days from Jan. 1, 1997. A time 12:01 AM is assumed. Note that card or the driver is illustratively not expected to act on this value\u2014higher level applications will access and act on this value.","ServiceGroupTag: Tag for the service group. The service group tag is used only internally for programming and accessing the service groups.","ServiceGroupName: Descriptive name for the Service group (e.g. \u201cInternational News\u201d, \u201cLocal Weather\u201d, etc.). Suggested size of this field is 32 but OEM can support more.","Description: Descriptive text for the service group (e.g. \u201cNews from all around the world that affects your little community\u201d). Suggested size of this field is 64 but OEM can support more.","Index table is used to quickly locate a service group for a given address.\n\nOverall Size=(1+1+1+2+8)*64=332 (Service group table) (1)*16=16 (Index table)=848 bytes\n"]}}}},{"@attributes":{"id":"p-0102","num":"0125"},"figref":["FIG. 12A","FIG. 12A"],"b":["210","320","322","324"]},"Also, in the preferred embodiment, PMPC  is configured to invoke a number of I\/O control calls to perform various operations. Driver  supports and implements the I\/O control calls according to a predefined syntax and operation which is also described below.","The general type definitions used in the driver API will now be described. It should be noted that most of the following types map substantially directly to the data structures described above, although this is not necessary.","The following basic types are used:\n\n","All structures have the following two fields at the beginning:\n\n","In addition the variable length fields are grouped towards the end a length field for each one of them is provided. This allows expanding these structures without losing backward or forward compatibility. When accessing the variable length fields, the driver should use the wStructSize field's value as the start offset for the first variable length field. This will allow for forward compatibility when additional fields are added to the struct (using wStructSize field ensures that these new fields will be ignored by the legacy drivers).","Although a wide variety of specific struct types are used in the normal operation of the driver API, only those related to programming are discussed herein. Such structs include the following:\n\n","This struct contains information about the address.",{"@attributes":{"id":"p-0110","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00002","num":"00002"},"img":{"@attributes":{"id":"EMI-C00002","he":"120.99mm","wi":"56.64mm","file":"US06981137-20051227-C00002.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":"WORD wStructSize\u2003\u2003sizeof(RADIO_ADDRESS)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0022","list-style":"none"},"li":{"@attributes":{"id":"ul0022-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0023","list-style":"none"},"li":["DWORD dwMemberValidMask A mask indicating which fields of the struct are valid. Construct the value by \u2018OR\u2019ing one or more of the following:\n        \n        ","BYTE AddressNumber Address entry number. Address entries are numbered 0 onwards.","BYTE Status Status flags.","BYTE ExpirationDate[2] Expiration date. 0 if none.","BYTE AddressTagLen Length of the AddressTag field.","BYTE KeyTagLen Length of the KeyTag field.","BYTE AddressNameLen Length of the AddressName field","WORD wAddressDescriptionLen Length of the AddressDescription field.","WORD wAddressInfoLen Length of the AddressInfo field.","RADIO_TAG AddressTag Address Tag.","RADIO_TAG KeyTag Associated key for this address. (If the field is not present, then no key is associated with the address).","RADIO_DESC AddressDescription Description for the address. Note that this information is illustratively not required to be in non-volatile memory. It is displayed to the user for information purpose only.","RADIO_ADDRESS AddressInfo Address and associated information fields. This struct is protocol specific. For FLEX protocol it may contain the capcode information encoding collapse value, phase, address, etc.\n\nStruct RADIO_GROUP\n"]}}}},"This struct contains information about the service group:",{"@attributes":{"id":"p-0112","num":"0166"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00003","num":"00003"},"img":{"@attributes":{"id":"EMI-C00003","he":"121.07mm","wi":"56.64mm","file":"US06981137-20051227-C00003.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":"WORD wStructSize\u2003\u2003sizeof(RADIO_GROUP)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":{"@attributes":{"id":"ul0025-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0026","list-style":"none"},"li":["DWORD dwMemberValidMask A mask indicating which fields of the struct are valid. Construct the value by \u2018OR\u2019ing one or more of the following:\n        \n        ","WORD wGroupNumber Service group number. Service groups are numbered 0 onwards.","BYTE Status Status flags.","BYTE GroupCode Service group code","BYTE ExpirationDate[2] Expiration date. 0 if none.","BYTE GroupTagLen Length of the GroupTag field.","BYTE KeyTagLen Length of the KeyTag field.","BYTE AddressTagLen Length of the GroupTag field.","BYTE GroupNameLen Length of the GroupName field","WORD wGroupDescriptionLen Length of the GroupDescription field","RADIO_TAG GroupTag Service group Tag.","RADIO_TAG KeyTag Associated key for this service group. (If the field is not present, then no key is associated with the service group).","RADIO_TAG AddressTag Address this service group belongs to.","RADIO_DESC GroupDescription Description for the service group. Note that this information is not required to be stored in the non-volatile memory. It is displayed to the user for information purpose only.\n\nStruct RADIO_KEY\n"]}}}},"This struct contains information about the encryption keys",{"@attributes":{"id":"p-0114","num":"0186"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00004","num":"00004"},"img":{"@attributes":{"id":"EMI-C00004","he":"66.55mm","wi":"57.32mm","file":"US06981137-20051227-C00004.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":"WORD wStructSize\u2003\u2003sizeof(RADIO_KEY)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0028","list-style":"none"},"li":{"@attributes":{"id":"ul0028-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":["DWORD dwMemberValidMask A mask indicating which fields of the struct are valid. Construct the value by \u2018OR\u2019ing one or more of the following:\n        \n        ","BYTE KeyNumber Key number. Keys are numbered 1 onwards.","DWORD dwAlgCode Encryption algorithm code.","BYTE KeyTagLen Length of the KeyTag field.","BYTE KeyLen Length of the Key field.","RADIO_TAG KeyTag Key Tag.","RADIO_KEY Key The encryption key.\n\nStruct RADIO_PGM\n"]}}}},"This struct is used for programming addresses, service groups, keys, etc.",{"@attributes":{"id":"p-0116","num":"0197"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00005","num":"00005"},"img":{"@attributes":{"id":"EMI-C00005","he":"60.54mm","wi":"57.32mm","file":"US06981137-20051227-C00005.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":"WORD wStructSize\u2003\u2003sizeof(RADIO_PGM)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0031","list-style":"none"},"li":{"@attributes":{"id":"ul0031-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0032","list-style":"none"},"li":["DWORD dwMemberValidMask A mask indicating which fields of the struct are valid. Construct the value by \u2018OR\u2019ing one or more of the following:\n        \n        ","BYTE OperationCode Defines what operation to perform. Possible values are:\n        \n        ","BYTE TypeCode Type of programming being performed. Possible values are:\n        \n        ","WORD wProgramDataLen Length of the ProgramData field.","WORD wCheckSumLen 2 (Length of the checksum field, not required but defined for consistency's sake)","void ProgramData One of the following data structure (based on TypeCode):\n        \n        ","WORD wCheckSum Checksum of the entire struct except the checksum field itself. Checksum is calculated by adding up the struct byte by byte in a WORD and ignoring the overflow.\n\nStruct RADIO_CRYPT\n"]}}}},"This struct is used for cipher functionality related IO control calls.",{"@attributes":{"id":"p-0118","num":"0218"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00006","num":"00006"},"img":{"@attributes":{"id":"EMI-C00006","he":"91.36mm","wi":"57.32mm","file":"US06981137-20051227-C00006.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":"WORD wStructSize\u2003\u2003sizeof(RADIO_CRYPT)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0037","list-style":"none"},"li":{"@attributes":{"id":"ul0037-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0038","list-style":"none"},"li":["DWORD dwMemberValidMask A mask indicating which fields of the struct are valid. Construct the value by \u2018OR\u2019ing one or more of the following:\n        \n        ","HCRYPTPROV hCryptoProv handle to a Cryptography Service Provider","DWORD dwCryptoAlgId Cryptography Algorithm ID, e.g. CALG_RC4","DWORD dwCryptoFlags Flags for Cryptography function CryptDeriveKey( ) e.g. CRYPT_EXPORTABLE","BYTE AddressTagLen Length of the AddressTag field","BYTE GroupTagLen Length of the GroupTag field","WORD wMsgSpecificDataLen Length of MsgSpecificData field.","RADIO_TAG AddressTag Address Tag","RADIO_TAG GroupTag Service group Tag","BYTE MsgSpecificData[ ] Message specific data"]}}}},"As stated above, the I\/O control calls are made from PMPC  to driver  in order to accomplish certain operations. As with the various data structures, a variety of I\/O control calls are supported in the driver API. However, only those related to programming of driver  and radio card  are discussed herein. I\/O control calls have the following syntax.",{"@attributes":{"id":"p-0120","num":"0233"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Syntax"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"right"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["BOOL","xxx_IOControl ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"right"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","hOpenContext"]},{"entry":[{},"DWORD","dwCode"]},{"entry":[{},"PBYTE","pBufIn"]},{"entry":[{},"DWORD","dwLenIn"]},{"entry":[{},"PBYTE","pBufOut"]},{"entry":[{},"DWORD","dwLenOut"]},{"entry":[{},"PDWORD","pdwActualOut"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Parameters\n\n","Return Value\n\n",{"@attributes":{"id":"p-0123","num":"0245"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Syntax"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"struct RADIO_PGM RadioPgm;"},{"entry":"BOOL xxx_IOControl ("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD hOpenContext"]},{"entry":[{},"DWORD dwCode = RADIO_PROGRAM"]},{"entry":[{},"PBYTE pBufIn = &RadioPgm"]},{"entry":[{},"DWORD dwLenIn = sizeof(RadioPgm)"]},{"entry":[{},"PBYTE pBufOut = NULL"]},{"entry":[{},"DWORD dwLenOut = 0"]},{"entry":[{},"PDWORD pdwActualOut = &dwWriteBytes"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0044","list-style":"none"},"li":{"@attributes":{"id":"ul0044-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0045","list-style":"none"},"li":["The driver programs or un-programs the given item. For security reasons, the RadioPgm struct passed to this API is always encrypted. The driver should call the illustratively function DecryptAndValidateRadioPgmData( ) included in the driver support library to decrypt and validate the input data.\n\nRemarks\n","When performing a programming operation (RadioPgm.OperationCode=RADIO_PGM_OPERATION_PROGRAM), if the info struct does not have all the required fields then the driver processes the command in the following manner:","1. If the item being programmed already exists, change only those fields that exist in the info struct. Fields that are missing in the info struct retain their old values. For example, when programming an address, if the address already exists and the field AddressDescription is missing in the info struct then the old value of this field is retained. This gives the ability to change the entire item or individual fields.","2. If the item being programmed does not exist, then depending upon the missing field, it should either take a default value or the whole programming command should be rejected."]}}}},{"@attributes":{"id":"p-0124","num":"0250"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Programming a new carrier"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Field","Type","Default"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"dwFrequency","Required",{}]},{"entry":[{},"UserID","Required"]},{"entry":[{},"CarrierName","Optional","NULL"]},{"entry":[{},"CarrierDescription","Optional","NULL"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0125","num":"0251"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Programming a new Address"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Field","Type","Default"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"AddressNumber","Optional","(see below)"]},{"entry":[{},"AddressTag","Required"]},{"entry":[{},"Status","Required"]},{"entry":[{},"AddressDescription","Optional","NULL"]},{"entry":[{},"KeyTag","Optional","NULL"]},{"entry":[{},"ExpirationDate","Optional","0x0000"]},{"entry":[{},"Address","Required"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0046","list-style":"none"},"li":{"@attributes":{"id":"ul0046-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0047","list-style":"none"},"li":"When programming a new address, AddressNumber is not required (the next available empty entry is used) but AddressTag is illustratively required. When changing an existing address, either AddressNumber or AddressTag can be used to refer to the desired address. If both are given then AddressNumber is used."}}}},{"@attributes":{"id":"p-0126","num":"0253"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Programming a new Service group"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Field","Type","Default"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"WGroupNumber","Optional","(see below)"]},{"entry":[{},"GroupTag","Required"]},{"entry":[{},"Status","Required"]},{"entry":[{},"GroupDescription","Optional","NULL"]},{"entry":[{},"GroupCode","Required"]},{"entry":[{},"KeyTag","Optional","NULL"]},{"entry":[{},"ExpirationDate","Optional","0x0000"]},{"entry":[{},"AddressTag","Required"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0048","list-style":"none"},"li":{"@attributes":{"id":"ul0048-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0049","list-style":"none"},"li":"When programming a new service group, wGroupNumber is not required (the next available empty entry is used) but GroupTag is illustratively required. When changing an existing service group, either GroupNumber or GroupTag can be used to refer to the desired address. If both are given then GroupNumber is used."}}}},{"@attributes":{"id":"p-0127","num":"0255"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Programming a new key"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Field","Type","Default"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"KeyNumber","Optional",{}]},{"entry":[{},"KeyTag","Required"]},{"entry":[{},"AlgCode","Required"]},{"entry":[{},"Key","Required"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0050","list-style":"none"},"li":{"@attributes":{"id":"ul0050-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0051","list-style":"none"},"li":"This IOCTL call allows the caller to program or un-program an address, service group, keys, or carrier information."}}}},{"@attributes":{"id":"p-0128","num":"0257"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Syntax"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"HCRYPTKEY hKey;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"right"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["BOOL","xxx_IOControl ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"right"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","hOpenContext"]},{"entry":[{},"DWORD","dwCode = RADIO_CRYPT_DERIVE_KEY"]},{"entry":[{},"PBYTE","pBufIn = &RadioCrypt"]},{"entry":[{},"DWORD","dwLenIn = sizeof (RadioCrypt)"]},{"entry":[{},"PBYTE","pBufOut = &hKey"]},{"entry":[{},"DWORD","dwLenout = sizeof (hKey)"]},{"entry":[{},"PDWORD","pdwActualOut = &dwWriteBytes"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Operation\n\n","In order to implement the I\/O control calls, driver  calls a number of the functions stored in its support library. Such functions are described below.",{"@attributes":{"id":"p-0131","num":"0261"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AnalyzeMessage ( )",{}]},{"entry":[{},"\u2003\u2003\u2003Syntax"]},{"entry":[{},"\u2003\u2003\u2003\u2003BOOL","AnalyzeMessage("]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003void","\u2003\u2003\u2003*pMsg"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003DWORD","dwMsgLen,"]},{"entry":[{},"BOOL","*pDiscard"]},{"entry":[{},"BYTE *pServiceGroupCode);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0054","list-style":"none"},"li":{"@attributes":{"id":"ul0054-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0055","list-style":"none"},"li":["pMsg Pointer to the message bytes.","dwMsgLen Length of the message.","pDiscard Receives a BOOL value indicating whether the message should be discarded or kept.","pServiceGroupCode Receives the Service Group code."]}}}},"Returns\n\n","Description\n\n",{"@attributes":{"id":"p-0134","num":"0270"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Syntax"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"right"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["BOOL","DeriveEncryptionKey ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"right"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"RADIO_CRYPT","*pCryptInput,"]},{"entry":[{},"BYTE","*pbKeyValue,"]},{"entry":[{},"DWORD","dwKeySizeHCRYPTKEY * phKey,"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0060","list-style":"none"},"li":{"@attributes":{"id":"ul0060-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0061","list-style":"none"},"li":["Some parameters to this function are provided by the caller, the driver simply passes them to this function. The rest of the parameters are available to the driver in its internal data structure","pCrypt_Input Input to the RADIO_CRYPT_DERIVE_KEY IOCTL call.","pbKeyValue The key that needs to be used based on the AddressTag and GroupTag fields within the RADIO_CRYPT structure (The caller to the IOCTL call provides these two fields, the driver needs to use them to locate the key stored in the Key table and then pass the key in pbKey parameter)","dwKeySize Number of bytes in the pbKeyValue parameter."]}}}},"Returns\n\n","Description\n\n","Returns\n\n","Description\n\n",{"@attributes":{"id":"p-0139","num":"0301"},"figref":["FIG. 12B","FIGS. 7 and 8"],"b":["212","210","208","212","212","326"]},"PMPC  then executes the RADIO_PROGRAM control call to driver , supplying the Radio_Pgm struct, as described above. This is indicated by block .","In response to this control call, driver  calls the DecryptAndValidateRadioPgmData function  which is stored in the driver support library. This function decrypts the program message provided in the RADIO_PROGRAM I\/O control call. If this function finds that the input struct was a valid struct, it returns a true value to PMPC  and places the decrypted struct in its output buffer for access by radio HW . If this function finds that the struct was not properly encrypted, it returns a false value and rejects the programming command. This is indicated by blocks  and .","A programming component configured to program the specific radio HW  being used then accesses the information in the output buffer of driver  and performs the desired programming function.","It should be noted that the actual programming data provided to radio HW  can be provided according to a proprietary form, and the actual programming of radio HW  can be done in accordance with any proprietary parameters or constraints placed on it by the manufacturer. Thus, the manufacturer is free to define any programming operations, in accordance with any proprietary method. However, by supporting the above-defined data structures, radio HW  can be provided with proprietary programming data in an independent, open architecture fashion, regardless of the particular programming scheme used by radio HW , and regardless of the particular manner in which the programming message is transmitted to mobile device .","Even given this device\/protocol\/network independence, one obstacle still remains. There is currently no efficient method of determining whether mobile device  actually received the programming message, and has undertaken the requested programming operation. The system in accordance with one embodiment of the present invention addresses this obstacle as well.","Once the programming has been completed as indicated by driver  returning a value indicating the programming message contained a valid struct, PMPC  preferably generates an acknowledgement message directed to originator , indicating the programming has been accomplished. This message is provided to sync component  on mobile device  (and shown in FIG. ). The next time the user connects mobile device  to the desktop computer , sync components  and  cooperate to synchronize the acknowledgement message to desktop computer . The next time desktop computer  accesses the originator  of the programming message, the acknowledgement message is transmitted to the originator  indicating that the programming has been accomplished. In an embodiment in which desktop computer  is provided with a web browser, such as Internet Explorer 4.0, the acknowledgement message is transmitted back to the originator  when the web browser next invokes the scheduler to establish an Internet connection with the originator.","Thus, it can be seen that the present invention provides a device\/protocol\/network independent mechanism by which mobile device  can be programmed. The present invention also provides a method of encrypting data such that it can be sent in an encrypted and secured fashion from the originator  to mobile device . This mechanism allows the originator to program any suitable portions of mobile device , including addresses, groups, keys, validity periods, and macrotags. The present invention also provides backchannel confirmation which provides the originator with an acknowledgement that the programming has been accomplished.","Although the present invention has been described with reference to preferred embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":"1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3","b":"2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4","b":"2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 10A and 10B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 11A and 11B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 12A and 12B"}]},"DETDESC":[{},{}]}
