---
title: Integration of a software content space with test planning and test case generation
abstract: A computer-implemented method for test planning and test case generation, includes collecting, by a processor, a plurality of requirements, creating, by the processor, a plurality of content space specification files that includes the plurality of requirements, processing, by the processor, the plurality of content space specification files to generate a plurality of user stories, outputting, by the processor, the plurality of user stories and integrating, by the processor, the user stories into test planning and test case generation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09111040&OS=09111040&RS=09111040
owner: International Business Machines Corporation
number: 09111040
owner_city: Armonk
owner_country: US
publication_date: 20130115
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to software development, and more specifically, to systems and methods for the integration of a content space with test planning and test generation.","In the domain of software development, use cases and user stories are used to represent an external or end-user view of a product. As such, testing activities such as function verification test (FVT) and system verification test (SVT) directly execute use cases and user stories as at least part of their testing. Typically, FVT and SVT test plans explicitly address use cases, and agile stories have introduced the notion of user story.","Basic inquiries regarding testing of a given product release start with use cases or user stories and the plans that are created to test subsets of these based on different criteria. For example, inquiries include whether the use case was changed in any way in the current release. If the use case was not changed in the current release, the testing is typically narrower to ensure the use case (or \u2018function\u2019) works as it did in a prior release. For new use cases, the test plan calls more extensive test cases, exploring both positive and negative conditions, boundary conditions, combinations of platforms and the like. For changed use cases, testing can be more efficiently focused on the changes, rather than testing the entire use case or use story.","Several inquiries typically remain such as but not limited to: 1) whether the use cases or user stories are complete; 2) how completeness is determined; 3) the criteria to determine completeness; 4) whether overlap exists among use cases and user stories (overlapping use cases tend to reduce testing efficiency and greatly complicate test planning and test execution.; 5) determination of gaps between use cases and user stories; 6) a determination of functional capabilities that exist in the product, which are not covered by use cases or user stories; 7) if use cases and user stories are the primary or key input to test planning and test case definition, how gaps are detected; 8) a determination of the quality of testing for each requirement; and 9) whether requirements traceability is sufficient to obtain inquiries via automation.","The above-described inquiries are currently recognized and various mitigations have become fairly typical industry \u2018best practices\u2019. For example, the FVT test leads will typically review the product design documentation to determine what function exists and help ensure the test plans are complete without being too redundant. In another example, development teams review FVT test plans and sign-off that they are \u2018complete\u2019 (e.g., address a domain of product functions without gaps). Both examples depend on numerous people writing and reading numerous documents, therefore having inherent costs and marginal effectiveness. The aforementioned and other mitigations suffer from numerous and well-known weaknesses that routinely impact software product development.","Currently there exists a lack of logically complete input to test planning and test case generation that can utilize further automated techniques to support test scaling and efficiencies for today's software products. More specifically, the input to test planning and test case generation needs to be automatable, complete under some reasonable definition, consist of discrete units which are guaranteed to be non-overlapping and with no gaps, and support automated traceability back to requirements.","Exemplary embodiments include a computer-implemented method for test planning and test case generation, the method including collecting, by a processor, a plurality requirements, creating, by the processor, a plurality of content space specification files that includes the plurality of requirements, processing, by the processor, the plurality of content space specification files to generate a plurality of user stories, outputting, by the processor, the plurality of user stories and integrating, by the processor, the user stories into test planning and test case generation.","Additional exemplary embodiments include a computer program product for test planning and test case generation, the computer program product including a non-transitory computer readable medium storing instructions for causing a computer to implement a method. The method includes collecting, by a processor, a plurality requirements, creating, by the processor, a plurality of content space specification files that includes the plurality of requirements, processing, by the processor, the plurality of content space specification files to generate a plurality of user stories, outputting, by the processor, the plurality of user stories and integrating, by the processor, the user stories into test planning and test case generation.","Additional exemplary embodiments include a system for test planning and test case generation, the system including a processor configured to collect a plurality requirements, create a plurality of content space specification files that includes the plurality of requirements, process the plurality of content space specification files to generate a plurality of user stories, output the plurality of user stories and integrate the user stories into test planning and test case generation.","Further exemplary embodiments include a computer-implemented method for test planning and test case generation, the method including collecting a plurality of requirements, defining a content space including a plurality of cells, each cell defining an user story, each cell having a plurality of dimensions, creating a plurality of content space specification files that includes the plurality of requirements, traversing at least one dimension of each of the plurality of cells to generate a user story, mapping the plurality of user stories to the content space and mapping data of the content space to test planning and test case generation.","Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and the features, refer to the description and to the drawings.","In exemplary embodiments, the systems and methods described herein implement a content space and use the generated use cases and user stories from a product release content space and integrate the content space data with test planning and test case generation tools. The terms \u201cuse case\u201d and \u201cuser story\u201d are used herein as now described. An example of a use case is \u2018send email\u2019. Generally, a use case is function (verb) against some information abstraction (noun). A use case is composed of multiple user stories which define additional specifics such as interface and platform. Some user stories within the \u2018send email\u2019 use case are; \u2018send email via GUI using MS Outlook\u2019, \u2018send email via browser using Notes\u2019, and the like.","In exemplary embodiments, the systems and methods described herein implement generated use cases and user stories from a product release content space and integrate that data with test planning and test case generation tools. By utilizing a content space definition for a software product, a set of user stories can be automatically generated that partitions the entire product content for a given release. This partition includes all prior release use cases. The generated user stories have various attributes such as category and requirements source list, which are used in test planning. As such, the content space generated user stories partition the combination of prior release content and new release requirements. The systems and methods described herein use the user stories in test planning and test case generation; including the effective and efficient (automated) support these key aspects of test plans and test cases. The implementation of the content space in test case generation ensures that all requirements are covered by tests, and enables measurement of how well the requirements are covered. Currently, coverage of requirements by tests is a difficult problem, since tests and requirements are very distinct level of abstractions. In exemplary embodiments, adding the intermediate level of the content space simplifies the problem and enables division of the process into two steps, each may be possibly done by a different domain expert. The concerns of requirement coverage and test planning are separated as the first step of the process, which is concerned with requirement coverage through the creation of content space and the second stage, which is concerned with test planning. In addition, the systems and methods described herein enable automated support for key steps with improves efficiency and scaling.","As described herein, a content space model is implemented for integration of test case planning and test case generation. A content space is a way of representing software content from an outside-in perspective via a set of dimensions. Each of the content space dimensions has values defined in terms of the software itself that concern a particular aspect, such as information abstraction, function, external interface and runtime environment. The dimension values can represent existing content and also new content for the software, based on requirements (via content space analysis) for a new release. The content space can be programmatically traversed, and as this traversal occurs, end-to-end testable units (termed user stories) are output, each corresponding to a particular region of the content space and having content space coordinates. The set of all output user stories partitions the software content and the set of all new and changed user stories partitions the release requirements. The set of all user stories and various subsets (e.g., all Power user stories) are used to compute the content coverage metric of various scopes.","An example of how a content space can be set up and implemented is now discussed. It will be appreciated that the following example is illustrative of a content space and not limiting.","In exemplary embodiments, the content space can be a five-dimensional space (termed either as a \u2018software product content space\u2019 or a \u2018content space\u2019), such that each cell within the content space is an end-to-end use case (i.e., agile user story). In exemplary embodiments, the systems and methods described herein can be implemented at various levels of scale, from individual software components to very large products comprising hundreds of components to plan tests and generate test cases. The five dimensions structure the work as needed by software development (i.e., design, test, project management), and the requirements serve to define the values used on the dimensions. As such, the exemplary content space servers to bridge the requirements domain and implementation domain.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100"]},"In exemplary embodiments, content space specification files  are generated from the various sources in the requirements domain as described herein. As described further herein, the content space specification files are generated from various requirements . A content space tool  receives the content specification files  to automatically generate the agile user stories that can be stored in a user story storage medium . An additional storage medium  can be implemented to store changes to the specification files , or any other suitable output during the content space generation. Once generated, the agile user stories can be output to any suitable project management or test management tool  implemented by the users in the development domain.","The system  includes several functions, including, but not limited to: 1) articulating the content space; 2) classifying regions of the content space; 3) grouping the regions of the content space; 4) assigning priorities to use cases; and 5) loading the project management tool .","In articulating the content space, requirements are analyzed in terms of the five content space dimensions. This analysis results in (with iteration and consensus building) a definition of values for each of the five dimensions, which is represented in a form that can be programmatically processed. In articulating the content space, the systems and methods described herein address whether all the requirements are represented in the content space, whether each content space dimension value is properly defined and agreed upon, and whether all the dimension values are related to explicit, implicit or future requirements.","In classifying the regions of the content space, once the team is satisfied that the content space is defined (i.e., all dimension values known, understood, and reasonably well-defined) and that it does encompass all the requirements for a selected time-frame, the team next decides on how to classify regions of the content space. Through automated systems with team decisions, every cell in the content space is categorized in a variety of types, including, but not limited to: 1) does not apply to the product; 2) does apply to the product but for some future release; 3) is part of the product today (or from some prior release) and has no enhancements or changes; 4) is part of the product today and is enhanced or changed in some way; and 5) is a new or an enhanced function. The systems and methods described herein determine whether each content space dimension value is classified, and reviews of the results determine correctness.","Following agreement on the content space and categorization of regions, the content space regions are then grouped. Subsets of the content space are grouped together into a size which is desirable for project management and the scale of the product and teams. This step applies particularly to the content space regions classified as unchanged and new or enhanced (changed). The two extremes are; an entire content space can be grouped into a single output project management work item, or at the other extreme every single content space cell can be output as a single project management line item. Essentially every possible grouping in between these extremes is also supported. Typically used are grouping all new & changed user stories for a particular platform or grouping specific sub-variations of a verb.","In exemplary embodiments, there is flexibility in how these regions are selected and how they related to the content space cell classifications. The systems and methods described herein determine whether the grouping is correct and do the groupings properly reflect the tradeoff between project management needs and technical visibility based on classifications and complexity.","The grouping of content space cells into right sized project management work items mostly focused on a new function and an existing and unchanged function. The user (team) can programmatically select the grouping of content space cells based on many considerations such overall content space size, product size, degree of technical difficulty of new function, team size, number of team, and the like. In exemplary embodiments, individual content cells are use cases (with adjustable granularity) and the groupings are user functions or user stories.","Based on the relative priorities of requirements, regions of the content space (subsets of use cases) are assigned priority values. These can be used to help focus review sessions to ensure the right higher priority content is defined. When loaded into a project management application, the priorities can be used directly by development in Agile sprint (iteration) planning. The output project management work items are input (e.g., \u2018import\u2019) for example, from the user story storage medium , into an appropriate project management tool .","As described herein, a content space can be defined by five dimensions. In exemplary embodiments, the five dimensions of the content space are, in order: release (time); noun; verb; interface; and platform. The three dimensions, verb, interface and platform, are orthogonal and noun-specific. That is, an instance of these (e.g., a verb set, an interface set and a platform set) is defined for each noun of interest. Nouns are the fourth dimension. The combination of a noun and its associated 3D space is termed a \u2018noun space\u2019. A set of noun spaces at a given point in time (usually associated with product release) constitute the definition of the content space for a particular release of a product (when the point in time is chosen on a release calendar boundary). Instances a product content space for multiple releases represent the fifth dimension of content space: time.","For illustrative purposes, an example of a software product, a hypothetical browser-based email client is discussed for ease of discussion. It will be appreciated that other products are contemplated for which test planning and test case generation integrations can be implemented.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["200","201","202","203","204","205"]},"The platform dimension  is interpreted broadly to include the hardware, operating system, middle ware, hypervisor, and language runtime in which the product executes. Generally, meaningful platform elements are determined by each product. As such, the entire prerequisite software stack and hardware is considered. Values of the platform dimension  can include specific releases of each of these platform components as needed, or can be more generally specified. For example, a platform might be AIX 5.2 or just AIX. Alternatively, the platform might be Firefox 3.6 or higher, or just Firefox. Values can include as needed ancillary hardware for storage, networking, hardware management controllers, firmware, etc. for the full functional system configuration.","The interface dimension  has values chosen to identify and separate the kinds of interfaces that the subject software presents to external entities; people, other software or hardware. The values can be specified by type such as Graphical User Interface (GUI), command line interface (CLI), and so on. The values can include programmable interfaces such as web services (e.g. REST) and APIs. Protocols can also be specified as values (e.g. IPv6 or MPI (Message Processing Interface) used in super-computing environments).","The verb dimension  includes values such as functions or operations that are supported by the subject software for a particular noun. The operations may be specified at varying levels of granularity, depending upon the needs of a given set of requirements. For example \u2018copy\u2019 or \u2018create\u2019 might be sufficient. More fine-grained values such \u2018copy to like repository\u2019 and \u2018copy to new folder\u2019 can also be used. The decision depends on considerations like how new the function is, or how critical the different forms of copy are to the product stake-holders (those that define requirements), or how technically difficult to implement.","The noun dimension  is an abstract entity presented to externals via the interface(s). Most software for direct use by people has a number of such abstractions that people manipulate via the functions (verbs) presented by the software. Example nouns for an email client can include but are not limited to: inbox; inbox email; folder; and draft email. As with values on the above dimensions, there is flexibility in how coarse-grained or fine-grained the nouns are defined. The right level of noun dimension granularity for a given product and given release depends on the requirements.","The time dimension  values include natural values (i.e., discrete units) which are the releases planned for the product. The content space for release n+1 can be various additions and changes relative to the release n content space. These additions, enhancements and other changes affect the release n content space by changing the values defined on the various dimensions. New nouns, new verbs, new platforms, can all be added. Enhancements to exiting nouns and verbs are common and defined explicitly in the n+1 content space.","Because of the way the dimensions are defined, each generated user story is an end-to-end testable unit of function (sometimes termed \u2018FVT-able\u2019, where FVT=Function Verification Test). For example, for an \u201cemail\u201d client each user story is a cell in the five-dimensional space with coordinates of release, noun, verb, interface and platform. For example, \u201csend an email on Firefox via GUI release n\u201d is represented by a 5-tuple {release n, email, send, GUI, Firefox}, as shown in .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 1"],"b":["100","110","105","305","110","110","105","105","310","115"]},"In grouping user stories, a set of user stories is represented in output as a single user story. For example all the user stories for platform ABC or for function XYZ might be represented by a single output user story. Grouping does not change the size of a content space. Grouping allows the number of output user stories to be directly managed without eliminating any details from the CS specification. There is no limit on the size of a user story group. In exemplary embodiments, grouping is controlled by the user by filters in the content space specification file .","As filtering occurs, when a filter matches a user story and the filter has any kind of grouping requested, save the user story is saved in a buffer associated with the filter. After all filtering and all non-grouped user stories are output. The content space tool  loops through all the filters that have any kind of grouping. For each filter, the content space tool performs several steps. First, if a simple \u2018group\u2019 is requested in the filter, the content space tool  generates the single grouping user story, summary field, description field, and the like, and writes to output. The content space tool  then continues to the next filter. If a type of \u2018group by\u2019 is requested, then for each group by element (e.g. noun, verb, ifc, platform), the content space tool  builds subsets of the respective values on the dimension from among the buffered user stories. The content space tool  then generates a single user story group for each cross-dimension subset, generates the description field that itemizes the subset of user stories for the group, and writes the user story group.","Folding also reduces the number of output user stories like grouping. But in contrast to grouping, folding reduces the size of the content space. Folding reduces the size of the content space by collecting some number of dimension element values into a single value (folding operates on the content space itself while grouping operates on user stories). The resulting single value is then used as a dimension element value in place of the multiple collected values, thereby reducing the size of the content space. The single resulting value is termed a folding symbol (\u2018fold sym\u2019).","As described herein, folding does not eliminate the details from the content space specification file. The values collected into a fold sym remain in the content space specification file , and the folding done by the fold sym can be toggled on or off. The value-folding can be switched on and off for each of the noun, verb, interface and platform dimensions independently or all four dimensions together. Hence not only are the values still in the spec file, but the content space can also be processed again and user stories generated without folding or different folding, to see the detail. Folding can include both dimension folding and value folding.","In exemplary embodiments, the content space tool  processes command line parameters to determine what kinds of folding are requested. If no fold parameter, the content space tool  implements the default setting for folding. As the content space specification files  are read, the content space tool  collects a list of all fold syms, and values for each. After all the noun spaces are read from input files, the content space tool  invokes a fold function. The content space tool implements dimension folding first if requested. For each dimension for which folding is requested, the dimension is folded to \u201c*\u201d in each noun space. If value folding is requested for any dimensions that have not been folded, the following steps are implemented. If noun value folding, the content space tool  folds the noun values by removing nouns in value list of a fold sym and replace with single instance of the fold sym. For each (remaining) noun space, for each relevant dimension, the content space tool  check each dimension value to see if it is in the value list of a fold sym. If the noun is in the value list of the fold sym, then the content space tool  removes the value and adds the fold sym (once only) to the dimension list. If folding has been set off, the content space tool  takes no action. The content space by default is loaded in this mode. If fold request for the \u2018all\u2019 or similar, the interface and platform dimensions are folded (as above) and the verb dimension is value-folded for all noun spaces are folded, and the noun dimension is value-folded.","Referring still to , at block , each user story is enumerated in the content space and run through filters to classify and possibly add data. At block , the user story groups are generated and at block  show requests and a summary are generated. At block , the content space data is integrated into test planning and test case generation.","In exemplary embodiments, a content space is specified in a form that is processed (read) by the content space tool  (e.g., an Agile user story generation program). The specification can be split among multiple files (e.g., the content space specification files ), which can be processed individually or together. As such, an overall product content space can be split among some number of individual architects for parallel concurrent activity, and then processed as a whole.","In exemplary embodiments, each content space specification file  includes some number of noun spaces, defined symbols, and filters. A content space specification file  is used to define a content space in a form that can be processed programmatically. In exemplary embodiments, the specification file  is implemented to generate user stories and provide various kinds of statistics about the content space, enables content coverage metric, automated comparisons of multiple content spaces (e.g. cross-release), and the like. In exemplary embodiments, the content space specification file  includes several statements, which define, among other things, a noun space, that can include noun, verb, interface (ifc) and platform. A content space is a set of noun spaces. As such, a basic content space specification file defines one or more noun spaces. Descriptive names are used for the values on all these dimensions. In exemplary embodiments, additional statements can be added to the content space specification file . One statement is symbol (SYM) to simplify maintenance of the content space specification file  by reducing redundancy across noun space definitions. Another statement is a filter statement that is used to classify user stories, and to add information to output user stories. In exemplary embodiments, each instance of statements as a group, defines a single noun space. For example, the noun statement gives the noun space a name, and the other verb, interface and platform statements provide the values for which each dimension is named.","As further described herein, a sym statement is a simple mechanism to create a short-hand for a list of values. The short-hand can then be used in defining noun spaces (e.g. in \u2018noun\u2019, \u2018verb\u2019, \u2018ifc\u2019, \u2018platform\u2019 statements), in other sym statements, and in filter statements. This implementation of sym statements therefore simplifies use and later changes to the content specification file since the list of related values can reliably changed throughout a set of specification files by changing it in only a single place. For example, assume a content space has 15 noun spaces and 12 of those all use the same platform list. Then that list can defined once as a sym and that sym name used in the 12 noun spaces. The example illustrates a group of related syms that aggregates various example platforms. The sym \u2018all_email_env\u2019 is then used to in the definition of various noun spaces, for example in the \u2018draft email\u2019 noun space.","The symbols that end in a trailing \u2018_\u2019 (underbar) are fold syms, as is the \u2018send_\u2019. The \u2018_\u2019 indicates a symbol that can be folded. If the relevant type of value folding is requested (e.g. verb value to fold verb dimension, or platform value to fold platform dimension) then the symbols marked with a trailing \u2018_\u2019 are folded. That is, the symbol itself is used in the content space when folded. If not folded the symbol's value list is used in the content space. When folded a symbol is shown in generated user stories with the trailing \u2018_\u2019 so that everyone seeing the user story will know it is folded (is an abstraction).","As further described herein, filter statements are used to classify user stories into one of five categories; n\/a, future, nochange, changed or new. They also can add to a story a variety of information. A filter statement has the general structure: filter, <expression>, <classification>, <other requests>. The filter expression is a logical expression (i.e., evaluates to True or False) based on the language of the content the content space tool . For example, logical operators are supported (i.e., =, !=, >, <, in, not in, etc.) and the variables allowed are \u2018noun\u2019, \u2018verb\u2019, \u2018ifc\u2019, \u2018platform\u2019 and defined symbols (sym's). Other keyword-value pairs which may be included in a filter statement include but are not limited to: 1) Owner, owner name; 2) Group or Groupby request; 3) Priority, priority value; 3) Testid, testid value; and 4) Tag, list of tag values. By default, filtering is done after all the content space specification files  have been read and after folding is performed. The content space tool  has an option to turn off all filtering which is useful at time to check the results of content space changes.","In exemplary embodiments, the content space specification files  can implement additional statements, including, but not limited to: 1) comment_off\u2014used to end commented-out block of lines; 2) comment_on\u2014used to start a block of comment lines. Starts skipping; 3) createdby\u2014used to set the field \u2018Created By\u2019; 4) csvfile\u2014sets the name of the output.csv file; 5) eof\u2014logically ends file early (rest of file skipped); 6) include\u2014name a file to be included; 7) plannedfor\u2014used to set the RTC field \u2018Planned For\u2019; 8) scope\u2014used to set filter scope to file (default) or global; 9) set_filterid_in_summaryfield\u2014true or false (default); 10) set_implicit_folding\u2014true or false (default); 11) set_summary_prefix\u2014Default is \u201cUser Story\u201d; 12) set_summary_suffix\u2014Default is category of the user story; 13) tag_exclusion_set\u2014Define a mutually exclusive set of tags; and 14) title\u2014title (label) of content space.","As described herein, the specification files  support the definition of symbols used in defining the values and in the filters, that is, used within the content space specification file itself. This format helps maintain a content space specification by lessening duplication of constants (i.e., dimension values). This format also serves to help the specification file be self-documenting when description names are used for the symbols. For example, a list of platforms used in a prior release might be assigned to a symbol named \u2018prior_platforms\u2019. This symbol is then used in the noun spaces as a short-hand for the full list. This symbol can also be used in the filters.","Each use case in a content space is classified using filters into basic categories including, but not limited to: not applicable, future, regression and development. \u201cNot applicable\u201d are use cases judged to likely never be relevant for the product and future are use cases not in the n+1 release but inherent in the content space. In exemplary embodiments, the content space is identified to clearly encompass the requirements to help ensure nothing is missed. In doing so, some use cases are likely to be generated that are not planned for the current release.","In exemplary embodiments, filters are also implemented to add information to the generated use cases. Examples of information that can be added are priority, tags, references to requirements document and the like.","In exemplary embodiments, filters are also implemented to cause sets of use cases to be grouped into a single, broader output use case. Implementing filters in this manner can be helpful in the case regression use cases where fine-grained management and tracking of the individual use cases is not necessary (e.g., due to the existence of automated testing built during previous releases).","In generating the agile use cases, one or more content space specification files  are read by the content space tool . As described herein, a primary output is the user story storage medium . In exemplary embodiments, the user story storage medium can have a comma separated value (.csv) file format, which is a quasi-standard widely used by many software applications. A second type of output is the additional storage medium  for various summary and report like information or in progress changes.","As described herein, content space data is integrated into test planning and test case generation at block , which is now described in further detail. As described herein, a content space includes a {release, noun} two dimensional space, where each point in this space is a three dimensional {verb, interface, platform} space. A content space cell (i.e., user story) is a valid combination of a {release, noun, verb, interface, platform}. A test attribute is a finite non-empty set of possible values, where only one of these values may be selected for a single test case. A test model is a set of test attributes along with possible restrictions that exclude from testing some attribute values and\/or combinations of (i.e., logical expressions of) attribute values. Test cases are derived (generated) from a test model using the configured restrictions. A test plan is a test model along with some further information needed for testing such as attribute values validity, return codes, output messages, pre-steps and post-steps. A test planning tool (e.g., integrated within the content space tool ) is a tool used for managing test plans and associated data such as test environment data and schedules, test data, test scripts, and the like.","As described herein, at block , the systems and methods described herein derive test models out of content space and then select test cases using the content space information (i.e., dimension elements and attributes). In exemplary embodiments, the content space is mapped into test models, where the mapping method may be configurable to comply with different desired projections of the test model. The mapping is now described. First, some content space attribute values define a test model. For example, the mapping may be configured such that each valid combination of {i.e., release, noun, verb, and interface} defines a test model. Second, the rest of the content space attributes become attributes of each of the test models. In the last example the platform becomes an attribute of each test model. Hence a test model is built for each function via an interface, across all the supported platforms. Third, restrictions are then added to exclude values or value combinations of the test model attributes according to the content space and\/or associated attributes. In the last example, each platform value, which does not belong to the related {i.e., release, noun} combination, is excluded. The mapping can be configured by the user, balancing how the content space is mapped. In exemplary embodiments, the systems and methods described herein can map all the content space into a single test model, which results in highly complex constraints and a test model difficult to review. The systems and methods described herein can also map, each content space cell into a single test model, which can create too many test models and a decreased ability for test reduction without using information common to other test models.","The following examples illustrate multiple ways in which the content space can be mapped into a test model in accordance with exemplary embodiments:","1) All Content Space noun spaces --->One Test model \/\/ spectrum left end. In this example, it is possible to overly complicate the mapping, but can be implemented for smaller content spaces.","2) One Content Space noun space-->One Test Model per {verb, interface} with platform dimension values as model attribute. This example illustrates a balanced mapping.","3) One Content Space cell--->One Test model \/\/ spectrum right end. This example can potentially result in too many models. For some cells, this example may be implemented.","For the above examples, a software content space is a set of 3D noun spaces, where each noun space has dimensions of verb, interface, platform.","It will be appreciated that the systems and methods described herein support the range of mapping choices in the above examples because the one to use in a given implementation depends not only on the size of the content space, but other aspects such as the average size of noun spaces, and on the resolution used to generate the content space. A given software content space can be generated at varying resolutions, from fine-grained to high-level. For a given content space, different mappings can be defined for different noun spaces depending on percentage new or changed, for example, the noun space resolution, and the noun space size.","In exemplary embodiments, the content space to test model mapping is configured in the test planning tool after the content space and associated attributes are imported by the test planning tool. Some of the attributes are cell category, and cell requirements list. Category is new, changed or no-change depending on whether or not that cell (user story) is new or changed in the release and is based on requirements. The requirements list is a list of requirement identifiers such as Focal Point IDs, Rational Requirement Composer IDs, or RTC work item numbers. This requirements list is the identification basis for the requirements test coverage measurement. Based on the mapping, the content space is used by a test planning tool to generate test models using one or more of the mapping approaches described herein.","In exemplary embodiments, once initial test models are created, the test designer may add, possibly directly and\/or indirectly (e.g., providing a command syntax from which the tool extract attributes information) further attributes to each test model in order to have a more complete test model. The test planner may also add, possibly directly and\/or indirectly, further restrictions excluding illegal combinations. The test planner may also add further information to make a test plan out of the test model (e.g. attribute values validity, return codes, output messages, pre-steps and post-steps). In exemplary embodiments, the content space may include further information such as further attributes along with their possible values, relations of such additional attributes to content space attribute value or combination of content space attribute values, explicit restrictions and test plan information. Such additional information is imported and used by the test planning tool (e.g., from the content space specification files ).","In exemplary embodiments, the test planning tool may also import the requirement identifiers associated with the content space and requirement properties (e.g. priority) attaching each test model the associated requirement ids with their properties. The import of requirement identifiers provides requirements traceability to the test case level. In addition, during FVT and after all testing a requirement coverage metric can be computed per requirement, per requirement group or theme, and overall. This metric is defined as the percentage of all user stories in the product that are impacted by the requirement. After test plan details are filled, test cases are selected and generated automatically and\/or semi-automatically, based on the test model and some selection policy. The test planning tool may use some further content space information to determine test selection policy. First, the mapping resolution affects the level of test reduction. Second, it is possible to use the content space category attribute for each cell (new, changed, no-change) as an input to the level of test reduction. Third, it is possible to use the mapped requirement properties, such as priority.","The integration of content space data into test planning and test case generation and other content space implementations described herein can be performed in any suitable computing system as now described.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 4","b":["400","400","401"]},"In exemplary embodiments, in terms of hardware architecture, as shown in , the computer  includes a processor , memory  coupled to a memory controller , and one or more input and\/or output (I\/O) devices ,  (or peripherals) that are communicatively coupled via a local input\/output controller . The input\/output controller  can be, but is not limited to, one or more buses or other wired or wireless connections, as is known in the art. The input\/output controller  may have additional elements, which are omitted for simplicity, such as controllers, buffers (caches), drivers, repeaters, and receivers, to enable communications. Further, the local interface may include address, control, and\/or data connections to enable appropriate communications among the aforementioned components.","The processor  is a hardware device for executing software, particularly that stored in memory . The processor  can be any custom made or commercially available processor, a central processing unit (CPU), an auxiliary processor among several processors associated with the computer , a semiconductor based microprocessor (in the form of a microchip or chip set), a macroprocessor, or generally any device for executing software instructions.","The memory  can include any one or combination of volatile memory elements (e.g., random access memory (RAM, such as DRAM, SRAM, SDRAM, etc.)) and nonvolatile memory elements (e.g., ROM, erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), programmable read only memory (PROM), tape, compact disc read only memory (CD-ROM), disk, diskette, cartridge, cassette or the like, etc.). Moreover, the memory  may incorporate electronic, magnetic, optical, and\/or other types of storage media. Note that the memory  can have a distributed architecture, where various components are situated remote from one another, but can be accessed by the processor .","The software in memory  may include one or more separate programs, each of which comprises an ordered listing of executable instructions for implementing logical functions. In the example of , the software in the memory  includes the test planning and test case generation methods described herein in accordance with exemplary embodiments and a suitable operating system (OS) . The OS  essentially controls the execution of other computer programs, such the test planning and test case generation systems and methods as described herein, and provides scheduling, input-output control, file and data management, memory management, and communication control and related services.","The test planning and test case generation methods described herein may be in the form of a source program, executable program (object code), script, or any other entity comprising a set of instructions to be performed. When a source program, then the program needs to be translated via a compiler, assembler, interpreter, or the like, which may or may not be included within the memory , so as to operate properly in connection with the OS . Furthermore, the test planning and test case generation methods can be written as an object oriented programming language, which has classes of data and methods, or a procedure programming language, which has routines, subroutines, and\/or functions.","In exemplary embodiments, a conventional keyboard  and mouse  can be coupled to the input\/output controller . Other output devices such as the I\/O devices ,  may include input devices, for example but not limited to a printer, a scanner, microphone, and the like. Finally, the I\/O devices ,  may further include devices that communicate both inputs and outputs, for instance but not limited to, a network interface card (NIC) or modulator\/demodulator (for accessing other files, devices, systems, or a network), a radio frequency (RF) or other transceiver, a telephonic interface, a bridge, a router, and the like. The system  can further include a display controller  coupled to a display . In exemplary embodiments, the system  can further include a network interface  for coupling to a network . The network  can be an IP-based network for communication between the computer  and any external server, client and the like via a broadband connection. The network  transmits and receives data between the computer  and external systems. In exemplary embodiments, network  can be a managed IP network administered by a service provider. The network  may be implemented in a wireless fashion, e.g., using wireless protocols and technologies, such as WiFi, WiMax, etc. The network  can also be a packet-switched network such as a local area network, wide area network, metropolitan area network, Internet network, or other similar type of network environment. The network  may be a fixed wireless network, a wireless local area network (LAN), a wireless wide area network (WAN) a personal area network (PAN), a virtual private network (VPN), intranet or other suitable network system and includes equipment for receiving and transmitting signals.","If the computer  is a PC, workstation, intelligent device or the like, the software in the memory  may further include a basic input output system (BIOS) (omitted for simplicity). The BIOS is a set of essential software routines that initialize and test hardware at startup, start the OS , and support the transfer of data among the hardware devices. The BIOS is stored in ROM so that the BIOS can be executed when the computer  is activated.","When the computer  is in operation, the processor  is configured to execute software stored within the memory , to communicate data to and from the memory , and to generally control operations of the computer  pursuant to the software. The test planning and test case generation methods described herein and the OS , in whole or in part, but typically the latter, are read by the processor , perhaps buffered within the processor , and then executed.","When the systems and methods described herein are implemented in software, as is shown in , the methods can be stored on any computer readable medium, such as storage , for use by or in connection with any computer related system or method.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","In exemplary embodiments, where the test planning and test case generation methods are implemented in hardware, the test planning and test case generation methods described herein can implemented with any or a combination of the following technologies, which are each well known in the art: a discrete logic circuit(s) having logic gates for implementing logic functions upon data signals, an application specific integrated circuit (ASIC) having appropriate combinational logic gates, a programmable gate array(s) (PGA), a field programmable gate array (FPGA), etc.","Technical effects include the ability to ensure that all requirements are covered by tests, and a measurement of how well-covered. Adding the intermediate level of the content space simplifies the problem and enables division of the process into two steps, each possibly being performed by a different domain expert. The concerns of requirement coverage and test planning are separated as the first step of the process is concerned with requirement coverage through the creation of content space and the second stage concerned with test planning only. In addition, this approach enables automated support for key steps with improves efficiency and scaling.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one more other features, integers, steps, operations, element components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated","The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps (or operations) described therein without departing from the spirit of the invention. For instance, the steps may be performed in a differing order or steps may be added, deleted or modified. All of these variations are considered a part of the claimed invention.","While the preferred embodiment to the invention had been described, it will be understood that those skilled in the art, both now and in the future, may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The subject matter which is regarded as the invention is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The forgoing and other features, and advantages of the invention are apparent from the following detailed description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
