---
title: Dynamic assignment of traffic classes to a priority queue in a packet forwarding device
abstract: An apparatus and method for dynamic assignment of classes of traffic to a priority queue. Bandwidth consumption by one or more types of packet traffic received in the packet forwarding device is monitored to determine whether the bandwidth consumption exceeds a threshold. If the bandwidth consumption exceeds the threshold, assignment of at least one type of packet traffic of the one or more types of packet traffic is changed from a queue having a first priority to a queue having a second priority.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07710871&OS=07710871&RS=07710871
owner: Nortel Networks Limited
number: 07710871
owner_city: St. Laurent Quebec
owner_country: CA
publication_date: 20031015
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This Application is a continuation of U.S. patent application Ser. No. 09\/227,389 filed Jan. 8, 1999, now abandoned.","The present invention relates to the field of telecommunications, and more particularly to dynamic assignment of traffic classes to queues having different priority levels.","The flow of packets through packet-switched networks is controlled by switches and routers that forward packets based on destination information included in the packets themselves. A typical switch or router includes a number of input\/output (I\/O) modules connected to a switching fabric, such as a crossbar or shared memory switch. In some switches and routers, the switching fabric is operated at a higher frequency than the transmission frequency of the I\/O modules so that the switching fabric may deliver packets to an I\/O module faster than the I\/O module can output them to the network transmission medium. In these devices, packets are usually queued in the I\/O module to await transmission.","One problem that may occur when packets are queued in the I\/O module or elsewhere in a switch or router is that the queuing delay per packet varies depending on the amount of traffic being handled by the switch. Variable queuing delays tend to degrade data streams produced by real-time sampling (e.g., audio and video) because the original time delays between successive packets in the stream convey the sampling interval and are therefore needed to faithfully reproduce the source information. Another problem that results from queuing packets in a switch or router is that data from a relatively important source, such as a shared server, may be impeded by data from less important sources, resulting in bottlenecks.","A method and apparatus for dynamic assignment of classes of traffic to a priority queue are disclosed. Bandwidth consumption by one or more types of packet traffic received in a packet forwarding device is monitored. The queue assignment of at least one type of packet traffic is automatically changed from a queue having a first priority to a queue having a second priority if the bandwidth consumption exceeds the threshold.","Other features and advantages of the invention will be apparent from the accompanying drawings and from the detailed description that follows below.","A packet forwarding device in which selected classes of network traffic may be dynamically assigned for priority queuing is disclosed. In one embodiment, the packet forwarding device includes a Java virtual machine for executing user-coded Java applets received from a network management server (NMS). A Java-to-native interface (JNI) is provided to allow the Java applets to obtain error information and traffic statistics from the device hardware and to allow the Java applets to write configuration information to the device hardware, including information that indicates which classes of traffic should be queued in priority queues. The Java applets implement user-specified traffic management policies based on real-time evaluation of the error information and traffic statistics to provide dynamic control of the priority queuing assignments. These and other aspects and advantages of the present invention are described below.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["17","17","17"]},"The switch  includes a switching fabric  coupled to a plurality of I\/O units (only I\/O units  and  are depicted) and to a processing unit . The processing unit includes at least a processor  (which may be a microprocessor, digital signal processor or microcontroller) coupled to a memory  via a bus . In one embodiment, each I\/O unit ,  includes four physical ports P-P coupled to a quad media access controller (QMAC) A, B via respective transceiver interface units A-A, B-B. Each I\/O unit ,  also includes a quad interface device (QID) A, B, an address resolution unit (ARU) A, B and a memory A, B, interconnected as shown in . Preferably, the switch  is modular with at least the I\/O units ,  being implemented on port cards (not shown) that can be installed in a backplane (not shown) of the switch . In one implementation, each port card includes four I\/O units and therefore supports up to  physical ports. The switch backplane includes slots for up to six port cards, so that the switch  can be scaled according to customer needs to support between  and  physical ports. In alternate embodiments, each I\/O unit ,  may support more or fewer physical ports, each port card may support more or fewer I\/O units ,  and the switch  may support more or fewer port cards. For example, the I\/O unit  shown in  may be used to support four 10baseT transmission lines (i.e., 10 Mbps (mega-bit per second), twisted-pair) or four 100baseF transmission lines (100 Mbps, fiber optic), while a different I\/O unit (not shown) may be used to support a single 1000baseF transmission line (1000 Mbps, fiber optic). Nothing disclosed herein should be construed as limiting embodiments of the present invention to use with a particular transmission medium, I\/O unit, port card or chassis configuration.","Still referring to , when a packet  is received on physical port P, it is supplied to the corresponding physical transceiver A which performs any necessary signal conditioning (e.g., optical to electrical signal conversion) and then forwards the packet  to the QMAC A. The QMAC A buffers packets received from the four physical transceivers A-A as necessary, forwarding one packet at a time to the QID A. Receive logic within the QID A notifies the ARU A that the packet  has been received. The ARU computes a table index based on the destination MAC address within the packet  and uses the index to identify an entry in a forwarding table that corresponds to the destination MAC address. In packet forwarding devices that operate on different protocol layers of the packet (e.g., routers), a forwarding table may be indexed based on other destination information contained within the packet.","According to one embodiment, the forwarding table entry identified based on the destination MAC address indicates the switch egress port to which the packet  is destined and also whether the packet is part of a MAC-address based virtual local area network (VLAN), or a port-based VLAN. (As an aside, a VLAN is a logical grouping of MAC addresses (a MAC-address-based VLAN) or a logical grouping of physical ports (a port-based VLAN).) The forwarding table entry further indicates whether the packet  is to be queued in a priority queue in the I\/O unit that contains the destination port. As discussed below, priority queuing may be specified based on a number of conditions, including, but not limited to, whether the packet is part of a particular IP flow, or whether the packet is destined for a particular port, VLAN or MAC address.","According to one embodiment, the QID A, B segments the packet  into a plurality of fixed-length cells  for transmission through the switching fabric . Each cell includes a header  that identifies it as a constituent of the packet  and that identifies the destination port for the cell (and therefore for the packet ). The header  of each cell also includes a bit  indicating whether the cell is the beginning cell of a packet and also a bit  indicating whether the packet  to which the cell belongs is to be queued in a priority queue or a best effort queue on the destined I\/O unit.","The switching fabric  forwards each cell to the I\/O unit indicated by the cell header . In the exemplary data flow shown in , the constituent cells  of the packet  are assumed to be forwarded to I\/O unit  where they are delivered to transmit logic within the QID B. The transmit logic in the QID B includes a queue manager (not shown) that maintains a priority queue and a best effort queue in the memory B. In one embodiment, the memory B is resolved into a pool of buffers, each large enough to hold a complete packet. When the beginning cell of the packet  is delivered to the QID B, the queue manager obtains a buffer from the pool and appends the buffer to either the priority queue or the best effort queue according to whether the priority bit  is set in the beginning cell. In one embodiment, the priority queue and the best effort queue are each implemented by a linked list, with the queue manager maintaining respective pointers to the head and tail of each linked list. Entries are added to the tail of the queue list by advancing the tail pointer to point to a newly allocated buffer that has been appended to the linked list, and entries are popped off the head of the queue by advancing the head pointer to point to the next buffer in the linked list and returning the spent buffer to the pool.","After a buffer is appended to either the priority queue or the best effort queue, the beginning cell and subsequent cells are used to reassemble the packet  within the buffer. Eventually the packet  is popped off the head of the queue and delivered to an egress port via the QMAC B and the physical transceiver (e.g., B) in an egress operation. This is shown by way of example in  by the egress of packet  from physical port P of I\/O unit .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2A","b":["51","53","55","57","59","61","63"]},"Returning to decision block , if the beginning cell bit in the cell header is not set, then the queue entry associated with the cell header is identified at block . The association between the cell header and the queue entry identified at block  was established earlier in either block  or block . Also, identification of the queue entry in block  may include inspection of the priority bit in the cell to narrow the identification effort to either the priority queue or the best effort queue. In block , the cell is combined with the preceding cell in the queue entry in a packet reassembly operation. If the reassembly operation in block  results in a completed packet (decision block ), then the packet is marked as ready for transmission in block . In one embodiment, the packet is marked by setting a flag associated with the queue entry in which the packet has been reassembled. Other techniques for indicating that a packet is ready for transmission may be used in alternate embodiments.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2B","FIG. 2B"],"b":["75","77","79","81","83","85","105"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 1"],"b":["17","91","93","95","97","99","101","103","105"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},"Referring to , forwarding information  is received from the processing unit at block . At block , the ARU stores the forwarding information in an AR table entry. At decision block , the physical egress port identifier stored in the AR table entry is compared against priority configuration information to determine if packets destined for the egress port have been selected for priority egress queuing. If so, the priority bit is set in the AR table entry in block . Thereafter, incoming packets that index the newly stored table entry will be queued in the priority queue to await transmission. If packets destined for the egress port have not been selected for priority queuing, then at decision block  the MAC address stored in the AR table entry is compared against the priority configuration information to determine if packets destined for the MAC address have been selected for priority egress queuing. If so, the priority bit is set in the AR table entry in block . If packets destined for the MAC address have not been selected for priority egress queuing, then at decision block  the VLAN identifier stored in the AR table entry (if present) is compared against the priority configuration information to determine if packets destined for the VLAN have been selected for priority egress queuing. If so, the priority bit is set in the AR table entry in block . If packets destined for the VLAN have not been selected for priority egress queuing, then at block  the IP flow identified by the IP address, IP port and IP protocol in the AR table is compared against the priority configuration information to determine if packets that form part of the IP flow have been selected for priority egress queuing. If so, the priority bit is set in the AR table entry, otherwise the priority bit is not set. Yet other criteria may be considered in assigning priority queuing in alternate embodiments. For example, priority queuing may be specified for a particular IP protocol (e.g., FTP, HTTP). Also, the ingress port, source MAC address or source VLAN of a packet may also be used to determine whether to queue the packet in the priority egress packet. More specifically, in one embodiment, priority or best effort queuing of unicast traffic is determined based on destination parameters (e.g., egress port, destination MAC address or destination IP address), while priority or best effort queuing of multicast traffic is determined based on source parameters (e.g., ingress port, source MAC address or source IP address).",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 5","FIG. 1"],"b":["17","143","145","141","143","145"]},"The device management code  is executed by the processing unit (e.g., element  of ) to perform system level functions, including management of forwarding entries in the distributed AR tables and management of forwarding entries in a master forwarding table maintained in the memory of the processing unit. The device management code  also includes routines for invoking device driver services, for example, to query the ARU for traffic statistics and error information, or to write updated configuration information to the ARUs, including priority queuing information. Further, the device management code  includes routines for writing updated configuration information to the ARUs, as discussed below in reference to . In one implementation, the device management code  is native code, meaning that the device management code  is a compiled set of instructions that can be executed directly by a processor in the processing unit to carry out the device management functions.","In one embodiment, the device management code  supports the operation of a Java client  that includes a number of Java applets, including a monitor applet , a policy enforcement applet  and a configuration applet . A Java applet is an instantiation of a Java class that includes one or more methods for self initialization (e.g., a constructor method called \u201cApplet( )\u201d), and one or more methods for communicating with a controlling application. Typically the controlling application for a Java applet is a web browser executed on a general purpose computer. In the software architecture shown in , however, a Java application called Data Communication Interface (DCI)  is the controlling application for the monitor, policy enforcement and configuration applets , , . The DCI application  is executed by a Java virtual machine  to manage the download of Java applets from a network management server (NMS) . A library of Java objects  is provided for use by the Java applets , ,  and the DCI application .","In one implementation, the NMS  supplies Java applets to the switch  in a hyper-text transfer protocol (HTTP) data stream. Other protocols may also be used. The constituent packets of the HTTP data stream are addressed to the IP address of the switch and are directed to the processing unit after being received by the I\/O unit coupled to the NMS . After authenticating the HTTP data stream, the DCI application  stores the Java applets provided in the data stream in the memory of the processing unit and executes a method to invoke each applet. An applet is invoked by supplying the Java virtual machine  with the address of the constructor method of the applet and causing the Java virtual machine  to begin execution of the applet code. Program code defining the Java virtual machine  is executed to interpret the platform independent byte codes of the Java applets , ,  into native instructions that can be executed by a processor within the processing unit.","According to one embodiment, the monitor applet , policy enforcement applet  and configuration applet  communicate with the device management code  through a Java-native interface (JNI) . The JNI  is essentially an application programming interface (API) and provides a set of methods that can be invoked by the Java applets , ,  to send messages and receive responses from the device management code . In one implementation, the JNI  includes methods by which the monitor applet  can request the device management code  to gather error information and traffic statistics from the device hardware . The JNI  also includes methods by which the configuration applet  can request the device management code  to write configuration information to the device hardware . More specifically, the JNI  includes a method by which the configuration applet  can indicate that priority queuing should be performed for specified classes of traffic, including, but not limited to, the classes of traffic discussed above in reference to . In this way, a user-coded configuration applet  may be executed by the Java virtual machine  within the switch  to invoke a method in the JNI  to request the device management code  to write information that assigns selected classes of traffic to be queued in the priority egress queue. In effect, the configuration applet  assigns virtual queues defined by the selected classes of traffic to feed into the priority egress queue.","Although a Java virtual machine  and Java applets , ,  have been described, other virtual machines, interpreters and scripting languages may be used in alternate embodiments. Also, as discussed below, more or fewer Java applets may be used to perform the monitoring, policy enforcement and configuration functions in alternate embodiments.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 6","FIG. 5"],"b":["32","1","175","2","1","175","175","175","175"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 6","b":["178","179","180","1","175","178","1","1"]},"In one embodiment, the monitor applet  measures line utilization by invoking methods in the JNI to read the port  line utilization resulting from traffic destined for MAC address A and for MAC address B every  milliseconds.","The policy enforcement applet  includes variables to hold the line utilization percentage of traffic destined for MAC address A (A%), the line utilization percentage of traffic destined for MAC address B (B%), the queue assignment (i.e., priority or best effort) of traffic destined for the server MAC address (QA_S), the queue assignment of traffic destined for MAC address A (QA_A) and the queue assignment of traffic destined for MAC address B. Also, a constant, DELTA, is defined to be 5% and the queue assignments for the MAC address A, MAC address B and server MAC address traffic are initially set to the priority queue.","The policy enforcement applet  also includes a forever loop in which the line utilization percentages A% and B% are obtained from the monitor applet  and used to determine whether to change the queue assignments QA_A and QA_B. If the MAC address A traffic and the MAC address B traffic are both assigned to the priority queue (the initial configuration) and the sum of the line utilization percentages A% and B% exceeds 80%, then less than 20% line utilization remains for the server-destined traffic. In that event, the MAC address A traffic is reassigned from the priority queue to the best effort queue (code statement ). If the MAC address A traffic is assigned to the best effort queue and the MAC address B traffic is assigned to the priority queue, then the MAC address A traffic is reassigned to the priority queue if the sum of the line utilization percentages A% and B% drops below 80% less DELTA (code statement ). The DELTA parameter provides a deadband to prevent rapid changing of priority queue assignment.","If the MAC address A traffic is assigned to the best effort queue and the MAC address B traffic is assigned to the priority queue and the line utilization percentage B% exceeds 80%, then less than 20% line utilization remains for the server-destined traffic. Consequently, the MAC address B traffic is reassigned from the priority queue to the best effort queue (code statement ). If the MAC address B traffic is assigned to the best effort queue and the line utilization percentage B% drops below 80% less DELTA, then the MAC address B traffic is reassigned to the priority queue (code statement ). Although not specifically provided for in the exemplary pseudocode listing of , the policy enforcement applet  may treat the traffic destined for the MAC A and MAC B addresses more symmetrically by including additional statements to conditionally assign traffic destined for MAC address A to the priority queue, but not traffic destined for MAC address B. In the exemplary pseudocode listing of , the policy enforcement applet  delays for 5 milliseconds at the end of each pass through the forever loop before repeating.","The configuration applet  includes variables, QA_A and QA_B, to hold the queue assignments of the traffic destined for the MAC addresses A and B, respectively. Variables LAST_QA_A and LAST_QA_B are also provided to record the history (i.e., most recent values) of the QA_A and QA_B values. The LAST_QA_A and LAST_QA_B variables are initialized to indicate that traffic destined for the MAC addresses A and B is assigned to the priority queue.","Like the monitor and policy enforcement applets ,, the configuration applet  includes a forever loop in which a code sequence is executed followed by a delay. In the exemplary listing of , the first operation performed by the configuration applet  within the forever loop is to obtain the queue assignments QA_A and QA_B from the policy enforcement applet . If the queue assignment indicated by QA_A is different from the queue assignment indicated by LAST_QA_A, then a JNI method is invoked to request the device code to reconfigure the queue assignment of the traffic destined for MAC address A according to the new QA_A value. The new QA_A value is then copied into the LAST_QA_A variable so that subsequent queue assignment changes are detected. If the queue assignment indicated by QA_B is different from the queue assignment indicated by LAST_QA_B, then a JNI method is invoked to request the device code to reconfigure the queue assignment of the traffic destined for MAC address B according to the new QA_B value. The new QA_B value is then copied into the LAST_QA_B variable so that subsequent queue assignment changes are detected. By this operation, and the operation of the monitor and policy enforcement applets , , traffic destined for the MAC addresses A and B is dynamically assigned to the priority queue according to real-time evaluations of the traffic conditions in the switch.","Although a three-applet implementation is illustrated in , more or fewer applets may be used in an alternate embodiment. For example, the functions of the monitor, policy enforcement and configuration applets , ,  may be implemented in a single applet. Alternatively, multiple applets may be provided to perform policy enforcement or other functions using different queue assignment criteria. For example, one policy enforcement applet may make priority queue assignments based on destination MAC addresses, while another policy enforcement applet makes priority queue assignments based on error rates or line utilization of higher level protocols. Multiple monitor applets or configuration applets may similarly be provided.","Although queue assignment policy based on destination MAC address is illustrated in , myriad different queue assignment criteria may be used in other embodiments. For example, instead of monitoring and updating queue assignment based on traffic to destination MAC addresses, queue assignments may be updated on other traffic patterns, including traffic to specified destination ports, traffic from specified source ports, traffic from specified source MAC addresses, traffic that forms part of a specified IP flow, traffic that is transmitted using a specified protocol (e.g., HTTP, FTP or other protocols) and so forth. Also, queue assignments may be updated based on environmental conditions such as time of day, changes in network configuration (e.g., due to failure or congestion at other network nodes), error rates, packet drop rates and so forth. Monitoring, policy enforcement and configuration applets that combine many or all of the above-described criteria may be implemented to provide sophisticated traffic handling capability in a packet forwarding device.","Although dynamic assignment of traffic classes to a priority egress queue has been emphasized, the methods and apparatuses described herein may alternatively be used to assign traffic classes to a hierarchical set of queues anywhere in a packet forwarding device including, but not limited to, ingress queues and queues associated with delivering and receiving packets from the switching fabric. Further, although the queue assignment of traffic classes has been described in terms of a pair of queues (priority and best effort), additional queues in a prioritization hierarchy may be used without departing from the spirit and scope of the present invention.","In the foregoing specification, the invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made to the specific exemplary embodiments without departing from the broader spirit and scope of the invention as set forth in the appended claims. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
