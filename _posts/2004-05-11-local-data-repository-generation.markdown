---
title: Local data repository generation
abstract: Systems and techniques relating to local data repository generation facilitate analysis of business activity information. In general, in one implementation, a technique includes: receiving results of an analysis query applied against a business information warehouse, the results including at least one key performance indicator generated in response to the analysis query by an analytical engine of the business information warehouse from other information stored in underlying databases of the business information warehouse; transforming the results such that the results appear to be obtained directly from an underlying relational database source; and sending the transformed results to a software component that generates from the transformed results a local data repository, a self-describing collection of integrated records, wherein the local data repository supports dynamic analytical processing operations on the results of the analysis query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07424470&OS=07424470&RS=07424470
owner: SAP AG
number: 07424470
owner_city: Walldorf
owner_country: DE
publication_date: 20040511
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The following description relates to systems and techniques for analyzing and presenting business activity information, for example, generating local subsets of large accumulations of business activity information.","Data warehousing involves combining multiple different databases across a business enterprise, frequently as a collection of data designed to support management decision making. Business information warehouse systems can pull data from multiple back-end systems in an enterprise, and combine the data to present a coherent picture of business conditions at a point in time. Business information warehouse systems have been integrated with third party applications to facilitate use of the business information warehouse functionality. For example, the SAP\u00ae Business Warehouse (BW) system provided by SAP AG of Walldorf, Germany, has been integrated with the Excel application program provided by Microsoft Corporation of Redmond, Wash. Moreover, the SAP\u00ae BW system provides open interfaces for connecting with third party systems and software, including providing OLE (Object Linking and Embedding) DB (Database) for OLAP (Online Analytical Processing) connectivity to underlying proprietary data sources, and providing an open hub service to transport data from the underlying proprietary data sources to other systems as relational tables or flat files.","In addition, the SAP\u00ae BW system has provided offline access to BW data by enabling precalculation of reports. Such precalculated reports constitute generally static output data, in the form of an HTML (HyperText Markup Language) file or file cluster, which can be copied to local disk. The local copy of a precalculated report can be accessed while offline and may include some interactive elements, such as a drop down box that allows switching among sales regions presented in a report; but such reports do not provide generic navigation capabilities within the offline data set, such as is possible using OLAP navigation (slicing, dicing, pivoting, etc.) while online.","Systems and techniques relating to local data repository generation facilitate analysis of business activity information. Business information can be consistently extracted from a business information warehouse and stored in a local repository, which can support offline analysis operations and improved access and operational speed. According to an aspect, a technique includes: receiving results of an analysis query applied against a business information warehouse, the results including at least one key performance indicator generated in response to the analysis query by an analytical engine of the business information warehouse from other information stored in underlying databases of the business information warehouse; transforming the results such that the results appear to be obtained directly from an underlying relational database source; and sending the transformed results to a software component that generates from the transformed results a local data repository, a self-describing collection of integrated records, wherein the local data repository supports dynamic analytical processing operations on the results of the analysis query.","According to another aspect, a system includes: a business information warehouse including an analytical engine and an information provider including a structural definition of information stored in underlying relational databases of the business information warehouse; and a local repository generator that applies an analysis query against the business information warehouse through the analytical engine and the information provider, receives multidimensional results of the analysis query, and generates a multidimensional local data repository by transforming the multidimensional results into a relational data source format used by a software component corresponding to a format of the multidimensional local data repository, wherein the multidimensional results comprise at least one key performance indicator generated in response to the analysis query by the analytical engine from other information stored in the underlying relational databases.","Details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages may be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","100","110","120","150","152","110","115","110","110"]},"The business information warehouse server  provides a data source interface  to obtain information from the data source systems . The source systems  can be multiple different enterprise data collection\/management systems and applications, and the interface  can include multiple different interface components, such as XML (eXtensible Markup Language) interface components, database connectors, and one or more business application programming interface (BAPI) components, which provide a set of methods for accessing business objects defined in the system . For example, a database  can be an underlying relational database accessed using BAPI.","The business information warehouse server  includes information providers , which can include multiple underlying databases . An information provider  includes a structural definition of information stored in underlying databases of the system . These underlying databases can include both underlying relational databases  and underlying relational databases  (e.g., relational tables), and application of an analysis query to an information provider  in the system  can result in multiple database queries, such as SQL (structured query language) statements, being generated. An information provider  represents a logical source of business information as defined in the system , and thus an information provider  includes one or more business information objects, such as ODS (operational data store) objects and InfoCubes. In general, an information provider  represents a multidimensional data source (e.g., a snapshot of one or more relational databases, restructured into dimensional data) supporting multidimensional slicing and dicing of business information for analysis.","The system  also includes one or more analytical engines , which are used in generating results in response to an analysis query applied against the business information warehouse. The analytical engine(s)  can be part of an online analytical processing (OLAP) component of the business information warehouse server . The analytical engine(s)  obtain information from one or more information providers , as defined by an analysis query, and expose the obtained information as multidimensional data available for dynamic analysis. The analysis query can include filter conditions and can be defined in the business information warehouse server  by a person (e.g., and administrator). The analysis query can be designated by a query name maintained in the business information warehouse server . A front-end system  can include a business analyzer addin for a software application, such as Excel, creating a front-end tool used to present and analyze business information warehouse data when online.","Additionally, the system  includes an information extraction interface  that enables generation of local data repositories to facilitate analysis of business activity. The information extraction interface  can include a component in the business information warehouse server , a component in a front-end system , or both. For example, the information extraction interface  can include a server component in the business information warehouse server  that executes analysis queries, and a client component in a front-end system  that directs transformation of results received from the server component, such as described further below in connection with .","The information extraction interface  operates through the analytical engine(s)  and can thus provide the full range of business information provided by the business information warehouse server  during online analysis, including key performance indicators calculated by the analytical engine(s)  in response to an analysis query applied against one or more information providers . Information extraction can be performed in response to a direct request or can be scheduled for periodic batch processing. A front-end system  can include a server process used to automatically generate one ore more local data repositories to facilitate analysis of business activity; generation of a local data repository can be initiated within an information broadcasting component of the business information warehouse, such as by calling an RFC (remote function call) server running on the front-end system, such as described below.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2","b":"200"},"The results are transformed at , such that the results appear to be obtained directly from an underlying relational database source. Transformation of the results can be performed according to the analysis query and according to the structural definition of an information provider in a business information warehouse server. The results of the analysis query are restructured and presented as though they are the results of directly accessed underlying database tables. For example, a result set of an analysis query can include both record information, resulting from a combination of multiple underlying databases, and calculated KPIs, resulting from defined analytical processing operations having been performed on the record information; and this result set is restructured to make the calculated KPIs appear to be part of the original record information.","The transformation can be conditional. For example, transforming the results can be conditioned on a multidimensional data analysis subspace defined by the analysis query falling below a defined threshold. For example, the resulting data file may be limited to being no larger than one hundred megabytes. In some implementations, the local data repository can be viewed as a focused, personalized mini-data-mart (e.g., a file size less than two megabytes).","The transformed results are sent to a software component at . The software component can be a third party software component that provides generic call level interfaces used to extract data directly from database tables. The software component generates from the transformed results a local data repository representing a multidimensional, self-describing collection of integrated records, and the local data repository supports dynamic analytical processing operations on the results of the analysis query. Thus, a multidimensional data analysis subspace can be stored locally on a client machine, providing a consistent subset of business warehouse information for offline, dynamic analysis.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3","b":["300","310","300","310","330","300","340","340"]},"When the analysis query  is applied in the business information warehouse , results , including a KPI as described above, are provided to the local repository generator . Application of the analysis query  and provision of the results  can be performed in two separate stages: the first to acquire metadata from the business information warehouse , and the second to acquire corresponding business data from the business information warehouse .","The local repository generator  can be a software component running as a web service in an Internet Information Server environment, and communications between the business information warehouse  and the local repository generator  can be performed using SOAP (Simple Object Access Protocol). A .Net connector of the business information warehouse  can be used for BAPI access, or RFC access to BAPI extraction modules of the business information warehouse (BIW)  can be provided.","The local repository generator  can include multiple modules that handle various subtasks. For example, (1) an extraction generator module can create an MDX (Multi-Dimensional Expression) statement used for extracting data, (2) a Web Services wrapper module can wrap up extraction functions, (3) a cube create module can generate a local cube structure based on structure information input, and create the corresponding local cube at runtime, (4) a call sequence module can extract data from specified information providers based on a generated MDX statement in a recordset (e.g., using MDDATASET BAPI) to build an in-memory rowset used by an integration module, (5) an insert-into-cube module can build an insert into cube statement at runtime and execute it, and (6) the integration module can provide functionality and user interfaces (e.g., via open hub in an SAP\u00ae BIW system) to define and schedule local cube generation activity and to distribute results. The extraction generator module can also check filter conditions to ensure that the amount of data to be extracted falls under a desired limit. Moreover, in an SAP\u00ae BIW implementation, the extraction generator module and the integration module can be implemented in the Advanced Business Application Programming (ABAP\/4) language, and the other modules can be implemented in the C# language.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4","b":["400","405","410","405","415","435","455","450","435","430","420","425"]},"The client and server portions of the BIW cube file generator ,  together represent an extraction layer for a business information warehouse system. This extraction layer transforms results of BIW queries to make those results look like a relational data source. This extraction layer can be updated when the BIW system is updated, and data consistency can be maintained during the data extraction process, which may not be the case if underlying databases are accessed directly by a third party application.","Metadata and data  are provided to pivot table services  running in the client machine . The pivot table services  can create a local cube on another client machine . For example, the data from the BIW system can be translated into a cub file  using the Pivot Table Services (PVTS) provided by Microsoft Corporation of Redmond, Wash.","The metadata and data  can be provided in two stages. First, the metadata can be obtained and transferred to the BIW cube file generator , which can create an empty local data repository based on the metadata using the pivot table services . Second, an MDX extraction statement can be generated based on the analysis query, including any filter conditions of the analysis query, and applied in the BIW. The data results of the MDX extraction statement can be transferred to the BIW cube file generator  (e.g., in the form of a record set that is a formatted memory buffer), and the data results can then populate the empty local data repository using the pivot table services .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5","b":["500","510","520","530","540"]},"Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and\/or combinations thereof. These various implementations can include one or more computer programs that are executable and\/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.","These computer programs (also known as programs, software, software applications or code) may include machine instructions for a programmable processor, and can be implemented in a high-level procedural and\/or object-oriented programming language, and\/or in assembly\/machine language. As used herein, the term \u201cmachine-readable medium\u201d refer to any computer program product, apparatus and\/pr device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and\/or data to a programmable processor.","Although only a few embodiments have been described in detail above, other modifications are possible. The described systems and techniques can be used in a landscape with any business analytics application. The logic flows depicted in  do not require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, parallel processing may be preferable.","Other embodiments may be within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DRAWING DESCRIPTIONS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
