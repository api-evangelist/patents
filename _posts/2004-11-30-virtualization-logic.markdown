---
title: Virtualization logic
abstract: Systems, methodologies, media, and other embodiments associated with externally trapping transactions are described. One exemplary system embodiment includes an external virtualization logic configured to be operably connected to a processor that does not include internal virtualization support. The example system may include a data store for storing a trappable memory address and a transaction that causes the external virtualization logic to produce a trap.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07600082&OS=07600082&RS=07600082
owner: Hewlett-Packard Development Company, L.P.
number: 07600082
owner_city: Houston
owner_country: US
publication_date: 20041130
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Computer hardware devices are generally considered to be tangible, physical things. These physical devices often include registers to and\/or from which information (e.g., data, control, configuration) can be read and\/or written. Registers may be mapped to memory addresses to facilitate device access. For example, the address 0x3f8 is often mapped to a read\/write port on an input\/output (I\/O) card. Thus, a central processing unit (CPU) or other processor may interact with various computer hardware devices through memory addresses that are mapped to a physical device register. However, computer hardware devices may also be virtualized. Thus, operating systems, applications, and so on, may also interact with virtual devices rather than physical devices. For example, a personal computer may interact with a \u201cdisk drive\u201d that is implemented in RAM (Random Access Memory). Like a physical device, the virtual device may also include a set of registers through which data and\/or control information can be read and\/or written. Thus, a virtual device may also be addressed using, for example, a memory mapped I\/O scheme.","A virtual device may be provided, for example, by software, by other hardware devices, by combinations thereof, and so on. When virtualized by software, the virtual device may be implemented on various processors. However, conventionally a performance penalty may be associated with software based virtualization, even when a virtual device is not being accessed. When a device is virtualized in other hardware, the performance penalty associated with software virtualization may be reduced. However, conventional hardware supported virtualization may require a processor to be designed with hardware virtualization support functions, which may increase chip cost, development time, and so on. Also, hardware supported virtualization conventionally requires a processor designer to anticipate interacting with virtualization hardware and to correctly forecast required support functions. Additionally, when hardware supported virtualization is implemented but not employed, the circuitry that implements the built-in virtualization support functions may remain as power-consuming, heat-generating surplus. Furthermore, hardware supported virtualization typically requires complete CPU virtualization, which limits a virtualization scheme to a single level of virtualization privilege. Nevertheless, virtualization may facilitate proto-typing devices, may facilitate testing, may remove certain physical barriers from computing systems, may facilitate partitioning hardware functions among multiple operating systems and applications, and so on.","Example systems and methods described herein concern associating external virtualization hardware with processors that may not have been designed to support virtualization. For example, a processor may not have been designed with internal hardware and\/or software support for interacting with virtual input\/output (I\/O) devices. By employing external virtualization hardware as described herein, a processor may be able to interact with virtual devices like I\/O devices without incurring the performance penalty associated with conventional software based virtualization and without requiring the processor design to include complete CPU virtualization.","The following includes definitions of selected terms employed herein. The definitions include various examples and\/or forms of components that fall within the scope of a term and that may be used for implementation. The examples are not intended to be limiting. Both singular and plural forms of terms may be within the definitions.","As used in this application, the term \u201ccomputer component\u201d refers to a computer-related entity, either hardware, firmware, software, a combination thereof, or software in execution. For example, a computer component can be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and a computer. By way of illustration, both an application running on a server and the server can be computer components. One or more computer components can reside within a process and\/or thread of execution and a computer component can be localized on one computer and\/or distributed between two or more computers.","\u201cComputer-readable medium\u201d. as used herein, refers to a medium that participates in directly or indirectly providing instructions and\/or data. A computer-readable medium may take forms, including, but not limited to, non-volatile media, and volatile media. Non-volatile media may include, for example, optical or magnetic disks, and so on. Volatile media may include, for example, optical or magnetic disks, dynamic memory and its like. Common forms of a computer-readable medium include, but are not limited to, a floppy disk, a flexible disk, a hard disk, a magnetic tape, other magnetic media, a CD-ROM, other optical media, punch cards, paper tape, other physical media with patterns of holes, a RAM, a ROM, an EPROM, a FLASH-EPROM, or other memory chip or card, a memory stick, and other media from which a computer, a processor or other electronic device can read.","\u201cData store\u201d, as used herein, refers to a physical and\/or logical entity that can store data. A data store may be, for example, a table, a file, a list, a queue, a heap, a memory, a register, and so on. A data store may reside in one logical and\/or physical entity and\/or may be distributed between two or more logical and\/or physical entities.","\u201cLogic\u201d, as used herein, includes but is not limited to hardware, firmware, and\/or combinations of each to perform a function(s) or an action(s), and\/or to cause a function or action from another logic, method, and\/or system. For example, based on a desired application or needs, logic may include discrete logic like an application specific integrated circuit (ASIC), a programmed logic device, a memory device containing instructions, or the like. Logic may include one or more gates, combinations of gates, or other circuit components. Where multiple logical logics are described, it may be possible to incorporate the multiple logical logics into one physical logic. Similarly, where a single logical logic is described, it may be possible to distribute that single logical logic between multiple physical logics.","An \u201coperable connection\u201d, or a connection by which entities are \u201coperably connected\u201d, is one in which signals, physical communications, and\/or logical communications may be sent and\/or received. Typically, an operable connection includes a physical interface, an electrical interface, and\/or a data interface, but it is to be noted that an operable connection may include differing combinations of these or other types of connections sufficient to allow operable control. For example, two entities can be operably connected by being able to communicate signals to each other directly or through one or more intermediate entities like a processor, operating system, a logic, software, or other entity. Logical and\/or physical communication channels can be used to create an operable connection.","\u201cSignal\u201d, as used herein, includes but is not limited to one or more electrical or optical signals, analog or digital signals, data, one or more computer or processor instructions, messages, a bit or bit stream, or other means that can be received, transmitted and\/or detected and that may facilitate transferring information.","\u201cSoftware\u201d, as used herein, includes but is not limited to, one or more computer or processor instructions that can be read, interpreted, compiled, and\/or executed and that cause a computer, processor, or other electronic device to perform functions, actions and\/or behave in a desired manner. The instructions may be embodied in various forms like routines, algorithms, modules, methods, threads, and\/or programs including separate applications or code from dynamically and\/or statically linked libraries. Software may also be implemented in a variety of executable and\/or loadable forms including, but not limited to, a stand-alone program, a function call (local and\/or remote), a servelet, an applet, instructions stored in a memory, part of an operating system or other types of executable instructions. It will be appreciated by one of ordinary skill in the art that the form of software may depend, for example, on requirements of a desired application, the environment in which it runs, and\/or the desires of a designer\/programmer or the like. It will also be appreciated that computer-readable and\/or executable instructions can be located in one logic and\/or distributed between two or more communicating, co-operating, and\/or parallel processing logics and thus can be loaded and\/or executed in serial, parallel, massively parallel and other manners.","Suitable software for implementing the various components of the example systems and methods deserted herein may be produced using programming languages and tools like Java, Pascal, C#, C++, C, CGI, Perl, SQL, APIs, SDKs, assembly, firmware, microcode, and\/or other languages and tools. Software, whether an entire system or a component of a system, may be embodied as an article of manufacture end maintained or provided as part of a computer-readable medium as defined previously.","As used herein, the term \u201ctrap\u201d includes an unprogrammed conditional action performed automatically by hardware and\/or firmware. A trap may occur when an exceptional event causes automatic transfer to a special routine for handling that event.","Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a memory. These algorithmic descriptions and representations are the means used by those skilled in the art to convey the substance of their work to others. An algorithm is here, and generally, conceived to be a sequence of operations that produce a result. The operations may include physical manipulations of physical quantities. Usually, though not necessarily, the physical quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a logic and the like.","It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. It should be borne in mind, however, that these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, it is appreciated that throughout the description, terms like processing, computing, calculating, determining, displaying, or the like, refer to actions and processes of a computer system, logic, processor, or similar electronic device that manipulates and transforms data represented as physical (electronic) quantities.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["120","100"]},"System  includes a processor  that was not designed with virtualization capability. Thus, standing alone, processor  would not be able to interact with a virtual device. In one example, processor  may be a links-based processor with multiple links and multiple cores. In another example, processor  may be a bus-based processor or single core processor. In one example, processor  may be configured to process a transaction like a management to processor transaction (MPT), and the like. One example MPT may be a platform management interrupt (PMI) transaction like those associated with various Intel processor architectures. An MPT may, for example, facilitate linking a processor with a system memory, primary input\/output bus bridge, system fabric, and so on. In another example, processor  may be configured to process interrupts like a non-maskable interrupt (NMI), which may be provided by a transaction, by a physical pin, and so on. Processor  may have available a \u201csecure mode\u201d. The secure mode may be employed, for example, in multi-partition systems. The secure mode may include providing an address range that is only accessible when the processor  is in secure mode. The ability to transition processor  into and\/or out of secure mode may be limited to privileged instructions. For example, operating system code and application code may not be able to control secure mode transitions while boot firmware code may be able to control secure mode transitions.","System  also includes a virtualization logic  that is located external to processor . Virtualization logic  is not circuitry that is part of processor . Virtualization logic  is a separate component like an integrated circuit that can be operably connected to processor . In system , virtualization logic  has been operably connected to processor . Additionally, virtualization logic  has been positioned between processor  and a virtual device . Similarly, virtualization logic  has been positioned between processor  and physical device . Thus, virtualization logic  has been positioned to facilitate intercepting transactions like input\/output requests, memory transactions, and so on, from the processor .","Processor  may be a processor that produces memory transactions but which may not include internal virtualization logic. Thus, processor  may be configured to interact with physical device  but may not initially be configured to interact with virtual device . Therefore, virtualization logic  may intercept memory transactions from processor  to facilitate providing external virtualization support for processor . For example, virtualization logic  may selectively route transactions based, for example, on an address range associated with virtual device . Additionally, virtualization logic  may provide a signal (e.g., MPT) to processor  to facilitate processor  invoking code (e.g., virtual device driver) for interacting with virtual device .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["230","220","220","220","222","224","210","222","224","212"]},"Processor  may be associated with an operating system  and a hypervisor . The operating system  may control user resources and various physical resources associated with processor . Hypervisor  may provide and manage virtual machines, virtual devices, and so on. For example, hypervisor  may create virtual devices and present them to operating system . Information concerning various virtual devices may be stored, for example, in a device state data store  in system memory . Similarly, information about virtual devices and their address ranges may be stored in a device base address data store  in system memory .","Virtualization logic  is external to processor . For example, in a cellular architecture virtualization logic  may be located in a cell controller. Virtualization logic  may include a data store  that is configured to store a trappable memory address. As described above, the trappable memory address may be associated with a virtual device(s) and may be provided by boot firmware . In one example, the trappable memory address may be associated with a virtual input\/output device. While a virtual input\/output device is described, it is to be appreciated that other virtual devices (e.g., RAM disk) may be employed. Virtualization logic  may be configured to produce a trap when a memory transaction references an address in the address range(s) stored in data store .","Virtualization logic  may also include an address comparison logic  that is configured to receive a memory transaction from processor  and to selectively produce a trap when the memory transaction references the trappable memory address. For example, when a memory transaction with an address in the trappable memory address range is encountered, the virtualization hardware  may produce a trap. In one example, producing the trap may include generating an MPT transaction and providing it to processor . In another example, producing the trap may include generating an NMI in processor . The virtualization logic  may receive, for example, read and\/or write requests from operating system . Thus, address comparison logic  may be configured to provide a read defer response to processor  and\/or operating system  in response to receiving a memory read transaction. Similarly, the address comparison logic  may be configured to provide a posted response to processor  and\/or operating system  in response to receiving a memory write transaction. While read defer responses and write posted responses are described, it is to be appreciated that other responses tailored to satisfy the demands of various processors and\/or operating systems may be provided by the virtualization logic .","Virtualization logic  may also include a data store  that is configured to store data associated with a memory read transaction for which the address comparison logic  produced a trap. In one example, data store  may be a queue that facilitates maintaining a desired order for transactions. Storing memory read transactions may facilitate the virtualization hardware  providing a read defer response to processor . When a virtual device driver executes, it may be able to access read memory transactions and\/or related data stored in data store  and perform them in order. Similarly, virtualization logic  may include a data store  that is configured to store data associated with a memory write transaction for which the address comparison logic  produced a trap. In one example, data store  may be a queue that facilitates maintaining a desired order for transactions. While a queue is described as an example for data stores  and , it is to be appreciated that other data stores that facilitate maintaining transaction order may be employed.","Virtualization logic  may also include a transaction logic  that is configured to selectively provide a signal to processor  in response to the address comparison logic  producing a trap. As described above, the signal may be, for example, an MPT, an NMI, and so on. Thus, the transaction logic  may facilitate controlling the processor  to invoke a virtual device driver to handle a memory request whose address falls within the trappable address range stored in data store .","Since the virtualization logic  may provide signals like MPTs and NMIs to processor , processor  may be configured to call a handler process in response to receiving a signal from the virtualization logic . The handler process may be configured to execute, in order, memory transactions stored in data store  and\/or data store . In one example, processor  may be controlled to enter or leave a secure state, where a protected address range (e.g., addresses associated with a virtual device) may only be accessed by processor  when processor  is in the secure state. For example, processor  may be controlled to enter the secure state in response to receiving an MPT or an NMI. In one example, a register associated with controlling and\/or configuring virtualization logic  may be located in virtualization logic  and have an address in an address range protected by the secure state. Thus, the virtualization logic  may, in some examples, be configured by code executing while the processor  is in the secure state.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["240","240","230","230","230","240","230","220"]},"As can be appreciated by one skilled in the art, certain examples associated with  (e.g., MPT, cellular architecture, cell controller) may include certain elements that are specific to certain architectures like the Itanium architecture. Thus,  illustrates another more generic virtualization logic .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["310","312","314","310","320","310","320"]},"Processor  is associated with a firmware , and runs an operating system  and a hypervisor . The hypervisor  may present a virtual copy of an underlying hardware resource that it controls to the operating system(s)  being run by processor . At, or after boot time, the firmware  may place a virtualized device within an address range and configure an \u201cinterception hardware\u201d like virtualization logic  to intercept memory accessing transactions for that address range.","The virtualization logic  may include an address logic  and a read\/write data store . The address logic  may be configured to intercept memory accessing transactions when they leave the processor  and before they arrive at an intended destination (e.g., a location in system fabric , a virtual device). The virtualization logic  may be located, for example, in a cell controller in a cellular architecture. The address logic  may examine a physical address associated with the memory accessing transaction. If the address is in a virtualization range, then the address logic  may store data associated with the transaction and provide a signal (e.g., MPT, NMI) to the source of the intercepted transaction (e.g., processor ). Otherwise, the address logic  may allow the transaction to flow through virtualization logic  to system fabric  to be handled normally.","Since several memory accessing transactions (e.g., reads, writes) may be issued before a handler is executed by processor , the virtualization logic  may store data associated with the reads and\/or writes in data store . In one example, the actual read and write transactions may be stored in data store . Data store  may be configured to be large enough to store a maximum number of writes that may occur between transaction interception and the execution of the handler by processor . Additionally, data store  may be configured to facilitate maintaining the order of transactions.","To prevent processor  from stalling on the intercepted transaction, the virtualization logic  may acknowledge the transaction. For example, the virtualization logic  may produce a read defer response in response to intercepting a read transaction. Similarly, the virtualization logic  may produce a posted response in response to intercepting a write transaction.","Example methods may be better appreciated with reference to the flow diagrams of . While for purposes of simplicity of explanation, the illustrated methodologies are shown and described as a series of blocks, it is to be appreciated that the methodologies are not limited by the order of the blocks, as some blocks can occur in different orders and\/or concurrently with other blocks from that shown and described. Moreover, less than all the illustrated blocks may be required to implement an example methodology. Furthermore, additional and\/or alternative methodologies can employ additional, not illustrated blocks.","In the flow diagrams, blocks denote \u201cprocessing blocks\u201d that may be implemented with logic. The processing blocks may represent a method step and\/or an apparatus element for performing the method step. A flow diagram does not depict syntax for any particular programming language, methodology, or style (e.g., procedural, object-oriented). Rather, a flow diagram illustrates functional information one skilled in the art may employ to develop logic to perform the illustrated processing. It will be appreciated that in some examples, program elements like temporary variables, routine loops, and so on, are not shown. It will be further appreciated that electronic and software applications may involve dynamic and flexible processes so that the illustrated blocks can be performed in other sequences that are different from those shown and\/or that blocks may be combined or separated into multiple components. It will be appreciated that the processes may be implemented using various programming approaches like machine language, procedural, object oriented and\/or artificial intelligence techniques.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 4","b":["400","400","410"]},"Method  also includes, at , intercepting an input\/output request produced by the processor. The intercepting occurs after the input\/output request leaves the processor and before the input\/output request arrives at an intended destination. In one example, intercepting an input\/output request may include receiving the input\/output request, examining an address associated with the input\/output request, and selectively routing the input\/output request based, at least in part, on the address associated with the input\/output request. For example, input\/output requests associated with a virtual device may be stored in a data store while input\/output requests associated with a physical device may be provided to the physical device. In one example, intercepting an input\/output transaction may also include storing the input\/output request in a location accessible to a device driver associated with a virtual device.","Method  also includes, at , selectively generating and providing a signal to the processor. Whether a signal is generated and provided depends, at least in part, on whether the intended destination is a virtual device. In one example, selectively generating and providing a signal to the processor may include producing an MPT. In another example, selectively generating and providing a signal to the processor includes producing a non-maskable interrupt (NMI). In the MPT example, the MPT will invoke virtualization software and set a processor into secure mode. The virtualization software may then access stored transactions and execute them in order.","In one example, method  may require a processor that produces intercepted transactions to satisfy two constraints. First, that an MPT will be taken while there is a pending read. Second, that memory mapped input\/output is strongly ordered so that a pending read will block subsequent reads and writes until the read is satisfied.","In addition to producing a signal, method  may also include responding to intercepted transactions. For example, intercepting an input\/output transaction may include providing a response (e.g., read defer) to a read request from the processor. Similarly, intercepting an input\/output transaction may include providing a response (e.g., write posted) to a write request from the processor. It is to be appreciated that different processors, operating systems, and transactions may lead to different responses being provided by method .","While  illustrates various actions occurring in serial, it is to be appreciated that various actions illustrated in  could occur substantially in parallel. By way of illustration, a first process could initialize an interception logic. Similarly, a second process could intercept input\/output transactions while a third process could selectively generate signals. While three processes are described, it is to be appreciated that a greater and\/or lesser number of processes could be employed and that lightweight processes, regular processes, threads, and other approaches could be employed. It is to be appreciated that other example methods may, in some cases, also include actions that occur substantially in parallel.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 5","b":["500","500","510","500","520","530","510","530","560","530","540","550","570","520"]},"In one example, methodologies may be implemented as processor executable instructions and\/or operations provided on a computer-readable medium. Thus, in one example, a computer-readable medium may store processor executable instructions operable to perform a method that includes initializing an interception logic that is configured to be operably connected to a processor that does not include internal virtualization support. Initializing the interception logic may include providing an address associated with a virtual device to the interception logic. The method may also include intercepting a transaction (e.g., input\/output request) produced by the processor. The intercepting may occur after the input\/output request leaves the processor and before the input\/output request arrives at an intended destination. Intercepting an input\/output request may include receiving the input\/output request, examining an address associated with the input\/output request, and selectively routing the input\/output request based, at least in part, on the address associated with the input\/output request. The method may also include storing the input\/output request in a location accessible to a device driver associated with the virtual device. The method may also include selectively producing an MPT based, at least in part, on whether the intended destination is a virtual device. The method may also include notification of termination of the transaction to a requestor whose transaction was interrupted. While the above method is described being provided on a computer-readable medium, it is to be appreciated that other example methods described herein can also be provided on a computer-readable medium.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 6","b":["600","602","604","610","608","600","630","602","602","630","600","630","602"]},"The processor  can be a variety of various processors including dual microprocessor and other multi-processor architectures. The memory  can include volatile memory and\/or non-volatile memory. The non-volatile memory can include, but is not limited to, ROM, PROM, EPROM, EEPROM, and the like. Volatile memory can include, for example, RAM, synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), and direct RAM bus RAM (DRRAM).","A disk  may be operably connected to the computer  via, for example, an input\/output interface (e.g., card, device)  and an input\/output port . The disk  can include, but is not limited to, devices like a magnetic disk drive, a solid state disk drive, a floppy disk drive, a tape drive, a Zip drive, a flash memory card, and\/or a memory stick. Furthermore, the disk  can include optical drives like a CD-ROM, a CD recordable drive (CD-R drive), a CD rewriteable drive (CD-RW drive), and\/or a digital video ROM drive (DVD ROM). The memory  can store processes  and\/or data , for example. The disk  and\/or memory  can store an operating system that controls and allocates resources of the computer .","The bus  can be a single internal bus interconnect architecture and\/or other bus or mesh architectures. While a single bus is illustrated, it is to be appreciated that computer  may communicate with various devices, logics, and peripherals using other busses that are not illustrated (e.g., PCIE, SATA, Infiniband, 1394, USB, Ethernet). The bus  can be of a variety of types including, but not limited to, a memory bus or memory controller, a peripheral bus or external bus, a crossbar switch, and\/or a local bus. The local bus can be of varieties including, but not limited to, an industrial standard architecture (ISA) bus, a microchannel architecture (MSA) bus, an extended ISA (EISA) bus, a peripheral component interconnect (PCI) bus, a universal serial (USB) bus, and a small computer systems interface (SCSI) bus.","The computer  may interact with input\/output devices via i\/o interfaces  and input\/output ports . Input\/output devices can include, but are not limited to, a keyboard, a microphone, a pointing and selection device, cameras, video cards, displays, disk , network devices , and the like. The input\/output ports  can include but are not limited to, serial ports, parallel ports, and USB ports. The computer  may also interact with various virtual devices (not illustrated).","The computer  can operate in a network environment and thus may be connected to network devices  via the I\/O interfaces , and\/or the I\/O ports . Through the network devices , the computer  may interact with a network. Through the network, the computer  may be logically connected to remote computers. The networks with which the computer  may interact include, but are not limited to, a local area network (LAN), a wide area network (WAN), and other networks. The network devices  can connect to LAN technologies including, but not limited to, fiber distributed data interface (FDDI), copper distributed data interface (CDDI), Ethernet (IEEE 802.3), token ring (IEEE 802.5), wireless computer communication (IEEE 802.11), Bluetooth (IEEE 802.15.1), Zigbee (IEEE 802.15.4) and the like. Similarly, the network devices  can connect to WAN technologies including, but not limited to, point to point links, circuit switching networks like integrated services digital networks (ISDN), packet switching networks, and digital subscriber lines (DSL). While individual network types are described, it is to be appreciated that communications via, over, and\/or through a network may include combinations and mixtures of communications.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 7","b":["700","710","710","710","700"]},"The image forming device  may receive print data to be rendered. Thus, image forming device  may also include a memory  configured to store print data or to be used more generally for image processing. The image forming device  may also include a rendering logic  configured to generate a printer-ready image from print data. Rendering varies based on the format of the data involved and the type of imaging device. In general, the rendering logic  converts high-level data into a graphical image for display or printing (e.g., the print-ready image). For example, one form is ray-tracing that takes a mathematical model of a three-dimensional object or scene and converts it into a bitmap image. Another example is the process of converting HTML into an image for display\/printing. It is to be appreciated that the image forming device  may receive printer-ready data that does not need to be rendered and thus the rendering logic  may not appear in some image forming devices.","The image forming device  may also include an image forming mechanism  configured to generate an image onto print media from the print-ready image. The image forming mechanism  may vary based on the type of the imaging device  and may include a laser imaging mechanism, other toner-based imaging mechanisms, an ink jet mechanism, digital imaging mechanism, or other imaging reproduction engine. A processor  may be included that is implemented with logic to control the operation of the image-forming device . In one example, the processor  includes logic that is capable of executing Java instructions. Other components of the image forming device  are not described herein but may include media handling and storage mechanisms, sensors, controllers, and other components involved in the imaging process.","Referring now to , an application programming interface (API)  is illustrated providing access to a system  for supporting off-chip hardware-based virtualization for a processor. The API  can be employed, for example, by a programmer  and\/or a process  to gain access to processing performed by the system . For example, a programmer  can write a program to access the system  (e.g., invoke its operation, monitor its operation, control its operation) where writing the program is facilitated by the presence of the API . Rather than programmer  having to understand the internals of the system , the programmer  merely has to learn the interface to the system . This facilitates encapsulating the functionality of the system  while exposing that functionality.","Similarly, the API  can be employed to provide data values to the system  and\/or retrieve data values from the system . For example, a process  that processes virtual memory accesses can provide trappable address data to the system  via the API  by, for example, using a call provided in the API . Thus, in one example of the API , a set of application programming interfaces can be stored on a computer-readable medium. The interfaces can be employed by a programmer, computer component, logic, and so on, to gain access to a system  for externally trapping a transaction associated with a virtual device. The interfaces can include, but are not limited to, a first interface  that communicates a trappable address data, a second interface  that communicates a trappable node data, and a third interface  that communicates a transaction data, where the transaction data may be identified as a trappable transaction based on trappable address data and\/or trappable node data associated with the transaction.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 9","b":["900","950","900","900","910","910","900","920","900","940","942","944","940","900","930","920"]},"Like the processors illustrated in  and , processor  does not include internal virtualization support. For example, processor  is not configured with internal support for trapping addresses associated with a virtual device. However, processor  does include the transaction composition logic , crossbar , and ports  through , which are arranged in a manner that facilitates selecting through which ports various transactions are provided. In one example, all transactions associated with a certain address range may be provided through a first port (e.g., ) while all other transactions not associated with the address range are provided through other ports (e.g., , ). Thus, the first port may be employed to deliver transactions associated with a certain address range to a virtualization logic . If the address range is configured in a certain manner, then only transactions intended for a virtual device will be provided to virtualization logic .","Virtualization logic  may be located external to processor  and may be operably connected to processor  by a virtualization logic communication port (e.g., ). The virtualization logic  may include a data store configured to store a memory reading transaction and\/or a memory writing transaction. The virtualization logic  may also include a transaction logic that is configured to selectively provide a signal to the processor  in response to the virtualization logic  receiving a memory accessing transaction. The signal may take various forms. In one example, the virtualization logic  may provide an MPT to the processor  in response to receiving a memory transaction. In another example, the virtualization logic  may provide an NMI to the processor  in response to receiving a memory transaction.","The processor  may be configured to call a handler process in response to receiving the signal (e.g., MPT) from the virtualization logic . The handler process may in turn be configured to execute, in order, memory read and memory write transactions stored in the data store in the virtualization logic . As described above, transactions intended for a virtual device may be provided through port  to the virtualization logic . Other transactions may be provided through other ports (e.g., , ) to other locations like a system fabric  operably connected to the processor .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 10","b":["1000","1030","1000","1030","1000"]},"Processor  includes an instruction processing logic  that is configured to process computer executable instructions. Processor  also includes a transaction composition logic  that is configured to produce a memory accessing transaction related to processing a computer executable instruction. For example, a computer executable instruction may require a value from a memory location. Thus, transaction composition logic  may produce a transaction to retrieve that value from memory. The transaction composition logic  may be configured to map memory accessing transactions associated with a first address range to a first node and to map memory accessing transactions associated with addresses outside the first address range to another node(s). Mapping a transaction to a node may include associating node address data with a transaction. Thus, a relationship between a node address and a virtual device may be established by transaction composition logic .","Logic  may be located external to processor  and may be operably connected to processor . Logic  may include a data store (not illustrated) that is configured to store a trappable node address. Logic  may also include a node comparison logic  that is configured to receive a memory accessing transaction from the processor . The node comparison logic  may selectively produce a trap when a received transaction references the trappable node address.","Logic  may also include a second data store (not illustrated) that is configured to store data associated with a memory reading and\/or writing transaction for which the node comparison logic  produced a trap. The logic  may also include a transaction logic (not illustrated) that is configured to selectively provide a signal to the processor  in response to the node comparison logic  producing the trap. In one example, the transaction logic in external logic  may be configured to provide an MPT transaction to processor  in response to the node comparison logic  producing a trap. In another example, the transaction logic may be configured to provide an NMI to the processor  in response to the node comparison logic  producing a trap. Like other logics described herein, the external logic  may produce a trap for some transactions (e.g., those associated with a virtual device) while allowing other transactions to flow through to other destinations. Thus, in one example, a system fabric  may be the destination for some transactions not trapped by the external logic .","While example systems, methods, and so on, have been illustrated by describing examples, and while the examples have been described in considerable detail, it is not the intention of the applicants to restrict or in any way limit the scope of the appended claims to such detail. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the systems, methods, and so on, described herein. Additional advantages and modifications will readily appear to those skilled in the art. Therefore, the invention is not limited to the specific details, the representative apparatus, and illustrative examples shown and described. Thus, this application is intended to embrace alterations, modifications, and variations that fall within the scope of the appended claims. Furthermore, the preceding description is not meant to limit the scope of the invention. Rather, the scope of the invention is to be determined by the appended claims and their equivalents.","To the extent that the term \u201cincludes\u201d or \u201cincluding\u201d is employed in the detailed description or the claims, it is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as that term is interpreted when employed as a transitional word in a claim. Furthermore, to the extent that the term \u201cor\u201d is employed in the detailed description or claims (e.g., A or B) it is intended to mean \u201cA or B or both\u201d. When the applicants intend to indicate \u201conly A or B but not both\u201d then the term \u201conly A or B but not both\u201d will be employed. Thus, use of the term \u201cor\u201d herein is the inclusive, and not the exclusive use. See, Bryan A. Garner, A Dictionary of Modern Legal Usage 624 (2d. Ed. 1995)."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate various example systems, methods, and so on, that illustrate various example embodiments of aspects of the invention. It will be appreciated that the illustrated element boundaries (e.g., boxes, groups of boxes, or other shapes) in the figures represent one example of the boundaries. One of ordinary skill in the art will appreciate that one element may be designed as multiple elements or that multiple elements may be designed as one element. An element shown as an internal component of another element may be implemented as an external component and vice versa. Furthermore, elements may not be drawn to scale.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
