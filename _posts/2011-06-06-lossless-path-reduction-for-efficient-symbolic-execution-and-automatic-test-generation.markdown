---
title: Lossless path reduction for efficient symbolic execution and automatic test generation
abstract: In one embodiment, symbolically executing a software module having a number of execution paths; and losslessly reducing the number of execution paths during the symbolic execution of the software module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645924&OS=08645924&RS=08645924
owner: Fujitsu Limited
number: 08645924
owner_city: Kawasaki-shi
owner_country: JP
publication_date: 20110606
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["This disclosure generally relates to symbolic execution.","With the ubiquitous presence of software programs permeating almost all aspects of daily life, validating and verifying software in order to provide robust and reliable software programs has become a necessity. Traditionally, software quality has been assured through manual testing, which may be tedious, difficult, and often gives poor coverage of the source code. More recently, techniques for formally validating software programs have been developed. One such technique is symbolic execution.","Symbolic execution is a non-explicit state model-checking technique that treats input to a software program as symbol variables. It creates complex equations by executing all finite paths in the software program with symbolic variables and then solves the complex equations with a solver, typically known as a decision procedure, to obtain error scenarios, if any. In contrast to explicit state model checking, symbolic execution is able to work out all possible input values and all possible use cases of all possible input values in the software program under analysis. Symbolic execution can be used to automatically generate test inputs with high structural coverage for the program under analysis.","Symbolic execution may be used to formally validate and test software programs or modules. It is a software analysis technique that performs the execution of a program or module on symbolic rather than concrete inputs. It computes the effect of these symbolic inputs in the program using symbolic expressions. In particular embodiments, symbolic execution characterizes each execution path in the program under analysis it explores with a path condition defined as a conjunction of Boolean expressions. Each Boolean expression denotes one branching decision made during the execution of a distinct path of the program under analysis. When the execution is finished, multiple path conditions may be generated, each corresponding to a feasible execution path of the program code with respect to the symbolic inputs. The solutions to these conditions may be used as the test inputs that assure that the program under analysis runs along a particular concrete path during concrete execution. In particular embodiments, a decision procedure, such as a SMT (Satisfiability Modulo Theory) solver, is used to find the solutions and prune out false paths. If such concrete solutions can be obtained along all true execution paths in a software program or module, then exhaustive testing of the program or module is possible. In addition, during symbolic execution some sanity properties can be checked, such as memory out-of-bound access, divide-by-zero, and certain types of user-defined assertions.","While symbolic execution can exhaustively validate a software program and achieve much more test coverage of program behaviors than traditional testing approaches, it is computationally intensive and requires a significant amount of resources, such as processor power, memory space, etc. For example, symbolic execution often suffers from the path explosion problem (e.g., the executor explores too many unnecessary execution paths and fails to give a set of useful test cases in a reasonable time). Exploring more execution paths than necessary is one of the main bottlenecks making symbolic execution un-scalable. While heuristics can mitigate this problem to some extent, they may harm the test coverage as they are approximation in nature.","To address some of these problems, particular embodiments may losslessly reduce the number of execution paths of a software program or module while symbolically executing the software program or module. Suppose that a software module has a total of n possible execution paths. During the symbolic execution of the module, the n possible execution paths is reduced to m possible execution paths, where m<n, without losing any test coverage on the module (e.g., the lines and branches explored by all n execution paths are still visited even though the total number of execution paths is reduced to m during the symbolic execution of the module). Particular embodiments may reduce the number of execution paths of a software program or module during the symbolic execution of the program or module by reducing duplicate or unnecessary paths without suffering test coverage penalty with respect to the execution paths in the program or module.","The lossless path reduction may be applied to both sequential and concurrent programs in symbolic executors or other symbolic analyzers for programming languages such as, for example and without limitation, C, C++, Java, or other languages. In particular embodiments, the key of a lossless path reduction mechanism is to avoid duplicate execution paths (e.g., those paths that do not contribute to new line or branch coverage). Particular embodiments may detect redundancy and prune useless execution paths on-the-fly during the symbolic execution of a software program (e.g., before the path is actually executed). For example, when a branch of a conditional statement is encountered, if it is known that this branch does not lead to new path coverage, then this branch may be skipped so as to prune all the paths related to it. This may significantly improve the performance of the executor. In addition to the traditional symbolic execution approach, which visits the statements and branches of a program according to the program's control flow, a backward execution approach may be used to identify those paths that are more likely lead to new test coverage.","Given a software program or module, there may be multiple possible execution paths resulting from various types of conditional statements in the source code, such as, for example and without limitation, \u201cif-else\u201d, \u201cfor\u201d, \u201cwhile\u201d, or \u201ccase\u201d. Considering the following sample code segment that includes an \u201cif-else\u201d statement.",{"@attributes":{"id":"p-0020","num":"0019"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1","if (x > 0)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"2","y = x + 10;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"3","else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"4","y = x \u2212 5;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"As another example, considering the following code segment that includes a \u201cwhile\u201d loop.",{"@attributes":{"id":"p-0022","num":"0021"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","i = 10;"]},{"entry":[{},"2","t = 0;"]},{"entry":[{},"3","while (i > 0) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"4","t = t + i;"]},{"entry":[{},"5","i\u2212\u2212;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"6","}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In particular embodiments, the execution paths of a software program or module may be represented using a Control Flow Graph (CFG). A CFG may include a number of nodes and a number of directed edges. Each node may represent a basic code block (e.g., a straight-line piece of code without any jumps or jump targets, with jump targets starting a block and jumps ending a block). Each directed edge may represent a jump in the control flow.  illustrates an example CFG  that includes eight nodes -. For example, CFG  may represent a code segment in a software program or module. Particular embodiments may use CFGs when performing lossless reductions of execution paths of software programs during symbolic executions.","In a CFG, such as CFG  illustrated in , an execution path may begin with the root node (e.g., node ) and end with a leaf node (e.g., node  or node ). There may be a number of nodes along each execution path. When symbolically executing a specific path, the nodes along that path are visited, and a symbolic expression may be formed, representing the path traversed. In particular embodiments, this symbolic expression may be solved to generate test cases for testing the software program or module along that path.","There are various techniques that may be applied to losslessly reduce the number of execution paths in a software program or module during the symbolic execution of the program or module. Different techniques may be suitable to different code scenarios. Given a specific software program or module, particular embodiments may combine different suitable techniques to losslessly reduce the number of execution paths in the program or module during the symbolic execution of the program. For example, one technique may be applied to one code segment of the program, while another technique may be applied to a different code segment of the program.","Particular embodiments may perform run-time coverage monitoring and path pruning. This technique focuses on search heuristics with reachability analysis and run-time coverage monitoring, and may work well with loops and function calls. In particular embodiments, during the symbolic execution of a software module, when a node or branch is visited along an execution path in the module, it is dynamically recorded (e.g., dynamically marked as \u201cvisited\u201d). If a particular path has all of its nodes already visited during the execution of other paths, then this particular path is considered duplicate or redundant and needs not to be executed or visited again. In order to improve performance, particular embodiments may schedule the search order to visit the execution paths in favor of unvisited nodes, especially for loops and function calls.","For example, consider CFG  illustrated in . First, PATH  is executed. Suppose that PATH , starting with node  (e.g., the root node of CFG ), first visits nodes , , , and  in sequence. As each of nodes , , , and  is visited along PATH , it is marked \u201cvisited\u201d. At node , a branching point in CFG , node  has three possible branches: the first leading back to node , the second leading to node , and the third leading to node . Node  has already been visited. Thus, the search is in favor of either node  or node , which have not yet been visited, rather than node . When choosing between multiple unvisited nodes (e.g., nodes  and ), particular embodiments may generally prefer forward branches (e.g., with forward edges) to backward branches (e.g., with backward edges). In addition, particular embodiments may prefer those branches that lead to paths with higher percentage of unvisited nodes. Suppose that PATH  selects node , and node  is marked as \u201cvisited\u201d. It then terminates at node .","Next, PATH  is executed. PATH , starting again with node , first visits nodes  and . At node , another branching point in CFG , there are two possible branches: the first leading to node , and the second leading to node . However, node  has already been visited along PATH . Thus, PATH  may decide that the next node to visit is node , which has not yet been visited. PATH  may visit nodes , , and  in sequence, and nodes  and  are now marked as \u201cvisited\u201d. Suppose that from node , PATH  can only go to node  under the constraint of the current path condition. It then terminates at node .","Next, PATH  is executed. Starting with node , PATH  first visits nodes  and . At node , it randomly pick node  or node  to visit next, because both nodes  and  have already been visited along PATHS  and . At node , suppose that all the three branches are feasible. Since node  has not yet been visited, PATH  visits node  as this node leads to new branch coverage. It then terminates at node .","During such a process, particular embodiments may record the coverage information and perform reachability analysis, which may require intra-procedural analysis, to determine the next branch or path to visit. Such information can also be used by more advanced search schemes, such as those based on genetic algorithms or artificial intelligence (AI) algorithms. The more accurate a search algorithm picks the right branches, the fewer execution paths are visited, and hence the fewer test cases are be generated.","Note that for CFG , after PATHS , , and , all the nodes have been visited. Thus, even though CFG  has additional possible execution paths, these additional paths do not need to be executed. For example a fourth path may include nodes , , , , , and  in sequence; and a fifth path may include nodes , , , , , , , , , and  in sequence. However, these paths are redundant and need not to be executed.","In particular embodiments, when a path contains no unvisited nodes, it is skipped (e.g., not executed). However, in some cases, some nodes may never be visited during the entire symbolic execution (e.g., none of the paths visit them). Such nodes may be referred to as \u201ccoverage holes\u201d. If a redundant path contains one of such unvisited nodes that are coverage holes, particular embodiments do not rule out (i.e., skip) this redundant path. To address this problem with coverage holes, particular embodiments may apply dependency analysis to determine which paths should be considered.","For example, suppose that a coverage hole (e.g., a unvisited node) is associated with a path condition pc, and the set of symbolic variables pc involves is S. For an execution path under consideration, if its path condition involves no variable in S, then this pat may be safely ignored. Thus, particular embodiments can calculate the set of symbolic variables (e.g., S\u2032) from the current program point to a coverage hole. If S\u2229S\u2032={ }, then the path may be discarded.","Particular embodiments may merge execution paths. During the exploration, particular embodiments may merge the path conditions of multiple visited states. For example, suppose that STATE  with path condition c and STATE  with path condition c have been visited, then these two states may be merged into one with path condition c v c. This concept is illustrated in . This path merging may reduce the number of states and paths; however, it may increase the solving time since the combined path condition becomes more complicated. To mitigate this problem, particular embodiments may apply more aggressive simplifications on the combined path condition (e.g., use simplification rules and SMT\/SAT solving to derive simpler forms as in predicate abstraction).","To further illustrate path merging, consider the example illustrated in . Suppose that the symbolic state is represented as a pair (C, \u03c3), where C is the path condition denoting the conjunction of all guards occurring in the current path, and \u03c3 is a mapping from program variables to their symbolic values. In CFG  illustrated in , node  is a fork node (i.e., a branching point) with two branches marked with path conditions. If the value of variable \u201cx\u201d is less than or equal to 1, then one path leads to node . On the other hand, if the value of variable \u201cx\u201d is greater than 1, then another path leads to node . Nodes  and  contain assignments to variable \u201cy\u201d. After visiting node , the symbolic state becomes \u201c(x\u22661, yi+1)\u201d. Similarly, the symbolic state after node  is visited becomes \u201c(x>1, yi+3)\u201d. After node , a join node, is visited, instead of keeping the two separate paths, the two paths may be merged such that the path condition becomes \u201cx\u22661 or x>1\u201d, which may be symbolically evaluated to TRUE, and the symbolic value map becomes yite(x\u22661, i+1, i+3). The term \u201cite\u201d stands for \u201cif-then-else\u201d. In particular embodiments, when two paths are merged into one path, their corresponding symbolic expressions are combined into a single symbolic expression (e.g., using \u201cite\u201d).","It is possible to simplify the expressions during path merging. For example, consider the following example program that consists of two conditional statements.",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1","if (v0 > 1)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"2","y = v1;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"3","else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"4","y = v2;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"5","if (y > v1)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"6","z = v2 + 1;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"7","else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"8","z = y + 1;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Symbolic value map:"]},{"entry":[{},"y \u2192 ite(v0 > 1, v1, v2)"]},{"entry":[{},"z \u2192 ite(y > v1, v2 + 1, y + 1)"]},{"entry":[{},{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00004","he":"2.12mm","wi":"1.44mm","file":"US08645924-20140204-P00002.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":[{},"Merge and substitute:"]},{"entry":[{},"z \u2192 ite(ite(v0 > 1, v1, v2) > v1, v2 + 1, ite(v0 >"]},{"entry":[{},"1, v1, v2) + 1)"]},{"entry":[{},{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00005","he":"2.12mm","wi":"1.44mm","file":"US08645924-20140204-P00002.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]},{"entry":[{},"Simplify:"]},{"entry":[{},"z \u2192 v2 + 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Particular embodiments may prune duplicate paths using SMT based analysis. In particular embodiments, whether a path is superfluous is determined by sophisticated decision procedures such as SMT solving. For example, suppose that PATH , with path condition c, and PATH , with path condition c, have been visited. Then PATH , whose current path condition is c, can be skipped if cc=c. This can be applied during path merging.","Particular embodiments may perform de-sequentialization using dependency analysis. In particular embodiments, when two execution branches (e.g., branch b and branch b) have some symbolic variables in common, they are considered dependent. For example, if a variable is an array, and an element of this array is accessed by two branches, then these two branches are considered dependent. Particular embodiments may prune duplicate paths associated with independent branches (e.g., branches that do not share any common symbolic variable and thus are not dependent on each other).",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["400","401","1","402","2","403","2","400","401","402","404","401","402","405","401","403","406","401","403","407","400","1","1","2","2","401","402","403","400","410","420","430","410","2","410","401","402","404","401","402","405","401","403","420","430","1","2"],"i":["a","b","b","a","a","b","b","b","a","b"],"img":[{"@attributes":{"id":"CUSTOM-CHARACTER-00007","he":"1.78mm","wi":"1.78mm","file":"US08645924-20140204-P00004.TIF","alt":"custom character","img-content":"character","img-format":"tif"}},{"@attributes":{"id":"CUSTOM-CHARACTER-00008","he":"1.78mm","wi":"1.78mm","file":"US08645924-20140204-P00004.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}]},"Sometimes, path explosion can be attributed to the sequential composition of independent branches. In particular embodiments, a sequential composition of two branches in a CFG occurs when one of the two branches follows the other one of the two branches in the CFG. For example, with CFG , the branches at nodes  and  follow the branches at node  (i.e., proceed in sequence). Particular embodiments may decouple these branches and replace their sequential composition with a equivalent parallel composition. That is, the sequential composition is converted into equivalent parallel composition. This process may be called \u201cde-sequentialization.\u201d","To further illustrate the de-sequentialization process, consider the following sample C program.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20021","void foo(char* x, char c, char d) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20022","for (int j = 0; j < 10; j++) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20023","if (x[j]++ > c)","\/\/ branch 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20024","printf (\u201cCase 1\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20025","else","\/\/ branch 2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20026","printf(\u201cCase 2\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20027","}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20028","if (x[2] > d)","\/\/ branch 3"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20029","printf(\u201cCase 3\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"10","else","\/\/ branch 4"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"11","printf(\u201cCase 4\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"12","}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"sup":"11"},"In particular embodiments, de-sequentialization based on dependency analysis can help to reduce this number. In the above example, condition c at line 8 (i.e., \u201cx[2]>d\u201d) involves variables (or array elements) \u201cx[2]\u201d and \u201cd\u201d. Condition c at line 3 (i.e., \u201cx[j]++>c\u201d) involves variables \u201cx\u201d, \u201cj\u201d, and \u201cc\u201d. Condition c depends on condition c only when \u201cj=2\u201d. Thus, the above function \u201cfoo\u201d is equivalent to the following, more parallelized code.",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20021","switch (a) { \/\/ a is a symbolic variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20022","case 0: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20023","for (int j = 0; j < 2; j++) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20024","if (x[j]++ > c)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20025","printf(\u201cCase 1\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20026","else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20027","printf(\u201cCase 2\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20028","}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u20029","}"]},{"entry":[{},"10","case 1: {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"11","if (x[2]++ > c)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"12","printf(\u201cCase 1\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"13","else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"14","printf(\u201cCase 2\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"15","if (x[2] > d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"16","printf(\u201cCase 3\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"17","else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"18","printf(\u201cCase 4\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"19","}"]},{"entry":[{},"20","default: {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"21","for (int j = 3; j < 10; j++) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"22","if (x[j]++ > c)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"23","printf(\u201cCase 1\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"24","else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"25","printf(\u201cCase 2\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"26","}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"27","}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"28","}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["2","1"],"sup":"7"},"In particular embodiments, the above code segment may be executed by a symbolic executor implicitly (e.g., instead of explicitly converting the original \u201cfoo\u201d function into another function, such as the above more parallelized code segment, the executor may visit the nodes in a way similar to performing the conversion at run-time). The executor may detect dependent and independent path conditions based on variable dependency analysis during run-time, and schedule the execution to control parallelization (e.g., schedule independent paths in parallel).","Particular embodiments may perform branch order reduction. Suppose that the path condition of PATH  is p\u2032, c, c, . . . ; and the path condition of PATH  is p\u2032, c, c, . . . . In addition, the symbolic value maps of the two paths are congruent such that the variables have the same values. In this case, particular embodiments may consider PATH  as a duplicate of PATH  and should be eliminated. In other words, when the path condition of a path p is a permutation of that of another visited path, p can be skipped.","Particular embodiments may use branch schedule to avoid producing too many paths in the earlier phases of symbolic execution. Particular embodiments may adjust the order of the branches during symbolic execution. For example, a first branch may be moved above a second branch in a CFG so that the first branch is executed before the second branch. In particular embodiments, the related branches are grouped together in the hopes of cutting paths earlier, and the execution of irrelevant branches may be delayed.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 5","b":["510","1","3","2","1","3","3","2","520","510","520"],"i":["a","a","b","a","a"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 6","b":["610","1","5","5","3","5","3","620","610","620"],"i":["a","a"]},"Particular embodiments may perform backward symbolic execution. Traditional symbolic execution goes in a forward manner: the current instruction or statement is executed to generate a new state, and then the next one in the program is executed. One of the main problems of forward execution is that at the current execution point, it knows little about the subsequent executions. For example, when executing a path, it does not know for sure whether this path can result in new coverage (e.g., lead to any unvisited node) because it can only get this knowledge after the execution of the path terminates. Using heuristics may be helpful, but existing methods may fail to quickly identify the uncovered nodes and branches. Thus, particular embodiments may perform backward symbolic execution to ensure that each attempted path actually covers at least one new node or branch.","The lossless reduction techniques described above may be applied to either the traditional forward approach or this backward approach. In particular embodiments, back symbolic execution may be combined with the techniques described above (e.g., with run-time coverage monitoring and de-sequentialization) to further enhance the efficiency.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 7","b":["701","702","703","704","701","702","703","705","706","706","706","701","706"]},"As another example, consider the following sample program whose corresponding CFG  is shown in .",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20021","void foo(char* x, char c) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20022","for (int j = 0; j < 10; j++) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20023","x[j]++;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20024","if (x[j] > x[j+1])","\/\/ branch 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20025","printf(\u201cCase 1\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20026","else","\/\/ branch 2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20027","printf(\u201cCase 2\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20028","}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u20029","if (x[2] > c)","\/\/ branch 3"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"10","printf(\u201cCase 3\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"11","else","\/\/ branch 4"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"12","printf(\u201cCase 4\\n\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"13","}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Consider a backward symbolic execution starting from the last node  (currently unvisited) of CFG , as illustrated with PATH . Since both of node 's predecessors (i.e., nodes  and ) are unvisited, either one of them may be picked during the first path. Suppose that node  is picked with path condition \u201cx[2]>c\u201d. Next, node 's predecessor node  is visited, followed by node . Before visiting node , the path condition is \u201cx[2]>cj\u226710\u201d. After visiting node , the path condition becomes \u201cx[2]>cj\u22679\u201d, since node  performs the operation \u201cj++\u201d (a part of the \u201cfor\u201d loop at line 2). Node  has two predecessors, node  and node , and neither has been visited and either may be picked. Suppose that node  is picked. The path condition now becomes \u201cx[2]>cj\u22679x[j]>x[j+1]\u201d. Nodes  and  are then visited in order. Node  contains a side-effect statement \u201cx[j]++\u201d, which turns the path condition into \u201cx[2]>cj 9x[j]\u22121>x[j+1]\u201d. Node  has two predecessors: node  and node . The path to node  is infeasible because it requires \u201cj=0\u201d while currently \u201cj\u22669\u201d. Thus, node  is visited again, followed by nodes  and  and back to node . This loop procedure continues until \u201cj\u201d becomes 0, where the path condition, after simplification, becomes \u201cx[2]>cx[0]\u22121>x[1]x[1]\u22121>x[2]x[2]\u22121>x[3] . . . \u201d. Solving this constraint may give a test case. As illustrated in , PATH  consists of nodes , , , , , , , and . After PATH , the unvisited nodes are node  and node . Since the traversal goes in a reverse order, the next path, PATH , starts with node , which is the last unvisited node in CFG  (e.g., a unvisited node that is closest to a leaf node). The execution is similar to that of PATH  described above. At node , since node  has not been visited, PATH  may proceed toward node  by taking the branch \u201cx[j]\u2266x[j+1]\u201d at node .","With just two paths, all the nodes in CFG  are covered (i.e., visited). One of the advantages of the backward symbolic execution technique is that each of its node selections is on a real unvisited node; thus, each new path formed with this technique always brings new node or branch coverage, provided that this path is feasible. In contrast, the forward approach may still visit duplicate paths without contributing new coverage. In particular embodiments, during forward execution, it may be helpful to also apply backward traversal to a limited extend so as to locate the best candidate paths to try next. Their combination may help find a sufficient set of paths in less time. For example, for those nodes that are easy to cover, forward execution may be applied. For those nodes that are difficult to cover, backward execution may be applied to ensure that such nodes are visited along some path.","Sometimes, backward execution may be more difficult than forward execution, as it has less information about the variables flowing into the program. Backward execution updates the symbolic expressions in a different way than forward execution. For example, consider node , which corresponds to the operation \u201cj++\u201d. With forward execution, if before node , the path condition on variable \u201cj\u201d is c(j), then going forward after node , the path condition on variable \u201cj\u201d becomes c(j+1). However, with backward execution, if before node , the path condition on variable \u201cj\u201d is c(j), then going backward after node , the path condition on variable \u201cj\u201d becomes c(j\u22121).",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 9","b":["910","920","930"]},"In particular embodiments, the symbolic expressions obtained by symbolically executing the software program or module may be solved using, for example, a SMT solver. The solutions, if any, may be used to generate test cases for testing and validating the software program or module.","In particular embodiments, the lossless path reduction techniques described above may be implemented as computer software stored in non-transient computer-readable storage medium. Particular embodiments may be implemented on one or more computer systems.  illustrates an example computer system . In particular embodiments, one or more computer systems  perform one or more steps of one or more methods described or illustrated herein. In particular embodiments, one or more computer systems  provide functionality described or illustrated herein. In particular embodiments, software running on one or more computer systems  performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .","This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system  taking any suitable physical form. As example and not by way of limitation, computer system  may be an embedded computer system, a system-on-chip (SOC), a single-board computer system (SBC) (such as, for example, a computer-on-module (COM) or system-on-module (SOM)), a desktop computer system, a laptop or notebook computer system, an interactive kiosk, a mainframe, a mesh of computer systems, a mobile telephone, a personal digital assistant (PDA), a server, or a combination of two or more of these. Where appropriate, computer system  may include one or more computer systems ; be unitary or distributed; span multiple locations; span multiple machines; or reside in a cloud, which may include one or more cloud components in one or more networks. Where appropriate, one or more computer systems  may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation, one or more computer systems  may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems  may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein, where appropriate.","In particular embodiments, computer system  includes a processor , memory , storage , an input\/output (I\/O) interface , a communication interface , and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement, this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.","In particular embodiments, processor  includes hardware for executing instructions, such as those making up a computer program. As an example and not by way of limitation, to execute instructions, processor  may retrieve (or fetch) the instructions from an internal register, an internal cache, memory , or storage ; decode and execute them; and then write one or more results to an internal register, an internal cache, memory , or storage . In particular embodiments, processor  may include one or more internal caches for data, instructions, or addresses. This disclosure contemplates processor  including any suitable number of any suitable internal caches, where appropriate. As an example and not by way of limitation, processor  may include one or more instruction caches, one or more data caches, and one or more translation lookaside buffers (TLBs). Instructions in the instruction caches may be copies of instructions in memory  or storage , and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory  or storage  for instructions executing at processor  to operate on; the results of previous instructions executed at processor  for access by subsequent instructions executing at processor  or for writing to memory  or storage ; or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual-address translation for processor . In particular embodiments, processor  may include one or more internal registers for data, instructions, or addresses. This disclosure contemplates processor  including any suitable number of any suitable internal registers, where appropriate. Where appropriate, processor  may include one or more arithmetic logic units (ALUs); be a multi-core processor; or include one or more processors . Although this disclosure describes and illustrates a particular processor, this disclosure contemplates any suitable processor.","In particular embodiments, memory  includes main memory for storing instructions for processor  to execute or data for processor  to operate on. As an example and not by way of limitation, computer system  may load instructions from storage  or another source (such as, for example, another computer system ) to memory . Processor  may then load the instructions from memory  to an internal register or internal cache. To execute the instructions, processor  may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions, processor  may write one or more results (which may be intermediate or final results) to the internal register or internal cache. Processor  may then write one or more of those results to memory . In particular embodiments, processor  executes only instructions in one or more internal registers or internal caches or in memory  (as opposed to storage  or elsewhere) and operates only on data in one or more internal registers or internal caches or in memory  (as opposed to storage  or elsewhere). One or more memory buses (which may each include an address bus and a data bus) may couple processor  to memory . Bus  may include one or more memory buses, as described below. In particular embodiments, one or more memory management units (MMUs) reside between processor  and memory  and facilitate accesses to memory  requested by processor . In particular embodiments, memory  includes random access memory (RAM). This RAM may be volatile memory, where appropriate. Where appropriate, this RAM may be dynamic RAM (DRAM) or static RAM (SRAM). Moreover, where appropriate, this RAM may be single-ported or multi-ported RAM. This disclosure contemplates any suitable RAM. Memory  may include one or more memories , where appropriate. Although this disclosure describes and illustrates particular memory, this disclosure contemplates any suitable memory.","In particular embodiments, storage  includes mass storage for data or instructions. As an example and not by way of limitation, storage  may include an HDD, a floppy disk drive, flash memory, an optical disc, a magneto-optical disc, magnetic tape, or a Universal Serial Bus (USB) drive or a combination of two or more of these. Storage  may include removable or non-removable (or fixed) media, where appropriate. Storage  may be internal or external to computer system , where appropriate. In particular embodiments, storage  is non-volatile, solid-state memory. In particular embodiments, storage  includes read-only memory (ROM). Where appropriate, this ROM may be mask-programmed ROM, programmable ROM (PROM), erasable PROM (EPROM), electrically erasable PROM (EEPROM), electrically alterable ROM (EAROM), or flash memory or a combination of two or more of these. This disclosure contemplates mass storage  taking any suitable physical form. Storage  may include one or more storage control units facilitating communication between processor  and storage , where appropriate. Where appropriate, storage  may include one or more storages . Although this disclosure describes and illustrates particular storage, this disclosure contemplates any suitable storage.","In particular embodiments, I\/O interface  includes hardware, software, or both providing one or more interfaces for communication between computer system  and one or more I\/O devices. Computer system  may include one or more of these I\/O devices, where appropriate. One or more of these I\/O devices may enable communication between a person and computer system . As an example and not by way of limitation, an I\/O device may include a keyboard, keypad, microphone, monitor, mouse, printer, scanner, speaker, still camera, stylus, tablet, touch screen, trackball, video camera, another suitable I\/O device or a combination of two or more of these. An I\/O device may include one or more sensors. This disclosure contemplates any suitable I\/O devices and any suitable I\/O interfaces  for them. Where appropriate, I\/O interface  may include one or more device or software drivers enabling processor  to drive one or more of these I\/O devices. I\/O interface  may include one or more I\/O interfaces , where appropriate. Although this disclosure describes and illustrates a particular I\/O interface, this disclosure contemplates any suitable I\/O interface.","In particular embodiments, communication interface  includes hardware, software, or both providing one or more interfaces for communication (such as, for example, packet-based communication) between computer system  and one or more other computer systems  or one or more networks. As an example and not by way of limitation, communication interface  may include a network interface controller (NIC) or network adapter for communicating with an Ethernet or other wire-based network or a wireless NIC (WNIC) or wireless adapter for communicating with a wireless network, such as a WI-FI network. This disclosure contemplates any suitable network and any suitable communication interface  for it. As an example and not by way of limitation, computer system  may communicate with an ad hoc network, a personal area network (PAN), a local area network (LAN), a wide area network (WAN), a metropolitan area network (MAN), or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example, computer system  may communicate with a wireless PAN (WPAN) (such as, for example, a BLUETOOTH WPAN), a WI-FI network, a WI-MAX network, a cellular telephone network (such as, for example, a Global System for Mobile Communications (GSM) network), or other suitable wireless network or a combination of two or more of these. Computer system  may include any suitable communication interface  for any of these networks, where appropriate. Communication interface  may include one or more communication interfaces , where appropriate. Although this disclosure describes and illustrates a particular communication interface, this disclosure contemplates any suitable communication interface.","In particular embodiments, bus  includes hardware, software, or both coupling components of computer system  to each other. As an example and not by way of limitation, bus  may include an Accelerated Graphics Port (AGP) or other graphics bus, an Enhanced Industry Standard Architecture (EISA) bus, a front-side bus (FSB), a HYPERTRANSPORT (HT) interconnect, an Industry Standard Architecture (ISA) bus, an INFINIBAND interconnect, a low-pin-count (LPC) bus, a memory bus, a Micro Channel Architecture (MCA) bus, a Peripheral Component Interconnect (PCI) bus, a PCI-Express (PCI-X) bus, a serial advanced technology attachment (SATA) bus, a Video Electronics Standards Association local (VLB) bus, or another suitable bus or a combination of two or more of these. Bus  may include one or more buses , where appropriate. Although this disclosure describes and illustrates a particular bus, this disclosure contemplates any suitable bus or interconnect.","Herein, reference to a computer-readable storage medium encompasses one or more non-transitory, tangible computer-readable storage media possessing structure. As an example and not by way of limitation, a computer-readable storage medium may include a semiconductor-based or other integrated circuit (IC) (such, as for example, a field-programmable gate array (FPGA) or an application-specific IC (ASIC)), a hard disk, an HDD, a hybrid hard drive (HHD), an optical disc, an optical disc drive (ODD), a magneto-optical disc, a magneto-optical drive, a floppy disk, a floppy disk drive (FDD), magnetic tape, a holographic storage medium, a solid-state drive (SSD), a RAM-drive, a SECURE DIGITAL card, a SECURE DIGITAL drive, or another suitable computer-readable storage medium or a combination of two or more of these, where appropriate. Herein, reference to a computer-readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. \u00a7101. Herein, reference to a computer-readable storage medium excludes transitory forms of signal transmission (such as a propagating electrical or electromagnetic signal per se) to the extent that they are not eligible for patent protection under 35 U.S.C. \u00a7101. A computer-readable non-transitory storage medium may be volatile, non-volatile, or a combination of volatile and non-volatile, where appropriate.","This disclosure contemplates one or more computer-readable storage media implementing any suitable storage. In particular embodiments, a computer-readable storage medium implements one or more portions of processor  (such as, for example, one or more internal registers or caches), one or more portions of memory , one or more portions of storage , or a combination of these, where appropriate. In particular embodiments, a computer-readable storage medium implements RAM or ROM. In particular embodiments, a computer-readable storage medium implements volatile or persistent memory. In particular embodiments, one or more computer-readable storage media embody software. Herein, reference to software may encompass one or more applications, bytecode, one or more computer programs, one or more executables, one or more instructions, logic, machine code, one or more scripts, or source code, and vice versa, where appropriate. In particular embodiments, software includes one or more application programming interfaces (APIs). This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments, software is expressed as source code or object code. In particular embodiments, software is expressed in a higher-level programming language, such as, for example, C, Perl, or a suitable extension thereof. In particular embodiments, software is expressed in a lower-level programming language, such as assembly language (or machine code). In particular embodiments, software is expressed in JAVA, C, or C++. In particular embodiments, software is expressed in Hyper Text Markup Language (HTML), Extensible Markup Language (XML), or other suitable markup language.","Herein, \u201cor\u201d is inclusive and not exclusive, unless expressly indicated otherwise or indicated otherwise by context. Therefore, herein, \u201cA or B\u201d means \u201cA, B, or both,\u201d unless expressly indicated otherwise or indicated otherwise by context. Moreover, \u201cand\u201d is both joint and several, unless expressly indicated otherwise or indicated otherwise by context. Therefore, herein, \u201cA and B\u201d means \u201cA and B, jointly or severally,\u201d unless expressly indicated otherwise or indicated otherwise by context.","This disclosure encompasses all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly, where appropriate, the appended claims encompass all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Moreover, reference in the appended claims to an apparatus or system or a component of an apparatus or system being adapted to, arranged to, capable of, configured to, enabled to, operable to, or operative to perform a particular function encompasses that apparatus, system, component, whether or not it or that particular function is activated, turned on, or unlocked, as long as that apparatus, system, or component is so adapted, arranged, capable, configured, enabled, operable, or operative."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
