---
title: Data transformation using leaf and non-leaf nodes
abstract: A hierarchical tree is received that includes nodes. The nodes include a leaf node and a non-leaf node. The leaf node points to the non-leaf node, and specifies original data. The non-leaf node specifies a script to transform the original data to generate transformed data. The script is executed to transform the original data to generate the transformed data. The transformed data is output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08885192&OS=08885192&RS=08885192
owner: Hewlett-Packard Development Company, L.P.
number: 08885192
owner_city: Houston
owner_country: US
publication_date: 20110405
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["With the increasing popularity of the Internet, there is a large amount of content available to users. Different Internet web sites permit a user to avail him or herself of different types of content. Such content runs the gamut from images to text, to even whole books, among other types of content.","As noted in the background section, users can avail themselves to a wide variety of different content on the Internet. However, combining disparate content, from same or different Internet web sites, and\/or being able to generate a printed form of this content, can be difficult even for more seasoned users of the Internet. For instance, a user may wish to generate in booklet form content from a number of different sources, such that the combined content can be printed in an aesthetically pleasing manner for offline viewing.","Disclosed herein are approaches that permit such combined content to be generated. A hierarchical tree having a number of nodes is received. The nodes can include leaf nodes and non-leaf nodes. Each leaf node points to a non-leaf node, and each non-leaf node, except for one or more top-most non-leaf nodes, points to another non-leaf node. Each leaf node specifies original content, whereas each non-leaf node specifies a script to transform the data input to this node to generate transformed data.","The hierarchical tree is navigated in a bottom-up manner. For each non-leaf node of the hierarchical tree, the script of the non-leaf node is executed to generate corresponding transformed data. In this manner, data that includes content can be received and transformed in the process of navigating the hierarchical tree, so that the ultimate result is combined content that may be able to be printed in an aesthetically pleasing manner.","Techniques disclosed herein further provide entities such as content providers a mechanism by which end users of these entities can combine content provided by the entities in user-desired ways. Application programming interfaces (APIs) are exposed that permit such content providers to generate hierarchical trees corresponding to end-result combined content. The actual content that is combined, and potentially how this content is combined, may be specified by an end user through a web site operated by or for the content provider. Other APIs are then called by the entity in question to generate the end-result combined content.","Disclosed herein as well are techniques that permit such end-result combined content to be printed by a print service provider for the end user of the content provider, without this entity having to operate or be the print service provider. An API may be callable by the entity to issue a fulfillment request, by which an order placed by the end user for one or more printed copies of the combined content is sent to a print service provider. The print service provider can then print the combined content, and ship the desired number of copies of this content to the end user.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1","b":["100","100","102","102","102","102","100","104","104","104","104","104","104"]},"The non-leaf nodes  are each defined as a node of the hierarchical tree  to which one or more other nodes, be they non-leaf nodes  or leaf nodes , point. The leaf nodes are each defined as a node of the hierarchical tree  to which no other node points. As such, the leaf nodes A and B point to the non-leaf node A; the leaf node B and the non-leaf node C point to the non-leaf node B; and, the leaf nodes C, D, . . . , N point to the non-leaf node C.","The hierarchical tree  is hierarchical in that the nodes are organized in a hierarchy. The leaf nodes  occupy the bottom of the hierarchy, and the non-leaf nodes A and B occupy the top of the hierarchy. The non-leaf node C occupies the middle of the hierarchy, between the leaf nodes  and the non-leaf nodes A and B.","Each leaf node  specifies original data, such as original content, including images, portable document format (PDF)-formatted files, text, and so on. The data or content is original in that the data or content has not been transformed or otherwise processed within the hierarchical tree . The original data may be specified within a leaf node  by a universal resource identifier (URI), such as a universal resource locator (URL) address. In this example, the original data is not part of the leaf node , but rather is referenced by the leaf node . However, the original data may be specified by being contained in a leaf node  itself.","Each non-leaf node  specifies a script that transforms data input to the non-leaf  into transformed data. Execution of the script of a leaf node  thus generates the transformed data from the input data. For instance, the script may specify that the data is to be cropped, resized, transformed from color into black and white, and so on. Where a non-leaf node  has data from more than one other node  and\/or  input thereto, the script may specify how the data from each such node  and\/or  is to be assembled in generating the transformed data.","The reference of each non-leaf node  to one or more other nodes  and\/or  may be specified in one of two ways. First, each such other node  and\/or  may be explicitly specified internal to the script of the non-leaf node  in question. For example, the script of the non-leaf node B may have \u201chard coded\u201d (i.e., explicitly specified) that the nodes that point to the node B include the leaf node B and the non-leaf node C.","Second, each such other node  and\/or  may be specified within a markup language file, such as an extensible markup language (XML) file external to the script of the non-leaf node  in question. For instance, rather than having the script of the non-leaf node C explicitly specify the leaf nodes C, D, . . . , N, a markup language file may specify these leaf nodes. As one example, the leaf nodes C, D, . . . , N may have a particular naming convention in which the name of each of these leaf nodes  begins with the prefix \u201cpage.\u201d As such, the XML file may specify the leaf nodes C, D, . . . , N as any leaf node  beginning with this prefix.","Processing of the nodes  and  of the hierarchical tree  results in an end result , which is data, such as content, of the leaf nodes  as transformed by the non-leaf nodes . The nodes  and  are processed by navigating the hierarchical tree  in a bottom-up manner, and executing the script of each non-leaf node C encountered. Once the scripts of the top-most nodes A and B have been executed, processing of the hierarchical tree  is finished.","In the example of , the script of the non-leaf node C is thus executed first to transform the data of each leaf node C, D, . . . , N. The script of the non-leaf node A may be executed at the same or different time to transform the data of the leaf nodes A and B. After the script of the non-leaf node C is executed, the script of the non-leaf node B is executed to transform the data of the leaf node B and of the non-leaf node C. The end result  in this example includes the data output by the non-leaf node A and by the non-leaf node B.","As a more concrete example, the hierarchical tree  may correspond to a book. The leaf node A may correspond to a brief introduction of the book, and the leaf node B may correspond to an image for the book. The leaf nodes C, D, . . . , N may correspond to the pages of the book. The non-leaf node C generates the chapters of the book from the pages output by the leaf nodes C, D, . . . , N. The non-leaf node A generates the cover of the book from the text output by the leaf node A and from the image output by the leaf node B. The non-leaf node B generates the inside content of the book (i.e., the book apart from the cover) from the chapters output by the non-leaf node C and from the image B, which may be added to the first page of each chapter, for instance.","In this example, then, there are two top-most nodes A and B within the hierarchical tree  that do not point to any other node. The top-most node A corresponds to and specifies the cover of the book to which the hierarchical tree  corresponds. The top-most node B corresponds to and specifies the internal pages of this book, organized by chapter.","The example hierarchical tree  thus shows how different types of combined content, and other types of transformed data, can be generated using such a tree . For content to be used by a project like a book, a hierarchical tree  is specified that includes leaf nodes  corresponding to this content. Furthermore, the hierarchical tree  is specified to include non-leaf nodes  that transform this content in a desired manner. As noted above, the nodes  and\/or  that point to a given non-leaf node  can be specified internally within the script of this given node , or by a markup language file.","In its simplest form, a hierarchical tree  includes at least one non-leaf node  and at least one leaf node . The leaf node  in such a simple hierarchical tree  is the content that is input to the hierarchical tree . The non-leaf node  encompasses the transformation of this content to generate transformed content. However, a hierarchical tree  can also be significantly more complex than that depicted in , with hundreds if not more of leaf nodes  and of non-leaf nodes , organized in a complicated hierarchy having a large number of hierarchical levels.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["200","200","200"]},"A schema can be received (). The schema specifies a hierarchical structure of a hierarchical tree. For instance, the schema may specify how the nodes of the hierarchical tree are organized in relation to one another, the type of data output by each node, and the type of data to be input to each non-leaf node. The schema does not include the hierarchical tree itself, but rather specifies the hierarchical tree in a outward-looking, \u201cblack box\u201d-type of manner. For instance, the actual original data of each leaf node is not specified by the schema, nor the actual script of each non-leaf node. Rather, the type of the original data of each leaf node is specified by the schema, as well as the type of data input and output by each non-leaf node.","The schema can be validated to ensure that the project, such as a book, that is the end result of the hierarchical tree is able to be generated (). More generally, the schema is validated to verify that the execution of the scripts of the non-leaf nodes are able to be completed without error, based on the type of input data and the type of output data of each non-leaf node. For example, if a non-leaf node is to receive an image in a joint photographic experts group (JPG or JPEG)-formatted file, but the leaf node that points to this non-leaf node outputs a PDF-formatted file, then validation of the scheme will fail, due to file format incompatibility.","Assuming that schema validation is successful, the hierarchical tree itself is received (), including specification of each node within the tree. The hierarchical tree is navigated in a bottom-up manner (), as has been described by reference to the example of . At each non-leaf node that is navigated to, the script of the non-leaf node is executed () to transform the data input to the non-leaf node to generate the transformed data that is output by this non-leaf node. Execution of the scripts of the non-leaf nodes may be performed sequentially, or concurrently inasmuch as possible based on the dependencies among the leaf nodes. For instance, if a first non-leaf node points to a second non-leaf node, then the first non-leaf node has to have its script executed before the script of the second non-leaf node can be executed.","The end result of processing the hierarchical tree is output (). The end result includes the transformed data generated by each top-most non-leaf node of the hierarchical tree. Output may include, for instance, displaying the end result on a display device for a user, so that the user can preview the project to which the hierarchical tree corresponds.","The method  provides for a fulfillment request for the transformed data being received as well (). The fulfillment request may specify a number of printed copies of the end result that are to be printed, as well as the shipping destination, such as the address of a user, to which the printed copies are to be shipped. The fulfillment request may also specify the print service provider, such as the commercial printer, that is to print the specified number of copies of the transformed data. The fulfillment request is ultimately processed (). The computing device performing the method  may transmit the end result to the specified print service provider, with instructions as to how many copies of the end result to print, and to where to ship these printed copies.","In this respect, the method  can be performed by the computing device of an entity, such as a business, providing a content generation service, which may be colloquially referred to as a content \u201cmash up\u201d service, to another entity, such as a provider of content. The method  may be implemented without any sort of user interface (UI). Rather, the content provider may code its own UI to expose to end users, such as human individuals, and to create the types of desired projects to offer to its end users. Once an end user has specified the content and how it is to be assembled, within the dictates specified by the content provider, the content provider may then transmit this information to the entity whose computing device performs the method .","Furthermore, the entity having the computing device that performs the method  may be separate from the print service provider that generates the printed output for the end user of the content provider. As such, there may be a total of at least three entities in one example scenario. The first entity is that which controls the computing device that performs the method . The second entity is the content provider that contracts with or otherwise arranges for the first entity to perform the method  in relation to content. The third entity is the print service provider that ultimately prints hardcopies of the transformed content, or other data.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["300","200","300","300"]},"The method  exposes a number of APIs (). The APIs are callable by a client computing device, different than the computing device performing the method  (and the method ), and which is controlled by an entity that may be different than the entity controlling the computing device performing the methods  and . For instance, the entity controlling the client computing device may be a content service provider, whereas the entity controlling the computing device performing the methods  and  may be a business that provides a \u201cmash-up\u201d service to such content service providers.","An API is a particular set of rules and specifications that a computer program can follow to access and make use of the services and resources provided by another particular computer program that implements the API. An API serves as an interface between different computer programs and facilitates their interaction, similar to the way the user interface facilitates interaction between humans and computers. The APIs are called by the client computing device to specify hierarchical trees and their constituent nodes, as well as other parameters that govern the execution of the method  that has been described.","For instance, the APIs can include a leaf node API, a non-leaf node API, a hierarchical tree API, a print service API, a client API, a generate API, a fulfillment API, and a print API. The leaf node API is called to create a leaf node of a hierarchical tree, whereas the non-leaf node API is called to create a non-leaf node of a hierarchical tree. These APIs receive parameters that specify the nodes in question to be created, such that calling the APIs with such parameters results in corresponding nodes being created. The nodes themselves, however, may not be returned by the APIs, but rather are maintained at the computing device performing the methods  and , such that just references to the created nodes are returned.","The hierarchical tree API is called to create a hierarchical tree. This API receives parameters that specify the nodes of the hierarchical tree via references to previously created and\/or standard or \u201cstock\u201d nodes, as well as how these nodes are structurally arranged in relation to one another. The hierarchical tree may also not be returned by this API, but rather is maintained at the computing device performing the methods  and , such that just a reference to the hierarchical tree is returned.","The print service API may be called to specify the print service provider that is to print the transformed data that is generated when a hierarchical tree that has been created is navigated and the scripts of its constituent non-leaf nodes are executed. For instance, there may be a number of different types of print service providers. Some print service providers may specialized in certain types of printed content; some print service providers may specialize in low-volume orders whereas other print service providers may specialized in high-volume orders; and so on. Therefore, a content provider may wish for a particular print service provider to be used, and can specify this by calling the print service API.","The client API may be called to specify the entity, such as the content provider, associated with the client computing device that is creating the hierarchical tree and its constituent nodes. Calling the client API therefore performs such an entity to be registered with the entity that controls the computing device that performs the methods  and . This further enables the entity that controls the computing device that performs the methods  and  to offer its services to multiple and different other entities, such as various content providers.","The generate API is called to generate the transformed data as specified by a hierarchical tree. For instance, upon the content provider's client computing device calling the generate API, the computing device performing the methods  and  particularly executes parts , , and  of the method . As such, an end result corresponding to the transformed data is generated, and may be returned to the client computing device, either directly or via a reference thereto.","The fulfillment API is called to specify a fulfillment request for the transformed data. For instance, once the content provider's end user has approved the generated transformed data, the end user may wish to order a number of printed copies of this end result, to be shipped to a particular address. As such, the fulfillment API is correspondingly called by the content provider's client computing device. The fulfillment API may return the total cost for printing and shipping the end result in question.","The print API is called to inform the specified print service provider that a fulfillment request is to be processed by the print service provider. It is noted that while the computing device performing the methods  and  receives the call to the print API, this computing device then informs a computing device of the print service provider itself to begin printing the end result approved by the content provider's end user. With both this API and the fulfillment API, the content provider's client computing device may provide a callback address to be called to provide the information output by the APIs, or the client computing device may have to periodically poll the APIs again to learn whether this information is available.","The method  may further expose a number of objects that are usable by the client computing device when calling the APIs (). The objects are software objects in an object-oriented programming (OOP) sense, and provide for a data format of instantiations of these objects, and preprogrammed methods that can be used in scripts that manipulate the objects. OOP is a programming paradigm that uses objects\u2014i.e., data structures including data fields and methods together with their interactions\u2014to design applications and computer programs. Programming techniques may include OOP features including data abstraction, encapsulation, messaging, modularity, polymorphism, and inheritance, among other types of OOP features.","Among other types of objects that may be exposed are a leaf node object, a non-leaf node object, and a PDF object. A leaf node object specifies the data format of a leaf node, and includes one or more methods that are executable in relation to the leaf node. Similarly, a non-leaf node object specifies the data format of a non-leaf node, and includes one or more methods that are executable in relation to the non-leaf node. Example such methods in both cases include performing scripts, such as transforming content, adding page numbers, concatenating arbitrary collections of inputs, and so on.","A PDF object specifies the data format of PDF-formatted data that may be input or output by a node. The PDF object may further include methods that can represent standard and\/or basic operations that can be used to manipulate such PDF-formatted data. For instance, the PDF object may expose rotate, crop, transform color-to-black-and-white, and other types of methods that perform their corresponding functionality on PDF-formatted data. As such, a content provider or other entity that uses the services of the entity whose computing devices perform the methods  and  does not have to code or otherwise develop such functionality itself, but rather can utilize this provided functionality in the scripts of its non-leaf node objects.","As an example, the client computing device may call the non-leaf node API to generate (i.e., instantiate) a non-leaf node object in accordance with specified parameters. The input to the non-leaf node object may be PDF-formatted data specified by a PDF object. The script of the non-leaf node object may thus utilizes the methods exposed by the PDF object to perform certain types of processing on this PDF-formatted data. As such, the content provider or other entity that controls the client computing device does not itself have to code or otherwise develop these types of processing within the script itself.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":["400","400","402","404","406","408","410","410","402","406","402","410"]},"The computing device  is controlled by the entity that provides the \u201cmash up\u201d service described in relation to the methods  and . The computing device  is controlled by an end user, such as an individual person. The computing device  is controlled by a content provider or another type of entity. The computing device  is controlled by a print service provider.","The computing device  is depicted in detail in . The computing device  includes at least a hardware network component , a processor , and a computer-readable data storage medium . The hardware network component  permits the computing device  to communicate with the computing devices , , and\/or  over the network . The computer-readable data storage medium  stores a computer program  that is executable by the processor .","The computer program  includes at least two computer program parts A and B, which are collectively referred to as the computer program parts . The computer program part A when executed by the processor  performs the method  that has been described. Similarly, the computer program part B when executed by the processor  performs the method  that has been described.","In operation of the system , the computing device  may be utilized by the content provider to employ the APIs exposed by the program part B to create a hierarchical data structure, including at least one leaf node and at least one non-leaf node. The computing device  may further expose a user interface by which an end user using the computing device  specifies desired content and a desired assembly or other transformation of this content. The computing device  then calls an API exposed by the program part B to generate the end result in accordance with a created hierarchical data structure and the end user's selections, such that the program part A performs at least some parts of the method .","The computing device  returns this end result, or a reference thereto, to the computing device , which may provide it to the computing device . Once the end user is satisfied with the end result, he or she may use the computing device  to initiate an order for one or more printed copies. The computing device  receives this request, and calls one or more appropriate APIs exposed by the program part B to initiate execution of other parts of the method  by the program part A. The computing device  thus passes this request to the computing device  of the print service provider to print the desired copies of the end result, and to ship them to the end user in question."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
