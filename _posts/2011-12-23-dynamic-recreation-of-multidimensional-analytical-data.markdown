---
title: Dynamic recreation of multidimensional analytical data
abstract: According to one aspect of systems and methods for dynamic recreation of multidimensional analytical data, lost sets of calculation scenarios that provide multidimensional analytical data results after aggregations and transformations of the multidimensional analytical data are recreated in the volatile storage of an in-memory computing engine. A multidimensional analytical data view (MDAV) compiler is triggered to read the MDAV metadata stored in an intermediate buffer in the MDAV compiler. The read MDAV metadata is compiled into a calculation scenario including calculation view metadata. The calculation view metadata is stored in the intermediate buffer. The recreated set of calculation scenarios is deployed on the in-memory computing engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348874&OS=09348874&RS=09348874
owner: SAP SE
number: 09348874
owner_city: Walldorf
owner_country: DE
publication_date: 20111223
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is related to three co-pending U.S. Applications\u2014\n\n","all of which are herein incorporated by reference in its entirety for all purposes.","The field generally relates to the software arts, and, more specifically, to various methods and systems for dynamic recreation of multidimensional analytical data.","In computing, Online Analytical Processing (OLAP) tools enable users to interactively analyze multidimensional data from multiple perspectives. Databases configured for OLAP use a multidimensional data model that allows complex analytical and ad-hoc queries with rapid execution. Multidimensional structure can be defined as a variation of a relational model that uses multidimensional structures to organize data and express the relationships between the data. One of the mechanisms in OLAP is the use of aggregations. Aggregations are built from a fact table by changing the granularity on specific dimensions and aggregating the data along these dimensions. The number of possible aggregations is determined by every possible combination of dimension granularities. Multidimensional OLAP systems store data in optimized multi-dimensional array storage, rather than in a relational database.","Typical applications of OLAP include business reporting for sales, marketing, management reporting, business process management (BPM), budgeting and forecasting, financial reporting and similar areas. OLAP processors use data stored in in-memory databases for analytical processing. An in-memory database is a database management system that primarily relies on the main memory for computer data storage. Accessing data in volatile memory reduces the I\/O reading activity when querying the data which provides faster and more predictable performance than disk memory. However, shutting down or restarting systems with in-memory databases leads to loosing the data stored in the volatile storage of the in-memory databases.","Various embodiments of methods and systems for dynamic recreation of multidimensional analytical data are described herein. In various embodiments, the method includes querying an in-memory computing engine for multidimensional analytical data results obtained from executing a set of calculation scenarios by a calculation engine in the in-memory computing engine. The method further includes receiving a response from the in-memory computing engine that the set of calculation scenarios is not available in a volatile memory of the in-memory computing engine. Finally, a multidimensional analytical data view compiler is dynamically triggered to recreate the set of calculation scenarios in the in-memory computing engine.","In various embodiments, the system includes an in-memory computing engine storing a set of calculation scenarios. According to one aspect, the system includes a calculation engine inside the in-memory computing engine that executes the set of calculation scenarios. Further, an in-memory runtime is included that sends a request to the calculation engine to retrieve multidimensional analytical data results obtained from executing the set of calculation scenarios by a calculation engine. Finally, the system includes a multidimensional analytical data view compiler to recreate the set of calculation scenarios if the set of calculation scenarios is not available in the in-memory computing engine.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for methods and systems for dynamic recreation of multidimensional analytical data are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiment.","The multidimensional analytical data is stored in an in-memory computing engine. The in-memory computing engine is part of applications that are built using in-memory technology. These applications are built based on business driven use cases, specifically in industries requiring processing of large data volumes or real-time processing such as banking, retail, utilities\/energy, and telecommunications. Examples where in-memory technology may be applied to build new applications include: 1) demand forecasting based on huge data volumes provided by smart meter devices in utilities industries; 2) managing energy cost in energy intensive industries with in-memory analytics and forecasting based on fine grained consumption data; 3) trade promotion management solutions for retailers and consumer products companies with high data volumes 4) real-time risk management (e.g., during closing of new policies) and cumulated risks calculation for insurance companies in the corresponding area; 5) internal and external risk management and regulatory reporting for banking sector; and so on.","In various embodiments, traditional business warehouse metadata is replaced with multidimensional analytical views. The multidimensional analytical views represent a business object based meta model for analytics. The analytics include computer technology, operational research, and statistics to solve different problems in business and industry scenarios such as enterprise decision management, marketing analytics, portfolio analysis, credit risk analysis, and so on. In various embodiments, business applications model their analytical data sources as multidimensional analytical views (MDAVs). The data of the multidimensional analytical views is stored in the in-memory computing engine. The MDAV metadata is internally represented as a tree structure. To execute an MDAV in a database runtime, the MDAV has to be loaded, transformed, and deployed to the desired engine (e.g., the in-memory computing engine).",{"@attributes":{"id":"p-0021","num":"0023"},"figref":"FIG. 1","b":["110","115","120","125","127","130","135","140","110","115","150","110","145","115","110","150","155","152","155","160","155","160","165","155","165"]},"The multidimensional analytical views serve as data providers for the OLAP processor  as they include the analytical data. The analytical data itself is stored in the in-memory computing engine . As the in-memory computing engine  is an in-memory database system, the metadata is kept in the temporary memory (e.g., the RAM) of the engine. The MDAV runtime  performs some operations such as calculations and mathematical operations on the analytical data that the MDAV runtime  already aggregated. These operations are performed before the data is sent to the OLAP processor  (e.g., the analytical engine). In some embodiments, the in-memory computing engine  includes a calculations engine that process complex and nested calculations and data aggregation inside the in-memory computing engine runtime before retrieving the (result) data. The result from the aggregation and calculation, i.e. the aggregated data and the calculated data, is accessed by the MDAV runtime  via calculation views. The calculation views are also stored in the temporary memory of the in-memory computing engine . Therefore, when the application server is restarted or stopped (e.g., for maintenance), the calculation views could be lost as the RAM is a volatile storage.",{"@attributes":{"id":"p-0023","num":"0025"},"figref":"FIG. 2","b":["155","165","160","160","210","215","220","220","225","165","220","215","210"]},"The MDAV runtime analyzer  determines whether the application server runtime or the in-memory runtime will execute the complete MDAV or part of the MDAV tree. Part of a more complex intersection or a union MDAV can be executed by the application server runtime while other parts can be executed with in-memory runtime. The runtime analyzer  provides the information about which runtime environment will execute the MDAV tree, instantiates the corresponding MDAV runtime, and delegates it to the runtime proxy for further execution. First, the runtime analyzer  reads the subset of the MDAV metadata from the MDAV metadata buffer. Not only is the MDAV type taken into account, but also a set of defined decision rules. These decision rules can easily be enhanced. Furthermore, the runtime analyzer  offers the option to overrule the generic decision by providing a parameter, which can be set and is valid for the complete MDAV tree. This option can be used for fallback mechanisms, for testing purposes, etc.","In some embodiments, the runtime analyzer  may decide, in correspondence with the current use case, to delegate some operations execution of MDAVs to the AS runtime . The AS runtime  is built on top of a fast search infrastructure (FSI)  that sends a request to the join engine  to access indices  that store the business data for executing the MDAVs.","In other embodiments, the runtime analyzer  delegates some operations execution of MDAVs to the in-memory runtime  that sends a request to calculation engine . When the operations are executed by the calculation engine  in the in-memory computing engine , a set of calculation scenarios  are created. A calculation scenario represents a list of operations (e.g., mathematical operations) that need to be executed. The result from the execution of the calculation scenarios is sent to the MDAV runtime , which further forwards it to the OLAP processor . The calculation engine  can work with multiple inputs from multiple table-types such as OLAP-views, JOIN-tables, physical-tables, and so on. The calculation engine  can combine and transform these table-types in multiple ways, for example by using predefined operations like join, projection, aggregation, etc. Further, the calculation engine  allows customizable operations by including Python-scripts, R-scripts, or L-scripts and thus allowing basically any kind of data transformation.","The in-memory runtime  sends a query to the calculation engine  to obtain the results from executing the calculation scenarios . The calculation scenarios include descriptions of the calculation operations (e.g., mathematical calculations) that should be performed inside the in-memory computing engine  by the calculation engine . In some cases, the results may not still be available in the in-memory computing engine due to, for example, a system restart. As the calculation scenarios are stored in the volatile memory (e.g., RAM) of the in-memory computing engine, when the system is shut down, the volatile memory is lost. Therefore, the calculation scenarios will also be lost. In various embodiments, MDAV compiler  is triggered to recreate the set of calculation scenarios  from the MDAV metadata . The first set of calculation scenarios (before the system was shut down) was also created by the MDAV compiler  from the MDAV metadata  during MDAV design time .","When the calculation scenarios  are recreated in the in-memory computing engine , the calculation engine  is notified. Thus, when the in-memory runtime  sends again a query to the calculation engine , the calculation engine  will retrieve the calculation scenarios , perform the required calculations on the operational data in the indices , and will return the results to the in-memory runtime . In this way, the methods and systems enable recreating a set of calculation scenarios in an in-memory database with a volatile storage with the purpose to derive application data, when the set of calculation scenarios no longer exist in the in-memory database. Further, there may not be needed to check in advance if the calculation scenarios  are available in the in-memory computing engine , as if they are not available, the system will automatically and dynamically recreate the calculation scenarios and redeploy them on the in-memory computing engine . The recreation and the redeployment of the calculation scenarios  is performed at runtime by invoking components such as MDAV compiler  that are part of MDAV design time .",{"@attributes":{"id":"p-0029","num":"0031"},"figref":"FIG. 3","b":"225"},"The calculation view describes an operation such as an aggregation or a join operation and references one or multiple other calculation views. Available calculation views include aggregation views describing an aggregation operation, union views describing a union operation, join views describing a join operation, and projection views describing a projection operation. Calculation views are generated based on calculation models. A calculation model can be presented as a data flow graph where data sources (e.g., MDAVs) can be defined as inputs and different operations (join, aggregation, projection, etc.) can be defined on top of the data sources for different data manipulations.","A calculation model, once submitted in the in-memory computing engine , can be access as a database view, thus making the calculation model a configurable calculation view. The calculation views are generated by the MDAV runtime  based on the calculation models. After an MDAV is changed (for example, via extensibility), the corresponding calculation view will be invalidated and then newly generated the next time the MDAV is executed. Therefore, the calculation view will include all the fields of the MDAV. Since a calculation view describes an operation such as an aggregation or a join operation and references one or more other calculation views, the output of the first calculation model can be consumed as input of the next calculation model. A calculation model can be defined in XML and passed to the in-memory computing engine .","Calculation scenario  is a graph showing an exemplary calculation scenario with different calculation views for a union MDAV named \u201ccrmoppu\u201d. Calculation scenario  includes aggregation calculation view  that references union calculation view . Union calculation view  includes aggregation calculation views  and . The aggregation calculation views are derived from the MDAV metadata. The aggregation calculation views  and  reference projection calculation views  and . The projection views are used for defining filters, selection callbacks, authorizations, and so on. The projection calculation views  and  reference joinDataSource views  and  that represent FSI views. A Fast Search Infrastructure (FSI) view is a special database view in the in-memory computing engine. It is an older artifact that corresponds to a normal database join view. The FSI view is a view on several physical tables\/indices that are connected via join operations. The projection calculation views  and  include all fields of the corresponding joinDataSource views  and . Calculation scenario  follows a calculation model, where the output of one node is referenced by another node in the model and serves as an input for that node. The input for a node has to reference other nodes in the calculation scenario by using the name of the referenced node in the name attribute. For example, aggregation calculation view  references projection calculation view  and includes that name of the projection calculation view , i.e. \u201ccrmopphb\u201d, in the name attribute of the aggregation calculation view .",{"@attributes":{"id":"p-0033","num":"0035"},"figref":"FIG. 4","b":["410","165","215","225","165","245","415","165","225","215","420","165","165","425","425"]},"If the error is due to a missing calculation scenario or a missing calculation view, then the process continues at block . A calculation scenario includes one or more calculation views, where each calculation view represents an operation such as a mathematical calculation. At block , the MDAV metadata is read from an intermediate buffer, where it should be stored. The intermediate buffer is located inside the MDAV compiler . At decision block , it is determined if the MDAV metadata  is available in the intermediate buffer, where it should be stored. If the MDAV metadata is available in the intermediate buffer, then the process continues at block . If the MDAV metadata is not available in the intermediate buffer, then the process continues at block . The MDAV metadata  is read from the metadata repository. At block , the MDAV compiler  is triggered and the MDAV metadata is compiled into a calculation scenario. The calculation scenario is created in form of an XML-based description. At block , the compiled calculation scenario is stored in the intermediate buffer. At block , the calculation scenario is dynamically deployed on the in-memory computing engine . The calculation views of a scenario are recreated and thus recreating the calculation scenario in the in-memory computing engine . After the redeployment process is finished, the query is executed again. The process is returned at block . A query is sent again to the in-memory computing engine .",{"@attributes":{"id":"p-0035","num":"0037"},"figref":"FIG. 5","b":["165","245","165","165"]},"At block , the in-memory computing engine  is queried for access to the multidimensional analytical data results. The query is sent to the calculation engine  of the in-memory computing engine . The calculation engine  performs data aggregation, calculations, and transformation by executing calculation scenarios . The calculation scenarios  are defined and created at design time. The calculation scenarios  are stored in the volatile memory of the in-memory computing engine .","At block , a response is received from the calculation engine  of the in-memory computing engine  that the data access to the multidimensional analytical data results is not successful. An error has occurred. At block , a response is received from the in-memory computing engine  that there are no calculation scenarios available for that query. The calculation scenarios  may be lost as a result from a system shut down, or system restart, or some other technical reason. At block , the MDAV compiler is dynamically triggered at runtime to recreate the lost calculation scenarios in the in-memory computing engine . At block , the MDAV compiler is triggered to read the MDAV metadata stored in an intermediate buffer in the MDAV compiler . At block , the read MDAV metadata is compiled into a calculation scenario. At block , calculation view metadata of the compiled calculation scenario is stored in the intermediate buffer. At block , the calculation scenarios generated from the calculation view metadata are deployed on the in-memory computing engine . Thus, the calculation scenarios  are dynamically recreated in the in-memory computing engine . At block , the in-memory computing engine  is queried for access to the multidimensional analytical data results again. Since the calculation scenarios  have been recreated and are available in the in-memory computing engine , the data access is successful and the multidimensional analytical data results can be calculated and accessed. At block , the multidimensional analytical data results are read.","In various embodiments, the methods and systems for dynamic recreation (e.g., via redeployment) of multidimensional analytical data enable storing calculation views in the volatile storage of the in-memory computing engine  and thus saving total cost of ownership (TCO). Further the methods and systems enable redeploying the calculation views from the application server in case they are lost. Error handling process is used of the standard query access to the in-memory computing engine to trigger the redeployment procedure. Finally, calculation views metadata is stored in an intermediate buffer on the application server to allow faster redeployment of the calculation views.","In some other embodiments, the calculation scenarios can be stored in a persistent memory such as a hard disk instead of in a volatile memory. However, the calculation scenarios do not include the data itself, the calculation scenarios represent operations, calculation processes, calculation rules. Thus, via the calculation scenarios no data is stored. Therefore, if the calculation scenarios have to be stored on a file system and on the hard disk of a system additionally to the raw data that means that all business applications should be able to store their individual calculation scenarios on the hard disk, which may lead to consuming too many resources of the system, such as disk space. In addition, maintaining that amount of stored calculation scenarios could lead to extra resources, slow performance when reading from the disk, maintenance errors, and so on.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer readable storage media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0042","num":"0044"},"figref":"FIG. 6","b":["600","600","605","655","600","640","655","610","615","610","615","605","615","600","625","630","600","625","630","600","635","600","650","650","600","645","600","620","660","660","660","650","660"]},"A data source  is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0011","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0018"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
