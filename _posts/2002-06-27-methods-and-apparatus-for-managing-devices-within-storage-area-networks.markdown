---
title: Methods and apparatus for managing devices within storage area networks
abstract: Mechanisms and techniques provide a management application providing an enterprise storage area network application programming interface for managing elements in a storage area network. The management application initializes a plurality of access wrappers that each defines operations for management of a respective class of elements operating within the storage area network. The management application provides, to a management client, connection data associated with a specific element associated with one of the plurality of access wrappers. The connection data identifies connection data parameters for performing management of the specific element in the storage area network. The management application receives at least one generic management command for the specific element. The generic management command includes at least a portion of the associated connection data for the specific element. The management application operates at least one access wrapper to translate the at least one generic management command into an operation of at least one vendor-specific command to manage the vendor specific element in the storage area network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07003527&OS=07003527&RS=07003527
owner: EMC Corporation
number: 07003527
owner_city: Hopkinton
owner_country: US
publication_date: 20020627
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION","EXAMPLE OF CONNECTION DATA"],"p":["The present invention generally relates to systems for managing devices within a storage area network, and more particularly, to a management application that incorporates an application programming interface for managing functional aspects of elements operating within a storage area network.","The rapid expansion of information service and data processing industries has resulted in a need for computer systems to manage and store large amounts of data. As an example, financial service businesses such as banks, mutual fund companies or the like often operate large and complex data processing systems that require access to many hundreds of gigabytes or even terabytes of data. Data storage system developers have responded to these types of data storage requirements by integrating large capacity data storage systems into networks called \u201cstorage networks\u201d or \u201cstorage area networks\u201d (SANs.) A storage area network is a collection of data storage systems that are networked with each other and with a number of computer systems that operate as servers to serve data stored in the data storage systems to end-user or host computer systems. In a typical implementation, a storage area network includes elements such as one or more connectivity devices, such as high speed data switches, that interconnect the various data storage systems to each other and to one or more of the server and host computer systems (servers and hosts) that require access to (e.g., read and\/or write) the data in the data storage systems. As the servers and hosts request access (e.g., read and\/or write) to the data, the data switches channel the data access requests (e.g., data read requests, data write requests) and responses between the computer system and the appropriate data storage systems within the storage area network. Other elements such as bridges and software applications may operate in the various devices to comprise a storage area network.","Typically, a network management station (i.e., a management computer system) also operates within a storage area network. Generally, a storage area network administrator operates the network management station to remotely manage and control the elements that form the storage area network such as the servers, data switches, and data storage systems. To do so, a conventional network management station operates various remote management software applications in order to remotely control, monitor, manage and configure the various operations (e.g., processes) performed by elements (e.g., devices and\/or software processes) operating in the storage area network. By way of example, a storage area network administrator can operate one management application provided form one vendor on the management station to remotely configure disks within a data storage system produced by that vendor. Another management application from another vendor can operate to control backup devices within the storage area network manufactured by that vendor. Still another conventional management application might allow a network manager to configure allocations of storage network resources (e.g., one or more data storage volumes) to specific hosts or groups of host computer systems (e.g., servers or other computer systems that require access to data in the storage network) using a technology called \u201czoning.\u201d Storage area network elements that a zoning management application came configure into zones include, among other things, disk partitions, volume configurations, and access control mechanisms within the data storage systems and the data switches. In this manner, a systems or network manager is able to remotely manage the various elements in a conventional storage area network using conventional management applications produced by various vendors.","Though management capability is a common characteristic in storage area network elements (e.g., data switches, data storage systems, host bus adapters and the like) made by different manufacturers or vendors, the commands and interfaces used to control management within a particular vendor's equipment are often specific to that vendor. As a specific example, commands used to control zoning within a data switch for use in storage area networks manufactured by a vendor such as IBM Corporation might differ from commands used to control zoning within a data switch for use in storage area networks manufactured by a vendor such as EMC Corporation. Other storage area network manufactures and vendors such as Brocade Communications Incorporated, Hitachi Data Systems, Inc., Mercury Computer Systems, Inc., and so forth might each provide a set of zoning control and configuration commands that differ from each other for devices manufactured by those respective vendors. These vendor specific management commands and operations are typically implemented within vendor supplied and vendor specific management software applications. Such conventional vendor-specific management applications cannot effectively control management in devices made by other vendors. This may be problematic if a customer desires to use storage network equipment made by different manufacturers within the same storage network.","Considering the zoning example presented above, if a customer uses a data switch from IBM and another data switch from Hitachi Data Systems in the same storage area network, various problems might arise when that customer attempts to configure zoning within each of these different data switches using the same zoning management application. Such attempts might not even be possible. Each data switch may require that a network manager perform zoning configuration and control using zoning commands designed and developed by the specific manufacturer of the switch, as implemented only within that manufacturer's storage network management software. As such, the network administrator might be required to operate two different storage network management software applications to control zoning in each switch. One storage network management application might be provided from IBM to provide proper control of zoning in the IBM data switch, and another storage network management application might be provided from Hitachi Data Systems to properly control zoning in the Hitachi data switch. This results in the network manager having to install two different management applications to essentially perform the same functionality, that being zoning control and management.","In addition, another problem presented by conventional storage area network management techniques and mechanisms is that each vendor-specific network management application might have a different user interface and each may operate quite differently from the other. Each management application might also require the customer to have knowledge of different operational procedures and may require separate payments of software licensing fees. Generally, overhead increases if a customer must install, maintain, learn and operate different storage area network management applications from different manufacturers in order to manage, configure and control different storage area network equipment installed in the same storage area network.","The present invention significantly overcomes these and other issues concerning the incompatibilities and difficulties encountered when a network administrator desires to use storage area networking equipment from different vendors or manufacturers in the same storage area network. More specifically, the present invention provides mechanisms and techniques that provide a management station which includes a management application that operates in application programming interface designed for universal management and control of elements (e.g., devices, programs, adapters, etc.) manufactured or provided from different vendors within a storage area network. As noted above, current conventional management techniques for storage area networks rely on a varied set of non-integrated vendor-specific tools to manage a heterogeneous enterprise-wide storage area network. Most conventional tools provide very different interfaces to control the various vendor-specific elements for which they are designed. In contrast, embodiments of the invention provide an enterprise storage area network management application containing a unified application programming interface implemented, for example, as a C library interface, that provides a set of uniform or generic management commands as function calls with a common management application programming interface. The function calls provided from management clients (e.g., graphical user interfaces driven management program) can be sent to the management application of embodiments of this invention, regardless of actual equipment vendor and type of elements installed within the storage area network. Embodiments of the invention provide generic functional interfaces for access by management clients in generic classes or functional areas of storage area network management including, but not limited to, discovery of vendor specific elements and functionality in a storage area network, performance and health monitoring of storage area network elements, storage device masking (e.g., volume and data storage system management), input-output path management, fault management, zoning control, simple network management protocol (SNMP) operations, switch management and data storage device backup management.","As a result of the architecture of embodiments of the present invention, management application functionality can be changed to add new generic interfaces as needed without effecting management client implementations. As a result, if a particular vendor desires to produce a management client which interoperates with a management application configured in accordance with embodiments of the invention, changes to the operation of underlying storage area network elements (e.g., an addition or change to the management interface) produced by the same or by different vendors can be incorporated into the management application configured in accordance with embodiments of the invention without modifying the management client. In other words, a vendor only needs to change the code of a management client when they are ready to do so to take advantage of new features. In addition, if a vendor supplies a new library for management of a previously existing and installed vendor element (e.g., device), embodiments of the invention do not require modification to the generic management calling interface to implement the changes (e.g., a bug fix) within the shared vendor-specific element library. Embodiments of the invention thus provide a backwards compatible storage area network application programming interface capable of managing multiple types of elements produced by multiple vendors and changes in management aspects of particular vendor elements within the storage area network are insulated from management clients. Accordingly, management clients produced from a particular vendor will not break (i.e., crash) upon new releases of management functionality associated with specific vendor elements.","In addition, due to the design and architecture of the application programming interface provided by the embodiments of the invention as explained herein, embodiments allow for the existence of \u201cunpublished\u201d interface functionality by not providing identifiers (e.g., handles, as will be explained) for hidden interfaces. In this manner, embodiments of the invention can provide alternative management techniques in a non-published or none-advertised format for access in a restricted manner for those applications (i.e., custom management programs) to be aware of such unpublished interfaces.","More specifically, embodiments of the invention provide mechanisms and techniques for managing components in a storage area network. The software architecture that provides the application programming interface within embodiments of the invention includes a plurality of functional components. Each functional component represents a class of management functionality related to a class or type of device or process that operates within a storage area networking environment. As an example, one embodiment of the invention provides separate functional components for zoning control, discovery of storage area network manageable elements, storage device masking, statistics collection and performance monitoring, and other tasks. Each functional component provides a set of generic functional interface calls that relate to the generic class of operations that may be performed for management of the class of elements (e.g., devices) corresponding to that functional component. As an example, the zoning functional components exports, for use by management clients, a set of generic zoning management and control commands that are not particular to any one vendor device but that generally control zoning operations such as the creation, modification and removal of zones within a storage area network.","One functional component, called the master functional component, implements a group of specialized management interfaces. These specialized management interfaces within the master functional component implement functionality for i) initialization of elements operating in the storage area network, ii) management of distribution of identities (i.e., handles) of various vendor-specific elements, and iii) management of required access control data, called connection data, which may be required by a management client to establish a connection between the management client and a particular element (e.g., device or software program) operating within the storage area network that is to be managed by that client.","In addition to the functional components, the architecture of embodiments of the invention provides a plurality of access wrapper components. Each access wrapper components generally operates as a translator to translate one or more of the generic management commands received by a particular functional component into vendor specific commands which are passed to vendor specific libraries in order to manage the specific element to which the generic management command is directed. In one example embodiment of the invention, the master functional component operates an initialization procedure which causes the access wrapper components to load and initialize any vendor specific access wrapper libraries (e.g., shared dynamically linked libraries provided with each vendor specific element in the storage area network). During the initialization process, the master functional component, through the use of a handle management interface and a connection data interface, can assign unique identities to the elements that correspond to each vendor specific access wrapper library that the access wrapper components detect and load. Thus, the master component instructs each access wrapper component to load any shared libraries for elements that that access component can manage. Once loaded, each elements assign a unique identifier (i.e., a handle) and the management client can thereafter request connection data required to establish a connection for management of that element. The master functional component can pass the connection data request to the appropriate access wrapper component which invokes the appropriate vendor specific access wrapper library function to retrieve and return connection data such as a username, password, network address or other information required for the management client to be able to connect with and manage the vendor specific element.","Upon receipt of connection data, the management client can establish a connection to the vendor specific element and can manage that element via generic management commands corresponding to functional interfaces provided by the functional components. Again, the functional component to which the generic management command is directed passes the call to any appropriate access wrapper component associated with management of the identified element. The access wrapper component translates the generic management function call into any required function calls for invocation of vendor-specific operations within the vendor specific access wrapper library which has be loaded and is responsible for managing the identified element. In this manner, the functional components and access wrapper components provide an insulated functional call interface (i.e., the functional component layer) and a translation layer interface (i.e., the access wrapper component) that can collectively convert the generic management commands into one or more vendor specific commands for management of elements within a storage area network.","Using the aforementioned software architecture of functional components, access wrapper components and corresponding vendor specific access wrapper libraries, according to one embodiment of the invention, one such technique for management of vendor specific elements comprises initializing a plurality of access wrappers. As noted above, each access wrapper defines operations for management of a respective class of elements operating within the storage area network. Once initialized, this embodiment of the invention can provide, to a management client, connection data associated with a specific element associated with one of the plurality of access wrappers. The connection data identifies connection data parameters (e.g., any required authentication information, plug-in information were network address information) for performing management of the specific element in the storage area network. The system then receives at least one generic management command for the specific element. The generic management command includes at least a portion of the associated connection data for the specific element. The generic management command corresponds to one or more of the functional interfaces provided by the functional components. The functional components forward the call to the appropriate access wrapper component(s) which operate to translate the generic management command(s) into an operation of at least one vendor-specific command within an access wrapper library. The vendor specific commands can include at least a portion of the associated connection data (e.g., for authentication of each command). This process allows the management client providing the generic management command to manage the vendor specific element in the storage area network without requiring intimate knowledge of the specific details of management of the vendor element.","The present invention also provides other embodiments which include a computer system configured to control management in a plurality of devices from different vendors in a storage area network. In such embodiments, the computer system comprises an input-output interface, a processor and a memory system coupled to the processor and to the input-output interface and the memory is encoded with instructions that form a multi-vendor management application. When the multi-vendor management application is performed on the processor (e.g., executes, interprets or is otherwise processed), it causes the computer system (i.e., a management station) to perform all of the operations disclosed herein as method embodiments (i.e., steps, operations) of the invention. That is, a computer system configured as a management station to perform all of the aforementioned methods via software control, or via hardware and\/or software configured to perform those methods and the techniques disclosed herein is also considered an embodiment of the invention.","Other embodiments of the invention that are disclosed herein include software programs to perform the operations summarized above and disclosed in detail below. More particularly, a computer program product is disclosed which has a computer-readable medium including computer program logic encoded thereon to provide the methods for controlling management within an element according to this invention and its associated operations. The computer program logic, when executed on at least one processor within a computing system, causes the processor to perform the operations or the embodiments described herein. This arrangement of the invention is typically provided as software on a computer readable medium such as an optical medium (e.g., CD-ROM), floppy or hard disk or other such medium such as firmware in one or more ROM or RAM or PROM chips or as an Application Specific Integrated Circuit (ASIC). The software or firmware or other such configurations can be installed onto a computer system to cause the computer system to perform the techniques explained herein as embodiments of the invention.","It is to be understood that the system of the invention can be embodied strictly as a software program, as software and hardware, or as hardware alone. Is also to be understood that the management application of this invention typically performs (e.g., executes, runs, or is otherwise operated) on a management station coupled to a data storage are network or other type of network. The management station may be a dedicated computer system, personal computer or workstation operated by a network or systems administrator or manager. In alternative arrangements, the management application of this invention may reside on a computer system located elsewhere on the network and the user (e.g., network manager) that provides the generic management control commands may be located elsewhere on the network and may be communicating with the management application using a management client over a network connection (e.g., WWW or other browser-type interface, command-line interface, messaging interface, E-Mail, or another protocol or interface). Moreover, the multi-vendor command data may be stored local to, or remotely located from the management station and may be any type of database, file, table or other storage mechanism that can store such data.","An example implementation of the invention that incorporates certain of the aforementioned embodiments is the Widesky software management architecture and management applications that use the Widesky system that are manufactured by EMC Corporation of Hopkinton, Mass.","The present invention provides techniques and mechanisms that allow a network manager (person responsible for management and control of computing systems and\/or other components) to operate a single storage area network management application to control, manage and configure different elements produced (i.e., manufactured) by different vendors that co-exist and operate together within the storage area network. In particular, the invention allows the network management application (e.g., software program) to control management of various storage area network elements (e.g., devices, programs, processes) such as hardware and software processes with switches, host bus adapters, hosts, servers, and data storage and backup systems that each require a different command set or a different application programming interface (API) for management or control.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","160","140","142","144","120","122","150","156","131","132","200","140","144","300"]},"The host  operates as a network management station and performs (e.g., executes, interprets or otherwise operates) a multi-vendor management application  that accesses multi-vendor management data  (e.g., a database). A network manager (i.e., a person)  operates the multi-vendor management application  within the network management station  to control and configure management within some or all of the elements , , , , , , , , ,  and\/or . In this example, the network manager  has operated the multi-vendor management application  to configure the storage area network  into three zones (zone-1, zone-2, zone-3). The zones are essentially groupings of ports within the switches ,  that identify other elements in the storage area network  as being part of the same zone or group for access control and data routing purposes. In this example, zone-1 includes the zone-1 hosts , the zone-1 server , and the zone-1 data storage systems , while zone-2 includes the zone-2 hosts , the zone-2 server , and the zone-2 data storage systems  and , while zone-3 includes the zone-3 host  (i.e., the network management station  in this example), the zone-3 server , and the zone-3 data storage systems .","Of particular importance to this discussion of example embodiments of the invention is that different vendors or manufacturers produce the various elements installed within this example storage area network , and that the single management application  manages this heterogeneous storage area network . In other words, the storage area network  is a composition or interconnection of various heterogeneous components that may each require control or operation (i.e., management) somewhat differently from each other, and these management tasks are centralized by the management application . By way of example, vendors A and B manufacture storage area network switches , , respectively. Each vendor-specific switch ,  may require the use of vendor-specific command set(s) or a vendor-specific application programming interface to control switch management (e.g., zoning, data path establishment, performance monitoring and\/or other switch control) with that switch. The management application  configured according to embodiments of invention is capable of providing management of each vendor-specific switch  and  without requiring the network manager  to having to learn separate individual management commands for each different vendors switch  and .","In contrast to this invention, in a conventional storage area network (not shown in here), each vendor provides a respective vendor specific network management application that includes an appropriate command set to control management of that vendor's elements within the storage area network . If a conventional storage area network were to use elements from multiple vendors, the network manager would be required to learn and operate multiple vendor-specific management applications (one for each different vendor) to manage each element since each different vendor element requires the use of vendor specific management and control commands (i.e., a vendor specific API). Using the switch example from above in an example of a conventional configuration (i.e., without the use of the multi-vendor management application  of this invention), the network manager  would be required to install switch management software onto the management station  for both vendor-A and vendor-B. Conversely, the multi-vendor management application  configured according to embodiments of this invention allows the network manager  to control and configure all elements in the storage area network  including the switches  and , irrespective of which vendor produces or provides such elements.","Embodiments of the invention thus allow a network designer (e.g., network manager ) to design a storage area network using elements such as data storage systems, servers, hosts, adapters, switches and remotely manageable software processes obtained from different vendors without regard to maintaining separate management applications. In particular, the network manager  may initially create a storage area network using, for example, a data storage switch or other element from vendor-A (e.g., switch ), and then, at a later time may decide to purchase a data storage element from another vendor (e.g., vendor-B data storage switch(s) ) and incorporate these diverse vendor elements into the same storage area network. The inventions thus significantly avoid problems a network manager may encounter including having to install, maintain, pay for and learn how to operate separate network management applications to administer elements from different vendors.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 2","FIG. 1"],"b":["300","300","305","310","320","330","340","350","100","300"]},"The management client  generally provides a management interface  such as a graphical user interface (e.g., web based or windows interface) that a network manager  (i.e., person responsible for managing a storage area network) can use to input or select generic management commands . The generic management commands  convey storage area network management and control operations to be carried out within particular vendor specific elements  (e.g., elements , , , , , , , , ,  and\/or  as illustrated in the example in ) operating within the storage area network .","The base component  links together, either statically or dynamically, the various functional components  and provides concurrency protection for the functional components . The functional components  (i.e.,  through ) implement and provide a number of management interfaces  that collectively operate as an enterprise storage are network application programming interface (ESNAPI) and provide the respective generic management commands . The base component  exports  these functional interfaces  to the management client  which may, under control of the network manager  via the interface , chose to operate one or more of the generic management commands  via calls  from the management client  to the generic management command interfaces  that the functional components  provide. The functional components  thus represent \u201cbuckets of functionality\u201d and provide an enterprise storage network application programming interface that implements the collection of generic management commands  via the functional management interfaces . Each functional component  implements a collection of related generic management commands for a type of class of elements .","In this example, the functional components  include a master functional component , a discovery functional component , a statistics functional component , a zoning functional component , a storage device masking functional component  and other functional components - through -N (as needed). The functional components  thus provide a functional application programming interface for the management client  by providing management interfaces  for respective generic management commands .","The master functional component , as will be explained in more detail, implements functional interfaces for initialization and management of the other functional components  and the access wrapper components . The discovery functional component  and its interface allow a management client  to perform discovery operations of elements  within the storage area network . This allows the management client  to determine what managed object elements  exist within the storage area network  and how they are interconnected. The statistics functional component  provides interfaces for performance monitoring and statistics collection regarding operation of the vendor specific elements . The zoning functional component  manages zoning operations of the elements . The storage device masking functional component  provides access control for storage devices within the storage area network . In an enterprise wide storage area network, multiple server computer systems may share a common storage port on a switch and may thereby have access to all devices exported on the port. Accordingly, storage device masking provides storage access control on a logic volume basis that can be enforced at the server, or within the data storage system, or within an intermediate component such as a vendor switch.","Generally, in operation, the functional components  receive the generic management command calls (via user selection at location ) via the generic management interfaces  and map or route the management interface calls , based on the identity of the element to be managed (i.e., as specified by the management client  when making the call to the functional interface ), to one or more access wrapper interfaces  that the access wrapper components  provide.","The access wrapper components  include, in this example, a simple network management protocol (SNMP) access wrapper component , a host bus adapter (HBA) access wrapper component , a switch access wrapper component , a fiber optic switch (F.O.S.) access wrapper component , a storage management access wrapper component , a storage access wrapper component  and other access wrapper components , as may be required to manage vendor specific elements . Generally, the access wrapper components  understand and interpret vendor specific application programming interfaces  provided by respective vendor specific access wrapper libraries . Accordingly, a set of one or more vendor specific access wrapper libraries  ( through  in this example) corresponds to each access wrapper component . As an example, a set of switch libraries  is associated with the switch wrapper access component  and is used for managing storage area network data switches, whereas operation of a fiber optic storage area network switch is handled by the fiber optic switch access wrapper component  and is performed using the fiber optic switch libraries .","Manufacturers provide the access wrapper libraries  at the time of purchase or installation of the various vendor specific elements  that operate within the storage area network . According to embodiments of the invention, the access wrappers  contain translation functions that map one or more of the generic management interfaces  (i.e., generic management commands) which the receive at the access wrapper interfaces  into an appropriate set of one or more vendor-specific commands  implemented within one or more respective vendor specific libraries  to control and mange  one or more vendor-specific elements .","As an example of the operation of the architecture illustrated in , embodiments of the invention provide a zoning functional component  that provides interfaces  for a suite of generic zoning management commands that management clients  may access (i.e., may call). If a storage area network is configured with two storage area network data switches (e.g., SAN switches , ) manufactured by two different switch vendors, embodiments of the invention provide a switch access wrapper component  that is capable of accessing (i.e., loading) the respective vendor-specific switch management libraries - and - (e.g., dynamically linked libraries provided by the respective vendors A and B of the data switches) in order to provide management capability of the two different switches from the vendors A and B in response to receiving a single generic zoning management command . In other words, the zoning functional component  in this example provides a set of generic application programming interfaces  that support general zoning management operations no matter which particular vendor switch is being controlled and no matter what type of switch (e.g., fiber optic, Ethernet, Fibre channel, etc.). The zoning functional component  causes the switch access wrapper  to load the appropriate switch libraries  corresponding to switch vendors A and B and then to translate the generic zoning management command  received via interface  (at the zoning functional component ) and  (at the switch access wrapper library ) into the appropriate vendor-specific zoning command(s)  depending upon which vendor-specific switch ,  the zoning commands are directed towards. Note that if the identity of multiple switch elements are contained in a generic management command functional interface calls  (e.g., create a new zone into different switches), and one switch contained an identity of the element corresponding to a fiber optic switch while another element identity corresponds to, for example, an Ethernet switch, the zoning functional component  invokes operation of both the fiber optic access wrapper component  (for translation of the generic management interface calls  into one or more interface calls  to the appropriate fiber optic switch library  to control the vendor specific fiber optic switch), and would also invoke operation of the switch access wrapper component  for invocation of appropriate vendor specific commands to carry out the same zone creation operation within the appropriate Ethernet switch.","As will be explained more detail, upon beginning operation, the master functional component  coordinates initialization and identity assignment and management of the functional components  as well as the access wrapper components . Through operation of a master component , the management client  is able to trigger the access wrapper components  to initialize (i.e., load) the appropriate access wrapper libraries . During this process, the access wrapper components  are able to query the master component  for the identity of elements  operating within the storage area network  as they are initialized.","The master component  also provides a unique \u201cconnection data\u201d interface that allows management clients  to obtain any necessary connection data group information such as usernames, passwords, network addresses or other element access or authentication information required to control the vendor-specific elements  operating within the storage area network . The management client  can thus obtain a connection data group for a specific vendor element, and can thereafter invoke the generic management interface  by specifying an identity of an element  and any required connection data necessary for access to that element .","In addition, the master component  implements a unique handle management interface that manages assignment of unique identifiers or handles to interfaces and elements  under management control of the management application . In this manner, a management client  can query the master functional component  for the unique identity of elements  operating in the storage area network  and does not need to be concerned with overlapping names of elements . Embodiments of the invention thus ensure a unique namespace within the storage area network  regardless of which vendor devices operate therein and without placing unique naming responsibility within the management clients . Accordingly, multiple management clients  operating on the same or different management stations  can access the management application  providing the functional application programming interfaces  as explained herein without conflicting namespace issues arising.","Once a management client  is aware of which elements  are available for management, the management client  can further query the master component  provided by embodiments of the invention in order to identify the specific management interfaces  available for control and management of the identified elements. Thereafter, specific calls  to the management interfaces are received by the respective functional components  and are mapped to the proper access wrapper components  that then translate the generic management command calls  into the vendor-specific commands  for invocation within the vendor specific elements . Note that a single generic management command calls  may be directed, by a functional component , to calls  to multiple access wrapper components  (i.e., may be converted into multiple access wrapper interface calls ) depending upon the identity can elements specified to be managed by the generic management command. In this manner, a management client  is insulated from the details of operation of managing specific vendor elements . That is, the management client  does not need to be concerned with what particular vendor manufactures an element, nor does the code within the management client  need to be configured with (i.e., programmed for) any vendor-specific commands to control management operations within the elements .",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 3","FIG. 3"],"b":"300"},"In step , the management application  initializes a plurality of access wrappers . Each access wrapper  defines operations for management of a respective class of elements operating within a storage area network . Initialization of the access wrappers  may include dynamically loading the access wrappers as needed or may include, reading configuration file associated with the management application  to determine which access wrappers  are to be initialized.","Next, in step , the management application  provides, to the management client , connection data associated with a specific element  that is associated with one of the plurality of access wrappers . As briefly noted above and as will be explained in more detail, connection data (i.e., a connection data group for a specific element ) identifies connection parameters such as usernames, passwords or other access control information that may be required for performing management of the vendor-specific element  in the storage area network.","In step , the management application  receives at least one generic management command for the vendor specific element . The generic management command (one or more) includes the associated connection data (or at least a portion thereof) for the specific element .","In step , the management application  translates the generic management command(s) (e.g., translates a functional interface call  in ) into an operation of at least one vendor specific command (e.g., ) that includes at least a portion of the connection data in order to manage  the vendor-specific element  in the storage area network .","In this manner, embodiments of the invention operate to initialize the access wrapper components  and the associated vendor specific libraries . Once initialized, mechanisms operate to provide necessary connection data to the management client . The management client  can then provide generic management commands that are translated into vendor-specific commands for operations within the vendor specific elements .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 5"],"b":["321","321","360","370","321","362","360","330","300","321","330","330","362","362","330"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5","b":"300"},"In step , the master functional component  receives a common interface call from a management client . This causes activation of the initialization process.","In step , in response to receiving a common interface call, the master functional component  returns the default interface handle to the management client . The default interface handle identifies a default interface associated with the master functional component .","Next, in step  and as illustrated at location  in , the master functional component  receives a default interface call (). The default interface call indicates to the master functional component  and initialization is to be performed.","In step  and as illustrated at location  in , the master functional component  causes the access wrapper components  to load a respective access wrapper library  (one or more) for each of the plurality of access wrappers . Each access wrapper library  defines a set of vendor-specific interfaces  operable by vendor-specific commands for management of vendor-specific elements  defined within the respective class of components associated with the access wrapper  for that access wrapper library . In other words, in step , the master functional component  configures the access wrappers  to load their corresponding vendor specific libraries  for use in management of vendor specific elements .","Steps  and  illustrate two ways in which the master functional component  can determine which respective access rather libraries  to load.","In step , in one configuration, the master functional component  can read an access wrapper configuration (e.g., a file) that identifies a predetermined plurality of access wrappers  for which respective access wrapper libraries  are loaded.","In an alternative configuration as illustrated in step , the master functional component  can dynamically determine which respective access wrapper libraries  to load based upon vendor-specific elements  that are dynamically accessible through the storage area network  as requirements to manage such elements arise. In this manner, the master functional component  can either statically or dynamically determined which access wrappers  will be used during management of elements  in the storage area network  in order to load the appropriate vendor specific access wrapper libraries  for use during management operations.","Next, in step  the management application  establishes an interface handle to each access wrapper library . Details of operation of establishing a handle for each access wrapper library  will be explained next respect to the flow chart of processing steps illustrated in . Generally however, the handle management interface  is internal to the management application  and serves to primary functions. The first is to normalize identities of interfaces discovered and utilized within the management application . Such identities are in the form of handle numbers returned from access wrappers  as will be explained. A second function associated with the handle management interface  is to maintain a list of which access wrappers  generated which interface handles so that other functional components  can request default interface pointers to particular access wrappers  by using the appropriate handle. In other words, the handle management interface  allows access wrappers  to provide a handle identity in the form of the handle registration request  which the handle management interface  normalizes to ensure its uniqueness. The handle management interface  then provides (i.e., passes) each interface handle  back to the requesting access wrapper  and records the unique interface handle in conjunction with the default interface pointer of the access wrapper within a handle map  for future use by other components within the management application . The flow chart of processing steps in  illustrates details of handle management.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 6","b":["300","340"]},"In step , the handle management interface  provides, to the common interface , a pointer  () to the handle management interface within the master functional component . As the common interface  initializes each respective access wrapper component  causing each of the access wrappers  to load the access wrapper libraries , the common interface  provides the handle management interface pointer  to each access wrapper library  in the load library request . This allows the access wrappers  to provide a handle registration request  to the handle management interface  for receipt of a unique handle.","In step , the handle management interface  receives a handle registration request call  from an access wrapper library . The handle registration request call identifies a default interface associated with an access wrapper library  that the access wrapper  has just loaded.","In step , the handle management interface  generates the unique interface handle corresponding to the access wrapper library  identified in the handle registration request  ().","Next, in step , the handle management interface  maintains an association (e.g., within the handle map ) between interface handles generated and the default interface for each access wrapper library  loaded. In this manner, the handle management interface  operating within the master functional component  causes each access wrapper library  to have a unique handle or identity associated with its default interface. This default interface to handle identity information is stored within the handle map  for use when other components within the management application  require access to operations within the access wrapper libraries .","Returning attention now back to the flow chart of processing steps illustrated in , after the processing of step  is complete, the handle map  contains a listing of the default interface pointers for each access wrapper library  that each access wrapper  has initialized (i.e., has loaded into memory within the management station ).","Next, in step , the master functional component  maintains the association within the handle map  between interface handle and a default interface pointer for each access wrapper library  for access by other functional components . In other words, in step , the master functional component  makes the handle map  available for use during subsequent operation of the management application.","Accordingly, from the aforementioned processing explained with respect to the steps in , the master functional component  performs initialization of the access wrapper libraries and determines which access wrapper components  exist and, for each, causes the access wrapper components  to load any vendor libraries  that may be required for management of vendor specific elements . At this point in processing, the management client  has activated the default interface of the master functional component  but it is not yet aware of what storage area network elements  can be managed. In order to determine what elements  can be managed, the management client  performs the processing operations illustrated in  and explained in detail with respect to the processing steps shown in the flow chart in .",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 7","b":["380","321","380","305","305","380","305","350","100","100","300","350","350"]},"Making a connection to one vendor element  may be as simple as correctly addressing the element for communication within the storage area network . In contrast, another vendor-specific element  may require some user defined data such as a login name and\/or password in order to connect to and manage that element. The connection data interface  operating within the master functional component  provides the interface to pass connection data group information from the vendor specific libraries , through the access wrapper components , for presentation to the management client . A connection data group  describes a collection of information that the management application  requires to properly connect to a specific type of vendor element  them. A connection data group  can include both a description of its purpose, as well as a collection of entries containing pieces of information such as usernames, IP addresses, passwords and the like required to connect to an element . Accordingly, each vendor element  includes a respective connection data group .","As an example, a connection data group  for a data switch  operating within the storage area network  may appear as follows:\n\n","After initialization of the access wrappers  and associated vendor specific access wrapper libraries  is complete (as explained above with respect to ), the management client  is now aware of the particular storage area network elements  that can be managed. Accordingly, using the connection data interface  illustrated in  in conjunction with the processing steps illustrated in , the management client can find out what elements  can be managed by getting the corresponding connection data groups  that are available (i.e., that are associated with the elements ). To obtain the connection data groups , generally, the management client  requests this information from the connection data interface  which calls or queries each access component  and collects the connection data results in the connection data groups database  and returns this information as connection data  to the management client . That is, the connection data interface  retrieves connection data groups from the access wrapper components  in a secure manner upon loading the respective vendor specific access wrapper library  for management of an element  to which this connection data group corresponds. This connection data group is also returned at location  to the management client  as illustrated in . Specifics of the connection data processing will now be explained with respect to the flow chart of processing steps illustrated in .",{"@attributes":{"id":"p-0080","num":"0082"},"figref":"FIG. 8","b":["300","380"]},"In step , the connection data interface  operating within the master functional component  receives a connection data query request  () from the management client . The connection data query request  can be a simple request generically asking for connection data or, in an alternative embodiment of the invention, can include hint information that specifies, for example, a specific vendor (i.e., a specific device manufacturer) for which connection data is to be retrieved or can specify a specific type of element  for which connection data is to be retrieved.","Next, in step , the connection data interface  processes the connection data query request  in relation to the plurality of access wrappers  to determine connection data corresponding to any elements  in the storage area network  that are associated with the access wrappers  and that match the connection data query request . In one example embodiment, steps  through  (explained below) carry out the general processing of step .","In step , the connection data interface  determines a set of access wrappers  that define operations for management of a class of elements that match the connection data query request . Step  shows an example of details of processing performed in step  according to one embodiment of the invention.","In step , the connection data interface  compares hint information included within the connection data query request  to at least one access wrapper attribute for each access wrapper  of the plurality of access wrappers (i.e., for each access wrapper loaded during the initialization processing) to determine a set of matching access wrappers  that match the connection data query . In other words, in steps  and , the connection data interface  can receive hint information within the connection data query  and can compare this to access wrapper component attributes to determine which access wrappers  control shared vendor specific access wrapper libraries  for particular elements  that match the connection data query .","Next, in step , the connection data interface  queries the matching set of access wrappers  (determined in step ) to retrieve connection data results  () associated with each element  corresponding to (i.e., under control of) that access wrapper  that corresponds with the connection data query request . As illustrated in detail in processing step , the connection data interface  can provide a library connection data query  that provides hint information to be passed to a connection data interface provided within each access wrapper  to determine the matching set of elements  associated with that access wrapper  that matches the hint information. In this manner, if an access wrapper  such as a switch access wrapper component  receives hint information that indicates connection data is to be retrieved for a certain switch manufacturer only, or a certain switch type, the switch access component  can query the appropriate switch libraries  for those particular vendors (i.e., based on hint information) in order to retrieve and return the appropriate library connection data results  back to the connection data interface  as illustrated in  for all matching switch libraries .","Next, in step , the connection data interface  maintains a connection data set (i.e., a set of connection data groups ) for all retrieved connection data. Each connection data group maps the retrieved connection data (e.g., a connection data group for a specific element ) from each element to an identity (e.g., the unique handle assigned during initialization) for that element. In other words, in step , the connection data interface  maintains a mapping between the connection data group for each element  and a handle or other unique identity for that element . After the processing of steps  through  is complete, connection data processing proceeds to step .","In step , the connection data interface  provides or returns, to the management client , the connection data group  for elements  that match the connection data query request .","At this point in processing, the management client  is now aware of what elements  can be managed with the management application , but does not yet have a specific connection to any particular element . Accordingly, the next phase of processing will be explained with respect to  to illustrate how an example embodiment of the invention can allow the management client  to connect to one or more vendor specific elements and to obtain (i.e., discover) the functional interfaces  that are available for management of that element.",{"@attributes":{"id":"p-0089","num":"0091"},"figref":["FIG. 9","FIG. 9","FIG. 10"],"b":["300","305","350","100","350"]},{"@attributes":{"id":"p-0090","num":"0092"},"figref":"FIG. 10","b":["300","305","350","350"]},"In step , the management application  allows the management client  to connect to one or more of the vendor specific elements . Details of this processing are illustrated by processing steps  through  which illustrate one example embodiment of this processing.","In step , the common interface  operating within the master functional component  receives, from the management client , an element connect request  () containing data parameters from a connection data group  that are required to address and communicate with the vendor specific element . As noted above, the connection data may include address, user name and\/or password information or any other information required to connect to a specific element  within the storage area network .","In step , the common interface  routes the element connect request  to an appropriate access wrapper component  associated with the identified vendor specific element  (identified by a connection data group identification or handle) in order to communicate the element connect request  to the appropriate vendor specific library  in order to connect to that element  associated with that library . In other words, in step , the common interface  forwards the element connect request  for receipt as call  by an access wrapper  which then routes the appropriate connect request including any required connection data to the vendor specific library  associated with the element  for which the connection data matches (e.g., based upon a connection data group identification or other information uniquely identifying the element ). The element  uses the connection data to authenticate and authorize the connection and returns a \u201csuccess\u201d response to the access wrapper component  that invoked the operation of the shared library  (i.e., that made a connect call -) for that element .","Next, in step , the common interface  receives an element handle  () from the access wrapper  associated with the vendor specific element  to which the connection was made in step . The element handle received in step  can be compared to the handle map database  and the connection data groups  in order to confirm that the element  is now connected to the management client .","Next, in step , the common interface  provides, to the management client , the element handle  associated with the access wrapper library  that corresponds to the vendor specific element  to which that management client  directed the element connect request . The element handle  returned to the management client  allows the management client  to manage the vendor specific element  using subsequent functional interface calls containing the element handle . That is, functional interface call processing, which will be explained shortly in , use the element handle  to direct the generic management functions  () from the functional components  to the proper access wrapper components  based on element identities.","Via the processing of steps , the management client  uses connection data group information containing the identity of specific elements  in order to forward a connection request to those elements and in response, receives a handle if the connection was successful. At this point in processing, the management client now has access to specific references (i.e., handles) to storage area network elements  but is not yet aware of what generic functional interfaces  are allowed for management of those elements . This operation is explained next with respect to the processing illustrated in the flow chart in  beginning in step .","In step  in , the management client  obtains a list of functional interfaces for the vendor element  to which the connection was made in step . The details of the processing step  according to one embodiment of the invention are shown in processing steps  and .","In step , the base component  receives, from the management client , a functional interface request . The functional interface request call  contains the element handle  identifying a vendor specific element  for which functional interfaces are requested.","Next, in step , the master functional component  operating within the base component  returns a functional interface list  (i.e., a list of possible generic management command interfaces  that may be performed upon the vendor specific element ) that can be used to carry out management operations associated with the vendor specific element  identified by the element handle .","In this manner, the processing illustrated in  allows the management client  to use the connection data to first form a connection to the vendor specific element and then allows the management client  to query the base component  to obtain a functional interface list  identifying management function calls  that the management client  can make to perform management of the element  identified by the element handle . The base component  may retrieve these interfaces via a configuration file in a predetermined manner (e.g., per functional component ) or, alternatively, can query the access components  during the initialization process explained above in order to compile a list of functional interfaces of each access component  during their initialization sequence. At this point in processing, the management client  is now aware of the various functional interfaces provided by the functional components . Note that the management client  does not need to be aware of any vendor-specific functional interfaces provided by the shared vendor libraries  which carry out the actual management operations on the vendor specific elements .",{"@attributes":{"id":"p-0101","num":"0103"},"figref":["FIG. 11","FIG. 11","FIG. 12"],"b":["300","638","305","330","340","350","100"]},{"@attributes":{"id":"p-0102","num":"0104"},"figref":"FIG. 12","b":["300","638","350","100"]},"In step , a functional component  (e.g., one of the functional components  through ) receives a functional interface call  (i.e., the generic management command) from the management client . The functional interface call  contains an element handle corresponding to at least one vendor specific element . In other words, in step , the management client  places a functional interface call  to one of the interfaces exposed by the functional component . As explained above, each functional interface provided by the various functional components  corresponds to a generic management command that defines one or more management operations to be applied to an element  operating within the storage area network . As an example, the functional interface call  may be directed to the statistics functional component  and may specify that statistics for performance monitoring information should be gathered from a particular data storage system  to  () and sent to the management client . The management client  provides, within the functional interface call, a handle identity corresponding to the particular data storage system or systems (i.e., an element handle) from which the statistical information should be collected. In addition, the functional interface call  can include portions of a connection data group  in situations where each command provided to a vendor specific element  requires some sort of authentication information to complete. In an alternative configuration, the processing previously discussed with respect to establishing a connection to the element (i.e., processing steps  to  in ) establishes an authenticated connection to the element once and thereafter, no further connection data information is required for subsequent functional interface calls to generic management commands . Once a functional component  receives a functional interface call  containing an element handle corresponding to a vendor specific element , the access component performs the processing shown in step .","In step , the access component that received the functional interface call  provides a handle lookup query  to the handle management interface  operating within the master functional component . The handle lookup query  contains the element handle from within the functional interface call . The functional component  provides the handle lookup query  to the handle management interface  in order to obtain an access wrapper interface pointer  to the access wrapper component  responsible for management of the vendor specific element  to which the element handle corresponds. In other words, the generic management command specified in the functional interface call  can contain an element handle of an element  and the functional component  that received this call can access the handle management interface  in order to obtain an interface pointer to an interface within an access wrapper  that has loaded the appropriate vendor specific libraries  in order to manage and control the vendor specific element  corresponding to that element handle.","Next, in step , the functional component  receives, from the handle management interface , an access wrapper library interface pointer  to an appropriate access wrapper  that matches the element handle. Recall that during the initialization process, the handle management interface  developed the handle map database  in order to maintain a list of access component interfaces for the access components  for each of their respective shared vendor specific libraries . In this manner, the handle management interface  can provide, for example, an access wrapper interface pointer  point to the appropriate management interface of the particular access wrapper component  for a function within one of the vendor specific libraries  that manages the element  corresponding to the element handle received in the functional interface call .","Next, in step , the access component  provides a call  to invoke operation of the access wrapper library  (i.e., by calling the interface of the appropriate access rubber ) using the functional interface call to manage the vendor specific element . In this manner, generic functional interface calls  or translated to specific access wrapper function calls  within the access components  for translation into an appropriate said a function calls  to the vendor specific libraries . The functional components  thus receive functional interface call requests  in the management client  and performed a lookup of the element handle using the handle management interface  in order to obtain an interface pointer to the appropriate access component . The processing of steps  through  are repeated for each functional interface call  received by each functional component . This process continuously repeats over and over as the process of managing the element  continues.","According to the aforementioned description of processing, embodiments of the invention are capable of providing a uniform and generic management interface to management clients  while insulating those clients from the details of managing specific vendor elements . This avoids the management clients  from having to interface directly with the vendor specific libraries  for invocation of the required vendor specific commands for management of the vendor specific elements .","Those skilled in the art will understand that there can be many variations made to the operations of the embodiments of the invention explained above while still achieving the same objectives of the invention. As an example, slight changes to the order of the processing steps explained above in the processing flow charts can be made while still achieving the same overall effect of the processing. Those skilled in the art of developing software applications should understand that such variations covered by the scope of this invention. As such, the foregoing description of embodiments of the invention is not intended to be limiting. Rather, any limitations to embodiments of the invention are presented in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, with emphasis instead being placed upon illustrating the embodiments, principles and concepts of the invention.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
