---
title: Graphics processing system with power-gating control function, power-gating control method, and computer program products thereof
abstract: The invention relates to a power-gating control method for a graphics processing unit having a unified shader unit, which includes a plurality of shaders. The method includes the steps of: rendering a plurality of previous frames; calculating a first number of active shaders for rendering each previous frame, and a corresponding frame rate of each previous frame; determining a second number of active shaders for rendering a next frame immediately following the previous frame according to the first number of active shaders and the corresponding frame rate of each previous frame; and activating corresponding shaders through one or more power-gating control elements according to the second number of active shaders.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08570332&OS=08570332&RS=08570332
owner: Institute for Information Industry
number: 08570332
owner_city: Taipei
owner_country: TW
publication_date: 20090929
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority of Taiwan Patent Application No. 098117266, filed on May 25, 2009, the entire contents of which are incorporated by reference herein.","1. Field","The disclosed embodiments relates to the graphics processing, and more particularly to a graphics processing system with power-gating control function and a power-gating control method thereof, for dynamically predicting the required number of active shaders according to frame rate variations.","2. Description of the Related Art","Generally, graphics application programs involve complex and highly detailed graphics renderings, such as three-dimensional (3D) graphics. To meet current graphic program demands, graphics processing units (GPUs) have become an integral component of personal computers or portable devices to handle substantial amounts of computations for displaying various objects, thereby resulting in high power consumption or dissipation. Further, because power consumption is a major concern for battery-powered portable devices, such as mobile phones, it is necessary to reduce total power consumption induced by graphics processing units of mobile phones.","Power dissipation of electronic components typically comprises: dynamic power dissipation induced by voltage sources and operating frequencies; and static power dissipation caused by current leakage. Given the current state of semiconductor processing technologies, power dissipation from current leakage is a problem. For example, current leakage has exceeded 40% or more of the total power dissipation for semiconductor products fabricated using 65 nm process technologies.","Typically, clock-gating control techniques or dynamic voltage and frequency (DVFS) techniques are used to save power. Both are effective in decreasing dynamic power dissipation, but leakage power dissipation still remains, or may only be partially reduced. According to other conventional methods, such as power-gating control techniques, power-gating control elements are arranged over an entire graphics processing unit and the power supplied to the entire graphics processing unit is correspondingly controlled via the power-gating control elements. However, such a method lacks design flexibility. Additionally, power-gating control elements may be arranged inside of each component. When one component is idle, the power supplied thereto is turned off via a corresponding power-gating control element, so as to simultaneously reduce dynamic and static power loss. However, such a power-gating control mechanism requires an extra control circuit for turning on\/off the power supplied to each component, which must consume power. In addition, the execution of the power-gating control function introduces a significant time overhead for resuming the power supplied to each component, thereby forming the power-gating control mechanism inefficient and time-consuming.","Therefore, it is desired to provide a graphics processing unit with improved power-gating control techniques that facilitates power saving based on the demands for different graphics application programs.","An embodiment of a graphics processing system with power-gating control function is provided. The graphics processing system includes a graphics processing unit and a driver. The graphics processing unit includes a unified shader unit and one or more power-gating control elements. The unified shader unit includes a plurality of shaders. The shaders are used for rendering a plurality of previous frames. The one or more power-gating control elements are coupled to the shaders. The driver is coupled to the graphics processing unit for calculating a first number of active shaders for rendering each previous frame and a corresponding frame rate of each previous frame, and determining a second number of active shaders for rendering a next frame immediately following the previous frames according to the first number of active shaders and the corresponding frame rate of each previous frame. The one or more power-gating control elements activate corresponding shaders according to the second number of active shaders.","In addition, an embodiment of a power-gating control method for a graphics processing unit is provided. The graphics processing unit includes a unified shader unit, which includes a plurality of shaders. The method includes the steps of: rendering a plurality of previous frames; calculating a first number of active shaders for rendering each previous frame, and a corresponding frame rate of each previous frame; determining a second number of active shaders for rendering a next frame immediately following the previous frames according to the first number of active shaders and the corresponding frame rate of each previous frame; and activating corresponding shaders through one or more power-gating control elements according to the second number of active shaders.","The power-gating control method may take the form of a programming code. When the programming code is loaded into and executed by a machine, the machine becomes an apparatus for practicing the disclosed embodiments.","A detailed description is given in the following embodiments with reference to the accompanying drawings.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},"According to the embodiment of , a power-gating control circuit is arranged into a graphics processing unit , thereby forming the graphics processing unit  with power-gating control function. Further, prior to rendering a frame, the graphics processing unit  determines a frame rate (i.e., a frame rate per second, FPS) of the frame through a driver , for indicating a loading for rendering the frame. Then, based on the loading for rendering the frame, the drive  controls power-on and power-off of the associated function components within the graphics processing unit . The entire power consumption of the graphics processing unit  is improved without affecting user experience and rendering performance (such as smooth representation of frames).","More specifically, when the graphics processing unit  completes the operation for rendering a frame in an embodiment, the drive  calculates the corresponding frame rate of the frame for determining a frame rate of a next frame (as indicated by an arrow ). Next, before the graphics processing unit  proceeds the operation for rendering the next frame, the driver  controls the graphics processing unit  according to the frame rate of the next frame, such as setting the power-on and power-off of the associated function components (as indicated by an arrow ),","In other embodiments, the frame rate of the next frame may be determined on the basis of frame rates corresponding to a plurality of previous frames.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":"202"},"Referring to , the graphics processing unit  comprises a unified shader unit , which is a multi-processor capable of processing several instructions in a single clock. The unified shader unit  comprises a plurality of shaders (i.e., shader processors or shader cores), such as A, B, C, and etc. Each shader may be of a vector and scalar structure, or a multiple scalar with very long instruction word (VLIW) structure, as well as corresponding register files and instruction cache memories. Moreover, each shader executes various shader programs, such as the operations of a vertex shader and a pixel shader, so as to render each frame. Additionally, the graphics processing unit  further comprises fixed-function geometry stages , fixed-function fragment stages , an arbitrator , and a command processor .","Specifically, the fixed-function geometry stages  comprise a clipper , a primitive assembly unit , and a streamer . In the pipelined stages , the streamer  receives vertex information of a 3D object and transmits the information to the shaders. Then, the shaders A, B, and C execute the corresponding shader programs for determining attributes of vertex information of the 3D object, so as to transform the 3D object into a frame displayed on a screen. Following, the primitive assembly unit  performs geometry assembly for grouping vertices into polygons, such triangles. The clipper  culls triangles outside visible zones.","Further, the fixed-function fragment stages  comprise a triangle setup unit , a fragment generation unit , a hierarchical Z unit , a Z\/stencil test unit , an interpolator , and a rendering unit . In the pipelined stages , the triangle setup unit  performs face-culling operations for dropping invisible triangles and calculating edge equations of the triangles. The fragment generation unit  provides fragment generation of triangles for calculating pixels for display. The hierarchical Z unit  is alternatively arranged into the fixed-function fragment stages  for removing fragments outside the triangles or visible zones, as well as allowing a block removal of fragments. The Z\/stencil test unit  determines and removes invisible fragments by use of Z buffers and stencil buffers. The interpolator  generates fragment attributes by interpolating triangle attributes with a perspective correction. Afterward, the rendering unit  performs pixel rendering. In an embodiment, the Z\/stencil test unit  may also be arranged after the rendering unit .","In operation, the command processor  is used for receiving various rendering commands, thereby monitoring and configuring power states of the shaders. The arbitrator  performs thread scheduling according to the various rendering commands, as well as distributes the rendering commands to each shader to process 3D rendering calculations. As the unified shader unit  requires a great number of rendering calculations, thus making it become the power consumption bottleneck of the graphics processing unit . In addition, since different loadings may be conducted for rendering of each frame, power-gating control may be performed on each shader to control the power supplied thereto. For example, each power-gating control element for each shader A, B, and C may be respectively turned on or turned off. As such, dynamic power dissipation or leakage power loss of the graphics processing unit  are reduced, so as to decrease the power consumption of the graphics processing unit  without affecting operation performance of application programs.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},"Referring to , the graphics processing system comprises a graphics processing unit  and a driver . According to the embodiment of , the graphics processing unit  comprises a unified shader unit  having 4 shaders A, B, C, and D for rendering a plurality of frames. The unified shader unit , which is similar to the unified shader unit as shown in , is a multiple processor capable of processing multiple commands in a single clock. Further, the graphics processing unit  comprises 4 power-gating control elements A, B, C, and D, respectively coupled to each shader. The power-gating control elements is used for activating or deactivating corresponding shaders according to corresponding control signals A, B, C, and D. The driver  is coupled to the graphics processing unit  for receiving and executing various application programs, e.g. a first application program  and a second application program , via an application programming interface (API) , so as to correspondingly drive the graphics processing unit  to perform rendering. The power-gating control method of the graphics processing system will be described below in more detail with reference to .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4","b":"40"},"From the aforementioned description, before the graphics processing unit  renders a predetermined frame Frame, the driver  may utilize a history-based calculation algorithm to predict the number of active shaders Srequired for the graphics processing unit  to render the predetermined frame Framebased on the frame rates FPS, FPS, \u039b, FPSand the number of active shaders S, S, \u039b, Scorresponding to each previous rendered frames Frame, Frame, \u039b, Frame. Note that m represents the number of the previous frames used for predication. Subsequently, the power-gating control elements activates or deactivates the corresponding shaders by controlling the power supplied thereto. Accordingly, the graphics processing unit  may operate more efficiently and total power consumption of the graphics processing unit is significantly reduced.","Further, the driver  drives the graphics processing unit  to perform various rendering operations according to requests from each application program. Thus, the driver  may also determine the start and end of frame rendering according to the requests from each application program. For example, the first application program  may comprise a command SwapBuffer for indicating the end of frame rendering. Also, the second application program  may comprise a command ClearBuffer for indicating the end of frame rendering. Thus, the power-gating control may be performed during the execution of the above-mentioned commands, without deteriorating the rendering performance.","As shown in , when the driver  receives the first application program  via the application program interface , the driver  then generates corresponding command packets and transmits the corresponding command packets to a command processor  of the graphics processing unit  via a memory-mapped I\/O  (step S).","In response to the execution of the command SwapBuffer, i.e., the rendering of a previous frame Frameimmediately preceding the predetermined frame Frameis finished, the driver  then calculates the number of active shaders S, S, \u039b, Srequired for rendering each previous frame Frame, Frame, \u039b, Frame, and the corresponding frame rate FPS, FPS, \u039b, FPS(step S).","For example, assuming that m=5, the driver  calculates the number of active shaders S, S, \u039b, Srequired for rendering each previous frame Frame, Frame, \u039b, Framepreceding the predetermined frame Frame, and the corresponding frame rates FPS, FPS, \u039b, FPS.","Moreover, the driver  determines the number of active shaders Srequired for rendering the predetermined frame Frameaccording to the number of active shaders, S, S, \u039b, Srequired for rendering each previous frame Frame, Frame, \u039b, Frame, and the corresponding frame rates FPS, FPS, \u039b, FPS(step S).","More specifically, the driver  may determine the number of active shaders Srequired for rendering the predetermined frame Frameaccording to the following formula:",{"@attributes":{"id":"p-0040","num":"0039"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msub":{"mi":"S","mrow":{"mi":"n","mo":"+","mn":"1"}},"mo":"=","mrow":{"mrow":{"mo":["\u2308","\u2309"],"mfrac":{"mrow":[{"mi":["Target_FPS","\u03b1"],"mo":"+"},{"mi":"min","mo":"\u2062","mrow":{"mo":["{","}"],"mrow":{"mfrac":[{"msub":[{"mi":["FPS","n"]},{"mi":["S","n"]}]},{"msub":[{"mi":"FPS","mrow":{"mi":"n","mo":"-","mn":"1"}},{"mi":"S","mrow":{"mi":"n","mo":"-","mn":"1"}}]},{"msub":[{"mi":"FPS","mrow":{"mi":["n","m"],"mo":["-","+"],"mn":"1"}},{"mi":"S","mrow":{"mi":["n","m"],"mo":["-","+"],"mn":"1"}}]}],"mo":[",",",",","],"mi":"\u039b"}}}]}},"mo":"."}}},{"mrow":{"mo":["(",")"],"mn":"1"}}]}}}}},"wherein m represents the number of the previous frames, S, S, \u039b, Srepresents the number of active shaders for rendering each previous frames Frame, Frame, \u039b, Frame, FPS, FPS, \u039b, FPSrepresents the frame rates corresponding to each previous frame Frame, Frame, Frame, Target_FPS represents a target frame rate adjusted according to the display requirement, \u03b1 represents a control variable, and n\u2267m.","Then, when the driver  receives the second application program  via the application program interface  (step S), in response to the execution of the command ClearBuffer, i.e., start to render the predetermined frame Frame, the driver  generates a corresponding command packet according to the number of active shaders Srequired for rendering the predetermined frame Frameand current power states of each shader A, B, C, and D. As such, power-on and power-off of each shader A, B, C, and D are accordingly configured. And, the corresponding command packet is transmitted to the command processor  (step S). In an embodiment, it is assumed that the number of active shaders Sused for the previous frame Framepreceding the predetermined frame Frameis greater than the number of active shaders Srequired for rendering the predetermined frame Frame. Thus, the corresponding inactive shaders are powered off and deactivated. Otherwise, the corresponding active shaders are powered on and activated.","Following, in response to the command packet, the command processor  generates control signals A, B, C, and D respectively for turning on or turning off each power-gating control element A, B, C, and D, so as to configure the power-on or power-off of each shader A, B, C, and D and then inform the arbitrator  (step S).","Afterward, the arbitrator  distributes the rendering commands according to the activated shaders. Operations for rendering the predetermined frame Frameis then performed (step S). For example, the predetermined frame Framemay be rendered by use of tile-based rendering.","According to an embodiment, each power-gating control element comprises a transistor. As shown in , each power-gating control element comprises an NMOS transistor coupled between a voltage source Vdd and a corresponding shader and has a gate for receiving a corresponding control signal from the command processor . Therefore, each transistor is turned on or off by the corresponding control signal, so as to determine whether the voltage source Vdd is supplied to each shader.","Furthermore, in operation, each shader A, B, C, and D may have a respective texture unit, or share one or more texture units. Thus, each shader A, B, C, and D receives texture information from the texture units through a respective texture accessing route , , , and . In this case, the power-gating control elements may be flexibly arranged according to the arrangement of the texture units. As such, power management efficiency is significantly improved. The aforementioned power-gating control mechanism will be described below in more detail with reference to .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 5","b":"502"},"Referring to , the graphics processing unit  comprises a unified shader unit , local shared memories  and , texture units  and , a global shared memory  and a thread processing unit .","According to this embodiment, the unified shader unit  comprises a plurality of shaders. The shaders comprise two shader clusters  and , which utilize their respective local shared memories  and  to perform rendering. In addition, the shader clusters  and  are respectively coupled to the two texture units  and . And, the global shared memory  is shared by the texture units  and . Specifically, each shader cluster comprises 8 shaders. The thread processing unit  comprises two thread sequencers  and  for distributing threads.","In this case, each shader cluster  and  is arranged with a power-gating control element. As such, the turning-on or turning-off of each power-gating control element is used to activate or deactivate the corresponding shader cluster. Additionally, the power supplied to the local shared memory and texture units associated with each shader cluster may be also controlled. The cost for power-gating control circuitry is reduced and the power consumption from the peripheral elements of the shaders is decreased.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 6","b":"602"},"Referring to , the graphics processing unit  comprises a unified shader unit , a geometry control unit , a shader control unit  and a texture unit .","According to this embodiment, the unified shader unit  has a plurality of shaders. The shaders comprise two shader multi-processors  and . The two shader multi-processors  and  form a shader cluster and share the texture unit  to perform rendering. The geometry control unit  and the shader control unit  are used for receiving data and distributing rendering operations. In , each shader multi-processor comprises 8 shaders SPs, I-cache, C-cache, multi-thread issue unit MT, two special function units SFUs and a shared memory MEM for performing rendering calculation. According to this structure, the shader multi-processor units  and  share the texture unit . As a result, the two shader multi-processor units  and  may be regarded as a power management unit, and the power supply thereof is controlled by a power-gating control element. When the power-gating control element is turned-off, the entire shader cluster, i.e., the shader multi-processor units  and , and the texture unit  are accordingly deactivated. Further, power-gating control elements and power consumption are decreased.","As a result, the graphics processing system and the power-gating control method according to the aforementioned embodiments are capable of dynamically controlling the number of active shaders during frame rendering according to frame rate variations for each frame, thereby decreasing unnecessary power consumption.","The graphics processing systems and the power-gating control methods, or certain aspects or portions thereof, may take the form of program code embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable (e.g., computer-readable) storage medium, or computer program products without limitation in external shape or form thereof, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine thereby becomes an apparatus for practicing the methods. The methods may also be embodied in the form of program code transmitted over some transmission medium, such as electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the disclosed methods. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates analogously to application specific logic circuits.","While the invention has been described by way of example and in terms of preferred embodiment, it is to be understood that the invention is not limited thereto. To the contrary, it is intended to cover various modifications and similar arrangements (as would be apparent to those skilled in the art). Therefore, the scope of the appended claims should be accorded the broadest interpretation to encompass all such modifications and similar arrangements."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention can be more fully understood by reading the subsequent detailed description and examples with references made to the accompanying drawings, wherein:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
