---
title: Graphical display of management data obtained from an extensible management server
abstract: An extensible management server (XMS) is disclosed that includes a management interface, a scripting engine, and a data store having management scripts and a management class library stored therein. The management interface provides functionality for receiving and responding to commands received from a management application. The management scripts include functionality for retrieving and setting management data on managed computers. The management scripts are configured to utilize classes contained in the management class library to perform the actual interaction with the managed server computers for retrieving or setting management data. The management scripts may also be configured to utilize a graphical display application programming interface for generating graphical display instructions for use by the management application in graphically displaying the management data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08356309&OS=08356309&RS=08356309
owner: American Megatrends, Inc.
number: 08356309
owner_city: Norcross
owner_country: US
publication_date: 20090915
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Computers are often linked together through networks to allow the resources of a computer at one location to be utilized by other computers located at different locations. In a distributed environment such as this, computers known as servers often perform various tasks for other computers that communicate with the servers over a network. For instance, a server might enable sharing of files and other resources between the server and other computers, such as a World Wide Web (\u201cweb\u201d) server that provides text, graphics, and other resources to client computers over the Internet.","It is often necessary to manage the operation of one or more server computers. For instance, it is often desirable to view management data that provides information regarding the health, operation, or status of a server computer. This is especially true for server computers that maintain resources that are utilized by a large number of client computers or other server computers, such as within a corporate network or the Internet. For many conventional systems, the technician that needs to interact with the servers being managed is required to be physically located at the site of the server. However, it is not always feasible for a technician to be physically present at the location of a server computer.","For example, a system administrator of a corporate network may be present at one location while the servers of the corporate network may be spread around the country or even the globe. To effectively manage the servers on the corporate network, the system administrator must be able to monitor each of the server computers, regardless of their location. Because the system administrator cannot be physically present at each server to be managed, effective management of the server computers becomes very difficult. As a result, it can be very costly to maintain servers located in disparate physical locations.","Some server computers include an integrated or add-in management device that can provide remote access to management data regarding the health, operation, or status of a managed server computer. However, retrieving desired management data from one or more server computers is still a complex and time consuming process for many system administrators. Moreover, management data is provided in a textual format, which can be difficult for a system administrator to interpret.","It is with respect to these and other considerations that the disclosure presented herein has been made.","Technologies are provided herein for graphically displaying management data provided by an extensible management server (\u201cXMS\u201d). The XMS and other components presented herein allow a system administrator or other user to define and utilize scripts to retrieve management data from one or more managed server computers. A system administrator can define management scripts that retrieve specific management data from specific managed server computers, thereby providing a great deal of power and flexibility. In order to enable this functionality, the scripts can call classes contained in a management class library for retrieving and setting management data at the managed server computers. Data returned by the scripts can then be provided to a user through a user interface provided by a management application program. In one embodiment, the XMS operates in conjunction with the management application to provide the management data in a graphical format for use by a system administrator.","According to one embodiment, a system is provided herein for executing scripts to retrieve and set management data at one or more managed server computers. The system includes a management application configured for execution on a client computer or another type of computing system. The system also includes an XMS configured with a management interface, a scripting engine, and a data store having management scripts and a management class library stored therein. The management scripts include functionality for retrieving and setting management data on the managed server computers. The management scripts are configured to utilize classes contained in the management class library to perform the actual interaction with the managed server computers for retrieving or setting management data. As discussed above, management data relates to data regarding the health, operation, or status of a managed computer.","In one implementation, the management application may be utilized to request the execution of a script. If a user requests to execute a script, the management application transmits a request to the management interface to execute the script. In response thereto, the management interface utilizes a scripting engine to execute the script. As discussed briefly above, a management script may utilize classes stored in a management class library for interacting with the management data of managed server computers. When the script execution has completed, a success or failure message may be returned to the management application and displayed to a user in an appropriate user interface.","In one implementation, the XMS is configured with a graphical display application programming interface (\u201cAPI\u201d). The graphical display API may be called by the management scripts in order to format the management data for display in a graphical format. In particular, in one embodiment the graphical display API generates graphical display instructions for use by the management application in graphically displaying the management data. The management data and the graphical display instructions are returned to the management application in response to a request to execute a management script. The management application utilizes the graphical display instructions to graphically display the management data. For instance, the management application might call a rendering API that utilizes the graphical display instructions to graphically render the management data.","According to embodiments, the management class library includes classes for obtaining management data from an event log stored at a managed computer system, classes for obtaining management data regarding a field replaceable unit (\u201cFRU\u201d) of a managed computer system, classes for obtaining management data regarding a power supply in a managed computer system, and classes for obtaining management data regarding a cooling component, like a fan, of a managed computer system. Other types of classes may also be provided. In one embodiment, the API exposed by the management class library resembles the device and data model being managed by the XMS.","It should be appreciated that the above-described subject matter may also be implemented as a computer-controlled apparatus, a computer process, or as an article of manufacture such as a computer-readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.","The following detailed description is directed to technologies for providing an extensible management server (\u201cXMS\u201d). In the following detailed description, references are made to the accompanying drawings that form a part hereof, and which are shown by way of exemplary embodiments and implementations. Note that although the subject matter presented herein has been described in conjunction with one or more particular embodiments and implementations, it is to be understood that the embodiments are not necessarily limited to the specific structure, configuration, or functionality described herein. Rather, the specific structure, configuration, and functionality described herein are disclosed as examples. Various modifications and changes may be made to the subject matter described herein without following the exemplary embodiments and applications illustrated and described, and without departing from the true spirit and scope of the embodiments disclosed herein.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["102","112","112","110","110","102"]},"In order to provide the functionality described herein, the XMS  is connectively coupled to the managed servers A-C through a network, such as the network B. It should be appreciated that the network architecture illustrated in  and described herein has been simplified and that more or fewer networks may be utilized to connect the XMS  and the managed servers A-C. It should also be appreciated that while three managed servers A-C have been illustrated in , more or fewer servers may be managed in the manner presented herein.","As shown in , the XMS  is also coupled to a client computer  via a network A. The client computer  is configured to execute a management application  for interacting with the XMS  and controlling its operation. In particular, as will be described in greater detail below, the management application  provides a user interface to a user of the client computer  through which commands may be received for performing functions at the XMS . For instance, through the management application , a user of the client computer  may request to execute scripts for retrieving the management data A-C from the managed servers A-C, respectively. As discussed briefly above, the management data A-C refers to data having to do with the health, operation, or status of a managed computer.","In some applications, the XMS  and the managed servers A-C may also include hardware or software for receiving and responding to requests for the management data A-C. For instance, in one implementation, the XMS  and the managed servers A-C include a baseboard management controller (\u201cBMC\u201d). A BMC is a microcontroller that monitors the health, operation, or status of a computer. In one implementation, a BMC monitors health related aspects associated with a computer such as the temperature of components within the computer, the speed of rotational components within the computer, such as spindle motors, fans, and the like, the voltage across or applied to one or more components within a computer, and the available or used capacity of memory devices within the computer. A BMC may also monitor the lifespan of a FRU within a computing system, the power status of a computing system, and data regarding the operation of a cooling component, such as an active or passive cooling device. Other parameters may also be monitored by a BMC.","In order to make the management data gathered by a BMC available to programs in other computer systems, such as the XMS , a standard called the Intelligent Platform Management Interface (\u201cIPMI\u201d) has been created. IPMI is an industry standard for system monitoring and event recovery. The IPMI specification provides a common message based interface for accessing management data regarding many components within a managed computing system. In general, IPMI includes a rich set of predefined commands for reading temperature, voltage, fan speed, chassis intrusion, and other parameters. System event logs, hardware watchdogs, and power control can also be accessed through IPMI. In this manner, IPMI defines protocols for accessing the various parameters collected by a BMC through an operating system or through an external connection, such as through the network connections illustrated in .","According to one embodiment, the managed servers A-C and the XMS  are IPMI compliant computing systems. In this manner, the XMS  can request the management data A-C from the managed servers A-C, respectively, through the use of the IPMI compliant protocols. In this regard, it should be appreciated that because the managed servers A-C are IPMI compliant, no additional software must be installed at the managed servers A-C in order to retrieve the management data A-C. It should also be appreciated that although the embodiments presented herein are described in the context of IPMI, other platform management interfaces may be utilized by the various embodiments presented herein. Additional details regarding the operation of the management application  and the XMS  are provided below with reference to .","As will be described in greater detail below, the XMS  is configured in one embodiment with a graphical display API. The graphical display API may be called by management scripts executing on the XMS  in order to format management data  for display in a graphical format. In particular, in one embodiment the graphical display API generates graphical display instructions for use by the management application  in graphically displaying the management data . The management data  and the graphical display instructions are returned to the management application  in response to a request to execute a management script. The management application  utilizes the graphical display instructions to graphically display the management data . Additional details regarding this functionality will be provided below with respect to .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["102","102","202","204","106","204","106","102","204","106","102","208","206","106","204","202","208","206","212","208","208"]},"According to other embodiments, the management interface  also provides functionality through the interface  for allowing the management application  to add a new management script  to the data store , to delete a management script  from the data store , to retrieve a listing of the management scripts  in the data store , and to retrieve a management script  from the data store . The management interface  may also expose other functionality on the interface  for use by the management application .","It should be appreciated that, according to an embodiment, the management interface  comprises a communication layer that allows the management application  to access the management scripts  stored at the XMS . For example, in one embodiment, the management interface  may be implemented using PHP. In this regard, the management application  may comprise a Web browser application configured for communication with the management interface . Alternatively, the management application  may comprise a desktop application program for use specifically with the management interface . Other implementations should be apparent to those skilled in the art.","It should be appreciated that the management application  provides a user interface for interacting with the management interface  described above. For instance, the management application  may provide an appropriate user interface for allowing a user to perform the functions described above for executing management scripts, adding new management scripts, deleting management scripts, retrieving management scripts, and receiving a listing of management scripts. In this regard, when a management script  is executed, the management application  may provide an appropriate user interface for receiving input parameters to the management script to be executed. These parameters may be transmitted to the management interface  and utilized during the execution of the management script. A management script  may also generate text output during execution or a result code upon completion. This data may also be returned to the management application  by the management interface  and displayed to a user of the client computer  through an appropriate user interface.","As discussed briefly above, the management scripts  provide functionality for retrieving, setting, and otherwise interacting with the management data A-C stored at the servers A-C, respectively. The management scripts  may be expressed utilizing a standard scripting language, such as PHP or JAVASCRIPT. Alternatively, a custom scripting language may be defined for use in the manner presented herein.","According to embodiments, the management scripts  utilize classes exposed by the management class library . The management class library  includes one or more classes for obtaining the management data A-C. For instance, according to embodiments, the management class library  includes classes for obtaining management data  from an event log of one of the one or more managed servers A-C, classes for obtaining management data A-C regarding a FRU of one of the managed servers A-C, classes for obtaining management data A-C regarding power supplies of the managed servers A-C, and classes for obtaining management data A-C regarding cooling components of the managed servers A-C. It should be appreciated that the management class library  may also expose classes for obtaining other types of management data  from the servers A-C.","The management scripts  may reference the classes exposed by the management class library  in order to retrieve, set, and otherwise utilize the management data A-C exposed by the managed servers A-C, respectively. As discussed briefly above, the XMS  may also expose management data D. The management scripts  may similarly utilize the management class library  to retrieve the management data D from the XMS  itself.","According to embodiments, the management scripts , in conjunction with the classes exposed by the management class library , provide functionality for reading management data  regarding server chassis, blades, monolithic servers, and chassis slot maps. The management scripts  also provide functionality for reading management data  regarding IPMI sensors and event logs for open blade system management specification (\u201cOBSM\u201d)\/IPMI devices. The management scripts  also provide functionality for reading OBSM power and cooling domains, power supply, and fan information regarding the managed servers A-C. The management scripts  also provide functionality for device power control when used in conjunction with certain managed servers. For instance, the management scripts , when utilized in conjunction with the management class library  may provide functionality for powering off, power resetting, or otherwise setting the power state of the managed server computers A-C.","The management scripts  may also provide functionality for reading device FRU records. In order to facilitate these operations, the management scripts  may also provide functionality for manipulating a database stored at the XMS . For instance, functionality may be provided for creating and manipulating databases and tables, and for adding, deleting, and manipulating data stored within the database. It should be appreciated that the above examples are merely illustrative, and that the management scripts  when utilized in conjunction with the management class library  may provide functionality for retrieving, setting, and otherwise interacting with virtually any type of management data A-C exposed by the managed servers computers A-C. Additional details regarding the operation of the management application , the management interface , and the management scripts  will be provided below with respect to .","According to one implementation, the XMS  is also equipped with a graphical display API . As discussed briefly above, the graphical display API  provides functionality for generating graphical display instructions that can be utilized by the management application  to display the management data  in a graphical format. In particular, the graphical display API  exposes one or more classes that can be called by the management scripts  in order to format the management data  for display in a graphical format. In one implementation, the graphical display API  reformats textual management data in a manner that allows the management application  to more easily render the management data in a graphical format. In another implementation, the graphical display API  generates graphical display instructions for use by the management application  in displaying the management data . In this embodiment, the management data  is not modified. Additional details regarding the use and operation of the graphical display API  are provided below with respect to .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["300","208","208","300"]},"In the example package , a first data field A includes a package name. The data field B includes text identifying the name of the management script  contained in the package . The data field C includes a text description of the management script . The data field D includes date information identifying the date that the management script  was created or last edited. The data field E identifies the authors of the management script . The data field F identifies a list of arguments taken by the management script . The data field G identifies the data returned by the management script . The data field H is utilized to stored the actual script code for the management script . It should be appreciated that the package layout illustrated in  is merely illustrative and that other formats may be utilized to store the management scripts  in the data store .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 4","FIG. 4"],"b":["400","106","106","102"]},"It should be appreciated that the logical operations described herein with respect to the various figures are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly, the logical operations described herein are referred to variously as operations, structural devices, acts, or modules. These operations, structural devices, acts and modules may be implemented in software, in firmware, in special purpose digital logic, and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.","The routine  begins at operation , where the management application  provides an appropriate user interface for a user of the client computer  to submit commands to the XMS . As discussed above, the user interface provided by the management application  may provide choices for allowing a user to add a script to the data store , to delete a script for the data store , to edit a script stored in the data store , to list the scripts stored in the data store , and to execute a script stored in the data stored . In this regard, the management application  may also provide a user interface for allowing a user of the client computer  to schedule the execution of a script stored in the data store . The management interface  and the scripting engine  may provide functionality for executing the specified scripts according to the defined schedule.","From operation , the routine  proceeds to operation , where user input is received at the management application . In response to user input being received through the user interface provided by the management application , the routine  proceeds from operation  to operation . At operation , the management application  determines whether a request has been received from a user of the client computer  to add a script to the data store . If so, the routine  proceeds from operation  to operation , where the script to be added to the data store  is identified by a user of the client computer . Once the script to be added to the data store  has been identified, the management application  transmits an instruction to the management interface  to add the specified script to the data store . In response thereto, the management interface  adds the script to the data store  and returns a success or failure code to the management application . From operation , the routine  returns to operation , discussed above.","If, at operation , the management application  determines that the user input was not for requesting that a script be added to the data store , the routine  proceeds from operation  to operation . At operation , the management application  determines whether a request was received from a user of the client computer  to delete a script stored in the data store . If so, the routine  proceeds from operation  to operation , where the identity of the script to be deleted from the data store  is received from a user of the client computer . The management application  then transmits an instruction to the management interface requesting that the specified script be deleted from the data store . The management interface  attempts to delete the specified script from the data store  and returns a result code to the management application . From operation , the routine  returns to the operation , discussed above.","If, at operation , it is determined that a request to delete a script was not received, the routine  proceeds from operation  to operation . At operation , a determination is made by the management application  as to whether a user of the client computer  has requested to edit a script stored in the data store . If so, the routine  proceeds from operation  to operation , where the management application  receives the identity of the script to be edited. The management application  then sends an instruction to the management interface  to retrieve the specified script from the data store . In response thereto, the management interface  retrieves the specified script from the data store  and returns the script to the management application . The management application  then permits editing of the script within a user interface provided by the management application  or within another program. Once editing of the script has been completed, the management application  may instruct the management interface  to add the edited script to the data store  in the manner described above. From operation , the routine  returns to operation , described above.","If, at operation , it is determined that a request to edit a script was not received, the routine  proceeds to operation . At operation , the management application  determines whether a request to list the management scripts  stored in the data store  has been received. If so, the management application  transmits a request to the management interface  requesting the list of management scripts  in the data store . In response thereto, the management interface  generates a listing of the available management scripts  and returns the listing to the management application . The management application  may then display the listing of scripts to a user of the client computer  through an appropriate user interface. As discussed above, a user may select a script from the listing of scripts for editing, execution, or deletion. From operation , the routine  returns to operation , discussed above.","If, at operation , the management application  determines that a request to list the available management scripts  was not received, the routine  proceeds from operation  to operation . At operation , the management application  determines whether a request was received from a user of the client computer  to execute a script in the data store  immediately or on a schedule. If not, the routine  returns to operation , discussed above. If so, the routine  proceeds to operation , where the management application  receives the identity of the script to be executed and instructs the management interface  to execute the specified script immediately or on a schedule specified by the user. An illustrative routine for illustrating the execution of one of the management scripts  is discussed in greater detail below with reference to . From operation , the routine  returns to operation , discussed above.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 5","b":["502","502"]},"Once a handle has been obtained through the use of the XMS class A, these handles can be utilized to actually access the device info for a particular device. For instance, the device access class B provides functions for getting a device with a given device identifier, getting a device with a given IP address, getting a list of devices of a given type, getting a device list that illustrates a device parent-child relationship, getting chassis modules, including a list of blade servers or other components in a chassis, and obtaining a chassis slot map.","The sensor access class C provides classes for getting device SDR information, getting the sensors for a given device, and getting the sensors for a given device with provided sensor key fields. The event log access class D provides classes for getting a device system event log information, getting device event log records as a list, deleting a system event log record for a given device, and clearing a system event log database for a given device.","The FRU access class E provides functionality for getting FRU records for a given device and getting a FRU record with given key values. The power management class F provides functionality for getting the power supply information for a given chassis, getting a list of power supplies in a power domain, and obtaining a list of devices in a power domain. The cooling management class G provides functionality for getting cooling domains consisting of fans that provide cooling and components\/devices\/slots. The cooling management class G also provides functionality for getting a list of all fans in a given chassis, getting a list of fans in a cooling domain, and getting a list of devices in a cooling domain. The power control class H provides functionality for resetting a target device, obtaining an ACPI power state, and setting an ACPI power state. It should be appreciated that the API classes illustrated in  and described above are merely illustrative and other classes may also be provided in the embodiments presented herein.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 6","FIG. 6"],"b":["600","208","102","600","602","106","104","208","206","104","208","600","604","106","202","208","202","208"]},"From operation , the routine  proceeds to operation , where the management interface  retrieves the specified management script  to be executed and provides the script to the scripting engine  for execution. The scripting engine  receives the script  to be executed and begins execution of the script. In order to execute the management script  it may be necessary to call and execute classes stored in the management class library , in the manner discussed above. It may also be necessary to call the graphical display API  to format the management data  for display in graphical format. These processes occur at operation . As also discussed above, the classes containing the management class library  implement functionality for retrieving or setting the management data A-C on the managed servers A-C. In this regard, the called classes in the management class library  perform their specified functions for retrieving, setting, or otherwise utilizing the management data . This occurs at operation .","At operation , the management data  is provided in a manner that allows the management application  to display the management data  in a graphical format. As will be discussed in greater detail below with respect to , this might include generating and providing graphical display instructions for use by the management application  in graphically displaying the management data .","Once the script has completed execution, any parameters returned by the script are provided to the management interface . In turn, the management interface  provides the results of the script execution to the management application . If the management data  generated by the script is to be displayed graphically, the returned results might also include graphical display instructions for use by the management application  in graphically displaying the management data . In response to receiving the results, the management application  may display the results of the script execution to a user of the client computer  in a textual or graphical format. This also occurs at operation . From operation , the routine  proceeds to operation , where it ends.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 7","FIG. 7"],"b":["112","102","214","214","208","112","106"]},"In one embodiment the graphical display API  generates graphical display instructions  for use by the management application  in graphically displaying the management data . The management data  and the graphical display instructions  are returned to the management application  in response to a request to execute a management script  that is configured to call the graphical display API .","The management application  utilizes the graphical display instructions  to graphically display the management data . For instance, the management application  might call a rendering API  that utilizes the graphical display instructions  to graphically render the management data . Alternately, the management application  may directly utilize the graphical display instructions  to render the management data  in a graphical format.","According to one implementation, the graphical display instructions  comprise extensible markup language (\u201cXML\u201d) formatted with instructions for the management application  regarding how the management data  should be displayed graphically. For instance, the graphical display instructions  might comprise XML indicating to the management application  that the management data should be displayed as a graphical table, chart, or line plot.","The graphical display instructions  might also include XML indicating to the management application  the manner in which the management data  should be interpreted to be displayed graphically. For instance, the graphical display instructions  might identify a sub-portion of the management data  to be displayed on an X-axis of line plot and another sub-portion of the management data  to be displayed on a Y-axis.","According to embodiments, the management application  directly utilizes the graphical display instructions  to graphically display the management data  on a display of the client computer . For instance, as discussed above, the management application  comprises a desktop application in one embodiment. In this embodiment, the management application  utilizes the graphical display instructions  directly. In another embodiment, the management application  utilizes a rendering API . The rendering API  provides functionality for utilizing the graphical display instructions  to graphically display the management data . For instance, in one embodiment the management application  is a Web browser application program and the rendering API  is provided by a plug-in compatible with the Web browser application program. A browser-based runtime environment such as FLEX from ADOBE SYSTEMS INCORPORATED may be utilized to provide the rendering API  in such an environment.","According to one embodiment, the graphical display API  parses the management data  into an appropriate format for rendering by the management application . For instance, raw textual management data  may be parsed into a tabular format for display by the management application  in a graphical table. Additionally, according to embodiments, this functionality might be integrated into one or more of the API classes described above with respect to .",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 8","b":["800","800","802","208","214","112","106","214","702","106","112"]},"Once the graphical display instructions  have been generated, the management script  returns the management data  and the graphical display instructions  to the management application  in response to a request to execute the management script . This occurs at operation . At operation , the management application  receives the graphical display instructions  and utilizes the graphical display instructions  to graphically display the management data  on a display of the client computer . As discussed above, a rendering API  might be utilized to graphically render the management data  using the graphical display instructions . Once the management data  has been rendered and displayed, the routine  proceeds to operation  where it ends.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 9"},"Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the embodiments described herein may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like. The embodiments described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 9","FIG. 9"],"b":["104","102","110","110"]},"The illustrative computer architecture shown in  is for a computer  that includes a baseboard, or \u201cmotherboard\u201d, which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication path. In one illustrative embodiment, a CPU  operates in conjunction with a chipset . The CPU  is a central processor that performs arithmetic and logical operations necessary for the operation of the computer. The computer  may include a multitude of CPUs .","The chipset  includes a north bridge  and a south bridge . The north bridge  provides an interface between the CPU  and the remainder of the computer . The north bridge  also provides an interface to a random access memory (\u201cRAM\u201d) used as the main memory  in the computer  and, possibly, to an on-board graphics adapter . The north bridge  may also include functionality for providing networking functionality through a gigabit Ethernet adapter . The gigabit Ethernet adapter  is capable of connecting the computer  to another computer via a network. Connections that may be made by the network adapter  may include LAN or WAN connections. LAN and WAN networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. The north bridge  is connected to the south bridge .","The south bridge  is responsible for controlling many of the input\/output functions of the computer . In particular, the south bridge  may provide one or more universal serial bus (\u201cUSB\u201d) ports , a sound adapter , an Ethernet controller , and one or more general-purpose input\/output (\u201cGPIO\u201d) pins . The south bridge  may also provide a bus for interfacing peripheral card devices such as a graphics adapter . In one embodiment, the bus comprises a peripheral component interconnect (\u201cPCI\u201d) bus. The south bridge  may also provide a system management bus  for use in managing the various components of the computer . Additional details regarding the operation of the system management bus  and its connected components are provided below.","The south bridge  is also configured to provide one or more interfaces for connecting mass storage devices to the computer . For instance, according to an embodiment, the south bridge  includes a serial advanced technology attachment (\u201cSATA\u201d) adapter for providing one or more serial ATA ports  and an ATA  adapter for providing one or more ATA  ports . The serial ATA ports  and the ATA  ports  may be, in turn, connected to one or more mass storage devices storing an operating system  and application programs , such as the SATA disk drive . As known to those skilled in the art, an operating system  comprises a set of programs that control operations of a computer and allocation of resources. An application program is software that runs on top of the operating system software, or other runtime environment, and uses computer resources to perform application specific tasks desired by the user.","The mass storage devices connected to the south bridge , and their associated computer-readable media, provide non-volatile storage for the computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled in the art that computer-readable media can be any available media that can be accessed by the computer . By way of example, and not limitation, computer-readable media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. For instance, computer-readable media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, DVD, HD-DVD, BLU-RAY, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer .","A low pin count (\u201cLPC\u201d) interface may also be provided by the south bridge  for connecting a \u201cSuper I\/O\u201d device . The Super I\/O device  is responsible for providing a number of input\/output ports, including a keyboard port, a mouse port, a serial interface , a parallel port, and other types of input\/output ports. The LPC interface may also connect a computer-readable media such as a ROM or a flash memory such as the NVRAM  for storing a firmware  that includes program code containing the basic routines that help to start up the computer  and for transferring information between elements within the computer .","As described briefly above, the south bridge  may include a system management bus . The system management bus  may include a baseboard management controller (\u201cBMC\u201d) . In general, the BMC  is a microcontroller that monitors operation of the computer system . In a more specific embodiment, the BMC  monitors health-related aspects associated with the computer system , such as, but not limited to, the temperature of one or more components of the computer system , speed of rotational components (e.g., spindle motor, CPU Fan, etc.) within the system, the voltage across or applied to one or more components within the system , and the available or used capacity of memory devices within the system . To accomplish these monitoring functions, the BMC  is communicatively connected to one or more components by way of the management bus . In an embodiment, these components include sensor devices for measuring various operating and performance-related parameters within the computer system .","The management bus  is used by the BMC  to request and\/or receive various operating and performance-related parameters from one or more components, which are also communicatively connected to the management bus . For instance, in one embodiment, the management bus  may communicatively connect the BMC  to a CPU temperature sensor and a CPU fan (not shown in ), thereby providing a means for the BMC  to monitor and\/or control operation of these components. The BMC  may also include sensors  connected directly thereto.","The serial ports  and the Ethernet controller  may be utilized to establish a connection with the BMC . Through the use of the BMC , the sensors , and the system management bus , the computer  may collect the management data  discussed above and make this data available to requesting programs. The BMC  may also provide functionality for setting aspects of the management data  as discussed above, such as for instance resetting the computer  or setting the power state of the computer . As also discussed above, this functionality may be made available through a standard platform management interface, such as IPMI.","It should be appreciated that the software components described herein may, when loaded into the CPU  and executed, transform the CPU  and the overall computer  from a general-purpose computing system into a special-purpose computing system customized to facilitate the functionality presented herein. The CPU  may be constructed from any number of transistors or other discrete circuit elements, which may individually or collectively assume any number of states. More specifically, the CPU  may operate as a finite-state machine, in response to executable instructions contained within the software modules disclosed herein. These computer-executable instructions may transform the CPU  by specifying how the CPU  transitions between states, thereby transforming the transistors or other discrete hardware elements constituting the CPU .","Encoding the software modules presented herein may also transform the physical structure of the computer-readable media presented herein. The specific transformation of physical structure may depend on various factors, in different implementations of this description. Examples of such factors may include, but are not limited to: the technology used to implement the computer-readable media, whether the computer-readable media is characterized as primary or secondary storage, and the like. For example, if the computer-readable media is implemented as semiconductor-based memory, the software disclosed herein may be encoded on the computer-readable media by transforming the physical state of the semiconductor memory. For example, the software may transform the state of transistors, capacitors, or other discrete circuit elements constituting the semiconductor memory. The software may also transform the physical state of such components in order to store data thereupon, such as the management data .","As another example, the computer-readable media disclosed herein may be implemented using magnetic or optical technology. In such implementations, the software presented herein may transform the physical state of magnetic or optical media, when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations may also include altering the physical features or characteristics of particular locations within given optical media, to change the optical characteristics of those locations. Other transformations of physical media are possible without departing from the scope and spirit of the present description, with the foregoing examples provided only to facilitate this discussion.","In light of the above, it should be appreciated that many types of physical transformations take place in the computer  in order to store and execute the software components presented herein. It also should be appreciated that the computer  may comprise other types of computing devices, including hand-held computers, embedded computer systems, personal digital assistants, and other types of computing devices known to those skilled in the art. It is also contemplated that the computer  may not include all of the components shown in , may include other components that are not explicitly shown in , or may utilize an architecture completely different than that shown in .","Based on the foregoing, it should be appreciated that an extensible management server and components for graphically displaying management data retrieved from the extensible management server have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features, methodological acts, and computer readable media, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features, acts, or media described herein. Rather, the specific features, acts and mediums are disclosed as example forms of implementing the claims.","The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described, and without departing from the true spirit and scope of the present invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
