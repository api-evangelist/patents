---
title: Log configuration and online deployment services
abstract: Methods and apparatuses for configuring logging of a deployment of an enterprise component are described herein. In one embodiment, in response to a request for deploying an enterprise component, a logging configuration process extracts logging configuration information from a logging configuration file associated with the enterprise component and configures the logging for the respective enterprise component being deployed. The logging configuration file is designed exclusively for configuring logging of the enterprise component. Thereafter, the deployment information of the enterprise component is logged based on the extracted logging configuration information when the enterprise component is deployed. Other methods and apparatuses are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07743029&OS=07743029&RS=07743029
owner: SAP AG
number: 07743029
owner_city: Walldorf
owner_country: DE
publication_date: 20040430
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","COPYRIGHT NOTICES","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Appendix"],"p":["This application is a continuation-in-part (CIP) of U.S. patent application Ser. No. 10\/749,005, filed Dec. 30, 2003 now abandoned and U.S. patent application Ser. No. 10\/749,615, filed Dec. 30, 2003, which are hereby incorporated by reference.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The present invention relates generally to the field of enterprise computing. More particularly, this invention relates to log configuration and online deployment services.","Logging is employed within virtually all data networks. \u201cLogging\u201d refers generally to recording network-related and\/or application-related information in response to one or more predefined network\/application events. For example, when an end-user opens a TCP connection to a server, or unsuccessfully attempts to gain access to network resources (e.g., by attempting to log in to a particular server), this information is typically recorded as an entry within a log file. Similarly, if a variable within an application rises above a specified threshold value, a log entry indicating the value and the date and time that the threshold value was exceeded may be stored within a log file. Logging techniques may be employed to record any specified network\/application event. Network administrators may then review the log files to identify security issues and\/or troubleshoot network problems.","Java 2 Enterprise Edition (J2EE) is a tool commonly used in software development today for developing enterprise applications. Generally, J2EE reduces the costs and complexity associated with developing multi-tier enterprise services. Another advantage of J2EE is that it can be relatively rapidly deployed and enhanced as the need arises. J2EE is currently used in many large-scale application development projects for these reasons.","As application development projects grow larger, logging becomes increasingly more important and complicated. Logging can be a very useful debugging tool to isolate problems, for example, by tracking each stage of the application being evaluated. Typically, logging is configured via a logging configuration file. The logging configuration file typically shared by multiple components being deployed. As enterprise applications increase in size and scope, the logging configuration file becomes more complicated and difficult to manage, resulting in a lack of scalability when deploying large numbers of application components.","Methods and apparatuses for configuring logging of a deployment of an enterprise component are described herein. In one embodiment, in response to a request for deploying an enterprise component, a logging configuration process extracts logging configuration information from a logging configuration file associated with the enterprise component and configures logging for the respective enterprise component being deployed. Thereafter, the deployment information of the enterprise component is logged based on the extracted logging configuration information when the enterprise component is deployed. Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.","Methods and apparatuses for configuring logging of a deployment of an enterprise component are described. According to one aspect of the invention, each of the enterprise components being deployed is associated with a configuration file. The configuration file may be designed exclusively for the respective enterprise component being deployed and used to configure the logging of the respective enterprise component. In one embodiment, the configuration file may be written as a metadata file, such as, for example, an XML (extensible mark-up language) file.","In the following description, numerous details are set forth to provide a more thorough explanation of the present invention. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), erasable programmable ROMs (EPROMs), electrically erasable programmable ROMs (EEPROMs), magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium includes read only memory (\u201cROM\u201d); random access memory (\u201cRAM\u201d); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.); etc.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","102","104","102","104","102"]},"Some of the configuration files may be created specifically for a specific deployable component. In one embodiment, the configuration files may be written in as metadata files, such as for example, XML or HTML files. In one embodiment, some or all of the deployable components may be packaged with at least one configuration file for configuring the logging and\/or tracing when the respective component is deployed.","In an embodiment of the invention, a log controller  may receive messages from executing application (e.g., applications ). The log controller may be defined as a Java class having two subclasses or modules such as \u201ccategory\u201d to generate log messages and \u201clocation\u201d to generate trace messages. Tracing involves the reconstruction of the control flow of an executing application, which may be used during program development and testing or problem detection, in productive systems (i.e., as an alternative to debugging). Tracing may be switched off during normal operation. Moreover, trace messages may be emitted to locations, which describe delimited code areas such as packages or classes.","Logging may be used to record normal or exceptional events that occur during program execution and this may be switched on during normal operation. The log messages may be emitted to categories, which describe distinguished problem areas such as database problems or security auditing. In an embodiment of the invention, log messages are also visible in a trace.","In an embodiment of the invention, logs typically are addressed to an administrator of a running system while traces typically are addressed to a developer and\/or support organization. Thus, the developer may decide whether a message is a log message or trace message.","The logging system  further includes a log (also referred to as a destination)  coupled to each of the log controllers . The log  may represent the destination to which the message received by the respective log controller should be sent (or otherwise published). The log  is coupled to a formatter , which determines the format of the message to be published.","In one embodiment of the invention, a message passed through the logging system  may include a log record or potion thereof. The log record may be a structure that holds at best a portion of a message and data corresponding thereto. The log record may include severity information regarding the message, for example, to indicate the importance (severity) of the message. A severity threshold may be set and only a message with an assigned severity that is more severe than this threshold may be recorded and\/or published.","According to one embodiment, the logging system  optionally includes one or more filters  and  for the log controllers  and log  respectively, to further screen out the messages.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["200","210","200","201"]},"In one embodiment, each controller  is an instance of a defined \u201ccontroller\u201d class (e.g., a Java class) which includes two sub-classes, a \u201ctracing\u201d sub-class and a \u201clogging\u201d sub-class (described in detail below), which provide features specific to tracing and logging operations, respectively. In an object-oriented environment such as Java, the tracing controller  illustrated in  represents an instance of the tracing sub-class and the logging controller  represents an instance of the logging sub-class. In one embodiment of the invention, tracing controllers  are associated with program code locations (e.g., locations within packages, classes, . . . etc) whereas logging controllers  are associated with system categories (e.g., logical system categories such as database, network, . . . etc).","The controller class provides methods for associating log\/trace output destinations with specific controllers  and for controlling the actual writing of log\/trace messages. When a method is called, the writing of the log\/trace message to a log\/trace file , console  or other output destination  depends on the severity level associated with the message, the severity settings ,  of the relevant controller(s) , and the filtering configuration of one or more optional filters  and . For example, in one embodiment, messages having a severity level greater than or equal to the effective severity of the relevant controller  are candidates for output and are forwarded to the output destinations  attached to the controller  (i.e., assuming that the messages are not filtered by one of the filters , ).","Before (or after) evaluating the trace\/log message based on severity, filters  associated with the controller  may filter the messages based on predefined filtering criteria. By way of example, if a particular controller  is capable of writing to both a file and a console, a filter  may be assigned to filter messages directed to the file, thereby limiting output to the console only. Thus, using filters, a finer granularity of log controller  output may be defined, using variables other than merely severity. As illustrated in , filters may be associated with particular log controllers  and\/or with specific output destinations  (e.g., specific log\/trace files). As mentioned above, filters may be associated with both controllers  and\/or output destinations  to further restrict or alter the output tracing and logging behavior. In one embodiment, multiple filters having different filtering criteria may be allocated to each controller  and\/or destination . Further detailed information concerning the logging architecture may be found in the above-identified co-pending U.S. patent applications.","One embodiment of the invention is implemented in an object-oriented programming environment such as Java (e.g., within a J2EE platform\/engine). In this embodiment, each of the modules illustrated in  are represented by objects and\/or classes. The classes and\/or objects of this embodiment comprise an application programming interface (\u201cAPI\u201d) usable to configure logging and\/or tracing operations within a Java environment. It should be noted however, that the underlying principles of the invention are not limited to any particular programming environment. It will be appreciated that other object-oriented programming environments, such as, for example, the .NET frameworks defined by Microsoft (e.g., using C# and\/or Visual Basic.NET, etc.), may be utilized.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 3","FIG. 3"],"b":["300","301","302","304","301","302","304","309","311","309","311","302","304"]},"In one embodiment, the enterprise engine  includes, but is not limited to, a logging module  and a repository  for temporarily storing the log configuration. In one embodiment, the repository  may be implemented as a part of a system memory of the enterprise engine . The logging module  may include one or more processes executed by an operating system within the enterprise engine . The logging module  may be a part of logging system implemented within the enterprise engine , such as, for example, exemplary logging systems shown in .","According to one embodiment, the configuration files - may be created and edited using a variety of editors, such as, for example, a text editor or a word processor, etc. Alternatively, the configuration files - may be created and edited via an integrated development environment (IDE), such as, for example, the exemplary IDE shown in .","The operating system may be a Windows operating system from Microsoft Corporation or a MacOS operating system from Apple Computer. Alternatively, the operating system may be a Unix, a Linux, or an embedded operating system from a variety of vendors. The enterprise engine  may be implemented within a data processing system, such as, for example, exemplary system  of , which will be described in detail further below.","According to one embodiment, each of the configuration files is specifically packaged with the respective enterprise component. For example, configuration file  may be packaged with enterprise component . The enterprise components - may be a variety of deployable enterprise components, such as, for example, enterprise applications, libraries, resources, and\/or services. In Java development, for example, a configuration file for an enterprise application may be packaged with the corresponding *.ear file for the respective enterprise application, while a configuration file for a Web application may be packaged with the corresponding *.war file for the respective Web application, etc. In one embodiment, the configuration file may be written as a metadata file, such as, for example, an XML file or a HTML (hypertext mark-up language) file, etc. An example of a configuration file written in XML is shown in .","According to one embodiment, upon receiving a request for deploying an enterprise component, which may be issued by a deployment module (not shown), the logging module  retrieves the configuration file from the respective enterprise component being deployed. For example, when the enterprise engine  receives a request for deploying enterprise component , logging module  retrieves configuration file  associated with and specifically designed for the enterprise component  from a deployable file. For example, if component  is an enterprise application, the configuration file  and its component file  may be packaged within a *.ear file.","Once the configuration file is retrieved, the logging module  extracts the logging configuration from the configuration file by parsing the configuration file according to certain predetermined formats and\/or policies. Thereafter, the logging module processes the extracted logging configuration information and stores the processed configuration information in the repository  and\/or database . In addition, a copy of the corresponding configuration file may also be permanently stored in database  for later use. Once logging has been configured, the system then may perform logging for the specific component during the deployment of the respective component according to the logging configuration of the respective component.","Furthermore, the enterprise engine  may include an administration API  to allow an administrator to configure the logging at run time after the initial configurations. The administrator  may then modify the logging configuration and update the corresponding configuration file stored in the database . In addition to the administration API , the exemplary enterprise engine  may also include a log viewer  to allow a user to view the logged information. The log viewer  may be integrated within the administration API , such as, for example, log viewer  shown in . Alternatively, the log viewer  may be standalone log view, such as, for example, log viewer  shown in . Other viewing mechanisms, such as a command line interface (CLI) may be utilized. The log viewer  may be locally attached to the enterprise engine . Alternatively, the log viewer  may be communicatively coupled to the enterprise engine over a network.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 3"],"b":["400","401","401","301","401","403","401","404","401"]},"Once the enterprise component being deployed is recognized, a log configuration service  is invoked. In one embodiment, the log configuration service  provides, but not limited to, the following functionality:\n\n","Once the log configuration service  is invoked, at block , a configuration file associated with the enterprise component, such as configurations files - of , is retrieved and the log configuration service  extracts the logging configuration information from the configuration file. At block , the logging information is processed by the log configuration service . During processing the configuration information, one or more policies may be applied. At block , the processed logging configuration information is applied to the enterprise component being deployed.","In addition, the processed logging configuration information may be stored in a location of the system memory, such as, for example, the repository  of . A copy of the configuration information may also be stored in a database (e.g., database  of FIG. ) for future use, which may be updated subsequently by an administrator. After the logging regarding to the enterprise component being deployed has been configured, logging operations are executed according to the logging configuration. In one embodiment, the above configuration processes may also be applied to the trace configuration that allows a developer to trace the task executions for the purposes of debugging.","Although the above processes have been illustrated in view of the Java enterprise computing environment, it will be appreciated that the above described techniques may also be applied to other enterprise computing environment, particularly, the object oriented programming environment, such as, for example, C# or Visual Basic of the .NET frameworks from Microsoft.",{"@attributes":{"id":"p-0055","num":"0057"},"figref":"FIG. 5","b":["500","500"]},"Referring to , at block , a request for deploying an enterprise component (e.g., enterprise components - of ) is received. The request for deployment may be issued by an enterprise engine, such as, for example, a J2EE engine in a Java computing environment, or alternatively, a .NET framework engine. In one embodiment, a deployment service, such as deployment service  of  may be invoked to handle the deployment request. The enterprise component being deployed may be a library, a service, and\/or an application of an enterprise server.","In response to the request, at block , a configuration file associated with the enterprise component being deployed is retrieved, for example, by a log configuration service (e.g., log configuration service  of ), where the configuration file is exclusively designed for the respective enterprise component being deployed. That is the configuration file contains exclusive configuration information regarding the respective enterprise component without having to be shared with other enterprise components. In one embodiment, the configuration file is packaged with the associated enterprise component. For example, in Java computing environment, a configuration file for an enterprise application may be packaged within a *.ear file containing the enterprise application, etc.","At block , the logging and\/or tracing configuration is extracted from the configuration file associated with the enterprise component being deployed. For example, information related to the settings of log formatters, log destinations, and\/or log controllers may be extracted from the configuration file. At block , the logging and\/or tracing of the enterprise component are configured according to the extracted configuration information. When the enterprise component is deployed, at block , logging and\/or tracing are performed based on the configuration set up based on the configuration file associated with the deployed enterprise component. Other operations may be performed within the scope of embodiments of the invention.",{"@attributes":{"id":"p-0059","num":"0061"},"figref":"FIG. 6","b":["600","601","602","603","601","602","603","606","607"]},"The configuration files described above may be written according to the exemplary log configuration structure  in a variety of formats. In one embodiment, the configuration file may be written as a metadata file, such as, for example, an XML or HTML format. The exemplary configuration structure  may be used by an enterprise computing engine, such as, for example, a Java J2EE engine or a .NET framework engine.","In one embodiment, log formatter section  may be processed by a formatter component of the logging module (e.g., logging module  of ), such as, for example, formatters  of . Similarly, log destination section  may be processed by a destination component of the logging module, such as, for example, output destinations  of . In addition, the log controller section  may be processed by a controller of the logging module, such as, for example, controllers  of . The log destination  may further optionally include one or more filters . Similarly, the log controller  may further optionally include an optional filter . Other sections or sub-sections apparent to those with ordinary skill in the art may be included.",{"@attributes":{"id":"p-0062","num":"0064"},"figref":"FIG. 7","b":["700","701","702","703","702","703","704","705"]},{"@attributes":{"id":"p-0063","num":"0065"},"figref":["FIG. 8","FIG. 3"],"b":["800","800","302","304"]},"Alternatively, according to another embodiment, the exemplary GUI  may be included within a development tool for developing enterprise applications. For example, GUI  may be a part of an integrated development environment (IDE) for developing Java enterprise applications (e.g., J2EE compatible applications), or alternatively, the exemplary GUI  may be part of other enterprise IDE, such as, for example, the .NET framework IDE.","Referring to , according to one embodiment, exemplary GUI  includes, but not limited to, a tool bar  having one or more buttons or controls that when activated to perform certain tasks. In one embodiment, the tool bar  may include a button or control that when activated to generate a logging configuration file for each of the enterprise components being deployed. In one embodiment, exemplary GUI  includes a package window  to display a list of packages, where each package may include one or more deployable enterprise components. For each of the packages listed in the package window , the exemplary GUI  may include a property window  to list and edit one or more properties corresponding to respective package, such as, for example, package  listed in package window .","In one embodiment, when one of the packages is selected (e.g., selected package ), another window having one or more pages may be used to display information associated with the selected package. The one or more pages may be selected via one or more page selectors . In one embodiment, the one or more page selector  includes a page selector  to select a page for configuring a logging configuration file.","According to one embodiment, when page selector  is activated, the corresponding page  for configuring a logging file is displayed. The page  may also include one or more page selectors for configuring specific sections or pages of the logging configuration file. For example, page  may include a log formatter page selector  to configure log formatter section of the configuration file (e.g., formatter section  of ), a log destination page selector  to configure log destination section of the configuration file (e.g., destination section  of ), a log controller page selector  to configure log controller section of the configuration file (e.g., log controller section  of ), and other sections, such as, source .","In the example shown in , when log controller page selector  is activated, its corresponding page  is displayed. In one embodiment, page  includes, but not limited to, a first window  to display one or more log controllers managed and a second window  to display one or more properties of one of the log controllers displayed in window . In one embodiment, one or more log controllers may be added to via add button  and\/or removed via remove button  from the respective configuration file.","For the purposes of illustrations, when log controller  is selected or activated, the properties associated with the selected log controller  are displayed in window . In one embodiment, the properties displayed may include, but not limited to, effective severity  and relative severity , etc. Other information such as those shown in  may be displayed.","Once the logging has been configured at the GUI , in one embodiment, the information may be saved to a configuration file associated with the respective package (e.g. package ), where the configuration file may be stored in the same directory as the package (e.g. the same directory of package ). Subsequently, most of the files in that directory, including the configuration file, may be packaged into a release file, such as, error *.war files. That is, each of the packages listed in window  may include a configuration file specifically designed to configure the logging for the respective component.","The exemplary GUI  is illustrated for illustrations purposes only. The functionality and the layout of the GUI may vary while still complying with the underlying principles of the invention. For example, the tool bar  and\/or the page selectors  may be implemented at different locations of the GUI, such as, for example, at the bottom of the GUI (e.g., near the status bar). The number of the buttons or controls associated with the tool bar  and the page selectors  may also vary. The buttons, the fields, the page selectors, and\/or other controls may be activated using a variety of different techniques. For example, those buttons, icons, controls, and page selectors may be activated through one or more keys from a keyboard and\/or a pointing device (e.g., a mouse). Alternatively, the functionality of these buttons, controls, and\/or fields may be activated or deactivated via a pull-down menu or a pop-up menu. It will be appreciated that these elements may also be activated via other methods apparent to those with ordinary skill in the art, such as, for example, a voice interactive command, a stylus, or a command received over a network, such as a VPN (virtual private network), etc.","Although the above logging configurations are performed via an IDE as discussed above, the logging configurations may also be performed via other APIs, particularly, at runtime.  is a block diagram illustrating an exemplary graphical user interface (GUI) for configuring logging according to one embodiment of the invention. In one embodiment, the exemplary GUI  may be included within an administration API, such as administration API  of . Similar to exemplary GUI , exemplary GUI  includes, but is not limited to, a tool bar  having one or more buttons or controls, a first window  to display one or more configurable items, and a second window  to display information associated with one of the items selected from window . In one embodiment, the items listed in window  include, among others, a logging configurator .","For the purposes of illustrations, when logging configuration  is selected or activated, the properties associated with item  may be displayed in window . In one embodiment, the logging configuration  may include locations, categories, log destinations, and log formatters as shown at field . The log controllers of each location may be configured. When the location page is selected (via a corresponding page selector), according to one embodiment, window  is used to display a list of the locations where the corresponding log controllers may be configured.","When location  is selected, one or more properties of location  may be displayed and\/or configured in window . For example, a user or an administrator may configure the severity  of the logging, one or more filters in filter window  that may be added or removed using buttons , and one or more destinations in destination window  that may be added or removed using buttons . Other configurations are also contemplated within the scope of the present invention.","The exemplary GUI  is illustrated for illustrations purposes only. The functionality and the layout of the GUI may vary. For example, the tool bar  and\/or the page selectors  may be implemented at different locations of the GUI, such as, for example, at the bottom of the GUI (e.g., near the status bar). The number of the buttons or controls associated with the tool bar  and the page selectors  may vary. The buttons, the fields, the page selectors, and\/or other controls may be activated via a variety of manners. For example, those buttons, icons, controls, and page selectors may be activated through one or more keys from a keyboard and\/or a pointing device (e.g., a mouse). Alternatively, the functionality of these buttons, controls, and\/or fields may be activated or deactivated via a pull-down menu or a pop-up menu. It will be appreciated that they can also be activated via other methods apparent to those with ordinary skill in the art, such as, for example, a voice interactive command, a stylus, or a command received over a network, such as a VPN (virtual private network), etc.","In one embodiment, the log records may also be viewed using the exemplary GUIs  and . Alternatively, a log viewing GUI may be used to view the log records.  is a block diagram illustrating an exemplary graphical user interface (GUI)  which, in accordance with an embodiment of the invention, may be used by an administrator (e.g., administrator\/developer  of ) to configure or modify the logging of an enterprise component being deployed. Alternatively, the exemplary GUI  may be used by a developer to view (e.g., as a log viewer) or trace (e.g., as a debugger) the deployment or operating information of a deployed enterprise component. The exemplary GUI  may be integrated within the exemplary GUIs  and\/or .","In one embodiment, exemplary GUI  includes, but is not limited to, a service selection area , which permits a user to select from a list of services such as, for example, a \u201clog viewer\u201d to view logged information in accordance with the techniques set forth herein.","After selecting the log viewer option in , the user functions defined separately may be provided with an interface , which permits the user to elect between different tabs. The tabs include a control descriptor tab  to manage the descriptors for the logging, a properties tab  to view and change properties associated with the log viewer, and a runtime tab  to illustrate logged data for a given application, machine, and\/or a task listed in the window. The logging data regarding the selected runtime items may then be viewed in a data window  of the GUI . This data may include the identity of the thread, source, severity, message, message identity, date, time, location, and the like (such as illustrated in portion ). Other components or options apparent to those with ordinary skill in the art may be included.","The log viewer illustrated in  may also be referred to as an online log viewer where the logs written from the enterprise engine and the running applications may be automatically registered. Alternatively, a standalone log viewer may be implemented. In one embodiment, a standalone log viewing system may include a log viewer server and a log viewer client. The logs from a system landscape may be viewed centrally in a standalone log viewer client communicatively coupled to a log viewer server.  illustrates an exemplary a standalone log viewer GUI according to one embodiment of the invention. Other log viewing mechanisms, such as, for example, a command line log viewer, may also be employed.",{"@attributes":{"id":"p-0080","num":"0082"},"figref":["FIG. 12","FIG. 12"],"b":"1200"},"Note that while  illustrates various components of a computer system, it is not intended to represent any particular architecture or manner of interconnecting the components, as such details are not germane to the present invention. It will also be appreciated that network computers, handheld computers, cell phones, and other data processing systems which have fewer components or perhaps more components may also be used with the present invention. The computer system of  may, for example, be a J2EE engine or a .NET framework engine.","As shown in , the computer system , which is a form of a data processing system, includes a bus  which is coupled to a microprocessor  and a ROM , a volatile RAM , and a non-volatile memory . The microprocessor , which may be a PowerPC microprocessor from Motorola, Inc. or IBM, is coupled to cache memory  as shown in the example of . Alternatively, processor  may be a Pentium Processor from Intel Corporation.","The bus  interconnects these various components together and also interconnects these components , , , and  to a display controller and display device , as well as to input\/output (I\/O) devices , which may be mice, keyboards, modems, network interfaces, printers, and other devices which are well-known in the art. Typically, the input\/output devices  are coupled to the system through input\/output controllers .","The volatile RAM  is typically implemented as dynamic RAM (DRAM) which requires power continuously in order to refresh or maintain the data in the memory. The non-volatile memory  is typically a magnetic hard drive, a magnetic optical drive, an optical drive, or a DVD RAM or other type of memory system which maintains data even after power is removed from the system. Typically the non-volatile memory will also be a random access memory, although this is not required. While  shows that the non-volatile memory is a local device coupled directly to the rest of the components in the data processing system, it will be appreciated that the present invention may utilize a non-volatile memory which is remote from the system, such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus  may include one or more buses connected to each other through various bridges, controllers, and\/or adapters, as is well-known in the art. In one embodiment, the I\/O controller  includes a USB (Universal Serial Bus) adapter for controlling USB peripherals.","According to one embodiment, in response to a request for deploying an enterprise component, a log configuration service (e.g., log configuration service ) may be executed from the memory  to cause processor  to perform logging and tracing configurations illustrated by one or more processes set forth above. Other operations may be performed as well.","Thus, methods and apparatuses for configuring logging of a deployment of an enterprise component have been described. In the foregoing specification, the invention has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense.","In one embodiment, the usage of at least portions of the elements used in an XML configuration file is explained in detail as follows:",{"@attributes":{"id":"p-0088","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<!--"},{"entry":"This is the root element for log configuration."},{"entry":"-->"},{"entry":"<!ELEMENT log-configuration (log-formatters?, log-destinations?, log-controllers?)>"},{"entry":"<!--"},{"entry":"Contains a list of log formatters."},{"entry":"-->"},{"entry":"<!ELEMENT log-formatters (log-formatter*)>"},{"entry":"<!--"},{"entry":"Contains a list of log destinations."},{"entry":"-->"},{"entry":"<!ELEMENT log-destinations (log-destination*)>"},{"entry":"<!--"},{"entry":"Contains a list of log controllers."},{"entry":"-->"},{"entry":"<!ELEMENT log-controllers (log-controller*)>"},{"entry":"<!--"},{"entry":"Contains a list of log filters."},{"entry":"-->"},{"entry":"<!ELEMENT log-filters (log-filter*)>"},{"entry":"<!--"},{"entry":"Contains a list of associated destinations. You can have a destination-ref or an anonymous-"},{"entry":"destination. These two types are displayed further in this document."},{"entry":"-->"},{"entry":"<!ELEMENT associated-destinations ((destination-ref|anonymous-destination)*)>"},{"entry":"<!--"},{"entry":"Describes a formatter used for formatting log records."},{"entry":"-->"},{"entry":"<!ELEMENT log-formatter EMPTY>"},{"entry":"<!--"},{"entry":"A mandatory attribute that specifies the name of the new formatter."},{"entry":"Example:"},{"entry":"<log-formatters>"},{"entry":"\u2003<log-formatter name=\u2018myFormatter\u2019 type=\u2018mypackage.FormatterImpl\u2019"},{"entry":"pattern=\u2018somePattern\u2019\/>"},{"entry":"\u2003\u2003<log-formatter name=\u2018anotherFormatter\u2019 type=\u201cmypackage.AnotherFormatterImpl\u201d"},{"entry":"pattern=\u2018anotherPattern\u2019\/>"},{"entry":"\u2002<\/log-formatters>"},{"entry":"-->"},{"entry":"<!ATTLIST log-formatter name CDATA #REQUIRED>"},{"entry":"<!--"},{"entry":"Defines the type of the formatter. The following default formatter types are available:"},{"entry":"ListFormetter, TraceFormatter, XMLFormatter. You can also use your own formatter type."},{"entry":"-->"},{"entry":"<!ATTLIST log-formatter type NMTOKEN #REQUIRED>"},{"entry":"<!--"},{"entry":"Configures the formatter with a custom formatting pattern. The pattern allows you to specify"},{"entry":"the message data fields, with place holders of the form %[[-]<width>[-]]<type>, interspersed"},{"entry":"with arbitrary text that you want to have included in formatted messages (currently available"},{"entry":"only for formatters of type TraceFormatter)."},{"entry":"-->"},{"entry":"<!ATTLIST log-formatter pattern CDATA #IMPLIED>"},{"entry":"<!--"},{"entry":"Describes a log destination (which is an abstraction of a file, console output, etc.). To a"},{"entry":"destination you can associate additional or already available formatters and filters."},{"entry":"-->"},{"entry":"<!ELEMENT log-destination ((formatter-ref|anonymous-formatter)?, log-filters?)>"},{"entry":"<!--"},{"entry":"Set the name of the destination."},{"entry":"Example:"},{"entry":"<log-destinations>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<log-destination name=\u2018myDestination0\u2019 type=\u2018FileLog\u2019 pattern=\u2018c:\\dest0.log\u2019 effective-"},{"entry":"severity=\u2018ERROR\u2019 encoding=\u2018Cp1047\u2019 count=\u201c5\u201d limit=\u2018800000\u2019>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<formatter-ref name=\u2018myFormatter\u2019\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<log-filters>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<log-filter type=\u2018myPackage.SomeFilter\u2019\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/log-filters>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/log-destination>"},{"entry":"\u2003\u2003<log-destination name=\u2018myDestination1\u2019 type=\u2018ConsoleLog\u2019>"},{"entry":"\u2003\u2003\u2003<anonymous-formatter type=\u2018TraceFormatter\u2019\/>"},{"entry":"\u2003\u2003\u2003<log-filters>"},{"entry":"\u2003\u2003\u2003\u2003<log-filter type=\u2018mypackage.MyLogFilter\u2019\/>"},{"entry":"\u2003\u2003\u2003<\/log-filters>"},{"entry":"\u2003\u2003<\/log-destination>"},{"entry":"\u2003<\/log-destinations>"},{"entry":"-->"},{"entry":"<!ATTLIST log-destination name ID #REQUIRED>"},{"entry":"<!--"},{"entry":"Sets the destination type. You can either specify your own type, or set a default one: FileLog"},{"entry":"or ConsoleLog. If you select a ConsoleLog you do not need to specify Pattern, Limit, and"},{"entry":"Count."},{"entry":"-->"},{"entry":"<!ATTLIST log-destination type NMTOKEN #REQUIRED>"},{"entry":"<!--"},{"entry":"Specifies the path to the file where the logs will be written (applicable only for log"},{"entry":"destinations of type FileLog)."},{"entry":"-->"},{"entry":"<!ATTLIST log-destination pattern CDATA #IMPLIED>"},{"entry":"<!--"},{"entry":"Sets the effective severity of this log."},{"entry":"-->"},{"entry":"<!ATTLIST log-destination effective-severity %severities; #IMPLIED>"},{"entry":"<!--"},{"entry":"Sets the named character encoding to be used for this log. If no character encoding is set the"},{"entry":"default character encoding is used."},{"entry":"-->"},{"entry":"<!ATTLIST log-destination encoding CDATA #IMPLIED>"},{"entry":"<!--"},{"entry":"Specifies the number of log files for this destination. If it is not specified only one file is used."},{"entry":"If a number is specified - when the size of the first file reaches the limit specified in the Limit"},{"entry":"tag the system starts to write in the second one; this procedure is executed until all the"},{"entry":"specified files are full, then the system starts to write again in the first file, that is, overwrites"},{"entry":"the first one."},{"entry":"-->"},{"entry":"<!ATTLIST log-destination count CDATA #IMPLIED>"},{"entry":"<!--"},{"entry":"Specifies the size of the file where the logs will be generated."},{"entry":"-->"},{"entry":"<!ATTLIST log-destination limit CDATA #IMPLIED>"},{"entry":"<!--"},{"entry":"Associates the log destination that is described in the parent tag log-destination with a"},{"entry":"formatter described in a log-formatter tag. Only one formatter can be associated with a"},{"entry":"destination."},{"entry":"-->"},{"entry":"<!ELEMENT formatter-ref EMPTY>"},{"entry":"<!--"},{"entry":"The name of the formatter"},{"entry":"-->"},{"entry":"<!ATTLIST formatter-ref name CDATA #REQUIRED>"},{"entry":"<!--"},{"entry":"Associates the log destination that is described in the parent tag log-destination with an"},{"entry":"anonymous formatter (that is a formatter that is not explicitly described with a log-formatter"},{"entry":"tag). One cannot specify a pattern for an anonymous formatter"},{"entry":"-->"},{"entry":"<!ELEMENT anonymous-formatter EMPTY>"},{"entry":"<!--"},{"entry":"Specifies the type of the anonymous formatter."},{"entry":"-->"},{"entry":"<!ATTLIST anonymous-formatter type NMTOKEN #REQUIRED>"},{"entry":"<!--"},{"entry":"Describes a log controller. The log controller is an abstraction of a logger that can be used"},{"entry":"either for tracing (in this case it is called Location and \u201c.\u201d symbol is used as a separator to"},{"entry":"denote the hierarchical structure) of for logging (then it is called Category and \u201c\/\u201d symbol is"},{"entry":"used as a separator)."},{"entry":"-->"},{"entry":"<!ELEMENT log-controller (minimum-relative-severity*, maximum-relative-severity*,"},{"entry":"relative-severity*, associated-destinations?, log-filters?)>"},{"entry":"<!--"},{"entry":"Describes the name of the log controller. Two types of log controller names are available -"},{"entry":"names for categories and names for locations."},{"entry":"Categories are named according to the hierarchical structure known from file systems. You"},{"entry":"can group together all the categories of log messages concerned with one particular issue"},{"entry":"under one category. The category name must be separated by \u201c\/\u201d."},{"entry":"Locations are named according to the hierarchical structure known from Java packages. The"},{"entry":"category name must be separated by \u201c.\u201d."},{"entry":"-->"},{"entry":"<!ATTLIST log-controller name CDATA #REQUIRED>"},{"entry":"<!--"},{"entry":"Sets effective severity to this log controller."},{"entry":"-->"},{"entry":"<!ATTLIST log-controller effective-severity %severities; #IMPLIED>"},{"entry":"<!--"},{"entry":"Sets minimum severity to this log controller."},{"entry":"-->"},{"entry":"<!ATTLIST log-controller minimum-severity %severities; #IMPLIED>"},{"entry":"<!--"},{"entry":"Sets maximum severity to this log controller"},{"entry":"-->"},{"entry":"<!ATTLIST log-controller maximum-severity %severities; #IMPLIED>"},{"entry":"<!--"},{"entry":"Assigns a resource bundle name to this log controller. If a resource bundle is assigned,"},{"entry":"language-independent log messages can be written."},{"entry":"-->"},{"entry":"<!ATTLIST log-controller bundle-name CDATA #IMPLIED>"},{"entry":"<!--"},{"entry":"An optional attribute that specifies whether this log controller will store system critical"},{"entry":"messages in the database. The default value is \u201ctrue\u201d."},{"entry":"-->"},{"entry":"<!ATTLIST log-controller db-log %boolean; #IMPLIED>"},{"entry":"<!--"},{"entry":"Sets the minimum severity of this log controller. If its current maximum severity is lower than"},{"entry":"the argument, the former is set to the argument. If it is a root controller, this method has the"},{"entry":"same effect as a call to the effective-severity."},{"entry":"-->"},{"entry":"<!ELEMENT minimum-relative-severity EMPTY>"},{"entry":"<!--"},{"entry":"The name of the relative controller."},{"entry":"-->"},{"entry":"<!ATTLIST minimum-relative-severity relative-controller CDATA #REQUIRED>"},{"entry":"<!--"},{"entry":"The value of the minimum relative severity."},{"entry":"-->"},{"entry":"<!ATTLIST minimum-relative-severity value %severities; #REQUIRED>"},{"entry":"<!--"},{"entry":"Sets the maximum severity of this log controller. If its current minimum severity is higher"},{"entry":"than the argument, the former is set to the argument. If it is a root controller, the method has"},{"entry":"the same effect as a call to the effective-severity."},{"entry":"-->"},{"entry":"<!ELEMENT maximum-relative-severity EMPTY>"},{"entry":"<!--"},{"entry":"The name of the relative controller."},{"entry":"-->"},{"entry":"<!ATTLIST maximum-relative-severity relative-controller CDATA #REQUIRED>"},{"entry":"<!--"},{"entry":"The value of the maximum relative severity."},{"entry":"-->"},{"entry":"<!ATTLIST maximum-relative-severity value %severities; #REQUIRED>"},{"entry":"<!--"},{"entry":"Sets relative severity to the described log controller. When there is a relative severity set, the"},{"entry":"effective severity is calculated as the minimum severity of direct severity and severity related"},{"entry":"to its relative."},{"entry":"-->"},{"entry":"<!ELEMENT relative-severity EMPTY>"},{"entry":"<!--"},{"entry":"The name of the relative controller."},{"entry":"-->"},{"entry":"<!ATTLIST relative-severity relative-controller CDATA #REQUIRED>"},{"entry":"<!--"},{"entry":"The value of the relative severity."},{"entry":"-->"},{"entry":"<!ATTLIST relative-severity value %severities; #REQUIRED>"},{"entry":"<!--"},{"entry":"Describes a filter that, besides the effective severity, controls output via the log controller or"},{"entry":"log destination. The results of all filters for a given message are logically anded to determine"},{"entry":"whether a message is to be written to the associated log objects."},{"entry":"-->"},{"entry":"<!ELEMENT log-filter EMPTY>"},{"entry":"<!--"},{"entry":"The type (that is, the full-packaged class name) of the filter."},{"entry":"-->"},{"entry":"<!ATTLIST log-filter type NMTOKEN #REQUIRED>"},{"entry":"<!--"},{"entry":"Associates the log controller that is described in the parent tag log-controller with a formatter"},{"entry":"described in a log-destination tag. Many destinations can be associated with a log controller."},{"entry":"-->"},{"entry":"<!ELEMENT destination-ref EMPTY>"},{"entry":"<!--"},{"entry":"The name of the associated destination."},{"entry":"-->"},{"entry":"<!ATTLIST destination-ref name IDREF #REQUIRED>"},{"entry":"<!--"},{"entry":"Specifies the type of the association. It can be one of these : PRIVATE_LOG, LOCAL_LOG"},{"entry":"or LOG"},{"entry":"-->"},{"entry":"<!ATTLIST destination-ref association-type %association-types; #REQUIRED>"},{"entry":"<!--"},{"entry":"Associates the log controller that is described in the parent tag log-controller with an"},{"entry":"anonymous destination (that is a destination that is not explicitly described with a log-"},{"entry":"destination tag). One cannot specify additional attributes(except type) for an anonymous"},{"entry":"destination."},{"entry":"-->"},{"entry":"<!ELEMENT anonymous-destination EMPTY>"},{"entry":"<!--"},{"entry":"Sets the destination type. You can either specify your own type, or set a default one: FileLog"},{"entry":"or ConsoleLog. If you select a ConsoleLog you do not need to specify Pattern, Limit, and"},{"entry":"Count."},{"entry":"-->"},{"entry":"<!ATTLIST anonymous-destination type NMTOKEN #REQUIRED>"},{"entry":"<!--"},{"entry":"Specifies the type of the association. It can be one of these: PRIVATE_LOG, LOCAL_LOG"},{"entry":"or LOG"},{"entry":"-->"},{"entry":"<!ATTLIST anonymous-destination association-type %association-types;"},{"entry":"#REQUIRED>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"It will be appreciated that other formats or sections may be defined within the scope of the embodiments of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
