---
title: Assessment and analysis of software security flaws in virtual machines
abstract: Security analysis and vulnerability testing results are “packaged” or “bound to” the actual software it describes. By linking the results to the software itself, downstream users of the software can access information about the software, make informed decisions about implementation of the software, and analyze the security risk across an entire system by accessing all (or most) of the reports associated with the executables running on the system and summarizing the risks identified in the reports.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08613080&OS=08613080&RS=08613080
owner: Veracode, Inc.
number: 08613080
owner_city: Burlington
owner_country: US
publication_date: 20110607
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a continuation-in-part of and claims priority to and the benefits of U.S. patent application Ser. No. 12\/884,554, filed on Sep. 17, 2010, which claims priority to and the benefit of U.S. provisional patent application Ser. No. 61\/243,735, filed on Sep. 18, 2009, and is a continuation-in-part of and claims priority to U.S. patent application Ser. No. 12\/819,627, filed on Jun. 21, 2010, which itself is a continuation-in-part of and claims priority to U.S. patent application Ser. No. 12\/031,918, filed on Feb. 15, 2008, which claims priority to and the benefits of U.S. provisional patent application Ser. No. 60\/901,874, filed on Feb. 16, 2007. This application also claims priority to and the benefit of U.S. provisional patent application Ser. No. 61\/352,079, filed on Jun. 7, 2010.","The invention relates generally to systems and techniques for analyzing computer code, and more particularly to determine whether the computer code representing a virtual machine contains security flaws or is vulnerable to known security threats.","In recent years, many companies and government agencies have been exposed to negative press and legal proceedings due to high-profile security breaches in which sensitive data has been either inadvertently disclosed or stolen. While many of these incidents were the result of human error, a significant percentage was traced back to poorly designed software architecture and\/or applications. Conventional techniques for testing software applications can identify many vulnerabilities, but no one methodology is failsafe. Furthermore, although many security-analysis techniques require significant time and resources to administer, not every application necessitates the same level or degree of analysis.","As a result, companies face a difficult trade-off between the desire to test software and limitations on available resources and time. Moreover, many companies do not have the expertise to apply some of the more intricate and complex security assessment techniques, and thus look to industry experts for such services. This creates yet another challenge, in that often what is being tested is highly sensitive, proprietary software.","There are a myriad of testing and assessment techniques for validating various properties of software applications and network implementations. However, one of the most critical processes for ensuring that the deployment of software does not expose an organization to unacceptable risks is security and vulnerability testing. Some of the conventional techniques used to perform such testing includes static analysis (automated code review), dynamic analysis (automated penetration testing) and manual analyses such as code review, design review, and manual penetration testing. All of these analysis techniques are aimed at finding security weaknesses and vulnerabilities in an application and typically provided in report format to the programmers, product managers and quality assurance (QA) staff. The report can provide detailed results (e.g., program names, line numbers, variable names, data connections, etc.) as well as a summary of the results. The report may be a conventional document such as a text file or a structured XML file.","However, once the report is run and reviewed by a QA engineer or product manager, it is typically no longer referenced or used. Furthermore, as an executable or application is implemented and\/or provided to a customer, the report is forever decoupled from the software that was tested. In fact, an individual or organization using software has no knowledge that a report was ever created or used to analyze the software they are now using. As such, valuable information about what aspects of the application were tested, how secure certain features or functions may be and what testing methodologies were used are unknown to those that value such information.","Another trend in systems engineering is the use of so-called \u201cvirtual machines.\u201d Generally, a virtual machine (or \u201cVM\u201d) refers to completely isolated operating system installation within a normal operating system, which may be implemented either using software emulation or hardware virtualization. More specifically, virtual machine is a software implementation of a physical machine (i.e., a computer) that executes programs in the same manner as the machine itself. VMs utilize an \u201cimage file\u201d to store a snapshot of a complete computer system, including all required information describing the computer system such as the operating system, applications, data and all configuration information.","Virtual machines are typically separated into two major categories based on their use and degree of correspondence to a real machine. A system virtual machine provides a complete system platform which supports the execution of a complete operating system, such as Linux or Windows. In contrast, a process virtual machine is designed to run a single program, essentially supporting a single process. An essential characteristic of a virtual machine is that the software running inside is limited to the resources and abstractions provided by the virtual machine. As such, the \u201cfile\u201d containing the VM is a complete and closed environment.","What is needed, therefore, is a system and associated techniques that can produce vulnerability and security test reports using various testing methodologies for virtual machines.","In general, the present invention facilitates security assessment and vulnerability testing of an entire system as instantiated as a virtual machine, including the operating system and registry state, the application suite operating within the system, and the data and control flows among the applications. This testing may be done in a manner responsive to the technical characteristics and the business context in which the virtual machine will be implemented (collectively, \u201cimplementation metadata\u201d). The invention may, for example, determine an appropriate assurance level and test plan to attain it. In many instances, a test plan may dictate performance of different types of analyses. In such cases, the individual tasks of each test are combined into a \u201ccustom\u201d or \u201capplication-specific\u201d workflow, and the results of each test may be correlated with other results to identify a wide range of potential vulnerabilities and\/or faults that are detected by the different tests. As such, a programmer reviewing the results can better understand how different potential vulnerabilities may relate to each other or in fact be caused by a common flaw.","Furthermore, once a virtual machine is created and implemented, the universe of threats that may impact the operating system and\/or applications executing within the machine continues to expand, and therefore the platform preferably provides the infrastructure and methods for continuous, periodic or event-triggered security assessments, even as the virtual machine operates in a secure production environment. Users and\/or owners may simultaneously view both the \u201cinfrastructure\u201d (e.g., source code, architectural components, object code abstractions, user case diagrams, UML diagrams, and\/or website maps) as it exists in the virtual machine and the results of the periodic security assessments, which can remain stored within the analysis platform. For example, in one implementation, the analysis platform runs on a server accessible to the owner r via the Internet. The server periodically uploads (or otherwise accesses) the file containing the virtual machine, starts the machine within the appropriate environment, performs a security analysis, and alerts the user to the results. Owners and\/or users may access the results of this and previous assessments, which are stored on (or retrievable by) the server.","Accumulating both implementation metadata and security analysis and assessment results for numerous virtual machines of differing technical profiles from many companies facilitates benchmarking at many levels within an organization. Use of various \u201canonymizing\u201d and \u201cscrubbing\u201d techniques (i.e., removing any information that could be deemed proprietary and\/or identify an owner) permits the sharing of assessment data among otherwise unrelated entities. Benchmarking may take place on a global scale (i.e., across all virtual machines being monitored), within particular subsets of virtual machines (e.g., those from a specific industry and\/or working with a specific technology), or based on personnel (e.g., for a particular developer, team, organization or company).","In a first aspect, a computer-implemented method of identifying vulnerabilities of a collection of software programs compiled into a virtual machine image includes receiving an image file representing a computer system as a virtual machine and analyzing the image for potential vulnerabilities. More specifically, the image file includes one or more of operating system information, application(s), an application server, application data, and\/or configuration information. The image file is loaded into a computer memory and executed such that the virtual machine is executed on a processor. The executed image file is then analyzed to obtain a listing of potential vulnerabilities.","The analysis may further include extracting files of the virtual machine from the image file and identifying at least one installed application within the virtual machine. Files related to the installed application are identified and separated, and, using a vulnerability database, potential vulnerabilities of each separated file are identified. In some embodiments, detecting potential vulnerabilities may include building a control flow model and\/or a data flow model of the separated files and detecting the potential vulnerabilities by scanning the models. Analysis techniques may include inspecting an operating system and\/or registry files configuration to detect potential vulnerabilities.","In instances in which multiple applications are included in the virtual machine, the interactions among the applications may be analyzed. This may include, for example, building an interaction control flow model and\/or data flow model among the installed applications, and detecting potential vulnerabilities by scanning the interaction models. The analysis may also include scanning the executing image file (and, in some cases, executing applications within the virtual machine) using a network vulnerability scanner and\/or a host vulnerability scanner.","In cases in which an application is executing within the virtual machine, the analysis may include connecting to the application, providing input to the application, and inspecting a response from the executing application to the input to detect potential vulnerabilities. The input may be test input, user credentials, user interface navigational input, and\/or user input. In some instances, fuzz testing may be performed on the executing application by sending test data to the executing application through a network port and inspecting a response of the executing application to the test data to detect potential vulnerabilities. If the executed application does not respond to the test data, the image file may be re-executed and reloaded until the test data produces a result. The potential vulnerabilities identified during the scan may then be added to the list of potential vulnerabilities.","A security report may be compiled from the list of potential vulnerabilities. In some instances, a score may be computed based on the report and compared with scores from prior implementations of the virtual machine and\/or other virtual machines tested in a similar fashion. The score may be based on a validation policy to which the security report is compared, and the comparison may result in a set of security data that, in some cases, may be associated with the image file using a secure hash, digital signature, or other method.","In another aspect, a system is provided for analyzing vulnerabilities of a virtual machine represented using an image file. The system includes a load-execute module to load and execute the virtual machine represented by the image file and a file extractor to extract files included in the image file. An analyzer to identifies the flow of information among the extracted files and a profiler detects potential vulnerabilities of each identified flow. A scanner detects potential vulnerabilities in the executing virtual machine, and a reporter combines the detected vulnerabilities into a security report comprising a listing of potential vulnerabilities and produces a security score. A validator compares the security report with a validation policy and to associates security data with the image file.","In some cases, the system also includes an application identifier to identify applications installed within the virtual machine and an interaction analyzer to identify flow of information among the identified applications. A tester tests the executing applications by providing test data to the applications and detects potential vulnerabilities by analyzing responses of the executing application to the provided test data.","In another aspect, a method of authenticating a virtual machine includes sending an image file representing a computer system as a virtual machine to a security analyzer and receiving security data from the security analyzer. The security data is analyzed with reference to a security policy to determine compliance of the represented computer system with the security policy. If the computer system is determined to be compliant, the image file is loaded and executed to implement the represented computer system as a virtual machine.","The security data may, in some instances, include a security signature, and in such cases the authenticity of the security signature is determined. In other implementations, the security data is in the form of a security report, which may be compared to the security policy.","Other aspects and advantages of the invention will become apparent from the following drawings, detailed description, and claims, all of which illustrate the principles of the invention, by way of example only.","Architecture and Approach","The techniques and supporting systems described herein provide a comprehensive and customizable approach to detecting security flaws in an entire computational environment implemented as a virtual machine. The technique recommends remedial courses of action, and provides reporting and benchmarking against, for example, industry-wide statistics, other developers and\/or other development teams from within or outside of an organization. The virtual machine may include (but is not necessarily limited to) an instantiation of one or more operating systems, applications, databases as well as any sort of instructions for a machine, including, for example, without limitation, a component, a class, a library, an script, an applet, a logic table, a data block, or any combination or collection of one or more of any one or more of these. An appropriate level, type and frequency of security analysis needed for a virtual machine may depend on many factors, including (but not necessarily limited to) the technical details of the virtual machine (e.g., the operating system it uses and the platform on which is to be deployed) as well as the business context in which the applications operating within the virtual machine. For example, a virtual machine that includes an application that is \u201ccustomer-facing\u201d and facilitates high-volume, secure transactions such as banking or ecommerce will require rigorous testing to ensure that customer data is not jeopardized. Conversely, applications such as document-control systems or desktop applications that are implemented entirely within an organization and operated behind secure firewalls require less stringent testing. Therefore, balancing the added costs for executing additional security assessments and testing with the risks of potential for losses is critical",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1","b":["105","105","110","115","105","120","125","120","120","120","105","120","150","105"]},"The analysis engine  receives virtual machine files from a user, either via the entity operating the platform  or directly from customers using the platform  as a subscription service. The analysis engine  interacts with various testing engines and code review modules, as well with assessment and threat databases, and includes benchmarking and reporting capabilities for comparing assessment results among applications, developers, teams and\/or organizations. In one embodiment, for example, the analysis engine  interacts with a dynamic testing engine , a static testing engine , a pen testing engine  and a module for performing manual code review .","In implementations in which the platform is used to analyze a virtual machine, a static analyzer emulates the virtual machine by loading the image into memory and extracting all (or in some cases a predefined subset) of the files within the system. The files may be identified using filenames, signatures, and\/or unique file hashes. The configuration and executable files for installed and executing applications are identified and separated. Each application is then sent to a binary\/executable static analyzer for security analysis. The analyzer uses a public or private vulnerability database to look for known vulnerabilities in identified applications and operating system components.","As an example, a virtual machine may include a Linux-based operating system, a Java application server, application data, and\/or business applications written in Java. The static virtual machine image analyzer inspects the virtual machine image file and identifies the files that make up the OS, the application server and the business applications. The files that make up the business application executable and describe the application's configuration are sent to a binary\/executable static analyzer for security analysis. The static analyzer builds a control flow and data flow model of the application and scans the model for security and quality flaws at the code level. If there are multiple business applications on the system, each is sent to the static analyzer for analysis. The application server software and other software components installed on the system are also identified and sent to the static analyzer.","In addition to analyzing the applications installed on the system for security and quality flaws, the security configuration of the system can be analyzed by inspecting the operating system configuration and\/or registry files to discover additional vulnerabilities.","In cases where multiple business applications are installed, the system can analyzes of the suite of applications as they interact in a multi-tier or other multi-application\/multi-process architecture. The data and control flows within and among the applications are discovered and a multi-application\/multi-process model is analyzed for security and quality flaws.","The security analysis of each application and the security analysis of the operating system configuration may be combined into a single package, thus creating an overall security analysis of the entire system.","Static analysis of a virtual machine image file provides an independent security check of an entire system\u2014operating system, infrastructure and applications\u2014that runs in a virtual machine. This check can be done before or after deployment of the system. In most cases, static analysis does not require test data or access to other systems to execute as designed, as the analysis is primarily concerned with application flow independent of specific inputs. As such, a static virtual machine image security analysis may be performed before a virtual machine image is deployed to its production environment.","In addition to static analysis, the virtual machine image may be loaded into the appropriate virtual machine and \u201cstarted\u201d (executed) to facilitate dynamic analysis. The executing virtual machine can then be analyzed using various network and host vulnerability scanners to identify and quantify known vulnerabilities. If any additional applications are discovered to be running, these too may be subjected to dynamic analysis.","For example, a running web application may be analyzed using a dynamic web application scanner. The web application scanner connects to the web application and tests it by providing test inputs and inspecting the responses, looking for security and quality flaws. If login credentials or application navigation information and sample input data for the web application is known, it can be provided to the web scanner to enhance the coverage of the analysis.","Other discovered running non-web applications may be subjected to fuzz testing (also known as fault injection testing) over network ports or through other inputs such as file inputs. The fuzz testing sends test data to a network port and the response is inspected to determine if a security or quality flaw exists. Fuzz testing can, in some instances, cause the application to stop responding due to a crash or hang if an error or flaw is encountered. In such cases, the virtual machine can be restarted so testing can continue.","The results from the network, host, and individual application scans is compiled into a single scan report to create an overall security score for the entire system. The security score can be compared to scores from other virtual machine or non-virtual machine implementations of a similar configuration to determine how a particular instantiation compares to its peers, or itself over time.","More specifically, the dynamic analysis engine  interacts with the applications  within the virtual machine as an external entity and executes the application  in a manner that mirrors or emulates the runtime environment in which it operates. In some embodiments, the dynamic analysis engine  receives a description of the interfaces to the application , sends test and\/or simulation data to the application via the interfaces, and analyzes the received responses. The test data may be application-specific (e.g., provided with the application as a library, data file, or structured input) or application-agnostic, such as data and\/or scripts known to exploit application vulnerabilities. Based on the responses, the dynamic analysis engine  determines whether any security defects exist in the application  and the extent to which it may be vulnerable to certain threats. The defects may be reported in real-time (e.g., via the communications server ) and\/or stored in a database for subsequent analysis and reporting.","The static analysis engine  receives a binary or bytecode version of the application  as input. For example, a high-level semantic model of the application  is created containing control-flow and data-flow graphs of the application , and this model then analyzed for quality defects, including security flaws, by a set of analysis scans.","The pen testing engine  performs penetration testing of the application . Penetration testing includes, for example, simulating and analyzing various web-based interactions between a client and the server on which the application  operates. This includes executing standard HTTP commands such as GET and POST, analyzing FORM elements and scripting elements (both client and server-side), and manipulating inputs to elicit known vulnerabilities.","The analysis engine  may also receive input from manual review processes executed using a manual code review module . Manual review processes typically include a human operator visually reviewing source code to determine if proper coding form and standards have been followed, and looking for \u201cextra\u201d functions often left in applications such as trap doors, easter eggs, and similar undocumented functionality.","For web-based applications, a dynamic web scan may be used to \u201ccrawl\u201d through the application by manually navigating the web site to be tested. In this manner, a person or automated \u201cbot\u201d interacts with all (or some selected subset) of the user interface elements and enters valid data. In some cases, pre-defined invalid data (either in format or substance) may be included to test the application's response. In some cases, an automated testing process such as a regression test harness may also be used. During the crawl, a browser plug-in or a proxy running on the client records all web requests to and responses from the web application. After the crawl has successfully navigated the web application, the recording process is stopped. The recorded requests and responses may be uploaded to the analysis engine . In some instances the crawl may be performed by the entity operating the platform , whereas in other instances the crawl may be performed by the owner of the application being tested, and the resulting data and application loaded into the platform together.","The data, scripts and functions used to operate the various testing engines and the analysis engine  may be stored in a security-threat database . The database  may be operated as a stand-alone server or as part of the same physical server on which the analysis engine  operates. Portions of the threat database  may, in some cases, be provided by entities other than the entity operating the platform  on a subscription basis, allowing the database  to be kept up to date as threats and malware evolve over time. Likewise, the results of each test and the overall analysis process may be stored in an assessment-results database . In some embodiments, the applications and analysis results are stored in an encrypted format using a unique key provided to the owner of the analyzed application  such that only it can access and review the results of the analysis. In such cases, decryption of the analysis is limited to authorized personnel and all traces of the analysis are deleted from memory (other than the database ) following completion.","Examples of database applications that may provide the necessary features and services include the MySQL Database Server by Sun Microsystems, the PostgreSQL Database Server by the PostgreSQL Global Development Group of Berkeley, Calif., or the ORACLE Database Server offered by ORACLE Corp. of Redwood Shores, Calif.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 2","b":["125","125","205","210","215","220","130","145","225","230","235","240","245","250","255"]},"More specifically, the assurance recommendation engine  receives applications and application metadata and automatically determines various characteristics of the application. For example, the recommendation engine  may recognize the programming language used to write the application , specific libraries used within the application, the development environment used to build the application, application programming interfaces (APIs) available to users, the size of the application, as well as other technical qualities. Moreover, the entity responsible for submitting the application (which may be the owner of the application, a licensee, or an end user) may provide additional business context information such as the required availability (e.g., 99.99% uptime), expected throughputs or transaction volumes, types of users who will operate the application, whether the application will be exposed to the public, the operating system in which the application executes, other applications with which the application interacts, and others.","The metadata is supplied by the entity operating the platform, the owner of the application, or, in some cases, may be provided by a third party. In such cases, the metadata may include information related to the specific application, a group of applications (e.g., all banking applications within a retail bank), an enterprise-wide collection of applications, or, in some cases, industry-wide data.","The recommendation engine  considers these technical and business characteristics and application metadata and determines a recommended assurance level. As described in more detail below, the assurance levels are used by the workflow constructor  to define an assessment workflow based on various testing techniques such as dynamic application testing, static binary testing, automated and manual pen testing, as well as manual code review.","Once a workflow has been established by the workflow constructor , a workflow engine  submits the application to the various testing engines. The results of these tests may include such items as error rates, specific occurrences of errors, compliance with industry standards, as well as other data. The assessment correlation engine  correlates the different test results received from the testing engines - and organizes them by application module and type of error, identifies duplicates, and recognizes correlations among different errors.","The analysis engine also may include a grading and reporting module  that includes a benchmark module , an anonymizer  and a flaw viewer . The benchmark module  compares the testing and analysis results for one or more applications having similar application profiles and\/or metadata. This allows the application's owner to see how the application's architecture and security features measures up against other similar applications.","In some instances, the benchmark engine  calculates and compares test results at a more granular level. For example, an organization may wish to determine which of its developers (or development teams) produces the best code, the most secure applications, or is most prone to development errors. By including information such as the code author, development group, and\/or other organizational information, the platform may be used within a company to identify core strengths and\/or key weaknesses.","The anonymizer  removes company-specific information from the results and\/or aggregates the results such that they may be provided to subscribers or the public in general. In this manner, the platform  provides global view of software development and implementation trends related to security and vulnerability testing across a wide spectrum of industries and technologies.","As an example, a bank may be developing a new customer service application that allows its clients to execute transactions via the Web. Based on the technology used to develop the application (e.g., Active Server Pages, java, PHP), the fact that the application is available to the general public, and the information transmitted is highly sensitive (account numbers, PINs, etc.), the assurance recommendation engine  may determine that this application be tested as fully as possible. Each testing engine will then process the application (either remotely or as received at the platform ) and the results are correlated into a comprehensive assessment report. Once completed, project managers at the bank may log into the platform using secure IDs and passwords, biometric authentication, PKI techniques or other such methods and, using the flaw viewer , review and comment on any vulnerabilities identified during testing. On some cases, the project managers may also see how the application fared against similar applications submitted by other banks.","In some embodiments, the vulnerability and quality scans are performed during the development of an application, and as such the results may be shared with the development team in real-time. This allows programmers and project managers to be apprised of potential flaws in their code prior to system testing or deployment, greatly reducing the time and cost to implement large-scale systems. In some cases, ongoing trends derived from industry-wide statistics (e.g., a bank's peer group is shifting to a newer, more secure java framework, or has migrated from MySQL to Oracle) are provided to help guide developers' efforts. In other instances, the prevalence of certain code across an enterprise or industry (e.g., commonly-used open source components, for example) is tracked over time and periodic updates may be sent to developers know to be using the code if newly discovered issues (technical, legal or both) are identified.","Regardless of the implementation, the method of implementing and distributing the various components of the platform is arbitrary. For example, in some implementations all components of the platform may be completely contained within an organization (e.g., within a firewall, accessible via a VPN or intranet) and available as an \u201con-demand\u201d service as part of an overall development methodology. In other embodiments, the platform may be implemented as a web-based service available to numerous organizations that \u201csubscribe\u201d to the platform and are therefore able to subject their software applications to structured security assessment testing on an as-needed basis. Furthermore, various \u201canonymizing\u201d or aggregation techniques can be used to remove or otherwise protect proprietary information and\/or data that would identify the application owner. Assessment results from numerous applications across industries, technical platforms, application sizes, etc. can be extracted to provide cross-entity benchmarking data to platform subscribers. In addition, analysis of the assessment results and subsequent monitoring of the applications (for undetected security flaws or unexpected operational reactions to certain threats, for example) allow the platform , and specifically the workflow engine , to be refined and improved. By operating the platform  as a centralized yet secure resource for multiple entities, assessment data can be used for historical and industry benchmarking, as well as to upgrade the techniques used to determine assurance levels and built appropriate workflows.","In such cases, the need to securely transmit application code (both binary and source) to and from the platform  is crucial. One method for implementing the needed security measures is via digital rights management (DRM). In general, DRM refers to various access control technologies used by publishers and copyright holders to limit access to and\/or usage of digital media or devices. Just as DRM is used to protect conventional copyrighted material (e.g., audio and video content), it may also be employed to protect source and binary code of an application as well the analysis and testing results generated by the platform . More specifically, a DRM packager  may be used to encrypt some or all of the application information and produce a key to decrypt the information. A DRM engine  executes the encryption and decryption functions that allow users to securely view application data via a remote device. Further operational and functional characteristics of DRM modules ,  are set forth below.","Referring to , implementations used to analyze and report on a virtual machine image file F may include additional functional modules. For example, the file F is provided to a load and execute module , which loads and executes the virtual machine represented by the image file. A file extractor  extracts files from the image file for subsequent analysis, testing and execution, either as stand alone files or as part of an executing application. The analysis engine  then analyzes the extracted files for potential vulnerabilities. This may include the use of a profiler and\/or scanner to detect the vulnerabilities within data flows among the identified files and applications as they execute within the virtual machine. A reporter  combines the detected vulnerabilities into a security report comprising a listing of potential vulnerabilities, and in some instances produces a security score based on the listing. A validator  compares the security report with a validation policy and associates the resulting security data with the image file.","In some implementations, an application identifier  and interaction analyzer  may be used to further identify installed applications within the virtual machine image file F and identify the information flow among the applications. Test data may also be provided (using, for example, a testing module) to the virtual machine to detect potential vulnerabilities and other security flaws.","Assessment and Recommendation","Referring now to , one embodiment of the assessment and recommendation techniques of the invention includes three phases\u2014a data-collection phase, an assurance-level determination phase, and a workflow-build phase. More specifically, the data-collection phase includes collecting technical details (STEP ) about the virtual machine image file and the applications operating within the machine, such as the platform on which it will be built and\/or implemented, the network topology over which it will operate, the language or languages used to develop the application, third-party applications or modules the virtual machine will interact with or use, the security environment in which the virtual machine will operate, as well as other characteristics. In addition, the business context in which the virtual machine will operate is determined (STEP ), and combined with the technical details to produce an virtual machine profile P. In one non-limiting example, some or all of the business factors identified in the Federal Information Processing Standard (FIPS) (i.e., damage to reputation, financial loss or business liability, harm to business interests, unauthorized release of sensitive information, personal safety, civil liability and potential criminal violations) can be used as guidelines for measuring the security risks in light of the business context of the virtual machine. Each of the FIPS factors can be assigned a rating (e.g., as n\/a, minimal, moderate or serious), and in some embodiments certain factors are weighted more than others according to relative importance, (e.g., as defined by a user or industry standards). For example, a virtual machine that includes an application that processes healthcare data including personally identifiable information may accord a rating of \u201cserious\u201d to factors such as damage to reputation, liability, unauthorized release of sensitive information and criminal liability, but \u201cn\/a\u201d for personal safety. In instances in which this analysis has previously been done and an assurance level already determined, that assurance level can be imported (STEP ), and in some circumstances updated if necessary.","If an assurance level was provided with the virtual machine or for the applications operating within the virtual machine as part of the data collection phase (DECISION STEP ), the analysis workflow can be built. Otherwise, the assurance recommendation engine reviews the virtual machine profile P and determines an appropriate assurance level (STEP ). One approach for determining an appropriate assessment level is to consider the ratings assigned to each of the business context factors, and select an appropriate assurance level based on the highest rating. For example, if any of damage to reputation, financial loss, harm to business interests, release of sensitive information or civil or criminal violations are rated \u201cserious,\u201d the highest assessment level is recommended. If, however, all factors are either minimal or n\/a except for, e.g., the \u201ccivil violations\u201d factor (which is assigned a \u201cmoderate\u201d rating), a lower but still relatively high assurance level is specified. Table 1 below summarizes one possible mapping of business impact factors and their ratings to recommended assessment levels.",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Assurance Level Profiles"},{"entry":"Assurance Level Impact Profiles"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Potential Business Impact Categories for",{},{},{},{}]},{"entry":["Application Flaws","AL2","AL3","AL4","AL5"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["1. Inconvenience, distress or damage to","Min","Mod","Mod","Serious"]},{"entry":"\u2002\u2009 standing or reputation"},{"entry":["2. Financial loss or business liability","Min","Mod","Mod","Serious"]},{"entry":["3. Harm to business interests","N\/A","Min","Mod","Serious"]},{"entry":["4. Unauthorized release of sensitive","N\/A","Min","Mod","Serious"]},{"entry":"\u2002\u2009 information"},{"entry":["5. Personal Safety","N\/A","N\/A","Min","Mod"]},{"entry":["6. Civil or criminal violations","N\/A","Min","Mod","Serious"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"The recommended assurance level (and in some cases options to modify the level) can then be presented to the user (STEP ), who selects the assurance level (STEP ) for the particular virtual machine implementation or, alternatively for the individual applications within the virtual machine.","In the workflow build phase, varying combinations of analysis techniques can be used to adapt a security review workflow to the particular technical and business criteria of an application, with one key goal being the reduction of false negatives, i.e., undetected security flaws. Different types of analysis (e.g., automated, manual, static, dynamic, etc.) have different false negative rates because they are either unable to detect particular security defects (100% false negative rate) or they have varying levels of false negatives depending on the threat. As a result, introducing additional security analysis processes into the workflow lowers the false negative rate. But multiple analysis techniques require the expenditure of more time and resources, and so should be integrated into the workflow when they contribute meaningfully to the overall reliability of the analysis or to lower the false negative rate below a predetermined threshold.","In one implementation, the workflow W is constructed (STEP ) by selecting different analysis techniques from the following table. The higher the desired assurance level, the more analysis techniques are recommended. The analysis techniques are arranged according to the time and resources estimated to perform the analysis, thereby minimizing costs and only introducing more stringent analyses when the impact of a security event is greater. Once the workflow is determined and approved by the user, the various analysis techniques are performed. Table 2 below illustrates how various analysis techniques may be used against applications with different assurance levels.",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Analysis\/Assurance Level Mapping"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"7pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Analysis","Assurance Levels",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Techniques","AL1","AL2","AL3","AL4","AL5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"6","align":"center","rowsep":"1"}}]},{"entry":[{},"Automated","None","\u2022","\u2022","\u2022","\u2022"]},{"entry":[{},"Static Analysis","Required"]},{"entry":[{},"Automated",{},{},"\u2022","\u2022","\u2022"]},{"entry":[{},"Dynamic"]},{"entry":[{},"Analysis"]},{"entry":[{},"Manual",{},{},{},"\u2022","\u2022"]},{"entry":[{},"Dynamic"]},{"entry":[{},"Analysis"]},{"entry":[{},"Manual Code",{},{},{},{},"\u2022"]},{"entry":[{},"Review"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"6","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Combining multiple types of application analysis generally produces a broader application vulnerability profile. For example, combining binary static analysis and dynamic analysis techniques provides increased accuracy and more informative analysis results because the outcome of a binary static analysis can be used as input into a secondary dynamic analysis. The dynamic analysis process itself produces two results: a dynamic assessment and a static coverage map. The static coverage map contains each dynamic path used to reach a flaw detected during the static analysis.","The static results, dynamic results, and static coverage map are used to produce a report of static flaws not pathed (lowest priority), static flaws with a dynamic path (high priority), and dynamic flaws not related to the portions of the application that have been statically analyzed (e.g., environment\/configuration). The data flow and control flow graphs generated by static analysis may also be used to compute a dynamic test case for each identified flaw. In such cases, input data and an input vector may be generated that will recreate and retest each flaw dynamically to determine if the flaws have been addressed. More specifically, and with reference to , the following steps can be performed to combine results from both the static and dynamic testing:\n\n","In some embodiments, continuous application assurance provides for automatic re-analysis of a virtual machine image file and the applications operating within the virtual machine. Re-analysis is triggered by changes in the external environment (e.g., threat space, business intelligence, detected attacks) and\/or the implementation of enhanced analysis capabilities (e.g., a new scan has been added to an analysis workflow to detect new class of vulnerability). An intelligent re-analysis decision can be made by taking into account factors such as application profile, previous vulnerability assessment results, and the type of change (e.g., threat and\/or scan capability).","A decision to initiate a re-analysis can be based, for example, on a technological profile, metadata describing the functionality of a virtual machine and\/or the applications operating within the machine, the deployment environment of the virtual machine, new information about vulnerabilities that may affect the virtual machine, and\/or increases in a likelihood of a threat. External data feeds and internal scan capabilities database may be used to trigger rescans of the virtual machine or specific applications within the machine. For example, suppose a new vulnerability is discovered in how data is transmitted and processed using XML and Web Services that did not exist when a particular application within a virtual machine was first scanned. All virtual machines that include applications having metadata that includes both XML and Web Services are identified, and the relevant analysis workflows are updated with the new scan information and re-processed.","In one embodiment, with reference to , the initial steps for an application-specific or customer-driven rescan include:\n\n","In some implementations, the rescanning process may be implemented as a required step for submitting a virtual machine, code or applications to a third-party application platform. For example, an entity that provides a suite of community-developed applications for its communications and entertainment devices (e.g., the AppStore by Apple) may, as a condition for offering an application, require the application be scanned prior to being made available to the public. The scan may be done prior to an initial upload, as well as on a periodic basis. In some instances, the scan may not be required, but a recognizable label (e.g., an icon, or image) is shown alongside the application to indicate that it has been scanned for potential vulnerabilities. In other cases, a user may be offered the application for free, but, if they want the additional assurance of having the application scanned, may pay a nominal fee (e.g., $2.99).","In addition to single application rescans as described above, a platform-wide rescan may also be initiated in which multiple applications (possibly owned and\/or operated by unrelated entities) are rescanned. In addition, application owners may \u201csubscribe\u201d to a periodic and\/or event driven rescan service that continuously determines if rescans are necessary and if so, performs the appropriate analysis. More specifically, and referring to , one method for implementing a global rescan includes the following steps:\n\n","In some embodiments in which a static binary analysis is performed remotely (e.g., within the security assessment platform separate from the operational environment in which the virtual machine is implemented or where its source code is stored), the results of the binary analysis can be linked to the original virtual machine image file. These results are typically stored and managed securely on within the platform , but can be viewed by a remote user together with local virtual machine image fileusing a viewer application.","Referring to , one method for providing simultaneous viewing of identified virtual machine flaws along with the application source code that caused the flaws can include the following steps:\n\n","In some embodiments, the platform  provides a common repository for metadata as well as assessment results for numerous virtual machines and applications across a variety of technical and business implementations and\/or of known quality. By maintaining such a database, the platform can provide cross-application reporting that compares a particular application (or group of applications implemented within a virtual machine) to others in the same industry, to applications that use the same technology, and\/or based on other criteria rendering one class of application relevant to another. In some instances, assessment results may be compared to those generated by a template application to determine the quality of the application as compared to an application of known quality. Such reporting (referred to as \u201cpeer benchmarking\u201d) allows an organization to gauge the effectiveness of its own security initiatives relative to other companies in the same industry. Because the assessment platform provides consistent and repeatable security-analysis techniques, a common assessment vocabulary and a large sample size, the information provided to users has a greater global relevance than individual application assessment data.","Referring to , one method for providing peer benchmarking reporting to users of the platform includes the following steps:\n\n","Once the results database  is populated with assessment results from a sufficient number of virtual machines and applications, users can specify and view various reports. Some reports, for example, can indicate how, statistically, a particular image file or application compares to its \u201cpeers\u201d by indicating the percentage of all assessed images or applications (or some subset thereof) that resulted in fewer potential vulnerabilities. In one example, with reference to , the benchmark reporting process can include the following steps:\n\n","The vulnerability assessment process consumes and produces data that is considered highly confidential by most organizations. For example, input into the analysis phase can include the virtual machine image file, application source code, application binaries and debug symbols, and\/or environment data (URLs, usernames\/passwords, site maps). Because of the sensitive nature of this data, and because they indicate potentially exploitable security flaws, provision is desirably made to keep the analysis results confidential. In instances in which the platform is operated as a centralized, offsite service, the need to secure this sensitive information becomes even more crucial. In various embodiments, the DRM packager  and engine  provide the following capabilities:\n\n","Using the DRM engine , steps may be taken to protect the initial data provided as input to the assessment process as well as the analysis results. Once the submission data has been packaged into a secure container, access is granted to the trusted analysis application for the duration of the analysis. Analysis results can then be packaged into a secure container for remote viewing. A trusted secure viewer application (in conjunction with the DRM Client engine and access token) ensures that the analysis results are viewed by authorized users and prevents unauthorized copying via printer, cut\/paste, print screen, or file copy.","Referring to , the following steps provide the secure receipt and analysis of application source files and assessment data to and within the platform:\n\n","Referring to , once the analysis data is stored in the database, it can then be packaged and transmitted using similar DRM techniques and the following steps:\n\n","In some implementations, security analysis and vulnerability testing results may be \u201cpackaged\u201d or \u201cbound to\u201d the actual software it describes. In some cases, the software may be a commercially-available product delivered via traditional methods such as CD-ROM or download, whereas in other cases the software may be a website or collection of websites that provide the software and\/or services over the Internet, commonly referred to as software as a service, or \u201cSaaS\u201d. In still other cases, software may refer to a collective of otherwise unrelated applications and services available over the internet, each performing separate functions for one or more enterprises, (i.e., \u201ccloud\u201d computing). In yet other instances the software may be a complete operational environment implemented as a virtual machine that includes an instantiation of an operating system and multiple user applications. By linking the report to the software itself, downstream users of the software can access information about the software, make informed decisions about implementation of the software, and analyze the security risk across an entire system by accessing all (or most) of the reports associated with the executables running on the system and summarizing the risks identified in the reports.","Numerous techniques may be used for binding the report to and\/or associating the report with the executable. In some implementations, for example, the binding can be \u201cweak\u201d in that the executable name and version number are listed in the report and referenced either manually or automatically. If the report information is accessed programmatically, an executable a query can be submitted to a database storing a collection of software security reports and the desired report retrieved. The database may be private (e.g., behind a firewall and accessible only to authorized users or employees) or public, and made available via the Internet to the general population for query and review.","In other instances, the report may be \u201cloosely\u201d bound to the software by computing a cryptographically secure hash of the software and including the hash in the body, metadata or header of the report. In such cases, users of the software are provided with a hash program that computes the required hash and submits the hash as a lookup key to a database of reports. In this instance, the reports remain somewhat \u201cdecoupled\u201d from the software as there may be many report providers and the reports may be updated over time without needing to redistribute the software which is desirable given the ever-changing threat landscape.","In another implementation, a \u201cstrong\u201d binding between the software and its vulnerability report uses a URL as a unique reference address of the report or, in some cases, the report is embedded alongside software binaries in environments that support application packages. While not as flexible as the weak or loose techniques described above, no lookup is needed and the report can \u201ctravel\u201d with the software. For environments that support application packages (WAR, EAR, JAR, Mac OS X app packages) the report is a file alongside the manifest in the bundle.","The vulnerability reports can be expressed in an XML format so that automated processes can query the report based on predetermined tags and find the information needed to make security decisions regarding the executable. The report may be cryptographically signed by the report provider so that tampering with the report contents can be detected\u2014particularly important when the report is embedded in the binary or included in an application package. An example of XML that may be used to generate a report (or a portion of a report) is provided in the table below:",{"@attributes":{"id":"p-0099","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002<?xml version=\u201c1.0\u201d encoding=\u201cISO-8859-1\u201d ?>"]},{"entry":["-","<detailedreport xmlns=\u201chttp:\/\/www.veracode.com\/schema\/reports\/export\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"report_format_version=\u201c1.1\u201d app_name=\u201cSample Application\u201d version=\u201c1.0\u201d"]},{"entry":[{},"platform=\u201cJava\u201d generation_date=\u201c2009-09-17 18:30:34 UTC\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["-","<static-analysis>"]},{"entry":["-","<modules>"]},{"entry":[{},"<module name=\u201csample.war\u201d compiler=\u201cJAVAC_6\u201d os=\u201cJava J2SE 6\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"architecture=\u201cJVM\u201d score=\u201c58\u201d numflawssev1=\u201c0\u201d numflawssev2=\u201c14\u201d"]},{"entry":[{},"numflawssev3=\u201c258\u201d numflawssev4=\u201c7\u201d numflawssev5=\u201c0\u201d \/>"]},{"entry":[{},"<\/modules>"]},{"entry":[{},"<\/static-analysis>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["-","<dynamic-analysis>"]},{"entry":["-","<modules>"]},{"entry":[{},"<module name=\u201cdynamic_analysis\u201d compiler=\u201c\u201d os=\u201c\u201d architecture=\u201c\u201d score=\u201c98\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"numflawssev1=\u201c0\u201d numflawssev2=\u201c2\u201d numflawssev3=\u201c2\u201d numflawssev4=\u201c0\u201d"]},{"entry":[{},"numflawssev5=\u201c0\u201d \/>"]},{"entry":[{},"<\/modules>"]},{"entry":[{},"<\/dynamic-analysis>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<severity level=\u201c5\u201d \/>"]},{"entry":["-","<severity level=\u201c4\u201d>"]},{"entry":["-","<category categoryid=\u201c19\u201d categoryname=\u201cSQL Injection\u201d pcirelated=\u201ctrue\u201d>"]},{"entry":["-","<desc>"]},{"entry":[{},"<para text=\u201cSQL injection vulnerabilities occur when data enters an application"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"from an untrusted source and is used to dynamically construct a SQL query. This"]},{"entry":[{},"allows an attacker to manipulate database queries in order to access, modify, or"]},{"entry":[{},"delete arbitrary data. Depending on the platform, database type, and"]},{"entry":[{},"configuration, it may also be possible to execute administrative operations on"]},{"entry":[{},"the database, access the filesystem, or execute arbitrary system commands."]},{"entry":[{},"SQL injection attacks can also be used to subvert authentication and"]},{"entry":[{},"authorization schemes, which would enable an attacker to gain privileged"]},{"entry":[{},"access to restricted portions of the application.\u201d \/>"]},{"entry":[{},"<\/desc>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["-","<recommendations>"]},{"entry":["-","<para text=\u201cSeveral techniques can be used to prevent SQL injection attacks. These"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"techniques complement each other and address security at different points in"]},{"entry":[{},"the application. Using multiple techniques provides defense-in-depth and"]},{"entry":[{},"minimizes the likelihood of a SQL injection vulnerability.\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<bulletitem text=\u201cUse parameterized prepared statements rather than dynamically"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"constructing SQL queries. This will prevent the database from interpreting the"]},{"entry":[{},"contents of bind variables as part of the query and is the most effective defense"]},{"entry":[{},"against SQL injection.\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<bulletitem text=\u201cValidate user-supplied input using positive filters (white lists) to"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ensure that it conforms to the expected format, using centralized data"]},{"entry":[{},"validation routines when possible.\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<bulletitem text=\u201cNormalize all user-supplied data before applying filters or regular"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"expressions, or submitting the data to a database. This means that all URL-"]},{"entry":[{},"encoded (%xx), HTML-encoded (&#xx;), or other encoding schemes should be"]},{"entry":[{},"reduced to the internal character representation expected by the application."]},{"entry":[{},"This prevents attackers from using alternate encoding schemes to bypass"]},{"entry":[{},"filters.\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<bulletitem text=\u201cWhen using database abstraction libraries such as Hibernate, do"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"not assume that all methods exposed by the API will automatically prevent SQL"]},{"entry":[{},"injection attacks. Most libraries contain methods that pass arbitrary queries to"]},{"entry":[{},"the database in an unsafe manner.\u201d \/>"]},{"entry":[{},"<\/para>"]},{"entry":[{},"<\/recommendations>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["-","<cwe cweid=\u201c89\u201d cwename=\u201cFailure to Preserve SQL Query Structure (\u2018SQL"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Injection\u2019)\u201d pcirelated=\u201ctrue\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["-","<description>"]},{"entry":[{},"<text text=\u201cThis database query contains a SQL injection flaw. The function call"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"constructs a dynamic SQL query using a variable derived from user-supplied"]},{"entry":[{},"input. An attacker could exploit this flaw to execute arbitrary SQL queries"]},{"entry":[{},"against the database.\u201d \/>"]},{"entry":[{},"<\/description>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["-","<staticflaws>"]},{"entry":["-","<flaw issueid=\u201c83\u201d module=\u201csample.war\u201d severity=\u201c4\u201d type=\u201cFailure to Preserve SQL"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Query Structure (\u2018SQL Injection\u2019)\u201d description=\u201cThis database query contains a"]},{"entry":[{},"SQL injection flaw. The call to java.sql.Statement.executeQuery( ) constructs a"]},{"entry":[{},"dynamic SQL query using a variable derived from user-supplied input. An"]},{"entry":[{},"attacker could exploit this flaw to execute arbitrary SQL queries against the"]},{"entry":[{},"database. Avoid dynamically constructing SQL queries. Instead, use"]},{"entry":[{},"parameterized prepared statements to prevent the database from interpreting"]},{"entry":[{},"the contents of bind variables as part of the query. Always validate user-"]},{"entry":[{},"supplied input to ensure that it conforms to the expected format, using"]},{"entry":[{},"centralized data validation routines when possible. References: CWE"]},{"entry":[{},"(http:\/\/cwe.mitre.org\/data\/definitions\/89.html) OWASP"]},{"entry":[{},"(http:\/\/www.owasp.org\/index.php\/SQL_injection)\u201d note=\u201c\u201d cweid=\u201c89\u201d"]},{"entry":[{},"remediationeffort=\u201c3\u201d exploitLevel=\u201c0\u201d sourcefile=\u201csample1.java\u201d line=\u201c213\u201d"]},{"entry":[{},"sourcefilepath=\u201corg\/sample\/utils\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["-","<mitigations>"]},{"entry":[{},"<mitigation action=\u201cMitigated by Design\u201d description=\u201cThe tainted data in this case"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"comes from locked down database system tables.\u201d user=\u201cDemo User\u201d"]},{"entry":[{},"date=\u201c2009-09-04 14:12:34 UTC\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<mitigation action=\u201cMitigation Accepted\u201d description=\u201cThis makes sense.\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"user=\u201cDemo User\u201d date=\u201c2009-09-04 14:12:53 UTC\u201d \/>"]},{"entry":[{},"<\/mitigations>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["-","<exploitability_adjustments>"]},{"entry":["-","<exploitability_adjustment score_adjustment=\u201c\u22121\u201d>"]},{"entry":[{},"<note>The source of the tainted data in this web application flaw is not a web"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"request.<\/note>"]},{"entry":[{},"<\/exploitability_adjustment>"]},{"entry":[{},"<\/exploitability_adjustments>"]},{"entry":[{},"<\/flaw>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["-","<flaw issueid=\u201c151\u201d module=\u201csample.war\u201d severity=\u201c4\u201d type=\u201cFailure to Preserve SQL"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Query Structure (\u2018SQL Injection\u2019)\u201d description=\u201cThis database query contains a"]},{"entry":[{},"SQL injection flaw. The call to java.sql.Statement.executeUpdate( ) constructs a"]},{"entry":[{},"dynamic SQL query using a variable derived from user-supplied input. An"]},{"entry":[{},"attacker could exploit this flaw to execute arbitrary SQL queries against the"]},{"entry":[{},"database. Avoid dynamically constructing SQL queries. Instead, use"]},{"entry":[{},"parameterized prepared statements to prevent the database from interpreting"]},{"entry":[{},"the contents of bind variables as part of the query. Always validate user-"]},{"entry":[{},"supplied input to ensure that it conforms to the expected format, using"]},{"entry":[{},"centralized data validation routines when possible. References: CWE"]},{"entry":[{},"(http:\/\/cwe.mitre.org\/data\/definitions\/89.html) OWASP"]},{"entry":[{},"(http:\/\/www.owasp.org\/index.php\/SQL_injection)\u201d note=\u201c\u201d cweid=\u201c89\u201d"]},{"entry":[{},"remediationeffort=\u201c3\u201d exploitLevel=\u201c0\u201d sourcefile=\u201csample1.java\u201d line=\u201c220\u201d"]},{"entry":[{},"sourcefilepath=\u201corg\/sample\/utils\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["-","<exploitability_adjustments>"]},{"entry":["-","<exploitability_adjustment score_adjustment=\u201c\u22121\u201d>"]},{"entry":[{},"<note>The source of the tainted data in this web application flaw is not a web"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"request.<\/note>"]},{"entry":[{},"<\/exploitability_adjustment>"]},{"entry":[{},"<\/exploitability_adjustments>"]},{"entry":[{},"<\/flaw>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"One example of an automated process that references a bound vulnerability report may include a whitelisting agent operating as software. The software agent may execute on a server or client, including hand-held devices, smart phones, PDAs, and the like. Procedurally, the agent computes the hash value for the executable for which it is attempting to validate and sends the hash to its whitelist database. If the hash is in the whitelist, the executable is permitted to execute (or be installed, copied, transferred or otherwise used). Conventional whitelisting databases only consider software provenance when making a binary decision whether to allow the software to execute\u2014if the provenance is known it runs, if not, the software is not executed. In contrast, the whitelist agent described herein takes advantage the software security report to make a more informed decision based on numerous data points. For example, an overall software quality rating or the number and type of known security defects may affect the decision whether to execute the software or not, or under what conditions the software may be executed.","For example, an organization may have a policy stating that a web application on the external network cannot have any cross-site scripting (XSS) vulnerabilities yet software running on the internal network may allow XSS vulnerabilities. The policies used by the whitelisting agents running externally can refer to the software security report for a count of XSS defects, and if the count is non-zero, restrict the execution of the software.","In other cases, the security report may be used to verify that proper change and release processes were followed for new versions of the software. In a controlled change and release process, decision gates may be used to control a release of the software into a production environment or for use as a gold disk for reproduction. With the report bound to an executable, an automated scanning application may investigate a production environment and verify the efficacy of the change and release process by ensuring that all deployed binaries have a recent report and a valid security rating.","In another example in which software is distributed through a central repository (e.g., SourceForge, iTunes App Store, BlackBerry AppWorld, Android Marketplace, etc.) bound security reports offer a higher assurance level to the consumer because the application has been rated for security and not tampered with prior to downloading. In some instances the reports may be made available through the same central repository. In certain instances, the software vendor may make one version of the application available for free or a reduced price, but another version that includes the security report (or access to it) available at a higher price, as some customers may appreciate the added value and security that access to the report and data provides.","The bound security report may also be used in conjunction with an application installation process for desktop or server applications. Where today operating systems such as Windows Vista alert the user if an unsigned application is to be installed, a future system might detect the presence of a ratings report and display it, or alert to the absence of a ratings report. Similarly, bound security reports may be used to strengthen browser security policies by providing more information about the applet to be run.","The invention can be embodied in other specific forms without departing from the spirit or essential characteristics thereof. The foregoing embodiments are therefore to be considered in all respects illustrative rather than limiting on the invention described herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the drawings, like reference characters generally refer to the same parts throughout the different views. Also, the drawings are not necessarily to scale, emphasis instead generally being placed upon illustrating the principles of the invention",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
