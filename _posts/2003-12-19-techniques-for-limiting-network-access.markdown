---
title: Techniques for limiting network access
abstract: A network architecture in a Universal Plug and Play (UPnP) network includes a resource sharing service to govern the distribution of resource information from a server to a recipient entity (such as rendering device or a control point). The network architecture includes one or more of the following provisions: (a) setting the server to operate in a predetermined private address range or an Auto IP range; (b) operating one or more parts of the network architecture on the same subnet; (c) setting a time to live (TTL) parameter associated with messages transmitted by the server to a predetermined number; (d) setting a number of permitted recipient entities to a predetermined number; (e) setting a number of permitted concurrent content distribution sessions to a predetermined session number; (f) granting access to a recipient entity on condition that the recipient entity has generated a message that conforms to the UPnP protocol; and (g) retiring a URL used to identify a location of a resource provided by the server after a predetermined amount of time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07647385&OS=07647385&RS=07647385
owner: Microsoft Corporation
number: 07647385
owner_city: Redmond
owner_country: US
publication_date: 20031219
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","A. Exemplary System for Implementing Resource Sharing","A.1. Overview of the System","A.2. Exemplary Application of the System","A.3. Media Server Architecture Overview","A.4. Fast User Switching (FUS) Provisions","A.5. Additional Security Provisions","A.6. URL Parameterization Provisions","B. Exemplary User Interface Presentations","B.1. Exemplary UI for Authorizing New Devices","B.2. Exemplary UI for Sharing Resources","C. Exemplary Processes","D. Exemplary Computer Environment"],"p":["The present application is related to co-pending U.S. patent application Ser. No. 10\/742,588, entitled \u201cRouting of Resource Information in a Network,\u201d U.S. patent application Ser. No. 10\/742,635, entitled \u201cUsing Parameterized URLs for Retrieving Resource Content Items,\u201d and U.S. patent application Ser. No. 10\/742,570, entitled \u201cServer Architecture for Network Resource Information Routing.\u201d All of these applications were filed on the same date as the instant application, and all name the same inventors as the instant application.","This subject matter relates to the retrieval of resource information in a network environment, and, in a more particular implementation, to the retrieval of resource information in a local network environment using a resource locator.","Universal Plug and Play (UPnP) provides a network architecture that facilitates adding and removing devices from a network. For instance, the UPnP architecture allows a user to simply \u201cplug\u201d a new device into a network coupling; thereafter, the network will automatically determine the new device's characteristics and subsequently coordinate interaction between this new device and others in the network based on the determined characteristics. The UPnP architecture is particularly well suited for networks associated with a local setting, such as a home, a business, a school, etc. (Note that the term \u201cUniversal Plug and Play\u201d derives from functionality provided in the earlier developed device Plug and Play (PnP); device PnP provides a flexible technique for automatically adding and removing peripherals to a standalone computer device, such as a PC).",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1","b":["100","100","102","104","106","108","110","112"]},"The UPnP devices (, , and ) can include a variety of electronic devices. Exemplary devices include computers of all types, CD\/DVD players\/jukeboxes, TVs, VCRs, MP3 players, stereo systems, electronic picture frames (EPFs), various types of still and video cameras, and so on. More specifically, a so-called UPnP device conceptually defines a container that can include actual devices, services, etc. A service, in turn, defines various functions performed by an UPnP device that are made available to other UPnP devices. For instance, one exemplary service might pertain to a chronological function provided by a clock. In general, a service models its functionality using state variables and exposes various actions associated with the model to other UPnP devices. In the exemplary case of , the UPnP device  includes an actual device  that provides a service . UPnP device  includes an actual device  that provides services  and . UPnP device  includes an actual root device  that provides services  and . The root device , in turn, includes an embedded device  that provides a service .","The network  can couple the devices (, , ) together using the Transmission Control Protocol and the Internet Protocol (TCP\/IP). The network  can also freely draw from a number of other standard protocols, such as Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), General Event Notification Architecture (GENA), and so on. The network  can be physically implemented using a variety of hardwired and\/or wireless communication mechanisms, such as phone lines, power lines, Infrared Data Association (IrDa), Ethernet, Radio Frequency (RF) coupling, and so on.","Finally, the control points (, ) define agents that can discover and control other UPnP devices. A UPnP device may itself include one or more control points integrated therewith.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2","b":["100","202","112"]},"A discovery function  pertains to procedures whereby devices advertise their services to control points. Devices can perform this advertisement by sending out a multicast variant of HTTP (i.e., HTTP-MU). A control point subsequently responds using HTTPU (i.e., a unicast variant of HTTP). The discovery function  makes use of General Event Notification Architecture (GENA) and Simple Device Discovery Protocol (SSDP) to carry out the above-noted exchange between UPnP devices and control points. Further, a newly added control point can also search for UPnP devices and services coupled to the network.","A description function  pertains to a procedure whereby a control point that has discovered a UPnP device can determine more information regarding the UPnP device. The UPnP device responds by sending information to the control point, where such information is presented, using the extensible markup language (XML). Such information defines details regarding the type of UPnP device (e.g., manufacturer, model name and number, serial number, etc.), the services it offers, uniform resource locators (URLs) for interacting with the device, and so on.","A control function  involves transmitting a control message from the control point to the UPnP device. The UPnP architecture  uses SOAP to transmit this message. SOAP messages contain action requests. The UPnP device executes the action specified in the SOAP message and then responds to the control point. The response contains action-specific values or fault codes.","An eventing function  pertains to a procedure whereby a control point monitors events associated with services provided by the UPnP architecture . More specifically, a service can send an event when its model changes state. The process of \u201cpublishing\u201d these state changes is referred to as eventing. The control point can subscribe to receive various events by sending a subscription message to a service of interest.","Finally, a presentation function  entails retrieving a page of information from a UPnP device using a presentation URL associated with this UPnP device. The control point can initiate the presentation process by issuing an HTTP GET request to the UPnP device. The presentation function  allows a user to view the status of the device and\/or control the device.","The UPnP Forum's web site (i.e., http:\/\/upnp.org\/) provides more detailed information regarding the UPnP architecture and related topics.","As mentioned above, UPnP devices are commonly used in relatively localized network environments, such as in a home or business. In the home environment, for instance, a network built in accordance with the UPnP architecture may interconnect a collection of media source devices and a collection of media rendering devices. An exemplary media source device might comprise a personal computer that stores a collection of music, video, pictures, etc., or may comprise various types of jukebox devices. An exemplary media rendering device might comprise a TV, stereo, personal computer, and so on. A control point (such as a personal computer) can then be used to route resource information from one of the media source devices to a selected media rendering device.","However, existing networks that include UPnP devices do not perform the above-described transfer of resource information in a well-controlled, secure, and responsible fashion. For instance, there exists the risk that an individual that is not affiliated with the network including UPnP devices might \u201ctap\u201d into the network in an unauthorized manner. For instance, the network may be implemented using wireless links (in whole or in part). In these networks, there exists the risk that an unauthorized individual might intentionally or inadvertently gain access to the resources provided by the UPnP architecture. Similar risks are present in other kinds of networks. Further, the functionality provided for networks that include UPnP devices is designed to ensure continuity with wide area IP network functionality. While this provides many advantages, it also introduces the risk that users in the wide area network environment might intentionally or inadvertently find a way to tap into the home network environment. Since the UPnP architecture does not provide a suitable mechanism for controlling or blocking the routing of information, there is a chance that these kinds of unauthorized users might gain access to the network's entire collection of media and informational resources or control the UPnP devices on the network.","Accordingly, there is an exemplary need in the art for a technique for safeguarding the resources of a network, such as a network including UPnP devices.","According to one exemplary implementation, a network architecture for disseminating resource information is described. The network architecture includes a network and a server coupled to the network. The server includes a shared resource store that identifies a collection of sharable resources, and logic for sharing resource information, obtained from the sharable resources, over the network. The network architecture also includes a recipient entity, coupled to the network, including logic configured to present resource information received from the server. The network architecture includes at least one of features (a) through (g):","(a) logic configured to operate one or more parts of the network architecture in a predetermined address range that is not compatible with the transmission of messages over a wide area network;","(b) logic configured to operate the server and the recipient entity on a same subnet;","(c) logic configured to set a time to live (TTL) parameter associated with messages transmitted by the server to a predetermined TTL number, wherein the TTL parameter is associated with a maximum number of nodes that a message is permitted to pass through en route from a source node to a destination node;","(d) logic configured to set a number of permitted recipient entities coupled to the network that the server is approved to serve out resource information to to a predetermined device number;","(e) logic configured to set a number of permitted concurrent sessions granted by the server for disseminating resource content to respective recipient entities to a predetermined session number;","(f) logic configured to grant access to a recipient entity on condition that the recipient entity has generated a message that conforms to an expected network protocol; and","(g) logic configured to retire a resource locator, used to identify a location in which a resource is stored in the server, in a predetermined amount of time, so that that the resource locator is no longer usable after that predetermined amount of time.","Additional exemplary implementations are described in the following.","The same numbers are used throughout the disclosure and figures to reference like components and features. Series  numbers refer to features originally found in , series  numbers refer to features originally found in , series  numbers refer to features originally found in , and so on.","To facilitate explanation, the following discussion will describe resource information distribution functionality in terms of the Universal Plug and Play (UPnP) architecture. As used herein, the term \u201cUPnP network\u201d describes a network (such as the exemplary UPnP network  shown in ) that has one or more entities (e.g., devices) that are built in accordance with the UPnP architecture, where the UPnP protocol is used for announcement, discovery, description, eventing and control of these entities. In the present architecture, other entities besides entities that are built in accordance with the UPnP architecture can be coupled to the UPnP network . However, this specific network framework is merely exemplary. The resource information distribution functionality can be implemented using other kinds of architectures and networks (that is, the functionality is not limited to networks that include UPnP entities).","More specifically, as will be described shortly, the UPnP network  can include one or more source entities which supply information to one or more recipient entities. The UPnP network  can optionally include one or more control point entities for coordinating the transfer of information from the source entity(ies) to the recipient entity(ies), and for performing other functions. For example, a source entity can comprise a media server, or some other kind of device. A recipient entity can comprise a control point device, a media rendering device, or some other kind of device. Generally, the terms \u201centity\u201d and \u201cdevice\u201d should be construed broadly herein; these terms can refer to discrete standalone units for performing ascribing tasks, or can comprise systems composed of multiple units, or can comprise hardware and\/or software components contained within units, and so on. To simplify the discussion, the term \u201cdevice\u201d is used in this section to describe any kind of module coupled to the UPnP network . (Further, the media server devices are also referred to as \u201cmedia servers\u201d to simplify the discussion.)","Further, to provide a concrete example, the following discussion will describe the resource information distribution functionality in the home context, where a person in the home uses the UPnP network  to interconnect multiple media server and media rendering devices within the home However, the resource distribution functionality can be applied to any environment, including a business environment (e.g., within a corporation), an academic environment (e.g., within a school or university), and so on.","Further, a UPnP network  typically couples devices together in a relatively small and well-defined geographic area (e.g., within a building). However, the resource information distribution functionality can be applied to more regionally encompassing environments.","Further, in the following discussion, a \u201cresource\u201d refers to any unit of information. For instance, a resource may correspond to a single file, or may correspond to just part of a file, or may correspond to a collection of multiple files. For example, suppose that a resource corresponds to a song. That song can be stored in a single file, stored in only part of a single file, or stored in several files (where these several files may also combine streams from other songs). More specifically, as illustrated in  (note the far right portion of the drawing), an exemplary resource (R) stored in a resource store (to be described below) can include various information components, referred to generally herein as \u201cresource information.\u201d One such component of the resource information is \u201cresource metadata.\u201d Resource metadata contains high level information regarding the resource, such as title of the resource, artist associated with the resource, date the resource was created, and so on. Another component of the resource information is \u201cresource content.\u201d Resource content contains the data which the resource metadata describes. For instance, the resource content of an audio resource would correspond to the audio data for playback to a consumer. (In portions of this disclosure, the term \u201cresource content item\u201d is used to refer to the resource content associated with a particular resource; the use of the term \u201citem\u201d here reflects simply a matter of grammatical convenience to clarify the usage of the term \u201cresource content\u201d in certain contexts.) Finally, the following description will frequently make reference to the transfer of \u201cresource content\u201d to a rendering device for presentation at that rendering device. This transfer does not exclude the transfer of additional information regarding the resource besides the resource content; the transfer of resource content can also include, for instance, resource metadata, which accompanies the resource content.","Moreover, a resource can itself be a collection of individual member resources. For example, a resource can constitute a so-called resource container or a resource folder, or other kind of collection of resources. As will be discussed, a resource container refers to a grouping of one or more member resources that a media server uses to internally manage these member resources. A resource folder refers to a grouping of one or more member resources that the media server makes \u201cvisible\u201d to a user. For instance, the media server can include a user interface display (or other presentation mechanism) that can present multiple resource folders, each of which can include one or more member resources. However, the media server can internally manage these member resources in the context of resource containers. The allocation of information in resource folders generally differs from the allocation of information in the resource containers, but, in an alternative implementation, the allocation can be the same. (Further, the media server can optionally allow a user to view information regarding the resource containers and their respective member resources and to perform various actions on a per-container basis rather than, or in addition to, a per-folder basis.) Any collection (either a resource container or a resource folder) can itself include member \u201cchild\u201d collections (that is, respective child resource containers or child resource folders).","A particular kind of resource collection is a resource playlist. This resource can be implemented as a file that refers to a list of audio, video and\/or photo resources (or other kinds of resources).","The above examples describe merely a few of the manifestations that a resource can assume; generally, the term resource abstractly denotes any aggregation of information based on any considerations.","In one implementation, resources can correspond to media resources, such as audio resources (e.g., music, audio books, etc.), video resources, picture resources (e.g., digital photos), and so on. However, the principles described herein can be used to distribute any kind of information for any purpose.","The term \u201cprocessing\u201d referred to herein can pertain to a wide variety of actions. In one case, the term \u201cprocessing\u201d refers to actions used to modify the information being processed. In another case, the term \u201cprocessing\u201d refers to actions used to simply handle information being processed, or to make decisions regarding information being processed. These are merely a few examples of a wide variety of types of actions that this term can encompass.","Further still, any entity that interacts with the media server described herein for the purpose of performing various administrative tasks (such as defining shared resources) is referred to herein as a \u201cmedia server user.\u201d A media server user can pertain to a human operator that interacts with the media server, or can represent some other entity, including logic functionality configured to interact with the media server. In an exemplary implementation, a media server user is presumed to be logged onto the media server. In one implementation, a user logs onto the media server by providing identity information to the media server, upon which, the media server, if so configured, authenticates the user (for example, by requiring the user to supply a password or some other form of authentication). Other implementations of the media server may not require the user to furnish their identity for the purpose of interacting with the media server. As will be described below, the status of a logged on media server user session can be active or inactive.","Any entity that requests resource information from the media server is referred to as a resource information consumer (referred to, for brevity, as simply a \u201cconsumer\u201d below). A consumer can request resource metadata and\/or resource content from the media server. A consumer may represent a human operator who wishes to interact with the media server from a control point or a rendering device, or can represent some other entity, including logic functionality configured to interact with the media server. In the case of a human operator, the same person can function as both a media server user and a consumer; alternatively, different individuals can assume these two respective roles.","Finally, a number of examples will be presented in this disclosure in the alternative (e.g., A or B). In addition, this disclosure encompasses those cases which combine alternatives in a single implementation (e.g., A and B), even though this disclosure may not expressly mention these cases each time.","This disclosure includes the following sections:","A. Exemplary System for Implementing Resource Sharing\n\n","B. Exemplary User Interface (UI) Presentations\n\n","C. Exemplary Processes\n\n","D. Exemplary Computer Environment",{"@attributes":{"id":"p-0057","num":"0080"},"figref":"FIG. 3","b":["300","300","302","312","314","302","312","302","304","312","302","314","304","312","314"]},"The UPnP network  also optionally includes one or more control points (e.g., control points , ). The control points (, ) can be integrated with one of the UPnP devices (-). That is, for instance, a rendering device can also include control point functionality for interacting with the media server . Alternatively, one or more control points can be implemented separate from the UPnP devices (-). An exemplary control point may be implemented using various types of computers, Personal Digital Assistants (PDAs), application specific logic modules, and so on. Collectively, the media rendering devices (-) and control points (, ) can serve as resource information recipient entities, among other roles, meaning, as will be described below, that they can receive resource information provided by the media server .","The UPnP network  can use any combination of protocols to transfer information between the UPnP devices (-, , ), such as TCP\/IP, SOAP, GENA, HTTP, and so on. It can further include any combination of gateways, routers, hardwired links, wireless links (e.g., radio frequency links), and so on (not shown).","By way of overview, when a new UPnP media rendering device joins the UPnP network , it announces its presence to the media server . Say, for example, this new media rendering device corresponds to exemplary device  shown in . The media server , in turn, alerts the user of the media server  (i.e., the \u201cmedia server user\u201d) to the presence of the new media rendering device . As will be discussed in greater detail below, the media server  can determine the identity of the new media rendering device  by translating a received IP address corresponding to the new device  into its media access control (MAC) address, or by using some other identification\/approval mechanism. The media server  then gives a media server user the option of enabling this new device . If enabled, this new device  becomes an accepted member of the suite of devices that the media server  is permitted to transfer resources to.","In the media transfer operation itself, the media server  routes resource information corresponding to resources provided in a resource store  to a resource information recipient entity coupled to the network . Broadly stated, to perform this operation, a consumer can first use a control point (such as control point ) or other device to investigate the resource information corresponding to resources provided in the resource store  of the media server . For instance, this operation may entail investigating the resource metadata of the resources, such as the titles of available resources, and other high level information regarding the resources. After such investigation, the consumer can select resource content associated with a resource for presentation at a selected rendering device, such as the media rendering device . The control point  can thereafter provide a role in setting up the transfer of the resource content from the media server  to the selected rendering device . In one implementation, the UPnP architecture  uses a non-UPnP protocol to actually execute the transfer of resource content from the media server  to the rendering device , such as, but not limited to, the HTTP protocol.","To perform the above-summarized functions, the media server  includes resource information sharing functionality . The following discussion describes high level features of the resource information sharing functionality . Section A.3 describes the operation of the resource information sharing functionality  in greater detail.","To begin with, the routing procedure can involve the task of defining resources to be shared over the network . In one exemplary implementation, the media server  is configured to designate shareable resources in units of collections, such as resource folders. That is, the resource information sharing functionality  can \u201cearmark\u201d a resource folder as shareable, allowing at least some of the resources contained therein to be shared out over the network  (based on the considerations discussed below). The resource information sharing functionality  can perform this function via one or more UI pages that allow the media server user to define the shareable status of shared folders. Section B describes these UI pages in greater detail. Generally, inheritance applies to the shareable status of resources within a hierarchical organization of resources. That is, a resource folder can be viewed as a parent resource that contains one or more individual member resources that constitute child resources. The resource folder may also include subfolders, each of which can include member child resources. Designating a parent resource as shareable will generally have the effect of also designating its child resources as shareable, including all of its member resources and subfolders. However, the resource information sharing functionality  can also be configured to operate according to different inheritance paradigms. For instance, in one alternative case, the shareable status of a parent resource may not automatically apply to its subfolders.","Also, the resource information sharing functionality  can be configured to allow the user to remove the shareable status of resources (e.g., to \u201cunshare\u201d the resources). For example, in one case, unsharing a parent resource will have the effect of unsharing its child resources. In one case, the resource information sharing functionality  can prohibit the media server user from unsharing a child resource when its parent is designated as shareable. In another case, the resource information sharing functionality  will allow the media server user to selectively designate a shared child resource as unshared, therefore overriding the inheritance scheme described above.","Many other strategies can be employed to share resources, the above listing being merely a representative sampling of possibilities. For instance, the resource information sharing functionality  can be configured to allow the media server user to designate resources as shareable on an individual resource level (instead of, or in addition to, on a resource collection level). Further, the resource information sharing functionality  can be configured to allow the media server user to designate other kinds of collections as shareable.","According to another exemplary feature, and as described in greater detail in Section C, the media server  can place other constraints on the kinds of resource information that it shares out. For example, the media server  can share resource information obtained from only certain kinds of known media files. Also, the media server  can refuse to share resource information obtained from a file stored on a removable drive, a network share, and so on. By confining the sharing to resource information obtained from a known \u201cuniverse\u201d of expected resources, the likelihood of unauthorized access to the UPnP network  is reduced.","The resource information sharing functionality  also allows the media server user to define distribution criteria that can be optionally used to control the routing of the resource information (including both resource metadata and resource content). For instance, as a first distribution criterion, the resource information sharing functionality  allows a media server user to restrict the transfer of resource information to certain resource information recipient entities. As a second distribution criterion, the resource information sharing functionality  allows a media server user to make the transfer of resource information conditional on whether a specified individual needs to consent to the transfer. For instance, the media server  can be configured such that this criterion is implicitly satisfied if the specified individual is logged onto the computer which implements the media server  (and the individual's terminal session is active). This feature can be set up to consider the media server user logged on only when the user directly interacts with the console that implements the media server , rather than remotely interacts with the console (e.g., via a network connection); in another implementation, however, the media server user can be considered to be logged on even when they are only logged on via a remote connection. In another case, the media server  can be configured such that this criterion is satisfied only when the specified individual expressly confirms that the transfer is acceptable (such as when the specified individual responds affirmatively to a UI query regarding the propriety of the transfer). In one exemplary implementation, the above-described \u201cindividual\u201d corresponds to a media server user who has designated a resource associated with the distribution criterion as shareable over the network. These two criteria are merely illustrative; the resource information sharing functionality  can impose additional criteria for governing the transfer of resource information. For instance, an additional criterion may include a time of day restriction that limits access privileges to resource information to certain times of the day. The resource information sharing functionality  can provide one or more UI pages for use in defining the distribution criteria that govern the distribution of resource information, as will be described in Section B (below).","In one implementation, a first set of distribution criteria may apply to the transfer of resource metadata, and another set of distribution criteria may apply to the transfer of resource content. The first set may differ from the second set. This means, for example, that different restrictions apply to merely looking at the titles of resources compared to actually retrieving the resource content itself. Alternatively, the first set of distribution criteria may be the same as the second set of distribution criteria. However, even if the distribution criteria are the same, this may still have the effect of allowing a consumer to view the resource metadata but not the resource content; this is because, for example, the consumer may receive the resource metadata at a control point that is authorized by the distribution criteria to receive the resource metadata, but the consumer seeks to play the resource content on a rendering device that is prohibited by the distribution criteria from receiving the resource content. Additional variations on this strategy are envisioned. For instance, the resource information sharing functionality  can provide a single set of distribution criteria. This single set can exclusively govern the dissemination of resource metadata or resource content, or both.","According to one exemplary implementation, the resource information sharing functionality  specifies distribution criteria in the context of collections of resources, rather than individual resources. For instance, as explained above, the media server user can use the above-described UI pages to group a collection of resources into a resource folder, and then designate that the resource information (metadata, content, or both) associated with the resources in this resource folder is to be shared to other devices coupled to the UPnP network  provided that certain criteria are met. That shared resource folder may also include one or more subfolders, each including one or more resources. The same kind of parent-child inheritance schemes described above can be used to govern the application of distribution criteria to hierarchies of resources. For instance, the distribution criteria established for the resource folder could apply to each subfolder and resource (e.g., file) in the resource folder. Alternatively, the resource information functionality  can be configured such that the distribution criteria associated with a resource folder apply to only a subset of resources in the resource folder; for instance, the resource information functionality  can be configured such that the distribution criteria only apply to individual resources in the resource folder, but not to resources in any subfolders that the resource folder may contain. More generally, the resource information sharing functionality  can be configured to override the above-described parent-child inheritance scheme in various circumstances.","Again, the above-described schemes are merely exemplary and representative. Many other permutations exist. For instance, the resource information functionality  can allow the media server user to \u201cattach\u201d distribution criteria to individual resources in a resource folder, or to remove the distribution criteria from individual resources. Alternatively, or in addition, the media server  can designate distribution criteria for resource containers instead of resource folders. As will be described in greater detail in the context of , resource containers refer to collections that are internally used by the media server  to manage its resources, whereas resource folders refer to the collections that the media server user directly interacts with. The media server  can reorganize resources grouped into folders to create the containers.","According to another exemplary feature, the resource information sharing functionality  can allow media server users to define different sets of distribution criteria. For instance, different users can define different respective sets of distribution criteria. The resource information sharing functionality  can automatically invoke one of these sets of distribution criteria when its associated user logs onto the computer system that implements the media server . Alternatively, a single media server user can define different sets of distribution criteria. The media server user can invoke one of these sets to best suit a particular prevailing operating environment. For instance, a media server user can activate a first set of distribution criteria that apply on weekends when the media server user is expected to be home during the day, and another set on week days, when the media server user is not expected to be home during the day. Alternatively, one set of distribution criteria can be merged with another set, such that the both sets apply at any given time. Rules can be configured to work out potential conflicts between the sets. Again, these are merely representative and exemplary scenarios; many other permutations of this design strategy can be implemented.","Other implementations can place additional restrictions on the above-described scenarios. In one exemplary implementation, the resource information sharing functionality  can allow a media server user to add or modify distribution criteria only for those resources that this particular media server user has designated as shareable.","According to another feature, the resource information sharing functionality  can \u201chard code\u201d one or more distribution criteria, such that these distribution criteria automatically apply without the user having to define them via a UI page (or through other mechanisms). In addition, a number of factors were described above for initially determining whether a resource is shareable or not, such as the factor that determines whether the resource is forbidden to be shared out because it is stored on a removable drive, and so on. These factors can be conceptually regarded as distribution criteria that are hard coded. \u201cHard coded\u201d here means that a media server user might not be able to modifying these factors through the UI pages used to define other distribution criteria (such as recipient entity-related criteria, etc.). However, in one implementation, the resource information sharing functionality  can include various provisions for allowing the media server user to change even these factors in various circumstances.","According to another feature, various mechanisms can be used to prevent media server users from inspecting and\/or changing other media server users' distribution criteria. For instance, in one implementation, the resource information sharing functionality  only allows a media server user to define or modify distribution criteria for resources provided that the media server user has designated those resources as shareable. Still other permutations of this design strategy are possible.","In the routing operation itself, the resource information sharing functionality  first allows the consumer to search for information associated with shared resources. For instance, as indicated in the overview above, the consumer can use the control point  (or other device) to enter a request to view resource metadata associated with resources provided in the resource storage . More specifically, the request can be a browse request, a search request, or some kind of other request. A browse request is a UPnP action that can result in the retrieval of a collection of information items, e.g., in a certain specified category, whereas a search request is a UPnP action that can result in the retrieval of one or more targeted information items, e.g., in response to specified key terms, etc. In any event, the transmission of this request is represented by path  in .","The resource information sharing functionality  responds to the request  by scanning a collection of resource metadata describing the shared resources to locate any resources that simultaneously satisfy the consumer's request and also satisfy any relevant distribution criteria, if any, defined by one or more media server users. For instance, a consumer may request the media server  to provide resource metadata corresponding to all available video resources in the comedy genre. The resource information sharing functionality  responds to this request by scanning the resource metadata to locate any associated resources that match the specified search terms and which satisfy any relevant distribution criteria (such as a criterion restricting the display of these resources to a subset of resource information recipient entities, such as a criterion that prevents the display of R-rated resources to a child who uses a particular media rendering device normally used by a child). Note that the resource information sharing functionality  can be configured to optionally, that is, not necessarily, apply the distribution criteria. Thus, if no relevant distribution criteria exist, or if the media server  is currently not configured to apply the distribution criteria, then the distribution criteria do not play a role in restricting the dissemination of resource information.","In the event that the resource information sharing functionality  finds resource metadata corresponding to one or more resources that satisfy the above-described constraints, then the resource information sharing functionality  sends this resource metadata to the consumer. The response generated by the resource information sharing functionality  can specifically be formulated using the extensible markup language (XML). The XML response can provide resource metadata that identifies high level data regarding the available resources, such as name, artist, date created, size, etc. pertaining to the available resources. The resource metadata also provides resource locators, such as uniform resource locators (URLs), that identify the network locations from which resource content can be retrieved.  illustrates this transfer of XML information by path . If suitably equipped, the control point  translates the received XML information into a presentation format, and then displays the information on a monitor or other presentation device (generally represented in  by the display presentation  provided by control point ). On the other hand, in one implementation, the control point  will receive no information from the media server  if no resource information was determined to be available that satisfies the parameters of the search and, if applicable, the constraints of the distribution criteria. In this case, the consumer might be unaware of the existence and characteristics of any non-matching resource information stored in the resource store . (As used here, the term \u201cnon-matching resource information\u201d refers to resource information pertaining to resources that satisfy the parameters of the consumer's search but not the constraints of the distribution criteria.)","Limiting the availability of non-matching resource metadata is desirable for a number of reasons. This feature is generally advantageous because it eliminates the display of resource metadata that the consumer might find objectionable (or the consumer's guardian might find objectionable). Also, limiting the availability of non-matching resource metadata is beneficial to eliminate extraneous information that might not interest a consumer. In another implementation, the resource information sharing functionality  can also allow the media server user to provide distribution criteria that will simply filter out some (but not all) of the resource metadata in the event that otherwise matching resource metadata for a particular resource does not satisfy the pertinent distribution criteria. This might be appropriate in the case where a guardian simply wants to prevent a child from viewing the titles of certain resources at a rendering device, but otherwise has no objection to the child receiving some information that indicates that these resources exist in the media server . The distribution criteria in this case would therefore have the effect of only blocking the title when it is applied. In one implementation, the resource metadata itself can include display recommendations that can be used to govern the manner in which the resource metadata is displayed by a control point or other resource information recipient entity.","As a final note, recall that a resource (as defined above) can refer to an individual resource that provides, for example, a particular resource item. In addition, the resource can refer to a resource collection (e.g., a resource container, resource folder, etc.) that itself can include one or more member resources (and possibly one or more other resource collections). The resource information sharing functionality  can thus be configured to provide resource metadata that describes one or more individual resources or a resource collection. In the former case, the resource metadata can include high level information pertaining to the individual resources, such as the titles, authors, etc. of the individual resources. In the latter case, the resource metadata can include high level information pertaining to the resource collection. Such high level information can include any kind of global information describing the overall collection per se, as well as information pertaining to individual member resources and sub-collections (if present) in the resource collection, such as the titles, authors, etc. of the individual member resources.","To facilitate discussion, the following description will generally assume that the resource metadata for each resource includes a resource locator that describes where that resource content can be found (so that it can be subsequently retrieved). However, in one implementation, if the resource is a resource collection, its resource metadata may or may not include a resource locator associated therewith. For example, a so-called playlist resource container can have a resource locator associated therewith. This resource locator can be used to retrieve either the playlist (e.g., a list of songs) or each of the songs in the playlist (e.g., the set of songs \u201cconcatenated\u201d). The playlist can identify how each of the songs can be retrieved, e.g., by providing individual resource locators associated with the songs. However, other resource collections may not have resource locators associated therewith. In general, any given application can include collections having resource locators, collections without resource locators, or a combination of collections with and without resource locators. To facilitate discussion, the following explanation will generally imply a one to one correspondence between resource metadata items and resource locators; however, the above qualification for resource collections potentially applies, although it is not always expressly stated.","After viewing the available resources (via the provided resource metadata), the consumer may decide to play resource content corresponding to one of the available individual resources on a selected media rendering device, for example rendering device . This can be performed in a variety of ways. According to one technique, the control point  (or other agent) can supply a resource locator corresponding to a selected resource content item, such as a Uniform Resource Locator (URL), to the rendering device . (Again, recall that this resource locator was provided as part of the resource metadata to the control point  by the media server  in response to the consumer's initial query.) The rendering device  can then submit this resource locator to the media server . The media server  uses the resource locator it has received from the rendering device  to locate the selected resource content and then to present this resource content to the selected rendering device . These series of actions can be performed outside the UPnP protocol, using, for example, an HTTP GET operation, or other type of operation. In this operation, the rendering device  supplies an HTTP GET command to the media server . The command includes the resource locator.  illustrates this action by path . The media server  responds by providing the requested resource content.  illustrates this action by path . Other protocols that can be used besides the HTTP GET protocol are IEEE 1394, RTSP\/RTP, etc. Various media streaming techniques can also be used to transfer resource content from the media server  to the media rendering device . Further, multiple resource locators can be forwarded to the rendering device , and then transferred to the media server  to perform transfer of multiple resource content items en bloc, rather than sending each resource locator for the items separately, one after the other.","As mentioned above, the retrieval of actual resource content using the HTTP GET protocol (or other protocol) can also optionally be made conditional on distribution criteria. That is, as described above, a first set of distribution criteria can govern the dissemination of resource metadata and a second set of distribution criteria can govern the distribution of resource content. The first set can be the same as the second set, or the first set can differ from the second set. Using the second set of criteria, the media server  can prohibit the distribution of resource content if a relevant distribution criterion indicates that that the requesting rendering device is not authorized to receive the content. This provision prevents an unauthorized rendering device from attempting to receive resource content using a resource locator that it received (either with or without permission) from an authorized device. This provision may also prevent devices that were once authorized, but are no longer authorized, to receive resource content by using \u201cstale\u201d (e.g., old) resource locators to attempt to access resource content.","In one case, the media server  can prevent the distribution of resource content to a device, even though that same device was permitted to receive resource metadata. Alternatively, the media server  can prohibit the distribution of resource metadata to a device even though that very device can access the resource content itself. Generally, the terms \u201cfirst set\u201d and \u201csecond set\u201d of distribution criteria are abstract concepts that simply denote that different collections of criteria can apply to the distribution of resource metadata and resource content. In one case, these two sets can be literally implemented by two separate stores of parameters. In another case, these two sets can be implemented by attaching fields or attributes to each criterion which indicate whether each criterion applies to the distribution of resource metadata and\/or resource content. In another case, a single store of criteria can be provided with the presumption that it implicitly applies to both the distribution of resource metadata and resource content, or to either the resource metadata or the resource content. Many other variations are possible to implement this dissemination strategy.","Other kinds of distribution criteria can apply to the dissemination of resource content besides device-related criteria. For instance, as in the above-described case of the dissemination of resource metadata, the media server  can prohibit the distribution of resource content if a relevant distribution criterion indicates that a specified individual has not given required consent to this transfer; this criterion can be satisfied, in one case, by requiring this individual to be currently and actively logged onto the computer system that implements the media server . Still other criteria may govern the distribution of resource content.","In another implementation, the media server  may not make the distribution of resource content dependent on the distribution criteria. The premise in this implementation may be that if the consumer has a valid resource locator corresponding to resource content provided by the media server , then the consumer is presumed to have proper authority to access the resource content itself. This is because the consumer would have had to meet the conditions set forth in the distribution criteria that govern the distribution of resource metadata in order to obtain the resource metadata in the first place.",{"@attributes":{"id":"p-0086","num":"0109"},"figref":"FIG. 4"},"In , a schematic of a home  includes a plurality of rooms, such as den , child's bedroom , parent's bedroom , kitchen , and living room .  also shows three individuals that reside in the home , including a father , a mother , and a child .","The den  includes a media server  and associated resources, as well as a rendering device M . The child's bedroom  includes a rendering device N . The parent's bedroom  includes a rendering device O . The kitchen  includes a rendering device P . And the living room  includes rendering devices  and  (Q and R). Although not shown, various control points can be scattered throughout the home . For instance, the device M  in the den  can also function as a control point from which a consumer can interact with the media server . Because the media server  is located in the den , the den  can function as a control center for setting up distribution criteria that will govern the distribution of resources throughout the home. The mother  is acting as the media server user in this example by setting up these criteria. Finally, the den  also includes a router  for coupling all of the devices together. The router  functions in a conventional manner, that is, by routing resource information and other information to various devices depending on addressing information associated with the information.","The resource information sharing functionality  can provide a great variety of different resource sharing scenarios to suit different environments and objectives. A few resource sharing possibilities are outlined in the following discussion to provide concrete examples of how the resource information sharing functionality  can be employed.","In a first scenario, the media server user (that is using the media server ) may want to cull a first specific group of resources into a resource folder, and then earmark the resource information associated with resources in that resource folder for distribution to only device N  in the child's room . Thus, the child  can access appropriate children's resource information (e.g., resource metadata and\/or resource content) in his or her own room. At the same time, the parents ( and ) will not see this resource metadata when they browse or search through the resource metadata; this has the beneficial effect of not inundating the parents ( and ) with resource metadata that they are not interested in.","In a second scenario, the parents ( and ) may wish to limit the distribution of action genre resource information to only themselves for viewing in their own bedroom . The parents (, ) may be concerned, for example, that the violence in this resource information is inappropriate for viewing by their child . The media server user can implement this restriction by specifying that a collection of R-rated resource information in the action genre should only be played on the device O  in the parent's room . The child  therefore cannot access this objectionable resource information from his or her room ; nor is the child  even aware that this objectionable resource information exists (because the resource information sharing functionality  can shield even the resource metadata regarding these resources from the child).","In a third scenario, the media server user may earmark resource information associated with certain other collections of resources as appropriate for display on any rendering device. This can be implemented by specifying \u201cAll devices\u201d when defining the distribution criteria for these collections of resources.","In addition to the above-described device-related restrictions, the media server user can make the access to resource information conditional on whether selected individuals operating the media server  have given their implicit or explicit consent to the transfer of this resource information. For instance, in a fourth scenario, this criterion is satisfied when the mother  is logged onto the media server  (and her terminal session is active). In this case, the mother 's consent to the transfer of resource information is inferred from her mere contemporaneous interaction with the media server . In another case, this criterion is satisfied only when the mother  gives her express consent to the transfer. This can be accomplished by presenting a pop up message when her child attempts to access particular resource metadata or resource content. Transfer proceeds only when the mother  responds to this query in the affirmative.","On the other hand, a user criterion which specifies \u201cAll users\u201d does not place any constraints on the presentation of resource information. In other words, if this criterion is set, then the resource information can be presented on any authorized device without reference to the consent of any individual operating the media server . However, the device-related criterion may place independent restrictions on where the resource information can be presented, thus effectively preventing certain devices from receiving these resources.","Once again, the resource information sharing functionality  can provide other kinds of criteria besides device-related criteria and user consent-related criteria, such as various criteria pertaining to the time of day when resources are consumed, etc. Also, once again, the features described above are equally applicable to other environments besides the home context, such as a business environment.","Finally, as described more fully in Section A.5 below, various entities outside the home  may attempt to interact with the home network in an unauthorized manner. For instance, parts of the network provided in the home  may be implemented as wireless links; in this case, an unauthorized entity may be operating close enough to the home  to present itself as a valid control point or rendering device. In another case, an unauthorized entity may represent an individual using a wide area network (such as the Internet) to intentionally or inadvertently tap into the resource information provided by the media server . In either case, the resource sharing strategy described above can be used to restrict the dissemination of resource information to a known and limited set of rendering devices. This will have the effect of preventing the unauthorized entities from accessing the resource information, since these entities are not on the list of pre-approved devices that may receive resource information. The distribution is further conditional on the consent of specified individuals operating the media server . This places another hurdle in the path of unauthorized access (as this criterion requires the explicit or implicit approval of a media server user to dole out the resource information). Section A.5 below describes several other provisions designed to thwart unauthorized access to resource information.",{"@attributes":{"id":"p-0097","num":"0120"},"figref":["FIG. 5","FIG. 3","FIG. 5"],"b":["302","302"]},"By way of overview, the media server  architecture includes three main components. The first main component is a media service module . The media service module  hosts the resource information sharing code, the code that monitors the UPnP network  for new devices, and the server for sharing out resource content. The media service module  also maintains the configuration data used to govern the distribution of resource metadata and resource content over the network  (for example, including a list of shared resource folders, a list of approved devices, a list of media server users that are required to provide consent for resource information transfer, and so on).","A second main component is a Content Directory Device Monitor (CDDM) service module . As will be explained in detail below, the CDDM service module  has higher access privileges to interact with the media server 's system resources compared to the media service module . As such, the media server  uses the CDDM service module  to run a few privileged operations that the media service module  cannot perform due to its lower access privileges. The operations provided by the CDDM service module  will be enumerated and described in detail below.","A third main component is the configuration and control panel module  (referred to as the control panel module  for brevity). The control panel module  allows a logged on user to approve or deny authorization for new devices joining the network , and also to manage a list of shared resource folders and to define associated distribution criteria. The control panel module  also alerts the media server user when critical system errors are encountered by the media server .","As will be described in subsection A.4 (below), the media server  implements fast user switching (FUS). The FUS technique permits more than one media server user to be logged onto the computer system hosting the media server  at any one time. In this case, the media server  provides multiple instances of the control panel module  that can run at the same time.  specifically shows the exemplary case where module instance  is used to interact with user , module instance  is used to interact with user , and module instance  is used to interact with user . However, each user is able to start up at most one instance of the control panel module  at any time. A private application programming interface (API)  couples the control panel module  to other components in the media server .","Each of the above-described three modules operates in a different so-called \u201cuser context.\u201d The media service module  runs in any so-called \u201cclamped-down\u201d user context, such as a so-called local service user context or a network service context (to be described below). The CDDM service module  runs in the so-called local system user context. And the control panel module  runs in a so-called logged on user's user context. Basically, a clamped-down user context provides access privileges related to a collection of UPnP functions, such as monitoring the UPnP network  for new devices, sharing out resource information, and so on. However, the clamped-down user context might not allow for the accessing of certain resources provided by the computer system needed to implement the media server , such as actually reading, deleting, and writing to resources stored on disk. The local system user context (used by the CDDM service module ) does provide access to these core computer resources, and, moreover, can modify the access permissions on these computer resources to permit the clamped-down user context to access these computer resources. Accordingly, the clamped-down user context (used by the media service module ) and the local system user context (used by the CDDM service) complement each other to provide the necessary functionality for implementing the UPnP sharing functionality. The logged on user's user context (used by the control panel module ) provides access privileges specifically associated with a logged on user (e.g., user ).","It is desirable to allocate different functionality to different security user contexts in order to protect the resources of the media server , and, more broadly, the resources of the computer system hosting the media server . For instance, the media sever  can execute certain operations in a background mode without any media server users logged onto the media server . One such background operation entails notifying the media server user when there are critical system errors or when a new media rendering device or a control point has been detected on the network  (in either case, this is performed by starting up the control panel module ). It is desirable to prevent the functionality associated with these background tasks from directly interacting with all of the system resources provided by the media server . To this end, the media sever  uses the CDDM service module , which runs in the local system user context, to supplement the media service module  (which runs in the clamped-down user context). As mentioned above, the CDDM service module  has the necessary access privileges to access core system resources that are off limits to the clamped-down user context.","In the following discussion, to facilitate explanation, the clamped-down user context is described in the context of a specific implementation that uses the local service user context. The local service user context refers to a special account created by Microsoft Windows\u00ae operating system that typically does not allow for the interactive log on to the computer system as do other conventional user accounts. As mentioned above, however, it is also possible to implement the clamped-down user context using the network service context (which also refers to a predefined user context in the Microsoft Windows\u00ae operating system), or some other user context. Both local service user context and network service user context have a similar set of privileges associated therewith, but the advantages offered by these user contexts are not identical. For instance, the network service user context provides credentials that are recognized by other machines coupled to the network running the Windows\u00ae operating system. In contrast, the local service user context credentials are recognized only on the user's local machine; further, the local service user of one machine cannot be authenticated on other machines.","The resource information sharing functionality  introduced in the context of  collectively represents the above-identified three components (, , ). Each of these above-described components will be described below in turn.","a. Media Service Module","To begin with, a device monitoring module  receives notifications from devices coupled to the UPnP network . For instance, this module  detects announcements generated by new rendering devices that have been added to the UPnP network . This module  then notifies other modules in the media server  of this event, which triggers other actions (which will be described in detail below, e.g., with reference to ). The device monitoring module  also detects requests made by control points coupled to the UPnP network . As indicated in , a resource information consumer (e.g., a \u201cconsumer\u201d for brevity) may initiate such a request in order to browse or search through the resource metadata provided by the media server . The device monitoring module  then notifies a content directory service module of this request, which triggers other actions (which will be described in detail below).","A resource monitor module  monitors the resource storage  (introduced in ) for newly added, deleted or modified resources. Upon detecting changes, the resource monitor module  notifies the content directory service module  of the changes to the resources. The content directory service module  maintains a directory of resources provided in the resource store . As indicated in , the content directory service module  also interacts with a consumer who enters a request to browse or search through the resources provided by the resource store . The content directory service module  responds to this request by retrieving and transferring resource metadata to the consumer that describes the available resources that meet the consumer's request and which satisfy any distribution criteria that may pertain to the request.","The resource store  itself can represent a single repository of resources or multiple repositories. The resource store  can be implemented using magnetic storage devices, optical storage devices, BEPROM storage devices, and\/or any other kind of storage devices. Exemplary shareable resources that can be stored in the resource store  include .bmp image files, .gif image files, .jpeg image files, .png image files, .tiff image file, .avi video files, .mp3 audio mpeg files, .mpeg video mpeg files, .wav audio files, .wma audio files, .wmv video files, and so on. This is merely an illustrative exemplary list. The resource store  can be co-located with other parts the media server , or can be located, in whole or in part, at one or more separate locations. In the latter case, the media server  can remotely manage the resources provided in the resource shore .","The resource transfer module  coordinates the transfer of resource content to a media rendering device (such as media rendering device  shown in ). In one implementation, the resource transfer module  is an HTTP server. The transfer of resource content is initiated by the receipt of a resource content request (such as an HTTP GET request in the case an HTTP server is used). The resource transfer module  responds by transmitting the resource content providing that the relevant distribution criteria are met (if applicable). In one implementation, the resource transfer module  performs this task with the assistance of a connection manager service module . The connection manager service module  manages the coupling between the media server  and a rendering device that is to receive the resource content. The control point (e.g., control point  or ) can invoke this module  to prepare the media server  for an eminent transfer of resource information. This preparation can entail matching the capabilities of the media server  and a rendering device, discovering information about transfers of resource information ongoing in the UPnP network , and setting up and tearing down the connection between the media server  and the rendering device. (Note that the featured exemplary implementation that performs resource content transfer using an HTTP technique can simplify the processing by dispensing with one or more of the above-identified functions.)","In one exemplary and illustrative HTTP implementation, the connection manager service module  can support a GetProtocolInfo method. This method returns a comma separated list of the protocol information types that the media server  can source and sink. A control point uses this information to set up a media connection between the media server  and a selected rendering device (e.g., media rendering device ). Each ProtocolInfo entry is a combination of the transport protocol, network, multipurpose Internet mail extensions (mime) type, and additional information, collectively specified by the format: Protocol:Network:Content_Format:Additional Info.","The media service module  can also include an optional audio-visual (AV) transport service module (not shown). If supported, the AV transport service module can be used to control the playback of resource content to the rendering device. This module can specifically permit a control point to stop the flow of resource content, pause the flow of resource content, search for a specific location within the resource content (using a seek function), and so on.","In the specific example of , the media service module  can use an HTTP server  to coordinate the transfer of resource content (such as an HTTP 1.1 server). This server  serves out resource content in response to the receipt of an HTTP GET request. The HTTP GET request specifies a URL of a desired resource, which, in turn, was provided to a media rendering device in response to a prior transfer of resource metadata to a recipient entity (e.g., a control point), which, in turn, may have been prompted by a consumer's prior search or browse request. The server  responds by retrieving the resource content from the resource store  corresponding to the specified URL, transforming the resource content to a requested media format (if need be), and providing this resource content to the consumer, provided that relevant distribution criteria are satisfied, if applicable. The URL for a resource can be of the exemplary form:\n\n","The content directory service module  provides the core of the functionality that allows the media server  to share out resource information (notably resource metadata) to media rendering devices. It includes a shared resource store . In one implementation, the shared resource store  includes a directory and associated resource metadata describing resources provided in the resource store  that are to be shared.","More specifically, jumping ahead briefly in the series of figures,  shows an exemplary hierarchical structure, e.g., a directory , that can be used to organize information in the shared resource store  into virtual resource containers. In this figure, a \u201croot\u201d resource container  encompasses all the other resource containers in the directory . A \u201cmusic\u201d resource container  includes resource containers categorizing music. A \u201cmusic\/all music\u201d resource container  includes all music resources being shared within the content directory. A \u201cmusic\/album\u201d resource container  includes resource containers for each album, where each such resource container includes music resources belonging to that album. A \u201cmusic\/artist\u201d resource container  includes a resource container for each artist, where each such resource container includes resources for all the music pieces created by that artist. A \u201cmusic\/genre\u201d resource container  includes a resource container for each genre, where each such resource container includes resources for music pieces belonging to that genre.","A \u201cvideo\u201d resource container  includes resource containers categorizing video. A \u201cvideo\/all video\u201d resource container  includes all video resources being shared within the content directory. A \u201cvideo\/actor\u201d resource container  includes a resource container for each actor, where each such resource container includes video resources featuring that actor. A \u201cvideo\/genre\u201d resource container  includes a resource container for each genre, where each such resource container includes video resources belonging to that genre.","A \u201cpictures\u201d resource container  includes resource containers categorizing pictures. A \u201cpictures\/all pictures\u201d resource container  includes all image resources being shared within the content directory. (Although not shown, a \u201cpictures\/album\u201d resource container can be included, which includes a resource container for each picture album based on folder names. Further, although not shown, a \u201cpictures\/datetaken\u201d resource container can be included, which includes a resource container for each group of pictures taken on a given date).","Finally, a \u201cuser files\u201d resource container  includes resource containers holding resources belonging to individual users.  shows a collection of resource containers  associated with an exemplary N users.","Each of the resource containers in the directory  can have an object ID associated therewith. For instance, the Video\/Actor resource container can have an object ID of \u201ccontainer: VideoActor.\u201d Generally, the directory  shown in  is exemplary; other directories can use different organizations and selections of resources.","In one implementation, each of the individual resources in the containers shown in the directory  can correspond to a separate respective resource file stored in the resource store . But, as mentioned previously, a \u201cresource\u201d is to be understood as an abstract aggregation of information. A single resource can be stored using only part of a file (where such a file may also store information pertaining to other resources). Alternatively, a single resource can be stored over a collection of different files. Also note that the resource collections (such as the resource containers of ) themselves constitute resources.","Returning to , the shared resource store  includes resource metadata  associated with the shared resources in the directory . As previously discussed, resource metadata generally includes high level information that describes the contents of the resources, such as name, artist, date created, size of the resource, the resource locator such as the URL associated with the resource content, and so on. The shared resource store  can also store criteria information  that describes criteria associated with resource collections (e.g., resource folders or resource containers) used to restrict the dissemination of the resource information (including resource metadata and resource content) to appropriate consumers at respective control points and rendering devices. As discussed above, one exemplary criterion may govern which devices are authorized to receive resource information. Another criterion may govern which specified individuals (if any) operating the media server  are required to provide consent in order for the transfer of resource information to take place.","More specifically, as described in Section A.1, the criteria information  can include two sets of criteria: one set that governs the dissemination of resource metadata and another set that governs the dissemination of resource content. These sets can be implemented as two separate stores, as fields or attributes associated with a common store, or using some other technique. The first set of criteria can differ from the second set of criteria, indicating that different constraints govern the display of resource metadata compared to the rendering of resource content, or these two sets can be the same. Or a single set can be used that will govern the dissemination of resource metadata, resource content, or both resource metadata and resource content. To facilitate the discussion below, it will be assumed that the criteria information  holds a single set of criteria, and that single set applies to the doling out of resource metadata as well as resource content.","In one implementation, the resource metadata  is associated with individual shared resources, where the shared resources can correspond to files stored on the resource store . In this case, the resource metadata  can be extracted by \u201ccrawling\u201d through the shared files at service initialization. Depending on the number of shared files, this operation can take an appreciable amount of time. In another implementation, the resource metadata  can be persisted in a relational database in the shared resource store . In still another example, the resource metadata  can be extracted from all the shared files in the resource store  and stored in one or more separate files. (For instance, the media server  can use a separate file for every file system volume used in the resource store , where each file system volume may correspond to a separate drive letter. This provision facilitates the collection of resource metadata, especially in the case where removable volumes, such as USB hard drives, are employed; the media server  will attempt to read resource metadata from a volume only if its corresponding drive is currently mounted.) The use of a relational database and\/or a separate file will reduce the amount of time associated with initializing the media server . For instance, when the separate file(s) strategy is used, the separate file(s) can be quickly loaded into memory to provide the resource metadata , as opposed to laboriously crawling through the entire resource store  to extract this information.","Similarly, in one implementation, the criteria information  can be associated with individual shareable resource folders provided by the resource store . In this case, the criteria information  pertaining to shared files (which belong to respective shared resource folders provided by the resource store ) can be extracted by \u201ccrawling\u201d through the shared resource folders at service initialization in much the same manner as described above. This can take an appreciable amount of time. So, to expedite the process, the media server  can resort to a relational database strategy and\/or a separate file(s) strategy (similar to the case described above for the storage and management of the resource metadata ). In one implementation, a criteria-specific relational database and\/or separate file(s) are used to provide the criteria information  that is distinct from a metadata-specific relational database and\/or separate file(s) used to provide the resource metadata . In another implementation, a single relational database and\/or separate file(s) can be used to store both the resource metadata  and the criteria information . In another implementation, the resource metadata  and\/or the criteria information  can be persisted and read back from a Windows\u00ae operating system registry.","As noted above, in one implementation, the criteria information  can be applied to resource folders. The media server user can create this association via one or more user interface pages that display information regarding the resource folders. In another implementation, criteria information can be associated with resource containers in the directory  (shown in ) or with individual resources included in the directory . The media server  can again create this association via one or more user interface pages that display information regarding resource containers. While the following discussion describes functionality for implementing the former case (of associating resource folders with criteria), similar functionality can be provided for implementing the latter case (of associating resource containers with criteria). In both casee, distribution criteria can be used to govern the dissemination of resource metadata and resource content. The organization of resource containers (which refers to the internal organization of resources in the media server ) generally cannot be expected to match the hierarchy of resource folders (which refers to the organization of resources with which the media server user interacts), although there may be a relationship between these two organizations (e.g., resource containers and resource folders).","Whatever method is used to construct the resource metadata , the media server  can place various constraints on what metadata is permitted to be stored in a store used to hold the resource metadata . In one example, the following exemplary constraints apply: (a) the media server user sharing resource information must have read permissions for the file(s) storing the resource information being shared; (b) the file(s) storing the resource information being shared must have a known media type; (c) if the file(s) storing the resource information being shared is a hard link or a browser shortcut, the media server user trying to share the resource information must have read permissions on the underlying resource; (d) the file(s) storing the resource information being shared cannot be hidden; (e) the file(s) storing the resource information being shared cannot be a hidden subfolder; (f) the file(s) storing the resource information being shared cannot be stored on a removable drive; and (g) the file(s) storing the resource information being shared cannot be on a network share. Again, these constraints are merely exemplary; other applications can relax or remove one or more of these constraints depending on the requirements of the particular applications.","Continuing with the discussion of , the content directory service module  also includes a shared resource management storage module . This module  generally serves the role of managing the information stored in the shared resource store . For instance, the shared resource management module  updates the shared resource store  when the resource monitor module  notifies it that resources have been added, modified, or deleted from the resource store .","In one implementation, the shared resource management module  keeps track of the media server users who initially shared out each of the shared resource folders. The shared resource management module  can be configured to only allow media server users who have established a shared resource folder to modify the distribution criteria information  associated with that shared resource folder or to \u201cunshare\u201d that resource folder (that is, remove the shareable status of that resource folder). For example, in one implementation, suppose that a media server user has established access privileges to share files A, B and C. In this case, the shared resource management module  can be configured to only allow this user to apply distribution criteria for these files. Or suppose that files A, B and C have been grouped into a folder that includes other resources that this media server user does not have permission to share. If the shared resource management module  is configured to allow the media server user to apply distribution criteria to the folder, then these criteria will nonetheless only be effective for files A, B and C. Other implementations can relax these constraints in various manners.","In the event that the resource metadata  is provided in a separate file or files, the shared resource management module  can also include functionality for maintaining these separate file(s). This functionality may include background processes for \u201ccrawling\u201d through the shared files on the resource store  looking for changes in the shared files identified in the directory  on service initialization. This functionality can also include mechanisms for interacting with the resource monitor module  to provide notifications in the case changes are detected in the resource folders. The shared resource management  can throw out the separate file(s) if these file(s) are determined to be corrupted; the shared resource management module  can subsequently reconstruct the separate file(s) by crawling through the shared resource folders to extract metadata therefrom. Generally, the shared resource management module  can employ a variety of other coherency techniques to ensure that the separate file(s) accurately reflect the metadata of the shared resources.","In operation, the content directory service module  generally allows the consumer to investigate the resource metadata corresponding to shared resources. More specifically, in a typical interaction, the consumer sends a request via a control point to browse or search through the resource metadata associated with the shared resources provided in the directory . The device monitoring module  detects this request in a manner to be described in further detail below, and, in response, notifies the content directory service module . The content directory service module  responds by scanning the resource metadata  to locate any resources that meet the consumer's request. For instance, the consumer may have requested the content directory service module  to show all of the resource metadata in a certain genre; or the consumer may have requested the content directory service module  to provide resource metadata regarding a targeted resource (e.g., by specifying specific keywords for use in searching for the targeted resource). This process may yield one or more matching resource metadata items. The content directory service module  can then, if applicable, also examine any matching resource metadata against the criteria information  stored in the shared resource store  and cull out any matching resource metadata items that do not meet the relevant criteria. (It is possible to deactivate this provision so that the criteria information does not play a part in the dissemination of resource information.) Then, the content directory service module  will format a list of the surviving matching resource metadata into an XML message, and then transmit this XML message to the consumer. This resource metadata can describe individual matching resources as well as, if applicable, resource collections (such as resource containers) that include individual member resources.","The receiving control point device can translate the XML message into a presentation format (e.g., HTML), and then display this information for the consumer's review. This display can provide a media list that identifies the matching resource metadata. The consumer can then command the media rendering device  to play resource content associated with one or more items in the media list. This can be performed by passing the resource locators (such as URLs) associated with the selected items in the media list to a selected rendering device, such as rendering device . These resource locators were specified in the XML message sent to the consumer by the media server . (However, again note that the result of a browse operation can return resource containers, e.g., a list of containers; resource containers may or may not have resource locators associated therewith, and, if they do not, cannot themselves be presented at a rendering device for playing back, although the individual resources identified in the containers can be.)","One other component of the media service module  is a control panel COM object . Generally, this object  allows the control panel module  to retrieve and set configuration data in the media service module . In an exemplary implementation, the object  is a component object model (COM) object. Generally, COM objects perform one or more tasks. That is, a COM object exposes functions via an interface that an application can invoke to perform its ascribed tasks.","In the context of the media service , the control panel module  interacts with the media service module  via the control panel COM object . To serve this role, the control panel COM object  executes the following exemplary tasks. First, the control panel COM object  allows the control panel module  to enumerate the devices that have been discovered, retrieve their current state (e.g., whether they have been approved, denied, or neither approved nor denied), get device information that is used to populate the UI (such as the device's manufacturer, icon, model number, etc.), and approve or deny devices. Second, the control panel COM object  allows the control panel module  to manage the list of shared resource folders that contain the shareable resources stored on the resource store  and any associated distribution criteria information  associated with these resource folders (such as the list of devices that are permitted to receive resource information associated with these shared resource folders). For this purpose, the control panel COM object  allows the control panel module  to retrieve the list of currently shared resource folders and their associated distribution criteria information , to unshare these resource folders, to create new shared resource folders and\/or distribution criteria, to modify the distribution criteria associated with a shared resource folder, and so on. Finally, when the media service module  discovers new control points or media rendering devices on the UPnP network , it notifies the control panel module  using the control panel COM object  and a control panel hosted callback object  (to be discussed in greater detail below).","To accommodate fast user switching (FUS), the media server  allows multiple control panel modules  to be concurrently active. However, in one implementation, the media server  permits each terminal service session to have only one active control panel module .","b. The CDDM Service Module","As described above, the media service module  runs in the local service user context (or more generally, a clamped-down user context), while the CDDM service module  runs in the local system user context. The local service user context generally has more restrictive access privileges compared to the local system user context. Accordingly, the media service module  relies on the CDDM service module  to perform a series of functions which it does not have access rights to perform on its own. The privileged functions delegated to the CDDM service module , according to one exemplary implementation, are described below.","First, the CDDM service module  performs the role of starting the control panel module  when a new media rendering device  or control point  has been detected on the network  by the device monitoring module . This allows the media server user to approve or deny the device. An approved device is subsequently allowed to access resource information (resource metadata and resource content) corresponding to the media server 's shared resources. The CDDM service module  also starts the control panel module  if: (a) a media server user logs on to the media server  computer (or, as described below, reconnects to a previously established terminal server session on this computer); and (b) the media server  has previously detected devices that have neither been approved nor denied by any media server user.","Moreover, the CDDM module  starts the control panel module  to warn the media server user of various errors or conditions. For instance, the CDDM service module  can warn the media server user when no network interface has been found to have an IP address in the permissible previously configured IP address ranges (e.g., in the private IP address range or the Auto IP address range). Or the CDDM service module  can warn the media server user that a shared resource folder on the resource store  has been deleted or renamed when the resource information sharing functionality  service was not running. Generally, the CDDM service module  launches the control panel module  in the context of the currently active logged on user. The CDDM service module  starts the control panel module  by retrieving the logged on user's token and by calling a CreateProcessAsUser function. However, before doing so, it ensures that the control panel module  is not already running in the terminal server session of the currently active logged on user.","Second, the CDDM service module  adjusts the access privileges associated with a stored resource folder so that the media service module  can access the resource folder to perform its ascribed functions (such as constructing the resource metadata ). This can be performed by changing the access control list (ACL) associated with shared resource folders to permit access by the local service user context. In an exemplary implementation, this gives the local service user context read, write and delete access to the resource folders' contents. (That is, a resource folder is ACL'ed to give the local service user context write and delete access in addition to read access; this is because some media types should be decoded before they can be made available over the UPnP network . Tools used to decode the files sometimes create temporary files in the directory containing the files. The temporary files then should be deleted.)","Third, the CDDM service module  monitors the media server  to detect when new media server users sign onto or log off the computer system used to implement the media server . It also ascertains the identity of media server users logged onto the media server . That is, as explained above, the media service module  can restrict the sharing of resource information depending on the identity of the logged on media server user who is currently active on the media server computing machine. Accordingly, the media service module  can use the user information extracted by the CDDM service module  to determine whether it has permission to share out resource information in view of the currently active logged on media server user. (The CDDM service module  can determine the identity of the media server user by using a WTSQueryUserToken function to retrieve the logged on media server user's token and by retrieving the media server user's SID from the token using a GetTokenInformation function).","c. The Control Panel Module","The control panel module  provides functionality that allows the media server user to approve or deny the authorization of new devices added to the UPnP network . The control panel module  also allows a media server user to define shared resource folders and associated distribution criteria. As described above, one criterion can restrict the dissemination of resource information (e.g., resource metadata and resource content) to only specified devices. Another criterion can make the dissemination of resources contingent on whether a specified individual using the media server  has given implicit or explicit approval to share the resource information. The specified individual is considered to have given implicit approval (in one implementation) if he or she is simply logged onto the media server , and the individual's session is currently active. The control panel module  can perform the above-identified tasks via a series of UI presentations (e.g., UI pages). These UI presentations will be described in greater detail in Section B below. The control panel module  can be implemented as an applet (an applet is a program that executes in the context of an application) and can run in the context of a logged on media server user.","The media server  can activate the control panel module  in two ways. First, a media server user can manually activate the control panel module . Second, the media service module  can start the control panel module  automatically, e.g., to notify a media server user when a new rendering device has joined the UPnP network .","In one implementation, the media server  provides a single instance of the control panel module  in each terminal server session. Accordingly, when the control panel module  starts up, it verifies that another instance of the control panel module  is not already running in that terminal server session. The control panel module  then determines whether the media service module  is running; if it is not, the control panel module  starts it up. The control panel module  then co-creates the control panel COM object  that the media service module  hosts (described above). Finally, the control panel module  creates the client callback COM object  that it hosts; it then calls an Initialize( ) method associated with the control panel COM object , passing it the client callback object . The media service module  uses the client callback object  to notify the control panel module  of certain events, such as service shutdown, background data changes, or on discovering a new control point or media rendering device on the UPnP network  while the control panel module  is running.","The FUS technique provides a convenient technique for switching between different computing sessions associated with different respective media server users. For example, the technique allows a first media server user to connect to a computer and run an application, followed by a second media server user who runs another application. When the second media server user connects to the computer, the computer will save an application instance and desktop settings associated with the first media server user's session. When the first media server user connects to the computer again, the computer will restore the applications and settings associated with the first media server user's computer session at the time he or she disconnected. The FUS technique can toggle between any number of media server users in the above-described manner by recording multiple application instances and desktop settings associated with the different respective media server users who utilize the computer in succession. One exemplary commercial product that provides FUS is the Windows XP\u00ae operating system, provided by Microsoft\u00ae Corporation of Redmond, Wash. In contrast, in a traditional computing solution, a computer would require the first media server user to log out before allowing a second media server user to connect to it, thereby terminating the application of a first media server user upon connecting a second media server user to that same computer.","Application of the FUS technique to the media server  allows multiple instances of the control panel module  to exist at one time. For instance, as described above, a control panel module instance  is associated with media server user A , a control panel module instance  is associated with media server user B , and a control panel module instance  is associated with media server user C . However, application of the FUS technique to the above-described UPnP media server environment raises various challenges. This section describes an exemplary FUS solution which addresses these challenges in the context of the above-described UPnP media server .","First, while the media server  accommodates more than one instance of the control panel module  running at the same time, as described above, the media server  only permits each terminal server session to have one control panel module . To enforce this feature, the media server  requires that each control panel module  create the COM object  and initialize it (by calling the Initialize( ) method) before this object  is used. When calling the Initialize method, the caller should provide the client callback COM object .","More specifically, when a client calls the Initialize( ) method, the media service module  extracts the client's terminal server session ID from the client's impersonation token. The media service module  then determines whether this session ID is associated with another client. If it is, the media service module  calls into the callback object  of that client to determine if that client is still \u201calive.\u201d If the client is still active, then the new client is rejected. Otherwise, the media service module  accepts the new client and saves the client's callback object  for future use.","Second, since the media server  now accommodates multiple media server users, it can be configured to notify more than one logged on media server user upon the introduction of a new device to the network . The media server  also addresses the scenario in which no media server user is logged onto the media server  when a device is discovered (or a media server user is logged on but not active at the time the device is discovered). In these cases, the media server  defers notifying the media server user of the existence of the new device until a media server user logs on or resumes an existing session.","Third, the control panel module  recognizes that other instances of the module (e.g., instances  and ) may be concurrently active and modifying global data such as the authorization status of a device or the list of shared resource folders. To address this situation, the media server  notifies the COM client callback objects  associated with all of the clients that are active when any client modifies global data.","Finally, the media server  also includes a mechanism for excluding so-called rogue applications that may be \u201cmasquerading\u201d as the control panel module .  shows one exemplary such rogue application . More specifically, the media server  implements the API  between the media service module  and control panel module  as a private API (because it couples together internal components in the media server ). There exists a potential that an individual might attempt to reverse-engineer the API , allowing the rogue application  to call into the media service module  and tamper with its configuration data.","To address these concerns, the media service module  also assigns each client a unique client ID when the client successfully calls the Initialize( ) method associated with the control panel COM object . More specifically, the media service module  notifies the client of this ID by calling a method associated with the client's callback object . The media service module  also records the assigned ID. Then, when the client later again calls the service, the client is expected to provide its client ID. The media service module  detects the caller's currently supplied ID and compares this ID with the previously recorded client ID. That is, the media service module  can independently identify the client by retrieving the client's terminal server session ID from its impersonation token and, therefore, knows the client ID that should be supplied by the client. If these IDs match, then the media service module  permits the call; otherwise, the media service module  rejects the call.","It is possible that multiple users can be logged onto the media server  at the same time, as discussed above. The media server  can be configured to discriminate between the users based on terminal service session IDs extracted from respective client tokens associated with the users.","The client ID thereby prevents the rogue application  from \u201cspoofing\u201d the control panel module . The use of the client callback object  to notify the client of its ID provides extra assurance against rogue applications (compared to an alternative technique of returning the ID as an argument of the Initialize( ) method). This is because the rogue application  must meet the additional hurdle of providing a COM client callback object  when it calls the Initialize( ) method.","The media server  can provide an additional layer of security by requiring that the media service module  and the control panel module  exchange other secret information prior to establishing formal interaction between these two components.","The resource sharing feature described above (implemented using the criteria information ) finds its most common use in preventing authorized users from accessing resource information that the media server user wishes to maintain private (for example, for any number of reasons set forth in the illustrative family-related application discussed with respect to ). Similar privacy concerns exist with respect to dorm room applications (which generally refer to the application of the UPnP network  to any setting that may have a relatively large number of authorized users, but in which the media server user nevertheless desires to selectively dole out certain resource information to only a subset of authorized participants of this UPnP network ).","The resource sharing feature described above also provides a mechanism for safeguarding the resources of a UPnP network  against access by unauthorized entities. That is, the resource sharing feature limits the dissemination of resources to a known universe of devices. A device outside this known universe is therefore prohibited from accessing the resources of the UPnP network . The resource sharing feature also provides additional assurances by making resource information transfer contingent on the implicit or explicit consent of a specified media server user.","However, the resource sharing feature may not address every known security threat facing the UPnP network , particularly in regard to the case of unauthorized (as opposed to authorized) users. Further, security threats posed by unauthorized users are dynamic and opportunistic in nature, and as such, a media server user may have concerns that the resource sharing feature may not stand up to unforeseen future challenges to the security of the UPnP network .","The above concerns warrant supplementing the resource sharing feature with additional security mechanisms designed to protect the resource information of the UPnP network  particularly against unauthorized users. Additional measures would also be desirable to further ensure that authorized users do not receive private resource information that is not intended for their consumption. More specifically, there are at least two security concerns facing the UPnP network . A first security concern is posed by the possibility of an unauthorized entity \u201ctapping\u201d into the resource information provided by the UPnP network . This entity may be operating external to the UPnP network  and attempting to tap into the UPnP network  via cable modem, DSL modem, dialup connectivity, wireless connectivity, or some other coupling strategy. A second concern is posed by the possibility of an authorized or unauthorized entity distributing resource information to a large audience outside the original scope of the UPnP network . This is referred to as a \u201csuperdistribution\u201d scenario. Superdistribution may be intentional or unintentional.","This section describes multiple techniques for addressing the above two concerns. Any of these techniques can be applied individually, that is, without the other techniques. The media server  can also apply any combination of these techniques, including any two, three, four, etc. of these techniques to secure the UPnP network  to mitigate these concerns. Indeed, in one implementation, the media server  can apply all of the techniques. The media server  or other administrative interface can also optionally give the media server user the ability to individually enable and disable these techniques, e.g., through an appropriately configured user interface presentation.",{"@attributes":{"id":"p-0161","num":"0185"},"figref":["FIG. 7","FIG. 4","FIG. 7"],"b":["302","702","702","702","704","706","716","718","718","720","718","704","706","716","714","718"]},{"@attributes":{"id":"p-0162","num":"0186"},"figref":"FIG. 7","b":["314","702","722","724","726","722","728","314","728","724","730","314","730","704","732","733","718","704","732","733","718","733","726","734","314","720","314"]},"To thwart the above-described entities, the UPnP network  can include one or more of the following mechanisms.","a. IP Address Limiting","The resource information sharing functionality  (of ) can be limited to a predetermined non-public address range that will have the effect of excluding public broadband traffic. In one exemplary implementation, the predetermined address range is the 192.168 range (e.g., 192.168.0.0 through 192.168.255.255 according to one exemplary implementation) and the Auto IP range (e.g., 169.254.0.0 through 169.254.255.255 according to one exemplary implementation). Other exemplary non-public addresses ranges are 10.0.0.0 through 10.255.255.255 and 172.16.0.0 through 172.31.255.255 (according to one exemplary implementation). Any one of these ranges can be used, or a combination of these ranges can be used (or some other range(s) can be used). The ranges need not be contiguous (e.g., there can be \u201cnon-useable\u201d gaps within any of these ranges). Generally, the above specified ranges can be varied in various respects (e.g., by varying the \u201cendpoints\u201d of the ranges).","Say, for purposes of illustration, that the 192.168 and Auto-IP range is used. This range is selected because many commonly available home network routers have built-in DHCP servers that dole out addresses in the 192.168 range. Further, most routers on broadband networks are designed to simply drop messages that specify destination IP addresses in the 192.168 range. Accordingly, the resource information sharing functionality  will not respond to any requests having addresses outside the 192.168 range, and any messages within the 192.168 range are generally unsuitable for propagation over the routers of a public broadband network. This has the effect of creating a security wall between the private UPnP network  and the public broadband network or dialup connections.  illustrates this concept by showing a blocked access symbol  between the media server  and the Internet . This blocked access prevents someone internal to the home  or external to the home  from using the media server  to superdistribute its resources over a broadband network. This provision also prevents someone internal to the home  or external to the home  from tapping into the UPnP network  in an unauthorized manner.","To implement this feature, the resource transfer module , the content directory service module  and the device monitoring module  (of ) can all be configured to monitor interfaces only in the predetermined address range and\/or to discard requests originating from other IP addresses. The resource information sharing functionality  can provide various mechanisms that prohibit a media server user (or anyone else, for that matter) from modifying this predetermined address range, such as by hard coding this address range rather than making it a parameter accessible to media server user configuration.","b. MAC Address Authentication","As described previously, the resource information sharing functionality  uses the media access protocol (MAC) address of a device or other device-specific information to authenticate it. In this technique, the resource information sharing functionality  first identifies the IP address of a new device added to the UPnP network . (The new device is first detected using the device monitoring module  of .) The resource information sharing functionality  then translates the IP address into the MAC address using, for example, the SendARP function provided by Microsoft\u00ae Corporation's Internet Protocol Helper, which uses address resolution protocol (ARP). As discussed previously, the resource information sharing functionality  can then notify the media server user of the existence of the new device using, for instance, the user interface presentations to be discussed in Section B (below). If the media server user authorizes the device, the resource information sharing functionality  uses the IP and MAC addresses to authenticate the device when it subsequently makes a UPnP request (such as a browse or a search request) or makes a content-related request (such as an HTTP GET request). Requests from unauthorized devices are ignored. Using the MAC address of the originating request to authenticate the device is advantageous, because the IP address alone is not reliable (since IP addresses can change depending on the availability of a DHCP server).","This MAC authentication technique is particularly attractive in preventing wireless devices, such as device , from gaining unauthorized access to the resource information of the UPnP network . For instance, if entity  was driving by the home  and was simultaneously using the wireless access device , the resource information sharing functionality  might displaying a pop up message which asks the media server user (of the media server ) whether he or she wants to authorize this device. Unless the media server user opts to permit access, then the resource information sharing functionality  denies access to this device .","The MAC address authentication is most valuable when used in conjunction with other security measures, such as IP address limiting (as described in subsection (a) above). For instance, MAC authentication without IP address limiting may not provide adequate safeguards in network configurations in which the media server  is directly connected to a broadband network (or when the media server  is coupled to external functionality via a dialup connection). Without IP address limiting, the resource information sharing functionality  can detect \u201cneighboring\u201d devices outside the home and query the media server user whether these devices should be authenticated; this may not pose security risks, but it may present a nuisance due to the frequent display of pop up messages. Further, suppose that a broadband (or dialup) modem is connected to a proxy address resolution protocol (ARP) router on the Internet service provider's network. In this case, the resource information sharing functionality  will effectively authenticate all devices on the subnet that are routed through the proxy ARP router when it authenticates any one of these devices.","c. Subnet Limiting","In one exemplary implementation, the resource information sharing functionality  requires its network clients to operate on the same subnet that it operates on. By virtue of this restriction, the resource information sharing functionality  ignores UPnP action requests and resource content retrieval requests received from clients outside its local subnet. This has the effect of further reducing the possibility that devices operating outside the scope of the UPnP network  will be able to access its resources.","Note that the MAC address authentication procedure described above does not work across subnet boundaries because the ARP protocol does not transmit ARP packets across subnet boundaries; thus, if MAC address authentication is used, this technique will inherently also restrict operation to a single subnet. But using the resource information sharing functionality  to enforce subnet limiting differs from the implicit subnet limiting provided by SendARP( ); for instance, the latter technique can be compromised by modifying a routing table used in the technique.","Also note that, by default, the SSDP service (e.g., provided by Microsoft\u00ae Corporation on Windows\u00ae operating system platforms) limits the broadcast SSDP announcements to the subnet. That is, UPnP devices use SSDP to announce their presence over the network, and so, for the default setting, the resource information sharing functionality  will not be detected by UPnP devices on other subnets. This SSDP feature, however, differs from the subnet limiting performed by the resource information sharing functionality  because the former technique is dependent on a registry configurable setting. Also, the SSDP announcements are not limited to the 192.168 and Auto IP address ranges.","d. TTL Limiting","The resource information sharing functionality  can limit a time to live (TTL) parameter to further reduce the possibility that unauthorized entities are permitted to interact with the resource information of the UPnP network . In one exemplary implementation, the TTL parameter is an Internet Protocol (IP) parameter that generally corresponds to the number of nodes (e.g., IP Level 3 nodes, such as routers, etc.) traversed by a message in the course of it being sent from a source node to a destination node. Each IP packet includes a TTL parameter. In the context of a UPnP network , the TTL parameter can restrict the routing of messages sent by the content discovery service module  containing resource metadata associated with the shared resources. Alternatively, or in addition, the TTL parameter can also restrict the routing of responses to resource content requests (such as HTTP GET messages). For instance, a TTL parameter set to the number 3 would be sufficient to prohibit dissemination of resource information over a public broadband network (because transmission to a destination over a public broadband network will typically expose the message to many more routers than three). In the exemplary case where the resource information sharing functionality  restricts the UPnP network  to a single network that may involve only one router, the TTL parameter can be set as low as 1. In one exemplary implementation, the resource information sharing functionality  can hard code the TTL parameter so that it cannot readily be changed by a media server user (or by any other entity).","Note, for example, the exemplary case of  in which the TTL parameter has been set to 1. This setting can prohibit the media server  from serving out resource metadata and resource content to entity , as this entity  is coupled to the media server  via more than one router. The TTL setting thus effectively blocks access to router , as indicated by blocked access symbol . Setting the TTL parameter to a low value will also prohibit dissemination of resource information over the Internet , because such a broadband transmission will be subject to many intermediate routers en route to its final destination.","e. Device and Session Limiting","The resource information sharing functionality  can limit the number of UPnP devices that can be authorized at any one time to a predetermined number (such as, in one example, 10 devices). In one implementation, the specified maximum number of UPnP devices can encompass all kinds of devices that can be coupled to the UPnP network, including media rendering devices, media servers, control points, etc. In another implementation, the specified maximum number of devices can only pertain to one or more categories of UPnP devices, such as only media rendering devices. The resource information sharing functionality  can also limit the number of concurrent resource content serving sessions (such as concurrent HTTP sessions) to a predetermined number (such as, in one example, 10 sessions). The resource information sharing functionality  can hard code both of these parameters (i.e., the maximum device number and the maximum session number) to prevent a media server user (or any other entity) from easily changing these parameters and thereby avoiding this restriction.","In the context of , the home UPnP network  may limit the number of devices to 5, which may have the effect of preventing device  from gaining access to the resource information (both resource metadata and resource content). This denied access is denoted in  by the block access symbol . This provision helps ensure that even an authorized media server user cannot use the UPnP network  to distribute resources to a large number of recipients (e.g., in a superdistribution scenario). This provision also will generally thwart attempts to distribute resource metadata and resource content over the Internet , insofar as public broadband transmission commonly involves a great number of participants attempting to access shared resources.","f. Limiting Candidate Devices for Authentication to UPnP Actions","The resource information sharing functionality  can also limit interaction to only those devices that have invoked a UPnP action or that have announced themselves on the UPnP network  using SSDP as a media rendering device. (The former restriction accommodates UPnP control points which do not have to announce themselves on the UPnP network , but which are otherwise permitted to interact with the UPnP network .) These restrictions help exclude unauthorized entities that are attempting to interact with the resource information sharing functionality . That is, a potential \u201chacker\u201d will need to acquire and run appropriate UPnP software in order to interact with the resource information shared by the resource information sharing functionality ; this requirement raises the bar on unauthorized access to the UPnP network . For example, by virtue of these restrictions, the hacker cannot gain access to the resource content shared by the resource information sharing functionality  merely by opening up a Web browser and sending the resource information sharing functionality  a previously published resource locator corresponding to a shared resource. Rather, a device must first prove that it is a proper UPnP authorized device, e.g., by sending an initial UPnP action request (for instance, corresponding to a browse or a search request); only then will that device be permitted to access resource content using a resource content retrieval request. (Note that, in one exemplary implementation, devices that attempt to retrieve resource content without having been previously approved are not even presented to the media server user for approval even though they are newly discovered devices; that is, these content retrieval requests are ignored.)","As a further safeguard, the resource information sharing functionality  can require that every device that announces itself as a media rendering device have a unique device number (UDN). In one implementation, the resource information sharing functionality  verifies that the rendering device's UDN is different from that of other media rendering devices currently or previously detected on the UPnP network . The resource information sharing functionality  can silently deny access to a media rendering device if its UDN matches an already detected UDN. Further, once a device has been detected to be a media rendering device, the resource information sharing functionality  can require that its UDN remain unaltered. If the resource information sharing functionality  detects a change, then it can silently deny access to the device. Further, if a media rendering device has a serial number, the resource information sharing functionality  can require that this number also remain unaltered. If the resource information sharing functionality  detects a change in the number, then it can silently deny access to the device.","g. Resource Locator Retirement","As noted above, the resource information sharing functionality  uses resource locators (such as, but not limited to, HTTP URLs) to define the location of its resources. A component of each resource locator is a resource ID (e.g., ResourceID) that identifies the associated resource content. The resource information sharing functionality  can provide yet another security safeguard by periodically changing the resource locators that identify its resource content items. (In the following discussion, the term \u201cresource content item\u201d refers to the resource content associated with a selected resource stored in the resource store ; the term \u201citem\u201d is added simply for grammatical convenience and clarity.) This can be performed by periodically changing the resource IDs that identify the resource content items. This safeguard will have the effect of placing a time limit on the use of the resource locators. For instance, a consumer can perform a UPnP browse or a UPnP search action to retrieve one or more resource locators. However, since the resource information sharing functionality  periodically changes these resource locators, the consumer is forced to retrieve resource content items using a resource content retrieval request (using the retrieved resource locators) in a relatively timely manner. If the consumer waits too long, these resource locators will become stale and inoperative. Accordingly, if resource locators are leaked to unauthorized entities, these resource locators will not be effective for very long; this limits the damage caused by undesired disclosure of resource locators.","h. Various Resource Transfer Module  Security Measures","Several of the mechanisms identified above help protect the resource transfer module  (e.g., which may be implemented as an HTTP server) against various security threats. For instance, by virtue of the IP address limiting measure, the resource information sharing functionality  starts the resource transfer module  on only network interfaces in a private range (e.g., the 192.168 range) or in the Auto IP range. Further, by virtue of device and session limiting, the resource information sharing functionality  limits the number of resource content retrieval sessions to a predetermined number (e.g., 10 sessions) and limits the number of approved devices to a predetermined number (e.g., 10 devices). By virtue of the TTL limiting, the resource information sharing functionality  can limit the TTL parameter to a predetermined number (such as 3), and thereby restrict the number of routers involved when providing a resource content response. By virtue of the UPnP action limiting, the resource information sharing functionality  can serve resource content requests only if they originate from previously approved devices; it can ignore all other requests. (More specifically, the resource sharing functionality  does not have to present new devices that attempt to access resource content to the media server user for approval). Further, the resource information sharing functionality  shares out resource content only if the media server user sharing out the resource content has permissions to access the resource (e.g., the file) on the file system; this is so that media server users who are denied access to a resource on the media server  cannot play its content on a device on the UPnP network . The resource information sharing functionality  will further determine whether sharing is limited to certain devices, or preconditioned on a particular individual being logged onto the media server system.","The resource transfer module  can also include a variety of other security measures. For instance, the resource transfer module  can be configured to \u201ctime out\u201d if a client opens a communication socket and only partially writes the resource content retrieval request or does not read the resource content response in a timely manner. In one exemplary implementation, the resource information sharing functionality  can set these timeouts to five minutes. These timeouts can be hard coded to prevent media server users (or anyone else) from easily changing their values.","According to another feature, the resource transfer module  can limit resource content retrieval requests to a predetermined size, such as about 4000 characters.","According to another feature, the resource transfer module  can validate resource locators. Validation can entail ensuring that the resource locator conforms to a predetermined format, such as: http:\/\/machine ip:port\/ResourceID (that is, in the case that an HTTP URL is used). The resource transfer module  can also carefully parse and validate request headers.","Recall, with reference to , that the retrieval of resource information from the media server  can include four principal exchanges of information. In a first exchange (represented by path ), a consumer can use control point  to send a UPnP query to the media server . This UPnP query can be structured as a browse request or a search request. In a browse request, the consumer's intent is to scan a collection of resource metadata associated with the resources provided by the media server . In a search request, the consumer's intent is more targeted, e.g., to find specific resource metadata provided by the media server  identified by various search terms, etc.","In either case, in a second exchange (represented by path ), the media server  responds by presenting resource metadata associated with one or more resources (e.g., files in the resource store ) that meet the consumer's request. This resource metadata can include various high level information pertaining to the matching resources, such as title, genre, artist, date created, and so on. This resource metadata can also include resource locators (such as URLs) that identify the respective network locations from which the resource content items can be retrieved from. To facilitate discussion, in this section, the specific use of URLs in conjunction with an HTTP server is assumed; however, the principles described here can be applied to other kinds of resource locators and associated resource content servers. (In the following discussion, the term \u201cresource content item\u201d refers to the resource content associated with a selected resource stored in the resource store ; the term \u201citem\u201d is added simply for grammatical convenience and clarity.)","Presume that, after viewing the resource metadata, the consumer selects a corresponding resource content item to be played on a rendering device, such as rendering device . In this case, in a third exchange (represented by path ), the consumer enables the rendering device  to transmit a request to the media server  that instructs the media server  to retrieve the selected resource content item. For instance, the consumer can transfer the URL associated with the selected resource content item to the rendering device . The rendering device  responds by transmitting an HTTP GET request to the media server  that specifies the selected resource content item. This HTTP GET request includes the URL (that was passed to it by the control point) corresponding to the selected resource content item.","Finally, the media server  responds to the HTTP GET request by retrieving the selected resource content item at the location specified by the URL. In a fourth exchange (represented by path ), the media server  then provides the selected resource content item to the rendering device .","The remainder of this section describes a technique for improving the efficiency of the information exchanges described above.","To begin with, note that the resource store  will typically store files in a defined original media format. The term \u201cmedia format\u201d encompasses any characteristics regarding a resource that influence how it is stored and\/or rendered. For example, the media format may specify a format type (e.g., various types of compressed and uncompressed formats), a format resolution, and so on. For example, the resource store  can store an image file having a format type of RGB and a format resolution of 640\u00d7480. Accordingly, a rendering device can display this image file if it is configured to process images of size 640\u00d7480 expressed in the RGB format type. In addition, the media server  can include functionality (not shown) for converting a resource from its original media format into another media format upon the request of the consumer. Or the resource store  can store plural versions of the resources expressed in different respective original media formats. In either of these two cases, different media formats associated with a single resource can be conceptualized as comprising plural individual resources. Thus, for each individual resource, the media server  can be conceptualized as offering plural resources for selective distribution corresponding to different media formats.","The technique described herein provides a mechanism for allowing a consumer to retrieve resource content that conforms to a specified media format. The media server  can accomplish this objective in different ways. For frame of reference, one way of accomplishing this objective is to have the media server  publish different URLs respectively associated with different media formats of a resource content item. For example, a first exemplary URL may specify a resource content item having a format type of RGB and a format resolution of 640\u00d7480. A second exemplary URL may specify the same resource content item, but this time having a format type of YUV and a format resolution of 1280\u00d71024. Other exemplary media formats correspond to various icon and thumbnail sized versions, and a variety of standard display resolution formats. This approach, however, has various disadvantages. For instance, it requires the media server  to manage and publish a potentially large number of URLs associated with different media format permutations associated with a single \u201cparent\u201d resource content item. Providing this many URLs can complicate the UPnP network , thereby potentially increasing network traffic on the UPnP network , and creating other potential problems.","More specifically, in one implementation, the media server  can respond to a browse or a search UPnP request by providing a so-called \u201cres\u201d element for each matching resource. The \u201cres\u201d element includes the URL that identifies where the resource content item associated with the matching resource can be found. The above-described solution can specify the multiple media formats corresponding to a matching resource item in different ways. For instance, the media server  can provide multiple res elements each associated with a respective media format (each having its own URL). Alternatively, the media server  can create multiple matching items for each matching resource, with each matching item associated with a respective media format (having its own URL). Both of these solutions can introduce various complexities into the UPnP network , potentially negatively affecting its performance.","Also, in the above solution, the media server  only provides a limited set of URLs corresponding to an associated set of supported media formats. This limited set of provided media formats, however, may not meet the needs of the resource consumer.","In the technique featured below, the media server  can publish a single URL for an available resource content item in response to the consumer's browse or search request, and that single URL can include variable parameters that specify respective characteristic attributes that can be modified to describe a range of different media formats. That is, the media server  can publish the URL with original default values filled in for its variable parameters that reflect the media format in which the associated resource content item is determined to be best presented. A determination of the default media format that is \u201cbest\u201d can be based on one or more criteria. A control point (e.g., control point ) can modify these default parameters to accommodate a native media format used by a media rendering device, or based on some other consideration. For example, the control point  can determine the media rendering device 's rendering capabilities by calling a GetProtocolInfo UPnP action provided by its connection manager service module. The control point  can then select a media format (or more than one media format) that is compatible with the rendering device 's presentation capabilities and that is compatible with the rendering formats that the resource itself can support (as gleaned from the resource metadata returned to the control point  by the media server ). In the case where the resource content can be represented in more than one media format, the control point  can alert the consumer to this, and allow the consumer to select a media format. To facilitate to this task, the control point  can convert the supported media format information into information that is easy for the consumer to understand. Or the control point  can perform automated analysis to select among multiple possible formats (for example, based on a consideration of what the consumer has selected in the past, and so on).","In any case, modifying the parameters creates a modified URL, which can then be forwarded to the rendering device (e.g., rendering device ) that will present the resource content. The rendering device  can then retrieve the resource content item corresponding to the modified URL by submitting this modified URL to the media server . Alternatively, the control point  can simply send the original URL, without modifying its parameters, to the rendering device , which then transfers it to the media server ).","The media server  responds by reading the parameters from the URL sent to it by the media rendering device  and then providing the resource content item to the media rendering device  in the media format specified by the parameters in the URL. This operation may require the media server  to convert the selected resource content item from an original media format to the media format specified by the parameters of the URL. Or this operation may simply require the media server  to provide the stored resource content item without modifying it (in the case that the parameters indicate that no modification is necessary). Alternatively, the media server  may have stored the resource content item in multiple different media formats; in this case, the media server  can pick an appropriate stored media format if one is available without having to modify it.","In one implementation, the media rendering device  presents the received resource content item in the media format it receives from media server . In another implementation, the media rendering device  can also include conversion functionality (not shown) for converting the received resource content item to yet another media format before presenting it (or potentially, just storing it, etc.).","By virtue of the above-described technique, the media server  is not required to publish a large number of URLs associated with different permutations of possible media formats. This helps reduce traffic in the UPnP network  and simplifies the URL management requirements of the media server . This strategy also gives the control point  the flexibility to dynamically tailor the media format to best suit its needs for a rendering scenario it is currently addressing, without having to choose between a limited number of stock options. This strategy also provides a standard and uniform technique that allows control points to tailor the media format for different media servers with which they may interact with.","In one implementation, the media server  can select the original default values used in the URL based on one or more criteria. For instance, the media server  can select the original default values used in the URL by examining the resource associated with this URL. The resource may include information contained therein which identifies preferred original default values. Alternatively, the media server  can performs its own analysis on information extracted from a resource to make a judgment on the preferred original default values. Or the media server  can use other factors that are not derived from the resource itself, such as a consideration of what media formats are most popular, and so on. Still other techniques can be provided for selecting these preferred initial values.","Exemplary details of the above summarized technique are provided in the following. Consider the following exemplary parameterized URL that can be used to implement the above-described resource content retrieval strategy:\n\n","More specifically, in an exemplary implementation, the fourth field in the above-listed URL includes a number of parameters that collectively describe a media format used to render the resource. In the above example, a first parameter specifies the format type of the presentation format as YUV, a second parameter specifies the resolution width as 640, and a third parameter specifies the resolution height as 480. These parameters are merely exemplary. The URL can specify additional parameters, or fewer parameters. For instance, the URL can specify three additional parameters that describe a fill color used to render an image, e.g., R(red)=x, B(blue)=y, and G(green)=z. (That is, when an image is rendered, it may not cover the entire display surface of the rendering device; the fill color specifies the red, blue, and green components of the background color displayed in those display regions that do not include image content.)","Further, the parameterized URL can be expressed using other syntactical formats besides that specified above. In the above format, each parameter is specified as a name-value pair with the syntax of \u201cname=value.\u201d However, another syntax can omit the name information; instead of explicitly identifying the name information, this information can be inferred from the position of the associated value in the URL. An exemplary URL that omits explicit identification of the name information is as follows:",{"@attributes":{"id":"p-0210","num":"0235"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"http:\/\/ServerName\/Tulips.jpg?YUV,640\u00d7480"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Whatever format is used, the media server  can also publish information regarding the range of values that can be selected for each parameter. For example, in one illustrative implementation, the name parameter can accept values of YUV or RGB, the width parameter can accept values of 0 to 2048, and the height parameter can accept values from 0 to 2048. The media server  can publish this range information with the resource metadata itself when responding to a consumer's browse or a consumer's search requests. Alternatively, the media server  can disseminate the range information on a periodic basis, e.g., once a day, once a week, etc. Still alternatively, the range information can be pre-stored in the control points and\/or rendering devices based on known permissible ranges, so it is not necessary for the media server  to communicate this information.","As mentioned in the summary above, when the control point  receives the parameterized URL, it can change the parameters to any values permitted within the specified ranges of values (with or without the assistance of the consumer). For instance, consider the first identified exemplary URL. If the consumer's rendering device  is capable of displaying a YUV image having a resolution of 640\u00d7480, then the control point  would not have to modify the URL before the rendering device  submits it to the media server . However, suppose that a media rendering device can display YUV images on a display having a resolution of 1280\u00d71024. In this case, the control point can modify the above-described URL as follows:",{"@attributes":{"id":"p-0213","num":"0238"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"http:\/\/ServerName\/Tulips.jpg?format=YUV,width=1280,height=1024"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["306","302","302","306"]},"Consider another example where the media rendering device  can only display RGB images. In this case, the control point can modify the URL (which originally specified the YUV format type) to the RGB format type as follows:",{"@attributes":{"id":"p-0215","num":"0240"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"http:\/\/ServerName\/Tulips.jpg?format=RGB,width=1280,height=1024."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["302","306","302","306"]},"In one implementation, when the media server  converts the resolution of the image to suit the specifications of the rendering device , it will attempt to preserve the aspect ratio of the original image. This prevents the image from appearing unnaturally distorted on the rendering device . This may leave regions of the display surface of the rendering device that do not contain image content. The fill color that can be specified in the URL can be used to display a background color in these empty regions.","The examples above emphasized the use of parameterized URLs to render images. However, this strategy is also applicable to other media and information types, such as audio information and video information. For instance, for PCM audio, the URL can includes parameters that specify the sampling rate, the number of channels (mono, stereo, 5.1 surround sound, etc.) and the number of bits per sample. For digital video, the URL can specify whether NTSC or PAL is to be used at the rendering device, and so on.","Further, the examples presented above emphasized the use of URL parameters that describe respective characteristic attributes that pertain to the format of the resource content (e.g., generally pertaining to how the resource content is stored and\/or presented). However, other parameters can describe attributes that pertain to other features of the resource content. For instance, these other parameters can describe timing information related to the playback of resource content, such as a time interval from the start of the resource content at which resource content is to be played back, as well as the duration of the playback, and so on.","Further, the examples presented above described the case where a single URL was used to define all media format permutations associated with a resource content item. However, the media server can use two or more URLs to represent different aspects of the resource content item. For example, different URLs can be generated for different MIME types, and each URL can include one or more parameters within the context of a particular MIME type. For instance, a media server that can present a resource content item in WMA and MP3 formats can provide two URLs corresponding to these two formats. Each of these URLs may include one or more variable parameters for changing format characteristics within their particular MIME type. For example, the WMA URL can include a bit rate parameter that can be modified from a bit rate of 128 kbps to a bit rate of 90 kbps, etc. Converting from one MIME type (or other type of category) to another can be referred to as \u201cinter-format\u201d transcoding. Converting parameters within a MIME type (or other type of category) can be referred to as \u201cintra-format\u201d transcoding. However, this is merely one exemplary scenario. As mentioned, the implementations described above used a single URL to convert between all aspects of a resource content item, including format type.","Further, the examples presented above described a resource content retrieval procedure whereby a control point receives an original URL, modifies that URL, and then transfers that modified URL to the media rendering device (or, if no change is made, transfers the unmodified URL to the media rendering device). The media rendering device then transfers the modified (or unmodified) URL to the media server, prompting the media server to return the resource content item that is identified in the modified or unmodified URL. However, many other retrieval schemes are possible. For instance, the control point can retrieve the original URL and send it immediately to the media rendering device. The media rendering device can then modify the URL (or decide not to modify it), and transfer this URL to the media server. In this implementation, the control point would not have to investigate the rendering requirements\/characteristics of the media rendering device, since the media rendering device is now itself handling any modifying of the URL that may be required or desired. Still other permutations are possible. For instance, a single recipient entity can perform all of the functions, or one or more other entities besides the control point and the media rendering device can be employed to serve a role in the retrieval of resource information.","Finally, the above discussion was based on one implementation in which the media server  served the role of receiving the modified URL, processing the resource content item based on the modified URL, and doling out the resource content to the rendering device (or other recipient entity). But, more generally, the media server  can be implemented having (or can be conceptualized as having) multiple agents or modules for performing each these tasks, or a different allocation of tasks, and the agents performing these tasks may or may not be co-located together, and\/or with other parts of the media server . For instance, in one implementation, the media server  can be viewed as a loose aggregation of dispersed agents performing the tasks described above that together constitute the media server .","In one exemplary implementation, the control panel module  (of ) provides a series of UI presentations (also referred to as pages) that allow media server users to interact with the media server . For instance, the control panel module  can provide a first series of UI pages for enabling and disabling devices coupled to the UPnP network . The control panel  module can provide another series of UI pages for allowing a media server user to select which resources should be shared, and under what conditions the resources should be shared. Sections B.1 and B.2 respectively describe these two categories of UI pages.","Generally, in one implementation, the control panel module  can provide the above-described UI pages through a control panel interface (such as the familiar control panel interface functionality provided by Microsoft\u00ae Corporation of Redmond, Wash.). As such, the UI presentations can be tailored to adopt the look and feel of control panel UI presentations (having, for instance, \u201ctabbed\u201d display pages). This choice in UI style is merely exemplary; other styles and UI layouts can be used to implement the UI pages.",{"@attributes":{"id":"p-0224","num":"0249"},"figref":"FIGS. 8-10","b":["506","314"]},"To begin with, when a new media rendering device is detected on the UPnP network , the media server  can be implemented to alert the media server user of its presence. According to one technique, the control panel module  can perform this alerting function by providing the balloon type message  shown in . This message  states that \u201cA New Digital Media Receiver has been found. Do you wish to enable, disable, or configure this device?\u201d This message  can include hypertext links that allow the media server user to select one of the enumerated options, that is, by clicking on the hypertext link associated with a selected option. Other message styles and selection formats can be used; the message  shown in  is merely one example.","The control panel object  activates the UI page  shown in  upon activation of a hypertext link in the message . This page  includes a plurality of sections (, , ). Each section provides information regarding a different device coupled to the UPnP network . For instance, section  indicates a new device has been found. This section  also identifies the manufacturer and model of the new device. This section  also gives the media server user the option of enabling the new device by activating a hypertext link within the section. Section  describes a device that has been previously enabled. Accordingly, this section  gives the media server user an opportunity to disable this device by activating a hypertext link associated with this section . Section  describes a device that has been previously disabled (but is not otherwise new to the UPnP network ). Accordingly, this section  gives the media server user an opportunity to enable this device again.","The control panel object  activates UI page  shown in  if the media server user activates a hypertext link associated with any of the sections in UI page . UI page  provides overview information that describes the characteristics of the selected device. It also includes three command buttons (, , ). Command button  allows the media server user to enable the device. Command button  allows the media server user to disable the device. Command button  allows the media server user to change the name of the device as it will appear on the UI display pages. This last button  may be useful to give the device a \u201cuser friendly\u201d name that is easily recognized, such as \u201cKid's PC.\u201d",{"@attributes":{"id":"p-0228","num":"0253"},"figref":"FIG. 11","b":["1100","314","1100","1102","1104","320","1106","1108","1106","1104","302","1108","1104","314"]},"A second entry, on the other hand, identifies a name of \u201cC:\\My photos\u201d , a user of \u201cDonald , and a device of \u201cKids bedroom device\u201d . By virtue of the user criterion \u201cDonald\u201d , the resource information in the resource folder \u201cC:\\My photos\u201d  can only be retrieved when the user Donald is logged onto the currently active terminal server session on the computer implementing the media server  (or when Donald otherwise gives consent for the transfer of resource information, e.g., by responding affirmatively to a pop up message when a consumer in the UPnP network  attempts to access resource information). Still other variations on this design motif are possible. For instance, as stated above, the resource information sharing functionality  can be configured to provide more than two distribution criteria that govern distribution of resource information (or less than two criteria, or no criteria).","Only three resource folders  are shown in . The media server user can select additional resource folders to share by actuating an add command button . A modify command button  permits the media server user to modify the existing list of shared resource folders . A remove command button  permits the media server user to remove resource folders from the existing collection of resource folders .","As described in previous sections, a first set of criteria can govern the dissemination of resource metadata and a second set of criteria can govern the dissemination of resource content. To facilitate explanation,  is based on the assumption that the same set of criteria governs both the distribution of resource metadata and resource content. However, if the resource information sharing functionality  allows the media server user to distinguish between criteria for resource metadata and criteria for resource content, then the user interface pages can be suitably modified to display more fine-grained criteria information, and to allow the media server user to enter criteria information on a more fine-grained level. Criteria for resource metadata and criteria for resource content can be distinguished in the user interface pages in different ways, such as by allocating different user entry fields to these categories.",{"@attributes":{"id":"p-0232","num":"0257"},"figref":["FIG. 12","FIG. 11","FIG. 11","FIG. 12"],"b":["1200","506","1118","1122","1118","1200","1122"]},"For instance, the page  identifies the share name of the resource as \u201cMy videos\u201d , the consent-related criterion as \u201cAll\u201d , and the device criterion as \u201cAll devices\u201d . The media server user can modify the first field  by editing information in its associated text box (e.g., using a mouse and keyboard input devices to edit this field). The second and third field (, ) are set up as pull-down selection menus that provide predefined lists of users and devices, respectively. For instance, the pull-down selection field  is expanded in  to show its predefined list. The media server user can select one or more entries from these pull-down lists to provide input for these two fields (, ). Other data entry techniques besides text entry boxes and pull-down menus can be used to enter the information solicited by page . Once again, if the media server functionality  allows the media server user to discriminate between resource metadata criteria and resource content criteria, then this page  can be expanded in a suitable manner to provide additional fields for data entry.",{"@attributes":{"id":"p-0234","num":"0259"},"figref":["FIGS. 11 and 12","FIG. 13"],"b":["1300","1300","1300","1302","1304","1306","1308","1310","1312","1314"]},{"@attributes":{"id":"p-0235","num":"0260"},"figref":"FIG. 14","b":["1400","1402","302","302","1404","302","1402","1404"]},"Page  also allows the media server user to make various selections that govern the security applied by the media server . For instance, selection item  allows the media server user to specify whether the media service should be automatically started when the media server user starts up the computer implementing the media server . Selection item  allows the media server user to specify the maximum number of devices on the network  that are permitted to interact with the media server . Similar user entry fields (not shown) can be used to allow the media server user to specify other security options pertaining to the security mechanisms discussed in Section A.5 above. For instance, if permitted, a suitable UI page can allow the media server user to selectively activate or deactivate any of the mechanisms described in Section A.5, as well as specify any relevant parameters used in these mechanisms.","Finally,  shows a page  that can be used as part of an automated setup procedure, commonly referred to as a \u201cwizard.\u201d This page provides a hierarchical representation of a resource folder  provided on the resource store  containing resources. The directory  contains checkboxes positioned adjacent to each resource folder in the hierarchy. The media server user can indicate whether each of these resource folders should be shared by selectively clicking on the checkboxes next to the respective resource folders. A rightmost part of the page  provides selection items ( and ) that allow the media server user to make the same global criteria selections discussed above in the context of .","In the above discussion, distribution criteria were assigned to resources on a per-folder basis. However, it is also possible to apply distribution criteria to resources on a per-container basis by displaying information on a per-container basis and allowing a media server user to enter information on a per-container basis.","Once again, the layout for the UI illustrated in the drawings is exemplary. Other UI strategies can allow the media server user to select from among the main topics of: Devices; Sharing; Settings; and Events. Within the Sharing category, the media server  can give the media server user the option of sharing resources within the resource categories of: My Music; My Pictures; My Videos, etc.",{"@attributes":{"id":"p-0240","num":"0265"},"figref":["FIGS. 16 and 17","FIGS. 18-20"]},"C.1. Device Authorization Processes",{"@attributes":{"id":"p-0242","num":"0267"},"figref":["FIG. 16","FIG. 8","FIGS. 9 and 10"],"b":["1600","302","314","1602","314","1604","302","1606","302","1608"]},{"@attributes":{"id":"p-0243","num":"0268"},"figref":"FIG. 17","b":["1700","1702","1704","314"]},"A more in-depth explanation of operations illustrated in  can be provided with reference to the architecture  shown in . When a new media rendering device is added it emits a UPnP announcement. The device monitoring module  detects this announcement. Similarly, the device monitoring module  also detects requests made by control points coupled to the UPnP network . In response, the device monitoring module  looks up the new device's IP address and gets the MAC address using SendARP( ). If the MAC address is new, the device monitoring module  notifies the control panel COM object , which, in turn notifies any callback objects  that already exist. The device monitoring module  also notifies the CDDM service module . The control panel callback object  will notify the media server user through the control panel module . The CDDM service module  will decide whether it needs to create a control panel module  for the currently active terminal server session, and if so, it does so.","C.2. Resource Sharing Processes",{"@attributes":{"id":"p-0246","num":"0271"},"figref":["FIG. 18","FIG. 19","FIG. 20"],"b":["1800","1900","2000"]},"a. Defining Shared Resources","Beginning first with , the procedure  is merely illustrative of one of the many ways to specify shared resource folders and distribution criteria. As demonstrated in Section B above, there are many different UI strategies for collecting this information, and hence there are many associated processes for performing this task. To facilitate the discussion, it is assumed that only one set of criteria is being collected that will govern both the dissemination of the resource metadata and the resource content. In the case where the resource information sharing functionality  allows the media server user to discriminate between two different sets of criteria for resource metadata and resource content, then the operations shown in  can be suitably expanded to collect this information.","In step , the media server user selects a shared resource folder.  show just a few of the techniques that the media server user can use to perform this task.","In step , the media server user selects an individual (if any) who should give their consent to the transfer of resource information. As described previously, this constraint can be construed liberally or narrowly depending on how the service is configured. In a liberal implementation, the identified individual is assumed to give their implicit consent if they are logged onto a currently active terminal server session on the computer system that implements the media server . In a more stringent implementation, the media server  specifically queries the identified individual when a consumer attempts to retrieve resource information to determine whether the identified individual approves this transfer. Transfer only occurs if the identified individual approves the transfer. If no identified individual is selected, by default, there is no consent-related constraint that affects the distribution of resources.","In step , the media server user selects the devices that are authorized to receive the resource information in the selected resource folders.  show just a few of the UI techniques that can be used to solicit the criteria collected in steps  and . Also, as previously noted, additional steps can be provided to collect additional criteria that affect the distribution of the resource information in the resource folders.","In step , the control panel module  optionally alerts the media server user to the consequences of sharing resource information in the designated resource folders to the specified devices, governed by the specified consent-related user criteria. This can be performed by presenting a message explaining the constraints imposed (or the lack of constraints imposed) by the media server user's selections. After viewing such a message, the media server user may decide to revise one or more prior selections. Step  indicates that the media server user can repeat one or more selections if the media server user is unhappy with the specified ramifications; else the process  will continue.","In step , the media server  determines whether the media server user has permission to share the resource information in the selected resource folder. Namely, the creator of the resource folder may have specified one or more individuals who have permission to modify, read and\/or distribute the resource information in the resource folder. If the media server user is not one of these individuals, then step  indicates that the resource folder cannot be shared. If the media server user is one of these individuals, then step  indicates that the resource information in the resource folder can be shared, and the process  thus continues.","Step  entails changing the status of the selected resource folder to \u201cshared.\u201d This step  may involve registering the shared resource folder in the shared resource store , and storing relevant distribution criteria in the criteria information .","In the above discussion, distribution criteria were assigned to resources on a per-folder basis. However, it is also possible to apply distribution criteria to resources on a per-container basis in a manner analogous to that described above.","Additional general considerations relevant to the sharing of resources in resource folders are set forth below. In the discussion below, \u201cresources\u201d may correspond to files within resource folders stored in the resource store . The resource folders are indicated as having a shareable status or non-shareable status. Also recall that each resource has \u201cresource information\u201d that is actually disseminated, including resource metadata and resource content.","More specifically, in one exemplary implementation, the content directory service module  only permits media server users to designate resource folders as shareable, not individual resources in the resource folders. That is, the resources are designated as shareable by inclusion in a shareable resource folder, rather than on a resource by resource basis. Furthermore, the content directory service module  may permit media server users to only designate certain types of audio, video, and picture resources as shareable (such as an exemplary universe of files including: for audio files, the formats MP3, WMA, PCM, and WAV; for video files, the formats MPEG-1,2, WMV, and AVI; and for picture formats, the formats JPEG, GIF, BMP, PNG, and TIFF). Further, the content directory service module  may place restrictions on designating hidden files, network shares, and removable media as shareable (that is, thereby preventing the media server user from designating these resources as shareable). These provisions may be beneficial to improve the security provided by the UPnP network , as unfamiliar resource information that does not fall into the above permissible categories will not be shared. In alternative implementations, however, it is possible to designate one or more of the above-identified \u201cforbidden\u201d resources as shareable.","In another exemplary implementation, a resource folder designated as shareable may have additional sub-collections (e.g., subfolders and files). When the media server user elects to designate any given resource folder as shareable, all resources in the shared resource folder and all its subresource folders can be automatically designated as shareable as well.","In another exemplary implementation, the media service module  also permits a media server user to designate a resource folder as \u201cunshared\u201d (e.g., to thereby remove the shareable status of a resource folder previously assigned to the resource folder). However, in one exemplary implementation, the media server user is not permitted to designate any of the sub-resources (e.g., subfolders and files) of shareable parent resources as unshareable. That is, for example, where a media server user designates \u201cc:\\doc\\\u201d as shareable, the media server user will not be permitted to designate \u201cc:\\doc\\music\\\u201d as unshared, e.g., because the root resource folder \u201cc:\\doc\\\u201d has been designated as shared. However, in another implementation, the content directory service module  can be configured to permit selective designation of unshared resources.","In another exemplary implementation, a media server user may change the name of a resource directory designated as shared. The content directory service module  can track the changes of any change of name while the service is running and automatically transfer the share-related properties associated with the old name to the new name. Whenever a media server user makes a change to any of the resources that have been designated as shared, the content directory service module  can be configured to notify the devices coupled to the UPnP network  of this change. This can be performed by sending out a UPnP event.","b. Distributing Shared Resources Based on a Request",{"@attributes":{"id":"p-0262","num":"0287"},"figref":"FIG. 19","b":["1900","526","1902","302","302","302","302","302"]},"In step , the media server  scans through the shared resource store  to locate any resource metadata items associated with the shared resource folders that meet the consumer's requirements. That is, this entails examining the resource metadata  to cull out specific resource metadata items that meet browse or searching parameters (e.g., pertaining to desired resource type, resource name, resource artist, and so on). The scanning may also entail examining the criteria information  to determine whether the resource metadata items that match the browse or the search terms otherwise do not satisfy specified relevant distribution criteria. For instance, the media server  may identify ten resource metadata items (corresponding to ten associated resources) that meet the consumer's requirements, but only three of these are permitted by the device-related criterion to be displayed at the device that the consumer is currently using (e.g., associated with the control point from which the consumer transmitted the browse or the search request).","In step , the media server  generates an XML message that describes the results of the above-described processing. The XML message may be governed by an XML schema that specifies various fields of information that the message should contain, and in what format it should present these fields. Other formats besides XML can be used to convey this information. In step , the media server  transmits the message from the media server  to the control point that the consumer is using.","In step , the control point receives the XML message and translates it to a presentation format. The consumer is then permitted to view a list of resource metadata items corresponding to one or more shared resources identified by the media server . The consumer may select one or more resources from the list for presentation at a selected rendering device.","c. Processing of Parameterized URLs",{"@attributes":{"id":"p-0267","num":"0292"},"figref":["FIG. 20","FIG. 20"],"b":["2000","302","2000"]},"In step , the consumer receives resource metadata from the media server  at a control point, such as control point . This step corresponds generally to step  in . For shared resources, the metadata typically includes at least one parameterized URL. As explained in Section A.6, the parameters in this URL specify a media format of the resource content item identified by the URL. For instance, one parameter might describe the format type in which the resource content item can be provided (such as RGB or YUV format types for an image resource). Another parameter might describe the format resolution of the resource content item (such as the height and width of a particular image resolution). These parameters are merely exemplary; additional or different parameters can be provided. In any event, when formulating a response to a browse or a search request, the media server  may select default values for these parameters which could, for example, reflect the media format in which the resource content item is currently being stored in the media server . Or the media server  may select default values which the media server  determines are best based on other considerations.","In step , the control point  optionally changes one or more parameters in the returned parameterized URL. For instance, the URL may originally specify a certain image resolution. The control point can change the value of this parameter to accommodate the larger display resolution provided by a rendering device that will present the image.","In step , the control point  transfers the modified (or unmodified) URL to the rendering device that will eventually render the resource content item, such as the rendering device .","In step , the rendering device  can then submit the modified URL to the media server . This step can be performed via an HTTP GET command that includes the modified (or unmodified) URL.","In step , the media server  receives the HTTP GET command that includes the modified (or unmodified) URL. It then retrieves the resource content item from the resource store . If the retrieved resource content item does not have the media format specified in the URL, then the media server  can convert it to the specified media format.","In step , the media server  forwards the resource content item identified by the modified URL to the rendering device  for presentation at this device .","In step , the media rendering device  receives and presents the resource content item sent to it by the media server . The rendering device  can also optionally convert the resource content item into another media format prior to its presentation at the rendering device .","Again, the procedure shown in  is merely one possible scenario. In another scenario, the control point  can transfer the original URL to the rendering device , and the rendering device  can modify it (or decide not to modify it). Thereafter, the rendering device  transmits this modified (or unmodified) URL to the media server  in the manner described above.","In , it was assumed that the one or more parameters in the URL contained information which specified the media format of the corresponding resource content item. However, other URLs can include parameters that specify other characteristics of the resource content items besides media format information (such as timing-related information).","Finally, the basic framework of  also applies where the resource metadata includes no parameterized URLs (that is, where the resource metadata includes URLs that do not have any variable parameters). In this case, the URL modifying operation shown in  would not be performed.",{"@attributes":{"id":"p-0278","num":"0303"},"figref":["FIG. 21","FIGS. 3 and 5"],"b":["2100","302","316","318","304","312"]},"The computing environment  includes the general purpose computer  and the display device  discussed in the context of . However, the computing environment  can include other kinds of computer and network architectures. For example, although not shown, the computer environment  can include hand-held or laptop devices, set top boxes, programmable consumer electronics, mainframe computers, gaming consoles, etc. Further,  shows elements of the computer environment  grouped together to facilitate discussion. However, the computing environment  can employ a distributed processing configuration. In a distributed computing environment, computing resources can be physically dispersed throughout the environment.","Exemplary computer  includes one or more processors or processing units , a system memory , and a bus . The bus  connects various system components together. For instance, the bus  connects the processor  to the system memory . The bus  can be implemented using any kind of bus structure or combination of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. For example, such architectures can include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, and a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus.","Computer  can also include a variety of computer readable media, including a variety of types of volatile and non-volatile media, each of which can be removable or non-removable. For example, system memory  includes computer readable media in the form of volatile memory, such as random access memory (RAM) , and non-volatile memory, such as read only memory (ROM) . ROM  includes an input\/output system (BIOS)  that contains the basic routines that help to transfer information between elements within computer , such as during start-up. RAM  typically contains data and\/or program modules in a form that can be quickly accessed by processing unit .","Other kinds of computer storage media include a hard disk drive  for reading from and writing to a non-removable, non-volatile magnetic media, a magnetic disk drive  for reading from and writing to a removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and an optical disk drive  for reading from and\/or writing to a removable, non-volatile optical disk  such as a CD-ROM, DVD-ROM, or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are each connected to the system bus  by one or more data media interfaces . Alternatively, the hard disk drive , magnetic disk drive , and optical disk drive  can be connected to the system bus  by a SCSI interface (not shown), or other coupling mechanism. Although not shown, the computer  can include other types of computer readable media, such as magnetic cassettes or other magnetic storage devices, flash memory cards, CD-ROM, digital versatile disks (DVD) or other optical storage, electrically erasable programmable read-only memory (EEPROM), etc.","Generally, the above-identified computer readable media provide non-volatile storage of computer readable instructions, data structures, program modules, and other data for use by computer . For instance, the readable media can store the operating system , one or more application programs  (such as logic implementing the media server , control points (, ) or any of the media rendering devices (-) shown in ), other program modules , and program data .","The computer environment  can include a variety of input devices. For instance, the computer environment  includes the keyboard  and a pointing device  (e.g., a \u201cmouse\u201d) for entering commands and information into computer . The computer environment  can include other input devices (not illustrated), such as a microphone, joystick, game pad, satellite dish, serial port, scanner, card reading devices, digital or video camera, etc. Input\/output interfaces  couple the input devices to the processing unit . More generally, input devices can be coupled to the computer  through any kind of interface and bus structures, such as a parallel port, serial port, game port, universal serial bus (USB) port, etc.","The computer environment  also includes the display device . A video adapter  couples the display device  to the bus . In addition to the display device , the computer environment  can include other output peripheral devices, such as speakers (not shown), a printer (not shown), etc.","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . The remote computing device  can comprise any kind of computer equipment, including a general purpose personal computer, portable computer, a server, a router, a network computer, a peer device or other common network node, etc. Remote computing device  can include all of the features discussed above with respect to computer , or some subset thereof.","Any type of network can be used to couple the computer  with remote computing device , such as a local area network (LAN) , or a wide area network (WAN)  (such as the Internet). When implemented in a LAN networking environment, the computer  connects to local network  via a network interface or adapter . When implemented in a WAN networking environment, the computer  can connect to the WAN  via a modem  or other connection strategy. The modem  can be located internal or external to computer , and can be connected to the bus  via serial I\/O interfaces  or other appropriate coupling mechanism. Although not illustrated, the computing environment  can provide wireless communication functionality for connecting computer  with remote computing device  (e.g., via modulated radio signals, modulated infrared signals, etc.).","In a networked environment, the computer  can draw from program modules stored in a remote memory storage device . Generally, the depiction of program modules as discrete blocks in  serves only to facilitate discussion; in actuality, the programs modules can be distributed over the computing environment , and this distribution can change in a dynamic fashion as the modules are executed by the processing unit .","Wherever physically stored, one or more memory modules , , , , etc. can be provided to store the media server  functionality described in . In one exemplary implementation, aspects of the functionality provided by the media server  can be implemented in managed code that targets Microsoft\u00ae Corporation's NET Framework, or other virtual machine environment.","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 7","FIG. 4"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIGS. 8-15","FIG. 5"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIGS. 16-20","FIG. 3"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 21","FIG. 5"]}]},"DETDESC":[{},{}]}
