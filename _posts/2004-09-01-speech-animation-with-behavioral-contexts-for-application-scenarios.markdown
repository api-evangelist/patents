---
title: Speech animation with behavioral contexts for application scenarios
abstract: Methods and systems, including computer program products, for speech animation. The system includes a speech animation server and one or more speech animation clients. The speech animation server generates speech animation content that drives the expressions and behaviors of talking agents displayed by the speech animation clients. The data used by the server includes one or more references to behavioral contexts. A behavioral context corresponds to a particular application scenario and includes a set of expressions that are appropriate to the particular application scenario. A behavioral context can also be defined as a combination of two or more other behavioral contexts. The server automatically incorporates the expressions of a particular behavioral context into any data that references the particular behavioral context.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07599838&OS=07599838&RS=07599838
owner: SAP Aktiengesellschaft
number: 07599838
owner_city: Walldorf
owner_country: unknown
publication_date: 20040901
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present disclosure relates to data processing by digital computer, and more particularly to speech animation. Speech animation refers to speech that is synchronized with facial expressions.","Existing speech animation systems require user intervention to feed input text into the system. Typically, users must either manually enter the text or manually load a text file into the system. Typically, users must create a separate input text for each instance of speech animation that the system outputs.","The present invention provides methods and systems, including computer program products, implementing techniques for speech animation.","In general, in one aspect, the techniques include receiving a first request from a client application for first speech animation. The first request identifies data to be used to generate the first speech animation. The first speech animation is speech synchronized with facial expressions. The identified data includes a reference to a behavioral context. The behavioral context corresponds to a particular application scenario and includes a set of expressions that are appropriate to the particular application scenario. The techniques further include retrieving the data and the set of expressions in the behavioral context, generating the first speech animation using the retrieved data and the set of expressions in the behavioral context, and sending a response identifying the generated first speech animation to the client application.","The techniques can be implemented to provide one or more of the following features:","Retrieving the data includes retrieving the data in real time.","The data specifies text to be used to generate the first speech animation. The text includes variable elements. The data specifies a voice to be used to generate the first speech animation. The data specifies a pool of synonyms; and generating the first speech animation includes selecting a synonym from the pool of synonyms.","The first request further identifies context information taken from a live session of the client application, and generating the first speech animation includes incorporating the context information into the generated first speech animation.","The context information includes information about a user of the client application. The client application is a web application and the first request is an HTTP request.","The techniques further include receiving a second request from the client application for a second speech animation, the second request identifying data to be used to generate the second speech animation, wherein the data identified in the second request is different from the data identified in the first request, but contains a reference to the same behavioral context referenced by the data identified in the first request; and generating the second speech animation using the identified data and the same set of expressions used to generate the first speech animation.","In general, in another aspect, the systems include a speech animation server and a client application in communication with the speech animation server.","The client application is operable to perform the following operations: sending a request for speech animation to the speech animation server, the request identifying data to be used to generate the speech animation, the speech animation being speech synchronized with facial expressions; receiving a response from the speech animation engine, the response identifying the generated speech animation; and using the generated speech animation to animate a talking agent displayed on a user interface of the client application.","The speech animation server is operable to perform the following operations: receiving the request for speech animation from the client application; retrieving the data identified in the request, wherein the retrieved data includes a reference to a behavioral context, the behavioral context corresponding to a particular application scenario and including a set of expressions that are appropriate to the particular application scenario; generating the speech animation using the retrieved data and further using the set of expressions defined in the behavioral context; and sending the response identifying the generated speech animation to the client application.","The system can be implemented to include one or more of the following features:","Retrieving the data includes retrieving the data in real time.","The data specifies text to be used to generate the speech animation. The text includes variable elements. The data specifies a voice to be used to generate the speech animation. The data specifies a pool of synonyms; and generating the speech animation includes selecting a synonym from the pool of synonyms.","The request further identifies context information taken from a live session of the client application; and generating the speech animation includes incorporating the context information into the generated speech animation.","The context information includes information about a user of the client application.","The client application is a web application; and the request is an HTTP request.","The invention can be implemented to realize one or more of the following advantages:","The raw data used to generate the speech animation content is retrieved automatically by the system. Manual feeding of text into the system is no longer required. This makes the system more scalable.","The raw data is retrieved in real time, rather than in advance. This ensures that the most up-to-date version of the data is retrieved.","The raw data includes dynamic or variable elements. The variable elements are adapted to suit a particular client application or user of the client application. This enables the speech animation content to be more interesting and personalized and makes the speech animation client appear more socially intelligent to a user of the client application. This also enables the system to be more scalable because the number of different speech utterances in the speech animation output is not limited by the input text. The variable elements enable the system to generate a potentially infinite number of variations to the input text.","It is easy for client applications to integrate or interface with the system. The system provides a single point of entry for all client requests. Also, the system provides a set of custom scripting tags that developers of client applications can incorporate into the user interface code for the client applications. These tags expand into code that invokes the system.","The use of behavioral contexts reduces redundancy in the raw data. This improves the efficiency, automaticity, and scalability of the system.","The use of behavioral contexts and adaptive content enables speech animation clients to exhibit expressions and behaviors which are appropriate to particular application scenarios and enables the speech animation system to provide this functionality to its clients with minimal or no manual coding.","One implementation provides all of the above advantages.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Further features, aspects, and advantages will become apparent from the description, the drawings, and the claims.","Like reference numbers and designations in the various drawings indicate like elements.","As shown in , a system  includes a speech animation engine  and one or more client applications . The client applications can include a variety of different application programs including, but not limited to: a personal information management application program, an application program to process a business transaction, an application program to operate a computing device, an entertainment application program, or a game. To provide for interaction with a user, the client applications  run on a computer having a display device for displaying visual content to the user and an audio device for providing audio content to the user.","The client applications  make requests to the speech animation engine  for code that displays or animates a talking agent  on the client application's user interface . The talking agent is represented graphically on the user interface  in the form of a cartoon head, animal or some other graphical icon. These animation requests identify the raw data  to be used to generate the speech animation content for the talking agent .","In response to such animation requests, as shown by method  of , the speech animation engine  retrieves the raw data (step ) and generates speech animation content based on the raw data (step ). The raw data  is stored in a location accessible by the speech animation engine. The speech animation engine  performs the retrieval and generation steps automatically, that is, without user intervention. In addition, the retrieval and generation steps can occur in real time, as requests are made, as opposed to occurring in advance of the requests.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIGS. 3 and 4","b":["300","100","300","110","310","320","330"]},"The application tier  includes one or more application servers , for example, Tomcat servers. The application servers  have access to the raw data  identified in the animation requests. The raw data is retrieved using a connectivity technology such as JDBC (Java Database Connectivity), a technique for connecting programs written in Java to a variety of different databases.","The animation tier  includes one or more animation servers . The animation servers are operable to convert audio data generated by the TTS tier into speech animation content. The generated speech animation content is saved to a web-based file share or other storage mechanism that is accessible by the client applications . The animation servers  can be implemented using a variety of different speech animation technologies including Crazy Talk by Reallusion or Pulse Server by Pulse. The Pulse server is an Apache web server module that is initialized and made available by an Apache web server. Speech animation content generated by Pulse is represented in pwc format.","The TTS tier  includes one or more TTS servers . The TTS servers  are operable to convert textual data to audio (speech) data. The text data can be represented in a variety of text-to-speech markup formats including the Microsoft Speech Application Programming Interface (SAPI) 5.1 format. Text markup will be described in more detail below. The audio data can be represented in a variety of formats including the wav format. Data is exchanged between the TTS tier  and the animation tier  using a connectivity technology such as SAPInet Server by Pulse.","To improve system performance, more than one server can be deployed in a given tier. When multiple servers are deployed, a load balancer  can be used to manage distribution of workload. It is not necessary to have a one-to-one relationship between the servers in the different tiers.","Optionally, a caching mechanism is employed to improve system performance. Caching will be discussed in more detail below with reference to the FataURLCache.","In this implementation , as shown in , the client application  is a web-based application whose interface is rendered in a web browser . The web browser  must be able to render the animation. If this functionality is not already built into the web browser, the browser can be extended by installing a browser plug-in.","The application tier  includes a web content subsystem  that is accessible to the web browser . The web content includes static content, such as HTML (Hypertext Markup Language) text and images, and dynamic content, such as JSP (JavaServer Pages) code. The JSP code invokes services provided by the FataDataFactory , another subsystem of the application tier . These services include services that display and animate the talking agent  on the client's user interface.","The FataDataFactory subsystem  is the single point of entry for all animation requests from client applications . The FataDataFactory subsystem manages and provides access to FataData , raw data that is used by the system to generate the speech animation content. All or portions of the FataData can be represented in XML (extensible Markup Language) format. XML will be discussed below with reference to . The FataDataFactory subsystem  also provides access to external data sources such as databases that reside outside the system.","A PulseBehaviorHandlerClient subsystem  is responsible for conveying the animation requests to the Pulse server on the animation tier . The PulseBehaviorHandlerClient subsystem  first converts the animation requests into SOAP payloads, and then sends the requests to a dispatcher component of the Pulse server.","A FataURLCache subsystem  manages a cache on the shared-storage. The cache includes speech animation content as well as mappings between FataData objects and the speech animation content. The FataURLCache subsystem  checks each animation request against the cache first, speeding up responses if an identical animation request has previously been made. The FataURLCache subsystem  is responsible for removing content from the cache when the cache is full or when the content is no longer accessible.","System Initialization and Operation","To use the system , a client application  first instantiates the FataDataFactory  and the FataURLCache . The FataDataFactory  will then load all of the FataData . The FataData  is loaded dynamically during run time rather than in advance to ensure that the most up-to-date version of the FataData  is loaded.","As illustrated, the system  can provide a servlet program  that initializes the FataDataFactory , the FataURLCache  and the FataData . The servlet  also registers the FataDataFactory with the current servlet context, so that the client application  may have access to the services provided by the FataDataFactory. The servlet  is also responsible for destroying these subsystems and loaded resources during system shutdown.","After system initialization is complete, the system  is ready to process client requests. As shown by method  of , a typical request-response cycle begins when the client application  sends an HTTP (Hypertext Transfer Protocol) request to the system through the web content subsystem (step ). The HTTP request can be a request to load a talking agent or a request to animate an already loaded talking agent. The request to load a talking agent includes a parameter that identifies the talking agent  to be loaded. The request to animate a talking agent includes a parameter that identifies the raw data  to be used to generate the speech animation content.","The request is received by the FataDataFactory (step ). The FataDataFactory locates all the FataData needed to complete the request (step ). For example, the FataDataFactory  can match the request parameters against a map or table of all the FataData. The FataDataFactory  then converts the request into a format compatible with the PulseBehaviorHandlerClient  and forwards the request to the PulseBehaviorHandlerClient . The PulseBehaviorHandlerClient  sends the request to the Pulse server  as a SOAP payload (step ). Prior to sending the request to the Pulse server , the PulseBehaviorHandlerClient  checks the FataURLCache to see if the request is identical to any of the cached requests (step ). If it is, then the PulseBehaviorHandlerClient  does not need to send the request to the Pulse server . If it is not, then the request is sent to the Pulse server .","Upon receiving the request, the Pulse server  generates the requested speech animation content and saves it to the shared-storage . The system then returns the URL of the speech animation content to the client (step ), which uses the URL to access the content (step ).","The above-described data flow is just an example. Other variations are possible. For example, instead of the PulseBehaviorHandlerClient  checking the cache, the FataDataFactory  can perform this check.","Additional Features","The following paragraphs describe additional features that can be incorporated into the above-described systems and methods.","Event-Driven Communication","In an event-driven or push implementation, after the main content has already been delivered to the client, the system maintains an open connection to the client so that it can continue to push additional content to the client after the main content has already been delivered and rendered. Whenever the system needs to change the content, it can deliver client-side scripts and Dynamic HTML (DHTML) to make the change. Pushlets offer one framework for pushing events to a web-based client, although other frameworks may be used.","Alternatively, a polling mechanism may be used instead of push to eliminate the need for a constant connection between the client and the system. With polling, the system may need to include data structures for storing the state of the client after an initial request and then restoring the state of the client for a subsequent request.","Custom Tags","To make it easier for client applications  to interface with and make use of the speech animation system, the system can provide a set of custom scripting tags that developers of client applications can incorporate into the user interface code for the client applications. These tags expand into code that sends the animation requests to the speech animation system. The tags include a renderTalkingAgentJS tag, a renderFataJS tag and a renderRawJS tag.","renderTalkingAgentJS Tag","This tag generates the code to set up and display the talking agent  as part of the user interface  for the client application . The only required parameter for this tag is the address or URL (uniform resource locator) of the talking agent file. Optional parameters include the width, height, and background color of the talking agent.","The following JSP(JavaServer Pages) code fragment illustrates use of this tag: <renderTalkingAgentJS path=\u201c\/TalkingAgents\/bob\/bob.pwr\u201d width=\u201c160\u201d height=\u201c210\u201d bgColor=\u201cbcbdc2\u201d\/>. This code renders a JavaScript function call that sets up the talking agent \u201c\/TalkingAgents\/bob\/bob.pwr\u201d with width of 160 pixels and height of 210 pixels using a background color of \u201cbcbdc2\u201d (a grayish color).","renderFataJS Tag","This tag generates the code that animates the talking agent  and causes it to speak. Only one parameter is required for this file: a name parameter that identifies the name of the speech animation file to be used for the talking agent.","The following JSP code fragment illustrates use of this tag: <renderFataJS name=\u201cRES-greeting\u201d\/>. This code renders a JavaScript function call that causes the talking agent to speak and behave according to the contents of the FataData named \u201cRES-greeting\u201d.","renderRawJS Tag","This tag is used as an alternative to the renderFataJS tag. This tag allows speech animation data to be specified explicitly. Two parameters are used for this tag: A text parameter that specifies the text to be spoken and a voice parameter that identifies which voice to speak in. Optional parameters include the emotion (e.g., happy, unhappy, neutral), look (e.g., up, down, right, left), and expression (e.g., angry, confused, grin).","The following JSP code fragment illustrates use of this tag:","<renderRawJS voice=\u201cMary\u201d text=\u201cHello hot-stuff.\u201d emotion=\u201chappy\u201d expression=\u201cwink\u201d\/>. This renders a JavaScript function call that causes the talking agent  to speak and animate the text \u201cHello hot-stuff\u201d with the emotion \u201chappy\u201d and the expression \u201cwink\u201d using the voice \u201cMary\u201d.","XML Format",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIGS. 6A and 6B","FIG. 6A","FIG. 6B"],"b":"440"},"In , the symbol (*) indicates required attributes. As illustrated, each <talking-head-data> element  has a required name (or alias), voice, and speech file. The remaining attributes (emotion, expression, and look) are optional.","Each <speech-files> element  typically has only one attribute, the type, which may be one of two values: \u201cset\u201d, or \u201cpool\u201d. A set means that the set of <speech-data> elements associated with the <speech-files> element should be played in sequence. A pool indicates that a single <speech-data> element should be chosen randomly from the set. The pool can be used to define a pool of synonyms. Synonyms are equivalent content that can be used interchangeably. The use of synonyms enables the speech content to be variable. This makes the talking agent appear more socially intelligent to a user.","Each <speech-data> element  contains the type and content of the raw data that is to be turned into speech by the TTS server. The content of this data depends heavily on the type. Special types of note are:","\u2018talking-head-data\u2019\u2014a pointer to another talking-head-data alias in the XML;","\u2018textFile\u2019\u2014a reference to an external text file containing the text to speak;","\u2018pwcFile\u2019\u2014a reference to a pre-generated speech animation file in pwc format (the format used by the Pulse server);","\u2018static\u2019\u2014raw text defined directly in the XML;","\u2018fataData\u2019\u2014-dynamic data to be replaced based on the \u2018value\u2019.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 6B","FIG. 6A"],"b":"440"},"a reference to content defined in another FataData instance ;","content to be dynamically generated based on some static text ;","content to be dynamically generated based on text stored in an external text file ;","pre-generated content ;","and a dynamic content field to be replaced by the user's name . Dynamic content will be discussed in more detail below.","Text Markup","The text included in the FataData  can include markup tags including TTS markup tags and custom markup tags.","TTS Markup","TTS markup tags define prosodic, pronunciation, intonation or inflection settings for the speech. The TTS markup tags can be implemented in a variety of text-to-speech markup formats including the Microsoft Speech Application Programming Interface (SAPI) 5.1 format and the VoiceXML format. The TTS markup is preserved by the application server and passed to the animation server, which in turn passes it to the TTS server.","Dynamic Text Templates","Custom markup tags are used to insert dynamic elements into the text to produce a dynamic text template. Custom markup tags can be implemented in a variety of text markup formats including XML. Custom markup tags are expanded by the application server before being passed to the animation server.","The expansion process involves filling in or supplying a value for the dynamic elements. The supplied value can come from the current application session. This is further illustrated by the dynamic text template shown in . This template includes some static text elements  as well as a dynamic element . The value of \u201cProductName\u201d will differ depending on which product the user has selected.  shows the resulting expanded text when the product \u201cGrand Doohickey\u201d has been selected.","An alternative method to create a dynamic text template is using the speech sets described above with respect to .  illustrates use of speech sets to create a dynamic template that is equivalent in content to the one shown in .","While equivalent in content, the two types of dynamic templates may not necessarily be equivalent in performance because the system may process the two types differently. Speech sets are typically processed as segments that are then spoken in series to form the whole speech set. By contrast, when using custom markup, the entire text is typically expanded and processed as a whole.","Thus, one advantage of using custom markup is that there will be little or no pause between segments for loading speech files and the speech will not have unnatural breaks in the middle of sentences due to the segmentation of the text.","At the same time, one advantage of using speech sets is that the response time is typically faster than using custom markup. Segments without dynamic elements can be cached and re-used repeatedly without having to be processed again. Caching also helps to reduce or eliminate the pause between speech segments.","Behavioral Contexts","As described herein, a speech animation engine generates speech animation content that drives the expressions and behaviors of talking agents displayed by speech animation clients. The speech animation engine includes one or more servers and will henceforth be referred to as a speech animation server.","As shown in , in one implementation of such a server , a developer or programmer defines a set of behavioral contexts  that are maintained by the server . The behavioral contexts  correspond to particular scenarios  that may occur during execution by the speech animation clients . For example, for a web commerce client, one such scenario could be an \u201cupcoming purchase\u201d scenario that is triggered when a user of the web commerce application puts an item in a shopping cart.","For each behavioral context , the developer defines a set of behaviors  that are appropriate to the scenario of the behavioral context. For example, for the \u201cupcoming purchase\u201d context, such behaviors could include a smile that is broader than usual and a voice that is louder and higher in pitch than usual.","The developer then includes references to the behavioral context in the raw data used by the server  to generate the speech animation content. The server automatically incorporates the behaviors  of any referenced behavioral contexts  into the generated speech animation content, as if those behaviors  had been defined explicitly in the raw data itself.","The raw data may include several different data items, each intended for a different scenario. For example, there may be a first data item that defines speech to be spoken when the user selects an item from his wish list. There may be a second data item that defines speech to be spoken when the user selects an item from the product catalog. The speech defined in first data item may differ from the speech defined in the second data item because the scenarios are different. Nevertheless, there may be some speech or non-speech behaviors that are common to both scenarios. For example, in both scenarios, it may be desirable for the talking agent to have a broader smile and a louder voice. This common behavior can be defined in a behavioral context (e.g., the upcoming purchase context), and this context can be associated with each of the data items by reference. In this manner, the behavioral contexts mechanism makes it easy for developers to apply this common behavior to both scenarios. Without the behavioral contexts mechanism, the developer would need to define the common behavior explicitly in each data item.","On the client side, the client application includes code that makes requests to the server  for animation content. The animation requests identify the raw data to be used to generate the animation content. The identified raw data can include references to one or more behavioral contexts defined and maintained by the server.","These behavioral contexts can be used by client applications to display talking agents that exhibit socially intelligent behavior. The client application can automatically detect and diagnose the nature of a particular human-computer interaction. The client application can then use this diagnosis to request animation content that is specific to the particular human-computer interaction. For example, the client application may detect an upcoming purchase. In response, the client application makes an animation request to the server, and in this request, the client application identifies raw data that references the upcoming purchase context described above. In this manner, behavioral contexts is a mechanism that enables talking agents to be more responsive to particular human-computer interactions, thereby allowing the talking agent to appear more socially intelligent to users.","The following paragraph describes a data model for implementing behavioral contexts. As described above with respect to , the raw data  can be represented in XML format. In such an implementation, the behavioral context references can be represented as XML attributes. For example,  shows an XML document  that includes two raw data instances , . Each raw data instance ,  contains an attribute \u201cbehavioralcontext\u201d  that specifies the name of a particular behavioral context . In this example, both raw data instances ,  correspond to a greeting of some kind, so they both refer to the same behavioral context, \u201cgreeting\u201d. The definition  for this behavioral context is also included in the XML document . In this example, the behavioral context \u201cgreeting\u201d has been defined to include two behaviors  \u201cnod\u201d and \u201csmile\u201d.","Adaptive Content","In one implementation, the generated speech animation content is customized for a particular client application or user of the client application. In such cases, the request from the client further includes context information. The context information can be information about the particular application session (e.g., how long the session has been active) or information about a particular user of the application, for example, his personal characteristics (such as name, age, gender, ethnicity or national origin information, and preferred language) or his professional characteristics about the user (such as occupation, position of employment, and one or more affiliated organizations).","The invention can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The invention can be implemented as a computer program product, i.e., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable storage device, for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","Method steps of the invention can be performed by one or more programmable processors executing a computer program to perform functions of the invention by operating on input data and generating output. Method steps can also be performed by, and apparatus of the invention can be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in special purpose logic circuitry.","To provide for interaction with a user, the invention can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.","The invention can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the invention, or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), e.g., the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","The invention has been described in terms of particular implementations. Other implementations are within the scope of the following claims. For example, the steps of the invention can be performed in a different order and still achieve desirable results."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 3 and 4"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
