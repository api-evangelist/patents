---
title: Transcodeless on-the-fly ad insertion
abstract: Systems and methods for enabling dynamic advertisement insertion into media files without transcoding are disclosed. The techniques disclosed involve retrieving files of the media and advertisement(s) and converting the files to an MPEG-2 transport stream (MPEG-2 TS) format. The MPEG-2 TS streams are then joined to insert the advertisement at a desired point in the media file. The resulting MPEG-2 TS stream is then converted back to a media file, which can be provided for downloading, or optionally reindexed. Because it does not require transcoding, this process can be performed on-the-fly to provide dynamic insertion of advertisements into media files. Other media file manipulation, including the insertion of non-advertisement media, is contemplated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08429250&OS=08429250&RS=08429250
owner: Unicorn Media, Inc.
number: 08429250
owner_city: Tempe
owner_country: US
publication_date: 20110422
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims priority to Australian Patent Application Serial No. 2011201404, filed Mar. 28, 2011, entitled \u201cTRANSCODELESS ON-THE-FLY AD INSERTION,\u201d which is incorporated herein by reference for all purposes.","The delivery of media over networks such as the Internet can be accomplished in many ways, including progressive downloading or streaming. Progressive downloading involves downloading a media file from the network to a device running software client. Unlike many other types of downloading, however, progressive downloading enables the device to initiate playback of the media before the media file is completely downloaded.","Progressive downloading, however, has various limitations. For example, inserting advertisements into a media file for progressive downloading often requires transcoding, which can take a large amount of time and processing power. Additionally, if several different advertisements are to be used, or if the advertisements change, a large amount of preprocessing is required to create and store various different permutations of a media file so that the proper permutation is ready to be downloaded once requested. This can consume vast amounts of processing power and storage space. Furthermore, it restricts the customization of advertisements to a particular end user by requiring that the downloaded file is selected from a finite set of preprocessed permutations.","Systems and methods for enabling dynamic advertisement insertion into media files without transcoding are disclosed. The techniques disclosed involve retrieving files of the media and advertisement(s) and converting the files to an MPEG-2 transport stream (MPEG-2 TS) format. The MPEG-2 TS streams are then joined to insert the advertisement at a desired point in the media file. The resulting MPEG-2 TS stream is then converted back to a media file, which can be provided for downloading, or optionally reindexed. Because it does not require transcoding, this process can be performed on-the-fly to provide dynamic insertion of advertisements into media files. Other media file manipulation, including the insertion of non-advertisement media, is contemplated also.","An example of a method for providing media with a data network according to the disclosure includes receiving a media file request and retrieving a first media file. The first media file can comprise media content for playback over a period of time, and the media file can have a certain file format. The method further can include associating the first media file with a first set of metadata to create a first MPEG-2 transport stream, and retrieving a second media file having the certain file format. The method also can include associating the second media file with a second set of metadata to create to a second MPEG-2 transport stream, and joining the first MPEG-2 transport stream and the second MPEG-2 transport stream to create a third MPEG-2 transport stream. The third MPEG-2 transport stream can have a third set of metadata. Finally, the method can include removing at least a portion of the third set of metadata from the third MPEG-2 transport stream to create a third media file in the certain file format, and providing the third media file.","Implementations of such a method can include one or more of the following features. The first MPEG-2 transport stream can be split into two portions, where each of the two portions of the first MPEG-2 transport stream corresponds to a separate portion of the first media file. The joining the first MPEG-2 transport stream and the second MPEG-2 transport stream can comprise inserting the second MPEG-2 transport stream between the two portions of the first MPEG-2 transport stream. The second MPEG-2 transport stream can be inserted between the two portions of the first MPEG-2 transport stream can comprise concatenating the second MPEG-2 transport stream to the end of a first portion of the first MPEG-2 transport stream to form an intermediate MPEG-2 transport stream, and concatenating a second portion of the first MPEG-2 transport stream the end of the intermediate MPEG-2 transport stream. The third media file can be reindexed. The certain file format can comprise an audio compression format, a video compression format, or both. Providing the third media file can comprise delivering the third media file as a progressive download or as a media stream.","Implementations of such a method further can include one or more of the following features. The media file request can be received from a Content Delivery Network (CDN). The third media file can be provided to the CDN. Insertion data can be received, wherein the joining is based, at least in part, on the insertion data. The insertion data can include data indicative of an identity of the second media file. The insertion data can include data indicative of an insertion point of the first media file at which content corresponding to the second media file is to be inserted. A Universal Resource Indicator (URI) of the requested media file can be provided. The certain file format can include at least one format from the group consisting of MPEG-2 Audio Layer 3 (MP3), Third Generation Partnership Project (3GP), and MPEG-4 (MP4).","An example of a system for communicating media over a network, according to the disclosure, includes a data storage configured to store a first media file, having content for playback over a period of time, in a certain file format. The system also can include a processing server having a network interface and being communicatively coupled with the data storage. The processing server can be configured to receive, using the network interface, a media file request, and retrieve the first media file from the data storage. The processing server also can be configured to associate the first media file with a first set of metadata to create a first MPEG-2 transport stream, retrieve a second media file, and associate the second file with a second set of metadata to create a second MPEG-2 transport stream. The processing server further can be configured to join the first MPEG-2 transport stream and the second MPEG-2 transport stream to create a third MPEG-2 transport stream, the third MPEG-2 transport stream having a third set of metadata, and remove at least a portion of the third set of metadata from the third MPEG-2 transport stream to create a third media file in the certain file format. Finally, the processing server can be configured to provide, using the network interface, the third media file.","Implementations of such a system can include one or more of the following features. The processing server further can be configured to split the first MPEG-2 transport stream into two portions such that each of the two portions of the first MPEG-2 transport stream corresponds to a separate portion of the first media file, and join the first MPEG-2 transport stream and the second MPEG-2 transport stream by inserting the second MPEG-2 transport stream between the two portions of the first MPEG-2 transport stream. The processing server can be configured to retrieve, using the network interface, the second media file from a source other than the data storage. The processing server further can be configured to reindex the third media file. A media caching server having a memory and being communicatively coupled with the processing server can be configured to send the media file request, using a network, to the processing server, receive the third media file, using the network, from the processing server, and store the third media file in the memory. The media caching server further can be configured to provide the third media file to a device communicatively coupled with the media caching server. The media file request can comprise a first media file request for the third media file, and the media caching server will not send a second media file request for the third media file to the processing server if the media caching server has the third media file stored in the memory.","Implementations of such a system further can include one or more of the following features. The processing server further can be configured to provide the third media file to a Content Delivery Network (CDN). The processing server further can be configured to receive insertion data, and join the first MPEG-2 transport stream and the second MPEG-2 transport stream based, at least in part, on the insertion data. The processing server further can be configured to determine, based on the insertion data, a point of the first media file at which content corresponding to the second media file is to be inserted. Joining the first MPEG-2 transport stream and the second MPEG-2 transport stream can include performing at least one action from the group of actions consisting of concatenating the second MPEG-2 transport stream to the end of the first MPEG-2 transport stream, concatenating the first MPEG-2 transport stream to the end of the second MPEG-2 transport stream, inserting the first MPEG-2 transport stream into the second MPEG-2 transport stream, and inserting the second MPEG-2 transport stream into the first MPEG-2 transport stream. The processing server further can be configured to provide a Universal Resource Indicator (URI) of the requested media file.","An example of a non-transitory, machine-readable storage medium for communicating a requested media file over a network, according to the disclosure, has a plurality of instructions embedded thereon, which, when executed by one or more machines, cause the one or more machines to receive, using a network interface, instructions for manipulating a first media file to create the requested media file. The requested media file includes content for playback over a period of time. The instructions, when executed by one or more machines, further can cause the one or more machines to retrieve the first media file, the first media file having a certain file format, associate the first media file with a first set of metadata to create a first MPEG-2 transport stream, and manipulate the first MPEG-2 transport stream, using the instructions for manipulating the first media file, to create a manipulated MPEG-2 transport stream. The instructions, when executed by one or more machines, further can cause the one or more machines to create the requested media file, where creating the requested media file includes removing at least a portion of metadata of the manipulated MPEG-2 transport stream, and the requested media file has the certain file format. Finally, the instructions, when executed by one or more machines, can cause the one or more machines to provide, using the network interface, the requested media file.","Implementations of such a non-transitory, machine-readable storage medium can cause the one or more machines to perform one or more of the following functions and\/or exhibit one or more of the following features. A second media file having the certain file format can be retrieved, and the second media file can be associated with a second set of metadata to create a second MPEG-2 transport stream. Manipulating the first MPEG-2 transport stream can include joining the first MPEG-2 transport stream and the second MPEG-2 transport stream to create the manipulated MPEG-2 transport stream. Manipulating the first MPEG-2 transport stream can include splitting the first MPEG-2 transport stream into two portions such that each of the two portions of the first MPEG-2 transport stream corresponds to a separate portion of the first media file, and inserting the second MPEG-2 transport stream between the two portions of the first MPEG-2 transport stream such that. The instructions for manipulating a first media file can include information indicative of an identity of the second media file. The instructions for manipulating a first media file can include information indicative of a point at which the first MPEG-2 transport stream is to be split.","Implementations of such a non-transitory, machine-readable storage medium further can cause the one or more machines to perform one or more of the following functions and\/or exhibit one or more of the following features. Manipulating the first MPEG-2 transport stream can include splitting the first MPEG-2 transport stream into at least two portions such that each of the at least two portions of the first MPEG-2 transport stream corresponds to a separate portion of the first media file, and removing a portion such that the manipulated MPEG-2 transport stream does not include the removed portion of the first MPEG-2 transport stream. One or more machines can reindex the requested media file. A Universal Resource Indicator (URI) of the requested media file can be provided.","The ensuing description provides preferred exemplary embodiments only, and is not intended to limit the scope, applicability or configuration of the disclosure. Rather, the ensuing description of the preferred exemplary embodiments will provide those skilled in the art with an enabling description for implementing a preferred exemplary embodiment. It is understood that various changes may be made in the function and arrangement of elements without departing from the spirit and scope as set forth in the appended claims.","The increased availability of media content over data communications networks such as the Internet has mirrored the increased bandwidth for these networks. Because media has recently taken a more prominent role in data communications, the distribution of media and the data associated with such distribution has become increasingly important, particularly to media content providers. Contiguous streaming and progressive downloading of media have become widely-used methods of media distribution, but unlike file \u201cchunking\u201d for example, they typically require the media to be stored as a single, contiguous file. This can enable a media player client (e.g., a \u201csingle-link player\u201d) to receive and play the media by using one link. (\u201cPlaylist players,\u201d on the other hand, can use different links to play different portions of a media program\u2014following multiple links to play and entire program.) The requirement to store media as a single, contiguous file can limit a content provider's ability to dynamically insert additional media, such as advertisements, during playback. Other manipulations, such as deleting or moving a portion of a media file, are similarly restricted. As discussed herein, however, certain systems and methods can be utilized enable dynamic advertisement insertion into media files, as well as other media file manipulation.","A traditional approach to preprocessing media for contiguous streaming and\/or progressive downloading involves transcoding and storing media files. Because transcoding is particularly processing intensive, a content distribution system will typically transcode and store all permutations of an original or primary media file beforehand (i.e., before the media file is requested). The term \u201cpermutation,\u201d as used herein, is a media file having different combination of features, such as bitrate, caption, language, etc. Each permutation of a media file is stored as a separate file.","The use of advertisements can exacerbate the processing and storage requirements. If more than one set of advertisements is to be played before, during, and\/or after the media file, a new permutation must be made for each set of advertisements, effectively multiplying the required number of files to be stored on the system. For example, in addition to the permutations described above, additional permutations may be needed for each set of advertisements.","Traditional media file manipulation, such as inserting advertisements into a media file, typically requires additional transcoding. Attempts to manipulate media files without transcoding often can result in corruption of the file, making the resulting file unplayable. However, the associated processing and storage requirements to transcode and store different permutations of media files can be burdensome to any system. On current systems implementing this traditional approach, updating the permutations with new advertisements can take several days. The systems and methods disclosed herein take advantage of features that enable manipulation of media files without the need for additional transcoding, alleviating processing and storage requirements and enabling dynamic advertisement insertion.","Media files typically comprise a program stream format. \u201cProgram stream,\u201d as used herein, is a container format that can multiplex digital audio, video, and more. Although manipulating media files in program stream format can result in corrupting the media files (as stated above), the media files can be manipulated once they are formatted in a transport stream, which is a format used for the transmission and storage of media and other data used in broadcast systems. \u201cWrapping\u201d the program stream is a quick and simple process involving associating the media file with metadata to create a new file in a transport stream format. For example, as discussed in further detail below, primary and secondary media files in an MPEG-4 (MP4) program stream format can be wrapped so that each forms an MPEG-2 transport stream (MPEG-2 TS, which is specified in MPEG-2 Part 1 and also known as MPEG or simply TS). Once in the MPEG-2 TS format, the files can be manipulated in various ways by performing binary splits and\/or concatenations. After the manipulations are complete, the completed file (which is in MPEG-2 TS format) is then converted back into an MP4, which can be provided to and\/or played back by a client. Because the process described above can be performed on the order of one second or less (which is far less time than performing file manipulations by transcoding), it can be performed on the fly (i.e., in real time) when the media is requested, without the need for preprocessing. Depending on desired functionality, processing power, file types and\/or sizes, etc., other embodiments can take different amounts of time to perform this process, such as less than 0.5, 0.33, or 0.25 seconds or less than 2, 3, 4, 5, 10, or 20 seconds. This functionality can enable media providers to insert advertisements and\/or perform other file manipulations dynamically, reducing processing and storage requirements.","While the above features may be implemented in a variety of different systems, some embodiments may be implemented as part of a larger media service system described in .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1","b":["100","100","140","120","140","120","130","110","150","110"]},"The media servicing system further enables a content provider  or other entity to gather information regarding user behavior during media playback. For example, a content provider  can be provided with data indicating that end users tend to stop watching a video at a certain point in playback, or that users tended to follow links associated with certain advertisements displayed during playback. With this data, a content provider  can adjust factors such as media content, advertisement placement and content, etc., to increase revenue associated with the media content and provide the end user device  with a more desirable playback experience.","End user device  can request a media file to stream with a client program executed by the end user device . The client program can be, for example, a media player, browser, or other application adapted to request and\/or play media files. In response to a request for a media file, the CHIMPS  can utilize any number of application centers  and\/or kernel application center(s)  to provide the client program with a data object concerning the requested media file. The data object can include information about the media file, including where the media file can be located, such as within the CDN  or within the CHIMPS  itself Location information may be provided by Universal Resource Indicator (URI), such as a Universal Resource Locator (URL) or other location indicator. During playback of the media file, the CHIMPS  can collect data regarding the playback through beaconing provided by a client program executed by the end user device  and\/or an indexing service from within the CHIMPS and\/or CDN. The CHIMPS  can subsequently provide the data and\/or any analytics information derived from the data to the content provider .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 2A","b":["111","1","110","1","111","1","112","120","140","112","111","1","112","110","1","270","112","111","1"]},"Components within the kernel application center - can communicate through network  such as a local area network (LAN) and can include one or more origin servers  and a storage array  with which data objects and\/or media files may be stored and distributed. The storage array  may also be utilized by services running on processing server(s)  and\/or transcoding server(s)  that may require temporary or long-term storage. Kernel server  can utilize processing server(s) , transcoding server(s)  to provide various functional capabilities to the CHIMPS .","For example, as described in more detail below, the CHIMPS - can provide transcoding service for media files provided by a content provider  for syndication. Such a service can allow a content provider  to upload a media file to an application center , after which the application center  would notify the kernel server  that the media file has been uploaded. The kernel server can then notify services running on the processing server(s)  of the upload. These services can utilize transcoding server(s) to transcode the media file, which can then be moved to a CDN and\/or stored locally by storage array  and origin server(s) . Services running on the processing server(s)  can also update the associated data object stored by the storage array  and origin server(s) .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 2B","FIG. 2A"],"b":["111","2","112","111","2","112","111","2","111","2","260","112","110","112","110"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["112","112","330","310","360","330","310","360","320","130","370","310","111","112","340","350","350","310","111"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 4"],"b":["400","110"]},"Media can be ingested into the CHIMPS  when a content provider  uploads a media file to ingestion server(s)  in an application center  by utilizing a client . The client  can be a stand-alone application or browser based, for example, and can communicate with ingest server(s)  through an application programming interface (API) configured for the ingestion of media files.","Ingest server(s)  can communicate with devices in the kernel application center  executing programs such as kernel server  and file replication service . The kernel server  can be configured organize the workflow among services such as transcoding  file system manager , and other services  (e.g., analytics, dynamic API, etc.) Upon a particular event, for example, the kernel server  can be configured to notify the relevant services of the event, causing the services to process tasks associated with the event.","The file replication service , under direction of the kernel server , can coordinate the movement of the media files between services. For example, retrieving the uploaded media file from the ingest server(s)  and storing it on the file archive , or retrieving transcoded media files from transcoding server(s)  and storing them in the media file origin .","The data object updater  keeps the data object origin  up to date in response to any changes in the system. When, for example, a file is uploaded, transcoded, and stored in media file origin , the location and other metadata concerning the transcoded media files need to be created or updated in the data object origin  to ensure an end user device that accesses the object in the data object origin  has the correct information regarding the related media file. Because the data object updater  receives updates from the kernel server  (which is notified when a transcoded media file is stored in the media file origin , the system ensures the data objects in the data object origin  are constantly up to date.","The upload of a media file to the ingest server(s) , as described above, can provide an example of how the kernel server  may coordinate workflow. For instance, in response to the upload, the ingest server(s)  can notify the kernel server  that a media file has been uploaded. The kernel server  informs the file replication service  of the uploaded media file, and the file replication service  moves the uploaded media file into the file archive  and notifies the kernel server  of the move. In response, the kernel server  notifies the file replication service , the file system manager , and the transcoding master  of the move. The file replication service  then will know it can delete the uploaded media file from the ingest server(s) , the file system manager  will update the file system accordingly, and the transcoding master  will notify transcoding service(s)  of different transcoding tasks to be performed. The transcoding service(s)  can then retrieve the uploaded media file from the file archive  to create transcoded media files. The transcoding service(s)  notify the kernel server  once transcoding is complete, and the kernel server  relays this information to the file replication service . The file replication service  then takes the transcoded media files from the transcoding services  and moves them to the media file origin . Once the file replication service  notifies the kernel server  of the move, the kernel server , in turn, notifies the file replication service  and the data object updater . The data object updater  which updates the data object origin  accordingly, and the file replication service  deletes the transcoded media files from the transcoding services .","The modular nature of the system enables all tasks associated with an event to be completed quickly. As illustrated in the example above, workflow relating to a particular event, such as a media file upload, can be spread among the various services simultaneously. Moreover, because the system's modularity enables it to be scaled to accommodate differing hardware capacities, and because the system can be configured to dynamically allocate hardware to different services according to the needs of the system, the speed of completing tasks relating to a particular event can further be increased. For example, a server of the CHIMPS  can be configured to dynamically switch its purpose based on external conditions such as load and overall system performance, providing functions such as transcode, upload, metrics collection, application web service, and more, on an as-needed basis.","Embodiments of the systems described above may include other components that manage various requests from end users and\/or CDNs. For example, referring to , an embodiment - of a system for dynamic on-the-fly advertisement insertion and other file manipulation is shown. Media may be downloaded and\/or streamed to an end user device  though a client . As mentioned above, the client  can be stand-alone media player, a plug-in, a browser, or other application, which can be executed on a personal computer or other electronic device.","The process for dynamic index on-the-fly advertisement insertion begins when the client  requests a media file from a permutation index generator . The permutation index generator  can be a program instantiated for media streaming to a particular client . The permutation index generator  can be executed on a server or other computing device within an application center  of the CHIMPS . Additionally or alternatively, the permutation index generator  can be run by and\/or connected with, a service (e.g., an advertisement service provider) external to the CHIMPS .","After receiving the request from the client , the permutation index generator  generates a permutation index. The permutation index can include a wide variety of information indicating a particular permutation of the requested media file, such as a primary media file (e.g., typically the requested media file), one or more secondary media files (e.g., advertisements), one or more insertion points (i.e., locations of the primary media file at which the secondary media file is to be inserted), and\/or other information related to the manipulation of the primary media file. The permutation index can include a unique hash value that includes the information necessary to create the particular permutation, and it can be provided to the client  in the form of a URI or other location indicator.","The URI can then direct the client  to a CDN . The CDN  can use the permutation index of the URI to determine whether the particular permutation is stored in a local media file cache . If it is, then the CDN  can provide the particular permutation to the client  for download. If it is not, the CDN  can send a request to the Dynamic Permutation Layer (DPL) . The request can include the permutation index or it can be another indicator of the particular permutation.","The DPL , which be executed at a kernel application center  (or other system of the CHIMPS , such as an application center ), can use the request received from the CDN to create the particular permutation. After receiving the permutation index (or other indicator of the particular permutation of the requested primary media file) from the CDN , the DPL  can retrieve the primary media file and\/or secondary media file(s) from a media file origin . The media file origin  can be located within the kernel application center  as shown, or at another location internal or external to the CHIMPS . Alternatively, the primary media file and\/or secondary media file(s) can be retrieved from multiple sources. For example, multiple media file origins may store the required files, each of which can be located within the kernel application center  or located elsewhere, internal or external to the CHIMPS . Once the pertinent files are retrieved, the DPL  can perform the necessary manipulations to create the particular permutation, and provide the CDN , which can store the particular permutation in the media file cache  and provide the particular permutation to the client .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 5B","b":["500","2","150","500","2","112","110","570","510","570","570","110","110"]},"Both embodiments -, - of  can be integrated with an advertisement service (not shown). For example, rather than the permutation index generator  determining a permutation of a requested media file, the permutation index generator  can notify the advertisement service of a requested media file. Additionally or alternatively, the permutation index generator  can provide other information, such as information relating to the client , the end-user device , and\/or an end user. The advertisement service can then provide the permutation index generator  with information regarding advertisements and\/or insertion points for a desired permutation. Additionally or alternatively, the advertisement service can provide information relating to desired permutations at scheduled or other times that may not necessarily correspond to a media file request from the client . Similar services can be used to provide permutation information to the permutation index generator  that does not relate to advertisements.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIGS. 6A-6D"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 6A","FIG. 6B"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 6C","FIG. 6C","FIG. 6A"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIGS. 6D and 6E","FIG. 6D","FIG. 6E"]},"The processes shown in  can be used in any combination to create any number of permutations of a requested media file. As a simple example, the resulting file of , having a secondary file inserted at the beginning of a primary file, can be used as a primary file in the process of . The resulting file would therefore contain a first secondary file, followed by the primary file, followed by a second secondary file (e.g., a video with commercials at the beginning and the end). First and second secondary files can be the same or different, depending on the desired permutation. Countless other combinations of the processes shown in  can be used to add, delete, and\/or reorder portions of one or more media files to create a desired permutation.","As noted above, manipulations shown in , when performed directly to media files in program stream format, often cause errors in the playback of the resulting file. For example, video file formats, such as MP4, comprise a program stream with a header and codec(s) (e.g., audio and\/or video codec(s)). The program stream has timestamps at intervals throughout the file (e.g., keyframes) to help with synchronization and playback manipulation (e.g., fast forward\/rewind). As such, media files typically cannot be joined and\/or manipulated as discussed above without creating errors in the headers and\/or timestamps of the resulting file. For example, if a secondary MP4 file is inserted at the end of a primary MP4 file, the header for the secondary MP4 file will be found somewhere in the middle of the resulting MP4 file, likely causing problems during playback of the resulting MP4 file. Additional steps, therefore, must be taken to help ensure the manipulations discussed in  do not result in such problems.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 7A","b":["700","1","700","1","700","1"]},"At block , a request for a media file is received. As discussed herein the request can be received from a client  and\/or a CDN . Moreover, depending on the source of the request and the desired functionality of the system, the request can be in the form of a URI (e.g., a URL). The request further may comprise, or result in the creation of, a permutation index, which can be provided by a permutation index generator .","At block , a primary file in program stream (PS) format (hereinafter \u201cprimary PS file\u201d) is retrieved, and at block , converted to a primary file in transport stream format (hereinafter \u201cprimary TS file\u201d or \u201cprimary transport stream\u201d). A primary PS file can be, for example, a media file requested from a client  and\/or desired by an end user, in a program stream format. However, the terms \u201cprimary file,\u201d \u201csecondary file,\u201d and similar terms used throughout this description, are used for referential purposes only and are not necessarily indicative of content. A primary file for purposes of one manipulation, for example, could be a secondary file for purposes of another, and vice versa. Blocks  and  indicate the retrieval and conversion of a secondary PS file to a secondary TS file, respectively. Blocks - can be rearranged in various ways without impacting the overall functionality of the process - (e.g., both PS files are retrieved then converted, the secondary PS file is retrieved first, etc.).","The conversion of a PS file into a TS file, can be done in a single step. As discussed above, a PS file can be a media file comprising a program stream having audio and\/or video compression format(s). Various computer software tools and other programs, such as the open source project FFmpeg, enable \u201cwrapping\u201d the PS file to form a TS file. As discussed earlier, \u201cwrapping\u201d the PS file is a quick and simple process involving associating the media file with metadata to create a new file in TS format. Thus, a computer system can convert primary and secondary PS files to TS files, on the fly, using commands in a software program.","Once in the PS files are converted to TS files, the TS files can be manipulated, as shown in . For example, the process -, at block , provides concatenating primary TS file and secondary TS file in a process as shown in  or B. Each TS file (or TS file portion, as the case may be) can be viewed as a byte array. The concatenation therefore can be a simple binary concatenation of byte arrays, which can be performed by various computer software tools, programming languages, etc. The resulting file is a TS file that has metadata from both primary file TS and secondary file TS.","At block , the resulting TS file is converted to a program stream. As with conversion of a PS file to a TS file, the conversion from TS file to PS file can be performed, on the fly, using various computer software programs, such as FFmpeg. This conversion process alleviates many issues in the resulting program stream, due to concatenation, by rewriting the associated header.","Although timestamps may not be consistent in the resulting file, the resulting file may be provided as a progressive download at that point. Inconsistencies of timestamps in the resulting file can arise from the concatenation of the primary TS file and the secondary TS file, which may not be corrected during conversion of the resulting TS file to PS file (in other words, the headers may be rewritten, but not the timestamps). However, formats such as MP4 can tolerate these inconsistent timestamps, although it may prevent the resulting PS file from being suitable for streaming.","If timestamp correction of the resulting PS file is desired, the resulting PS file can be reindexed, at block . Reindexing files, or rewriting timestamps, can be performed by various software tools. MP4 files, for example, can be reindexed using the open source multimedia repackager MP4box. Furthermore, the reindexing can be performed quickly enough to enable the process - to be performed on the fly. Once the resulting PS file is reindexed, it can be suitable not only for progressive downloads, but streaming and\/or other uses.","At block , the resulting PS file is provided. As discussed herein, depending on the functionality of the system, providing the resulting PS file can include providing the resulting PS file to a CDN  and\/or client . Additionally or alternatively, the resulting PS file may be provided to another component of the CHIMPS B, such as to a media caching server  of an application center .",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 7B","FIG. 7A","FIG. 6C"],"b":["700","2","700","1","710","730","700","2","735","700","2"]},"Similar to concatenation, splitting of a primary TS file can simply involve binary manipulation of the primary TS file. The location at which the primary TS file can be split can be indicated by a timestamp, which are indexed by a byte position. A system can therefore receive and\/or generate a desired temporal location, in the playback of media of the primary PS file, at which media from the secondary PS file is to be inserted. The by locating the timestamp (or nearest timestamp) of the primary TS file corresponding to the desired temporal location, a computer can then determine the corresponding byte position of the timestamp and perform a binary split of the primary TS file at the byte position.","The process continues at block , where the first part of the primary TS file and the secondary TS file are concatenated to form an intermediate TS file. At block , the intermediate TS file and the second part of the primary TS file are concatenated. The remaining blocks, -, echo those of the process - of , in which the resulting TS file is converted back to a PS file, which is (optionally) reindexed, then provided to the appropriate entity.","The processes  of , and similar processes, can be altered to include various combinations of manipulations. For example, if a TS file is created from concatenating or otherwise joining a primary and secondary TS files, the resulting TS file can be further subject to manipulations\u2014such as the concatenation of yet another TS file or a split and\/or deletion of the TS file\u2014before it is converted back to a PS file. Additionally or alternatively, a resulting TS file can be converted to a PS file and\/or reindexed, before being converted back to a TS file for additional manipulations. Numerous variations to the processes  are contemplated.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 8","FIG. 8"]},"At block , a client  sends a request for a media file, which is received by a permutation index generator  at block . For example, in a URI request, the client  can convey information about a requested media file. Other information, such as user input, a desired advertisement and\/or other permutation of the requested media file, etc., can also be included in a request.","At block , the permutation index generator  determines a primary PS file, insertion point(s), and secondary PS file(s). Where no secondary PS file(s) are used, the permutation index generator  does not determine insertion point(s) and secondary PS file(s). On the other hand, where secondary PS file(s) are used, ordering of the primary and\/or secondary file(s) also can be determined and included in a permutation index.","At block , the permutation index generator  generates a permutation index describing a particular permutation of the requested media file. As discussed earlier, the permutation index can include the information determined by the permutation index generator  such as the identity of the primary PS file, the identity of any secondary PS file(s), insertion data indicating insertion point(s), and ordering of files. At block , the permutation index be included in a URI as a unique hash value, which is received by the client  at block  as a redirect, for example.","At block , the client  uses the URI to request the particular permutation from the CDN , which receives the request at block . At block , the CDN  determines whether the requested permutation is in a local cache  of the CDN . If so (which can indicate the permutation has been requested and created earlier), the permutation is provided by the CDN  at block , and received by the client  at block . On the other hand, if the CDN  determines the requested permutation is not in the local cache  of the CDN , the CDN  can request the permutation from the DPL .","After receiving the request for the permutation at block , the DPL  can determine whether the requested permutation is in its own cache. Such a cache can, for example, store permutations of media files requested from other sources. If the requested permutation is in the cache of the DPL , the DPL , at block , returns the requested permutation to the CDN . Otherwise, at block , the DPL  retrieves the files necessary to generate the permutation, and generates the permutation at block . Once the requested permutation is provided to the CDN , the CDN  caches the permutation and returns it to the client , at block .","An alternative embodiment (not shown) to the one depicted in  can include use of a dynamic advertisement proxy service. For example, in addition or as an alternative to the permutation index generator , the dynamic advertisement proxy service can be used to determine whether a requested media file is subject to advertisement rules. If so, the service can determine which advertisements to use and\/or where to put them. The dynamic advertisement proxy service can run on the system on which the DPL  runs, and\/or another system external or internal to the CHIMPS . Similar services can be utilized to determine the insertion of media other than advertisements.","As indicated herein, the methods, systems, and devices discussed above are intended merely to be examples. It must be stressed that various embodiments may omit, substitute, or add various procedures or components as appropriate. For instance, it should be appreciated that, in alternative embodiments, the methods may be performed in an order different from that described, and that various steps may be added, omitted, or combined. Also, features described with respect to certain embodiments may be combined in various other embodiments. Different aspects and elements of the embodiments may be combined in a similar manner. Also, it should be emphasized that technology evolves and, thus, many of the elements are examples and should not be interpreted to limit the scope of the invention.","Specific details are given in the description to provide a thorough understanding of the embodiments. However, it will be understood by one of ordinary skill in the art that the embodiments may be practiced without these specific details. For example, well-known circuits, processes, algorithms, structures, and techniques have been shown without unnecessary detail in order to avoid obscuring the embodiments. This description provides example embodiments only, and is not intended to limit the scope, applicability, or configuration of the invention. Rather, the preceding description of the embodiments will provide those skilled in the art with an enabling description for implementing embodiments of the invention. Various changes may be made in the function and arrangement of elements without departing from the spirit and scope of the invention.","Also, it is noted that the embodiments may be described as a process which is depicted as a flow diagram or block diagram. Although each may describe the operations as a sequential process, many of the operations can be performed in parallel or concurrently. In addition, the order of the operations may be rearranged. A process may have additional steps not included in the figure. Furthermore, embodiments of the methods may be implemented by hardware, software, firmware, middleware, microcode, hardware description languages, or any combination thereof. When implemented in software, firmware, middleware, or microcode, the program code or code segments to perform the necessary tasks may be stored in a non-transitory computer- and\/or machine-readable storage medium. Processors may perform the necessary tasks.","Having described several embodiments, it will be recognized by those of skill in the art that various modifications, alternative constructions, and equivalents may be used without departing from the spirit of the invention. For example, the above elements may merely be a component of a larger system, wherein other rules may take precedence over or otherwise modify the application of the invention. Also, a number of steps may be undertaken before, during, or after the above elements are considered. Accordingly, the above description should not be taken as limiting the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present disclosure is described in conjunction with the appended figures:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6D"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6E"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
