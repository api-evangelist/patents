---
title: Scalable key archival
abstract: A solution for scalable key archival includes, at a network device, determining whether a key management device that is not part of a current key management device configuration has been newly added to a network. The method also includes, if the key management device has been newly added to the network, determining whether the network device has a first application program interface (API) or device driver for communicating with the key management device. The method also includes, if the network device does not have the first API, obtaining the API. The method also includes creating a binding between a virtual device driver of the network device and the key management device via the first API, the network device having a second API for communications between the virtual device driver and a security processor of the network device. The security processor communicates with the key management device using the second API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08311225&OS=08311225&RS=08311225
owner: Brocade Communications Systems, Inc.
number: 08311225
owner_city: San Jose
owner_country: US
publication_date: 20090817
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to the field of computer science. More particularly, the present invention relates to scalable key archive architecture.","As security threats become more sophisticated and data becomes more critical to corporate data centers, companies must stay one step ahead of new and existing security threats to ensure their data is secured to the fullest possible extent.","The term \u201cData at rest\u201d refers to all data in computer storage while excluding data that is traversing a network or temporarily residing in computer memory to be read or updated. Data at rest can be archival or reference files that are changed rarely or never; data at rest can also be data that is subject to regular but not constant change. Examples include vital corporate files stored on the hard drive of an employee's notebook computer, files on an external backup medium, files on the servers of a storage area network (SAN), or files on the servers of an offsite backup service provider.","One technology commonly used to address security threats to data at rest is encryption, which secures data from unauthorized access using cryptographic keys. Storage devices such as tape drives, enterprise-class applications, network solutions and disk subsystems (such as those in virtual tape libraries) all utilize key-based encryption schemes in various forms.","A key management system maintains cryptographic keys used in data at rest encryption. Multiple key management systems are presently available, including IBM's TKLM (Tivoli Key Lifecycle Manager), Netapp's LKM (Lifetime Key Management), RSA's RKM (RSA Key Manager), and Hewlet Packard's SKM (Secure Key Manager). Each key management system has its own set of interfaces for communicating with the particular key management system. Because each key management system has its own set of interfaces, an enterprise desiring to use multiple key management systems must modify its own system to accommodate each set of interfaces. And even after such modifications have been made to accommodate an additional key management system, the enterprise system must be configured to recognize the presence of the additional key management system on the network.","Additionally, some key management systems provide varying degrees of redundancy and high availability (HA) so that operations on keys such as archival and retrieval are not affected by the loss of a key management system, for example due to a system crash. Some key management systems provide no redundancy, some fail to guarantee a time window for key replication, and some fail to provide feedback as to when a key has been replicated to multiple systems.","Accordingly, a need exists in the art for an improved solution for data encryption key archival.","A solution for scalable key archival includes, at a network device, determining whether a key management device that is not part of a current key management device configuration has been newly added to a network. The method also includes, if the key management device has been newly added to the network, determining whether the network device has a first application program interface (API) or device driver for communicating with the key management device. The method also includes, if the network device does not have the first API, obtaining the API. The method also includes creating a binding between a virtual device driver of the network device and the key management device via the first API, the network device having a second API for communications between the virtual device driver and a security processor of the network device. The security processor communicates with the key management device using the second API.","According to one aspect, the method also includes determining whether a discovered key management system supports redundancy and high availability and specifics of these capabilities, and if not present, to provide such capability by connecting to multiple key management systems (if present on the network) and archiving keys to two or more of these key management systems. In instances where the key management systems provide partial high availability, the method provides the missing capabilities in all cases to ensure key records in the multiple key management systems are consistent and synchronized before they are used.","Embodiments of the present invention are described herein in the context of scalable key archival. Those of ordinary skill in the art will realize that the following detailed description of the present invention is illustrative only and is not intended to be in any way limiting. Other embodiments of the present invention will readily suggest themselves to such skilled persons having the benefit of this disclosure. Reference will now be made in detail to implementations of the present invention as illustrated in the accompanying drawings. The same reference indicators will be used throughout the drawings and the following detailed description to refer to the same or like parts.","In the interest of clarity, not all of the routine features of the implementations described herein are shown and described. It will, of course, be appreciated that in the development of any such actual implementation, numerous implementation-specific decisions must be made in order to achieve the developer's specific goals, such as compliance with application- and business-related constraints, and that these specific goals will vary from one implementation to another and from one developer to another. Moreover, it will be appreciated that such a development effort might be complex and time-consuming, but would nevertheless be a routine undertaking of engineering for those of ordinary skill in the art having the benefit of this disclosure.","According to one embodiment of the present invention, the components, process steps, and\/or data structures may be implemented using various types of operating systems (OS), computing platforms, firmware, computer programs, computer languages, and\/or general-purpose machines. The method can be run as a programmed process running on processing circuitry. The processing circuitry can take the form of numerous combinations of processors and operating systems, connections and networks, data stores, or a stand-alone device. The process can be implemented as instructions executed by such hardware, hardware alone, or any combination thereof. The software may be stored on a program storage device readable by a machine.","According to one embodiment of the present invention, the components, processes and\/or data structures may be implemented using machine language, assembler, C or C++, Java and\/or other high level language programs running on a data processing computer such as a personal computer, workstation computer, mainframe computer, or high performance server running an OS such as Solaris\u00ae available from Sun Microsystems, Inc. of Santa Clara, Calif., Windows Vista\u2122, Windows NT\u00ae, Windows XP, Windows XP PRO, and Windows\u00ae 2000, available from Microsoft Corporation of Redmond, Wash., Apple OS X-based systems, available from Apple Inc. of Cupertino, Calif., or various versions of the Unix operating system such as Linux available from a number of vendors. The method may also be implemented on a multiple-processor system, or in a computing environment including various peripherals such as input devices, output devices, displays, pointing devices, memories, storage devices, media interfaces for transferring data to and from the processor(s), and the like. In addition, such a computer system or computing environment may be networked locally, or over the Internet or other networks. Different implementations may be used and may include other types of operating systems, computing platforms, computer programs, firmware, computer languages and\/or general-purpose machines; and. In addition, those of ordinary skill in the art will recognize that devices of a less general purpose nature, such as hardwired devices, field programmable gate arrays (FPGAs), application specific integrated circuits (ASICs), or the like, may also be used without departing from the scope and spirit of the inventive concepts disclosed herein.","In the context of the present invention, the term \u201cnetwork\u201d includes local area networks (LANs), wide area networks (WANs), metro area networks, residential networks, corporate networks, inter-networks, the Internet, the World Wide Web, cable television systems, telephone systems, wireless telecommunications systems, fiber optic networks, token ring networks, Ethernet networks, ATM networks, frame relay networks, satellite communications systems, and the like. Such networks are well known in the art and consequently are not further described here.","In the context of the present invention, the term \u201cidentifier\u201d describes an ordered series of one or more numbers, characters, symbols, or the like. More generally, an \u201cidentifier\u201d describes any entity that can be represented by one or more bits.","In the context of the present invention, the term \u201cdistributed\u201d describes a digital information system dispersed over multiple computers and not centralized at a single location.","In the context of the present invention, the term \u201cprocessor\u201d describes a physical computer (either stand-alone or distributed) or a virtual machine (either stand-alone or distributed) that processes or transforms data. The processor may be implemented in hardware, software, firmware, or a combination thereof.","In the context of the present invention, the term \u201cdata store\u201d describes a hardware and\/or software means or apparatus, either local or distributed, for storing digital or analog information or data. The term \u201cData store\u201d describes, by way of example, any such devices as random access memory (RAM), read-only memory (ROM), dynamic random access memory (DRAM), static dynamic random access memory (SDRAM), Flash memory, hard drives, disk drives, floppy drives, tape drives, CD drives, DVD drives, magnetic tape devices (audio, visual, analog, digital, or a combination thereof), optical storage devices, electrically erasable programmable read-only memory (EEPROM), solid state memory devices and Universal Serial Bus (USB) storage devices, and the like. The term \u201cData store\u201d also describes, by way of example, databases, file systems, record systems, object oriented databases, relational databases, SQL databases, audit trails and logs, program memory, cache and buffers, and the like.","In the context of the present invention, the term \u201cnetwork interface\u201d describes the means by which users access a network for the purposes of communicating across it or retrieving information from it.","In the context of the present invention, the term \u201csystem\u201d describes any computer information and\/or control device, devices or network of devices, of hardware and\/or software, comprising processor means, data storage means, program means, and\/or user interface means, which is adapted to communicate with the embodiments of the present invention, via one or more data networks or connections, and is adapted for use in conjunction with the embodiments of the present invention.","In the context of the present invention, the term \u201cprimitive\u201d describes an executable procedure or function. Inputs to the primitive and outputs provided by the primitive may be specified in an API. When a primitive is executed, it may perform one or more actions, return one or more results, or both.","It should be noted that the key archival system is illustrated and discussed herein as having various modules which perform particular functions and interact with one another. It should be understood that these modules are merely segregated based on their function for the sake of description and represent computer hardware and\/or executable software code which is stored on a computer-readable medium for execution on appropriate computing hardware. The various functions of the different modules and units can be combined or segregated as hardware and\/or software stored on a computer-readable medium as above as modules in any manner, and can be used separately or in combination.","Example embodiments of the present invention provide a scalable solution to data at rest encryption with multiple heterogeneous key management systems. A first API specifies an interface between a data at rest encryption module of a network device and a virtual device driver of the network device. A second API specifies an interface between the virtual device driver and a key management system. A key management system vendor provides device drivers in accordance with or that implements the second API. The virtual device driver implements primitives of the first API by invoking appropriate primitives of the second API. A discovery mechanism detects new key management systems and adds them to a current configuration without requiring modification of the data at rest encryption module.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["120","116","146","154","100","104","108","112","100","104","108","112","120","100","104","108","102","102","106","110","114","154","156"]},"Still referring to , data at rest encryption module  includes key vault interfacer , security processor , and encryption engine . Encryption engine  is configured to request a data encryption key () from security processor  and receive a data encryption key () in response to the request. Encryption engine  is further configured to use the received key to encrypt cleartext data  or to decrypt encrypted data .","Security processor  is configured to receive a data encryption key request  and send a data encryption key () in response to the request . Security processor  includes one or more key wrapper-and-unwrappers (, , , ). The key wrapper-and-unwrappers (, , , ) implement wrapping and unwrapping algorithms for one or more keyvaults. The selection as to which algorithm to use is based at least in part on the keyvault characteristics which are provided dynamically in the discovery process, or keyvault characteristics which are configured by an administrator. The key wrapper-and-unwrappers (, , , ) are configured to encrypt a data encryption key for transport over a network  to a key management system (, , , ), and to decrypt an encrypted data encryption key transported over the network  from a key management system (, , , ). Security processor  is configured to interface with one or more key management systems (, , , ) via an API with key vault interfacer .","Key vault interfacer  includes a virtual device driver , a key vault discoverer , and one or more key vault device drivers (, , , ). Key vault interfacer  includes a key vault device driver and associated API for each key management system currently supported by the data at rest encryption module . In the example illustrated by , key vault device drivers , , , and  represent the key vault device drivers and associated APIs that support interfacing with key management systems , , , and , respectively. Discoverer  is configured to discover a keyvault or accept a broadcast packet from a key management system. After a keyvault has been discovered, the actual device driver which includes all the APIs is dynamically loaded. According to another embodiment of the present invention, the discoverer is configured to, if the keyvault device driver is not present, download the keyvault device driver from the keyvault or obtain it using a URL which is a link to it and included as part of keyvault characterstics information.","Still referring to , virtual device driver  is configured to translate communications from security processor  based on the API for a particular key management system (, , , ). For example, security processor  stores a data encryption key in key repository  of key management system  by using the \u201cPutKey\u201d primitive provided by the API between security processor  and key vault interfacer .","According to one embodiment of the present invention, if key management system  does not support high availability or provides only partial high availability support (determined by the key management system capabilities provided during a discovery process), the virtual device driver stores the data encryption key redundantly, or checks for the key replication across key management systems (in case of partial HA support) in a second available key management system on the network which may be of the same type as  or of a different type such as  using their respective PutKey primitives, or the like. See Table 1 below for more examples of primitives for this API. Virtual device driver  translates the \u201cPutKey\u201d command based on the functionality provided by key vault device driver . See Table 2 below for more examples of primitives for this API.","Key vault discoverer  is configured to determine whether a key management device that is not part of a current key management device configuration has been newly added to a network. Key vault discoverer  is further configured to, if the key management device has been newly added to the network, determine whether the network device has an API for communicating with the key management device. Key vault discoverer  is further configured to, if the network device has the API, create a binding between a virtual device driver of the network device and the key management device via the API.","According to one embodiment of the present invention, key vault discoverer  is configured to determine whether a key management device that is not part of a current key management device configuration has been newly added to a network by periodically checking the network for the presence of a key management device that is not part of a current key management device configuration. The current key management device configuration may be stored in a memory of network device  and may include, for each key management device currently configured with network device , an identification of the key management device and characteristics of the key management device. Example characteristics of the key management device include the type and number of keys that the key management device can manage, the type of key management policies that the key management device implements, whether the key management device provides for high availability (redundancy), and how a client must authenticate itself e.g. via x.509 certificates, and the like.","According to another embodiment of the present invention, key vault discoverer  is configured to determine whether a key management device that is not part of a current key management device configuration has been newly added to a network by examining a broadcast message sent by the newly added key management device. The broadcast message may include an identification of the key management device and characteristics of the key management device.","According to another embodiment of the present invention, key vault discoverer  is configured to, if a key management device driver does not exist for a discovered key management device, download the key management device driver from the key management device, or from a URL reference the key management device provides in the characterstics description block it returns via a broadcast message or in response to an inquiry.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2","FIG. 2","FIG. 1","FIG. 2"],"b":["220","216","116","216","246","254","200","204","208","212","200","204","208","212","220","254","256"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3","FIG. 3"],"b":["320","370","316","344","320","370"]},"Data at rest encryption module  corresponds with data at rest encryption module  of . Data at rest encryption module  is configured to encrypt cleartext data  and decrypt encrypted data  using one or more data encryption keys. The one or more data encryption keys are managed by one or more key management systems (, , , ). Although four key management systems (, , , ) are shown in , network device  may interface with any number of key management systems. Encrypted data  is stored in target storage , which comprises one or more storage devices (, , ).",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 4","FIG. 1","FIG. 4"],"b":["420","416","116","416","446","454","400","404","408","412","400","404","408","412","420","454","470","420"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 5","FIG. 5","FIG. 5","FIG. 1","FIG. 2","FIG. 3","FIG. 4"],"b":["116","216","316","416"]},"Still referring to , at , a network device detects that a key management device which is not part of a current key management configuration has been newly added to a network. At , a determination is made regarding whether there is an API for the key management device. At , if the network device does not have the first API, the first network device obtains the first API. The first API may be obtained by from the key management device directly, or indirectly by information such as a URL provided by the key management device. At , the network device creates a binding between a virtual device driver of the network device and the key management device via the API. At , a security processor of the network device communicates with the key management device using a second API. The second API is for communications between the virtual device driver and the security processor.","The following description provides more details for the first and second APIs in accordance with one embodiment of the present invention. The \u201cfirst API\u201d is also referred to as the \u201cSecurity Processor API.\u201d And the \u201csecond API\u201d is also referred to as the \u201cKey Vault Interfacer\u201d API.","Security Processor API","According to one embodiment of the present invention, an API defining an interface between a security processor and a key vault interfacer comprises one or more of the primitives in Table 1 below. According to another embodiment of the present invention, an API defining an interface between a security processor and a key vault interfacer comprises all of the primitives in Table 1. The primitive names indicated in Table 1 are for ease of reference; primitives having the indicated function may be named differently than what is shown in Table 1.",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Security Processor API"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Function"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Connect","Connects to and configures the specified key vault with a specified"]},{"entry":[{},"address and a Key Vault certificate. The address can be in the form"]},{"entry":[{},"of, for example, hostname, IPv4, or IPv6 formats"]},{"entry":["Disconnect","Disconnects specified key vaults"]},{"entry":["Shutdown","Closes connections on all key vault sessions"]},{"entry":["GetKeyVaultInfo","Returns a quantity of key vault sessions opened, and status"]},{"entry":[{},"information"]},{"entry":[{},"A key vault status is considered \u201cup\u201d if a valid response is received"]},{"entry":[{},"from the key vault GetKey operation, regardless of whether the key"]},{"entry":[{},"exists"]},{"entry":["ReserveKeyID","Reserves a new key id from a key vault given an input media id"]},{"entry":["PutKey","Stores a key onto specified key vault sessions. If more than one key"]},{"entry":[{},"management system is configured to support high availability this"]},{"entry":[{},"interface may store keys to multiple key vault sessions or check for"]},{"entry":[{},"replication of keys across multiple key management systems that"]},{"entry":[{},"provide partial HA support (e.g. those that replicate but don't report"]},{"entry":[{},"or provide time window guarantees for replication)."]},{"entry":["GetKey","Retrieves a key record corresponding to a specified key id from the"]},{"entry":[{},"first available key management system."]},{"entry":["GetKeys","Retrieves a list of n most recently created actual keys associated with"]},{"entry":[{},"a media id. The list may include deleted keys"]},{"entry":["DeleteKey","Deletes a key associated with a given key id"]},{"entry":["DeleteKeys","Deletes a set of keys associated with a key id"]},{"entry":["EstablishSharedSecret","Establishes a shared secret between a key vault and a data at rest"]},{"entry":[{},"encryption module. It may be accomplished using a Diffie-Hillman"]},{"entry":[{},"key exchange protocol"]},{"entry":["DiscardSharedSecret","Discards a shared secret used for encrypting data encryption keys in"]},{"entry":[{},"communications between data at rest encryption module and a key"]},{"entry":[{},"management system"]},{"entry":["GetKeyVaultChar","Returns one or more key management device characteristics"]},{"entry":["SyncKeys","In configurations enabled for high availability, this interface checks"]},{"entry":[{},"for keys on multiple key management systems and ensures"]},{"entry":[{},"consistency by adding or deleting missing or extra keys."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"According to one embodiment of the present invention, an API defining an interface between a security processor and a key vault interfacer comprises one or more of the primitives in Table 2 below. According to another embodiment of the present invention, an API defining an interface between a security processor and a key vault interfacer comprises all of the primitives in Table 2. A key management device driver is expected to provide the primitives in Table 2. The primitive names indicated in Table 2 are for ease of reference; primitives having the indicated function may be named differently than what is shown in Table 2.",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Key Vault Interfacer API"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Function"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Initialization","Initializes the adapter"]},{"entry":["Connect","Connects to a specified key vault with a specified address. The"]},{"entry":[{},"address can be in the form of, for example, hostname, IPv4, or IPv6"]},{"entry":[{},"formats"]},{"entry":["IsAlive","Checks for a key vault status by issuing a GetKey operation, or the"]},{"entry":[{},"like. If the GetKey fails because a key vault is no longer"]},{"entry":[{},"operational, a message may be generated and error code returned."]},{"entry":[{},"Other operations could be issued to achieve the same result"]},{"entry":[{},"(determine keyvault status based on whether there is a response to a"]},{"entry":[{},"valid operation)."]},{"entry":["Disconnect","Disconnects key vaults associated with a specified handle and stops"]},{"entry":[{},"connectivity timer associated with the adapter"]},{"entry":["Shutdown","Closes connections on all key vault sessions and closes all resources"]},{"entry":[{},"used for the session"]},{"entry":["ReserveKeyID","Reserves a new key id from a key vault given an input media ID."]},{"entry":[{},"The reservation of the key id may comprise a hash operation on a"]},{"entry":[{},"media ID, for example taking the first 16 bytes. The has operation"]},{"entry":[{},"may be performed on a different number of bytes instead. A record"]},{"entry":[{},"is created for a new key ID, for an existing key ID the record is read"]},{"entry":[{},"the key count field is incremented, the key count field is added to the"]},{"entry":[{},"hash and returned to the caller as the key ID"]},{"entry":["PutKey","Stores a key onto the specified key vault session"]},{"entry":["GetKey","Retrieves the key record corresponding to the provided key id"]},{"entry":["GetKeys","Retrieves a list of n most recently created actual keys"]},{"entry":["DeleteKeys","Deletes a key associated with a given key id"]},{"entry":["EstablishSharedSecret","Establishes a shared secret between a key vault and a data at rest"]},{"entry":[{},"encryption module. It may be accomplished using a Diffie-Hillman"]},{"entry":[{},"key exchange protocol"]},{"entry":["DiscardSharedSecret","Discards a shared secret used for encrypting data encryption keys in"]},{"entry":[{},"communications between data at rest encryption module and a key"]},{"entry":[{},"management system"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 6","FIG. 6"],"b":["600","600","602","604","606","608","622","610","612","614","616","618","618","626","630","620","620","628"]},"Many other devices or subsystems (not shown) may be connected in a similar manner. Also, it is not necessary for all of the devices shown in  to be present to practice the present invention. Furthermore, the devices and subsystems may be interconnected in different ways from that shown in . Code to implement the present invention may be operably disposed in internal memory  or stored on storage media such as removable memory , a floppy disk, a thumb drive, a CompactFlash\u00ae storage device, a DVD-R (\u201cDigital Versatile Disc\u201d or \u201cDigital Video Disc\u201d recordable), a DVD-ROM (\u201cDigital Versatile Disc\u201d or \u201cDigital Video Disc\u201d read-only memory), a CD-R (Compact Disc-Recordable), or a CD-ROM (Compact Disc read-only memory).","While embodiments and applications of this invention have been shown and described, it would be apparent to those skilled in the art having the benefit of this disclosure that many more modifications than mentioned above are possible without departing from the inventive concepts herein. The invention, therefore, is not to be restricted except in the spirit of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated into and constitute a part of this specification, illustrate one or more embodiments of the present invention and, together with the detailed description, serve to explain the principles and implementations of the invention.","In the drawings:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
