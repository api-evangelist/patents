---
title: Substitute manager component that obtains state information of one or more software components upon failure of a first manager component
abstract: An apparatus in one example comprises a substitute manager component that upon failure of a first manager component, obtains management responsibility for a distributed software application from the first manager component and queries one or more software components of the distributed software application for state information of the one or more software components. The substitute manager component employs the state information to determine whether one or more recovery actions are needed for the distributed software application to recover from the failure of the first manager component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07386556&OS=07386556&RS=07386556
owner: Lucent Technologies Inc.
number: 07386556
owner_city: Murray Hill
owner_country: US
publication_date: 20040614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application contains subject matter that is related to the subjcet matter of the following applications, which are assigned to the same assignee as this application. The below-listed applications are hereby incorporated herein by reference in their entireties.","\u201cINSTRUCTING MANAGEMENT SUPPORT SOFTWARE OF A FIRST SOFTWARE COMPONENT TO SET UP A COMMUNICATION CHANNEL BETWEEN THE FIRST SOFTWARE COMPONENT AND A SECOND SOFTWARE COMPONENT,\u201d by Buskens, et al., patent application Ser. No. 10\/868,128, co-filed herewith;","\u201cSELECTNG A PROCESSOR TO RUN AN EXECUTABLE OF A DISTRIBUTED SOFTWARE APPLICATION UPON STARTUP OF THE DISTRIBUTED SOFTWARE APPLICATION,\u201d by Buskens, et at., patent application Ser. No. 10\/868,404, co-filed herewith;","\u201cSOFTWARE COMPONENT INITIALIZATION IN AN ORDERED SEQUENCE,\u201d by Buskens, et al., patent application Ser. No. 10\/867,945, co-filed herewith;","\u201cSHUTTING DOWN A PLURALITY OF SOFTWARE COMPONENTS IN AN ORDERED SEQUENCE,\u201d by Buskens, et al., patent application Ser. No. 10\/868,142, co-filed herewith;","\u201cDISTRIBUTED SOFTWARE APPLICATION SOFTWARE COMPONENT RECOVERY IN AN ORDERED SEQUENCE,\u201d by Buskens, et al., patent application Ser. No. 10\/867,590, co-filed herewith;","\u201cMANAGER COMPONENT FOR CHECKPOINT PROCEDURES,\u201d by Buskens, et al., patent application Ser. No. 10\/868,127, co-filed herewith;","\u201cMANAGER COMPONENT THAT CAUSES FIRST SOFTWARE COMPONENT TO OBTAIN INFORMATION FROM SECOND SOFTWARE COMPONENT,\u201d by Buskens, et al., patent application Ser. No. 10\/868,469, co-filed herewith;","\u201cFIRST AND SECOND MANAGER COMPONENTS THAT COMMUNICATE TO INITIALIZE AND\/OR SHUT DOWN SOFTWARE COMPONENTS IN AN ORDERED SEQUENCE,\u201d by Buskens, et al., patent application Ser. No. 10\/867,946, co-filed herewith;","\u201cMANAGER COMPONENT RESOURCE ADDITION AND\/OR RESOURCE REMOVAL ON BEHALF OF DISTRIBUTED SOFTWARE APPLICATION,\u201d by Gong, et al., patent application Ser. No. 10\/868,144, co-filed herewith.","The invention relates generally to distributed software applications and more particularly to management of distributed software applications.","In known distributed software applications, software components are distributed among a plurality of executables (i.e., software capsules or software entities). Each of the executables contains one or more software components that perform some portion of the functionality of the distributed software application. The software applications may comprise management software and in one example backup copies of the management software. If the management software fails, then one of the backup copies of the management software becomes active and substitutes for the failed management software.","Prior to a failure of the management software of the software application, the management software performs frequent periodic check pointing of its view of the state of all software components of the software application. The management software stores the state of all software components to stable storage. Upon a failure of the management software, the backup management software component accesses the stored state information and assumes that the most recent copy of the state information is correct. The backup management software may use state information of the software application acquired prior to the failure. As one shortcoming, the state information may have changed since the last check pointing of the state information before the failure.","To save the state of the software components in case of a failure, the management software and\/or the software components are continuously interrupted during normal operation. The frequent periodic check pointing of the state of all software components wastes time and resources of the management software and\/or the software components. As another shortcoming, the time and resources used to save the state of the software components could otherwise be used for operation of the software application.","Thus, a need exists for management software that obtains accurate state information of a software application for use during recovery from failure. A further need exists for a reduction in a number of interruptions of management software and\/or software components to obtain the state information for recovery.","Software applications may be distributed among a plurality of executables. Each of the executables contains one or more software components. A management infrastructure comprises one or more manager components that handle the management operations on behalf of the software application. Upon failure of a first manager component of the management infrastructure, a substitute manager component is promoted to active duty and takes over the management responsibility from the first manager component. Upon promotion to active duty, the substitute manager component queries each software component of the software application to determine the state of each software component. For example, if a software component is up and running, then the software component is in a system ready state. The substitute manager component compares the acquired state information with a configuration file to determine what recovery activity is needed to recover the software application from the failure of the first manager component.","In one embodiment, there is provided an apparatus comprising a substitute manager component that upon failure of a first manager component, obtains management responsibility for a distributed software application from the first manager component and queries one or more software components of the distributed software application for state information of the one or more software components. The substitute manager component employs the state information to determine whether one or more recovery actions are needed for the distributed software application to recover from the failure of the first manager component.","In another embodiment, there is provided a method for: inheriting management responsibility for a distributed software application upon failure of a first manager component; querying one or more software components of the distributed software application for state information of the one or more software components; and comparing the state information with a configuration file that comprises an indication of a desired architecture of the distributed software application to determine whether one or more recovery actions are needed for the distributed software application to recover from the failure of the first manager component.","In yet another embodiment, there is provided an apparatus comprising a high availability infrastructure in communication with a distributed software application. Upon failure of a first manager component, of the high availability infrastructure, a substitute manager component, of the high availability infrastructure, gains management responsibility for the distributed software application and queries one or more software components of the distributed software application for state information of the one or more software components. The substitute manager component employs the state information to determine whether one or more recovery actions are needed for the distributed software application to recover from the failure of the first manager component.","Turning to , an apparatus  in one example comprises a distributed software application  and a management infrastructure . The management infrastructure  performs one or more management operations on the distributed software application . The management infrastructure  comprises a manager component . For example, the manager component  may be responsible for one or more of starting, stopping, initializing, shutting down, and monitoring the distributed software application , detecting failures of the distributed software application , recovering the distributed software application , propagating state changes about distributed software application , and the like.","The distributed software application  represents a software application divided among a plurality of executables (i.e., software capsules or software entities). For example, the distributed software application  comprises a plurality of executables  and . The distributed software application  may comprise one or more additional executables (e.g., analogous to the executables  and ). The distributed software application  may provide any functionality for a computer system. The distributed software application  in one example comprises a call processing software application. For example, the distributed software application  sets up and\/or tears down telecommunication sessions in a telecommunication network.","The distributed software application  may run on a single central processing unit (\u201cCPU\u201d) or may be divided between multiple CPUs. For example, the executable  may run on processor  and the executable  may run on processor . The processor  comprises an executable manager  and the processor  comprises an executable manager . The executable managers  and  in one example are part of the management infrastructure .","The executable managers  and  monitor executables of the distributed software application  that run on the processors  and , such as the executables  and . For example, the executable managers  and  monitor communication channels and\/or diagnostics on behalf of the executables  and . Should one or more of the executables  and  fail, the respective one of the executable managers  and  informs the manager component  of the failure.","Each of the executable managers  and  comprise a communication interface  for communication with the manager component . The executable managers  and  receive instruction from the manager component . For example, the executable managers  and  may receive instructions at the communication interface  from the manager component . The executable manager  is encapsulated in an executable  running on the processor  and the executable manager  is encapsulated in an executable  running on the processor .","The executables  and  comprise one or more software components ,  and . For example, the executable  encapsulates the software components  and  and the executable  encapsulates the software component . Within each of the executables  and  may be tens, hundreds, or even thousands of other software components (e.g., analogous to the software components ,  and ).","The software components ,  and  represent software sub-entities of the executables  and . For example, the software components ,  and  represent logical blocks of software of the executables  and . The software components  and  in one example are developed independently and encapsulated together within the executable . The software components ,  and  each perform some portion of the overall functionality of the distributed software application . The software components ,  and  work together to make the distributed software application  achieve the desired operation.","Each of the software components ,  and  comprise application software , management support software , a management support software communication interface , and one or more application software communication interfaces . The software components ,  and  employ the management support software communication interfaces  to receive communications from the manager component . The software components ,  and  employ the application software communication interfaces  to receive communications from other software components of the software components ,  and . An application programming interface (\u201cAPI\u201d)  communicatively couples the application software  with the management support software  in each of the software components ,  and . The application software  and the management support software  can exchange information through the application programming interface .","The application software  is the portion of the software components ,  and  that performs some portion of the overall functionality of the distributed software application . The management support software  is the portion of the software components ,  and  that cooperates with the manager component  to perform management operations on the software components ,  and . The application software  is part of the distributed software application  and the management support software  is part of the management infrastructure .","An application developer creates the application software  of the software components ,  and  to achieve the designated functionality of the software components ,  and . For example, the application developer creates the application software  of the software components ,  and  to achieve the overall functionality of the distributed software application .","To alleviate the application developers from being required to write software into each of the software components ,  and  for the management operations, a code generator in one example automatically generates the management support software . The manager component , the executable managers  and , and the management support software  cooperate to perform the management operations on the software components ,  and .","The manager component  controls management operations for the distributed software application  on behalf of the distributed software application . One advantage to the manager component  controlling the management operations of the distributed software application  is that the manager component  alleviates application developers from being required to write software into each of the software components ,  and  to perform the management operations. The manager component  controls management operations of the software components ,  and  on behalf of the software components ,  and . For example, the manager component  interfaces with the management support software  coupled with the application software  in the software components ,  and  to control the management operations of the software components ,  and . Therefore, the manager component  saves the application developers the effort of creating software to perform the management operations.","The manager component  employs information from a configuration file  during management of the distributed software application . The configuration file  is created to store connection information and\/or architecture information of the distributed software application . The configuration file  in one example provides the manager component  with information about the set of executables  and , the number of each type of the executables  and , the mapping of the software components ,  and  to the executables  and , the types of the software components ,  and , and the number of each type of the software components ,  and  in each of the executables  and .","To create the management support software , the configuration file  in one example is input into the code generator. The code generator creates code for the management support software . The code for the management support software  is compiled and linked with the application software  in the software components ,  and . The management support software  may be different for each of the software components ,  and , as will be appreciated by those skilled in the art.","The manager component  comprises a communication interface  for receiving incoming communications. The communication interface  is employable for receiving the configuration file  for use with the distributed software application . The manager component  may employ other means to receive the configuration file , such as reading the configuration file  directly from a disk or file system. The communication interface  may also receive communications from the executable managers  and , as well as communications from the software components ,  and .","The manager component  may also use the communication interface  for receipt of external system information from an external environment . In one example, the external environment  represents other components of the system that are in communication with the manager component . In another example, the external environment  represents another management infrastructure in communication with the management infrastructure .","The manager component  is encapsulated with zero or more other software components in an executable . The executable  that contains the manager component  is run on one of the processors  and . The manager component  in one example is active and the management infrastructure  may have one or more standby manager components, such as a manager component . For example, the manager component  is analogous to the manager component . The manager component  in one example is substantially identical to the manager component . The manager component  in one example comprises a substitute manager component for the manager component .","In one example, the manager component  is encapsulated with the manager component  in the executable  running on the processor . In another example, the manager component  is encapsulated with zero or more other software components in an executable  running on the processor . Therefore, the active manager component  and the standby manager component  may run on different processors. The manager components  and  in one example comprise an active-standby pair. If the manager components  and  run on different processors and one of the processors  and  were to fail, then the management infrastructure  would still have one of the active-standby pair of the manager components  and  for operation. For example, if the processor  that runs the active manager component  goes down, then the standby manager component  on the processor  would become active.","If the manager component  fails, then one of the standby manager components becomes active and gains managerial control of the distributed software application . For example, upon failure of the manager component , the manager component  obtains management responsibility for the distributed software application  from the manager component . The management infrastructure  in one example promotes the manager component  to active management of the distributed software application . After the promotion to active management, the manager component  sends contact information of the manager component  to the software components ,  and  to indicate to the software components ,  and  that the manager component  is active. The software components ,  and  may employ the contact information to establish communication with the manager component .","In one embodiment, the manager component  and the manager component  are members of an active-standby set. Before a failure of the manager component , the manager component  comprises an active member of the active-standby set and the manager component  comprises a standby member of the active-standby set. Upon the failure of the manager component , the manager component  is promoted to be the active member of the active-standby set.","In another embodiment, the management infrastructure  runs the manager component  until failure of the manager component . Upon failure of the manager component , the management infrastructure  creates and starts another instance of the manager component . For example, the management infrastructure  starts the manager component .","The management infrastructure  may also comprise substitute executable managers. For example, the management infrastructure  comprises a substitute executable manager for the executable manager . Upon failure of the executable manager , the substitute executable manager becomes active to supervise the executable . The management infrastructure  may also comprise a substitute executable manager for the executable manager . Upon failure of the executable manager , the substitute executable manager becomes active to supervise the executable .","The distributed software application  may comprise redundant components. For example, the distributed software application  may comprise substitute software components for the software components ,  and . Upon failure of one of the software components ,  and , the respective one of the substitute software components becomes active to perform the responsibility of the failed one of the software components ,  and . The distributed software application  may also comprise substitute executables for the executables  and .","In one example, the substitute software components are encapsulated with the respective software components ,  and  in the executables  and . In another example, the substitute software components are encapsulated in separate executables running on separate processors. For example, the software component  runs on the processor  and the substitute software component for the software component  runs on the processor . Therefore, the active software component  and the standby software component are running on different processors. The software component  and the substitute software component in one example comprise an active-standby pair. If one of the processors  and  were to fail, then the distributed software application would still have one of the active-standby pair of software components for operation. For example, if the processor  that runs the active software component  goes down, then the standby software component on the processor  would become active.","The management infrastructure  provides management functionality as a reusable asset for distributed software applications. The management infrastructure  in one example comprises a portion of a high availability (\u201cHA\u201d) infrastructure. The manager component  in one example comprises a high availability manager component operating in a high availability infrastructure. For example, the high availability infrastructure controls management operations on the software components ,  and  for the distributed software application . The high availability infrastructure is usable to control management operations for the distributed software application  or another distributed software application. The high availability infrastructure is able to continue processing while switching between active and standby components in the high availability infrastructure.","Turning to , an illustrative description of one exemplary operation of the apparatus  is now presented, for explanatory purposes. The manager component  of the management infrastructure  in one example comprises a high availability manager component operating in a high availability infrastructure. To begin operation of the apparatus , the distributed software application  is configured for control by the manager component . Exemplary logic  serves to allow a substitute manager component of the management infrastructure  to obtain management responsibility for the distributed software application . The logic  employs one or more steps, for example, STEPS , , , , ,  and . The manager component  in one example performs the STEPS , , , , ,  and  of .","The manager component  in one example initially has management responsibility for the distributed software application . Upon failure of the manager component , the management infrastructure  needs to recover from the failure and reassign the management responsibility for the distributed software application  to a substitute manager component, such as the manager component . At STEP , the manager component  in one example obtains the management responsibility for the distributed software application  from the manager component . For example, the management infrastructure  may promote the manager component  from standby to active operation.","After the manager component  obtains management responsibility for the distributed software application , the manager component  determines whether the distributed software application  requires any recovery operations to recover from the failure of the manager component . For example, the manager component  determines whether the failure of the manager component  left the distributed software application  in a non-operational state.","At STEP , once the manager component  gains management responsibility for the distributed software application , the management component  imports the configuration file  to obtain architecture information of the distributed software application. In one embodiment, the manager component  imports the configuration file  upon obtaining management responsibility for the distributed software application . In another embodiment, the manager component  imports the configuration file  before the failure of the manager component  and upon obtaining the management responsibility, the manager component  checks whether the configuration file  has changed. In yet another embodiment, the manager component  periodically checks whether the configuration file  has changed. If the configuration file  has changed, the manager component  rereads the configuration file .","Next, the manager component  begins a discovery operation on the distributed software application  to learn the state of each of the software components ,  and  of the distributed software application . To begin the discovery operation, the manager component  determines an existence of the executable managers  and  in the management infrastructure . At STEP , the manager component  requests, from the executable managers  and , a list of all the executables of the distributed software application  that are under the supervision of the executable managers  and . The executable manager  in one example indicates to the manager component  that the executable manager  supervises the executable . The executable manager  in one example indicates to the manager component  that the executable manager  supervises the executable .","The configuration file  is created to comprise an indication of the number and type of all software components within each of the executables  and . At STEP , by importing information from the configuration file , the manager component  determines that the executables  and  encapsulate the software components ,  and . For example, the manager component  employs the list of executables from the executable managers  and  and information from the configuration file  to determine an existence of the software components ,  and .","At STEP , the manager component  queries each of the software components ,  and  for state information of the software components ,  and . For example, the manager component  sends a message to the management support software  of each of the software components ,  and  to request the state of the software components ,  and . The software components ,  and  return the state information to the manager component . If the software components ,  and  are running and don't require any recovery actions, the software components ,  and  are in a system ready state.","Having the manager component  obtain the state information of the software components ,  and  after the failure of the manager component  serves to allow the manager component  access to current state information of the distributed software application . For example, one or more of the software components ,  and  may have changed state since before the failure of the manager component . Obtaining the state information after the manager component  gains management responsibility for the distributed software application  promotes accuracy in the state information. For example, the state information obtained after the manager component  gains management responsibility reflects any changes to the state of the software components ,  and  due to the failure of the manager component  or concurrent failures of the software components ,  and . Therefore, the state information may be used to accurately determine whether any recovery actions are needed for the distributed software application  to recover from the failure of the manager component .","In one embodiment, the manager component  may periodically save the state of the software components ,  and  before the failure of the manager component . In another embodiment, the manager component  may periodically save the state of the software components ,  and  before the failure of the manager component  and the manager component  may also obtain the state of the software components ,  and  after the failure.","In yet another embodiment, the manager component  obtains the state of the software components ,  and  from the software components ,  and  after the failure of the manager component  without prior state information saving by the manager component . Querying the state of the software components ,  and  interrupts the operation of the software components ,  and . Therefore, querying the software components ,  and  only after the failure of the manager component  serves to reduce a number of interruptions to the software components ,  and  to obtain accurate state information of the software components ,  and .","Periodically saving the state of the software components ,  and  also interrupts the operation of the manager components  and . Only querying the state of the software components ,  and  when the state information is needed to recover from a failure of one of the manager components  and  serves to reduce a number of interruptions to the operation of the manager components  and . For example, the time and resources needed to periodically save the state of the software components ,  and  can be used for operation of the distributed software application .","The configuration file  indicates a desired architecture of the distributed software application . The manager component  employs the indication of the desired architecture to determine a list of software components that should be present and active in the distributed software application . At STEP , the manager component  compares the state information obtained from the software components ,  and  with the list of software components that should be present to determine if each of the software components ,  and  on the list of software components is in the system ready state.","In one example, all of the software components ,  and  respond to the manager component  with an indication of the system ready state. Therefore, the manager component  determines that each of the software components ,  and  are running correctly and additional recovery actions may not be necessary. In another example, all of the software components ,  and  are in a non-ready state. Therefore, the manager component  determines that the distributed software application  may need to be reinitialized to run correctly. In yet another example, one or more of the software components ,  and  respond to the manager component  with an indication of the system ready state and one or more of the software components ,  and  are in the non-ready state. Therefore, the manager component  determines that additional recovery actions may be necessary for the distributed software application  to run correctly.","Upon completion of initialization of the distributed software application , the active manager component (e.g., the manager component  or the manager component ) sends a system ready message to each of the software components ,  and . Upon receipt of the system ready message, the software components ,  and  transition into the system ready state. If the manager component  completed initialization of the distributed software application  before the failure of the manager component , then one or more of the software components ,  and  would be in the system ready state.","If the manager component  failed during an initialization operation on the distributed software application , then the manager component  obtains the state information of the software components ,  and  and determines that the initialization operation is unfinished. At STEP , the manager component  performs one or more recovery actions on the distributed software application  to recover from the failure of the manager component . For example, the manager component  undoes the partially completed initialization operation and reattempts a new initialization operation on the distributed software application .","During the initialization operation before failure of the manager component , the manager component  may have created and initialized the software component  and failed to initialize the software components  and . Before retrying the initialization operation, the manager component  terminates each of the executables  and  and the software components ,  and . Then, the manager component  begins the new initialization operation on the distributed software application. Upon completion of the initialization operation, the manager component  sends a system ready message to each of the software components ,  and  to update the state information of the software components ,  and .","If the manager component  failed during a recovery operation on the distributed software application  or one or more of the software components ,  and  have failed, then the manager component  obtains the state information of the software components ,  and  and determines that one or more of the software components ,  and  need to be recovered. If the state information obtained from the software components ,  and  indicates that the software components  and  are in the system ready state and the software component  is not in the system ready state, then the manager component  performs one or more recovery actions on the software component . In one example, the manager component  was attempting to recover the software component  before the failure. In another example, the software component  failed contemporaneously with manager component .","Upon inheriting management responsibility for the distributed software application , the manager component  initiates a recovery operation on the software component . At STEP , the manager component  performs one or more recovery actions on the distributed software application  to recover from the failure of the manager component . For example, the manager component  may promote one of the substitute software components to active duty to substitute for a respective one of the software components ,  and . Then, the manager component  may create another substitute software component as a standby for the promoted one of the substitute software components. The recovery operation for an executable or processor is analogous to the recovery operation for a software component, as described herein.","If the manager component  failed during a growth operation to add an additional software component to the distributed software application , then the manager component detects an existence of a transaction file that indicates a progress of the growth operation. The transaction file in one example comprises a scratch file saved in stable storage. The manager component  in one example failed before completion of the growth operation. Therefore, the configuration file  was not updated to store a record of the additional software component in the desired architecture of the distributed software application . However, the manager component  stored the progress of the growth operation in the transaction file.","At STEP , the manager component  performs one or more recovery actions on the distributed software application  to recover from the failure of the manager component . For example, the manager component  analyzes the transaction file to determine which one or more growth steps are needed to complete the growth operation and integrate the additional software component into the distributed software application . In one example, transaction file indicates that the additional software component has been grown physically. Therefore, the manager component  creates internal data structures for the additional software component and treats the additional software component as a software component that needs to be recovered. In another example, the transaction file indicates that the additional software component has yet to be grown physically. Therefore, the manager component  will trigger a new growth operation for the additional software component. Upon completion of the growth operation, the manager component  updates the configuration file  to include an indication of the additional software component in the desired architecture of the distributed software application . The growth operation for an additional executable or node is analogous to the growth operation for the additional software component, as described herein.","The apparatus  in one example comprises a plurality of components such as one or more of electronic components, hardware components, and\/or computer software components. A number of such components can be combined or divided in the apparatus . An exemplary component of the apparatus  employs and\/or comprises a set and\/or series of computer instructions written in or implemented with any of a number of programming languages, as will be appreciated by those skilled in the art. The apparatus  in one example comprises any (e.g., horizontal, oblique, or vertical) orientation, with the description and figures herein illustrating one exemplary orientation of the apparatus , for explanatory purposes.","The apparatus  in one example employs one or more computer-readable signal-bearing media. The computer-readable signal-bearing media store software, firmware and\/or assembly language for performing one or more portions of one or more embodiments of the invention. Examples of a computer-readable signal-bearing medium for the apparatus  comprise the recordable data storage medium of the manager components  and . The computer-readable signal-bearing medium for the apparatus  in one example comprise one or more of a magnetic, electrical, optical, biological, and atomic data storage medium. For example, the computer-readable signal-bearing medium comprises floppy disks, magnetic tapes, CD-ROMs, DVD-ROMs, hard disk drives, and electronic memory. In another example, the computer-readable signal-bearing medium comprises a network comprising or coupled with the apparatus  for transmitting a modulated carrier signal, for instance, one or more of a telephone network, a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), the Internet, and a wireless network. The steps or operations described herein are just exemplary. There may be many variations to these steps or operations without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted, or modified.","Although exemplary implementations of the invention have been depicted and described in detail herein, it will be apparent to those skilled in the relevant art that various modifications, additions, substitutions, and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["Features of exemplary implementations of the invention will become apparent from the description, the claims, and the accompanying drawings in which:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 1"]}]},"DETDESC":[{},{}]}
