---
title: System and method for database conversion
abstract: A database conversion engine comprising a method and system to convert business information residing on one system to another system. A generic, extensible, scalable conversion engine may perform conversion of source data to target data as per mapping instructions/specifications, target schema specifications, and a source extract format specification without the need for code changes to the engine itself for subsequent conversions. A scheduler component may implement a scalable architecture capable of voluminous data crunching operations. Multi-level validation of the incoming source, data may also be provided by the system. A mechanism may provide data feeds to third-party systems as a part of business data conversion. An English-like, XML-based (extensible markup language), user-friendly, extensible data markup language may be further provided to specify the mapping instructions directly or via a GUI (graphical user interface). The system and method employs a business-centric approach to data conversion that determines the basic business object that is the building block of a given conversion. This approach facilitates identification of basic minimum required data for conversion leading to efficiencies in volume of data, performance, validations, reusability, and conversion turnover time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06996589&OS=06996589&RS=06996589
owner: Convergys CMG Utah, Inc.
number: 06996589
owner_city: Cincinnati
owner_country: US
publication_date: 20020116
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The invention relates to a data\/database conversion engine, and more particularly to a generic database conversion engine and methodology for a bulk conversion of data from a source database to a target database.","Data conversion is useful to convert business information from an existing system to another system. The underlying business reasons for the conversion of information range from consolidation of an industry (such as the telecommunications industry) to seeking an upgrade of an information system to gain access to superlative business functionality.","In a typical data conversion project, the first task is mapping the information\/ functionality from the source system to the target system. For example, a conversion involving a social security number may comprise a straight mapping, manipulated mapping, and bridge mapping. Straight mapping applies to data that is stored in the target system the same way as it is in the source system. In manipulated mapping, a customer's name may be a one field [whole name] to three field [first name, middle name, and last name] conversion. The data mapping has to split the customer name from the source system into three pieces and put it into three distinct fields in the target system. Other data conversions may require bridging functionality that does not exist in the source system. This requires relatively complex processing where information has to be derived from a combination of other existing sources.","Third party vendors generally perform data conversions from one client's system to another. It is estimated that corporations spend billions of dollars to fund projects to write custom code for converting data from a source system to a target system. Such custom code is generally restricted to a particular conversion and becomes a choice that provides a low return on investment from a re-use perspective. Please see, http:\/\/www.campagne.com\/dcinfo.html and http:\/\/www.kinexisdms.com\/SAP.htm. Prior art database conversion engines are also customized to the current job and are not reusable without significant rewriting of the code employed on such systems. Therefore, there are no cost-effective tools currently in the market that are built for one-time data conversion needs.","Third party data conversion tools traditionally dump data with no logical relationships. Such dumping often results in a significant percentage of errors, which may or may not be discovered before the system goes live. Alternatively, some tools (see, U.S. Pat. No. 6,151,608 issued Oct. 19, 1999, to Morgenstern; DataJunction, http:\/\/www.datajunction.com; and Evolutionary Technologies International) are appended to a source system to provide customized, real-time, data conversion into the target system but these do not provide generic, one-time, bulk data conversion solutions. Other prior art systems provide engines for migrating data from one specific database to another specific database (i.e., relational database to relational database as per U.S. Pat. No. 6,151,608 (issued Nov. 21, 2000, to Abrams); network database to relational database as per U.S. Pat. No. 5,930,806 (issued Jul. 27, 1999, to Taira); and relational database to object-oriented database as per U.S. Pat. No. 5,732,257 (issued Mar. 24, 1998, to Atkinson). None of these engines, however, provide a generic solution for effecting the conversion of any combination of source and target databases. These engines are also geared toward real-time translation rather than one-time conversions. Some of the prior art systems, discussed above, further provide inflexible mapping templates for effecting the conversion rather than configurable rules to broadly address any type of conversion needed.","Bulk conversions and\/or one-time solutions for generic data conversions present significantly different performance and cost issues than real-time customized solutions. Therefore, the prior art does not provide a system and method, which effectively answers these needs.","There is a need for a resilient, scalable, and customizable database conversion solution. Embodiments of the invention may be put to use when information from one system (source) is converted into another system (target), which may provide a better set of business features\/functions. There is further a need to provide a system and method for flexibly incorporating newer database tables identified for conversion; flexibly addressing special data translation needs of the customer; scaling the system to improve performance; and flexibly modifying the source extract format specification to incorporate special\/uncommon information\/data relevant in the source system.","In information technology, conversions\/translations\/migrations include the process of moving from the use of one operating environment to another operating environment that is, in most cases, thought to be a better one. Migration can involve moving to new hardware, new software, or both. Migration can be small-scale, such as migrating a single system, or large-scale, involving many systems, new applications, or a redesigned network. One can migrate data from one kind of database to another kind of database (see, http:\/\/searchsystemsmanagement.techtarget.com\/sDefinition\/0,,sid20gci214624, 00.html)","A database conversion engine may comprise a computer system encoded or served with computer-executable instructions for effecting conversions using a mapping specification, target schema specification, and, if necessary, a source extract format specification. A target schema specification comprises computer readable instructions regarding the layout of the target database. A mapping specification comprises computer readable instructions regarding the translations to take place in the conversion. The source extract format specification comprises computer readable instructions for ordering data in a source database into a file according to a basic business object determined by analyzing the source and target systems. The mapping specification, target schema specification, and possibly the source extract format specification are all designed around a basic business object, which comprises a definition of all of the information to be transferred from one system to another.","The database conversion engine may be configured\/coded to handle input for any type of source database (possibly via the source extract format specification) and produce output for any type of target database (via the mapping specification and the target schema specification). Therefore, the database conversion engine can handle translations for any combination of source and target feeds including homogenous conversions, heterogenous conversions, distributed conversions; relational to object-oriented conversions, object-oriented to relational conversions, relational to relational conversions, objected-oriented to object- oriented conversions, and more. The database conversion engine is coded to be database non-specific so that the only database specific items necessary for a particular conversion are the mapping specification, target schema specification, and possibly the source extract format specification. The database conversion engine, itself, does not need to be reprogrammed for each conversion, rather, it is coded to manipulate the various input files and provides a method for converting databases that can be implemented without requiring actual programming or programming expertise. The mapping specification, target schema specification, and possibly the source extract format specification may be constructed using a GUI or simple instruction language that does not require programming expertise to manipulate. A compiler\/linker may translate these instructions into computer-readable executable instructions.","A computer system is disclosed for migrating a source database to a target database comprising a set of mapping instructions; a target schema specification; and a database conversion engine. Data in the source database is sent to the database conversion engine. The target schema specification defines a set of requirements for the target database. The set of mapping instructions defines at least one translation instruction for the translation of the source data from the source database to the target database. The database conversion engine may receive or pull said source data, the set of mapping instructions and the target schema specification. The database conversion engine may parse the set of mapping instructions and the target schema specification. The database conversion engine may perform the set of mapping instructions on the source data. The database conversion engine may upload a resulting set of data into the target database in accordance with the target schema specification.","In one embodiment, a computer system is disclosed for migrating a source database to a target database comprising a set of mapping instructions; a target schema specification; and a generically coded database conversion engine wherein the database conversion engine is coded to perform conversions independent of the specific source database and target database associated with a conversion. Data in the source database may be sent to the database conversion engine. The target schema specification may define the target database. The set of mapping instructions may define at least one translation instruction for the translation of the source data from the source database to the target database. The database conversion engine may receive\/pull said source data, the set of mapping instructions and the target schema specification. The database conversion engine may parse the set of mapping instructions and said target schema specification. The database conversion engine may perform the set of mapping instructions on the source data. The database conversion engine may upload a resulting set of data into the target database in accordance with the target schema specification.","In another embodiment, a computer system for migrating a source database to a target database may further include a delimited source file or a flat file, associated with the database, and a mapping language. In computer programming, a delimiter may be a character that identifies the beginning or the end of a character string (a contiguous sequence of characters). The delimiting character is generally not part of the character string. In command syntax, a space or a backslash ( ) or a forward slash (\/) may often be used as a delimiter, depending on the rules of the command language. The program interpreting the character string knows what the delimiters are. Delimiters may also be used to separate the data items in a database (the columns in the database table) when transporting the database to another application. For example, a comma-separated values file is one in which each value, in the cells of a table row, is delimited by and separated from the next value by a comma. The beginning of a row may be indicated by a new line character. (see http:\/\/searchdatabase.techtarget.com\/sDefinition\/0,,sid13gci211928,00.html) A set of data in the delimited source file or a flat file may be sent to a database conversion engine. A set of mapping instructions may be developed from the mapping language wherein the set of mapping instructions may define at least one translation instruction for the translation of the source data from the source database to the target database.","In another embodiment, a computer system for migrating a source database to a target database may, further or alternatively, include using the database conversion engine to validate said source data and to validate the resulting set of data in accordance with the target schema specification (validated resulting set of data).","In another embodiment, a computer system for migrating a source database to a target database may, further or alternatively, include a set of mapping instructions developed from a mapping language via a user interface. In an alternative embodiment the set of mapping instructions may be developed from an extensible mapping language via an interface wherein the set of mapping instructions may define at least one translation instruction for the translation of formatted source data from the source database to the target database. In yet another embodiment, the system may comprise an industry-specific mapping instructions template wherein the mapping instructions are developed from the industry-specific mapping instruction template. The mapping instruction template may comprise a telecommunications-specific or a billing-specific mapping instructions template.","In another embodiment a computer system for migrating a source database to a target database may include a database conversion engine that parses a set of mapping instructions and concurrently performs the set of mapping instructions on source data to produce a resulting set of data.","In another embodiment, a computer system for migrating a source database to a target database comprises a set of mapping instructions; a target schema specification; a delimited source file or flat file associated with the source database; a mapping language; an industry-specific mapping instructions template; a source extract format specification; and a generically coded database conversion engine wherein said database conversion engine is coded to perform conversions independent of the specific source database and target database associated with a conversion. A basic business object may be derived by analyzing the source database and the target database. A set of data in a delimited source file\/flat file may be sent to a database conversion engine. The database conversion engine may validate the source data. The target schema specification may define the target database. A set of mapping instructions may be developed from the industry-specific mapping instruction template and the mapping instructions may be further configured using the mapping language via a graphical user interface wherein the set of mapping instructions may define at least one translation instruction for the translation of the formatted source data from the source database to the target database. The set of mapping instructions may define at least one translation instruction for the translation of the source data from the source database to the target database. The source extract format specification and the target schema specification may be configured according to the basic business object. The database conversion engine may receive the source data, the set of mapping instructions and the target schema specification. Data in the source database may be formatted according to the source extract format specification to produce a file with repetitive instances of the basic business object (formatted source data). The database conversion engine may parse the set of mapping instructions and the target schema specification. The database conversion engine may concurrently perform the set of mapping instructions on the source data. The database conversion engine may validate the resulting set of data in accordance with the target schema specification (validated resulting set of data). The database conversion engine may upload a validated resulting set of data into the target database in accordance with the target schema specification.","In another embodiment, a computer system for migrating a source database to a target database may comprise a set of mapping instructions; a source extract format specification; a target schema specification; and a generically coded database conversion engine wherein the database conversion engine is coded to perform conversions independent of the source database and target database associated with a conversion. A basic business object may be derived by analyzing information to be transferred from the source database to the target database. The source extract format specification and the target schema specification may be configured according to the basic business object. Data in the source database may be sent to the database conversion engine. The target schema specification may define the target database. The set of mapping instructions may define at least one translation instruction for the translation of the source data from the source database to the target database. Data in the source database may be formatted according to the source extract format specification to produce a file with repetitive instances of the basic business object (formatted source data). The database conversion engine may receive the formatted source data, the set of mapping instructions and the target schema specification. The database conversion engine may parse the set of mapping instructions and the target schema specification. The database conversion engine may perform the set of mapping instructions on the formatted source data. The database conversion engine may upload a resulting set of data into the target database in accordance with the target schema specification.","In another embodiment, a computer system for migrating a source database to a target database may comprise a mapping specification; a data filter; a source extract format specification; a target schema specification; and a generically coded database conversion engine wherein the database conversion engine is coded to perform conversions independent of the specific source database and target database associated with a conversion. The data filter may format the source data according to the source extract format specification (formatted source data). The data filter, computer-executable instructions on a computer readable medium served to or encoded on a computer, may or may not comprise a component of the database conversion engine. The database conversion engine may receive the formatted source data. The database conversion engine may convert the formatted source data according to the mapping specification (converted data). The database conversion engine may format the converted data in accordance with the target schema specification (target data). The database conversion engine may upload the target data into the target database.","A computer system is disclosed for migrating a source database to a target database. The computer system further or alternatively comprises a delimited source file or flat file associated with the source database; a set of mapping instructions; a mapping language; a target schema specification; and a generically coded database conversion engine. A set of data in the delimited source file\/flat file is sent to a database conversion engine; the target schema specification defines a set of requirements for the target database; a set of mapping instructions is developed from the mapping language, wherein the set of mapping instructions defines at least one translation instruction for the translation of the source data from the source database to the target database. The database conversion engine receives the source data, the set of mapping instructions and the target schema specification. The database conversion engine parses the set of mapping instructions and performs the set of mapping instructions on the source data to produce a resulting set of data. The database conversion engine validates the resulting set of data in accordance with the target schema specification (validated resulting set of data). The database conversion engine uploads the validated resulting set of data into the target database.","A computer system disclosed for migrating a source database to a target database may also comprise a delimited source file or flat file associated with the source database; a set of mapping instructions; a mapping language; a target schema specification; and a generically coded database conversion engine. A set of data in the delimited source file\/flat file may be sent to the database conversion engine. The target schema specification may define a set of requirements for the target database. A set of mapping instructions may be developed from the mapping language wherein the set of mapping instructions defines at least one translation instruction for the translation of the source data from the source database to the target database. The database conversion engine may receive the source data, the set of mapping instructions and the target schema specification. The database conversion engine may validate the source data. The database conversion engine may parse the set of mapping instructions and may perform the set of mapping instructions on the source data to produce a resulting set of data. The database conversion engine may validate the resulting set of data. The database conversion engine may upload the resulting set of data into the target database.","A computer system is disclosed for migrating a source database to a target database; the computer system may also comprise a delimited source file or flat file associated with the source database; a set of mapping instructions; a mapping language; a target schema specification; and a generically coded database conversion engine. A set of data in the delimited source file\/flat file may be sent to the database conversion engine. The target schema specification may define a set of requirements for the target database. A set of mapping instructions may be developed from the mapping language via an interface wherein the set of mapping instructions may define at least one translation instruction for the translation of the source data from the source database to the target database. The database conversion engine may receive the source data, the set of mapping instructions and the target schema specification. The database conversion engine may validate the source data. The database conversion engine may parse the set of mapping instructions and may perform the set of mapping instructions on the source data to produce a resulting set of data. The database conversion engine may validate the resulting set of data. The database conversion engine may upload the resulting set of data into the target database.","A computer system for migrating a source database to a target database may also comprise a delimited source file or flat file associated with the source database; a set of mapping instructions; an extensible mapping language; a target schema specification; and a generically coded database conversion engine. A set of data in the delimited source file\/flat file may be sent to the database conversion engine. The target schema specification may define a set of requirements for the target database. A set of mapping instructions may be developed from the extensible mapping language via an interface wherein the set of mapping instructions may define at least one translation instruction for the translation of the source data from the source database to the target database. The database conversion engine may receive the source data, the set of mapping instructions and the target schema specification. The database conversion engine may validate the source data. The database conversion engine may parse the set of mapping instructions and may perform the set of mapping instructions on the source data to produce a resulting set of data. The database conversion engine may validate the resulting set of data. The database conversion engine may upload the resulting set of data into the target database.","A computer system for migrating a source database to a target database may also comprise a delimited source file or flat file associated with the source database; a source extract format specification; a set of mapping instructions; an industry-specific mapping instructions template; a mapping language; a target schema specification; and a generically coded database conversion engine. A set of data in the delimited source file\/flat file may be formatted according to the source extract format specification (thus producing formatted source data). The target schema specification may define a set of requirements for the target database. A set of mapping instructions may be developed from the industry-specific mapping instruction template and may be further configured using the mapping language via a graphical user interface wherein the set of mapping instructions may define at least one translation instruction for the translation of the formatted source data from the source database to the target database. The database conversion engine may receive the formatted source data, the set of mapping instructions and the target schema specification. The database conversion engine may validate the formatted source data. The database conversion engine may parse the set of mapping instructions and may perform the set of mapping instructions on the formatted source data to produce a resulting set of data. The database conversion engine may validate the resulting set of data. The database conversion engine may upload the resulting set of data into the target database.","A computer system for migrating a source database to a target database may also comprise a delimited source file or flat file associated with the source database; a source extract format specification; a set of mapping instructions; an industry-specific mapping instructions template; a mapping language; a target schema specification; and a generically coded database conversion engine. A set of data in the delimited source file\/flat file may be formatted according to the source extract format specification (thus producing formatted source data). The target schema specification may define a set of requirements for the target database. A set of mapping instructions may be developed from the industry-specific mapping instruction template and may be further configured using the mapping language via a graphical user interface wherein the set of mapping instructions defines at least one translation instruction for the translation of the formatted source data from the source database to the target database. The database conversion engine may receive the formatted source data, the set of mapping instructions and the target schema specification. The database conversion engine may validate the formatted source data. The database conversion engine may parse the set of mapping instructions and may concurrently perform the set of mapping instructions on the formatted source data to produce a resulting set of data. The database conversion engine may validate the resulting set of data. The database conversion engine may upload the resulting set of data into the target database.","A computer system is disclosed for migrating a source database to a target database; the computer system comprises a source extract format specification; a set of mapping instructions; a target schema specification; and a generically coded database conversion engine. The source database and the target database may be analyzed to derive a basic business object. The source extract format specification and the target schema specification may be configured according to the basic business object. Data in the source database may be formatted according to the source extract format specification to produce a file with repetitive instances of the basic business object (formatted source data). The target schema specification may define a set of requirements for the target database. The set of mapping instructions may define at least one translation instruction for the translation of the formatted source data from the source database to the target database. The database conversion engine may receive the formatted source data, the set of mapping instructions and the target schema specification. The database conversion engine may parse the set of mapping instructions and may concurrently perform the set of mapping instructions on the formatted source data and may upload a resulting set of data into the target database.","A computerized method for migrating a source database to a target database may comprise the use of a delimited source file or flat file associated with the source database; a source extract format specification; a set of mapping instructions; an industry-specific mapping instructions template; a mapping language; a target schema specification; and a generically coded database conversion engine. The method may further comprise the steps of: formatting the delimited source file\/flat file according to the source extract format (formatted source data); defining a set of requirements for the target database and encoding the requirements in the target schema specification; developing a set of mapping instructions, that define at least one translation instruction for the translation of the formatted source data from the source database to the target database, using the industry-specific mapping instruction template and further configuring the mapping instructions with commands developed with the mapping language via a graphical user interface; sending the formatted source data, the set of mapping instructions and the target schema specification to the database conversion engine; validating the formatted source data through a set of computer executable instructions encoded in the database conversion engine; parsing the set of mapping instructions; concurrently performing the set of mapping instructions on the formatted source data to produce a resulting set of data; validating the resulting set of data by comparing it to the target schema specification through a set of computer executable instructions encoded in the database conversion engine; and uploading the resulting set of data into the target database.","A computerized method for migrating a source database to a target database may also comprise the use of a source extract format\/source extract format specification; a set of mapping instructions; a target schema specification; and a database conversion engine. The method may further comprise the steps of: defining at least one basic business object for the migration by analyzing the source database and the target database; configuring the source extract format and the target schema specification according to the basic business object; formatting data in the source database according to the source extract format to produce a file with repetitive instances of the at least one basic business object (formatted source data); defining a set of requirements for the target database in the target schema specification; defining a set of mapping instructions that define at least one translation instruction for the translation of the formatted source data from the source database to the target database; sending the formatted source data, the set of mapping instructions and the target schema specification to the database conversion engine; parsing the set of mapping instructions; concurrently performing the set of mapping instructions on the formatted source data using computer executable instructions encoded in the database conversion engine to create a resulting set of data; and uploading the resulting set of data into the target database.","A computerized method for migrating a source database to a target database is disclosed. The method may comprise utilizing a delimited source file or flat file associated with the source database; a source extract format specification; a set of mapping instructions; an industry-specific mapping instructions template; a mapping language; a target schema specification; and a generically coded database conversion engine. The database conversion engine may be coded to perform conversions independent of the specific source database and target database associated with a conversion. The method may further include formatting the delimited source file or a flat file according to the source extract format specification (formatted source data); defining a set of requirements for the target database and encoding the requirements in the target schema specification; developing a set of mapping instructions, that define at least one translation instruction for the translation of the formatted source data from the source database to the target database, by using the industry-specific mapping instruction template and further configuring the mapping instructions with commands developed with the mapping language via a graphical user interface; sending the formatted source data, the set of mapping instructions and the target schema specification to the database conversion engine; validating the formatted source data through a set of computer executable instructions encoded in the database conversion engine; parsing the set of mapping instructions; concurrently performing the set of mapping instructions on the formatted source data to produce a resulting set of data; validating the resulting set of data by comparing it to the target schema specification through a set of computer executable instructions encoded in the database conversion engine; and uploading the resulting set of data into the target database.","In another embodiment the computerized method for migrating a source database to a target database may further include the steps of defining at least one basic business object for the migration by analyzing the source database and the target database; configuring the source extract format specification and the target schema specification according to the basic business object; and formatting data in the source database according to the source extract format specification to produce a file with repetitive instances of the at least one basic business object (formatted source data).","For the purpose of promoting an understanding of the principles of the invention, reference will now be made in detail to the present preferred embodiments of the invention, examples of which are illustrated in the accompanying drawings. Specific language will be used to describe the same. It will nevertheless be understood that no limitation of the scope of the invention is thereby intended toward such alterations and further modifications in the illustrated device and such further applications of the principles of the invention as illustrated therein as would normally occur to one skilled in the art to which the invention relates.","According to the following various embodiments of the invention, there is provided a method and system for converting data in a source database to a target database using an architecture of hardware and software components. In particular, a re-usable database conversion tool and methodology for preparing, performing and\/or validating bulk conversions from a source system to a target system is provided.","In one embodiment, the invention comprises a system and method of analyzing a source database and a target database to define a methodology for converting the data in the source database to the target database. This methodology may be defined in mapping instructions\/mapping specification using a configurable mapping language provided by the system for interpretation by a database conversion engine. A database conversion engine may comprise a computerized system further comprising computer executable instructions encoded in said computerized system (or served to the computerized system via a network connection) for the receiving\/pulling of formatted source data, validation, conversion (including scheduling instructions thereof), and uploading of the source database to the target database.","Referring to , once the \/mapping specification\/mapping instructions () have been designed, this mapping specification (), a target schema specification (), and the source data () are input into the conversion process (). The source data () may have to be formatted according to a predefined format defined by a source extract format\/source extract format specification () before it may be processed by the database conversion engine (). The database conversion engine () parses the mapping specification () and applies these mapping instructions () to the source data ()\/formatted source data () to produce the target data (), which may be uploaded into the target system () per the specifications outlined by the target schema specification (). This method flexibly addresses the need for a scalable, customized, holistic database conversion (including special\/uncommon data types) as dictated by the specific business needs of each customer within a predetermined amount of time.","Referring to , an overview () of the system and process is shown. Referring to , another embodiment () of the system and methodology is presented. The source data realm () and the target data realm () generally comprise two independent systems that are used for a similar purpose. The target data realm may, however, accommodate more or less information. The physical location and the two systems may be transparent to the conversion process because various means of transferring source data () (and other data) to another location are provided ranging from a simple file copy to employing industry standard file transfer protocols across networks. The source system () may be mapped to the target system () by determining a basic unit of information () (i.e., a customer further comprising a name, phone number, billing address, etc), which encapsulates the information needed by the target system () to function. A business object decision process (see, ) determines this basic unit of information\/business object (). Then mapping specification () may be developed to transfer each basic unit of information contained in the source database () to the target database () using the system's predefined but configurable mapping language provided by the system. Source data (), comprising an XML (extensible markup language) file or any type of file capable of being read by the database conversion engine (), may be formatted according to a standard source extract format specification (). The formatted source data () may further comprise the minimal set of information required to effectively convert the source system () to the target system (). A data filter () may be provided to help convert an initial source data () file into a final source data format using factors such as the minimal data required, time constraints, and more to do so. Preferably the contents of the source system () may be dumped into a flat file and then fed through the data filter () to produce an XML file. Thus, the data filter () is not limited to a particular technology\/system or source database. The data filter () may be further configured to generate a particular type of XML formatted data\u2014one that may comply with the source extract format specification ()","Alternatively the source data () may be provided in a form capable of being processed by the database conversion engine () directly (i.e., without the use of additional filtering) or the source data () may be manually formatted according to the source extract format specification (). Filters (), if used, may be programmed to accept a variety of inputs and create a variety of outputs (i.e., text to XML). For instance, the source extract format specification () and source data () may be fed to the filter () and the filter () may then render the source data () as per the source extract format specification () and also ensure that the output complies with standards decreed by type of output chosen (i.e., XML compliance as per the W3C industry standards).","In one embodiment, a data filter () will convert source data () from the source database () from a fixed format to an XML (). The data filter () may be configured to read varying types of input data so that it can meet the needs of multiple projects, each potentially having its own source extract format specifications () and input format. Some source systems () may present data that may be delimited while some may opt for fixed data format. The data filter () may be configured to generate varying schemas of XML output files. The filter () may be configurable with the output format parameter so that it will generate an output whose format may be consistent with the specifications. The filter () may process voluminous data through burst modes or through streaming mode by using a scalable architecture. The filter () may invoke the XML compliance test to ensure that the data meets the W3C specifications. The filter may be configured to group data in batches of files each containing a predetermined volume of source data ().","Finally, a target schema specification (), which defines the layout of the target database () may be created. The mapping specification (), target schema specification (), and the source data ()\/formatted source data () may be sent to the database conversion engine (). The database conversion engine may include a validation process (, see, ), third-party verification of data (, see, ), and\/or a conversion scheduler component () for scalability purposes. A final upload process () may be provided to load the target data () into the target database ().","This methodology flexibly permits the bulk conversion of data from a variety of heterogeneous databases (relational databases, object databases, mainframes etc.) without necessitating code changes in the database conversion engine. Further aspects of this embodiment will be explored in the following pages.","Documentation","The method and system for converting a source database to a target database may involve a highly refined series of documents\/protocols for defining the parameters of the conversion. Some of the methodology components used to prepare for the conversion may include: conversion methodology document(s), conversion method analysis document(s), conversion project plan(s), conversion interfaces document(s), conversion usage processing document(s), standard data mapping specification template(s), documentation for a \u201cstandard mapping language\u201d, standard source extract format specification, conversion validation requirements document(s), conversion validation plan(s), and implementation plan(s).","A \u201cconversion methodology document\u201d may define tasks and deliverables for each project phase.","A \u201cconversion method analysis document\u201d may define information for analyzing and selecting a conversion method.","A \u201cconversion project plan\u201d comprises a standard but configurable schedule of conversion tasks for each conversion. The plan may include information such as assumptions, risks, scope of data to convert, and a project schedule.","A \u201cconversion interfaces document\u201d may address conversion impacts and solutions for standard interfaces such as an IVR and credit card interfaces.","A \u201cconversion usage processing document\u201d may contain information on how usage will be handled prior to, during, and after conversions for converted data.","A \u201cstandard data mapping instructions template\u201d may comprise standard templates for mandatory tables and columns required for every conversion within a particular industry, i.e., telecommunications, billing, etc., that can be used as a basis for conversions and customized as necessary. The use of this template minimizes the analysis for future projects for mandatory tables. These templates may comprise computer executable instructions on a computer readable medium.","Documentation for a \u201cstandard mapping language\u201d may be provided which outlines the commands which can be used to create the data mapping specification. Some commands may be predefined or even geared to a specific industry, however, the language may also be designed to be extensible and allow the user to define new commands\/actions, which may be used in the mapping specification. The standard mapping language, itself, comprises computer executable instructions that may be encoded onto a computer readable medium either directly or via an interface, i.e., a graphical user interface (GUI). The GUI may further facilitate the computerized generation of mapping specification to correspond the conversion choices that are graphically presented and chosen by the user (i.e., the user draws a line on the screen from a source field to a target field and the GUI generates the necessary instruction to effect that conversion). The GUI may be designed to flexibly accommodate new mapping specification without associated code changes. New mapping constructs may be incorporated into the GUI by configuring base commands in the mapping language differently. The GUI may further include a mapping language parser to ensure that any mapping dependency constraints are fulfilled. The GUI may provide a list of available mapping constructs in a selectable list (i.e., a drop down list box). Additional mapping constructs can be easily configured and added to the selectable list by configuring various base commands provided in the mapping language. A given mapping construct may comprise several smaller instructions that are associated with each other. New instructions may be added to the system and to the GUI as needed through an application programming interface (API) provided with the system. The user can implement new functionality, as per the API, and place the new code in a configured directory which can be accessed by both the database conversion engine () and the GUI.","A standard \u201csource extract format specification\u201d () may be used for conversions. The standard source extract format specification () does not require the user to understand the internal database relationships as the standard source extract format specification and conversion utility automatically handle ensuring proper relationships occur. The source extract format specification may be based on business entities and new entities can simply be added as necessary. This standard source extract format specification eliminates the need to define and develop a source extract for every conversion. The standard source extract format specification comprises a specification encoded onto a computer-readable medium that may be processed by a utility encoded with instructions to process such standard source extract format specification.","A \u201cconversion validation requirements document\u201d may comprise requirements for validating critical data for conversions including converted data and data which may be processed after conversion.","A \u201cconversion validation plan\u201d comprises a standard test plan, which contains various information such as the validation strategy, number of iterations, test schedule, etc.","An \u201cimplementation plan\u201d comprises additional tasks to be performed during a conversion such as tasks prior to, during, and after the conversion window, backup and restart procedures, etc.","In a preferred embodiment, one or more of these entities may be used to effectively convert one database to another.","Source Extract Format Specification ()","The source data () comprises a file of data that may be preferably in a marked up or delimited format (i.e., XML). Even so, the source data () may need to be further formatted according to the specifications provided by a source extract format specification () prior to being input into the database conversion engine () for conversion. The source extract format specification () defines a generic format\/ordering of the information in the source data (). The source data () may be converted according to the layout defined by the source extract format specification () through the use of data filters (). The filter may be a configurable component designed to assemble various forms of data into the desired source extract format specification.","If a standard industry source extract format specification is not used for the conversion, one may be generated by analyzing the source and target databases. The quantity and depth of the information to be converted may be ascertained and aggregated () into a source extract format specification () via a \u201cbasic business object\u201d or \u201cunit of conversion\u201d (). The final formatted source data () will comprise repetitive blocks of information comprising this basic business object (). The source extract format specification () may comprise a minimal set of information required to convert the information () residing on source system () to the target system (). The source system data () may be rendered as per the source extract format specification () and transferred () to a predetermined location in the target realm () for conversion.","The nature of the initial and final data formats are a function of the business requirements and the technical considerations. The business requirements () dictate the quantity and depth of the information. The technical considerations include the performance factors and allocated conversion window timeline. A conversion utility\/data filter () may factor in these considerations to perform optimal data formatting. This embodiment also supports various intermediate data formats that are eventually rendered to a particular final data format () for conversion.","Target Schema Specification","The target () and source () databases may be analyzed () by one or more analysts (), preferably by one set of analysts per data realm, to determine how the information () contained in the source database () may be converted\/transferred\/integrated to\/with the target database (). For instance, the source system () may be based on one type of unit notation (i.e., meters) while the target system requires () another system of unit notation (i.e., feet). The implementation decision () refers to conversion implementation () where decisions regarding the conversion time-line, the target system downtime, etc., may be ascertained. If the time-line is narrow, then the target schema specification () can be streamlined by eliminating details striking a balancing act between system functionality and faster conversions. The marketing decisions () pertaining to data conversion () involve decision discontinuing certain products, services relevant to the source system () and the target system (). Such decisions impact the quantity and reach of information slated for conversion. In one embodiment the mapping specification () and target schema specifications () may be designed in a node\/tree-like structure. The information may be rolled into a list of individual tables\/columns for RDBMS databases or fields\/classes for object systems depending upon the nature of source\/target system (\/).","In one embodiment, the target schema specification () comprises a machine- readable description of the target system (). The target schema specification () comprises a collection of various pieces of business specific information along with attributes. The attributes include, but are not limited to, non-null data base conditions, field sizes, etc. The target schema specification () may provide a thumbprint of the target system () to the database conversion engine (). The mapping information may then be processed according to the specified thumbprint. Referring to , the target schema specification () may comprise a multi-level tree structure and may be traversed on a leaf () by leaf () basis. The target schema specification does not impose restriction on the number of nodes () or on the type of nodes (). Note that each node corresponds to the table or object or data-dump as the case may be depending upon the target system ().","Various embodiments of the invention further support a frequent business need wherein a data feed may be necessary for a third party system (to which the target system () interfaces) to provide certain business functions. For e.g. telecom-billing systems rely upon a third party vendor () to verify customer addresses as\/when customers are entered into the system. Such third party vendors () require an initial data feed as a part of data conversion efforts (). The data feed requirements are integrated into the target schema specification (). The data feed extractor () generates data for the third party vendor () and packages\/ships it to a predetermined location.","This analysis results in the creation of a target schema specification () and a mapping specification (). The target schema specification () comprises a marked-up\/delimited file, i.e., XML, which contains the requirements, required tables\/fields, sizes, attribute specifications, etc., of the target system (). In one embodiment:",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"< LAND CD type=\u201cstring\u201d use=\u201crequired\u201d length=\u201c2\u201d \/>"]},{"entry":[{},"< OCCUPATIONINDUSTRYCD type=\u201cnumber\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"use=\u201coptional\u201d length=\u201c2\u201d \/>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The first instruction (relating to language-code) stipulates that it is a required field. It further specifies that it is a string with a maximum allowable length of two characters. The second instruction (relating to occupation industry code) specifies that it is a number and its total size is two digits. It also specifies that it is an optional attribute in the target system.","The specifications are grouped with the object\/field in the tags. For every table\/entity that requires conversion to target system, a group of individual columns\/attributes may be converted. The database conversion engine () ensures the database field size or the entity size (in case of non-relational systems) conforms to the limit specified.","Like the source extract format specification, the target schema specification more specifically focuses on a basic unit\/object of information (), which comprises a structure for the data to be converted from the source system () to the target system (). The basic unit of information () may be decided by employing the business object decision process (, see, ) and determining a basic business object (). For instance, in the embodiment shown in , a source billing system () may be comprised of customers () as the basic unit of conversion (). Every customer () in the billing system () can have one or more addresses () and phone lines (). Embodiments of this invention are not, however, limited to telecommunications and billing. For instance, if the conversion project pertains to a machine-parts inventory system, the basic unit of such a system may be a \u201cmachine-part\u201d qualified with related attributes. It is also worth noting that although the term \u201cobject\u201d is part of the term, \u201cbasic business object\u201d, this does not necessarily mean an \u201cobject\u201d in the object-oriented programming sense although this point of reference may work in some cases. The basic business object () may also be used to generate the source extract format specification ().","Creation of the Mapping Specification ()","The mapping specification () creates\/maintains the logical relationships between the source database () and the target database (). The mapping process () captures all the fields\/objects that require translation into the target database () and whatever requirements\/manipulations may be necessary to effect this into a mapped instruction set\/mapping specification (). The mapped instructions () may be interpreted by the database conversion engine () for processing. The mapping specification () supports operations such as copy a value, value-defaulting, conditional defaults, look-ups, find and replace, resizing, transformations, translations, reference data lookups, etc. Furthermore, the mapping specification () can be extended as and when a specialized and reusable need may be encountered during the mapping phase () of the project. Thus, the mapping specification () comprises instructions that effect the translation of data from the source system () into the target system ().","The mapping specification () isolates the rules relating to the conversion of the source system () to the target system () from the database conversion engine. The architecture of the system supports this isolation by providing a component with conversion software encoded\/loaded\/executed on the database conversion engine (which may include any number of servers) that can process these mapping specification. Thus, these instructions may be easily altered for subsequent conversions without modifying the code, which operates the database conversion engine itself.","Part of the development of the mapping specification may include a business functional gap analysis () which determines the difference of functionality between the source () and target systems (). The target system () usually provides more functionality than the source system () and sometimes cannot function without certain critical information. When such critical information may be absent on the source system () the data conversion process () can generate critically needed information by designing the mapping specification () to fill in this data.","Data Conversion Engine Assembly","A database conversion engine () comprises computer executable instructions on a computer readable medium which process the computer-readable mapping specification () on the source data () to produce the target data (). The database conversion engine's code does not have to change for each conversion because the customization for each conversion may be isolated to the mapping specification (). Referring to , the database conversion engine () has a built-in interpreter () to process the generic mapping language. In another embodiment, the database conversion engine () may be a generic, configurable, scalable, extensible, and\/or reusable component whose basic function may be to convert the data () using the formatted source data (), target schema specification () and the mapping specification () while working in tandem with a scheduler (), upload process () and the validation process ().","In one embodiment of the invention, a generic database conversion engine () may be provided that can process mapping specification () configured for various systems\/customers\/products\/releases. The database conversion engine () can be configured to generate data in various formats. It can for example, generate data in Oracle's SQLLDR format, HTML format, XML format, etc.","Referring additionally to , an embodiment of the database conversion engine assembly () is shown. The database conversion engine's basic function may be to render the source data () to target data () based upon the supplied mapping specification () and target schema specification (). The database conversion engine may include interface\/component support for receiving database records from a particular device and\/or may include a data feed for external interface vendors. Interfaces are gateways to supplementary services offered by third-party vendors. Systems may interface to third party systems to gain access to a specialized set of business services. For example, a billing system may have to process payments through multiple mediums (i.e., credit cards, checks, etc.). The capability to process such diverse payments may require extensive hardware and software systems. Furthermore, such payment processing may be outside the business focus of the owner of the billing system. Thus, the services may be delegated to a third party payment services vendor who may establish an interface between the billing system and the third party payment processing system. Such third party systems may require an initial data feed at the time of conversion. The data feed may comprise a list of new customers that are being converted to the newer billing system. One embodiment of the invention provides such data feeds required by third-party systems at the time of conversion.","The database conversion engine () may be considered generic because it can serve multiple conversion projects without associated code changes due to the formatted source data, mapping specification, target schema specifications and extendable interfaces and data feeds. The database conversion engine () may comprise various modules that work together to perform conversions on the source data () fed to it. The source data scanner () serves as the source data repository. The source data repository may be designed to work upon predetermined basic units of conversion (). The instructions in the mapping specification () are interpreted and stored in the map instruction repository () and are consulted for every basic unit of conversion (). The target schema information repository () serves the target schema specification () once for every basic unit of conversion ().","Referring additionally to , the conversion resource manager () manages all the source data (), third-party reference data (, which may be stored in the reference data repository () and is explained further below) and the target schema specification (). It may also manage the generation of target data () and the associated data formatting process. It may also interpret the automatic generation of implied-data for any source information (). For e.g. if the source system () has certain business information that may be redundantly stored in target schema specification () (for purposes of performance, etc.) the conversion manager can automatically duplicate the information and provide a data feed for the redundant objects. Referring additionally to , the validation manager may be consulted for every field and the validity may be ascertained (\/). When a validity check fails the entire unit of the conversion may be discarded (). The conversion resource manager () may also interpret the mapping specification () and take necessary action to convert the data. It tracks resource issues such as memory\/disk space etc and logs the exception events though the event manager ().","A mapping instruction () associated with the field may be looked up () from the mapping repository (). The mapping instruction () may be parsed () and, depending on its type (), necessary action may be performed. The types of actions include, but are not limited to, string manipulations (), look- ups, copies (), defaults etc.","The database conversion engine () may additionally include custom data manipulations\/scripts (computer executable code encoded on a computer readable medium) that can be implemented using a standard \u201capplication programming interface\u201d (API) () approach. Most often, information systems require certain business information to be set up much ahead of the target system deployment. This business information may be termed reference data (stored in ). For example, interest rates for deposit amounts may comprise external reference data. Such information requires a lookup () while converting source data (). This embodiment supports reference information look-up () at the time of converting source data ().",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 7","b":["220","515","245","220","515","245","610","705","710","220","305","715","240","305","725","730","305"]},"The data upload process () consists of available tools such as sqlldr from Oracle to custom built tools built per requirements imposed by target system repository\/repositories (). The data upload process () may be also scalable and supports voluminous processing of information.","Mapping Language","In one embodiment of the invention, a mapping language may be provided for creating a mapping specification () that may be geared toward the specific conversion application (i.e., billing [one billing system to another billing system], non-billing, etc.) and may be easily altered for each client conversion. It is, however, highly extensible in the sense that customized constructs can be added to the language through the extension of abstract classes. The data mapping pertaining to a conversion project may be stored in a file (i.e., a text file). The database conversion engine () uses the mapping specification () while converting data from source system () to target system (). In another embodiment, the mapping language may be designed to generically address a particular industry such as telecom, billing, etc. The database conversion engine sends the files with the converted data, i.e., flat files, to a target database () for loading.","The logical mapping of the source system to the target system may be accomplished through the use of an English-like, user-friendly mark-up\/delimited mapping language (i.e., XML or XML-related). A new mapping specification () may be written for each conversion. The reusable data processing software () interprets the mapping specification () that is specific to each client and performs the data conversion for the databases. Preferably, the mapping language may be extensible so that it can accommodate the creation of new instructions. This may be accomplished through polymorphism techniques known in object oriented programming (OOP) and also achievable in other non-OOP languages.","In one embodiment, a typical mapping instruction may have the following hierarchical structure. Information may be embedded between the delimiters <MAP> and <\/MAP> which pertain to one attribute\/column of the conversion. In the example, the entity\/attribute\/column (all used synonymously) is called DEPTNAME which is abbreviated for department name in the target system ().",{"@attributes":{"id":"p-0090","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<MAP columnname=\u201cDEPTNAME\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<TOSOURCE>SOURCE:CUSTOMER:CUST:DEPTNAME<\/TOSOURCE>"]},{"entry":[{},"<ACTION>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ACTIONNAME>DEFAULT<\/ACTIONNAME>"]},{"entry":[{},"<ACTIONPARM>NULL<\/ACTIONPARM>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/MAP>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The <TOSOURCE> tag provides information about the location of the data in the incoming source-system data-file. The <ACTION> tag provides information about the nature of the data manipulation such as data translation, transformation, string operations, numerical operations, database lookups, defaulting, copying, database functions\/procedures, etc. The supported actions are extensible as necessary for customized requirements. The support for parameters necessary for performing the stated actions is provided as <ACTIONPARM> tag. The language allows multiple actions within each map instruction. This facilitates iterative data rendering to a form acceptable by the target system ().",{"@attributes":{"id":"p-0092","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<MAP columnname=\u201cCUSTOMERSEQUENCE\u201d>"},{"entry":"\u2002<TOSOURCE> <\/TOSOURCE>"},{"entry":"\u2002<ACTION>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ACTIONNAME>GENERATESEQUENCE<\/ACTIONNAME>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2002<\/ACTION>"},{"entry":"<\/MAP>"},{"entry":"<MAP columnname=\u201cCUSTOMERFIRSTNAME\u201d>"},{"entry":"\u2002<TOSOURCE> <\/TOSOURCE>"},{"entry":"\u2002<ACTION>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ACTIONNAME>STRING:UPCASE <\/ACTIONNAME>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2002<\/ACTION>"},{"entry":"\u2002<ACTION>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ACTIONNAME>STRING:RESIZE<\/ACTIONNAME>"]},{"entry":[{},"<ACTIONPARM>20<\/ACTIONPARM>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2002<\/ACTION>"},{"entry":"<\/MAP>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The above table shows another example map instruction that helps generate a unique sequence number for the attribute CUSTOMERSEQUENCE. The customer's first name will be converted to upper case (as per target system's requirements) and then the name is resized to 20 characters in length. Note the occurrence of multiple actions per mapping instruction in the above example.","The vocabulary of the mapping language may be extensible. If a new requirement may be deemed reusable then it can be incorporated easily into the database conversion engine (). A map instruction () can be added\/deleted without code changes to the database conversion engine (). A set of instructions for the mapping specification () object\/table can be grouped by using the object name as the tags. The entire mapping specification () may be based upon XML specification.","Referring back to , the mapping specification () may also have a tree based structure. The tree-based language may be subsumed and managed as a XML (or XML-derivative) document. The parent node () represents the collection of instructions for the entire mapping specification (). One or more actions can be specified for every field of interest. The invention uses an iterative approach to converting source data (). A number of actions are applied on the incoming source data in succession there be rendering it to meet the requirements of the target data (). The tree structure allows the enhancement of the mapping language set. The database conversion engine () does not impose direct restrictions on the planned enhancements.","Scalability","Preferred embodiments of the invention should provide scalability. Scalability may be achieved by using the conversion scheduler component () to alleviate the data conversion bottleneck to manage multi-processing. The conversion scheduler () may be configurable to concurrently execute a predetermined number of processes. The number of processes that may be run may be a function of the target system's () computing power, memory availability, and the conversion time-line. The more the number of processes, the faster the conversion occurs (up to a resource-defined threshold). The conversion scheduler () persistently manages the conversion process from start to finish while monitoring the health of the concurrently running processes.  further illustrates a scaling and scheduling mechanism () that may be an aspect of one embodiment of the invention.","The data conversion involves voluminous processing of data that may be converted from source () to target system () in a small \u201cwindow\u201d of time to satisfy implementation constraints such as limited system downtime. The scalability may be achieved in two different places. First, a number of conversion instances can be invoked concurrently thereby, exploiting parallelism to improve performance. The number of CPUs and swap memory determines the degree of concurrency. Depending upon the need, the system can be configured to run a particular number of instances or chunks of data stored on a single or multiple source files that contain repetitive blocks of data comprising business objects (). A number of factors for fine-tuning performance, file locations, validation results can be configured for the database conversion engine () through a configuration file, i.e. an XML configuration file. Secondly, the converted data may be uploaded () to a database () employing a mass-update approach that may be run with multiple instances to gain performance. There may be an error checking and reporting feature that tracks the multiple instances of the database conversion engine ().","Embodiments of the invention permit at least two modes of operation\u2014streaming and burst. The streaming mode streams source data when the source system makes it available for conversion. The burst mode allows the system to process the conversion () via predetermined quantities of source data (). The nature of the business function performed by the source () and target systems () may dictate the type of mode employed for conversion.","The scheduler process () utilizes a state machine sequencer () with programmable sequences depending upon the requirements. It scans for the incoming source information () and may initiate the execution of the data conversion process. The degree of concurrency may be decided by number of CPUs, memory and the type of CPUs and may be a decided at the time of implementation and configured into the process. The state machine sequencer () takes the source information through the various conversion processes until it meets the target system's () specifications. Once the conversion processes are initiated, the process tracker () monitors them for completion. The results of the tracking are published through a report for end-user by the report generator module (). The system enforces prevention of duplicative processing of data in the source files (). To achieve greater performance, the system may be constructed to be capable of distributed processing, which utilizes a networked set of machines () to process information.","Validation","Referring to , another embodiment of the invention supports an extensive validation process (). The validation process may be extensible, configurable, and reconcilable in its architectural design. Validation may include up to five or more stages of data and application level validation. Validation may be applied to the basic unit of conversion and hence provides a mechanism to segregate invalid information from entering the target system (). It supports a template generator to generate custom application level validations. A validation report () may be generated. A reconciliation process () may be provided to ensure the accuracy of the conversion process. A reconciliation report () provides statistics on the various units of information that can be checked with the source system. Various embodiments further support an error detection and a guided correction process. Corrected data can be seamlessly\/automatically reprocessed and incorporated into the target system (). For instance, a \u201cconversion validation script\u201d comprises a standard scripts (computer code\/computer executable instructions on a computer readable medium) which may be run to perform key application validations for a given systems (i.e., telecom) such as ensuring no active subscriptions exists for a deactivated account.","The validation process () and the database conversion engine () may use the target schema specification () for verifying target information before uploading () such information to the target database ().","The design of the validation process () permits future additions of validation rules. Application specific validation (including but not limited to address validation and calculation of geocodes, possibly using a third party database) can be incorporated into the framework.","In another embodiment, the validation levels may correspond to the criticality of the information being validated. For example, the customer address may be critical in the case of a billing system. Therefore, a first level of validation may comprise checking for syntax errors in the formatted source data (i.e., XML syntax errors) that highlight noncompliance such as the improper tagging of data in the delimited file. The second level of validation may ensure that critical business information may be supplied by the source system for each basic unit of conversion by checking for missing blocks of information that are required by the target system in order to function. A third level of validation ensures that the pieces of information meet the target schema specifications by checking for issues such as mandatory data within a business object, invalid data lengths\/not null restrictions, font requirements, etc. that might prevent a database load. For example, absence of a customer's credit class code might result in validation failure at this stage. In the event that certain errors are detected, the whole unit of conversion may be put into a separate data bucket for a correction and feed back process. The fourth level of validation may be the application level validation. These are highly application specific in nature. The system may provide a generic template generator for application level validations. The validation framework automatically invokes and reports on validation problems identified by the template. A final level of validation may check the data integrity from viewpoint of business. It checks the uniqueness constraints, referential constraints, etc in this stage. This level of validation may also reference third party databases to verify certain information present in the basic business object such as the customer's address. The fallout from the validation process may be guided through a correction process. Certain problems are fixable by reprocessing of corrected information while some of them are fixable through customized approaches.","Modifications may be made in the various embodiments of the invention without departing from the spirit of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings incorporated in and forming part of the specification illustrate several aspects of the present invention. In the drawings:",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIGS. 4(A\u2013B)"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
