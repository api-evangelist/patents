---
title: System and method for using networked mobile devices in vehicles
abstract: A system and method for using networked mobile devices in a vehicle in a tightly integrated manner is presented. The vehicle has an OBE, a mobile device client, and vehicle components, and the mobile device has a mobile device proxy and applications, such that the mobile device client and the mobile device proxy communicate, enabling dynamic transfer of the applications to the OBE and execution of the applications on the mobile device and the OBE using the plurality of vehicle components at runtime. In one embodiment, the mobile device client and the mobile device proxy authenticate each other. The authentication can be performed using digital certificates. The mobile device client can communicate the vehicle components on the vehicle to the mobile device proxy. The mobile device client and the mobile device proxy can communicate using Bluetooth. The vehicle components can include dashboard displays, speakers, and voice I/O systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08707044&OS=08707044&RS=08707044
owner: TTI Inventions D LLC
number: 08707044
owner_city: Wilmington
owner_country: US
publication_date: 20090811
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention claims the benefit of U.S. provisional patent application 61\/188,564 filed Aug. 11, 2008, the entire contents and disclosure of which are incorporated herein by reference as if fully set forth herein.","The present invention relates generally to wireless networks.","The in-vehicle use of mobile, handheld network devices, e.g., mobile telephones, portable mp3 players, personal digital assistants, etc., has dramatically increased over the past few years. However, it is difficult and even dangerous to use such devices in the car. To interact and control his or her device, the user currently has little choice but to learn a new user interface (UI) system in the car, or resort to using the display and controls on the device, which are often too small and awkward for in-car use and present a serious safety hazard.","In the area of in-vehicle network computing, Ford Sync allows use of voice commands. In some cars, the user can use the car's audio controls to control the media playing of certain portable MP3 players. For example, in Ford Sync, either application programs execute directly on mobile devices or application data is transferred to the vehicle to be used by the vehicle's application programs. Therefore, the user has to learn the vehicle's native UI mechanism.","In the area of general network computing, both Sun's JINI and UPnP allow dynamic discovery of functional capabilities of various components in a given computing environment. In turn, this feature allows a new device that has not been previously known to the computing environment to use the capabilities of the other devices and make its capability available to other devices. In JINI and UPnP, the application interface and\/or driver software is moved from the host network to a new device that connects to the network, and the device runs the received software in order to use the services of the host network. In both UPnP and JINI, the user should still employ the UI controls of the mobile device to use the services of vehicle components, which is inconvenient and dangerous.","As a result, there is a growing need to better support vehicle drivers and passengers to seamlessly and intuitively use networked handheld devices in the car.","A novel method for allowing application services of mobile devices to run on vehicles by way of dynamic capability discovery and application program transfer at runtime is presented. Currently, in-vehicle dashboard screens, speakers, and other components are designed to support in-vehicle applications only. In general, the vehicle is regarded as a closed system that provides a fixed (or static) set of application services and static UI controls. The present invention provides a novel way of \u201copening up\u201d the vehicle's system so that it can allow a wide variety of third-party applications to use its display and other devices on an as-needed basis, by dynamically moving application software code from mobile devices to the vehicle at runtime. Thus, in the inventive system and method, application software of the mobile device is transferred from the device to the vehicle to run on the vehicle.","An inventive system and method for using networked mobile devices in a vehicle is presented. The vehicle has an in-vehicle computer, generally known in the art as an OBE, a mobile device client, and a plurality of vehicle components, and the mobile device has a mobile device proxy and one or more applications, such that the mobile device client and the mobile device proxy communicate, enabling dynamic transfer of the one or more applications to the OBE and execution of the one or more applications on the mobile device and the OBE using the plurality of vehicle components at runtime. The mobile device client authenticates the mobile device proxy and the mobile device proxy authenticates the mobile device client. The authentication can be performed using digital certificates. The mobile device client communicates the vehicle components on the vehicle to the mobile device proxy. The mobile device client and the mobile device proxy can communicate using Internet Protocol (IP) over Bluetooth. The vehicle components can include dashboard displays with or without user interface (UI) mechanisms, speakers, and voice I\/O systems.","The inventive system and method enables a networked mobile device to engage a vehicle, permitting the device's user to interface with and control the audio, display, user interface (UI) and other systems of the vehicle by way of dynamically discovering such systems on the vehicle and moving application code from the mobile device to the vehicle on demand.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 1"],"b":["10","10","10","12","14","16","12"]},"While the OBE  in  is shown as a single device, its functions and interfaces may be implemented in a distributed manner on multiple physical devices. Like a general-purpose computer, the OBE  runs an operating system , such as Linux, that provides a runtime environment for vehicle applications and special software, called drivers, which vehicle applications can use to interact with vehicle IO, audio, and other systems. The concepts of operating systems, drivers, applications, and use of drivers are well understood in the field of the present invention.","As shown in , a special-purpose software, called the Mobile Device Client (MDC) , is installed and executes on the OBE . As the name implies, the MDC  is a client-side application that works with a server-side software of the present invention, called the Mobile Device Proxy (MDP) , to tightly integrate the vehicle's OBE  and the mobile device . The MDC  operates to let the MDP  know about the vehicle's dashboard display , voice I\/O , and other systems  and to move and execute one or more applications from the user's mobile device . In one embodiment, the MDC  is pre-installed on the OBE  of a vehicle when the vehicle is manufactured. However, other methods are also feasible, including a vehicle service station installing the MDC  on the OBE , for example via an USB interface, upon the customer's request subsequent to vehicle manufacture and purchase.","As shown in , the OBE  is capable of communicating with the user's mobile device  via a network connection . Specifically, the OBE  can communicate with the mobile device  via a Bluetooth connection, and the MDC  on the OBE  communicates with the MDP  on the mobile device  using a TCP\/IP connection over Bluetooth. Implementing applications that use TCP\/IP over Bluetooth is well-understood in the field of this invention. Other wireless technologies may also be used to interconnect the OBE  and the mobile device . Other transport layer protocols beyond TCP, such as UDP, may be also used for the MDP  and MDC  to communicate with each other.","In , the user's mobile device  consists of the operating system (OS) , storage device , and a number of wireless communications capabilities . As discussed above, the mobile device  runs a special-purpose application, called the Mobile Device Proxy (MDP) , which works with the MDC  on the OBE  to run the applications from the mobile device  on the OBE  of the vehicle by means of dynamic discovery of the vehicle's capabilities and dynamic transfer of application code from the mobile device  to the vehicle OBE .","The inventive methods of using special-purpose applications, i.e., MDC  and MDP , on the vehicle and mobile device , respectively, to communicate vehicle system information to the mobile device  and move application code from the mobile device  to the vehicle to execute thereon are unique in the field of mobile computing in a vehicle environment. Advantageously, in the present invention, all the applications on the mobile device  can be available to run on the vehicle (assuming that the vehicle provides necessary device drivers that the applications need), while in prior art approaches, the user is limited to only those applications provided by the vehicle. For example, in other approaches, if the user has an application, e.g., APP-A, on the mobile device , but the vehicle does not have a functionally-similar application that can process APP-A's data and\/or provide appropriate drivers for APP-A, the user cannot use APP-A on the vehicle. However, the present invention allows the user to use APP-A on such a vehicle by moving the executable application code and\/or data of APP-A from the mobile device  to the vehicle, and executing the code with the data thereon. Note in this example that APP-A is provided by the mobile device manufacturer. Therefore, when running on the vehicle, APP-A can provide a similar look-and-feel to when it runs on the mobile device , which can dramatically reduce the learning curve of the user for using APP-A on the vehicle.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 2"],"b":["20","10","10"]},"As shown in , the MDC  is implemented as an OSGi Bundle in the preferred embodiment of the present invention. This way, the MDC  can take advantage of the default system services provided by the OSGi Framework to realize its functions, including discovering (Java) application packages and services exported by other OSGi Bundles on the OSGi Framework. For example, one of the standard services available on every OSGi Framework is the Device Access service, which allows other applications to programmatically discover the devices and the corresponding drivers available on the OSGi Framework and bind them to use the discovered devices in their operations. Therefore, the MDC  can use the OSGi Device Access service to keep track of available devices and drivers on the vehicle at runtime. Likewise, the MDC  can also use the OSGi Service Registry, which is another standard service on every OSGi Framework, to keep track of services and application packages exported by other Bundles on the OSGi Framework.","As an OSGi Bundle, the MDC  also has the ability to dynamically install, start, and stop other Bundles at runtime by means of the application programming interfaces (APIs) of OSGi BundleContext and Bundle objects. Specifically, upon receiving an application bundle from the MDP , described below, the MDC  first stores the received Bundle in the file system of the vehicle OBE . To install the received Bundle on the vehicle, the MDC  then uses the installBundle( ) method of the BundleContext object provided by the vehicle's OSGi Framework; it passes the URL to the location of the received Bundle on the file system to installBundle( ). Subsequently, it invokes the start( ) method on the Bundle object that is returned by installBundle( ) to start the newly installed Bundle. Likewise, the MDC  can use the stop( ), update( ), and uninstall( ) methods of the same Bundle object to stop the operation of, update the software of, and uninstall the received Bundle, respectively.","In , the MDP  is shown as an application that runs in the operating system (OS)  of the mobile device . Unlike the MDC , which is an OSGi Bundle (in Java), the MDP  is an native application which is specifically implemented to run in the OS  of the mobile device . As shown in , the MDP  manages a set of OSGi Bundles that can be sent to the vehicle OBE  and can execute there. For each OSGi Bundle, the MDP  keeps track of dependencies the OSGi Bundle may have on other applications. In one embodiment, the dependency includes the names of packages (in Java) the OSGi uses in its operation. It may also include version information for each dependent package. MDP  uses the dependency information to determine if a given OSGi Bundle stored in storage  on the mobile device  can run on the vehicle OBE .","In the embodiment in  and , the MDC  and MDP  use the TCP\/IP over Bluetooth  to communicate with the MDP  on the mobile device . Specifically, the MDC  periodically broadcasts a \u201cHello\u201d message to a well-known port number, to which the MDP  listens for MDC  messages. Upon receiving the message from the MDC , the MDP  responds by sending its own \u201cHello\u201d message to another well-known port number, to which the MDC  listens for MDP  messages. This response message from the MDP  to the MDC  is addressed to the IP address that the MDP  retrieves from the IP header of MDC's broadcast message. The response message also includes a port number, to which the MDP  listens for further communications with the MDC , and an identifier, which uniquely identifies the MDP's mobile device . UDP can be used both for the broadcast messages from the MDC  to the MDP  and for the response message from the MDP  to the MDC . Alternatively, TCP, or other appropriate communication techniques, can be used for communicating these messages between the MDC  and MDP .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 2","FIG. 3"],"b":["20","22","36","20","22","36","20","22","20","22","20","22","20","22","20","22"]},"Operation of the inventive system is now described. The MDC  executes to send a list of vehicle capabilities, in terms of application packages exported by OSGi Bundles on the vehicle, and to receive and run OSGi Bundles from the MDP  on the mobile device . Once the MDC  detects the MDP , as described above, the MDC  attempts to determine if the detected MDP  is legitimate, that is MDC  performs authentication regarding MDP . In one embodiment, the MDP  can digitally sign its \u201cHello\u201d response message to the MDC , which, in turn, validates the signature before proceeding.","If the MDC  successfully authenticates the MDP , MDC  sends to the MDP  the list of vehicle capabilities, such as application packages and services exported by the OSGi Bundles on the vehicle OBE . The list is contained in a message, called \u201cCAP\u201d, addressed to the IP address that the MDC  retrieves from the IP header of the MDP \u201cHello\u201d response message and the port number included in the same \u201cHello\u201d response message. The \u201cCAP\u201d message also includes the port number, to which the MDC  listens for potential file transfer of OSGi Bundles from the MDP , and the location information on the file system of the OBE  where the OSGi Bundles are to be stored.","A File Transfer Protocol, e.g., FTP or secure FTP, can be used to transfer any OSGi Bundle files from the mobile device  to the vehicle, in which the MDC  plays the role of an FTP server and the MDP  the role of an FTP client. Other approaches are also feasible, including a well-known file transfer over Secure Shell (SSH), HTTP, or HTTPS, which uses the Transport Layer Security. UDP transfers can also be supported using Datagram Transport Layer Security.","After sending the \u201cCAP\u201d message, the MDC  waits to receive an acknowledgement message from the MDP  that it has received the \u201cCAP\u201d message. If the acknowledgement is received within a (configurable) period of wait time, the MDC  proceeds to listen for a FTP connection request from the MDP  at the port number included in the \u201cCAP\u201d message. Otherwise, the MDC  sends the \u201cCAP\u201d message again and waits for the acknowledgement. If the MDC  still does not receive the acknowledgement after a (configurable) number of retries, MDC  proceeds to wait for the current mobile device  to disconnect from the vehicle, the process of which is described below.","When the MDC  receives an FTP connection request from the MDP  within a (configurable) period of wait time, MDC  proceeds to execute the FTP protocol with the MDP  to receive application programs, that is, OSGi Bundles, from the mobile device . Subsequent to the successful transfer of the OSGi Bundles, the MDC  stores them on the file system of the vehicle OBE  and installs and starts them on the OSGi Framework of the vehicle. If the FTP transfer fails, the MDC  retries the process of waiting for FTP connection requests from the MDP  and executing the FTP protocol. If the FTP transfer still fails after a (configurable) number of retries, MDC  proceeds to wait for the current mobile device  to disconnect from the vehicle.","It may happen that the MDC  does not receive any OSGi bundles after a (configurable) number of retries to wait for FTP connection requests from the MDP . In such a case, MDC  assumes that the present mobile device  does not have any applications to run on the vehicle and waits for the mobile device  to disconnect from the vehicle. The MDP  can also send the MDC  a message indicating that no applications are available.","MDC  detects the disconnect of the mobile device  by periodically sending \u201cStill There\u201d messages to the same port number used for the \u201cHello\u201d message broadcast. If MDP  does not respond with the corresponding \u201cStill Here\u201d messages within a (configurable) period of time for a (configurable) number of retries, the MDC  decides that the mobile device  has been disconnected from the vehicle. In such a case, the MDC  stops any running OSGi Bundles that have been received from the mobile device  and goes back to waiting for new MDPs.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4","b":["20","22","24","1","20","22","22","1","20","22","1"]},"If MDP  is detected (S=YES), in step S, MDP  is authenticated, as discussed above. If MDP is not authentic or legitimate (S=NO), then processing returns to step S.","If MDP  is legitimate (S=YES), in step S MDC  sends vehicle capabilities to this legitimate MDP . MDC  waits to receive application programs from MDP  in step S. In step S, MDC  checks for acknowledgement of a \u201cCAP\u201d message. If the message is acknowledged (S=YES), MDC  receives and runs the application programs from MDP  in step S. When the programs are run (in S) or when no acknowledgement is received (S=NO), MDC  determines whether MDP  is disconnected in step S. If MDP  is disconnected (S=YES), programs from MDP  are stopped in step S. If MDP is not disconnected (S=NO), MDC  continues to check whether MDP  is disconnected in step S.","Operation of the MDP  on the mobile device , which runs to transfer applications to the MDC  on the vehicle, is as follows. Upon receiving the \u201cHello\u201d message from the MDC , the MDP  validates the signature on the message to authenticate the MDC . If successful, MDP  sends its \u201cHello\u201d response message as described previously.","Subsequently, MDP  waits for the \u201cCAP\u201d message from the MDC . If the message is not received for a (configurable) period of wait time after a (configurable) time of retries, the MDP  goes back to waiting for and processing the \u201cHello\u201d messages. Otherwise, the MDP  sends an acknowledgement for the receipt of the \u201cCAP\u201d message, retrieves the list of application packages and services from the received \u201cCAP\u201d message, and tries to identify OSGi Bundles that can execute on the information, if applicable, of the application packages and services available on the vehicle.","If an OSGi Bundle for an application that can run on the vehicle exists, the MDP  prepares to send the Bundle to the MDC . Such preparation includes configuring and running some associated components of the application on the mobile device . For example, a text messaging application may exist on a mobile phone  whose OSGi Bundle consists of a software component designed to use the vehicle's voice recognition system to allow the user to verbally dictate text messages for a given recipient and a graphical user interface (GUI) component to display text messages being composed on the vehicle's dashboard display. When the user says \u201cSend Message,\u201d yet another component of the text messaging Bundle sends the composed message and the recipient information to the mobile device , e.g., on the IP over Bluetooth connection , which, in turn, sends the message out to the recipient using the message transmission mechanism of the mobile device .","This type of an application requires that some application components run on the mobile device  at the same time as the components execute on the vehicle. In the above example of the described text messaging application, some application components should run on the mobile device  that receive the composed messages from the vehicle and send the messages to recipients. To support this type of an application, the MDP  maintains a configuration file which identifies, for each OSGi Bundle, the corresponding application components and any configuration and initialization data for them. If an OSGi Bundle can execute on the vehicle, the MDP  first configures and runs the corresponding application components on the mobile device  and then transfers the OSGi Bundle to the MDC .","Once all the OSGi Bundles have been transferred to the MDC , the MDP  waits until the mobile device  is disconnected from the vehicle. It does so by listening for and responding to the \u201cStill There\u201d messages from the MDC . When disconnected, the MDP  stops all the application components that have been running in support of the OSGi Bundles that have been transferred to the vehicle and goes back to waiting for the \u201cHello\u201d message from the MDC .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5","b":["22","24","20","10","22","20","20","10","22","10"]},"If MDC  is detected (S=YES), it is authenticated in step S using the procedure described above. If the detected MDC  is legitimate (S=YES), then MDP  waits to receive vehicle capabilities from MDC  in step S. Otherwise, if MDC  is not legitimate (S=NO), MDP  returns to step S and listens to detect another \u201cHello\u201d message.","In step S, MDP  determines whether the vehicle capabilities have been received from the MDC . If the vehicle capabilities have not been received (S=NO), processing returns to step S and MDP  listens for another \u201cHello\u201d message.","If vehicle capabilities have been received (S=YES), MDP  determines whether any application programs match these vehicle capabilities, in step S. If not, processing returns to step S and MDP  listens for another \u201cHello\u201d message.","If there are one or more application programs that match vehicle capabilities (S=YES), then, in step S, MDP  runs any application programs that correspond to those being sent to MDC . In step S, MDP  sends to MDC  any application programs that match vehicle capabilities.","In step S, MDP  determines whether MDC  is disconnected. If MDC  is not disconnected (S=NO), MDP  continues to check whether MDC  is disconnected by repeating step S. If MDP  determines that MDC  is disconnected (S=YES), application programs in MDP  corresponding to those in MDC  are stopped in step S.","Several extensions on the described method are possible. For example, the communication between the MDC  and MDP  can be secured by employing an industry-standard secure transport protocol such as TLS or DTLS as previously mentioned. In addition, the MDC  can communicate with multiple mobile devices  at the same time. This is feasible by keeping track of the IP address of each mobile device  and the associated identifier information in the \u201cHello\u201d response message from the MDP .","To facilitate faster MDP  and MDC  interactions after the initial encounter and download of applications between the vehicle and mobile device, the MDC  may keep a cache of applications on the OBE . The OSGi Framework allows Java applications to reside in the framework without starting, for instance, between vehicle uses. During the next interaction between the MDP  and MDC , such as the next time the driver enters the vehicle, the MDC  will send the MDP , in the \u201cHello\u201d response message, a list of available applications associated with that mobile device  that are already in the OBE . The MDC  can use the MDP's digital certificate  to identify the mobile device  and associate applications with it.","The list of available applications sent to the MDP  can also include information to identify the application version. If the application that the mobile device  wishes to run is already installed on the OBE , but not running, the MDP  need only identify which application the MDC  should start and avoid an unnecessary download. It can do so by sending a \u201cSTART\u201d message to the MDC  identifying a list of applications to start after running any corresponding application components on the mobile device  as previously described. Receipt of the \u201cSTART\u201d message will cancel the MDC  wait for an FTP connection request from the MDP .","If the MDP  determines that the MDC's application is out of date based on the application version, MDP  will connect via FTP and transfer the new application with instructions to perform an OSGi Update of the application's Bundle. In the interactions above and previously described, each application is signed, which helps the MDC  to establish authenticity and determine if any alterations of the application have occurred during the download process.","Further, the described interactions between the MDC  and MDP  can occur anytime the mobile device  is within the radio range of the vehicle whether the vehicle has not started, is starting up, or has started. In the preferred embodiment of the invention, the vehicle has a wireless key device, and the MDC  begins to listen for MDPs and responds only after the vehicle has successfully authenticated a user who has the wireless key device. This can be achieved if the vehicle provides a service on the OSGi Framework that publishes the vehicle lock and unlock status to other applications on the same OSGi Framework, and the MDC  subscribes to the service.","Various aspects of the present disclosure may be embodied as a program, software, or computer instructions embodied in a computer or machine usable or readable medium, which causes the computer or machine to perform the steps of the method when executed on the computer, processor, and\/or machine. A program storage device readable by a machine, tangibly embodying a program of instructions executable by the machine to perform various functionalities and methods described in the present disclosure is also provided.","The system and method of the present disclosure may be implemented and run on a general-purpose computer or special-purpose computer system. The computer system may be any type of known or will be known systems and may typically include a processor, memory device, a storage device, input\/output devices, internal buses, and\/or a communications interface for communicating with other computer systems in conjunction with communication hardware and software, etc.","The terms \u201ccomputer system\u201d and \u201ccomputer network\u201d as may be used in the present application may include a variety of combinations of fixed and\/or portable computer hardware, software, peripherals, and storage devices. The computer system may include a plurality of individual components that are networked or otherwise linked to perform collaboratively, or may include one or more stand-alone components. The hardware and software components of the computer system of the present application may include and may be included within fixed and portable devices such as desktop, laptop, and server. A module may be a component of a device, software, program, or system that implements some \u201cfunctionality\u201d, which can be embodied as software, hardware, firmware, electronic circuitry, or etc.","The embodiments described above are illustrative examples and it should not be construed that the present invention is limited to these particular embodiments. Thus, various changes and modifications may be effected by one skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention is further described in the detailed description that follows, by reference to the noted drawings by way of non-limiting illustrative embodiments of the invention, in which like reference numerals represent similar parts throughout the drawings. As should be understood, however, the invention is not limited to the precise arrangements and instrumentalities shown. In the drawings:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
