---
title: Systems and methods for providing forward mapping with visibility for and resolution of accumulated samples
abstract: Forward mapping is provided, which accumulates and resolves over all samples forward mapped to each pixel bin. During accumulation and resolution of each of the samples, since a point sample from a forefront object and a point sample from an occluded object may be received by the same bin, wherein only the former should be accumulated and resolved according to the accumulation and resolution process, a Z-range, or Z-interval, is assigned to each sample instead of the conventional Z-value. The Z-range is a function of the Z-value. Analysis of the overlapping of these Z-ranges then determines which samples are to be accumulated and resolved together according to the accumulation and resolution process, and which are not.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07120311&OS=07120311&RS=07120311
owner: Microsoft Corporation
number: 07120311
owner_city: Redmond
owner_country: US
publication_date: 20020628
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention is directed to systems and methods for rendering images at a very high image quality. More particularly, the present invention relates to systems and methods for providing forward mapping with accumulation, resolution and visibility.","Conventionally, as illustrated in , complex three dimensional (3-D) objects, or portions thereof, can be represented by collections of adjacent triangles (\u201ca mesh\u201d) representing the approximate geometry of the 3-D object, or by a geometry map, or surface, in two dimensional (2-D) surface space. One or more texture maps can be mapped to the surface to create a textured surface according to a texture mapping process. In a conventional graphics system, the surface geometry sampling happens before texture sampling. In this regard, signals textured over a surface can be very general, and can specify any sort of intermediate result that can be input to a shader procedure to produce a final color associated with a point sample, and thus need not specify a function of color or grey scale values.","After texture sampling, additional transformations can optionally be applied to the textured surface prior to rendering the image with picture elements (pixels) of a display device. Images in computer graphics are represented as a 2-D array of discrete values (grey scale) or as three 2-D arrays of discrete values (color). Using a standard (x, y, z) rectangular coordinate system, a surface can be specified as a mesh (e.g., triangle mesh) with an (x, y, z) coordinate per mesh vertex, or as a geometry map in which the (x, y, z) coordinates are specified as a rectilinear image over a 2D (u, v) coordinate system, called the surface parameterization domain. Texture map(s) can also be specified with the (u, v) coordinate system.","Point samples in the surface parametrization domain, where signals have been attached to the surface, including its geometry, can be generated from textured meshes or geometry maps. These samples can be transformed and shaded using a variety of computations. At the end of this transformation and shading processing, a point sample includes (a) positional information, i.e., an image address indicating where in the image plane the point maps to and (b) textured color, or grey scale, information that indicates the color of the sample at the position indicated by the positional information. Other data, such as depth information of the point sample to allow hidden surface elimination, can also be included. The transformed, textured surface is placed in a frame buffer prior to being rendered by a display in 2-D pixel image space (x, y). At this point, in the case of a black and white display device, each (x, y) pixel location in 2-D image space is assigned a grey value in accordance with some function of the surface in the frame buffer. In the case of a typical color display device, each (x, y) pixel location in 2-D image space is assigned red, green and blue (RGB) values. It is noted that a variety of color formats other than RGB exist as well.","In order to render the surface on the display device itself, conventionally, the textured surface is sampled at positions that reflect the centers of the pixels of the device on which the image is to be displayed. Conventionally, this sampling is performed by evaluating a function of the transformed, textured surface, at points that correspond to the center of each pixel, by mapping the centers of the pixels back into texture space to determine the point sample that corresponds to the pixel center.","In particular, the current rasterization architecture raster scans a triangle of the mesh to find the pixel centers it covers, and then maps each covered pixel center (x, y) back into texture space to get a texture location (u, v) that maps to each covered pixel center (x, y) along with some representation of the neighborhood of the (x, y) pixel center, e.g., by mapping x and y image tangent vectors back into texture space to get two vectors Vx and Vy. Then, for each pixel center covered by the triangle, the (u, v) point is used to define the filter center and Vx and Vy are used to define the filter shape to reconstruct a texture value for the pixel center.","Thus, the current rasterization architecture only samples at pixel centers, which is not an effective way to antialias images in all cases. For instance, in the current architecture, if the mesh is sub-divided into a greater number of smaller triangles, which is analogous to source sampling at a higher rate, at some point, the exact same image is nonetheless produced. Without increasing the image size, using smaller triangles fails to achieve antialiasing because most of these small triangles do not cover a pixel center and, as a result, are totally ignored by the current rasterization architecture. The current architecture works reasonably well when the texture map contains all the frequency information, because the texture can be represented as a pre-computed MIP-Map; however, true anisotropic filtering is very costly for the present architecture to achieve. If the frequency information is stored as a per-vertex signal over the geometry, or is due to boundaries between separate meshes, i.e., if the frequency information is not represented as a pre-filtered texture map, then the only way to antialias is to increase image resolution, otherwise known as supersampling.","It would thus be desirable to accumulate and filter over all point samples that map to bin(s), such that the more point samples a bin receives, the better the antialiasing is with respect to that bin. It would also be desirable to provide a mechanism to control the number of samples received by the bin(s), to provide a controllable level of antialiasing in accordance with application tradeoffs and frequency of source content. Thus, there is a need for an improved graphics architecture and techniques that overcome the limitations of the conventional graphics architecture.","Forward mapping, or rendering algorithms that sample content and then map samples onto a display surface, have become more appealing recently. Forward mapping directly maps surface data onto the image plane. For each surface element, the renderer maps the point onto the image plane. Thus, once the destination image has been selected, the process transitions through each sample of the source image in order, e.g., scan-line order, an order determined by tiling, an order that addresses interleaving (swizzling), etc., and determines its position in the destination image.","Example applications include image based rendering (IBR), volume rendering and rendering of extremely complex scenes. For instance, sampling at the source rather than the destination of an imaging process is a standard technique in video applications. In these methods, source image samples are mapped to the destination to reconstruct and resample an image at the display sample rate. If separable filters are employed, the process can be decomposed into cascaded one dimensional (1-D) interpolation and filtering. Typical practice in computer graphics as described above, whether in polygon rasterizers or ray tracers, has been the opposite\u2014to map destination samples backward into texture source space.","It is clear, however, that dealing with problems in maintaining image quality with forward mapping approaches requires (1) care in adjusting the source sampling rate to adequately capture detail and (2) care in reconstructing and resampling the destination signal to eliminate aliasing. While both points remain a problem for present forward mapping approaches, the second consideration is particularly a weak point and thus a forward mapping approach that adequately addresses both problems is currently desired.","Thus, recent publications have described methods that map samples forward from source to destination. Such forward mapping approaches have several advantages over the traditional architecture, which first maps display samples back to the texture domain to reconstruct the destination signal. Forward mapping (1) avoids unnecessary rasterization and interpolation over complicated geometric primitives like triangles, (2) better exploits coherence in the source signal, since it can be visited in optimal order instead of one that depends on how the textured geometry projects to the texture domain and (3) treats antialiasing of geometry and texture uniformly, avoiding redundant texture filtering that occurs when supersampling to antialias the geometry. Forward mapping, however, can result in holes in an image that undergoes transformation, e.g., image warping, perspective transformation, etc., because some pixels in the destination image are not \u201cfilled in\u201d by any locations from the source image, and are effectively left blank by the mapping. See, for illustration, . Generally speaking, the severity of space left empty by such a forward mapping process can increase with the complexity or severity of change introduced by a transformation. Moreover, when there are multiple layers of objects in the z-plane of the image space, some of which should occlude others, a hole in a first object at the forefront of the image may reveal a second object through the hole.","Current forward mapping approaches employ complex schemes to avoid the above-described undersampling that leaves gaps, or holes, between mapped samples where the source signal is magnified, but such complex approaches are presently inadequate for a variety of reasons. Attempts to employ source-based sampling for 3-D surface rendering have been made, and research papers have proposed some source-based sampling schemes, but these attempts and schemes have not achieved any commercial success. For volume rendering, extremely simple forward mapping algorithms can be used, but these algorithms disadvantageously have large destination footprints.","Specifically, Grossman and Dally propose using a minimal sampling rate in the source space and then filling in gaps with a hierarchical averaging scheme. The QSplat system stores surface samples in a hierarchical data structure and avoids holes by rasterizing projected spherical primitives that bound the surface. The \u201csurfels\u201d algorithm uses a hole filling routine similar to Grossman and Dally, but exploits area primitive rasterization, or \u201cvisibility splatting,\u201d to detect holes.","In brief, currently proposed forward mapping schemes propose to handle this \u201chole\u201d problem either (1) by rasterizing big geometric \u201csplats\u201d (of variable size) instead of points so that z-buffer values are rasterized for the entire big splat and nothing shows throw, or (2) by performing the image interpolation in places where no splat was mapped using a z-pyramid that prevents occluded objects from showing through an occluding object. These methods, however, are very complex and introduce computational overhead in terms of both computing time and other resources like memory bandwidth. For example, the first technique moves away from the elegant idea of, and thus the information embodied by, point samples and ends up rasterizing area elements, in essence returning to the conventional architecture described above. Also, these techniques essentially use a z-buffer over a pixel grid to resolve hidden surfaces, and so only take account of one splat, i.e., the frontmost splat, per pixel, and thus potentially eliminate content that should be reflected by the end result.","Additionally, designing hardware specifically for IBR requires careful attention to the order and timing of memory access. In this regard, one problem with present techniques is that they do not target applications that combine conventional graphics with IBR and video. Memory access remains a central problem, and an architecture tuned to IBR alone and ignoring 3-D graphics is insufficient. The geometric database for a typical real-time rendering application is such that surface elements project to areas smaller than the spacing between display samples. The futility of rasterizing such tiny elements has led to the need for new, forward-mapping rendering architectures, some recent proposals for which, as mentioned above, devote considerable effort to eliminating gaps between mapped samples.","Hence, several areas for improvement remain in presently proposed architectures. For instance, a question that needs to be determined in connection with source sampling is how much source sampling is enough. To answer this question, some source-frequency-based sampling criteria must be utilized. Some approaches assume a sampling rate in accordance with the resolution of the display device. A drawback of such an approach is that to sample content at the resolution of the display device inherently assumes that a single sampling rate is appropriate for all portions of the image. However, different parts of an image may have different frequencies. For example, significant change in pixel intensity occurs at the edge of an object or texture, e.g., at the edges of the stripes of a zebra, and thus exhibits high frequencies. In contrast, over a smooth surface of an object with uniform color, there is little change and thus the region can be represented with fewer samples. Thus, in order to capture an appropriate level of detail in the image, it would be desirable to sample one portion of the image at one frequency, and another portion of the image at a different frequency, and so on, for different regions of the surface being sampled.","Moreover, another question that needs to be determined is how to ensure that sufficient coverage is achieved by the source sampling in the destination to avoid the complicated hole-filling work of previous forward mapping approaches. To answer this question, some geometric-coverage criteria must also be utilized. Grossman and Dally describe a criterion that guarantees coverage given a uniform, rectangular destination sampling lattice, whereby the length of the longest side of an (imaginary) triangle mesh through the mapped source samples must not exceed the distance between destination samples. Based on this criterion, it is further observed by Grossman and Dally that improved efficiency results from a hexagonal source sampling, forming equilateral triangles which are less likely to have unbalanced triangle edge lengths after mapping. Such a source sampling is typically not convenient to obtain, however, requiring special-purpose image resampling. Additionally, evaluating this metric at numerous source samples is impractical.","Another question is how to sufficiently antialias in such a system. In low-cost, real-time systems, antialiasing is achieved by standard oversampling followed by filtering and decimation. Mitchell, for example, uses a non-linear process to reconstruct images from irregularly scattered samples for ray tracing.","A different antialiasing approach that has been used in both forward and traditional inverse-mapped graphics is signal pre-filtering, a technique that resamples the source signal at various levels of frequency content as a preprocessing step. Unfortunately, for 3-D graphics and even for perspectively transformed 2-D graphics, effective pre-filtering is difficult. The standard MIP-Map pyramid approach constructs a 1-D sequence of increasingly decimated signal versions, but the decimation is isotropic and thus blurs too much, or alternatively, \u201cleaks\u201d aliasing, if one direction in the source signal is minified more than another. This is a common effect of projections of 3-D geometry near silhouettes and foreshortened 2-D perspective transformations. As a result, inverse-mapping 3-D graphics hardware is moving toward anisotropic filtering of greater sophistication and extent of anisotropy handled, but at the expense of computational complexity. Moreover, aliasing problems due to \u201cminification\u201d, where high frequency source content is compressed into a small region in the destination, has always been a problem for present techniques and thus there is a need for a technique that addresses the minification case in a superior manner. Present forward-mapping approaches, e.g., the technique provided Grossman and Dally, thus far have either ignored minification aliasing, or have used MIP-Map pyramids that fail to address the need for anisotropic filtering.","Additionally, in order to make best use of available hardware, many existing forward mapping schemes have been shoehorned into a conventional polygon rendering pipeline. However, to fully realize its benefits, forward mapping merits a new architecture. While specialized IBR processor have been proposed, there is a clear need in the art for architectures that are more programmable.","In brief, while present rasterization architectures can effectively antialias signals represented as texture maps, it is due to such architectures' use of expensive backward mapping and on-the-fly trilinear and anisotropic filtering. Signals not represented as texture maps can only be antialiased by supersampling.","It would thus be desirable to improve upon present rasterization architectures that sample only at pixel centers and presently proposed forward mapping architectures by providing a process that resolves over all samples received by bin(s), whereby effective antialiasing is achieved by generating more samples at the source, without adding any more bin(s). It would be further desirable to provide a process that filters over all point samples that lie in a bin, no matter how many are present. It would be still further desirable to provide a system wherein when there are multiple layers of objects in the z-plane of the image space, some of which should occlude others, a hole in a first object at the forefront of the image does not reveal a second object through the hole, i.e., it would be desirable to provide a solution that adequately handles occlusion of multiple-layered objects by preventing occluded point samples from being resolved according to the resolution and filtering process.","In view of the aforementioned drawbacks, and others, there is a need for a system that overcomes the limitations of the prior art.","In view of the foregoing, the present invention provides systems and methods for forward mapping, which accumulate and resolve over all samples forward mapped to each pixel bin. The invention uses a pixel, or sub-pixel, binning approach that accumulates and resolves over all samples, and performs particularly well compared to prior architectures in areas that have higher frequency content, solving the minification antialiasing problem and producing a high quality result. A filter determines the value(s) to assign to each pixel based upon accumulation and resolution, e.g., taking the mean, taking the median, taking the mode, taking the minimum, taking the maximum, applying a least squares fit or applying some other function, of all of the sample points that fall within the pixel bin(s), rather than assigning a value by selecting only the point sample that corresponds to the center of the pixel. During accumulation and resolution of each of the samples, since a point sample from a forefront object and a point sample from an occluded object may be received by the same bin, wherein only the former should be accumulated and resolved according to the accumulation and resolution process, a Z-range, or Z-interval, is assigned to each sample instead of the conventional Z-value. The Z-range is a function of the Z-value. Analysis of the overlapping of these Z-ranges then determines which samples are to be accumulated and resolved together according to the accumulation and resolution process, and which are not.","The invention thus eliminates gaps or holes left by conventional forward-mapping techniques more simply by oversampling the source(s), and generating interpolated points at a higher rate than the original source signal(s) to adequately cover the destination bins, while also addressing Z-buffer visibility in the destination bins in an efficacious manner. The invention may be applied to a variety of image processing applications having forward mapping, and wherein accumulation and resolution of forward mapped point samples can be applied, ranging from 3-D graphics applications to applications wherein images recorded in a recording\/storage environment are mapped to the arbitrary requirements of a display environment.","Other features and embodiments of the present invention are described below.","Overview","The invention thus provides methods and systems for providing forward mapping with resolution and visibility. In accordance with the invention, the surface, e.g., the textured geometry, to be rendered is sampled, or oversampled, at a variable rate that reflects variations in frequency among different regions, taking into account any transformation that will be applied to the surface prior to rendering and the view parameters of the rendering device, thus ensuring that each bin of rendering process includes at least a predetermined number of sample, e.g., at least one sample per bin. High frequency regions of the source, i.e., those regions having a finer level of detail, are sampled at a higher rate than low frequency regions of the source. In one embodiment, a tiling approach to division of the source(s) is proposed. A geometry map can be used to correlate texture samples with points on the surface. The methods of the invention can use a geometry map, but the methods also apply to triangle mesh geometry as well. In accordance with the invention, the source sampler\/mapper is tailored to the kind of representation utilized while ensuring a sufficient number of point samples is generated; the back end of the rasterization architecture that accumulates and resolves the point samples works independently of how the geometry is represented. Once the point samples are generated, the accumulation and resolution proceeds irrespective of the original representation of the geometry. The resolution process may be any sort of computation based upon all of the accumulated samples, e.g., taking the mean, taking the median, taking the mode, taking the minimum, taking the maximum or applying some other function, to select a single color as a representation. The computation could also be applied to a model that includes spatial variation of color or depth over the bin, wherein a least squares fit of some representation of the samples is applied.","The surface may be transformed, e.g., rotated, translated, magnified, minified (zoomed out), etc., by applying a transformation to the coordinates of each sample point, e.g., via a transformation matrix, whereby the transformation is carried out using matrix multiplication to apply the transformation to the coordinates of the sample points. For instance, a perspective transformation uses a 4\u00d74 matrix transformation followed by division by the w coordinate.","One or more textures may be applied to a geometry. The texture, like the geometry, has varying frequency content, and thus introduces further input to the variable rate sampling. A geometry map can be used to correlate texture samples with points on the surface. A geometric mesh also provides this correlation, by explicitly denoting how each triangle on the mesh maps to texture space. This can be done, for instance, by tagging each triangle vertex with (u,v) coordinates and assuming linear interpolation of these coordinates within the triangle.","The transformed sample points are assigned to sample squares, or some other regional division of the rendering device, where each sample square corresponds to a pixel on the device on which the image is to be rendered. In one embodiment, the (x,y) position of the sample on the image is quantized to find its corresponding bin. A filter determines the setting of a pixel based on the sample points that fall within the pixel's corresponding sample square based upon an accumulation and resolution process. During accumulation and resolution of each of the samples, since a point sample from a forefront object and a point sample from an occluded object may be received by the same bin, wherein only the former should be accumulated and resolved according to the accumulation and resolution process, a Z-range, or Z-interval, is assigned to each sample instead of the conventional Z-value. The Z-range is a function of the Z-value. Analysis of the overlapping of these Z-ranges then determines which samples are to be accumulated and resolved together according to the accumulation and resolution process, and which are not. Each sample square comprises \u201cbins,\u201d with each bin occupying a delimited portion of the sample square, and the filter determines the settings of the pixels based on accumulation and resolution of the sample points in the bin(s). The sampling rates are variably set to ensure that each bin receives at least a predetermined number of sample points.","The invention thus eliminates gaps or holes left by conventional forward-mapping techniques more simply by oversampling the source(s), and generating interpolated points at a higher rate than the original source signal(s) to adequately cover the destination bins. The invention further uses a pixel, or sub-pixel, binning approach that accumulates and resolves over samples in the areas that have higher frequency content to solve the minification antialiasing problem and produce a high quality result. Anisotropic filtering is handled simply with the forward mapping approach of the invention by filtering over a greater number of samples that naturally accumulate after the forward map (e.g., in foreshortened regions such as near silhouettes of curved surfaces).","Contributions of the invention include, but are not limited to, a simple, brute-force oversampling approach to forward-mapping, which can be implemented in hardware, and which easily handles anisotropic projections of the source signal and produces higher-quality results than previous approaches. Mapped samples are accumulated into a set of destination bins, using a variable sampling rate that ensures that each destination bin receives at least one sample. The samples in each bin are accumulated and normalized. Output samples are then generated with a filtering process, e.g., Mitchell's cascaded resampling filter can be used if the surface was supersampled according to the variable sampling of the invention. The techniques of Grossman and Dally are extended by the invention to estimate the oversampling necessary to guarantee coverage, using image tiles to make the approach practical. The current implementation may optionally handle the case of occlusion, and allows arbitrary mappings, including perspective projection and projection of texture-mapped 3-D geometry within a single layer.","Additionally, the invention may be applied to a variety of image processing applications wherein variable rate source sampling, and accumulation and resolution of forward mapped point samples can be applied, ranging from 3-D graphics applications to applications wherein images recorded in a recording\/storage environment are mapped to the arbitrary requirements of a display environment, e.g., when an image recorded on a CCD is mapped to an arbitrary quadrilateral of an LCD.","Exemplary Networked and Distributed Environments","One of ordinary skill in the art can appreciate that a computer or other client or server device can be deployed as part of a computer network, or in a distributed computing environment. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes, which may be used in connection with a forward mapping process. The present invention may apply to an environment with server computers and client computers deployed in a network environment or distributed computing environment, having remote or local storage. The present invention may also be applied to standalone computing devices, having programming language functionality, interpretation and execution capabilities for generating, receiving and transmitting information in connection with remote or local forward mapping services.","Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information, cache storage, and disk storage for files. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may implicate a forward mapping process that may utilize the techniques of the present invention.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 2A","FIG. 2A"],"b":["10","10","110","110","110","14","110","10","110","110","110"],"i":["a","b","a","b","c","a","b","a","b","c"]},"In a distributed computing architecture, computers, which may have traditionally been used solely as clients, communicate directly among themselves and can act as both clients and servers, assuming whatever role is most efficient for the network. This reduces the load on servers and allows all of the clients to access resources available on other clients, thereby increasing the capability and efficiency of the entire network. Forward mapping services and interfaces in accordance with the present invention may thus be distributed among clients and servers, acting in a way that is efficient for the entire network.","Distributed computing can help businesses deliver services and capabilities more efficiently across diverse geographic boundaries. Moreover, distributed computing can move data closer to the point where data is consumed acting as a network caching mechanism. Distributed computing also allows computing networks to dynamically work together using intelligent agents. Agents reside on peer computers and communicate various kinds of information back and forth. Agents may also initiate tasks on behalf of other peer systems. For instance, intelligent agents can be used to prioritize tasks on a network, change traffic flow, search for files locally or determine anomalous behavior such as a virus and stop it before it affects the network. All sorts of other services may be contemplated as well. Since graphical object(s) or other color data may in practice be physically located in one or more locations, the ability to distribute forward mapping services and interfaces is of great utility in such a system.","It can also be appreciated that an object, such as , may be hosted on another computing device , , etc. or , , etc. Thus, although the physical environment depicted may show the connected devices as computers, such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs, televisions, MP3 players, etc., software objects such as interfaces, COM objects and the like.","There are a variety of systems, components, and network configurations that support distributed computing environments. For example, computing systems may be connected together by wireline or wireless systems, by local networks or widely distributed networks. Currently, many of the networks are coupled to the Internet, which provides the infrastructure for widely distributed computing and encompasses many different networks.","In home networking environments, there are at least four disparate network transport media that may each support a unique protocol, such as Power line, data (both wireless and wired), voice, e.g., telephone, and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband (e.g., either DSL or Cable modem) and are accessible within the home using either wireless, e.g., Home Radio Frequency (HomeRF) or 802.11b, or wired, e.g., Home Phoneline Networking Appliance (PNA), Cat , even power line, connectivity. Voice traffic may enter the home either as wired, e.g., Cat , or wireless, e.g., cell phones, and may be distributed within the home using Cat  wiring. Entertainment media, or other graphical data, may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE  and digital video interface (DVI) are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short, a variety of disparate sources exist for the storage and transmission of data, and consequently, moving forward, computing devices will require ways of sharing data, such as data accessed or utilized incident to forward mapping image data or other color or graphical data in accordance with the present invention.","Moreover, color and grey scale are effective means to represent a variety of physical or other phenomena, and thus whether the data be magnetic resonance imaging data, ultrasound data, graphics equalizing data, etc., color is often an appropriate way to present the data to humans for fast perceptual analysis. Accordingly, the source for color or other image data as contemplated herein is limitless, and may undergo a series of transformations, prior to being considered \u201cimage\u201d or \u201ccolor\u201d data.","The Internet commonly refers to the collection of networks and gateways that utilize the Transport Control Protocol\/Interface Program (TCP\/IP) suite of protocols, which are well-known in the art of computer networking. The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide-spread information sharing, remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services, essentially without restriction.","Thus, the network infrastructure enables a host of network topologies such as client\/server, peer-to-peer, or hybrid architectures. The \u201cclient\u201d is a member of a class or group that uses the services of another class or group to which it is not related. Thus, in computing, a client is a process, i.e., roughly a set of instructions or tasks, that requests a service provided by another program. The client process utilizes the requested service without having to \u201cknow\u201d any working details about the other program or the service itself. In a client\/server architecture, particularly a networked system, a client is usually a computer that accesses shared network resources provided by another computer, e.g., a server. In the example of , computers , , etc. can be thought of as clients and computer , , etc. can be thought of as the server where server , , etc. maintains the data that is then replicated in the client computers , , etc.","A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system, and the server process may be active in a second computer system, communicating with one another over a communications medium, thus providing distributed functionality and allowing multiple clients to take advantage of the information-gathering capabilities of the server.","Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example, Hypertext-Transfer Protocol (HTTP) is a common protocol that is used in conjunction with the World Wide Web (WWW). Typically, a computer network address such as a Universal Resource Locator (URL) or an Internet Protocol (IP) address is used to identify the server or client computers to each other. The network address can be referred to as a URL address. For example, communication can be provided over a communications medium. In particular, the client and server may be coupled to one another via TCP\/IP connections for high-capacity communication.","Thus,  illustrates an exemplary networked or distributed environment, with a server in communication with client computers via a network\/bus, in which the present invention may be employed. In more detail, a number of servers , , etc., are interconnected via a communications network\/bus , which may be a LAN, WAN, intranet, the Internet, etc., with a number of client or remote computing devices , , , , , etc., such as a portable computer, handheld computer, thin client, networked appliance, or other device, such as a video cassette recorder (VCR), television (TV), oven, light, heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process or display graphical object(s) or any other color or image data.","In a network environment in which the communications network\/bus  is the Internet, for example, the servers , , etc. can be Web servers with which the clients , , , , , etc. communicate via any of a number of known protocols such as HTTP. Servers , , etc. may also serve as clients , , , , , etc., as may be characteristic of a distributed computing environment. Communications may be wired or wireless, where appropriate. Client devices , , , , , etc. may or may not communicate via communications network\/bus , and may have independent communications associated therewith. For example, in the case of a TV or VCR, there may or may not be a networked aspect to the control thereof. Each client computer , , , , , etc. and server computer , , etc. may be equipped with various application program modules or objects  and with connections or access to various types of storage elements or objects, across which files may be stored or to which portion(s) of files or images may be downloaded or migrated. Any computer , , , , etc. may be responsible for the maintenance and updating of a database  or other storage element in accordance with the present invention, such as a database or memory  for storing color or image object(s) or data or intermediate color or image object(s) or data processed according to the invention. Thus, the present invention can be utilized in a computer network environment having client computers , , etc. that can access and interact with a computer network\/bus  and server computers , , etc. that may interact with client computers , , etc. and other like devices, and databases .","Exemplary Computing Device",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 2B"},"Although not required, the invention can be implemented via an operating system, for use by a developer of services for a device or object, and\/or included within application software that operates in connection with the forward mapping techniques of the invention. Software may be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, appliances, lights, environmental control elements, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network\/bus or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices, and client nodes may in turn behave as server nodes.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 2B","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, Random Access Memory (RAM), Read Only Memory (ROM), Electrically Erasable Programmable Read Only Memory (EEPROM), flash memory or other memory technology, Compact Disk Read Only Memory (CDROM), digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through an non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly erred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked or distributed environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks\/buses. Such networking environments are commonplace in homes, offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Exemplary Distributed Computing Frameworks or Architectures","Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web-enabled interface for applications and computing devices, making computing activities increasingly Web browser or network-oriented.","For example, MICROSOFT\u00ae's .NET platform includes servers, building-block services, such as Web-based data storage and downloadable device software. Generally speaking, the .NET platform provides (1) the ability to make the entire range of computing devices work together and to have user information automatically updated and synchronized on all of them, (2) increased interactive capability for Web sites, enabled by greater use of XML rather than HTML, (3) online services that feature customized access and delivery of products and services to the user from a central starting point for the management of various applications, such as e-mail, for example, or software, such as Office .NET, (4) centralized data storage, which will increase efficiency and ease of access to information, as well as synchronization of information among users and devices, (5) the ability to integrate various communications media, such as e-mail, faxes, and telephones, (6) for developers, the ability to create reusable modules, thereby increasing productivity and reducing the number of programming errors and (7) many other cross-platform integration features as well.","While exemplary embodiments herein are described in connection with software residing on a computing device, one or more portions of the invention may also be implemented via an operating system, application programming interface (API) or a \u201cmiddle man\u201d object between any of a coprocessor, a display device and requesting object, such that forward mapping services may be performed by, supported in or accessed via all of .NET's languages and services, and in other distributed computing frameworks as well.","Image Rendering Using Variable Rate Source Sampling","As mentioned in the background, one problem associated with forward mapping is eliminating gaps or holes in the destination due to insufficient, or under-sampling. Many of the prior art techniques discussed attempt to \u201cfill in\u201d these holes with complicated interpolation or other algorithms, which not only adds much overhead to the process, but also is not always all that effective. Rather than provide a similar stopgap solution, the invention instead recognizes that the problem can be solved by providing enough samples at the front end such that at least one sample reaches each bin of the sample squares associated with the pixels, taking into account any transformation that will take place to the textured surface and the parameters of the display device. A naive solution would be to oversample at a rate sufficient for the worst case magnification over the entire surface mapping; however, this can grossly oversample in places that are not magnified as much as the worst case scenario. In this regard, the invention recognizes that a given piece of content may have different frequency content in different regions, and thus that the rate of sampling should be variable throughout the content to reflect these differing frequencies. The present invention thus provides a technique for rendering visual content, whereby the sampling rate is variable and based on the frequency of divided regions of the textured, transformed surface, taking into account the parameters for the destination and any transformation of the content that takes place incident thereto, and ensuring that at least one sample is mapped to each bin of the destination. The invention thus ensures that there are no holes in the destination image. Another aspect of the invention, described in more detail below, is the use of filtering over all samples that map to a given bin, rather than picking a single representative corresponding to the center of the pixel, to effectively reduce aliasing.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIGS. 3A and 3B","FIG. 3A"],"b":["200","204","202","206","208","208"]},"The surface geometry  and texture(s)  are combined to produce a representation of a textured surface  in (u, v) space . In this regard, textured surface  is represented as a set of 2-D sample points having sufficient density in relation to the frequency of the content, any subsequent transformation that takes place and the parameters for the display device to ensure that there is no under-sampling. It should be noted that, due to the variable rate nature of the sampling process  that produces these sample points, the density is usually non-uniform throughout the surface. For instance, as general rules, the density of sample points tends to be higher in portions of the textured surface that were generated either from high-frequency portions of the textured surface, or from places which, relatively speaking, are magnified or otherwise require additional samples as a result of a transformation or an associated parameter.","Transformation is then applied to textured surface . A transformation (e.g., rotation, translation, magnification, minification, etc.) is typically represented as a matrix, and transformation can be achieved through matrix multiplication followed by a perspective divide. In many conventional processes, transformations are performed on an underlying geometry rather than on a sampled image\u2014i.e., by applying the transformation, and then sampling transformed, textured content later in the process. A shading algorithm may also be applied which takes a geometry and textures and produces a color associated with each point sample generated. A shading algorithm can be thought of as a kind of transformation . In one embodiment of the invention, process  advantageously differs from convention by sampling prior to transformation, however, transformation , and the parameters of the rendering device, are nonetheless taken into account since these factors bear on the level of detail required in the destination. Thus the variable rate sampling process  ensures that bins  of the sample squares  at the rendering device each receive at least a predetermined number of samples. In one embodiment, the minimum sampling rate that can be selected that nonetheless ensures that each bin will have at least one sample is utilized by sampling process .","Applying transformation and\/or shading algorithm to textured surface  produces a transformed, textured surface . As before, surface  is represented by sample points, although the sample points are in different locations in space from where they had been prior to transformation. The sample points of surface  are mapped into a frame buffer or region buffer  of a rendering device  composed of sample squares . Each sample square  corresponds to a pixel  on device  on which the image represented by surface  is to be displayed\u2014that is, each sample square  generally represents an area equal to the size of a pixel . Typically, there is one bin  associated with each sample square, although as the example of  illustrates, the process of the invention can be carried out wherein there are more than one bins per sample square. In such a case, all of samples in the bins, e.g., (), (), () and () for a sample square  are accumulated and resolved according to the filtering of the invention. Display device  may, for example, be the monitor  shown in .","In accordance with another aspect of the invention, once the samples are forward mapped from the transformed, textured surface onto sample squares , process  proceeds to determine the setting of pixels  from the samples of the bin(s) of the corresponding sample squares, in grey scale or color terms. In general, this determination is based on how many samples are in the bin(s) of a sample square, the values of those samples, and how they are distributed throughout the sample square. For example,  shows the detail (indicated by the enlargement encircled by dashed lines) of one of the sample squares , which has bin . Dot  represents an actual sample point from transformed, textured surface  which mapped to bin  of this exemplary sample square. In the example of , only one sample has mapped to bin . Thus, the filtering process  makes its determination for the respective pixel value for this bin  through the position of the sample and its corresponding value. In the example of , there are four bins in the sample square, each having received a different number of sample points according to the variable rate sampling of the invention. In accordance with the filtering of the invention, accumulation and resolution is performed over all of the samples received by the four bins.","Since the variable source sampling rate techniques of the invention ensure that the worst case scenario is that a bin receives only one sample, typically, there is more than one sample available for a bin , such as is illustrated in . By analyzing how sample points are distributed throughout the various bins of a sample square, detailed information can be gleaned about what surface  looks like in the area represented by the sample square. Based on the distribution of sample points in the bins, it is possible to determine\u2014or at least to estimate with some accuracy\u2014certain features about the nature of the image in the sample square: e.g., whether the image passes through the center of the sample square or just nicks the corner, whether the sample square represents a dense or sparse portion of the image, or any other definable feature about nature of the image. Thus, in , there are a lot of samples in bin , or alternatively in sub-bins (), (), () and (). Accordingly, filtering process  can accumulate and apply resolution, e.g., weighted averaging, utilizing all of the samples of the bin , or perform the same at the sub-bin level.","Generally, the number and boundaries of bins corresponding to a sample square are pre-defined, and thus the sampling rate of sampling rate process  is selected such that each bin, or each sample square, receives at least a predetermined number of sample points, e.g., at least one sample point.","Thus, after the sample points in sample squares  have been assigned to bins, filter  is used to evaluate the bins to determine what color or grey scale values are to be assigned to a given pixel . Filter  may make this decision based on a variety of algorithms. In one embodiment, accumulation and resolution of samples in each bin determines the RGB values or grey scale value of the corresponding pixel. In one embodiment, filter  considers, for each sample square, the position and size of each bin, and the number of sample points in each bin, and computes a representation of the samples in, or contents of, the bins associated with the pixel; the pixel is then assigned a grey scale value or color values in accordance with the scalar value or values, respectively. In this regard, the weight accorded to each sample, for example, may be computed based upon the local area of image projection in the neighborhood of the point samples. In some cases, only one sample will map to a bin, in which case the resolution process of the invention refers to utilizing the values of the one sample.","Following the filtering process, an image is displayed on display device  by assigning pixels  their associated values by the rasterization component of the display device . As  show, pixels  are assigned values in a pattern that approximately represents the triangular shape of surface geometry , and the striped pattern applied by the texture mapping, although at a resolution that is limited by the pixel size of display device . In this case, a mere black and white image is shown for simplicity of illustration, but the techniques are generalized. The accumulation and resolution techniques thus behave to antialias the image. For example, where a stairstepping approach would result from the triangle on display, the antialiasing filter  of the invention behaves to resolve, average, or smooth the edges at the boundaries, where stairstepping would otherwise occur.","Variable Rate Sampling","Sampling is the process whereby data about a geometry is gathered by evaluating individual points on the geometry. As noted above, the geometry itself is essentially a continuous function in space. Sampling evaluates individual points in the geometry, so that the geometry may be represented by these points.","The advantage of variable rate sampling arises from the fact that content has different \u201cfrequencies.\u201d The \u201cfrequency\u201d of visual content is a quantity that reflects the extent to which the content is non-uniform in a given region. For example, in a grey scale graphics system, an entire region covered with black has very low frequency content, since the color in the in the region is uniform and does not change as the content is traversed. Alternating one-inch bands of black and white would have higher frequency content overall, with high frequency content at the edges of the bands, where a high amount of change is taking place, but with low frequency content in the bands where the content is uniform. In general, visual content that has greater level of detail, sharp edges and contrasts has high frequency content. In accordance with the invention, for any content, the high and low frequency regions are identified, and these regions are sampled at different rates. This is \u201cvariable rate\u201d sampling, in the sense that a given piece of content is sampled at a rate that varies depending upon the frequency of the region being sampled. In addition to the frequency content of the source. the invention takes into account any transformation that takes place with respect to the data and the parameters.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 4A","b":["400","400","402","402"]},{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 4B","FIG. 4B"]},"There are many ways of varying the source sampling rate, depending on the type of signal. Real imagery is stored as a discrete image of finite resolution, but is easily interpolated to higher resolution using, for example, bilinear or bicubic interpolation. Text and 2-D vector graphics is usually represented analytically, allowing synthesis of arbitrary resolution images. 3-D graphics typically textures geometric representations like triangle meshes with 2-D discrete images. Such triangles are continuous representations that can be sampled at arbitrary resolution. Representing geometry as geometry maps allows simple interpolation to generate point samples at arbitrary resolution without having to analyze and sample over individual triangles.","A question thus determined by the invention is how much source sampling is enough to ensure at least one sample maps to each of the destination bins, e.g., 4\u00d74 destination bins per pixel. As mentioned in the background, Grossman and Dally describe a criterion that guarantees coverage given a uniform, rectangular destination sampling lattice, whereby the length of the longest side of an (imaginary) triangle mesh through the mapped source samples must not exceed the distance between destination samples. Evaluating this metric at numerous source samples, however is impractical. Thus, the invention divides the source imagery into tiles, for example, as illustrated in , so that the appropriate amount of source sampling or oversampling can be chosen independently for each tile, using a conservative estimate. Given a continuous mapping function, such as a 2-D perspective transformation or perspective projection of a 3-D parametric surface, this estimate can be derived by looking at the Jacobian of the mapping function, S(u, v),which maps source locations (u, v) in a domain tile D to destination locations (x, y). S maps unit-length distance between source samples to unit-length distance between accumulation bin centers in the destination. The invention then performs a worst-case analysis of the differential version of the Grossman and Dally criterion, via",{"@attributes":{"id":"p-0094","num":"0093"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"\u0393","mo":"=","msqrt":{"mrow":{"munder":{"mi":"max","mrow":{"mrow":{"mo":["(",")"],"mrow":{"mi":["u","v"],"mo":","}},"mo":"\u2208","mi":"D"}},"mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":["S","u"]},{"mi":["S","u"]}],"mo":"\u00b7"},{"msub":[{"mi":["S","v"]},{"mi":["S","v"]}],"mo":"\u00b7"},{"mrow":[{"msub":[{"mi":["S","u"]},{"mi":["S","u"]}],"mo":"\u00b7"},{"msub":[{"mi":["S","v"]},{"mi":["S","v"]}],"mo":"\u00b7"},{"mn":"2","mo":"\u2062","mrow":{"msub":[{"mi":["S","u"]},{"mi":["S","v"]}],"mo":"\u00b7"}}],"mo":["+","-"]}],"mo":[",",","]}}}}}}},"br":{},"sub":["u ","v "]},"Diminishing returns with decreasing tile size is evident at about 8 1-D tile divisions (64 total tiles), in either case. With the tiling approach of the invention, the required source oversampling rate is determined separately in each tile to reduce the number of samples.","As discussed above in connection with , the textured surface undergoes a variable-rate sampling process . The variable rate sampling process are essentially described in connection with : the source is \u201ctiled,\u201d and different tiles are sampled at different rates depending upon some assessment of the frequency content present in the tile in addition to an assessment how the content will be transformed prior to binning.","Applying a Texture to a Surface: Geometry Maps","As discussed above in connection with , the texture  is applied to the geometry  to yield a textured surface represented by sample points. The texture is connected to the geometry using the geometry map  since both are implicitly related by the continuity of the (u, v) coordinate system.","In this regard, surface geometry  can be described as a function S(<u,v>), where <u,v> are parameters that together identify a point on the surface. S(<u,v>) is essentially the parametrization of the mesh, where the outputs of the function S, denoted by coordinates x, y, and z, are the horizontal, vertical, and depth dimensions, respectively. The geometry map can conceptually be thought of as a 2-D image itself, where the structure of the (u,v) points is implicitly a 2-D rectilinear array. Explicit values for a particular (u,v) coordinate thus may be inferred from the position of the sample in the 2-D array.","As mentioned in the overview of the invention, a method suitable to forward mapping for texturing the geometric representation wherein variable sampling rates have been applied is to use a geometry map, defined as a map from the texture domain to locations on the 3-D surface, essentially forming its parameterization. The parameter space of the surface can then be traversed in a convenient order, performing regulated source sampling of the surface image.","Flow of Rendering Process",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 5","b":["502","504","504","506","508","502","508","510","512","514","512"]},"Exemplary Non-Limiting Architecture","A goal achieved by the invention is simplicity. While variable rate source signal sampling consumes bandwidth, it is far simpler than any of the destination hole-filling procedures disclosed by the prior art.","In an exemplary non-limiting architecture, and as illustrated in the block diagram of , the rendering process of the invention is divided into two components: a front-end source sampling, mapping, and shading component , and a back-end reconstruction and resampling component , with an image buffer  for intermediate storage of the samples generated from the variable rate sampling processes of the invention. The front-end traverses the source signal and emits point primitives at sufficient resolution to provide destination coverage and source detail. Since the front-end operates on a number of data types, its function can be relegated to programmable, digital signal processors (DSPs).","The back-end component's function is common across source representations and its processing can be hardwired into a display refresh processor .","The components of the display system are the mapping processor , the supersample store , and the filter and refresh processor , shown in . The sampling and mapping functions outlined above are highly adaptive and operate on a variety of data types, including images, surfaces, and volumes. While a non-limiting choice, arrays of DSPs serve well for these tasks. The back end of the process, reconstruction\/filtering\/resampling, may be suited for fixed function hardware, or today's flex function coprocessors.","The reconstruction, filtering and resampling of the invention can be performed on the fly. Alternatively, filtering and decimation to the display's sampling rate with similar hardware could be performed, saving intermediate results at lower (non-supersampled) resolution and compositing the layers, as in the work of Torborg and Kajiya.","Combining contributions from several sources can be problematic when visibility computations have been pushed to the subpixel level. One solution is a more complex form of intermediate storage, such as an A-buffer. Even though visibility calculations are not embedded in the refresh processor in accordance with the invention, combining samples at subpixel resolution achieves flexibility.","In one non-limiting embodiment, intermediate results are stored in a supersampled buffer  with bins that correspond to fractions of a display pixel. Samples are accumulated in the bins with a read-modify-write operation that utilizes caching for effective memory utilization. Along with the accumulated subpixel value, a count of the number of samples striking the bin is maintained. Each destination sample is a set of N\u00d7N, e.g., 4\u00d74, bins including multiple subsamples to be filtered. Within a bin, multiple samples can be reduced to a single sample using simple averaging, or other resolution techniques including taking the mean, median, mode, minimum, maximum, some other function, etc. Then, while a non-limiting choice, the invention utilizes Mitchell's cascaded box filter to produce the final result at each output sample, whose kernel k(x) is given by the convolution of 4 box filters, i.e.:\n\n()=box()*[box(2)*box(2)]*box(4)\n\nresulting in a piecewise cubic filter. The initial box(4x) term represents the step that resolves, e.g., averages, samples in each bin. It is nonlinear because the total number of samples in a bin varies, but is be at least one due to the application of the variable rate sampling of the invention. It is noted that the center convolution pair box(2x) * box(2x) represents a simple \u00bc, \u00bd, \u00bc triangle filter in 1-D, which preserves sample locations.\n","While the filtering can assume a variety of designs in accordance with the invention, a diagram of an exemplary implementation of the filtering stage is shown in .","Each of the 4\u00d74 supersamples corresponding to a display pixel is represented by an accumulator to in the supersample buffer along with a number indicating the number of source samples accumulated by the subpixel. As it is fetched from the buffer by the filtering processor, the accumulated value of the subpixel is multiplied by the reciprocal of the population of the subpixel. In this way the first stage of the three stage filter is distributed across the front and back ends.","Rather than pass the intermediate results through cascaded box filters at the next level, the pair of 2\u00d7 box filters are convolved into a triangle (Bartlett) filter to . It is noted that the footprint of this filter extends beyond the one pixel wide square surrounding the destination sample. Consequently, a rolling line buffer of the stage one results is maintained within the processor to avoid fetching stage one's samples twice. The final box filter is an add and shift, and includes adders , ,  and latch .","Examples of the use of the invention are depicted in  and A to E.  depict use of the invention with a 1-D square wave \u201cchirp\u201d signal, in which the square wave frequency linearly increases with horizontal distance.","A 2-D signal is formed by repeatedly translating this 1D signal \u2153 of a sample to the right and 1 sample above, and can be thought of as simultaneously viewing many frames of a translating 1-D signal.  and A to E illustrate two forward mapping approaches.  depict an embodiment that is purely source-based and uses a fixed number of samples per chirp cycle.  add an additional jittered sample in the center of each supersampled bin. Reconstruction filtering in accordance with the non-limiting above-described architecture was utilized in connection with both approaches. , B, C, D and E were sampled with 1, 2, 4, 8 and 16 samples\/cycle, respectively. , B, C, D and E were also sampled with 1, 2, 4, 8 and 16 samples\/cycle, respectively.","Several observations may be made with respect to . The forward mapping approach of the invention handles very high frequencies well. Without regulated source sampling, though, e.g., , the hole problem becomes apparent in the low-frequency regions, which are incorrectly dark. Jittered destination sampling fixes this problem, but is too noisy to provide a good solution in the high-frequency regions by itself. It is noted that adding jittered destination samples can be thought of a special regulated source sampling technique well suited for such simple, analytically described signals.","The approaches described herein as forming the invention can \u201cminify\u201d signals without fear of aliasing. The invention thus provides a very simple and robust display process. Regulated source sampling, as well as accumulation and resolution provide effective coverage for layered, mapped imagery.","The architecture of the invention generates point samples that include 2-D positional information, among other information like z-buffer information, for making a decision as to which bin a sample is placed. In addition to generating the samples, the source sampler computes the mapping from the surface geometry to the screen. Thus, the architecture of the invention includes an initial stage, which samples the 3-D geometry, maps it to the screen, and performs the shading, producing point samples with 2-D image location and color, which are accumulated and resolved by the second stage. The point samples produced by the first stage don't \u201cindicate how the 3-D position maps to the screen\u201d\u2014this has already been computed by the first stage. Thus the first stage includes sample interpolation\/decimation, mapping and shading, and the second stage includes accumulation and resolution.\n\nAccumulation, Resolution and Visibility\u2014The Occlusion Case\n","As mentioned, the present invention also presents a resolution technique in the presence of occlusion. The invention thus distinguishes between two cases: when the samples within a bin are from the same layer, i.e., the samples do not occlude each other, and when the samples originate from separate layers, i.e., the samples do occlude each other. If such distinguishing does not occur, then the mistake of resolving bidden samples might be made. As illustrated in , triangle T is in front of circle C, and thus only triangle T should be visible where triangle T and circle C overlap.","As illustrated by , the sampling of the invention ensures that each bin, or sub-bin, receives at least one sample, represented by the black dots. In the case of a typical color sample, each sample has an associated Red, Green and Blue (RGB) value, a weight W, and a Z-value (R, G, B, W, Z). The Z-value roughly corresponds to the sample's location in a direction orthogonal to the plane of the rendering device's display, and determines in a relative manner whether a sample is \u201cin front of\u201d another sample.",{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 8C","b":["1","2","3","4","1","2","3","4","1","2","3","4","1","2","3","4"]},"In one embodiment, the invention thus distinguishes these two occlusion cases by associating a depth range, or interval, with each point sample rather than a single value. As illustrated by , each of the four samples has been assigned a Z-range Z-Range, i.e., Z-Range, Z-Range and Z-Range, respectively.","In one embodiment, the Z-range for a sample is calculated based on a function of at least one of the Z-value for the sample and Z-value(s) for neighbor(s) of the sample from the geometry map, and set at a width such that neighbors overlap in depth. Z-Ranges thus assigned, point samples that have overlapping depth intervals can be considered to be from the same layer, and point samples with disjoint depth intervals can be considered to be occluding. Samples from the same layer are resolved in the bin while samples from an occluded layer are temporarily, or permanently, discarded and a new accumulation then begins. The reason why in one embodiment, samples are discarded non-permanently, i.e., stored separately, is because a subsequent expansion of the Z-interval used for resolution may re-include a sample formerly discarded, in which case a re-evaluation may take place. The bin itself thus needs to store a z interval which is extended when an overlapping sample is added, in addition to the accumulated rgba values and weight values.","Several scenarios of one embodiment of the Z-interval comparison techniques of the invention are illustrated in .  illustrate a first sample from a bin, which has been assigned a first Z-Interval. With only one sample, there is no need for the occlusion aspect of the invention because no occlusion is possible. With more than one sample in a bin, the invention assigns a Z-interval to the entire bin, which is initially the Z-interval of the first sample. Then, as illustrated in , B, C and D, if the second sample overlaps with, but has different limits than the first sample, then the Z-interval for the bin is extended to the greater of the two limits, Zand Z, of the first and second samples. In , the low limit of the Z-interval for the bin is changed to reflect the lower limit of the second sample. In , the high limit of the Z-interval for the bin is changed to reflect the higher limit of the second sample. In , both the low and high limit of the Z-interval for the bin are changed to reflect the lower and higher limits of the second sample. In , there is no need to change the Z-interval of the bin since the limits of the second sample are subsumed within the Z-interval for the bin already. In each of the preceding cases, because the samples overlap, they are resolved together according to the resolution of samples in bins according to the invention.","In , the Z-intervals for the first and second samples do not overlap, and thus are not resolved together according to the invention; however, because the second sample's Z-interval is in front of, or occludes the first sample's Z-interval, the second sample's Z-interval is adopted for the bin.","In , the Z-intervals for the first and second samples do not overlap, and thus are not resolved together according to the invention. In this case, the Z-interval for the bin remains unchanged because the first sample's Z-interval is in front of, or occludes the second sample's Z-interval.","For each additional sample in the bin, the additional sample's Z-interval is evaluated against the Z-interval for the bin in the same way. In one embodiment, when a sample is occluded, as per , the sample is discarded from the bin. In another embodiment, information relating to the samples to be discarded is saved temporarily, in case the Z-interval for the bin changes, or expands, in such a manner as to overlap with one of the samples to be discarded, in which case the sample that formerly did not overlap, but now overlaps can be re-included in the accumulation and resolution analysis. By the same token, samples that are included in the Z-interval for the bin may fall out of the Z-interval for the bin, if the entire Z-interval for the bin is replaced as per . A number of such processes can be imagined whereby the samples are analyzed as per the overlap of Z-interval ranges assigned to samples in a bin, such that the frontmost overlapping Z-intervals of samples determine which samples are resolved according to the accumulation and ing of the invention.","Exemplary non-limiting pseudocode for implementing such Z-buffer handling is as follows:",{"@attributes":{"id":"p-0126","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Primitive:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P.c","\/\/ primitive weighted color (e.g., rgba)"]},{"entry":[{},"P.w","\/\/ primitive weight (for blending and coverage)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"P.z[0], P.z[1]","\/\/ primitive depth range"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Subsample bin:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"S.c_sum","\/\/ running color sum for bin"]},{"entry":[{},"S.w_sum","\/\/ running weight sum for bin"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"S.z[0],S.z[1]","\/\/ running depth range for bin"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Insert primitive into bin:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["If(P.z[1] <S.z[0]) then","\/\/ P occludes: discard bin contents"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"S.w = P.w"]},{"entry":[{},"S.c_sum = P.c"]},{"entry":[{},"S.z = P.z"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Else if(P.z[0] > S.z[1]) then \/\/ P from same layer: add it in"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"S.w_sum += P.w"]},{"entry":[{},"S.c_sum += P.c"]},{"entry":[{},"if(P.z[0] < S.z[0]) S.z[0] = P.z[0] \/\/ update z interval"]},{"entry":[{},"if(P.z[1] > S.z[1]) S.z[1] = P.z[1]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Endif \/\/ final case is that the point is occluded and so ignored"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{},{}],"in-line-formulae":[{},{}],"sub":["i ","i"]},{"@attributes":{"id":"p-0127","num":"0126"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mfrac":{"mrow":[{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"k"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mrow":{"msub":{"mi":["S","i"]},"mo":"\u00b7","mi":"c_sum"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"msub":{"mi":["f","i"]}}},{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"k"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mrow":{"msub":{"mi":["S","i"]},"mo":"\u00b7","mi":"w_sum"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"msub":{"mi":["f","i"]}}}]}}},"br":{}},"In brief, and as explained in detail above, anisotropic filtering is effectively handled by the invention by resolution over the samples that accumulate in bins covered by a foreshortened projection. The approaches described herein as forming the invention can \u201cminify\u201d signals without fear of aliasing. The invention thus provides a very simple and robust display process. Regulated source sampling, as well as accumulation and resolution provide effective coverage for layered, mapped imagery.","As mentioned above, while exemplary embodiments of the present invention have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any computing device or system in which it is desirable to forward mapping. Thus, the techniques for providing improved signal processing in accordance with the present invention may be applied to a variety of applications and devices. For instance, the algorithm(s) of the invention may be applied to the operating system of a computing device, provided as a separate object on the device, as part of another object, as a downloadable object from a server, as a \u201cmiddle man\u201d between a device or object and the network, as a distributed object, etc. While exemplary programming languages, names and examples are chosen herein as representative of various choices, these languages, names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same, similar or equivalent forward mapping achieved by the invention.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the signal processing services of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as an EPROM, a gate array, a programmable logic device (PLD), a client computer, a video recorder or the like, or a receiving machine having the signal processing capabilities as described in exemplary embodiments above becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present invention. Additionally, any storage techniques used in connection with the present invention may invariably be a combination of hardware and software.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. For example, while exemplary network environments of the invention are described in the context of a networked environment, such as a peer to peer networked environment, one skilled in the art will recognize that the present invention is not limited thereto, and that the methods, as described in the present application may apply to any computing device or environment, such as a gaming console, handheld computer, portable computer, etc., whether wired or wireless, and may be applied to any number of such computing devices connected via a communications network, and interacting across the network. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Still further, the present invention may be implemented in or across a plurality of processing chips or devices, and storage may similarly be effected across a plurality of devices. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The system and methods for providing forward mapping with accumulation, resolution and visibility in accordance with the present invention are further described with reference to the accompanying drawings in which:",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIGS. 7A to 7C"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIGS. 8A to 8D"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 9A to 9F"}]},"DETDESC":[{},{}]}
