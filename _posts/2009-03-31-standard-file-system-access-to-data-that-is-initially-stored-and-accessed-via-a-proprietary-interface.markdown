---
title: Standard file system access to data that is initially stored and accessed via a proprietary interface
abstract: Various methods and systems can be used to provide standard file system access to data that is originally accessed only by a proprietary interface. One such method involves querying an application (e.g., a database management system) for information identifying a location of each of several data objects within several volumes. The application provides a proprietary interface to the data objects stored on the volumes. The method then creates metadata, which associates each of several files within a new file system with the location of a respective one of the data objects within the volumes. The metadata can be created by an in-place conversion module implemented on a computing device. The method then provides the application with access to the files within the new file system, subsequent to creating the metadata.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08239402&OS=08239402&RS=08239402
owner: Symantec Corporation
number: 08239402
owner_city: Mountain View
owner_country: US
publication_date: 20090331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This invention relates to storage systems and, more particular, to providing non-proprietary access to data that is initially available via a proprietary interface.","Certain applications provide a proprietary interface to the data that is generated and\/or consumed by those applications. For example, many database management applications include proprietary interfaces that provide access to the databases managed by those database management applications. Customized, special purpose application can provide similar proprietary interfaces. These proprietary interfaces can provide access to data independently of any file system. Accordingly, the proprietary interfaces act as proprietary file system substitutes. Often, the data is not accessible via any other standard interface.","For many users, it is desirable to be able to access their data without needing to go through a proprietary interface. For example, a user may use backup software provided by one vendor to backup a database maintained by a database management application provided by another vendor. The backup software does not include the proprietary interface usable to access the database. Accordingly, enabling the backup software to access the database via the proprietary interface provided by the database management application may be difficult or even impossible. In general, the use of proprietary interfaces can limit the easy sharing and flexibility in moving data between different applications, if not all applications include the proprietary interface.","Various embodiments of methods and systems are disclosed for providing standard file system access to data that is originally accessed only by a proprietary interface. In one embodiment, such a method involves querying an application (e.g., a database management system) for information identifying a location of each of several data objects within several volumes. The application provides a proprietary interface to the data objects stored on the volumes.","The method then creates metadata, which associates each of several files within a new file system with the location of a respective one of the data objects within the volumes. The metadata can be created by an in-place conversion module implemented on a computing device. The method then provides the application with access to the files within the new file system, subsequent to creating the metadata.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations and omissions of detail; consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.","While the invention is susceptible to various modifications and alternative forms, specific embodiments of the invention are provided as examples in the drawings and detailed description. It should be understood that the drawings and detailed description are not intended to limit the invention to the particular form disclosed. Instead, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["10","1","10","2","10","1","20","25","20","20","20"]},"Computing device () also implements a virtualization module . Virtualization module  is configured to implement and facilitate access to virtualized storage devices called volumes. Each volume is a logical storage device that can be implemented on one or more underlying physical storage devices, which can in turn implement storage policies such as striping or mirroring. Virtualization module  allows the underlying implementation details to be hidden from applications that access data stored on the volumes maintained by virtualization module . In one embodiment, virtualization module  is VERITAS\u2122 Volume Manager (e.g., as provided in one of the VERITAS\u2122 Storage Foundation family of products), available from Symantec, Corp. of Cupertino, Calif.","Computing device () implements a database management system . Database management system  is an example of an application that provides a proprietary interface to data. When such a proprietary interface is provided, other applications that do not include or otherwise support the proprietary interface cannot access the data without interacting with database management system . In many situations, this can reduce the ability of the other applications to efficiently share data with database management system  or to move copies of the data maintained by database management system . For example, a backup application may be unable to efficiently perform backups of data maintained by database management system  via the proprietary interface.","Other applications (instead of database management system ) can also provide proprietary interfaces to the data maintained by those applications. For example, a customer may hire a software developer to provide a custom software application to serve a specific purpose for that customer. Such a custom application may incorporate a proprietary interface.","In this example, computing devices () and () are coupled by network . Network  can include one or more storage, local, and\/or wide area networks. Network  can be implemented using various topologies, communication protocols, and physical links (e.g., wireless links, coaxial cables, and the like). In some embodiments, certain components may be directly connected, as opposed to being connected via a network.","Network  also couples computing devices () and () to a physical storage system that implements volumes ()-(). These volumes store a database  that is managed by database management system . As shown, database  includes several data objects ()-(), which are distributed across volumes ()-(). In particular, one or more data objects () are stored in volume (), one or more data objects () are stored in volume (), and one or more data objects () are stored in volume (). Some data objects may be stored across multiple volumes (e.g., less than all of such a data object is stored on any one volume). Some data objects may be replicated across (e.g., redundant copies of such data objects can be stored on each of) multiple volumes.","Data objects ()-() are objects that database management application  manages as single items. For example, data objects ()-() can include files, tables, tablespaces, and the like.","As noted above, file system  is an application that is configured to organize data in a file system data structure (such a data structure is also referred to as a file system). The file system includes multiple files. Special files, called directories, can group one or more files together. Directories and files can be arranged in a hierarchical manner. File system  maintains metadata (not shown) that maps each file to the location(s) in one or more underlying volumes that store the data contained within that file.","In-place conversion module  is configured to generate new metadata that will allow file system  to provide access to database . Accordingly, the new metadata treats the data objects ()-() within database  as files within a file system. In-place conversion module  performs an \u201cin-place\u201d conversion in the sense that the underlying data objects ()-() are not modified or copied during the conversion process that provides access to those data objects via the file system. Instead of modifying or copying the underlying data, the in-place conversion process simply generates new logical structures and information, such as new file system metadata, that organizes the existing data objects within a new file system. In other words, in-place conversion module  creates metadata for a new file system, and this metadata references the same copy of application data that is used by the application that provides the proprietary interface to the data. Details regarding the in-place conversion process are discussed below with respect to .","In some embodiments, in-place conversion module  generates the new file system metadata in a non-destructive fashion that preserves the metadata used by database management system  to implement its proprietary interface. This allows an unsuccessful conversion to be undone, such that database  is still accessible via database management system . If the conversion process instead modified the metadata used by database management system , the conversion process could not be undone (at least not without having to do a time consuming restoration of the database from a backup copy, which may lose any information that was entered into the database after that backup copy was created).","As shown in this example, database  spans multiple volumes. Performing an in-place conversion of a set of data that spans multiple volumes is more complex than performing an in-place conversion of data on a single volume, since the conversion needs to account for both locations of data objects within the volumes and the identities of each of the volumes.","In general, the application that provides the proprietary interface can maintain its data on multiple storage devices. Such storage devices can include logical storage devices, such as volumes and logical unit numbers (LUNs), or physical storage devices, such as hard disks, hard disk arrays, disk partitions, and the like. When the in-place conversion module  begins the in-place conversion process, in-place conversion module  can first convert the underlying storage devices used by the application into volumes, and then begin processing the volumes. Accordingly, while the examples herein frequently describe processes that are performed on volumes, it is noted that such volumes may themselves have been created during the in-place conversion process from underlying storage devices used by the application.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["25","20","25","20","25"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["25","60","1","60","60","75","1","75","75"],"i":["n","n"]},"As shown, in-place conversion module  has created (e.g., by interacting with virtualization module ) a new volume set . New volume set  includes volumes  and a new volume . In-place conversion module  has created a new multi-volume file system  (e.g., by interacting with file system ) that organizes data stored in volume set . Multi-volume file system  is a file system data structure that organizes data spanning multiple volumes. The new volume  within volume set  stores metadata  for multi-volume file system .","Multi-volume file system  includes a file that includes each data object included in database . Metadata  identifies each file within multi-volume file system , as well as the size and location (within volume set ) of the data within each file. When an application (such as database management system ) requests access to a particular file, file system  uses metadata  to locate that file within volume set  and then returns the requested file to the requesting application.","After generating creating volume set , adding volumes  to volume set , creating a new metadata volume  within volume set , creating a multi-volume file system  on volume set , and creating metadata  within volume , in-place conversion module  verifies that the in-place conversion was performed successfully. Verification can involve running a file system check (e.g., by invoking a \u201cfsck,\u201d \u201cscandisk,\u201d or \u201cchkdsk\u201d utility provided by file system ) to verify the consistency of multi-volume file system . Verification can also involve running an application-specific utility to verify that multi-volume file system  is consistent with respect to the application. For example, a database consistency check utility (e.g., as invoked using a command like \u201cdbverify\u201d) provided by database management system  can be invoked to check that multi-volume file system  provides access to database  in a manner that can be consistently accessed by database management system . The latter check can also verify that none of data objects  were modified during the in-place conversion.","If verification is successful, in-place conversion module  can redirect database management system , causing database management system  to begin accessing database  via file system  instead of via the proprietary interface provided by database management system . This redirection can be performed by restarting database management system  and using standard query language (SQL) commands to change the path to database  to that provided by multi-volume file system . Database management system  can then open database  via file system , using the path provided.","It is noted that in-place conversion module  has not modified the metadata used by database management system  or data objects . Accordingly, if an error is detected during the verification process, database management application  can continue to access database  via its proprietary interface, without any data loss or change in operation.","Because in-place conversion module  performs an in-place conversion, none of data objects  need to be moved or copied during the conversion process. This provides several advantages over other conversion techniques. In particular, because data objects  do not need to be copied or moved (a time consuming process, especially if database  is very large), the in-place conversion can be performed more quickly than conversions that involve copying or moving the application data. Similarly, the amount of storage space needed to perform an in-place conversion is significantly less than that needed to perform a conversion using a technique that involves copying the application data. As shown, the in-place conversion only needs enough additional storage space to configure the new volume set and new multi-volume file system and to store the new metadata. In contrast, a conversion technique that involves copying the application data will need at least twice as much storage as is present in the original system in order to store the duplicated application data.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3","FIGS. 1"],"b":["25","2","4"]},"The method can begin when a user requests an in-place conversion (not shown). Such a request can be received via an interface such as a command line interface (CLI), application programming interface (API), or graphical user interface (GUI). The request can specify the identity of the application data to be converted from data that is accessed via a proprietary interface to data that is accessed via a standard file system interface. For example, if the application data to be converted is a database, the request can identify the network address and\/or identity of the database management system and\/or the identity of a particular database managed by that database management system.","In some embodiments, the request can also specify particular items of data within the application data to be converted and\/or to be excluded from the conversion. For example, the request can specify that duplicate or replicated data objects (i.e., data objects that are exact copies of other data objects) should not be included in the conversion process. Similarly, the request can specify that temporary data objects (e.g., data objects that are being used to store intermediate processing results for the application) should not be included in the conversion process. As yet another example, the request can select certain data objects (e.g., certain tablespaces within a database) to be converted, indicating that non-selected data objects should not be converted.","In response to receipt of such a request, the application is queried for the identities of all of its data objects (or of the specified data objects, if fewer than all are specified in the request), as well as for metadata identifying the volumes on which the identified data objects reside and identifying the location(s) of each data object within those volumes, as shown at . The application returns the requested information, which can be at least temporarily stored (e.g., as information  of ).","A new volume set is created (e.g., by requesting a new volume set from a virtualization module), as shown at . A new volume, which is configured to store file system metadata, is added to the new volume set, as shown at .","The new volume is configured to be large enough to store all of the metadata for the application data specified in the request. The size of the new volume can be a default size. For example, if the application data is a database, the new volume can be set to a default size that is large enough to store metadata for the average database (e.g., one Gigabyte). Alternatively, instead of selecting a default size, a size that is based upon the size of the application data to be converted can be selected. For example, if the application data is a database and the size of the database is received as part of the request or in response to the performance of the queries in operation , the new volume can be configured having a size equal to one percent of the size of the application data.","In some embodiments, volumes can be configured as different types of volumes. For example, data-only volumes are a type of volume that only stores application data. No file system metadata can be stored on a data-only volume. Metadata volumes can store both application data and file system metadata. Accordingly, in such embodiments, the new volume can be a metadata volume.","At , a new multi-volume file system is created in the volume set that was created at . The data objects within the application data to be converted will be added as files within the new multi-volume file system.","At , the volumes storing the application data are added to the new volume set created at . The order in which the volumes are added to the new volume set is tracked. Information identifying the tracked order can be, at least temporarily, stored. For example, if the application uses several logical storage devices identified by logical unit numbers (LUNs), these LUNs may be converted to volumes that have new identities. The new volumes corresponding to the LNs are then added to the new volume set. During the conversion process, the order in which the volumes are added to the new volume set can be tracked by creating information associating each preexisting LUN (e.g., LUN A) with the new identity (e.g., Volume ) of the volume to which the LUN was converted.","In some embodiments, the virtualization module being used to create the new volume set may require all volumes to store certain metadata. In such embodiments, before each existing application data volume is added to the new volume set, free space (e.g., space that is not storing metadata used by the application or the application data) on each existing application data volume is used to store the required metadata. If no free space is available, an error indication can be generated (otherwise, attempting to proceed would require that application metadata and\/or application data be destroyed, which would reduce the likelihood that the conversion process could be undone if other errors arise).","At , the tracked order in which the volumes were added to the new volume set is used to convert the location information obtained by querying the application (at ) into information that identifies the location of each data object within the new volume set. For example, if the location information obtained from the application indicated that a particular data object was stored at a first offset within volume A, and if volume A was the second volume in the new volume set (e.g., the second volume after the new volume created at ), the converted location information could indicate that the particular data object is located at the first offset within the second volume of the volume set.","Once the location information has been converted (at ) and the new multi-volume file set has been created, the conversion process can begin creating files within the new multi-volume file set. Operation  creates a file and generates the metadata for that file. Often, file creation and metadata generation are performed independently, and thus performance of operation  may involve performing several independent sub-operations.","Operation  is repeated for each data object that is part of the data to be converted and that was identified by the application in response to the query submitted at . Thus, after creating a file for one data object and generating the file's metadata, if there are more listed data objects (), the conversion moves to the next listed data object () and repeats operation  for that next data object. In alternative embodiments, the data objects can be processed in an order that is different than the order in which the data objects are listed by the application in response to the query submitted at .","Each file created by performing operation  of the conversion process corresponds to one of the data objects within the application data to be converted. In one embodiment, files are created by specifying each file as the target of a file system command such as \u201ctouch.\u201d If such a command is performed on a nonexistent file, the command will create the file, such that the file has a size of zero and is not mapped to any data blocks.","The files created by operation  can be organized in the same manner (e.g., a flat file set, a hierarchical structure, or the like) as the data objects maintained by the application. For example, if the query performed at  returned the identities of the data objects as a set of pathnames, the same pathnames can be used for the files created by the conversion process. Thus, if a pathname specifies that a data object is located within a directory, a directory file corresponding to the directory can be created within the new file system. A new file corresponding to the data object can then be created within the new directory in the new file system.","Operation  also creates the metadata for a new file. In particular, performance of operation  sets the size and location of each new file. The size of each file is set to equal the size of the corresponding data object (e.g., as returned in response to the query submitted at , or as determined by accessing the data object). The location of each new file is set to identify the location of the corresponding data object within the new volume set created at . Accordingly, the location of the data object is the location determined at . Performing operation  effectively maps the new file to the preexisting data object without copying any application data.","A given data object may be fragmented within volumes . For example, a tablespace may include more than one extent (a variable-length group of data, identified by a beginning address or offset and length, or by both beginning and ending addresses or offsets). The location information for the new file can identify the location of each extent, as well as the order in which the data in those extents should be combined to produce the corresponding data object.","The file size and location metadata can be generated in a variety of different ways. In one embodiment, the file system application used to create and maintain the new multi-volume file system provides a private file system input\/output control (ioctl) kernel-level command to set the file size and another private ioctl command to set the location(s) of file data. In such an embodiment, the conversion process can access these private ioctl commands to set the file size and location(s). These commands can be invoked while the application that provides the proprietary interface to the data being converted is still online, provided that the application is in a state in which the application does not grow or shrink any data objects. If such a state is not available, it may be desirable to temporarily take the application offline while these commands are invoked.","Alternatively, the conversion process can disable the application (e.g., by shutting down operation of the database management system, at least with respect to the database being converted). After the application has been disabled, the conversion process can call a file system utility (invoked in a manner that does not use the kernel driver, unlike the ioctls described above) to set the size and location of each new file.","Once files have been created, and the corresponding metadata generated, for all of the data objects identified in response to the query submitted at , the conversion process can verify the results of the conversion process, as shown at . Verification can be performed to verify the consistency of the new multi-volume file system. Additional verification can verify the continued consistency of the underlying application data.","If verification fails, an error can be signaled (e.g., by logging an error, displaying an error indication to an administrator, and the like). In this situation, the application continues to access its application data via the proprietary interface.","If verification is successful, the application is restarted and instructed to begin accessing the converted application data via the new file system interface (e.g., as described above). Once the application has been redirected to the new file system interface, the application may be unable to access the data via the proprietary interface. For example, once the application begins modifying or moving data via the file system interface, the metadata used by the proprietary interface may be overwritten or become invalid (e.g., the proprietary interface's metadata may no longer correctly identify the identity, size, and\/or location of data objects). Accordingly, attempting to subsequently access the converted data via the proprietary interface may result in errors.","It is noted that in alternative embodiments, additional operations can be performed instead of and\/or in addition to those shown in . Similarly, in alternative embodiments, some operations may be omitted.","Many of the operations shown in  can be performed in a different order than is illustrated. For example, all or some of operations , , and  can be performed prior to performance of operation . Similarly, some operations can be performed in parallel with each other. For example, several instances of operation  can be performed in parallel with each other, to simultaneously create files and metadata for several different data objects.","While the above discussion describes examples in which the in-place conversion adds existing volumes to a new volume set, other embodiments may perform an in-place conversion to a single volume. Here, instead of adding the volumes used by the application to a new volume set, the in-place conversion module can create a new volume to store the file system metadata, and then logically append the volumes storing the application data to the new volume. The in-place conversion module can track the size of each appended volume and the order in which the volumes are appended, and then use the tracked information to calculate the metadata. For example, if the first appended volume (i.e., the first existing volume to be appended to the new volume for storing the file system metadata) is 25 Gigabytes in size and a particular data object is located at a particular offset within the first appended volume, the in-place conversion module can add the particular offset within the first appended volume, the size of the first appended volume, and the size of the new volume to get the new offset to the data object within the combined volume. In embodiments that combine the new metadata volume and the existing application data volumes into a single new volume, a multi-volume file system is not necessary to access to the data objects.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 4","FIGS. 1 and 2","FIGS. 1 and 2"],"b":["10","10","1","25","25","10"]},"Computing device  can be a personal computer, network appliance, server, personal digital assistant, mobile phone, storage controller (e.g., an array controller, tape drive controller, or hard drive controller), laptop computer, or the like. In general, computing device  is configured to execute software or otherwise provide appropriate functionality to act as a component of the system described herein.","As illustrated, computing device  includes one or more processors  (e.g., microprocessors, programmable logic devices (PLDs), or application specific integrated circuits (ASICs)) configured to execute program instructions stored in memory . Memory  can include various types of RAM, Read Only Memory (ROM), Flash memory, micro electro-mechanical systems (MEMS) memory, magnetic core memory, and the like. Memory  can include both volatile and non-volatile memory. Computing device  also includes one or more interfaces . Processor , interface , and memory  are coupled to send and receive data and control signals by a bus or other interconnect.","Interface  can include a network interface to various networks (e.g., such as network  of  and\/or interfaces to various peripheral buses. For example, interface  can include a network interface (e.g., implemented as a network interface card) via which commands generated by in-place conversion module  can be sent to other devices. For example, such a network interface can also allow in-place conversion module  to communicate with an application (e.g., in order to obtain information describing the identities of data objects maintained by that application, as well as information identifying the location of those data objects within a set of volumes), if the application is not implemented on computing device . Interface  can also include an interface to one or more storage devices (e.g., on which data affected by the in-place conversion is persistently stored).","Human user interface  can include one or more of a variety of different human user input and\/or output devices, and\/or one or more interfaces to such input and\/or output devices. Such input and\/or output devices can include monitors or other displays, keyboards, keypads, mice, electronic tablets, touch screens, audio speakers, and the like. Input (e.g., requesting an in-place conversion) to and output from (e.g., indicating an error that occurred during an in-place conversion) in-place conversion module can be received and\/or sent via such an input and\/or output device.","In this example, program instructions and data executable to implement all or part of in-place conversion module  are stored in memory . Additionally, memory  can store information that is generated by and\/or processed by in-place conversion module . Such information can include information  identifying data objects and their locations within a set of volumes, which is obtained from the application that provides the proprietary interface to the data. Such information can also include volume order information , which indicates the order in which the set of volumes accessed by the application are added to a new volume set. Additionally, such information can include converted location information , which indicates the location of each data object within the new volume set.","The program instructions and data implementing in-place conversion module  can be stored on various computer readable storage media such as memory . In some embodiments, such software is stored on a computer readable storage medium such as a compact disc (CD), digital versatile disc (DVD), hard disk, optical disk, tape device, floppy disk, and the like). In order to be executed by processor , the instructions and data can be loaded into memory  from the other computer readable storage medium. The instructions and\/or data can also be transferred to computing device  for storage in memory  via a network such as the Internet or upon a carrier medium.","Although the present invention has been described in connection with several embodiments, the invention is not intended to be limited to the specific forms set forth herein. On the contrary, it is intended to cover such alternatives, modifications, and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objects, features and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
