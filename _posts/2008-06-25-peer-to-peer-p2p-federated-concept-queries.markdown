---
title: Peer to peer (P2P) federated concept queries
abstract: Embodiments of the invention are generally related to data processing, and more specifically to retrieving results for a query from one or more devices coupled to a network. A first device may receive an abstract query including logical fields defined by a first data abstraction model and retrieve query results stored in the first device. The query may be sent to one or more other devices via the network. The one or more other devices may be configured to convert the abstract query to local abstract queries including logical fields defined in local data abstraction models. The local queries may be issued against local databases to retrieve additional results for the query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09043365&OS=09043365&RS=09043365
owner: International Business Machines Corporation
number: 09043365
owner_city: Armonk
owner_country: US
publication_date: 20080625
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Exemplary System","Relational View of Environment","Retrieving Results from Multiple Peer Devices","Notification of Available Query Augmentation within Query Results","Augmenting Local Data Abstraction Models with Logical Fields from Peers","CONCLUSION"],"p":["This application is a continuation-in-part of co-pending U.S. patent application Ser. No. 11\/226,181, filed Sep. 14, 2005, which is a continuation of U.S. patent application Ser. No. 10\/083,075, filed Feb. 26, 2002 now U.S. Pat. No. 6,996,558. Each of the aforementioned related patent applications is herein incorporated by reference in its entirety.","1. Field of the Invention","The present invention is generally related to data processing, and more specifically to retrieving data from a database.","2. Description of the Related Art","Databases are computerized information storage and retrieval systems. A relational database management system is a computer database management system (DBMS) that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database, a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways. A distributed database is one that can be dispersed or replicated among different points in a network. An object-oriented programming database is one that is congruent with the data defined in object classes and subclasses.","Regardless of the particular architecture, in a DBMS, a requesting entity (e.g., an application or the operating system) demands access to a specified database by issuing a database access request. Such requests may include, for instance, simple catalog lookup requests or transactions and combinations of transactions that operate to read, change and add specified records in the database. These requests are made using high-level query languages such as the Structured Query Language (SQL) and application programming interfaces (API's) such as Java\u00ae Database Connectivity (JDBC). The term \u201cquery\u201d denominates a set of commands for retrieving data from a stored database. Queries take the form of a command language, such as SQL, that lets programmers and programs select, insert, update, find the location of data, and so forth.","Any requesting entity, including applications, operating systems and, at the highest level, users, can issue queries against data in a database. Queries may be predefined (i.e., hard coded as part of an application) or may be generated in response to input (e.g., user input). Upon execution of a query against a database, a query result is returned to the requesting entity.","The present invention is generally related to data processing, and more specifically to retrieving data from a database.","One embodiment of the invention provides a computer-implemented method for retrieving query results. The method generally comprises receiving, from a requesting entity, a first abstract query comprising one or more logical fields defined by a first data abstraction model comprising a plurality of first logical field definitions mapped to physical fields of a first database in a first device, wherein one or more of the first logical fields definitions associate respective first logical fields to respective concepts of a predefined set of concepts, the concepts being standardized metadata.","The method further comprises converting the abstract query to a second abstract query comprising one or more logical fields defined by a second data abstraction model, the conversion comprising, for each logical field of the first abstract query, determining a corresponding logical field in the second data abstraction model, the corresponding logical field being associated with a same concept as the logical field of the first abstract query, wherein the second data abstraction model comprises a plurality of second logical field definitions mapping the second logical fields to physical fields of a second database in a second device, wherein one or more of the second logical fields definitions associate respective second logical fields to respective concepts of the predefined set of concepts. The method also comprises issuing the second abstract query against the second database to retrieve results for the second abstract query, and providing the results of the second abstract query to the requesting entity.","Another embodiment of the invention provides a computer readable medium containing a program which, when executed, performs an operation, generally comprising receiving, from a requesting entity, a first abstract query comprising one or more logical fields defined by a first data abstraction model comprising a plurality of first logical field definitions mapped to physical fields of a first database in a first device, wherein one or more of the first logical fields definitions associate respective first logical fields to respective concepts of a predefined set of concepts, the concepts being standardized metadata.","The operation further comprises converting the abstract query to a second abstract query comprising one or more logical fields defined by a second data abstraction model, the conversion comprising, for each logical field of the first abstract query, determining a corresponding logical field in the second data abstraction model, the corresponding logical field being associated with a same concept as the logical field of the first abstract query, wherein the second data abstraction model comprises a plurality of second logical field definitions mapping the second logical fields to physical fields of a second database in a second device, wherein one or more of the second logical fields definitions associate respective second logical fields to respective concepts of the predefined set of concepts. The operation also comprises issuing the second abstract query against the second database to retrieve results for the second abstract query, and providing the results of the second abstract query to the requesting entity.","Yet another embodiment of the invention provides a system, generally comprising a plurality of devices coupled via a network. Each device is generally configured to receive, from a requesting entity, a first abstract query comprising one or more logical fields defined by a first data abstraction model comprising a plurality of first logical field definitions mapped to physical fields of a first database in a first device, wherein one or more of the first logical fields definitions associate respective first logical fields to respective concepts of a predefined set of concepts, the concepts being standardized metadata.","Each device is further configured to convert the abstract query to a second abstract query comprising one or more logical fields defined by a second data abstraction model, the conversion comprising, for each logical field of the first abstract query, determining a corresponding logical field in the second data abstraction model, the corresponding logical field being associated with a same concept as the logical field of the first abstract query, wherein the second data abstraction model comprises a plurality of second logical field definitions mapping the second logical fields to physical fields of a second database in a second device, wherein one or more of the second logical fields definitions associate respective second logical fields to respective concepts of the predefined set of concepts. Each device is also configured to issue the second abstract query against the second database to retrieve results for the second abstract query, and provide the results of the second abstract query to the requesting entity.","Embodiments of the invention are generally related to data processing, and more specifically to retrieving results for a query from one or more devices coupled to a network. A first device may receive an abstract query including logical fields defined by a first data abstraction model and retrieve query results stored in the first device. The query may be sent to one or more other devices via the network. The one or more other devices may be configured to convert the abstract query to local abstract queries including logical fields defined in local data abstraction models. The local queries may be issued against local databases to retrieve additional results for the query.","In the following, reference is made to embodiments of the invention. However, it should be understood that the invention is not limited to specific described embodiments. Instead, any combination of the following features and elements, whether related to different embodiments or not, is contemplated to implement and practice the invention. Furthermore, in various embodiments the invention provides numerous advantages over the prior art. However, although embodiments of the invention may achieve advantages over other possible solutions and\/or over the prior art, whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus, the following aspects, features, embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim(s). Likewise, reference to \u201cthe invention\u201d shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim(s).","One embodiment of the invention is implemented as a program product for use with a computer system. The program(s) of the program product defines functions of the embodiments (including the methods described herein) and can be contained on a variety of computer-readable storage media. Illustrative computer-readable storage media include, but are not limited to: (i) non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM disks readable by a CD-ROM drive) on which information is permanently stored; (ii) writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive) on which alterable information is stored. Such computer-readable storage media, when carrying computer-readable instructions that direct the functions of the present invention, are embodiments of the present invention. Other media include communications media through which information is conveyed to a computer, such as through a computer or telephone network, including wireless communications networks. The latter embodiment specifically includes transmitting information to\/from the Internet and other networks. Such communications media, when carrying computer-readable instructions that direct the functions of the present invention, are embodiments of the present invention. Broadly, computer-readable storage media and communications media may be referred to herein as computer-readable media.","In general, the routines executed to implement the embodiments of the invention, may be part of an operating system or a specific application, component, program, module, object, or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine-readable format and hence executable instructions. Also, programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition, various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and\/or implied by such nomenclature.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","101","102","102","101","102","102","140","140","140","101","102","102"],"i":["a","d ","a ","a ","a"]},"Each of the servers  may be coupled with each other via a network . Like network , network  may also be any one of  may be any one or a local area network (LAN), a wide area network (WAN), and\/or the Internet. In a particular embodiment of the invention the network  may be a peer-to-peer network. A peer-to-peer network is defined herein as any network comprising two or more interconnected devices that are configured to share their respective data, resources, and the like. The devices associated with network  may be coupled in any reasonable manner, whether known or unknown, to form any type of PP network. Exemplary P2P network types include centralized P2P network, decentralized P2P network, structured P2P network, unstructured P2P network, hybrid P2P network, and the like.","Regardless of the type of PP network , generally, any server  connected to the P2P network  may be configured to independently collect, store, analyze and modify data. Furthermore, the data stored on any server  may be transferred to any other server  via the network . For example, in one embodiment, each server  may be configured to issue queries to one or more other servers  via the network  to retrieve desired data.","While two separate networks  and  are illustrated in , in alternative embodiments, client computers  and the servers  may be coupled to the same network, for example, the Internet.","In one embodiment of the invention, in response to receiving a query from the client computer , server may be configured to retrieve query results that are stored therein. The server may also be configured to transfer the query to one or more other servers  via the network , retrieve further query results stored in the one or more other server , and provide the query results to the client computer . Retrieving query results from one or more servers  coupled with the P2P network  is described in greater detail below.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 2","FIG. 1"],"b":["101","102","102","102","101","211","220","212","216","217","218","219","217","101","218","217","218","217"],"i":["a","d "]},"The network interface device  may be any entry\/exit device configured to allow network communications between the client computers  and server  via the network . For example, the network interface device  may be a network adapter or other network interface card (NIC).","Storage  is preferably a Direct Access Storage Device (DASD). Although it is shown as a single unit, it could be a combination of fixed and\/or removable storage devices, such as fixed disc drives, floppy disc drives, tape drives, removable memory cards, or optical storage. The memory  and storage  could be part of one virtual address space spanning multiple primary and secondary storage devices.","The memory  is preferably a random access memory sufficiently large to hold the necessary programming and data structures of the invention. While memory  is shown as a single entity, it should be understood that memory  may in fact comprise a plurality of modules, and that memory  may exist at multiple levels, from high speed registers and caches to lower speed but larger DRAM chips.","Illustratively, the memory  contains an operating system . Illustrative operating systems, which may be used to advantage, include Linux (Linux is a trademark of Linus Torvalds in the US, other countries, or both) and Microsoft's Windows\u00ae. More generally, any operating system supporting the functions disclosed herein may be used.","Memory  is also shown containing a query program  which, when executed by CPU , provides support for issuing queries to server . In one embodiment, the query program  may include a web-based Graphical User Interface (GUI), which allows the user to display Hyper Text Markup Language (HTML) information. The GUI may be configured to allow a user to create a query, issue the query against a server , and display the results of the query. More generally, however, the query program may be a GUI-based program capable of rendering any information transferred between the client computer  and the server .","The server  may be physically arranged in a manner similar to the client computer . Accordingly, the server  is shown generally comprising a CPU , memory , and a storage device , coupled with one another by a bus . Memory  may be a random access memory sufficiently large to hold the necessary programming and data structures that are located on server .","The server  may generally be under the control of an operating system  shown residing in memory . Examples of the operating system  include IBM OS\/400\u00ae, UNIX, Microsoft Windows\u00ae, Linux and the like. More generally, any operating system capable of supporting the functions described herein may be used.","The memory  may further include one or more applications  and an abstract query interface . The applications  and the abstract query interface  may be software products comprising a plurality of instructions that are resident at various times in various memory and storage devices in the computer system . When read and executed by a processor  in the server , the applications  and the abstract query interface  cause the computer system  to perform the steps necessary to execute steps or elements embodying the various aspects of the invention.","The applications  (and more generally, any requesting entity, including the operating system ) may be configured to issue queries against a database  (shown in storage ). The database  is representative of any collection of data regardless of the particular physical representation. By way of illustration, the database  may be organized according to a relational schema (accessible by SQL queries) or according to an XML schema (accessible by XML queries). However, the invention is not limited to a particular schema and contemplates extension to schemes presently unknown. As used herein, the term \u201cschema\u201d generically refers to a particular arrangement of data.","In one embodiment, the queries issued by the applications  are defined according to an application query specification  included with each application . The queries issued by the applications  may be predefined (i.e., hard coded as part of the applications ) or may be generated in response to input (e.g., user input). In either case, the queries (referred to herein as \u201cabstract queries\u201d) are composed using logical fields defined by the abstract query interface . In particular, the logical fields used in the abstract queries are defined by a data abstraction model  of the abstract query interface . The abstract queries are executed by a runtime component  which transforms the abstract queries into a form consistent with the physical representation of the data contained in the database . The application query specification  and the abstract query interface  are further described with reference to .","The applications  may also include a query manager program . Query manager  may be configured to receive a query from a client computer , or an application , receive results for the query, and provide the query results to the requesting client computer  or application . In one embodiment of the invention retrieving query results may involve retrieving query results from the database , as described above. In some embodiments, the query manager  may be configured to transfer a received query to one or more other servers  via the P2P network , and retrieve query results from the one or more other servers , as will be discussed in greater detail below.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 3","b":["300","240","302","242","302","227","242"]},"The logical fields specified by the application query specification  and used to compose the abstract query  may be defined by the data abstraction model . In general, the data abstraction model  may expose information as a set of logical fields that may be used within a query (e.g., the abstract query ) issued by the application  to specify criteria for data selection and specify the form of result data returned from a query operation. The logical fields may be defined independently of the underlying data representation being used in the database , thereby allowing queries to be formed that are loosely coupled to the underlying data representation. Abstract queries are described in greater detail in co-pending U.S. patent application Ser. No. 11\/226,181, entitled IMPROVED APPLICATION PORTABILITY AND EXTENSIBILITY THROUGH DATABASE SCHEMA AND QUERY ABSTRACTION, filed Sep. 14, 2005, which is incorporated herein by reference in its entirety.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 3"],"b":["148","148","408","410","412","410","412"],"i":["a ","a "]},"The access methods may associate logical field names  to a particular physical data representation  (See ) in a database . By way of illustration, two data representations are shown in , an XML data representation , and a relational data representation . However, the physical data representation indicates that any other data representation, known or unknown, is contemplated. In one embodiment, a single data abstraction model  may contain field specifications with associated access methods for two or more physical data representations . In an alternative embodiment, a separate data abstraction model  may be provided for each separate data representation .","Any number of access method types is contemplated depending upon the number of different types of logical fields to be supported. In one embodiment, access methods for simple fields, filtered fields and composed fields are provided. For example, field specifications for Field A exemplify a simple field access method . Simple fields are mapped directly to a particular entity in the underlying physical data representation (e.g., a field mapped to a given database table and column). By way of illustration, the simple field access method , shown in  maps the logical field name (\u2018LastName\u2019) to a column named \u201cIname\u201d in a table named \u201cTest Table,\u201d as illustrated.","The field specification for Field X exemplifies a filtered field access method . Filtered fields identify an associated physical entity and provide rules used to define a particular subset of items within the physical data representation. For example, the filtered field access method may map the logical field name to a physical entity in a column named \u201cTestVal\u201d in a table named \u201cTest Table\u201d and may define a filter for the test values. For example, in one embodiment, the filter may define a numerical range in which the test values may be deemed valid.","A composed field access method may also be provided to compute a logical field from one or more physical fields using an expression supplied as part of the access method definition. In this way, information which does not exist in the underlying data representation may be computed. For example, a sales tax field may be composed by multiplying a sales price field by a sales tax rate.","It is contemplated that the formats for any given data type (e.g., dates, decimal numbers, etc.) of the underlying data may vary. Accordingly, in one embodiment, the field specifications  may include a type attribute which reflects the format of the underlying data. However, in another embodiment, the data format of the field specifications  is different from the associated underlying physical data, in which case an access method is responsible for returning data in the proper format assumed by the requesting entity.","Thus, the access method must know what format of data is assumed (i.e., according to the logical field) as well as the actual format of the underlying physical data. The access method may then convert the underlying physical data into the format of the logical field. By way of example, the field specifications  of the data abstraction model  shown in  are representative of logical fields mapped to data represented in the relational data representation . However, other instances of the data abstraction model  map logical fields to other physical data representations, such as XML.","Each field  of the data abstraction model  may also include a concept code . For example, the concept code for field may be  as illustrated in . Concept code  may associate a respective field  to a predefined universal concept. For example, field illustrated in  is associated with a column containing last names. Accordingly, field is titled \u201cLast Name\u201d and associated with the column \u201cI_name\u201d in the table \u201cTest Table\u201d. However, the concept \u201clast name\u201d may have several synonyms. For example, in some systems last names may be identified as a \u201csurnames\u201d or \u201cfamily names\u201d. The concept code  may provide a means for identifying a universal concept, regardless of how it is specifically labeled in a given system. Accordingly, concept codes may also be referred to herein as \u201centity resolution attributes\u201d in that these attributes are applied to resolve one local field definition (for a first data abstraction model) to another local field definition (for a second data abstraction model) on the basis of a standardized field definition.","For example, referring to , the data abstraction model in server may have a logical field named \u201cLast Name\u201d and the data abstraction model in server may have a logical field named \u201cFamily Name\u201d. The concept code for the field \u201cLast Name\u201d in server and the concept code for the field \u201cFamily Name\u201d in server may both be  because they both refer to the same concept.","While a numerical concept code  is illustrated in , in alternative embodiments any combination of alphabets, numbers, words, phrases, symbols, and the like may be used to define concept codes. In one embodiment of the invention, the concept code  may be derived from a recognized universal vocabulary, such as, for example, a standardized industry-specific vocabulary. Exemplary standardized universal vocabularies may include, among others, UMLS (Universal Medical Language System), MeSH (Medical Subject Headings), SnoMed (Systematic Nomenclature of Medicine), and the like.","Furthermore, while standardized universal vocabularies are described herein with reference to concept codes , in alternative embodiments, the concept codes  may be generated for internal use by groups of individuals and\/or organizations. For example, while working on a project, one or more entities working on the project may agree upon a standardized set on concepts and respective concept codes for categorizing data. Thereafter, each entity may then generate their own respective data abstraction models to store data related to their respective project tasks in their own respective server or system. The data abstraction model generated by each entity may be different. For example, each entity may define its own logical fields in a respective data abstraction model which may be distinct from the logical fields defined by other entities. However, the concept codes used to define fields in the respective data abstraction models may be derived from the agreed upon set of concept codes.","In one embodiment of the invention, the concept codes may facilitate retrieving query results from a plurality of devices in a P2P network.  illustrates another exemplary system  according to an embodiment of the invention. System  may be similar to system  illustrated in , and therefore may include at least one client computer  and a plurality of servers , for example, servers -coupled to each other via the P2P network . As illustrated in , each of the servers -may include a respective data abstraction model -. The data abstraction models -may define logical fields that may be used to compose abstract queries that may be issued against databases in respective servers -","In one embodiment of the invention, the servers -may be peer devices operated by entities working on a collaborative project. For example, in a particular embodiment, each of the servers -may be associated with a respective university for storing research data. In alternative embodiments, each of the servers -may belong to a respective hospital or a department of a hospital, wherein each server  stores patient records, medical research data, and the like. More generally, each of the servers -may belong to one or more entities, whether individuals or organizations, that collect and store data in an independent and decentralized manner.","A decentralized approach to collecting and storing data may be advantageous because it may allow each entity to collect and store the data without being subject to each others' data collection procedures, data categorizations, analysis and the like. Therefore, the decentralized data collection and storing methods may facilitate a wide variety of entities to be seamlessly integrated into a collaborative project.","However, the independent data collection and storage may also result in difficulties while sharing data between the entities. For example, while performing research on a particular disease, a hospital or university may desire data collected by one or more other hospitals and\/or universities to aid the research. However, different categorization of data in each hospital or university server may make it difficult to retrieve such data. For example, as described above, the DAM may have a logical field named \u201cLast Name\u201d and DAM may have a logical field named \u201cFamily Name\u201d. Furthermore, the DAM may have a logical field named \u201cSurname\u201d. Therefore, retrieving data related to last names from servers -may require separate abstract queries to be written for each of the servers -. Manually writing multiple abstract queries and combining the query results may be a tedious, inefficient and error prone process.","In one embodiment of the invention, the fields in the data abstraction models -may have similar concepts but may have varying logical field definitions. Embodiments of the invention provide an automated method for retrieving query results from a plurality of servers  coupled to a P2P network  using concept codes in response to receiving a query. For example, as illustrated in , an abstract query  may be sent from a client computer  to server . Alternatively an application program  of server (see ) may generate an abstract query . The query  may be received by the query manager of the server . Query manager may issue the abstract query  against a database associated with server to retrieve at least some of the results of the query.","Furthermore, the query manager may send the abstract query  to one or more of the servers -to request further results for the abstract query , as illustrated in . For example, in one embodiment, the server may include a record including a list of the peer computers -. Accordingly, the query manager may be configured to access the record to determine peer computers prior to sending the abstract query  to the peer servers -. In one embodiment, the query manager may send the abstract query  to all known peers servers. Alternatively, in some embodiment, the query manager may send the abstract query  to a subset of the known peers.","The abstract query  may be received by each of query managers -at the servers -. Each of the query managers -may convert the abstract query  to a local abstract query based on concept codes as will be described in greater detail below. The query managers -may issue the local abstract queries against respective databases associated with the servers -to retrieve further results for the abstract query .","In one embodiment, the query results from each of the servers -may be transferred to the server via the P2P network , as illustrated in . The query results from each of the servers -may be received by the query manager . In one embodiment, the query manager may combine the results received from the servers -with the query results retrieved from the server and provide the results to a requesting client  or application program . Alternatively, the query manager may be configured to average and\/or normalize the set of results received from the server  -","In some embodiments, the abstract query  may include one or more clauses that determine how query results are to be presented. For example, in a particular embodiment, the abstract query  may include a sort clause that, for example, requires that query results be presented in an ascending or descending order in relation to a particular results field. Accordingly, in some embodiments, the query manager may be configured to perform one or more operations, for example, sorting, on the combined result set prior to presenting the query results to a requesting entity. In some embodiments, the query manager may be configured to provide source identification data of the query results to a requesting entity. For example, the query manager may be configured to identify the particular server -from which a particular query result is derived. The identification data may be displayed in an identification field that may be included in the query results.","In one embodiment of the invention, the abstract query  received by server  from a client  or an application program  of server may include logical fields defined by the abstraction model of server . An exemplary abstract query  is provided below:",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT First Name"]},{"entry":[{},"WHERE Last Name = \u201cSmith\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The abstract query  provided above may be configured to retrieve first names of individuals whose last name is \u201cSmith\u201d. Illustratively, the fields \u201cFirst Name\u201d and \u201cLast Name\u201d may be logical fields defined by the data abstraction model of server ","In one embodiment of the invention, abstract query  may be transferred to the one or more other servers -by query manager along with concept codes associated with each logical field of the abstract query . In one embodiment, the concept codes may be encoded into the abstract query . For example, the query manager may transfer the concept codes for \u201cLast Name\u201d and \u201cFirst Name\u201d along with the abstract query  provided above to the one or more other servers -","Upon receiving the abstract query  from server , each of the one or more query managers -may be configured to convert the abstract query  to a local abstract query based on the concept codes associated with each logical field of abstract query . For example, the DAM of server may include the logical fields \u201cFamily Name\u201d and \u201cGiven Name\u201d. The concept codes associated with the logical fields \u201cLast Name\u201d and \u201cFirst Name\u201d of DAM of server may be the same as the concept codes associated with the logical fields \u201cFamily Name\u201d and \u201cGiven Name\u201d of DAM of server . Accordingly, the query manager of server may be configured to generate the following local abstract query upon receiving the abstract query  provided above:",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT Given Name"]},{"entry":[{},"WHERE Family Name = \u201cSmith\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Local abstract queries may be similarly generated at each of the servers  receiving the abstract query  to retrieve results. The results may then be transferred to the server via the network . Upon receiving the query results from the server and one or more other servers -, query program of server  may provide the results to a requesting client computer  or application .","In one embodiment of the invention, providing the results to a requesting client computer or application may involve performing a union operation to combine results received from each server -. However, any other reasonable method of integrating results received from multiple sources, for example, concatenation, may be also used. In alternative embodiments, the results from each source may be provided separately, for example, in separate files, or separated within a given results file. In one embodiment, the results from each of the servers  may be displayed in a GUI screen at the client computer .","In one embodiment of the invention, one or more servers  may receive the query , but may not have any results for the query. For example, server may receive abstract query  described above, but may not have a logical field corresponding to the concept code of \u201cLast Name\u201d. Accordingly, the server may be configured to respond to the server with a \u201cNo result\u201d or error message.","In one embodiment of the invention, the query manager of server may be configured to wait until results (or other response) are received from each of the one or more servers -before providing the query results to the requesting client computer  or application . In alternative embodiment, query manager may wait for a predefined period of time to receive results. If the results are not received from all servers  within the predefined period of time, the query program may be configured to provide only results received within the predefined period of time.","For purposes of illustration only,  shows the query  being sent from server to each of the servers -. However, more generally, the query  may be sent from any server , to any one or more other servers  coupled to the P2P network . For example, each of the servers  of  may be configured to receive abstract queries from respective client computers  or application programs  and send the query to one or more other servers  as described above. Furthermore, in some embodiments the client computer  may be directly coupled with the P2P network  and configured to issue a query  to one or more servers . Accordingly, in some embodiments, the client computer  may include similar components as the servers , for example, a data abstraction model, query manager, and the like.","Furthermore, while embodiments are described herein with respect to a client-server model, this model is merely used for purposes of illustration. Persons skilled in the art will recognize other communication paradigms, all of which are contemplated as embodiments of the present invention. Indeed, as pointed out above, the server computers  may in fact be related as peers, rather than computers of in a client-server paradigm. Further, even assuming a client-server model, a given computer may behave as either a client or a server at different times, depending on the context. As such, the terms \u201cclient\u201d and \u201cserver\u201d are not to be taken as limiting.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 6","FIG. 6"],"b":["600","600","101","102","101","102","102","102","190","102","102","102","191"],"i":["a","a ","b ","b ","c ","d "]},"As illustrated in , an abstract query  may be sent from the client computer  to the server . Server may send the abstract query to server via the network , as discussed above. The server may retrieve results for the abstract query , for example, by converting the abstract query  to a local query, as discussed above. In addition, the query program of the server may transfer the query  to one or more other peers and via the P2P network  to retrieve further results for the query . For example, server may include a record including a list of peer servers associated with the server . Accordingly, query program may access the record to determine its peer servers, and send the abstract query  to one or more of the peers listed in the record.","The server may receive the results from the servers and via network , and combine the results with results from the server before sending the results to the server via the network . In an alternative embodiment, the server may transfer its own results to the server via network , and then subsequently transfer the results from servers and to the server as they are received.","In some embodiments, each of servers and may be coupled with one or more other networks not shown in . Accordingly, the servers and may continue to send the query  to respective peers via the one or more other networks such that the query  cascades through multiple networks and multiple servers  to retrieve a comprehensive and complete set of results fro the query .","The transfer of an abstract query from one server  to one or more other servers  over a network, for example, networks  and , is referred to herein as a \u201cnetwork hop\u201d. In one embodiment of the invention, a server  or client  initiating transfer of an abstract query  to one or more other servers  may be configured to define a maximum network hops for the abstract query. For example, if the maximum hop for the query is set to 1, the abstract query  may only be sent from the server to the server via the network  (i.e. one network hop), but may not be sent from the server to the servers and ","In one embodiment, the abstract query  may include the maximum hop value encoded therein. Furthermore, the abstract query  may also include a current number of hops encoded therein. Each server  may be configured to update the current hop value encoded in the abstract query  before sending the abstract query  to one or more other servers  via a P2P network. If a server  receives an abstract query  wherein the maximum hop value is equal to the current hop value, the server  may not send the query to any further servers .","In some embodiments, a server  may be coupled with multiple P2P networks. Therefore, it is possible that the server  may receive the same query  from each of the multiple P2P networks. However, providing query results each time the abstract query is received may result in a requesting client computer  or server  receiving duplicate copies of the query results. Therefore, in one embodiment of the invention, the query  may include a unique query ID encoded therein. Therefore, if a server  receives an abstract query having the same query ID as a previously received abstract query, the server  may simply ignore the abstract query or explicitly signal to the sending server that no action will be taken.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 7","b":["244","710","101","240","102","102"]},"In step  the query manager  may issue the abstract query against a database associated with the first server  and receive query results. In step , the query manager  may send the abstract query to one or more second servers  via a network. The query manager may then receive results from the abstract query from one or more of the second servers  via the network in step . In step , the query manager  may provide the results received from the first server and one or more second servers to the requesting client computer or application .",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 8","b":["244","810","830","244"]},"Converting the received abstract query to a local abstract query may involve determining concept codes associated with each of the logical fields associated with the received abstract query. The concept codes may be, in one embodiment, received with the abstract query. The query manager  may identify logical fields in the second data abstraction model associated with the concept codes and generate the local abstract query based on the identified logical fields. In step , the query manager  may issue the local abstract query against a local database to retrieve query results. In step , the query manager may provide the query results to a requesting server  or client .","In some cases an abstract query received by a server  may contain one or more logical fields with concept codes that do not have corresponding logical fields in a local data abstraction model. For example, the exemplary abstract query  includes a logical field \u201cLast Name\u201d. As illustrated in , the logical field \u201cLast Name\u201d may have a concept code . It is possible that one or more of the servers  (see ) may not have a logical field corresponding to the concept code  in their respective data abstraction model.","For example, data abstraction model of server (see ) may not have a logical field that is associated with concept code . Therefore, the server may not be able to provide results for the abstract query  because, as illustrated in the exemplary query above, the logical field \u201cLast Name\u201d is a part of the query condition.","While it is possible that a particular server  may not have logical fields in their respective data abstraction models that are associated with a specifically identified concept code, it may be possible that the server  contains logical fields associated with related concepts. For example, in one embodiment, the query  may include a logical field \u201cFelines\u201d with a concept code . The server may not contain any logical fields associated with the concept code  in the data abstraction model . However, the data abstraction model may include a logical field \u201cTigers\u201d with a concept code . Because \u201cTigers\u201d are a type of \u201cFelines\u201d, the data associated with the logical field \u201cTigers\u201d may be relevant to the query. Accordingly, retrieving data associated with a logical field of a related concept may be desirable.","In some cases, even if the logical field \u201cFelines\u201d associated with the concept code  is found, it may be desirable to notify the user of the existence of the logical field \u201cTigers\u201d associated with concept code . By providing such notification, the user may be able to create a more robust query to extract desired results. For example, the user may modify the abstract query  to include the logical field \u201cTigers\u201d. The modified abstract query  may retrieve additional desired results from server ","In some embodiments of the invention, providing query results may include providing, along with the query results, metadata associated with concepts related to the concepts identified in the abstract query. By providing such metadata, a user or application may be able to reposition the query to retrieve results from logical fields associated with the related concepts. Alternatively, in some embodiments, a server  receiving a query may be configured to automatically reposition the query to retrieve results for logical fields associated with related concepts. Repositioning the query, as described herein, may generally involve changing, adding, subtracting, or otherwise modifying the query and\/or query conditions so that the modified query retrieves a different set of results.","Any number of methods for identifying related concepts is contemplated. For example, in some embodiments concepts may have predefined relations to one another. For example, a first concept may be defined as a synonym of a second concept. Alternatively, the first concept may be defined as a type, use, or the like, of the second concept. In a particular embodiment, the concepts may have predefined relations to one another as defined by a hierarchical structure such as, for example, a data tree, wherein a position of the concept in the data tree relative to one or more other concepts defines the relationship between the concepts. In some embodiments, the relationship between concepts may be derived from a recognized universal industry standard. For example, Medical Subject Headings (MeSH) includes medical terminology known as descriptors arranged in a hierarchical manner.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 9","b":["900","900","102"],"i":["a","d"]},"In an alternative embodiment, if a first concept is synonym of a second concept identified in a received abstract query, a logical field associated with the second concept may be used to generate a local query. For example, the query  in  may include a logical field associated with Concept A. The data abstraction model of server may include one or more logical fields associated with Concept B, but no logical fields associated with Concept A. Because Concept B is a synonym of Concept A, the query manager may simply use the logical fields associated with Concept B to compose a local abstract query to retrieve results for the abstract query , even though the concept codes for Concept A and Concept B are different.","Referring back to , Concept C is defined as a type of Concept A in the structure . In other words, Concept C may be a subset of Concept A. For example, as discussed above, \u201cTigers\u201d are a type of \u201cFelines\u201d. Also illustrated in  is Concept D, which is defined as a use of Concept A. For example, \u201cIntegrated Circuits\u201d may be a use related to \u201cSilicon\u201d. As with synonyms, in one embodiment, metadata regarding concepts identified as types or uses may be sent to a requesting entity along with query results. Alternatively, a query program  may generate a local query based on logical fields associated with concepts that are types or uses of concepts identified in a received query .","While synonyms, types and uses are described herein as means for determining related concepts, in alternative embodiments, any other reasonable means for determining relationship between concepts may be used. For example, in some embodiments the relative position of the concepts in the hierarchical structure  may determine whether concepts are related. For example,  illustrates a Concept E which is defined as a type of Concept D. In some embodiments, related concepts for any particular concept may include concepts that are a predetermined number of levels from the concept. For example, if a threshold of 1 is used, Concept C may be a related to Concept A but Concept D will not be related to Concept A.",{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIG. 10","FIG. 9"],"b":["244","1010","1020","244","244","900","1030"]},"Alternatively, in some embodiments, the query manager  may generate a local abstract query based on logical fields associated with one or more received concept codes and one or more related concept codes. The local abstract query may be issued against a local database to retrieve query results, which may be provided to the requesting entity.","The data abstraction models -illustrated in  may each be different, including respective distinct logical fields. Therefore, the logical fields of abstract query  which may be based on data abstraction model , may be significantly different than logical fields in data abstraction models -. However, access to the distinct logical fields in data abstraction models -may be desirable while composing the abstract query  because the distinct logical fields may contain desired data.","It may be possible that distinct logical fields in different servers  refer to the same concept. For example, data abstraction model of server may include a logical field \u201cDesktops\u201d that is defined by a concept code associated with \u201ccomputers\u201d. Data abstraction model of server may include a logical field \u201cLaptops\u201d that is also defined by the concept code associated with \u201ccomputers\u201d. Because the data abstraction model only includes the logical field \u201cDesktops\u201d, query  may be limited to that particular logical field. However, the logical field \u201cLaptops\u201d may also be desirable while composing query  because desktops and laptops are both associated with the same concept, i.e., computers.","In one embodiment of the invention, the query managers -of each of servers -may be configured to identify distinct logical fields in each others' data abstraction models -, and copy the distinct logical fields into a respective local data abstraction model. For example, query manager may be configured to identify distinct logical fields in the data abstraction models -and copy the distinct logical fields into the data abstraction model . Therefore, the distinct logical fields may be available for composing the query .","In one embodiment, identifying the distinct logical fields to be copied may involve determining distinct logical fields that have the same concept code as a logical field in a local data abstraction model. For example, query manager may determine that the logical field \u201cLaptops\u201d in the data abstraction model has the same concept code as the logical field \u201cDesktops\u201d in the local data abstraction model . Therefore, the logical field \u201cLaptops\u201d may be copied into the data abstraction model . In some embodiments, the query manager  may also be configured to copy logical fields associated with concepts related to a concept of a local logical field. Determining related concepts is described in greater detail in the previous section.","While logical fields from one or more peer servers  may be copied into a local data abstraction model, the copied logical fields may not map to physical fields in a local database. This may be because there may be no physical data corresponding to the copied logical field in the server . Therefore, queries composed using the copied logical fields and issued against the local database may fail. However, the query may still be transferred to peer servers  to retrieve query results therefrom. For example, if the abstract query  is composed with the logical field \u201cLaptops\u201d copied from data abstraction model , the abstract query may fail to retrieve results if issued against a database at server because there may be no physical data corresponding to the copied logical field \u201cLaptops\u201d in server . However, the abstract query  may be transferred, as described above, to the server via the network  by the query manager , from where query results may be retrieved.","In one embodiment of the invention, the query manager  may be configured to periodically seek distinct logical fields as described above from data abstraction models in peer servers . In alternative embodiments, the distinct logical fields may be discovered during interaction between the servers . For example, as described in the previous section, the servers  may be configured to transfer metadata regarding concepts, concept codes, and logical fields to each other in response to receiving an abstract query. The metadata may be analyzed to determine whether distinct desirable logical fields exist in peer servers .","In one embodiment of the invention, the query manager  may be configured to periodically validate logical fields in a local data abstraction model . For example, query manager may verify that a copied logical field in data abstraction model still exists in a foreign data abstraction model, for example, data abstraction model , from which the logical field was copied. If the copied logical field no longer exists in the foreign data abstraction model, the query manager may be configured to remove the copied logical field from the local data abstraction model.","By providing a means for converting an abstract query containing logical fields defined in a first data abstraction model to an abstract query containing logical fields defined in a second data abstraction model based on concept codes associated with the logical fields, embodiments of the invention allow query results to be retrieved from multiple independent systems more efficiently.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features, advantages and objects of the present invention are attained and can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to the embodiments thereof which are illustrated in the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3","b":"300"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
