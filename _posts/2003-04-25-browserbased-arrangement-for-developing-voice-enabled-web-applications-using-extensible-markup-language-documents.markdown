---
title: Browser-based arrangement for developing voice enabled web applications using extensible markup language documents
abstract: A unified web-based voice messaging system provides voice application control between a web browser and an application server via an hypertext transport protocol (HTTP) connection on an Internet Protocol (IP) network. The application server executes the voice-enabled web application by runtime execution of a first set of extensible markup language (XML) documents that define the voice-enabled web application to be executed. The application server generates an HTML form specifying selected application parameters from an XML document executable by the voice application. The HTML form is supplied to a browser, enabling a user of the browser to input or modify application parameters for the corresponding XML document into the form. The application server inserts the received input application parameters into the XML document, and stores the document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06954896&OS=06954896&RS=06954896
owner: Cisco Technology, Inc.
number: 06954896
owner_city: San Jose
owner_country: US
publication_date: 20030425
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a divisional of application Ser. No. 09\/559,637, filed Apr. 28, 2000 now U.S. Pat. No. 6,578,000, incorporated in its entirety herein by reference.","This application claims priority from provisional application No. 60\/152,316, filed Sep. 3, 1999, the disclosure of which is incorporated in its entirety herein by reference.","1. Field of the Invention","The present invention relates to generating and executing voice enabled web applications within a hypertext markup language (HTML) and hypertext transport protocol (HTTP) framework.","2. Description of the Related Art","The evolution of the public switched telephone network has resulted in a variety of voice applications and services that can be provided to individual subscribers and business subscribers. Such services include voice messaging systems that enable landline or wireless subscribers to record, playback, and forward voice mail messages. However, the ability to provide enhanced services to subscribers of the public switched telephone network is directly affected by the limitations of the public switched telephone network. In particular, the public switched telephone network operates according to a protocol that is specifically designed for the transport of voice signals; hence any modifications necessary to provide enhanced services can only be done by switch vendors that have sufficient know-how of the existing public switched telephone network infrastructure.","An open standards-based Internet protocol (IP) network, such as the World Wide Web, the Internet, or a corporate intranet, provides client-server type application services for clients by enabling the clients to request application services from remote servers using standardized protocols, for example hypertext transport protocol (HTTP). The web server application environment can include web server software, such as Apache-based software available from The Apache Software Foundation, implemented on a computer system attached to the IP network. Web-based applications are composed of HTML pages, logic, and database functions. In addition, the web server may provide logging and monitoring capabilities.","In contrast to the public switched telephone network, the open standards-based IP network has enabled the proliferation of web based applications written by web application developers using ever increasing web development tools. Hence, the ever increasing popularity of web applications and web development tools provides substantial resources for application developers to develop robust web applications in a relatively short time and an economical manner. However, one important distinction between telephony-based applications and web-based applications is that telephony-based applications are state aware, whereas web-based applications are stateless.","In particular, telephony applications are state aware to ensure that prescribed operations between the telephony application servers and the user telephony devices occur in a prescribed sequence. For example, operations such as call processing operations, voicemail operations, call forwarding, etc., require that specific actions occur in a specific sequence to enable the multiple components of the public switched telephone network to complete the prescribed operations.","The web-based applications running in the IP network, however, are state-less and transient in nature, and do not maintain application state because application state requires an interactive communication between the browser and back-end database servers accessed by the browsers via a HTTP-based web server. However, an HTTP server provides asynchronous execution of HTML applications, where the web applications in response to reception of a specific request in the form of a URL from a client, instantiate a program configured for execution of the specific request, send an HTML web page back to the client, and terminate the program instance that executed the specific request. Storage of application state information in the form of a \u201ccookie\u201d is not practical because some users prefer not to enable cookies on their browser, and because the passing of a large amount of state information as would normally be required for voice-type applications between the browser and the web application would substantially reduce the bandwidth available for the client.","Commonly-assigned, copending application Ser. No. 09\/480,485, filed Jan. 11, 2000, entitled Application Server Configured for Dynamically Generating Web Pages for Voice Enabled Web Applications, the disclosure of which is incorporated in its entirety herein by reference, discloses an application server that executes a voice-enabled web application by runtime execution of extensible markup language (XML) documents that define the voice-enabled web application to be executed. The application server includes a runtime environment that establishes an efficient, high-speed connection to a web server. The application server, in response to receiving a user request from a user, accesses a selected XML page that defines at least a part of the voice application to be executed for the user. The XML page may describe any one of a user interface such as dynamic generation of a menu of options or a prompt for a password, an application logic operation, or a function capability such as generating a function call to an external resource. The application server then parses the XML page, and executes the operation described by the XML page, for example dynamically generating an HTML page having voice application control content, or fetching another XML page to continue application processing. In addition, the application server may access an XML page that stores application state information, enabling the application server to be state-aware relative to the user interaction. Hence, the XML page, which can be written using a conventional editor or word processor, defines the application to be executed by the application server within the runtime environment, enabling voice enabled web applications to be generated and executed without the necessity of programming language environments.","Hence, web programmers can write voice-enabled web applications, using the teachings of the above-incorporated application Ser. No. 09\/480,485, by writing XML pages that specify respective voice application operations to be performed. The XML documents have a distinct feature of having tags that allow a web browser (or other software) to identify information as being a specific kind or type of information. In particular, commonly-assigned, copending application Ser. No. 09\/501,516, filed Feb. 1, 2000 entitled Arrangement for Defining and Processing Voice Enabled Web Applications Using Extensible Markup Language Documents, the disclosure of which is incorporated in its entirety herein by reference, discloses an arrangement for defining a voice-enabled web application using extensible markup language (XML) documents that define the voice application operations to be performed within the voice application. Each voice application operation can be defined as any one of a user interface operation, a logic operation, or a function operation. Each XML document includes XML tags that specify the user interface operation, the logic operation and\/or the function operation to be performed within a corresponding voice application operation, the XML tags being based on prescribed rule sets that specify the executable functions to be performed by the application runtime environment. Each XML document may also reference another XML document to be executed based on the relative position of the XML document within the sequence of voice application operations to be performed. The XML documents are stored for execution of the voice application by an application server in an application runtime environment.","Hence, the XML document described in the above-incorporated application Ser. No. 09\/501,516, which can be written using a conventional editor or word processor, defines the application to be executed by the application server within the runtime environment, enabling voice enabled web applications to be generated and executed without the necessity of programming language environments.","Conventional application development environments maintain a substantial distinction between application use and application development. In particular, most applications are developed either by writing source code using a conventional programming language and compiling the written code into executable format, or using a stand-alone development tool that generates the required application. After the application has been developed into executable code, the executable code is then executed by a processing system for testing prior to actual use by subscribers. The distinction between application use and application development hinders efficiency in application development, since a developer is unable to obtain immediate feedback from adding any changes to an application. Hence, an application developer having discovered an undesirable result in the application during execution typically needs to retrace the executable code to locate the cause of the undesirable result, slowing the application development process.","There is a need for an arrangement that enables a user to develop voice enabled web applications using a browser, where the user can concurrently generate new voice application operations and test the voice application operations executed by an application server.","There also is a need for an arrangement that enables voice applications to be defined using extensible markup language (XML) documents in a manner that provides flexible control of the voice applications. In particular, there is a need for an arrangement that enables the modification of existing application parameters of a voice-enabled web application, or the addition of new application parameters, without affecting unmodified application parameters.","These and other needs are attained by the present invention, where an application server that executes a voice application defined by XML documents dynamically generates an HTML form specifying selected application parameters from an XML document executable by the voice application. The HTML form is supplied to a browser, enabling a user of the browser to input or modify application parameters for the corresponding XML document into the form. The application server, upon receiving the form from the web browser, inserts the input application parameters into the XML document, and stores the application document for execution. Since voice applications are executed by the application server based on runtime parsing of the XML document, a user can concurrently use the HTML form to create or modify an XML document, post the HTML to the application server, and then execute the XML document to validate the inputs supplied to the HTML form. Hence, a user can easily generate XML documents and verify the corresponding voice application operation using a forms-based application development methodology.","One aspect of the present invention provides a method in an application server for developing an executable voice application. The method includes generating a hypertext markup language (HTML) document that specifies a form having at least one entry field for specifying an application parameter, and sending the HTML document to a web browser. The method also includes receiving the form from the web browser, the received form having an input application parameter in the entry field, inserting the input application parameter into an extensible markup language (XML) document configured for defining an operation of the executable voice application, and storing the XML document for execution by the application server. Generation of an HTML document that specifies a form for entry of application parameters enables an application developer to use an HTML forms representation of the application defining XML documents. Hence, an application developer can develop an XML-based voice web application without the necessity of any experience in writing code in existing programming languages. Moreover, the application developer can use a browser to create or modify a voice enabled web application; consequently, the request-based interaction between the browser and the application server enables an application developer to create or modify an XML document, and then cause the application server to execute the XML document in the same browser window.","Another aspect of the present invention provides a method in a browser for developing an executable voice application. The method includes sending a first request to a web server according to hypertext transport protocol (HTTP) for a first hypertext markup language (HTML)-based web page having a form with at least one entry field for inputting an application parameter, receiving and displaying the form, and posting the form, including an input application parameter in the entry field that is input by a user, to a prescribed uniform resource locator (URL). The method also includes sending a second request to the web server for execution of the executable voice application based on the posted form, and receiving a second HTML-based web page having voice application content based on the posted form. The posting of the form having the input application parameter enables a user of the browser to supply application parameters to an application server to define voice application operations in an XML document. Moreover, the sending of a second request for execution of the executable voice application based on the posted form and reception of the corresponding second HTML-based web page enables a user to personalize voice application operations within a voice enabled web application, and then test the input changes by obtaining the results of execution of the voice enabled web application by the application server.","Still another aspect of the present invention provides a system configured for developing an executable voice application. The system includes a computer-based server and a storage medium. The computer-based server has an application runtime environment configured for generating for a browser a first hypertext markup language (HTML) document that specifies a form having at least one entry field for specifying an application parameter. The application runtime environment, in response to reception from the browser of a first HTTP request specifying the application parameter, inserts the application parameter specified by the first HTTP request into an XML document. The application runtime environment also selectively executes the XML document having the application parameter specified by the first HTTP request in response to a second HTTP request. The storage medium is configured for storing the XML document created or modified by the computer-based server.","Additional advantages and novel features of the invention will be set forth in part in the description which follows and in part will become apparent to those skilled in the art upon examination of the following or may be learned by practice of the invention. The advantages of the present invention may be realized and attained by means of instrumentalities and combinations particularly pointed out in the appended claims.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 1","FIG. 3"],"b":["42","42","64","44","42","44","50","42","56"],"i":["a ","b","a ","b "]},"As shown in , each of the clients (tiny clients, skinny clients, thin clients and fat clients) are able to communicate via a single, unified architecture  that enables voice communications services between different clients, regardless of whether the client actually has browser capabilities. Hence, the fat client and the thin client are able to execute voice enabled web applications without any hardware modification or any modification to the actual browser; rather, the browsers  in the clients and merely are provided with an executable voice resource configured for providing browser audio control, described below.","The user devices , , and , illustrated as a cordless telephone , a fax machine having an attached telephone, and an analog telephone , are referred to herein as \u201cskinny clients\u201d, defined as devices that are able to interface with a user to provide voice and\/or data services (e.g., via a modem) but cannot perform any control of the associated access subnetwork.","The wireless user devices , , and , illustrated as a cellular telephone (e.g., AMPS, TDMA, or CDMA) , a handheld computing device (e.g., a 3-Com Palm Computing or Windows CE-based handheld device) , and a pager , are referred to as tiny clients. \u201cTiny clients\u201d are distinguishable from skinny clients in that the tiny clients tend to have even less functionality in providing input and output interaction with a user, rely exclusively on the executable application in an access subnetwork to initiate communications; in addition, tiny clients may not be able to send or receive audio signals such as voice signals at all.","Hence, the skinny clients , , and and the tiny clients , , and access the unified voice messaging services in the unified network  via a proxy browser , configured for providing an IP and HTTP interface for the skinny clients and the tiny clients. In particular, browsers operate by interpreting tags within a web page supplied via an HTTP connection, and presenting to a user media content information (e.g., text, graphics, streaming video, sound, etc.) based on the browser capabilities; if a browser is unable to interpret a tag, for example because the browser does not have the appropriate executable plug-in resource, then the browser typically will ignore the unknown tag. Hence, the proxy browser  can provide to each of the skinny clients and tiny clients the appropriate media content based on the capabilities of the corresponding client, such that the cordless telephone and telephone would receive analog audio signals played by the proxy browser  and no text information (unless a display is available); the fax machine and pager would only receive data\/text information, and the cellular telephone and the handheld computing device would receive both voice and data information. Hence, the proxy browser  interfaces between the IP network and the respective local access devices for the skinny clients and the tiny clients to provide access to the unified messaging network .","The proxy browser  and the web browsers  within the fat client and the thin client execute voice enabled web applications by sending data and requests to a web server , and receiving hypertext markup language (HTML) web pages from the web server , according to hypertext transport protocol (HTTP). The web server  serves as an interface between the browsers and an application server  that provides an executable runtime environment for XML voice applications . For example, the web server  may access the application server  across a common gateway interface (CGI), by issuing a function call across an application programming interface (API), or by requesting a published XML document or an audio file requested by one of the browsers  or . The application server , in response to receiving a request from the web server , may either supply the requested information in the form of an HTML page having XML tags for audio control by a voice resource within the browser, or may perform processing and return a calculated value to enable the browser  or  to perform additional processing.","The application server  accesses selected stored XML application pages (i.e., pages that define an application) and in response generate new HTML pages having XML tags during runtime and supply the generated HTML pages having XML tags to the web server . Since multiple transactions may need to occur between the browser  or  and the application server , the application server  is configured for storing for each existing user session a data record, referred to as a \u201cbrownie\u201d, that identifies the state of the existing user session; hence, the application server  can instantiate a procedure, return the necessary data, and terminate the procedure without the necessity of maintaining the instance running throughout the entire user session.","Hence, the application server  executes voice application operations from a stored XML document based on a transient application state, where the application server  terminates the application instance after outputting the generated XML media information to the browser.","As described above, conventional application development techniques involving writing application code using a conventional word processor require a user to have familiarity with executable code syntax. Although use of XML documents to define voice application operations eliminates the necessity of writing programming code, use of a conventional word processor for development of the XML documents still requires the application developer to have substantial knowledge of XML syntax, limiting the ability of a typical user lacking expertise in application development or XML syntax to personalize a voice application.","According to the disclosed embodiment, a browser-based executable voice application defined by XML documents can be created or modified by users lacking expertise in application development or XML syntax by use of the forms based representation of the application defining XML documents. In particular, the application server  is configured for providing an HTML forms representation of the application defining XML documents. The application server  is configured for parsing an existing XML document that defines a voice application operation, inserting selected XML tag data that specify application parameters into entry fields of an HTML-based form, and outputting the HTML based form to the browser . The browser , upon receiving the HTML document having the form specifying entry fields for application parameters for the XML document, displays the form in a manner that enables a user of the voice application to create or modify voice application operations. After the user has input new application parameters or modified existing application parameters in the entry fields, the user submits the form to a prescribed URL that is recognized by the application server . The application server , upon receiving the form from the corresponding web browser , can then create or modify the XML document by inserting the input application parameters as XML tag data in accordance with XML syntax. The application server  can then store the XML document for later execution for the user.","Hence, a user can develop or modify a voice enabled web application executable by the application server  by accessing forms generated by the application server . In addition, the stateless nature of the application server  enables the user to simultaneously develop and use the web voice application by posting the form for modifying the XML document to the application server , followed by a request to application server for execution of the voice application operation corresponding to the XML document modified by the posted form.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 2","FIG. 2"],"b":["64","66","72","70","70","56","72","66","72","66","66","72"],"i":"b "},"Four types of XML documents are used by the application server  to execute web applications: menu documents, activity documents, decision documents, and \u201cbrownies\u201d. The menu documents, activity documents, and decision documents are XML documents, stored in the document database , that define user interface and boolean-type application logic for a web application, hence are considered \u201cexecutable\u201d by the application server . The brownie document, stored in a separate registry  in , is an XML data record used to specify application state and user attribute information for a given XML application during a user session. Hence, the XML documents define user interface logistics and tie services and application server events together in a meaningful way, forming a coherent application or sets of applications. Additional details regarding the definition of executable voice applications using XML documents are described in the above-incorporated application Ser. No. 09\/501,516.","Certain development tools having direct access to the application server  can be used to establish context information used by the application runtime environment within the application server  for execution application operations based on parsing of XML documents. In particular, development tools such as a graphic based development system , a forms-based development system , an editor-based development system , or an outline-based development system may be used to define XML tags and procedure calls for the application runtime environment. The development tools (e.g., , , , or ) maybe used to establish an application and resource database  to define low-level operations for prescribed XML tags, for example dynamically generating an XML menu page using executable functions specified by a menu rule set in response to detecting a menu tag, performing a logical operation using executable functions specified by a logic rule set in response to a decision tag, or fetching an audio (.wav) file in response to detecting a sound tag.","The development tools (e.g., , , , or ) may be used to establish an application programming interface (API) library  (e.g., a SQL interface) for the application runtime environment, enabling the application server  to issue prescribed function calls to established services, such as Internet Message Access Protocol (IMAP), Lightweight Directory Access Protocol (LDAP), or Simple Mail Transfer Protocol (SMTP). The library  may be implemented as dynamically linked libraries (DLLs) or application programming interface (API) libraries. If desired, the development tools (e.g., , , , or ) may also be used to generate an XML application as a stored text file , without the use of the forms generated by the application server , described below.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 2","FIG. 5B","FIG. 4","FIG. 5A"],"b":["56","56","66","56","66","64","83","56","66","85","56","83","56","85","85","66","100","102","100","83","100","85","66","100"],"i":"a "},"As illustrated in , accessing the application server  via the CGI  enables the web browser to perform different operations on the selected XML document . For example the browser  may issue a request  for modifying the selected XML document, a request  for creating a new XML document, a request  for forcing the application state of a user to the selected XML document (effectively overriding the stored application state specified by the brownie in the brownie registry ), a request  for searching for a value in the existing XML documents, a request  for help with the current XML document type, or a request  to undo changes. Hence, the application server  is configured for executing a corresponding operation for the selected XML document based on the request received from the CGI .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 6","FIG. 6","FIG. 5A"],"b":["66","56","66","56","200","56","85","86","96","66","85","202","100","72","88","100","66","204","100","72","100","104","104","106","106","66","206","102","56","106","106","108","108"],"i":["a","b","a","b","a","b","a","b"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 5A","FIG. 5A"],"b":["106","106","106","106","106","106","108","108","108","108","108","108","66","102","56","66","104","104","104","104","106","106","106","106","108","108","108","108","66","104","102","108","106","104","104","104","104","104","108","108","108","108","108","102","66","108","106","110","102","80","80","80","80","56","102"],"i":["a","b","c","d","e","f","a","b","c","d","e","f","a","b","c","g ","a","b","c","g ","a","b","c","g","a","a ","a","a","b","c","d","e","a","b","c","d","e","g ","g","a","b","c","d","b "]},"The application server  also parses the XML option tags  for insertion of menu application parameters into the respective menu entry fields. For example, the application server  inserts the menu application parameters , , and into the respective menu entry fields , , and , and inserts the menu application parameters , c, and cinto the respective menu entry fields , , and generated by the HTML document in step .","The application server  also specifies an entry field  that enables the browser user to specify the filename  of the XML document (i.e., the designation used by the application server  when referring to the \u201ccurrent state\u201d). In addition, the application server  specifies an addition button  that enables users to add menu options  to an XML document; hence, if the user enters a new file name within the entry field  and presses the addition button , the browser  posts to a prescribed URL to cause the application server to generate a new XML document having a name specified in the field , and to generate another HTML form having an additional menu entry field  for the new prompt.","The application server also specifies within the HTML form  prescribed URLs associated with command hyperlinks , such that posting the form  by the browser  to a corresponding one of the URLs  results in a corresponding operation (e.g., as illustrated as operations  through  in ) performed by the application server .","Hence, the HTML entry form  generated by the application server  in step  of  provides all the fields and command functions necessary for a user to create or modify a new or existing XML document, regardless of whether the XML document is a menu-based XML document or a non-menu XML document.","The application server  then outputs the HTML entry form  to the browser  in step  across an HTTP connection. The browser  receives and displays the HTML form  in step , enabling the user to edit the application parameters specified within the entry fields (e.g., , , etc., , , etc., or ). In response to detecting the user pressing one of the form buttons or one of the command hyperlinks , the browser  posts the completed form to a prescribed URL, for example the URL specified by the corresponding command hyperlinks . As described above, the URL will specify an address for the application server  via the development tool CGI .","The application server , in response to receiving the completed form , inserts the input application parameters into the appropriate XML tags of the XML document specified by the name field , and stores the XML document within the XML document database  in step .","Hence, the above-described arrangement enables a user lacking programming skills or knowledge of XML syntax to develop voice-enabled web applications defined in XML documents, by specifying application parameters using the form  generated by the application server . In addition, the stateless nature of the application server  enables a user to edit any application-defining XML document, including an XML document that is executed by the application server  during an existing user session, since any changes to the XML document made by the user using the form  are transparent to the application runtime environment executing the XML document.","In particular,  is a diagram illustrating a user interface form , dynamically generated by the application server  in response to execution of a selected application defining XML document from the XML document database . As illustrated in , the browser  sends an HTTP request for a voice application operation corresponding to a stored XML document in step , corresponding to operation  of . The application server  generates in step  an HTML page having media content based on parsing the XML document corresponding to the request for a voice application operation; for example, the application server  may identify the XML document based on the URL specified by the HTTP user request (e.g., that may specify a user session), and also based on application state information determined from the corresponding brownie stored in the registry . The HTML page generated by the application server in step  specifies HTML tags for generating the user interface form , plus media content (e.g., the default prompt \u201cAUDMAINMENUPROMPT.wav\u201d specified by the parameter ) and XML control tags.","The application server  then outputs the generated HTML page in step , and the browser parses the HTML page  to display the text and image content including the user interface form , and to play the audio-based media content based on XML control types in step . Hence, a user can simultaneously display within the browser  the XML development form  and the user interface form , enabling the user to first create or modify an XML document using the development form , post the development form  to the application server , and then immediately test or validate the modified XML document using the user interface form .","While this invention has been described in connection with what is presently considered to be the most practical and preferred embodiment, it is to be understood that the invention is not limited to the disclosed embodiments, but, on the contrary, is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims."],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Reference is made to the attached drawings, wherein elements having the same reference numeral designations represent like elements throughout and wherein:",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 4","FIGS. 1"],"b":["2","3"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
