---
title: Business rules user interface for development of adaptable enterprise applications
abstract: Methods and apparatus, including computer program products, for interacting with a user to define business rules in a declarative manner. The invention operates to display a rule set as an editable list of conditions and an editable list of actions, the conditions and actions being linked to each other by the combination of an editable list of if-values and an editable list of then-values, wherein if-values and then-values are explicitly linked to each other, conditions and if-values are explicitly linked to each other, and then-values and actions are explicitly linked to each other in the displayed lists.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07020869&OS=07020869&RS=07020869
owner: Corticon Technologies, Inc.
number: 07020869
owner_city: San Mateo
owner_country: US
publication_date: 20011126
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application claims priority on the basis of commonly-owned U.S. Patent Application No. 60\/250,869 for Business Rules User Interface Elements For Development Of Adaptable Enterprise Applications, filed Dec. 1, 2000, the disclosure of which is incorporated here by reference in its entirety.","The present invention relates to platforms for the development and deployment of computer program applications.","An enterprise application is a software program used by business people to increase productivity through automated data processing. Enterprise applications put into action a set of business requirements, expressed using natural language and \u201cbusiness speak\u201d. For the purposes of better defining the system, business requirements can be broken down into a set of interrelated business rules. A business rule, as defined by the GUIDE Business Rules Project, is a statement that defines or constrains some aspect of the business. A business rule is intended to assert business structure, or to control or influence the behavior of the business. A business rule should be atomic so that it cannot be broken down further without losing meaning.","Traditional implementations of business rules typically involve hard-coding them as procedural (flow-chartable) logic using programming languages such as Java, C++, and COBOL. Such business logic generally implements the business requirements of the enterprise application, providing the instructions necessary to store, retrieve, create, and manipulate data as well as validation constraints on such transactions. Implementing business logic using such languages requires highly trained software engineers and is relatively expensive and time-consuming. In addition, procedural programming languages do not support inferencing, which is a key feature of a robust rule-based system. They also make it prohibitively difficult to identify and resolve logic errors such as ambiguity and incompleteness among interrelated business rules.","An alternative approach to business rules automation is through expensive and difficult-to-use expert (rule-based) systems. This entails the conversion of the business rules into a formalized syntax that more closely represents the declarative nature of the business rules, generally requiring the services of highly trained knowledge engineers. The formalized rules are then processed through an inference engine, which itself requires tremendous programming effort to integrate with existing enterprise systems. Although some such rule-based systems provide the ability to easily modify the business rules, they fail to support certain business rule types such as constraints. And like procedural implementations, they provide no support for resolving logic errors.","Component technologies, in general, have interface and interoperability standards that facilitate rapid and straightforward integration of distributed computing applications. Components have delivered significant benefits for providing standardized low-level services, user interface controls and database access. Distributed component platforms enable the development of highly reusable server-side business components.","However, adapting component business logic requires manipulation of programmed code, which is difficult and, in any event, generally not allowed under the component license agreement. Although component behaviors may be influenced by parameterization, they are nevertheless limited to the problem domain contemplated by the component developer. On the other hand, declarative business rules not hard-coded into a component can be easily adapted to accommodate changing business requirements. A method for the automation of such rules is the inference engine. However, inference engines have been difficult to use within server-side component-based systems, with integration requiring coding to the proprietary API of the inference engine, and processing instructions represented in the proprietary syntax or programming language of each particular inference engine.","The invention provides a platform with an advantageous user interface for the development, deployment, and maintenance of computer program applications.","The invention can be implemented to realize one or more of the following advantages. A platform can be implemented in accordance with the invention that reconciles component and business rules technologies, combining the reusability features of component technologies with the adaptability features of business rules to create a powerful unified platform. One particular implementation of the platform integrates standards such as the Unified Modeling Language (UML), Enterprise JavaBeans (EJB), and Extensible Markup Language (XML) with business rule technologies. It enables non-technical business experts to play an active and central role in the development process of highly adaptable business applications. It offers a highly effective development methodology, an integrated set of standards-based tools, and a robust, scalable deployment platform. It provides an optimal environment for diverse enterprise applications.","The platform allows a developer to build, deploy and maintain Internet-based business (eBusiness) applications rapidly. It captures enterprise intelligence in the form of highly adaptable business rule components. This approach provides high levels of enterprise automation, leading to lower personnel costs and higher profits. In addition, because non-technical developers can rapidly adapt and extend platform-based applications, the applications can dynamically evolve with changing market conditions, business practices, and customer preferences.","The platform systematically separates business rules from procedural business process logic and thereby improves code quality and reduces development and maintenance costs. This makes rules technology accessible to mainstream developers and business experts. The platform enables non-technical personnel to develop, test, deploy and update sophisticated business rules declaratively, with no need for procedural programming, allowing for complex dynamically adaptable application behavior. These benefits are amplified for applications whose rules are volatile or subject to frequent changes, as well as applications impossible or prohibitively difficult to implement procedurally due to their logical complexity.","The platform offers many opportunities to streamline the development process. For example, it enables business experts and analysts to begin developing and testing rules as early as the requirements phase, facilitating early detection and correction of logical defects, and reducing the risks of application development.","Enterprise software projects tend to suffer from schedule and budget overruns. Some are a total failure in delivering the wrong solution that does not meet the business needs. The primary reason for such shortcomings of the traditional approaches is the propensity to initiate coding before the business problem and the appropriate solution are fully understood. Unfortunately, from a management point of view, progress tends to be measured by tangible deliverables. This early development of business rules, sometimes hand-in-hand with rapid prototyping of presentation elements, offers such tangible deliverables to help satisfy the progress-hungry business managers, while minimizing the high risks associated with the late discovery of logic errors.","Rapid-prototyping is very beneficial in clarifying application requirements, inducing user feedback, and reducing the chances of project failure. However, it also carries a high risk. Rapid prototypes are generally not developed based on sound software principles because they are intended to be throwaways. Unfortunately, due to time constraints and lack of foresight, most prototypes are just polished up and deployed into production, without regard for proper software engineering techniques. Such applications are generally unreliable and turn into expensive maintenance nightmares.","The early stage focus on development and clarification of business rules has all the benefits of rapid-prototyping without the shortcomings. Not only is the business logic completely fleshed out prior to programming, but also the resultant rules are not a throwaway. In fact, they become the cornerstone of the rest of the development lifecycle.","Enterprise Java business components tend to be thinner than alternative architectures such as CORBA and COM. This is because necessary middle-tier services such as security, concurrency control, transaction, and lifecycle management are not coded directly into the component, but are delegated to be handled by the component container. Nonetheless, Enterprise Java components still contain process or transactional logic and embedded business rules. The further extraction of business rules from such components has the added benefit of reducing their complexity even more. Consequently, the remaining logic of such components can be generated automatically from design models, minimizing the need for programming. Business rules tend to be the most volatile part of a business application. It is thus advantageous to maintain them using a highly adaptable environment. It is also advantageous to make them accessible to non-programmer business experts who can implement the changes directly. Traditional programming languages do not have these features and advantages.","Inference engines are an alternative mechanism to procedural programming languages for the processing of business logic, and have been used in specialized business applications for over a decade. The invention abstracts away the low-level API (Application Programming Interface) of inference engine as well as its rule language. As a result, the business developers work in a friendly IDE (Integrated Development Environment) using an implementation-neutral rule language that is targeted at them. This IDE also has special features to enable them to identify and resolve logic errors. In addition, the IDE enables business developers to tie the business rule implementations directly to the motivational statements from which they derive, maintaining business context and traceability through development, deployment, and future maintenance efforts. The IDE also enables the development of declarative platform-independent rule components called rulepacks. A rulepack is deployed as a black box component, with a well-defined programming interface. This component is no different from any other and therefore requires no additional programming skills to integrate into the enterprise application.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features and advantages of the invention will become apparent from the description, the drawings, and the claims.","Like reference numbers and designations in the various drawings indicate like elements.","As shown in , a platform  in accordance with the invention is divided into two parts: a deployment platform  and a development platform . Each platform is further subdivided into application tiers: a front end (presentation); a middle tier (business logic), and a back end (database).","The front end of the development platform  is provided by off-the-shelf products conventionally used for rapid development of graphical user interfaces (GUIs), such as the Microsoft Frontpage\u00ae web site creation tool.","The middle tier of the development platform  implements the business logic of an application. In prior systems, business logic was implemented procedurally, requiring programmers to build and maintain application code. In contrast, the platform  implements a visually declarative approach. With the platform, business logic can be subdivided into two parts: business rules and process logic.","Business rules, which often make up the bulk of business logic, are built and maintained in the visually declarative environment of a rules IDE . This allows non-technical developers, such as business experts and analysts, to create and maintain enterprise business rules as reusable, adaptable components, which will be referred to as rulepacks. Rulepacks are declarative components that encapsulate a set of business rules automating the knowledge of a particular context of the business process. Rulepacks are made up of one or more rulesheets. Each rulesheet can contain one or more rules that apply within the same particular scope. Rulepacks are built and maintained by the IDE .","The IDE includes a vocabulary , which represents the business entities, their attributes, and their associations (relationships) in the form of a tree view. The vocabulary can be created within the IDE or imported from a UML business object model (also known as a class diagram) , or generated from business objects, from a relational database, or from an XML schema. The vocabulary tree view serves as an optimal drag-and-drop source for easy creation of rulesheets (see, e.g., ). The IDE also includes a rulepack and rulesheet editor , which is a visual environment designed to be used by non-technical business domain experts to build and maintain rulepacks and their rulesheets. A rulesheet is a spreadsheet-like construct for intuitive development of logically correct sets of rules. The visual environment created by the rulepack editor  is illustrated in .","Rulepacks, in the present implementation, are implemented as XML documents expressed in a rules markup language created for that purpose. The rules markup language defines an XML rules interchange format similar to that of the Business Rules Markup Language (BRML), which was defined by the CommonRules Java library, available from International Business Machines Corporation of Armonk, N.Y. The syntax of the rules markup language is shown in Table 1 at the end of this specification represented in an Extended BNF (Backus Normal Form).","The rule repository  facilitates collaborative rules development through source and version control, allowing creation of authorization and access privileges for rules documents. The rule repository  maintains version control, offering the opportunity to roll back to previous versions of rules when necessary. It can also track the business motivation behind every rule, such as business policy charters, business risks, customer preferences, or regulatory stipulations.","The process logic part of the business logic is a thin layer of transactional code, and in one implementation this is built and maintained using a UML modeler and code editor . When implemented in Enterprise Java architecture, the transactional code (i.e., the process logic) can be coded in Java using any standard Java IDE, such as the Together UML modeling tool and IDE products available from TogetherSoft Corporation of Raleigh, N.C. The Together products automatically generate the majority of the process logic (including Enterprise JavaBeans), so programming requirements are reduced to a minimum.","A developer will use the UML modeler and code editor  to build and maintain a use case model, a business object model (a UML class diagram), a component model, and various other UML models necessary to implement a complete enterprise application. For these purposes, the modeler and editor  includes a use case modeler , a business object modeler , and a component modeler , and other UML modelers. The modeler and editor  also includes an IDE (Integrated Development Environment)  that supports a Java development kit (JDK), optionally extended with a Java math library to support business domain calculations.","The use case modeler  is used to build and maintain business requirements visually in the form of UML-standard use cases. The business object modeler  is used to build and maintain an enterprise-level object model of all data elements. The enterprise-level model represents all data in the enterprise. It can be created from scratch or derived from existing enterprise databases. The objects of the enterprise-level object model also contain business functions. Business rules that are non-declarative in nature or involve an algorithm or complex mathematical calculation are captured as functions. The procedural component modeler  is used to build and maintain those procedural business components that use rulepacks.","The deployment platform  supports deployment on diverse distributed user interface devices , such as web browsers, telephones, personal digital assistants, and other client programs and access devices. Each user interface device merely needs to be able to communicate with supported middle tier application servers.","As shown in , the middle tier of an application includes a web server , a Java application server , and a business intelligence server . Any web server supporting JSP (Java Server Pages) and any Java application server can be used, such as a J2EE (Java 2 Enterprise Edition) compliant application server. In alternative implementations, the middle tier can be implemented using Microsoft\u00ae distributed Component Object Model (COM)-based technologies, including Active Server Pages (ASPs) and Microsoft\u00ae Transaction Server (MTS). The middle tier can also be implemented on a Microsoft .NET platform.","As shown in , the business intelligence server  manages rule components . A rule component contains a lightweight, high-performance rule engine. The rule engine can be implemented as an inference engine, for processing rules as such. For example, a JESS (Java Expert System Shell) or CLIPS (C Language Integrated Production System) rule engine can be used. Alternatively, rule components can be implemented to embody their rules as translated into a procedural programming language or into calls to a database query language such as SQL. A rule component deploys a rulepack as a functional knowledge unit.  depicts multiple rule components deployed in a J2EE environment. The user interface communicates with a servlet , which may be generated by a JSP, which communicates with session and entity beans , which in turn communicate with the rule components  through a standardized messaging scheme. Two types of messages are supported: synchronous (e.g., direct Java calls) and asynchronous (e.g., using XML-based messages).","A rule component  is preloaded with the rules in a rulepack for optimal performance. The rule components  can interact with various types of business components (not just Enterprise JavaBeans components) using standardized messaging (e.g., XML messaging). The business intelligence server  provides a central integration hub that can interact with diverse application components , such as Microsoft\u00ae COM (Component Object Model) components, CORBA (Common Object Request Broker Architecture) components, EJB components, and Java components. The business intelligence server  can turn any Java application server into an application integrator, acting as a control center for an enterprise information system.","The back end of the deployment platform  can include any number of databases  based on database management products from any number of vendors. The rule repository  is implemented as a database, such as a relational database. The business intelligence server  is a virtual extension of the rule repository , which remotely manages the lifecycle of all deployed rule components. Once a business rule is modified in the rule repository , all rule components containing rulepacks affected by the change are dynamically notified to refresh their business logic. This allows for real-time modification of system behavior without any downtime.","A simple application development methodology that takes advantage of the features of the application development platform  will now be described. Unlike traditional techniques that focus on a combination of data and process, or on objects that encapsulate both data and process, the methodology places business rules in the center of the development process.","Business rule analysis, as facilitated by the platform , accelerates the software development lifecycle by reducing unstructured requirements verbiage into concrete statements that are easily verified by business users. In addition, the methodology enables analysts and developers to identify, capture and test business rules from the very inception of a project. In addition, the methodology guarantees that UML-conforming documentation (such as use case models) will be created as an inherent byproduct of the software development process. Furthermore, the methodology ensures that the documents remain in synchronization with the application logic, because the business rules that the documents represent are literally part of the application.","By allowing developers to begin building and testing business rules at project inception, the methodology ensures healthy design disciplines, such as providing tangible design deliverables in a project's early phases. Moreover, business rules developed early in the development process are directly incorporated into the final application, resulting in cost savings when compared with traditional \u201cthrow away\u201d prototyping techniques.","As shown in , in a typical development project, business analysts collaborate with subject matter experts to define high-level business requirements (step ) using vocabulary understandable to the subject matter experts. Having the business requirements, the analysts create UML use cases (step ) using the use case modeler , which allows the user to specify actors and their various usages of the system graphically, as illustrated in , where actor  is shown in a communicates relationship with use cases , , . Each use case contains a high-level written narrative that explains it in clear, concise business terms.","A business object model can be created from scratch or derived from an existing database (step ). The business object modeler  can capture the business object model as a UML class diagram. An example of such a diagram is diagram  shown in user interface window  in . The IDE  transforms this into a vocabulary tree view for easy drag-and-drop functionality onto the rulesheets . Such a vocabulary tree view is shown in pane  of . However, the vocabulary can also be created directly in the rule IDE , without the need for an object model. The vocabulary can optionally have a name, illustrated as \u201cFIM\u201d  in pane .","In the tree view, the vocabulary is displayed in the form of a tree of business terms such as entities (non-leaf nodes), their attributes (leaves), and their relationships to other entities (named branches). Such a tree view presents a conceptual semantic model in a form that is understandable to the business user. The tree view can be used for building rules, test data, user interfaces, databases, and other application components. Its elements can be used by a user to drag-and-drop vocabulary terms onto the rulesheet. In the tree view, a vocabulary term can be either simple (root-level) or complex (branch-level). When an attribute node that is deeper than the first tier of leaf nodes is drag-and-dropped, relationship traversals are handled automatically using a dot-notation (e.g., Trade.security.symbol) giving the business term a specific context.","Next, business rules are developed and tested (step ) using the vocabulary , the rulepack editor , and the tester . Business rules are captured as discrete rule sets (rulepacks). Business rules can be categorized into three types: constraints (rejecters), triggers (projectors), and derivations (producers). The rulepack editor  enables developers to compose all types of rules that operate on data structures defined in the business object model. Developers can drag-and-drop terms from a tree view of the vocabulary  onto a rulesheet in order to define the conditions and actions of each rulepack.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 6","FIG. 1"],"b":["181","604","606","608","608"]},"The conditions and actions are tied together as rules, each rule being expressed in one of the vertical columns  spanning the two right quadrants of the rulesheet. The cells in a vertical rule column specify the truth values of the conditions\u2014determined by the if-value cells in the upper right quadrant \u2014necessary to trigger the execution of actions\u2014determined by the then-value cells in the lower right quadrant . The if-part of a rule is the conjunction of the conditions defined by the if-values in one column.","The rule statements pane  displays a list of natural language statements of the rules (in business terms) implemented by the rulesheet. Each rule statement is tied to the corresponding rule column  with the same number . Each non-conditional rule can also have a business rule statement associated with it (e.g., statement  in ). The business rule statements can optionally be linked to business policy charters and other supporting documents for the purpose of tracing the motivation behind the corresponding rules.","Actions typically take the form of a value assignment, which is effectively a derivation. The assigned value may be a constant, the value of a different attribute, or a calculation (which may involve business object method calls).","Optionally, actions may post a message of type violation, warning, or information. The particular action  illustrated in  posts a violation. Once a post action is triggered, the business rule statement associated with the rule is posted in the form of a message with a severity of violation, warning, or information. A message may be linked to a specific instance of a business entity to provide an appropriate context. Such messages are used to indicate the firing of a rule and can also serve as error messages displayed to the system user. They can, furthermore, help in educating novice users on the functionality of the system and the rules of the business as a whole. A specific type of message can also be used to deliver synchronous or asynchronous processing commands to other enterprise components. However, supporting the use of message posting for processing commands introduces an undesirable procedural element into the definition of rules. Thus, it is advantageous to avoid message posting and instead define attributes that can be tested by process control components. A more declarative alternative to capturing constraint rules is by using a special rulesheet, as illustrated in , which will be described later.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 7","FIG. 6"],"b":["704","604","706","708"]},"Every association (relationship) between two entities has two role names, one at each end of the association (as shown in ). These role names are used to traverse from one entity to another in the vocabulary tree view (and using the dot-notation). If no role name is specified, it is defaulted to the name of the corresponding entity, except that the role name begins with a small letter whereas the entity name begins with a capital letter. Thus, the role name \u201cpositions\u201d in node  indicates that node  represents a relationship between an Account entity and a SecurityPosition entity. The icon  identifies this as a relationship and, in particular, as a one-to-many relationship. This node is used to traverse from Account to its corresponding SecurityPosition's. Note that SecurityPosition entity also has an \u201caccount\u201d node that is used to traverse the same relationship in the opposite direction (not shown in the figure). The term \u201cpositions\u201d can be thought of as the name of a relationship, which is a bidirectional relationship. In this user interface convention, the entity at one end of the relationship is named explicitly (in this example it is the Account entity) while the entity at the other end of the relationship (SecurityPosition) is named implicitly by the name of the relationship role name (positions). In alternative implementations, both a name for the relationship and the name of the entity at each can be shown explicitly.","As also shown in pane , the entity SecurityPosition (shown implicitly as positions) at node  has several attributes. Because node  has been expanded, those attributes, such as quantity (node ), are shown. Also shown is a further relationship role named \u201csecurity\u201d (node ), representing a relationship between entities SecurityPosition (in the context of node ) and the entity Security. This latter node  is also expanded and shows the attributes of the entity Security.","It is worth noting that the relationships (associations) between entities may be such that there is a loop in the definition. In this situation, a developer is able to expand entities and relationships in the tree view without any limit imposed by vocabulary because the expansions are constructed on the fly. This allows a developer to use the tree view to construct a context of any depth for every attribute that is of interest to the developer.","To drag-and-drop a vocabulary element to a rulesheet, a developer will drag an attribute node of the vocabulary to the rulesheet. This will cause the attribute and its entire context to be inserted as a term wherever the drop part of the operation dictates. Thus, when a developer drags the node quantity  to the rulesheet, the term dropped will be Account.positions.quantity. If aliases have been defined for any part of the selected term, the alias will be used in the rulesheet for the sake of brevity and convenience. In , an alias \u201c&position\u201d has been defined as \u201cpositions\u201d and Account has been identified as the anchor entity, so dragging the node quantity  to the rulesheet would result in the term &position.quantity being dropped.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 7","b":["702","720","722","724"]},"The rulesheet shown in  also shows the display (under the heading \u2018Values\u2019 ) of a value set for a condition. The value set for a condition is the set of all possible if-values for the condition. In , this is the set {\u2018HI-GRD\u2019, \u2018HI-YLD\u2019}  for the security profile condition. Value sets can be declared for assignment actions as well as conditions. The value set for an assignment action is the set of all possible values for the assignment term.  also shows how the editing of a rule cell, in this case, for rule B, can be aided by a pre-populated drop-down list  of these possible values.","As shown in , an if-value  can be a string. An if-value can also be of any other data type, such as date, boolean, or numeric. As shown in , for example, an if-value can also include a comparison operator, such as \u201c>=\u201d or \u201c<\u201d. If no operator is expressed, the operator \u201c=\u201d is implied. Also, a condition term can include a comparison operator, in which case the value set for the condition would be {T, F}, i.e., true and false.","As shown in , a then-value can be a string (as in cell ). A then-value can be of any other simple data type. A then-value can also be a mark\u2014such as represented by \u201cX\u201d in cell  in , for example\u2014that indicates that the corresponding action is to be performed, without providing any data to the action.","A rulesheet can also have preconditions in a preconditions pane . Preconditions are conditions that apply to all rules. They are generally used to customize a rulesheet to activate only in a particular situation or for a particular instance of a business term. Preconditions are logically ANDed with the rest of the conditions of every rule on the rulesheet.","In the system being described, a user or developer\u2014either directly or indirectly\u2014can provide a value set for each condition term. This can be done through the IDE, in the definition of the vocabulary, or otherwise. With this information, the system can validate the rulesheet by applying completeness and ambiguity checks. In one implementation, the value set for a rule is checked for completeness heuristically by applying the following checks and corrections. A value set must have more than one value. If it does not, add a value representing OTHER to the set. A range of values must have no gaps. If a gap is found, add values to fill the gaps. For example, if the condition term is numeric and the value set being tested is {<15, 15\u201330}, then add a value so the value set is {<15, 15\u201330, >30}. A range of dates is tested and corrected in the same way. For any other kind of set, such as one enumerating the names of people, for example, the system can automatically, or the user can optionally, add the value representing OTHER to the set to ensure its completeness.","All developed rulepacks, rulesheets, and individual atomic rules are stored in the rules repository  and become part of an application rulebook, which contains all the rules for the application. Each rule may be reused in more than one rulesheet or rulepack. The repository keeps track of such interdependencies and forces rule integrity and consistency throughout the rulebook and therefore the enterprise.","The IDE has validation logic to detect and help eliminate logic errors in rulesheets, such as ambiguities, redundancies, or incompleteness.  shows a profiling rulesheet before ambiguity and completeness checks are performed. Rules A and B (columns  and ) are determined to be ambiguous. Rules A and B are complex rules due to the existence of a do-not-care value (i.e., a dash) in their if-values. A do-not-care indicates that the rule applies for all possible values of a condition. Such rules can be broken down into simple rules with all specific values to aid in visualizing the source of the ambiguity. The IDE has expand and collapse functionalities for this purpose.  shows the rulesheet after an expansion, where rules A and B are expanded into rules {A., A.}  and rules {B., B., B.}  respectively. The source of the ambiguity is highlighted as being simple rules A. and B.. For the exact same if-part (i.e., the conjunction of conditions with values \u2018A\u2019 and >=7), these rules take contradictory actions (i.e., set profile to \u2018HI-GRD\u2019 and set profile to \u2018HI-YLD\u2019). Once an ambiguity is identified, it can resolved in one of three ways. If the actions are mutually exclusive (i.e., they cannot both happen simultaneously), the override feature can be used by a user to set precedence order as shown at  in , where rule A overrides rule B. In more complex situations, the override input can indicate a set of rules, and in that case the set would be displayed. If the actions are not mutually exclusive, they can be combined into one rule. Should the ambiguity point to a logic error, the rules can be modified by the user in such a way as to resolve the ambiguity. A simple form of ambiguity is redundancy. This occurs when two rules are identical. It is resolved by removing one of the rules, which can be done automatically by the system.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 10","FIG. 8","FIG. 11"],"b":"1006"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 12","b":"1204"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 13","FIG. 13"],"b":["1306","142","1304","1308","1306"]},"While rules development and testing are in progress, developers can simultaneously code custom processes (or acquire pre-written components if available) and begin implementing the user interface. These activities produce feedback that can be used to refine requirements, UML models, and the business rules, resulting in an iterative development cycle. Development cycle iterations continue as necessary until the application is ready for deployment and then throughout its life as features are changed, upgraded or extended.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 14","FIG. 7","FIG. 7"],"b":["1402","1404","1406","1402","1","2","1","1","2","3"]},"The user interface display of  also differs from the one illustrated in  in that in , a rule is represented by a cell, such as cell , rather than by a column, such as one of the columns  (). Thus, multiple rules having the same if-part can be represented in the same column.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 15","FIG. 14"],"b":["1502","1402"]},"As shown in , an overrides section can be made visible if overrides are necessary. Overrides were described in reference to . Each row ,  represents an override rule. Each override can be tied to a rule statement and therefore can have a rule name.","In , the overrides indicate the following. When conditions would cause both rule A (cell ) and rule B (cell ) to be performed, rule A overrides rule B; that is, rule A is dominant and therefore operative, and rule B is not. Similarly, rule C overrides rule B.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 17","FIG. 17","FIG. 17"],"b":["1702","1704","1706"]},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 18","b":["1802","1804","1","1810","2","1812"]},"As previously mention, each column (in the implementation of ) or each cell (in the implementation of ) that represents a rule can have a name associated with it. The name can be used to check the state of the rule. For example, the rule name can be referred to in the vocabulary as an attribute of the anchor entity of the rulesheet. The anchor entity is one of the root entities (if there is more than one) of the vocabulary and is designated as such by the developer of the rulesheet. For example, in , the developer has designated the entity Account as the root entity by giving it the alias \u201c&anchor\u201d. Thus, having a rule named RuleName in a rulesheet with an anchor entity named Entity, for example, the state of this rule can be checked using a term of the form Entity.RuleName.fired, which returns a boolean value, namely true if the rule has executed and false if the rule has not executed. Other attributes of the rule, in addition to whether it has been fired, such as the constraint category with the associated rule, can also be defined in the vocabulary so that they can be checked.","The invention can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Apparatus of the invention can be implemented in a computer program product tangibly embodied in a machine-readable storage device for execution by a programmable processor; and method steps of the invention can be performed by a programmable processor executing a program of instructions to perform functions of the invention by operating on input data and generating output. The invention can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. Each computer program can be implemented in a high-level procedural or object-oriented programming language, or in assembly or machine language if desired; and in any case, the language can be a compiled or interpreted language. Suitable processors include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory and\/or a random access memory. Generally, a computer will include one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM disks. Any of the foregoing can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, the invention can be implemented on a computer system having a display device such as a monitor or LCD screen for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer system. The computer system can be programmed to provide a graphical user interface through which computer programs interact with users.",{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Helpers"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"all = [0..127];"]},{"entry":[{},"lf = 10;"]},{"entry":[{},"cr = 13;"]},{"entry":[{},"uppercase = [\u2032A\u2032..\u2032Z\u2032];"]},{"entry":[{},"lowercase = [\u2032A\u2032..\u2032Z\u2032];"]},{"entry":[{},"digit = [\u20320\u2032..\u20329\u2032];"]},{"entry":[{},"number = digit+;"]},{"entry":[{},"line_terminator = lf | cr | cr lf;"]},{"entry":[{},"input character = [all - [cr +lf]];"]},{"entry":[{},"simple_escape_sequence = \u2032\\\u2032\u2032\u2032\u2032 | \u2032\\\u2033\u2032 | \u2032\\?\u2032 | \u2032\\\\\u2032 |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2032\\a\u2032 | \u2032\\b\u2032 | \u2032\\f\u2032 | \u2032\\n\u2032 | \u2032\\r\u2032 | \u2032\\t\u2032 | \u2032\\v\u2032;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"octal_digit = [\u20320\u2032 .. \u20327\u2032];"]},{"entry":[{},"octal_escape_sequence = \u2032\\\u2032 octal_digit octal_digit? octal_digit?;"]},{"entry":[{},"hexadecimal digit = [digit +[[\u2032a\u2032 .. \u2032f\u2032]+[\u2032A\u2032 .. \u2032F\u2032]]];"]},{"entry":[{},"hexadecimal_escape_sequence = \u2032\\x\u2032 hexadecimal_digit+;"]},{"entry":[{},"escape_sequence = simple_escape_sequence | octal_escape_sequence |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hexadecimal_escape_sequence;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"s_char = [all \u2212 [\u2032\u2033\u2032 + [\u2032\u2032\u2032 + [\u2032\\\u2032 + [lf + cr]]]]] | escape_sequence;"]},{"entry":[{},"s_char_sequence = s_char+;"]},{"entry":[{},"br_char = [all \u2212 [\u2032{\u2032 + [\u2032}\u2032 + [lf + cr]]]];"]},{"entry":[{},"br_char_sequence = br_char+;"]},{"entry":[{},"h_set = \u2032Set\u2032;"]},{"entry":[{},"h_bag = \u2032Bag\u2032;"]},{"entry":[{},"h_sequence = \u2032Sequence\u2032;"]},{"entry":[{},"h_collection = \u2032Collection\u2032;"]},{"entry":[{},"h_rule = \u2032Rule\u2032;"]},{"entry":[{},"h_precond = \u2032Precondition\u2032;"]},{"entry":[{},"h_nrule = \u2032NRule\u2032;"]},{"entry":[{},"h_cond = \u2032Condition\u2032;"]},{"entry":[{},"h_act = \u2032Action\u2032;"]},{"entry":[{},"h_valueset = \u2032Valueset\u2032;"]},{"entry":[{},"h_actionset = \u2032Actionset\u2032;"]},{"entry":[{},"h_rulesheet = \u2032Rulesheet\u2032;"]},{"entry":[{},"h_brstate = \u2032BRStatement\u2032;"]},{"entry":[{},"h_dtilda = \u2032~~\u2032;"]},{"entry":[{},"h_from = \u2032From\u2032;"]},{"entry":[{},"h_asgn = \u2032Assign\u2032;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Tokens"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"comment = \u2032--\u2032 [[all \u2212 10] \u2212 13]* [10 + 13]?;"]},{"entry":[{},"dot = \u2032.\u2032;"]},{"entry":[{},"arrow = \u2032->\u2032;"]},{"entry":[{},"not = \u2032not\u2032;"]},{"entry":[{},"mult = \u2032*\u2032;"]},{"entry":[{},"div = \u2032\/\u2032;"]},{"entry":[{},"plus = \u2032+\u2032;"]},{"entry":[{},"minus = \u2032\u2212\u2032;"]},{"entry":[{},"mod = \u2032%\u2032;"]},{"entry":[{},"exp = \u2032**\u2032;"]},{"entry":[{},"context = \u2032context\u2032;"]},{"entry":[{},"enum = \u2032enum\u2032;"]},{"entry":[{},"t_pre = \u2032pre\u2032;"]},{"entry":[{},"t_rule = h_rule;"]},{"entry":[{},"t_precondition = h_precond;"]},{"entry":[{},"t_nrule = h_nrule;"]},{"entry":[{},"t_condition = h_cond;"]},{"entry":[{},"t_action = h_act;"]},{"entry":[{},"t_valueset = h_valueset;"]},{"entry":[{},"t_actionset = h_actionset;"]},{"entry":[{},"t_rulesheet = h_rulesheet;"]},{"entry":[{},"t_brstatement = h_brstate;"]},{"entry":[{},"t_from = h_from;"]},{"entry":[{},"t_asgn = h_asgn;"]},{"entry":[{},"equal = \u2032=\u2032;"]},{"entry":[{},"n_equal = \u2032<>\u2032;"]},{"entry":[{},"lt = \u2032<\u2032;"]},{"entry":[{},"gt = \u2032>\u2032;"]},{"entry":[{},"lteq = \u2032<=\u2032;"]},{"entry":[{},"gteq = \u2032>=\u2032;"]},{"entry":[{},"p_equal = \u2032+=\u2032;"]},{"entry":[{},"m_equal = \u2032\u2212=\u2032;"]},{"entry":[{},"and = \u2032and\u2032;"]},{"entry":[{},"or = \u2032or\u2032;"]},{"entry":[{},"xor = \u2032xor\u2032;"]},{"entry":[{},"implies = \u2032implies\u2032;"]},{"entry":[{},"l_par = \u2032(\u2032;"]},{"entry":[{},"r_par = \u2032)\u2032;"]},{"entry":[{},"l_bracket = \u2032[\u2032;"]},{"entry":[{},"r_bracket = \u2032]\u2032;"]},{"entry":[{},"l_brace = \u2032{\u2032;"]},{"entry":[{},"r_brace = \u2032}\u2032;"]},{"entry":[{},"semicolon = \u2032;\u2032;"]},{"entry":[{},"dcolon = \u2032::\u2032;"]},{"entry":[{},"colon = \u2032:\u2032;"]},{"entry":[{},"comma = \u2032,\u2032;"]},{"entry":[{},"channel = \u2032#\u2032;"]},{"entry":[{},"at = \u2032@\u2032;"]},{"entry":[{},"bar = \u2032 | \u2032;"]},{"entry":[{},"ddot = \u2032..\u2032;"]},{"entry":[{},"apostroph = \u2032\u2032\u2032;"]},{"entry":[{},"quote = \u2032\u2033\u2032;"]},{"entry":[{},"amp = \u2032&\u2032;"]},{"entry":[{},"qmark = \u2032?\u2032;"]},{"entry":[{},"inc_range = \u2032[..]\u2032;"]},{"entry":[{},"exc_range = \u2032(..)\u2032;"]},{"entry":[{},"incl_range = \u2032[..)\u2032;"]},{"entry":[{},"incr_range = \u2032(..]\u2032;"]},{"entry":[{},"t_let = \u2032let\u2032;"]},{"entry":[{},"t_in = \u2032in\u2032."]},{"entry":[{},"t_if = \u2032if\u2032;"]},{"entry":[{},"t_then = \u2032then\u2032;"]},{"entry":[{},"t_else = \u2032else\u2032;"]},{"entry":[{},"endif = \u2032endif\u2032;"]},{"entry":[{},"t_set = h_set;"]},{"entry":[{},"t_bag = h_bag;"]},{"entry":[{},"t_sequence = h_sequence;"]},{"entry":[{},"t_collection = h_collection;"]},{"entry":[{},"bool = \u2032true\u2032 | \u2032false\u2032 | \u2032T\u2032 | \u2032F\u2032;"]},{"entry":[{},"simple_type_name = ( uppercase (lowercase | digit | uppercase |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2032_\u2032)* ) | h_set | h_bag | h_sequence | h_collection;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"name = lowercase (lowercase | digit | uppercase | \u2032_\u2032)*;"]},{"entry":[{},"new_line = line_terminator;"]},{"entry":[{},"int = number;"]},{"entry":[{},"real = number \u2032.\u2032 number;"]},{"entry":[{},"blank = 9 |\u2032\u2032*;"]},{"entry":[{},"tab = 9;"]},{"entry":[{},"string_lit = \u2032\u2032\u2032 s_char sequence? \u2032\u2032\u2032;"]},{"entry":[{},"time_lit = \u2032\u2033\u2032 s_char sequence? \u2032\u2033\u2032;"]},{"entry":[{},"br_lit = h_dtilda br_char_sequence? h_dtilda;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Ignored Tokens"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"comment, new_line, blank, tab, amp, qmark;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Productions"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"rulesheet ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{rulesheet} t_rulesheet id [priority]:int let_expression*"]},{"entry":[{},"precondition* nc_rule* condition* action* rule* |"]},{"entry":[{},"{fragment} rule_fragment;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"id = {name} name | {typename} simple_type_name | {number} int ;"]},{"entry":[{},"rule_fragment ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{declaration} let_expression |"]},{"entry":[{},"{precondition} precondition |"]},{"entry":[{},"{nc rule} nc_rule |"]},{"entry":[{},"{condition} condition |"]},{"entry":[{},"{action} action |"]},{"entry":[{},"{when} when_expression |"]},{"entry":[{},"{do} do_expression |"]},{"entry":[{},"{brstatement} brstatement;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"precondition = t_precondition expression;"]},{"entry":[{},"nc rule = t_nrule id action_expression action_tail*"]},{"entry":[{},"condition = t_condition id expression t_valueset valueset;"]},{"entry":[{},"valueset = l_brace unary_relational_expression valueset_tail* r_brace;"]},{"entry":[{},"valueset_tail = comma unary_relational_expression;"]},{"entry":[{},"when_expression = t_valueset not? [whenset]:valueset"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"when_tail* t_from [fromset]:valueset"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"when_tail = comma not? valueset;"]},{"entry":[{},"unary_relational_expression = {unary} relational_expression_tail |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{postfix}postfix_expression | {range} range_expression;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"range_expression = [left_expr]:postfix_expression range_op"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[right_expr]:postfix_expression;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"range_op = {inclusive} inc_range | {exclusive} exc_range |"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{inc_left} incl_range | {inc_right} incr_range ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"action ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"t_action id action_expression action_tail* t_actionset actionset?;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"actionset = l_brace postfix_expression actionset_tall* r_brace;"]},{"entry":[{},"actionset_tail = comma postfix_expression ;"]},{"entry":[{},"do_expression ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"t_actionset l_brace postfix_expression r_brace t_from actionset;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"brstatement = t_brstatement id br_body*;"]},{"entry":[{},"br_body = {text} br_lit | {value} l_brace postfix_expression r_brace;"]},{"entry":[{},"rule = t_rule id conditionlist* actionlist*;"]},{"entry":[{},"conditionlist = t_condition id valueset;"]},{"entry":[{},"actionlist = t_action id postfix_expression;"]},{"entry":[{},"action_expression = {assign} assignment_expression |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{expr} expression ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"action_tail = semicolon action_expression ;"]},{"entry":[{},"assignment_expression ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"t_asgn postfix_expression assignment_operator expression ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"assignment_operator = {equal} equal | {plus_equal} p_equal |"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{minus equal} m_equal ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"expression = let_expression* logical_expression ;"]},{"entry":[{},"if_expression ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"t_if [if_branch]:expression t_then [then branch]:expression t_else"]},{"entry":[{},"[else_branch]:expression endif ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"logical_expression = relational_expression logical_expression_tail* ;"]},{"entry":[{},"logical_expression_tail = logical_operator relational_expression ;"]},{"entry":[{},"relational_expression ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"additive_expression relational_expression_tail? ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"relational_expression_tail = relational_operator additive_expression;"]},{"entry":[{},"additive_expression ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"multiplicative_expression additive_expression_tail* ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"additive_expression_tail = add_operator multiplicative_expression ;"]},{"entry":[{},"multiplicative_expression ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"unary_expression multiplicative_expression_tail* ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"multiplicative_expression_tail = multiply_operator unary_expression ;"]},{"entry":[{},"unary_expression = {unary} unary_operator postfix_expression |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{postfix} postfix_expression ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"postfix_expression = primary_expression postfix_expression_tail* ;"]},{"entry":[{},"postfix_expression_tail = postfix_expression_tail_begin feature_call;"]},{"entry":[{},"postfix_expression_tail_begin = {dot} dot | {arrow} arrow;"]},{"entry":[{},"primary_expression = {lit_col} literal_collection |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{literal} literal | {feature} path_name time_expression? qualifiers?"]},{"entry":[{},"feature_call_parameters? | {parentheses} l_par expression r_par |"]},{"entry":[{},"{if} if_expression ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"feature_call_parameters {empty} l_par r_par |"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{concrete} l_par expression fcp_helper* r_par |"]},{"entry":[{},"( l_par declarator? actual_parameter_list? r_par ) ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"fcp_helper = {comma} comma expression |"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{colon} colon simple_type specifier |"]},{"entry":[{},"{iterate} semicolon name colon simple_type_specifier equal"]},{"entry":[{},"expression | {bar} bar expression ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"let_expression ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"t_let name let_expression_type_declaration? equal expression t_in ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"let_expression_type_declaration = colon path_type name ;"]},{"entry":[{},"literal = {strinq} string_lit | {real} real | {integer} int |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{boolean} bool | {enum} channel name | {time} time_lit;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"enumeration_type ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"enum l_brace channel name enumeration_type_tail* r_brace ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"enumeration_type_tail = comma channel name ;"]},{"entry":[{},"simple_type_specifier = {path} path_type_name |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{enum} enumeration_type ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"literal_collection ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"collection_kind l_brace expression list_or_range? r_brace;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"expression_list_or_range = expression expression_list_or_range_tail? ;"]},{"entry":[{},"expression_list_or_range_tail = {list} expression_list_tail+ |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{range} ddot expression ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"expression_list_tail = comma expression ;"]},{"entry":[{},"feature_call ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"path_name time_expression? qualifiers? feature_call_parameters? ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"qualifiers = l_bracket actual_parameter_list r_bracket ;"]},{"entry":[{},"declarator ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{standard} name declarator_tail* declarator_type_declaration? bar |"]},{"entry":[{},"{iterate} [iterator]:name [iter_type]:declarator_type_declaration"]},{"entry":[{},"semicolon [accumulator]:name [acc_type]:declarator_type_declaration"]},{"entry":[{},"equal expression bar;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"declarator_tail = comma name ;"]},{"entry":[{},"declarator_type_declaration = colon simple_type_specifier ;"]},{"entry":[{},"path_type_name = type_name_path_type_name_tail* ;"]},{"entry":[{},"path_type_name_tail = dcolon type_name ;"]},{"entry":[{},"type_name = {non_collection} simple_type_name |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{collection} collection_type l_par simple_type_name r_par;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"collection_type {set} t_set | {bag} t_bag | {sequence} t_sequence |"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{collection} t_collection;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"path_name = path_name_begin path_name_tail* ;"]},{"entry":[{},"path_name_begin = {type_name} type_name | {name} name ;"]},{"entry":[{},"path_name_tail = dcolon path_name_end ;"]},{"entry":[{},"path_name_end = {type_name} type_name | {name} name ;"]},{"entry":[{},"time_expression = at t_pre ;"]},{"entry":[{},"actual_parameter_list = expression actual_parameter_list_tail* ;"]},{"entry":[{},"actual_parameter_list_tail = comma expression ;"]},{"entry":[{},"logical_operator = {and} and | {or} or |"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{xor} xor | {implies} implies;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"collection_kind = {set} t_set | {bag} t_bag |"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{sequence} t_sequence | {collection} t_collection ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"relational_operator = {equal} equal | {n_equal} n_equal |"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{gt} gt | {lt} lt | {gteq} gteq | {lteq} lteq ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"add_operator = {plus} plus | {minus} minus;"]},{"entry":[{},"multiply_operator = {mult} mult | {div} div | {mod} mod | {exp} exp;"]},{"entry":[{},"unary_operator = {minus} minus | {not} not;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The invention has been described in terms of particular embodiments. Other embodiments are within the scope of the following claims. For example, the steps of the invention can be performed in a different order and still achieve desirable results. The invention can be implemented in other component architectures. For example, the invention can be implemented using Microsoft APS (Active Server Pages) and COM (Component Object Model) or DCOM (Distributed Component Object Model) technologies or CORBA (Common Object Request Broker Architecture) rather than Java-based technologies, and programmed components of the invention can be programmed in a language other than Java, for example, C++."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 6","b":["7","8","9","10","11","12","13","14","15","16","17","18"]}]},"DETDESC":[{},{}]}
