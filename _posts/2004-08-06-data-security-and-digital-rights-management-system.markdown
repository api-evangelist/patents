---
title: Data security and digital rights management system
abstract: A system and method is described for enhancing data security in a broad range of electronic systems through encryption and decryption of addresses in physical memory to which data is written and from which data is read. It can be implemented through software, hardware, firmware or any combination thereof. Implementation in Digital Rights Management execution using the invention reduces cost, enhances performance, and provides additional transactional security.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060756&OS=08060756&RS=08060756
owner: 
number: 08060756
owner_city: 
owner_country: 
publication_date: 20040806
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","U.S. FEDERALLY SPONSORED RESEARCH","SEQUENCE LISTING OR PROGRAM","TECHNICAL FIELD OF THE INVENTION","BACKGROUND ART","DISCLOSURE OF THE INVENTION","MODES FOR CARRYING OUT THE INVENTION","INDUSTRIAL APPLICATIONS AND ADVANTAGES"],"p":["This application claims priority based upon U.S. Provisional Patent Application Ser. No. 60\/493,287 filed Aug. 7, 2003 by the present inventors.","Not Applicable","Not Applicable","The technical field of the invention is enhancement of security of \u201ccontent\u201d data in data storage, access, processing, and communication systems, in general. In particular, the invention addresses data security issues in the various subsystems of computers, networking system hardware, portable electronic systems, desktop electronic systems, and other semiconductor devices. The invention's objective is to increase by orders of magnitude the difficulty of successful intrusion from a network or by an unauthenticated user into such systems and devices for the purpose of stealing, copying or trashing data stored or undergoing processing therein.","Contemporary data processing and communication systems, as well as consumer systems, contain one or more CPUs (central processing units), main or system memory (volatile and nonvolatile), and various peripheral devices such as chip sets and hard disks for mass storage. The CPU is typically in one VLSI (very large-scale integrated circuit). The main or system memory, any dedicated memory such as graphics memory, the hard disks, and the controller circuitry associated with them comprise the memory subsystem. The ultrafast, relatively small cache memories (generally called L, L, possibly L) built into the CPU are also usually considered part of the memory subsystem. Main or system memory typically consists of module(s) made up of DRAMs, SRAMs, and nonvolatile memory like flash. A module contains many such memory devices. Each of the DRAM (or SRAM, or flash) devices is organized into a number of subunits, called banks, blocks, sectors, subarrays etc. Each subunit contains a row\u00d7column matrix or matrices, with a storage cell or cells at each intersection of row and column. In order to access a bit, byte, several bytes, a word, a page, or other unit of data in the memory subsystem, an address (eventually decoded) consisting of a device address, bank address, row address, column address, and any other predetermined sequences of data (called bursts) must be provided. All memory subsystems operate through LOADs (or READs) from the memory subsystem, and STOREs (or WRITEs) to the memory subsystem by the CPU.","The controller devices and circuitry that interface between the CPU and the memory subsystem make up the system's memory management unit (MMU). The MMU, which may be in part physically integrated into the CPU and\/or located in chip sets associated with the CPU, typically includes among other devices an Address Translation Table (ATT). The ATT receives and operates on all requests from the CPU for LOADs and STOREs to and from the memory subsystem. All units of data transmitted in this process contain the actual or content data, along with the address information indicating where, as viewed from the CPU, the content data is (for a LOAD) or will be (for a STORE) located in the physical memory. But, for more efficient manageability of data in available physical locations within the total memory space, those locations being in some degree non-contiguous, fragmented, or random, the addresses specified by the CPU (often called \u201clogical\u201d or \u201cvirtual\u201d addresses) are translated or mapped by the ATT into the physical addresses. Such address translation or mapping causes the physical addresses to be presented to the operating system and CPU as contiguous, unfragmented and optimally structured addresses for best system performance. The ATT that performs this function could be in software, either as a part of the operating system, or as a part of a separate translation utility, or as a part of an application programming interface (API). The ATTs can also be implemented in hardware in the CPU, or an associated chip set, or a memory controller that interfaces the CPU with the MMU and the memory subsystem. Some CPUs have the memory controllers as a physically integral part of the CPU itself, though the controllers are functionally part of the MMU. Additionally, modern operating systems allow each program to create its own virtual protected memory space, for faster look-up of relevant addresses, which results in more efficient data access, consisting of LOADs and STOREs as noted. In this scheme, the address \u201ctags\u201d and\/or \u201cpointers\u201d that correlate the logical address blocks with actual locations in physical memory are usually cached in Translation Look Aside Buffers (TLBs) which are an integral physical part of the CPU (or sometimes, its associated chip set) and also functionally comprise a component of the MMU.","For content data access to or from the memory subsystem, the physical addresses have to be decoded on the associated chip set level using the ATT and\/or the cached address tags (pointers) from the TLBs. The chip sets typically have the MMU's memory controllers as an integral part\u2014the memory controllers perform command, control, clock, address, and any other necessary service functions (e.g., DRAM refresh). In nonvolatile memory controllers (flash controllers), a refresh function is not necessary. However, \u201cwrite verify\u201d functions, or, \u201cerase before program\u201d functions and associated steps are executed by such a memory controller. If ferroelectric memories are the devices in a memory subsystem, the memory controller may have a different set of functions to be served. Physical addressing to the devices can be either multiplexed addressing or non-multiplexed addressing (divided in time domain, and, triggered by a system clock).","In today's electronic machines, when the CPU needs access to the memory subsystem for the purpose of executing a READ or WRITE operation on data, it generates a logical address as described earlier. This logical address in turn is translated by the address translation table to an address in physical memory as described earlier and the pointers are stored in the TLBs. This is the dominant process used to convert logical addresses to physical addresses and to keep track of the entries. The memory controller may optimize the physical memory depending on available storage locations, and any other application-dependent requirements for contiguous memory. Let us consider a representative example of a DIMM (DRAM Dual-in-line Memory Module), Micron Technology Inc.'s MT36VDDF256722\u2014GB DIMM. DRAM DIMMs are used as system memory in PCs and servers. This device has 134,217,728 (=2) addressable locations in physical memory. Thus the CPU\/memory controller needs to control 27 total address bits (13 row and 12 column bits, plus 2 bank select bits). These 27 address bits are the same for any memory access, namely, READ or WRITE etc. Hence, if an intruder accesses data (performs a READ), subsequently manipulates\/corrupts the data, and that altered data is written back to the same location in physical memory from which it was (first) accessed, data tampering or trashing occurs. No reasonable amount of data scrambling or encryption can mitigate the above event, nor can the correct data be recovered. Alternatively, an intruder can employ a sequence of READs for the purpose of stealing random blocks of data rather than tampering with or trashing it. Because this type of transaction is extremely fast, large databases can be copied with the expectation that they will contain data (content, information) useful for the intruder.","Under the current art, for a malicious intrusion over a network such as the Internet, intranet, VPN, LAN (wired and wireless) or the like to succeed, the intruder need only gain access to the targeted computer or other device (server, workstation, hard disk, smart card) so as to be able to issue instructions to the device's memory subsystem. All content data including that targeted by the intruder must pass through the memory subsystem, for any access (LOAD or STORE, READ or WRITE). Access could occur through the targeted machine's network connection which involves the CPU (or chip set, or a base station) or similar devices. DMA (Direct Memory Access) is also possible, bypassing the CPU (or similar functional device). In a machine with dedicated graphics memory, an intrusion could also occur through the graphics memory controller. In a smart card type portable system, the memory subsystem could comprise flash memory or ferroelectric memory or phase-change memory or plastic memory or molecular memory or carbon nanotube memory, or a combination of any of the above in a chip stack with either DRAM or SRAM. In conventional systems not employing the invention described herein, once the intruder has succeeded in breaching the external defense such as a firewall, the intruder will be able to retrieve data and issue new instructions to the memory subsystem.","With respect to firewalls in conventional current practice, \u201cfirewall\u201d is a broadly used term including a variety of hardware and\/or software arrangements that enforce a network owner's policies governing access to and from systems on a network. Suffice it to say, today's firewalls are data-centric and data-driven, in that they consist primarily of data encryption and decryption algorithms plus user authentication procedures. However, data encryption and decryption dramatically increases memory overhead, and slows down system performance, in addition to hogging precious bandwidth. Even if layers of data encryption (or data scrambling) are employed, decryption technology keeps pace with it very quickly. Log-in names, passwords, and similar or more sophisticated user authentication procedures for logins are some of the mechanisms used in the industry today for verifying access permissions. In addition, inside-the-firewall defensive measures are widely used. These include frequent updating of virus detection and elimination software to combat malicious data theft, trashing, denial-of-service attacks, Trojan horses, worms, and the like. However, even with implementation of all these known measures, the electronics industry has not been able to prevent these attacks. Hence, a need has arisen to take content security to a new level, at minimal cost, without undue sacrifice of performance (e.g., increased latencies and reduced bandwidth).","This invention addresses the problems of security in data storage, access, processing (and data manipulation\/changes), and communication systems, in general. In particular, it addresses data security issues in the various subsystems of computers, networking system hardware, portable electronic systems, desktop electronic systems, and other semiconductor devices as well, by means of encryption of addresses in physical memory to which data is written and subsequent decryption of the physical memory addresses from which the data is read. The invention can be implemented through software, hardware, firmware or any combination thereof. Implementation in Digital Rights Management execution using the invention will reduce cost, enhance performance, and provide additional transactional security.","The most effective solution to the content data security issue, and a key feature of this invention, is the use of ADDRESS encryption (as opposed to data encryption) as described herein. Address encryption and decryption (address scrambling and descrambling, as some may call them) can be used independently of data encryption\u2014combining both of them is expected to improve security by orders of magnitude.","Our invention as disclosed herein includes several embodiments. In each of those embodiments, the memory subsystem itself, in effect, becomes a highly secure firewall. This is achieved by providing two separate address decryption and decryption operations, an encryption operation for executing WRITE instructions, on the one hand, and a decryption operation for executing READ instructions, on the other hand, independently of each other. Throughout this specification, \u201cWRITE\u201d includes WRITE, WRITE\/MODIFY, WRITE BACK, and WRITE THROUGH operations, and also the segment of READ\/MODIFY\/WRITE operations wherein data is written to the memory subsystem; and \u201cREAD\u201d includes READ operations, and also the segment of data READ\/MODIFY\/WRITE operations wherein data is retrieved from the memory subsystem. The algorithm or \u201ckey\u201d used for address encryption is not made directly available or accessible for the address decryption attending READ operations. Rather, the decryption algorithm or key, which must complement the encryption algorithm or key so as to exactly reverse the address encryption, is generated at the same time as the encryption algorithm or key, but in separate circuitry that is not accessible by, and cannot be activated by, an intruder over a network or an unauthenticated would-be local user. Thus, any attempt to extract data from, or take control of, the system from a network or by an unauthenticated local user will be unable to obtain coherent output from the memory subsystem and the attempt will fail.","The principles of this invention apply not only to a CPU-centric system like a PC or cell phone or PDA or server or smart card, but also to systems with DMA controllers and memory, hard disk controllers and memory, graphics controllers and memory and the like. Furthermore, the word CPU is used broadly\u2014its associated logic chip set and memory controller can be an integral part of it or external to it. A CPU in this invention moreover also refers and includes DSPs (Digital Signal Processors), embedded microcontrollers, and similar processors.","Now we describe embodiments of our invention, which makes the above-described intrusions extremely difficult (certainly, orders of magnitude more difficult than in current systems). In one preferred practical embodiment, we create a bit offset to be applied to a logical address generated by the MMU , for the first LOAD in a sequence of accesses. Specifically, this might consist of further modifying the physical address determined by the MMU , during the WRITE operation. Such bit offset can be accomplished in many ways\u2014by adding or subtracting a fixed or sequenced binary value to the (in our example) 25 bits (out of the total of 27 bits) that comprise the physical memory row and column addresses. It is preferable to not change the bank address bits\u2014although it is not forbidden\u2014because in a DRAM, bank jumps can cause latency penalties. While in some memories like SRAMs such is not the case, in a flash memory one may have to pay an even longer latency penalty by switching to a different memory subunit. This offset value is the key that encrypts the addresses in physical memory in LOAD operations. It is not necessary for a CPU, DSP, embedded microcontroller, DMA controller, hard disk controller, or graphics controller to know of the existence of this additional encryption step; indeed it is essential that they not have this knowledge. In other words, the system's devices that are external to system memory are agnostic to the fact that the content data have been written to physical addresses different from those shown in or generated in the address translation table and\/or the TLB tags. As a consequence, if a READ request is thereafter issued for access to the original, pre-offset, memory location, the READ will be from a physical memory location that contains different data than intended, namely data that is one or more of non-existent, incorrect, irrelevant, or incoherent . If a READ request  is transmitted to the MMU  by an intruder over a network or by an unauthenticated local user, such will be the case. This can be done in a number of ways, from a simple access code (including, for example, a predefined time valid window for access or more sophisticated methods including biometrics such as finger prints, voice verification or retinal scans). Since the returned data  is either non-existent, incorrect, irrelevant and\/or incoherent, a checksum error  will be generated (checksum error implementation is well known in the industry) and the operation will stop. The checksum error  can be used to generate an intrusion alarm and trigger further protective measures, like a system lockout or even power shutdown. In the case of intrusion through a DMA controller, hard disk controller, graphics controller etc., the above also applies because those devices and their associated circuitry for accessing their respective physical memories are agnostic to the WRITE encryption key in the same manner as the CPU.","In the embodiment above, the encryption key is very simple, namely an offset value or a sequence of offset values to the address bits. Other embodiments are possible as well in hardware, firmware, or software. Address inversion is one such embodiment. Address table look-up for cross mapping, left shift, right shift, barrel shift, address fragmentation\u2014all of these individually, or as a combination thereof, can provide still better enhancement to data security, as compared to that afforded and obtained in current systems. All these techniques can be implemented with minimal cost and performance penalty and are well known in the art.","There are likewise various devices and techniques that can be used to make the decryption algorithm or key  available during a READ operation, in order to reverse the encryption of the physical memory address generated in the prior WRITE operation. The simplest means to do so, is to require legitimate local users to enter the offset value before using the local machine (or smart card or similar portable appliances). Expressed as a decimal number, the offset can be as small as a single digit. However, to prevent inadvertent or deliberate leaks of the number, as can easily happen with passwords, a more secure means is to use a simple local hardware device to communicate the decryption key  to the local machine, or machines if connected in a network. That particular device, though transparent to the user, will be activated only by some action  on the part of the legitimate user that is not replicable by a network intruder. For example, the user's log-in information entered at the local keyboard (and no other keyboard) can, in addition to its normal function, pass a command through an independent circuit on the local machine that is not accessible from any outside network and further is not accessible locally except by proper log-on by a duly authenticated user. This command triggers the release of the decryption algorithm or key , and can also perform related useful functions such as maintaining a log of accesses and use.","If so desired, the invention's embodiments can create new security firewalls at every stage in an electronic system where there is physical memory. As an example, in today's conventional PCs with one CPU, one can create such enhanced security firewalls one each at system memory, at graphics memory on the motherboard or add-in graphics card, at the hard disks, and so forth. In a more complex, multi-CPU processor, these inventions can be implemented at many places where such physical memory exists. In a DRM scenario, where multiple transactions may be in multiple databases, whether those data base segmentations are done in software or in hardware such as physical memory, the invention's implementation offers enhanced security. The embodiments described here can be incorporated in monolithic integrated circuits, SIP (System-In-Package), SOC (System-On-Chip), SIC (System-In-Chip), electronic cards, electronic subsystems including modules, or original equipment systems. In an enterprise environment, the invention's embodiments can be implemented in one device, many devices, one database or several databases.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["102","101","103","101","101"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["104","107","102","102","105","106"]},"The prior art refers to an address scrambling method wherein logical addresses are scrambled or \u201cmapped\u201d to physical addresses during the execution of a particular WRITE instruction, and the physical addresses are thereupon transmitted to the memory subsystem over the system's address bus. However, under that prior art and unlike under our invention, it appears that the physical address remapping or scrambling process is automatically reversed when a READ command is presented to the memory subsystem. There is no requirement of furnishing a decryption algorithm or key  the availability of which can only be triggered by a duly authenticated user and not by an intruder. In consequence, only limited or possibly no enhancement of the security of the data held in the memory subsystem is achieved.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["108","102","102","109","110"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4","FIG. 2"],"b":["2","3"]},"In the embodiment of , the scrambler\/descrambler encryption system is inserted between the memory controller and DRAM memory. It will be understood that an identical concept can be implemented between the DMA controller and the memory subsystem, the hard disk controller and the hard disk(s), and between a graphics controller and dedicated graphics memory, if present. If so desired, both the address scrambler and descrambler can be made programmable on the fly so as to generate new encryption keys at programmed intervals or ad hoc. Switching between the two units for read and write operations is a function of the write enable (WE) signal pulled LOW (for the write data path) or HIGH (for the read data path). All the other clock\/command\/control signals as well as the addresses before the scrambler\/descrambler pair and after the scrambler\/descrambler pair are reunited to continue to the memory subsystem.","In the embodiment of , there is shown a scrambler\/descrambler pair for address scrambling on each memory module (DIMM) itself. This will further enhance security, because large applications may need data from several modules, each of which will scramble and descramble addresses using different algorithms keys.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 7"},"Further extensions of the invention are possible for the embodiments illustrated in . The scrambler\/descrambler pairs can further encompass different encryptions within the same system for additional data security, by encrypting at each module in an owner-specified manner. An additional extension will encompass the use of fault-tolerant mechanisms such as are employed in hot-swappable memory subsystems and which are well known in the art. This entails temporarily purging data from the memory subsystem, changing the encryption keys on the fly and then restoring all data to the modules using the new encryption keys. This can further reduce or eliminate the down time for maintenance that would otherwise be necessary for conventional (routine) changing of the encryption keys. Chip kill techniques (also well known in the art) can also be included with the encryption.","As noted previously, the address scrambler\/descrambler pair can also be implemented in software. It can further be implemented as hardware as a pair of FPGAs or PLDs, or cross bar switcher or the like. Because changing encryption keys will trash the data currently residing in the memory subsystem, the data needs to be offloaded to other devices, or preferably written back to nonvolatile storage during routine storage maintenance (as opposed to hot swaps). Security can be increased further by embedding a system signature for cyclic redundancy check of the reference code, a mismatch of which will trigger an immediate alarm. Unauthorized access through code cracking can be warded off by a simple switching of the encryption key to an alternate value to render the entire data unrecognizable even if the correct key is subsequently supplied. This method makes it impossible to employ scanning of keys into the system until the valid key is supplied, since with every new access another key will be used and therefore the statistical probability for a match is reset. However, accidental lock-out is avoided since there is a finite number of alternate keys that are randomly rotated, and if the correct key is supplied by a supervisor, it is a matter of finite accesses until the correct key will hit the corresponding encryption data. Note that this can only occur with the correct key; even if by chance an alternate key is met, the addresses will still be invalid and return no data.","For an enterprise, these inventions can be applied at every place where there is physical memory or a database. Although the present invention has been described in some detail, it should be understood that various changes, substitutions, and alterations can be made thereto without departing from the spirit and scope of the invention as defined by the appended claims. Thus, there have been described and illustrated herein various methods suitable for use in conjunction with the design and manufacture of a broad range of electronic systems and devices. However, those skilled in the art should recognize that numerous modifications and variations may be made in the techniques disclosed herein without departing substantially from the spirit and scope thereof, which is defined solely by the claims appended hereto.","As is well known, cyber crime has evolved as a significant problem in a commercial world dominated by e-commerce. Flow of data, primarily digital, from multiple sources to multiple destinations through difficult-to-monitor communication and storage networks offers new challenges for protection of data. Security breaches to data, accessed through hacking, worms, viruses, identity theft, and rogue employees, have become increasingly common.","Thus, security of digital content data is vital, whether such data is in storage or in transit or in modification for some destination. Encryption and decryption of data has been implemented for many decades. As vulnerability of content data increases, a need has arisen to secure the content from the enterprise level (e.g. a server farm) through the device level (example is a smart card). Content can be valuable financial data, customer records, trade secrets, and intellectual property. Technologies deployed for such content protection in business communications today are vulnerable to content theft, manipulation, and misappropriation. E-mail, wireless LANs, instant messaging, PDAs, smart cards, floppy disks, CDs are all vulnerable. Traditional techniques of data scrambling and rudimentary \u201ckey\u201d execution (password, in most cases) are inadequate for the level of content protection demanded today. In business enterprises and elsewhere, firewalls can protect against external attacks. VPNs (Virtual Private Networks) can conduct data safely between the server and the workstation. However, neither of these systems can protect data once it is resident in the desktop or any other client device (a memory module, an integrated circuit, a solid state storage device). Another challenge that has emerged recently is Enterprise DRM (Digital Rights Management). Unlike other security mechanisms that protect data at rest or in transit, enterprise DRM is required to protect data while it is \u201clive\u201d in an application, on a desktop, or as it is being used.","The invention described herein offers substantial mitigation of the above problems, at reasonable cost in terms of die space, required new engineering, and demands on system performance and bandwidth."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be understood more fully from the detailed description given below and from the accompanying drawings of embodiments of the invention which, however, should not be taken to limit the invention to the specific embodiments described, but are for explanation and understanding only.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["101","103"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
