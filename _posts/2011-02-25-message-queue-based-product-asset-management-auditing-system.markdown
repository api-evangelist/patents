---
title: Message queue based product asset management auditing system
abstract: A server detects a product asset management operation and generates an event message corresponding to the product asset management operation. The event message includes data describing the product asset management operation. The server sends the event message to one or more message queues. One or more listeners that are associated to the one or more message queues can obtain the event message to perform an auditing action that indicates to a user an occurrence of the product asset management operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09224111&OS=09224111&RS=09224111
owner: Red Hat, Inc.
number: 09224111
owner_city: Raleigh
owner_country: US
publication_date: 20110225
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Embodiments of the present invention relate to product asset management. Specifically, the embodiments of the present invention relate to auditing product asset management.","A software provider can sell software and\/or service products, for example, by selling subscriptions to customers for products. An entity that has purchased a product subscription is an owner of the subscription and has a right to use the product for the period of the subscription. An owner's use of a subscription can be represented, for example, as an \u2018entitlement.\u2019 For example, a customer, such as ACME Company, purchases ten 3-year subscriptions to Enterprise Software ABC. ACME Company is the owner of the ten subscriptions, which can be represented by ten entitlements, and can assign the ten entitlements to various systems. A consumer is an entity that has been granted an entitlement to allow the entity to receive product updates. When a system is granted an entitlement, the system is a consumer that can receive product updates for the Enterprise Software ABC.","Product asset management tools are provided to allow software providers and customers to manage the product subscriptions that have been purchased, the subscriptions that have been consumed, the patches, updates, and maintenance of the products, etc. A large number of product asset management related operations occur at any given time. For example, consumers are created and deleted, entitlements are created and granted, etc. Conventional product asset management tools, however, do not provide users, such as system administrators, the capability to easily audit the various product asset management operations that occur.","Embodiments of the invention are directed to a method and system for auditing product asset management. A server detects a product asset management operation and generates an event message corresponding to the product asset management operation. The event message includes data describing the product asset management operation. The server sends the event message to one or more message queues. One or more listeners that are associated to the one or more message queues can obtain the event message to perform an auditing action that indicates to a user an occurrence of the product asset management operation.","Conventional product asset management tools do not provide users, such as system administrators, the capability to easily audit the various product asset management operations that occur. \u2018Audit\u2019 and \u2018auditing\u2019 hereinafter refers to recording event data pertaining to an operation and providing the event data to one or more users. Embodiments of the present invention provide a convenient mechanism to automatically audit product asset management events and to allow users to configure auditing actions to be performed using the event data. For example, the event data can be used to log product asset management events in a log file, and\/or record product asset management events in a database.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","100","101","107","120","107","140","150","120","120","120"]},"Software providers can develop and\/or sell software and\/or service products. A software provider can be a large software company that develops and sells operating system platforms, an ISV that develops and sells specialized software to run on an operating system platform, and\/or an independent service provider (ISP) that does not develop, but sells products. For brevity and simplicity, an ISV is used as an example of a software provider throughout this document.","Customers that purchase subscriptions are owners of the subscriptions. A subscription purchase is an owner's right to use the product for the period of the subscription. An owner's use of a subscription can be represented, for example, as an \u2018entitlement.\u2019 Software may or may not already be installed on an entity. Software that is already installed on an entity can be somewhat usable, even if the entity is not granted an entitlement for the installed software. When an entity is granted an entitlement for the software, the entity can access a product repository to receive software updates. For example, an ISV develops and sells Enterprise Software ABC. A customer, ACME Company, purchases ten 3-year subscriptions to Enterprise Software ABC, which is represented by ten entitlements. ACME Company may already have the Enterprise Software ABC installed in one or more of its systems. When a system is granted an entitlement for the Enterprise Software ABC the system can receive updates for the Enterprise Software ABC. A consumer is an entity that has been granted an entitlement to allow the entity to receive product updates. For example, when an entity is granted an entitlement for the Enterprise Software ABC, the entity is a consumer of the Enterprise Software ABC. Examples of entities include, and are not limited to, a person, a client computing system, a server computing system, a domain, etc.","Software providers and customers can track which product subscriptions have been purchased and which of the purchased subscriptions have been consumed. The tracking of purchased and consumed products is hereinafter referred to as \u2018product asset management.\u2019 Product asset management can also include tools to manage the consumers in their environments. These tools may, for example, allow system administrators to manage patches, updates, monitoring and maintenance of the entitlements, etc. A software provider environment, such as ISV environment , can include a server  that hosts a product asset management system  for managing product assets in the one or more customer environments . The product asset management system  can include, for example, a Java web application based on a REST (Representational State Transfer) client-server architecture that exposes a REST API. A server  can be hosted by any type of computing device including server computers, gateway computers, desktop computers, laptop computers, hand-held computers or similar computing device. An exemplary computing device is described in greater detail below in conjunction with .","The product asset management system  can perform a number of operations to manage products assets of one or more owners, such as creating and deleting consumers (e.g., create ConsumerID123 on Jan. 1, 2011 at 05:30 pm, delete ComsuerID456 on Jan. 10, 2011 at 02:30 pm), start consumption of an entitlement from a pool (e.g., assign EntitlementSerial98765 to ConsumerID123 on Jan. 1, 2011 at 06:30 pm), stop consumption of an entitlement from a pool, maintaining a pool count (e.g., remove assignment of EntitlementSerial98765 to ConsumerID123 on Feb. 1, 2011 at 05:30 pm), etc. An event can be the occurrence of a product asset management operation. Conventional product asset management tools do not provide users, such as system administrators, the capability to easily audit the various product asset management events. The product asset management system  can include a message-based asset auditing subsystem  to automatically generate and store product asset management event data that represents the occurrence of the operation and perform auditing actions using the event data. In one embodiment, the message-based asset auditing subsystem  includes a messaging subsystem  hosted in the same server computing system. An example of a messaging subsystem  can include, and is not limited to, HornetQ\u00ae from JBoss\u00ae, ActiveMQ\u00ae from The Apache Software Foundation etc. In another embodiment, the messaging subsystem  can be hosted by a server computing system that is separate from the server computing system hosting the product asset management system , and the message-based asset auditing subsystem  can be coupled to the messaging subsystem .","The messaging subsystem  can configure one or more listeners to receive event messages pertaining to product asset management operations that occur. An event message includes data that describes an event. Examples of event data can include, and are not limited to, a principal performing a product asset management operation (e.g., a system performing an action, a user performing an action), a date of the event, a time of the event, an event type (e.g., created, updated, deleted, etc.), an event target (e.g., consumer, owner entitlement, etc.), and an owner identifier for an owner (e.g., a unique ID for an owner), an object identifier, etc. A listener can be implemented as program code that when executed can obtain event messages, collect data from an event message, and perform an auditing action using the collected data. For example, a LoggingListener can receive an event message indicating that the product asset management system  created ConsumerID on Jan. 1, 2011 at 05:30 pm. The LoggingListener can obtain the consumer identifier, date, and time of the event from the message, and use the data to update an audit log stored in the data store  indicating that ConsumerID was created on Jan. 1, 2011 at 05:30 pm. A user , such as a system administrator, can access the audit log and see that ConsumerID was created and see data pertaining to this event.","In one embodiment, the product asset management system  exposes a programmatic REST interface, which a client tool  hosted by a client , can communicate with. In one embodiment, a client tool  can be any kind of tool which could communicate with the REST interface. For example, a user , such as an ISV system administrator, can use the client tool  to communicate with the product asset management system  to manage product patches and product updates of the consumers in the one or more customer environments . In another example, a user , such as an ACME Company system administrator, can use the client tool  to communicate with the product asset management system  to consume a product  on a client . Other examples of a client tool , can include and are not limited to, a web interface, web browser, or other client software that can communicate with the REST interface. The client machines , can be hosted by any type of computing device including server computers, gateway computers, desktop computers, laptop computers, mobile communications devices, cell phones, smart phones, hand-held computers, or similar computing device. An exemplary computing device is described in greater detail below in conjunction with .","A data store  can be a persistent storage unit. A persistent storage unit can be a local storage unit or a remote storage unit. Persistent storage units can be a magnetic storage unit, optical storage unit, solid state storage unit, electronic storage units (main memory), or similar storage unit. Persistent storage units can be a monolithic device or a distributed set of devices. A \u2018set\u2019, as used herein, refers to any positive whole number of items.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","110","105","150","200","210","200","210","200","215","220"]},"The messaging subsystem  can receive input to create one or more listeners that receive event messages  pertaining to product asset management events from one or more message queues . An event message  includes data that describes a product asset management operation that occurred. A listener can be implemented as program code that when executed can obtain event messages  from a message queue , collect event data from the event message , and perform an auditing action using the collected event data, such as updating an audit log file  and\/or an audit database . For example, the messaging subsystem  can create an EmailListener to receive event messages and can send an email to recipients that provides information relating to the event. The message-based asset auditing subsystem  can be coupled to one or more data stores , that store the product asset management audit data. Examples of audit data can include, and are not limited to, an audit log file , an audit database , etc.","The input that defines the one or more listeners to be created can be user input received via a graphical user interface provided by the messaging subsystem  to a client. The message-based asset auditing subsystem  enables a third party to specify listeners to perform auditing actions and the actions to be performed. A third party is a third party to a developer of the product asset management system. For example, a third party, such as an ISV, can configure an EmailListener to email a system administrator when entitlements expire, can configure a LoggingListener to log events in an audit log file , can configure a DatabaseListener to update an audit database  with event data, can configure an ExternalListener to send messages to external systems indicating the operations that have occurred. In one embodiment, the message-based asset auditing subsystem  includes default listeners to receive event messages  from queues  and to perform auditing actions.","The messaging subsystem  can create one or more message queues  in one or more data stores. A queue  can store event messages  until the event messages  are obtained by a listener. In one embodiment, the messaging subsystem  creates a queue  for each listener. When a listener is configured to receive event messages , the messaging subsystem  can create a message queue  for the particular listener. Providing a queue  for each listener can ensure that an event message  is delivered to each listener. In another embodiment, the messaging subsystem  can create a single queue  having multiple listeners that subscribe to the queue , and each listener can receive a copy of the messages  in the queue . The messaging subsystem  can update configuration data  that is stored in a data store  to create a message queue  for a listener.","A product asset management system can perform a number of operations to manage products assets for one or more owners. Examples of product asset management operations can include, and are not limited to, creating an owner, deleting an owner, creating a pool of entitlements, receiving registration data from an entity that registers with the product asset management system, assigning an identity certificate to a registered entity, updating consumer facts data of an entity, determining a list of subscriptions that are available to an entity, generating a representation of an entitlement to be granted to an entity, creating a consumer, deleting a consumer, start consumption of an entitlement from a pool, stop consumption of an entitlement from a pool, maintaining a pool count, authorizing and authenticating a user, etc.","An event can be the occurrence of a product asset management operation. When a product asset management operation occurs, the message generator  can generate an event message  for the event. There can be one event message  for each audited event. An event message  can include event data that describes the event. Examples of event data can include, and are not limited to, a principal performing a product asset management operation (e.g., a system performing an action, a user performing an action), a date of the event, a time of the event, an event type (e.g., created, updated, deleted, etc.), an event target (e.g., consumer, owner entitlement, etc.), and an owner identifier for an owner of an object (e.g., a unique ID for an owner), an object identifier, etc.","The message generator  can provide a generated event message  to the event sink . The event sink  can be configured as a message producer that is enabled to send event messages  to the messaging system . The messaging system  can receive the event messages  and can post the event messages  in the one or more queues  that are configured to store the event messages . The queues  can store the event messages  until a listener obtains the message .","A listener can start a connection with a corresponding queue  and can detect that one or more event messages  are stored in the queue . An event message  includes event data, for example, an event target and an event type, that describes the event. A listener can use the event data (e.g., event target, event type) to determine whether to ignore a message  in the queue  or to obtain the message  from the queue . When a listener obtains a message  from a queue , the listener can collect data from the message , and perform an auditing action using the collected data. Examples of auditing actions, can include, and are not limited to, updating an audit log file  stored in data store  using the collected data from the message , updating an audit database  stored in data store  using the collected data, sending a notification to one or more recipients indicating the occurrence of the product asset management operation, etc. Examples of a recipient can include, and are not limited to, a client device, an external message system (e.g., AMQP messaging system), etc.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIG. 1"],"b":["300","300","300","110","105","150"]},"In one embodiment, the method  starts with the message-based asset auditing subsystem detecting an occurrence of a product asset management operation at block . At block , the message-based asset auditing subsystem generates an event message corresponding to the event and sends the event message to one or more message queues at block . The message-based asset auditing subsystem can send the event message to a messaging subsystem, which can determine which queue(s) to store the message in. The messaging subsystem can store a copy of the event message to the one or more queues. Subsequently, a listener that corresponds to a queue can obtain the event message from the queue and perform an auditing action using data in the event message.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4","FIG. 1"],"b":["400","400","400","110","105","150"]},"In one embodiment, the method  starts with a listener in the message-based asset auditing subsystem starting a connection with a corresponding queue and detecting one or more event messages that are stored in the queue at block . The event messages pertain to product asset management events. At block , the listener identifies event data in the event message to determine whether to ignore the event message or to obtain the message from the queue. The event data that is to be used to make the determination can be configured, for example, via the listener program code. For example, when the listener program code is executed, the listener may be configured to identify the event target and event type in the message to determine whether to ignore or to obtain the message from the queue. For instance, an entitlement for a particular product for a system may be deleted and the system can no longer receive software updates for that particular product. A system administrator may wish to receive emails when such operations occur. An EmailListener may be configured to send an email to one or more recipients (e.g., system administrator) if the event target in the event message is set to \u201centitlement\u201d and if the event type in the event message is set to \u201cdeleted.\u201d At block , the listener determines whether to ignore or to obtain the message based on the identified event data.","If the message is not to be ignored (block ), the listener parses the event data in the event message to collect data to be used in performing an auditing action at block . The listener can collect some or all of the event data in the event message. The collected data is hereinafter referred to as audit data. The audit data to be collected can be configured, for example, via the listener program code. For example, when the listener program code is executed, the listener may be configured to collect a date of the event, a time of the event, an event type (e.g., created, updated, deleted, etc.), an event target (e.g., consumer, owner entitlement, etc.).","At block , the listener performs an auditing action using the audit data. Examples of auditing actions, can include, and are not limited to, updating an audit log file using the collected data from the message, adding\/updating a database entry\/record in an audit database using the collected data, sending a notification to one or more recipients indicating the occurrence of the product asset management operation, etc. Examples of a recipient can include, and are not limited to, a client device, an external message system (e.g., AMQP messaging system), etc. For example, a LoggingListener and DatabaseListener can receive an event message from their corresponding queues indicating that a consumer identifier \u2018ConsumerID\u2019 was created on Jan. 1, 2011 at 05:30 pm. The LoggingListener can collect the consumer identifier, date, and time of the event, and update an audit log indicating that ConsumerID was created on Jan. 1, 2011 at 05:30 pm. The DatabaseListener can obtain the consumer identifier, date, and time of the event, and update the audit database indicating that ConsumerID was created on Jan. 1, 2011 at 05:30 pm. A system administrator can access the audit log and\/or the audit database to see that ConsumerID was created and see data pertaining to the event.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 5","FIG. 1","FIG. 1","FIG. 2"],"b":["500","500","500","109","150","105","500","109","150","105","500","220","200","501","503","505"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 6","b":"600"},"The exemplary computer system  includes a processing device , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or DRAM (RDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a secondary memory  (e.g., a data storage device in the form of a drive unit, which may include fixed or removable computer-readable storage medium), which communicate with each other via a bus .","Processing device  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device  may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. Processing device  is configured to execute the message-based asset auditing subsystem  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)) connected to the computer system through a graphics port and graphics chipset, an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The secondary memory  may include a machine-readable storage medium (or more specifically a computer-readable storage medium)  on which is stored one or more sets of instructions (e.g., the message-based asset auditing subsystem ) embodying any one or more of the methodologies or functions described herein. The message-based asset auditing subsystem  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system , the main memory  and the processing device  also constituting machine-readable storage media. The message-based asset auditing subsystem  may further be transmitted or received over a network  via the network interface device .","The computer-readable storage medium  may also be used to store the message-based asset auditing subsystem  persistently. While the computer-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201ccomputer-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The terms \u201ccomputer-readable storage medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201ccomputer-readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","The message-based asset auditing subsystem , components and other features described herein (for example in relation to ) can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS, FPGAs, DSPs or similar devices. In addition, the message-based asset auditing subsystem  can be implemented as firmware or functional circuitry within hardware devices. Further, the message-based asset auditing subsystem  can be implemented in any combination hardware devices and software components.","In the above description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed description which follows are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cdetecting,\u201d \u201cgenerating,\u201d \u201csending,\u201d \u201cupdating,\u201d \u201cparsing,\u201d \u201cperforming,\u201d \u201cidentifying,\u201d \u201cdetermining,\u201d or the like, refer to the actions and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (e.g., electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments of the invention also relate to an apparatus for performing the operations herein. This apparatus can be specially constructed for the required purposes, or it can comprise a general purpose computer system specifically programmed by a computer program stored in the computer system. Such a computer program can be stored in a computer-readable storage medium, such as, but not limited to, any type of disk including optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems can be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the method steps. The structure for a variety of these systems will appear from the description below. In addition, embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings of embodiments of the invention as described herein.","A computer-readable storage medium can include any mechanism for storing information in a form readable by a machine (e.g., a computer), but is not limited to, optical disks, Compact Disc, Read-Only Memory (CD-ROMs), and magneto-optical disks, Read-Only Memory (ROMs), Random Access Memory (RAM), Erasable Programmable Read-Only memory (EPROM), Electrically Erasable Programmable Read-Only Memory (EEPROM), magnetic or optical cards, flash memory, or the like.","Thus, a method and apparatus for auditing product asset management is described. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like references indicate similar elements. It should be noted that different references to \u201can\u201d or \u201cone\u201d embodiment in this disclosure are not necessarily to the same embodiment, and such references mean at least one.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
