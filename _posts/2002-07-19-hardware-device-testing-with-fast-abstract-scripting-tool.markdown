---
title: Hardware device testing with fast abstract scripting tool
abstract: A method and system for programmically communicating with a hardware device under test enables a user to develop flexible and customizable test and simulation programs for hardware devices connected to an industry standard bus. Input test commands are interpreted via a project specific support code component written in a scripting language such as Tcl. An extended scripting language tool provides communications capabilities to the industry standard bus and therefore enables test commands to be transmitted over the industry standard bus subsequent to the communications capabilities being provided to the industry standard bus via the extended scripting language tool. The hardware device is then driven based on the project specific test commands interpreted through the extended scripting language tool and transmitted over the industry standard bus.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06839649&OS=06839649&RS=06839649
owner: Honeywell International Inc.
number: 06839649
owner_city: Morristown
owner_country: US
publication_date: 20020719
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"heading":["STATEMENT OF GOVERNMENT INTEREST","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PRESENT EXEMPLARY PREFERRED EMBODIMENT"],"p":["The U.S. government has certain rights in this invention.","1. Field of the Invention","The present invention relates to bus communications, and specifically to a software tool for generating bus traffic for simulation, test and end-use applications by integrating a scripting programming language with bus-specific functionality.","2. Description of Related Art","A military standard 1553 (Mil-Std-1553) bus is a serial bus developed to facilitate intra-component communications aboard high performance aircraft, tanks, spacecraft, missiles and other networked vehicles. As is well known, bus traffic on a Mil-Std-1553 bus conforms to a packetized message protocol that provides fixed start\/stop times, message addressing, message length, formatting, arbitration, and the like.","Conventionally, an end user tests or simulates operation of a hardware device ported on a Mil-Std-1553 bus by compiling and running a software test application, or project, that transmits test command messages to the hardware device over the Mil-Std-1553 bus. Because the end user must typically handle details of the packetized message protocol through, for example, a low level programming language such as C to enable the command messages to control the ported hardware device, a user must typically rewrite and recompile a significant portion of the project code each time a new hardware device type is ported to the Mil-Std-1553 bus for testing.","Attempts have been made to develop software scripting tools that abstract the Mil-Std-1553 driver layer in order to test hardware devices such as avionics data points under simulated operating conditions. However, such tools are limited in their programmability and can therefore not be easily re-targeted for use in testing different types of Mil-Std-1553 devices without requiring a significantly amount of rewriting and recompiling of the source code of the tools. In addition, such tools are often highly complex due to the rather generic form they must take to accommodate all possible uses. Therefore, the scripting tool, and consequently the device tests, is difficult to run from the end user's perspective because each test presents a user with a new interactive experience.","In view of the above, the present invention provides a method and system for programmically communicating with a hardware device under test to enable a user to develop flexible and customizable test and simulation programs for various types of hardware devices. Input test commands are interpreted via a project specific support code component written in a scripting language. An extended scripting language tool provides communications capabilities to an industry standard bus and therefore enables test commands to be transmitted over the industry standard bus subsequent to the communications capabilities being provided to the industry standard bus via the extended scripting language tool. The hardware device is then driven based on the project specific test commands interpreted through the extended scripting language tool and transmitted over the industry standard bus.","The extended scripting language tool enables the project specific support code component to communicate with the industry standard bus and at the same time enables the specific test project to appear as a simple function call to the end user. In addition, the extended scripting language tool need not be reconfigured and recompiled when a new type of hardware device is ported to the industry standard bus or when an additional functional feature is added to the project.","Referring now to the drawings in which like numerals reference like parts,  shows an exemplary hardware block diagram of a test environment  in which a preferred embodiment of the hardware device testing system and methodology according to the present invention may be implemented. The test environment  includes a testing computer , such as a personal computer, that includes a hard drive , a keyboard  and a display , and that is capable of running a Windows-based operating system. The test environment  also includes a hardware device under test (DUT)  connected to the testing computer  via an industry standard bus, such as a Mil-Std-1553 bus . As will be discussed in more detail below, the hard drive  stores several customized software components and a scripting language, such as the open source Tcl\/Tk scripting language, that together enable flexible and customizable test and simulation programs to be developed for the DUT .","The DUT  may be, for example, a control moment gyro (CMG) of the type built by Honeywell, Inc. for use on satellites for pointing and stabilization, or any other hardware device capable of being ported to an industry standard bus, including avionics data points such as avionics displays, pilot joysticks and engine and wing actuators. In addition, the DUT  may alternatively represent a simulated device, such as the above-mentioned CMG or a multiplexor-demultiplexor (MDM) computer of the type manufactured by Honeywell, Inc. and used in the International Space Station and the Space Transportation System (Space Shuttle), or any other type of device being developed for use on an industry standard bus.","The Mil-Std-1553 bus  is a serial bus developed for intra-box level communication aboard high performance aircraft, tanks, spacecraft, missiles and other networked vehicles. As is well known in the art, the Mil-Std-1553 bus defines the communications protocol through bus or nodes (not shown) for two devices communicating over the Mil-Std-1553 bus. The bus controllers selectively transmit packetized bus control messages to respective ported hardware devices control variables such as high\/low voltage settings for attached devices, message formatting, differential\/base clock rates, electrical and timing specifications, bit width and spacing, message length and spacing, and bus arbitration and usage parameters as is well known in the art.","As will be discussed below, the hardware device testing system of the present invention may be modified to support simulation or test applications over other industrial interfaces such as, for example, an IEEE-488 or CAN bus. While only the bus cabling of the Mil-Std-1553 bus  referenced above is shown in , it will be appreciated that the Mil-Std-1553 bus  also includes a bus card (not shown) in the testing computer  for interfacing the bus cable with the computer  as is well known in the art. In addition, while the bus cable is shown as branching to the single DUT , the bus cable when implemented in an actual operating environment is configurable to connect, in the case of a Mil-Std-1553 bus, up to 32 hardware devices as is well known in the art.",{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 2","b":["22","22","14","12","24","14","24","26","28","30","32"]},"The users test script or interactive shell component  represents a user interaction layer in which a user may program test commands onto the hard drive  as ASCII text files, or may interactively enter test commands via the keyboard  and through either a simple text-based user interface or a more complex GUI (not shown) on the display .","The project specific support code component  represents a project specific layer in which a library of function calls are written in Tcl\/Tk script and are stored on the hard drive  as Tcl files for use specifically in testing DUTs of like type, such as the DUT . The project specific support code component  is analogous to the text of a conversation in that it takes a request for a solution, such as test commands input through the users test script or interactive shell component  and, by communicating with the DUT  or other component on the Mil-Std-1553 bus  through the FAST  and the driver code component , provides the solution. Based on input test data and on test information programmed therein, the project specific support code component  may send and receive message traffic on the Mil-Std-1553 bus , display test information on the display , write to files such as logging files on the hard drive , and perform numeric conversions to support translation from machine code to human readable text and numbers.","The FAST , which will be discussed below in greater detail, represents a protocol, or language specific, layer including a library of utilities or functions written primarily in Tcl\/Tk that enables the project specific support code component  to communicate with the driver code component  regardless of the particular test or simulation application or project programmed into the project specific support code component . In other words, the FAST  bridges communication between the project specific support code component  written in Tcl\/Tk and the driver code component  compiled in a language such as assembly or C, thereby providing a higher context for communication with the driver code component  than if it was necessary to write directly to the driver code component  from the project specific support code component .","In addition, the FAST  hides, or abstracts, implementation of the details of the Mil-Std-1553 bus messaging protocol from end users and application programmers without sacrificing functional capability, and is easy to extend, modify and support multiple projects without significant modification. Therefore, due to implementation of the FAST , communication to the DUT  appears to an application user as a simple function call rather than as a complicated process in a manner analogous to the manner in which the World Wide Web simplifies HTML, Ethernet and packet switching network communications. A user of the World Wide Web interacts with a simple to use, rich program called a browser, and everything that is behind the scenes, (HTML, Ethernet, packet switching networks) is transparent to the end user. With the preferred embodiment of the present invention, the test user and the test script itself sees a rich, capable environment and is not exposed to the underlying operations being executed.","The driver code component , which is written in pre-compiled machine code and is typically provided by a vendor of the communications bus card (not shown), represents a hardware specific layer that communicates the commands initially entered at the users test script or interactive shell component  to the DUT  over the Mil-Std-1553 bus.","As shown in , the FAST  includes three primary components: a Windows dynamic link library, or DLL ; a scripting software code block ; and a driver layer . The DLL  is for abstracting a transport and driver layer of the Mil-Std-1553 bus, and can be built upon by a user though use of the scripting software code block  to provide generic support for creation, logging and timing of Mil-Std-1553 bus message transactions. More specifically, a user can create a script of Tcl\/Tk code, i.e., the project specific support code component , using the scripting software code block  to thereby be capable of interacting with any hardware device, such as the DUT , ported to the Mil-Std-1553 bus . Consequently, a user can interact with the DUT  at any level of desired abstraction. For instance, a user can build the project specific support code component  to provide either a simple text-based I\/O test method, a mid-level test method with message structures and dispatch functions, or a high level test method using object-oriented programming.","When the user wishes to interact directly with a DUT such as the DUT , a simple text-based program offers the most flexibility to manipulate the DUT . However, for device characterization, where the same functions are run several times in a prototype environment, a more complex mid-level test is needed with files of pre-written scripts. In a production environment, where the test results are to be independent of the operator, a complex high level test program can assure that each test is completed in a repeatable manor and documented in compliance with company needs. The FAST  supports each of these modes of operation with an interface that can smoothly be coupled to the needs of the user.","The scripting software code block , which is preferably a group of Tcl files programmed on the hard drive , is for enabling the DLL  to provide generic support for industry standard bus standard messaging. More specifically, the scripting software code block  enables custom functions, such as message creation, logging, timing and bus driver I\/O functions, to be added to the DLL  to enable a desired test solution to be created without the need to rewrite or recompile the DLL . For example, if the results of a test run on the DUT  need to be logged to the testing computer , the FAST  can be extended to log the results to the testing computer  through the scripting software code block  without necessitating the need to recompile the DLL , the Tcl component  or the project specific support code component .","The DLL layer  is a group of support functions written, for example, in C programming language as ASCII text code for calling the driver layer  to drive the DUT  in response to input test commands. The support functions in the DLL layer  can be rewritten and recompiled based on the type of communications bus  used. Therefore, the higher context layers of the FAST , such as the project specific support code component  and the scripting software code block , need not be rewritten and recompiled when the type of communications bus is changed.","Referring now to , an exemplary test application as implemented by the software components  will now be described to illustrate operation of the hardware device testing system, and specifically the FAST , according to the present invention. In this particular test application, the hardware device to be tested is a control moment gyro, or CMG, that is mounted on a test platform (not shown) representing a simulated satellite along with sensors (not shown) that verify correct operation of the CMG during testing. At , a test application user enters a test command through the users test script or interactive shell  to, for example, command the CMG to smoothly rotate the simulated satellite by 5\u00b0. The input test command creates a function call at  in which the project specific support code component  solves corresponding functions stored in its function library for the test command and communicates the results to the FAST . As shown, operation of the project specific support code component  is not relegated to one action. Rather, its operation could be an amalgamation of many commands, such as the Rotate(x) and Spin(x) commands shown at . In addition, the commands could include closed loop feedback feedback commands to slow down rotation of the CMG as the CMG approaches its target position.","At , the results transmitted from project specific support code component  map the input command to a series of function calls in the FAST . The FAST  understands these results, calls the appropriate functions from the driver code component  and inserts appropriate data into functions stored in the driver code component . Therefore, the FAST  enables a bus controller environment to be simulated using function libraries at both the FAST  and the project specific support code component . At , the driver code component  solves these functions for the data inserted by the FAST  and at  communicates with the CMG to control the CMG based on the test command input at . At , the driver code component  also sends a message back to the FAST  regarding its control of the CMG, and at  the FAST  passes the message from the driver code component  back to the user through the project specific support code .","In view of the above discussion, it should be appreciated that the hardware device testing system according to the present invention enables different types of hardware devices to be tested on an industry standard bus, such as a Mil-Std-1553 bus. Only the DLL layer  needs to be recompiled when testing is switched from one communications bus to another. Therefore, the hardware device testing system, and particularly the FAST , enable the development of flexible and customizable test and simulation programs for the DUT  that are simple to operate from a user standpoint.","While the above description is of the preferred embodiment of the present invention, it should be appreciated that the invention may be modified, altered, or varied without deviating from the scope and fair meaning of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other objects and advantages of the present invention will be more readily apparent from the following detailed description of preferred embodiments thereof when taken together with the accompanying drawings in which:",{"@attributes":{"id":"P-00012","num":"00012"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00013","num":"00013"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00014","num":"00014"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 4","b":"2"}]},"DETDESC":[{},{}]}
