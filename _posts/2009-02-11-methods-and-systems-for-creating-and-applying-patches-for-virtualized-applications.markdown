---
title: Methods and systems for creating and applying patches for virtualized applications
abstract: A method may include identifying a first version of a virtualized application. The first version of the virtualized application may include a first read-only virtualization sublayer, and the first read-only virtualization sublayer may provide a base state of the first version of the virtualized application. The method may also include identifying a second version of the virtualized application. The second version of the virtualized application may include a second read-only virtualization sublayer, which may provide a base state of the second version of the virtualized application. The method may further include determining a difference between the first read-only virtualization sublayer and the second read-only virtualization sublayer and using the difference to create a patch configured to update an instance of the first version of the virtualized application to an instance of the second version of the virtualized application. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08225316&OS=08225316&RS=08225316
owner: Symantec Corporation
number: 08225316
owner_city: Mountain View
owner_country: US
publication_date: 20090211
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["Information technology (IT) administrators may spend a substantial amount of time managing software applications. Managing software applications may include resolving application conflicts, repairing damaged applications, migrating to new versions of applications, installing applications, and patching applications. These tasks may be frustrating and time-consuming.","Application virtualization technologies may simplify many IT administration tasks. For example, application virtualization may allow an administrator to turn on or off a user's access to applications and data, which may reduce the time it takes to provide users with the resources they need. Application virtualization may also allow an administrator to reset broken applications to a known-good state without fear of damaging other applications. Application virtualization may ensure that each virtualized application has its own copy of DLL files that it would normally share with other applications. This eliminates conflicts that occur when two or more applications may require different versions of the same DLL, thereby rescuing administrators from a condition commonly referred to as \u201cDLL Hell.\u201d","Application virtualization may allow different versions of the same application to peacefully coexist. This means that an administrator may keep older versions intact and available while testing new versions. Even after migrating to a new version, an administrator may quickly rollback to the previous version at any time.","Despite the numerous advantages of application virtualization, updating installed virtualized applications may result in significant productivity losses and resource consumption. For example, traditional application virtualization technologies may create and deploy an entire updated application for each application update. For large applications, the administration time, bandwidth, and file system requirements of deploying a small update may be comparable to deploying the entire application anew.","The instant disclosure is directed to methods and systems for creating and applying patches to virtualized applications. In some embodiments, a patch-creation module may determine the difference between read-only sublayers of first and second versions of a virtualized application to provide a patch that represents the difference between the two read-only sublayers. For example, the patch-creation module may identify a first version of a virtualized application, which may include a first read-only virtualization sublayer. The patch-creation module may identify a second version of the virtualized application, which may include a second read-only virtualization sublayer. The patch-creation module may determine a difference between the first read-only virtualization sublayer and the second read-only virtualization sublayer and may use the difference to create a patch.","The patch may be configured to update an instance of the first version of the virtualized application to an instance of the second version of the virtualized application. In some embodiments, the patch may be applied to an instance of the first version of the virtualized application to create an in-place instance of the second version of the virtualized application. In other embodiments, the patch may be applied by creating a new virtualization layer, copying the read-only layer of the instance of the first version of the virtualized application to the new virtualization layer, and applying the patch to the new virtualization layer.","In some embodiments, the patch may be deployed to one or more remote computing devices. In various embodiments, the difference between the first read-only virtualization sublayer and the second read-only virtualization sublayer may include a binary differential between the first read-only virtualization sublayer and the second read-only virtualization sublayer. The instant disclosure also includes various other embodiments, alternatives, and examples for creating and applying patches for virtualized applications. Features from any of the above-mentioned embodiments may be used in combination with one another in accordance with the general principles described herein.","Throughout the drawings, identical reference characters and descriptions indicate similar, but not necessarily identical, elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather, the instant disclosure covers all modifications, equivalents, and alternatives falling within the scope of the appended claims.","Embodiments of the present disclosure provide various methods and systems for creating and applying patches for virtualized applications. Various embodiments may leverage the characteristics of virtualization technologies that provide read-only and read-write sublayers for virtualized applications. In such technologies, a read-only sublayer may provide a base state for a virtualized application and a read-write layer may capture changes to the base state. In some embodiments, the read-only layer of one version of an application may be compared with the read-only layer of another version of the application to create a patch.","For example, a patch-creation module may determine a difference between read-only virtualization sublayers of first and second versions of a virtualized application. The patch-creation module may use the difference to create a patch configured to update an instance of the first version of the virtualized application to an instance of the second version of the virtualized application. The patch may be applied to instances of the first version of the virtualized application in-place, in a new virtualization layer, or in any other suitable manner.","Embodiments of the present disclosure may provide various features and advantages not provided by traditional technologies. For example, virtualized application patches disclosed herein may be relatively small because they may include only the changes made in an application update. Thus, administrators may be able to update virtualized applications by deploying a patch instead of deploying an entire updated application. Embodiments disclosed herein may mitigate losses in productivity and resource utilization associated with deploying an entire updated application. These and other embodiments, features, advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIGS. 1 and 2","FIGS. 3 and 4","FIGS. 5-8","FIGS. 9 and 10"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","100","110","120","122","130","110","112","114","116","112","112","114","116"]},"In certain embodiments, one or more of modules  in  may represent one or more software applications or programs that, when executed by a computing system, may cause the computing system to perform one or more steps disclosed herein. For example, as will be described in greater detail below, one or more of modules  may represent software modules configured to run on one or more computing devices, such as computing system  in  and\/or portions of exemplary network architecture  in . One or more of modules  in  may also represent all or portions of one or more special-purpose computers configured to perform one or more tasks associated with steps disclosed herein.","As previously mentioned, system  may include a first version of a virtualized application  and a second version of the virtualized application . The first version of the virtualized application  may include any application installed in a virtualization layer. The second version of the virtualized application  may represent the first version of the virtualized application  with an update or other modification applied. Various examples of virtualization layers and virtualized applications are provided in the discussion corresponding to .","System  may also include patch . Patch  may represent and\/or include any difference between the first version of the virtualized application  and the second version of the virtualized application . For example, patch  may include a binary differential between the first version of the virtualized application  and the section version of the virtualized application . As described in greater detail below, patch  may be created by determining the difference between the first version of the virtualized application  and the second version of the virtualized application .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["200","200","210","220","230","240","250","210","220","230","240","210","220","230","240","210","220","230","240"]},"As shown in , computing system  may include patch-creation module , deployment module , and patch . Computing subsystems , , and  may each include an instance of a first version of a virtualized application. For example, computing subsystem  may include a virtualized application instance , computing subsystem  may include a virtualized application instance , and computing subsystem  may include a virtualized application instance . Computing subsystem  may also include application module .","Computing subsystems , , , and  may communicate over a network . Network  generally represents any medium or architecture capable of facilitating communications or data transfer. Network  may include, without limitation, the Internet, a Wide Area Network (WAN), a Local Area Network (LAN), a Personal Area Network (PAN), the Internet, Power Line Communications (PLC), a cellular network (e.g., a GSM network), or the like. Network  may facilitate communication or data transfer using wireless and\/or wired communications.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIG. 3"],"b":["300","100","200","310","112","120","120","320","112","122","122"]},"Patch-creation module  may identify the first and second versions of the virtualized application  and  in any suitable manner. For example, patch-creation module  may identify the first and second versions of the virtualized application  and  by locating them on a hard drive, receiving them from another module, and\/or receiving them from a remote computing device. In some embodiments, patch-creation module  may create the second version of virtualized application  by applying an update or other modification to the first version of the virtualized application .","Returning to , at step  patch-creation module  may determine the difference between the first read-only virtualization sublayer (i.e., the read-only sublayer of the first version of the virtualized application ) and the second read-only virtualization sublayer (i.e., the read-only sublayer of the second version of the virtualized application ). Patch-creation module  may determine the difference between the first and second read-only sublayers in any suitable manner. For example, patch-creation module  may determine the difference between the first and second read-only sublayers by scanning the first and second read-only sublayers to identify files in the sublayers. Patch-creation module  may then compare files in the first read-only sublayer with files in the second read-only sublayer. In some embodiments, determining the difference between the first and second read-only sublayers may include comparing a registry area in the first read-only sublayer to a registry area in the second read-only sublayer.","In some embodiments, patch-creation module  may determine the difference between the first and second read-only virtualization sublayers by creating a binary differential (i.e., a binary delta) between the first read-only virtualization sublayer and the second read-only virtualization sublayer. A binary differential between the first read-only virtualization sublayer and the second read-only virtualization sublayer may be created by generating the difference between registry and\/or file system redirection areas of the read-only sublayers of the first and second versions of the virtualized application  and .","After determining the difference between the first and second read-only virtualization sublayers, at step  patch-creation module  may use the difference to create a patch configured to update an instance of the first version of the virtualized application to an instance of the second version of the virtualized application. Patch-creation module  may create the patch in any suitable manner. For example, patch-creation module  may create the patch by compressing the difference between the read-only sublayers into a Virtual Patch Archive (VPA). The patch may also be formatted and\/or packaged using any other formatting and\/or packaging technologies.","At step , deployment module  may deploy the patch to a remote computing device. In some embodiments, deployment module  may deploy the patch to two or more remote computing devices. The patch may be deployed using any suitable deployment and\/or transmission technologies. In some embodiments, instead of being deployed to a remote computing device, the patch may be used to update or otherwise modify a local virtualized application.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["400","112","114","116","410","116","116","116"]},"At step , application module  may identify a virtualization layer where an instance of the first version of the virtualized application is installed. The virtualization layer may include a read-only sublayer and a read-write sublayer. A read-only sublayer, which is also referred to herein as a read-only virtualization sublayer, may include any sublayer that one or more users is prohibited from modifying. For example, a read-only sublayer may include a sublayer that may only be modified by an administrator. A read-only sublayer may provide a base state for an application installation. In contrast, a read-write sublayer may be configured to capture application changes made by users who are prohibited from modifying the read-only sublayer.","At step , application module  may use the patch to update an instance of the first version of the virtualized application. An instance of a first version of a virtualized application may include any installation or copy of the first version of the virtualized application. Application module  may update the instance of the first version of, the virtualized application to an instance of a second version of the virtualized application by applying the patch to the instance of the first version of the virtualized application. Generally, an instance of a first version of an application may referred to as being updated to an instance of a second version of an application when the instance of the first version of the application is modified to include features and\/or other changes found in the second version of the application that are not found in the first version of the application.","Application module  may update the instance of the first version of the virtualized application in any suitable manner. For example, application module  may identify a virtualization layer where an instance of the first version of the virtualized application is installed. Then, application module  may use the patch to modify a read-only sublayer of the virtualization layer. Such embodiments may be referred to as \u201cin-place\u201d updates or modifications. In other embodiments, application module  may create a new virtualization layer and copy one or more files and\/or settings from the read-only sublayer of the original virtualization layer to a read-only sublayer of the new virtualization layer. Application module  may use the patch to update the read-only sublayer in the new virtualization layer, thereby leaving the instance of the first version of the virtualized application in the original virtualization layer and creating an instance of the second version of the virtualized application in the new virtualization layer.","In some embodiments, application module  may function by prompting a user to select a patch and may automatically determine which virtualized layer the patch should be applied to. In other embodiments, application module  may query a user about which virtualization layer (i.e., virtualized application) a patch should be applied to. Application module  may additionally query a user regarding whether to apply the patch \u201cin-place\u201d to a layer or create a new layer for the patch.","The following discussion provides an example of how the methods shown in  may be implemented by components of systems  and . An administrator using computing subsystem  may want to apply an update (e.g., a security update from a vendor, a bug fix, new features, or any other modification for an application) to virtualized applications instances , , and . The administrator may use patch-creation module  to create patch , which may represent the difference between virtualized application instances , , and  and an updated virtualized application instance (i.e., an application instance to which the update has been applied). Patch-creation module  may create the patch using the process presented in . The administrator may then use deployment module  to deploy patch  to computing subsystems , , and .","Patch  may be applied to virtualized application instances , , and  using the process presented in . In some embodiments, patch  may include code programmed to automatically perform one or more of the steps shown in . Additionally or alternatively, code external to patch  may perform one or more of the steps shown in . For example, application module  may apply patch  to virtualized application instance .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIGS. 5-8","FIG. 5"],"b":["500","510","510","500","508","508","506","508","506","504","506","510","512","512","501","506","502"]},"As previously mentioned, in some application-virtualization technologies, each virtualization layer may include two sublayers: a read-only sublayer and a writable sublayer. An example of a virtualization technology that utilizes read-only and read-write sublayers is SYMANTEC's SOFTWARE VIRTUALIZATION SOLUTION (SVS).","A read-only sublayer may include an immutable base state of an application. In some embodiments, users may not\u2014even unintentionally\u2014make changes to the read-only sublayer. For example, in SVS, only administrators may be able to edit, update, and\/or delete the contents of read-only sublayers. An application may be reset by deleting the existing read-only sublayer and replacing it with a new read-only sublayer.","A read-write (i.e., writeable) sublayer may capture changes to a base state of an application. For example, when a user alters an application by changing default preferences, these changes may be written to the read-write sublayer.","Virtualized applications that include read-only sublayers and read-write sublayers may be created in any suitable manner. For example, SVS may allow a user to specify a setup program for an application the user wants to capture for purposes of virtualizing the application. SVS may launch the setup program and capture all of the applications, files, and processes, including child processes and process-induced changes, in a single Virtual Software Package (VSP). SVS may also capture MICROSOFT installer (MSI) and service control manager changes. When the setup process is complete, SVS may automatically stop the capture process. An administrator may then edit the VSP to include settings that the administrator wants to distribute to users.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 6","FIG. 6"],"b":["600","601","601","602","604","602","604","606","601","608","601","602","602","608","602","602","604","606","604","606","608","602"]},"Application  may make another file access . The virtualization system may not find a corresponding entry in layer B , but may find an entry in layer A . A third file access request  may not have a corresponding entry in layer B  or layer A , and the virtualization system may therefore return an entry from base file system .",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 7","b":["700","714","714","716","718","712","714","701","712","708","701","712"]},"Management application  may provide notices to a WINDOWS EXPLORER  indicating that the contents of a mounted file system have been changed. Other applications  may interact with the system, performing read and write operations to the file system and registry through file system filter driver . A compression library  may be provided to compress layer information.","File system filter driver  may store components of each layer and sublayer in one of two redirect areas (i.e. areas to which it redirects system calls). For example, file system filer driver  may store registry settings and attributes in a registry subsystem  and may store files in a file system subsystem .","In each sublayer's registry redirection area, file system filter driver  may store information about the state of the layer to which the sublayer belongs. File system filter driver  may also store references to the sublayer's file redirection area, reference counts, and sub-keys that\u2014through a service control manager\u2014may enable it to handle duplicate services running in multiple layers. In addition, file system filter driver  may store references to registry keys that contain user identity information, data-layer specifications, a sub-key for information about exclude entries, and a list of variables that govern the location of layer-specific files. As the name suggests, exclude entries may define application files and processes that a user may want to exclude from layers.","In the root of the file redirection area, file system filter driver  may store variable entries that abstract operating system specific file locations to enable users to deploy Virtual Software Archives (VSAs) on computers running various types of operating systems. When file system filter driver  is loaded on a user's computer, file system filter driver  may determine values for user and system variables.","File system filter driver  may store files that comprise sublayers and numbered folders under a file-redirection-area directory. File system filter driver  may use registry and file redirection areas to present to an operating system\u2014and by extension, applications and users\u2014with an aggregate view of virtualized files and data.","For example, a user may launch WINDOWS EXPLORER to view the contents of a program file folder. The user's machine may be running a virtualized application, such as MOZILLA FIREFOX, and the FIREFOX layer may be active. File system filter driver  may intercept EXPLORER's calls to the file system. From the base, which may include all files, settings, and processes that do not reside in layers on the user's machine, file system filter driver  may gather a list of non-virtualized applications that reside in the program files folder. File system filter driver  may also redirect Explorer's calls to include FIREFOX, which would normally reside in the program files folder but which, in this case, resides in the file redirection area. File system filter driver  may then respond to EXPLORER's calls with a complete list of folders that the system expects to see in the program files directory, including FIREFOX. In this example, if the FIREFOX layer were deactivated, file system filter driver  would obscure its existence.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 8","b":["802","806","802","804","806","804"],"i":["a","n","a","n","a","n ","a","n"]},"A layer may isolate an application from a base file system and may include files and a directory structure of the application's installation. The application files and directories may be shadowed or overlaid over the regular file system. Shared libraries (such as DLLs), system accessible configuration (such as registry entries), and version control may be managed by a layering subsystem.","Though each layer may be a separate and individual entity within a computing system, the application files, data, and system-accessible configuration may be presented as though they resided in their respective ordinary locations. Thus, an application stored in a layer may appear to the operating system of a computing system as if it had been installed using traditional installation techniques.","A software application installed in a virtualization layer may be an application in any commonly used meaning, including word processors, browsers, system tools, games, and the like, and the principles described herein may also extend to any other software installed on a computing system.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 9","b":["910","910","910","910","914","916"]},"Processor  generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments, processor  may receive instructions from a software application or module. These instructions may cause processor  to perform the functions of one or more of the exemplary embodiments described and\/or illustrated herein. For example, processor  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, determining, using, creating, copying, deploying, comparing, compressing, and receiving steps described herein. Processor  may also perform and\/or be a means for performing any other steps, methods, or processes described and\/or illustrated herein.","System memory  generally represents any type or form of volatile or non-volatile storage device or medium capable of storing data and\/or other computer-readable instructions. Examples of system memory  include, without limitation, random access memory (RAM), read only memory (ROM), flash memory, or any other suitable memory device. Although not required, in certain embodiments computing system  may comprise both a volatile memory unit (such as, for example, system memory ) and a non-volatile storage device (such as, for example, primary storage device , as described in detail below).","In certain embodiments, exemplary computing system  may also comprise one or more components or elements in addition to processor  and system memory . For example, as illustrated in , computing system  may comprise a memory controller , an Input\/Output (I\/O) controller , and a communication interface , each of which may be interconnected via a communication infrastructure . Communication infrastructure  generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure  include, without limitation, a communication bus (such as an ISA, PCI, PCIe, or similar bus) and a network.","Memory controller  generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example, in certain embodiments memory controller  may control communication between processor , system memory , and I\/O controller  via communication infrastructure . In certain embodiments, memory controller  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps or features described and\/or illustrated herein, such as identifying, determining, using, creating, copying, deploying, comparing, compressing, and receiving.","I\/O controller  generally represents any type or form of module capable of coordinating and\/or controlling the input and output functions of a computing device. For example, in certain embodiments I\/O controller  may control or facilitate transfer of data between one or more elements of computing system , such as processor , system memory , communication interface , display adapter , input interface , and storage interface . I\/O controller  may be used, for example, to perform and\/or be a means for identifying, determining, using, creating, copying, deploying, comparing, compressing, and receiving steps described herein. I\/O controller  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Communication interface  broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system  and one or more additional devices. For example, in certain embodiments communication interface  may facilitate communication between computing system  and a private or public network comprising additional computing systems. Examples of communication interface  include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. In at least one embodiment, communication interface  may provide a direct connection to a remote server via a direct link to a network, such as the Internet. Communication interface  may also indirectly provide such a connection through, for example, a local area network (such as an Ethernet network or a wireless IEEE 802.11 network), a personal area network (such as a BLUETOOTH or IEEE Standard 802.15.1-2002 network), a telephone or cable network, a cellular telephone connection, a satellite data connection, or any other suitable connection.","In certain embodiments, communication interface  may also represent a host adapter configured to facilitate communication between computing system  and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include, without limitation, SCSI host adapters, USB host adapters, IEEE 1394 host adapters, SATA and eSATA host adapters, ATA and PATA host adapters, Fibre Channel interface adapters, Ethernet adapters, or the like. Communication interface  may also allow computing system  to engage in distributed or remote computing. For example, communication interface  may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments, communication interface  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, determining, using, creating, copying, deploying, comparing, compressing, and receiving steps disclosed herein. Communication interface  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , computing system  may also comprise at least one display device  coupled to communication infrastructure  via a display adapter . Display device  generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly, display adapter  generally represents any type or form of device configured to forward graphics, text, and other data from communication infrastructure  (or from a frame buffer, as known in the art) for display on display device .","As illustrated in , exemplary computing system  may also comprise at least one input device  coupled to communication infrastructure  via an input interface . Input device  generally represents any type or form of input device capable of providing input, either computer or human generated, to exemplary computing system . Examples of input device  include, without limitation, a keyboard, a pointing device, a speech recognition device, or any other input device. In at least one embodiment, input device  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, determining, using, creating, copying, deploying, comparing, compressing, and receiving steps disclosed herein. Input device  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , exemplary computing system  may also comprise a primary storage device  and a backup storage device  coupled to communication infrastructure  via a storage interface . Storage devices  and  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. For example, storage devices  and  may be a magnetic disk drive (e.g., a so-called hard drive), a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash drive, or the like. Storage interface  generally represents any type or form of interface or device for transferring data between storage devices  and  and other components of computing system .","In certain embodiments, storage devices  and  may be configured to read from and\/or write to a removable storage unit configured to store computer software, data, or other computer-readable information. Examples of suitable removable storage units include, without limitation, a floppy disk, a magnetic tape, an optical disk, a flash memory device, or the like. Storage devices  and  may also comprise other similar structures or devices for allowing computer software, data, or other computer-readable instructions to be loaded into computing system . For example, storage devices  and  may be configured to read and write software, data, or other computer-readable information. Storage devices  and  may also be a part of computing system  or may be a separate device accessed through other interface systems.","Storage devices  and  may also be used, for example, to perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, identifying, determining, using, creating, copying, deploying, comparing, compressing, and receiving steps disclosed herein. Storage devices  and  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Many other devices or subsystems may be connected to computing system . Conversely, all of the components and devices illustrated in  need not be present to practice the embodiments described and\/or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system  may also employ any number of software, firmware, and\/or hardware configurations. For example, one or more of the exemplary embodiments disclosed herein may be encoded as a computer program (also referred to as computer software, software applications, computer-readable instructions, or computer control logic) on a computer-readable medium. The phrase \u201ccomputer-readable medium\u201d generally refers to any form of device, carrier, or medium capable of storing or carrying computer-readable instructions. Examples of computer-readable media include, without limitation, transmission-type media, such as carrier waves, and physical media, such as magnetic-storage media (e.g., hard disk drives and floppy disks), optical-storage media (e.g., CD- or DVD-ROMs), electronic-storage media (e.g., solid-state drives and flash media), and other distribution systems.","The computer-readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer-readable medium may then be stored in system memory  and\/or various portions of storage devices  and . When executed by processor , a computer program loaded into computing system  may cause processor  to perform and\/or be a means for performing the functions of one or more of the exemplary embodiments described and\/or illustrated herein. Additionally or alternatively, one or more of the exemplary embodiments described and\/or illustrated herein may be implemented in firmware and\/or hardware. For example, computing system  may be configured as an application specific integrated circuit (ASIC) adapted to implement one or more of the exemplary embodiments disclosed herein.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 10","FIG. 9"],"b":["1000","1010","1020","1030","1040","1045","1050","1010","1020","1030","910","1040","1045","1050"]},"As illustrated in , one or more storage devices (1)-(N) may be directly attached to server . Similarly, one or more storage devices (1)-(N) may be directly attached to server . Storage devices (1)-(N) and storage devices (1)-(N) generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. In certain embodiments, storage devices (1)-(N) and storage devices (1)-(N) may represent network-attached storage (NAS) devices configured to communicate with servers  and  using various protocols, such as NFS, SMB, or CIFS.","Servers  and  may also be connected to a storage area network (SAN) fabric . SAN fabric  generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric  may facilitate communication between servers  and  and a plurality of storage devices (1)-(N) and\/or an intelligent storage array . SAN fabric  may also facilitate, via network  and servers  and , communication between client systems , , and  and storage devices (1)-(N) and\/or intelligent storage array  in such a manner that devices (1)-(N) and array  appear as locally attached devices to client systems , , and . As with storage devices (1)-(N) and storage devices (1)-(N), storage devices (1)-(N) and intelligent storage array  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions.","In certain embodiments, and with reference to exemplary computing system  of , a communication interface, such as communication interface  in , may be used to provide connectivity between each client system , , and  and network . Client systems , , and  may be able to access information on server  or  using, for example, a web browser or other client software. Such software may allow client systems , , and  to access data hosted by server , server , storage devices (1)-(N), storage devices (1)-(N), storage devices (1)-(N), or intelligent storage array . Although  depicts the use of a network (such as the Internet) for exchanging data, the embodiments described and\/or illustrated herein are not limited to the Internet or any particular network-based environment.","In at least one embodiment, all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server , server , storage devices (1)-(N), storage devices (1)-(N), storage devices (1)-(N), intelligent storage array , or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program, stored in server , run by server , and distributed to client systems , , and  over network . Accordingly, network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, determining, using, creating, copying, deploying, comparing, compressing, and receiving steps disclosed herein. Network architecture  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As detailed above, computing system  and\/or one or more of the components of network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more steps of the exemplary methods described and\/or illustrated herein. For example, a computing system (e.g., computing system  and\/or one or more of the components of network architecture ) may perform a computer-implemented method or creating and\/or applying a patch for a virtualized application. The computing system may identify a first version of the virtualized application. The first version of the virtualized application may include a first read-only virtualization sublayer. The first read-only virtualization sublayer may include a base state of the first version of the virtualized application. The computing system may also identify a second version of the virtualized application. The second version of the virtualized application may include a second read-only virtualization sublayer. The second read-only virtualization sublayer may include a base state of the second version of the virtualized application. The computing system may determine the difference between the first read-only virtualization sublayer and the second read-only virtualization sublayer and may then use the difference to create a patch configured to update an instance of the first version of the virtualized application to an instance of the second version of the virtualized application.","The computing system may also use the patch to update the instance of the first version of the virtualized application to the instance of the second version of the virtualized application. In some embodiments, the computing system may identify a virtualization layer where the instance of the first version of the virtualized application is installed. In such embodiments, using the patch to update the instance of the first version of the virtualized application may include using the patch to modify a read-only sublayer of the virtualization layer.","According to various embodiments, the computing system may identify a first virtualization layer where the instance of the first version of the virtualized application is installed. The computing system may also create a second virtualization layer and copy at least one file from a read-only sublayer of the first virtualization layer to a read-only sublayer of the second virtualization layer. In such embodiments, using the patch to update an instance of the first version of the virtualized application may include using the patch to modify the read-only sublayer of the second virtualization layer.","According to at least one embodiment, the computing system may deploy the patch to a remote computing system. The remote computing system may include the instance of the first version of the virtualized application. The remote computing system may use the patch to update the instance of the first version of the virtualized application to the instance of the second version of the virtualized application.","In some embodiments, determining the difference between the first read-only virtualization sublayer and the second read-only virtualization sublayer may include comparing files stored in the first read-only virtualization sublayer with files stored in the second read-only virtualization sublayer. In certain embodiments, determining the difference between the first read-only virtualization sublayer and the second read-only virtualization sublayer may include determining a difference between a registry area associated with the first version of the virtualized application and a registry area associated with the second version of the virtualized application.","In certain embodiments, the difference between the first read-only virtualization sublayer and the second read-only virtualization sublayer may include a binary differential between the first read-only virtualization sublayer and the second read-only virtualization sublayer. According to various embodiments, using the difference to create a patch for the first version of the virtualized application may include compressing the difference into a virtual patch archive format. In various embodiments, the computing system may create the second version of the virtualized application by applying an update to the first version of the application.","According to at least one embodiment, the first version of the virtualized application may include a first read-write virtualization sublayer, and the first read-write virtualization sublayer may be configured to store changes to the base state of the first version of virtualized application. The second version of the virtualized application may include a second read-write virtualization sublayer. The second read-write virtualization sublayer may be configured to store changes to the base state of the second version of the virtualized application.","According to certain embodiments, a computing system may receive a patch comprising a difference between a read-only virtualization sublayer of a first version of a virtualized application and a read-only virtualization sublayer of a second version of the virtualized application. The computing system may identify a virtualization layer where an instance of the first version of the virtualized application is installed. The computing system may use the patch to update the instance of the first version of virtualized application to the instance of the second version of the virtualized application.","In at least one embodiment, the computing system may identify a virtualization layer where the instance of the first version of the virtualized application is installed. In such embodiments, using the patch to update the instance of the first version of the virtualized application may include using the patch to modify a read-only sublayer of the virtualization layer. In other embodiments, the computing system may identify a first virtualization layer where the instance of the first version of the virtualized application is installed. The computing system may create a second virtualization layer and copy at least one file from a read-only sublayer of the first virtualization layer to a read-only sublayer of the second virtualization layer. In such embodiments, using the patch to update the instance of the first version of the virtualized application may include using the patch to modify the read-only sublayer of the second virtualization layer.","While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and\/or component described and\/or illustrated herein may be implemented, individually and\/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.","The process parameters and sequence of steps described and\/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and\/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and\/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.","Furthermore, while various embodiments have been described and\/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.","The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments described herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. It is desired that the embodiments described herein be considered in all respects illustrative and not restrictive and that reference be made to the appended claims and their equivalents for determining the scope of the instant disclosure.","Unless otherwise noted, the terms \u201ca\u201d or \u201can,\u201d as used in the specification and claims, are to be construed as meaning \u201cat least one of.\u201d In addition, for ease of use, the words \u201cincluding\u201d and \u201chaving,\u201d as used in the specification and claims, are interchangeable with and have the same meaning as the word \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
