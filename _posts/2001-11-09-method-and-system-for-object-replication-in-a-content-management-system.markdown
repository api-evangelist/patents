---
title: Method and system for object replication in a content management system
abstract: A system and method in accordance with the present invention provides for replication in a content management system. Replication is provided by utilizing the library server to track the objects to be replicated within the system. The replication is accomplished by adding two tables to the library server, a copies table and replicate table. The copies tables includes three new parts flags. A first flag identifies an ending as a copied part. A second flag identifies that other copies of this part exist. Finally a third flag identifies that a part is not yet available.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07054887&OS=07054887&RS=07054887
owner: IBM Corporation
number: 07054887
owner_city: Armonk
owner_country: US
publication_date: 20011109
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present application claims priority under 35 U.S.C. \u00a7119(e) of Provisional U.S. Patent Application Ser. No. 60\/265,187 filed Jan. 30, 2001.","The present invention relates generally to a content management system and particularly to a system for object replication in such a system.","Content management systems provide many services for the management of digital content. The basic client functions are logon, logoff; create folder, item or part; index item or part; search indexes; retrieve folders, item or parts; store parts; replace parts; and delete parts. In addition, a plurality of other features could be provided such as encryption, system administration, streaming of audio and video, caching functions or other types of management functions.","Content Management System Block Diagram",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1","b":["100","102","101","103","103","102","106","101","103","103","101"],"i":["a","c","a","c "]},"A given object is defined by an entry in the index or list of objects by a unique identifier and coupled with searchable attributes including the file or object server identifier and a collection identifier. The collection identifier describes how the object is to be managed for storage. A collection is a unit of storage conceptually a cabinet where objects are placed. It may consist of many volumes of various storage media and a set of rules as to how the actual objects are stored and handled. The library server  and each of the plurality of object servers \u2013are utilized in the conventional content management system  to manage digital content. Their functions are described below.","For a further description of the basic functions of the library server  and one of the plurality of object servers , refer now to the following discussion in conjunction with the accompanying figures.","Library Server ",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2","b":["101","101","101","101"]},"As is seen, the conventional library server comprises a command monitor , a jobber , a plurality of child processes \u2013, and a database . The function of each of these elements will be described hereunder.","Command Monitor ","The command monitor  is the main line for server code. The command monitor  also provides server control logic and starts other processes.","Jobber ","The jobber  builds static access modules for the database to improve query performance.","Child Processes \u2013","The child processes \u2013perform requests from the clients (over the network, for example). The requests include but are not limited to query, add, update, attribute data, passes on store, retrieve, replace requests for objects to object server. The number of child process is configurable.","Database ","The database  stores attribute and server control information. The database  of the library server  is accessed as needed by the child processes.","The library server  also includes a plurality of tables. The tables include a part table, object server table, and a collname table.","Parts Table ","The function of the parts table  is described hereinbelow. One row of the table exists for each part. Parts are stored on object servers. The row identifies the item part and maps its location to an object server collection.","Object Server Table ","The object server table  maintains information concerning the plurality of object servers.","Collname Table ","The collname table  maintains the names of each collection for each object server.","Object Servers \u2013","Each of the object servers \u2013holds objects as files or references to other storage systems. The object server provides for name translation from library server name to file system name\/location and for hierarchical storage management and transport of objects. Each of the object servers \u2013in a preferred embodiment also stores meta information in a relational database and in transaction log files. Finally, each of the object servers \u2013in a preferred embodiment also stores objects in files or other storage subsystems.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3","b":["103","105","107","109","111","112","112","114","116","118"],"i":["a","e"]},"Command Monitor ","The command monitor  is a main line for server code, provides server control logic and starts other processes.","Purger ","The purger  cleans the cache and removes least recently used items.","Destager ","The destager  moves objects from cache to first storage class. The destager  maps a storage class to one or more volumes or to another object server. In the destager  mapping information is encoded in the database.","Migrator ","The migrator  is an object server process that implements the storage manager activity moving objects from initial permanent storage to subsequent storage. The migrator  moves objects from one storage class to another storage class. Movement is defined by time and sequence as part of a management class.","Child Processes \u2013","The child processes \u2013perform the requests passed from the library server  to the client  daemon processes (over the network). The child processes \u2013store, retrieve, and replace requests for objects to object server. The number of child processes \u2013is configurable.","Staging Area ","The staging area  is a cache area for object storage.","Volumes \u2013","Volumes \u2013are permanent storage media. The volumes \u2013may be disk, tape, optical or any type of storage subsystem.","Database ","The database  holds object location and name mapping, and the system managed storage information and replication work requests and server configuration information.","A feature within the object server  is an object server table . The function of the object server table  is described below.","Object Server Table ","The object server table  provides the objects that are stored and managed by that object server. One row within the table exists for each object stored and managed by the object server. The row identifies the object and maps its identifier to a local filename.","Functional Description","The function of the conventional content management system  () is typically transactional in nature. A typical process for a transaction in a content management system is an object store process. In an object store process objects are stored in the appropriate locations within the system.  are diagrams that illustrate conventional process for storing an object in a content management system.","First, in a begin transaction (), the client calls the application programming interface to store a part, via step . A memory pointer is then passed to the daemon within the client for use when an object server requests the part, via step . The store request contains the item and part information.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5","b":["502","504"]},"After the object server receives the store request, the selected object server validates the store request and determines a storage location for the part, via step  (possibly a cache). The object server reserves file space for the object. The object server also logs the file location and cleans up resources. The object server then requests from the client a daemon to allow for sending the object, via step .","After receiving the request, the client daemon validates the object request and matches the object request to information passed from the client, via step . Then the daemon sends a response with the object appended thereto to the object server, via step . The object server places the object in prepared file space. Then the object server inserts a row into the object table. Finally, the object server sends a store response to the library server, via step . The library server then checks the response and sends a store response to the client, via step .","Thereafter the end transaction process is initiated as illustrated by . In the end transaction process the client receives the store response from the library server, via step . Then, the client sends an end transaction commit request to the library server, via step . The library server then sends an end transaction commit request to each object server contacted in this unit of work, via step .","Then, each of the object servers contacted adds a commit record to its respective transaction log and commits the database changes, via step . Each of the object servers then sends an end transaction response to the library server, via step . Each of the object servers processes their transaction logs.","After the library server receives the end transaction response from each of the object servers, the library server checks for any response errors, and sends an end transaction response to the client, via step . The transaction is now completed and the client inspects the results, via step .","Although this typical process is utilized extensively to manage data, it is oftentimes desired that multiple replicas of an object or different object servers be resident within the system. Replication provides for reliability in a variety of ways. For example, it can be utilized as part of a comprehensive data security model to provide offsite storage. In addition, replicated parts lost due to a hardware, software or administrative error can be recovered by a utility if a copy exists. It also provides for availability of objects. For business, legal or regulatory reasons (depending on locale) objects (possibly legal documents) may be required to reside on certain classes of media, such as optical.","The performance characteristics of this media may conflict with the desired access rate for a given customer. Replication to a faster media can enable keeping a copy on the legal storage medium and a copy on fast access medium over a longer defined period than normal caching practices permit. Replication also provides backup redundancy, the ability to maintain a copy at two or more sites. Higher availability of objects is also achieved via multiple peer copies.","However, in conventional content management systems replication systems have not been implemented. One way of replicating objects is to replicate an entire database in a plurality of object servers. This would greatly increase the complexity and could affect the performance of the content management system. Such a system would require significant \u201cintelligence\u201d in each of the object servers to identify which object server has copies such that one object server would have to be able to identify if another object server has the desired object therewithin.","Accordingly, what is needed is a system and method for object replication, which does not significantly affect the cost and efficiency of the content management system. The present invention addresses such a need.","A system and method in accordance with the present invention provides for replication in a content management system. Replication is provided by utilizing the library server to track the objects to be replicated within the system. The replication is accomplished by adding two tables to the library server, a copies table and replicate table. The copies tables includes three new parts flags. A first flag identifies an ending as a copied part. A second flag identifies that other copies of this part exist. Finally a third flag identifies that a part is not yet available.","The present invention relates generally to a content management system and particularly to a system for object replication in such a system. The following description is presented to enable one of ordinary skill in the art to make and use the invention and is provided in the context of a patent application and its requirements. Various modifications to the preferred embodiment and the generic principles and features described herein will be readily apparent to those skilled in the art. Thus, the present invention is not intended to be limited to the embodiment shown but is to be accorded the widest scope consistent with the principles and features described herein.","A system and method in accordance with the present invention provides for replication in a content management system. The library server tracks the objects to be replicated within the system. In a preferred embodiment, a three valued logic is utilized for replication of an object: (1) part does not exist; (2) part will exist; and (3) part exists. The replication is accomplished by adding two tables to the library server, a copies table and replicate table. The copies tables includes three new parts flags. A first flag identifies that a copied part exists. A second flag identifies that other copies of this part exist. Finally a third flag identifies that a part is not yet available. The flag additions also apply to the parts table.","All the operations are kept simple and between only two servers at a time using a two-phase commit protocol. This reduces the complexity and allows operations to proceed where they would be unable to proceed if requiring 3 servers and one was not available.","A content management system that includes replication in accordance with the present invention utilizes many of the same elements as described in ,  and . To provide replication functionality is provided in the library server. Utilizing this functionality, the entire database of the object servers does not have to be replicated, thereby minimizing the complexity and intelligence required in each of the object servers. In so doing, a replication system is provided which is simple, easy to implement and compatible with existing content management systems.","To describe the key features of the present invention in more detail refer now to the following description in conjunction with the accompanying drawings.","Library Server ",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 7","FIG. 3","FIG. 1","FIG. 2"],"b":["501","501","101","102","501"]},"Copies Table ","In a preferred embodiment of the copies table , one row of the table exists for each replicated part. Replicated parts are stored on object servers as peers and are then managed as individuals. Three new part flags are added:","IS_A_REPLICA","This flag identifies an entry as a copied part.","HAS_REPLICAS","This flag identifies that other copies of this part exist.","REPLICATION_PENDING","This flag identifies that a copy of the part is not available.","Replicate Table ","In a preferred embodiment of the replicate table , one row of the table exists for each defined replication of a collection. A replication is defined from a source object server collection to a target object server collection. There is no long-term relationship. The replication information is inherited by each part at first store time. The theoretical design puts no limits on the number of replicas but the table limit is the size of a small integer and the internal implementation has a limit of 128 replicas per object server collection. The source object server collection cannot equal the target object server collection.","Object Server Table ","In a preferred embodiment of the object server table  within the library server , one row of the table exists for each defined object server (referenced by the replicate table ).","Collname Table ","In a preferred embodiment of the collection (collname) table , one row of the table exists for each defined collection (referenced by replicate table ).","Object Server ",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 8","FIG. 3"],"b":["503","503","103"]},"The additional element comprises a replicator . Its function will be described below.","Replicator ","The replicator  provides for movement of objects from one collection to another collection from a list of requests received on behalf of the library server. The replicator informs the library server on successful completion of these tasks. The replicator  moves objects from source collection to target collection.","In addition there is one new table in the object server, a replication table.","Replication Table ","One row of the table exists for each pending replication request within the table. Actions defined by replicate type include but are not limited to, for example:","\u201cA\u201d pending restore from a sync utility.","\u201cD\u201d delete this replica.","\u201cN\u201d insert replica information into library server copies table. This action is used to force object replication.","\u201cL\u201d inform library server replication for this object is complete.","\u201cR\u201d replicate this object to target.","\u201cS\u201d restore this object from a copy.","Object Server Table ","A collection ID is provided to accommodate replication with the object server table .","To illustrate how a content management system in accordance with the present invention provides for replication, an object store process, which includes replication, will be described hereinbelow.","Object Store Process",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 9","b":["702","702","705","706"]},"In the end transaction process, the object server inserts a row for each replica, which can include in a preferred embodiment object name, library server name, target object server name, target object server collection, file size, timestamps, and an action code into the object server replication table, via step . Then the object server logs a start replicator event in the transaction log, via step . After the object store process has completed, replication processing can occur, via step . Replication processing is described in detail hereinbelow.","Replication Processing Phase ",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 10","b":["801","802","804"]},"Steps  and  are repeated a predetermined number of times to sort replications for optimized access order.","Thereafter, end transaction commit signal is sent to the target server, via step . Finally, the end transaction reply is received by the source object server and if the reply is OK, replica is committed, via step .","Replication Processing Phase ",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 11","b":["902","904","902","904"]},"Next, an end transaction commit signal is sent to the library server, via step . Finally, end transaction reply is received, via step , and if OK, the database changes are committed and the replication is complete.","There are a plurality of replication operations supported by the above-identified system. They include but are not limited to retrieve, replacement, and delete operations. Each of these operations is described below.","Replication Operations","1. Retrieve Operator","If primary part in parts table is unavailable and the part has the HAS_REPLICAS flag set, the library server inspects the copies table for the list of replicated parts.","2. Replacement Operator","If the original part has copies the replacement request contains replication information to allow the distribution of the new copies. If the original is not available the Library Server can use a copy.","3. Delete Operator","If the original part HAS_REPLICAS flag is set the copy information is delivered along with the delete request.","Conclusion","A system and method in accordance with the present invention has the following advantages:","Replication is Performed at a Part Level","Replications requests are safe and guaranteed at transaction commit time. Accordingly, replications are performed outside the transaction scope as a long running transaction and replications are done in their own transaction scope.","For example, the replication process can be controlled, using a weekly schedule; each day may have a single period of time that will allow the replication process to run.","Defined Replications are an Attribute of the Collection","The replication attributes of a collection are inherited by the entities (parts) at initial store time. This is essential to guard against circular replications. The replication attributes of a collection may be changed at any time. In a preferred embodiment, up to 128 replicas may be defined per collection.","Replicated Parts are Treated as Peers by Object Server","Replications may be added for any part and replications may be coalesced into a single part via the normal migration process.","Although the present invention has been described in accordance with the embodiments shown, one of ordinary skill in the art will readily recognize that there could be variations to the embodiments and those variations would be within the spirit and scope of the present invention. Accordingly, many modifications may be made by one of ordinary skill in the art without departing from the spirit and scope of the specification."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIGS. 4\u20136"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
