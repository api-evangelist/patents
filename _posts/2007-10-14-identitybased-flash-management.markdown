---
title: Identity-based flash management
abstract: Methods, apparatus, and computer code for effecting flash policy configuration operations in accordance with an end-user identifier and/or a host-instance identifier are disclosed herein. Exemplary flash policy configuration operations include (i) configuring a flash error-correction policy, (ii) configuring a flash-management table storage policy; (iii) configuring a wear-leveling policy; (iv) configuring a bad-block management policy and (v) configuring a flash-programming voltage parameter. Exemplary end-user identifiers include but are not limited to email account identifiers, logon user names, and International Mobile Subscriber Identities (IMSI). Exemplary host-instance identifiers may include but are not limited to International Mobile EQUIPMENT Identifiers (IMEI). Optionally, the flash policy configuration is contingent on authentication context dataâ€”for example, strength of the authentication (e.g. login/password vs. smartcard authentication or biometric authentication), date of the authentication, and identity provider information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07970983&OS=07970983&RS=07970983
owner: SanDisk IL Ltd.
number: 07970983
owner_city: Kfar Saba
owner_country: IL
publication_date: 20071014
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND AND RELATED ART","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["The present invention relates to flash management techniques.","Flash Management Operations","Non-volatile memory is a type of memory that can retain its stored data without a power source. There are several types of non-volatile memories, with different read, write and erase capabilities, access times, data retention, data endurance cycles, etc. Electrically Erasable Programmable Read Only Memory (EEPROM) is capable of performing read write operations on a per-byte level, which means that each of the memory locations can be individually read and written.","Flash memory, comprised of flash-type floating-gate transistors, or cells, is a non-volatile memory similar in functionality and performance to EEPROM memory; flash memory has the advantage of being relatively inexpensive, although it operates under certain limitations. It is not possible to rewrite to a previously written location on flash memory without first erasing an entire memory section, i.e., the flash cells must be erased (e.g. programmed to \u201cone\u201d) before they can be programmed again. Flash memory can only erase relatively large groups of cells, usually called erase blocks (for example, 16 KB to 256 KB in size for many current commercial devices). Therefore updating the contents of a single byte or even a chunk of 1 KB requires \u201chousekeeping\u2019 operations\u2014data stored in the erase blocks that are not updated must first be moved elsewhere (i.e. relocated) so that they will be preserved during the erase operation, and then moved back into place after the update.","Sometimes, some of the blocks of the flash memory device, called \u201cbad blocks\u201d, are not reliable and their use should be avoided. Blocks are declared as \u201cbad blocks\u201d either by the manufacturer, when initially testing the device, or by application software, when detecting the failure of the blocks during operation of the memory device.","To overcome these limitations, a Flash File System (FFS) is implemented, as disclosed in U.S. Pat. No. 5,404,485 to Ban, incorporated by reference as if fully set forth herein. FFS provides a system of data storage and manipulation on flash devices that allows these devices to emulate magnetic disks. In the existing art, applications or operating systems interact with the flash storage subsystem using virtual addresses, rather than using physical addresses. There is an intermediary layer between the software application and the physical device that provides a mapping (also referred to herein as a \u201ctranslation\u201d) from the virtual addresses into the physical addresses. While the application or operating system software may view the storage system as having a contiguous defect-free medium that can be read or written randomly with no limitations, the physical addressing scheme has \u201choles\u201d in its address range (due to bad blocks, for example), and pieces of data that are adjacent to each other in the virtual address range might be greatly separated in the physical address range. The intermediary layer that does the mapping described above may, for example, be implemented in part or in whole by a software driver running on the same CPU on which the applications run. Alternatively or additionally, the intermediary layer may be in part or in whole embedded within a controller that controls the flash device and serves as the interface for the main CPU of the host computer when the host computer accesses the memory device (also called \u201cstorage device\u201d). This is, for example, the situation in removable memory cards such as SecureDigital (SD) cards or MultimediaMemoryCards (MMCs), where the card has an on-board controller running a firmware program that, among other functions, implements the type of mapping described above.","Software or firmware implementations that perform such address mappings are usually called \u201cflash management systems\u201d or \u201cflash file systems\u201d. The term \u201cflash file system\u201d actually is a misnomer, as the implementations do not necessarily support \u201cfiles\u201d in the sense that files are used in operating systems or personal computers, but rather support block device interfaces similar to those exported by hard disk software drivers. Still, the term is commonly used, and \u201cflash file system\u201d and \u201cflash management system\u201d are used herein interchangeably.","Other systems that implement virtual-to-physical address mapping are described in U.S. Pat. No. 5,937,425 to Ban and U.S. Pat. No. 6,591,330 to Lasser. Both of these patents are incorporated by reference for all purposes as if fully set forth herein.","For the present disclosure, a \u201cflash management layer\u201d is a computer element (i.e. implemented in hardware, software, firmware or any combination thereof\u2014residing on any number of devices) that (i) receives requests to write data to flash or to read data from flash (for example, at a specified block); (ii) handles the requests by programming the flash or reading data from flash; and (iii) effects one or more auxiliary flash management operations (for example, housekeeping operations, address mapping, bad block management, wear-leveling, management of storage of \u201cmapping tables\u201d or other flash management tables, and error correction). Flash management layers are useful for \u201chiding\u201d from a client at least some of the complexity of using flash memory\u2014for example, the need to carry out housekeeping operations when writing to flash, the need to effect bad block management, the fact that data read from flash cells is sometimes unreliable and there is a need to effect some sort of error correction, the need to extend the life of the flash memory cells by wear leveling, and for the case of NAND\u2014the need to operate under the constraint that NAND is not random access but serial access).","Examples of policies for storage of flash management tables are discussed in US 20060253645 incorporated by reference for all purposes as if fully set forth herein.","Examples of wear leveling techniques for flash EEPROM systems are discussed in U.S. Pat. No. 6,850,443 incorporated by reference for all purposes as if fully set forth herein.","Examples of techniques of managing programming voltage parameters for writing to flash memory or \u201cprogramming flash memory cells\u201d is provided by U.S. Pat. No. 6,903,972 and US 2005\/0024978, incorporated by reference for all purposes as if fully set forth herein.","Some Exemplary Flash Storage Systems",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1A","b":["100","130","140","150","106","130","130","30","130"]},"Upon receiving each aforementioned data storage request or data retrieval request via file system interface , file system  invokes data storage or data retrieval services provided by flash management layer  which \u201chides the complexity\u201d of flash storage by presenting to the file system a block-oriented or page-oriented interface (for example, a Logical Block Addressing (LBA) interface) or other high-level interface such as interface . Thus, in the exemplary configuration shown in , there is no need for file system , or for client application A, to be \u201caware\u201d of the specifics of flash management.","In recent years, so-called \u201cobject-oriented\u201d storage systems have become more popular.  are block diagrams of exemplary object-oriented systems (shown at B and C, respectively) in which data is stored to, and\/or retrieved from, flash. In the example of , the client application B issues a request to store a data object or retrieve a data object using an object-oriented protocol such as Media Transfer Protocol (MTP) or Object-based Storage Device (OSD) protocol\/command via object-oriented storage interface . Object mode-logical sector mode translation layer  (i.e. part of an \u2018object-oriented storage system\u2019) receives the request, and sends to flash management layer  corresponding read or write requests via the block-oriented interface (for example, an LBA interface) via flash management layer interface .","The example of  relates to a storage system that supports more \u201cmodern\u201d object oriented storage protocols together with \u201clegacy\u201d file system architecture. Thus, in the example of , the client application B issues a request to store a data object or retrieve a data object using an object-oriented protocol such as MTP or OSD via object-oriented storage interface . Object mode-file mode translation layer  receives the request, and sends, via file system interface , corresponding file-system read or write requests to the \u201clegacy\u201d file system .","Methods, apparatus, and computer code for effecting flash policy configuration operations in accordance with an end-user identifier and\/or a host-instance identifier are disclosed herein. Exemplary flash policy configuration operations include (i) configuring a flash error-correction policy, (ii) configuring a flash-management table storage policy; (iii) configuring a wear-leveling policy; (iv) configuring a bad-block management policy and (v) configuring a flash-programming voltage parameter. Exemplary end-user identifiers include but are not limited to email account identifiers, logon user names, and International Mobile Subscriber Identity (IMSI). Exemplary host-instance identifiers include but are not limited to International Mobile Equipment Identifiers (IMEI). Optionally, the flash policy configuration is contingent on authentication context data\u2014for example, for example, strength of the authentication (e.g. login\/password vs smartcard authentication or biometric authentication), date of the authentication, and identity provider information.","According to an embodiment of the present invention a system for configuring flash memory access behavior comprises: a) an interface for receiving at least one identifier selected from the group consisting of a host-instance identifier and an end-user identifier; and b) a flash policy enforcer operative to effect, in accordance with at least one received identifier selected from the aforementioned group, at least one flash configuration operation selected from the group consisting of: i) a configuration of a flash error-correction policy; ii) a configuration of a flash-management table storage policy; iii) a configuration of a wear-leveling policy; iv) a configuration of a bad-block -management policy; and v) a configuration of at least one flash-programming voltage parameter.","According to some embodiments, the flash policy enforcer is operative to effect the configuration of the flash error-correction policy.","According to some embodiments, the flash policy enforcer is operative to effect the configuration of the flash-management layer table storage policy.","According to some embodiments, the flash policy enforcer is operative to effect the configuration of the wear-leveling policy.","According to some embodiments, the flash policy enforcer is operative to effect the configuration of the bad-block-management policy.","According to some embodiments, the flash policy enforcer is operative to effect the configuration of at least one flash-programming parameter.","According to some embodiments, i) the interface is a multi-function interface that is further operative to receive at least one data-handling request selected from the group consisting of a data-read-request and a data-write-request; and ii) the flash policy enforcer is operative to effect the at least one flash configuration operation for servicing the data-handling request.","According to some embodiments, i) the interface is a file-system interface; and ii) the flash policy enforcer is operative to effect the at least one flash configuration operation by issuing a fle system\u2014flash management layer directive. According to some embodiments, i) the interface is a flash management layer interface; ii) the flash policy enforcer is operative to effect the at least one flash configuration operation by issuing an intra-flash management layer directive.","According to some embodiments, the interface is an object-oriented storage interface.","According to some embodiments, the flash policy enforcer is operative to effect the at least one flash configuration operation by issuing an object translation layer\u2014file system layer directive.","According to some embodiments, i) the interface is operative to receive the end-user identifier; and ii) the flash policy enforcer is operative to effect the at least one flash configuration operation in accordance with the received end-user identifier.","According to some embodiments, i) the interface is operative to receive the host-instance identifier; and ii) the flash policy enforcer is operative to effect the at least one flash configuration operation in accordance with the received host instance identifier.","According to some embodiments, i) the received end-user identifier is an email address; and ii) the flash policy enforcer is operative to effect the at least one flash configuration operation in accordance with the received email address.","According to some embodiments, i) the end-user identifier is a phone service subscriber identifier (for example, an International Mobile Subscriber Identity); and ii) the flash policy enforcer is operative to effect the at least one flash configuration operation in accordance with the received phone service subscriber identifier.","According to some embodiments, i) the host-instance identifier is a telephone handset unique identifier; and ii) the flash policy enforcer is operative to effect the at least one flash configuration operation in accordance with the received telephone handset unique identifier.","According to some embodiments, the system further comprises: c) an identifier-mapping database configured to store a plurality of the identifiers such that each identifier of the plurality is associated with a respective flash management parameter set including a respective at least one flash operation parameter selected from the group consisting of: i) an error-correction level for the flash error-correction policy; ii) a frequency parameter for saving at least flash management table from volatile memory to flash memory for the flash management table storage policy; iii) a wear-leveling parameter for determining at least one of: A) whether or not wear-leveling should be carried out; and B) how frequently to effect wear-leveling operations; iv) a bad-block threshold parameter; and v) a flash programming parameter; wherein the flash policy enforcer is operative to: (i) obtain from the identifier-mapping database, a respective the matching flash management parameter set corresponding to the interface-received identifier; (ii) effect the flash-configuration operation in accordance with at least one obtained flash parameter of the matching flash parameter management set.","According to some embodiments, the flash policy enforcer is operative to effect the at least one flash configuration operation in a manner that is contingent on authentication context data of the at least one identifier.","According to an embodiment of the present invention, a method for configuring flash memory access behavior comprises: a) receiving at least one identifier selected from the group consisting of a host-instance identifier and an end-user identifier; and b) effecting, in accordance with at least one received identifier selected from the group, at least one flash configuration operation selected from the group consisting of: i) configuring a flash error-correction policy; ii) configuring a flash-management table storage policy iii) configuring a wear-leveling policy; iv) configuring a bad-block-management policy; and v) configuring at least one flash-programming parameter.","According to some embodiments, the at least one flash configuration operation includes effecting the configuring of the flash error-correction policy in accordance with the received identifier.","According to some embodiments, the at least one flash configuration operation includes effecting the configuring of the flash-management table storage policy in accordance with the received identifier.","According to some embodiments, the at least one flash configuration operation includes effecting the configuring of the wear-leveling policy in accordance with the received identifier.","According to some embodiments, the at least one flash configuration operation includes effecting the configuration of the bad-block-management policy in accordance with the received identifier.","According to some embodiments, the at least one flash configuration operation includes effecting the configuration the at least one flash-programming parameter in accordance with the received identifier.","According to some embodiments, i) the identifier is received via a multi-function interface that is further operative to receive at least one data-handling request selected from the group consisting of a data-read-request and a data-write-request; and ii) the at least one flash configuration operation includes is operative to configure a servicing of the data-handling request.","According to some embodiments, i) the identifier is received via a file-system interface; ii) the at least one flash configuration operation includes issuing a file system\u2014flash management layer directive.","According to some embodiments, i) the identifier is received via a flash management layer interface; and ii) the at least one flash configuration operation includes issuing an intra-flash management layer directive in accordance with the flash management layer interface received identifier.","According to some embodiments, the identifier is received via an object-oriented storage interface.","According to some embodiments, the at least one flash configuration operation includes issuing an object translation layer\u2014file system layer directive.","According to some embodiments, i) the received identifier includes the end-user identifier; and ii) the at least one flash configuration operation is carried out in accordance with the received end-user identifier.","According to some embodiments, i) the received identifier includes the host instance identifier; and ii) the at least one flash configuration operation is carried out in accordance with the received host instance identifier.","According to some embodiments, i) the received end-user identifier is a phone service subscriber identifier (for example, an International Mobile Subscriber Identity); and ii) the at least one flash configuration operation is carried out in accordance with the received phone service subscriber identifier.","According to some embodiments, i) the host-instance identifier is a telephone handset unique identifier; and ii) the at least one flash configuration operation is carried out in accordance with the received telephone handset unique identifier.","According to some embodiments, the method further comprises the step of: c) obtaining a respective matching flash management parameter set corresponding to the interface-received identifier from an identifier-mapping database that stores a plurality of the identifiers such that each identifier of the plurality is associated with a respective flash management parameter set including a respective at least one flash operation parameter selected from the group consisting of: i) an error-correction level for the flash error-correction policy; ii) a frequency parameter for saving at least flash management table from volatile memory to flash memory for the flash management table storage policy; iii) a wear-leveling parameter for determining at least one of: A) whether or not wear-leveling should be carried out; B) how frequently to effect wear-leveling operations; iv) a bad-block threshold parameter; and v) a flash programming voltage parameter, wherein the flash configuration operation is effected in accordance with at least one obtained flash parameter of the matching flash parameter management set.","According to some embodiments, the at least one flash configuration operation is effected in a manner that is contingent on authentication context data of the at least one identifier.","According to some embodiments a computer readable medium comprises program instructions, wherein when executed the program instructions are operable to; a) receive at least one identifier selected from the group consisting of a host-instance identifier and an end-user identifier; and b) effect, in accordance with at least one received identifier selected from the aforementioned group, at least one flash configuration operation selected from the group consisting of; i) configuring a flash error-correction policy; ii) configuring a flash-management layer storage policy; iii) configuring a wear-leveling policy; iv) configuring a bad-block-management policy; and v) configuring at least one flash-programming parameter.","These and further embodiments will be apparent from the detailed description and examples that follow.","The present invention will now be described in terms of specific, example embodiments. It is to be understood that the invention is not limited to the example embodiments disclosed. It should also be understood that not every feature of the apparatus, methods and computer-code for providing identity-based flash management services described is necessary to implement the invention as claimed in any particular one of the appended claims. Various elements and features of devices are described to fully enable the invention. It should also be understood that throughout this disclosure, where a process or method is shown or described, the steps of the method may be performed in any order or simultaneously, unless it is clear from the context that one step depends on another being performed first.","The inventor of the present invention has found that it is possible to provide \u201cID-aware\u201d flash management services; i.e., it is feasible and useful to enforce a flash management policy selected in accordance with an end user identifier and\/or host-instance identifier.","A First Discussion of Various Use Cases","Several non-limiting exemplary use cases are now discussed.","In a first non-limiting example, a vendor or service-provider may prefer to enable a certain end-user (i.e. a \u201cfirst\u201d end-user) to read or write data \u2018quickly\u2019 (while sacrificing a certain amount of reliability or flash endurance) while providing to a different end-user (i.e. a \u201csecond\u201d end-user) a higher level of \u2018reliability\u2019 (even at the cost of read or write speed or flash endurance).","Thus, when it is determined that the \u201cfirst end-user\u201d (or an application associated with the first end-user) is invoking flash services (i.e. writing data to flash or retrieving data from flash), a first set of \u201cflash management parameters\u201d may be used. For example, when handling requests associated with the first user, less wear leveling may be used (i.e. since including wear leveling operations may reduce the speed at which flash services are provided) or a lower level of error correction may be provided. In another example, when handling write requests associated with the first user, certain \u201cflash voltage programming parameters\u201d associated with \u201cgreater speed\u201d may be selected (see, for example, U.S. Pat. No. 6,903,972)\u2014for example, using larger pulse increments of the programming pulses, using a lower target threshold voltage, using wider programming voltage pulses, using higher starting programming voltages, using fewer programming voltage pulses and\/or using lower maximum programming voltages.","On the other hand, when handling requests from the \u201csecond\u201d end-user, a different policy may be enforced. For example, when handling requests associated with the second end user, more wear leveling may be used (i.e. to provide a greater flash endurance), or a higher level or error correction may be used (i.e. to provide a greater reliability or accuracy in flash-read data). In another example, when handling write requests associated with the second user, smaller programming pulse increments may be used (i.e. which allows the data to be written more reliably at the cost of a slower write operation).","In a second non-limiting example, a vendor or service provider may decide to provide a \u201cthird user\u201d with \u2018improved\u2019 robustness against power failures (i.e. even at the expense of speed), while providing a \u201cfourth user\u201d with increased read and\/or write speed (i.e. with possibly a reduced level of robustness against power failures). According to this example, when handling read or write requests the \u201cthird user,\u201d the flash management system will save flash management tables (for example, address translation tables) from RAM to flash very often\u2014in the event of a power failure, it will be possible to recover from the power failure quicker and\/or with greater data integrity than the case where flash management tables are saved from RAM to flash less often. On the other hand, when handling read or write request from the \u201cfourth user,\u201d the frequency at which flash management tables are saved from RAM to flash would be reduced, in order not to slow the system with performance-slowing housekeeping operations. For the present disclosure, the frequency (for example, in time and\/or in number of operations or any other frequency parameters) at which flash management tables are saved from RAM to flash is one example of a \u201cflash-management table storage policy\u201d.","In a third non-limiting example, a vendor or service-provider may decide to provide a \u201cfifth\u201d end-user with higher level of data storage reliability, even if the total storage space of a given device is reduced, while for a \u201csixth\u201d end-user, it may be decided by the vendor or service provider to sacrifice a certain amount of data storage reliability in order to be afforded a larger flash storage space. Thus, according to this third example, a bad-block-management policy may be selected and enforced in accordance with an end-user identifier and\/or a host instance identifier (i.e. as discussed below).","According to the third non-limiting example, each block is associated with a respective probability of being a \u201cbad-block,\u201d and a \u201cbad-block-management policy\u201d is enforced where, if the probability that a given block is a \u201cbad block\u201d exceeds a certain \u201cprobability threshold,\u201d the block is designated as a bad block and not used.","Thus, according to this third example, when handling read or write request from the \u201cfifth\u201d user, a relatively \u201chigh\u201d value for this \u201cbad block probability threshold\u201d is enforced\u2014a smaller total number of blocks are considered \u201cgood blocks\u201d or \u201creliable blocks\u201d. This \u201chigher standard\u201d increases device reliability while sacrificing storage size. Conversely, when handling read or write request from the \u201csixth\u201d user, a relatively \u201clow\u201d value for this \u201cbad block probability threshold\u201d is enforced\u2014a larger total number of blocks are considered \u201cgood blocks\u201d or \u201creliable blocks\u201d. This \u201chigher standard\u201d increases available storage size while potentially reducing device reliability.","A Discussion of End-User Identifiers and Host-Instance Identifiers","The present inventor is now disclosing an apparatus and technique for providing identify-based flash management services in accordance with one or more of: (i) an end-user identifier and (ii) a host-instance identifier.","For the present disclosure, the term \u201cend-user\u201d identifier refers to an identifier of a human user or to an end-user subscription or subscriber identifier or to a user account identifier. It is recognized that there are many situations where multiple human beings (for example, within a family or within an enterprise) share a single \u2018user identifier\u2019\u2014for example, the same email account, the same account on a single machine or local area network, or multiple users of the same cell phone account.","According to a first non-limiting example, a user logs into his MS-Windows\u00ae account with a \u201clog-on name\u201d and \u201cpassword\u201d. In this example, the operating system (or a portion thereof) passes the \u201clog-on name\u201d to the computing element (i.e. implemented in software and\/or hardware and\/or firmware) responsible for enforcing the \u201cidentity-based flash management or flash storage\u201d policy. In this example, the \u201clog-on name\u201d is the \u201cend-user identifier\u201d and this refers to the \u201cuser account\u201d within MS-Windows\u00ae.","In another a second non-limiting example, an MS-Word application includes \u201cUser Information\u201d (e.g. accessible by \u201cTools-Options-User Information\u201d). According to this example, MS-Word\u00ae passes this \u201cend-user identifier\u201d data on to the operating system, which passes the \u201cuser information\u201d data to the computing element (i.e. implemented in software and\/or hardware and\/or firmware) responsible for enforcing the \u201cidentity-based flash management or flash storage\u201d policy.","Another example of an \u201cend-user\u201d identifier is an \u201cemail address\u201d.","Another example of an \u201cend-user\u201d identifier is a phone service subscriber identifier such as an International Mobile Subscriber Identity (IMSI).","A Discussion of Host-Instance Identifiers","With reference to , it is noted that in some embodiments, the \u201cflash device\u201d  and the \u201chost device\u201d  are physically separate devices (i.e. each associated with a different respective housing) operatively coupled together via some sort of wired or wireless physical interface (for example, a Universal Serial Bus (USB) interface, an MMC interface, an SD interface, etc.) According to this example, the host device  and the flash device  effect \u201cinter-device communications\u201d  using some asymmetric protocol with a \u201chost-side\u201d and a \u201cdevice-side\u201d (for example, a USB protocol).","Thus, in one non-limiting example, \u201chost device\u201d  is a personal computer and \u201cflash device\u201d  is a USB flash drive (or UFD). In another non-limiting example, \u201chost device\u201d  is a mobile phone and \u201cflash device\u201d  is a SIM card.","It is noted that, typically, manufacturers will associate each host device, such as host device , with a unique identifier that is independent of the computing capability of the host hardware. For example, a mobile phone manufacturer can manufacture a large number of identical phones, where each phone is associated with a different \u201chardware identifier\u201d or \u201chost-instance identifier\u201d.","One non-limiting example of a host-instance identifier is a \u201ctelephone handset unique identifier\u201d such as the International Mobile Equipment Identifiers (IMEI) unique to every GSM and UMTS phone.","A Second Discussion of Various Use Cases","The present inventor is now disclosing that it is possible for flash device  to provide flash storage or management services in accordance with the \u201chost-instance identifier\u201d of host .","Thus, all of the use cases, which are discussed in the earlier section in terms of a \u201cfirst end-user\u201d and a \u201csecond end-user\u201d, etc., are also relevant in cases where it is desired to provide a first type of flash management services to a first host device having a \u201cfirst host-instance identifier\u201d and a second type of flash management services to a second host device having a \u201csecond host-instance identifier\u201d.","In one non-limiting example, the flash device  is pre-configured (for example, in the factory, or by a distributor, or in any other manner) with an on-board database of \u201chost-instance identifiers\u201d identifiers. At some point in time (for example, when a data-read or write operation is requested), the flash device  needs to determine the identity of the host device  to which flash device  is coupled, and to provide flash management or storage services accordingly. According to this non-limiting example, a look up of this on-board database may be effected (i.e. using the host-instance identifier), in order to retrieve (i.e. based upon the host-instance identifier) a description or identifier of the appropriate flash-management or flash-storage policy, which is then enforced.","An Exemplary Technique for Configuring Flash Memory Access Behavior In Accordance With a Received End User and\/or Host-Instance Identifier",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 3"},"In step , the end user and\/or host-instance identifier is received. In step , one or more \u201cflash management parameters\u201d are determined in accordance with the identifier received at step . In one non-limiting example, the \u2018determining\u2019 at step  includes looking-up in a mapping database that can be, for example, a two-column mapping \u2018database\u2019, where the \u2018searched-data\u2019 column includes a list of various end-user and\/or host-instance identifiers, and the \u2018retrieved-data\u2019 column includes one or more \u2018flash parameters\u2019 or one or more descriptions of flash policies to be implemented. Each \u2018identifier\u2019 is thus associated with a respective \u201cone or more parameters\/policy descriptions\u2019.","Non-limiting examples of \u2018flash parameters\u2019 include: (i) an error correction level for flash-read data, (ii) a \u201cfrequency\u201d parameter for flash system tables (e.g. a parameter describing how frequently flash system tables are to be saved from RAM to flash memory\u2014this relates to the \u201ctradeoff\u201d between robustness against power failure and speed), and\/or a wear-leveling parameters (for example, a boolean parameter describing whether or not to carry out wear-leveling operations, which may provide slower service but increase the endurance of the flash memory) and\/or a bad-block parameter (for example, a threshold parameter describing how \u201creliable\u201d a block must be to be considered usable and not a \u2018bad block\u2019) and\/or a \u201cflash programming parameter\u201d (for example, the size of a programming pulse, or the frequency at which programming pulses are applied when programming flash).","The mapping database may be implemented in any combination of volatile and\/or non-volatile memory, and may reside on a single device or on multiple devices.","In step , a flash policy (e.g. flash error-correction policy, wear-leveling policy, or flash table \u2018housekeeping\u2019 policy for storing flash system tables from RAM to flash or bad-block policy or flash-programming parameter policy\u2014i.e. selecting a flash programming parameter such as a programming step voltage), which is configured according to flash management parameter(s) that are determined at step , is enforced\u2014for example, by modifying a data structure (or by issuing a directive or a command which causes the data structure to be modified) which stores a relevant \u201cflash parameter\u201d.","A Discussion of ID Managers and ID Tokens","As noted above, in step  an identifier is received, and later a flash policy is determined and enforced in accordance with the received identifier. Optionally, an \u201cID manager\u201d for delivering trusted identity tokens (end user ID, host instance ID) is provided. This may be necessary, for example, in cases where IDs need to be ascertained\u2014for example, where a business agreement is signed between a flash vendor and an Identity Provider (e.g. for example, a software vendor or operating system vendor), to provide specific flash tradeoffs.","In one example, end-users identities are managed by an Identity Provider (IdP, a server residing in the network). In this case, the ID manager may be responsible for obtaining and storing ID tokens, signed by the IdP and corresponding to a user's ID (or device \u2018host instance\u2019 ID). In addition to the end-user (for example, an email address or a user login ID, or any other end-user identifier) or host device instance identifier (for example, an IMEI), a security token may also include \u201cauthentication context data\u201d\u2014e.g. strength of the authentication (e.g. login\/password vs. smartcard or biometric authentication etc. . . . date of the authentication, identity provider information etc.","In different examples, an ID token (i.e. for an end-user identifier or host instance identifier) may be acquired \u2018on-the-fly\u2019 (for example, in a response to an authentication request) or \u2018cached\u2019 locally.","In some embodiments, the ID token is encoded according to the end user identifier and\/or authentication context data\u2014for example, strength of the authentication (e.g. login\/password vs. smartcard authentication etc.), date of the authentication, and identity provider information. In one or more of these embodiments, the determination and\/or enforcement of the given flash policy (i.e. error-correction policy and\/or wear-leveling policy and\/or bad-block policy and\/or flash programming parameter policy) is contingent on the \u2018authentication context data\u2019\u2014i.e. the authentication context data must be \u201csatisfactory\u2019 (for example, having a minimum authentication strength, a relatively recent authentication data, or an identity provider matching a pre-determined \u2018acceptable\u2019 list of identity providers).","In one non-limiting example, the identifier-dependent, or identifier-based, flash policy is only enforced for a given identifier if the security-token (i.e. indicating end user and\/or host instance identifier) received in step  has a \u2018date of authentication\u2019 that is more recent than a certain date (for example, within the last 7 days).","In another non-limiting example, the identifier-dependent flash policy is only enforced for a given identifier if the security-token (i.e. indicating end user and\/or host instance identifier) received in step  indicates verification by a given \u2018identity provider\u2019 (i.e. vendor or server).","In yet another non-limiting example, the identifier-dependent flash policy is only enforced for a given identifier if the \u2018strength of authentication\u2019 for the received  security token is of a minimum level (for example, at least smart-card level).","A Discussion of Various Architectures for Enforcing Identity-Based Flash Policies","Flash Policy Enforcement in or by the File System","In different embodiments, the enforcement of identity-based flash policies may be carried out at one or more \u2018locations\u2019 within a flash storage system. Some non-limiting examples are described in , A-B, and A-C.","With reference to , the identifier (i.e. end-user identifier and\/or host instance identifier) is received by file-system  (for example, from client application A or in any other manner), and the flash policy enforcer  for \u201cenforcing the identity-dependent flash policy\u201d resides in file system . In the non-limiting examples of , the \u201cinterface\u201d  by which flash policy enforcer receives the identifier at step  (i.e. end-user identifier and\/or host instance identifier) is \u2018file-system interface\u2019  which is configured as a \u2018multi-purpose interface. In these example, the multi-purpose file system interface  receives both (i) data handling requests for writing and\/or writing data (in this example file handling requests) as well as (ii) identifier data (as in step ).","For the present disclosure, the term \u201cinterface for receiving an identifier\u201d (for example, file system interface  or object storage interface  or flash management layer interface ) refers to a logical interface, and is not required to be a physical interface (for example, between two separate devices).","In the examples of , upon receiving the identifier, flash policy enforcer  effects a query of a mapping database (not shown) to obtain a description of, or any relevant data or information relating to or associated with, the flash policy to be enforced. In the examples of , the flash management layer  is \u201cignorant\u201d of the identify-based flash policy enforcement. Nevertheless, the flash management layer provides an API (Application Programming Interface) for the policy description (for example, for receiving, one or more \u2018flash policy parameters\u2019). For example, the \u2018flash management layer\u2019 may be configured to receive a parameter describing a level of error correction and\/or a frequency at which flash system tables should be saved from RAM to flash and\/or a wear leveling policy and\/or a bad-block management policy and\/or a flash programming parameter (for example, a programming pulse size or programming voltage frequency (i.e. frequency at which the various pulses are to be applied)).","In the example of , flash policy enforcer  thus: (i) receives, at step , the client identifier (for example, via the \u2018file system interface\u2019 ); (ii) determines, at step , one or more flash management parameters (for example, by effecting a look-up of a mapping database (not shown)); and (iii) configures, at step , the flash policy\u2014for example, by sending a \u2018flash policy parameter\u2019 from the file-system  to flash management layer  (for example, via a flash management layer API of the flash management layer interface ), thereby issuing a \u201cfile-system\u2014flash management layer directive\u201d).","For the present disclosure, a \u201cfile system\u2014flash management directive\u201d is a request sent from file-system  to the flash management layer  to carry one or more operations\u2014i.e. in this case, to configure a flash policy according to one or more parameters sent from the file system to the flash management later.","In the non-limiting example of , there is no need for the flash management layer  to be \u2018aware\u2019 of \u2018identity-dependent flash policies\u2019 or to receive any identifier (i.e. end user identifier or host instance identifier). In this example, \u2018enforcement\u2019 is carried out in the file system , and file-system-residing flash policy enforcer  may configure flash management layer  by sending a \u201cgeneric\u201d directive (i.e. without mention of the identifier) via flash management layer interface .","A word on notation: In  file system interface  is asterisked because the end-user and\/or host instance identifier is passed via file system interface . On the other hand, flash management layer interface  is not asterisked because, in the non-limiting example of , the \u201cidentifier\u201d is not passed via flash management layer interface . This \u2018asterisk\u2019 convention is also followed in other figures.","Similarly, in the non-limiting example of , flash policy enforcer  resides in the file system , and policy enforcement (i.e. obtaining a description of the flash policy to be enforced and generating a directive to enforce the described flash policy) is carried out in file system .","In the non-limiting examples of , B and C, flash policy enforcer  resides in the flash management layer , and policy enforcement (i.e. obtaining a description of the flash policy to be enforced and generating a directive to enforce the described flash policy) is carried out in flash management layer . In examples where the policy enforcement is carried out exclusively within flash management layer  (without invoking services from \u201chigher levels\u201d), it may be said that an \u201cintra-flash management layer directive\u201d is generated by policy enforcer \u2014i.e. without any need for an explicit flash policy configuration directive (i.e. a request to configure flash policy) to be sent, to flash management layer , from a \u201chigher layer\u201d\u2014for example, file system , or translation layers  or .","In contrast with the examples of , in the non-limiting examples of , B and C, the end user and\/or host instance identifier is received into flash management layer .","In the non-limiting example of , flash policy enforcer  resides in object mode\u2014logical sector mode translation layer , and policy enforcement (i.e. obtaining a description of the flash policy to be enforced and generating a directive to enforce the described flash policy) is carried out in object mode\u2014logical sector mode translation layer . In the non-limiting example of , the end user and\/or host instance identifier is thus received into object mode\u2014logical sector mode translation layer  via object-oriented storage interface . Similar to the example of , and in contrast with the examples B, B and C, there is no need to provide the identifier (i.e. end user and\/or host instance identifier) to flash management layer .","In the non-limiting example of , flash policy enforcer  resides in object mode\u2014file mode translation layer , and policy enforcement (i.e. obtaining a description of the flash policy to be enforced and generating a directive to enforce the described flash policy) is carried out in object mode\u2014file mode translation layer . In the non-limiting example of , the end user and\/or host instance identifier is thus received into object mode\u2014file mode translation layer  via object-oriented storage interface . Similar to the example of , A and B, and in contrast with the examples B, B and C, there is no need to provide the identifier (i.e. end user and\/or host instance identifier) to flash management layer . Furthermore, there is no need to provide the identifier (i.e. end user and\/or host instance identifier) to file system .","Multi-Function Interfaces","In the non-limiting example of , file system interface  is a \u201cmulti-purpose\u201d or \u201cmulti-function\u201d interface serving at least two fanctions: receiving of \u201cordinary\u201d file system commands to read and\/or write files, and receiving of the end user and\/or host instance identifier. It is noted that the commands to read and\/or write files are examples of \u201cdata handling requests\u201d to read and\/or write data\u2014ultimately from flash memory  though this is not required to appear explicitly in the request. Nevertheless, there is no explicit requirement that the \u201cidentifier\u201d be received via such a \u201cmulti-purpose interface\u201d.","Similarly, in the non-limiting example of , B and C, flash management layer interface  is a \u201cmulti-purpose\u201d interface serving at least two functions: receiving \u201cordinary\u201d flash manager layer commands (for example, to read or write data to a given block or page), and receiving the end user and\/or host instance identifier. It is noted that the commands to read and\/or write blocks or pages are examples of \u201cdata handling requests\u201d to read and\/or write data\u2014ultimately from flash memory  though this is not required to appear explicitly in the request. Nevertheless, there is no explicit requirement that the \u201cidentifier\u201d be received via such \u201cmulti-purpose interface\u201d.","Similarly, in the non-limiting example of , A and A, object-oriented storage interface  is a \u201cmulti-purpose\u201d interface serving at least two functions: receiving \u201cordinary\u201d object storage commands (for example, to read or write data to a given object; for example, encoded according to an object storage protocol such as MTP or OSD), and receiving the end user and\/or host instance identifier. It is noted that the commands to read and\/or write objects are examples of \u201cdata handling requests\u201d to read and\/or write data\u2014ultimately from flash memory  though this is not required to appear explicitly in the request. Nevertheless, there is no explicit requirement that the \u201cidentifier\u201d be received via such a \u201cmulti-purpose interface\u201d.","A Discussion of Exemplary Deployment of Components Described in ","In some implementations, every component in the aforementioned storage systems of , A-C, and A-C resides on a single device. In some implementations, the architecture depicted in  is adopted where flash device  (i.e. including flash memory ) (i) is coupled to host device  via a \u201cphysical inter-device interface\u201d  (ii) effect \u201cinter-device communications\u201d via physical inter-device interface  using some asymmetric protocol with a \u201chost-side\u201d and a \u201cdevice-side\u201d (for example, a USB protocol or MC protocol). In addition, flash device  (iii) receives data from the host device  via physical interface  and stores the received to the flash memory  within the flash device ; (iv) retrieves data from flash memory  within the flash device  and sends the retrieved data to the host-device  via physical interface.","With reference to the figures, it is noted that any component (i.e. for example, a \u201cdata handling component,\u201d for example, in any \u201clayer\u201d between the client application  and flash ) of any storage system A-G (for example, components , , , , ) may reside in part or wholly or in part on either or host device  and flash device . Furthermore, in some embodiments, any one of the aforementioned components may be implemented in any combination of software, hardware and firmware.","In one non-limiting example, flash policy enforcer  is implemented partly or entirely by a controller of flash device . Alternatively or additionally, in another non-limiting example, flash policy enforcer  is implemented partly or entirely by executing driver code, for example, using a CPU of host device .","In the description and claims of the present application, each of the verbs, \u201ccomprise\u201d \u201cinclude\u201d and \u201chave\u201d, and conjugates thereof, are used to indicate that the object or objects of the verb are not necessarily a complete listing of members, components, elements or parts of the subject or subjects of the verb.","All references cited herein are incorporated by reference in their entirety. Citation of a reference does not constitute an admission that the reference is prior art. The articles \u201ca\u201d and \u201can\u201d are used herein to refer to one or to more than one (i.e., to at least one) of the gramnmatical object of the article. By way of example, \u201can element\u201d means one element or more than one element.","The term \u201cincluding\u201d is used herein to mean, and is used interchangeably with, the phrase \u201cincluding but not limited\u201d to.","The term \u201cor\u201d is used herein to mean, and is used interchangeably with, the term \u201cand\/or,\u201d unless context clearly indicates otherwise.","The term \u201csuch as\u201d is used herein to mean, and is used interchangeably, with the phrase \u201csuch as but not limited to\u201d.","The present invention has been described using detailed descriptions of embodiments thereof that are provided by way of example and are not intended to limit the scope of the invention. The described embodiments comprise different features, not all of which are required in all embodiments of the invention. Some embodiments of the present invention utilize only some of the features or possible combinations of the features. Variations of embodiments of the present invention that are described and embodiments of the present invention comprising different combinations of features noted in the described embodiments will occur to persons of the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the invention is described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that the invention is not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the invention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention. As used throughout this application, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning \u201chaving the potential to\u201d), rather than the mandatory sense (i.e. meaning \u201cmust\u201d).",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIGS. 1A-1C"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIGS. 4A-4B","b":["5","5","6","6"]}]},"DETDESC":[{},{}]}
