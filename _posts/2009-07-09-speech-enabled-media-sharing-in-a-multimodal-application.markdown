---
title: Speech enabled media sharing in a multimodal application
abstract: Speech enabled media sharing in a multimodal application including parsing, by a multimodal browser, one or more markup documents of a multimodal application; identifying, by the multimodal browser, in the one or more markup documents a web resource for display in the multimodal browser; loading, by the multimodal browser, a web resource sharing grammar that includes keywords for modes of resource sharing and keywords for targets for receipt of web resources; receiving, by the multimodal browser, an utterance matching a keyword for the web resource, a keyword for a mode of resource sharing and a keyword for a target for receipt of the web resource in the web resource sharing grammar thereby identifying the web resource, a mode of resource sharing, and a target for receipt of the web resource; and sending, by the multimodal browser, the web resource to the identified target for the web resource using the identified mode of resource sharing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510117&OS=08510117&RS=08510117
owner: Nuance Communications, Inc.
number: 08510117
owner_city: Burlington
owner_country: US
publication_date: 20090709
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF EMBODIMENT(S)"],"p":["1. Field of the Invention","The field of the invention is data processing, or, more specifically, methods, apparatus, and products for speech enabled media sharing in a multimodal application.","2. Description of Related Art","User interaction with applications running on small devices through a keyboard or stylus has become increasingly limited and cumbersome as those devices have become increasingly smaller. In particular, small handheld devices like mobile phones and PDAs serve many functions and contain sufficient processing power to support user interaction through multimodal access, that is, by interaction in nonvoice modes as well as voice mode. Devices which support multimodal access combine multiple user input modes or channels in the same interaction allowing a user to interact with the applications on the device simultaneously through multiple input modes or channels. The methods of input include speech recognition, keyboard, touch screen, stylus, mouse, handwriting, and others. Multimodal input often makes using a small device easier.","Multimodal applications are often formed by sets of markup documents served up by web servers for display on multimodal browsers. A \u2018multimodal browser,\u2019 as the term is used in this specification, generally means a web browser capable of receiving multimodal input and interacting with users with multimodal output, where modes of 5 the multimodal input and output include at least a speech mode. Multimodal browsers typically render web pages written in XHTML+Voice (\u2018X+V\u2019). X+V provides a markup language that enables users to interact with an multimodal application often running on a server through spoken dialog in addition to traditional means of input such as keyboard strokes and mouse pointer action. Visual markup tells a multimodal browser what the user interface is look like and how it is to behave when the user types, points, or clicks. Similarly, voice markup tells a multimodal browser what to do when the user speaks to it. For visual markup, the multimodal browser uses a graphics engine; for voice markup, the multimodal browser uses a speech engine. X+V adds spoken interaction to standard web content by integrating XHTML (eXtensible Hypertext Markup Language) and speech recognition vocabularies supported by VoiceXML. For visual markup, X+V includes the XHTML standard. For voice markup, X+V includes a subset of VoiceXML. For synchronizing the VoiceXML elements with corresponding visual interface elements, X+V uses events. XHTML includes voice modules that support speech synthesis, speech dialogs, command and control, and speech grammars. Voice handlers can be attached to XHTML elements and respond to specific events. Voice interaction features are integrated with XHTML and can consequently be used directly within XHTML content. In addition to X+V, multimodal applications also may be implemented with Speech Application Tags (\u2018SALT\u2019). SALT is a markup language developed by the Salt Forum. Both X+V and SALT are markup languages for creating applications that use voice input\/speech recognition and voice output\/speech synthesis. Both SALT applications and X+V applications use underlying speech recognition and synthesis technologies or \u2018speech engines\u2019 to do the work of recognizing and generating human speech. As markup languages, both X+V and SALT provide markup-based programming environments for using speech engines in an application's user interface. Both languages have language elements, markup tags, that specify what the speech-recognition engine should listen for and what the synthesis engine should \u2018say.\u2019 Whereas X+V combines XHTML, VoiceXML, and the XML Events standard to create multimodal applications, SALT does not provide a standard visual markup language or eventing model. Rather, it is a low-level set of tags for specifying voice interaction that can be embedded into other environments. In addition to X+V and SALT, multimodal applications may be implemented in Java with a Java speech framework, in C++, for example, and with other technologies and in other environments as well.","Currently multimodal application may be used to drive the execution of media content. Often the display of a multimodal application will reveal media content that may be shared by a user with another user. Using physical interaction a an input device to send a link to the media content or copy the content and send it to another user may be cumbersome.","Speech enabled media sharing in a multimodal application including parsing, by a multimodal browser, one or more markup documents of a multimodal application; identifying, by the multimodal browser, in the one or more markup documents a web resource for display in the multimodal browser; loading, by the multimodal browser, a web resource sharing grammar that includes keywords for modes of resource sharing and keywords for targets for receipt of web resources; receiving, by the multimodal browser, an utterance matching a keyword for the web resource, a keyword for a mode of resource sharing and a keyword for a target for receipt of the web resource in the web resource sharing grammar thereby identifying the web resource, a mode of resource sharing, and a target for receipt of the web resource; and sending, by the multimodal browser, the web resource to the identified target for the web resource using the identified mode of resource sharing.","The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.","Exemplary methods, apparatus, and products for speech enabled media sharing in a multimodal application are described with reference to the accompanying drawings, beginning with .  sets forth a network diagram illustrating an exemplary system for speech enabled media sharing in a multimodal application according to embodiments of the present invention. Speech enabled media sharing in a multimodal application in this example is implemented with a multimodal browser () that supports a multimodal application (). The multimodal browser supports a speech engine () operating on a multimodal device () or a speech engine () residing on a voice server (). The system of  includes at least one speech recognition grammar () that specifies words and phrases to be recognized by an automatic speech recognition (\u2018ASR\u2019) engine () of a speech engine (, ). The multimodal device () supports multiple modes of user interaction with the multimodal application including a voice mode and one or more non-voice modes of user interaction with the multimodal application. The voice mode is represented here with audio output of voice prompts and responses () from the multimodal devices and audio input of speech for recognition () from a user (). Non-voice modes are represented by input\/output devices such as keyboards and display screens on the multimodal devices (). The multimodal application is operatively coupled () to an ASR engine () in a speech engine (). The operative coupling may be implemented with an application programming interface (\u2018API\u2019), a voice service module, or a VOIP connection as explained more detail below.","The system of  operates generally to carry out speech enabled media sharing in a multimodal application by parsing, by the multimodal browser (), one or more markup documents of a multimodal application (); identifying, by the multimodal browser (), in the one or more markup documents a web resource for display in the multimodal browser (); loading, by the multimodal browser (), a web resource sharing grammar () that includes keywords () for modes of resource sharing and keywords for targets () for receipt of web resources; receiving, by the multimodal browser (), an utterance matching a keyword for the web resource, a keyword for a mode of resource sharing and a keyword for a target for receipt of the web resource in the web resource sharing grammar thereby identifying the web resource, a mode of resource sharing, and a target for receipt of the web resource; and sending, by the multimodal browser (), the web resource to the identified target for the web resource using the identified mode of resource sharing.","A web resource is content available for sharing through a wide area network, such as for example, the Internet. Such a web resource may include a media file in a multimodal application capable of being sent as an email attachment to another user, a hyperlink to a web page capable of being sent as a text message, or any other content that will occur to those of skill in the art. A mode of resource sharing is a method for data communications. Examples of modes of resource sharing include email, text messaging, short message service (\u2018SMS\u2019), multimedia message service (\u2018MMS\u2019) and so on as will occur those of skill in the art.","A multimodal device is an automated device, that is, automated computing machinery or a computer program running on an automated device, that is capable of accepting from users more than one mode of input, keyboard, mouse, stylus, and so on, including speech input\u2014and also displaying more than one mode of output, graphic, speech, and so on. A multimodal device is generally capable of accepting speech input from a user, digitizing the speech, and providing digitized speech to a speech engine for recognition. A multimodal device may be implemented, for example, as a voice-enabled browser on a laptop, a voice browser on a telephone handset, an online game implemented with Java on a personal computer, and with other combinations of hardware and software as may occur to those of skill in the art. Because multimodal applications may be implemented in markup languages (X+V, SALT), object-oriented languages (Java, C++), procedural languages (the C programming language), and in other kinds of computer languages as may occur to those of skill in the art, this specification uses the term \u2018multimodal application\u2019 to refer to any software application, server-oriented or client-oriented, thin client or thick client, that administers more than one mode of input and more than one mode of output, typically including visual and speech modes.","The system of  includes several example multimodal devices: [0022] personal computer () which is coupled for data communications to data communications network () through wireline connection (), [0023] personal digital assistant (\u2018PDA\u2019) () which is coupled for data communications to data communications network () through wireless connection (), [0024] mobile telephone () which is coupled for data communications to data communications network () through wireless connection (), and [0025] laptop computer () which is coupled for data communications to data communications network () through wireless connection ().","Each of the example multimodal devices () in the system of  includes a microphone, an audio amplifier, a digital-to-analog converter, a multimodal browser, and a multimodal application capable of accepting from a user () speech for recognition (), digitizing the speech, and providing the digitized speech to a speech engine for recognition. The speech may be digitized according to industry standard codecs, including but not limited to those used for Distributed Speech Recognition as such. Methods for \u2018COding\/DECoding\u2019 speech are referred to as \u2018codecs.\u2019 The European Telecommunications Standards Institute (\u2018ETSI\u2019) provides several codecs for encoding speech for use in DSR, including, for example, the ETSI ES 201 108 DSR Front-end Codec, the ETSI ES 202 050 Advanced DSR Front-end Codec, the ETSI ES 202 211 Extended DSR Front-end Codec, and the ETSI ES 202 212 Extended Advanced DSR Front-end Codec. In standards such as RFC3557 entitled [0027] RTP Payload Format for European Telecommunications Standards Institute (ETSI) European Standard ES 201 108 Distributed Speech Recognition Encoding and the Internet Draft entitled [0028] RTP Payload Formats for European Telecommunications Standards Institute (ETSI) European Standard ES 202 050, ES 202 211, and ES 202 212 Distributed Speech Recognition Encoding, the IETF provides standard RTP payload formats for various codecs. It is useful to note, therefore, that there is no limitation in the present invention regarding codecs, payload formats, or packet structures. Multimodal applications according to embodiments of the present invention may implement any codec, including, for example: [0029] AMR (Adaptive Multi-Rate Speech coder) [0030] ARDOR (Adaptive Rate-Distortion Optimized sound codeR), [0031] Dolby Digital (A\/52, AC3), [0032] DTS (DTS Coherent Acoustics), [0033] MP1 (MPEG audio layer-1), [0034] MP2 (MPEG audio layer-2) Layer 2 audio codec (MPEG-1, MPEG-2 and non-ISO MPEG-2.5), [0035] MP3 (MPEG audio layer-3) Layer 3 audio codec (MPEG-1, MPEG-2 and non-ISO MPEG-2.5), [0036] Perceptual Audio Coding, [0037] FS-1015 (LPC-10), [0038] FS-1016 (CELP), [0039] G.726 (ADPCM), [0040] G.728 (LD-CELP), [0041] G.729 (CS-ACELP), [0042] GSM, [0043] HILN (MPEG-4 Parametric audio coding), and [0044] others as may occur to those of skill in the art.","As mentioned, a multimodal device according to embodiments of the present invention is capable of providing speech to a speech engine for recognition. A speech engine is a functional module, typically a software module, although it may include specialized hardware also, that does the work of recognizing and generating or \u2018synthesizing\u2019 human speech. The speech engine implements speech recognition by use of a further module referred to in this specification as a ASR engine, and the speech engine carries out speech synthesis by use of a further module referred to in this specification as a text-to-speech (\u2018TTS\u2019) engine. As shown in , a speech engine () may be installed locally in the multimodal device () itself, or a speech engine () may be installed remotely with respect to the multimodal device, across a data communications network () in a voice server (). A multimodal device that itself contains its own speech engine is said to implement a \u2018thick multimodal client\u2019 or \u2018thick client,\u2019 because the thick multimodal client device itself contains all the functionality needed to carry out speech recognition and speech synthesis\u2014through API calls to speech recognition and speech synthesis modules in the multimodal device itself with no need to send requests for speech recognition across a network and no need to receive synthesized speech across a network from a remote voice server. A multimodal device that does not contain its own speech engine is said to implement a \u2018thin multimodal client\u2019 or simply a \u2018thin client,\u2019 because the thin multimodal client itself contains only a relatively thin layer of multimodal application software that obtains speech recognition and speech synthesis services from a voice server located remotely across a network from the thin client. For ease of explanation, only one () of the multimodal devices () in the system of  is shown with a speech engine (), but readers will recognize that any multimodal device may have a speech engine according to embodiments of the present invention.","A multimodal application () in this example runs in a multimodal browser (). The multimodal client application () may include a set or sequence of X+V or SALT documents that execute on the multimodal browser (). The multimodal browser () of  supports the execution of a media player () through voice modes and non-voice modes. A media player is automated computing machinery for managing and administering media content in media files such as audio files and video files. Examples of media players that may be modified for use in accordance with the present invention include Music Match\u2122, iTunes\u00ae, Songbird\u2122, and others as will occur to those of skill in the art.","A multimodal application () in this example running in a multimodal browser () provides speech for recognition and text for speech synthesis to a speech engine through a VoiceXML interpreter (, ). A VoiceXML interpreter is a software module of computer program instructions that accepts voice dialog instructions from a multimodal application, typically in the form of a VoiceXML <form> element. The voice dialog instructions include one or more grammars, data input elements, event handlers, and so on, that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm (\u2018FIA\u2019).","A Form Interpretation Algorithm (\u2018FIA\u2019) drives the interaction between the user and a multimodal application. The FIA is generally responsible for selecting and playing one or more speech prompts, collecting a user input, either a response that fills in one or more input items, or a throwing of some event, and interpreting actions that pertained to the newly filled in input items. The FIA also handles multimodal application initialization, grammar activation and deactivation, entering and leaving forms with matching utterances and many other tasks. The FIA also maintains an internal prompt counter that is increased with each attempt to provoke a response from a user. That is, with each failed attempt to prompt a matching speech response from a user an internal prompt counter is incremented.","As shown in , a VoiceXML interpreter () may be installed locally in the multimodal device () itself, or a VoiceXML interpreter () may be installed remotely with respect to the multimodal device, across a data communications network () in a voice server (). In a thick client architecture, a multimodal device () includes both its own speech engine () and its own VoiceXML interpreter (). The VoiceXML interpreter () exposes an API to the multimodal application () for use in providing speech recognition and speech synthesis for the multimodal application. The multimodal application provides dialog instructions, VoiceXML <form> elements, grammars, input elements, event handlers, and so on, through the API to the VoiceXML interpreter, and the VoiceXML interpreter administers the speech engine on behalf of the multimodal application. In the thick client architecture, VoiceXML dialogs are interpreted by a VoiceXML interpreter on the multimodal device. In the thin client architecture, VoiceXML dialogs are interpreted by a VoiceXML interpreter on a voice server () located remotely across a data communications network () from the multimodal device running the multimodal application ().","The VoiceXML interpreter provides grammars, speech for recognition, and text prompts for speech synthesis to the speech engine, and the VoiceXML interpreter returns to the multimodal application speech engine output in the form of recognized speech, semantic interpretation results, and digitized speech for voice prompts. In a thin client architecture, the VoiceXML interpreter () is located remotely from the multimodal client device in a voice server (), the API for the VoiceXML interpreter is still implemented in the multimodal device, with the API modified to communicate voice dialog instructions, speech for recognition, and text and voice prompts to and from the VoiceXML interpreter on the voice server. For ease of explanation, only one () of the multimodal devices () in the system of  is shown with a VoiceXML interpreter (), but readers will recognize that any multimodal device may have a VoiceXML interpreter according to embodiments of the present invention. Each of the example multimodal devices () in the system of  may be configured to carry out speech enabled media sharing in a multimodal application according to the present invention. The use of these four example multimodal devices () is for explanation only, not for limitation of the invention. Any automated computing machinery capable of accepting speech from a user, providing the speech digitized to an ASR engine through a VoiceXML interpreter, and receiving and playing speech prompts and responses from the VoiceXML interpreter may be improved to function as a multimodal device for improving speech capabilities of a multimodal application according to the present invention.","The system of  also includes a voice server () which is connected to data communications network () through wireline connection (). The voice server () is a computer that runs a speech engine () that provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning text representing recognized speech. Voice server () also provides speech synthesis, text to speech (\u2018TTS\u2019) conversion, for voice prompts and voice responses () to user input in multimodal applications such as, for example, X+V applications, SALT applications, or Java voice applications.","The system of  includes a data communications network () that connects the multimodal devices () and the voice server () for data communications. A data communications network useful for speech enabled media sharing in a multimodal application according to embodiments of the present invention is a data communications network composed of a plurality of computers that function as data communications routers connected for data communications with packet switching protocols. Such a data communications network may be implemented with optical connections, wireline connections, or with wireless connections. Such a data communications network may include intranets, internets, local area data communications networks (\u2018LANs\u2019), and wide area data communications networks (\u2018WANs\u2019). Such a data communications network may implement, for example: [0053] a link layer with the Ethernet\u2122 Protocol or the Wireless Ethernet\u2122 Protocol, [0054] a data communications network layer with the Internet Protocol (\u2018IP\u2019), [0055] a transport layer with the Transmission Control Protocol (\u2018TCP\u2019) or the User Datagram Protocol (\u2018UDP\u2019), [0056] an application layer with the HyperText Transfer Protocol (\u2018HTTP\u2019), the Session Initiation Protocol (\u2018SIP\u2019), the Real Time Protocol (\u2018RTP\u2019), the Distributed Multimodal Synchronization Protocol (\u2018DMSP\u2019), the Wireless Access Protocol (\u2018WAP\u2019), the Handheld Device Transfer Protocol (\u2018HDTP\u2019), the ITU protocol known as H.323, and [0057] other protocols as will occur to those of skill in the art.","The system of  includes a web server () connected for data communications through wireline connection () to network () and therefore to the multimodal devices (). The web server () may be any server that provides to client devices markup documents () that compose multimodal applications. The web server () typically provides such markup documents via a data communications protocol, HTTP, HDTP, WAP, or the like. That is, although the term \u2018web\u2019 is used to describe the web server generally in this specification, there is no limitation of data communications between multimodal devices and the web server to HTTP alone. The markup documents also may be implemented in any markup language that supports non-speech display elements, data entry elements, and speech elements for identifying which speech to recognize and which words to speak, grammars, form elements, and the like, including, for example, X+V and SALT. A multimodal application in a multimodal device then, upon receiving from the web sever () a markup document as part of a multimodal application, may execute speech elements by use of a VoiceXML interpreter () and speech engine () in the multimodal device itself or by use of a VoiceXML interpreter () and speech engine () located remotely from the multimodal device in a voice server ().","The arrangement of the multimodal devices (), the web server (), the voice server (), and the data communications network () making up the exemplary system illustrated in  are for explanation, not for limitation. Data processing systems useful for speech enabled media sharing in a multimodal application according to the present invention may include additional servers, routers, other devices, and peer-to-peer architectures, not shown in , as will occur to those of skill in the art. Data communications networks in such data processing systems may support many data communications protocols in addition to those noted above. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .","Speech enabled media sharing in a multimodal application according to embodiments of the present invention in a thin client architecture may be implemented with one or more voice servers, computers, that is, automated computing machinery, that provide speech recognition and speech synthesis. For further explanation, therefore,  sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a voice server (). The voice server () of  includes at least one computer processor () or \u2018CPU\u2019 as well as random access memory () (\u2018RAM\u2019) which is connected through a high speed memory bus () and bus adapter () to processor () and to other components of the voice server.","Stored in RAM () is a voice server application (), a module of computer program instructions capable of operating a voice server in a system that is configured for use in speech enabled media sharing in a multimodal application according to embodiments of the present invention. Voice server application () provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning speech recognition results, including text representing recognized speech, text for use as variable values in dialogs, and text as string representations of scripts for semantic interpretation. Voice server application () also includes computer program instructions that provide text-to-speech (\u2018TTS\u2019) conversion for voice prompts and voice responses to user input in multimodal applications such as, for example, X+V applications, SALT applications, or Java Speech applications.","Voice server application () may be implemented as a web server, implemented in Java, C++, or another language, that supports X+V, SALT, VoiceXML, or other multimodal languages, by providing responses to HTTP requests from X+V clients, SALT clients, Java Speech clients, or other multimodal clients. Voice server application () may, for a further example, be implemented as a Java server that runs on a Java Virtual Machine () and supports a Java voice framework by providing responses to HTTP requests from Java client applications running on multimodal devices. And voice server applications that support embodiments of the present invention may be implemented in other ways as may occur to those of skill in the art, and all such ways are well within the scope of the present invention.","The voice server () in this example includes a speech engine (). The speech engine is a functional module, typically a software module, although it may include specialized hardware also, that does the work of recognizing and generating human speech. The speech engine () includes an automated speech recognition (\u2018ASR\u2019) engine for speech recognition and a text-to-speech (\u2018TTS\u2019) engine for generating speech. The speech engine also includes a grammar (), a lexicon (), and a language-specific acoustic model (). The language-specific acoustic model () is a data structure, a table or database, for example, that associates SFVs with phonemes representing, to the extent that it is practically feasible to do so, all pronunciations of all the words in a human language. The lexicon () is an association of words in text form with phonemes representing pronunciations of each word; the lexicon effectively identifies words that are capable of recognition by an ASR engine. Also stored in RAM () is a Text To Speech (\u2018TTS\u2019) Engine (), a module of computer program instructions that accepts text as input and returns the same text in the form of digitally encoded speech, for use in providing speech as prompts for and responses to users of multimodal systems.","The grammar () communicates to the ASR engine () the words and sequences of words that currently may be recognized. For precise understanding, distinguish the purpose of the grammar and the purpose of the lexicon. The lexicon associates with phonemes all the words that the ASR engine can recognize. The grammar communicates the words currently eligible for recognition. The set of words currently eligible for recognition and the set of words capable of recognition may or may not be the same.","Grammars may be expressed in any format supported by any ASR engine, including, for example, the Java Speech Grammar Format (\u2018JSGF\u2019), the format of the W3C Speech Recognition Grammar Specification (\u2018SRGS\u2019), the Augmented Backus-Naur Format (\u2018ABNF\u2019) from the IETF's RFC2234, in the form of a stochastic grammar as described in the W3C's Stochastic Language Models (N-Gram) Specification, and in other grammar formats as may occur to those of skill in the art. Grammars typically operate as elements of dialogs, such as, for example, a VoiceXML <menu> or an X+V <form>. A grammar's definition may be expressed in-line in a dialog. Or the grammar may be implemented externally in a separate grammar document and referenced from with a dialog with a URI. Here is an example of a grammar expressed in JSFG:","TABLE-US-00001<grammar scope=\u201cdialog\u201d><![CDATA[#JSGF V1.0; grammar command; <command>=[remind me to] call|phone|telephone <name><when>; <name>=bob|martha|joe|pete|chris|john|artoush; <when>=today|this afternoon|tomorrow|next week;]]><\/grammar>","In this example, the elements named <command>, <name>, and <when> are rules of the grammar. Rules are a combination of a rulename and an expansion of a rule that advises an ASR engine or a voice interpreter which words presently can be recognized. In this example, expansion includes conjunction and disjunction, and the vertical bars \u2018|\u2019 mean \u2018or.\u2019 An ASR engine or a voice interpreter processes the rules in sequence, first <command>, then <name>, then <when>. The <command> rule accepts for recognition \u2018call\u2019 or \u2018phone\u2019 or \u2018telephone\u2019 plus, that is, in conjunction with, whatever is returned from the <name> rule and the <when> rule. The <name> rule accepts \u2018bob\u2019 or \u2018martha\u2019 or \u2018Joe\u2019 or \u2018pete\u2019 or \u2018chris\u2019 or \u2018john\u2019 or \u2018artoush\u2019, and the <when> rule accepts \u2018today\u2019 or \u2018this afternoon\u2019 or \u2018tomorrow\u2019 or \u2018next week.\u2019 The command grammar as a whole matches utterances like these, for example: [0067] \u201cphone bob next week,\u201d [0068] \u201ctelephone martha this afternoon,\u201d [0069] \u201cremind me to call chris tomorrow,\u201d and [0070] \u201cremind me to phone pete today.\u201d","The voice server application () in this example is configured to receive, from a multimodal client located remotely across a network from the voice server, digitized speech for recognition from a user and pass the speech along to the ASR engine () for recognition. ASR engine () is a module of computer program instructions, also stored in RAM in this example. In carrying out automated speech recognition, the ASR engine receives speech for recognition in the form of at least one digitized word and uses frequency components of the digitized word to derive a Speech Feature Vector (\u2018SFV\u2019). An SFV may be defined, for example, by the first twelve or thirteen Fourier or frequency domain components of a sample of digitized speech. The ASR engine can use the SFV to infer phonemes for the word from the language-specific acoustic model (). The ASR engine then uses the phonemes to find the word in the lexicon ().","Also stored in RAM is a VoiceXML interpreter (), a module of computer program instructions that processes VoiceXML grammars. VoiceXML input to VoiceXML interpreter () may originate, for example, from VoiceXML clients running remotely on multimodal devices, from X+V clients running remotely on multimodal devices, from SALT clients running on multimodal devices, or from Java client applications running remotely on multimedia devices. In this example, VoiceXML interpreter () interprets and executes VoiceXML segments representing voice dialog instructions received from remote multimedia devices and provided to VoiceXML interpreter () through voice server application ().","A multimodal application () in a thin client architecture may provide voice dialog instructions, VoiceXML segments, VoiceXML <form> elements, and the like, to VoiceXML interpreter () through data communications across a network with multimodal application (). The voice dialog instructions include one or more grammars, data input elements, event handlers, and so on, that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm (\u2018FIA\u2019) (). The VoiceXML interpreter interprets VoiceXML dialogs provided to the VoiceXML interpreter by a multimodal application.","As mentioned above, a Form Interpretation Algorithm (\u2018FIA\u2019) drives the interaction between the user and a multimodal application. The FIA is generally responsible for selecting and playing one or more speech prompts, collecting a user input, either a response that fills in one or more input items, or a throwing of some event, and interpreting actions that pertained to the newly filled in input items. The FIA also handles multimodal application initialization, grammar activation and deactivation, entering and leaving forms with matching utterances and many other tasks. The FIA also maintains an internal prompt counter that is increased with each attempt to provoke a response from a user. That is, with each failed attempt to prompt a matching speech response from a user an internal prompt counter is incremented.","Also stored in RAM () is an operating system (). Operating systems useful in voice servers according to embodiments of the present invention include UNIX\u2122, Linux\u2122, Microsoft NT\u2122, AIX\u2122, IBM's i5\/OS\u2122, and others as will occur to those of skill in the art. Operating system (), voice server application (), VoiceXML interpreter (), ASR engine (), JVM (), and TTS Engine () in the example of  are shown in RAM (), but many components of such software typically are stored in non-volatile memory also, for example, on a disk drive ().","Voice server () of  includes bus adapter (), a computer hardware component that contains drive electronics for high speed buses, the front side bus (), the video bus (), and the memory bus (), as well as drive electronics for the slower expansion bus (). Examples of bus adapters useful in voice servers according to embodiments of the present invention include the Intel Northbridge, the Intel Memory Controller Hub, the Intel Southbridge, and the Intel I\/O Controller Hub. Examples of expansion buses useful in voice servers according to embodiments of the present invention include Industry Standard Architecture (\u2018ISA\u2019) buses and Peripheral Component Interconnect (\u2018PCI\u2019) buses.","Voice server () of  includes disk drive adapter () coupled through expansion bus () and bus adapter () to processor () and other components of the voice server (). Disk drive adapter () connects non-volatile data storage to the voice server () in the form of disk drive (). Disk drive adapters useful in voice servers include Integrated Drive Electronics (\u2018IDE\u2019) adapters, Small Computer System Interface (\u2018SCSI\u2019) adapters, and others as will occur to those of skill in the art. In addition, non-volatile computer memory may be implemented for a voice server as an optical disk drive, electrically erasable programmable read-only memory (so-called \u2018EEPROM\u2019 or \u2018Flash\u2019 memory), RAM drives, and so on, as will occur to those of skill in the art.","The example voice server of  includes one or more input\/output (\u2018I\/O\u2019) adapters (). I\/O adapters in voice servers implement user-oriented input\/output through, for example, software drivers and computer hardware for controlling output to display devices such as computer display screens, as well as user input from user input devices () such as keyboards and mice. The example voice server of  includes a video adapter (), which is an example of an I\/O adapter specially designed for graphic output to a display device () such as a display screen or computer monitor. Video adapter () is connected to processor () through a high speed video bus (), bus adapter (), and the front side bus (), which is also a high speed bus.","The exemplary voice server () of  includes a communications adapter () for data communications with other computers () and for data communications with a data communications network (). Such data communications may be carried out serially through RS-232 connections, through external buses such as a Universal Serial Bus (\u2018USB\u2019), through data communications data communications networks such as IP data communications networks, and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer, directly or through a data communications network. Examples of communications adapters useful for embodiments of the present invention include modems for wired dial-up communications, Ethernet (IEEE 802.3) adapters for wired data communications network communications, and 802.11 adapters for wireless data communications network communications.","For further explanation,  sets forth a functional block diagram of exemplary apparatus for speech enabled media sharing in a multimodal application in a thin client architecture according to embodiments of the present invention. The example of  includes a multimodal device () and a voice server () connected for data communication by a VOIP connection () through a data communications network (). A multimodal application () runs on the multimodal device (), and a voice server application () runs on the voice server (). The multimodal client application () may be a set or sequence of X+V () or SALT documents that execute on multimodal browser (), a Java voice application that executes on the Java Virtual Machine (), or a multimodal application implemented in other technologies as may occur to those of skill in the art. The example multimodal device of  also includes a sound card (), which is an example of an I\/O adapter specially designed for accepting analog audio signals from a microphone () and converting the audio analog signals to digital form for further processing by a codec ().","In addition to the multimodal sever application (), the voice server () also has installed upon it a speech engine () with an ASR engine (), a grammar (), a lexicon (), a language-specific acoustic model (), and a TTS engine (), as well as a JVM (), and a Voice XML interpreter (). VoiceXML interpreter () interprets and executes VoiceXML dialog instructions received from the multimodal application and provided to VoiceXML interpreter () through voice server application (). VoiceXML input to VoiceXML interpreter () may originate from the multimodal application () implemented as an X+V client running remotely on the multimodal device (). As noted above, the multimedia device application () also may be implemented as a Java client application running remotely on the multimedia device (), a SALT application running remotely on the multimedia device (), and in other ways as may occur to those of skill in the art.","VOIP stands for \u2018Voice Over Internet Protocol,\u2019 a generic term for routing speech over an IP-based data communications network. The speech data flows over a general-purpose packet-switched data communications network, instead of traditional dedicated, circuit-switched voice transmission lines. Protocols used to carry voice signals over the IP data communications network are commonly referred to as \u2018Voice over IP\u2019 or \u2018VOIP\u2019 protocols. VOIP traffic may be deployed on any IP data communications network, including data communications networks lacking a connection to the rest of the Internet, for instance on a private building-wide local area data communications network or \u2018LAN.\u2019","Many protocols are used to effect VOIP. The two most popular types of VOIP are effected with the IETF's Session Initiation Protocol (\u2018SIP\u2019) and the ITU's protocol known as \u2018H.323.\u2019 SIP clients use TCP and UDP port  to connect to SIP servers. SIP itself is used to set up and tear down calls for speech transmission. VOIP with SIP then uses RTP for transmitting the actual encoded speech. Similarly, H.323 is an umbrella recommendation from the standards branch of the International Telecommunications Union that defines protocols to provide audio-visual communication sessions on any packet data communications network.","The apparatus of  operates in a manner that is similar to the operation of the system of  described above. Multimodal application () is a user-level, multimodal, client-side computer program that presents a voice interface to user (), provides audio prompts and responses () and accepts input speech for recognition (). Multimodal application () provides a speech interface through which a user may provide oral speech for recognition through microphone () and have the speech digitized through an audio amplifier () and a coder\/decoder (\u2018codec\u2019) () of a sound card () and provide the digitized speech for recognition to ASR engine (). Multimodal application () then packages the digitized speech in a recognition request message according to a VOIP protocol, and transmits the speech to voice server () through the VOIP connection () on the network ().","Voice server application () provides voice recognition services for multimodal devices by accepting dialog instructions, VoiceXML segments, and returning speech recognition results, including text representing recognized speech, text for use as variable values in dialogs, and output from execution of semantic interpretation scripts as well as voice prompts. Voice server application () includes computer program instructions that provide text-to-speech (\u2018TTS\u2019) conversion for voice prompts and voice responses to user input in multimodal applications such as, for example, X+V applications, SALT applications, or Java Speech applications.","The voice server application () receives speech for recognition from a user and passes the speech through API calls to VoiceXML interpreter () which in turn uses an ASR engine () for speech recognition. The ASR engine receives digitized speech for recognition, uses frequency components of the digitized speech to derive an SFV, uses the SFV to infer phonemes for the word from the language-specific acoustic model (), and uses the phonemes to find the speech in the lexicon (). The ASR engine then compares speech found as words in the lexicon to words in a grammar () to determine whether words or phrases in speech are recognized by the ASR engine.","A multimodal application (), in some embodiments of the present invention, may run in a multimodal browser (). The multimodal browser of  is capable of speech enabled media sharing in a multimodal application by parsing one or more markup documents of a multimodal application (); identifying in the one or more markup documents a web resource for display in the multimodal browser (); loading a web resource sharing grammar that includes keywords for modes of resource sharing and keywords for targets for receipt of web resources; receiving an utterance matching a keyword for the web resource, a keyword for a mode of resource sharing and a keyword for a target for receipt of the web resource in the web resource sharing grammar thereby identifying the web resource, a mode of resource sharing, and a target for receipt of the web resource; and sending the web resource to the identified target for the web resource using the identified mode of resource sharing.","The multimodal application () is operatively coupled to the ASR engine (). In this example, the operative coupling between the multimodal application and the ASR engine () is implemented with a VOIP connection () through a voice services module (), then through the voice server application () and either JVM (), VoiceXML interpreter (), or SALT interpreter (), depending on whether the multimodal application is implemented in X+V, Java, or SALT. The voice services module () is a thin layer of functionality, a module of computer program instructions, that presents an API () for use by an application level program in providing dialog instructions and speech for recognition to a voice server application () and receiving in response voice prompts and other responses. In this example, application level programs are represented by multimodal application (), JVM (), and multimodal browser ().","The voice services module () provides data communications services through the VOIP connection and the voice server application () between the multimodal device () and the VoiceXML interpreter (). The API () is the same API presented to applications by a VoiceXML interpreter when the VoiceXML interpreter is installed on the multimodal device in a thick client architecture ( on ). So from the point of view of an application calling the API (), the application is calling the VoiceXML interpreter directly. The data communications functions of the voice services module () are transparent to applications that call the API (). At the application level, calls to the API () may be issued from the multimodal browser (), which provides an execution environment for the multimodal application () when the multimodal application is implemented with X+V. And calls to the API () may be issued from the JVM (), which provides an execution environment for the multimodal application () when the multimodal application is implemented with Java.","Speech enabled media sharing in a multimodal application according to embodiments of the present invention in thick client architectures is generally implemented with multimodal devices, that is, automated computing machinery or computers. In the system of , for example, all the multimodal devices () are implemented to some extent at least as computers. For further explanation, therefore,  sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a multimodal device () for speech enabled media sharing in a multimodal application according to embodiments of the present invention. In a multimodal device implementing a thick client architecture as illustrated in , the multimodal device () has no connection to a remote voice server containing a VoiceXML interpreter and a speech engine. All the components needed for speech synthesis and voice recognition according to embodiments of the present invention are installed or embedded in the multimodal device itself.","The example multimodal device () of  includes several components that are structured and operate similarly as do parallel components of the voice server, having the same drawing reference numbers, as described above with reference to : at least one computer processor (), frontside bus (), RAM (), high speed memory bus (), bus adapter (), video adapter (), video bus (), expansion bus (), communications adapter (), I\/O adapter (), disk drive adapter (), an operating system (), a JVM (), a VoiceXML Interpreter (), a speech engine (), and so on. As in the system of , the speech engine in the multimodal device of  includes an ASR engine (), a grammar (), a lexicon (), a language-dependent acoustic model (), and a TTS engine (). The VoiceXML interpreter () administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm (\u2018FIA\u2019) ().","The speech engine () in this kind of embodiment, a thick client architecture, often is implemented as an embedded module in a small form factor device such as a handheld device, a mobile phone, PDA, and the like. An example of an embedded speech engine useful according to embodiments of the present invention is IBM's Embedded ViaVoice Enterprise. The example multimodal device of  also includes a sound card (), which is an example of an I\/O adapter specially designed for accepting analog audio signals from a microphone () and converting the audio analog signals to digital form for further processing by a codec (). The sound card () is connected to processor () through expansion bus (), bus adapter (), and front side bus ().","Also stored in RAM () in this example is a multimodal application (), a module of computer program instructions capable of operating a multimodal device as an apparatus that supports embodiments of the present invention. The multimodal application () runs with a multimodal browser () and implements speech recognition by accepting speech for recognition from a user and sending the speech for recognition through API calls to the ASR engine (). The multimodal application () and the multimodal browser () implement speech synthesis generally by sending words to be used as prompts for a user to the TTS engine (). As an example of thick client architecture, the multimodal application () in this example does not send speech for recognition across a network to a voice server for recognition, and the multimodal application () in this example does not receive synthesized speech, TTS prompts and responses, across a network from a voice server. All grammar processing, voice recognition, and text to speech conversion in this example is performed in an embedded fashion in the multimodal device () itself.","More particularly, multimodal application () in this example is a user-level, multimodal, client-side computer program that provides a speech interface through which a user may provide oral speech for recognition through microphone (), have the speech digitized through an audio amplifier () and a coder\/decoder (\u2018codec\u2019) () of a sound card () and provide the digitized speech for recognition to ASR engine (). The multimodal application () may be implemented as a set or sequence of X+V documents executing in a multimodal browser () or microbrowser that passes VoiceXML grammars and digitized speech by calls through an API () directly to an embedded VoiceXML interpreter () for processing. The embedded VoiceXML interpreter () may in turn issue requests for speech recognition through API calls directly to the embedded ASR engine (). Multimodal application () also can provide speech synthesis, TTS conversion, by API calls to the embedded TTS engine () for voice prompts and voice responses to user input.","In further exemplary embodiments, the multimodal application () may be implemented as a set or sequence X+V documents or SALT documents executed on a multimodal browser () or microbrowser that issues calls through the VoiceXML API () for speech recognition and speech synthesis services. In addition to X+V, SALT, and Java implementations, multimodal application () may be implemented in other technologies as will occur to those of skill in the art, and all such implementations are well within the scope of the present invention.","The multimodal application () is operatively coupled to the ASR engine () through an API (). In this example, the operative coupling between the multimodal application and the ASR engine () is implemented by either JVM (), VoiceXML interpreter (), or SALT interpreter (), depending on whether the multimodal application is implemented in X+V, Java, or SALT. When the multimodal application () is implemented in X+V, the operative coupling is effected through the multimodal browser (), which provides an operating environment and an interpreter for the X+V application, and then through the VoiceXML interpreter, which passes grammars and voice utterances for recognition to the ASR engine. When the multimodal application () is implemented in Java Speech, the operative coupling is effected through the JVM (), which provides an operating environment for the Java application and passes grammars and voice utterances for recognition to the ASR engine. When the multimodal application () is implemented in SALT, the operative coupling is effected through the SALT interpreter (), which provides an operating environment and an interpreter for the X+V application and passes grammars and voice utterances for recognition to the ASR engine.","The multimodal application () in this example, running on a multimodal device () that contains its own VoiceXML interpreter () and its own speech engine () with no network or VOIP connection to a remote voice server containing a remote VoiceXML interpreter or a remote speech engine, is an example of a so-called \u2018thick client architecture,\u2019 so-called because all of the functionality for processing voice mode interactions between a user and the multimodal application\u2014as well as the functionality for speech recognition\u2014is implemented on the multimodal device itself.","The multimodal browser () of  operates generally to carry out speech enabled media sharing in a multimodal application by parsing one or more markup documents of a multimodal application (); identifying in the one or more markup documents a web resource for display in the multimodal browser (); loading a web resource sharing grammar that includes keywords for modes of resource sharing and keywords for targets for receipt of web resources; receiving an utterance matching a keyword for the web resource, a keyword for a mode of resource sharing and a keyword for a target for receipt of the web resource in the web resource sharing grammar thereby identifying the web resource, a mode of resource sharing, and a target for receipt of the web resource; and sending the web resource to the identified target for the web resource using the identified mode of resource sharing.","For further explanation,  sets forth a flow chart illustrating an exemplary method of speech enabled media sharing in a multimodal application. The method of  is the method implemented with a multimodal application () and a multimodal browser (), a module of automated computing machinery operating on a multimodal device supporting multiple modes of user interaction. The modes of user interaction include a voice mode and one or more non-voice modes. The voice mode includes accepting speech input from a user, digitizing the speech, and providing digitized speech to a speech engine. The non-voice mode includes accepting input from a user through physical user interaction with a user input device for the multimodal device.","The method of  includes parsing (), by the multimodal browser (), one or more markup documents of a multimodal application (). Parsing () one or more markup documents of a multimodal application () may be carried out by identifying in document order the text, images, headers links, and other objects in the markup documents and representing those objects in a tree-structure for display in the browser according a document object model (\u2018DOM\u2019) for the multimodal browser. The DOM provides the specification for how objects in a markup document are represented and defines what attributes are associated with each object, and how the objects and attributes can be manipulated.","The method of  includes identifying (), by the multimodal browser (), in the one or more markup documents a web resource () for display in the multimodal browser (). A web resource is content available for sharing through a wide area network, such as for example, the Internet. Such a web resource may include a media file in a multimodal application capable of being sent as an email attachment to another user, a hyperlink to a web page capable of being sent as a text message, or any other content that will occur to those of skill in the art.","Identifying, by the multimodal browser, in the one or more markup documents a web resource for display in the multimodal browser may be carried out by identifying an element in the multimodal application containing metadata describing the location of the web resource. In some multimodal applications, for example, an <object> element may contain a data attribute containing metadata describing the location of a web resource for media sharing according to embodiments of the present invention.","Identifying, by the multimodal browser, in the one or more markup documents a web resource for display in the multimodal browser may be carried out by identifying markup designating a hyperlink to a web resource. A \u2018hyperlink\u2019 is a reference to a URL which when invoked requests access to a resource identified by the URL. A \u2018hyperlink\u2019 may include links to URLs effected through an anchor elements. An anchor element is a markup language element that identifies and implements a hyperlink. An exemplary form of an anchor element, here expressed in HTML, is: [0104]<a href=\u201chttp:\/\/SrvrX\/MediaFileY\u201d>Cool Video File<\/a>","This example anchor element includes a start tag <a>, and end tag <\/a>, an href attribute that identifies the target of the link as a media file named \u2018MediaFileY\u2019 on a web server named \u2018SrvrX,\u2019 and an anchor. The \u201canchor\u201d is the display text that is set forth between the start tag and the end tag. That is, in this example, the anchor is the text \u201cCool Video File.\u201d In typical usage, the anchor is displayed in highlighting, underscored, inverse, specially colored, or some other fashion setting it apart from other screen text and identifying it as an available hyperlink. In addition, the screen display area of the anchor is often sensitized to user interface operations such as GUI pointer operations such as mouse clicks.","Identifying in the one or more markup documents a web resource for display in the multimodal browser may also be carried out by identifying a file type consistent with a web resource. Often files of a type consistent with web resources have a file name extension identifying the file type. Examples of such file name extensions include *wav, .pdf, .mp3, .pps, .doc, and many others as will occur to those of skill in the art. Alternatively, file types may be identified by metadata associated with the file itself.","The method of  includes loading (), by the multimodal browser (), a web resource sharing grammar () that includes keywords () for modes of resource sharing and keywords for targets () for receipt of web resources. A mode of resource sharing is a method for data communications. Examples of modes of resource sharing include email, text messaging, short message service (\u2018SMS\u2019), multimedia message service (\u2018MMS\u2019) and so on as will occur those of skill in the art. As such, examples of keywords for modes of resource sharing include \u2018text message,\u2019 \u2018email,\u2019 \u2018message,\u2019 \u2018send a note,\u2019 and many others as will occur to those of skill in the art.","A target for receipt of the web resource is a data communications module for a person or process capable of receiving data communications including web resources. Such targets include unique phone numbers for text message receipt, email addresses and so on. Often the keywords identifying the target may be owner of the target data communications module. For example, \u2018Joe\u2019 may be used to identify the target email address \u2018joe@gmail.com.\u201d","The method of  includes receiving (), by the multimodal browser (), an utterance matching a keyword () for the web resource, a keyword for a mode of resource sharing () and a keyword () for a target for receipt of the web resource () in the web resource sharing grammar () thereby identifying the web resource, a mode of resource sharing, and a target for receipt of the web resource. Receiving (), by the multimodal browser (), an utterance matching a keyword () for the web resource, a keyword for a mode of resource sharing () and a keyword () for a target for receipt of the web resource () in the web resource sharing grammar () includes accepting speech input from a user, digitizing the speech, and providing digitized speech to a speech engine for recognition as described above.","The method of  also includes sending (), by the multimodal browser (), the web resource () to the identified target for the web resource using the identified mode of resource sharing. Sending (), by the multimodal browser (), the web resource () to the identified target for the web resource using the identified mode of resource sharing may be carried out by transmitting the web resource to the identified target using the identified mode of resource sharing.","Sending the web resource to the identified target for the web resource using the identified mode of resource sharing may include sending a reference to the web resource. Sending the web resource to the identified target for the web resource using the identified mode of resource sharing may include adding web resource as an attachment to the data communication message and sending the web resource as an attachment.","Those of skill in the art will recognize that when more that one web resource is to be displayed simultaneously when the markup document is rendered in the browser a multimodal browser may not be able to accurately disambiguate speech instructions to sharing of the correct web resource as intended by the user. For further explanation, therefore,  sets forth a flow chart illustrating another method of speech enabled media sharing in a multimodal application according to embodiments of the present invention. The method of  is similar to the method of  in that the method of  includes parsing (), by the multimodal browser (), one or more markup documents of a multimodal application (); identifying (), by the multimodal browser (), in the one or more markup documents a web resource () for display in the multimodal browser (); loading (), by the multimodal browser (), a web resource sharing grammar () that includes keywords () for modes of resource sharing and keywords for targets () for receipt of web resources; receiving (), by the multimodal browser (), an utterance matching a keyword () for a mode of resource sharing and a keyword () for a target for receipt of the web resource () in the web resource sharing grammar () thereby identifying a mode of resource sharing and a target for receipt of the web resource; and sending (), by the multimodal browser (), the web resource () to the identified target for the web resource using the identified mode of resource sharing.","The method of  differs from the method of  in that in the method of  identifying (), by the multimodal browser (), in the one or more markup documents a web resource () for display in the multimodal browser () includes identifying () more than one web resource for simultaneous display in the multimodal browser and providing (), for each web resource for simultaneous display in the multimodal browser, a unique visual designation. Identifying () more than one web resource for simultaneous display in the multimodal browser typically includes identifying more that one web resource that are to be displayed simultaneously when the markup document is rendered in the browser. Without providing some action for disambiguating the simultaneously displayed web resources, a multimodal browser may not be able to accurately accept speech to enable the sharing of the correct web resource as intended by the user. The method of  therefore includes providing (), for each web resource for simultaneous display in the multimodal browser, a unique visual designation may be carried out by dynamically creating objects for rendering unique visual designations. Such unique visual designations may be numerals rendered next to each displayed web resource, characters rendered next to each displayed web resource, symbols rendered next to each displayed web resource and many others as will occur to those of skill in the art. A grammar that includes keywords for the rendered unique visual designations is typically loaded such that the user is now empowered","In other embodiments of the present invention, a unique visual designation is not rendered next to each displayed resource. For further explanation,  sets forth a flow chart illustrating another method of speech enabled media sharing in a multimodal application according to embodiments of the present invention. The method of  is similar to the method of  in that the method of  includes parsing (), by the multimodal browser (), one or more markup documents of a multimodal application (); identifying (), by the multimodal browser (), in the one or more markup documents a web resource () for display in the multimodal browser (); loading (), by the multimodal browser (), a web resource sharing grammar () that includes keywords () for modes of resource sharing and keywords for targets () for receipt of web resources; receiving (), by the multimodal browser (), an utterance matching a keyword () for a mode of resource sharing and a keyword () for a target for receipt of the web resource () in the web resource sharing grammar () thereby identifying a mode of resource sharing and a target for receipt of the web resource; and sending (), by the multimodal browser (), the web resource () to the identified target for the web resource using the identified mode of resource sharing.","The method of  differs from the method of  in that in the method of  identifying (), by the multimodal browser (), in the one or more markup documents a web resource () for display in the multimodal browser () includes identifying () more than one web resource for simultaneous display in the multimodal browser; identifying () metadata associated with each web resource for simultaneous display in the multimodal browser; and loading () a disambiguating grammar including keywords selected in dependence upon the metadata associated with each web resource.","Identifying () more than one web resource for simultaneous display in the multimodal browser and identifying () metadata associated with each web resource for simultaneous display in the multimodal browser. Metadata is data about data. As such, metadata associated with the web resource may be used to dynamically generate keywords describing the same web resource described by the metadata. Such metadata may include designations of file types, descriptions of the contents of the web resource and many others as will occur to those of skill in the art.","Loading () a disambiguating grammar including keywords selected in dependence upon the metadata associated with each web resource. Disambiguating grammars include keywords dynamically selected or generated in dependence upon the identified metadata. A user may now be empowered to utter those keywords to disambiguate the simultaneously displayed web resources and identify the correct web resource for speech enabled media sharing.","For further explanation, consider the markup, at the end of the description, representing a segment of a multimodal application illustrating an example of speech enabled media sharing according to embodiments of the present invention.","The exemplary markup herein contains schematic X+V pseudocode demonstrating an example of speech enabled media sharing according to embodiments of the present invention. When the document above is loaded the DOM is created and Javascript executed in document order. The first element in the header is style text controlling the presentation of visual cues used to help prompt the user from the spoken dialog. Next, the <script> element is executed, declaring several functions used by the voice dialogs for sharing web resources found on the page.","After the scripts are the VoiceXML forms that are used to implement a multimodal dialog for speech enabled media sharing. The last elements in the header section are xml event listeners for the page load event that fire handlers that identify in the DOM web resources in the markup document and start a VoiceXML dialog that enables sharing media through spoken speech.","The exemplary X+V application above is single file that could have been authored statically. However, its structure is such that a server process could inject the elements of the header into an existing application page that wasn't originally authored with this capability in mind. The only dependence on the legacy page would be to parse the value for the id of the body tag in order to bind the <listener> elements.","The first page load event handler, \u201cgetMedia\u201d, searches the page for web resources and stores their DOM node in a variable. The next page load event listener launches \u201cvform1.\u201d This VoiceXML form enables a grammar which will match utterances such as \u201cBill, check this out!\u201d or \u201cPost to MySpace.\u201d When an utterance is matched, the filled element handles the results. If there is only one web resource object on the page, the DOM node containing the web resource is serialized to text and \u201cshared\u201d by executing the Javascript function \u201cshareWebResource.\u201d","The sharing of web resources can be accomplished in a number of ways well known in the mobile industry. Email, SMS, and HTTP and other application level network protocols are available in the software stack via native APIs, through Java libraries, etc, and can be exposed as JavaScript objects in the DOM.","If there is more than one web resource on the page then the application must resolve the user's choice. In this case, the <filled> element in \u201cvform1\u201d first executes a function that uses Dynamic HTML to insert visual prompt elements in the DOM. These are the highlighted numerals shown on the page displayed in the multimodal browser. These elements are only inserted after the user indicates that he wants to share web resources and the application determines that there is more than one web resource object on the page. Next, the VoiceXML dialog transitions to a new form that prompts the user to select from among the web resources on the page. It enables a grammar that will match utterances like \u201cemail number 2\u201d or \u201cone\u201d. This is an exemplary scheme based on the ordinal produced by crawling the DOM tree. Alternatively, grammars may dynamically be loaded in dependent upon metadata found in the DOM node so that the grammar could match the title of an object on the page, the web resource object, and so on.","Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for speech enabled media sharing in a multimodal application. Readers of skill in the art will recognize, however, that the present invention also may be embodied in a computer program product disposed on computer-readable signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine-readable information, including magnetic media, optical media, or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes, compact disks for optical drives, magnetic tape, and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as, for example, Ethernets\u2122 and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that, although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.","It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.",{"@attributes":{"id":"p-0096","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2002<?xml version=\u201c1.0\u201d?>"},{"entry":"\u2002<!DOCTYPE html PUBLIC \u201c-\/\/VoiceXML Forum\/\/DTD "},{"entry":"XHTML+Voice 1.2\/\/EN\u201d"},{"entry":"\u201chttp:\/\/www.voicexml.org\/specs\/multimodal\/x+v\/12\/dtd\/"},{"entry":"xhtml+voice12.dtd\u201d>"},{"entry":"<html xmlns=http:\/\/www.w3.org\/1999\/xhtml"},{"entry":"\u2003\u2003\u2003\u2003\u2002xmlns:vxml=http:\/\/www.w3.org\/2001\/vxml"},{"entry":"\u2003\u2003\u2003\u2002xmlns:ev=http:\/\/www.w3.org\/2001\/xml-events"},{"entry":"\u2003\u2003\u2003\u2002xmlns:xv=\u201chttp:\/\/www.voicexml.org\/2002\/xhtml+voice\u201d"},{"entry":"\u2003\u2003\u2003\u2002xml:lang=\u201cen-US\u201d>"},{"entry":"<head>"},{"entry":"\u2003\u2002<title>Speech Enabled Media Sharingr<\/title>"},{"entry":"\u2003\u2003<!--Style for the highlight elements -->"},{"entry":"\u2003\u2002<style type=\u201ctext\/css\u201d>"},{"entry":"\u2003\u2002b.xvtag"},{"entry":"\u2003\u2002{"},{"entry":"\u2003\u2003\u2002background-color: yellow;"},{"entry":"\u2003\u2003\u2002font-size: x-small;"},{"entry":"\u2003\u2003\u2002font-weight: 100;"},{"entry":"\u2003\u2002}"},{"entry":"\u2003\u2003<\/style>"},{"entry":"\u2003\u2002<script type=\u201ctext\/javascript\u201d>"},{"entry":"\u2003\u2002function shareWebResource(method, name, text)"},{"entry":"\u2003\u2002{"},{"entry":"\u2003\u2002\/\/ This function uses the devices address book and communications"},{"entry":"\u2003\u2002\/\/ methods such as sms, email, http, etc to send the serialized web "},{"entry":"\u2003\u2002\/\/ resource node to the recipient."},{"entry":"\u2003\u2003\u2002if (method == \u201ctext\u201d)"},{"entry":"\u2003\u2003\u2002\/\/ send sms"},{"entry":"\u2003\u2003\u2002if (method = \u201cemail\u201d)"},{"entry":"\u2003\u2003\u2002\/\/ send email"},{"entry":"\u2003\u2003\u2002if (method = \u201cpost\u201d)"},{"entry":"\u2003\u2003\u2002\/\/ post message to social networking website ..."},{"entry":"\u2003\u2002}"},{"entry":"\u2003\u2002function serializeNode(element)"},{"entry":"\u2003\u2002{"},{"entry":"\u2003\u2003\u2002\/\/ This function serializes a DOM element to a text variable"},{"entry":"\u2003\u2002}"},{"entry":"\u2003\u2002function getWeb resourceNodes(parent, list)"},{"entry":"\u2003\u2002{"},{"entry":"\u2003\u2003\u2002\/\/ This function crawls the DOM searching for nodes that"},{"entry":"\u2003\u2003\u2002\/\/ contain web resources, for example the <a> and <object> elements"},{"entry":"\u2003\u2003\u2002if (parent.childNodes)"},{"entry":"\u2003\u2003\u2003\u2002for (var i =0; i < parent.childNodes.length; i++)"},{"entry":"\u2003\u2003\u2003\u2002{"},{"entry":"\u2003\u2003\u2003\u2003var node = parent.childNodes[i];"},{"entry":"\u2003\u2003\u2003\u2003if (node.nodeName == \u201ca\u201d \u2225 node.nodeName == \u201cobject\u201d)"},{"entry":"\u2003\u2003\u2003\u2003list.push(node);"},{"entry":"\u2003\u2003\u2003\u2003\/\/ Recurse for this nodes children"},{"entry":"\u2003\u2003\u2003getWebResourceNodes(node, list);"},{"entry":"\u2003\u2003}"},{"entry":"\u2002}"},{"entry":"\u2002function highLightWebResourceElements(objects)"},{"entry":"\u2002{"},{"entry":"\u2002\/\/ This function iterates through the array of web resource objects and high-"},{"entry":"\u2002\/\/ lights them with an ordinal number to enable the user to make a selection."},{"entry":"\u2002var objectNumber = 1;"},{"entry":"\u2002for (var i = 0; x < objects.length; i++)"},{"entry":"\u2002{"},{"entry":"\u2002var element = objects[i];"},{"entry":"\u2002var boldElem = document.createElement( \u201cb\u201d );"},{"entry":"\u2002var textNode = document.createTextNode( objectNumber++ );"},{"entry":"\u2002boldElem.appendChild( textNode );"},{"entry":"\u2002boldElem.setAttribute( \u201cclass\u201d, \u201cxvtag\u201d);"},{"entry":"\u2002boldElem.setAttribute( \u201cstyle\u201d, \u201cposition:absolute;top:\u201d +"},{"entry":"\u2002getAbsoluteTop(element) +"},{"entry":"\u2002\u201c;left:\u201d + getAbsoluteLeft(element) );"},{"entry":"\u2002element.parentNode.insertBefore( boldElem, element ); x++;"},{"entry":"\u2002}"},{"entry":"\u2002}"},{"entry":"\u2002var webresourceNodes = new array;"},{"entry":"\u2002var numObjects = webresourceNodes.length;"},{"entry":"\u2002var webresourceText = null; var position = 0;"},{"entry":"\u2002<script id=\u201cgetWebResource\u201d type=\u201ctext\/javascript\u201d declare=\u201cdeclare\u201d>"},{"entry":"\u2002getWebResourceNodes(document, WebResourceNodes);"},{"entry":"\u2003<\/script> <vxml:form id=\u201cvforml\u201d>"},{"entry":"\u2003<vxml:field name=\u201cshareWebResource\u201d>"},{"entry":"\u2003<!-- The grammar for sharing the web resource includes a name rule"},{"entry":"built from the users contact list or social networks. -->"},{"entry":"<vxml:grammar>"},{"entry":"\u2003<![CDATA["},{"entry":"\u2003#JSGF VI.0;"},{"entry":"grammar share-web resource;"},{"entry":"public <share-web resource> = <name> {$choiceName = $name;"},{"entry":"}"},{"entry":"\u2002<question> {$choiceMethod = \u201ctext\u201d} |"},{"entry":"<method> {$choiceMethod = $method} <name> {$choiceName = $name;};"},{"entry":"\u2002<question> = (Have you seen this? | Have you heard this? | Check this out!)"},{"entry":"{$messageText=$question};"},{"entry":"<method> = email|text|post; <name> = Ciprian Agapi | Bill Bodin | "},{"entry":"Chris Cross | Twitter | MySpace; ]]>"},{"entry":"\u2002<\/vxml:grammar>"},{"entry":"\u2002<vxml:filled>"},{"entry":"\u2002<vxml:if expr=\u201cnumObjects == 1\u201d>"},{"entry":"<!-- Serialize the choice to the message text -->"},{"entry":"<vxml:assign name=\u201cwebResourceText\u201d"},{"entry":"expr=\u201cserializeNode(WebResourceNodes[0])\u201d\/>"},{"entry":"\u2002<!-- Execute the Javascript function to share the web resource -->"},{"entry":"<vxml:assign name=\u201ctemp\u201d expr=\u201cshareWebresource(choiceMethod,"},{"entry":"choiceName, messageText)\u201d\/>"},{"entry":"\u2002<vxml:elseif expr=\u201cnumObjects > 1\u201d\/>"},{"entry":"\u2002<!-- Highlight the web resource objects on the page -->"},{"entry":"<vxml:assign name=\u201ctemp\u201d "},{"entry":"expr=\u201chighLightWebResourceElements(allObjects)\u201d\/>"},{"entry":"<!-- Transition to the dialog to select a web resource object from the page -->"},{"entry":"<vxml:goto next=\u201c#selectWEbResource\u201d\/>"},{"entry":"<\/vxml:if>"},{"entry":"\u2002<\/vxml:filled>"},{"entry":"<\/vxml:field>"},{"entry":"\u2002<\/vxml:form>"},{"entry":"<vxml:form id=\u201cselectWebResource\u201d>"},{"entry":"<vxml:field name=\u201cselection\u201d>"},{"entry":"\u2002<vxml:prompt>Which object do you want to send? <\/vxml:prompt>"},{"entry":"<vxml:grammar>"},{"entry":"<![CDATA["},{"entry":"#JSGF VI.0;"},{"entry":"grammar selection; public <selection> = "},{"entry":"[Send | select | text | email][number]"},{"entry":"<number>"},{"entry":"\u2009{$selection = $number \u2212 1;}"},{"entry":"]]>"},{"entry":"<\/vxml:grammar>"},{"entry":"<vxml:filled>"},{"entry":"\u2002<!-- Serialize the choice to the message text -->"},{"entry":"\u2002<vxml:assign name=\u201cwebResourceText\u201d"},{"entry":"expr=\u201cserializeNode(WebResourceNodes[selection])\u201d\/>"},{"entry":"<!-- Execute the Javascript function to share the web resource -->"},{"entry":"<vxml:assign name=\u201ctemp\u201d expr=\u201cshareWebResource(choiceMethod,"},{"entry":"choiceName, messageText, WebResourceText)\u201d\/>"},{"entry":"\u2002<\/vxml:filled>"},{"entry":"\u2002<\/vxml:field>"},{"entry":"\u2002<\/vxml:form>"},{"entry":"\u2002<!-- Listeners to fire handlers to get the web resource objects and start "},{"entry":"the voice dialog after the document is loaded -->"},{"entry":"\u2002<listener event=\u201cload\u201d observer=\u201cmain\u201d target=\u201cmain\u201d"},{"entry":"handler=\u201c#getWebResource\u201d\/>"},{"entry":"\u2002<listener event=\u201cload\u201d observer=\u201cmain\u201d target=\u201cmain\u201d "},{"entry":"handler=\u201c#vform1\u201d\/>"},{"entry":"<\/head>"},{"entry":"\u2002<body id=\u201cmain\u201d>"},{"entry":"\u2002<object width=\u201c425\u201d height=\u201c355\u201d>"},{"entry":"\u2002<param name=\u201cmovie\u201d"},{"entry":"value=\u201chttp:\/\/www.you-"},{"entry":"tube.com\/v\/yysnkY4WHyM&hl=en&rel=0\u201d><\/param >"},{"entry":"\u2002<param name=\u201cwmode\u201d value=\u201ctransparent\u201d><\/param>"},{"entry":"\u2002<embed src=\u201chttp:\/\/www.youtube.com\/v\/yysnkY4WHyM&hl=en&rel=0\u201d"},{"entry":"type=\u201capplication\/x-shockwave-flash\u201d wmode=\u201ctransparent\u201d width=\u201c425\u201d"},{"entry":"height=\u201c355\u201d>"},{"entry":"<\/embed>"},{"entry":"<\/object>"},{"entry":"<a href=\u201chttp:\/\/podcastdownload.npr.org\/anon.npr-"},{"entry":"podcasts\/podcast\/151\/510005\/90194032\/KQED_90194032.mp3?dl="},{"entry":"1\u201d><img src=\u201cdownloadmp3_2.gif\u201d alt=\u201cDownload MP3\u201d height=\u201c22\u201d "},{"entry":"width=\u201c108\u201d><\/a>"},{"entry":"<\/body>"},{"entry":"\u2002<\/html>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
