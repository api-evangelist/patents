---
title: Method and apparatus for power management of graphics processors and subsystems that allow the subsystems to respond to accesses when subsystems are idle
abstract: A graphics processing device implementing a set of techniques for power management, preferably at both a subsystem level and a device level, and preferably including peak power management, a system including a graphics processing device that implements such a set of techniques for power management, and the power management methods performed by such a device or system. In preferred embodiments, the device includes at least two subsystems and hardware mechanisms that automatically seek the lowest power state for the device that does not impact performance of the device or of a system that includes the device. Preferably, the device includes a control unit operable in any selected one of multiple power management modes, and system software can intervene to cause the control unit to operate in any of these modes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06938176&OS=06938176&RS=06938176
owner: NVIDIA Corporation
number: 06938176
owner_city: Santa Clara
owner_country: US
publication_date: 20011005
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to methods and apparatus for power management of graphics chips (graphics processors implemented as integrated circuits), graphics cores (portions of graphics chips), and systems including graphics processors.","Typically, most of the power consumed by a graphics processor (\u201cGPU\u201d) while it renders video data for display is consumed as a result of the toggling of clocks within the GPU.","Conventional methods for power management of processing circuitry (e.g., CPUs and graphics processing circuitry) include placing the processing circuitry in a state in which it consumes low power when it is idle, placing a circuit block of the processing circuitry in a state in which it consumes low power when it is idle, and controlling at least one voltage asserted to the processing circuitry and the frequency of at least one clock used by the processing circuitry to reduce power consumption.","Each of the following terms is used throughout the specification, including in the claims, in the following sense:","\u201csystem\u201d denotes a computer system, for example a desktop, laptop, or handheld computer, that connects to a host slave unit (defined below) of a device (defined below). A system typically comprises at least a CPU, a GPU, a memory, at least one input device, and a display device (e.g., a liquid crystal display or other flat panel display, or cathode ray tube monitor);","\u201cdevice\u201d denotes a graphics processor chip (or a graphics processing portion of a chip, sometimes referred to as a graphics \u201ccore\u201d or \u201ccore portion\u201d) that includes a host slave unit (defined below) and at least one subsystem (defined below) configured to be connected to a system through the host slave unit. A device also includes one or more device clocks (defined below), one or more subsystem clocks (defined below), and a host clock (defined below);","\u201csubsystem\u201d denotes a block of logic, the registers for which are physically related by a common subsystem clock (defined below);","\u201chost slave unit\u201d denotes a block of logic that responds to slave accesses to a device that are initiated by a system. A PCI slave interface implementation is an example of a host slave unit;","\u201csystem bus\u201d denotes an interconnect between a device and other elements of a system that includes the device. An AGP bus is an example of a system bus;","\u201chost control bus\u201d denotes an interconnect (within a device) between the host slave unit and each subsystem of the device. The device employs this interconnect to respond to host slave unit accesses directed towards a subsystem;","\u201chost register\u201d denotes any register accessible via a host control bus. For example, a status register that can be read by system software to determine the state of a subsystem is a host register. To avoid system hangs inadvertently caused by system software, host registers must always be responsive to host accesses;","\u201cnon-host register\u201d denotes any register other than a host register. For example, the pipeline registers in the data-path of a typical device, and the state registers in a typical state machine of a device, are generally non-host registers;","\u201csubsystem power management\u201d denotes the discipline of managing power within an individual subsystem of a device;","\u201cdevice power management\u201d denotes the discipline of managing power globally across a device, rather than at the individual subsystem level;","\u201cpeak power management\u201d denotes the discipline of managing the peak power of a device so as to reduce its thermal design point (defined below) to match system design limitations;","\u201cthermal design point\u201d denotes the maximum allowable power dissipation for a device. It is a parameter used by system designers to determine strategies for removing heat;","\u201cdevice clock\u201d denotes a device-level clock generated by circuitry (e.g., a PLL) internal to a device, or a device-level clock generated externally to a device and asserted to a pin of the device. In preferred embodiments of the invention, each device clock of a device is responsive to device clock controls described herein;","\u201chost clock\u201d denotes the clock that controls a host slave unit. In preferred embodiments of the invention, each host clock of a device is responsive to host clock controls described herein; and","\u201csubsystem clock\u201d denotes a separately controllable branch of a device clock that terminates at a subsystem. Circuitry of the subsystem operates in response to the subsystem clock. In preferred embodiments of the invention, each subsystem clock of a device is responsive to subsystem clock controls described herein.","In a class of embodiments, the invention is a graphics processing device (an integrated circuit or portion of an integrated circuit) implementing a set of techniques for power management, preferably at both a subsystem level and a device level, and preferably including peak power management. Other aspects of the invention are a system including a graphics processing device that implements such a set of techniques for power management, and the power management methods themselves.","In preferred embodiments of the invention, hardware mechanisms automatically seek the lowest power state for the device that does not impact performance of the device or performance of a system that includes the device. Preferably, the hardware mechanisms disable generation of clocks that are not used by non-idle subsystems and prevent assertion of clocks to idle subsystems. In preferred embodiments of the inventive system, system software intervenes (to determine the power management mode of a graphics processing device) in cases in which the device does not have sufficient information to seek the most appropriate power state, and cases in which a user wishes to override the automatic mechanisms. For example, the system software can be implemented to give a user direct control over power management decisions from a dialog box of a displayed control panel. The user can use the control panel to override automatic mechanisms and choose a high-performance device state (with high power consumption) when playing a game to improve the user's graphics experience at the expense of power consumption. In response, system software must intervene to communicate the user's decision to the device.","The invention addresses six areas of power management: subsystem power management, device power management, peak power management, frame rate management, display interface frequency management, and backlight intensity management.","Subsystem power management focuses on individual subsystems of a graphics processing device, such as a graphics subsystem or an MPEG subsystem. Hardware mechanisms in the device automatically disable generation of clocks that are not used by non-idle subsystems and prevent assertion of clocks to idle subsystems, and optionally also perform other subsystem power management operations. In some implementations, external control of subsystem power management is sometimes necessary (e.g., when the automatic hardware mechanisms do not have sufficient information to seek the most appropriate power state, or when a user wishes to override the automatic mechanisms).","Device power management controls power consumption by a device at levels of broader scope than individual subsystems, such as by disabling generation of a device clock, preventing assertion of a device clock to any circuitry of the device, controlling device clock frequencies, and controlling voltage regulators employed to provide power to the entire device. Preferably, device power management is controlled by an entity (e.g., system software) external to the device, e.g., in response to changes in a system's pattern of using the device or in response to a system-level change in power state such as a change to battery use from A\/C power use.","Peak power management is preferably implemented entirely by automatic hardware mechanisms of a device in accordance with the invention. Peak power management in accordance with the invention is designed to artificially limit the peak power drawn by a device to a pre-determined thermal design point by dynamically lowering clock frequencies and\/or voltage when power consumption exceeds a threshold (preferably so as to optimize for real applications rather than contrived applications).","In accordance with frame rate management, a graphics processing device is configured to operate in a frame generation mode in which it generates frames of image data at a selected frame rate, where the selected frame rate is a selected one of a set of predetermined frame rates. Preferably, the predetermined frame rates include a maximum frame rate and a reduced frame rate, the device generates pixels of the image data at a first pixel rate when operating in the frame generation mode with the selected frame rate equal to the maximum frame rate, and the device generates pixels of the image data at the first pixel rate but with idle time between generation of at least two subsets of the pixels (e.g., between lines, blocks of lines, fields, or frames of the image data) when operating in the frame generation mode with the selected frame rate equal to the reduced frame rate.","In accordance with display interface frequency management, a system (including a graphics processing device and a liquid crystal display) is configured to operate in at least two modes: a mode in which the display is refreshed (by asserting a frame of image data to the display) at a normal rate, Rn (e.g., Rn=60 frames per second); and a second mode in which the display is updated at a reduced rate Rr (e.g., Rr=40 frames per second). It is especially desirable to implement the system with this capability where the cells of the display require a minimum time, T, to change state, where T is greater than (Rn)but less than (Rr).","In accordance with backlight intensity management, a system (including a graphics processing device and a backlit display) is configured to drive the display's backlight with any of at least two predetermined duty cycles (and preferably with any of a large number of predetermined duty cycles). The power consumption of the backlight (as well as the time-averaged brightness of the light emitted thereby) is reduced by reducing the duty cycle of the signal that provided power thereto.","An important benefit of the invention is reduction of power consumption within mobile computing systems, and the invention is also applicable to desktop systems seeking to manage peak power requirements. In preferred embodiments, the inventive device is operable in any selected one of several power management modes, and includes a register interface to which an external processor can write control bits to select among these modes.","With reference to , we describe a system that embodies the invention and that includes an embodiment of the inventive device (device  of FIG. ). Device  of  is a graphics chip (or graphics \u201ccore\u201d portion of a chip) coupled via system bus  to a computer system including CPU , memory input device , and display device . Device  is also coupled to external voltage regulator  which supplies power to device , by asserting supply voltage Vacross relevant portions of device . The connection between device and voltage regulator 's output is shown in a simplified manner in , to simplify the diagram.","The components of device  include host slave unit , host control bus host clock PLL  (which generates a host clock, and asserts the host clock to unit  and each of a set of multiplexers including multiplexers , , and ), device clock PLLs (including PLLs , , , each of which generates a different device clock and asserts the device clock to one of the multiplexers), subsystem clocks (including the subsystem clock asserted to one input of AND gate , the subsystem clock asserted to one input of AND gate , the subsystem clock asserted to one input of AND gate , and the subsystem clock asserted to one input of AND gate ), subsystems (including subsystems , , , and ), and control unit , connected as shown. The number of device clocks, subsystem clocks, and subsystems, and the relationships between the device clocks and subsystems is implementation-specific. Subsystems , , , and  include at least one graphics subsystem and an MPEG subsystem.","Host slave unit  (which can be an AGP interface) is the interface between system bus  and host control bus , and thus between subsystems , , , and  (connected along host control bus ) and CPU . The subsystems (including subsystems , , , and ) can be defined with very coarse granularity (e.g., subsystem  can be an entire 3D image data processing pipeline), or with finer granularity (e.g., subsystem  can be a setup unit within a 3D image data processing pipeline, and subsystem  can be another subsystem of the pipeline).","Host slave unit  uses host control bus  to access subsystem registers (within the subsystems) in response to slave transactions initiated by CPU . These slave transactions are always allowed to complete successfully, regardless of the state of the power management control registers of the relevant one (or ones) of the subsystems. In other words, a clock must be provided for each subsystem even when the subsystem's device clock (the device clock determining the subsystem's subsystem clock) has been disabled to reduce power consumption, if necessary to implement a slave transaction. In one embodiment, this is accomplished as follows using multiplexers , , and . The host clock generated by PLL  (which controls host slave unit ) is asserted to one input of each of multiplexers , , and . In response to one or more control signals asserted by control unit , multiplexer  selects the host clock (and deselects the output of PLL ) when control unit  disables PLL , multiplexer  selects the host clock (and deselects the output of PLL ) when control unit  disables PLL , and multiplexer  selects the host clock (and deselects the output of PLL ) when control unit  disables PLL . Control unit  also asserts the appropriate control bits to AND gates , , , , , , and  to ensure that each of subsystems receives receive a toggling clock (either the host clock, or a subsystem clock determined by the output of one of PLLs , , and ) so that each of the subsystems can respond to host slave transactions even when device  is in a reduced-power state (with one or more of PLLs , , and  disabled).","At least one subsystem clock determined by each of the device clocks generated by circuits , , and  is asserted to each of at least one of the subsystems. Specifically, a first subsystem clock (determined by the device clock output from PLL ) is asserted through multiplexer , AND gate , and AND gate  to subsystem , a second subsystem clock (also determined by the device clock output from PLL ) is asserted through multiplexer , AND gate , and AND gate  to subsystem , a third device clock (determined by the device clock output from PLL ) is asserted through multiplexer , AND gate , and AND gate  to subsystem , and a fourth device clock (determined by the device clock output from PLL ) is asserted through multiplexer , AND gate , and AND gate  to subsystem .","Each branch of a device clock tree that can be separately disabled by control unit  (and the clock asserted through such branch) is referred to as a subsystem clock. For example, the first subsystem clock is asserted through the branch from AND gate  through AND gate  to subsystem , and the second subsystem clock is asserted through the branch from AND gate  through AND gate  to subsystem . Circuitry within subsystem  operates in response to the first subsystem clock, and circuitry within subsystem  operates in response to the second subsystem clock. Control unit  asserts a control signal (indicative of a logical zero) to AND gate  and another control signal (indicative of a logical one) to AND gate  to enable the second subsystem clock and disable the first subsystem clock. In general, one or more subsystem clocks control each subsystem. Subsystem clocks are typically not shared by subsystems, although it is contemplated that they are so shared in some embodiments of the invention.","Control unit  can also assert a control signal (indicative of a logical one or zero) to each of AND gates , , and  to enable or disable each device clock (in the sense of allowing each device clock to be asserted, or preventing each device clock from being asserted, to the relevant subsystem or subsystems). For example, unit  asserts a control signal (indicative of a logical one) to AND gate  and control signals (indicative of logical zeroes) to AND gates  and  to enable one device clock (the device clock generated by PLL ) and disable the device clocks generated by PLLs  and . Control unit  can also assert a control signal to each of the clock generation PLLs (e.g., PLL , PLL , PLL , and PLL ) to enable or disable generation of each device clock. Power consumption by subsystems  and  (and thus by device ) would decrease in response to assertion of a control signal indicative of a logical zero to AND gate  (although PLL  would continue to consume power in this case while it continues to generate a device clock), and power consumption by device  could then be further decreased by asserting another control signal (from control unit ) to PLL  to cause PLL  to cease generation of a device clock.","In operation of device , each of the subsystems (including subsystems , , and ) asserts a status signal to control unit . For example, each status signal is a single bit indicative of whether the subsystem is or is not idle. In one mode of operation, control unit  asserts control signals to elements -, , , , , , , and  in response to the status signals. For example, control unit  can be implemented to respond (when operating in this mode) to a status signal indicating that subsystem  is idle by asserting to PLL  a control signal causing PLL  to cease generation of a device clock for subsystem . For another example, control unit  can be implemented to respond (when operating in this mode) to status signals indicating that only subsystem  is idle, by asserting a control signal indicative of a logical zero to AND gate , asserting control signals indicative of logical ones to the other AND gates, and allowing all of PLLs - to generate clocks.","As described above, a primary function of control unit  is to control the clock distribution circuitry of device . For illustrative purposes,  shows a simplified clock distribution scheme (levels of buffering are omitted for simplicity); however, the clock hierarchy is accurately represented. Control unit is configured to control each device clock tree at any or all of three levels in the hierarchy- at the device clock's origin (e.g., PLL , PLL , or PLL ), at the root of the tree (e.g., at AND gate , , or ), and at each branch of the tree that controls a subsystem (e.g., at AND gate , , , or ). In addition to controlling the distribution and generation of device 's clocks, control unit controls external voltage regulator  to determine the supply voltage applied across device  by regulator . Control unit  is preferably implemented to support multiple set points (i.e., supply voltages) for voltage regulator . In typical implementations, control unit  asserts control signals to voltage regulator  (to determine different ones of the set points) in response to control signals asserted from CPU  to control unit  (in response to commands entered by user manipulation of input device ) via system bus  and host slave unit . Thus, the user can cause the system software to implement a user-specified trade-off between device performance and power consumption.","Consistent with the definition set forth above, the term \u201csubsystem\u201d is used herein to denote a block of physically related circuitry, the registers (and other clocked circuitry) of which are physically resident on the same controllable branch of a clock tree, such that assertion of the clock to the subsystem can be disabled in its entirety without affecting assertion of clocks to other circuitry of the device (circuitry other than the subsystem). While it is necessary only that the circuitry of each subsystem is physically related by the clock tree, it is common and convenient for the circuitry of each subsystem to be logically related as well.","The vast majority of the power consumed by a typical graphics processor is consumed as a consequence of the toggling of clocks. The  embodiment of the invention independently manages power consumption by each of its subsystems by matching each clock's operation with the necessity for its operation. Thus, if a subsystem is idle and thus does not require a clock to toggle its circuitry, assertion of the clock is disabled to reduce power consumption.","To determine the necessity for generating and asserting each clock of device , it is necessary to consider the two classes of registers that rely on these clocks: host registers and non-host registers. A typical subsystem of device  contains both host and non-host registers. Host registers are accessible via host slave unit  and host control bus  as a consequence of slave accesses to device  by CPU . Host registers are used for configuration management and are accessed relatively infrequently. Non-host registers are not accessible via host slave unit . Non-host registers of a subsystem are used during the subsystem's normal operation rather than for configuration management, and typically have a much higher access frequency than host registers.","In order to avoid requiring system software to query the power management state of device  before accessing a host register within any of the subsystems of device , preferred embodiments of the invention require each subsystem to respond properly to slave accesses (by CPU , via host slave unit and host control bus ) regardless of the power management state of the subsystem and of device . Since response to each such access typically requires that the target subsystem operate in response to a clock, device  is configured to provide an appropriate clock to the target subsystem even when device  is in a reduced-power state in which a subsystem clock is not asserted to the target subsystem. This can be accomplished (as described above) by configuring control unit  to cause multiplexers (e.g., multiplexers , , and  of ) and other logic circuitry (e.g., relevant ones of AND gates , , , , , , and ) to assert a host clock (e.g., the host clock generated by host clock PLL ) to each subsystem at times when no subsystem clock is asserted to the subsystem. In variations on the described implementation, when the system requires that a target subsystem respond to a slave access at a time when the subsystem clock (for the target subsystem) has been disabled, control unit  causes temporary assertion of the host clock (or the subsystem clock for the target subsystem) to the target subsystem but only for a limited time as necessary to allow a proper response to the slave access.","Preferably, control unit  can be configured by CPU  (programmed with system software) to operate in any selected one of a number of different power management modes for controlling power consumption for each subsystem. For example, in a class of embodiments, register array A of control unit  (or other circuitry of device  that is accessible by control unit ) includes a two-bit host register (called a \u201cPM_SUBSYSTEM_CONTROL\u201d register) for each of subsystems , , , and . System software can write a two-bit word to each \u201cPM_SUBSYSTEM_CONTROL\u201d register to indicate the power management mode for the corresponding subsystem. For convenience, the PM_SUBSYSTEM_CONTROL registers for all the subsystems can be aggregated into a physically contiguous array of registers or a single larger register (e.g., a 32-bit register of array A, when device  includes fifteen or sixteen subsystems). Control unit  decodes the two-bit word in each PM_SUBSYSTEM_CONTROL register as follows:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Name of",{}]},{"entry":["Value","Mode","Definition of Mode"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","FULLPOWER","No power management is performed on the"]},{"entry":[{},{},"subsystem. FULLPOWER mode would typically"]},{"entry":[{},{},"be used only for device characterization and"]},{"entry":[{},{},"would typically not be used during normal device"]},{"entry":[{},{},"operation. AUTOMATIC mode would generally"]},{"entry":[{},{},"be used during normal device operation."]},{"entry":[{},{},"FULLPOWER is typically the default setting for"]},{"entry":[{},{},"each subsystem."]},{"entry":["1","AUTOMATIC","Control unit 12 automatically performs power"]},{"entry":[{},{},"management on the subsystem with no system"]},{"entry":[{},{},"software intervention. The subsystem's subsystem"]},{"entry":[{},{},"clocks are disabled automatically when doing so"]},{"entry":[{},{},"will not affect the proper behavior or performance"]},{"entry":[{},{},"of the subsystem. Access to host registers is"]},{"entry":[{},{},"unaffected."]},{"entry":["2","SUSPENDED","All of the subsystem's subsystem clocks are"]},{"entry":[{},{},"disabled. Access to host registers is unaffected."]},{"entry":["3","RESERVED","Results are undefined. System software should"]},{"entry":[{},{},"not use this value."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Preferably, each subsystem is designed so as to be operable efficiently when controlled in the AUTOMATIC mode in an efficient manner, so that system software never needs to require that it be controlled in the SUSPENDED mode. The SUSPENDED mode is a concession that this goal may not always be achievable. So that system software can determine whether it must be involved in the subsystem's power management (by triggering SUSPENDED mode control of the subsystem at appropriate times), the system software must be aware of the quality of each subsystem's operation in response to AUTOMATIC mode control.","We next describe in more detail the device-level power management techniques employed by preferred implementations of the  system. The inventive device-level power management techniques fall into six categories: device clock management, host clock management, dynamic core voltage (and device clock frequency) management, frame rate management, display interface frequency management, and backlight intensity management.","We first consider frame rate management, which is both a device-level power management technique and a system-level power management technique. The power consumed by the inventive device (e.g., device ) and a system including the inventive device (e.g., the  system) can be controlled by limiting the frame rate (the rate at which the device renders frames of video data and outputs the rendered frames for display). In accordance with the invention, a device (and a system including the device) are implemented to operate at a frame rate selected by a user (using hardware or software control) from a number of available frame rates (the number being greater than one). For example, in cases in which device  of  is a graphics processor configurable via driver software (assuming CPU  and device  are programmed with such driver software) implementing the DD or OpenGL application programming interface (or other application programming interface), the driver software is implemented in accordance with the invention to include a user interface that allows a user to select one of several frame rates. In response, both CPU  and graphics processor (\u201cGPU\u201d)  of the system operate at the frame rate selected by the user. By selecting a lower frame rate, the user causes the GPU and CPU to consume less power during operation than they would if the user had selected operation at a higher frame rate. Preferably, the user interface allows the user to select operation at an arbitrary number of frames per second (within some predetermined range), or at any of a set of predetermined frame rates (e.g., at any of 120, 40, and 30 fps, or either of 120 and 40 fps, or either of and 30 fps). In cases in which the system is a battery-powered notebook computer, and the user selects a frame rate at which the system will execute a game program, the invention would allow the user to postpone the recharging or replacement of the battery while also specifying a playable frame rate.","Consider an implementation of the  system that is programmed and otherwise configured to run a game program at a maximum frame rate of  frames per second (\u201cfps\u201d). During operation at the maximum frame rate, graphics processor (\u201cGPU\u201d)  and CPU  would consume maximum power to render frames at the rate of 120 fps and cause the frames to be displayed on display device . Preferably, CPU  and GPU  are programmed in accordance with the invention with driver software allowing a user to enter a command (by manipulating input device ) that causes CPU  and GPU  to run the game program at a maximum frame rate of 60 fps (or 30 fps or 40 fps), and thus to consume less than the maximum power while running the game program. For example, the driver software can cause CPU  and GPU  to respond to the command by entering a mode in which GPU  generates (and asserts to display device ) lines of video data (and the pixels in each line) at the same rate as when the system runs the game at 120 fps (i.e., each clock of the system has the same frequency as during execution of the game at 120 fps), but with lengthened vertical blanking intervals (between assertion of the last pixel of each field or frame and assertion of the first pixel of the next field or frame of the video data) thereby generating frames of the video data at the selected, reduced frame rate (e.g., 60 fps, 40 fps, or 30 fps). Thus, when operating at a reduced frame rate of 30 fps (where the maximum frame rate is 60 fps) GPU  could enter an active state for T seconds (where T=1\/60) during which it generates a frame of data, then enter an idle state for T seconds, then enter an active state for T seconds to generate the next frame of data, and then enter another idle state for T seconds, and so on.","More generally, the driver software causes CPU  and GPU  to respond to a command to run a game program at a reduced frame rate (e.g., 60 fps, 30 fps, or 40 fps) by entering a mode in which GPU  generates (and asserts to display device ) pixels of video data at the same pixel rate as when the system runs the game at the maximum frame rate (e.g., 120 fps) in the sense that each clock of the system has the same frequency during execution of the game at 120 fps as during execution of the gate at the reduced frame rate, but with idle intervals between assertion of subsets of the pixels (e.g., between lines, blocks of lines, fields, or frames of the data), thereby generating frames of the video data at the selected, reduced frame rate (e.g., 60 fps, 40 fps, or 30 fps). During each idle interval (e.g., each lengthened vertical blanking interval), GPU  consumes very low power (e.g., it is idle, and consumes only the small amount of power needed for logic circuitry to count to the end of the idle interval and trigger the rendering of the next subset of the data).","In variations on the described embodiment, the user selects the frame rate (at which the system operates while executing a game program) using hardware rather than software, such as by actuating one or more switches.","Another device-level power management technique is device clock control. As previously described, device clocks have a more global scope than subsystem clocks. A device clock originates at the root of a clock tree (typically a PLL, such as PLL , , or  of ) and extends to the flip-flops that it services (e.g., flip-flops in the relevant one or ones of subsystems , , , and ). For control of a device clock, a device typically includes one or more of the following features: device clock generation circuitry (e.g., PLL ) that is controllable in response to a status signal from each relevant subsystem), a multiplexer (e.g., multiplexer ) that is controllable to allow the host clock to be selected onto the clock tree (in substitution for the device clock), a buffer tree to distribute the device clock to the relevant subsystems, and one or more subsystem clocks, each of which is a branch of the device clock extending to the clock-driven circuitry (e.g., flip-flops) of at least one of the subsystems.","Even when a subsystem clock is disabled through subsystem power management (e.g., by assertion of a control signal indicative of a logical zero to AND gate ), a device clock can still consume power through its device clock generation circuitry and through the portion of the device clock tree up to the branches of the tree at which the subsystem clock originates.","Preferably, system software (i.e., CPU , programmed with system software) configures control unit  to operate in any selected one of a number of different device-level power management modes for controlling each device clock. For example, in a class of embodiments, register array A of control unit  (or other circuitry of device  that is accessible by control unit ) includes a four-bit host register (called a \u201cPM_DEVICE_CONTROL\u201d register) for each device clock generation circuit (e.g., each of PLLs , , and ). System software can write a four-bit word to each \u201cPM_DEVICE_CONTROL\u201d register to indicate one of three power management modes for controlling the corresponding device clock (a mode in which the device clock generation circuit is powered-on and driving its clock tree, a second mode in which the device clock generation circuit is powered-on yet unused in its clock tree in deference to the host clock, and a third mode in which the device clock generation circuit is powered-down and unused in its clock tree in deference to the host clock). For convenience, the PM_DEVICE_CONTROL registers for all device clocks can be aggregated into a physically contiguous array of registers or a single larger register (e.g., a 32-bit register, when device  includes five device clock generation PLLs). Control unit  decodes the four-bit word in each PM_DEVICE_CONTROL register as follows:",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Value","Name of Mode","Definition of Mode"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","DCFULLPOWER","No power management is performed on the"]},{"entry":[{},{},"device clock. The device clock generation"]},{"entry":[{},{},"circuit (if present) is enabled and driving the"]},{"entry":[{},{},"clock tree. DCFULLPOWER is typically the"]},{"entry":[{},{},"default setting for each device clock."]},{"entry":["1","BYPASS","The device clock generation circuit (if present)"]},{"entry":[{},{},"is enabled, but the host clock is selected to"]},{"entry":[{},{},"drive the device clock's clock tree."]},{"entry":["2","RESERVED","Results are device-specific."]},{"entry":["3","DCSUSPENDED","The device clock generation circuit (if present)"]},{"entry":[{},{},"is disabled, and the host clock is selected to"]},{"entry":[{},{},"drive the device clock's clock tree."]},{"entry":["4-F","RESERVED","Results are device-specific."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In a variation on the described BYPASS mode, control unit  is configured to enable the device clock generation circuit (if present) and to select the device clock to drive the device clock tree when status signals (from the relevant ones of the subsystems) indicate that at least one subsystem (containing circuitry to be driven by the device clock, or a subsystem clock derived from the device clock) is not idle, and otherwise to enable the device clock generation circuit and select the host clock to drive the device clock tree.","Another device-level power management technique is host clock management. In conventional laptop computer systems that include a graphics device, the graphics device typically has a hardware \u201csuspend\u201d pin, to which the CPU (or other system element) can assert a control signal which guarantees to the graphics device that its services are not required and that it can completely power-down with no adverse affects. Without such a guarantee, there is typically no mechanism for the graphics device to determine when it can safely power-down. For example, since the device's host slave unit and any registers available across the host control bus must remain available at all times absent a guarantee from the system that they are not needed, the device cannot safely power-down its circuitry for responding to a slave access until the hardware suspend pin is asserted.","The system of  implements host clock management without the need for graphics device  to have a dedicated hardware suspend pin. Rather, control unit  is preferably configurable, in response to bits written by CPU  (programmed with system software) in the following manner to registers of device , to operate in any selected one of at least two different host clock management modes. For example, in a class of embodiments, register array A of control unit  (or other circuitry in device  that is accessible by control unit ) includes at least one register (e.g., an eight-bit host register called a \u201cPM_HOST_CONTROL\u201d register) to which system software can write control bits (via host slave unit  and host control bus ) to indicate the host clock management mode. In implementations in which such host register is an eight-bit \u201cPM_HOST_CONTROL\u201d register, control unit  decodes the eight-bit word in the PM_HOST_CONTROL register as follows:",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Value","Name of Mode","Definition of Mode"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","HCFULLPOWER","No power management is performed on the"]},{"entry":[{},{},"host clock. The host clock generation circuitry"]},{"entry":[{},{},"(if present) is enabled and driving the host"]},{"entry":[{},{},"clock tree. HCFULLPOWER is typically the"]},{"entry":[{},{},"default setting."]},{"entry":["1-6","RESERVED","Results are device-specific."]},{"entry":["7","HCSUSPENDED","All of the circuitry for generating device clocks"]},{"entry":[{},{},"is disabled (i.e. all device clock trees are"]},{"entry":[{},{},"disabled at their roots) and the circuitry for"]},{"entry":[{},{},"generating the host clock is also disabled (i.e."]},{"entry":[{},{},"the host clock tree is disabled at its root). The"]},{"entry":[{},{},"device's control unit (e.g., control unit 12) is"]},{"entry":[{},{},"optionally configured to shut off (or decouple"]},{"entry":[{},{},"from the device) the power source (or any"]},{"entry":[{},{},"sources of static power) for the device upon"]},{"entry":[{},{},"entry into the \u201cSuspended\u201d mode. Shutting off"]},{"entry":[{},{},"the device's power supply or decoupling it"]},{"entry":[{},{},"from the device will of course cause all device"]},{"entry":[{},{},"state to be lost."]},{"entry":["8-FF","RESERVED","Results are device-specific."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":"Bits 31:8 are device-specific. These bits should be set to ZERO except for a device-specific purpose. "}]}}}}},"In implementing host clock management or device clock control, each host clock generation circuit and device clock generation circuit should be powered up and powered down appropriately. Because clock generation PLLs (in a graphics processing device) take time to acquire their set frequency and in order to avoid glitches or runt pulses on the clock waveforms generated by such PLLs, it is important to power-up and power-down such PLLs in a preferred sequence when altering the power management state of one or more device clocks or the host clock in accordance with the invention. The preferred sequence for powering-down a device clock PLL (in an implementation of device  of  including the above-mentioned PM_DEVICE_CONTROL registers) is as follows:","the initial state of control unit  is the DCFULLPOWER mode;","then, write control bits to the relevant PM_DEVICE_CONTROL register to cause control unit  to enter the BYPASS mode;","then, read the relevant PM_DEVICE_CONTROL register to ensure that the previous write has had sufficient time to take effect, e.g., ensuring that the relevant device clock tree (including the relevant one of multiplexers , , and ) has properly switched to the host clock; and","then, write control bits to the relevant PM_DEVICE_CONTROL register to cause control unit  to enter the DCSUSPENDED mode (in which it disables the relevant device clock generation PLL, while continuing to assert the host clock to drive the relevant device clock tree).","The preferred sequence for powering-up a device clock PLL (in an implementation of device  of  including the above-mentioned PM_DEVICE_CONTROL registers) is as follows:","the initial state of control unit  is the DCSUSPENDED mode;","then, write control bits to the relevant PM_DEVICE_CONTROL register to cause control unit  to enter the BYPASS mode;","then wait for the relevant device clock generation PLL to power-up and lock (the lock time is device-specific); and","then, write control bits to the relevant PM_DEVICE_CONTROL register to cause control unit  to enter the DCFULLPOWER mode.","The power-up and power-down sequences for the host clock generation circuit (e.g., PLL  of ) are preferably managed by hardware mechanisms in response to the writing of appropriate control bits to the PM_HOST_CONTROL register (to cause control unit  to enter the HCFULLPOWER and HCSUSPENDED mode respectively). The system should be implemented so as not to attempt to access the device (e.g., device ) across the system bus until the host clock generation circuit (e.g., PLL ) has had sufficient time to lock after the appropriate control bits are written to device  to cause power-up of said host clock generation circuit.","Other device-level power management techniques are dynamic supply voltage management and device clock frequency management. To implement supply voltage management, control unit  of device  is implemented to control external voltage regulator  as described above. Typically, control unit asserts a control signal to voltage regulator  (to select one of the available set points of regulator ) in response to a control signal asserted to control unit from CPU  (via system bus , host slave unit , and host control bus ). Thus, a user can cause the system software to implement a user-specified trade-off between device performance and power consumption. For example, if coarse granularity of the supply voltage is sufficient, device  and regulator  can be implemented to support just three voltage levels: a nominal-voltage level (e.g., volts), a low-voltage level (e.g., 1.0 volt), and a high-voltage (high-performance) level (e.g., 1.5 volts). Preferably, no device state is lost when device  operates at any of the available voltage settings. Optionally, control unit  and regulator  are implemented so that system software can cause control unit  to disable device 's power supply entirely (or system software can directly disable device 's power supply) when device  enters a \u201csuspended\u201d state, in which case device  will lose its state.","Each device that embodies the invention will have a maximum clock frequency for each supported voltage level for each device clock. System software must respect these limits whenever causing a change in the supply voltage level for the device. Typically, when transitioning from a higher supply voltage to a lower supply voltage, the device clock (and host clock) frequencies should be adjusted downward and the clock generation circuitry should be given adequate time to lock to the new frequencies before the voltage is actually changed. Typically, when transitioning from a lower voltage to a higher voltage, the device clock (and host clock) frequencies should be adjusted upward after the voltage has been changed.","In a preferred implementation, a host register in control unit  (e.g., a 32-bit register known as a \u201cPM_CORE_VOLTAGE_CONTROL\u201d register) determines the control signals asserted by control unit  to control the voltage level of regulator . The mappings from the value in that register to one of the available voltage levels and the associated device clock (and host clock) frequencies are device-specific.","Another of the power management techniques implemented in preferred embodiments of the invention is peak power management. System designers must consider the maximum power dissipation of each device to determine an appropriate strategy for heat removal. Space considerations for mobile computing systems limit the options for heat removal. Conventionally, determination of the maximum power dissipation for a device requires finding or writing a worst-case software application. Unfortunately, such an application is often contrived and can dissipate considerably more power than the worst likely (or \u201creal\u201d) application. However, although the application is contrived, the system's thermal design must still respect it.","Preferably, peak power management in accordance with the invention is designed to artificially limit the peak power drawn by a device to a pre-determined thermal design point by dynamically lowering device clock (and host clock) frequencies and\/or reducing the supply voltage in the event that power dissipation by a device rises beyond a predetermined threshold. For example, the threshold can be set to correspond (at least approximately) to the power dissipation in the worst \u201creal\u201d application, Alternatively, for systems with more stringent thermal requirements, the threshold can be a lower level of power dissipation.","Preferably, a system including a graphics processing device (e.g., device  of ) and a liquid crystal display (a liquid crystal display implementation of display  of ) implements display interface frequency management in accordance with the invention as follows. The system is configured to operate in at least two modes: a mode in which the display is refreshed (by asserting a frame of image data to the display) at a normal rate, Rn (e.g., Rn=60 frames per second); and a second mode in which the display is updated at a reduced rate Rr (e.g., Rr=40 frames per second). It is especially desirable to implement the system with this capability where the cells of the display require a minimum time, T, to change state, where T is greater than (Rn)but less than (Rr).","Preferably, a system including a graphics processing device (e.g., device  of ) and a backlit display (an implementation of display  of  including a backlight and circuitry for providing power to the backlight in response to control signals from at least one of CPU  and GPU ) implements backlight intensity management in accordance with the invention as follows. The system is configured to drive the display's backlight with any of at least two predetermined duty cycles (and preferably with any of a large number of predetermined duty cycles). The power consumption of the backlight (as well as the time-averaged brightness of the light emitted thereby) is reduced by reducing the duty cycle of the signal that provided power thereto.","Other power management techniques that can be implemented in some embodiments of the invention include:","1. fine-grained automatic clock gating. As described above, clock gating (i.e., control of the circuitry to which device clocks or subsystem clocks are asserted, e.g. using AND gates , , , , , , and  of ) is one of the primary techniques used in accordance with the invention to manage power. In the embodiments described above, the subsystem level (selective assertion of subsystem clocks) is the lowest level of granularity for clock gating. However, in other embodiments, significant savings, both in peak power and in average power, can be achieved by gating clocks at a finer granularity (i.e., at a level below the subsystem level). For example, a typical subsystem of a device has many load-enable flip-flops. Where multiple flip-flops share the same load-enable, in a data path for example, gating the clock with the load-enable to a bank of registers (independently of gating each subsystem clock asserted to other circuitry of the subsystem) can reduce the average power consumption of the subsystem (below the average power consumption achievable with subsystem level clock gating);","2. Synthesis optimizations. There are several classes of optimizations available during the process of designing a device (e.g., during the synthesis process or during the RTL development process) that can yield lower-power equivalent implementations of a device. Two such classes of optimization are gate-level optimization and operand isolation. Gate-level optimization denotes the rearrangement of logic to reduce the overall amount of switching that occurs during operation of the device. Operand isolation denotes the prevention of switching of operands when they are not in use, and is a technique that can be particularly effective in a data path design;","3. Use of low-power flip-flops in a device. It has been estimated that approximately 50% of the power consumption of a typical class of graphics chips occurs in the clock tree. By replacing all flip-flops of a device whose timing is not critical, with low-power (lower-performance) flip-flops during the physical design process, a significant power savings can be realized;","4. Leakage current in deep sub-micron technology. As devices are implemented with reduced size, leakage currents will increase dramatically. For example, leakage currents in 0.13 \u03bcm technology are typically as much as ten times those occurring with 0.15 \u03bcm technology. Leakage current is particularly significant during a very low power consumption mode (e.g., a suspend mode) of a device (e.g., a device included in a laptop computer system), if the system including the device does not entirely disable the power to the device during such mode. Thus, it may be desirable to design and implement a device to have reduced leakage current, especially if it is expected that power to the device will not be entirely disabled during suspend mode operation.","In order to illustrate advantages attainable by implementing the invention, the following section describes a typical usage pattern of a laptop computer that embodies the invention, highlighting the relationship between the modes of use and the state of the power management system. The example will consider a series of activities starting with a marketing manager preparing a PowerPoint presentation (consuming power equal to 1.5 watts), then playing a video game (consuming power equal to 3 watts), reengaging with PowerPoint (1.5 watt consumption), then leaving the screen idle (consuming power equal to 0.5 watt) until the laptop blacks the screen and enters a suspend state (consuming no more than an insignificant amount of power).","Since the hardware architecture of the inventive device and system (e.g., those embodiments described herein with reference to ) does not dictate the relationship between system activity and device power management, system software is free to define those relationships as it sees fit. The following example assumes one possible mapping between system activity and the functionality of a device implementing the invention. It should be appreciated that other mappings are possible at the discretion of system software.","In order to appreciate the benefit from the various power savings techniques implemented in accordance with the invention, it is important to understand the parameters that contribute to power consumption. A simple model of power consumption, sufficient for purposes of this example, is given by the following equation:\n\n\n\nwhere\n\n","The capacitance C is invariant for any specific implementation, leaving voltage and clock frequency as the parameters to be optimized in accordance with the invention.","The above-mentioned example illustrates how the these parameters are optimized in accordance with the invention to fit the system's mode of operation. While the marketing manager is preparing his PowerPoint presentation, the graphics device of his computer system is in its normal operating state: the voltage and clock frequencies are set to their nominal levels, the device is managing the subsystem clock enables for the subsystems of the device (based on the activity of each subsystem), and all clocks are enabled. Typically, the graphics device would have five or more device clocks\u2014a core clock, a memory clock, video clocks for two heads, and a TV clock. In the example, the core clock, memory clock, and first head's video clock are certainly enabled during preparation of the PowerPoint presentation, although it is likely that the second head's video clock and the TV clock are disabled because their corresponding subsystems are not in use. Furthermore, those clocks that are enabled at the device level will be disabled at the subsystem level when not in use. For example, while the marketing manager is considering what his next slide should portray, thus leaving the graphics subsystem temporarily idle, the subsystem clock for the graphics subsystem will automatically be disabled to reduce power consumption.","When the marketing manager launches into the video game, the device is placed into its high-performance mode: the voltage V applied across the device core is raised to its high-performance level and the core clock frequency is increased accordingly (a higher core voltage allows a higher core clock frequency). Upon exiting the video game, the core voltage and core clock frequency revert back to their nominal levels.","When the manager stops work, leaving the system's screen idle, the device enters a low-power state by reducing the core voltage and lowering the core clock and memory clock frequencies accordingly. Finally, the system goes into a suspend mode, which disables all clocks (except the host clock, ensuring that the device can still respond to requests from the system using circuitry clocked by the host clock). Ultimately, when system software causes assertion of an appropriate signal to one or more host registers of the device (or assertion of a signal to a hardware suspend pin of the device), the host clock and any sources of static power are disabled so that the entire device is quiescent.","This simple example has included many of the dynamic power management techniques available through the inventive architecture. For example, in the example, the device automatically manages subsystem level clocking to match activity of each subsystem, system software manages clock frequencies and voltage levels to match application requirements, and all significant power consumption mechanisms, including generation of the host clock, can be shut off when the system enters a deep suspend state.","It should be understood that while certain forms of the invention have been illustrated and described herein, the invention is not to be limited to the specific embodiments described and shown or the specific methods described."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWING","p":{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1"}},"DETDESC":[{},{}]}
