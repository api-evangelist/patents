---
title: Accept and receive enhancements
abstract: A server issues an enhanced accept and receive call to a client computer. The enhanced accept and receive call requires the server to subsequently receive a block of data from the client computer in order to establish a session connection between the client computer and a server resource. In response to the block of data from the client computer failing to be received by the server, the server prevents the session connection from being pushed onto an accept queue on the server until the server executes a corrective process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08230078&OS=08230078&RS=08230078
owner: International Business Machines Corporation
number: 08230078
owner_city: Armonk
owner_country: US
publication_date: 20090818
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure relates to the field of computers, and specifically to networked computers. Still more particularly, the present disclosure relates to establishing communication sessions between computers.","A server issues an enhanced accept and receive call to a client computer. The enhanced accept and receive call requires the server to subsequently receive a block of data from the client computer in order to establish a session connection between the client computer and a server resource. In response to the block of data from the client computer failing to be received by the server, the server prevents the session connection from being pushed onto an accept queue on the server until the server executes a corrective process.","As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method, or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer-usable program code embodied in the medium.","Any combination of one or more computer readable medium(s) may be utilized. The computer-readable medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus or device. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a portable compact disc read-only memory (CD-ROM), an optical storage device, or a magnetic storage device. In the context of this document, a computer-readable medium may be any medium that can store the program for use by or in connection with the instruction execution system, apparatus, or device.","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java (JAVA is a registered trademark of Sun Microsystems, Inc. in the United States and other countries), Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The present invention is described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","With reference now to the figures, and in particular to , there is depicted a block diagram of an exemplary server , which depicts one example of an appropriately configured hardware device that may be utilized by the present invention. Note that some or all of the exemplary architecture, including both depicted hardware and software, shown for and within server  may be utilized by software deploying server  and\/or client computer(s) .","Server  includes a processor unit  that is coupled to a system bus . Processor unit  may utilize one or more processors, each of which has one or more processor cores. A video adapter  drives\/supports a display , which is an output display that is also coupled to system bus . In one embodiment, a switch  couples the video adapter  to the system bus . Alternatively, the switch  may couple the video adapter  to the display . In either embodiment, the switch  is a switch, preferably mechanical, that allows the display  to be coupled to the system bus , and thus to be functional only upon execution of instructions (e.g., enhanced accept and receive logic\u2014EANRL  described below) that support the processes described herein.","System bus  is coupled via a bus bridge  to an input\/output (I\/O) bus . An I\/O interface  is coupled to I\/O bus . I\/O interface  affords communication with various I\/O devices, including a keyboard , a mouse , a media tray  (which may include storage devices such as CD-ROM drives, multi-media interfaces, etc.), a printer , and (if a VHDL chip  is not utilized in a manner described below) external USB port(s) . While the format of the ports connected to I\/O interface  may be any known to those skilled in the art of computer architecture, in a preferred embodiment some or all of these ports are universal serial bus (USB) ports.","As depicted, server  is able to communicate with a software deploying server  and\/or client computer(s)  via network  using a network interface . Network  may be an external network, wired or wireless, such as the Internet, or an internal network such as an Ethernet or a virtual private network (VPN).","A hard drive interface  is also coupled to system bus . Hard drive interface  interfaces with a hard drive . In a preferred embodiment, hard drive  populates a system memory , which is also coupled to system bus . System memory is defined as a lowest level of volatile memory in server . This volatile memory includes additional higher levels of volatile memory (not shown), including, but not limited to, cache memory, registers and buffers. Data that populates system memory  includes server 's operating system (OS)  and application programs .","OS  includes a shell , for providing transparent user access to resources such as application programs . Generally, shell  is a program that provides an interpreter and an interface between the user and the operating system. More specifically, shell  executes commands that are entered into a command line user interface or from a file. Thus, shell , also called a command processor, is generally the highest level of the operating system software hierarchy and serves as a command interpreter. The shell provides a system prompt, interprets commands entered by keyboard, mouse, or other user input media, and sends the interpreted command(s) to the appropriate lower levels of the operating system (e.g., a kernel ) for processing. Note that while shell  is a text-based, line-oriented user interface, the present invention will equally well support other user interface modes, such as graphical, voice, gestural, etc.","As depicted, OS  also includes kernel , which includes lower levels of functionality for OS , including providing essential services required by other parts of OS  and application programs , including memory management, process and task management, disk management, and mouse and keyboard management.","Application programs  include a renderer, shown in exemplary manner as a browser . Browser  includes program modules and instructions enabling a world wide web (WWW) client (i.e., server ) to send and receive network messages to the Internet using hypertext transfer protocol (HTTP) messaging, thus enabling communication with software deploying server  and other described computer systems.","The operating system  in server 's system memory also includes an enhanced accept and receive logic (EANRL) . EANRL  comprises an enhanced accept and receive application program interface (EANR API) , which provides an API for implementing the processes described below, including those described in . In one embodiment, server  is able to download EANRL  from software deploying server , including in an on-demand basis. Note further that, in one embodiment of the present invention, software deploying server  performs all of the functions associated with the present invention (including execution of EANRL ), thus freeing server  from having to use its own internal computing resources to execute EANRL .","Also stored in system memory  is a VHDL (VHSIC hardware description language) program . VHDL is an exemplary design-entry language for field programmable gate arrays (FPGAs), application specific integrated circuits (ASICs), and other similar electronic devices. In one embodiment, execution of instructions from EANRL  causes VHDL program  to configure VHDL chip , which may be an FPGA, ASIC, etc.","In another embodiment of the present invention, execution of instructions from EANRL  results in a utilization of VHDL program  to program a VHDL emulation chip . VHDL emulation chip  may incorporate a similar architecture as described above for VHDL chip . Once EANRL  and VHDL program  program VHDL emulation chip , VHDL emulation chip  performs, as hardware, some or all functions described by one or more executions of some or all of the instructions found in EANRL . That is, the VHDL emulation chip  is a hardware emulation of some or all of the software instructions found in EANRL . In one embodiment, VHDL emulation chip  is a programmable read only memory (PROM) that, once burned in accordance with instructions from EANRL  and VHDL program , is permanently transformed into a new circuitry that performs the functions needed to perform the process described below in .","The hardware elements depicted in server  are not intended to be exhaustive, but rather are representative to highlight essential components required by the present invention. For instance, server  may include alternate memory storage devices such as magnetic cassettes, digital versatile disks (DVDs), Bernoulli cartridges, and the like. These and other variations are intended to be within the spirit and scope of the present invention.","Referring now to , an exemplary overview of an environment in which EANRL  is utilized in one embodiment of the present invention is presented. Assume that a client  (e.g., one of the client computer(s)  shown in ) wants to initiate, via a socket , a session  for a resource  from a server  (e.g., server  shown in ). Resource  may be a software application, a link to a website, a hardware resource (e.g., storage memory, a printer, a network, etc.), or any other resource or service provided by the server . In order to establish session  with socket , the client  issues a connect call  to the server . The server , meanwhile, issues an enhanced accept and receive (EANR) call by invoking EANR API . If this were an ordinary ANR call instead of an EANR call, the connect would result in the accept message  being pushed onto an accept queue  on a transfer control protocol\/internet protocol (TCP\/IP) stack  before the first block of data has been received by the server.","However, if first block of data  should fail to be received by TCP\/IP stack , due to a malicious client , a break in the connection between client  and server , faulty bandwidth, software errors, etc., a normal ANR call would cause accept queue  and TCP\/IP stack  to lock up while accept queue  waits on first block of data  to arrive (which may never happen). To avoid this, EANR API  prevents the accept message  from being pushed onto the TCP\/IP stack  until the first block of data  actually arrives, or until some other corrective process (described below) is executed.","With reference now to , a high-level flow chart of an exemplary embodiment of the use of a novel enhanced accept and receive (EANR) application programming interface (API) call is presented. After initiator block , which may be prompted by a client computer connecting to a server, the EANR API is initiated (block ). If data from the client computer is promptly received by the server (query block ), then the connection is pushed onto the accept queue of the TCP\/IP stack of the server (block ). This permits the conclusion of a normal ANR call, resulting in the client computer being connected to the desired resource from the server (block ), and ending the process (terminator block ). However, if data is not promptly received from the client computer (query block ), then a corrective process in the form of a timer is started (block ). As soon as the data is received from the client computer or the timer expires (query block ), the connection is pushed onto the accept queue (block ). Thus, the accept queue is not touched until the EANR determines that the session is actually ready, either by a traditional receipt of data from the client computer, or by a timer expiring, thus overriding the ANR requirement that data be received from the client computer in order to complete the ANR call.","In one embodiment of the present invention, a security session and\/or an asynchronous session may be part of an ANR call. For example, assume that the cryptographic protocol application transparent transport layer security (AT-TLS) is used to provide security for communications between a client computer  and a server , as shown in . As depicted, AT-TLS is a unique usage of TLS on the operating system (OS) end of the session. Instead of having the application itself be TLS-capable and TLS-aware, the establishment of the TLS connection is pushed down the stack into the TCP layer. This permits applications on operating systems such as z\/OS to run without ever being aware that the connection is using TLS. Remote clients cannot distinguish between \u201cnormal\u201d TLS (where the application is doing the socket calls necessary for TLS) and AT-TLS (where the TCP layer handles the connection). As depicted in , the AT-TLS layer is implemented at a lower layer than the standard TLS. Because TCP\/IP is a layered protocol, the changes done at the TCP layer are hidden from the application layer. This allows AT-TLS to appear identical to normal TLS to any application connecting to the z\/OS host.","A concern associated with the use of AT-TLS is that AT-TLS can have a long handshake period before data is received by the server that, without the presently described enhancement to ANR API's, presents another roadblock to the server accepting the connection. That is, a traditional ANR will wait until AT-TLS completes handshaking between the client computer and the server, thus causing a stall in the TCP\/IP and accept queue of the server. In order to address this issue, the presently presented EANR requires the AT-TLS handshake to be completed and data to have arrived before the connection is placed on the accept queue in the TCP\/IP stack. A high-level flow-chart depicted in  presents a novel computer-implemented method for addressing this issue with the use of an EANR.","After initiator block , the EANR API is initiated (block ). After a connect request for a session is received from the client computer (block ), a query is made (query block ) as to whether the session will include the use of AT-TLS security protocol. If not, then the connection is pushed onto the accept queue (block ) in a manner described in . If AT-TLS security protocol is used, then AT-TLS security handshaking is initiated (block ). A timer is set at this point, in order to avoid the AT-TLS handshake from hanging up, thus resulting in a stall. As depicted in block , as soon as the handshaking is completed and client data has arrived (or the timer expires), then the connection is completed (block ), and the process ends (terminator block ). As described and depicted, the EANR session is not held up by the AT-TLS process, since the AT-TLS process is completed before the EANR session connectors are pushed onto the accept queue in the TCP\/IP stack on the server.","Thus, as described herein, in one embodiment of the present disclosure the server may issue an asynchronous version of the EANR API call. In this scenario, the flows depicted in  (non-AT-TLS) or  (AT-TLS) would occur before the TCP stack would signal the server that the asynchronous processing can be completed.","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of various embodiments of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","Note further that any methods described in the present disclosure may be implemented through the use of a VHDL (VHSIC Hardware Description Language) program and a VHDL chip. VHDL is an exemplary design-entry language for Field Programmable Gate Arrays (FPGAs), Application Specific Integrated Circuits (ASICs), and other similar electronic devices. Thus, any software-implemented method described herein may be emulated by a hardware-based VHDL program, which is then applied to a VHDL chip, such as a FPGA.","Having thus described embodiments of the invention of the present application in detail and by reference to illustrative embodiments thereof, it will be apparent that modifications and variations are possible without departing from the scope of the invention defined in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
