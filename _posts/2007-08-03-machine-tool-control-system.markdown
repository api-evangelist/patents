---
title: Machine tool control system
abstract: The present disclosure includes a generalized kinematics library which may be used to control the motion of a machine tool system and to process data for other applications, such as simulation graphics. Methods are disclosed to interpolate the movement of various axes of a machine tool system through a machine singularity point.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08024068&OS=08024068&RS=08024068
owner: Hurco Companies, Inc.
number: 08024068
owner_city: Indianapolis
owner_country: US
publication_date: 20070803
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND AND SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60\/821,523, filed Aug. 4, 2006, titled \u201cKINEMATICS COMPENSATION OBJECT ORIENTED SYSTEM AND METHOD FOR MACHINE TOOL CONTROL\u201d, and U.S. Provisional Patent Application Ser. No. 60\/821,503, filed Aug. 4, 2006, titled \u201cSYSTEM AND METHOD FOR TOOL CENTER POINT MANAGEMENT\u201d, the disclosures of which are expressly incorporated by reference herein including the source code appendix of each.","Further, this application is related to U.S. Patent Application Ser. No. 11\/833,971, filed Aug. 3, 2007, titled \u201cGENERALIZED KINEMATICS SYSTEM\u201d, the disclosure of which is expressly incorporated by reference herein.","The invention relates to machine tool control software. More specifically, the field of the invention is that of machine tool control software for object oriented machine tool control software and the operation of machine tool control software.","An object oriented machine tool control system may provide real-time machine tool software system control that isolates system responsibilities into classes that permit a machine tool manufacturer or system integrator to manage complexity and change. One example of a machine tool control system is disclosed in U.S. Pat. No. 5,453,933, assigned to the assignee of the present invention, the disclosure of which is incorporated by reference herein. The system of the '933 patent allows different systems to be created from a core set of procedures without redesigning or making massive software changes","Engineers changing a control system of the '933 patent may easily make changes to the system because they do not need to be experts on the entire system to make a modification to a single component in a class. One change does not have a ripple effect of change throughout the system. Portions of the system that are most likely to change such as the user interface and device drivers are separated from the Kernel. These components are more accessible to change through PLC programs, customizations to the Machine class and addition to or modification of operator programs.","In an exemplary embodiment of the present disclosure, a motion control system is provided for a machine tool system. In an example of the present disclosure, the motion control system includes a generalized kinematics library which may model various machine tool systems. In a further example, multiple instances of the generalized kinematics library are generated to provide data for the machine tool system or other machine tool systems.","In a further exemplary embodiment of the present disclosure, a method for controlling the movement of a machine tool system to machine a part is provided. The method comprising the steps of contacting the part with a tool and moving the tool relative to the part from a first position to a second position while the tool remains in contact with the part. The tool interpolating through a machine singularity point of the machine tool system.","In another exemplary embodiment of the present disclosure, a method for determining position information for a plurality of moveable axes of a machine tool system to machine a part is provided. The method comprising the steps of providing a cascading method accepting a plurality of different tool position input types; receiving a first tool position, the first tool position corresponding to one of the plurality of different input types; and determining with the cascading method the positional information based on the received first tool position.","In yet another exemplary embodiment of the present disclosure, a method for controlling the movement of a machine tool system to machine a part, the machine tool system having a plurality of rotatable axes. The method comprising the steps of contacting the part with a tool at a first position; identifying a second position to move the tool; and selecting a shortest angular traverse solution for each of the plurality of rotatable axes from a plurality of possible solutions for each of the plurality of rotatable axes.","In yet a further exemplary embodiment of the present disclosure, a method for controlling the movement of a machine tool system to machine a part, the machine tool system having a plurality of rotatable axes including a tilt axis. The method comprising the steps of contacting the part with a tool at a first position; identifying a second position to move the tool; and selecting a first solution for each the plurality of rotatable axes from a plurality of possible solutions for each of the plurality of rotatable axes based on a specified tilt axis preference. The first solution having a tilt angle for the tilt axis which satisfies the tilt axis preference.","In still another exemplary embodiment of the present disclosure, a method for controlling the movement of a machine tool system to machine a part, the machine tool system having a plurality of moveable axes. The method comprising the steps of contacting the part with a tool at a first position; identifying a second position to move the tool; and determining a plurality of interpolated positions from the first position to the second position with a two stage interpolation method.","In still yet another exemplary embodiment of the present disclosure, an apparatus for machining a part with at least one tool. The apparatus comprising a frame; a moveable support supported by and moveable relative to the frame, the moveable support supporting the part; a machine tool spindle supported by the frame and moveable relative to the part, the machine tool spindle adapted to couple the at least one tool, the moveable support and the machine tool spindle including a plurality of moveable axes; and a motion control system operably coupled to the machine tool spindle and the moveable support. The motion control system executing the machining of the part through the controlled movement of the plurality of moveable axes of the machine tool spindle and the moveable support. The motion control system contacts the part with a first tool at a first position and moves the first tool relative to the part from the first position to a second position while the first tool remains in contact with the part. The first tool interpolating through a machine singularity point of the machine tool system.","In further still another exemplary embodiment of the present disclosure, an apparatus for machining a part with at least one tool. The apparatus comprising a frame; a moveable support supported by and moveable relative to the frame, the moveable support supporting the part; a machine tool spindle supported by the frame and moveable relative to the part, the machine tool spindle adapted to couple the at least one tool, the moveable support and the machine tool spindle including a plurality of moveable axes; and a motion control system operably coupled to the machine tool spindle and the moveable support. The motion control system executing the machining of the part through the controlled movement of the plurality of moveable axes of the machine tool spindle and the moveable support, wherein the motion control system contacts the part with a first tool at a first position and moves the first tool relative to the part from the first position to a second position by selecting a shortest angular traverse solution for each of a plurality of rotatable axes of the plurality of moveable axes from a plurality of possible solutions for each of the plurality of rotatable axes.","In another exemplary embodiment of the present disclosure, an apparatus for machining a part with at least one tool is provided. The apparatus comprising a frame; a moveable support supported by and moveable relative to the frame, the moveable support supporting the part; a machine tool spindle supported by the frame and moveable relative to the part, the machine tool spindle adapted to couple the at least one tool, the moveable support and the machine tool spindle including a plurality of moveable axes; and a motion control system operably coupled to the machine tool spindle and the moveable support. The motion control system executing the machining of the part through the controlled movement of the plurality of moveable axes of the machine tool spindle and the moveable support. The motion control system contacts the part with a first tool at a first position and moves the first tool relative to the part from the first position to a second position by selecting a first solution for each of a plurality of rotatable axes of the plurality of moveable axes from a plurality of possible solutions for each of the plurality of rotatable axes based on a specified tilt axis preference, the first solution having a tilt angle which satisfies the tilt axis preference for a tilt axis of the plurality of the moveable axes.","In still another exemplary embodiment of the present disclosure, an apparatus for machining a part with at least one tool is provided. The apparatus comprising a frame; a moveable support supported by and moveable relative to the frame, the moveable support supporting the part; a machine tool spindle supported by the frame and moveable relative to the part, the machine tool spindle adapted to couple the at least one tool, the moveable support and the machine tool spindle including a plurality of moveable axes; and a motion control system operably coupled to the machine tool spindle and the moveable support. The motion control system executing the machining of the part through the controlled movement of the plurality of moveable axes of the machine tool spindle and the moveable support. The motion control system contacts the part with a first tool at a first position and moves the first tool relative to the part from the first position to a second position by determining a plurality of interpolated positions from the first position to the second position with a two stage interpolation method.","In a further exemplary embodiment of the present disclosure, a method for controlling the movement of a machine tool system to machine a part is provided. The method comprising the steps of receiving a machine configuration corresponding to the machine tool system, the machine configuration identifying a plurality of moveable axes of the machine tool system and a plurality of interdependencies therebetween; generating based on the machine configuration and a generalized kinematics library a virtual kinematics machine; receiving input data corresponding to a shape of the part; and generating positions for the plurality of moveable axes of the machine tool system based on the virtual kinematics machine and the input data.","In another exemplary embodiment of the present disclosure, a method for controlling the movement of a machine tool system having a plurality of moveable axes to machine a part is provided. The method comprising the steps of receiving input data corresponding to a shape of the part; generating a first virtual kinematics machine based on a machine configuration of the machine tool system and a generalized kinematics library, the first virtual kinematics machine generating positions for the plurality of moveable axes of the machine tool system based on the input data; and generating a second virtual kinematics machine based on the machine configuration of the machine tool system and the generalized kinematics library, the second virtual kinematics machine generating position information for a moveable portion of the machine tool system.","In yet still another exemplary embodiment of the present disclosure, a method of programming multiple machine tool systems with a software controller is provided. The method comprising the steps of providing a generalized kinematics library accessible by the software controller; generating a first virtual kinematics machine having a first configuration corresponding to a first machine tool system, the first virtual kinematics machine based on the generalized kinematics library; and generating a second virtual kinematics machine having a second configuration corresponding to a second machine tool system, the second virtual kinematics machine based on the generalized kinematics library.","In another exemplary embodiment of the present disclosure, an apparatus for machining a part with at least one tool is provided. The apparatus comprising a frame; a moveable support supported by and moveable relative to the frame, the moveable support supporting the part; a machine tool spindle supported by the frame and moveable relative to the part, the machine tool spindle adapted to couple the at least one tool, the moveable support and the machine tool spindle including a plurality of moveable axes; and a motion control system operably coupled to the machine tool spindle and the moveable support, the motion control system executing the machining of the part through the controlled movement of the plurality of moveable axes of the machine tool spindle and the moveable support. The controlled movement of the plurality moveable axes is provided by an instance of a generalized kinematics library. The instance including a plurality of virtual axes which correspond to the plurality of moveable axis.","In still a further exemplary embodiment of the present disclosure, a method of configuring a software controller of a machine tool system is provided. The method comprising the steps of providing a generalized kinematics library accessible by the software controller; receiving information regarding a configuration of the machine tool system, the machine tool system having a plurality of orthogonal moveable axes; generating an instance of the generalized kinematics library which corresponds to the machine tool system based on the received information regarding the configuration of the machine tool system; and controlling a movement of the plurality of orthogonal moveable axes through the instance of the generalized kinematics library.","In a further exemplary embodiment of the present disclosure, a computer readable medium having computer-executable instructions for controlling the movement of a plurality of moveable axes of a machine tool system to machine a part is provided. The computer executable instructions comprising a generalized kinematics library; instructions to generate an instance of the generalized kinematics library based on a configuration of the machine tool system; instructions to provide input data to the instance of the generalized kinematics library; and instructions to get output data from the generalized kinematics library, the output data being related to the movement of the plurality of moveable axes.","Corresponding reference characters indicate corresponding parts throughout the several views.","The embodiments disclosed herein are not intended to be exhaustive or limit the invention to the precise form disclosed in the following detailed description. Rather, the embodiment is chosen and described so that others skilled in the art may utilize its teachings.","Referring to , a machine tool system  is shown having a motion control system . Machine tool system  includes a frame  having a first saddle  coupled thereto. Saddle  is translatable in directions  and . A second saddle  is supported by first saddle . Saddle  is translatable in directions  and  relative to saddle . A platform  is supported by saddle  and is rotatable relative to saddle  in directions  and . In one embodiment, each of saddle , saddle , and platform  are moveable through motors which are controlled by motion control system .","Further, a third saddle  is supported by frame . Saddle  is translatable in directions  and . Saddle  supports a rotatable member . Rotatable member  is rotatable in directions  and  relative to saddle . In one embodiment, each of saddle  and rotatable member  are moveable through motors which are controlled by motion control system .","A tool spindle  is supported by platform . Various tools  may be coupled to tool spindle  to perform various operations with machine tool system . Exemplary tools include and an end mill, a drill, a tap, a reamer, and other suitable tools. Tool spindle  is rotatable about a tool spindle axis  to input a rotation to the tool . In one embodiment, a plurality of tools  are stored in a tool carousal . Additional details about tool carousal  are provided in U.S. Provisional Application Ser. No. 60\/821,481, the disclosure of which is expressly incorporated by reference herein.","The movement of saddle  in direction  or direction  is illustrated as a movement in an y-axis . The movement of saddle  in direction  or direction  is illustrated as a movement in an x-axis . The movement of saddle  in direction  and direction  is illustrated as a movement in an z-axis . The rotation of rotatable member  in direction  or direction  is illustrated as a movement in an B-axis . The rotation of platform  in direction  or direction  is illustrated as a movement in an C-axis . Machine tool system  is an exemplary 5-axis machine. In one embodiment, one of B-axis  and C-axis  is replaced with an A-axis wherein platform  is tiltable about one of x-axis  and y-axis .","Through the movement of one or more of the 5-axes of machine tool system  a tool  may be positioned relative to a part  (see ) supported by platform  to be machined. Part  may be secured to platform  to maintain the position of part  to platform .","The movement of one or more of the 5-axes of machine tool system  is controlled through motion control system . Referring to , motion control system  includes a software controller  and one or more I\/O modules . It should be understood that the methods disclosed herein may be executed by software controller  and be stored in a manner associated with software controller .","Software controller  receives a machine configuration  and input data, such as a part program , and then provides output data, such as position data for the various axes , , , , and  of machine tool system . In the illustrated example in , software controller  receives part program  and machine configuration  from one or more I\/O modules . Machine configuration  provides the dependencies between the various axes , , , , and  of machine tool system  as well as the attributes of each axis. For instance, as saddle  moves in direction  the location of C-axis  is changed. Therefore, the location of C-axis  depends on the location of saddle .","Exemplary I\/O modules  includes input members, such as a user interface, a touch display, a keyboard, a mouse, one or more buttons or switches, a CD drive, a floppy drive, an interface to a determiner network (wireless or wired), and other suitable devices for providing information to software controller  and output members, such as a display (such as a touch screen), lights, printer, and other suitable devices for presenting information.","In one embodiment, part program  is entered through a conversational mode of operation whereby a user during a programming session is presented with one or more screens through a user interface (such as a touch screen and keyboard). An exemplary method of conversational programming is disclosed in U.S. Pat. No. 5,453,933, assigned to the assignee of the current application, the disclosure of which is expressly incorporated by reference herein. During the programming session, the user may program the desired geometry for the machined part and specify one or more attributes. In one example, the user specifies the desired geometry for the machined part by creating blocks of code each of which specifies a tool and a trajectory of the tool. As such, the geometry of the machined part is defined based on the operations used to create the machined part.","In one embodiment, part program  is provided through a NC mode of operation whereby an NC program is loaded into software controller . Part programs are frequently expressed in a standard G&M code language, or a close derivative of this language based on either the International Standards Organization (ISO) or the Electronics Industries Association (EIA) RS-274-D, using codes identified by letters such as G, M, F. The codes define a sequence of machining operations to control motion in the manufacture of a part. Software controller  converts the codes to provide location positions for the various axes , , , , and  of machine tool system . In one embodiment, part program  is parsed by a parser  of software controller . Parser  reviews part program  and identifies various geometry segments. Exemplary geometry segments include lines and arcs.","Regardless of the origin of part program , part program  defines the desired geometry for the machined part either directly or based on the operations used to create the part. However, part program  may not specify the positions of saddles , , and  nor the rotations of platform  and rotatable member . These positions are determined by software controller .","In one embodiment, software controller  is an object-oriented software component. In one embodiment, software controller  is based on the software described in U.S. Pat. No. 5,453,933 issued on Sep. 26, 1995 and titled CNC CONTROL SYSTEM, the disclosure of which is expressly incorporated by reference herein.","In one embodiment, software controller  includes an object oriented generalized kinematics library  and one or more host software applications . The host software application  interfaces with instances (identified herein as virtual kinematics machines , , and ) of the generalized kinematics library  through an interface, such as an API interface . Host software application  also interfaces with other components of software controller , such as the real time application for the real time mill and the graphics application.","Generalized kinematics library  includes a collection of objects or classes from which objects may be derived that are used to develop virtual kinematics machine  from an instance of the library . In one embodiment, the machine configuration  is provided to software controller . Based on machine configuration  software controller  creates the virtual kinematics machine  from the kinematics library . Virtual kinematics machine  is stored in memory. Virtual kinematics machine  has the same configuration as the actual machine described in the machine configuration .","Design Overview of Generalized Kinematics Library","The Generalized Kinematics Library contains an application programming interface (API)  that a host software application  uses to communicate data via Set data functions and receive data via Get data functions. Thus, as per the object oriented design paradigm, the host software application  cannot directly access private member data in the generalized kinematics library  or instances thereof.","Interfacing to the Generalized Kinematics Library","The host software application  interfaces to the generalized kinematics library  through an API  designed using the object-oriented paradigm by communicating data via Set data functions and receiving data via Get data functions.","Generalized Kinematics Library Initialization","In accordance with object oriented paradigm, the host software application  initializes the virtual kinematics machines with the data required for the generalized kinematics library  to assemble the virtual kinematics machine . The host software application  begins by creating an instance of the general kinematics library  . The initialization procedure follows using configuration data  about the machine axes that may originate from numerous sources including configuration files, user-input, and or automatic drive recognition by the real-time components of the machine tool system .","The host software application  cycles through each axis that is present in the system and calls the function AddAxis(ID, Connection). The Axis ID is a number that uniquely identifies the axis. Exemplary axis ids include the set {0,1,2,3,4,5} which corresponds to linear and rotational axes {x,y,z,a,b,c}. With the call of this function, the generalized kinematics library  creates an axis object in memory, which can then initialized with any or all of the following data as required for the axis type by the host software application .","Each axis may include some or all of the following attributes :\n\n","After all the axes have been created and initialized with the appropriate data, the generalized kinematics library EndSetup( ) function is called by the host software application , which validates the machine kinematics, assembles the Tool and Part Matrix Stacks  and  (see ), and determines the tilt axis angle for the machine singularity point if it is a 5-axis machine. The singularity point tilt angle of the tilt axis (B-axis ) is determined by locating the tilt angle where the spindle axis aligns with the rotary axis, (C-axis ).","At this point the generalized kinematics library  is ready to be used by the host software application . Normally the generalized kinematics library  is initialized with a starting position, and other initial modes, each of which are explained in more detail herein, are set either on or off including:\n\n","The design of the generalized kinematics library  allows the host software application  to create multiple instances of the generalized kinematics library  for different processes (different host software applications within the machine tool control software ). For example, one instance is used to interpret programs for the real-time running of the actual machine tool system . Another instance is used to display the real-time graphics and position data during program runtime on the machine tool system . A third instance may be used to interpret programs for different machines to display in graphics. This third instance allows the user to program parts  for different machines than that which the software controller  is connected to and to check these programs using graphical verification. Each instance of the general kinematics library  is independent and may be used simultaneously.","The software controller  contains an initialization class that acts as an API layer between the generalized kinematics library  and the host application software . This configuration permits different components (i.e. different host software applications) within software controller  to initialize their instances of the general kinematics library  through a common, universally accessible singleton class. The host software applications  may also modify the kinematics models for different machines when necessary. An example would be the concurrent programming graphics instance of the generalized kinematics library  that may be modified to model machines other than the one the CNC controller  is connected to. Also, in one embodiment the general kinematics library  permits the simultaneous control of multiple machine tool systems with a single controller.","Using Generalized Kinematics Library in Tool Position Computation Mode for Motion Control","The API to determine machine joint positions for any of the given input types 1 through 4 (see ) is a simple overloaded SetPosition(Input Data) function, where Input Data is the requisite data corresponding to Type 4 through Type 1. Interpolation modes, feedrates or time steps, tool information, and part setup are set prior to calling the SetPosition(Input Data) function. The generalized kinematics library  updates its internal NextPosition data object with the input data and uses this object to determine the next tool position. When using the generalized kinematics library  to determine tool positions, the joint positions and time step for the input move are determined and stored in memory. The generalized kinematics library  then updates its internal LastPosition data object with the input and determined data, which will be used to make decisions to determine the next input tool position. The host software application  will then pick up the determined information using a GetPositionData( ) function, which returns a reference to a class in the generalized kinematics library  that contains the determined data.","The host software application  can configure the generalized kinematics library  to store additional information other than the machine joint positions and time step for each move. For example, tool tip location with respect to the workpiece, tool vector direction with respect to the machine reference coordinate system  (See ).","Using Generalized Kinematics Library in Computation Mode","The generalized kinematics library  may be used in a pure computation mode where the LastPosition internal data object does not get updated with the determined tool position. This can be useful when making logical decisions about the tool path in the host software application such as computing the clipping point of an oriented retract plane to the machine limits. The API is a simple overloaded DeterminePosition(Input Data) function, where Input Data is the requisite data corresponding to Type 4 through Type 1. The requisite machine states must be set prior to calling DeterminePosition, which is identical to using SetPosition described in the previous section.","In addition to computing machine joint angles for input tool positions, the generalized kinematics library  may also determine tool tip and tool vector data with respect to any of the coordinate systems in the kinematics linkages of the modeled machine. An example would be the computation of the tool vector in the machine reference coordinate given the machine joint positions and angles: GetToolVectorWrtMachine(Machine Joint Positions), where Machine Joint Positions is a vector containing all the relevant axes positions. This function call would not update the generalized kinematics library  internal LastPosition data object.","The Virtual Kinematics Machines","Generalized kinematics library  consolidates the kinematics calculations in a single library source that can be shared throughout the code. The generalization of the library provides a means for the library to create a virtual kinematics machine of any orthogonal machine tool system of up to 5 axes. In one embodiment, this is achieved with an object-oriented design in which a virtual mathematical model of the machine tool system  is created in the library. Although the generalized kinematics library  is described herein for use with machine tool systems of up to 5 orthogonal axes, due to the object-oriented design of the generalized kinematics library , it can be specialized for non-orthogonal systems and for systems with more than 5 axes. The object-oriented design provides the flexibility to generate a plug-and-play library that may connect and configure itself to model any orthogonal machine tool system from 1 to 5 axes. Further, although described herein for use with a machine tool system , the motion control system  may be used with any type of motion system including robotics.","Virtual kinematics machine  is based on one or more matrix stacks discussed herein. These matrix stacks, such as  and  in , include matrices that describe the characteristics of one or more of the various axes , , , , and  of machine tool system . Additional characteristics of machine tool system  may also be accounted for in the matrix stacks . For instance, part  is coupled to platform .","Axis Objects","Referring to , each axis of the various axes , , , , and  of machine tool system  is described as an object. The axis objects are derived from a generic axis class  represented in . Axis class  is the base class for all axis objects and defines properties and methods for axis objects. Axis class  includes various axis attributes  and transformation matrices . The Axis base class  contains common data and methods that all derived axes objects own.","The following is a list of data included in the Axis base class :","Data:",{"@attributes":{"id":"p-0088","num":"0000"},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":["Axis ID=integer {0,1,2,3,4,5,6,7} corresponding to {X,Y,Z,A,B,C,S}","Name=string {\u201cX\u201d,\u201cY\u201d,\u201cZ\u201d,\u201cA\u201d,\u201cB\u201d,\u201cC\u201d,\u201cS\u201d)","Type=enumeration {Linear, Rotary, Tilt, Spindle}","Position=axis position","Matrix=axis transformation matrix","Connection=enumeration {Tool, Part}","MinPosition=lower bound of motion","MaxPosition=upper bound of motion","AxisLimitsExists=Boolean {True, False}","InitialMachineDirection Vector=Vector in Machine reference frame representing positive axis movement direction. For rotation axes, vector direction of axis centerline for Right-hand positive rotation.","MaxContourSpeed=interpolation speed","MaxRapidSpeed=rapid move speed\n\nMethods:\n","Several methods are included in the Axis base class including Set( ) and Get( ) functions for each of the above data."]}},"Derived from axis class  are three derived-classes, linear axis , spindle axis , and rotary axis . The SpindleAxis Class  is derived from the Axis base class. In addition to the Axis base class  data and methods, the SpindleAxis Class  includes:","Data:",{"@attributes":{"id":"p-0090","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["Location=spindle coordinate system origin with respect to axis it is connected to\n\nMethods:\n","SetAxisS( )=initialization function","SetInitSpindleAxisDirectionWrtMachine(DirectionVector)=function to set InitialMachineDirection Vector from base Axis class","SetLocationWrtLastAxis( )=function to set the location of the spindle coordinate system with respect to the last axis it is connected to"]}},"The Linear Axis class  is derived from the Axis base class . In addition to the axis base class data  and methods, the LinearAxis Class  includes:","Methods:",{"@attributes":{"id":"p-0092","num":"0000"},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":["Translate( )=functions to translate a vector or multiply a matrix by the linear axis translation matrix","SetAxis(x,y,z)=initialization functions"]}},"The RotationAxis class  is derived from the Axis base class . In addition to the Axis base class  data and methods, the RotationAxis Class  includes:","Data:",{"@attributes":{"id":"p-0094","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["Centerline=Location of axis of rotation\n\nMethods:\n","SetAxis(a,b,c)=Initialization functions","Rotate( )=functions to rotate a vector or multiply a matrix by the rotation","GetPerpendicularDistanceToAxis(Point)=function returns perpendicular radial distance to axis of rotation"]}},"Based on machine configuration , virtual kinematics machine  includes five machine specific axis objects , , , , and  which correspond to axes , , , , and  of . Exemplary input screens of a user interface of I\/O modules  are provided for specifying some exemplary attribute information for C-axis  () and for B-axis  ().","Referring to , attribute information is specified for C-axis  through a user interface  of I\/O modules . In  a rotation configuration type attribute  is set to full rotate, a maximum speed attribute , and an angular default position attribute . Referring to , the centerline attribute  of C-axis  is defined as an offset  from x-axis  and an offset  from y-axis .","Referring to , attribute information is specified for B-axis  through a user interface  of I\/O modules . In  a rotation configuration type attribute  is set to tilt rotary, a maximum speed attribute , a calibration home position , a minus direction travel limit , and a plus direction travel limit . Referring to , the centerline attribute  of B-axis  is defined as an offset  from x-axis  and an offset  from y-axis .","Similar attribute information is received by motion control system  from an operator through I\/O modules  for linear axes , , and . Further, additional attributes may be provided for the rotary axes  and . The attributes  and transformations  listed in  are exemplary and are not intended to be exhaustive.","Once all of the axes are defined, motion control system  receives from an operator the interdependencies between the various axes , , , , and  so that virtual kinematics machine  has the same interdependencies between the corresponding axes objects , , , , and . An exemplary input screen of user interface  of I\/O module  for setting the interdependencies between axes , , , , and  is shown in . In one embodiment, the definition of the axes is accomplished during an initial setup of a machine tool system  and does not need to be altered during subsequent operations unless desired.","In , each of the axes , , , , and  defined by the operator are displayed. An operator may highlight a given axis, y-axis  is illustrated, through an input member, such as a touch screen. The operator then may move the y-axis  to the other of a part kinematics axes order list  and a tool kinematics axes order list  by selecting input . The operator may move the y-axis  higher in the current list  by selecting input . The operator may move the y-axis  lower in the current list  by selecting input .","The order of the various axes in the part kinematics axes order list  and the tool kinematics axes order list  provides software controller  with the interdependencies of the various axes. The first listed axis in each list  and  is the base axis for that particular list. As illustrated in , the order of axes , , , , and  corresponds to the axes , , , , and  of machine tool system . As ordered in  in the part kinematics axes order list , x-axis  and C-axis  both move along with y-axis . Further, C-axis  moves along with x-axis , but y-axis does not move along with x-axis. Neither x-axis  nor y-axis  moves along with a movement of C-axis. For the tool kinematics axes order list , B-axis  moves along with z-axis , but z-axis  does not move along with B-axis . Finally the movement of y-axis , x-axis, and C-axis is independent of the movement of z-axis  and B-axis .","Matrix Stacks","As mentioned above, each of various axes , , , , and  has a corresponding transformation matrix . By knowing the interdependencies of the various axis , , , , and , virtual kinematics machine  may generate one or more matrix stacks to calculate various types of output data. Virtual kinematics machine  includes one or more matrix stacks  created by an initialization component . Matrix stacks  are a general method used in the generalized kinematics library  to concatenate multiple transformations together.","Two exemplary matrix stacks  are represented in . A tool matrix stack  is used to mathematically model the transformation from the tool tip position in a spindle coordinate system (spindle)  to the tool tip position in a machine reference coordinate system (m)  through a concatenation of transformation matrices . Tool matrix stack  is graphically represented in a leftmost portion of  and mathematically represented in the rightmost portion of . In one embodiment for machine tool system , which is represented by virtual kinematics machine , the tool matrix stack  is represented by equation (1).",{"@attributes":{"id":"p-0104","num":"0133"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mover":[{"mo":["[","->"]},{"msub":{"mi":["ToolTip","M"]},"mo":"\u2192"}],"mo":["\u2062","\u2062","]"],"mstyle":{"mspace":{"@attributes":{"width":"0.em","height":"0.ex"}}}},{"mrow":[{"mo":["[","\u2062","]"],"mstyle":{"mspace":{"@attributes":{"width":"0.em","height":"0.ex"}}},"msub":{"mi":["Transform","Z"]}},{"mo":["[","\u2062","]"],"mstyle":{"mspace":{"@attributes":{"width":"0.em","height":"0.ex"}}},"msub":{"mi":["Transform","B"]}},{"mo":["[","\u2062","]"],"mstyle":{"mspace":{"@attributes":{"width":"0.em","height":"0.ex"}}},"msub":{"mi":["Transform","spindle"]}},{"mover":[{"mo":["[","->"]},{"msub":{"mi":["ToolTip","spindle"]},"mo":"\u2192"}],"mo":["\u2062","\u2062","\u2062","]"],"mstyle":[{"mspace":{"@attributes":{"width":"0.em","height":"0.ex"}}},{"mspace":{"@attributes":{"width":"0.em","height":"0.ex"}}}]}],"mo":["\u00d7","\u00d7","\u2062","\u2062","\u00d7"],"mstyle":[{"mtext":{}},{"mspace":{"@attributes":{"width":"8.9em","height":"8.9ex"}}}]}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"1"}}]}}}},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":{"@attributes":{"id":"ul0009-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":["wherein  is a column vector representing the location of the tool tip in the spindle coordinate system;","[Transform] is the transformation from the spindle coordinate system to the rotary B-axis coordinate system;","[Transfrom] is the transformation from the rotary B-axis coordinate system to the z-axis coordinate system;","[Transform] is the transformation from the z-axis coordinate system to a machine coordinate system; and",{"@attributes":{"id":"ul0010-0005","num":"0138"},"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00002","he":"3.89mm","wi":"12.70mm","file":"US08024068-20110920-P00002.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]}}}},"A part matrix stack , shown in , is used to mathematically model the transformation from a part point in the workpiece coordinate system (wp)  to the part point in the machine reference coordinate system (m)  through a concatenation of transformation matrices . Part matrix stack  is graphically represented in a leftmost portion of  and mathematically represented in the rightmost portion of . The part matrix stack  contains all the axes kinematics matrices for the part kinematics chain along with the Part Setup Matrix . A method of determining the Part Setup Matrix  is provided herein. Additional matrices can be pushed onto the Part Matrix Stack when the user program is defined relative to a transform plane or when patterning transformations are called in the program. The Generalized Kinematics Library uses a Transform Plane Matrix Stack  onto which any number of transform planes can be stacked. It also has a Pre-Transform Plane Matrix Stack  onto which any number of patterning transformations may be stacked. Exemplary pattern transformations include translate, rotate, and mirror. As with any matrix stack, both the Transform Plane and Pre-Transform Plane Matrix Stacks can be turned on and off without having to delete the matrices in the matrix stack. So the complete part matrix stack  may contain the transformations illustrated in .","In one embodiment, for the machine tool system , which is represented by virtual kinematics machine , the part matrix stack  is represented by equation 2.",{"@attributes":{"id":"p-0107","num":"0141"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mo":["[","]"],"mover":{"msub":{"mi":["PartPoint","M"]},"mo":"\u2192"}},{"mrow":[{"mo":["[","]"],"msub":{"mi":["Transform","y"]}},{"mo":["[","]"],"msub":{"mi":["Transform","x"]}},{"mo":["[","]"],"msub":{"mi":["Transform","C"]}},{"mo":["[","\u2062","]"],"mstyle":{"mspace":{"@attributes":{"width":"0.em","height":"0.ex"}}},"mi":"PartSetupMatrix"},{"mo":["[","\u2062","\u2062","]"],"mstyle":[{"mspace":{"@attributes":{"width":"0.em","height":"0.ex"}}},{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}],"mi":"TransformPlaneMatrixStack"},{"mo":["[","]"],"mrow":{"mi":["Pre","TransformPlaneMatrixStack"],"mo":["\u2062","\u2062"],"mstyle":{"mtext":"-"}}},{"mo":["[","]"],"mover":{"msub":{"mi":["PartPoint","local"]},"mo":"\u2192"}}],"mo":["\u00d7","\u00d7","\u00d7","\u2062","\u2062","\u00d7","\u00d7","\u2062","\u00d7"],"mstyle":[{"mtext":{}},{"mspace":{"@attributes":{"width":"9.7em","height":"9.7ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}]}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"2"}}]}}}},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":["wherein  is a column vector representing the location of the point of the part in the workpiece coordinate system if no transform planes are active or to the top transform plane in the TransformMatrixStack if at least one transform plane is active;","[Pre\u2014TransformPlaneMatrixStack] is the patterning transformations applied to the input position;","[TransformPlaneMatrixStack] is the concatenated TransformPlaneMatrixStack matrix transformation from the system defined in the patterning transformation stack to the part setup coordinate system;","[PartSetupMatrix] is the transformation from the part coordinate system to the C-axis coordinate system;","[Transfrom] is the transformation from the rotary C-axis coordinate system to the x-axis coordinate system;","[Transform] is the transformation from the x-axis coordinate system to the y-axis coordinate system;","[Transform] is the transformation from the y-axis coordinate system to the machine reference coordinate system; and",{"@attributes":{"id":"ul0012-0008","num":"0149"},"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00004","he":"3.56mm","wi":"13.72mm","file":"US08024068-20110920-P00004.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}]}}}},"It should be understood that the above illustrative examples for the tool tip and the part point positions are only exemplary and various matrix stacks may be used to transform various types of input data to various types coordinate systems once the interdependencies between the various axes , , , , and  has been established.","In one embodiment, matrices are pushed on to matrix stack  in the order from machine reference coordinate system  outward to the spindle coordinate system  and on to part matrix stack  from the machine reference coordinate system  outward to the workpiece coordinate system . Every movement of one of the axes of machine tool system  does not necessarily require recalculation of the various matrix stacks  and . In one embodiment, the generalized kinematics library  decides whether a recalculation of a given matrix stack is needed.","For example, assume that the tool tip position and the part position are both desired in the machine coordinate system . Machine tool system  translates along x-axis  (x-axis  in virtual machine ) as part  is being cut. The generalized kinematics library  will recalculate the part matrix stack  because the part has moved relative to the machine coordinate system , but will not recalculate the tool matrix stack  because the tool  has not moved relative to the machine coordinate system. This reduces the number of matrix multiplications that are preformed. In one example, when axes positions are set, virtual machine  updates each axis object position if the axis position is different from the current position. If an axis position changes, then a flag is set in the appropriate tool or part matrix stack  and  indicating that the forward and inverse Matrix Stack transformation matrices must be re-determined. The Matrix Stack will re-determine the required matrices when they are next requested for use.","Various matrix stacks may be implemented to determine any point or vector relative to any axis coordinate system, the workpiece coordinate system , the spindle coordinate system , or the machine reference coordinate systems . Other matrix stacks may be implemented for transformations to a transform plane coordinate systems , such as shown in . Transform planes  may be defined in a programming session of a conversational part program.","Returning to , virtual kinematics machine  receives the geometry information from parser  and determines the actual machine positions for each of axes , , , , and  (see ) which correspond to machine axes , , , , and . These machine positions are provided to the motion systems of axes , , , , and  to position the tool  supported by tool spindle  and part . Exemplary motion systems include servo motors. The machine positions determined by virtual kinematics machine  are represented by position data  which are sent to a real time mill machine . Position data  does not need to be presented to real time mill  all at once, but rather virtual kinematics machine  may place one or more next positions for a given axis on a stack that is read by real time mill  as needed. Therefore, real time mill  may be moving from a first position to a second position (through a series of intermediate points) while virtual kinematics machine  is determining the steps to take from the second position to a third position.","Concurrent Programming","By having software controller  generate virtual kinematics machine  based on a specified machine configuration  and a generalized kinematics library , software controller  may be used in combination with a variety of actual machines. For instance, if platform  was tiltable about x-axis  this may be taken into account by the machine configuration  passed to software controller .","This increases not only the flexibility of software controller , but also the usefulness of software controller . For example, as shown in  two additional virtual machines  and  are generated. Virtual machine  is also based on machine configuration . As such, virtual machine  is the same as virtual kinematics machine , but may be used in a different part of software controller  for a different purpose, such as simulation graphics application . Virtual machine  is based on a second machine configuration  received through I\/O modules . Virtual machines  and  each receive input data  and , respectively.","Virtual machines  and  provides output data  and . Output data  and  provides the information requested for an application. In one embodiment, the output data for one or both of virtual machines  and  is machine axis positions, such as for a real time mill. In the illustrated embodiment, virtual machine  is coupled to a simulation graphics software application . In one embodiment, the simulation graphics application  is requesting the tool tip position to present on a display the tool tip position during machine run-time tool graphics display. This may be determined from the positions of all of the machine tool system axes positions. Other exemplary applications include a wire frame graphics software application, and an exporter software application, or other suitable applications . In one embodiment, exemplary output data includes the current shape of the machined part or a simulated shape of the machined part based on the programmed movements of the tool  to be displayed by simulation graphics application  including the position of the tool .","In one embodiment, virtual kinematics machine  is based on machine configuration  and is processing part program  to provide position data  to real time mill  and virtual machine  is based on machine configuration  and is processing a part program, as input data , to provide position data as output data . As such, a user of software controller  may be cutting a part  with real time mill , such as the 5-axis machine illustrated in , while programming another part on a four axis machine defined by machine configuration  for verification with the simulation graphics software application  or for provision to a real time mill  associated with the four axis machine. One reason for displaying the output data  on a display is to check for interferences and other trouble geometries or to check the estimated time for cutting the part . In this manner, software controller  permits concurrent programming of multiple machines through the implementation of virtual machines, such as virtual machines , , and . Software controller  may also be implemented on a stand-alone determiner, such as a laptop. In this manner, a user may program a virtual machine corresponding to machine tool system  and then provide the resultant machine program to a machine tool system to machine a part or view with a simulation graphics application . In this example, the resultant position data may be an NC program or a conversational program.","Cascading Method","As stated herein, in one example virtual kinematics machine  determines the positions of axes , , , , and  based on a plurality of input tool positions. In one embodiment, virtual machine  determines the positions of axes , , , , and  through a cascading method .","The cascading method  is illustrated in . Referring to , four different types of input tool position information , , , and  may be provided to the cascading method  from which the positions of axes , , , , and  may be determined. Tool position information  is referred to herein as Type 4 data and includes a surface contact point on the part for the tool, a surface normal vector of the part surface at the contact point, and a tool vector relative to the workpiece coordinate frame . Tool position information  is referred to herein as Type 3 data and includes a linear tool tip position and a tool vector direction relative to the workpiece coordinate frame . Tool position information  is referred to herein as Type 2 data and includes a linear tool tip position relative to the workpiece coordinate system  and rotary axes positions relative to the part coordinate system  (). The part coordinate system  includes rotary offsets to align the workpiece coordinate system to the machine reference coordinate system . If the offsets are zero then it is directly relative to the machine coordinate frame . As is known in the art, the part setup coordinate system  is a commonly referenced coordinate system and is included herein to provide the ability to either process received data or output data relative to that frame of reference. The offsets for the part setup coordinate system  are taken into account in the Part Setup Matrix  in . Tool position information  is referred to herein as Type 1 data and includes linear axes positions and rotary axes positions relative to the machine coordinate frame .","As illustrated in , depending on what \u201cType\u201d of input tool data is received, the cascading method  cascades down determining the lower number types of input tool data until the axis positions and corresponding times  of axes , , , , and  are ultimately determined.","The host application software  calls virtual kinematics machine  using Get and Set functions in accordance to standard object-oriented design principles. There are separate Set functions for each of the four input types listed above. When a Set function is called, virtual kinematics machine  processes the data through the cascading method .","In one example Type 4 data is provided to virtual kinematics machine  through a command from host software application , KM1.SetPositionType#4(x,y,z, u,v,w, i,j,k). The surface contact point is specified by (x,y,z). The surface normal vector is specified by (u,v,w). The tool axis vector is specified by (i,j,k). Each of the input surface point, surface normal vector and tool vector are defined relative to the workpiece coordinate system .","Determination of Type 3 Data","The cascading method  includes a method for determining Type 3 data from the provided Type 4. As stated earlier, the Type 3 data includes a tool bottom center and a tool vector both relative to the workpiece coordinate system . Method  takes into account the shape of the tool  in determining the tool bottom center  (see  tool vector . In one example, method  uses the current tool outer radius and corner radius to determine the tool bottom center  and the tool vector .","Referring to , a surface contact point  and a tool bottom center point  are shown. A center  of the tool corner radius and a tool center  point are also shown. Finally a tool vector  and a surface normal vector  through point  are shown.","The relationship between the surface contact point  and tool bottom center point  is provided by equation 3",{"@attributes":{"id":"p-0125","num":"0167"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mi":"ToolTip","mo":"=","mrow":{"mi":"P","mo":["+","+"],"mrow":[{"mi":"r","mo":"\u00d7","mrow":{"mo":["(",")"],"mrow":{"mover":[{"mi":"N","mo":"^"},{"mi":"T","mo":"^"}],"mo":"-"}}},{"mrow":[{"mo":["(",")"],"mrow":{"mi":["R","r"],"mo":"-"}},{"mo":["(",")"],"mfrac":{"mrow":[{"mover":{"mi":"N","mo":"^"},"mo":"-","mrow":{"mrow":{"mo":["(",")"],"mrow":{"mover":[{"mi":"N","mo":"^"},{"mi":"T","mo":"^"}],"mo":"\u00b7"}},"mo":"\u2062","mover":{"mi":"T","mo":"^"}}},{"mo":["\uf603","\uf604"],"mrow":{"mover":{"mi":"N","mo":"^"},"mo":"-","mrow":{"mrow":{"mo":["(",")"],"mrow":{"mover":[{"mi":"N","mo":"^"},{"mi":"T","mo":"^"}],"mo":"\u00b7"}},"mo":"\u2062","mover":{"mi":"T","mo":"^"}}}}]}}],"mo":"\u00d7"}]}},"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mtext":{}},{"mtext":{}}],"mi":"wherein","mtable":{"mtr":[{"mtd":{"mrow":{"mrow":{"mi":"P","mo":"=","mrow":{"mi":["surface","contact","point","on","workpiece"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}},"mo":";"}}},{"mtd":{"mrow":{"mrow":{"mi":"N","mo":"=","mrow":{"mi":["surface","normal","vector","at","P"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}},"mo":";"}}},{"mtd":{"mrow":{"mrow":{"mi":"T","mo":"=","mrow":{"mi":["tool","axis","vector"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}},"mo":";"}}},{"mtd":{"mrow":{"mrow":{"mi":"R","mo":"=","mrow":{"mi":["tool","outer","major","radius"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}},"mo":";"}}},{"mtd":{"mrow":{"mi":"r","mo":"=","mrow":{"mi":["Radius","of","tool"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}}}}]}}},{"mrow":{"mo":["(",")"],"mn":"3"}}]}}}},"br":{},"b":["414","414","418","420","416"]},{"@attributes":{"id":"p-0126","num":"0168"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mrow":[{"mo":["(",")"],"mrow":{"mi":["R","r"],"mo":"-"}},{"mo":["(",")"],"mfrac":{"mrow":[{"mover":{"mi":"N","mo":"^"},"mo":"-","mrow":{"mrow":{"mo":["(",")"],"mrow":{"mover":[{"mi":"N","mo":"^"},{"mi":"T","mo":"^"}],"mo":"\u00b7"}},"mo":"\u2062","mover":{"mi":"T","mo":"^"}}},{"mo":["\uf603","\uf604"],"mrow":{"mover":{"mi":"N","mo":"^"},"mo":"-","mrow":{"mrow":{"mo":["(",")"],"mrow":{"mover":[{"mi":"N","mo":"^"},{"mi":"T","mo":"^"}],"mo":"\u00b7"}},"mo":"\u2062","mover":{"mi":"T","mo":"^"}}}}]}}],"mo":["\u00d7","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mi":["determines","vector"],"mn":"418"},"mo":"\u2192","mn":"420."}}}},"Variables P, N, and T are provided through the Type 4 input data provided. Variables R and r are provided through a tool configuration file. Based on equation , tool bottom center point  is determined.","In the case shown in , wherein the tool vector  is coincident with the surface normal vector , there are infinite solutions to position the tool tangentially if the tool outer radius is not equal to the tool corner radius. In this case, method  positions tool bottom centre  to contact the surface point , which eliminates the ambiguity of the solution. The infinite solution case does not exist for ballnose endmills where the tool corner radius equals the tool center radius.","Method  returns the tool bottom center location  relative to the workpiece coordinate system  along with the tool vector  provided as part of the Type 4 data. Type 3 data is provided to the next level of method  in virtual kinematics machine  through a command KM1.SetPositionType#3(x,y,z, i,j,k). This command could also be initiated external to virtual kinematics machine  by the host software application .","The cascading method  includes a method  for determining Type 2 data  from the Type 3 . As stated earlier, the Type 2 data  includes a tool bottom center  relative to the workpiece coordinate system  and the rotary axes positions relative to the part setup coordinate system . Method  determines a solution for the machine rotational axes (B-axis  and C-axis ) to align the tool spindle  of machine tool system  to the orientation of the tool vector  of the Type 3 data relative to the workpiece. For machine tool system , there may be two or more solutions for the positions of B-axis  and C-axis  that result in spindle  being aligned with the tool vector  of the input tool position. The determination of the Type 2 data  is described herein.","The cascading method  further includes a method  for calculating Type 1 data  from Type 2 data . The method  selects one of the two possible solutions of the B-axis  and C-axis  that result in spindle axis  being aligned with the tool vector  of the input tool position. Further, the linear axes positions are different for each of the two solutions of the B-axis  and C-axis . In one embodiment, method  selects the rotary positions of the B-axis  and C-axis  based on the last position of the tool, the movement type, the machine axes limits, and\/or whether the tool will move through the machine's point. The output of method  is the type 1 data (linear and rotary axes positions for machine tool system ).","The Type 1 data  is provided to a method  of cascading method . Method  determines an axis speed-limited time step for the movement of the various axes to the positions specified in Type 1 data . In one embodiment, the time step is based on the feedrate of the tool tip relative to the workpiece. The feedrate may be adjusted to accommodate violations of the maximum machine axes velocities, if necessary. The method updates the kinematics machine axes positions and stores the position data for output. As mentioned herein, the updated axes positions are provided to virtual kinematics machine  for updating of matrix stacks  as needed.","Determination of Type 2 Data","Returning to method  of cascading method , the Type 2 data  is determined from the Type 3 data . In one embodiment, method  includes a vector-based method to determine the inverse kinematics of the system  based on the tool bottom center point  and the tool vector  which is a vector for the tool orientation relative to the workpiece coordinate system . Although discussed in connection with system , method  may accommodate any orthogonal 5-axis machine.","Method , in one embodiment, follows the following progression. First, the tool vector  with respect to the workpiece coordinate system is transformed into the machine coordinate frame  by applying the Part Setup transformation matrix. The Part Setup transformation matrix, as illustrated in , contains all the offsets for the machine axes connected in the kinematics linkage of the axes that move the part.","In general there are two possible solutions for any given tool position for an orthogonal 5-axis machine except when the tilt axis  aligns the spindle axis  to the rotary axis direction vector . In this case, there are infinite solutions because the machine is positioned to the machine singularity point.","Method  checks to determine if the spindle axis  of rotation lies along the machine singularity point. Exemplary situations wherein the spindle axis  of rotation lies along the machine singularity point are shown in .  illustrates the situation of machine tool system  wherein a spindle axis  is parallel to a rotary axis  platform  due to the position of tilt axis . Referring to , a spindle axis  is parallel to a rotary axis  of a rotatable platform  which is supported on a tiltable platform  due to the position of a tilt axis . Referring to , a spindle axis  is parallel to a rotary axis  of a rotatable member  due to a position of a tilt axis  of an intermediate tiltable member .","Method  determines the rotary angle of the tilt axis, B-axis  for machine tool system , based on the relationship of equation  as illustrated in .",{"@attributes":{"id":"p-0138","num":"0180"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"TiltAngel","mo":"=","mrow":{"mi":"arccos","mo":["(",")"],"mrow":{"mover":[{"msub":{"mi":["ToolVector","mach"]},"mo":"\u2192"},{"mi":"InitialSpindleAxisDirection","mo":"\u2192"}],"mo":"\u00b7"}}}},{"mrow":{"mo":["(",")"],"mn":"4"}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":["TiltAngle is the rotary angle of the B-axis;",{"@attributes":{"id":"ul0013-0002","num":"0182"},"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00005","he":"3.89mm","wi":"14.82mm","file":"US08024068-20110920-P00005.TIF","alt":"custom character","img-content":"character","img-format":"tif"}},"b":["434","436"]},{"@attributes":{"id":"ul0013-0003","num":"0183"},"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00006","he":"3.56mm","wi":"27.52mm","file":"US08024068-20110920-P00006.TIF","alt":"custom character","img-content":"character","img-format":"tif"}},"b":"432"}]}},"If the TiltAngle is equal to the singularity point tilt angle within a tolerance of the tilt axis encoder resolution or alternatively within an operator specified tilt axis precision, then method  considers tool vector  is lying along the machine singularity point. In this situation, method  sets the rotary angle for B-axis  to the last rotary angle position or to zero, if no last rotary position has been set in the virtual kinematics machine. This prevents the attempted determination of rotary angles for degenerate cases.","If the transformed tool vector  does not lie along the machine's singularity point, the rotary angle for the C-axis  is determined with the following steps with reference to . An orthogonal coordinate system is setup using the rotary axis , the tilt axis , and the CrossVector0  (\u201cTCR coordinate system\u201d), which is perpendicular to the rotary axis  and the tilt axis . The direction of CrossVector0  is given by equation 5",{"@attributes":{"id":"p-0141","num":"0186"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mover":{"mrow":{"mi":"CrossVector","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"0"},"mo":"\u2192"},"mo":"=","mrow":{"mover":[{"mi":"RotaryAxis","mo":"\u2192"},{"mi":"TiltAxis","mo":"\u2192"}],"mo":"\u2297"}}},{"mrow":{"mo":["(",")"],"mn":"5"}}]}}}},"br":{},"b":["422","156","442"],"figref":"FIG. 9C"},{"@attributes":{"id":"p-0142","num":"0187"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"msub":{"mi":["ToolVector","TCR"]},"mo":"\u2061","mrow":{"mo":["[","]"],"mn":"0"}},{"mover":[{"msub":{"mi":["ToolVector","Mach"]},"mo":"\u2192"},{"mi":"TiltAxis","mo":"\u2192"}],"mo":"\u00b7"}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"6"}}]}}}},"br":{},"b":["422","440","444"],"figref":"FIG. 9C"},{"@attributes":{"id":"p-0143","num":"0188"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"msub":{"mi":["ToolVector","TCR"]},"mo":"\u2061","mrow":{"mo":["[","]"],"mn":"1"}},{"mover":[{"msub":{"mi":["ToolVector","Mach"]},"mo":"\u2192"},{"mrow":{"mi":"CrossVector","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"0"},"mo":"\u2192"}],"mo":"\u00b7"}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"7"}}]}}}},"br":{},"b":"446","figref":"FIG. 9C"},{"@attributes":{"id":"p-0144","num":"0189"},"maths":{"@attributes":{"id":"MATH-US-00009","num":"00009"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mover":{"msub":{"mi":["ProjToolVector","TCR"]},"mo":"\u2192"},"mo":"=","mrow":{"mo":["[","]"],"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":{"msub":{"mi":["ToolVector","TCR"]},"mo":"\u2061","mrow":{"mo":["[","]"],"mn":"0"}},"mo":"\/","mi":"mag"}}},{"mtd":{"mrow":{"mrow":{"msub":{"mi":["ToolVector","TCR"]},"mo":"\u2061","mrow":{"mo":["[","]"],"mn":"1"}},"mo":"\/","mi":"mag"}}},{"mtd":{"mn":"0"}}]}}},"mo":","}},{"mrow":{"mo":["(",")"],"mn":"8"}}]}}}},"br":[{},{},{}],"in-line-formulae":[{},{}],"sub":["TCR","TCR","TCR","TCR"],"sup":["2","2 ","2","2 "],"b":"158"},{"@attributes":{"id":"p-0145","num":"0190"},"maths":{"@attributes":{"id":"MATH-US-00010","num":"00010"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"RotaryAngle","mo":"=","mrow":{"mi":"arctan","mo":["\u2062","\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"2","mrow":{"mo":["(",")"],"mfrac":{"mrow":[{"msub":{"mi":["ProjToolVector","TCR"]},"mo":"\u2061","mrow":{"mo":["[","]"],"mn":"0"}},{"mi":"ProjToolVector","mo":"\u2061","mrow":{"mo":["[","]"],"mn":"1"}}]}}}}},{"mrow":{"mo":["(",")"],"mn":"10"}}]}}}}},"As mentioned herein the tilt and rotary angles determined by method  for b-axis  and c-axis , respectively are only one of two possible solutions for a general orthogonal 5-axis machine. The best solution is selected in method .","Determination of Type I Data","In one embodiment, method  determines which of the solutions for the rotary and tilt angles to select. Several factors may be considered in determining the preferred solution for the rotary and tilt angles. Exemplary factors include the interpolation path of the tool from the last commanded position to the next tool position that is being determined and whether a tilt axis preference has been selected. Two exemplary interpolation paths include (1) interpolating the tool vector  along a trajectory between the tool positions and (2) interpolating the machine rotary and tilt angles linearly between the tool positions. In one embodiment, the interpolation is a linear interpolation.","In one embodiment, virtual machine  further includes a method to interpolate the shortest angular traverse direction between tool positions. This method is automatically applied for Type 4 and Type 3 input tool positions. This method is also automatically used when Interpolation Type 1 is active.","Through the tilt axis preference, an operator may force virtual kinematics machine  to keep the tilt axis on either side of the machine's singularity point. As shown in , an operator may select a negative tilt axis preference, a positive tile axis preference, or no preference (neutral) through a selection input  or within the part program. The operator may simply specify a preference so that the machine uses that tilt preference if possible or may force a preference so that the machine cannot use the other tilt axis direction (negative or positive). One application wherein an operator or software controller  may specify a required or forced tilt axis preference is when a feature is being defined relative to a transform plane  (see ). The tilt axis preference feature is useful when the tilt axis has highly asymmetric axes limits in the positive and negative directions about the singularity point and or when the machine work volume is much larger on one side of the singularity point than the other. The user may also force the virtual kinematics machine  to use the specified tilt axis preference side when the interpolation path of the tool is not of any concern.","Referring to , the machine singularity point  for machine tool system  is shown. Referring to , a tilt angle corresponding to a positive tilt axis preference is shown. Referring to , a tilt angle corresponding to a negative tilt axis preference is shown.","In one embodiment, method  proceeds as follows. First, if a tilt axis preference is activated, then the solution corresponding to the preferred tilt axis direction is selected and the rotary and tilt angles are stored as a first solution. Otherwise, if (1) Type 4 data is input, (2) Type 3 data is input, (3) a shortest angular traverse mode is active, or (4) a tool vector interpolation is active, then a shortest angular traverse rotary and tilt axis angular solution is determined with the following method.","Shortest Angular Traverse Method","First, the change in rotary angle and the change in tilt angle are determined as expressed in equations (11) and (12).\n\n\u0394RotaryAngle1=RotaryAngleNext\u2212RotaryAngleLast\u2003\u2003(11)\n\nwherein\n\n","There are three cases to consider when computing the shortest angular traverse solution:",{"@attributes":{"id":"p-0154","num":"0205"},"maths":{"@attributes":{"id":"MATH-US-00011","num":"00011"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":["Case","I","If","\u0394","RotaryAngle"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mtext":"-"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"mn":"1"},"mo":">","mfrac":{"mi":"\u03c0","mn":"2"}}}},"br":{}},{"@attributes":{"id":"p-0155","num":"0206"},"maths":{"@attributes":{"id":"MATH-US-00012","num":"00012"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":["Case","If","\u0394","RotaryAngle"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mtext":"-"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"mrow":{"mi":["I","I"],"mo":"\u2062"},"mn":"1"},"mo":"<","mfrac":{"mi":"\u03c0","mn":"2"}}}},"br":{}},{"@attributes":{"id":"p-0156","num":"0207"},"maths":{"@attributes":{"id":"MATH-US-00013","num":"00013"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":["Case","III","If","\u0394","RotaryAngle"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mtext":"-"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"mn":"1"},"mo":"=","mfrac":{"mi":"\u03c0","mn":"2"}}}}},"In case III, both of the rotary axis angular solutions are equidistant; neither solution is shorter. In this case, \u0394TiltAngle is considered. The alternate angular solution and the angular differences to the last position are determined:\n\n\u0394TiltAngle2=AlternateTiltAngle\u2212TiltAngleLast\u2003\u2003(13)\n\nwherein\n\n","If (\u0394TiltAngle1==\u0394TiltAngle2), then both solutions are equidistant and the tilt axis preference option is selected, then the tilt angle is set to solution #1. Else, if (\u0394TiltAngle1\u2260\u0394TiltAngle2) the shortest tilt axis solution is selected and is set equal to solution #1.","Returning to the determination of Type 1 data, next, the forward kinematics are determined for the selected solution's rotary and tilt axes angles to determine the linear machine axes positions. The linear axis positions for the x-axis and the y-axis are determined through the part matrix stack . The linear axis position for the z-axis is determined through the tool matrix stack . In one embodiment, the linear axes positions are determined by setting the rotary axis and tilt axes object positions to the chosen solution 1 or solution 2; set all linear axes object positions to zero; and recompute the Part and Tool Matrix stacks ( and ), compute forward kinematics to determine the part point in machine coordinate system and the tool tip in the machine coordinate system as represented by equations 14 and 15.\n\nTransformedPartPoint=PartMatrixStack.ForwardTransform(PartPoint)\n\nTransformedToolTip=ToolMatrixStack.ForwardTransform(ToolTip)\u2003\u2003(14-16)\n\nDeltaVector=TransformedPartPoint\u2212TransformedToolTip\n","DeltaVector is the difference between the transformed part point and the transformed tool tip. This vector is used to translate the linear axes to touch the tool to the correct location on the part. The generalized kinematics library  knows the interdependencies between the various axes  and whether a given axis is a part of the part matrix stack  or the tool matrix stack .","The determined rotary and tilt axes positions and the linear axes positions are checked to determine if they are within a predefined region. An exemplary predefined region is the region bounded by the limits of the various axes. If any of the axes positions are out of machine limits, then an error is reported to an operator through I\/O modules . In one embodiment, the error is reported through an error message on a display. In one embodiment, the error is reported if any one of the following three conditions is satisfied: (1) there are less than 5-axes on the machine tool system; (2) the tilt axis preference is active and the operator has specified that a particular tilt axis direction must be used (force tilt axis preference); or (3) Type 2 input data was the highest order data provided to cascading method  and tool vector interpolation is turned off. Otherwise, solution #2 is considered.","Determine Second Solution","For situations wherein the machine positions are not at the machine singularity point , the alternate or second solution for machine tool system  may be determined based on equations 17 and 18\n\nAlternateRotaryAngle=ConvertToZeroTo2PI(RotaryAngle+\u03c0)\n\nAlternateTiltAngle=(SingularityTiltAngle\u2212TiltAngle)+SingularityTiltAngle\u2003\u2003(17, 18)\n\nwherein\n\n","Interpolation through the machine singularity point must be considered when the last tool position is at the machine singularity point  or when interpolation from the last tool position to the next tool position will result in the spindle passing through the machine singularity point . In either situation, a method is invoked by method  to interpolate known herein as Interpolate About Machine Singularity Point Method (\u201cMSP Interpolation\u201d). In one embodiment, MSP Interpolation keeps the tool  in contact with the workpiece and stationary relative to the workpiece as the tool  rotates about the machine singularity point .","Referring to , tool  remains in contact with part  as one or more of the axes of machine tool system  moves. In , part  and tool  remain in contact through  degree rotation about the machine singularity point . Tool  essentially remains stationary relative to the workpiece  during the MSP Interpolation.","Interpolation permits method  to select either Solution #1 or Solution #2 when the following conditions are met because MSP Interpolation can handle the spindle axis  passing through the machine singularity point : MSP Interpolation may be used if any of the following are true (1) Type 4 input data is provided; (2) Type 3 input data is provided; (3) the shortest angle traverse option is active; or (4) tool vector interpolation is active.","In a first scenario (), the last tool position is at the machine singularity point  and the next tool position is not at the machine singularity point . If the tilt axis preference is active, then the solution corresponding to preferred tilt axis side is selected if it is within machine limits. If necessary, the method  will invoke the MSP Interpolation to linearly interpolate the tool vector between the last tool position to the next tool position. In this situation, interpolation is then carried out from the machine singularity point  to the next tool position using the tilt axis preference solution.","In a second scenario, wherein a zero degree rotation of the rotary axis  is contemplated; solution  tilt axis is on the opposite side of the singularity point to the last tool position; and solution  tilt axis angle is not on the tilt axis preference side as illustrated in . Referring to , a plane  defined by the tool vector for the last position and the tool vector for the next position (solution 1) about the coordinate system origin and includes a tool vector that coincides with the machine singularity point .","In this scenario, the method will select solution 2 to keep the tilt axis on the preference side provided solution 2 is within machine limits. Then as illustrated in , the method interpolates the tool vector from last position  to the machine singularity point  (), then using the MSP Interpolation rotates about the machine singularity point  (), and then interpolates the tool vector from the machine singularity point  to next tool position  using Solution 2 ().","In a third scenario, solution 1 has a 180 degree rotation of the rotary axis  and solution 1 tilt axis is on the same side of the machine singularity point as the last tool position as shown in . In this scenario, the outcome changes depending on whether the tilt axis angle for solution 1 is on the tilt axis preference side or not. If the tilt axis angle for solution 1 is on the tilt axis preference side, the method will interpolate from the last position to the machine singularity point , then invoke the MSP Interpolation, followed by interpolating the tool vector from the machine singularity point  to next tool position which corresponds to solution 1. This is the concept illustrated in  herein and shown in .","If the tilt axis angle for solution 1 is not on the tilt axis preference side, the method will select solution 2 and no rotation about the singularity point is necessary. This is illustrated in .","In a fourth scenario () wherein none of the prior three scenarios apply, solution 1 has any other rotation of the rotary axis  and the tilt axis angle is not on the same side of the machine singularity point  as the last position. In this scenario, solution 2 is selected, otherwise the tool vector will not interpolate the correct trajectory relative to the workpiece since solution 1 would interpolate the tool moving through the singularity point.","Once the correct solution is determined, the movement from the last position to the next position is determined through interpolation, if interpolation is selected and not yet active. In some scenarios as described herein this movement includes the tool vector passing through the machine singularity point. In other situations also described herein, this movement does not include the tool vector passing through the machine singularity point. Once the interpolation is completed, the positions which are Type I data  are provided to method  in the cascading method .","Interpolate Tool Vector Passing Through Machine Singularity Point","In the scenarios as described herein wherein the movement from the last tool positions to the next tool position includes the tool vector passing through the machine singularity point  the following method is implemented. The path interpolated by this method rotates the tool about the machine singularity point  such that the tool tip and tool vector remain stationary relative to the workpiece coordinate system . The method is used when the following conditions are satisfied: (1) Tool vector interpolation is active; (2) the last position machine position was previously set; and (3) the rotary axis  is present in the machine.","The method follows the following steps. First, it is determined if the last position tilt angle is equal to the machine singularity point tilt angle. If not, the motion is interpolated from the last position to the machine singularity position point by defining an intermediate position at the machine singularity point  as described below. The interpolation is done by sending the intermediate machine singularity position through cascade method . The motion is then interpolated from the last position to the defined intermediate position at the machine singularity point . A rotation is then performed at the machine singularity point . Finally, the motion is then interpolated from the intermediate position at the machine singularity point to the next position . In the case of interpolating from the last position to the intermediate position at the machine singularity point and from the intermediate position at the machine singularity point to the next position, the interpolation methods either Stage 2 or Stage 1 and Stage 2 discussed herein are implemented.","Identification of Intermediate Position at Machine Singularity Point and Interpolation Thereto","For Type 4 input data, if (AngleLastAndNextSurfaceNormal=0) then the surface normal vector for the prior position and the surface normal vector for the next interpolated position are collinear. AngleLastAndNextSurfaceNormal is based on the relationship in following equation.",{"@attributes":{"id":"p-0176","num":"0232"},"maths":{"@attributes":{"id":"MATH-US-00014","num":"00014"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"AngleLastAndNextSurfaceNormal","mo":"=","mrow":{"mi":"arccos","mo":["(",")"],"mrow":{"mover":[{"mi":"LastSurfaceNormal","mo":"\u2192"},{"mi":"NextSurfaceNormal","mo":"\u2192"}],"mo":"\u00b7"}}}}},"br":{}},"The surface normal vector for the machine singularity position is provided based on the relationship shown in following equation.",{"@attributes":{"id":"p-0178","num":"0234"},"maths":{"@attributes":{"id":"MATH-US-00015","num":"00015"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mover":{"mi":"SingularitySurfaceNormal","mo":"\u2192"},"mo":"=","mrow":{"mi":"RotateAboutCrossVector","mo":["\u2062","\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"2","mrow":{"mo":["(",")"],"mrow":{"mover":{"mi":"LastSurfaceNormal","mo":"\u2192"},"mo":",","mi":"SurfaceNormRotationAngle"}}}}}},"br":{},"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":{"@attributes":{"id":"ul0017-0001","num":"0235"},"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00007","he":"4.23mm","wi":"14.82mm","file":"US08024068-20110920-P00007.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}}}},{"@attributes":{"id":"p-0179","num":"0236"},"maths":{"@attributes":{"id":"MATH-US-00016","num":"00016"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mover":{"mrow":{"mi":"CrossVector","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"2"},"mo":"\u2192"},"mo":"=","mfrac":{"mrow":[{"mover":[{"mi":"LastSurfaceNormal","mo":"\u2192"},{"mi":"NextSurfaceNormal","mo":"\u2192"}],"mo":"\u2297"},{"mo":["\uf603","\uf604"],"mrow":{"mover":[{"mi":"LastSurfaceNormal","mo":"\u2192"},{"mi":"NextSurfaceNormal","mo":"\u2192"}],"mo":"\u2297"}}]}}},{"mrow":{"mo":["(",")"],"mn":"19"}}]}}}},"br":{}},{"@attributes":{"id":"p-0180","num":"0237"},"maths":{"@attributes":{"id":"MATH-US-00017","num":"00017"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"SurfNormRotationAngle","mo":"=","mrow":{"mrow":{"mo":["(",")"],"mfrac":{"mrow":{"mo":["\uf603","\uf604"],"mrow":{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"1"}},"mi":"\u03943"}},"mo":"*","mi":"AngleLastAndNextSurfaceNormal"}}},{"mrow":{"mo":["(",")"],"mn":"20"}}]}}}},"br":[{},{},{},{}],"in-line-formulae":[{},{},{},{},{},{}]},"The surface contact point for the machine singularity position is determined based on equation",{"@attributes":{"id":"p-0182","num":"0239"},"maths":{"@attributes":{"id":"MATH-US-00018","num":"00018"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"SingularitySurfacePoint","mo":"=","mrow":{"mi":"LastSurfacePoint","mo":"+","mrow":{"mrow":[{"mo":["(",")"],"mfrac":{"mrow":[{"mo":["\uf603","\uf604"],"mrow":{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"1"}},{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"3"}]}},{"mo":["(",")"],"mrow":{"mi":["NextSurfacePoint","LastSurfacePoint"],"mo":"-"}}],"mo":"*"}}}},{"mrow":{"mo":["(",")"],"mn":"24"}}]}}}}},"The SingularitySurfaceNormal, SingularitySurfacePoint, and Tool Vector define an intermediate position at the machine singularity point relative to the workpiece. The intermediate position corresponding to the machine singularity point  is sent to Type 4 input in the cascade method . The movement from the last position to the machine singularity point may now be interpolated as discussed herein.","In cases wherein Type 4 data is not provided the intermediate machine singularity point is determined as follows. If (AngleLastAndNextToolVector=0) then the tool vector for the prior position and the tool vector for the next interpolated position are collinear. AngleLastAndNextToolVector is based on the relationship in equation 25.",{"@attributes":{"id":"p-0185","num":"0242"},"maths":{"@attributes":{"id":"MATH-US-00019","num":"00019"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"AngleLastAndNextToolVector","mo":"=","mrow":{"mi":"arccos","mo":["(",")"],"mrow":{"mover":[{"mi":"LastToolVector","mo":"\u2192"},{"mi":"NextToolVector","mo":"\u2192"}],"mo":"\u00b7"}}}},{"mrow":{"mo":["(",")"],"mn":"25"}}]}}}},"br":{}},"The tool vector for the machine singularity position is provided based on the relationship shown in equation 26\n\n{right arrow over (SingularityToolVector)}=RotateAboutCrossVector1({right arrow over (LastToolVector)}, ToolVectorRotationAngle)\u2003\u2003(26)\n\nwherein\n\n",{"@attributes":{"id":"p-0187","num":"0245"},"maths":{"@attributes":{"id":"MATH-US-00020","num":"00020"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mover":{"mrow":{"mi":"CrossVector","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"1"},"mo":"\u2192"},"mo":"=","mfrac":{"mrow":[{"mover":[{"mi":"LastToolVector","mo":"\u2192"},{"mi":"NextToolVector","mo":"\u2192"}],"mo":"\u2297"},{"mo":["\uf603","\uf604"],"mrow":{"mover":[{"mi":"LastToolVector","mo":"\u2192"},{"mi":"NextToolVector","mo":"\u2192"}],"mo":"\u2297"}}]}}},{"mrow":{"mo":["(",")"],"mn":"27"}}]}}}},"br":{}},{"@attributes":{"id":"p-0188","num":"0246"},"maths":{"@attributes":{"id":"MATH-US-00021","num":"00021"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"ToolVectorRotationAngle","mo":"=","mrow":{"mrow":{"mo":["(",")"],"mfrac":{"mrow":[{"mo":["\uf603","\uf604"],"mrow":{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"1"}},{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"3"}]}},"mo":"*","mi":"AngleLastAndNextToolVector"}}},{"mrow":{"mo":["(",")"],"mn":"28"}}]}}}},"br":[{},{},{},{}],"in-line-formulae":[{},{},{},{},{},{}]},"The tool tip position for the machine singularity position is determined based on equation 32",{"@attributes":{"id":"p-0190","num":"0248"},"maths":{"@attributes":{"id":"MATH-US-00022","num":"00022"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"SingularityToolTip","mo":"=","mrow":{"mi":"LastToolTip","mo":"+","mrow":{"mrow":[{"mo":["(",")"],"mfrac":{"mrow":[{"mo":["\uf603","\uf604"],"mrow":{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"1"}},{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"3"}]}},{"mo":["(",")"],"mrow":{"mi":["NextToolTip","LastToolTip"],"mo":"-"}}],"mo":"*"}}}},{"mrow":{"mo":["(",")"],"mn":"32"}}]}}}}},"The SingularityToolTip and SingularityToolVector define an intermediate position at the machine singularity point relative to the workpiece. The intermediate position corresponding to the machine singularity point is sent to Type 3 input in the cascade method . The movement from the last position to the machine singularity point may now be interpolated as discussed herein.","Rotation About Machine Singularity Point","Once the tool position is interpolated from the last position to the machine singularity position, the next step is to rotate the tool and\/or the part about the machine singularity point. The number of interpolation steps to rotate the tool and\/or the part about the machine singularity point is determined. In one embodiment, a measure of the chord error of the tool tip rotating about the machine's singularity point is used to determine the number of interpolation steps. In one embodiment, a fixed increment is used to determine the number of interpolation steps. An exemplary fixed increment is a fixed angular increment.","Number of Interpolation Steps\u2014Chord Error","The perpendicular radial distance of the tool tip at the machine singularity position to the rotary axis centerline is defined as the RotaryRadialDistance. The RotaryRadialDistance is determined as discussed herein.","The interpolation is a linear interpolation. The number of positions is determined based on a chord error tolerance  (see ) received from an operator. The chord error tolerance and its relationship to the arc angle is shown in . The number of iterations is coupled by the following method.","Assuming the relationship provided in equation A is satisfied,\n\n(RotaryRadialDistance>0 and RotaryRadialDistance\u2267ChordError and |\u03944|>0)\u2003\u2003(33)\n\nthe number of iterations is determined by equation 34\n",{"@attributes":{"id":"p-0196","num":"0254"},"maths":{"@attributes":{"id":"MATH-US-00023","num":"00023"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mrow":[{"mi":["#","Iterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}},{"mi":"ceil","mo":["(",")"],"mfrac":{"mrow":[{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"4"},{"mn":"2","mo":"*","mrow":{"mo":["(",")"],"mrow":{"mi":"arccos","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"-","mfrac":{"mi":["ChordError","RotaryRadialDistance"]}}}}}}]}}],"mo":"="},"mo":","}},{"mrow":{"mo":["(",")"],"mn":"34"}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":["the ceil( ) function rounds up to the next integer;","ChordError is the operator specified tolerance;\n\n\u03944=ShortestAngularTraverse(NextRotaryAngle\u2212LastRotaryAngle)\u2003\u2003(35),\n\nwherein the function ShortestAngularTraverse( ) returns the angular difference between two angular positions that is less than or equal to 180 degrees. If the relationship in equation 33, is not satisfied, the interpolation method sets the number of iterations to one.\n\nNumber of Interpolation Steps\u2014Fixed Angular Step\n"]}},"In one embodiment, an operator may specify the number of interpolation steps based on a fixed angular step ,  (see ). Exemplary angular steps include about every tenth of a degree. This is represented in equation 36",{"@attributes":{"id":"p-0198","num":"0258"},"maths":{"@attributes":{"id":"MATH-US-00024","num":"00024"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":["#","Iterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}},{"mi":"ceil","mo":["(",")"],"mfrac":{"mrow":{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"4"},"mi":"FixedRotaryAngularStep"}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"36"}}]}}}}},"wherein the term FixedRotaryAngular Step corresponds to the specified angular step. Otherwise the number of iterations is set to one.","Once the number of iterations has been determined, machine tool system  rotates about the machine singularity point. In order to rotate about the machine singularity point one or more of the positions of the various axes are changed. For each iteration, the tilt angle is fixed to the singularity point tilt angle, the rotary angles are known, and the positions of the linear axes are determined through cascading method .","In one embodiment, a CurrentRotaryAngle is set equal to the prior rotary angle as represented in equation 37 and the angular step (\u03b8) is provided by equation 38.\n\nCurrentRotaryAngle=LastPositionRotaryAngle\u2003\u2003(37)\n",{"@attributes":{"id":"p-0202","num":"0262"},"maths":{"@attributes":{"id":"MATH-US-00025","num":"00025"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msub":{"mi":["\u03b8","step"]},"mo":"=","mfrac":{"mrow":[{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"4"},{"mi":["#","Iterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}}]}}},{"mrow":{"mo":["(",")"],"mn":"38"}}]}}}},"br":{},"sub":"step"},"Next, the rotary angular and tool tip positions for each position are determined in a loop. The Machine Singularity Position Tool Vector, Tool Tip, Tilt Angle and CurrentRotaryAngle are provided to the cascading method  to determine the positions of the linear axes. If all of the computed axis positions are within the machine limits, the positions are stored for output. If a position is outside of the machine limits, all of the determined positions are deleted and it is attempted to rotate about the machine singularity position in the other direction (i.e. the longer angular traverse for \u03944) of equation 35) by inverting the step angle, determining a new \u03944, and re-computing the number of iterations. The new \u03944 is determined based on the value of the previous \u03944 with the following two conditions\n\nIf (\u03944<0) then \u03944=\u03944+2\u03c0; or\n\nIf (\u03944>0) then \u03944=\u03944\u22122\u03c0.\n\nNote that \u03944 cannot equal zero; otherwise there would be no rotation about the singularity point. If this attempt fails due to a position being outside of the machine limits, then both interpolation directions cannot be executed and the method throws an error of machine out of limits.\n","Finally, assuming that the rotation about the machine singularity point  was successful, the next position is sent through cascading method  and the movement from the intermediate machine singularity position to the next position is interpolated.","Interpolation from a First Position to a Second Position","At several locations throughout this disclosure, it is mentioned that a movement is interpolated from a first position, such as the last position, to a second position, such as an intermediate position at the machine singularity position. The following two stage interpolation method is an exemplary method for interpolating from a first position to a second position. The two-stage interpolation method includes a first stage whereby the tool vector is interpolated from a first tool vector A corresponding to the first position to a second tool vector B corresponding to the second position. (Refer to )","Stage #1\u2014Tool Vector Interpolation","In this stage, the tool vector is interpolated relative to the workpiece coordinate system  between the first position and the second position. Although a linear interpolation system is disclosed, with the object-oriented design of software controller , the linear interpolation system can be overloaded to use Spline, non-uniform rational B-splines (NURBS), or any other interpolation scheme. Further, this stage is an optional stage and the operator or host software application  may chose to simply skip stage#1 and go straight to stage#2.","For linear interpolation of the tool vector, the tool vector direction will interpolate through a plane about the coordinate system origin (see ) between tool positions, the first position and the second position. Three exemplary interpolated tool vector positions 1.1, 1.2, and 1.3 are shown in . Two exemplary methods to determine the number of interpolated steps between the two tool positions are provided.","A first exemplary method to determine the number of interpolated steps uses a fixed angular step. The operator provides a desired angular step  (see ) for the tool vector between the two tool positions. The #Iterations for interpolation is determined from the relationship in equation 39:",{"@attributes":{"id":"p-0209","num":"0269"},"maths":{"@attributes":{"id":"MATH-US-00026","num":"00026"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":["#","Iterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}},{"mi":"ceil","mo":["(",")"],"mfrac":{"mrow":[{"mo":["\uf603","\uf604"],"mrow":{"mi":"arccos","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mover":[{"mi":"NextToolVector","mo":"\u2192"},{"mi":"LastToolVector","mo":"\u2192"}],"mo":"\u00b7"}}}},{"mi":["Max","AngleStep"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}]}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"39"}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0020","list-style":"none"},"li":["#Iterations is the number of iterations;","NextToolVector is a unit vector in the direction of the second tool position tool vector;","LastToolVector is a unit vector in the direction of the first tool position tool vector; and","MaxAngleStep is the desired angular step."]}},"Equation 39 is used if Type 3 data is provided for both of the two tool positions. If Type 4 data is provided for both of the two tool positions, the #Iterations is determined based on equations 40 and 41.",{"@attributes":{"id":"p-0211","num":"0275"},"maths":{"@attributes":{"id":"MATH-US-00027","num":"00027"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mrow":[{"mi":["#","IterationsSurfNormal"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}},{"mi":"ceil","mo":["(",")"],"mfrac":{"mrow":[{"mo":["\uf603","\uf604"],"mrow":{"mi":"arccos","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mover":[{"mi":"NextSurfaceNormal","mo":"\u2192"},{"mi":"LastSurfaceNormal","mo":"\u2192"}],"mo":"\u00b7"}}}},{"mi":["Max","AngleStep"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}]}}],"mo":"="},{"mrow":[{"mi":["#","Iterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}},{"mi":"max","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mi":["#","Iterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}},{"mi":["#","IterationsSurfNormal"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}}],"mo":","}}}],"mo":"="}],"mo":["\u2062","\u2062"],"mstyle":{"mtext":{}}}},{"mrow":{"mo":["(",")"],"mrow":{"mn":["40","41"],"mo":","}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":["#IterationsSurfNormal is the number of iterations based on the surface normals;","LastSurfaceNormal is a unit vector in the direction of the surface normal for the first position;","NextSurfaceNormal is a unit vector in the direction of the surface normal for the second position; and","MaxAngleStep is the desired angular step.\n\nThe number of iterations then is chosen as the larger of the number of iterations determined in equation 39 and equation 40, as represented by equation 41.\n"]}},"A second exemplary method to determine the number of interpolated steps uses a desired time step. The operator provides a desired time step  (see ) for the tool vector between the two tool positions. The #Iterations for interpolation is determined from the relationship in equation 42:\n\nTimeStepFromLastToNext=GetMinTimeStepBetweenPositions(LastPosition, NextPosition, WorkpieceRelativeFeedrate)\u2003\u2003(42)\n\nwherein\n\n","The function GetMinTimeStepBetweenPositions determines the linear interpolation axes velocities between the two tool positions and clamps the time step and hence the feedrate to the maximum axes velocities if any of the axes maximum velocities are violated by the original feedrate. The function returns the clamped time step for the move. However, this time stamp is only an approximation of the final time step since linear interpolation of the tool vector will inevitably alter the machine axes interpolations, which may increase the time step for the computed linearly interpolated move. As the tool path interpolated positions are computed, the Type #1 position input in the Tool Position Cascade will calculate and clamp the actual final time step and feedrate for each interpolated position. Finally, the number of iterations are provided by the relationship in equation (43)",{"@attributes":{"id":"p-0214","num":"0286"},"maths":{"@attributes":{"id":"MATH-US-00028","num":"00028"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":["#","Iterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}},{"mi":"ceil","mo":"\u2061","mrow":{"mo":["(",")"],"mfrac":{"mi":"TimeStepFromLastToNext","mrow":{"mi":["Max","TimeStep"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"43"}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0023","list-style":"none"},"li":["#Iterations is the number of iterations; and","MaxTimeStep corresponds to the interpolation time step specified by an operator input parameter."]}},"Once the number of iterations are determined, the interpolated tool vectors and corresponding interpolated tool positions are determined. Each of the interpolated tool vectors and corresponding interpolated tool positions are sent through cascade method  to determine the positions of each of the axes for the interpolated positions.","In one embodiment, the tool vectors and the tool positions are interpolated in the following manner. The angle between the prior position and the next interpolated position is determined by the relationship shown in equation (44).",{"@attributes":{"id":"p-0217","num":"0291"},"maths":{"@attributes":{"id":"MATH-US-00029","num":"00029"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"AngleLastAndNextToolVector","mo":"=","mrow":{"mi":"arccos","mo":["(",")"],"mrow":{"mover":[{"mi":"LastToolVector","mo":"\u2192"},{"mi":"NextToolVector","mo":"\u2192"}],"mo":"\u00b7"}}}},{"mrow":{"mo":["(",")"],"mn":"44"}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0024","list-style":"none"},"li":["AngleLastAndNextToolVector is the angle between the prior position and the next interpolated position;","LastToolVector is the tool vector for the prior position; and","NextToolVector is the tool vector for the next interpolated position.\n\nInterpolation of the Tool Vector\n"]}},"If (AngleLastAndNextToolVector=0) then the tool vector for the prior position and the tool vector for the next interpolated position are collinear. If (AngleLastAndNextToolVector\u22600) then the tool vector for the prior position and the tool vector for the next interpolated position are not collinear.","The vector about which the prior position tool vector will rotate is determined based on the relationship in equation (45)",{"@attributes":{"id":"p-0220","num":"0297"},"maths":{"@attributes":{"id":"MATH-US-00030","num":"00030"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mover":{"mrow":{"mi":"CrossVector","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"1"},"mo":"\u2192"},"mo":"=","mfrac":{"mrow":[{"mover":[{"mi":"LastToolVector","mo":"\u2192"},{"mi":"NextToolVector","mo":"\u2192"}],"mo":"\u2297"},{"mo":["\uf603","\uf604"],"mrow":{"mover":[{"mi":"LastToolVector","mo":"\u2192"},{"mi":"NextToolVector","mo":"\u2192"}],"mo":"\u2297"}}]}}},{"mrow":{"mo":["(",")"],"mn":"45"}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":["LastToolVector is the tool vector for the prior position; and","NextToolVector is the tool vector for the next interpolated position."]}},"A similar exercise is completed for the surface normals, assuming Type 4 data has been provided.",{"@attributes":{"id":"p-0222","num":"0301"},"maths":{"@attributes":{"id":"MATH-US-00031","num":"00031"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"AngleLastAndNextSurfaceNormal","mo":"=","mrow":{"mi":"arc","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":"cos","mo":"\u2061","mrow":{"mo":["(",")"],"mtable":{"mtr":[{"mtd":{"mrow":{"mover":{"mi":"LastSurfaceNormal","mo":"\u27f6"},"mo":"\u00b7"}}},{"mtd":{"mover":{"mi":"NextSurfaceNormal","mo":"\u27f6"}}}]}}}}}},{"mrow":{"mo":["(",")"],"mn":"46"}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0026","list-style":"none"},"li":["AngleLastAndNextSurfaceNormal is the angle between the prior position surface normal and the next interpolated position surface normal;","LastSurfaceNormal is the surface normal for the prior position; and","NextSurfaceNormal is the surface normal for the next interpolated position.","If (AngleLastAndNextSurfaceNormal=0) then the surface normal vector for the prior position and the surface normal vector for the next interpolated position are collinear. If (AngleLastAndNextSurfaceNormal\u22600) then the surface normal vector for the prior position and the surface normal vector for the next interpolated position are not collinear."]}},"The vector about which the prior position surface normal vector will rotate is determined based on the relationship in equation (47)",{"@attributes":{"id":"p-0224","num":"0307"},"maths":{"@attributes":{"id":"MATH-US-00032","num":"00032"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mover":{"mrow":{"mi":"CrossVector","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"2"},"mo":"\u2192"},"mo":"=","mfrac":{"mrow":[{"mover":[{"mi":"LastSurfaceNormal","mo":"\u2192"},{"mi":"NextSurfaceNormal","mo":"\u2192"}],"mo":"\u2297"},{"mo":["\uf603","\uf604"],"mrow":{"mover":[{"mi":"LastSurfaceNormal","mo":"\u2192"},{"mi":"NextSurfaceNormal","mo":"\u2192"}],"mo":"\u2297"}}]}}},{"mrow":{"mo":["(",")"],"mn":"47"}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0027","list-style":"none"},"li":["LastSurfaceNormal is the surface normal vector for the prior position; and","NextSurfaceNormal is the surface normal vector for the next interpolated position."]}},"Knowing CrossVector1 the interpolated tool vectors and the interpolated tool tip positions (tool bottom centers) may be determined. For each iteration wherein (AngleLastAndNextTool Vector=0) the interpolated tool vector is set equal to the tool vector of the prior position as indicated in equation 48",{"@attributes":{"id":"p-0226","num":"0311"},"maths":{"@attributes":{"id":"MATH-US-00033","num":"00033"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mover":[{"mi":"InterpolatedToolVector","mo":"\u27f6"},{"mi":"NextToolVector","mo":"\u27f6"}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"48"}}]}}}},"br":{}},{"@attributes":{"id":"p-0227","num":"0312"},"maths":{"@attributes":{"id":"MATH-US-00034","num":"00034"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mover":{"mi":"InterpolatedToolVector","mo":"\u27f6"},"mo":"=","mrow":{"mi":"RotateAboutCrossVector","mo":["\u2062","\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"1","mrow":{"mo":["(",")"],"mrow":{"mover":{"mi":"LastToolVector","mo":"\u27f6"},"mo":",","mi":"ToolVectorRotationAngle"}}}}},{"mrow":{"mo":["(",")"],"mn":"49"}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0028","list-style":"none"},"li":["InterpolatedToolVector corresponds to the interpolated tool vector;","ToolVectorRotationAngle is the angle the tool vector is to rotated and is determined based on the relationship in equation 50; and","RotateAboutCrossVector1 is a function that rotates the LastToolVector about CrossVector1 through an angle equal to the value of ToolVectorRotationAngle.","The ToolVectorRotationAngle is determined based on the relationship in equation 50"]}},{"@attributes":{"id":"p-0228","num":"0317"},"maths":{"@attributes":{"id":"MATH-US-00035","num":"00035"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"ToolVectorRotationAngle","mo":"=","mrow":{"mrow":{"mo":["(",")"],"mfrac":{"mi":"i","mrow":{"mi":["#","Iterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}}}},"mo":"*","mi":"AngleLastAndNextToolVector"}}},{"mrow":{"mo":["(",")"],"mn":"50"}}]}}}}},"The interpolated tool tip is determined based on the relationship provided in equation (51).",{"@attributes":{"id":"p-0230","num":"0319"},"maths":{"@attributes":{"id":"MATH-US-00036","num":"00036"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"InterpolatedToolTip","mo":"=","mrow":{"mi":"LastToolTip","mo":"+","mrow":{"mrow":[{"mo":["(",")"],"mfrac":{"mi":"i","mrow":{"mi":["#","Iterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}}}},{"mo":["(",")"],"mrow":{"mi":["NextToolTip","LastToolTip"],"mo":"-"}}],"mo":"*"}}}},{"mrow":{"mo":["(",")"],"mn":"51"}}]}}}}},"The InterpolatedToolTip and InterpolatedToolVector correspond to the Type 3 data for the interpolated tool tip and interpolated tool vector. This data is input into cascading method  to determine the positions of the various axes.","In one embodiment wherein Type 4 data is provided, the surface normal vectors and the surface point positions are interpolated in the following manner. The angle between the surface normal of the prior position and the surface normal of the next interpolated position (AngleLastAndNextSurfaceNormal) is determined by the relationship shown in equation (46).","If AngleLastAndNextSurfaceNormal is equal to zero for a given iteration then the interpolated surface normal vector is set equal to the surface normal vector of the prior position as indicated in equation 52.",{"@attributes":{"id":"p-0234","num":"0323"},"maths":{"@attributes":{"id":"MATH-US-00037","num":"00037"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mover":[{"mi":"InterpolatedSurfaceNormal","mo":"\u27f6"},{"mi":"NextSurfaceNormal","mo":"\u27f6"}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"52"}}]}}}},"br":{}},{"@attributes":{"id":"p-0235","num":"0324"},"maths":{"@attributes":{"id":"MATH-US-00038","num":"00038"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mover":{"mi":"InterpolatedSurfaceNormal","mo":"\u27f6"},"mo":"=","mrow":{"mrow":[{"mi":"RotateAboutCrossVector","mo":"\u2062","mn":"2"},{"mo":["(",")"],"mrow":{"mover":{"mi":"LastSurfaceNormal","mo":"\u27f6"},"mo":",","mi":"SurfaceNormRotationAngle"}}],"mo":"\u2061"}}},{"mrow":{"mo":["(",")"],"mn":"53"}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":["InterpolatedSurfaceNormal corresponds to the interpolated surface normal vector;","SurfaceNormalRotationAngle is the angle the surface normal vector is to be rotated and is determined based on the relationship in equation 54; and","RotateAboutCrossVector2 is a function that rotates the LastSurfaceNormal about CrossVector2 through an angle equal to the value of SurfaceNormalRotationAngle.","The SurfaceNormalRotationAngle is determined based on the relationship in equation 54"]}},{"@attributes":{"id":"p-0236","num":"0329"},"maths":{"@attributes":{"id":"MATH-US-00039","num":"00039"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":["SurfNormalRotation","Angle"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},{"mrow":{"mo":["(",")"],"mfrac":{"mi":"i","mrow":{"mi":["#","Iterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}}}},"mo":"*","mi":"AngleLastAndNextSurfaceNormal"}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"54"}}]}}}}},"The interpolated surface point is determined based on the relationship provided in equation 55.",{"@attributes":{"id":"p-0238","num":"0331"},"maths":{"@attributes":{"id":"MATH-US-00040","num":"00040"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"InerpolatedSurfacePoint","mo":"=","mrow":{"mi":"LastSurfacePoint","mo":"+","mrow":{"mrow":[{"mo":["(",")"],"mfrac":{"mi":"i","mrow":{"mi":["#","Iterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}}}},{"mo":["(",")"],"mrow":{"mi":["NextSurfacePoint","LastSurfacePoint"],"mo":"-"}}],"mo":"*"}}}},{"mrow":{"mo":["(",")"],"mn":"55"}}]}}}}},"The InterpolatedSurfacePoint and InterpolatedSurfaceNormal correspond to the Type 4 data for the interpolated surface contact point and interpolated surface normal vector. This data is input into cascading method  to determine the positions of the various axes.","Stage 2 Interpolation","Once the machine positions are determined through the cascading method , whether based on the InterpolatedToolTip and the InterpolatedToolVector or based on the InterpolatedSurfacePoint and the InterpolatedSurfaceNormal, a second interpolation stage is performed. The second stage interpolation determines whether further interpolation should be determined and is based on one of two methods (1) a tolerance method and (2) a fixed angular step method. In either interpolation method, the tool tip is interpolated in the workpiece coordinate system. Once again, although a linear interpolation system is presented, with the object-oriented design of the software controller , the linear interpolation system may be replaced with other exemplary interpolation systems. Exemplary interpolation systems in Spline, NURBS, or any other suitable interpolation scheme.","An exemplary tolerance based interpolation system is based on the chord error associated with the B-axis and the C-axis. The angular change in the B-axis and the C-axis are given in equations 56 and 57, respectively.\n\n\u03945=(NextTiltAngle\u2212LastTiltAngle)\u2003\u2003(56)\n\n\u03944=(NextRotaryAngle\u2212LastRotaryAngle)\u2003\u2003(57)\n","For the chord error tolerance method, the chord error of the tool tip moving about the rotary and tilt axes centerlines is used to compute the number of interpolation points. The maximum perpendicular radial distance from the tool tip to the C-axis for the last position and the next position is selected as represented in equation 58\n\nMaxRotaryRadialDistance=max(RotaryRadialDistance1, RotaryRadialDistance2)\u2003\u2003(58)\n\nwherein\n\n","In a similar manner maximum perpendicular radial distance from the tool tip to the B-axis for the last position and the next position is selected as represented in equation 59\n\nMaxTiltRadialDistance=max(TiltRadialDistance1, TiltRadialDistance2)\u2003\u2003(59)\n\n","The distances RotaryRadialDistance1, RotaryRadialDistance2, TiltRadialDistance1, and TiltRadialDistance2 are determined based on the method discussed herein in the section Compute Tool Tip Radial Distance to Rotational Axes Centerlines.","The interpolation is a linear interpolation within the chord error tolerance specified by the user. The chord error tolerance is represented in . The method determines if additional interpolations are needed or if the number of interpolations determined in Stage 1 satisfies the desired tolerance. Both the rotary axis (C-axis) and the tilt axis (B-axis) are checked.","Regarding the rotary axis, additional interpolations may be needed if the relationship in equation 60 is true.\n\n(MaxRotaryRadialDistance>0 and MaxRotaryRadialDistance\u2267ChordError and |\u03944|>0)\u2003\u2003(60)\n\nIf the relationship in equation 60 is true, then the number of iterations is determined based on equation 61\n",{"@attributes":{"id":"p-0247","num":"0344"},"maths":{"@attributes":{"id":"MATH-US-00041","num":"00041"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":["#","RotaryIterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}},{"mi":"ceil","mo":["(",")"],"mfrac":{"mrow":[{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"4"},{"mn":"2","mo":"*","mrow":{"mo":["(",")"],"mrow":{"mi":"arccos","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"-","mfrac":{"mi":"ChordError","mrow":{"mi":["Max","RotaryRadialDistance"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}}}}}}]}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"61"}}]}}}}},"Otherwise, the number of iterations is set equal to 1 as represented in equation 62. By setting the number of iterations to 1, no additional interpolation is needed because the next iteration corresponds to the next position from stage 1.\n\n#RotaryIterations=1\u2003\u2003(62)\n","Regarding the tilt axis, additional interpolations may be needed if the relationship in equation 63 is true.\n\n(MaxTiltRadialDistance>0 and MaxTiltRadialDistance\u2267ChordError and |\u03945|>0)\u2003\u2003(63)\n\nIf the relationship in equation 63 is true, then the number of iterations is determined based on equation 64\n",{"@attributes":{"id":"p-0250","num":"0347"},"maths":{"@attributes":{"id":"MATH-US-00042","num":"00042"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":["#","TiltIterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}},{"mi":"ceil","mo":["(",")"],"mfrac":{"mrow":[{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"5"},{"mn":"2","mo":"*","mrow":{"mo":["(",")"],"mrow":{"mi":"arccos","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"-","mfrac":{"mi":"ChordError","mrow":{"mi":["Max","TiltRadialDistance"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}}}}}}]}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"64"}}]}}}}},"Otherwise, the number of iterations is set equal to 1 as represented in equation 65. By setting the number of iterations to 1, no additional interpolation is needed because the next iteration corresponds to the next position from stage 1.\n\n#TiltIterations=1\u2003\u2003(65)\n","Assuming the number of iteration of at least one of the B-axis and C-axis is not 1, additional interpolated positions are determined. The number of iterations is the greater of the number of iterations determined for the B-axis and for the C-axis as represented by equation 66\n\n#Iterations=max(#RotaryIterations, #TiltIterations)\u2003\u2003(66)\n","The change between interpolated positions are indicated by equations 67-69 and the initial positions are set to the LastPosition and the interpolated positions are determined by equations 70-72.\n\n\u0394ToolTip=(NextToolTip\u2212LastToolTip)\/#Iterations\u2003\u2003(67)\n\n\u0394RotaryAngle=(NextRotaryAngle\u2212LastRotaryAngle)\/#Iterations\u2003\u2003(68)\n\n\u0394TiltAngle=(NextTiltAngle\u2212LastTiltAngle)\/#Iterations\u2003\u2003(69)\n\nInterpolatedToolTip=LastToolTip\u2003\u2003(70)\n\nInterpolatedRotaryAngle=LastRotaryAngle\u2003\u2003(71)\n\nInterpolatedTiltAngle=LastTiltAngle\u2003\u2003(72)\n","The intermediate positions are then determined by adding an additional change value from equations 67-69 to the values in equations 70-72 as represented for the first intermediate position in equations 73-75.\n\nInterpolatedToolTip=InterpolatedToolTip+\u0394ToolTip\u2003\u2003(73)\n\nInterpolatedRotaryAngle=InterpolatedRotaryAngle+\u0394RotaryAngle\u2003\u2003(74)\n\nInterpolatedTiltAngle=InterpolatedTiltAngle+\u0394TiltAngle\u2003\u2003(75)\n","Once the interpolated positions are determined through equations 73-75, the data is provided as Type 2 input to the cascading method  to determine the corresponding machine positions.","An exemplary angular step based interpolation system is based on an angular step specified by the operator. Regarding the angular step, additional interpolations are needed relative to the rotary axis if the relationship in equation 76 is true.\n\n(|\u03944|>0)\u2003\u2003(76)\n\nIf the relationship in equation 76 is true, then the number of iterations is determined based on equation 77\n",{"@attributes":{"id":"p-0257","num":"0354"},"maths":{"@attributes":{"id":"MATH-US-00043","num":"00043"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":["#","RotaryIterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}},{"mi":"ceil","mo":"\u2061","mrow":{"mo":["(",")"],"mfrac":{"mrow":{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"4"},"mi":"FixedRotaryAngularStep"}}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"77"}}]}}}}},"Otherwise, the number of iterations is set equal to 1 as represented in equation 78. By setting the number of iterations to 1, no additional interpolation is needed because the next iteration corresponds to the next position from stage 1 unless the tilt axis indicates the need for additional interpolation.\n\n#RotaryIterations=1\u2003\u2003(78)\n","Regarding the angular step, additional interpolations are needed relative to the tilt axis if the relationship in equation 79 is true.\n\n(|\u03945|>0)\u2003\u2003(79)\n\nIf the relationship in equation 79 is true, then the number of iterations is determined based on equation 80\n",{"@attributes":{"id":"p-0260","num":"0357"},"maths":{"@attributes":{"id":"MATH-US-00044","num":"00044"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":["#","TiltIterations"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}},{"mi":"ceil","mo":"\u2061","mrow":{"mo":["(",")"],"mfrac":{"mrow":{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"5"},"mi":"FixedRotaryAngularStep"}}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"80"}}]}}}}},"Otherwise, the number of iterations is set equal to 1 as represented in equation TT. By setting the number of iterations to 1, no additional interpolation is needed because the next iteration corresponds to the next position from stage 1 unless the rotary axis indicates the need for additional interpolation.\n\n#TiltIterations=1\u2003\u2003(81)\n","Assuming the number of iteration of at least one of the B-axis and C-axis is not 1, additional interpolated positions are determined. The number of iterations is the greater of the number of iterations determined for the B-axis and for the C-axis as represented by equation 82\n\n#Iterations=max(#RotaryIterations, #TiltIterations)\u2003\u2003(82)\n","The change between interpolated positions are indicated by equations 83-85 and the initial positions are set to first position from the two positions from stage 1 that are being interpolated as represented by equations 86-88.\n\n\u0394ToolTip=(NextToolTip\u2212LastToolTip)\/#Iterations\u2003\u2003(83)\n\n\u0394RotaryAngle=(NextRotaryAngle\u2212LastRotaryAngle)\/#Iterations\u2003\u2003(84)\n\n\u0394TiltAngle=(NextTiltAngle\u2212LastTiltAngle)\/#Iterations\u2003\u2003(85)\n\nInterpolatedToolTip=LastToolTip\u2003\u2003(86)\n\nInterpolatedRotaryAngle=LastRotaryAngle\u2003\u2003(87)\n\nInterpolatedTiltAngle=LastTiltAngle\u2003\u2003(88)\n","The intermediate positions are then determined by adding an additional change value from equations 83-85 to the values in equations 86-88 as represented for the first intermediate position in equations 89-91.\n\nInterpolatedToolTip=InterpolatedToolTip+\u0394ToolTip\u2003\u2003(89)\n\nInterpolatedRotaryAngle=InterpolatedRotaryAngle+\u0394RotaryAngle\u2003\u2003(90)\n\nInterpolatedTiltAngle=InterpolatedTiltAngle+\u0394TiltAngle\u2003\u2003(91)\n","Once the interpolated positions are determined through equations 89-91, the data is provided as Type 2 input to the cascading method  to determine the corresponding machine positions.","Compute Tool Tip Radial Distance to Rotational Axes Centerlines","This method computes the perpendicular radial distance of the tool tip to the machine's rotary and tilt axes centerlines for the current machine position stored in the axis objects. The method is used herein in the Stage 2 interpolation methods and in the interpolation about the machine singularity point.","The method incrementally transforms the tool tip relative to the spindle zero coordinate system to each axis' coordinate system. The transformation direction is from tool tip towards the workpiece coordinate system. During the incremental transformation process, when the current transformed point is in a rotational axis' coordinate system, the perpendicular radial distance is computed. In the illustrated example, the machine tool system  has a single tilt axis and a single rotary axis.","The current point is set equal to the tool bottom center relative to the spindle zero point as represented by equation 92\n\nCurrentPoint=ToolBottomCenter\u2003\u2003(92)\n","The CurrentPoint is transformed through the Tool Matrix Stack from the spindle coordinate system to the machine reference coordinate system. For an ith axis, the transformation is represented by equation 93.\n\nCurrentPoint=ToolMatrixStack[]\u2192GetMatrix( )*CurrentPoint\u2003\u2003(93)\n","As the CurrentPoint traverses the Tool Matrix Stack, each axis is checked to determine if it is a rotary or tilt axis. If the ith axis is a rotary axis then a distance from the CurrentPoint in the ith axis coordinate system to the ith axis is determined as represented by equation 94\n\nRotaryRadialDistance=ToolMatrixStack[]\u2192GetPerpendicularDistanceToAxis(CurrentPoint)\u2003\u2003(94)\n","If the ith axis is a tilt axis then a distance from the CurrentPoint in the ith axis coordinate system to the ith axis is determined as represented by equation 95.\n\nTiltRadialDistance=ToolMatrixStack[]\u2192GetPerpendicularDistanceToAxis(CurrentPoint)\u2003\u2003(95)\n\nOnce the Tool Matrix Stack is traversed, CurrentPoint holds the value of the tool tip with respect to the machine reference coordinate system. Further, in the case of machine tool system  TitlRadialDistance is equal to the perpendicular distance from the tool bottom center in the B-axis coordinate system to the B-axis.\n","Next, the Part Matrix Stack is traversed from the machine reference coordinate system towards the workpiece coordinate system stopping at the last axis (i.e. up to but not including the workpiece coordinate system). Thus, the Part Matrix Stack is traversed from bottom to top using inverse transformation matrices.","The CurrentPoint is transformed through the Part Matrix Stack from the machine reference coordinate system to the workpiece coordinate system. For an ith axis, the transformation is represented by equation 96.\n\nMatrix=PartMatrixStack[]\u2192GetMatrix( ) Matrix.InvertRigidTransformation( )\n\nCurrentPoint=Matrix*CurrentPoint\u2003\u2003(96)\n","As the CurrentPoint traverses the Part Matrix Stack, each axis is checked to determine if it is a rotary or tilt axis. If the ith axis is a rotary axis then a distance from the CurrentPoint in the ith axis coordinate system to the ith axis is determined as represented by equation 97\n\nRotaryRadialDistance=PartMatrixStack[]\u2192GetPerpendicularDistanceToAxis(CurrentPoint)\u2003\u2003(97)\n","If the ith axis is a tilt axis then a distance from the CurrentPoint in the ith axis coordinate system to the ith axis is determined as represented by equation 98.\n\nTiltRadialDistance=PartMatrixStack[]\u2192GetPerpendicularDistanceToAxis(CurrentPoint)\u2003\u2003(98)\n\nOnce the Part Matrix Stack is traversed, CurrentPoint holds the value of the tool tip with respect to the workpiece coordinate system.\n\nCompute and Clamp Time Step Using Max Axes Speeds\n","This method checks a given TimeStep to make sure that it is not going to cause a given axis to attempt to move faster than its maximum speed. This method is used in method  of cascade method  and stage #1 time step tool vector interpolation. Further, the TimeStep results in a movement having a generally constant feedrate of the tool relative to the workpiece coordinate system as represented by equation 99.\n\nTimeStep=ComputeTimeStepForConstantWorkpieceFeedrate( )\u2003\u2003(99)\n","The time step is then clamped if any of the axes maximum speeds are violated for the move. Each axis is checked and if multiple axis maximum speeds are violated, then the smallest time step is that is acceptable is used.","For each axis the relationship provided in equation  is true then the TimeStep needs to be clamped",{"@attributes":{"id":"p-0279","num":"0376"},"maths":{"@attributes":{"id":"MATH-US-00045","num":"00045"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"if","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mfrac":{"mrow":{"mi":["\u0394","AxisMove"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},"mi":"TimeStep"},"mo":">","mrow":{"mi":["Max","AxisSpeed"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}}}},{"mrow":{"mo":["(",")"],"mn":"100"}}]}}}},"br":[{},{},{},{}],"in-line-formulae":[{},{},{},{}],"i":["i","i]","i"]},{"@attributes":{"id":"p-0280","num":"0377"},"maths":{"@attributes":{"id":"MATH-US-00046","num":"00046"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"TimeStep","mo":"=","mfrac":{"mrow":[{"mi":["\u0394","AxisMove"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},{"mi":["Max","AxisSpeed"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}]}}},{"mrow":{"mo":["(",")"],"mn":"103"}}]}}}},"br":{}},"The matrix stacks, such as the Tool Matrix Stack and the Part Matrix Stack, are a general method used in the Generalized Kinematics Library to concatenate multiple transformations into a single matrix. In one embodiment, for the Generalized Kinematics Library, only rotation and translation transformations are used to describe the kinematics relationship between machine axes. Using homogeneous transformations allows the Matrix Stacks to concatenate rotation and translation transformations into a single transformation matrix. Thus, when a Matrix Stack's forward or inverse transformation matrices are used for more than one computation, the multiplication of all matrices in the Matrix Stack is done only once.","A matrix stack can contain any number of matrices. A matrix stack may also have forward or inverse transformation matrices of other matrix stacks pushed onto it. A matrix stack can be turned on and off without having to pop all the matrices off the stack.","As explained in the following sections due to the nature of the matrices in the Tool Matrix Stack and the Part Matrix Stack, the calculations may be simplified. Further, due to the nature of the matrices in the Tool Matrix Stack and the Part Matrix Stack, matrix inversion of the transformation matrices used in the Generalized Kinematics Library may take advantage of the methods explained herein.","Sub-Matrix Method for Transformation Matrix Operations","The sub-matrix method reduces the execution time for matrix operations by decomposing a homogeneous geometric transformation matrix into sub-matrices and applying operations to the sub-matrices based on whether the sub-matrices are identity matrices or zero transforms.","The sub-matrix method is based on the following decision rule:",{"@attributes":{"id":"p-0286","num":"0383"},"maths":{"@attributes":{"id":"MATH-US-00047","num":"00047"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":["Choose","to"],"mo":["\u2062","\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":"{","mtable":{"mtr":[{"mtd":[{"mrow":{"mi":"Compute","mo":","}},{"mrow":{"mrow":{"mo":"\u21d0","mrow":{"mo":"\u2aec","mrow":{"mo":["(",")"],"mrow":{"mi":["primitive","zero"],"mo":["\u00b7","\u00b7"],"mrow":{"mi":["identical","premitive"],"mo":"\u22c1"}}}}},"mo":";"}}]},{"mtd":[{"mrow":{"mi":"Skip","mo":","}},{"mrow":{"mo":["\u21d0","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":"otherwise","mo":"."}}}]}]}}}},{"mrow":{"mo":["(",")"],"mn":"104"}}]}}}}},"This decision rule is driven by the identity of the geometric sub-matrix. The decision-making process is based on Boolean logic, such as binary. In the decision-making process itself, the identity state of the sub-matrices are tracked to avoid computation of the identity. A 2-by-2 Boolean Decision Matrix (D), represented by equation 105, is added to the matrix class to support the decision-making and identity tracking of the following homogeneous Transformation Matrix (T) with four sub-matrices.",{"@attributes":{"id":"p-0288","num":"0385"},"maths":{"@attributes":{"id":"MATH-US-00048","num":"00048"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"T","mo":"=","mrow":{"mo":["[","]"],"mtable":{"mtr":[{"mtd":[{"mi":"R"},{"mi":"t"}]},{"mtd":[{"msup":{"mi":["s","T"]}},{"mi":"k"}]}]}}}},{"mrow":{"mo":["(",")"],"mn":"105"}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0032","list-style":"none"},"li":["t is the translation matrix,","s is the shear matrix, and","k is the scaling matrix."]}},"Each element of the 2-by-2 Boolean Decision Matrix corresponds to its counterpart of the 4-by-4 Transformation Matrix (T).",{"@attributes":{"id":"p-0290","num":"0390"},"maths":{"@attributes":{"id":"MATH-US-00049","num":"00049"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"D","mo":"=","mrow":{"mo":["[","]"],"mtable":{"mtr":[{"mtd":[{"msub":{"mi":["d","R"]}},{"msub":{"mi":["d","t"]}}]},{"mtd":[{"msub":{"mi":["d","s"]}},{"msub":{"mi":["d","k"]}}]}]}}}},{"mrow":{"mo":["(",")"],"mn":"106"}}]}}}},"br":[{},{}],"figref":"FIG. 26"},"The computational complexity of Transformation Matrix (T) multiplication can be optimized using the Boolean Decision Matrix (D).\n\n\u2003\u2003(107)\n\nInserting 105 into 107 gives:\n",{"@attributes":{"id":"p-0292","num":"0392"},"maths":{"@attributes":{"id":"MATH-US-00050","num":"00050"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mo":["[","]"],"mtable":{"mtr":[{"mtd":[{"msub":{"mi":"R","mn":"3"}},{"msub":{"mi":"t","mn":"3"}}]},{"mtd":[{"msubsup":{"mi":["s","T"],"mn":"3"}},{"msub":{"mi":"k","mn":"3"}}]}]}},{"mrow":[{"mo":["[","]"],"mtable":{"mtr":[{"mtd":[{"msub":{"mi":"R","mn":"1"}},{"msub":{"mi":"t","mn":"1"}}]},{"mtd":[{"msubsup":{"mi":["s","T"],"mn":"1"}},{"msub":{"mi":"k","mn":"1"}}]}]}},{"mo":["[","]"],"mtable":{"mtr":[{"mtd":[{"msub":{"mi":"R","mn":"2"}},{"msub":{"mi":"t","mn":"2"}}]},{"mtd":[{"msubsup":{"mi":["s","T"],"mn":"2"}},{"msub":{"mi":"k","mn":"2"}}]}]}}],"mo":"\u00b7"}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"108"}}]}}}}},"Because the geometric transforms for machine tools are rigid transformations, the shear primitive is zero. Consequently, the following individual resulting sub-matrices result in an equivalent transformation that may be re-assembled into a full homogeneous transformation matrix T:\n\n","The operations of the sub-matrices are multiplications and additions, which are binary and have two operands and following properties.\n\n","The Decision Boolean Matrix m_bDefaultSubmatrix is added as a class variable of Matrix class. An element of the Decision Boolean Matrix is true only when the corresponding sub-matrix is either a zero or identity matrix. Otherwise, the element is false. A transformation matrix is initialized with zero (translation and shear) and identity (rotation and scaling) sub-matrices. Therefore, the Decision Boolean Matrix is initialized with all boolean values as true.","The following rules apply to the processes.\n\n","The decision-making rule (1) is expended in the following manner for the implementation of skipping operations:\n\n","The Boolean Decision Matrix is then updated. When multiplication of matrix elements must be executed, then both elements are checked for the following conditions:\n\n","Similar optimizations using the Boolean Decision Matrix are implemented for matrix addition, subtraction, and multiplication with vectors and points.","Transformation Matrix Inversion","General matrices are inverted using computationally expensive Gauss-Jordan elimination, LU decomposition or other similar methods. The properties of a rigid transformation matrix with an orthogonal rotational sub-matrix allow it to be inverted by applying simple operations to the individual transformation sub-matrices instead of using the more computationally expensive methods. The following equations show the matrix inversion optimization as described in I. Zeid, \u201cCAD\/CAM Theory and Practice\u201d, McGraw-Hill, 1991, the disclosure of which is expressly incorporated by reference:\n\n\u2003\u2003(113)\n\nInserting 105 into 113 gives:\n",{"@attributes":{"id":"p-0301","num":"0412"},"maths":{"@attributes":{"id":"MATH-US-00051","num":"00051"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mo":["[","]"],"mtable":{"mtr":[{"mtd":[{"msub":{"mi":"R","mn":"2"}},{"msub":{"mi":"t","mn":"2"}}]},{"mtd":[{"msubsup":{"mi":["s","T"],"mn":"2"}},{"msub":{"mi":"k","mn":"2"}}]}]}},"mo":"=","msup":{"mrow":[{"mo":["[","]"],"mtable":{"mtr":[{"mtd":[{"msub":{"mi":"R","mn":"1"}},{"msub":{"mi":"t","mn":"1"}}]},{"mtd":[{"msubsup":{"mi":["s","T"],"mn":"1"}},{"msub":{"mi":"k","mn":"1"}}]}]}},{"mo":"-","mn":"1"}]}}},{"mrow":{"mo":["(",")"],"mn":"114"}}]}}}},"br":[{},{},{},{},{},{}],"in-line-formulae":[{},{},{},{},{},{},{},{}],"sub":["2","1","2","2","1","2","1","2","1"],"sup":["T","T","T"],"i":["t","=\u2212R","\u00b7t"]},"The Part Setup Matrix defines the transformation from the last axis coordinate system in the Part Kinematics chain to the workpiece coordinate system for the part on the machine. The input to compute the Part Setup Matrix is the machine axes positions relative to the machine reference coordinate system for the part setup and the probe or tool length used when determining the machine axes positions for the part setup. Knowing the kinematics relationships between all the axes of the machine, the Part Setup Matrix may be determined in the following manner.","Let the Part Setup Matrix be a 4\u00d74 identity matrix in the Part Matrix Stack for the following calculations.\n\nWorkpieceZero=PartMatrixStack.InverseMatrix( )|* ToolMatrixStack.ForwardMatrix( )|*ToolTipTransforniMatrix\u2003\u2003(119)\n\n* [0 0 0 1]\n\nwherein\n\nPartMatrixStack.InverseMatrix( )|ZeroCalibration is the Part Matrix Stack inverse transformation matrix evaluated when all part axes are set to their Part Setup Axes Positions.\u2003\u2003(120)\n\nToolMatrixStack.ForwardMatrix( )|PartSetupPositions is the Tool Matrix Stack forward transformation matrix stack evaluated when all tool axes are set to their Part Setup Axes Positions.\u2003\u2003(121)\n\nToolTipTransformMatrix is the transformation from the tool tip coordinate system to the Spindle Axis coordinate system. It is a simple translation matrix containing the offset of the tool tip relative to the Spindle Axis coordinate system.\n","Any point in the workpiece coordinate system may be defined relative to the table last axis by:\n\nWorkpiecePoint=PartMatrixStack.InverseMatrix( )|* ToolMatrixStack.ForwardMatrix( )|*ToolTipTransformatrix* WorkpiecePoint\n\nTherefore, the Part Setup Matrix may be determined with the following equation, noting that the Part Setup Matrix in the Part Matrix Stack is a 4\u00d74 Identity matrix.\n\nPartSetupMatrix=PartMatrixStack.InverseMatrix( )|* ToolMatrixStack.ForwardMatrix( )|*ToolTipTransformMatrix\n\nThe new Part Setup Matrix is then pushed onto the top of the Part Matrix Stack.\n","It should be noted that all of the surface normal vectors and tool vectors referenced herein are assumed to be normalized for the methods disclosed herein.","While this invention has been described as having an exemplary design, the present invention may be further modified within the spirit and scope of this disclosure. This application is therefore intended to cover any variations, uses, or adaptations of the invention using its general principles. Further, this application is intended to cover such departures from the present disclosure as come within known or customary practice in the art to which this invention pertains."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above mentioned and other features and objects of this invention, and the manner of attaining them, will become more apparent and the invention itself will be better understood by reference to the following description of an embodiment of the invention taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 7A and 7B"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 8","FIG. 2"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIGS. 9A-9C","FIG. 1"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 10A-C"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 11A","FIG. 1"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 11C"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIGS. 12A-D"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIGS. 13A-C"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 14A"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 14B"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 14C"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 15A-C"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIGS. 16A and 16B"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIGS. 17A-B"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 17C","FIG. 17A","FIG. 17B"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIGS. 18A-C"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 26"}]},"DETDESC":[{},{}]}
