---
title: Client management of java management extensions (JMX) Mbean state
abstract: Provided is a method for maintaining state information on a JAVAÂ® Management Extension (JMX) Mbean programming object and simplifying the procedure for creating and employing the Mbean. Prior to invocation of a JMX Mbean, a JMX properties object is created. When the JMX Mbean is invoked, the properties object is passed to the JMX MbeanServer interface. The JMX MbeanServer interface returns an updated properties object, containing all the state information for the new Mbean object. Each time the user make a call to JMX host via the Mbean object, the properties object is passed and, if necessary, updated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08082553&OS=08082553&RS=08082553
owner: International Business Machines Corporation
number: 08082553
owner_city: Armonk
owner_country: US
publication_date: 20070625
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE FIGURES"],"p":["The present invention relates generally to techniques relating to computer programming objects and, more specifically, to a JMX Mbean programming object that is able to maintain state information for a client.","For the past several decades, computers have become increasingly connected. Originally, computers were stand-alone devices, each typically designed and programmed for a specific task. Soon however, the advantages of combining computers into networks became apparent. Networks of computers were able to share resources such as printers and memory and eventually even able to share, or distribute, processing tasks. For example, a search of a large database can often be broken into multiple, mutually exclusive tasks by assigning different processors and\/or computers to search different segments of the database.","As computers have become increasingly interconnected, techniques have been developed to enable multiple computers to work together. One such development is JAVA\u00ae, a high-level programming language originally developed by Sun Microsystems, Inc. of Mountain View, Calif. JAVA\u00ae enables programmers to develop code that is platform independent. Simply stated, code written in the JAVA\u00ae programming language is converted, or \u201cinterpreted,\u201d into actual computer instructions corresponding to a particular computer by a JAVA\u00ae Virtual Machine (JVM) that executes on the computer. In other words, by installing a JVM that corresponds to particular computer hardware and the associated operating system, a programmer can write code without regard to the particular hardware and operating system.","In addition to the increased connectivity of traditional computers, many devices that incorporate computing components have also become both inter-connected and JAVA\u00ae-enabled. Examples include Internet, or \u201cweb,\u201d telephones, cable boxes and televisions and application clients and servers. To facilitate the management of such JAVA\u00ae-enable resources, JAVA\u00ae Management Extensions (JMX) has been developed. JMX is a standard for managing and monitoring devices, applications and services in a JAVA environment. JMX defines a management architecture, design patterns, application programming interfaces (APIs), and services for building web-based, distributes, dynamic and modular solutions to manage JAVA\u00ae resources and programming objects.","JMX provides for the creation and implementation of JAVA\u00ae managed beans, or \u201cMbeans,\u201d which are programming objects that represent objects to be managed. Each Mbean has a management interface that enables a user or program to monitor, manage and be notified of changes to particular configuration parameters of a corresponding resource. For example, an Mbean representing an application may include attributes and methods corresponding to the application's cache size. In this example, reading a \u201ccacheSize\u201d attribute would return the application's cache size and writing a \u201ccacheSize\u201d attribute would update the size of the application's cache, thus changing the application's configuration.","Although the JMX specification has been updated to include invocation in a multi-user, distributed environment, a JMX Mbean is typically a singleton object. In other words, a specific Mbean accessed by multiple clients is not able to store state information corresponding to any particular invocation related to a specific client. Further, end users seeking to invoke a method of a JMX managed Mbean must do so via a JMX MbeanServer interface. This method of invocation requires several lines of JAVA\u00ae code to construct an argument list and an associate argument datatype list. What is needed is a method for employing a JMX Mbean that simplifies the construction of both the argument and datatype lists and enables the user to maintain state information so that multiple clients can access the same Mbean object without conflict.","Provided is a method for maintaining state information on a JMX Mbean programming object and simplifying the procedure for creating and employing the Mbean. In one embodiment, prior to invocation of a JMX Mbean, a JMX properties object is created. When the JMX Mbean is invoked, the properties object is passed to the JMX MbeanServer interface, which is responsible for the creating and managing the new Mbean object. Rather then constructing an argument list with multiple arguments, the properties object is the only argument employed in the Mbean invocation. Upon a successful invocation, the JMX MbeanServer interface returns an updated properties object, containing all the state information for the new Mbean object. The user then maintains the state information for the specific invocation. Each time the user make a call to JMX host via the Mbean object, the properties object is passed and, if necessary, updated. In this manner, the Mbean object created according to the disclosed technology is not necessarily a singleton object, but rather each Mbean is a distinct copy relating to the user's specific application. Further, the disclosed technology saves the JMX host the task of actively maintaining state information associated with a user' session and enables typographical errors that may be in an argument array to be detected prior to runtime.","In one embodiment, a structured query language (SQL) statement is passed to the JMX host as a string parameter in the properties object and the result of the corresponding query is passed back as a methods return value in an \u201csqlRresults\u201d string parameter. Other coding strategies may be employed to handle non-string state parameters such as creating a custom class. This approach requires deploying the custom class with both the JMX Mbean and the client application. A service data object (SDO) works with the disclosed technology as well. One benefit of employing a SDO is that SDOs are able to handle classes within classes for a more robust property set than that provided by a JMX properties object.","This summary is not intended as a comprehensive description of the claimed subject matter but, rather, is intended to provide a brief overview of some of the functionality associated therewith. Other systems, methods, functionality, features and advantages of the invention will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description.","Although described with particular reference to the JAVA Management Extensions (JMX) standard, the claimed subject matter can be implemented in any information technology (IT) system in which access to programming objects by multiple users of applications is desirable. Those with skill in the computing arts will recognize that the disclosed embodiments have relevance to a wide variety of computing environments in addition to those described below. Further, although described with respect to JAVA management beans (MBeans) and the JAVA environment, the claimed subject matter also is applicable to modules, applications or any other type of interdependent computer logic. In other words, the disclosed technology is applicable to any situation in which there is interdependent computer code and a user or developer needs or wants to ensure that the computing environment is highly reliable.","In addition, the methods of the disclosed invention can be implemented in software, hardware, or a combination of software and hardware. The hardware portion can be implemented using specialized logic; the software portion can be stored in a memory and executed by a suitable instruction execution system such as a microprocessor, personal computer (PC) or mainframe.","In the context of this document, a \u201cmemory\u201d or \u201crecording medium\u201d can be any means that contains, stores, communicates, propagates, or transports the program and\/or data for use by or in conjunction with an instruction execution system, apparatus or device. Memory and recording medium can be, but are not limited to, an electronic, magnetic, optical, electromagnetic or semiconductor system, apparatus or device. Memory and recording medium also includes, but is not limited to, for example the following: a portable computer diskette, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or flash memory), and a portable compact disk read-only memory or another suitable medium upon which a program and\/or data may be stored.","One embodiment, in accordance with the claimed subject, is directed to a programmed method for simplifying and extending the usability of a JAVA MBean. The term \u201cprogrammed method\u201d, as used herein, is defined to mean one or more process steps that are presently performed; or, alternatively, one or more process steps that are enabled to be performed at a future point in time. The term programmed method anticipates three alternative forms. First, a programmed method comprises presently performed process steps. Second, a programmed method comprises a computer-readable medium embodying computer instructions, which when executed by a computer performs one or more process steps. Finally, a programmed method comprises a computer system that has been programmed by software, hardware, firmware, or any combination thereof, to perform one or more process steps. It is to be understood that the term \u201cprogrammed method\u201d is not to be construed as simultaneously having more than one alternative form, but rather is to be construed in the truest sense of an alternative form wherein, at any given point in time, only one of the plurality of alternative forms is present.","Turning now to the figures,  is a block diagram of one example of a computing system architecture  that incorporates the claimed subject matter. Computing system  includes a client computer , which includes a central processing unit (CPU) , coupled to a monitor , a keyboard  and a mouse . Monitor , keyboard  and mouse  facilitate human interaction with computing system  and client computer . Attached to CPU  is a data storage component , which may either be incorporated into CPU , i.e. an internal device, or attached externally to CPU  by means of various, commonly available connection devices such as but not limited to, a universal serial bus (USB) port (not shown).","Data storage  is illustrated storing several exemplary Java Management bundles, or \u201cMbeans,\u201d including a first Mbean, or \u201cMbean_,\u201d  and a second Mbean, or \u201cMbean_,\u201d . It should be noted that a typical application or system may include many Mbeans, but for the sake of simplicity only two are shown. Also stored on data storage  are an operating system (OS)  and a JAVA execution engine (JXE) . Stored in conjunction with Mbean_  and Mbean_  are a properties_ module  and properties_ module , respectively. In the following description, Mbean_ , properties_ module , Mbean_  and properties_ module  are JAVA Mbeans and corresponding property objects created and managed in accordance with the claimed subject matter. Properties_ module  is employed in the creation and management of Mbean_  and properties_ module  is employed in the creation and management of Mbean_ . Properties_  and properties_  are the same type of object but are different instantiations, thus enabling Mbean_  and Mbean_  to each store their own state information. Mbean_ , Mbean_ , properties_ , properties_ , OS  and JXE  are described in more detail below in conjunction with .","Client computer  is connected to the Internet , which is also connected to a server computer . Although in this example, client computer  and server  are communicatively coupled via the Internet , they could also be coupled through any number of communication mediums such as, but not limited to, a local area network (LAN) (not shown) and a direct wired connection.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1"],"b":["140","102","130","120","102"]},"As mentioned above, in this example, OS  is supporting JXE  () and JXE  implements the JAVA programming language, which is a product of Sun Microsystems, Inc. of Santa Clara, Calif. JXE  includes a Java runtime engine (JRE) (not shown) which executes Java programs, Java programs are compiled into byte codes which are interpreted by the JRE of JXE  rather then being compiled into native machine code. In this manner, a particular Java program can be written to execute on any hardware platform  and OS  that includes a corresponding JXE like JXE .","JXE  provides an execution environment for, among other things, Mbeans, which in this example include Mbean_  () and Mbean_  (), which are managed by a JAVA Management Extension (JMX) , and corresponding properties objects, properties_  and  (). In the following description, Mbeans  and  are used as examples of Mbeans that are managed by JMX  according to the claimed subject matter. Although Mbeans  and  are illustrated as residing on hardware platform , both of Mbeans  and  could be located on different platforms, e.g. stored in memory (not shown) associated with server  () and executed on server .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIG. 2"],"b":["150","151","175","151","151","152","153","154","155","152","153","156","158","160","162","164","166","168","170","152","154","157","159","161","163","165","167","169","171","153","155","172","173","152","171","173","173","142","174","150","173","175","150"]},"One disadvantage of the calling structure exemplified by process  is the complexity of setting up the calling arguments. In this example, lines - are all used for this task and typically must be executed each time the method is invoked. Another disadvantage associated with program listing  is that there is no capability to store state information related to the calling process. The disclosed technology addresses these issues as explained in more detail below in conjunction with .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 4","FIGS. 1 and 2","FIGS. 1 and 2"],"b":["200","201","212","1","114","1","124","201","202","1","124","200","203","200","204","205","222","1","124","205","211","1124","212","200"],"i":"b "},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 5","FIG. 4","FIGS. 1 and 2","FIGS. 1 and 2"],"b":["220","221","231","1","114","1","124","221","221","220"]},"In this example, rather than defining multiple arguments such as illustrated above in conjunction with listing  () lines - (), method  defines an \u201cargs\u201d array of type Object with one (1) element in line  and a \u201csigs\u201d array of type String with one (1) element in line . Lines  and  then assign properties_  () to the arrays declared in lines  and . Line  sets the value of the sqlStmt field of properties_  to the values of the variable sqlStmt and line  sets the values of an mbeanMethod variable to \u201crunAdminQuery.\u201d In this manner, lines - of listing  are eliminated from the listing and the call to mbsInvoke method represented by line  not only is made much simpler but it returns properties_ with a result of the requested query and any state information relating to Mbean_  associated with properties_ . Therefore, in addition to simplifying a JMX  () call, the claimed subject matter enables a user to maintain state information on a particular Mbean such as Mbean_  and Mbean_ .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 6","FIG. 1","FIG. 1","FIG. 1","FIG. 6"],"b":["250","250","112","104","102","1","114","2","116","250"]},"Process  starts in a \u201cBegin Setup Mbean\u201d block  and proceeds immediately to a \u201cDefine Object\u201d block . During block , process  defines a data object for storing information relating to a particular type of Mbean such as Mbean_  and Mbean_ . The particular configuration of the object depends upon the function and state information associated with the Mbeans corresponding to the objects. In this example, the defined object is an object such as properties_ and  (). During an \u201cMbean to Process?\u201d block , process  determines whether or not there are any Mbeans that need processing in accordance with the claimed subject matter. In this example, Mbeans  and  are such Mbeans and, during the first iteration of process  both need to be processed.","During a \u201cGet Next Mbean\u201d block , process  selects the first unprocessed Mbean, which during the first iteration in this example is Mbean_ . During an \u201cAllocate Object\u201d block , process  allocates space in memory for an object of the type defined during block , which in this example is proerties_ . During an \u201cAssociate Object With Mbean\u201d block , process  populates the object with information corresponding to the current Mbean. As explained above in conjunction with , properties_  and properties_  are the same type of object but are different instantiations, in which each instantiation holds information relating to the respective Mbean, i.e. Mbean_  and Mbean_ .","Once a properties object has been associated with an Mbean during block , process  returns to Mbean to Process block  and processing continues as described above. In this example, the second time through the iterations of blocks , ,  and  process  selects Mbean_  and allocates memory for properties_ . If during block  process  determines that there are no more Mbeans to process, control proceeds to an \u201cEnd Setup Mbean\u201d block  in which process  is complete.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 7","FIG. 6","FIG. 1","FIG. 1","FIG. 1","FIG. 7"],"b":["300","250","300","112","104","102","1","114"]},"Process  starts in a \u201cBegin Invoke Mbean\u201d block  and proceeds immediately to a \u201cReceive Request\u201d block . During block , JXE  () a user or application requests the services of a particular Mbean, e.g. Mbean_ . During a \u201cProperties?\u201d block , process  determines whether or not the particular Mbean is one in which the claimed subject matter is applicable, i.e. the mbean is stored in association with a properties object. If so, control proceeds to a \u201cSet Properties\u201d block  during which the properties object associated with the target Mbean during block  () is populated with any information relevant to the specific invocation during the current processing.","During an \u201cAttach Properties\u201d block , process  attaches the properties object to the target Mbean, i.e. properties_  is attached to Mbean_ . Once properties_  is attached to Mbean , or if during block  process  has determined that the target Mbean does not include a properties object, control proceeds to an \u201cInvoke Mbean\u201d block . During block , the Mbean is invoked with or without an attached properties object depending upon whether control has proceeded form block  or , respectively. During a \u201cProcess Return Values\u201d block , the result of the processing by JMX  () of Mbean_ is returned to process  and the appropriate actions are taken to process the information returned. Finally, process  proceeds to an \u201cEnd Invoke Mbean\u201d block  in which process  is complete.","While the invention has been shown and described with reference to particular embodiments thereof, it will be understood by those skilled in the art that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention, including but not limited to additional, less or modified elements and\/or additional, less or modified blocks performed in the same or a different order."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["A better understanding of the present invention can be obtained when the following detailed description of the disclosed embodiments is considered in conjunction with the following figures, in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
