---
title: Method for representing and controlling packet data flow through packet forwarding hardware
abstract: The present invention defines an object-oriented programming model appropriate for both ASIC-based networking silicon as well as network processors. This model obtains this range of expressiveness by identifying the fundamental units of packet processing performed by underlying hardware (either ASIC or network processor). Software objects, called Stages, are then created to encapsulate and represent these fundamental units of packet processing. Using this API, a directed graph of packet flow is formed using the Stage objects. This directed graph of packet flow models packet processing performed by underlying forwarding hardware. As a result, additional services can be added or deleted from a single switching/routing device without affecting the underlying forwarding engine hardware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06975628&OS=06975628&RS=06975628
owner: Intel Corporation
number: 06975628
owner_city: Santa Clara
owner_country: US
publication_date: 20001222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to packet processing performed by packet forwarding hardware. In particular, the present invention relates to a method for representing and controlling packet data flow through packet forwarding hardware.","Today, numerous independent hardware vendors (IHV) produce networking application specific integrated circuits (ASIC) to perform a myriad of packet processing tasks. The current interface to such ASICs are generally memory mapped registers that have corresponding bit level behavior and documentation. However, not all IHVs limit their products to register level descriptions. Some offer C level or other software interfaces to the hardware, but usually, these are merely a convenient reflection of the underlying registers and therefore differ from one IHV to another. These register level models represent a steep learning curve and tight coupling for an original equipment manufacturer (OEM) or an independent software vendor (ISV) that desires to use the ASICs or networking silicon in a product. At such a micro level description (i.e., the register bits), it is difficult to write code that is reusable across these various ASICs. It is also difficult to decipher the micro level functionality of the ASICs networking silicon.","A patent issued to Narid et al. (U.S. Pat. No. 6,157,955), entitled \u201cPacket Processing System Including A Policy Engine Having A Classification Unit,\u201d describes a general purpose, programmable packet processing platform for accelerating network infrastructure applications, which have been structured to separate the stages of classification and action. Narid et al. thus attempts to describe a software model for programming packet data flow. The application programming interface (API) described in Narid et al. defines action\/classification engines (ACE) which form software objects that can be connected together to form a directed graph of data\/packet flow. Packet flow, as described herein, refers to the path of a packet from its point of origination to its destination, including all intermediate nodes. However, ACEs have a high level of granularity due to the fact that each ACE contains a classification and action portion. Furthermore, the ACE directed graph is not an abstraction of data flow. Rather than providing an abstraction of underlying hardware which performs the packet processing, the ACE objects perform the packet processing at a software level. Unfortunately, performing packet processing at a software level sacrifices performance provided by performing packet processing at a hardware level.","A recent trend in the networking industry is the replacement of ASICs, which are relatively inflexible, with more programmable but still performance-oriented, network processors. Network processors are in their infancy stages and many do not have an abstract programming model, or do not have one expressive and flexible enough to grow with advances in the processor itself. In both cases, the lack of a state of the art programming model hinders both ISVs, who must write their own firmware to a moving API, and silicon vendors. ISVs and silicon vendors inevitably compete for inclusion in the designs of network devices of other network equipment companies.","Therefore, there remains a need to overcome one or more of the limitations in the above described existing art.","A method for representing and controlling packet data flow through packet forwarding hardware is described. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some of these specific details. The following description provides examples, and the accompanying drawings show various examples for the purposes of illustration. However, these examples should not be construed in a limiting sense as they are merely intended to provide examples of the present invention rather than to provide an exhaustive list of all possible implementations of the present invention. In other instances, well-known structures and devices are shown in block diagram form in order to avoid obscuring the details of the present invention.","In an embodiment, the steps of the present invention are embodied in machine-executable instructions. The instructions can be used to cause a general-purpose or special-purpose processor that is programmed with the instructions to perform the steps of the present invention. Alternatively, the steps of the present invention might be performed by specific hardware components that contain hardwired logic for performing the steps, or by any combination of programmed computer components and custom hardware components.","The present invention may be provided as a computer program product which may include a machine-readable medium having stored thereon instructions which may be used to program a computer (or other electronic devices) to perform a process according to the present invention. The machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnet or optical cards, flash memory, or other type of media\/machine-readable medium suitable for storing electronic instructions. Moreover, the present invention may also be downloaded as a computer program product, wherein the program may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection).","System Architecture","Referring now to , a block diagram of a conventional network  is illustrated. The conventional network  includes a first network switching\/routing device . This first device  is, for example, a router configured as a firewall (firewall router ). The firewall router  is coupled between a wide area network (Internet)  and a local area network (private network) . The conventional network  further includes a second network switching\/routing device . This second device  is, for example, a router configured to perform intrusion detection services (IDS router ). The IDS router  is coupled with the firewall router . Finally, the conventional network  includes a third network switching\/routing device . The third device is, for example, a router configured as a virtual private network (VPN) router . The VPN router  is coupled between an input router  and the private network . The input router  is coupled to the Internet  and routes data packets  to either the firewall router  or the VPN router .","As such, the conventional network provides firewall capabilities, as known to those skilled in the art, and intrusion detection capabilities, as known to those skilled in the art, using the firewall router  and the IDS router . Additionally, the conventional network  is configured as a virtual private network utilizing the VPN router . The various network switching\/routing devices - are essentially fixed function ASIC devices or fixed function forwarding elements.","Referring now to , a block diagram  of the internal control processing of a network switching\/routing device , such as for example, the network switching\/routing devices - as depicted in FIG. . The functionality provided by the switching\/routing device  includes control plane processing  and forwarding plane processing  and . Control plane processing tasks include such tasks as routing protocols and admission controls. Forwarding plane processing includes data-path packet processing, such as classification, forwarding and manipulation. In essence, the forwarding plane provides a range of packet processing capabilities from hardware accelerated to software programmable. Packet processing includes layer  and layer  switching, packet redirection, packet filtering and packet manipulation. Unfortunately, in a fixed function switching\/routing device , such as depicted in , the device is limited by tightly coupled proprietary forwarding plane hardware  and software  designed to suit a specific need. In addition, updating the hardware  requires an update of all of the software .","The present invention defines an object-oriented programming model appropriate for both ASIC-based networking silicon as well as network processors. This model obtains this range of expressiveness by identifying the fundamental units of packet processing performed by underlying hardware  (either ASIC or network processor). Software objects as described in further detail below, called Stages, are then created to encapsulate and represent these fundamental units of packet processing. At the first level of decomposition, specific types of stages including, for example, links, classifiers, editors, schedulers, queues, and monitors are formed. A link is a stage which represents a physical interface, including framing. A classifier stage represents a filtering or matching algorithm, while schedulers and queues can be combined to represent packet flow. On the other hand, monitor stages gather statistical information about packets and their data flows. The present invention also defines a meta stage or composition of stages such that the meta stage includes the same interface as the stage itself. This enables groups of stages to be treated as one large unit of packet processing.","Referring now to , a subset of a class hierarchy  of stages associated with the present invention is depicted. Each of the classes described above, such as scatterer  or gatherer , are types of stages. Although each stage type within the contemplation of the present invention is not illustrated in , this representation provides ample illustration of the various possible stage types encompassed by the present invention. Additional stage types illustrated by the present invention are described in further detail below under the application programming interface (API) description of the present invention. However, the listing of stage types in the API is not intended to provide an exhaustive list of all stage types within the contemplation of the present invention.  illustrates the number of inputs (to the left side of each stage type) and the number of outputs (to the right side of each stage type) for each Stage. The inputs and outputs of Stages are connected together to form a data flow topology as described in further detail below.","The API model described by the present invention provides an object-oriented abstraction of forwarding plane packet processing capabilities. These capabilities include packet classification, forwarding, queueing, and transmit scheduling which are abstracted into objects called Stages. Depending on the underlying hardware programmability, the API model can range from simply allowing a user to discover the static configuration of some Stages, to allowing arbitrary creation and interconnection of Stages. The API model provides a solution by abstracting the macro level functionality of network silicon ASICs. This enables firmware engineers to write re-useable code. More particularly, it provides a common understanding of the functionality of the silicon. In other words, the API model provides a framework in which IHVs need write only the lower layers of the API model to map from object-oriented abstractions (i.e., Stages) into their registers.","Stages have three main attributes: a set of numbered inputs, numbered outputs and named parameters. The API model enables the connection of the inputs and outputs of different Stages to form a data flow topology model of the underlying forwarding hardware. Each Stage has zero or more inputs and zero or more outputs as depicted in FIG. . The outputs (inputs) of one Stage are connected to inputs (outputs) of another Stage. These inputs and outputs represent both the packet data traversing the underlying forwarding engine hardware, as well as a tag. This tag is associated with the packet data and carries the interstage state. (Note, however, that the tag is not part of the packet data and is an addition to the packet data.) Some Stages pass the tag-through, some read the tag and others modify the outgoing tag. The parameters of a Stage, along with a few special (internal) synchronization objects affect the behavior of the Stage as described in further detail below. Also, the parameters of a Stage are not directly accessible, but indirectly via methods on the Stage, as synchronous modification of changes in the underlying hardware can be provided by parameters via a callback mechanism.","Referring now to , a block diagram of an interconnection of various Stages to form a data flow topology  of the underlying forwarding hardware is depicted. However, this data topology is provided as an example, such that those skilled in the art will appreciate that various interconnections of stage objects are within the contemplation of the present invention. The data flow topology  includes a link Stage as an input port . An output port  of the input port object  is coupled to a classifier Stage, or input classifier . The input classifier object  is coupled to a scatterer class or demux object . The output of the demux object is routed to either a monitor Stage  (RMON) or an editor Stage  (transcoder object). A gatherer object or gatherer Stage  is coupled to the demux object  and functions as a layerer object. Finally, a link Stage functions as an output port .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4","b":"250"},"Referring now to , a network  utilizing a switching\/routing device  configured in accordance with the teachings of the present invention is depicted. This network  includes the routing device  coupled between a wide area network (Internet)  and a local area network (private network) . The network  depicted in  provides the same functionality achieved by the conventional network  depicted in FIG. . However, rather than using application-specific switching\/routing devices, such as utilized in the conventional network , the network , in accordance with the present invention, utilizes a single switching\/routing device to perform each of the packet processing tasks in a single box.","Referring now to , an internal representation of the switching\/routing device , as depicted in , is illustrated. The routing device  includes a memory  containing control plane software , and forwarding plane software . The device  also includes forwarding plane hardware . The memory  of the router device  can be configured to include a compiled and linked, directed graph of packet processing Stages created using the API model object-oriented software for abstraction, as taught by the present invention. A classification\/routing Stage  is programmed to perform input processing for the network . The directed graph further includes a Stage object  configured to perform firewall data path packet processing functionality. The directed graph  further includes a Stage object  programmed to perform intrusion detection services ID (IDS). Finally, the directed graph  includes a Stage object configured to perform virtual private network functionality .","As described above, each Stage, or software object, is designed to describe both ordering and functionality of the underlying forwarding hardware . The directed path  is merely a representation of how the packet processing is done by the forwarding hardware. The packet data does not, itself, traverse the software objects of the directed graph . Rather, the packets still traverse the actual hardware, thus taking advantage of the performance innovations in the ASICs, or network processors. Moreover, the various stage objects can be added or removed to add\/remove functionality without affecting the underlying hardware. An API for describing directed graphs of software objects to perform data path packet processing functionality is now described.","Application Programming Interface","API Forwarding Hardware Engine Model Infrastructure","The following describes an application programming (API) interface for modeling underlying forwarding engine hardware using an object-oriented programming model that abstracts the fundamental units of packet processing performed by the hardware into software objects called stages. Those skilled in the art will appreciate that the following API merely represents one possible implementation for such an application programming interface. As a result, changes or modifications to the following API, including various additions or deletions of software object stages or various interconnections therewith to form data flow topologies are within the scope and the contemplation of the present invention. In other words, the following API description should not be construed in a limiting sense, as this API is merely intended to provide an example of the present invention, rather than to provide an exhaustive list of all possible API implementations of the inventive techniques taught by the present invention. In the following class descriptions, some C++-like code is used. This code has been intentionally simplified for clarity. It has not been compiled, nor does it have sufficient error checking to be considered final.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 7","b":["400","7","402","410"]},"In addition to these classes,  shows several classes needed for inter-stage information and operations. The main class in  is the EngineGraphManager, which provides an entry point for discovering the capabilities and Stages of the Engine Model. Each of these classes is described in further detail below.",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Stage Class"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","Stage"]},{"entry":[{},"Specializes:","N\/A"]},{"entry":[{},"Qualifiers:","Abstract"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The Stage class is the central class in the Engine Model. It is the base class for virtually all other classes within this model. Its essential attributes are a set of numbered inputs, numbered outputs, and named parameters.","The inputs and outputs connect with other Stages' outputs and inputs respectively to form the topology (data flow) of the forwarding engine hardware. These inputs and outputs represent both a tag and the actual packet data. The tag represents inter-Stage state. The Engine Model programmer specifies the actual value of the tag (see Classifier, below).","Assuming the underlying forwarding hardware is not fixed function, the topology or data flow is dynamic, i.e., the Engine Model user can establish connectivity at runtime. This approach provides a more expressive, powerful model. If the underlying forwarding engine does not support such dynamic reconfiguration, the connect method can be implemented to unconditionally throw an exception.","The parameters, which are synchronized and double-buffered, provide a mechanism by which the internal behavior of a Stage is controlled. Synchronized and double-buffered is akin to a two-phase commit database transaction. See the Stage::Parameter class for more details. An external Engine Model user can register an asynchronous callback for each parameter of a Stage. Whenever the underlying forwarding engine changes the value of a parameter, the corresponding, registered callback is invoked.","Related Types:",{"@attributes":{"id":"p-0054","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":["See also Stage::Parameter","See Link (section 5.2.1), for other examples.","typedef pair<Stage *, u_int16_t> StageConn;"]}},{"@attributes":{"id":"p-0055","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Attributes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"Quali-",{}]},{"entry":["Attribute","Type","fiers","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["m_inputs","vector<StageConn>","Pri-","A container of numbered"]},{"entry":[{},{},"vate","inputs for this Stage. Each"]},{"entry":[{},{},{},"input holds a pointer to its"]},{"entry":[{},{},{},"neighboring Stage and the"]},{"entry":[{},{},{},"neighbor's output number."]},{"entry":[{},{},{},"Each of these inputs"]},{"entry":[{},{},{},"represents a tag plus"]},{"entry":[{},{},{},"the data for one  packet."]},{"entry":["m_outputs","vector<StageConn>","Pri-","A container of numbered"]},{"entry":[{},{},"vate","outputs for this Stage."]},{"entry":[{},{},{},"Each output holds a pointer"]},{"entry":[{},{},{},"to its neighboring Stage and"]},{"entry":[{},{},{},"the neighbor's input"]},{"entry":[{},{},{},"number. Each of these"]},{"entry":[{},{},{},"outputs represents a"]},{"entry":[{},{},{},"tag plus the data"]},{"entry":[{},{},{},"for one packet."]},{"entry":["m_params","map<string,","Pri-","A container of named"]},{"entry":[{},"Parameter>","vate","parameters for this Stage."]},{"entry":[{},{},{},"Each is of type Parameter."]},{"entry":["m_syncEna","bool","Pri-","True if this Stage is"]},{"entry":["bled",{},"vate","supposed to update the"]},{"entry":[{},{},{},"underlying hardware when"]},{"entry":[{},{},{},"Synchronize () is called."]},{"entry":[{},{},{},"Note: This is no longer"]},{"entry":[{},{},{},"used now."]},{"entry":["M_Monitor","Monitor","Pri-","A monitoring object"]},{"entry":[{},{},"vate"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0056","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Methods","Services"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Synchronize","Update Stage parameters."]},{"entry":["GetInputNeighbor","For a given input number,"]},{"entry":[{},"get the neighboring Stage."]},{"entry":["GetOutputNeighbor","For a given output number, get the neighboring"]},{"entry":[{},"Stage."]},{"entry":["Connect","Connect another Stage and its input to the output"]},{"entry":[{},"of this Stage."]},{"entry":["Ibegin","Get beginning enumerator for Stage inputs."]},{"entry":["Iend","Get ending enumerator for Stage inputs."]},{"entry":["Obegin","Get beginning enumerator for Stage outputs."]},{"entry":["Oend","Get ending enumerator for Stage outputs."]},{"entry":["Register","Register a callback function"]},{"entry":[{},"for a specified parameter."]},{"entry":["DeRegister","Remove a registered callback function."]},{"entry":["GetType","Returns a char* indicating type of Stage"]},{"entry":["GetOutputMatchStages","Returns the Stages matching the"]},{"entry":[{},"filter on a particular output"]},{"entry":["GetInputMatchStages","Returns the Stages matching the"]},{"entry":[{},"filter on a particular input"]},{"entry":["GetParm","Retrieve a parameter by name."]},{"entry":["SetParm","Set the value of a named parameter."]},{"entry":["GetMonitor","Get the monitoring object"]},{"entry":[{},"associated with this Stage"]},{"entry":["SetMonitor","Set the monitoring object."]},{"entry":["Hw_UpdateInput","Updates the input connection"]},{"entry":[{},"in the forwarding engine"]},{"entry":["Hw_UpdateOutput","Updates the output connection"]},{"entry":[{},"in the forwarding engine"]},{"entry":["Hw_UpdateParameter","Updates the parameter in the forwarding engine"]},{"entry":["Hw_ValidateInput","Validates a new input connection"]},{"entry":["Hw_ValidateOutput","Validate a new output connection."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0057","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Sychronize"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","virtual void Synchronize(pair<bool, bool>"]},{"entry":[{},"\u2009\u2009firstLast = pair<true, true>)"]},{"entry":[{},"\u2009\u2009\u2009\u2009throw (update_Stage_parameter_failed);"]},{"entry":[{},"Updates the Stage's parameters in the actual forwarding engine. This"]},{"entry":[{},"method calls Hw_UpdateParameter ( ) for each parameter that"]},{"entry":[{},"needs updating. (IsDirty( ) returns true). The parameter commit( ) is"]},{"entry":[{},"called only if all Hw_UpdateParameter ( ) calls return true."]},{"entry":[{},"(Note: m_syncEnabled is no longer used since auto synchronization is"]},{"entry":[{},"no longer present, and there is no motivation for it now.)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN:pair<bool, bool>","firstLast"]},{"entry":[{},{},"Indicates that this call to"]},{"entry":[{},{},"Synchronize is the first (last) in a"]},{"entry":[{},{},"series of related Synchronize calls."]},{"entry":[{},{},"It provides a hint to the"]},{"entry":[{},{},"Stage about when to obtain write"]},{"entry":[{},{},"locks on shared data."]},{"entry":[{},{},"The default value is (true, true)."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","For the first Hw_UpdateParameter ( ) that fails (i.e. returns false"]},{"entry":[{},"indicating that the hardware was not changed), an"]},{"entry":[{},"update_Stage_parameter_failed is thrown."]},{"entry":[{},"Note: Changes may need to be backed in case of failure."]},{"entry":"GetInputNeighbor"},{"entry":["Description:","virtual const StageConn&"]},{"entry":[{},"GetInputNeighbor (u_int16_t num)"]},{"entry":[{},"\u2009\u2009\u2009\u2009throw (uint_out_of_range);"]},{"entry":[{},"Retrieves the neighboring Stage and its output number for a given"]},{"entry":[{},"input."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Parameters:","IN: u_int16_t num","The zero-based number of the input to"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"retrieve."]},{"entry":["Returns:","Neighboring Stage output number."]},{"entry":[{},"The returned StageConn.first could be NULL, indicating that"]},{"entry":[{},"nothing is connected to the given input."]},{"entry":["Exceptions:","If the given input number is not an input of the Stage, an"]},{"entry":[{},"exception is thrown."]},{"entry":"GetOutputNeighbor"},{"entry":["Description:","virtual const StageConn&"]},{"entry":[{},"GetOutputNeighbor(u_int16_t num)"]},{"entry":[{},"\u2009\u2009\u2009\u2009throw (uint_out_of_range);"]},{"entry":[{},"Retrieves the neighboring Stage and its input number for a given"]},{"entry":[{},"output."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Parameters:","IN: u_int16_t num","The zero-based number of the output to"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"retrieve."]},{"entry":["Returns:","Neighboring Stage input number."]},{"entry":[{},"The returned StageConn.first could be NULL, indicating that"]},{"entry":[{},"nothing is connected to the given output."]},{"entry":["Exceptions:","If the given input number is not an output of the Stage, an"]},{"entry":[{},"exception is thrown."]},{"entry":"Connect"},{"entry":["Description:","virtual void Connect(u_int16_t outNum,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Stage *neigh, u_int16_t"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"neighInNum)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw (uint_out_of_range,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"invalid_connection);"]},{"entry":[{},"Connects another Stage and its input to this Stage's output."]},{"entry":[{},"Note that Connect is called only to establish the forward connection but"]},{"entry":[{},"connections are established in both directions so that a backward"]},{"entry":[{},"connection is established from the neighbor Stage to this Stage. The"]},{"entry":[{},"given Stage * could be NULL, indicating that the output is to be"]},{"entry":[{},"disconnected. This calls Hw_UpdateInput and Hw_UpdateOutput to"]},{"entry":[{},"update the connections in hardware."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: u_int16_t outNum","Number of the output to connect to"]},{"entry":[{},{},"the given neighbor."]},{"entry":[{},"IN: Stage *neigh","Stage * that is to become the"]},{"entry":[{},{},"neighbor of the output."]},{"entry":[{},"IN: u_int16_t neighInNum","Input number of neigh to which"]},{"entry":[{},{},"the output is connected."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","If the given output number is not an output of this Stage, an"]},{"entry":[{},"exception is thrown."]},{"entry":[{},"If the given input number is not an input of the neighbor, an"]},{"entry":[{},"exception is also thrown."]},{"entry":[{},"If the Stages can't be connected, invalid_connection is thrown."]},{"entry":"Ibegin"},{"entry":["Description:","vector<StageConn>::const_iterator Ibegin ( )"]},{"entry":[{},"Enumerator for the inputs of the Stage."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Starting iterator for the inputs of the Stage."]},{"entry":["Exceptions:","None."]},{"entry":"Iend"},{"entry":["Description:","vector<StageConn>::const_iterator Iend ( )"]},{"entry":[{},"Enumerator for inputs of the Stage."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Iterator pointing to the end of the inputs of the Stage"]},{"entry":["Exceptions:","None."]},{"entry":"Obegin"},{"entry":["Description:","vector<StageConn>::const_iterator Obegin ( )"]},{"entry":[{},"Enumerator for the outputs of the Stage."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Returns the starting iterator for the outputs of the Stage."]},{"entry":["Exceptions:","None."]},{"entry":"Oend"},{"entry":["Description:","vector<StageConn>::const_iterator Oend ( )"]},{"entry":[{},"Enumerator for the outputs of the Stage."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Ending iterator for the outputs of the Stage."]},{"entry":["Exceptions:","None."]},{"entry":"Register"},{"entry":["Description:","void Register (string name,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CBFunctor<pair<string, \u2009Stage*>>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"cbFunc)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw (item_not_found<string>);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Registers a callback functor for changes to the named parameter. (See"]},{"entry":[{},"[CESAS])"]},{"entry":[{},"Whenever this parameter is modified, the named callback will be"]},{"entry":[{},"invoked."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: \u2009\u2009string name","Name of a parameter."]},{"entry":[{},"IN: CBFunctor cbFunc","Callback functor to be invoked when"]},{"entry":[{},{},"the named parameter is modified."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","If the given name does not specify a valid parameter for the Stage,"]},{"entry":[{},"item_not_found<name> is raised."]},{"entry":"DeRegister"},{"entry":["Description:","void DeRegister(string name,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CBFunctor<pair<string, Stage*>>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"cbFunc)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw (item_not_found<string>);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Removes a callback previously registered by RegisterCB."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: string name","Name of a parameter."]},{"entry":[{},"IN: CBFunctor cbFunc","Previously registered callback functor"]},{"entry":[{},{},"to be removed."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","If the callback cannot be deregistered item_not_found<name> is raised."]},{"entry":"GetType"},{"entry":["Description:","virtual const uint8_t* GetType ( ) = 0;"]},{"entry":[{},"Returns the type of the Stage. Must be implemented by specific types of"]},{"entry":[{},"Stages to return a string of the form \u201cStage:Class . . . \u201d by appending to"]},{"entry":[{},"the results returned from the parent classes. eg, Ipv4Classifier returns"]},{"entry":[{},"\u201cStage:Classifier:IPv4Classifier\u201d. RTTI typeid(obj).name instead"]},{"entry":[{},"returns only the class name without reference to the class hierarchy."]},{"entry":["Parameters:","None"]},{"entry":["Returns:","Type of Stage in char* format"]},{"entry":["Exceptions:","None"]},{"entry":"GetOutputMatchStages"},{"entry":["Description:","vector<Stage* > GetOutputMatchStages (uint16_t"]},{"entry":[{},"output, \u2009const \u2009\u2009StageType* \u2009filter) throws"]},{"entry":[{},"(uint_out_of_range);"]},{"entry":[{},"Returns all the Stages that are of type filter reachable from the given"]},{"entry":[{},"output. As of now StageType just contalns a uint8_t* to denote the type"]},{"entry":[{},"of Stage. Note: RTTI could be used here with a template member"]},{"entry":[{},"function"]},{"entry":[{},"Eg. template<class Type>"]},{"entry":[{},"\u2009\u2009vector<Type*> GetOutputMatches(uint16_t output, Type u)"]},{"entry":[{},"which uses dynamic cast to check if a Stage is of type u, but this"]},{"entry":[{},"requires creating unnecessary dummy objects of type u to pass in as an"]},{"entry":[{},"argument. Also having a separate filter class is more flexible, since it"]},{"entry":[{},"allows selective filtering on certain attributes of a Stage."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: uintl6_t output","The output port on which you want to"]},{"entry":[{},{},"search for a given Stage"]},{"entry":[{},"IN: const StageType *filter","The type of Stage to match. If null it"]},{"entry":[{},{},"returns all the Stages"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","vector of matching Stages that can be reached from the given output."]},{"entry":["Exceptions:","uint_out_of_range if output not valid"]},{"entry":"GetInputMatchStages"},{"entry":["Description:","vector<Stage* > GetInputMatchStages(uint16_t"]},{"entry":[{},"input, const StageType* filter)throws"]},{"entry":[{},"(uint_out_of_range);"]},{"entry":[{},"Retuns the Stages that are of type filter reachable on the given input"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: uintl6_t input","The input port on which you want to search"]},{"entry":[{},{},"for a given Stage"]},{"entry":[{},"IN: const StageType *filter","The type of Stage to match. If null it"]},{"entry":[{},{},"returns all the Stages."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","vector of matching Stages that can be reached from the given input"]},{"entry":["Exceptions:","uint_out_of_range if input not valid"]},{"entry":"GetMonitor"},{"entry":["Description:","Monitor* GetMonitor( )"]},{"entry":[{},"Get the monitor associated with the Stage"]},{"entry":["Parameters:","None."]},{"entry":["Returns:","A pointer to a monitor object. This could be null to specify, no"]},{"entry":[{},"monitoring supported by this Stage. Also it could be dynamic cast to a"]},{"entry":[{},"specific type of monitor to take advantage of finer granularity\/specific"]},{"entry":[{},"type of monitoring."]},{"entry":["Exceptions:","None"]},{"entry":"SetMonitor"},{"entry":["Description:","bool SetMonitor(const Monitor&)"]},{"entry":[{},"Sets the monitoring object for a Stage."]},{"entry":["Parameters:","IN: Monitor& The monitor object to associate with the Stage."]},{"entry":["Returns:","true if succeeds, false if not."]},{"entry":["Exceptions:","None"]},{"entry":"GetParam"},{"entry":["Description:","(protected) virtual const Parameter&"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetParam(string name)"]},{"entry":[{},"throw (item_not_found<string>)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Retrieves a parameter by name. This is used internally within the"]},{"entry":[{},"Stage. Parameters are held in a generic mechanism by the base class"]},{"entry":[{},"Stage. This enables all subclasses of Stage to have a consistent"]},{"entry":[{},"mechanism by which synchronization can be performed. In this context,"]},{"entry":[{},"a string names each parameter. These names are exclusively internal."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Parameters:","IN: string name","Name of the parameter to retrieve."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Named parameter."]},{"entry":["Exceptions:","item_not_found<string>"]},{"entry":"SetParam"},{"entry":["Description:","(protected) virtual void SetParam(string name,"]},{"entry":[{},"void *value)"]},{"entry":[{},"\u2009\u2009\u2009\u2009throw (item_not_found<string>);"]},{"entry":[{},"Sets the value of a named parameter."]},{"entry":[{},"Note: this method is specifically written to prevent Stage subclasses"]},{"entry":[{},"from adding new parameters by accidentally passing an invalid name."]},{"entry":[{},"This relies on the same exception mechanism used by GetParam."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: string name","Name of the parameter to have its deferred"]},{"entry":[{},"value set to value."]},{"entry":[{},"IN: void *value","Pointer to a new deferred value for the named"]},{"entry":[{},"parameter."]},{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","item_not_found<string>"]},{"entry":"Hw_UpdateParameter"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Description:","(protected) virtual bool Hw_UpdateParameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(string name, Parameter& p) ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0;"]},{"entry":[{},"Stage calls this routine to update a parameter in the forwarding engine"]},{"entry":[{},"(i.e. hardware). If the value could not be updated, this method should"]},{"entry":[{},"leave the hardware in the previous state and return false."]},{"entry":[{},"This method will contain platform-specific code for each subclass of"]},{"entry":[{},"Stage."]},{"entry":[{},"Note: Operations should be performed as follows:"]},{"entry":[{},"1. Read the deferred value of the given parameters."]},{"entry":[{},"2. Transform new p into hardware-specific format."]},{"entry":[{},"3. Perform an actual register poke, trap into the operating system, or"]},{"entry":[{},"driver call."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: string name","Name of the parameter."]},{"entry":[{},"IN: Parameter& p","If a parameter is to be updated, p represents a"]},{"entry":[{},{},"parameter that isDirty and needs updating"]},{"entry":[{},{},"in the hardware."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Returns: Returns true if the value was updated correctly; false if"]},{"entry":[{},"not."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Exceptions:","None."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Hw_UpdateInput Hw_UpdateOutput"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Description:","(protected) virtual bool Hw_UpdateInput"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(u_int16_t num, StageConn conn) = 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(protected) virtual bool Hw_UpdateOutput"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(u_int16_t num, StageConn conn) = 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Stage calls this routine to update an input, or an output in the"]},{"entry":[{},"forwarding engine (i.e. hardware). If the value could not be updated,"]},{"entry":[{},"this method should leave the hardware in the previous state and return"]},{"entry":[{},"false."]},{"entry":[{},"This method will contain platform-specific code for each subclass of"]},{"entry":[{},"Stage."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: u_intl6_t num","Number of the input or output."]},{"entry":[{},"\u2009IN: StageConn conn","If an input (output) is to be updated,"]},{"entry":[{},"conn contains"]},{"entry":[{},{},"the neighboring Stage and its connecting"]},{"entry":[{},{},"output (input) number."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Returns true if the value was updated correctly; false if not."]},{"entry":["Exceptions:","None"]},{"entry":"Hw_ValidateInput"},{"entry":["Description:","(protected) virtual bool"]},{"entry":[{},"Hw_ValidateInput(u_int16_t num,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"StageConn newConn) = 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Called at the beginning of connect ( ) validate input connectivity. No"]},{"entry":[{},"hardware is updated during this call."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","u_int16_t num","Number of the input being"]},{"entry":[{},"connected."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"StageConn newConn New connection to be validated."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Returns true if the new connection is valid (i.e., supported by the"]},{"entry":[{},"hardware). If the new value is somehow incompatible with the"]},{"entry":[{},"hardware, false is returned"]},{"entry":["Exceptions:","None."]},{"entry":"Hw_ValidateOutput"},{"entry":["Description:","(protected) virtual bool"]},{"entry":[{},"Hw_ValidateOutput(u_int16_t num,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"StageConn newConn) =0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Called at the beginning of connect ( ) to validate output connectivity."]},{"entry":[{},"No hardware is updated during this call."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","u_int16_t num","Number of the output being"]},{"entry":[{},"connected."]},{"entry":[{},"StageConn newConn","New connection to be validated."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Returns true if the new connection is valid (i.e., supported by the"]},{"entry":[{},"hardware). If the new value is somehow incompatible with the"]},{"entry":[{},"hardware, false is returned."]},{"entry":["Exceptions:","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}],"figref":"FIG. 4"},{"@attributes":{"id":"p-0058","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Connect the inputClassifer to the monitor, editor, and"]},{"entry":[{},"\/\/ gatherer"]},{"entry":[{},"inputClassifier->connect(0, dmux, 0);"]},{"entry":[{},"dmux->connect(0, rmon, 0);"]},{"entry":[{},"dmux->connect(1, layerer, 0);"]},{"entry":[{},"dmux->connect(2, transcoder, 0);"]},{"entry":[{},"transcoder->connect(0, layered, 1);"]},{"entry":[{},"\/\/ Explore the Outputs of the dmux."]},{"entry":[{},"#define STAGE_OF(x) (x).first"]},{"entry":[{},"#define NUM_OF(x) (x).second"]},{"entry":[{},"vector<StageConn>::const_iterator i;"]},{"entry":[{},"for (i = dmux->obegin( ); i != dmux->oend( ); ++i)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ *i hold a pointer to the neighbor and its input number."]},{"entry":[{},"Stage *neighbor = STAGE_OF(i);"]},{"entry":[{},"u_int16_t neighInputNum = NUM_OF(i);"]},{"entry":[{},"if (i == dmux->obegin( ))"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"assert(neighInputNum == 0); \/\/ RMON's input"]},{"entry":[{},"assert(neighbor == rmon);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0059","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","Stage::Parameter"]},{"entry":[{},"Specializes:","EventCallback<pair<string, Stage*>>"]},{"entry":[{},"Qualifiers:","protected"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The Stage::Parameter class  represents a Stage's parameter. The motivation for this simple class is to encapsulate the notion of double buffering (or two-phase commit). As described with reference to , a Parameter  maintains a shadow of the value currently in hardware plus a deferred value that will be placed into the hardware during the owning Stage's synchronization.","Parameters can also conveniently capture the asynchronous changes in the underlying forwarding engine hardware. To enable this, every Parameter can be given a list of callbacks to invoke when the parameter changes. The actual registration mechanism is exposed through the Stage::Register and Stage::DeRegister methods.","Related Types:","See Stage",{"@attributes":{"id":"p-0062","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Attributes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Qualifiers","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["m_currentValue","Void","* Protected","The current value of this"]},{"entry":[{},{},{},"parameter (a shadow"]},{"entry":[{},{},{},"of the hardware)."]},{"entry":["m_deferredValue","Void","* Protected","The next, or new, value of the"]},{"entry":[{},{},{},"parameter that will be placed"]},{"entry":[{},{},{},"into hardware during the"]},{"entry":[{},{},{},"next Stage synchronization."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0063","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Methods","Services"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Get","Get current value."]},{"entry":[{},"GetDeferred","Get the deferred value."]},{"entry":[{},"IsDirty","Test for value reset."]},{"entry":[{},"Set","Set deferredValue."]},{"entry":[{},"Commit","Copy deferredValue to"]},{"entry":[{},{},"currentValue."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0064","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Get"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Description:","const void *Get () const;"]},{"entry":[{},{},"Retrieves the current value (a shadow of"]},{"entry":[{},{},"the value currently in the hardware)."]},{"entry":[{},"Parameters:","None."]},{"entry":[{},"Returns:","Current value."]},{"entry":[{},"Exceptions:","None."]},{"entry":[{},"GetDeferred"]},{"entry":[{},"Description:","const void *GetDeferred () const;"]},{"entry":[{},{},"Retrieves the future value, which could be NULL."]},{"entry":[{},"Parameters:","None."]},{"entry":[{},"Returns:","Deferred value."]},{"entry":[{},"Exceptions:","None."]},{"entry":[{},"IsDirty"]},{"entry":[{},"Description:","bool IsDirty () ;"]},{"entry":[{},{},"Discover if the deferred value has been"]},{"entry":[{},{},"set since the last Commit ()."]},{"entry":[{},"Parameters:","None."]},{"entry":[{},"Returns:","True if deferred value has been set; false if not."]},{"entry":[{},"Exceptions:","None."]},{"entry":[{},"Set"]},{"entry":[{},"Description:","void Set (void *value) ;"]},{"entry":[{},{},"Sets the deferred (or new, or next) value of this parameter."]},{"entry":[{},{},"After this method returns, IsDirty ()"]},{"entry":[{},{},"will be true until the next invocation of Commit ()."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameters:","IN: void *value","A void pointer which will become the"]},{"entry":[{},{},{},"deferred value of the parameter."]},{"entry":[{},{},{},"The Parameter is not responsible for"]},{"entry":[{},{},{},"memory management of the pointer."]},{"entry":[{},"Returns:","Nothing."]},{"entry":[{},"Exceptions:","None."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Commit"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","void Commit () ;"]},{"entry":[{},"If the parameter IsDirty, commit copies the deferredValue to"]},{"entry":[{},"the currentValue and obsoletes the deferredValue. In addition,"]},{"entry":[{},"all registered callbacks are signaled to indicate a change to the underlying"]},{"entry":[{},"hardware."]},{"entry":[{},"Because of this, all implementers of Stage subclasses must call"]},{"entry":[{},"Commit after they have updated a Paramater's value."]},{"entry":[{},"Stage::Synchronize calls Commit after the"]},{"entry":[{},"parameter has been updated. After Commit is called,"]},{"entry":[{},"IsDirty is false until the next invocation of Set."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","None."]},{"entry":"EngineGraphManager Class"},{"entry":["Name:","EngineGraphManager"]},{"entry":["Specializes:","N\/A"]},{"entry":["Qualifiers:","N\/A"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The EngineGraphManager , as depicted with reference to , is a singleton class. The one instance of this class is used to gather global information (such as available Stages, constraints on interconnecting Stages, and intra-Stage parameter updating). Currently the EngineGraphManager  provides a mechanism to retrieve all of the terminal Stages (i.e., Links ) in the Engine Model. The Engine Model can then be traversed to find information on all the connected Stages.","The EngineGraphManager  exposes the possible interconnections of the Stages. Each Stage also holds an attribute optional which is true if the Stage can be bypassed. Intra-Stage parameter updating constraints are taken care of by providing read only attributes (i.e. only Get methods) for the corresponding parameters (e.g., in , if the classifier was optional, the output of the link could be directly connected to the scatterer). On the other hand, the editor being optional is implicit in the way we have a scatterer\/gatherer, which by means of parameter setting can bypass the editor. We could make the parameter read-only if that wasn't desired. If the model was completely flexible and programmable then the topology could be connected in anyway without connect throwing an exception.","The other way, is to have an mutable attribute for any connection. This has the advantage that a meta-Stage (composite Stage) defined at runtime, can be installed and removed as desired. (This can be done using the isoptional attribute in Stage too, but then that meta-Stage has to be defined at compile-time). In this case to represent an optional Stage we would have to make the outconnection of previous Stage and inconnection of the following Stage as mutable","Note: The capabilities of an FE related to links are in the Link class, other capabilities such as the ability to do certain types of filtering etc, can in some sense be represented in the interconnection of Stages. In order to represent a specific type we will use that Stage eg. Five Tuple Classifier in the interconnected model whereas to represent a general type of classification we will use Classifier Stage in the model, and the FEAPI model user can then model that Stage to be the specific type of classifier it wants.\n\nRelated Types:\n\nSee also LinksContainer.\n",{"@attributes":{"id":"p-0069","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Attributes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Qualifiers","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["m_instance","EngineGraphManager","Static","The single instance"]},{"entry":[{},{},"private","of this class."]},{"entry":["m_links","LinksContainer","Private","The list of input output"]},{"entry":[{},{},{},"Links within this"]},{"entry":[{},{},{},"instance of the"]},{"entry":[{},{},{},"Engine Model."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0070","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Methods","Services"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetInstance","Get the single instance of this class."]},{"entry":[{},"GetLinks","Get set of Links that represent inputs\/outputs to"]},{"entry":[{},{},"the engine model."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0071","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"GetInstance"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","static EngineGraphManager& GetInstance( );"]},{"entry":[{},"Gets the single instance of this class."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Returns the single instance of this class."]},{"entry":["Exceptions:","None."]},{"entry":"GetInputLinks"},{"entry":["Description:","const LinksContainer& GetLinks( );"]},{"entry":[{},"Gets the set of links that represent inputs\/outputs within"]},{"entry":[{},"this instance of the Engine Model."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Returns the Links."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Example:"},{"entry":"\/\/ Get the single instance of the EngineGraphManager"},{"entry":"\/\/ and find out how many input and output links there"},{"entry":"\/\/ are in this instance of the model"},{"entry":"\/\/ Assumption: 1. A link is both an input and output link"},{"entry":"\/\/ 2. A link will always be either at beginning or end of"},{"entry":"packet flow."},{"entry":"\/\/ If these assumptions do not hold true then we may need"},{"entry":"sets of input"},{"entry":"\/\/and output links as before."},{"entry":"EngineGraphManager& egm = EngineGraphManager::GetInstance( );"},{"entry":"const LinksContainer& links = egm.GetLinks( );"},{"entry":"cout << \u201cThere are\u201d << links.size( );"},{"entry":"cout << \u201cports on this FE\u201d << endl;"},{"entry":"\/\/ Obviously each Link is a Stage, so you can also use"},{"entry":"\/\/ the iterators to traverse the data flow network"},{"entry":"void depthFirstTraversal (Stage *s)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cout << \u201cAt Stage\u201d << s << endl;"]},{"entry":[{},"vector<StageConn>::const_iterator i;"]},{"entry":[{},"u_int16_t outNum = 0;"]},{"entry":[{},"\/\/ For each output of the given Stage, traverse it"]},{"entry":[{},"for (i = s->Obegin( ); i != s->Oend( ); ++i, ++outNum)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Find the neighbor and if it is not a link recurse"]},{"entry":[{},"Stage *neigh = STAGE_OF(i);"]},{"entry":[{},"if (!(neigh instanceof Link)) \/\/ dynamic cast in C++"]},{"entry":[{},"{"]},{"entry":[{},"\/\/ the same Stage could be encountered in multiple"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"paths"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ because of gatherer and scatteror, and hence"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ have a check to make sure this is enountered for"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"first time"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ can skip if not"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cout << \u201cOutput \u201d<< outNum;"]},{"entry":[{},"cout << \u201c is hooked to\u201d << neigh <<"]},{"entry":[{},"cout << \u201c input << NUN_OF(i) << endl;"]},{"entry":[{},"depthFirstTraversal (neigh);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"cout << \u201cLeaving Stage \u201d << s << endl;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/ For each input link, walk through the data path"},{"entry":"for (i = links.begin( ); i != links.end( ); ++i)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"depthFirstTraversal (&(*i));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0072","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"LinksContainer Class"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:",{},"LinksContainer"]},{"entry":[{},"Specializes:","N\/A"]},{"entry":[{},"Qualifiers:","N\/A"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"This class holds a list of the Links (terminal Stages) in the data-flow topology. The class provides access to an immutable iterator over these Links.","Related Types:","See also EngineGraphManager.","Attributes",{"@attributes":{"id":"p-0075","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Attributes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Type","Qualifiers","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"m_links","list<Link>","Protected","List of Links."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0076","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Methods","Services"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"begin","Get the beginning iterator for the list of"]},{"entry":[{},{},"Links."]},{"entry":[{},"end","Get the ending iterator for the list of Links."]},{"entry":[{},"size","Get the number of Links in the list."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0077","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"begin"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","list<Link>::const_iterator begin( );"]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Returns the beginning iterator for the list of Links."]},{"entry":["Exceptions:","None."]},{"entry":"end"},{"entry":["Description:","list<Link>::const_iterator end( );"]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Returns the ending iterator for the list of Links."]},{"entry":["Exceptions:","None."]},{"entry":"size"},{"entry":["Description:","int size( );"]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Returns the number of Links in the list."]},{"entry":["Exceptions:","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{},{}]},"Specific types of Stages are defined in this section. These build off the infrastructure direct graph of packet flow  depicted in FIG. . For each new type of Stage the number of inputs and outputs is specified. The parameters (or adjustments) of the particular Stage are described in terms of operations on the Stage.",{"@attributes":{"id":"p-0079","num":"0080"},"figref":["FIG. 10","FIG. 11"]},"Multiplexing and Demultiplexing Types","Scatterer Class",{"@attributes":{"id":"p-0080","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","Scatterer"]},{"entry":[{},"Specializes:","Stage"]},{"entry":[{},"Qualifiers:","N\/A"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A scatterer , as depicted in , is a subclass of Stage  has one input , multiple outputs  (-, . . . , -N), and operates much like a demultiplexor. A Scatterer Stage  copies any data on its data input  to all of its enabled outputs . A mask-instance variable  controls which outputs  are considered enabled. There are two main uses of this class:\n\n","This class is essential to representing many of the parallel operations of the underlying forwarding-engine hardware. For example, it would allow a coprocessor to be switched on and off, or a remote monitoring agent to gather statistics in parallel with standard forwarding Stages.","Related Types:",{"@attributes":{"id":"p-0083","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["See also Gatherer","Stage Parameters"]}},{"@attributes":{"id":"p-0084","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Parameter","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mask","bitmask","The mask controls where incoming"]},{"entry":[{},{},{},"packets are copied."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},{"@attributes":{"id":"p-0085","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Methods","Services"]},{"entry":["GetMask","Get the current mask value."]},{"entry":["SetMask","Set the deferred mask value."]},{"entry":"GetMask"},{"entry":["Description:","bitmask GetMask() const;"]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Current value of the mask."]},{"entry":["Exceptions:","None."]},{"entry":"SetMask"},{"entry":["Description:","void SetMask (bitmask m);"]},{"entry":[{},"Sets the deferred value of the mask"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: bitmask m","The new bitmask to use to determine what outputs"]},{"entry":[{},{},"are enabled."]},{"entry":[{},{},"Takes effect after the next Synchronize()."]},{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0086","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ The dmux object would be created as follows:"]},{"entry":[{},"Scatterer *dmux = new Scatterer(3); \/\/ 3 = # Outputs"]},{"entry":[{},"\/\/ The Scatterer would be connected to the other Stages"]},{"entry":[{},"\/\/ as in the example from the Stage class."]},{"entry":[{},"inputClassifier->Connect(0, dmux, 0);"]},{"entry":[{},"dmux->Connect(0, rmon, 0);"]},{"entry":[{},"dmux->Connect(1, layerer, 0);"]},{"entry":[{},"dmux->Connect(2, transcoder, 0);"]},{"entry":[{},"transcoder->Connect(0, layerer, 1);"]},{"entry":[{},"\/\/ Model a simple two-way switch"]},{"entry":[{},"dmux->SetMask(0\u00d71);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dmux->Synchronize( );","\/\/ Data now flows from inputClassifier"]},{"entry":[{},{},"\/\/ through rmon"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dmux->SetMask(0\u00d74);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["dmux->Synchronize( );","\/\/ Data now flows from inputClassifier"]},{"entry":[{},"\/\/ through the transcoder"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Model a replicator (duplicator)"},{"entry":"\/\/ This would be the typical use of dmux in the example model"},{"entry":"dmux->SetMask(0\u00d77);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["dmux->Synchronize( );","\/\/ Data now flows from inputClassifier"]},{"entry":[{},"\/\/ through rmon, transcoder and layerer"]},{"entry":[{},"\/\/ in parallel"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0087","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Gatherer Class"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","Gatherer"]},{"entry":[{},"Specializes:","Stage"]},{"entry":[{},"Qualifiers:","N\/A"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"A Gather class , as depicted in , is a subclass of Stage has one output  and N inputs  (-, . . . , -N). It operates much like a multiplexor. A Gatherer Stage  copies data on any of its enabled inputs  to its output . The mask-instance variable  controls which inputs are considered enabled. The Gatherer represents a simple user-controlled collection point. This might be used to merge a previously scattered data stream back into one steam.","As with Scatterer, no data actually passes through the Gatherer object, which is merely a representation of the underlying hardware.","Stage Parameters",{"@attributes":{"id":"p-0090","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Parameter","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mask","bitmask","The mask controls which incoming"]},{"entry":[{},{},{},"packets (on the input) are copied to the"]},{"entry":[{},{},{},"output."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},{"@attributes":{"id":"p-0091","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Methods","Services"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetMask","Get the current mask value."]},{"entry":[{},"SetMask","Set the deferred mask value."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0092","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"GetMask"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","bitmask GetMask() const;"]},{"entry":["Parameters:","None"]},{"entry":["Returns:","Current value of the mask."]},{"entry":["Exceptions:","None."]},{"entry":"SetMask"},{"entry":["Description:","void SetMask(bitmask m);"]},{"entry":[{},"Sets the deferred value of the mask"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: bitmask m","The new bitmask to use to determine what outputs"]},{"entry":[{},"are enabled."]},{"entry":[{},{},"Takes effect after the next Synchronize()."]},{"entry":["Returns:","Nothing."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0093","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ The layerer object would be created as follows:"]},{"entry":[{},"Gatherer *layerer = new Gatherer(2); \/\/ 2 = # Inputs"]},{"entry":[{},"\/\/ The Gatherer would be connected to the other Stages"]},{"entry":[{},"\/\/ as follows."]},{"entry":[{},"dmux->Connect(1, layerer, 0);"]},{"entry":[{},"transcoder->Connect(0, layerer, 1);"]},{"entry":[{},"layerer->Connect(0, outputPort, 0);"]},{"entry":[{},"\/\/ Set the mask to 0\u00d73 to allow packets from either the"]},{"entry":[{},"\/\/ dmux or transcoder to pass through"]},{"entry":[{},"layerer->SetMask(0\u00d73);"]},{"entry":[{},"layerer->Synchronize( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},{"@attributes":{"id":"p-0094","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SwitchFabric Class"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","SwitchFabric"]},{"entry":[{},"Specializes:","Stage"]},{"entry":[{},"Qualifiers:","N\/A"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"A SwitchFabric class , as depicted in , is a subclass of Stage  and represents a per-packet demultiplexor. A SwitchFabric  has one input  and N outputs  (-, . . . , -N). A SwitchFabric uses the incoming tag to decide on which outputs  (-, . . . , -N) to forward the packet. A SwitchFabric  has a parameter, tagMap  that defines the mapping from incoming tags to outputs .","Related Types:","See also Classifier",{"@attributes":{"id":"p-0096","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Stage Parameters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["tagMap","map<u_int64_t,","Specifies the mapping from"]},{"entry":[{},"bitmask>","incoming tags to outputs. Each bit in the"]},{"entry":[{},{},"bitmask represents one output. If a bit"]},{"entry":[{},{},"in the bitmask is set, the incoming data"]},{"entry":[{},{},"is switched out the corresponding output."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0097","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Methods","Services"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GetTagMap","Get the tag-to-output mapping table."]},{"entry":["SetTagMap","Sets the deferred value of the mapping"]},{"entry":[{},"table."]},{"entry":["AddTag","Add an entry to the mapping table."]},{"entry":["RemoveTag","Remove and entry from the mapping"]},{"entry":[{},"table."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0098","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"GetTagMap"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","map<u_int64_t, bitmask> GetTagMap( );"]},{"entry":[{},"Gets the tag-to-output mapping table."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Returns mapping table."]},{"entry":["Exceptions:","None."]},{"entry":"SetTagMap"},{"entry":["Description:","void SetTagMap(map<u_int64_t, bitmask> m);"]},{"entry":[{},"Sets the deferred value of the tag-to-output mapping table."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: m","The new mapping from incoming tags to bitmasks."]},{"entry":[{},{},"The bitmasks indicate on which outputs to"]},{"entry":[{},"forward the"]},{"entry":[{},{},"incoming data."]},{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","None."]},{"entry":"AddTag"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","void AddTag(pair<u_int64_t, bitmask> t);"]},{"entry":[{},"Adds a given entry into the tag-to-output mapping table."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: t","The new entry to add into the tagMap. If there is an"]},{"entry":[{},{},"existing entry with the same tag, the bitmask is"]},{"entry":[{},{},"replaced with this one"]},{"entry":["Returns:","Nothing"]},{"entry":["Exceptions:","None."]},{"entry":"RemoveTag"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","void RemoveTag(u_int64t)"]},{"entry":[{},"throw(item_not_found<string>);"]},{"entry":[{},"Remove the designated entry from the tagMap."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Parameters:","IN: u_int64_t t","Tag of the entry to be deleted."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","   Nothing."]},{"entry":["Exceptions:","If the entry does not exist, item_not_found<string> is raised."]},{"entry":"Example:"},{"entry":"See Ipv4Classifier."},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0099","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Link Type"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","Link"]},{"entry":[{},"Specializes:","Stage"]},{"entry":[{},"Qualifiers:","N\/A"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Additional Stage classes , are depicted in  link class , as depicted in , represents a physical link. A Link object  is intended to be the terminating (beginning or end) Stage  of a data-flow topology defined in accordance with the Engine Model. The parameters of a Link are likely candidates for event registration.",{"@attributes":{"id":"p-0101","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Stage Attributes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Attribute","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"m_number","uint16_t","Number of the link"]},{"entry":[{},"m_name","string","Name of the interface eg. eth0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0102","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Stage Parameters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["status","enum","Values could be Up, Down, or AdminDown"]},{"entry":["speed","Integer","Kbits\/s"]},{"entry":["L2Address","string","The L2 address of the link. A link can"]},{"entry":[{},{},"have multiple L2address? May"]},{"entry":[{},{},"need to make this a vector too."]},{"entry":["L3Address","Vector<L","The set of L3Addresses for this link."]},{"entry":[{},"3Address>","For description of L3Address see Appendix."]},{"entry":["type","Enum","The type of the Link (e.g., Ethernet, ATM, Frame"]},{"entry":[{},{},"Relay, etc.)"]},{"entry":[{},{},"This enum should be consistent with a known"]},{"entry":[{},{},"standard or at least within ON project."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0103","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Methods","Services"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetStatus","Test if Link is operating."]},{"entry":[{},"SetStatus","Set operating state of Link to"]},{"entry":[{},{},"UP or AdminDown"]},{"entry":[{},"GetType","Get Link type (e.g., Ethernet,"]},{"entry":[{},{},"ATM, Frame Relay, etc.)"]},{"entry":[{},"GetL2Address","Get the L2 address of the Link."]},{"entry":[{},"BeginL3Address","Get the beginning iterator to"]},{"entry":[{},{},"set of L3 addresses of the Link."]},{"entry":[{},"EndL3Address","Get the ending iterator to set"]},{"entry":[{},{},"of L3 addresses of the link"]},{"entry":[{},"GetSpeed","Get the speed of the Link."]},{"entry":[{},"GetNumL3Address","Get the number of L3 addresses"]},{"entry":[{},{},"of the link"]},{"entry":[{},"AddL3Address","Adds an L3 address to the Link"]},{"entry":[{},"RemoveL3Address","Removes an L3 address from the"]},{"entry":[{},{},"link"]},{"entry":[{},"GetName","Get the name of the link"]},{"entry":[{},"GetNumber","Get the number of this link"]},{"entry":[{},"SendPacket","Send the specified packet on"]},{"entry":[{},{},"this link"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0104","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"GetStatus"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","enum GetStatus( ) const;"]},{"entry":[{},"Tests if Link is operational."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Returns Up if Link is operating; Down or AdminDown if not."]},{"entry":["Exceptions:","None."]},{"entry":"SetStatus"},{"entry":["Description:","void SetStatus(bool en);"]},{"entry":[{},"Sets the operating state of the Link."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: bool en","Set to true if the Link is to be brought up;"]},{"entry":[{},{},"false if the Link is to be taken down."]},{"entry":[{},{},"Only the link class will set the up attribute"]},{"entry":[{},{},"directly to Down if the link goes down."]},{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","None."]},{"entry":"GetType"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","string GetType( ) const;"]},{"entry":[{},"Gets the Link type (e.g., Ethernet, ATM, Frame Relay, etc.)."]},{"entry":["Parameter:","None."]},{"entry":["Returns:","Type of the physical Link."]},{"entry":["Exceptions:","None."]},{"entry":"GetL2Address"},{"entry":["Description:","string GetL2Address( ) const;"]},{"entry":[{},"Gets the L2 address of the physical Link."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","L2 address (string) of the Link."]},{"entry":["Exceptions:","None."]},{"entry":"BeginL3Address"},{"entry":["Description:","vector<L3ADDRESS>::const_iterator BeginL3Address( )"]},{"entry":[{},"const;"]},{"entry":[{},"Gets the beginning iterator to the set of L3 address of the Link."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","beginning iterator to the set of L3 address of the Link."]},{"entry":["Exceptions:","None."]},{"entry":"EndL3Address"},{"entry":["Description:","vector<L3ADDRESS>::const_iterator EndL3Address( )"]},{"entry":[{},"const;"]},{"entry":[{},"Gets the ending iterator to the set of L3 address of the Link."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","ending iterator to the set of L3 address of the Link."]},{"entry":["Exceptions:","None"]},{"entry":"GetSpeed"},{"entry":["Description:","u_int32_t GetSpeed( ) const;"]},{"entry":[{},"Get the Link speed in Kbits\/s"]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Link speed."]},{"entry":["Exceptions:","None."]},{"entry":"GetNumL3Address"},{"entry":["Description:","u_int16_t GetNumL3Address( ) const;"]},{"entry":[{},"Get the Number of L3 addresses on this link."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Um of L3 addresses"]},{"entry":["Exceptions:","None"]},{"entry":"AddL3Address"},{"entry":["Description:","void AddL3Address(L3Address L3Addr) throw"]},{"entry":[{},"(cant_add_L3);"]},{"entry":[{},"Add the given L3Address to the link"]},{"entry":["Parameters:","IN: L3Address L3Addr \u2009\u2009L3Address to add"]},{"entry":["Returns:","None"]},{"entry":["Exceptions:","cant_add_L3_exception"]},{"entry":"RemoveL3Address"},{"entry":["Description:","void RemoveL3Address(L3Address L3Addr) throw"]},{"entry":[{},"(item_not_found<string>;"]},{"entry":[{},"Remove the given L3Address to the link"]},{"entry":["Parameters:","IN: L3Address L3Addr \u2009\u2009L3Address to remove"]},{"entry":["Returns:","None"]},{"entry":["Exceptions:","item_not_found<string>"]},{"entry":"GetName"},{"entry":["Description:","string GetName( ) const;"]},{"entry":[{},"Get the Name of this link eg. eth0."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Name of link."]},{"entry":["Exceptions:","None"]},{"entry":"GetNumber"},{"entry":["Description:","string GetNumber( ) const;"]},{"entry":[{},"Get the Number of this link."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Number of the link."]},{"entry":["Exceptions:","None"]},{"entry":"SendPacket"},{"entry":["Description:","virtual uint32_t SendPacket(uint16_t protocol, const"]},{"entry":[{},"uint8_t* data, const ulnt32_t len )= 0;"]},{"entry":[{},"This is a virtual function which will be defined in the specific link type"]},{"entry":[{},"for a particular Hw\/OS and will send the packet out on that link."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: uint16_t protocol","\u2009\u2009\u2009\u2009L3 protocol of the packet to send"]},{"entry":[{},"IN: uint8_t *data","Pointer to packet data to send"]},{"entry":[{},"IN: uint32_t Len","length of the data packet"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","uint32_t"]},{"entry":["Exceptions:","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"Note: To redirect a packet to CE or APP server, we will probably have special links for the purpose. "},{"entry":"Note: When a packet is received from a link, the tag will be set to a value identifying the link it arrived on. "}]}}]}},"br":{}},{"@attributes":{"id":"p-0105","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Register a callback to be notified of changes to the"]},{"entry":[{},"\/\/ operational status of a Link."]},{"entry":[{},"void callback(string name, Stage *s)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cout << \u201cThe Link's \u201d <<name << \u201cParameter has \u201d;"]},{"entry":[{},"cout << \u201cchanged state to\u201d << s->GetStatus() << endl;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"CBFunctor<string> cbFunc(NULL, &callback);"]},{"entry":[{},"EngineGraphManager& egm = EngineGraphManager::getInstance( ) ;"]},{"entry":[{},"Link 1 = egm.GetLinks( ).begin( );"]},{"entry":[{},"l.RegisterCB(\u201cup\u201d, &cbFunc);"]},{"entry":[{},"\/\/ Now any changes to the link state will invoke callback( )"]},{"entry":[{},"l.SetStatus(false);"]},{"entry":[{},"l.Synchronize( ); \/\/ callback( ) invoked!"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"Note: For link statistics you can now query the monitor object associated with the link. "]}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0106","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Queue Type"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","Queue"]},{"entry":[{},"Specializes:","Stage"]},{"entry":[{},"Qualifiers:","None."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The Queue class type , as depicted in , represents a first-in-first-out store within the forwarding engine hardware. The motivation for having Queues  in the Engine Model is to provide a representation of any internal buffering. Right now the capacity is just in bytes.",{"@attributes":{"id":"p-0108","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Stage Attributes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Attribute","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["M_numbytes","U_int32_t","Number of bytes the queue holds"]},{"entry":["m_packets","u_int32_t","Number of packets the queue holds"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0109","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Stage Parameters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameter","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"m_depth","u_int32_t","Number of bytes the queue can hold."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0110","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Methods","Services"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetDepth","Get the number of bytes the queue can"]},{"entry":[{},{},"hold."]},{"entry":[{},"Set Depth","Set the number of bytes the queue can"]},{"entry":[{},{},"hold."]},{"entry":[{},"GetNumBytes","Get the number of bytes the queue"]},{"entry":[{},{},"presently holds"]},{"entry":[{},"GetNumPackets","Get the number of packets the queue"]},{"entry":[{},{},"holds."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0111","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GetDepth",{},{}]},{"entry":["Description:","u_int32_t GetDepth () const;"]},{"entry":[{},"Gets the number of bytes the queue"]},{"entry":[{},"can hold."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Depth of queue."]},{"entry":["Exceptions:","None."]},{"entry":"SetDepth"},{"entry":["Description:","bool SetDepth (u_int32_t d);"]},{"entry":[{},"Sets the depth of the queue."]},{"entry":["Parameters","IN: u_int32_t d","New depth of the"]},{"entry":[{},{},"queue."]},{"entry":["Returns:","True if dept set successfully else"]},{"entry":[{},"false."]},{"entry":["Exceptions:","None."]},{"entry":"GetNumBytes"},{"entry":["Description:","void GetNumBytes ();"]},{"entry":[{},"Gets the number of bytes in the"]},{"entry":[{},"queue."]},{"entry":["Parameters","None"]},{"entry":["Returns:","Number of bytes in the queue"]},{"entry":["Exceptions:","None"]},{"entry":"GetNumPackets"},{"entry":["Description:","void GetNumPackets ();"]},{"entry":[{},"Gets the number of packets in the"]},{"entry":[{},"queue."]},{"entry":["Parameters","None"]},{"entry":["Returns:","Number of packets in the queue"]},{"entry":["Exceptions:","None"]},{"entry":"Example:"},{"entry":"See Scheduler."},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":"Note: "},{"entry":"Now since the monitoring is part of a Stage, the queue could monitor how many packets were received, dropped and transmitted etc. "}]}}}}},{"@attributes":{"id":"p-0112","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Classifier Type"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","Classifier"]},{"entry":[{},"Specializes:","SingleIOStage"]},{"entry":[{},"Qualifiers:","Abstract"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"A Classifier class , as depicted in , is a Stage with one input  and outputs  (-, . . . , -N). A Classifier object  represents a Stage that matches packets against a set of patterns (or filters) and then forwards the packet with a specified output tag on a specified output. When a packet, including a tag, arrives on the input , a Classifier  attempts to match the packet against an ordered list of patterns (the patternTable parameter ). Once a match is found, the packet is forwarded out the proper output  with a modified tag.","The following are characteristics of the Classifier interface:\n\n","The following pseudo-code illustrates how a Classifier  should work, as depicted with reference to FIG. :\n\n","In this example, the pattern , inTag , and outTag  are specified by each entry in the patternTable .","Finally, the abstract Classifier class  overrides the UpdateHardware method of the Stage class. This is done so that each specific Classifier implementation does not have to implement UpdateHardware. Rather, Classifier takes over this responsibility and calls three methods: Hw_DeleteEntry( ), Hw_AddEntry( ), and Hw_ModifyEntry( ). Classifier::UpdateHardware( ) calls hw_xxxEntry( ) methods for only those entries in the action table that have changed. This can potentially reduce hardware updates.",{"@attributes":{"id":"p-0118","num":"0127"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Related Types:"]},{"entry":[{},"typedef u_int64_t bitmask;"]},{"entry":[{},"typedef pair<bitmask, u_int64_t> MaskValue;"]},{"entry":[{},"typedef pair<T, MaskValue> ClsInput;"]},{"entry":[{},"typedef pair<MaskValue, u_int16_t> ClsOutput;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0119","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Stage Parameters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["m_patternTable","map<ClsInput,","An ordered set of patterns with"]},{"entry":[{},"ClsOutput>","corresponding output tag modifica-"]},{"entry":[{},"with ordering","tions. Each entry in this table con-"]},{"entry":[{},{},"tains the sub-class specific pattern,"]},{"entry":[{},{},"the incoming tag pattern, the out-"]},{"entry":[{},{},"going tag pattern and the output con-"]},{"entry":[{},{},"nection to send the packet for a"]},{"entry":[{},{},"graphical representation of this data"]},{"entry":[{},{},"structure."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0120","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Methods","Services"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetTable","Get the complete pattern table."]},{"entry":[{},"SetTable","Set (replace) the complete pattern table."]},{"entry":[{},"AddEntry","Add a new entry to the pattern table."]},{"entry":[{},"RemoveEntry","Delete an entry from the pattern table."]},{"entry":[{},"UpdateHardware","Selectively update hardware as required."]},{"entry":[{},"Hw_DeleteEntry","Delete an entry from the hardware."]},{"entry":[{},"Hw_AddEntry","Add an entry to the hardware."]},{"entry":[{},"Hw_ModifyEntry","Replace an existing pattern with a new value."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0121","num":"0130"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GetTable",{}]},{"entry":["Description:","map<ClsInput, ClsOutput> GetTable () const;"]},{"entry":[{},"Gets the complete pattern table."]},{"entry":[{},"See the description of the patternTable parameter for the format of"]},{"entry":[{},"this table. The type T (which is part of ClsInput) in the table is"]},{"entry":[{},"specified by the concrete subclasses of Classifier."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Complete pattern table."]},{"entry":["Exceptions:","None."]},{"entry":"SetTable"},{"entry":["Description:","void SetTable(map<clsInput, ClsOutput> t);"]},{"entry":[{},"Sets (replaces) the pattern table."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: map t","New pattern table."]},{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","None."]},{"entry":"AddEntry"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","void AddEntry (ClsInput in, MaskValue outTag,"]},{"entry":[{},"u_int16_t outConn);"]},{"entry":[{},"Add a new entry into the pattern table."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: ClsInput in","The key of the new pattern-table"]},{"entry":[{},"entry. This"]},{"entry":[{},{},"key contains both a subclass-specific"]},{"entry":[{},{},"pattern and an input tag pattern. The"]},{"entry":[{},{},"input tag pattern is a mask-value pair."]},{"entry":[{},{},"See the description of this class for"]},{"entry":[{},{},"how the input tag pattern is used."]},{"entry":[{},"IN:MaskValue outTag","This combined with the outConn is"]},{"entry":[{},{},"the value of the new pattern-table"]},{"entry":[{},{},"entry. This is a mask-value pair that is"]},{"entry":[{},{},"applied to the input tag to produce an"]},{"entry":[{},{},"output tag. See the description of this"]},{"entry":[{},{},"class for how this value is used."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN: u_int16_t outConn","The output connection on which to output the"]},{"entry":[{},{},"packet with the modified tag. This together"]},{"entry":[{},{},"with the outTag forms the new value in the"]},{"entry":[{},{},"pattern table for key in."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"RemoveEntry"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","void RemoveEntry (ClsInput in)"]},{"entry":[{},"throw(item_not_found<string>);"]},{"entry":[{},"Delete an entry from the pattern table."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: ClsInput in","Key of the entry to delete."]},{"entry":["Returns:","Nothing."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Exceptions:","Throws item_not_found<string> if entry does not exist."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"UpdateHardware"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Description:","(private) virtual bool"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"UpdateHardware (string name,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameter& p);"]},{"entry":[{},"This method is overridden from class Stage and is used to make the"]},{"entry":[{},"implementation of specific Classifier types easier. The only value"]},{"entry":[{},"of p for Classifiers is the patternTable."]},{"entry":[{},"1. Compares the current value of the patternTable to the deferred"]},{"entry":[{},"value."]},{"entry":[{},"2. Calls Hw_DeleteEntry () for each entry found in the current"]},{"entry":[{},"value but not in the deferredValue."]},{"entry":[{},"3. Calls Hw_AddEntry () for each entry found in the deferred value"]},{"entry":[{},"and not in the current value."]},{"entry":[{},"4. Calls Hw_ModifyEntry for any keys common to both the current"]},{"entry":[{},"and deferred value, but with different values."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: string name","Name of the Parameter to update."]},{"entry":[{},{},"This should always be \u201cpatternTable.\u201d"]},{"entry":[{},"IN: Parameter& p","Parameter (patternTable) to be updated."]},{"entry":[{},{},"Contains the current value of the hardware"]},{"entry":[{},{},"(shadow) as well as the deferred (new) value."]},{"entry":[{},{},"This method uses these two values to"]},{"entry":[{},{},"compare the existing table to the new table"]},{"entry":[{},{},"and calls Hw_XxxEntry () only for"]},{"entry":[{},{},"differences between the current and deferred"]},{"entry":[{},{},"tables."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","False if any of the Hw_XxxEntry () calls return false; otherwise"]},{"entry":[{},"true."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Hw_DeleteEntry"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","(protected) bool Hw_DeleteEntry (ClsInput in) = 0;"]},{"entry":[{},"Delete the given entry from the hardware."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Parameters:","IN: ClsInput in","Entry to delete."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","True if successful, false if not."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Hw_AddEntry"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","(protected) bool Hw_AddEntry(ClsInput in,"]},{"entry":[{},"MaskValue out, u_int16_t outConn);"]},{"entry":[{},"Adds the given entry into the hardware."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN:","ClsInput in","The key of the pattern table to"]},{"entry":[{},"add."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN:","MaskValue out","The mask\/value pair specifying how"]},{"entry":[{},"to"]},{"entry":[{},{},{},"modify the input tag to produce the"]},{"entry":[{},{},{},"output tag."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN: u_int16_t","The output connection on which to output the"]},{"entry":[{},{},"packet with the modified tag."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","True if successful; false if not."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Hw_ModifyEntry"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","(protected) bool Hw_ModifyEntry (ClsInput in,"]},{"entry":[{},"MaskValue out, u_int16_t outConn);"]},{"entry":[{},"Replaces the existing pattern with the new value."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: ClsInput in","The existing entry in the pattern table. The"]},{"entry":[{},"value"]},{"entry":[{},{},"of this entry should be replaced with out."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN:","MaskValue out","The new mask-value"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pair to replace the existing entry."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN: u_int16_t","The output connection on which to output the"]},{"entry":[{},{},"packet with the modified tag"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","True if successful, false if not."]},{"entry":["Exceptions:","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0122","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Since a Classifier outputs a tag and Editors look at tags"]},{"entry":[{},"\/\/ as input, they will typically be coupled together"]},{"entry":[{},"Classifier *cls = new Classifier (); \/\/ by default a single"]},{"entry":[{},"I\/O classifier"]},{"entry":[{},"Editor *ed = new Editor ();"]},{"entry":[{},"\/\/ Hook the classifier to the Editor. This would be"]},{"entry":[{},"\/\/ useful for firewalling, NAT, etc."]},{"entry":[{},"cls.Connect (0, ed, 0);"]},{"entry":[{},"\/\/ See the subclasses of Classifier for concrete examples"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0123","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","IPFiveTupleClassifier"]},{"entry":[{},"Specializes:","Classifier<FiveTuple>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{},{}]},{"@attributes":{"id":"p-0124","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ A 5-tuple classifier could be used for a myriad of"]},{"entry":[{},"\/\/ purposes depending upon the editor or switch fabric it is"]},{"entry":[{},"\/\/ coupled with."]},{"entry":[{},"IPFiveTupleClassifier *cls = new IPFiveTupleClassifier ();"]},{"entry":[{},"\/\/ Create a simple pattern table that contains"]},{"entry":[{},"\/\/ two patterns: one to pass HTTP packets, the other"]},{"entry":[{},"\/\/ drop anything"]},{"entry":[{},"#define PATTERN (x) (x) .first.first"]},{"entry":[{},"#define IN_TAG_MASK (x) (x) .first.second.first"]},{"entry":[{},"#define IN_TAG_VALUE (x) (x).first.second.second"]},{"entry":[{},"#define OUT_TAG_MASK (x) (x).second.first.first"]},{"entry":[{},"#define OUT_TAG_VALUE (x) (x) .second.first.second"]},{"entry":[{},"#define OUT_PORT (x) (x).second.second"]},{"entry":[{},"pair<ClsInput, Output> http, any;"]},{"entry":[{},"\/\/ just a representation"]},{"entry":[{},"PATTERN (http) = new FiveTuple (\u201c*\u201d, \u201c*\u201d, \u201c*\u201d, 0, 80);"]},{"entry":[{},"IN_TAG_MASK (http) = 0x0;"]},{"entry":[{},"IN_TAG_VALUE (http) = 0x0; \/\/ Says to ignore the input tag"]},{"entry":[{},"OUT_TAG_MASK (http) = 0xffffffffffffffff;"]},{"entry":[{},"OUT_TAG_VALUE (http) = ACCEPT_TAG; \/\/ output tag value"]},{"entry":[{},"OUT_PORT (http) = 0;"]},{"entry":[{},"PATTERN (any) = new FiveTuple (\u201c*\u201d, \u201c*\u201d, \u201c*\u201d, 0, 0);"]},{"entry":[{},"IN_TAG_MASK (any) = 0x0;"]},{"entry":[{},"IN_TAG_VALUE (any) = 0x0; \/\/ Say to ignore the input tag"]},{"entry":[{},"OUT_TAG_MASK (http) = 0x0;"]},{"entry":[{},"OUT_TAG_VALUE (http) = 0x0; \/\/ output tag = input tag"]},{"entry":[{},"OUT_PORT (http) = 0;"]},{"entry":[{},"cls.AddEntry (http.first, http.second.first,"]},{"entry":[{},"http.second.second);"]},{"entry":[{},"cls.AddEntry (any.first, any.second.first, any.second.second);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0125","num":"0134"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","IPv4Classifier"]},{"entry":[{},"Specializes:","Classifier<RouteEntry>"]},{"entry":[{},"Qualifiers:","None."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},{"@attributes":{"id":"p-0126","num":"0135"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ A IPv4 classifier would be used for routing"]},{"entry":[{},"\/\/ 1 input, 4 outputs"]},{"entry":[{},"IPv4Classifier *rtr = new IPv4Classifier (4);"]},{"entry":[{},"\/\/ Install a route"]},{"entry":[{},"pair<ClsInput, ClsOutput> e;"]},{"entry":[{},"PATTERN (e) = new RouteEntry (\u201c1.1.0.0\u201d, 0xffff0000,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201c2.2.2.251\u201d, \u201ceth3\u201d, 10);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"OUT_TAG_MASK (e) = 0xffffffffffffffff;"]},{"entry":[{},"OUT_TAG_VALUE (e) = 4;"]},{"entry":[{},"OUT_PORT (e) = 4; \/\/ 4 = connected to link eth3"]},{"entry":[{},"rtr.AddEntry (e.first. e.second.first, e.second.second);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0127","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","Editor"]},{"entry":[{},"Specializes:","Stage"]},{"entry":[{},"Qualifiers:","Abstract"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"An Editor class , as depicted in , is a Stage  that modifies or alters packets passing through it. Editor  maintains an action table that is keyed by the tags that come from an upstream Classifer. The Engine Model does not specify the actual value of the tag. The only requirement is that there must be a contract between the upstream Classifier that creates the tags and the downstream Editor Stage. This contract means that the tags sent out by the Classifier are the same as the keys in the Editor's actionTable. For Linux, an editor will always be preceded by a Classifier.","The value in the Editor's action table that corresponds to an incoming tag specifies how to modify the current packet for that tag and on which connection to output. Editors do not modify the outgoing tag. The concrete subclasses of Editor define the format of the action table.","Finally, like Classifier, the abstract Editor class overrides the updateHardware method of the Stage class. This is done for the same reason, and with the same mechanism, as Classifier. See Classifier, Section 0, for details.","Related Types:",{"@attributes":{"id":"p-0131","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":"typdef pair<T, u_int16_t>=OutputAction\/\/u16 is the output port on which to output the packet."}},{"@attributes":{"id":"p-0132","num":"0141"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Stage Parameters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["ActionTable","map<MaskValue,","A collection of key, value pairs. The"]},{"entry":[{},"OutputAction>","keys are of the same type as the in-"]},{"entry":[{},{},"coming tags. The values specify how to"]},{"entry":[{},{},"edit the packet. The actions are specific"]},{"entry":[{},{},"to the concrete subclasses of Editor."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0133","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Methods","Services"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetTable","Get complete pattern table."]},{"entry":[{},"SetTable","Set (replace) pattern table."]},{"entry":[{},"AddEntry","Add an entry to the pattern table."]},{"entry":[{},"RemoveEntry","Remove an entry from the pattern table."]},{"entry":[{},"UpdateHardware","Selectively update hardware as required."]},{"entry":[{},"Hw_DeleteEntry","Delete a specified entry from the hardware."]},{"entry":[{},"Hw_AddEntry","Add an entry to the hardware."]},{"entry":[{},"Hw_ModifyEntry","Update the entry for a specified tag."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0134","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GetTable",{}]},{"entry":["Description:","map<MaskValue, OutputAction> GetTable () const;"]},{"entry":[{},"Get the complete pattern table. The format of each entry (T) is specified"]},{"entry":[{},"by the concrete subclasses of Classifier."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Complete pattern table."]},{"entry":["Exceptions:","None."]},{"entry":"SetTable"},{"entry":["Description:","void SetTable (map<Maskvalue, OutputAction> t);"]},{"entry":[{},"Set (replace) the pattern table."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Parameters:","IN: map t","New pattern table."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","None."]},{"entry":"AddEntry"},{"entry":["Description:","void AddEntry (pair<MaskValue, OutputAction> e);"]},{"entry":[{},"Adds a new entry into the pattern table."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: pair e","Entry to add into the pattern table."]},{"entry":["Returns:","Nothing."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"RemoveEntry"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Description:","void RemoveEntry (pair<Maskvalue, OutputAction> e)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw (item_not_found<string>);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Delete an entry from the pattern table."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: pair e","Entry to delete from pattern table."]},{"entry":["Returns:","Nothing."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Exceptions:","Throws item_not_found<string> if entry does not exist."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"UpdateHardware"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","(private) virtual"]},{"entry":[{},"bool UpdateHardware (string name, Parameter& p);"]},{"entry":[{},"This method is overridden from class Stage and is used to make the"]},{"entry":[{},"implementation of specific Editor types easier. The only value of p"]},{"entry":[{},"for an Editor is the actionTable."]},{"entry":[{},"1. Compare the current value of the actionTable to the deferred"]},{"entry":[{},"value."]},{"entry":[{},"2. Call Hw_DeleteEntry () for each entry found in the current value"]},{"entry":[{},"but not in the deferred value."]},{"entry":[{},"3. Call Hw_AddEntry () for each entry found in the deferred value but"]},{"entry":[{},"not in the current value."]},{"entry":[{},"4. Calls Hw_ModifyEntry () for any keys common to both the"]},{"entry":[{},"current and deferred values, but with different action values."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: string name","The string representing the name of the"]},{"entry":[{},{},"Parameter to update. Should always be"]},{"entry":[{},{},"\u201cactionTable\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN:","Parameter& p","The parameter (actionTable) to be"]},{"entry":[{},{},{},"updated."]},{"entry":[{},{},{},"This parameter contains the current value of"]},{"entry":[{},{},{},"the hardware (shadow) as well as the deferred"]},{"entry":[{},{},{},"(new) value. This method uses these two"]},{"entry":[{},{},{},"values to compare the existing table to the"]},{"entry":[{},{},{},"new table and only calls hw_xxxEntry ()"]},{"entry":[{},{},{},"for differences between the current and"]},{"entry":[{},{},{},"deferred tables."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","False if any of the Hw_XxxEntry calls return false; otherwise true."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Hw_DeleteEntry"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","(protected) bool Hw_DeleteEntry (pair<MaskValue,"]},{"entry":[{},"OutputAction> e) = 0;"]},{"entry":[{},"Delete the given entry from the hardware."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN:",":pair<MaskValue, OutputAction>","Entry to"]},{"entry":[{},"delete."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Returns true if successful, false if not."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Hw_AddEntry"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","(protected) bool Hw_AddEntry (pair<MaskValue,"]},{"entry":[{},"OutputAction> e);"]},{"entry":[{},"Add the given entry into the hardware."]},{"entry":["Parameters:","IN: :pair<MaskValue, OutputAction> Entry to add."]},{"entry":["Returns:","True if successful, false if not."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Hw_ModifyEntry"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","(protected) bool Hw_ModifyEntry (pair<MaskValue,"]},{"entry":[{},"OutputAction> e);"]},{"entry":[{},"Update the value (OutputAction) for the given tag (MaskValue) in"]},{"entry":[{},"the hardware."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: pair<MaskValue, OutputAction>","Entry to"]},{"entry":[{},"modify."]},{"entry":["Returns:","True if successful, false if not."]},{"entry":["Exceptions:","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":"Note: "},{"entry":"Some examples of specific editors include ones used for redirecting traffic to CE or App server. "}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0135","num":"0144"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Scheduler"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","Scheduler"]},{"entry":[{},"Specializes:","Stage"]},{"entry":[{},"Qualifiers:","Abstract"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"A Scheduler class , as depicted in , represents a Stage  that services (dequeues) packets from several input queues  (-, . . . , -N) and copies them to one output . The concrete sub-classes of Scheduler (, ) specify additional parameters to control the policy behind this scheduling.","Example:",{"@attributes":{"id":"p-0137","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ A Scheduler would typically be used at either input"]},{"entry":[{},"\/\/ or output. In this case, we build a Scheduler"]},{"entry":[{},"\/\/ to provide two traffic classes on an output link"]},{"entry":[{},"Link& 1 = *(LinksContainer: :begin () );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Scheduler *sch = new Scheduler (2);","\/\/ two input queues"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Queue","*q1 = new Queue (200),","\/\/ packet depth"]},{"entry":[{},{},"*q2 = new Queue (500);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"q1.Connect (0, sch, 0);"]},{"entry":[{},"q2.Connect (0, sch, 1);"]},{"entry":[{},"sch.Connect (0, 1, 0);"]},{"entry":[{},"\/\/ Now add a classifier to place packets"]},{"entry":[{},"\/\/ into the queues"]},{"entry":[{},"\/\/ here it is abstract for demonstration purpose, have a"]},{"entry":[{},"spcific instance \/\/here"]},{"entry":[{},"Classifier *cls = new Classifier (2); \/\/ 2 outputs"]},{"entry":[{},"cls.Connect (0, q1, 0);"]},{"entry":[{},"cls.Connect (1, q2, 0);"]},{"entry":[{},"\/\/ Now depending upon the classifier (which is not"]},{"entry":[{},"\/\/ specified in this example) and the scheduling policy"]},{"entry":[{},"\/\/ of the Scheduler (also not shown), the output link"]},{"entry":[{},"\/\/ will output packets based on the two queues."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0138","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Logger Stage"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","Logger"]},{"entry":[{},"Specializes:","None"]},{"entry":[{},"Qualifiers:","None"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"This is a concrete Stage that is empty, essentially a null Stage. It only holds on to a monitoring object, so can be used as a logging Stage. A logger can have either 0 or 1 outputs. If it has 0 outputs it passively monitors the packets in parallel with possibly other operations. If it has one output, it outputs the packet without modification on that output.",{"@attributes":{"id":"p-0140","num":"0149"},"tables":{"@attributes":{"id":"TABLE-US-00058","num":"00058"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Monitoring Types"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Monitor",{}]},{"entry":[{},"Name:","Monitor"]},{"entry":[{},"Specializes:","None"]},{"entry":[{},"Qualifiers:","None."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The monitor class , as depicted in , allows a user to gather statistics (e.g., packet counts) for each input and output of the Stage that's owns it. There may be sub-types like RMON  and ClassifierMonitor .",{"@attributes":{"id":"p-0142","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00059","num":"00059"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Attributes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Attribute","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["m_owner","Stage&","A reference to the Stage that holds this monitor"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0143","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00060","num":"00060"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Methods","Services"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GetInputBytes","Gets the number of bytes arriving on the"]},{"entry":[{},"given input."]},{"entry":["GetInputPackets","Gets the number of packets arriving on the"]},{"entry":[{},"given input"]},{"entry":["GetOutputBytes","Gets the number of bytes leaving the given"]},{"entry":[{},"output"]},{"entry":["GetOutputPackets","Get the number of packets leaving the given"]},{"entry":[{},"output"]},{"entry":["GetTotalInputPackets","Total packets arriving in the Stage"]},{"entry":["GetTotalInputBytes","Total bytes arriving in the Stage"]},{"entry":["GetTotalOutputPackets","Total packets leaving the Stage"]},{"entry":["GetTotalOutputBytes","Total bytes leaving the Stage"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0144","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00061","num":"00061"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"GetInputBytes\/GetInputPackets"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","uint32_t GetInputBytes (uint16_t input) const;"]},{"entry":[{},"Uint32_t GetInputPackets (uint16_t input) const;"]},{"entry":[{},"Gets the bytes(packets) arriving on a particular input of the owner Stage."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: uint16_t","Input for which number of bytes(packets)"]},{"entry":[{},"required."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Number of bytes(packets) on the given input of owner Stage."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"GetOutputBytes\/GetOutputpackets"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","uint32_t GetOutputBytes (uint16_t output) const;"]},{"entry":[{},"Uint32_t GetOutputpackets (uint16_t output) const;"]},{"entry":[{},"Gets the bytes(packets) leaving on a particular output of the owner"]},{"entry":[{},"Stage."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: uint16_t","output for which number of bytes(packets)"]},{"entry":[{},"required."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Number of bytes(packets) on the given output of owner Stage."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"GetTotalInputBytes\/GetTotalInputPackets"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","uint32_t GetTotalInputBytes () const;"]},{"entry":[{},"Uint32_t GetTotalInputpackets () const;"]},{"entry":[{},"Gets the total bytes(packets) arriving at the owner Stage."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Number of bytes(packets) arriving at the owner Stage."]},{"entry":["Exceptions:","None."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"GetTotalOutputBytes\/GetTotalOutputPackets"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","uint32_t GetTotalOutputBytes () const;"]},{"entry":[{},"Uint32_t GetTotalOutputPackets () const;"]},{"entry":[{},"Gets the total bytes(packets) leaving the owner Stage."]},{"entry":["Parameters:","None."]},{"entry":["Returns:","Number of bytes(packets) leaving the owner Stage."]},{"entry":["Exceptions:","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{},{}]},{"@attributes":{"id":"p-0145","num":"0154"},"tables":{"@attributes":{"id":"TABLE-US-00062","num":"00062"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ClassifierMonitor"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name:","ClassifierMonitor"]},{"entry":[{},"Specializes:","Monitor"]},{"entry":[{},"Qualifiers:","Abstract."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"A ClassifierMonitor class , as depicted in , is an abstract class in a sense similar to the Classifier Stage. Specific types such as FiveTupleClassifierMonitor will specify the pattern, and hence the ClsInput for which the statistics is required.","(Or since the map in classifier is ordered, we could have just a patternid\/position as input, and get statistics for it; this would be more generic, but with less intuition about what the pattern actually is.)",{"@attributes":{"id":"p-0148","num":"0157"},"tables":{"@attributes":{"id":"TABLE-US-00063","num":"00063"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Related Types:"},{"entry":"typedef pair<bitmask, uint64_t> Mask Value"},{"entry":"typedef pair<T, MaskValue> ClsInput \/\/ T is specified by specific types of"},{"entry":"classifiermonitors."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":[{},{},{}]},{"@attributes":{"id":"p-0149","num":"0158"},"tables":{"@attributes":{"id":"TABLE-US-00064","num":"00064"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Methods","Services"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GetNumBytes","Gets the number of bytes matching a given pattern."]},{"entry":["GetNumPackets","Gets the number of packets matching a given pattern"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0150","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00065","num":"00065"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GetNumBytes\/GetNumPackets"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description:","uint32_t GetNumBytes (clsInput pattern) const;"]},{"entry":[{},"Uint32_t GetNumPackets (ClsInput pattern) const;"]},{"entry":[{},"Gets the bytes(packets) matching the pattern in owner Stage."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","IN: ClsInput","Pattern for which number of bytes(packets)"]},{"entry":[{},"required."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Returns:","Number of bytes(packets) matching the given pattern of owner Stage."]},{"entry":["Exceptions:","no_such_pattern"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Individual Stages can be combined to form more complex Stages, as depicted in , and be treated as a single entity at compile time by defining new classes. At the same time meta-Stages can be formed at run time that behave as a single unit (in terms of being there as a whole or not being there at all) by using the mutable property of the connections.","Classifier with a Switchfabric","A classifier  with a switch fabric  is described with reference to  classifier outputs packets  on one of the outputs. However at times we may need the packet to take multiple paths based on the classification (ie. multicast Ipv4Classifier). This can be easily accomplished by a MultiClassifier  formed by combining a Classifier  (with one output) with a switchfabric  (and optionally a monitor in between). The classifier outputs the packet  with the tag on its output and the switchfabric  sends the packet on one or more of its output  (-, . . . , -N) based on the tag output by the classifier.","MultiClassifier","A multiclassifier , as described with reference to , can be defined at runtime as follows.","Link Aggregation","We can use composition of Stages to represent link aggregation too. Thus an output aggregate link  (-, . . . , -n) can be represented as depicted in FIG. . The other approach for link aggregation would be to use the composite design pattern. This would allow us to present the same interface for single as well as aggregate links. This would mean adding methods in Link class for adding\/deleting links. Users then would always access links through the Link Interface, which could contain single or multiple Ethernet (or possibly other) links. It would internally contain the scheduler if it had more than one physical link.","It is to be understood that even though numerous characteristics and advantages of various embodiments of the present invention have been set forth in the foregoing description, together with details of the structure and function of various embodiment of the invention, this disclosure is illustrative only. Changes may be made in detail, especially matters of class structure and management of objects to form directed graphs of data\/packet flow within the principles of the present invention to the full extent indicated by the broad general meaning of the terms in which the appended claims are expressed. For example, the particular API forwarding engine and underlying forwarding engine hardware may vary depending on the particular application for the novel object abstraction and identical API model while maintaining substantially the same functionality without departing from the scope and spirit of the present invention.","In addition, although an embodiment described herein is directed to a Forwarding Engine API, it will be appreciated by those skilled in the art that the teaching of the present invention can be applied to other systems. In fact, systems for network processing including ASICs as well as network process programmed using an API model as described herein are within the teachings of the present invention, without departing from the scope and spirit of the present invention.","The present invention provides many advantages over known techniques. The present invention provides a unified software programming model that is expressive enough to represent both fixed-function hardware as well as programmable network processors. This invention is a large step up from the register-level programming models offered by current ASICs because it is a state-of-the-art object-oriented programming model. This invention is a unifying technology for current network processors that are typically in their infancy in terms of programming model. A key advantage of this approach for network processors is that it does not sacrifice performance by actually executing the packet-processing in software, rather it abstracts the capabilities of the network processor but does not emulate them. In either case, this invention benefits both ISVs by providing a high-level programming model that does not sacrifice performance and the silicon vendors themselves, by providing an API that can grow with the evolution of their hardware while not alienating their ISV partners.","Having disclosed exemplary embodiments, modifications and variations may be made to the disclosed embodiments while remaining within the scope of the invention as defined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features, aspects, and advantages of the present invention will become more fully apparent from the following detailed description and appended claims when taken in conjunction with accompanying drawings in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 23"}]},"DETDESC":[{},{}]}
