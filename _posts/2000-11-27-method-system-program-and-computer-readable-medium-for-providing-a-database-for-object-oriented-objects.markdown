---
title: Method, system, program, and computer readable medium for providing a database for object oriented objects
abstract: Provided is a method, system, program, and computer readable medium for maintaining a database of objects. At least one structured document is received representing an instance of an object including attributes and attribute values defined for a class. Content of the structured document representing the object is added into the database, wherein the database is capable of storing multiple structured documents representing multiple objects. In another implementation, an instance of at least one object including attributes and attribute values defined for a class is generated. For each generated object, a structured document is generated representing the object and including a representation of the attributes and attribute values in the object. Each structured document is transferred to the database to maintain.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07434156&OS=07434156&RS=07434156
owner: Sun Microsystems, Inc.
number: 07434156
owner_city: Santa Clara
owner_country: US
publication_date: 20001127
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE DESCRIBED IMPLEMENTATIONS","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to a method, system, program, and computer readable medium for providing a database of object oriented objects.","2. Description of the Related Art","An object oriented data base system (OODBMS) provides a persistent and sharable repository and manager of objects defined according to an object-oriented data model. Every object encapsulates a state and behavior. The state of an object comprises the values of the attributes (also referred to as properties) defined for the object, and the behavior of the object comprises the methods provided with the objects. Objects that share the same attributes and methods comprise a class. All the objects maintained in an OODBMS are members of the same class or have the same parent class. This means that the same set of methods defined for the class are used to manipulate the objects in the OODBMS, such as create, delete, add, read, modify, update, etc. Further the objects in a class have the same attributes defined for the class, even though particular attributes within any of the objects in the class may have different values. Objects persistently stored within an OODBMS defined for a class are viewed and distinguished according to the values provided for their attributes. Each object is further provided a unique identifier for use in accessing the object within the OODBMS using the interfaces provided for the class. Benefits and further explanations of object oriented databases are described in \u201cResearch Directions in Objected-Oriented Database Systems\u201d, by Won Kim (Copyright Association of Computing Machinery, 1990); \u201cIntermedia: A Case Study of the Differences Between Relational and Object-Oriented Database Systems\u201d, by Karen E. Smith, Stanley B. Zdonik, OOPSLA '87 Proceedings (Copyright Association of Computing Machinery, 1987); and U.S. Pat. No. 6,128,771, all of which publications and patents are incorporated herein by reference in their entirety.","Currently, many object oriented database systems are implemented using a Java application programming interface (API).** The application programmer may write APIs in Java to use to access the object oriented database management system (OODBMS). The interfaces to the objects in the OODBMS are also written in Java, and the objects in the OODBMS are implemented as Java classes. In such Java implemented OODBMS, Java applications can generate Java objects to add to the Java OODBMS and utilize Java APIs to manipulate the Java objects in the Java OODBMS. ** JAVA is a trademark of Sun Microsystems, Inc.","One challenge with prior art object oriented database systems is that applications written in different programming languages cannot share objects in the same OODBMS. For instance, a C or C++ application program creating a C or C++ data object cannot add objects to a Java OODBMS because of differences in the naming conventions and structures in the different programming languages. Thus, although two applications written in different languages may utilize the same class of objects having the same attributes and attribute values, and desire to share the same data objects, the applications in the different programming languages cannot store and access objects in the same OODBMS. Due to such limitations, duplicate object oriented databases must be provided for the application programs in the different programming languages even though such application programs intend to use the same data objects instantiated from the same class. Further, one application will not be able to access or manipulate the objects created by the other application and maintained in that applications OODBMS.","For these reasons, there is a need in the art to provide mechanisms to allow application programs in different programming languages to utilize the same OODBMS.","Provided is a method, system, program, and data structures for maintaining a database of objects. At least one structured document is received representing an instance of an object including attributes and attribute values defined for a class. Content of the structured document representing the object is added into the database, wherein the database is capable of storing multiple structured documents representing multiple objects.","In another implementation, an instance of at least one object including attributes and attribute values defined for the class is generated. For each generated object, a structured document is generated representing the object and including a representation of the attributes and attribute values in the object. Each structured document is transferred to the database to maintain.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["2","4","6","8","6","10","10","6","10","2","4","6","8"]},"Client system  includes an application program , which for purposes of description, is implemented in a structured or object oriented programming language other than Java, e.g., C, C++, Smalltalk, Fortran, etc. The application program  is capable of producing application data objects  that conform to a particular class structure implemented in the application program , and are non-Java objects. An extensible markup language (XML) translator  is capable of transforming the content of the data object  into a structured XML file .","The client system  includes an executing Java application  executing in the client system  that is capable of producing Java objects  in manner known in the art. An XML translator  transforms the content of the Java object  into a structured XML document . The client system  would further include a Java Virtual Machine (JVM) to convert Java bytecodes to instructions in the native machine language of the client . The client systems  and  are capable of transmitting a data stream to the database server  over the network  including the XML document , , and other protocol information.","The database server  includes a database daemon  that monitors a port on the database server  for requests from clients  and  to access the object oriented database . Object oriented database application interfaces (OOD APIs)  comprise instructions to manipulate the data in the XMLOOD . The OOD APIs  would comprise instructions to parse and perform operations within the XMLOOD , such as instructions to add data, delete data, access and read data, update data, etc. Such OOD APIs  may include typical commands to parse and process an XML file, such as the type of commands found in the Simple API for XML (SAX) parser. Alternatively, the XML files can be generated into a Document Object Model (DOM) tree in a manner known in the art and then manipulated using DOM commands. The OOD APIs  are specifically designed to handle and process XML objects stored in the XMLOOD . The database daemon  invokes the OOD APIs  to perform the client requested manipulation of the XMLOOD . In implementations where the OOD APIs  comprise Java commands or the database daemon  is implemented as a Java program, then the database server  would include a Java Virtual Machine (JVM) to convert Java bytecodes to instructions in the native machine language of the database server .","The XML translators  and  are capable of parsing a data object in a structured or object oriented programming language and converting the attributes of the object to tagged elements in an XML file. Each attribute and attribute value in the data object would map to a separate tagged attribute element and tagged attribute value in the XML document representing the object. Such conversions of objects to XML documents are known in the art and described in the publication \u201cUsing XML as an Object Interchange Format\u201d by G. M. Bierman (May 17, 2000), available on the Internet at \u201chttp:\/\/www.odmg.org\/library\/readingroom\/oifm1.pdf\u201d, which publication is incorporated herein by reference in its entirety.","For instance, a class PERSON may be defined with attributes NAME and AGE as follows:\n\n","An object instance of the class PERSON may have the name \u201cSally\u201d and an age of eleven. Below is an example of how the instance of the object \u201cSally\u201d of the class person may map to a tagged XML file including tagged attribute elements and tagged attribute values.",{"@attributes":{"id":"p-0027","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<object oid=\u201cSally\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<class>Person<\/class>"]},{"entry":[{},"<contents>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<attribute name=\u201cName\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<value><string val=\u201cSally\u201d\/><\/value>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/attribute>"]},{"entry":[{},"<attribute name=\u201cAge\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<value><unsignedshort val=\u201c11\u201d\/><\/value>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/attribute>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/contents>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/object>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Moreover, when generating the XML document from an object oriented object, the XML translator  and  would further generate a document type definition (DTD) into the XML document defining the hierarchical organization of attributes, values, and other elements in the XML document. The XML translators  and  may receive a schema indicating the class structure of the data object, including all attributes and attribute values for the class. The XML translators  and  would then be able to generate an XML shell file based on the layout of attributes and values in the class schema. The XML shell file could include the root tag as well as all the class tags, attribute tags, and value tags with no provided values. The XML translators  and  would then process the objects  and , respectively, to populate the tagged value fields with the attribute values provided in the objects  and .","In one implementation, the object oriented XML database  is formed in an XML file  as shown in , including a root tag  and a plurality of XML objects . Each object is the member of an EMPLOYEE class, having as attributes a NAME of the employee as well as a POSITION attribute. Object is an instance of the class EMPLOYEE, having a NAME value of \u201cJoe Smith\u201d and a \u201cPOSITION\u201d value of \u201cSoftware Engineer\u201d. Other objects would include instances of other employees, including the employee name and job position. Each XML object includes the content of an XML document that was generated by the XML translators ,  representing an object in a structured or object oriented language. The OOD APIs  are capable of parsing the object oriented XML database (XMLOOD)  file to access and perform operations with respect to the XML objects ",{"@attributes":{"id":"p-0030","num":"0033"},"figref":"FIG. 3","b":["16","26","18","28","100","16","26","16","26","102","16","26","104","16","26","106","16","26","108","18","28","18","28","110","112","114","116"]},"The logic of  may be invoked by an API called by the application  to add an object to the object oriented XML database (XMLOOD) . The clients  and  would be provided with client OOD APIs that the applications ,  may call to perform operations with respect to the object oriented XML database (XMLOOD) . Such client OOD APIs would generate a stream of data and commands to the database daemon  that instruct the database daemon  to perform a requested operation against the XMLOOD .",{"@attributes":{"id":"p-0032","num":"0035"},"figref":["FIG. 4","FIG. 4"],"b":["16","26","18","28","10","12","20","150","24","16","26","12","20","16","26","152","154","156","16","26","158","16","26","160","162","164","12","20"]},{"@attributes":{"id":"p-0033","num":"0036"},"figref":"FIG. 5","b":["24","30","18","28","14","22","10","200","24","10","202","204","24","210","212","10","214","10"]},{"@attributes":{"id":"p-0034","num":"0037"},"figref":"FIG. 6","b":["24","30","250","12","20","24","252","262","10","54","264","256","24","2","4","12","20"],"i":"a, . . . , n "},{"@attributes":{"id":"p-0035","num":"0038"},"figref":"FIG. 7","b":["24","30","300","24","12","20","24","302","30"]},"Blocks  to  illustrate logic implemented in the GETOBJECT API. At block , the GETOBJECT API is called. In response, a variable i is set (at block ) to one. The object oriented XML database (XMLOOD)  is scanned for the root tag of the ith XML object. If (at block ) the requested OID matches the OID of the ith XML object, then a copy of the ith XML object is returned (at block ) to the database daemon . Otherwise, if the OIDs do not match and if (at block ) the ith XML object is the last object, then an error is returned (at block ) indicating that no XML object in the database  has the requested OID. If the ith object is not the last object, then i is incremented (at block ) and control returns to block  to determine if the next object has a matching OID. In response (at block ) to receiving a matching XML object , . . . , n, the database daemon  returns the XML object to the requesting application , .","In the above descriptions, the objects and database of objects are implemented in an XML document. The client applications are provided with an XML translator to translate objects in a structured or object oriented programming language to an XML document and translate XML documents into objects. This allows the representation of objects generated for different structured and\/or object oriented programming languages to be stored and manipulated in a same object database. In this way, different applications in different programming languages may share the same object oriented database and data objects therein.","What follows are some alternative implementations.","The preferred embodiments may be implemented as a method, apparatus or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d as used herein refers to code or logic implemented in hardware logic (e.g., an integrated circuit chip, Field Programmable Gate Array (FPGA), Application Specific Integrated Circuit (ASIC), etc.) or a computer readable medium (e.g., magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.). Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments are implemented may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art.","In the discussed implementations, one client application comprised a Java application and the other a non-Java application. However, the different client applications may both be implemented in different non-Java object oriented programming languages, or implemented in structured programming languages.","In discussed implementations, the object oriented XML database included only objects that were instances of the same class. In further implementations, objects from multiple classes may be maintained in the object oriented XML database.","In discussed implementations, the XML translators ,  were maintained in the client systems , . In alternative implementations, the clients ,  may not maintain the XML translator , . Instead, the database daemon  may maintain XML translators to translate objects in different structured or object oriented programming languages into an XML document, and to translate XML objects to objects in the structured or object oriented programming language of the requesting client application.","In discussed implementations, an XML document format was used to transport and store the objects in the persistent object oriented database. In alternative implementations, a different file format, such as a different structured file format, may be used to represent the attributes and values of the object instance of the class, such as a different standard generalized markup language (SGML), hypertext markup language (HTML), extensible hypertext markup language (xHTML), etc. In this way, the attribute of an object may be represented in alternative structured document formats.","In discussed implementations, the object oriented database comprises an XML document. In alternative implementations, the content of the XML objects, or other structured document objects, may be stored in data structures other than an XML document, such as a database of objects or files, an index of files, an object oriented database, etc. Further, the structured document formats used to represent the objects and implement the database may comprise different file formats.","In discussed implementations, the client applications are included in client systems that communicate with the database server over a network. In alternative implementations, the applications and XML translators may be implemented on the same computing platform including the database daemon.","The foregoing description of various implementation of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
