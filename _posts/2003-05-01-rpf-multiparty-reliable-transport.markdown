---
title: RPF multi-party reliable transport
abstract: A multi-party reliable transport protocol for use by a higher layer application. A single session source distributes database updates to multiple receivers via a distribution tree. A node desiring to join a session selects a directly-connected node on a path upstream to a source by accessing unicast routing protocol information and sends a “Join” message to this upstream neighbor. Each node participating in the scheme handles retransmission requests from its directly-connected downstream neighbors. A supported application provides storage of previously transmitted information for potential retransmission.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07546380&OS=07546380&RS=07546380
owner: Cisco Technology, Inc.
number: 07546380
owner_city: San Jose
owner_country: US
publication_date: 20030501
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["STATEMENT OF RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF SPECIFIC EMBODIMENTS"],"p":["The present application claims priority from U.S. Provisional App. No. 60\/421,724, filed on Oct. 28, 2002, entitled, \u201cRPF MULTI-PARTY RELIABLE TRANSPORT (RMRT).","The present application claims priority from U.S. Provisional App. No. 60\/421,723, filed on Oct. 28, 2002, entitled, \u201cINTERNAL BORDER GATEWAY PROTOCOL DOWNLOADER (IBGPD).\u201d","The present application is related to the co-filed application entitled \u201cINTERNAL BGP DOWNLOADER.\u201d","The contents of the above-identified applications are herein incorporated by reference for all purposes.","The present invention is related to data networking and more particularly to protocols for distributing information among multiple parties.","Communication of packets across the internet typically involves the use of a specific transport protocol called TCP. TCP provides certain services to higher layer applications that are not inherently provided by IP itself. For example, TCP guarantees message delivery, guarantees that packets will be transferred to the receiver application in the order they are transmitted, provides flow control to prevent overflow of receiver buffers, and throttles packet transmissions when network traffic conditions would lead to packet loss.","The TCP protocol assumes a single pair of nodes, one a transmitter and one a receiver. The transmitter and receiver may be multiple hops away from one another and packets traveling as a part of the same TCP session need not always traverse the same paths. To facilitate guaranteed message delivery, the transmitter maintains a cache of previously transmitted packets to allow for necessary retranmissions.","TCP is the \u201cwork horse\u201d of the internet, carrying traffic for mail applications, web applications, etc. However, applications with certain characteristics are not well-served by TCP. For example, consider a database update distribution application. It is desirable for a selected node to distribute database updates to a number of nodes including nodes that are not directly-connected. Guaranteed message delivery is required as is in-order delivery. It is also desirable to be able to add nodes to the session and have them receive all the information that has been transmitted since the session's beginning.","A specific example of this type of distributed database updating is the distribution of routing information updates using BGP (Border Gateway Protocol) from border routers at the edge of an autonomous system (AS) to routers within the AS. The protocol for distributing this information to the AS interior is referred to as internal BGP or IBGP. Interior nodes that speak the IBGP protocol must obtain routing updates from border routers. To address this requirement, current IBGP techniques form a full mesh of TCP connections between each border router with updates to share and each interior router. Some degree of reduction in the number of TCP connections can be obtained by using route reflectors or confederations as specified by the BGP-4 protocol document. These simplifications cause problems such as routing loops and the number of TCP connections may still be very large. The use of numerous TCP connections, however, creates other problems.","One important problem is that each border router must separately buffer each TCP connection separately for retransmission purposes. Each TCP connection buffers all data that is pending acknowledgement. TCP will maintain separate retransmission buffers even though identical data is being sent to all receivers. Each TCP connection will also require extra CPU processing and other system resource overhead. This is a highly inefficient and cumbersome use of local high-speed memory and processing resources.","There is also great waste of network bandwidth. Multiple TCP sessions will typically carry identical data on the same link on their way to different target interior nodes. Because of the bipartite nature of the TCP connections, intermediate nodes cannot simply extract desired data from the sessions they support and need their own sessions instead.","What is needed is a transport protocol suitable for distributing database updates to multiple receivers while making efficient use of memory, processing resources and network bandwidth","Embodiments of the present invention provide a multi-party reliable transport protocol for use by a higher layer application. A single session source distributes database updates to multiple receivers via a distribution tree. A node desiring to join a session selects a directly-connected node on a path upstream to a source by accessing unicast routing protocol information and sends a \u201cJoin\u201d message to this upstream neighbor. Each node participating in the scheme handles retransmission requests from its directly-connected downstream neighbors. A supported application provides storage of previously transmitted information for potential retransmission.","A first aspect of the present invention provides a method for operating a selected node to distribute database updates within a network. The method includes: identifying one or more directly-connected neighboring nodes that participate in a transport layer session, receiving an application data unit from an application operating at the selected node, encapsulating the application data unit within a transport protocol data unit, and sending the transport protocol data unit to only the identified one or more directly-connected neighboring nodes as a part of the transport layer session.","A second aspect of the present invention provides a method for operating a selected node to support a transport layer session. The method includes: identifying a directly-connected node on a path toward a transport layer session source, the directly-connected node being an upstream node on the path, receiving a transport protocol data unit from the upstream node, extracting an application data unit from the transport protocol data unit, and delivering the application data unit to an application operating at the selected node.","A third aspect of the present invention provides a method for operating a selected node to support a transport layer session having at least three parties. The method includes: identifying a first directly-connected node on a path toward a transport layer session source, receiving a transport protocol data unit from the first directly-connected node, forwarding contents of the transport protocol data unit to a second directly-connected node that is downstream from the transport layer session source and the selected node, storing contents of the transport protocol data unit in a local cache, receiving a request for retransmission from the second directly-connected node, and retransmitting in response to the request by retrieving from the local cache.","Further understanding of the nature and advantages of the inventions herein may be realized by reference to the remaining portions of the specification and the attached drawings.","The present invention will be described with reference to a representative environment, a mesh network of nodes (e.g., routers) employing well-known protocols such as IP, TCP, UDP, etc. In one embodiment, the present invention provides a transport protocol that provides reliable database distribution services to nodes of this network. This transport protocol will be referred to as Reverse path forwarding Multi-party Reliable Transport (RMRT). Each RMRT session is established between a single server application on a source router and a set of client applications each on a receiving router. The server and client applications may be the internal BGP downloader referred to in the co-filed application.","RMRT Overview",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1","FIG. 1"],"b":["102","104","106","108","102"]},"In RMRT, in the embodiment now being described, all routers that are used to propagate TPDUs through the network also participate as receivers in the RMRT session. Also, when a participating router receives new TPDUs it delivers the contained ADUs in sequence order to a local client receiving application.","As shown in the simple example of  an RMRT session transfers information via a distribution tree. Each RMRT participant (other than the source) has one upstream neighbor on the tree and may also have one or more downstream neighbors. Each RMRT participant may be an upstream endpoint for multiple associations. However, each RMRT receiver has only one upstream router. In accordance with embodiments of the present invention, UDP (or some other unreliable datagram protocol) is used to propagate the TPDUs between routers. An unreliable datagram protocol (as opposed to a reliable one such as TCP) is preferred because RMRT includes its own retransmission mechanism as will be explained. Each RMRT session participant may share retransmission buffering capacity among multiple downstream receivers, a great improvement over the use of multiple TCP connections.","During steady state operation, each non-source participant performs three basic tasks:","1. Receive RMRT TPDU packets transmitted by the upstream neighbor router.","2. Extract ADUs from the TPDUs.","3. Deliver the ADUs to the local application.","3. Construct and propagate TPDUs to downstream neighbors on the tree.","Distribution tree connectivity is based on reverse path forwarding (RPF), a technique typically used for multicast routing. A router wishing to join an RMRT session and connect itself to the session's distribution tree relies on unicast routing protocol information to establish connectivity to the source. It is assumed that participating routers operate a unicast routing protocol such as IS-IS, OSPF, or EIGRP as are known in the art. The participating router is assumed to be aware, through preconfiguration for example, of the IP address of the session source. The RMRT receiver uses the unicast routing protocol information to find a path to the source and the next-hop router on this path. Forwarding of TPDUs will occur on this path, only in the reverse direction from the one envisioned by the unicast routing protocol. Thus the router which is the unicast next-hop toward the source is the previous-hop on the RMRT distribution tree.","Having determined the previous-hop towards the source, an RMRT receiver receives all TPDUs and requests all retransmissions from that router. The RMRT receiver's determination of the previous-hop is dynamic and tracks changes in the connectivity information provided by the unicast routing protocol. Switching between different previous-hops in the same RMRT session is transparent to ADU reception because all RMRT routers participating in a session maintain the ADU to sequence number mapping that was originally assigned on the source router.","The TPDUs are transmitted using UDP\/IP best-effort datagram service. When a receiving router misses one or more TPDUs all necessary retransmissions are provided by the immediate previous-hop rather than by the source.","In one embodiment, RMRT uses a NAK-based mechanism to request retransmissions. RMRT does not have to buffer ADU data in order to be able to retransmit it. Rather, it can rely on the resident application being able to reproduce ADUs on demand when presented with their sequence number. Based on application-specific parameters, the application itself can decide on the amount of ADU sequence history it is willing to maintain in order to serve retransmissions. If the amount of history is not sufficient to rebuild the required retransmission packets then RMRT has the option of falling back to a full database synchronization between directly-connected neighbors. Also, to improve efficiency, RMRT may maintain its own cache of previously transmitted ADUs.","Software Architecture",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 2","FIG. 2"],"b":["202","202","204","206","208","210","212","214"]},"An application program interface (API), as will be described below, is used for interactions between RMRT module  and application . The API is used to exchange ADUs and for the RMRT to request previously transmitted ADUs for the purposes of retransmission and synchronization. RMRT learns of the path to the source through RIB  which is in turn populated by the unicast protocol component . RSM  provides control channel services to communicate session control information with directly-connected neighboring routers including Join and Prune messages. The TPDUs themselves are transmitted and received via the UDP stack . RSM  uses TCP stack  to maintain the control channels.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3","b":["202","302","208","304"]},"A TPDU reception component  processes incoming data and delivers it to the application while also dealing with detection of lost TPDUs and responding by making any necessary retransmission requests. A TPDU propagation component  propagates received TPDUs to the subscribing downstream directly-connected neighbors obtained by membership tracking component . The transmitted TPDUs are reconstructed from the received ADU information, although some implementations may typically simply copy the contents of received TPDUs and rewrite the IP source and destination addresses. TPDU propagation component  also responds to retransmission requests from the downstream neighbors. An ADU cache  stores recently received ADUs that will be needed by the TPDU propagation component. ADU cache  may not be strictly necessary since ADUs are available from application  but it may be more optimal to cache a certain number of recently transmitted ADUs.","Having identified this RPF upstream neighbor, RMRT module  proceeds to notify the neighbor that session data is required. RPF neighbor tracking component  invokes RSM  to send a Join control message upstream to the upstream neighbor. This is transmitted using the RSM control channel. Membership tracking component  receives Join and Prune messages from downstream routers and maintains the list of neighbors to which TPDUs will be propagated.","RPF neighbor tracking component  continually monitors RIB  to always know which node is the unicast next-hop neighbor (previous-hop on the RMRT distribution tree) toward the source. Network topology changes discovered by the unicast routing protocol may result in a change of next-hop toward the session source. When there is such a change, RPF neighbor tracking component  invokes RSM  to send a Prune message to the old unicast next-hop neighbor to indicate that session forwarding from the former next-hop is no longer required. Also, RPF neighbor tracking component  invokes RSM  to send a Join message to the new unicast next-hop node.","It will be appreciated that for a session source, ADUs are only obtained from the application and not delivered to the application. Also, the session source does not select an upstream neighbor but does track downstream membership like any other session participant.","Sequence Numbers","For all the ADUs propagated from the session source to the participating receivers, a consistent sequence number space is used. At the session source, each ADU generated by the server application is assigned a new sequence number by, e.g., either the application or by RMRT. The mapping between the sequence number and the ADU is included in the constructed TPDU packets and communicated through the session receivers. When a receiving router delivers the ADU to the resident client application, the associated sequence number is also communicated. Receiving applications maintain this mapping to assist RMRT in its operation. After having delivered an ADU to the client application, the RMRT module may request the ADU back for retransmission purposes by specifying its sequence number.","ADU sequence numbers are assigned from a finite space that may be exhausted during the lifetime of an RMRT session. RMRT deals with the possibility of exhaustion by allowing the sequence space to wrap.","To avoid ambiguity among multiple ADUs sharing the same sequence number following wrapping, ADUs are disassociated from the sequence members long before the sequence numbers are reused. This disassociation occurs at the very latest when a new ADU is assigned a sequence number halfway across the sequence space from an old ADU.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 4"},"The consistent sequence numbering of ADUs across all routers participating in a session allows the RMRT component to avoid unnecessary ADU buffering. Once an ADU has been delivered to the local application RMRT can retrieve it through the API provided by the application using the ADU sequence number as a key. As a result, to support TPDU propagation and retransmission, all ADUs could be obtained from the applications database.","Reliable In-Order Delivery","Since unlike TCP, UDP does not include a reliability mechanism, RMRT provides for a reliability mechanism to be built on top of UDP.  depicts retransmission according to one embodiment of the present invention. TPDU reception component  tracks the received ADU sequence numbers. Any missing sequence numbers are noted as losses and result in a retransmission request to the upstream neighbor. The TPDU reception component  requests retransmission by sending a negative acknowledgement (NAK) encapsulated within a UDP datagram.","A missing ADU is detected when the next TPDU packet is correctly received and the gap in the received ADU sequence members is noticed. This is achieved by comparing the starting ADU sequence number in the latest TPDU to the last correctly received ADU sequence number.","Each NAK packet includes a list of ranges of ADU sequence numbers that are missing. Upon receipt of a NAK, the upstream neighbor suspends current ADU propagation and instead prioritizes retransmission of the missing ADUs. New TPDUs may be constructed for retransmission purposes. The ADUs may come from ADU cache  or they may be requested from the application. When all of the missing ADUs have been retransmitted, transmission of current ADUs is resumed from the point where it left off.","To improve the speed of loss detection during silent periods, dummy TPDUs are transmitted. Dummy TPDUs contain no real ADU data and just convey the last transmitted ADU sequence number to allow receivers to realize that they have missed one or more previous ADUs.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 6"},"Some embodiments may also incorporate a low frequency periodic positive acknowledgement mechanism. Receipt of a NAK from a downstream router can be used to deduce the earliest sequence number in the session before which the downstream has currently received all ADUs. However, while all ADUs are being received correctly, no NAKs are issued. Use of a positive acknowledgement may allow a session participant to safely discard known correctly received ADUs from its cache.","Also, when a positive acknowledgement is received indicating the last transmitted ADU before a silent period was correctly received, there is no reason to conduct dummy TPDU transmissions. Thus, positive acknowledgements (ACKs) may be sent at a configurable frequency by each session member to its upstream neighbor. Each ACK contains the ADU sequence number of the first ADU up to which all session ADUs have been correctly received. Transmission of periodic ACKs takes place only while there is TPDU activity from the upstream neighbor and while no NAKs are being issued.","Database Synchronization","It is possible for a receiver RMRT session to be missing an ADU whose retransmission cannot be requested by specifying its sequence number. The ADU can either have been dissociated from its sequence number or deleted from the upstream router database. This can happen in, for example, two cases:","1. When a new receiver joins a session and the session has been active for long enough that ADUs with no associated sequence number may already exist.","2. If the network becomes partitioned during the session, receivers that are disconnected from the source will have no way of receiving ADUs. If this partition persists long enough for half the sequence base to be exhausted, the missing ADUs will become disassociated from their sequence number.","Embodiments of the present invention provide for an RMRT database synchronization process to bring receivers in these two cases up-to-date with the session. The synchronization process is invoked by an upstream router when it receives a retransmission request from the downstream router that it cannot service due to disassociation of the requested ADUs from their sequence numbers. During synchronization, a complete transfer of the application database occurs without interfering with regular ADU propagation.","The synchronization process relies on cooperation between the RMRT component and the local application. Synchronization is achieved by transferring the complete contents of the session ADU database. This database includes all ADUs that are no longer associated with a sequence number but are still needed to reconstruct the current global state of the application database. These ADUs are still stored by the application in order albeit without their sequence numbers. The database also includes the ADUs that still have a sequence number association and are thus stored with their associated sequence number either by the RMRT component or by the application. After synchronization, the recovering router will have all the ADUs that were originated by the session source over the session lifetime. The ADUs are communicated and delivered to the local application and the recovering router in the order in which they were originally generated. In addition to the ADU data, the existing ADU sequence number associations are transferred so that the recovering router can become a full session participant.","During synchronization, the application is configured to transmit the database contents under its control at the direction of the RMRT module. To facilitate this control, the application programming interface (API) between the RMRT module and the application includes two special up-calls. One up-call initiates a walk through the database. The walk is identified with a handle so as to differentiate among walks that may be taking place in parallel due to simultaneous synchronization sessions to different downstream clients. Once a walk is established, another up-call is invoked to obtain the next ADU from the application's database. Each time this call is invoked, the application provides the next ADU in the order in which they were originally generated by the session source. For ADUs that still have a sequence number association in the application database, the sequence number is also provided to RMRT.","There may also be up-calls provided to facilitate rewinding and fast forwarding within the same walk. The support for rewind and fast forwarding allows the RMRT component to avoid buffering ADU data obtained during a walk until it is certain that the data has been correctly received and delivered to the application on the downstream router receiving the synchronization.","At the router receiving the synchronization, processing of ADUs is quite similar to processing during normal session participation. Essentially the only difference is that during the early part of the synchronization session, ADUs delivered to the application will not be associated with a sequence number. Sequence numbers will become available when the synchronization process enters the part of the upstream router's database that still has sequence numbers associated with the ADUs. A variety of techniques can be used to actually transfer database contents during the synchronization process. For example if the rewinding forwarding up-calls described above are available, then a private RMRT session between the two routers may be used to transfer the data. This minimizes the need for transport buffering overhead on the upstream router supporting the synchronization. If there is no rewind capability, a TCP connection may be used.","Flow and Congestion Control","It is desirable to employ flow and congestion control in conjunction with the use of RMRT. In one embodiment, RMRT employs Datagram Congestion Control Protocol (DCCP) as described in Kohler, et al., \u201cDatagram Congestion Control Protocol\u201d, IETF Internet Draft, March 2003, the contents of which are herein incorporated by reference for all purposes in their entirety. DCCP is a lightweight protocol that provides congestion control and flow control to applications that do not require reliability or provide their own reliability mechanism. RMRT may employ DCCP instead of UDP. DCCP establishes a bi-directional flow of information. The reverse path (from the downstream to the upstream) can be used by the RMRT component to convey the negative acknowledgements. Also, advantageously, DCCP has minimal header and protocol state overhead.","ADU cache  may be exploited to accommodate multiple transmissions of the same ADUs when required by either flow control or congestion control. The use of ADU cache  for these purposes and for retransmission is reasonably efficient since the cache is shared among all downstream receivers. The cache size is configurable depending on the impact of requests to the application.","Application Programming Interface","RMRT provides the following call to the application:\n\n","The application provides the following up-calls to RMRT:\n\n","RMRT session manager (RSM)  is responsible for coordinating a set of RMRT sessions (one or more) belonging to the same application. From the perspective of a particular router in a network using RMRT the resident application may be the originator of multiple sessions a swell as a member of multiple remotely originated sessions. The capability of applications on different routers to originate sessions provides support for multi-way communication through RMRT. The ability for an application in a single router to originate multiple RMRT sessions provides support for communication of different classes of information. Coordinating sessions belonging to the same application has two advantages:","1. Coordination enables more efficient use of router and network resources. More specifically:\n\n","2. Coordination of multiple sessions enables dynamic network configuration:","a. RSM provides a hello protocol that enables directly connected neighbor auto-discovery. The application has the option of manually specifying a list of valid neighbors or having them discovered through RSM.","b. RSM can be used by a router originating a session to advertise the existence of the session to potential receivers. Knowledge of the session is flooded to all potential receivers that can then decide whether to join it or not. A router originating a session can distribute an application specific session description with the session announcement. The session description can be used by potential receivers to determine their interest in receiving the session.","Each application using RSM and RMRT should select a well-known RSM TCP control port as well as a well known TPDU UDP destination port. The TCP and UDP ports are used to de-multiplex between different applications using RMRT and allow neighboring routers running the same application to talk between them.","An application using multiple RMRT sessions should have a way of addressing them. RSM and RMRT use a common session identification mechanism consisting of two pieces of information:","1. The IP address of the router originating the session.","2. A session ID assigned by the resident application on the router originating the session. This ID is used to distinguish the session from other sessions originated by the application on the same router.","Transit Routers","RMRT is designed to reliably distribute a database in a network of routers where every router is participating as a session receiver. However, according to embodiments of the present invention, RMRT may be extended to allow for routers that do not wish to receive session data to nonetheless support RMRT implementation in the network by acting as transit routers.","A RMRT transit router has a software component structure similar to what has been illustrated and described above but there are a number of differences compared to a RMRT session participant:\n\n",{"@attributes":{"id":"p-0086","num":"0112"},"figref":"FIG. 7","b":["702","704","706","708","710"]},"The following sequence of events takes place:\n\n","Receivers  and  have now caught up and continue to participate normally in the session. TPDU losses are handled as follows:\n\n","The example above has shown how a transit router appears just like a regular participant to both its upstream neighbor as well as to the downstream members. In fact any number of RMRT transit routers and regular participants can be mixed in any order between a RMRT session source and a receiver. There is also no special treatment required with RPF neighbor changes. This is true both when the transit router itself changes the neighbor from which it is receiving the session as well as when a downstream participant of a transit router switches to join through a transit router or away from it.","Controlling the amount of data to be stored in the RMRT cache of the transit router is a tradeoff between memory resources on the transit router itself and network and processing resources between the transit router and its upstream neighbor. The cost of having a downstream member request an ADU that is not present in the transit router cache is that the transit router has to communicate with its upstream neighbor to obtain the ADU.","Reception at a transit router of NAKs and periodic ACKs (positive acknowledgements) described above can help in reducing the local ADU cache size. When a transit router confirms through NAKs and periodic ACKs that all of its downstream members have received all ADUs up to a specific ADU it advertise this ADU sequence number in its own periodic upstream ACK.","In the just-described example, the transit router had multiple downstream session participants connecting to the session through it. Having the transit router receive TPDU packets and replicate them for the downstream members as well as process NAKs from downstream improves the scalability of propagation. However, if in an RMRT session, a transit router has a single downstream member joining through it, then involving the transit router in the communication just introduces overhead.","When only a single downstream member joins the session through a transit router, then the transit router can instruct its upstream neighbor to send TPDUs to the downstream joiner without any transport layer involvement by the transit router. This situation is illustrated in .","In , there is a source , two transit routers  and  and two receivers  and . Transit router  has only router  joining through it. In contrast transit router  has both receiver  and transit router  joining through it. It is therefore beneficial to have transit router  receive and forward session data. In the case of transit router  it is beneficial to simply tunnel through it. The tunnelling is initiated during the join process and is adaptive to membership and network changes.","Consider the following scenario which begins before either of the receivers join the session in the example network of :\n\n","Receiver  is now participating in the session and receives TPDUs directly from source . NAKs from receiver  are also sent directly to source . The involvement of transit router  in this communication is simply to forward the TPDUs and NAKs as any other ordinary data packet.","Now, receiver  switches on and decides to join the session. The steps are as follows:\n\n","At this point session forwarding has reached the state shown in . Transit router  is participating in the session as a transit router as it has more than one downstream participant. The session is being tunnelled between transit router  and receiver  through transit router  since transit router  only has a single downstream member.","Alternatively, the threshold number of downstream members for a transit router deciding when to tunnel data through it and when to participate in a session can be set to be higher than one. A transit router can instruct its upstream neighbor to tunnel to multiple downstream members.","A router downstream of a transit router may request from the transit router the retransmission of ADUs that are no longer associated with sequence numbers in the application database of upstream routers with full session participation. When the transit router attempts to recover these ADUs from upstream, it will be notified that a RMRT synchronization process is required. However, the RMRT transit router that is functioning as the upstream neighbor of the router missing the ADUs cannot be a synchronization parent and provide the full session database. The transit router therefore redirects the downstream router to obtain the synchronization from the first fully participating router on the path towards the session source.",{"@attributes":{"id":"p-0101","num":"0148"},"figref":["FIG. 9","FIG. 7"],"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":{"@attributes":{"id":"ul0018-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":["1. Receiver  restarts with an empty application database. It sends a NAK to transit router  requesting all the ADUs in the session so far.","2. Transit router  only has recent ADUs in its cache. It therefore propagates the NAK upstream to receiver  indicating that all the ADUs are required.","3. Receiver  receives the NAK but since the session has existed for a long period, there are ADUs in its database that no longer have a sequence number association. It therefore instructs transit router  through the RSM control connection that it is willing to provide a synchronization service.","4. Transit router  receives the synchronization offer from receiver  and forwards it on to receiver .","5. Receiver  directly contacts receiver  and synchronizes its database."]}}}},"Apart from the redirection step, the synchronization connection establishment and information transfer between receiver  and receiver  remain the same as if they were directly connected.","The redirection by a transit router of downstream members requiring synchronization can become fairly inefficient in cases where the network is partitioned and then heals. This inefficiency can be eliminated by allowing the transit routers to actively participate in the synchronization process.","This scenario is illustrated with reference to . In , there is a source , three transit routers , , and  and six receivers , , , , , and . Consider for example the effects of a long duration failure of the link between source  and transit router . When connectivity is restored, if the link had been down for a sufficient amount of time then all six receivers will need to be synchronized. The normal behaviour of the transit routers , , and  would be to redirect all the receivers to obtain the synchronization from upstream members. This would result in all recovering receivers synchronizing from source . The drawbacks are:\n\n","A solution provided by embodiments of the present invention is to allow transit routers with multiple downstream synchronization requesters to actively forward the synchronization session. A transit router can forward a synchronization session by simply terminating a request from a number of downstream members and originating a request of its own upstream. When TCP connections for the synchronizations are established, the transit router merely copies data received in its upstream connection to all the downstream connections.","In the network of , transit routers  and  would each receive three synchronization requests from the downstream receivers. Instead of forwarding these requests upstream to transit router , transit routers  and  can terminate the requests and originate a request of their own to transit router . Since  now only receives two synchronization requests (from transit routers  and ) it can decide that it is not worth participating and simply forward them upstream to the source. Now source  has only two downstream synchronization receivers and each of transit routers  and  have three synchronization receivers resulting in a much more scalable solution.","One consideration for the above scheme is that individual receiving routers needing synchronization are likely to stagger their requests over time. For example the request from receiver  may arrive at transit router  a fraction of a second later than the request from transit router . One solution is to delay the propagation of synchronization requests through a transit router. However, in a network with multiple transit levels the delays would accumulate impacting recovery time.","A preferred solution is to allow a transit router that has previously forwarded a synchronization request upstream to interrupt the forwarded session and restart it through itself so that the restarted session can be shared. Before interrupting a forwarded session an inquiry into the status of the session is preferably made so that there is no interruption of sessions that have progressed past a predetermined point.","Network Device Details and Distributed Architecture",{"@attributes":{"id":"p-0109","num":"0163"},"figref":"FIG. 11A","b":["1100","1102","1102","1102","1100","1102","1104","1106","1106","1104"]},"Functionality of embodiments of the present invention may be divided between routing processor  and linecards  as shown in . Generally speaking, in  the control components are implemented by routing processor  while caching and forwarding of ADUs are handled by linecards  along with the acknowledgement mechanism. For example, routing processor  may implement RPF neighbor tracking component , membership tracking component , the interface to application , and control of TPDU forwarding. Routing processor  also implements the synchronization processes described above.","TPDU reception component , ADU cache , and TPDU propagation component  may be implemented on each of linecards . The linecards  are also responsible for retransmission. Each RMRT session is hosted on the linecard that serves as the interface to the upstream directly-connected neighbor. This linecard maintains the ADU cache  for the RMRT session. TPDUs to be propagated downstream are transferred to the linecards directly connected to the subscribing downstream neighbors. Similarly, positive and negative acknowledgements are received at the downstream-facing linecards and transferred to the linecard hosting the RMRT session to be either handled there or relayed to the upstream neighbor as appropriate. RMRT can thus be implemented within the context of a distributed forwarding architecture where packets are generally not handled directly by the routing processor but rather kept on the linecards for processing.","A portion of the functionality of routing processor  may be implemented by software including instructions stored in a program memory . Program memory  is but one example of a computer-readable storage medium that can store software used when implementing embodiments of the present invention. Other examples include, e.g., hard drives, CD-ROMs, DVD-ROMs, flash memories, etc. Another example of a computer-readable storage medium is a signal that carries software across a network. Linecards  may include their own processor functionality which may similarly be implemented in software.","It is understood that the examples and embodiments that are described herein are for illustrative purposes only and that various modifications and changes in light thereof will be suggested to persons skilled in the art and are to be included within the spirit and purview of this application and scope of the appended claims and their full scope of equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11B"}]},"DETDESC":[{},{}]}
