---
title: Electronic mail software with modular integrated authoring/reading software components including methods and apparatus for controlling the interactivity between mail authors and recipients
abstract: Electronic mail software includes a main email component and a number of installable components which communicate bidirectionally with the email component through an application programming interface (API). The installable components include authoring/reading components and a mailbox browser/editor component. The main email component provides an underlying graphical user interface (GUI) for functions directly associated with the storage and transfer of electronic mail messages and also handles all data bundling and unbundling that may be required to transform a message created by an authoring component into a fully MIME compliant message. In addition, the main email component includes “hooks” (an application programming interface or API) for the attachment of the installable components. The authoring/reading components each provide functionality particular to the type of document the component is designed to create/display. Some modular components, or messages created by them, have assigned “roles” whereby senders and recipients of certain email documents are provided different kinds of access to the documents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07444374&OS=07444374&RS=07444374
owner: 
number: 07444374
owner_city: 
owner_country: 
publication_date: 20000627
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation-in-part of application Ser. No. 09\/209,162 filed Dec. 10, 1998, and Ser. No. 09\/604,426 filed Jun. 27, 2000 the complete disclosures of which are hereby incorporated by reference herein.","This invention was made with Government support under SBIR Grants Nos. 9561725 and 9710619 awarded by the National Science Foundation. The Government has certain rights in this invention.","1. Field of the Invention","The invention relates to an electronic mail program. More particularly, the invention relates to an electronic mail program having modular integral authoring\/reading applications whereby documents created with the modular integral authoring\/reading applications are seamlessly sent and received by the mail program and which provides different kinds of interactivity with and different kinds of access to electronic mail messages depending on user types or roles.","2. State of the Art","In recent years electronic mail (\u201cemail\u201d) has become widely used in business, education, and in personal communications. One of the features of electronic mail which is most convenient, particularly in business and in education, is the ability to attach a binary computer file to an email message. This feature enables email correspondents to rapidly share word processing documents, database documents, spreadsheet documents, multimedia documents, or virtually any kind of binary file created by a computer. There are, however, some serious limitations and inconveniences associated with attaching a binary file to an email message.","The original Internet mail system as defined in 1982 with RFC (Request for Comments) 821 and 822 had a number of important limitations. In particular, the system was not designed to carry large quantities of arbitrary data in an email message. In fact, the 1982 SMTP (Simple Mail Transport Protocol) standard required that an email message consist of a single message containing only ASCII characters in lines of 1000 characters (blocks of 32k) or less. Moreover, some implementations of SMTP or other mail transport systems (such as UUCP) restricted message lengths to some allowed maximum number of bytes. Lengthy messages passing through a mail gateway using one of these implementations were likely to be truncated.","The ability to send large quantities of binary data through the Internet electronic mail system was made possible with the MIME (Multipurpose Internet Mail Extensions) standard for Internet messages. The original MIME standard was published as an Internet Request For Comments document (RFC. 1341) and approved in June of 1992. (See Internet RFCs 2045, 2046, and 2047 for the latest MIME standards documents.) The MIME standard describes how an email message should be formatted in order to be considered MIME compliant. MIME defines a set of message header fields and a set of message encoding standards that are designed to overcome the limitations of RFC 822 message formats and still be transportable through any of the numerous legacy mail transport systems in use on the Internet. MIME message header fields extend those defined in RFC 822 and describe the content and encoding type of the email message. Encoding schemes allowed in the MIME standard include \u201cquoted-printable\u201d, and \u201cbase64\u201d. In addition, three unencoded data types are allowed. These are labeled \u201c8 bit\u201d, \u201c7 bit\u201d, or \u201cbinary\u201d.","If the sender and the receiver of the email message with the attached binary file are using the same brand and version of email program and both programs are configured in substantially the same way, the receiver's email program should automatically apply the appropriate decoding to the attached binary file and produce a file which is identical to the file which was attached to the email by the sender. However, if the sender and receiver are using different email programs, the recipient may receive a file which must be decoded by the recipient using a separate decoding program.","Even after the file is properly received and decoded, it is often difficult for the receiver of the file to open the file. The receiver of the file might expect that \u201cclicking\u201d on the file icon will open the file. However, clicking on the file icon will often not open the file. It may result in an error message like \u201capplication not found\u201d or, worse, it may result in the file being opened by an inappropriate application thereby displaying \u201cgibberish\u201d. The receiver of the file must have a program capable of reading (opening) the file. For example, if one attaches a spreadsheet file to an email message, the receiver of the file must have a spreadsheet program in order to open the file. Technically, it is not necessary that the receiver of the file have the same brand program as that which created the file. However, opening a file with a program which did not create it, though possible, can be very inconvenient. The receiver of the file must know what kind of file is attached to the email message, must know what program on their computer is capable of reading that type of file, must launch the program, must open the file from within the program, and wait while the program translates the file.","The limitations of Internet electronic mail can become even more frustrating if the sender and recipient are not using the same operating system (OS). Some mail attachment encoding schemes (and file compression schemes) are OS-dependent and it is possible that an email recipient could receive a file which is impossible to decode (or decompress).","These limitations in electronic mail have discouraged many people, particularly non-sophisticated computer users, from attaching files to electronic mail messages. In fact, for some novice users, the task of launching one application to create a document, saving the document, launching a separate email application to create an email message, and then locating the saved document for attachment to an email message is daunting enough to discourage them. In addition, novice users often complain that after \u201cdownloading\u201d a file attached to an email message they cannot find the file on their hard disk.","Another interesting aspect of electronic mail is that it is now widely used in electronic commerce, but only in a very limited way. Electronic mail is used by vendors to advertise goods and such electronic mail may typically include a hyperlink which, if clicked on, will cause the mail recipient's computer to launch a web browser and connect to the vendor's website where the goods may be purchased. Electronic mail is also used by online vendors to provide customer support by answering questions sent to the vendor via electronic mail and to confirm online purchases by sending electronic mail to the purchaser.","My previously incorporated parent application discloses electronic mail software which includes a main email component and a number of installable components. The installable components include authoring\/reading components for creating\/reading different kinds of documents and mailbox components for listing different kinds of messages or for listing messages in different styles. The main email component provides an underlying graphical user interface for functions directly associated with the storage and transfer of electronic mail messages, and also handles all data bundling and unbundling required to transform a message created by an authoring component into a MIME compliant message. The authoring\/reading components act like applications embedded within the email program and allow specific types of documents such as spreadsheets, graphics, databases, etc. to be created from within the email program and emailed directly. The authoring\/reading components also allow received documents to be read without the difficulties traditionally associated with attaching binary files to an email letter. The authoring components of the invention pass data to the main email component which packages the data as a MIME compliant message. When the message is received, the main email component concatenates (as needed) and decodes the MIME message and sends the data to the authoring\/reading component associated with the MIME type. The electronic mail software also includes modular integrated authoring\/reading software wherein the functionality of the authoring\/reading software is controlled by the \u201crole\u201d of the user when participating in an exchange of messages. One example of \u201croles\u201d given in the parent application was that of teacher and student. Another example was that of a puzzle encoder and a puzzle decoder.","It is believed that the enhanced electronic mail software disclosed in my previously incorporated parent application may be even further enhanced to provide more functionality regarding the use of \u201croles\u201d in the contexts of electronic commerce, healthcare, business, and law, as well as in education.","Recently, the email client OUTLOOK by MICROSOFT has received much attention because of its ability to execute Visual Basic Scripts (VBS) attached to or embedded in the body of an email message. While this ability has the potential of achieving some of the goals of the present invention, it has one major disadvantage. The recent interest in MICROSOFT OUTLOOK and VBS was spurred by the outbreak of several extremely damaging \u201cviruses\u201d or \u201cworms\u201d. These Visual Basic Scripts attached to email destroyed files on the email recipient's hard drive and spread by sending copies to all of the email addresses in the recipients' address books. At the present time, the only sure way to prevent damage by malicious Visual Basic Scripts is to alter the \u201cpreferences\u201d of OUTLOOK so that the ability to execute Visual Basic Scripts is disabled.","It is therefore an object of the invention to provide an electronic mail program which includes integrated authoring\/reading software whereby different kinds of documents may be created, sent, received, and opened by electronic mail in a seamless manner.","It is another object of the invention to provide an electronic mail program which includes modular integrated authoring\/reading software whereby different kinds of documents may be created and sent by email in a seamless manner.","It is a further object of the invention to provide an electronic mail program which includes modular integrated authoring\/reading software wherein the functionality of the authoring\/reading software is controlled by the \u201crole\u201d of the user when participating in an exchange of messages.","It is an additional object of the invention to provide an electronic mail program which includes modular integrated authoring\/reading software whereby the role of the user includes such roles as customer, vendor, database, service provider, technical support, teacher, student, attorney, client, doctor, patient, and organization members having different security clearances.","It is another object of the invention to provide an electronic mail program whereby the role of the message recipient is automatically generated by the authoring\/reading component and encoded in the outgoing message.","It is still another object of the invention to provide an electronic mail program which includes installable authoring\/reading components which communicate with the email program through a bidirectional application programming interface (API).","In accord with these objects which will be discussed in detail below, the electronic mail software according to one embodiment of the present invention includes a main email component and a number of installable components which communicate bidirectionally with the email component through an application programming interface (API). The installable components include authoring\/reading components as well as at least one mailbox browser\/editor component. The main email component provides an underlying graphical user interface (GUI) for functions directly associated with the storage and transfer of electronic mail messages. In particular, the main email component provides menu items which allow the user to SEND, READ, REPLY, FORWARD, DELETE, SAVE, and PRINT, for example. The main email program also handles all data bundling and unbundling that may be required to transform a message created by an authoring component into a fully MIME compliant message. In addition, the main email component includes \u201chooks\u201d (an application programming interface or API) for the attachment of the installable components. The authoring\/reading components each provide functionality which is particular to the type of document the component is designed to create\/display.","According to the invention, some modular components have assigned \u201croles\u201d whereby senders and recipients of certain email documents are provided different kinds of access to the documents. For example, in the case of customer\/vendor components, the vendor component allows a vendor to create an order form which appears in an email message read by the customer. The customer component allows the customer to fill in the form and mail back the filled-in data to the vendor or the vendor's database. A database component automatically reads the order data from the customer email and transfers this data to billing and fulfillment software. Other modular components having assigned roles include bidder\/auctioneer, doctor\/patient, attorney\/client, etc.","The authoring\/reading components interface with the main email component via designated \u201cMIME types\u201d. The MIME data standard allows developers to define MIME types using the label \u201cx-\u201d<string> in the data header where <string> is any ASCII string excluding space, control characters and other special characters. The MIME data standard also allows developers to define MIME subtypes using an extension to the label that appends the character \u201c\/\u201d and a string to the MIME type. For example a Kidcode Rebus message might be identified with the content-type header set as \u201cContent-Type: x-KidCode\/Rebus\u201d. Further, the MIME standard allows developers to include parameters within the contents of the \u201cContent-Type\u201d header field. For example, the KidCode Rebus message might be associated with a particular feature such as the school grade level associated with this type of Rebus message, e.g. \u201cContent-Type: x-KidCode\/Rebus grade=1\u201d. The authoring components of the invention pass data to the main email component which packages the data as a MIME compliant message with the label \u201cx-\u201d<application> in the message header, where <application> identifies the authoring\/reading component which created or can display the message. When the message is received, the main email component concatenates and decodes the MIME message, reads the MIME type, sends the data to the component associated with the MIME type, and waits for a user event or a callback from the component. This bidirectional communication between the main email component and the authoring\/reading components provides a totally seamless operation wherein the user may send and receive complex documents without any knowledge of attaching files, downloading, decoding, etc. Moreover, enhanced functionality is achieved through installable components. Only after the appropriate component has been installed can an \u201cactive\u201d email message call upon the component to execute.","Additional objects and advantages of the invention will become apparent to those skilled in the art upon reference to the detailed description taken in conjunction with the provided figures.","An exemplary embodiment of the architecture of the invention is described as follows with reference to an email client which will be distributed under the brand name UMBANET. Referring now to , the email client includes a main client , having a main client API , and one or more authoring\/reading components , each having a component API . As described in the previously incorporated parent applications, the authoring\/reading components each include a message handler  having an API and preferably an installable mailbox handler  having an API. Moreover, as described below with reference to , installable components may be made up of either message handlers, mailbox handlers, or both.","Referring now to , the main email client  includes functionality for message transport , message encoding\/decoding , message storage and retrieval , basic GUI to mail services , user administration , component installation , and special services . As mentioned above, the main email client  also includes an API  for communicating with authoring\/reading components , , , each of which have an API , , for communicating with the main email client . In addition, as mentioned above, a separate installable mailbox browser\/editor may be provided, having its own API for communication with the API  of the main email client . An example of a specialized mailbox browser\/editor component is disclosed in previously incorporated parent application Ser. No. 09\/604,426.","The main email client  performs all of the usual functions of an electronic mail client. These include message transport, message storage and retrieval, message encoding and decoding, user administration (including user preferences). In addition, the main email client includes unique functionality required to enable installable components and special server-based services.","The message transport functionality  of the main email client  handles all functions traditionally associated with sending (SMTP) and receiving (POP, IMAP) email messages. This includes finding and verifying network addresses, and sending and receiving mail messages to other servers on a network.","The main email client  handles all data bundling and unbundling that may be required to transform the message data used by a message authoring component into a fully MIME compliant message type via the message encoding\/decoding module . This way each message authoring component handles data in a format most convenient to it and all MIME parsing and details associated with protocol compliance are centralized in the main email client . The only requirement for the message data passed between a message authoring\/reading component and the main email client is that the message body data be formatted either as an ASCII string or in a binhex format.","The main mail client  maintains its user mailbox files locally. The storage and retrieval module  implements all functionality required for reading and writing messages and mailboxes to\/from permanent storage.","The main email client  also includes a GUI  for user control of those functions that are directly associated with storage, display, and transfer of electronic mail messages and mailboxes. In particular, the main email client interface includes buttons and\/or menu items that allow a user to send a message, reply to a message, open a message or a mailbox, delete\/trash messages or mailboxes, save a message to an alternative mailbox, and print a message. According to the presently preferred embodiment, the main email client user interface operates simultaneously with the user interface of an authoring\/reading component in the sense that both are active on the screen at the same time and present the \u201clook and feel\u201d of a single application. For example,  show authoring reading components for an auction bidder, a doctor, and a patient respectively. As will be explained in more detail below with reference to , each of the authoring\/reading components has its own interface which permits the user to interact with the component in a manner particular to the component. As seen in  the authoring\/reading component interface is generally provided in a separate menubar or integrated within the space of a window. Nevertheless, the main mail client interface is still provided, for example at the main menubar where the File, Edit, Message, Transfer . . . functions are always accessible. When a user interacts with the authoring\/reading component interface, the authoring\/reading component handles the user event. However, when a user selects a function from the main email client, the main email client intercepts and handles the event. Generally, if a message handler component is open, a user event in the main program will require an API call to the message handler component  in order to fully execute the user invoked action. If, for example, the user selects the \u201csend\u201d function, the main program intercepts the send request and makes a call to the API function msh_sendMessage (described in more detail below) in the active message handing component. The msh_sendMessage function passes a valid message body back to the main program or, if for example, a valid message body has not yet been defined, passes a FAIL code back to the main program.","The user administration module  provides functionality for management of user information such as the user's POP mail account, SNMP server, etc. In the case of a multi-user mail client (e.g. the KIDCODE\u00ae client described in previously incorporated Ser. No. 09\/209,162), the user administration module includes administrative functions and a user interface to add and modify information for more than one user. The module maintains a data structure consisting of all relevant user information for each user in the system. The module also manages files that are required for permanent storage of user information, if necessary.","The component installer module  handles the installation of installable components (authoring\/reading, mailbox, etc.) and maintains a data structure of component information for each installable component. When a new message handling component is installed into the mail client, the following information is made accessible to the main mail client via the component installer: MIME type of message handled by the component, component name and type, location and file name of program executable code for the component, location(s) of icon image data for the component, and description of the resources that need to be installed into the main client, e.g. buttons, menu items etc.","The implementation of the component installer is dependent upon the programming environment within which the system is built and meant to operate. In order for installable components to operate properly, it is necessary for the main client program to be able to execute the new component's program code and make function calls to that code. It is not sufficient to execute the code as a completely separate program module because function calls and data must be passed between the main program and the component. For example, in a Windows environment, an installable component might be made up of one or more DLL's (dynamic link libraries) and one or more resource or ini files. The email clients described in the previously incorporated parent applications were implemented with MACROMEDIA DIRECTOR using protected movies and an MIAW (movie in a window) invocation architecture. A Java implementation would use loadable Java classes to implement installable components.","The component installer should also be capable of editing data structures in the main program that manage the display of relevant user interface controls. For example, the component installer for the KIDCODE\u00ae client (described in previously incorporated Ser. No. 09\/209,162) adds a new button with the component icon to the main screen as well as making an icon available to the mailbox display component. It is also generally desirable to add entries for the new component to menus in the main client program.","An important part of the design of the component installer is a specification document that describes the format and type of information that must be provided by each installable component in order to have that information installed into the main client program.","The special services module  allows the UMBANET mail client to communicate with UMBANET servers on the Internet in order to provide specialized services such as component downloads, message tracking and accounting, recipient mail capability verification, PKI security and certification, etc. The UMBANET client uses TCP\/IP and a proprietary protocol to communicate with UMBANET servers. Once a TCP\/IP connection has been established with an UMBANET server, the client registers with the server. Thereafter, the client and server exchange information using the UMBANET protocol.","As mentioned above, the mailbox and the authoring\/reading components are preferably \u201cinstallable\u201d. However, it is possible to create an email client having most of the desired functionality of the invention with fixed components hard coded. In either case, the invention prescribes that mailbox components are used to display, edit, and browse mailboxes. Different kinds of users and different types of messaging applications (e.g. fax, traditional email, internet voice) may require very different displays and functionality from a traditional mailbox viewer\/editor. Installable mailbox components make it possible to upgrade, select from multiple viewing formats, utilize different mailbox viewer\/editors for different users, and in general increase the range of functionality that can be achieved within one basic messaging application program.","The message authoring\/display (message handler) components make it possible to handle an unlimited number of message types. Each message handler component is designed to deal with a specific MIME type of message. The MIME data standard has been designed so that application developers can define new MIME types as needed by labeling these with the \u201cx-\u201d<string> prefix. A message handler component can be any program that defines a message MIME type of data that it handles, implements the callback API functions described below, and matches the requirements imposed by the component installer module. API callback functions allow the main email client to obtain information about the message handlers and allow the message handlers to respond to standard mail commands such as Send or Reply, that have been issued by a user through the main email interface.","As described in more detail below with reference to , some of the types of message handler components contemplated by the present invention are those which can be thought of as creating \u201croles\u201d among senders and recipients of mail messages. As will be further elaborated, either the message handler or the message created by it can establish the \u201croles\u201d of the recipients and the authors such that recipients and authors are each permitted to interact with the message in certain different predefined ways.","Before describing the specific message handlers of the instant invention, it is useful to first fully describe the preferred APIs used to implement the main email component, the mailbox components, and the message handlers.","Main Email API Functions","These functions are called by the installable components to access services provided in the main email program.","emh_getUserMailbox (dt_MailBoxName)","This returns a mailbox data structure for the current user and mailbox name. This function is normally called by a mailbox handling component. Mailbox handling components may use temporary files to hold mailbox contents but they preferably never access the users mailbox files. All access to these files should be obtained through the main email program. The input to this function is (dt_MailBoxName) and the output is dt_MailboxData.","emh_getUserData (dt_UserName)","This returns a data structure with user information (in a multi-user client). The main email program maintains all user information and handles user administration functions. The main program also communicates with external mail servers which may contain other user information. The input to this function is (dt_UserName) and the output is dt_UserData.","emh_continue","This function is used by installable components to explicitly pass control back to the main email program. This function is necessary for the present implementation which uses MACROMEDIA DIRECTOR LINGO code. It is not a requirement for alternative implementations. The function has the argument (dt_ComponentType).","emh_killComponent","This function is used by an installable component to inform the main email program that it is preparing to terminate. This allows the main program to free any memory and\/or data structures that have been allocated to the component.","emh_passMessage","This function is used primarily by mailbox components to pass a message to the main program so that it can be displayed by the appropriate message handling component. The main program takes the message arguments (em_MailData) or (em_MessageAction). The former looks up the Mimetype of the message, and invokes the appropriate message handler to display the message. The latter is used with #open, #print, #send, . . . etc.","emh_getMessage","This function returns the message (em_MailData) with Number MessageNumber from the MailboxName of the current user. It can be used by installable components to retrieve specific messages from the user's mailboxes. If this is called with the messageNumber set to 0, the main email assumes the typeOrBoxName argument is a mimetype and returns a new message structure. Message handling components should call emh_getMessage with the number set to 0 and the mimetype whenever a new message is started. Normally this should be done whenever an active message is trashed.","emh_getRegisteredUsers","This returns a list of usernames (dt_RegisteredUsers) for the users that are registered with the email client, i.e. that have been added as users by the user administration part of the main email program. This is the same list of users that appears in the logon listbox when the program is started up. It may be used by installable components to create listboxes for filling address fields in messages or for checking whether a particular address is external to the system. This function may be used with an argument that specifies a MIME type. When so used, the function will return a list of users who are authorized to receive (or capable of displaying) messages of the specified MIME type. The indications of the authorizations or capabilities of users may be stored on a local server, on a remote server (via the Internet), or may be stored locally on a user's computer.","emh_sendMessage","The main email client sends a message with the argument (em_MailData) by either forwarding it to an external mail server or, if it is a registered email client user, writing the message to the user's incoming mail mailbox.","emh_saveMessage","The main email client saves a message with the argument (em_MailData) for the currently logged on user by writing the message to the user's \u201cnotes in progress\u201d mail mailbox.","emh_disableButton","It is recommended that this function be used carefully. Normally, the main email program controls the state of all the buttons available to users to access message handling of the main program. This function can be used to request that the main email program disable the button specified by the argument, ButtonName. If the button is disabled, whether it was already disabled or is disabled as a result of this function call, this function will return TRUE, otherwise it will return FALSE. The calling component should check whether the function call succeeded and proceed accordingly. The ButtonNames are #reply, #send, #print, #trash, etc.","emh_enableButton","It is recommended that this function be used carefully. Normally, the main email program controls the state of all the buttons available to users to access message handling of the main program. This function can be used to request that the main email program enable the button specified by the argument, ButtonName. If the button is enabled, whether it was already disabled or is disabled as a result of THIS function call, this function will return TRUE, otherwise it will return FALSE. The calling component should check whether the function call succeeded and proceed accordingly.","API Functions for Use with all Component Types","emc_startMeUp","This function is used by the main email program to tell an installable component to start. This function will execute prior to initialization of the component's data structures, which should only be initialized after the component receives the emc_initWindow call from the main email program. This function is necessary for the MACROMEDIA DIRECTOR LINGO code implementation and may not be needed for other implementations.","emc_initWindow","This function is used by the main email program to tell an installable component to initialize its data structures and prepare its graphical display. The component is passed the username of the current user. If the component requires additional user information in order to initialize, it can call emh_getUserInfo within its implementation of this function.","emc_closeWindow","This function is used by the main email program to tell an installable component to free all memory that it has used, close its window, and shut down.","emc_getComponentInfo","This function is used by the main email program to get required information such as componentName, componentID, etc. from an installable component. This function should not be called until the component window is fully open.","API Functions for Use with Mailbox Handler Components","mbx_getMessageNumbers","This function is used by the main email program to get the message number of the currently selected message in the mailbox browser. If no message is selected, the list should be empty.","mbx_getMessage","This function is used by the main email program to get the message data structure of the message with em_MessageNumber from the mailbox currently displayed in the mailbox browser. If the function fails, e.g. if there is no message with the given message number, the function returns an empty list.","mbx_trashMessages","This function is used by the main email program to tell the mailbox component that it has received a trash event (e.g. user pressed trash button). The component should identify which messages have been indicated by the user and return these messages in a list data structure. If no messages have been indicated by the user or if the component wishes to cancel the operation it should return an empty list. When it receives this call, normally the mailbox component will update its display and its data structures to delete messages that have been indicated by the user.","mbx_openMailbox","This function is used by the main email program to tell the mailbox component to display the mailbox passed in the argument (dt_Mailbox).","Functions for Use with Message Handler Components","msh_sendMessage","This function is used by the main email program to tell a message handling component to pass back a fully completed message data structure so that it can be sent to the recipient specified in the message's address field. The message handling component should update its display as appropriate for a message that has been sent. It should also change its state to display mode because a message that has already been sent should not be editable. If the function fails, e.g. if a fully completed message cannot be constructed (for example, if the user has not specified a message recipient), the function returns an empty list.","The message handling component will normally control all dialogs with a user that pertain to a message under construction. For example, to alert the user that a message recipient must be specified. However, if the message handling component fails to pass back a properly formatted, completed message data structure, (or an empty list acknowledging failure), the main email program will detect the error and alert the user about the field or fields that have not been specified.","msh_openMessage","This function is used by the main email program to pass a message data structure to a message handling component so that it can be displayed. The message handling component should display the message in the specified mode (e.g. either #author or #display). If the em_Mode argument is #display the message should not be editable. Otherwise the message should be opened so that it can be edited. If the function fails, e.g. if an error is detected in the message body, the message handler returns FALSE, otherwise the message handler returns TRUE.","msh_replyMessage","This message is used by the main email program to inform a message handling component to display the currently active message for editing as a reply. In order to reply, the message handing component will generally create a new message with the mode set to #author. If the function fails, e.g. if an error is detected in the message body, the message handler returns FALSE, otherwise the message handler returns the messageBody which may have been modified.","msh_clearMessage","This function is used by the main email program to inform a message handling component that the current message should be cleared from the display and from the message handling component's data structures. This function is used, for example, when the user indicates they want to trash the current message by clicking on the \u201ctrash\u201d button in the main email program GUI. If the function fails, the message handler returns FALSE. Otherwise the message handler returns TRUE.","msh_saveMessage","This function is invoked when the main email program receives a save event, e.g. the user presses the \u201cSave\u201d button. The message handler should pass the messageBody back to the main email program to be saved. In general, the message handler should maintain its state when this function is called because the user may want to continue editing the message.","msh_printMessage","This function is used by the main email program to inform a message handling component that a message should be printed. This function is used, for example, when the user indicates they want to print the current message by clicking on the \u201cprint\u201d button in the main email program GUI. When the argument, em_mailData, is an empty list, the message handler component should print the currently active message. Otherwise the message handler component should print the message argument. Normally, if the message handler component has been fully initialized and is displayed in a window, the main email program will call this function with an empty list for an argument. The function may also be used by the main email program to have a message handler print a message even though the message handler component has not been fully initialized and displayed in a window. For example, this will occur if an active mailbox component receives a print request from the main email program for a message that has been selected in the mailbox browser. In this case, the main email program will send a request to the appropriate message handler component to print the message without fully starting it up and initializing its window. Therefore the message handler should implement the msh_printMessage function so that the following sequence of function calls succeeds emc_startMeUp, msh_printMessage(message). If the function fails, the message handler returns FALSE. Otherwise the message handler returns TRUE.","msh_trashMessage","This function is used by the main email program to tell a message handler component that it has received a trash event (e.g. user pressed trash button). The component should do whatever is appropriate and return its currently open message data structure. A component may want to display a dialog box to verify the trash operation before proceeding. (e.g. emh_alertUserToTrash) If the component wishes to cancel the operation, it should return an empty list. Normally a message handling component will update its display and its data structures to clear the trashed message from its display.","From the foregoing, those skilled in the art will appreciate that message handling components may be created for different user roles and\/or messages may be assigned certain role information which controls how the recipient(s) of the message interacts with the message. Moreover, certain message handling components can provide different levels of authoring and different levels of readership based on \u201croles.\u201d","Turning now to , one implementation of a message handling component is that of a \u201ccustomer\u201d component (or a reading\/authoring component which is responsive to a \u201ccustomer message role).  illustrates an email message  which was created by a \u201cvendor\u201d component (or an authoring\/reading component in a \u201cvendor\u201d role).  shows the message as it appears on the recipient's computer screen. As shown the message appears to be a simple plain text email message with a hot link  to the vendor's web page (the underlined sentence \u201cClick here to Go to Our Web Page for more Details.\u201d). However, the second hot link  in this message (the sentence \u201cClick here to Automatically Order the Product by Email\u201d) invokes special functionality of the reading\/authoring component installed in the recipient's email program. When the user clicks on this second hotlink, the \u201ccustomer\u201d message handling component causes a new outgoing email message  to be created as shown in .","As shown in , the new mail message is pre-addressed and the body contains information relating to the order which will be placed when the new message is sent. The body of the message is actually a template which was created from information contained (though hidden from display) in the email message  received from the vendor. This information was not displayed in the original message shown in , but was made known to the message handling component for use in creating the template  shown in  if the user clicked on the second hot link  in . The customer role assigned to this outgoing email message  allows the user to make only limited additions to this template. Specifically, the user may enter a number of items in the blank  and a choose a size using the \u201cradio buttons\u201d , then click on the send mail icon . This template is interactive and controlled by the message handling component so that as soon as the user selects a number to order, the purchase price is displayed in the field  as shown in . In order to minimize the amount of input required of the customer, the purchase price is preferably charged to an account already set-up with the vendor. This mode of operation also maximizes the security of the transaction.","As mentioned above, the user can click on the send mail icon  once the form is filled in. Preferably, the send mail icon  will remain \u201cgrayed out\u201d until the user completes all of the information required by the form. If the user changes his\/her mind about placing the order, s\/he may simply close this window without sending the message. If the user clicks on the send icon , the mail is sent back to the vendor, preferable with an assigned role of \u201corder fulfillment\u201d, for example. The message may also be preferably addressed to an automatic mail handler which will automatically extract information from the order and from the customer database and process the order.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 3","FIGS. 4 and 5","FIG. 3","FIGS. 3-5"]},"According to the first scenario,  shows a message displayed in a customer component with the \u201ccustomer\u201d role. The customer clicks on the \u201cClick here to Automatically order . . . ,\u201d and the customer component starts a new message that is assigned the role \u201cvendor\u201d (i.e. it will be received by a participant in the vendor role). The new message with the \u201cvendor\u201d role is displayed in the customer component is shown in . This is an interpretation that matches closely to the operation of the code included in the parent application. However, in the original code, the invocation of the new message is normally done by hitting the \u201creply\u201d button in the main interface rather than a field displayed on the incoming message.","This functionality is useful if it is necessary for a message author (e.g. a vendor) to control the assignment of role information associated with various types of replies on an individualized basis. For example, if it wanted certain types of customers to have access to the online customer service and wanted to encode this in the message body itself. In this case, some customers would receive a message looking similar to the one displayed in  with an additional line that says \u201cClick here to request customer support\u201d in which case a new message with a role assigned to be \u201cSalesInfo\u201d would be created in the Sales authoring\/reading component.","According to the second scenario  shows a message displayed in a \u201ccontroller\u201d component that is capable of responding to an input pair (message data+user action) by opening new messages in other components. When the customer clicks on the \u201cClick here to automatically order . . . ,\u201d the \u201ccontroller\u201d component opens a new message in author mode (perhaps tagged with the \u201ccustomer\u201d role) in the \u201ccustomer\u201d component. This scenario could be implemented by sending an HTML-like message with a message MIME type set up to identify the controller component, e.g. \u201cx-ControllerMsg\u201d whose body consists of a set of data pairs (display_string\/associated component to open\/data parameters for component). For example, the screen shown in  could be generated by a message that had a \u201cContent-Type=x-ControllerMsg\u201d and a message body that consists of:","(\u201cone Day Special . . . \/nil\/nil)","(\u201cClick here to go to our Web Page for more details.\u201d \/text\/HTML\/\u201chttp:\/\/www.sales.com\u201d)","(\u201cClick Here to Automatically Order this Product by Email\u201d \/x-Sales\/Customer\/\u201cPID 121121\u201d)","Existing mail clients are almost capable of implementing this sort of behavior using HTML and Javascripts. If an existing mail client were modified to be able to run Javascripts, the message displayed in  could consist of HTML and Javascripts. When the user clicks on the \u201cClick here to automatically . . . .\u201d A Javascript could run that opens the customer component with a new message with the vendor role (as shown in ). However, as mentioned above, this type of implementation would open the mail clinet user to malicious Javascripts. According to the preferred embodiment of the invention, no executable code is contained in a message, only tags which are read by the authoring\/reading component.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 6","FIG. 6","FIG. 6"],"b":["60","62","64","66","68","70","74","60","74","76","60"]},"As mentioned throughout above, the concept of role may be associated with a particular component or with a message created by the component. In the auction example, it is desirable that the non-auctioneer component have at least two modes of operation, one being the role of bidder and the other being the role of seller. The bidder role is illustrated with reference to  described above. The seller role is illustrated with reference to which shows a message template  which is created when the user chooses to post a for sale message. The template  includes a title field , a category field , a description field  and an option checklist .","According to a presently preferred embodiment, the concept of role is associated with the message and authoring\/reading components are capable of creating and reading messages having different roles. In the KidKode\u00ae embodiment of the invention, the role of the message is contained within the body of the message. According to other embodiments, the role of the message is encoded in the MIME type, subtype, a parameter in the \u201cContent_Type\u201d header, or in the subject header. The processing of a message with a specified role may be carried out either by an authoring\/reading component designed specifically to handle messages with the specified role or by an authoring\/reading component that is built to handle all messages of a specified MIME type. When the authoring\/reading component handles all messages of a given MIME type it includes within it the logic necessary to process messages with different roles differently.","As mentioned above, in the KidCode\u00ae embodiment, the message role is encoded in the message body and is handled entirely by the authoring\/reading components. This has advantages over an alternative that records the message role in a message header field because the mail email client can be independent of any knowledge of roles and does not need to be encumbered with role handling logic that is best left to component designers. However, this places a restriction on the design of authoring\/reading components. If role information is embedded in the message body, it is not advisable to allow the creation of authoring\/reading components specialized to handle certain roles. To do so would require that the main mail client software be capable of parsing the message body in order to find the role information and, thereby invoke the proper authoring\/reading component for a given message. Good software design principals require a strict separation between the data available to the main mail client and data that is processed exclusively by authoring\/reading components. Maintaining this separation is very important to ensure integrity of the API which allows independent software developers to build authoring\/reading components that can be guaranteed to work properly with a main email client program.","Nevertheless, there are many types of transactions in which each participant in an email exchange acts in a single role. For example, in the Doctor\/Patient application described below, the individual who is the patient normally does not take on the Doctor role. In this case, it is both more secure and more efficient to construct separate authoring\/reading components to handle Doctor or Patient messages. It is also desirable to recognize that these are two sides of the same transaction and encode all messages associated with the transaction with the same MIME type.","A solution that enables both the development of authoring\/reading components specialized to handle particular roles and guarantees data separation as described above is to encode role information as a subtype of the MIME type in the \u201cContent-type\u201d header field. Using this method, the main email client would properly invoke the correct authoring\/reading component in the case that an independent authoring\/reading component has been constructed for handling a specified message role. Another alternative is to encode role information in the parameter that may be optionally included in the \u201cContent-type\u201d header as defined by the MIME standard. In this case, the main email client maintains data separation with respect to the message body but is required to parse the Content-Type parameter. The additional complexity necessary in the main mail client software causes this to be an inferior solution.",{"@attributes":{"id":"p-0099","num":"0098"},"figref":["FIGS. 7 and 8","FIG. 7"],"b":["80","82","84","86","82","84","86","80"]},{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIG. 8","FIG. 7","FIG. 7","FIG. 8","FIG. 7"],"b":["90","80","90","90","92","84","94","96","98","94","96","98","100","86"]},"From the foregoing, those skilled in the art will appreciate that the concept of \u201croles\u201d as implemented herein may be expanded to a number of different useful applications of interactive email. The roles described and illustrated above include customer, vendor, database, doctor, and patient. Previously incorporated parent application Ser. No. 09\/209,162 disclosed several examples of teacher and student roles. Those skilled in the art will appreciate that the principles describe herein can be applied to roles such as service provider, technical support, attorney, client, and organization members having different security clearances. Service provider and technical support will present templates requesting information needed to diagnose a problem. Reply mail with data fill-in can be parsed by an artificially intelligent mail reader and tentative diagnoses sent by email to a human representative. The attorney and client roles may be implemented in a manner similar to the doctor and patient roles. The roles of organization members have different security clearances can be implemented in a manner whereby a message created by someone with the highest security clearance is classified in different ways so that only those with the proper clearance can read it. For example, it is possible to create a message where some parts of the message are highly classified and other parts of the message are given lower classifications. Readers with high security clearance will be able to read all or most of the message. Readers with low clearance will only be able to read parts of the message.","As stated above, normally the role information associated with each message is assigned to the message when it is created or when it is sent. A role can often be automatically assigned to a message by the authoring\/reading component used to author the message. The role given to a message may be based on many factors including the state of a previous message (or sequence of messages), information selected by a message author, and information associated with the message recipient and\/or the message author. In the KidKode\u00ae embodiment, the authoring\/reading components built for children's educational games automatically assign a role to a message on the basis of the state of a previous message.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 9","FIG. 9"],"b":["110","112","114"]},{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIG. 10","FIG. 9","FIG. 10"],"b":["116","118","120","122","124"]},"The above illustration illustrates an important distinction to note regarding the interaction of the message mode and the message role. For many types of interactions it is desirable to control the information that is seen by the user depending upon the role that the user has in a given transaction or series of exchanges. For example, messages that have already been sent and reside in the outbox are read only messages (i.e. always opened with the mode set to \u201cdisplay\u201d). In the case of an authoring component such as the KidCode\u00ae Rebus or Grid, in which the role of a sent message is in an incorrect state for the message author (i.e. a decoder's message that has been sent has the \u201ccoder\u201d role), a \u201cdisplay\u201d mode message must be viewed as having a different role than it actually carries. If a Rebus decoder were to see his reply message after it has been sent with a \u201ccoder\u201d role, he would be able to view the answers to the puzzle in the messages in his outbox. The logic to handle the various interactions between message modes and message roles are included in the authoring\/reading component. In this way the main email component is separated from all aspects of message roles which are properly the domain of an particular messaging application.","There have been described and illustrated herein several embodiments of electronic mail software with modular integrated authoring\/reading software components including methods and apparatus for controlling the interactivity between mail authors and recipients. While particular embodiments of the invention have been described, it is not intended that the invention be limited thereto, as it is intended that the invention be as broad in scope as the art will allow and that the specification be read likewise. Thus, while particular APIs have been disclosed, it will be appreciated that other APIs could be utilized provided that the basic functionality described herein is maintained. Also, while \u201cinstallable\u201d components have been discussed in detail, it will be recognized that permanently installed components could be used with similar results obtained, less the ability to upgrade functionality in an easy manner. Moreover, while particular configurations have been disclosed in reference to the relationship between the main email client, the message handlers, and the mailbox handlers, it will be appreciated that other configurations could be used as well provided that the basic functionality of the invention is maintained. It will therefore be appreciated by those skilled in the art that yet other modifications could be made to the provided invention without deviating from its spirit and scope as so claimed."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 6","i":"a "},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
