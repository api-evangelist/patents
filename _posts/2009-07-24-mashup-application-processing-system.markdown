---
title: Mashup application processing system
abstract: A method, programmed medium and system are provided for enabling a user to move a piece of data or context to another page in a mashup application. Rather than linking directly between pages, pages are “linked” by a drag-and-drop action of the user. To move a piece of data or context to another page, the user drags an item from the current mashup page onto the tab of a target page to which the data item is to be moved. The dropping of a text item on, for example, a tab of a target page causes an event to be fired on the target page, which may be wired to widgets contained within the target page. The target tab is then brought into focus and its page contents displayed. Visual indicators are also provided on source pages to indicate the target pages, which will “accept” the dragged contents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08312383&OS=08312383&RS=08312383
owner: International Business Machines Corporation
number: 08312383
owner_city: Armonk
owner_country: US
publication_date: 20090724
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates generally to information processing systems and more particularly to a methodology and implementation for enabling an improved processing system for Mashup applications.","In network web development, a mashup is a Web application that combines data from one or more sources into a single integrated tool. The term Mashup implies easy, fast integration, frequently done by access to open application programming interfaces or APIs and data sources to produce results that were not the original reason for producing the raw source data. An example of a mashup is the use of cartographic data from a mapping program to add location information to real estate or restaurant data, thereby creating a new and distinct Web service that was not originally provided by either source.","Mashups are increasingly being used as an enabling technology or richer portals for building enterprise applications. The basic components of the mashup are widgets and wirings. A widget consists of an embeddable piece of web user interface (UI) function that can communicate with other widgets through \u201cevents\u201d. A wire is a communication link between two or more widgets. A mashup consists of a definition of widget layout, widget configurations, and wirings. One key tenet of the mashup environment is that the user is empowered to completely customize the UI, including contents, configurations, and wirings. This creates a challenge within environments where the designer of a set of widgets and predetermined page content wishes to enable scenarios that cross between multiple page boundaries. However, the designer cannot link directly between two pages in predetermined content without violating the mashup principle: that page may no longer exist in the user's display environment or may have been completely customized from its original contents. Mashups are very loosely coupled components. The components may come from the same provider (in which case, that provider envisioned how they might work together) or may come from different providers. Since the user creates the content and assembles their own user interface (UI), navigation between widgets cannot be assumed since it is not known how the user will structure the application.","Also, the user may have added their own custom pages and would like those pages to participate in the cross-page interactions. Finally, because these widgets are assembled in a loosely coupled fashion, a user interface paradigm is needed to indicate what information may have possible interactions with other pages.","Thus, there is a need to provide a data input system which is effective to enable computerized device users to quickly customize pages in a mashup application.","A method, programmed medium and system are provided for enabling a user to move a piece of data or context to another page in a mashup application. Rather than assuming a linkage in the design which links directly between pages, pages are \u201clinked\u201d by a drag-and-drop action of the user. In an illustrated example, to move a piece of data or context to another page, the user drags an item from the current mashup page onto a target transition device, for example onto a page tab of a target page to which the data item is to be moved. The dropping of a text item on a tab of a target page causes an event to be fired on the target page, which may be wired to widgets contained within the target page. The target tab is then brought into focus and its page contents displayed. Visual indicators are also provided on source pages to indicate the target pages, which will \u201caccept\u201d the dragged contents.","The various methods discussed herein may be implemented within a computer system which includes processing means, memory, storage means, input means and display means. Since the individual components of a computer system which may be used to implement the functions used in practicing the present invention are generally known in the art and composed of electronic components and circuits which are also generally known to those skilled in the art, circuit details beyond those shown are not specified to any greater extent than that considered necessary as illustrated, for the understanding and appreciation of the underlying concepts of the present invention and in order not to obfuscate or distract from the teachings of the present invention. Although the invention is illustrated in the context of a networked computer system using a laptop computer or other portable device, it is understood that disclosed methodology may also be applied in many other available and future devices and systems such as cell phones and personal wireless and other hand-held devices, including any input device, including touch-sensitive screens or touch-sensitive input pads, to achieve the beneficial functional features described herein.","\u201cMashups\u201d typically communicate using a data model that's exchanged through an event system implemented in JavaScript\u2122. This eventing enables coordinated behavior between multiple widgets within a mashup page. Most mashup environments allow the user to create multiple mashup pages and navigate between those pages via tabs. Mashup editor applications are also available to help users create or edit mashups.","This disclosure describes a method, programmed medium and system for enabling a user to move a piece of data or context to another page in a mashup application. Rather than linking directly between pages, pages are \u201clinked\u201d by a drag-and-drop action of the user. To move a piece of data or context to another page, the user drags an item from the current mashup page onto the tab of a target page to which the data item is to be moved. The contents of the target page are not viewable from the source page which displays only tabs identifying other off-screen target pages. The dropping of a text item on a tab of a target page causes an event to be fired on the target page, which may be wired to widgets contained within the target page. These widgets can then update to the context of the event. The target tab is then brought into focus and its page contents displayed. Another feature notifies a user as to which items are contextual pieces of information that are draggable from a source page to one of one or more target pages to which a highlighted text item of a source page may be moved. This is accomplished, in one example, by using semantic tags to achieve visual highlighting of content within the widget that provide cues to the user as to which items can be dragged. Visual indicators are also provided to indicate the target pages, which will \u201caccept\u201d the dragged contents. This is accomplished through matching semantic information within the tag with the semantic metadata associated with the page. The mashup runtime (typically a JavaScript\u2122 runtime code executing in the browser) can do semantic checking against the pages that are currently displayed within the user's current collection of tabs. Possible page matches can be displayed to the user as a popup when highlighting a mouse over that page.","Semantic tags can be embedded around content within widgets, to be processed by the rendering framework. A typical approach to adding semantic tags is to make use of microformats. Microformats are typically specified either as:","<div class=\u201cMicroFormatType\u201d attrib1=value1 attrib2=value2 . . . ><\/div>","or as xHTML formats:","<nmsp:tagName attrib1=value1 attrib2=value2 . . . ><\/nmsp:tagName>","Microformat tags can be nested to contain more complex event structures. To achieve the matching described above, the semantic tag can include \u201cterms of understanding\u201d that indicate the nature of the contents within the tag. These terms can be embedded within an attributes on the tag, e.g.: <div class=\u201cmashupPageTag\u201d semantics=\u201cfoo bar\u201d><\/div> or in more complex structures. These semantic tags get mapped to events and common data structures for signaling the events to allow for inter-page communication. Terms of understanding can be anything from keywords to symbolic URIs to actual RESTful URLs that reference resources associated with the content. The same technique can be applied at the page level, either embedding the microformat tags as part of the page metadata or within the page definition itself (which often is a microformat in a mashup environment). Then, when the user hovers their mouse over the semantic link, the mashup runtime (in JavaScript\u2122, for example) can then do matching between the semantic terms for the content and the semantic terms advertised by the pages on the tab. A popup window can appear under the mouse cursor that lists potential receiving tabs. In addition, an \u201caccept\u201d check can be performed at drag time to make sure that semantic terms match up.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["101","103","105","105","107","105","101","101","107","105","105","101","107","103","109","111","101","107"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["201","203","203","205","207","209","211","213","215","217"]},"In , there is shown an exemplary home page  of a mashup application as presented on a user's display device . The page includes tabs including a news service tab , a general items tab , a business news service tab , a sports news service tab  and international news service tab . Other tabs are available on the world wide web and may be added to the home page . As shown, the news service tab  is open and includes the widgets from several different news services including news service A , news service B  and news service C . Each widget ,  and  includes news headline items which may be different for each widget or news service. Users are able to add additional widgets to their home page by moving a pointer  to a block  labeled \u201cADD CONTENT\u201d and actuating a switching device such as a depression button switch on a mouse pointing device.","When the ADD CONTENT  function has been selected, the screen  shown in  is displayed. As shown, the display includes a plurality of additional news service widget icons , , , ,  etc., which the user may select and add to the user's home page. For example, if a user moves a pointer  to icon  for news service D and actuates the appropriate mouse button, a pop-up window  will be presented showing at least a portion of the detailed headlines of news service D. The user may then select to add the new tab for news service D to the user's home page by \u201cpointing and clicking\u201d on an ADD block  as indicated by the reference numeral . The current linking process shown in  requires several steps to accomplish the addition of a new widget to a user's home page.","In accordance with the present invention,  illustrates a new processing methodology for adding new widget data to a user's home page As shown, a display screen  displays a home page  which includes a series of tabs , , etc., and each tab includes one or more subject-related widgets such as News Service A widget . When a user hovers over or selects a content \u2018hot spot\u2019 within an existing widget, for example, when a user moves a mouse pointer  over a label area or heading for News Service A, an informational pop-up window  appears which displays to which pages or tabs any selected data items within the selected widget may be moved. The hot spot itself has some type IDs associated with it that indicate the nature of the data, or the type of event it generates. The other pages are then searched to see which one of those accepts an event of the same type. If a match is detected then it's actionable and the widget may be moved. This informational window methodology has been implemented since not all widget data are or may be movable to all tabs or pages. For example, the content items within a widget might have a ticket number associated with each item. The ticket number may be marked and highlighted as a ticket number. The user is enabled to drag the ticket text onto a tab whose page will display information about the ticket. Once the user is informed as to which tabs or pages the selected data may be moved, if the user wishes to move or copy selected source widget data e.g. , to another tab identified in the informational window , the user is enabled to use a drag and drop technique to accomplish the desired operation.","As shown in  for example, a user would first be informed from informational window  that selected data  within source widget  may be moved to, inter alia, the \u201cGeneral\u201d tab . If the user wishes to move or copy the source widget  to the \u201ctarget tab\u201d e.g. , then the user is enabled to accomplish that function using a drag-and-drop operation. For example, the user can highlight a data item , and while holding the mouse button in the depressed position, move or drag the selected data item  to position  (), which is superimposed upon the \u201cGeneral\u201d tab . When the user then releases the mouse button, the data item  will be moved (or copied) to the General tab  home page without requiring further mouse manipulation or manual page-linking by the user. It is also noted that more than one data item may be moved by highlighting and moving or copying all of the data items which are to be moved to another tab.","The widget movement function may also be accomplished by a finger or stylus movement of a user when using a touch-sensitive screen device by moving the selected widget inside of a predetermined screen area in proximity to the selected tab, and then removing the finger from the touch-sensitive screen, which would trigger the event copying or moving the selected widget to the selected target page.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 7","FIG. 5"],"b":["701","703","705","705","513","707","709","711"]},"It is understood that the specific example presented herein is not intended to be limiting since the functional combinations disclosed herein may be implemented in many different environments and applications including, for example, applications involving the visualization of business processes and movement of emails, task lists, task list items and other system data components within an overall system data containment environment or application.","The method, system and apparatus of the present invention has been described in connection with a preferred embodiment as disclosed herein. The disclosed methodology may be implemented in a wide range of sequences, menus and screen designs to accomplish the desired results as herein illustrated. Although an embodiment of the present invention has been shown and described in detail herein, along with certain variants thereof, many other varied embodiments that incorporate the teachings of the invention may be easily constructed by those skilled in the art, and even included or integrated into a processor or CPU or other larger system integrated circuit or chip. The disclosed methodology may also be implemented solely or partially in program code stored in any media, including any portable or fixed, volatile or non-volatile memory media device, including CDs, RAM and \u201cFlash\u201d memory, or other semiconductor, optical, magnetic or other memory media capable of storing code, from which it may be loaded and\/or transmitted into other media and executed to achieve the beneficial results as described herein. The disclosed methodology may also be implemented using any available input and\/or display systems including touch-sensitive screens and optically-sensitive input pads. Accordingly, the present invention is not intended to be limited to the specific form set forth herein, but on the contrary, it is intended to cover such alternatives, modifications, and equivalents, as can be reasonably included within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description of a preferred embodiment is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
