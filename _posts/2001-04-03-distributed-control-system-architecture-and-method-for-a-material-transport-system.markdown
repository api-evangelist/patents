---
title: Distributed control system architecture and method for a material transport system
abstract: An automated transport system for use in a material handling system. The automated transport system employs a distributed control system including a top level controller (transport controller), a plurality of second-level controllers (control logic computers) and a plurality of third-level controllers (intelligent drivers). The transport controller (TC) receives material commands from a conventional material control system (MCS). The TC breaks the command into sub-commands directing selected control logic computers (CLCs) to acquire, move to a destination or otherwise interact with a particular container designated by the MCS command. The transport controller selects the CLCs based on the transport system topology, the content of the MCS command and knowledge of which regions of the transport system are controlled by respective CLCs. Each CLC implements the sub-commands by issuing to the intelligent drivers low level control commands to accelerate, elevate, rotate, load or unload the container. Each intelligent driver directly controls one of the electromechanical devices that compose the transport system hardware in accordance with these low level commands. The electromechanical devices can include rail sections (zones), directors, elevators, load port transfer devices and tag readers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06853876&OS=06853876&RS=06853876
owner: Asyst Technologies, Inc.
number: 06853876
owner_city: Fremont
owner_country: US
publication_date: 20010403
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation of U.S. patent application Ser. No. 09\/212,002 filed Dec. 14, 1998 now U.S. Pat. No. 6,240,335.","The present invention relates generally to manufacturing control systems and, particularly, to control systems for use in material transport systems.","Automated conveyor systems are used in a variety of applications to transport material. The material is typically loaded onto the conveyor using automated equipment which controls the flow of the material. Automated equipment is also used to remove the material at the exit point, with the conveyor and\/or removal equipment being designed to allow several articles to accumulate near the contact point while preventing collisions between adjacent material units. With some applications, including semiconductor processing, the material must be temporarily moved from the conveyor to a work station at one or more locations along the conveyor path. The material is later returned to the conveyor, which then transports the material to the next work station or the exit point. Moving the material between the conveyor and work stations along the path can be complicated as care must be taken to ensure the transfer is accomplished without significantly interrupting the flow of material on the conveyor. A system for efficiently and conveniently transferring material between a conveyor system and a work station, without interfering with conveyor material flow, is desirable.","One example of a field in which material is temporarily removed from the conveyor at intermediate locations is the field of semiconductor processing. In this field, a conveyor may be used to transport semiconductor wafers or other substrates to several different processing machines or to transport reticles from a stocker to a stepper. The material (i.e., the wafers or reticles) must be transferred to the machine for processing and, after processing has been completed, returned to the conveyor for delivery to the next processing machine. The material is typically retained in a protective container such as a sealed transport pod to minimize any exposure of the substrates to the environment outside of the processing machines and protect the material against particulate contamination. The entrance of each processing machine is provided with a load port designed to automatically remove the material from the transport pod in a protected environment. During operation of the facility, material must be frequently moved between the load port and conveyor.","Typically, the semiconductor manufacturing facility is organized into a plurality of bays each including several processing machines. Various systems (called intra-bay transport systems) are employed to move the material between the machines within a bay. For example, many systems rely upon human workers to transfer the material from port to port using a cart. The worker typically actuates a manual robotic link or other lifting device to move the material to the port and, after processing has been completed, to return the transport pod to the cart. The press is repeated at the next machine. Another system of intra-bay transport relies upon automatic guided vehicles (AGVs) which carry the pods between the machines and automatically move the pods into the load port. The cart and AGV lack the advantages associated with an automated conveyor, which can efficiently and rapidly move articles along a conveyor path and has much higher capacity than the cart and AGV.","Semiconductor wafers are delicate and, particularly in the later stages of processing, quite valuable. Integrated circuits are manufactured by forming a plurality of layers on a semiconductor wafer or other substrate. With advances in technology, integrated circuits have become increasingly complex and typically include multiple layers of intricate wiring. The number of integrated circuits positioned on a single wafer has increased due to the decreasing size of the integrated circuits. The standard size of the semiconductor wafers will increase from 200 mm to 300 mm in the next few years, further increasing the number of integrated circuits which may be formed on a single wafer. As a result of the increased complexity and decreased size of the integrated circuits, the value of the semiconductor wafer increases substantially as the wafer progresses through the various processing stages. Also, the increased weight of a pod of 300 mm wafers creates ergonomic problems in manual wafer handling. Thus, considerable care must be taken in handling the semiconductor wafers, particularly during the later processing stages, since damaged wafers could result in considerable monetary losses. The requirement of a clean room environment, substantially free of particulate contamination, for processing the wafers places further restraints on the systems which may be used to transfer the material. A system for transferring material between a conveyor and load port which is suitable for operation in a clean room environment is desirable.","A transfer system for moving material, such as semiconductor wafers, transport pods carrying semiconductor wafers, or other containers, between a conveyor and a load port or other work station is desirable. A transfer system which may be used in fields other than semiconductor processing, including but not limited to pharmaceuticals, medical systems, flat panel displays and computer hardware, such as disc drive systems, modems and the like, is also desirable.","The movement of material in a conveyor-based transfer system is often managed by an automated control system (ACS). For example, one such system is employed in the baggage handling system at Denver International Airport. Another such system is employed by the U.S. Postal Service to control the conveyance of mail trays in the Processing and Distribution Center in Carol Stream, Ill. (for more information, refer to \u201cU.S. Postal Facility Improves Operation with Honeywell's Smart Distributed System,\u201d available at http:\/\/www.honeywell.com\/sensing\/pressrel\/9718.stm). An ACS has also been employed in at least one conveyor-based transfer system used in semiconductor manufacturing operations to manage the movement of pods of wafers.","In contrast with the post-office and baggage examples, an ACS for a conveyor-based transfer system used in semiconductor manufacturing operations must ensure that the pods of wafers being transferred never collide and are not subjected to excessive acceleration. Additionally, the ACS must assure timely deliver pods of wafers from one processing station to another. One such prior art ACS, the \u201cAsyst Automation Control System,\u201d shown in , works with a transfer system that conveys pods or open casettes of wafers between and within processing bays. This transfer system includes track on which the material moves, directors, which are electromechanical units that provide rotation between track segments that meet at an angle, and elevators, which are electromechanical units that raise or lower a pod. The track includes a number of motors used to move the material and sensors that sense the location of the material.","Referring to , the Asyst Automation Control System includes multiple PLCs (Programmable Logic Controllers), each of which controls the movement of one or more pods in a respective region of the transfer system in accordance with system goals. Each PLC is coupled via a ProfiBus to the sensors and motors that compose its respective region of the track. The ProfiBus is a sensor bus, meaning that it is only used to transfer signals between a smart controller (the PLCs) and clients (motors, sensors, directors, elevators, etc.) with no autonomy. The PLCs are interconnected, enabling them to share information about pod movement and location. The number of sensors and motors that can be controlled by a PLC is limited. This is because PLCs are polling devices that work in scans. For each scan a PLC reads every one of its associated sensors. Therefore, the more the sensors, the longer the scan time, and the fewer scans pers second, resulting in a less responsive system. One additional problem with this architecture is that the PLC must know the control interfaces of each of its associated devices. As a result, a PLC needs to be modified whenever new sensor or motor interfaces are added to the transfer system. Another problem is that a PLC is simultaneously concerned with high-level control issues, such as moving a pod to its destination without collisions, and low level issues, such as accelerating a motor. As a result, PLC computing power becomes a key factor in the performance of the transfer system. Both problems are also a hindrance to transfer system scalability and reconfiguration.","Therefore, a transport system ACS that is scalable, efficiently employs computer resources so that high level and low level control operations are not in conflict and easily supports new types of the motors, electromechanical components and sensors would be desirable.","In summary, the present invention is a control system architecture and method for a material transport system that meets the needs described above. The present invention includes three levels of controllers. A high level (transport) controller interfaces with an external command system that issues control commands to the present control system indicating how the materials are to be moved. For example, in the preferred embodiment, which is implemented in the context of a material transport system for use in a semiconductor fabrication facility, these control commands include a command to move a particular container of material from one processing station to another station. The transport controller (TC) executes a control command by sequencing a series of basic operations that implement the control command. In one embodiment, the TC does this by breaking the control command into a series of atomic acquire, move and deposit commands that are executed by at least one second level controller (control logic computer, or CLC).","As befits a distributed control system, the TC is the only system entity that knows the physical topology of the entire material transport system. One representation of the topology stored by the TC is organized around the set of all possible system destinations and transport system zones. Each destination includes references to location and device information associated with zones from which pods can be preloaded to and launched from that destination. The TC also maintains status information for the transport system using information returned by the CLCs.","Each control logic computer (CLC) provides high level, real time control and coordination of a distinct region of the physical conveyance system by providing instructions to a set of third level controllers (intelligent drivers), each of which is in turn responsible for low-level control of one or more of the electromechanical devices in the CLC's region of control. For example, in a preferred embodiment, a region might include 64 zones, each including a set of sensors (e.g., 2), a length of track (e.g., 0.5 m) and drive motors (e.g., 1). Based on information from the sensors, knowledge of the region's topography and rules for speed control, routing and collision avoidance, the CLC executes the atomic commands by sending motor control commands down to its intelligent drivers.","In a preferred embodiment there are different types of electromechanical devices. Each different type is controlled by one or more type of intelligent driver. For example, in the preferred embodiment for use in a semiconductor fabrication facility the electromechanical devices can include a zone (a conveyor track segment and its associated sensor(s) and motor(s)), a tag\/barcode reader, a load port transfer device (LPTD), an EMO (EMergency Off) sensor and a director (a track device with rotational capabilities). Accordingly, the preferred embodiment includes the following types of intelligent drivers:\n\n","Each zone is associated with a neighborhood of n upstream zones and m downstream zones with which the zone is likely to interact during normal tranport system operations. These neighborhoods are defined differently depending on the position of a zone within the transport system's topology. For example, a zone in a portion of straight conveyor track might have a neighborhood consisting of 3 upstream and 3 downstream nodes because zone-to-zone interactions are limited in straight track. A director at the intersection of three portions of track would be covered by a neighborhood with more zones (e.g., 20), reflecting the wider scope of possible zone interactions. The CLC distributes the responsibility for carrying out commands affecting a particular neighborhood only to CLC threads (or programs) that are responsible for controlling the electromechanical devices associated with the zones that compose that neighborhood. These threads are configured to communicate among themselves to coordinate their actions. This distribution of CLC responsibilities down to the zone level enables the CLC tasks to be distributed across the different processors of a multiprocessor. Alternatively, the entire CLC could be run on a single processor or on multiple processors distributed on a network.","Each CLC collects status information from its associated intelligent drivers. The CLC reports some of the status information to the TC. The CLC also uses the status information to detect and handle report error conditions affecting its associated devices. These error conditions include: sensor faults, motor faults, failed load ports, unexpected removals, etc.","In addition to issuing commands, each of the control layers returns status information to the next higher control layer. The next higher layer is responsible for formulating strategy based on this status information.","The present invention is described herein with reference to a few specific embodiments. The present description uses terms whose meanings are provided in the following glossary:","A. Glossary of Terms",{"@attributes":{"id":"P-d0e1188","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Term","Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AMHS","Automated Material Handling System"]},{"entry":["CAN","Controller Area Network. Standard for networking"]},{"entry":[{},"embedded devices together."]},{"entry":["Carrier","Synonym for Container."]},{"entry":["CIM","Computer Integrated Manufacturing. In this context the"]},{"entry":[{},"term loosely means all computer systems with which the"]},{"entry":[{},"Transport System is in communication."]},{"entry":["Container","Generic term used to refer to an Open Cassette, Box or"]},{"entry":[{},"Pod. A container is that object which is transported by"]},{"entry":[{},"the Transport System."]},{"entry":["Control Logic","Hardware Platform for the mid-tier software components."]},{"entry":"Computer"},{"entry":["CORBA","Common Object Request Broker Architecture. Standard"]},{"entry":[{},"developed by the Object Management Group (OMG) as a"]},{"entry":[{},"method for distributed software applications to inter-"]},{"entry":[{},"operate over heterogeneous networks."]},{"entry":["Corner","A corner is a director whose only function is to make"]},{"entry":[{},"carriers turn a corner (change directions by 90 deg)."]},{"entry":[{},"The corner has an Axis Controller and is software"]},{"entry":[{},"configurable as to which turn to make (right or left). A"]},{"entry":[{},"corner may have multiple inputs (up to 3), but must have"]},{"entry":[{},"one and only one output."]},{"entry":["Director","A director is a mechanical device for allowing a"]},{"entry":[{},"container to perform a turn. There are two types of"]},{"entry":[{},"directors, intersection directors and corner directors."]},{"entry":["Director","Software application running on a CLC which is respon-"]},{"entry":["controller","sible for the control of the components comprising a"]},{"entry":[{},"director."]},{"entry":["Intelligent","Hardware platform containing a local microcontroller and"]},{"entry":["Driver Board","network support (e.g., CAN bus support) used to monitor"]},{"entry":[{},"or control devices."]},{"entry":["E23","Semiconductor Equipment and Materials International"]},{"entry":[{},"(SEMI) standard. Specification E23 defines a multi-wire,"]},{"entry":[{},"parallel handshake for material handoffs between two"]},{"entry":[{},"devices."]},{"entry":["E23 Active","The active partner is the device in a material transfer that"]},{"entry":["Partner","has the components which physically removes the"]},{"entry":[{},"material."]},{"entry":[{},"The Load Port Transfer Device is active, and the Load"]},{"entry":[{},"Port it services is passive."]},{"entry":[{},"The Pod Lifter is passive, and the Overhead Hoist is"]},{"entry":[{},"active."]},{"entry":["E23 Passive","The passive partner is the device that requests a load or"]},{"entry":["Partner","unload of material. It does not have any mechanisms to"]},{"entry":[{},"effect the transfer. See E23 Active Partner for a"]},{"entry":[{},"description of which Transport System devices are active"]},{"entry":[{},"and passive."]},{"entry":["E-Stop","Emergency Stop. An E-Stop is an action initiated to"]},{"entry":[{},"immediately stop all motors. An E-Stop does not"]},{"entry":[{},"physically remove power from any computing devices."]},{"entry":["Elevator","An elevator is a track component that raises and lowers a"]},{"entry":[{},"platform. An elevator is used to move a container"]},{"entry":[{},"between conveyer located on different floors, or to move"]},{"entry":[{},"from ceiling to operator height (in which case it is"]},{"entry":[{},"typically called a lift)."]},{"entry":["Elevator","Software application running on a CLC which is"]},{"entry":["Controller","responsible for the control of the components comprising"]},{"entry":[{},"an elevator."]},{"entry":["Entry Speed","The speed at which a zone's motors must be running"]},{"entry":[{},"when an incoming container's leading edge contacts the"]},{"entry":[{},"belt. If the zone upstream to another node is running an"]},{"entry":[{},"accel or decel profile, the entry speed is some inter-"]},{"entry":[{},"mediate value between the zone speed and exit speed."]},{"entry":[{},"See exit speed and zone speed."]},{"entry":["Exit Speed","The speed at which a zone's motors must be running"]},{"entry":[{},"when an outgoing container's trailing edge looses contact"]},{"entry":[{},"with the zone. See entry speed and zone speed. The exit"]},{"entry":[{},"speed of a zone is the same as the zone speed of the"]},{"entry":[{},"downstream zone."]},{"entry":["FOUP","\u201cFront Opening Unified Pod\u201d  - A FOUP refers to a pod"]},{"entry":[{},"that contains 300 mm wafer and opens in front."]},{"entry":["Gate Stop","A gate stop is a device which is used to prevent the"]},{"entry":[{},"potential movement of a carrier off the end of the"]},{"entry":[{},"conveyer. A gate stop may be used in such locations as"]},{"entry":[{},"an elevator so that when the elevator is not in line"]},{"entry":[{},"with a particular track path, the gate stop would prevent"]},{"entry":[{},"dropping the carrier off the zone upstream from the"]},{"entry":[{},"elevator. A gate stop would also be used on a buffer."]},{"entry":[{},"Gate stops are controlled by the zone software."]},{"entry":["Handshake","Software application running on a parallel I\/O board."]},{"entry":["Controller","Implements a SEMI E23 interface with another device"]},{"entry":[{},"(e.g., a LPTD and Load Port)."]},{"entry":["Interbay","Transport system loop typically running down the center"]},{"entry":[{},"of the fab floor used for moving material from bay to"]},{"entry":[{},"bay."]},{"entry":["Intersection","An intersection director allows incoming material to be"]},{"entry":["Director","routed to one of multiple output directions. This director"]},{"entry":[{},"may have either two or three output directions and one or"]},{"entry":[{},"two input directions."]},{"entry":["Intrabay","Intrabay is a term generally applied to a transport system"]},{"entry":[{},"which is connected to the Interbay and provides trans-"]},{"entry":[{},"portation services within a single bay."]},{"entry":["Launch Zone","The launch zone is the zone from which a pod will begin"]},{"entry":[{},"movement once on the rail. Synonymous with down-"]},{"entry":[{},"stream load zone"]},{"entry":["Load Area","The load area includes a downstream load zone, an"]},{"entry":[{},"upstream load zone and a pre-load zone. The upstream"]},{"entry":[{},"and downstream zones compose a load point (i.e., the"]},{"entry":[{},"load point may straddle two zones). The pre-load zone"]},{"entry":[{},"is the zone where a container is held until it can be"]},{"entry":[{},"moved to the load point. Whether a zone is a downstream"]},{"entry":[{},"zone or an upstream zone depends on the direction of"]},{"entry":[{},"container movement (the container always moves from"]},{"entry":[{},"the upstream load zone to the downstream load zone)."]},{"entry":[{},{"figref":"FIGS. 2A-2C"}]},{"entry":[{},"rail 40 that include multiple zones 42 and at least one"]},{"entry":[{},"tool 46 into which a container can be loaded. Each FIG."]},{"entry":[{},"shows the position of the downstream and upstream load"]},{"entry":[{},"zones 54, 52 and preload zone 50 associated with the"]},{"entry":[{},"load point 44 of each tool 46."]},{"entry":[{},{"figref":"FIG. 2A"}]},{"entry":[{},"point 44 and associated load area 48. Because the"]},{"entry":[{},"container is moving from right to left, the pre-load"]},{"entry":[{},"zone 50 and the upstream load zone 52 are to the right"]},{"entry":[{},"of the downstream load zone 54."]},{"entry":[{},{"figref":"FIG. 2B"}]},{"entry":[{},"points 46A, 46B. Each load point 46A, 46B has a"]},{"entry":[{},"respective load area 48A, 48B. Because the load points"]},{"entry":[{},"46A, 46B are positioned in adjacent zones 42, the load"]},{"entry":[{},"areas 48A, 48B overlap. For example, the downstream"]},{"entry":[{},"load zone 54A of the load area 48A is the same as the"]},{"entry":[{},"upstream load zone 52B of the load area 48B."]},{"entry":[{},{"figref":"FIG. 2C"}]},{"entry":[{},"relative to the load zones the identifies the pre-load"]},{"entry":[{},"zone, upstream and downstream load zones for both"]},{"entry":[{},"right and left movement. This FIG. is not intended"]},{"entry":[{},"to show an actual physical configuration."]},{"entry":[{},"Each of the load points 44 is associated with a load"]},{"entry":[{},"port transfer device (LPTD) that moves a container from"]},{"entry":[{},"the rail (the upstream load zone 52) to the tool 46 for"]},{"entry":[{},"processing and back onto the rail (the downstream load"]},{"entry":[{},"zone 54) when processing is complete. Also, one LPTD"]},{"entry":[{},"can service multiple load points."]},{"entry":["Lot","A set of wafers which are grouped together logically and"]},{"entry":[{},"(optionally) physically. Some fabs constrain a lot to a"]},{"entry":[{},"single cassette, while others may allow a lot to consist of"]},{"entry":[{},"multiple cassettes. The transport system will not track"]},{"entry":[{},"lots."]},{"entry":["Lot ID","A human\/machine readable designator which identifies"]},{"entry":[{},"a Lot"]},{"entry":["Micro-","A computer module embedded in the conveyer used for"]},{"entry":["Controllers","control of the electro-mechanical systems."]},{"entry":["MMS","Maintenance Management System"]},{"entry":["Maintenance","A system with responsibility for collecting and"]},{"entry":["Management","maintaining maintenance data for other systems."]},{"entry":"System"},{"entry":["Material","Generic term which, in this context, refers to semi-"]},{"entry":[{},"conductor WIP or Reticles or any other articles that can"]},{"entry":[{},"be moved in a transport system."]},{"entry":["MCS","Material Control System"]},{"entry":["MES","Manufacturing Execution System"]},{"entry":["MOVE","An AMHS movement command which can be initiated"]},{"entry":[{},"by a component external to the transport system."]},{"entry":["Movement","Material may move in either of two directions on a rail."]},{"entry":["Direction","The direction of travel is defined from the point of view"]},{"entry":[{},"of an observer facing the rail. That is, movement to the"]},{"entry":[{},"observer's left is left movement and movement to the"]},{"entry":[{},"observer's right is right movement."]},{"entry":["Neighborhood","A neighborhood is a collection of zones that surround a"]},{"entry":[{},"given zone and define a potential, physical path. A"]},{"entry":[{},"neighborhood consists of n zones upstream and m zones"]},{"entry":[{},"downstream from the given zone (typically, n = m). Each"]},{"entry":[{},"zone will be a member of multiple neighborhoods"]},{"entry":[{},"(typically, n + m neighborhoods). Corners, Elevators"]},{"entry":[{},"and Directors all have 2 neighborhoods. For example, an"]},{"entry":[{},"elevator's two neighborhoods are for its upper"]},{"entry":[{},"position and its lower position, respectively. A rail"]},{"entry":[{},"zone that is near a director has its neighborhood defined"]},{"entry":[{},"based on the straight through path of the director."]},{"entry":[{},"Possible neighborhoods definitions for different track"]},{"entry":[{},"configurations are shown in . In each of"]},{"entry":[{},"these configurations n = m."]},{"entry":[{},{"figref":"FIG. 3A"}]},{"entry":[{},"neighborhood around a center zone 60 situated on a"]},{"entry":[{},"straight rail 40. The zones composing the neighborhood"]},{"entry":[{},"are numbered \u201c1\u201d."]},{"entry":[{},{"figref":"FIG. 3B"}]},{"entry":[{},"hoods for a corner 64. The zones 42 are numbered \u201c1\u201d"]},{"entry":[{},"or \u201c2\u201d indicating the neighborhood(s) to which they"]},{"entry":[{},"belong."]},{"entry":[{},{"figref":"FIG. 3C"}]},{"entry":[{},"neighborhood for a center zone 60 situated on a straight"]},{"entry":[{},"rail 40 near a director 66. There is only a single"]},{"entry":[{},"neighborhood in this situation as the straight path"]},{"entry":[{},"through the director is assumed."]},{"entry":[{},{"figref":"FIG. 3D"}]},{"entry":[{},"hoods for an elevator 68 that connects an upper rail"]},{"entry":[{},"40U and a lower rail 40U. The zones 42 are numbered"]},{"entry":[{},"\u201c1\u201d  or \u201c2\u201d indicating the neighborhood(s) to which they"]},{"entry":[{},"belong."]},{"entry":[{},{"figref":"FIG. 3E"}]},{"entry":[{},"hoods for an intersection director 66. The zones 42 are"]},{"entry":[{},"numbered \u201c1\u201d or \u201c2\u201d indicating the neighborhood(s) to"]},{"entry":[{},"which they belong."]},{"entry":["RF Tag","A radio frequency transponder embedded in a cassette"]},{"entry":[{},"which is electronically readable\/writeable and contains"]},{"entry":[{},"(minimally) sufficient information to uniquely identify"]},{"entry":[{},"the physical cassette."]},{"entry":["ORB","Object Request Broker"]},{"entry":["Parallel I\/O","Hardware platform supporting 8 and optionally 16 bits of"]},{"entry":["Board","digital I\/O. Used to implement SEMI E23 interface for a"]},{"entry":[{},"Handshake Controller."]},{"entry":["Pre-load zone","The pre-load zone is a destination zone. Material being"]},{"entry":[{},"delivered to a tool will stop in the pre-load zone prior"]},{"entry":[{},"to being moved to the load point for the tool."]},{"entry":["RAM","Reliability, Availability, and Maintainability. Typically"]},{"entry":[{},"refers to Semi E-10 set of reports."]},{"entry":["SEMI E-10","Semiconductor Equipment Manufacturer's Institute."]},{"entry":[{},"Specification E-10 covers data collection and report"]},{"entry":[{},"generation for reliability reports."]},{"entry":["SEMI E-23","See E23"]},{"entry":["SmartTag","Asyst Technologies transponder product which may be"]},{"entry":[{},"attached to a Pod or Box and provides electronically"]},{"entry":[{},"readable\/writeable data storage."]},{"entry":["SmartTag","Application running on a driver board which is"]},{"entry":["Controller","responsible for the interface to a SmartTag probe (one"]},{"entry":[{},"type of Tag Controller)."]},{"entry":["SMIF Pod","Standard Mechanical Interface Pod. May contain"]},{"entry":[{},"reticules or WIP in a controlled mini-environment."]},{"entry":[{},"SMIF pods are bottom opening and are not used for"]},{"entry":[{},"300 mm wafers (see FOUP)."]},{"entry":["Speed Profile","A speed profile defines the speed of a container during"]},{"entry":[{},"the transit of a zone. A speed profile is defined by a"]},{"entry":[{},"Zone Speed and an Exit Speed. For example, a profile of"]},{"entry":[{},"3 - 2 defines that a container will be moving at speed S3"]},{"entry":[{},"when fully on the zone and will be decelerated so that the"]},{"entry":[{},"container will be moving at speed S2 when it looses"]},{"entry":[{},"contact with the zone's belts."]},{"entry":[{},"A speed profile is initiated only when a container is fully"]},{"entry":[{},"contained within a single zone. Note that the speed of the"]},{"entry":[{},"container when it first contact's the belts of the zones"]},{"entry":[{},"is dependent upon the previous profile."]},{"entry":["Tag Controller","Software application running on a driver board which"]},{"entry":[{},"implements an interface with a tag reader."]},{"entry":["Transport","Software system which is in charge of high level, non"]},{"entry":["Controller","real time functions including external interfaces and"]},{"entry":[{},"inter-component coordination."]},{"entry":["Transport","Generic term applied to a system which move material"]},{"entry":["System","from point to point within a fab."]},{"entry":["WIP","Work in Process. Typically applied to semiconductor"]},{"entry":[{},"wafers."]},{"entry":["Zone","That section of track that can start, stop and transfer a"]},{"entry":[{},"single carrier. A zone is at least as long as a carrier."]},{"entry":[{},"For a 300 mm fab, a zone shall be 500 mm in length."]},{"entry":["Zone Address","The network address of a zone within a node. Zone"]},{"entry":[{},"addresses will be 8 bits wide."]},{"entry":["Zone","Intelligent Driver Application software running on a"]},{"entry":["Controller","driver board which is responsible for the low level,"]},{"entry":[{},"real time control of a single motor and related sensors."]},{"entry":["Zone Max.","The zone max. speed is the highest speed that a carrier"]},{"entry":["Speed","may be at when it is detected by the end of zone sensor."]},{"entry":[{},"(i.e. when the carrier is fully occupying the zone and no"]},{"entry":[{},"other zone)"]},{"entry":["Zone Speed","The speed at which a container is moving when fully"]},{"entry":[{},"contained within a single zone. See entry speed and exit"]},{"entry":[{},"speed. The zone speed of a zone is the same as the exit"]},{"entry":[{},"speed of the upstream zone."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"A transport system implemented in accordance with the present invention is responsible for the reliable, timely movement of material from a source device's load point to the load point associated with a destination device. Sources and destinations can be either storage systems, process tools, wafer sorters, or any other fabrication (fab) systems which operate on material moved by the transport system.","The transport system includes conveyer hardware, controlling computers and software that executes in the controlling computers. Conveyer hardware may be uni- or bi-directional rails, directors, corners, load port transfer devices (LPTD) or elevators. Except for the LPTD, each of these devices is composed of \u201czones\u201d, where each zone is a separately controlled physical region of conveyer that may hold a single container.","In one embodiment described herein a series of zones (and their controlling computers, called intelligent drivers) reside on a network. In the illustrated embodiment this network is a Controller Area Network (CAN) network, but any high speed network technology (e.g., LonWork, FireWire) could be used. Each local CAN network is connected to a control logic computer (CLC) running application specific software. In an embodiment for use with conveyor rails a CLC zone thread is responsible for high level control and a zone controller (ZC) intelligent driver controlled by the zone thread is responsible for low level control of the zones. Each zone belongs to multiple \u201cneighborhoods\u201d, each of which consists of n zones upstream from a particular zone and m zones downstream from the particular zone. All of the CLC zone threads in a neighborhood share real-time information to insure proper movement and identification of material. The neighborhoods have different sizes depending on the topology of the physical system.","The transport system needs to communicate with a variety of storage devices, process tools and other devices residing on the fab LAN. In one embodiment communication with the load ports (which in turn communicate with process tools) is handled by a SEMI E23 parallel interface. In the illustrated embodiment communications between a high level controller for the transport system (called the Transport Controller, TC) and the fab CIM systems (e.g., MCS) are via an HSMS connection conforming to the SEMI Intrabay Specific Equipment Model, which is incorporated herein. Alternatively, communications between the TC and the high level controller could be implemented using any suitable communication technology and protocol. This is because operation of the present invention is independent from the configuration of this communication mechanism.","Safety system and fire door interlocks are handled by the direct I\/O controllers that are connected directly to the CAN network. These controllers help determine the automatic changes in system operating modes. A version of this controller is built into the power distribution system to alarm power supply failures and to interconnect E-Stop devices. Additional details of the present transport system are now described in reference to FIG. .","Referring to , there is shown a block diagram of an automated manufacturing system  incorporating the transport system  of the present invention and a conventional automated manufacturing system . This figure omits conveyance hardware and emphasizes control system components, which are a focus of the present invention. The conventional manufacturing system  includes a Manufacturing Execution System (MES)  and a Material Control System (MCS) . The manufacturing execution system  tracks lots through the fab. The MCS  receives notification of the next process step for a particular lot from the manufacturing execution system , identifies a process tool and instructs the transport system  to deliver the lot to that tool.","The transport system  includes the transport controller (TC) , control logic computer(s) (CLC)  and intelligent drivers . The transport controller (TC)  receives from the material control system (MCS)  commands  indicating where materials are to be moved\/handled. For example, the commands  include a command to transfer a particular container (or pod) of wafers from one processing tool to another processing tool. The TC  executes a MCS command  by sequencing a series of basic\/atomic operations that implement the command. For example, the TC  breaks a transfer command into a series of acquire, move and deposit commands  that are executed by at least one of the control logic computers (CLC) . The MCS  may also issue these atomic operations.","The TC  stores the physical topology of the entire material transport system in a topology database . One representation of the topology  is organized around a set of all possible manufacturing system destinations (e.g., load port transfer devices). Each destination representation includes references to location and device information associated with zones from which containers can be preloaded into and launched from that destination. The TC  also maintains status information  for the transport system using status information  returned by the CLCs .","Each CLC  provides high level, real time control and coordination of a respective group of intelligent drivers  that drive a group of the electromechanical devices composing a distinct region of the physical conveyance system. Based on information  from the sensors, dynamic limits on movement of the materials, a map of neighborhood topography and rules for speed control, routing and collision avoidance, the CLC  executes the commands  by coordinating selected intelligent drivers  via low level commands . The CLC  needs to know only the physical topology of its associated region of the material transport system, which it stores in a local topology database . In addition, each thread only knows the topology that corresponds to its neighborhood.","In one embodiment there are different types of electromechanical devices. Each different type is controlled by one or more intelligent drivers . For example, in one embodiment the electromechanical devices can include a zone (a conveyor rail segment and its associated sensor(s) and motor(s)), a tag\/barcode reader, a load port transfer device (LPTD), an EMO (EMergency Off) sensor, a director (a track device with rotational capabilities) and an elevator. Accordingly, the described embodiment includes the following types of intelligent drivers :\n\n","Referring to , there is shown an expanded block diagram of one embodiment  of the control system . In the embodiment  there is a single TC  coupled via an Ethernet  to multiple CLCs . Each of the CLCs  is in turn coupled to multiple intelligent drivers  via one or more CAN busses. Each of the microprocessors  executes an active driver  for one of the electromechanical devices  composing the conveyance hardware. For example, a rail zone with one motor  and two sensors  is controlled by a zone controller (ZC) . The microprocessors  are generic, which allows different types of active drivers  to be executed thereon.","In the embodiment  there are 64 microprocessors  per CAN bus and up to 4 CAN busses controlled by a single CLC . The number of microprocessors  per CAN bus, number of CAN busses controlled by a single CLC  and the active drivers  per microprocessor  can be varied depending on the available computer hardware and physical layout. A more detailed view of the conveyor and the intelligent drivers is shown in FIG. B.","Referring to , there are shown schematics of different fabrication facility topologies incorporating both prior art elements and the transport system of the present invention.  shows a basic topology , including a fab LAN  that connects a wafer storage system , process tools , conventional fab control system  and a transport controller (TC)  implemented in accordance with the present invention. The storage system  and fab tools  are connected by a rail  or other conveyance system  that includes load port transfer devices -, - for loading and unloading the storage system  and the process tools , respectively. The TC  monitors a bay power supply  and, as described above, controls the CLCs  via an Ethernet network. Each CLC  controls intelligent drivers  via one or more CAN busses . The intelligent drivers  in turn control a respective component of the conveyance system . For example, the intelligent drivers  include LPTD controllers for the LPTDs - and -. Other types of intelligent drivers  include zone controllers (ZC) and E23 interfaces (E23). Each intrabay and interbay is considered a wholly independent system that does not physically interact with the other intrabays or interbay.","FIG. . shows a manufacturing system including a series of independent bays, each having its own process tools  (shown for simplicity as a single process tool) and intrabay transport system . The bays are connected by stockers , which are coupled to the interbay transport system . Each intrabay transport system  and the interbay transport system  includes its own TC , CLCs  and intelligent drivers . The intrabay transport systems  are unaware of each other.","FIG. . shows a manufacturing system including a series of connected bays. In this layout, the intrabay and interbay transport systems ,  operate as a single, inter-connected system. As a result, there is a single TC  that controls the entire transport system (i.e., the intrabays and the interbay transport systems). Each intrabay system  and the interbay  system has its own CLC  and associated intelligent drivers . Additional details of the TC , CLC  and intelligent drivers  are now described in reference to .","C. System Description and Logical Models","Referring to , there is shown a block diagram of a transport controller (TC) . The TC  includes a processor ; non-volatile memory , such as a hard disk or flash memory; a fast, primary memory , such as a semiconductor random access memory (RAM); and, optionally, a display  and user input devices, such as a keyboard  and mouse . According to well-known computing principles, the TC  executes programs in the memory  under control of an operating system  and allows for user interaction via the display  and user input devices , . The TC  controls one or more CLCs  in its region of influence via commands issued over an Ethernet (TCP\/IP) connection. The display  and user input devices ,  are optional if user input capabilities are not required.","The non-volatile memory  permanently stores an operating system , TC programs  and TC data structures . The TC programs  employ TC classes  that include, but are not limited to, a move dispatcher class , a move class , a pod locator class  and a topology manager class . The TC classes , which determine key aspects of the TC's functionality, are described in greater detail below. The TC programs also can include optional user interface functions  if user input capabilities are required. The TC programs , classes - and optional UI functions  can be stored as source code and\/or executables.","The TC data structures  include a group of data structures that are used to define the physical topology of the region of the transport system for which the TC  is responsible. These data structures include:\n\n","The operating system , TC programs , class instances  (sometimes referred to herein as \u201cobjects\u201d) and TC data  are loaded into the primary memory  for use by the processor . The class instances  include move dispatchers  move objects  pod locators  and topology managers , which are instances of the classes -, respectively. The TC programs also include a MCS (Material Control System) Interface . The TC data  include a topology database , which comprises linked destination list , destinations , locations , zones , directors , devices , parameter lists  and parameters , which are instances, respectively of the data structures , , , , , , , .","The Transport Controller  performs the following functions using the TC programs  and the TC data :\n\n","Referring to , there is shown a model of the topology . The notation employed in  is commonly used in object modeling (e.g., the Unified Modeling Language, or UML) and is therefore is described only briefly herein. Each type of object is shown as a box listing the object's attributes; associations between object instances are shown as lines between the boxes. The cardinality of each association (1 to 1, n to n, 1 to n, 1 to none, or 1 to 0 . . . n) is listed alongside each connecting line. For example,  shows that there can be between 0 and n destinations  in the destination list  and that each destination  can have links to n associated locations . An open arrow, such as the arrow , indicates inheritance of attributes. For example, the arrow  indicates that, while zone and director data instances ,  can have their own unique attributes, both also inherit all of the attributes of a location data instance .","The listed attributes shown for each instance are employed in one embodiment and are not intended to restrict the scope of the present invention. Nor does the diagram attempt to define all attributes, only key ones. Each attribute is defined in the form: attribute name: data type. Attributes that are pointer data types are followed by an asterisk (*). Thus, the attribute Left PreLoad Zone  is a pointer to a Location . One data type that might require explanation is CORBA Object Reference. This data type is a reference to a software object that is resident in another address space. (either on the same or a different computer). For example, the attribute Associated Load Area Controller  maps a destination data instance  to a load area controller (LAC) thread (described in reference to ) in a CLC  that manages a corresponding transport system load area. Note that implementations of the present invention are not limited to the use of CORBA Object References, but can use any other middle ware product that enables object references to be mapped between different address spaces and platforms. For example, DCOM could also be used.","Referring to , there are shown an example of a transport system configuration  and its representation as a topology . The transport system  includes a collection of directors D-D and zones Z-Z connected as a unidirectional ring and a straight length of rail. The transport system  includes a destination DST  between zones Z and Z and a destination DST  between zones Z and Z. As described above, each of the destinations DST, DST corresponds to a LPTD. Information describing the transport system  is provided to the TC  by the MCS  (FIG. ). The topology manager  of the TC  subsequently generates the topology  () from this information.",{"@attributes":{"id":"P-00125","num":"00125"},"figref":["FIG. 12A","FIG. 12B"],"b":["420","392","12","402","430","432","434","436","396","438","440","442","444","445","400","446","448","401","450","104","392","12","2","396","2","438","9","440","10","445","2","401","2","2","2","452","454","2","2"]},"Referring to , there is shown a block diagram of a CLC . The CLC  includes a processor ; a non-volatile memory , such as a hard disk or flash memory; and a fast, primary memory , such as a semiconductor, random access memory. According to well-known computing principles, the CLC  executes programs in the memory  under control of an operating system. The CLC  controls one or more intelligent drivers (IntDrv)  in its region of influence via commands issued over a CAN bus connection.","The non-volatile memory  permanently stores an operating system , CLC programs  and CLC data structures . The CLC programs  employ CLC classes  that include, but are not limited to, a zone class , a Load Area Controller (LAC) class , a Health Monitor (HM) class , a Load Port Transfer Device (LPTD) controller class  and a Director Controller (DC) class . Each of the CLC classes  includes respective methods (not shown) and data structures , , , , . The CLC classes , which determine key aspects of the CLC's functionality, are described in greater detail below. The CLC programs  also employ CLC state machines  that include, but are not limited to a zone state machine , LAC state machine , HM state machine , LPTD state machine  and a director state machine . The CLC classes  can include any other classes necessary to control a particular type of transport system component; e.g., the classes  can include a Elevator Controller (EC) class (not shown) when the system includes elevators. The CLC programs  and classes  can be stored as source code and\/or executables.","The CLC data structures  include a group of data structures  that are used to define the physical topology of the neighborhoods of the transport system for which the CLC  is responsible. These data structures include information similar to but not necessarily identical in form to the various TC data structures  (FIG. A).","The operating system , CLC programs , class instances  (sometimes referred to herein as \u201cobjects\u201d or \u201cthreads\u201d) and CLC data  are loaded into the primary memory  for use by the processor . The class instances  include zone threads , LAC threads , HM threads , LPTD control threads  and director control threads . Each of the threads  is an instance of one CLC class  and embodies the behavior specified by a respective CLC state machine . For example, a zone thread  is an instance of the zone class  and embodies the zone state machine . Similarly the LAC, HM, LPTD controller and DC threads , , ,  are derived from the classes\/state machines \/, \/, \/, \/. The CLC data  include a topology database  that comprises instances of the topology structures  linked to represent the CLC's local topology, and CLC status . A high level description of the various CLC threads  follows.","In one embodiment there is one zone thread  for each zone in the transport system. The zone thread controls a respective zone controller (ZC) () and is intermediate between that zone controller and the TC . The zone thread operates cooperatively with other CLC threads , including other zone threads , LAC threads  and director control threads  associated with a common neighborhood. In particular, each zone thread  performs the following functions:\n\n","Referring to , there is shown a block diagram of the programs and data structures associated with a representative zone thread - that controls a zone Z. As shown in the upper portion of , one of the neighborhoods including the zone Z also includes the zones Z-Z and Z-Z. For the purposes of the present description it is assumed that there are two containers C and C moving from left to right in the neighborhood. The zone thread - (and all zone threads) embodies a zone state machine , zone thread methods  and zone thread data . In particular, the zone thread data  for zone Z includes neighbor status , a containers queue , a nearest container pointer , a downstream speed table , an upstream speed command (or profile) , a maximum speed  and speed table rules .","The zone thread methods  perform the functions described above with reference to  under control of the zone state machine  using information contained in the zone data . The operations of the zone thread methods  are described in depth with reference to .","The neighbor status  gives the status - of the neighboring zones Z-Z, Z-Z, respectively. Among other things, in one embodiment each zone status - can indicate one of:\n\n","The containers queue  gives the status ,  of the containers C, C, respectively. Each status record ,  includes:\n\n","For example, presuming that the destinations of the containers C and C are Dest and Dest, respectively, and their move objects are - and -, respectively, the container queue  for the situation shown in  would look as follows (the nearest container pointer  would point to the record  for the container C):",{"@attributes":{"id":"P-d0e7155","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Containers Queue 642"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Container","Queue data"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"C1 644 (nearest container)","move ID = 381-1;"]},{"entry":[{},{},"location = exiting Z2;"]},{"entry":[{},{},"move direction = right;"]},{"entry":[{},{},"destination = Dest1;"]},{"entry":[{},"C2 646","move ID = 381-2;"]},{"entry":[{},{},"location = Z1;"]},{"entry":[{},{},"move direction = right;"]},{"entry":[{},{},"destination = Dest2;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"In the illustrated embodiment the downstream speed table  contains current and historical speed data for containers passing through a zone. In one embodiment, the speed table  includes a speed number for each zone that is downstream from the current node (e.g., the speed table  for the zone Z would include current and historical speed numbers for the zones Z, Z and Z). The historical data is provided in case there is a need to revert to old data if a new speed profile is not executable. In other embodiments the historical speed data is not maintained. Each zone  updates its speed tables based on information received from upstream zones . For example, the zone Z- updates its speed table  based on messages received from the zones Z-Z. Speed tables are discussed in depth below.","The speed table rules  describe how the zone thread Z uses the speed table information  to determine the next speed profile to be executed for a particular container. A speed profile specifies the speed of a container in the neighborhood zones that are downstream from the zone Z. Among other things, a speed profile can specify that the speed of a container is to be maintained, slowed or increased in the neighboring, downstream zones. A speed profile can also be triangular, in which case the material ramps up to speed and back down again. Such a speed profile can be designated as a 0-0 profile executed in a single zone. In one embodiment the speed table rules  define how to derive a speed profile for a container as a function of current and historical speed of the container and other containers in the neighborhood (information available in the speed table ) and other factors, such as the physical configuration of the neighborhood. These profiles are predetermined to prevent collisions of pods in close proximity and to ensure smooth pod acceleration and deceleration. Other embodiments of the speed table rules  are also possible, including analytical expressions analyzed at runtime, expert system-type speed rules and combinations of any of the above.","The upstream speed command  is a command sent to the zone Z thread by an upstream zone thread to set the speed at which the zone Z thread must maintain, decelerate or accelerate the container when it is in the zone Z. The upstream speed command  is derived from the downstream speed table of an upstream, neighboring zone (e.g, the zone Z). The maximum speed  is a value that can be programmed or modified on the fly by an operator or the TC that limits the top speed at which a container can travel through a zone.","Referring again to , in one embodiment there is a LAC thread  for each load area of the transport system. The LAC thread controls a handshake controller () and, optionally, a tag controller () and is an intermediary between those devices and the TC . The LAC  operates cooperatively with zone threads , a health monitor thread  and LPTD control threads  associated with a given load area. In particular, a LAC thread  performs the following functions:\n\n","In one embodiment there is one Health Monitor (HM) thread  running on each CLC . Each health monitor thread monitors the health of its associated intelligent drivers , is intermediate between that driver and the TC  and communicates with other CLC threads whose operations are associated with the same intelligent driver . In particular, a health monitor thread  performs the following functions:\n\n","In one embodiment there is one LPTD control thread  for each transfer mechanism that moves material on and off the transport system rail. Each LPTD control thread  controls the operations of its associated transfer mechanism. There is a particular type of LPTD control thread for each type of mechanism. Each LPTD control thread is an instance of a particular LPTD class. The function of a LPTD control thread is to:\n\n","In one embodiment, there is one director control thread  for each director in the transport system. Each director control thread  controls the flow of one or more materials through its associated director according to the transfer system topology and allowed movement directions in the director's vicinity. In particular, a director control thread  performs the following functions:\n\n","The intelligent drivers controlled by the CLC threads  are now described in reference to .",{"@attributes":{"id":"P-00172","num":"00172"},"figref":"FIG. 9C","b":["108","550","552","550","108","550","552"],"i":["a ","a "],"ul":{"@attributes":{"id":"ul200021","list-style":"none"},"li":{"@attributes":{"id":"ul200022-li00022"},"ul":{"@attributes":{"id":"ul200022","list-style":"none"},"li":["maximum speed of material,","centimeters of travel per wheel revolution,","sensor debounce count,","zone length, and","network address of device.\n\nThe zone controller includes specialized hardware and software to interact with particular types of zones. E.g., the illustrated zone controller and the ZC program  are specialized to interact with a zone including two sensors ,  and a motor . Particular functions of the ZC include:\n","Monitoring and debouncing the sensors , .","Communicating changes in sensor state to the associated zone thread  in the CLC .","Accepting and executing motor  control commands."]}}}},{"@attributes":{"id":"P-00182","num":"00182"},"figref":"FIG. 9D","b":["108","714","720","720","108","564","108","714","720"],"i":["c ","c ","c "],"ul":{"@attributes":{"id":"ul200023","list-style":"none"},"li":{"@attributes":{"id":"ul200024-li00024"},"ul":{"@attributes":{"id":"ul200024","list-style":"none"},"li":["microsteps from home to cache location,","number and types of sensors,","sensor threshold values,","total axis travel distance, and","axis controller network address.\n\nThe axis controller includes specialized hardware and software  to interact with particular mechanisms .\n"]}}}},{"@attributes":{"id":"P-00189","num":"00189"},"figref":"FIG. 9E","b":["108","706","572","572","108","706","572"],"i":["d ","d "],"ul":{"@attributes":{"id":"ul200025","list-style":"none"},"li":{"@attributes":{"id":"ul200026-li00026"},"ul":{"@attributes":{"id":"ul200026","list-style":"none"},"li":["tag type,","read lot ID (Y\/N),","read electronic serial number (ESN) (Y\/N),","lot ID length,","ESN length,","starting address of Lot ID in tag, and","ID controller network address."]}}}},{"@attributes":{"id":"P-00197","num":"00197"},"figref":"FIG. 9F","b":["108","108","722","582","722","108","584","516","722","584","722","582"],"i":["e ","e ","e "],"ul":{"@attributes":{"id":"ul200027","list-style":"none"},"li":{"@attributes":{"id":"ul200028-li00028"},"ul":{"@attributes":{"id":"ul200028","list-style":"none"},"li":["EMO controller network address,","#EMO sources (e.g., fire alarm, operator, push button, etc.), and","message to send for each EMO source."]}}}},{"@attributes":{"id":"P-00201","num":"00201"},"figref":"FIG. 9G","b":["109","108","590","592","590","108","108","590","592"],"i":["f ","f ","f ","f "],"ul":{"@attributes":{"id":"ul200029","list-style":"none"},"li":{"@attributes":{"id":"ul200030-li00030"},"ul":{"@attributes":{"id":"ul200030","list-style":"none"},"li":["HC network address,","Table that maps E23 control line names to physical I\/O addresses."]}}}},"The previous descriptions have been directed to one particular hardware embodiment where the TC, CLCs and intelligent drivers are implemented in separate computer systems. However, the present invention can be implemented in myriad hardware configurations. For example, the CLCs  and the TC  could be implemented as a single, powerful computer system or the CLC programs  could be distributed one by one to smaller CPUs. Common to all of these implementations is a basic logical model of the invention describing the control flow and interactions between the system software objects. These software objects include high-level components (e.g., the TC class instances ) mid-level components (e.g, the CLC class instances ) and low-level components (eg., the intelligent drivers ). The system logical model is now described in reference to .",{"@attributes":{"id":"P-00205","num":"00205"},"figref":["FIG. 14","FIG. 4"],"b":["114","388","382","381","386","514","386","388","115","114","382","389"]},"The remote commands  are defined by the , Document 2878, Rev A (Jul. 31, 1998), and its successors, published by Semiconductor Equipment and Materials International, Mountain View Calif., which is incorporated herein by reference. The remote commands  () are summarized in TABLE 1, whose columns include: remote Command name, remote command Description and command Parameter name (sometimes referred to as cpname). The command parameters are described in TABLE 2.",{"@attributes":{"id":"P-d0e8497","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MCS Commands 115"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Command","Description","Parameters"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Cancel","cancel an outstanding remote command","COMMANDID"]},{"entry":[{},"by command ID","PRIORITY"]},{"entry":["Identify","perform a carrier identification","COMMANDID"]},{"entry":[{},{},"PRIORITY"]},{"entry":[{},{},"VEHICLEID"]},{"entry":[{},{},"DESTPORT"]},{"entry":["Install","update the TC database by adding a","COMMANDID"]},{"entry":[{},"specified carrier identification to a","PRIORITY"]},{"entry":[{},"specified vehicle identification at a","VEHICLEID"]},{"entry":[{},"specified carrier location","CARRIERID"]},{"entry":[{},{},"CARRIERLOC"]},{"entry":["Pause","remotely pause the state of the TC","None"]},{"entry":["Resume","remotely resume the state of the TC","None"]},{"entry":["Transfer","perform the entire transfer job for a","COMMANDID"]},{"entry":[{},"single carrier to be transferred from one","PRIORITY"]},{"entry":[{},"load point to another","TRANSFERINFO"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"P-d0e8827","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Command Parameters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CPNAME","DESCRIPTION","RANGE"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["ACQUIREINFO","One record with two fields:",{}]},{"entry":[{},"XFERPORT"]},{"entry":[{},"CARRIERID"]},{"entry":["CARRIERID","ID of the carrier being moved","alphanumeric"]},{"entry":["COMMANDID","Remote command ID (can be used"]},{"entry":[{},"to subsequently refer to a remote"]},{"entry":[{},"command)"]},{"entry":["DEPOSITINFO","One record with two fields:"]},{"entry":[{},"XFERPORT"]},{"entry":[{},"CARRIERID"]},{"entry":["DESTPORT","Destination port (load point)","alphanumeric"]},{"entry":[{},"unique identifier"]},{"entry":["PRIORITY","Remote command priority","NORMAL"]},{"entry":[{},{},"HIGH"]},{"entry":["SOURCEPORT","Source port (load point) unique","alphanumeric"]},{"entry":[{},"identifier"]},{"entry":["TRANSFERINFO","One record with three fields:"]},{"entry":[{},"CARRIERID"]},{"entry":[{},"SOURCEPORT"]},{"entry":[{},"DESTPORT"]},{"entry":["TRANSFERPORT","Transfer port unique identifier","alphanumeric"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The move dispatcher  creates a move object  that coordinates the transport system operations needed to carry out a particular MCS command  using information ,  provided by the pod locator  and the topology manager . The topology manager  provides the move object  with transport system layout information  to verify that there is a working route between the MCS specified source and destination locations. Each record of the pod database includes for each pod within the transport system: CARRIERID of carrier and related move loaded in the pod.","As shown in , the pod locator  can communicate with all active move objects . The information , which is derived from the topology database  described in reference to , provides topology information for parts of the rail involved in the MCS command . The move object  executes the MCS command  by issuing a series of movement commands  to the Load Area Controller (LAC) threads  associated with the source and\/or destination load ports associated with the command.","For example, assume that the move object  is to carry out the following move command :\n\nTRANSFER (COMMANDID=020, PRIORITY=HIGH, SOURCEPORT=37, DESTPORT=272).\n\nThe move object  queries the topology manager  for information on the transport system topology between the location \u201c37\u201d and the rail position associated with the unique destination point identifier \u201c272\u201d, to which the pod is to be moved. Once the move object  has verified that there exists at least one operational route to the destination (DESTPORT=272), a command to acquire material is issued to the LAC associated with location \u201c37\u201d. In the above example, this move command is assigned by a COMMANDID of 020 that uniquely identifies this command to the objects that implement it. Once the LAC has indicated the material has been acquired, additional commands will be issued to move the material to the destiantion location (under the control of another LAC), and then to move the material off the conveyor and onto the destination location. This scenario assumes that a pod to be moved starts out in a load area. When a pod to be moved is not initially in a load area (following a power failure) the move object  interacts directly with other types of threads (e.g., director control threads or zone threads) that are in a position to move the pod. It is now described in reference to  the connections between the LAC thread and other CLC threads that enable the movement commands  to be carried out in a distributed manner.\n",{"@attributes":{"id":"P-00212","num":"00212"},"figref":"FIG. 15","b":["391","516","514","518","520","512","530","526","524","530"]},"Each LAC thread  coordinates the operation of a LPTD control thread  and a number of zone threads  (those that form a load area). Each LPTD control thread  may interact with multiple LAC threads  as a single load port transfer device may service multiple load areas. Each zone thread  is a neighbor to one or many other zone threads  and also can be a neighbor to between 0 and 2 director control threads  (a zone thread has a director control thread as a neighbor when the zone thread's associated zones are in the neighborhood of a director). CLC threads, including the zone threads , director threads , LPTD control threads  and the LAC threads  typically control one or more intelligent drivers .","As already described, a zone thread  controls a zone controller , a director control thread  controls a zone controller  and an axis controller , a LPTD control thread  controls one to three axis controllers , and a LAC controller  controls a handshake controller  and an ID\/tag controller . Each of the intelligent drivers  is also monitored by a CLC driver health monitor thread  that reports the health of a respective driver  back to the associated control object  (FIG. ).","Each of the connections shown in  represents a communication path between system objects. Another view of these communication paths is shown in , which represents key CLC software components and intelligent drivers with a circle and each inter-object communication path with a numbered arc connecting the circles. The TC components (e.g., the move object and transport dispatch controller of ) are collectively represented with a single circle labeled \u201cTransport Ctlr\u201d. Each number on an arc represents one communication path. An arc with multiple references indicates that there are multiple connections between respective instances of an object type. For example, assuming a neighborhood of seven zones, a zone thread  has separate communications paths , , , , ,  with each of the other zone threads  in its neighborhood.","Referring again to , when it receives a command to move a pod the LAC thread  initiates the move command by sending out pod movement sub-commands to the zone threads that compose its load area. Those zone threads then issue sub-commands to their intelligent drivers  and other CLC threads (e.g, director control threads  and other zone threads ) in their neighborhood to implement the requested operation in accordance with the threads' capabilities, described in reference to . Specific command sequences of inter-object communications and activities used to implement a transfer command  and set of atomic operations, or movement commands , are now described in reference to .","D. Principles of System Operation",{"@attributes":{"id":"P-00218","num":"00218"},"figref":"FIGS. 17-30","b":"115"},"The atomic operations can be initiated by either a computer integrated manufacturing (CIM) system (corresponding to the Manufacturing Execution System , ) of, or by a automated material handling system (AMHS) (corresponding to the Material Control System , ) with or without involvement of the CIM. The one difference between the AMHS-initated command scenarios and the CIM-initiated command scenarios is that the AMHS scenarios are \u201cbottom-up\u201d, meaning that they can be used to initiate pod movement in the absence of commands from the CIM system. This bottom-up capability could be used when:\n\n","When a CIM system initiates a movement it is the responsibility of the CIM to communicate with the tools so that it is notified when a tool requires service. The flow of events in this case is as follows:\n\n","In this scenario, the MCS  also participates in the movement, which is initiated by the AMHS tool. The flow of events is as follows:\n\n","In this scenario, the MCS does not participate in the movement. The flow of events is as follows:\n\n","There is also a fourth method of movement initialization where a TC  has a user interface (UI) from which an operator identifies a source and destination and tells the TC  to move whatever material is at the source to the destination. From the UI the operator can issue transfer, acquire, move or deposit commands.","4. System Operations","Having described the four methods of movement initialization, exemplary command sequences associated with the transfer and atomic operations are now described. These descriptions will refer to various messages, commands and events that are transmitted between the system elements that carry out these command sequences. In most cases, these messages, commands and events are not described in depth. Detailed information on at least some of these commands and events is provided in Appendices A, B and C, which respectively describe External events (i.e., events reported between the CIM and the Transport Controller TC), intra-CLC events (i.e., events reported by one CLC object to another CLC object) and CAN Bus messages (i.e., messages issued to\/by the intelligent drivers by\/to CLC objects or the intelligent drivers). The system operations are now described in the following order:\n\n","In one embodiment the CIM system  () initiates via a single CIM system command (TRANSFER) a transfer operation that results in a point to point material move. The Transport Controller  () breaks the transfer command down into individual acquire, move and deposit operations and executes each of these commands sequentially. This embodiment keeps the CIM system software relatively simple by shifting responsibility for material movement operations onto the Transport Controller.","In another embodiment, the CIM system  can direct point to point material movement by issuing a number of atomic commands, such as acquire, move and deposit, to the TC , which implements the commands accordingly. This embodiment requires the CIM system  to oversee the execution of each atomic command and correspondingly simplifies operation of the TC .","Referring to , there is shown a sequence diagram of the commands exchanged between the CIM system  and the TC  as the TC executes a TRANSFER host command . After initiating the TRANSFER command the TC returns a \u201cHost Command Initiated\u201d message . As the TC sequences the atomic commands necessary to perform the TRANSFER it returns status commands indicating progress of the atomic operations composing the TRANSFER command. When the TRANSFER operation is completed the TC returns a \u201cHost Command Completed\u201d message . The various atomic operations and status commands shown in  are described below.","b. Acquire Atomic Operation","The Acquire operation causes the Transport System to acquire material from a Load Port or an Overhead Hoist Transport (OHT) system. From the perspective of the Transport Controller, the Acquire operation for both of these scenarios is the same. However, the CLC treats each scenario differently in accordance with the different interface requirements of the source systems.","In the first scenario the transport system acquires material from the load port of a tool or stocker using a Load Port Transfer Device. In this case, the load port, which is passive, simply signals its desire to be unloaded. In response, the LPTD, which is active, performs the material transfer under control of the CLC. In the second scenario the transport system acquires material from an Overhead Hoist Transport (OHT) system, which deposits the material onto a pod lifter. In this case, the pod lifter is the passive device that signals its desire to be loaded and the OHT is the active device that effects the transfer.",{"@attributes":{"id":"P-00256","num":"00256"},"figref":"FIG. 17","ul":{"@attributes":{"id":"ul200041","list-style":"none"},"li":{"@attributes":{"id":"ul200042-li00042"},"ul":{"@attributes":{"id":"ul200042","list-style":"none"},"li":["(1) the TC initiates an ACQUIRE operation;","(2) the TC issues an ACQUIRE_MATERIAL command () to the CLC LAC thread;","(3) the TC returns an Event Report Send message () indicating the status of the operation is \u201cAcquiring\u201d;","(4) the CLC LAC performs the ACQUIRE_MATERIAL command by moving the material from the load port onto the rail () and then returns to the TC a MATERIAL_ACQUIRED message ();","(5) the TC returns a Event Report Send messages (, ) indicating that the material has been \u201cAcquired\u201d and the carrier (pod) installed on the track."]}}}},{"@attributes":{"id":"P-00262","num":"00262"},"figref":"FIG. 18","b":["1","2"]},"This sequence involves the following steps:\n\n",{"@attributes":{"id":"P-00278","num":"00278"},"figref":"FIG. 19","b":["574","574","574"],"i":["x","y","z"]},"This sequence involves the following steps:\n\n","The Move atomic operation moves a pod that is at the source load point to the pre-load zone of the destination. The command sequences associated with the Move atomic operation are shown in FIGS.  and - from the respective perspectives of the TC, CLC, and Zone thread (for both vehicle acceleration and deceleration).",{"@attributes":{"id":"P-00288","num":"00288"},"figref":"FIG. 17"},"This sequence involves the following steps:\n\n",{"@attributes":{"id":"P-00295","num":"00295"},"figref":"FIG. 20","ul":{"@attributes":{"id":"ul200049","list-style":"none"},"li":{"@attributes":{"id":"ul200050-li00050"},"ul":{"@attributes":{"id":"ul200050","list-style":"none"},"li":["(1) after receiving the MOVE_MATERIAL command () the source load area controller issues a SEND_MATERIAL command to the downstream load zone thread","(2) the downstream load zone prepares to run a creep profile with the upstream load zone slaved to it (a creep profile causes the vehicle to move fully within the downstream load zone)\u2014this involves the downstream load sending a ZONE_TASKING command to the upstream load zone, which synchs up and returns a ZONE_TASKING_ACK message ","(3) once both zones are prepared, the downstream zone sends an EXECUTE command to begin both zones moving;","(4) once the pod leaves the upstream load zone that zone sends a CARRIER_EXITED command to its neighborhood and a ZONE_AVAILABLE message to the LAC,","(5) the source load area controller then returns the MOVE_STATUS_UPDATE message to the move object managing the move to indicate the current status of the move;","(6) after the MOVE is initiated the zone threads and director control threads respectively associated with zones and directors between the source load and the destination load area handle the material move operation with little interference from the move object;","(7) when the pod arrives at the destination the pre-load zone at the destination returns a MATERIAL_ARRIVED message to the destination LAC, which then returns the MOVE_COMPLETE message , which is handled as described in reference to FIG. ."]}}}},"High level operations of the TC and CLC sub-systems have been described in reference to .  show how the zone controllers in a neighborhood interact to accelerate and decelerate the pod to accomplish the specified MOVE operation.","Referring to , there is shown a command sequence that sets out the interactions between zone threads ZT (on the left side of the figure) and their respective zone controllers ZC (on the right side) and among zone threads in the same neighborhood through which a pod is accelerated leftward across multiple zones. In particular, the leftward acceleration occurs from a zone Z controlled by a zone controller ZC and zone thread ZT to a zone Z controlled by a zone controller ZC and zone thread ZT. The neighborhood affected by the illustrated MOVE operation includes 6 zones, Z to Z. As already described, each zone has two sensors S and S and one motor that accelerates the pod when in that zone, all of which are controlled by a zone controller ZC. The several steps of the MOVE operation are shown in time-order, from the top to the bottom of the figure. The current position of the pod is shown by the shaded rectangle P.","This command sequence uses a few basic low level control commands repeatedly:\n\n","An optional part of the SET_PROFILE command (shown in parentheses) is the \u201con event\u201d condition, which allows the zone thread to indicate some future event upon whose occurrence the profile is to be executed. In the illustrated embodiment the future event is identified by a sequence number <seq#>. The \u201con event\u201d condition enables multiple commands to be setup for future execution so they can be executed serially by different zone controllers ZC within time intervals far too short to allow each of the commands to be individually sent at the appropriate execution time. E.g., in the illustrated embodiment the event is \u201con execute, <seq#>\u201d, indicating that the profile is to be executed when the sub-command identified by <seq#> is executed. The seq# and the profile are generated by the zone thread ZT. The execute command, which has the same sequence number, is then broadcast simultaneously to all devices. Those devices which have that sequence number begin concurrent execution.\n\n","Thus, referring to , the first action of the zone thread ZT is to set the acceleration profile \u201c0-1\u201d (-), which is acknowledged by the zone controller ZC (-). This acceleration profile is to be executed cooperatively over the two zones Z-Z (i.e., the pod is to be accelerated to its target velocity in the space of the zones Z-Z). Thus, the zone thread ZT synchonizes the zone thread ZT by sending it the tasking command for profile \u201c0-1\u201d (-). The zone thread ZT responds by issuing a SET_PROFILE command to its respective zone controllers ZC (-),which responds with an acknowledgment (-). After receiving the acknowledgment -), the zone thread ZT returns a tasking acknowledgement (-) to the zone thread ZT. The zone thread ZT then sends the EXECUTE. command - to the zone controller ZC, ZC, causing the profile previously set up in the commands -, - to be cooperatively executed by the zone controllers. As the command is executed the zone controllers return SENSOR_STATUS messages  to indicate the progress of the pod.","After the pod is accelerated to its target velocity, the subsequent profiles set by downstream zone threads maintain the pod at a fixed velocity (e.g., SET_PROFILE \u201c2-2\u201d -). A zone thread ZTi informs neighboring zone threads ZTj of the progress of a move using CARRIER_EXITING and CARRIER_EXITED messages , . A zone thread ZTi sends a MOTOR_OFF message  to its respective controller ZCi each time the pod has left the corresponding zone Zi (indicated by a CARRIER_EXITED message ).","Referring to , there is shown a command sequence that sets out the interactions between zone threads ZT (on the left side of the figure) and their respective zone controllers ZC (on the right side) and among zone threads in the same neighborhood through which a pod is decelarated (e.g., from speed  to ) across multiple zones Z-Z as it approaches its destination (in this example, the zone Z). The thread ZT starts the deceleration based on information in its speed table  () that indicates the pod is to be decelarated to speed  by the time it reaches the zone Z. This deceleration is done using the same basic commands described above.  shows a sequence of commands by which a pod moving from right to left at speed  in zone Z is decelerated to speed  in zone Z. This deceleration is performed cooperatively by the zone threads ZT, ZT, ZT and their respective zone controllers ZC, ZC, ZC.  is not described further as such description would be redundant in view of the description of FIG. .","d. Deposit Atomic Operation","The Deposit operation causes a pod residing on the pre-load zone of a destination to be moved to the load point and then off-loaded to either a load port or an OHT. The high-level view of the deposit operation is now described in reference to FIG. .",{"@attributes":{"id":"P-00331","num":"00331"},"figref":"FIG. 17","b":["708","708","710"],"i":["a ","b ","a "]},"The LAC controller thread returns to the TC a MATERIAL_DELIVERED message when the Deliver operation is completed. Subsequently, the TC returns to the CIM system messages indicating that the DEPOSIT operation is complete (), and the carrier (i.e., pod) has been removed from the track ().","One example of the commands used to deposit materials using a FastLoad LPTD, which is a specific Palo Alto Technologies product, is shown in .",{"@attributes":{"id":"P-00334","num":"00334"},"figref":["FIG. 23","FIG. 24","FIGS. 18-19"],"b":["724","24"]},"Referring to , the LPTD control thread performs the following operations to complete the DELIVER operation . In this description, the LPTD comprises X, Y and Z axis controllers , , operating as described in reference to  (Acquire operation).\n\n","So far, discussion has been provided for scenarios where a pod is moved to a destination (e.g., a LPTD). In other situations, such as when a pod needs to wait at a certain track position, the end point of a move command can be a track zone instead of a a load area. This scenario is referred to as a track arrival scenario.","In this scenario, the TC moves the pod to the target track zone. Once at the target track zone the pod is not removed from the track, but remains there until another move is issued for the pod. Normally, the TC executes a transferoperation via an LAC associated with the load area of the destination. However, in this scenario, there is no intent to move the pod to a destination. Consequently, even when the track zone is in a load area, the TC interacts directly with the zone thread of the target track zone instead of the associated LAC thread. The command sequence associated with the track arrival scenario is now described in reference to FIG. .",{"@attributes":{"id":"P-00348","num":"00348"},"figref":"FIG. 25","b":["752","750","750"],"i":["a ","a","b"]},"Having described the command sequences associated with a few atomic operations that can be implemented by various embodiments, additional details are now provided of how the zone threads cooperate to move one or more vehicles in a desired direction. An important factor in assisting the zone threads to coordinate their movement operations are the sensor signals provided by the sensors in each zone. These sensor signals are now described in reference to FIG. .",{"@attributes":{"id":"P-00350","num":"00350"},"figref":"FIG. 26","b":["1","6","1","3","2","2","3","1","2","2","2","2","5","4","3","1"]},"E. Speed Control by Zone Threads","Having described the cooperative, distributed execution of various command sequences by the software objects and hardware controllers of one embodiment, more details are provided in reference to  regarding the methods by which the zone threads cooperatively determine and manage the movement of one or more material units (e.g., pods of wafers) through a conveyor system. The zone threads' role in three types of movements are described herein:\n\n","In general, the zone threads  follow a well-defined set of speed control rules  () when determining how to accelerate or decelerate the material. The performance\/speed control rules  are described below based on some performance assumptions made to permit exact, representative examples to be given. These assumptions include:\n\n","The zone threads  perform the speed control methods cooperatively, using messages exchanged by zones threads  in the same neighborhood indicating the movement status of the material being moved. These movement messages are exchanged according to the following zone movement messaging rules, which are embodied in the zone state machine  () that is part of each zone thread  (NOTE: the following discussions sometimes refer to a \u201czone thread\u201d using the shorthand \u201czone\u201d\u2014this shorthand blurs the software\/hardware distinction between zones and zone threads that is a characteristic of one, but not all, embodiments of the present invention):\n\n","Given the above-described performance assumptions and the zone movement messaging rules, the zone to zone speed control rules, which are embodied in the zone thread methods  and the speed table rules , are as follows (all references are to  unless stated otherwise):\n\n",{"@attributes":{"id":"P-d0e12882","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}}],"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Distance from Dest",{}]},{"entry":["Current Speed at Exit","(Zones)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Sensor \u25b4","1","2","3","4"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["0","0\u21920 (creep)","0\u21921","0\u21921","0\u21921"]},{"entry":["1","1\u21920","1\u21921","1\u21922","1\u21922"]},{"entry":["2","N\/A","2\u21921","2\u21922","2\u21923"]},{"entry":["3","N\/A","N\/A","3\u21922","3\u21923"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Each of the  is a command sequence timing diagram showing speed control and other messages sent by the zones effecting material movement operations (the lower part of the figure) and the resulting material speed profile (the upper part of the figure). As in the timing diagrams described above each depicted sequence progresses from the top to the bottom of the figures. Each message is associated with an arrow labeled with a reference number indicating the message's order in the command sequence and is described following a general description of a particular movement operation. Some of the message discussions refer to a speed table, which is a table stored by each zone thread that indicates at what speeds a zone is permitted to accelerate material for entry into a neighboring zone (see  for a description of the speed table). The position of the material as the movement operation progresses is shown as the shaded rectangle. The three command sequences are now described in reference to .",{"@attributes":{"id":"P-00383","num":"00383"},"figref":"FIG. 27","ul":{"@attributes":{"id":"ul200075","list-style":"none"},"li":{"@attributes":{"id":"ul200076-li00076"},"ul":{"@attributes":{"id":"ul200076","list-style":"none"},"li":["(1) Zone I sends out message  (ZONE_RESERVED) to acquire the load for the loading of new material. Upstream zones will adjust their entry speed tables to insure that incoming containers which are not already in the neighborhood are stopped prior to the zone.","(2) Once zone I determines the neighborhood is safe, (i.e. no containers are inbound), the zone continue the load process, resulting container X being deposited. The zone will begin movement of the container based upon the speed table. The zone knows that downstream zone H may be entered at any speed up to 3. The zone also knows that given the pod is stopped, the only speed profile available is -. The zone will generate a CARRIER_EXITING message containing the identifier for a - profile. The downstream zones will receive this information and sync to the profile. Zone I will update the entry speed for zone H.","(3) Once the container has exited the zone, as indicated by the trailing edge of the sensor, zone I will send a CARRIER_EXITED message. Upstream nodes will modify their entry speed values for zone I.","(4) Zone H detects that the carrier is leaving by the rising edge of the sensor. At this time, the pod has reached speed . By examining its entry speed table, it determines that the current speed is less than the maximum allowed entry speed to G, and so uses a - profile. It sets the speed entry for zone G to \u22121.","(5) Upon seeing the trailing edge of the sensor, zone H sends an exited message out. Zone I receives the message and modifies its speed entry for zone H. I needs to perform no further processing as H is its immediate neighbor.","(6) Zone G detects that the carrier is leaving by the rising edge of the sensor. At this time the pod has reached speed . By examining its entry speed table, it determines that the current speed is less than the max. allowed entry speed to F, and so uses a - profile. It sets the speed entry for zone F to \u22121. Zones H and I also update their speed entry for F.","(7) Upon seeing the trailing edge of the sensor, zone G sends an exited message out. Zones H and I receives the message and modifies its speed entry for zone G. H needs to perform no further processing as G is its immediate neighbor. I does need to perform additional processing to update the speed value for zone H based on the change to G.","(8) Zone F detects that the carrier is leaving by the rising edge of the sensor. At this time the pod is moving at speed . By examining its entry speed table, it determines that the current speed is equal than the max. allowed entry speed to E and announces a change to a - profile. It sets the speed entry for zone E to \u22121. Zones G, H and I also update their speed entry for F.","(9) Upon seeing the trailing edge of the sensor, zone F sends an exited message out. Zones G, H and I receives the message and modifies its speed entry for zone F. G needs to perform no further processing as F is its immediate neighbor. H and I do need to perform additional processing to update the speed values for the zones upstream from F.","(10) Zone E detects that the carrier is leaving by the rising edge of the sensor. The pod is moving at speed . By examining its entry speed table, it determines that the current speed is equal than the max. allowed entry speed to D, and so continues the current profile. It then determines that the destination specified is 3 zones away and must therefore begin decerating the pod. It sends an exiting message with profile - and sets the speed entry for zone D to \u22121. Zones F, G, H and I also update their speed entry for E.","(11) Upon seeing the trailing edge of the sensor, zone E sends an exited message out. Zones F, G, H and I receives the message and modifies its speed entry for zone E. F needs to perform no further processing as E is its immediate neighbor. G, H and I do need to perform additional processing to update the speed values for the zones upstream from E.","(12) Zone D detects that the carrier is leaving by the rising edge of the sensor. The pod is now moving at speed . D knows that the destination zone B is two zones away. Based on the current speed and position of B, D determines that it needs to switch to a deceleration profile of -, which it announces in its exiting message. It sets the speed entry for zone C to \u22121. Zones D, E, F, and G also update their speed entry for C.","(13) Upon seeing the trailing edge of the sensor, zone D sends an exited message out. Zones E, F, G and H receives the message and modifies its speed entry for zone D. E needs to perform no further processing as D is its immediate neighbor. F, G, and H do need to perform additional processing to update the speed values for the zones upstream from D.","(14) Zone C detects that the carrier is leaving by the rising edge of the sensor. It is now at speed . C knows that the destination zone B is one zone away. Based on this, it sets the profile to - and sets the speed entry for zone B to \u22121. Zones C, D, E, and F also update their speed entry for B.","(15) Upon seeing the trailing edge of the sensor, zone C sends an exited message out. Zones D,E, F and G receives the message and modifies its speed entry for zone C. D needs to perform no further processing as C is its immediate neighbor. E, F and G do need to perform additional processing to update the speed values for the zones upstream from C.","(16) Zone B detects the end of the deceleration profile and the leading edge of the zone sensor. Knowing that it is the destination, the zone sends out a CARRIER_ARRIVED message. Zones, C, D, E, and F set their zone B entry speed to \u22121 and update the speeds for their zones upstream from B. Zone B notifies the higher level controls of the arrival of the container and waits for it to be removed.","(17) Once zone B has detected that the container has been removed, it sends out a ZONE_AVAILABLE message. Zones C, D, E, and F change their zone B entry speed from \u22121 to \u22123, and update their zones upstream from B to speed ."]}}}},"The speed of the material in the zones for each of the 17 steps described above are shown below in TABLE 4. This information given for each zone is equivalent to the information that would be included in the speed table  of the respective zone threads ZT-B through ZT-I.",{"@attributes":{"id":"P-d0e13381","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00001","num":"00001"},"img":{"@attributes":{"id":"EMI-C00001","he":"132.16mm","wi":"90.34mm","file":"US06853876-20050208-C00001.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"P-00402","num":"00402"},"figref":"FIG. 28","b":"1","ul":{"@attributes":{"id":"ul200077","list-style":"none"},"li":{"@attributes":{"id":"ul200078-li00078"},"ul":{"@attributes":{"id":"ul200078","list-style":"none"},"li":["(1) Zone E sends out a ZONE_RESERVED multi-cast message. All zone's in E's neighborhood will hear the message and update their speed table with a \u22124 for zone E. The upstream zones are updated to 0, 1, and 2.","(2) Once E has determined that there are no pods inbound which cannot stop, it allows pod X to be placed on the track. As downstream zone D has a 3 in its speed table entry, E is free to accelerate the pod. As the pod is stopped, the only available profile is -. An exiting message is sent out with this profile.","(3) Almost immediately after, pod Y, moving at constant speed , trips the downstream sensor in zone J. J examines its speed table and, finding it may enter I at speed , sends an exiting message with profile -. All neighbor zones know that I is downstream of J, and mark I as unavailable (\u22121).","(4) Pod Y exits zone J and sends an exited message out. Zones upstream of J will update their speed tables.","(5) Pod Y, moving at speed , trips the downstream sensor in zone I. I examines its speed table and finds that the speed for H is . I switches to profile - and sends an exiting message. Downstream zones know H is downstream of I, and mark H as unavailable.","(6) Pod Y exits zone I and sends an exited message. Upstream zones change their entry for zone I from \u22121 to zero.","(7) Pod Y, now moving at speed , trips the downstream sensor of zone H. H examines its speed table and sees the speed for G is . H changes to profile - and sends this in an exiting message. The zones know G is downstream of H, and mark it unavailable. Note that at this time X is about half way into D.","(8) Pod X completes its transit of zone E and sends an exited message. All zones which had E marked as reserved (\u22124) update the field to zero, and increment each of the upstream zones.","(9) Pod X, now moving at speed , crosses the downstream sensor of zone D. D examines is speed table entry for C, and sees it can use any speed up to 3. As its current speed is 1, the only accel profile available is -, which it announces in an exiting message. The neighbor zones know that the zone downstream of D is C, and they mark C as unavailable.","(10) Pod Y, now moving at speed , completes its transit of H and sends an exited message. Neighboring zones change the \u22121 for H to a zero, and increment the upstream zones to a maximum of 3.","(11) Pod Y, moving at speed , hits the downstream sensor of G and examines entry for F in the speed table. The table indicates a speed of one, so the zone changes to profile - and announces this in an exiting message. All neighboring zones set their entry for F to \u22121.","(12) Pod X moving at speed , exits zone D and sends an exited message. Upstream zones change their entry for D from \u22121 to zero, and increment the value for the zones upstream of D.","(13) Pod X crosses the downstream sensor of C at speed , and examines its speed table entry for zone B. As the value is 3, the zone changes to a profile of - and sends this out in an exiting message. Neighboring zones set their speed table entries for B to \u22121.","(14) Pod Y, moving at speed , completes its transit of zone G and sends an exited message. Neighbor zones change their entry for G from \u22121 to zero, and increment the entries for upstream zones.","(15) Pod Y, moving at speed , trips the downstream sensor of zone F. The zone examines its speed table entry for zone E and finds a speed setting of 1. The zone sends an exiting message with profile -. Upstream zones change their speed entries for zone E to \u22121.","(16) Pod X completes its transit of zone C and sends an exited message. Upstream zones change C's speed table entry from \u22121 to 0, and increment the speed for the zones upstream of C.","(17) Pod X, not moving at speed , trips the downstream sensor of zone B and examines its speed table entry for A. As the entry is 3 and the pod is moving at 3, it switches to a constant - profile and announces this in an exiting message. Upstream zones know A is downstream of B and set A's speed value to \u22121.","(18) Pod X completes its transit of zone B and sends and exited message. Upstream zones set B's speed to 0 and increment the upstream zones.","(19) Pod X trips the downstream sensor of A, examines its speed table, and sends an exiting message for profile -. Upstream zones mark Z as unavailable.","(20) Pod Y completes its transit of zone F and sends an exited message. Upstream zones change F's speed from \u22121 to 0, and increment the zones upstream of it.","(21) Pod Y, traveling at speed 1, strips the downstream sensor of zone E. E examines its speed table for D and finds a 2. E sends an exiting message with profile -. Upstream zones set zone D to \u22121.","(22) Pod X completes its transit of zone A and send an exited message. Upstream zones mark A with speed  and increment the zones upstream of it.","(23) Pod Y, moving at speed , trips the downstream sensor on zone Z. Z sends an exiting message with profile -.","(24) Pod Y, traveling at speed \u02dc2, completes its transit of E and sends an exited message. Upstream zones mark E as available at speed , and increment the zones upstream of it.","(25) Pod Y, traveling at speed , trips the downstream sensor of D. Zone D's speed table is examined, a value of 2 is found, and Y announces a profile of - in its exiting message.\n\nNote that in this example, the difference between speed  and  is sufficiently small that it takes a large number of zones for Y to come back up to full speed. (the spacing between X and Y decreases very slowly).\n"]}}}},"The speed of the material in the zones for each of the 25 steps described above are shown below in TABLE 5. This information given for each zone is equivalent to the information that would be included in the speed table  of the respective zone threads ZT-A through ZT-J.",{"@attributes":{"id":"P-d0e13873","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00002","num":"00002"},"img":{"@attributes":{"id":"EMI-C00002","he":"163.75mm","wi":"120.90mm","file":"US06853876-20050208-C00002.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"P-00430","num":"00430"},"figref":"FIG. 29","b":"3","ul":{"@attributes":{"id":"ul200079","list-style":"none"},"li":{"@attributes":{"id":"ul200080-li00080"},"ul":{"@attributes":{"id":"ul200080","list-style":"none"},"li":["(1) Zone I examines its speed table and finds it may enter zone H at any speed to the maximum. As the pod is stopped, it must use the - profile, and announces this with an exiting message. Neighboring zones receive the message and mark zone H as unavailable (\u22121 ).","(2) Once X has exited zone I, I will send an exited message. Upstream neighbor zones will mark I as available in their speed tables.","(3) After updating its speed table Zone J will determine it may begin moving pod Y. Based upon the pod being stopped, and I's speed table entry being 0, J may move the pod at profile 0-0 (creep speed).","(4) Zone H detects the pod via the downstream sensor. Pod X is now moving at speed . H consults its speed table for zone G. H decides to use a profile of - and announces this in an exiting message. Upstream neighbor zones adjust their speed table entry for G.","(5) H detects that X has completed transiting its zone and sends an exited message. Upstream neighbors mark H as available and update their entries for the zones upstream of H.","(6) Zone G detects X exiting at speed . After consulting its speed table, G switches to a - profile and sends an exiting message. Upstream zones mark F as unavailable.","(7) X clears zone G. Zone G sends an exited message. Upstream neighbors mark G as available and update speed entries for the zones upstream of G.","(8) Zone F detects X exiting at speed . F consults its speed table and finds E may be entered at , and so switches to a - profile and announces this in an exiting message. Upstream neighbor zones adjust their speed table entries accordingly.","(9) Zone F sees the falling edge of the exit sensor and sends an exited message. Upstream neighbors adjust their speed tables to make F available.","(10) Zone E sees the rising edge of the exiting sensor and consults its speed table. E determines it must follow the - profile and sends an exiting message. Upstream neighbors mark zone D as unavailable.","(11) Zone E sees the falling edge of the exit sensor and sends an exited message. Upstream neighbors adjust their speed tables to make E available.","(12) Zone D sees the rising edge of the exiting sensor and consults its speed table. D determines it must follow the - profile and sends an exiting message. Upstream neighbors mark zone C as unavailable.","(13) Zone D sees the falling edge of the exit sensor and sends an exited message. Upstream neighbors adjust their speed tables to make D available.","(14) Zone C sees the rising edge of the exiting sensor and consults its speed table. C determines it must follow the - profile and sends an exiting message. Upstream neighbors mark zone B as unavailable.","(15) Zone I detects that pod Y has tripped the exit sensor at creep speed. I consults its speed table and finds it may enter at speed . However, as the pod is only moving at speed 0-0, it must use a profile of -. I sends an exiting message with the profile. Upstream neighbors mark H as unavailable.","(16) C detects that pod X has left the zone and sends an exited message. Upstream neighbors mark C as available and update speeds to C's upstream neighbors.","(17) Zone B sees the rising edge of the exiting sensor and consults its speed table. B determines it must follow the - profile and sends an exiting message. Upstream neighbors mark zone A as unavailable.","(18) Zone B sees the falling edge of the exit sensor and sends an exited message. Upstream neighbors adjust their speed tables to make B available.","(19) Zone A sees the rising edge of the exiting sensor and consults its speed table. A determines it must follow the - profile and sends an exiting message. Upstream neighbors mark zone Z as unavailable.","(20) Zone A sees the falling edge of the exit sensor and sends an exited message. Upstream neighbors adjust their speed tables to make A available.","(21) Zone Z sees the rising edge of the exiting sensor and consults its speed table. Z determines it must follow the - profile and sends an exiting message. Upstream neighbors mark zone Y as unavailable.","(22) Zone I sees the falling edge of the exit sensor and determines Y has left the zone. I sends an exited message. Upstream neighbors mark Y as available and update speed entries for Y's upstream neighbors.","(23) Zone H sees the rising edge of the exit sensor. Pod Y is now moving at speed . H consults its speed table and decides to switch to profile -. H sends this out in an exiting message. Upstream neighbors mark G as unavailable.","(24) Zone H sees the falling edge of the exit sensor and sends an exited message. Upstream neighbors adjust their speed tables to make H available.","(25) Zone G sees the rising edge of its exit sensor. Y is now moving at speed . G determines it may switch to a - profile and announces this in an exiting message. Upstream zones mark F as unavailable.","(26) Zone G sees the falling edge of the exit sensor and determines Y has left the zone. G sends an exited message.","(27) Zone F sees the rising edge of the exit sensor. Y is now moving at speed . F consults its speed table and decides to use a - profile. F sends this information out in an exiting message."]}}}},"The speed of the material in the zones for each of 27 steps described above are shown below in TABLE 6. This information given for each zone is equivalent to the information that would be included in the speed table  of the respective zone threads ZT-A through ZT-J.",{"@attributes":{"id":"P-d0e14310","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"364pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00003","num":"00003"},"img":{"@attributes":{"id":"EMI-C00003","he":"163.75mm","wi":"129.46mm","file":"US06853876-20050208-C00003.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In an alternate embodiment, the speed table  indicates only whether or not a zone is occupied or reserved (i.e., speed data is not included in the table ). A zone thread  () uses the occupied and reserved status of its downstream zones and the entry speed of a container to calculate the exit\/final speed number of the container in accordance with a simpler embodiment of the speed table rules . In this embodiment, the zone thread  sets the final speed to a speed number selected from 0, 1, 2, or 3. In particular, when one or more of its downstream zones are occupied the zone thread  sets the container final speed number as described above for the situation where the corresponding speed table values are set to \u22121. When one or more of its downstream zones are reserved the zone thread  sets the container final speed number as described above for the situation where the corresponding speed table values are set to \u22124. When none of its downstream zones are occupied or reserved, the the zone thread  can freely set the container final speed to any speed number, subjet to constraints on container movement. For example, when its downstream zones are neither occupied nor reserved, if its immediate downstream zone were a destination, the zone thread  would be constrained to set the container's exit\/final speed to 0.","F. Zone Thread Dynamic Models","Each zone thread implements a state machine  () based on dynamic models of the possible zone operations\/states. At the top level, these states include:\n\n",{"@attributes":{"id":"P-00471","num":"00471"},"figref":["FIG. 30","FIG. 30"],"i":"UML Distilled"},"In accordance with the UML, each message\/event is shown as a label on an arrow that indicates a transition triggered by the message\/event. For example, referring to , the event, \u201cCARRIER_EXITING: Upstream\u201d (\u201cUpstream\u201d being data contained in the message representing an upstream node) causes a transition from the Idle state to the Transiting state. The various events and messages referred to in these figures are described in the Appendices A-C. Internal messages (i.e., messages within a state object, such as the Ready object ) are those message contained within the boundaries of the object's box.","External messages are coupled out from an object via a port on the periphery of an object's box. For example, the CARRIER_EXITING: Upstream event issued by the Idle state\/object  causes a transition to the Transiting state\/object. At least some of these messages have also been described in reference to the command sequences illustrated in . Tests associated with events that could cause transitions are indicated using C language syntax; e.g., the expression \u201cDestinationID==thisNode\u201d tests whether the DestinationID of a move equals the ID of the current zone (thisNode).",{"@attributes":{"id":"P-00474","num":"00474"},"figref":"FIG. 30","b":["810","812","814","816","820","818","822","822","811","813","814","813","814","815","814","819","818","814","817","816","810","817","816","812","817","816","818","817","816","820"],"i":["a ","a ","b ","a ","b ","c ","d "]},"G. Director Operation","The directors determine the route taken by the material in the course of a move that involves a track corner or junction. In contrast, a move object that coordinates a move merely determines whether there is some route between the material source and destination before initiating the move, while each zone thread that effects the move merely accelerates or decelerates the material along a straight line in the material's current direction of travel. In addition to providing important material routing capabilities, a director is also able to dynamically reroute materials based on the failure of zones or load ports in its vicinity.","In one embodiment each director includes a routing table that indicates valid routes and angles of rotation through the director. The routing table is established upon system initialization and is modified by the director upon discovering that some of the initial routes are unavailable due to failure of electromechanical conveyor components or the intelligent drivers that control those components. Descriptions of the routing table and its generation are described below in reference to . For the purposes of this discussion it suffices to say that each director, using the routing table, dynamically determines a valid route for each material unit passing through it.","A scenario illustrating the operation of a director is now described in reference to . This scenario involves the simultaneous arrival in a director's neighborhood of two material units to be routed through the director. In the illustrated embodiments a director has a larger neighborhood size than a regular zone (e.g., 4 as opposed to 3 zones on either side of the director). The additional zone or zones in the neighborhood allow the director to detect an incoming material unit and decelerate it to zero on the director's upstream zone should the director not be available (assuming that it takes three zones for a material unit to decelerate from top speed to 0). Note that this scenario is merely exemplary and is not to be construed to limit the scope of the present invention.",{"@attributes":{"id":"P-00479","num":"00479"},"figref":["FIG. 31","FIG. 32"],"b":["1","2","1","2"]},"In this case, the material P enters the director's sphere of control prior to the material P. P must make a left turn while P needs to follow a straight line. The sequence of events, which is shown in , is as follows:\n\n","In addition to the above-described director scenarios, other director scenarios are also possible.","2. Director Clusters","In some cases, multiple directors may be connected directly together, forming a cluster. Director clusters require additional communications to insure that a container can pass through all of the needed directors without creating a deadlock situation.  show possible director cluster configurations and  show potential deadlock situations. In  the directors are labelled A, B, C and D, the allowed entry and exit directions through each director are shown with shaded arrows and some possible paths of material through the cluster are shown with thin, solid arrows.","Note that in this type of director cluster when a material unit needs to make a U-turn the turn involves four directors instead of two. If only two directors were needed for a U-turn it would be possible to create a deadlock with only two material units. By requiring the use of all four directors, deadlocks can only occur when material is present on all four directors.  show the potential deadlock conditions.","The deadlock in  is caused when material arrives from opposite directions simultaneously and each material unit needs to use more than one director to continue motion (e.g., both material units want to follow a straight path). In  the deadlock would occur if two containers moving south enter the director cluster, where the first is headed west. While these conditions should be rare, the director controller is configured to ensure that these conditions do not occur. One method employed by the director controller to prevent these deadlocks is as follows:\n\n","The director supports the routing of carriers along multiple, potential paths. The routing mechanisms described below are designed to meet the following goals:\n\n","(2) Provide for automatic discovery of routes to destinations. The route to any destination in the Asyst Automation conveyer system was implicit by the destination address. Decision points only had to perform a simple numeric comparison to select the direction to route a carrier. However, this required a database within the control system be updated by hand whenever destinations were added. The algorithms below allow the system to update their database automatically.\n\n","The directors in the system which perform routing functions may have more than one path to a destination. In the case of multiple exit directions, the director must have some metric by which the optimal route may be chosen.","To obtain this distance data, the director sends out a PATH_LENGTH message to its immediate downstream neighbor zone in all exit directions. When a normal zone receives the message, it increments a zone count field and forwards the message to its immediate downstream neighbor. Eventually, the message will reach the downstream director, which increments the count and sends the message back to the originating director. This information is added by the originating director to its routing table.","This process is also executed when a ROUTE_CONT message is received from a supervisor or when the application starts up and finds is does not have distance information to its downstream directors. Until a director has received distance information to its downstream directors, it will not generate ROUTE_ANNOUNCE messages.","Route Discovery","A transport system implemented in accordance with the present invention is capable of discovering the route(s) from a load\/unload zone to any other load\/unload zone in the system. Whenever a load\/unload zone becomes active (e.g., the associated node powers up for the first time), the zone announces to the upstream node that it is a destination via a DEST_ANNOUNCE message. If the upstream node is not a director, it propagates the DEST_ANNOUNCE message to its upstream node until a director is reached. Each time this message is propagated back, a zone counter is incremented. The value of the zone counter thus indicates the distance to the load zone from the director.","Upon receipt of a DEST_ANNOUNCE message the director updates its routing table to include the destination. The director then sends a message out to its upstream directors announcing the destination. Eventually this data is propagated through all the directors and returns to the originating director. The originating director does not forward the message. By having the zone messages propagate from node to node up to the director every node that is upstream from the destination is able to determine which destination is closest to it. Thus, any zone can notify its upstream director of what destinations have become unavailable as the result of a fault. (This operation is described in detail below.)","Whenever a director becomes active, it establishes the path lengths to its downstream directors and then collects and propagate routing information. A few examples of how this is done is now described in reference to . Examples of how a director modifes its routing information in the face of failed system components is then described in reference to .","Each of these figures shows a physical layout of generic transport system wherein:\n\n","In particular,  shows a physical layout with a single load\/unload zone L\/U, two upstream zones Z and Z and several directors D, D, D, D, D. Messages used in route discovery generally flow upstream. To better illustrate the flow of these messages  shows the upstream connectively between the elements of  from the point of view of the zone L\/U. Given the layout shown in , assume that the zone L\/U is powering up for the first time. This zone examines its configuration information and determines that it is a Load\/Unload destination. As this is its first power-up, a flag in its non-volatile memory is cleared, indicating that the zone L\/U has not yet been registered as a destination.","As a result of the test on the flag, the zone L\/U announces itself as a destination. The following messaging will result:\n\n","As a result of these operations the routing tables of the directors D, D, D, D and D is updated as shown in TABLE 9. In this table the \u201cDestination\u201d column indicates the ID of a route destination that can be reached through a director listed in the \u201cDirector\u201d column, the \u201cRoute Type\u201d is either \u201cvia\u201d (if the destination is reached through another director) or \u201cdirect\u201d (if the destination can be reached without going through another director) and the \u201cDirector Exit Direction\u201d column gives for each \u201cvia\u201d route the director and exit direction through which the route must go and for each \u201cdirect\u201d route an exit direction only.",{"@attributes":{"id":"P-d0e15794","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Routing Information"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"Director Exit"]},{"entry":["Director","Destination","Route Type","Direction"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["D1","L\/U","via","D2: 90o"]},{"entry":[{},"L\/U","via","D2: 180o"]},{"entry":["D2","L\/U","via","D4: 0o"]},{"entry":[{},"L\/U","via","D8: 90o"]},{"entry":["D4","L\/U","via","D8: 0o"]},{"entry":[{},"L\/U","via","D1: 270o"]},{"entry":["D6","L\/U","via","D8: 90o"]},{"entry":[{},"L\/U","via","D1: 180o"]},{"entry":["D8","L\/U","direct","0o"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"A second scenario exists when a new director is added to the system. This may be the result of the replacement of a failed director, or the addition of a new segment of track. The two cases are handled somewhat differently, and so are described separately.","When an existing director is replaced that director needs to:\n\n","When a new director is added, possibly with a new section of track, in addition to finding path lengths in the manner already described, at least a subset of the routing information stored by the existing directors needs to be updated. An example of rereouting in this situation is now described in reference to FIG. .",{"@attributes":{"id":"P-00543","num":"00543"},"figref":["FIG. 36","FIG. 34"],"b":["9","9","1","2","2","9"]},"Note that in order to mechanically and logically add the new track sections, the director D previously needs to be told by its supervisor through a ROUTE_DISCON message to discontinue use of its 180\u00b0 routes. Once the new track sections are powered up, the director D examines its routing table and finds it empty. As a result, the director D first establishs path lengths to the director D via the 0\u00b0 and 90\u00b0 exits. The director D then sends its downstream director D a ROUTE_TABLE_REQ message. If the director D for some reason does not have a routing table when it receives the messages from the director D, it will not reply. The director D will then time-out and send the messages again. This continues until the director D sends the director D a routing table. (Note that if this entire system were starting up for the first time, the routing table received from D would likely be incomplete as all destination zone information would not have propagated through the network. The remaining information would eventually reach D as route information propagated through the network). The director D's list of connected directors must also be updated to include D. D also needs routing table updates for its 180\u00b0 exit.","Routing Tables","As already described, in the illustrated embodiment each director maintains a routing table it uses to determine the output direction to which a container is to be routed. A routing table contains entries for all local destinations (i.e. those zone which can be reached directly without going through another director) and remote destinations (i.e. zones that can only be reached via other directors). In one embodiment the routing table contains the following information:\n\n","The routing data is organized so that all routes for a given destination are contiguous. In one possible organization the direct route is first, followed by the via routes and the via routes are ordered by increasing distance.","Changes in Routing","Beyond the scenarios described above for adding routes, changes in routing can occur due to existing routes becoming temporarily unavailable. A route may become unavailable for the following reasons:\n\n","In scenario (F7), the supervisor responsible for a director notifies the director that a particular set of routes are to be disabled. The supervisor specifies in a PATH_DISCON message the output direction of the director that is to be disabled. All routes associated with that direction then become unavailable. This type of disabling can be done in the course of taking a section of track off-line, possibly in anticipation of maintenance or track modifications.","Scenario F4: Total Node Failure","In scenario (F4), when a node fails (e.g., due to power loss or CPU failure), that node will no longer be able to move carriers or even to communicate its status to its upstream director. This condition needs to be detected by another node. To allow a node to detect the total failure of a downstream node, each node periodically sends a NODE_PING message to its immediate downstream node. If the receiving node does not receive a response to the ping, the sending node assumes the downstream node has failed. The sending node then sends a NODE_FAULT message to its upstream neighbor node, containing the address of the failed node and the closest destination to itself (this tells the director which destinations have become unreachable). This message is propagated back up to the director. The director sends the supervisor a NODE_FAULT message, locates all destinations using the exit direction the fault lies on, and disables the routes to those destinations. Once a node has detected that the downstream node has failed, it continues to attempt to ping the node. For each unsuccessful ping, the node sends another NODE_FAULT message back upstream.","Eventually, the downstream node will respond to the ping message, due either to repair or replacement. The node that originated the ping then sends a NODE_RESTORED message back upstream that will reach the director. If the node was replaced, it announces itself in the manner described above, but the downstream destinations still needs to be added back in. If the node was repaired, it does not announce itself again.",{"@attributes":{"id":"P-00567","num":"00567"},"figref":"FIG. 37"},{"@attributes":{"id":"P-d0e16403","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Initial Routing Information"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"Route","Director Exit",{}]},{"entry":["Director","Destination","Type","Direction","Final Director"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["D1","L\/U1","via","D2: 90o","F"]},{"entry":[{},"L\/U1","via","D2: 180o","T"]},{"entry":[{},"L\/U2","via","D2: 90o","T"]},{"entry":[{},"L\/U2","via","D2: 180o","T"]},{"entry":[{},"L\/U3","via","D2: 90o","T"]},{"entry":[{},"L\/U3","via","D2: 180o","T"]},{"entry":["D2","L\/U2","direct","90o","\u2014"]},{"entry":[{},"L\/U3","direct","90o","\u2014"]},{"entry":[{},"L\/U1","via","D4: 0o","F"]},{"entry":[{},"L\/U1","via","D8: 90o","T"]},{"entry":["D4","L\/U1","via","D8: 0o","T"]},{"entry":[{},"L\/U1","via","D1: 270o","F"]},{"entry":[{},"L\/U2","via","D8: 0o","F"]},{"entry":[{},"L\/U2","via","D1: 270o","F"]},{"entry":[{},"L\/U3","via","D8: 0o","F"]},{"entry":[{},"L\/U3","via","D1: 270o","F"]},{"entry":["D6","L\/U1","via","D8: 90o","T"]},{"entry":[{},"L\/U1","via","D1: 180o","F"]},{"entry":[{},"L\/U2","via","D1: 180o","F"]},{"entry":[{},"L\/U2","via","D8: 90o","F"]},{"entry":[{},"L\/U3","via","D1: 180o","F"]},{"entry":[{},"L\/U3","via","D8: 90o","F"]},{"entry":["D8","L\/U1","direct","0o","\u2014"]},{"entry":[{},"L\/U2","via","D6: 0o","F"]},{"entry":[{},"L\/U2","via","D6: 270o","F"]},{"entry":[{},"L\/U3","via","D6: 0o","F"]},{"entry":[{},"L\/U3","via","D6: 270o","F"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Assume that the node marked with an X has failed. The resultant processing will be:\n\n","Following this processing, the routing information stored by the directors will be as shown in TABLE 11. The columns in this table are the same as in Table 9.",{"@attributes":{"id":"P-d0e17471","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Final Routing Information"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},{},"Director Exit"]},{"entry":[{},"Director","Destination","Route Type","Direction"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"D1","L\/U1","via","D2: 90o"]},{"entry":[{},{},"L\/U1","via","\u2002D2: 180o"]},{"entry":[{},"D2","L\/U1","via","D4: 0o\u2002"]},{"entry":[{},"D4","L\/U1","via","D8: 0o\u2002"]},{"entry":[{},{},"L\/U1","via","\u2002D1: 270o"]},{"entry":[{},"D6","L\/U1","via","D8: 90o"]},{"entry":[{},{},"L\/U1","via","\u2002D1: 180o"]},{"entry":[{},"D8","L\/U1","direct","0o"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"If a zone encounters a mechanical failure that curtails carrier movement, the zone notifies the upstream node of the failure and of the closest downstream destination address with a ZONE_FAULT message. The message is propagated back to the upstream director. The director uses the destination address from the ZONE_FAULT message to mark the routes to that destination and all destinations beyond as unavailable. The director then sends a ROUTE_DISCON message to its upstream directors for each route which has become unavailable.","Scenario F5\/F6: Director Failure Processing","The following example describes in reference to  the processing that occurs when a director fails. In this example the director D has failed. The initial routing for this layout prior to the failure is the same as shown in TABLE 5. The system performs the following processing in this case:\n\n","While the present invention has been described with reference to a few specific embodiments, the description is illustrative of the invention and is not to be construed as limiting the invention. Various modifications may occur to those skilled in the art without departing from the true spirit and scope of the invention as defined by the appended claims.",{"@attributes":{"id":"P-d0e18028","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"406pt","align":"center"}},"thead":{"row":{"entry":"APPENDIX A"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"External Events"},{"entry":"Transport System External Events"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Event","Source","Dest","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["CARRIER_INSTALLED","Transport","CIM","Sent by Transport Controller when material has been transferred from the"]},{"entry":[{},"Controller",{},"Load Port onto the rail. Defined by the Intrabay SEM."]},{"entry":["CARRIER_REMOVED","Transport","CIM","Sent by the Transport Controller when material has been transferred from the"]},{"entry":[{},"Controller",{},"rail to the Load Port. Defined by the Intrabay SEM."]},{"entry":["HOST_COMMAND","CIM","Transport","This event is sent from the CIM system to initiate a material movement"]},{"entry":[{},{},"Controller","command. Possible command values are:"]},{"entry":[{},{},{},"TRANSFER"]},{"entry":["HOST_COMMAND_INITIATED","Transport","CIM","Response to the HOST_COMMAND message indicating the Transport"]},{"entry":[{},"Controller",{},"Contoller has received, and is acting on, the command"]},{"entry":["REMOTE_COMMAND_SEND","Transport","CIM","Intrabay SEM defined message. These messages are sent upon state"]},{"entry":[{},"Controller",{},"transitions in a movement state machine."]},{"entry":["HOST_COMMAND_COMPLETE","Transport","CIM","Sent when a previously received HOST_COMMAND completes."]},{"entry":[{},"Controller"]},{"entry":["Event Report Send","Transport","CIM","Sent by the Transport to indicate initiation and completion of atomic"]},{"entry":[{},"Controller",{},"operations. Possible events include:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Acquiring,","Acquired,"]},{"entry":[{},"Moving,","Moved,"]},{"entry":[{},"Depositing,","Deposit Complete,"]},{"entry":[{},"Carrier Installed,","Carrier Removed."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"P-d0e18488","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"406pt","align":"center"}},"thead":{"row":{"entry":"APPENDIX B"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Intra-CLC Events"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"Multi or",{}]},{"entry":[{},{},{},"Point"]},{"entry":["Event","Source","Dest","Cast","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["ACQUIRE_MATERIAL","LAC","LPTD","Point","This event is sent by the LAC thread to instruct the LPTD thread"]},{"entry":[{},"thread","thread",{},"to begin the process of transferring material from the specified"]},{"entry":[{},{},{},{},"load port to the specified load point."]},{"entry":[{},{},{},{},"Information in the message:"]},{"entry":[{},{},{},{},"Source LAC address"]},{"entry":[{},{},{},{},"Load Port ID (or LPTD position)"]},{"entry":[{},{},{},{},"Load Point ID (or LPTD position)"]},{"entry":["ALARM",{},{},"Multi","An alarm event is generated to notify another system of a"]},{"entry":[{},{},{},{},"fault. An ALARM event contains the following"]},{"entry":[{},{},{},{},"information:"]},{"entry":[{},{},{},{},"Alarm Instance"]},{"entry":[{},{},{},{},"Major Alarm Code"]},{"entry":[{},{},{},{},"Minor Alarm Code"]},{"entry":[{},{},{},{},"Response Options:"]},{"entry":[{},{},{},{},"Abort"]},{"entry":[{},{},{},{},"Retry"]},{"entry":[{},{},{},{},"Ignore"]},{"entry":[{},{},{},{},"No Response"]},{"entry":[{},{},{},{},"Alarm Specific Information"]},{"entry":["ALARM_RESPONSE",{},{},{},"This event is generated is response to an alarm which"]},{"entry":[{},{},{},{},"requires a response. The event will contain the following"]},{"entry":[{},{},{},{},"information:"]},{"entry":[{},{},{},{},"Alarm Instance"]},{"entry":[{},{},{},{},"Response Option:"]},{"entry":[{},{},{},{},"Abort"]},{"entry":[{},{},{},{},"Retry"]},{"entry":[{},{},{},{},"Ignore Movement direction"]},{"entry":["CARRIER_EXITED","Zone","neighbor","Multi","Event tells other zones that the container has exited the"]},{"entry":[{},"thread","Zone",{},"current zone and should now be in the downstream zone."]},{"entry":[{},{},"threads,",{},"Information in message:"]},{"entry":[{},{},"LAC",{},"Source Zone Address"]},{"entry":[{},{},"thread",{},"Container Identifier"]},{"entry":["CARRIER_EXITING","Zone","neighbor","Multi","Event announces that the container in the current zone has"]},{"entry":[{},"Thread","Zone",{},"begun to exit the current zone. The appropriate"]},{"entry":[{},{},"threads",{},"downstream nodes are expected to begin profile following"]},{"entry":[{},{},{},{},"upon receipt."]},{"entry":[{},{},{},{},"Information in message:"]},{"entry":[{},{},{},{},"Source Zone Address"]},{"entry":[{},{},{},{},"Container Destination Zone Address"]},{"entry":[{},{},{},{},"Internal Material ID"]},{"entry":[{},{},{},{},"Velocity Profile"]},{"entry":["CARRIER_REMOVED","Zone","neighbor","Multi","This event is sent by the current zone when material has"]},{"entry":[{},"Thread","Zone",{},"been removed from the rail. This tells the neighbor zones"]},{"entry":[{},{},"threads",{},"to remove the carrier from its tracking table and to update"]},{"entry":[{},{},{},{},"its speed control table based upon the speed defined in the"]},{"entry":[{},{},{},{},"message"]},{"entry":[{},{},{},{},"Information in the message:"]},{"entry":[{},{},{},{},"Source Zone Address"]},{"entry":[{},{},{},{},"Internal Material ID"]},{"entry":[{},{},{},{},"Zone Max Speed"]},{"entry":[{},{},{},{},"Note that the zone max speed field could be used to"]},{"entry":[{},{},{},{},"indicate that while the material has been removed, the zone"]},{"entry":[{},{},{},{},"is still unavailable."]},{"entry":["CARRIER_STOPPED","Zone","neighbor","Multi","This event indicates that material has decelerated to a stop"]},{"entry":[{},"thread","Zone",{},"on the zone which initiated the message. The message"]},{"entry":[{},{},"threads",{},"may be used to stop any inter zone timing or to update"]},{"entry":[{},{},{},{},"speed tables."]},{"entry":[{},{},{},{},"Information in the message"]},{"entry":[{},{},{},{},"Source Zone Address"]},{"entry":[{},{},{},{},"Internal Material ID"]},{"entry":["DELIVER_MATERIAL","LAC","LPTD",{},"This event is generated to the LPTD control thread to"]},{"entry":[{},{},{},{},"instruct it to move a pod from the rail to the load port."]},{"entry":[{},{},{},{},"The event will contain the following information:"]},{"entry":[{},{},{},{},"Internal Movement ID"]},{"entry":[{},{},{},{},"Load Port Identifier"]},{"entry":[{},{},{},{},"Material Location Identifier"]},{"entry":["DEPOSIT_MATERIAL","R.C.","S.C.",{},"This event is generated to instruct the shuttle to deposit its"]},{"entry":[{},{},{},{},"material onto the rail."]},{"entry":["DEST_ANNOUNCE","destina-","any zone",{},"This message is sent by a zone which has been configured"]},{"entry":[{},"tion zone",{},{},"as a destination. The message will be sent to the zone"]},{"entry":[{},{},{},{},"immediately upstream, and will be forwarded zone to zone"]},{"entry":[{},{},{},{},"until it reaches a director."]},{"entry":[{},{},{},{},"The message must contain the address of the destination"]},{"entry":[{},{},{},{},"zone which originally sent the message, and a count field"]},{"entry":[{},{},{},{},"which each zone may increment."]},{"entry":[{},{},{},{},"If the zone does not receive a response within a defined"]},{"entry":[{},{},{},{},"time period, it will wait a random time period and then re-"]},{"entry":[{},{},{},{},"send the message."]},{"entry":["DEST_REGISTERED","director","destination",{},"This message will be sent by a director to a destination"]},{"entry":[{},{},"zone",{},"zone when it receives the destination announcement"]},{"entry":[{},{},{},{},"message. The message tells the destination zone that it has"]},{"entry":[{},{},{},{},"been registered in the director's routing table."]},{"entry":["FREE_LPTD","LAC","LPTD",{},"This event is generated once a transfer involving a LPTD"]},{"entry":[{},{},{},{},"has completed, signalling the LPTD control thread that the"]},{"entry":[{},{},{},{},"mechanism is now available for use by others."]},{"entry":["FREE_ZONE","LAC","Zone","Point","This event is sent to instruct a zone to mark itself as free."]},{"entry":[{},{},"thread"]},{"entry":["LPTD_NOT_RESERVED","LPTD","LAC","Point","This event is generated by the LPTD thread to indicate"]},{"entry":[{},"thread","thread",{},"that the LPTD cannot be reserved by the requester."]},{"entry":"LPTD_RESERVED"},{"entry":["MATERIAL_ACQUIRED","LPTD","LAC","Point","This event is sent once the LPTD thread has completed the"]},{"entry":[{},"thread","thread",{},"transfer of material to the rail."]},{"entry":["MATERIAL_ARRIVED","Zone","TC or RC",{},"This event is generated to inform the Transport Controller"]},{"entry":[{},"thread",{},{},"that material has arrived at its designated pre-load zone."]},{"entry":[{},"or",{},{},"Information in the event:"]},{"entry":[{},"LAC",{},{},"Internal Material ID"]},{"entry":[{},"thread",{},{},"Destination Address"]},{"entry":[{},{},{},{},"The event is generated by a zone thread to the TC for a"]},{"entry":[{},{},{},{},"Track Arrival, and by an LAC thread to a SC for a"]},{"entry":[{},{},{},{},"delivery."]},{"entry":["MATERIAL_DELIVERED","LPTD","LAC",{},"This event is generated once LPTD has successfully"]},{"entry":[{},{},{},{},"delivered the material to the load port."]},{"entry":["MATERIAL_NOT_DELIVERED","LPTD","LAC",{},"This event is sent to indicate that a"]},{"entry":[{},{},{},{},"DELIVER_MATERIAL command did not complete"]},{"entry":[{},{},{},{},"successfully."]},{"entry":["MATERIAL_MOVED","S.C.","R.C.",{},"This event will be sent upon successful completion of a"]},{"entry":[{},{},{},{},"move. For material acquisition, the event signifies that the"]},{"entry":[{},{},{},{},"material is now at the rail end of the shuttle with the"]},{"entry":[{},{},{},{},"shuttle in the up position."]},{"entry":["MATERIAL_NOT_SENT","Load","S.C.","Point","This event is sent by the Rail Controller if it fails to initiate"]},{"entry":[{},"Area",{},{},"the movement of the material from the current zone to its"]},{"entry":[{},"Controller",{},{},"destination. The event will contain:"]},{"entry":[{},"thread",{},{},"Source Zone Address"]},{"entry":[{},{},{},{},"Internal Material Identification"]},{"entry":[{},{},{},{},"Error Code"]},{"entry":["MATERIAL_SENT","Load","S.C.","Point","This event is sent by the Rail Controller to indicate is has"]},{"entry":[{},"Area",{},{},"successfully sent the material toward its destination. The"]},{"entry":[{},"Controller",{},{},"event may be sent as soon as the carrier trips the end of rail"]},{"entry":[{},"thread",{},{},"sensor. The event will contain:"]},{"entry":[{},{},{},{},"Source Zone Address"]},{"entry":[{},{},{},{},"Internal Material ID"]},{"entry":["MOVE_STATUS_UPDATE","S.C.","T.C.",{},"This event is sent to the T.C. to provide an update on the"]},{"entry":[{},"LAC",{},{},"status of a particular movement. The event will contain:"]},{"entry":[{},"thread",{},{},"Sender Address"]},{"entry":[{},{},{},{},"Internal Material Identifier"]},{"entry":[{},{},{},{},"Status"]},{"entry":["NODE_FAULT","Any","Immediate",{},"A node will send this message to its immediate upstream"]},{"entry":[{},"node","Upstream",{},"node (until received by a director) to indicate that a node"]},{"entry":[{},{},"Node",{},"has failed. The message will contain the address of the"]},{"entry":[{},{},{},{},"failed node, and the closest downstream destination to the"]},{"entry":[{},{},{},{},"node which reported the failure."]},{"entry":["PATH_LENGTH","any","any",{},"A director will send this message to its immediate,"]},{"entry":[{},{},{},{},"downstream neighbor zones. The message will be"]},{"entry":[{},{},{},{},"forwarded from zone to zone until it reaches the next"]},{"entry":[{},{},{},{},"director. Each zone will increment a path length as it"]},{"entry":[{},{},{},{},"forwards the message. The receiving director will also"]},{"entry":[{},{},{},{},"increment the count and sent the message back to the"]},{"entry":[{},{},{},{},"originating director."]},{"entry":["POSITION_TO","LAC","Upstream","Point","The LAC sends this event to instruct the two zones to"]},{"entry":[{},"thread","and",{},"move the pod from the load point to the downstream load"]},{"entry":[{},{},"Downsteam",{},"zone such that both sensors detect the pod."]},{"entry":[{},{},"Load"]},{"entry":[{},{},"Zone"]},{"entry":[{},{},"threads"]},{"entry":["POSITIONED_TO","Zone","LAC","Point","The zone sends this event once it has completed"]},{"entry":[{},"threads","thread",{},"positioning."]},{"entry":["RESERVE_LPTD","LAC","LPTD","Point","This event is sent by the LAC to attempt to reserve the"]},{"entry":[{},"thread","thread",{},"LPTD for a material transfer. This event is included in"]},{"entry":[{},{},{},{},"case the LPTD may service multiple load ports and"]},{"entry":[{},{},{},{},"therefore be potentially requested by more than one LPTD."]},{"entry":["RESERVE_ZONE","LAC","Zone",{},"This event is generated by a Rail Controller to cause a"]},{"entry":[{},"thread","thread",{},"zone to be reserved. The event is generated by a Load"]},{"entry":[{},{},{},{},"Area Controller process. If the zone is under the control"]},{"entry":[{},{},{},{},"of the same RC as the LAC, the communication is inter-"]},{"entry":[{},{},{},{},"process. If the zone is under the control of a different RC"]},{"entry":[{},{},{},{},"as the LAC, then the communication is inter-processor."]},{"entry":["ROUTE_ANNOUNCE","director","director",{},"After a director receives a new destination announcement"]},{"entry":[{},{},{},{},"and has updated its own routing table, it will send this"]},{"entry":[{},{},{},{},"message out to its upstream directors. A message will not"]},{"entry":[{},{},{},{},"be sent if the route already existed in the routing table."]},{"entry":["ROUTE_CONT","Transport","director",{},"This message will be sent to mark a director's previously"]},{"entry":[{},"Controller",{},{},"deactivated exit path as again active."]},{"entry":["ROUTE_DISCON","Transport","director",{},"This message will be sent from a Transport Controller to a"]},{"entry":[{},"Controller",{},{},"director to mark a director's exit path as unavailable."]},{"entry":["ROUTE_TABLE","director","director",{},"This message is sent from a director to an upstream"]},{"entry":[{},{},{},{},"director identified in the ROUTE_TABLE_REQ message."]},{"entry":[{},{},{},{},"The message will contain the complete routing table for"]},{"entry":[{},{},{},{},"the sending director."]},{"entry":["ROUTE_TABLE_REQ","director","director",{},"This message is sent from a director to its downstream"]},{"entry":[{},{},{},{},"directors to request that those directors send their routing"]},{"entry":[{},{},{},{},"tables. If no response is received to the message after a"]},{"entry":[{},{},{},{},"defined time period, the director shall wait a random time"]},{"entry":[{},{},{},{},"period and re-send the message."]},{"entry":["SEND_MATERIAL","LAC","Zone","Point","This event is sent by an to instruct the zone in which a pod"]},{"entry":[{},{},{},{},"resides to begin movement. The event will contain:"]},{"entry":[{},{},{},{},"Internal Movement ID"]},{"entry":[{},{},{},{},"Destination Address"]},{"entry":[{},{},{},{},"Movement Direction (left or right)"]},{"entry":["SET_PARAMETER","Transport","Controller",{},"Command from Transport Controller to controller to"]},{"entry":[{},"Controller",{},{},"replace a controller's current setup parameter with a new"]},{"entry":[{},{},{},{},"value. Parameter names which did not exist in the"]},{"entry":[{},{},{},{},"controller will be added. Parameter names which exist will"]},{"entry":[{},{},{},{},"have their values changed. Existing parameter names"]},{"entry":[{},{},{},{},"which have NULL new values will be removed from the"]},{"entry":[{},{},{},{},"controller."]},{"entry":["SHUTDOWN_CMD","Transport","Controllers",{},"Event tells all controllers to immediately decelerate all"]},{"entry":[{},"Controller",{},{},"containers to zero speed."]},{"entry":["SHUTDOWN_STATUS","Controller","Transport",{},"Event provides status information on the controller's"]},{"entry":[{},{},"Controller",{},"shutdown process."]},{"entry":["ZONE_AVAILABLE","Zone","neighbor","Multi","A zone thread sends this message to announce its"]},{"entry":[{},"thread","Zone",{},"availability and maximum entry speed to the neighborhood."]},{"entry":[{},{},"threads,",{},"If the zone had a pod on it, this event instructs the"]},{"entry":[{},{},"LAC",{},"receivers to delete the pod from their database."]},{"entry":[{},{},"thread"]},{"entry":["ZONE_FAULT","Any","Immediate",{},"A node will send this message to its upstream node upon"]},{"entry":[{},"zone","Upstream",{},"detection of a failure condition with the node. The"]},{"entry":[{},"thread","Node",{},"message will be forwarded up to the director. The"]},{"entry":[{},{},{},{},"message will contain a fault code, the address of the failed"]},{"entry":[{},{},{},{},"node and the closest downstream destination to that node."]},{"entry":[{},{},{},{},"(this message may have identical implementation to the"]},{"entry":[{},{},{},{},"NODE_FAULT message)"]},{"entry":["ZONE_IS_SAFE_NOTIFICATION","Zone","LAC","Point","This event is sent in response to a"]},{"entry":[{},"thread","thread",{},"NOTIFY_WHEN_SAFE_REQ event once the zone has"]},{"entry":[{},{},{},{},"determined it is \u2018safe\u2019."]},{"entry":["ZONE_RESERVED","Cur.","Neighbor","Multi","This event is generated by a zone to announce that it has"]},{"entry":[{},"Zone","Zone",{},"been reserved. The event will contain:"]},{"entry":[{},"thread","threads,",{},"Source Zone Address"]},{"entry":[{},{},"LAC"]},{"entry":[{},{},"thread"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"1"}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"2"}}]}}]}}},"The following abbreviations are used in the following descriptions of representative Local CAN Bus Messages\/Events:\n\n","These descriptions are subdivided into four types of messages\/events: Generic Messages\/Events, Zone Controller Messages\/Events, Handshake Controller Messages\/Events and Axis Controller Messages\/Events.","1. Generic Messages\/Events","1.1 ACK","An ACK message is sent by an intelligent driver board in response to commands that require an acknowledgement; e.g. a SET_PROFILE command that contains an Execute ID.","1.2 ALARM","Alarm messages will contain a major code, minor code, and optional explanatory data fields. The major code is a system wide, 16-bit value. The minor code is unique within the major code only, and so can be represented by an 8-bit value. The optional data fields will vary based on the specific alarm.","1.3 CONTROLLER_STATUS_REQUEST","A CONTROLLER_STATUS_REQUEST command is sent to query a controller on its current status. The controller responds with a status message that is defined in the section for each individual controller; e.g. a zone controller responds with a ZONE_STATUS message.","1.4 FORCE_RESET","A FORCE_RESET command is sent to force a controller to reboot. The data pertaining to the force reset command will determine if the controller will reset using default values or not; i.e. those control parameters that are stored in non-volatile memory, especially its CAN bus address.","1.5 GET_PARAMETER","The GET_PARAMETER message is sent by the CLC to read the various control parameters stored by an Intelligent Driver; e.g. a driver board's CAN bus address. Parameters that can be read via this command depend on the controller board type. The parameter to be read is identified by a unique 2-byte number. This number is given in the first two data bytes, which corresponds to the values used with the SET_PARAMETER command. Intelligent driver's check the validity of the parameter ID and will respond with an ALARM message if the Parameter ID value is not appropriate for the controller.","1.6 I_AM_ALIVE","The I_AM_ALIVE message is sent whenever an intelligent driver board has completed its initialization after a bootstrap operation or in response to a PING or FORCE_RESET message. Bootstraps may be due to a power on reset, a manual reset, a watchdog timer reset, or a forced reset due to a command. The watchdog timeout is 630 milliseconds for a zone controller board.","1.7 PARAMETER_RESPONSE","A PARAMETER_RESPONSE message is sent by a controller in response to a previous GET_PARAMETER command from the CLC. The parameter being returned is identified by a unique 2 byte number given in the first 2 data bytes. The current value of the parameter is given in the following six bytes. Values that are less than 6 bytes are returned in the least significant bytes. ASCII data may be returned in the message. Up to 6 ASCII characters may be returned. If less than 6 characters are returned, the string shall be null terminated. If 6 characteres are returned, the calling application is responsible for null terminating the string. The Parameter ID values are the same as those given in the SET_PARAMETER command.","1.8 PING","The PING message is sent by the CLC to quickly query for the existence of an intelligent driver board with a given network address. If the driver board exists and is functioning, it will respond with an I_AM_ALIVE message.","1.9 SELF_TEST","The SELF_TEST message is sent by the CLC to force an intelligent driver board to execute its built-in diagnostic functions. Self-tests are performed as part of the system installation process, during maintenance, or during trouble shooting sessions with the system off-line. These tests generally take a significant amount of time (from a computer's point of view) and vary in length depending on the board type being tested. The SELF_TEST message includes 6 parameters whose meaning varies depending on the test. Unused parameters are sent anyway so the message always has 8 bytes of data.","1.10 SELF_TEST_RESULTS","A SELF_TEST_RESULTS message is sent by an intelligent driver board in response to a SELF_TEST message.","1.11 SENSOR_STATUS","SENSOR_STATUS is sent by a controller in response to a SENSOR_STATUS_REQUEST command. Additionally, most controllers automatically generate these messages when certain of their sensors change states. For example, a zone controller generates one of these messages whenever either a left or right sensor changes state.","1.12 SENSOR_STATUS_REQUEST","This command is sent to query a controller on the current state of one of its sensors. The controller responds with a SENSOR_STATUS message.","1.13 SET_PARAMETER","The SET_PARAMETER message is sent by the CLC to set or reset various control parameters for an Intelligent Driver, e.g. a driver board's CAN bus address. Parameters that can be set via this command depend on the controller board type. Most of these parameters are stored in a controller's non-volatile memory. The parameter to be set is identified by a unique 2 byte number given in the first 2 data bytes and the value to be set is given in the following six bytes. Intelligent drivers check the validity of the parameter where appropriate and may respond with an ALARM message if a) the Parameter ID value is not appropriate for the controller or b) the parameter value is out of range.","2. Zone Controller Messages","2.1 EXECUTE","The EXECUTE message tells a zone controller which of up to two possible motor profiles to execute. All pending profiles are flushed from the zone controller's queue. This command is used to synchronize multiple zone controllers so they are all running the same profile at the same speed.","EXECUTE commands are addressed to a set of zone controllers by incorporating the Execute ID number that was previously sent in a SET_PROFILE command in the Destination address portion of the EXECUTE message header.","2.2 EMERGENCY_DECEL","The EMERGENCY_DECEL message decelerates the motor as quickly as possible from its current speed to a smooth stop. This is accomplished by decelerating the motor at 3 times its normal speed.","2.3 FLUSH_QUEUE","The FLUSH_QUEUE command is used to delete all existing SET_PROFILE commands (including those that are waiting for an EXECUTE command) from the zone controller's command queue. Whatever profile is currently running will continue to run; only those profiles that have not been executed yet are deleted. The CLC cannot use this command to stop the motor. If there are no profiles waiting to be executed then this command has no effect.","2.4 MOTOR_IS_OFF","A MOTOR_IS_OFF message is sent to the CLC whenever either the motor is stopped or the motor is turned off (freewheels, no holding current). This message normally indicates the completion of a MOTOR_OFF command. This message is sent under the following conditions:\n\n","The MOTOR_OFF command stops whatever profile may currently be running, flushes any queued profiles, and lets the motor freewheel (i.e. there is no current going to the motor). This command executes as soon as it is received. If the command should execute after the completion of existing profiles then a SET_PROFILE command specifying the Motor Stop profile should be sent instead.","A MOTOR_IS_OFF message is sent after this command has been executed.","2.6 MOVE_N","The MOVE_N message directs a zone controller board to move the motor a specified number of tenths of millimeters. This message is used to precisely position a pod; usually to place it in front of a Load Port that is positioned across two zones.","2.7 MOVE_N_DONE","The MOVE_N_DONE message is sent by a zone controller when it has completed a MOVE_N operation.","2.8 POSITION_REQUEST","The POSITION_REQUEST command is used to get the current position of a pod in a zone relative to the last transition of any one of the zone's sensors. The controller responds with a POSITION_RESPONSE message.","2.9 POSITION_RESPONSE","The POSITION_RESPONSE message is sent as a result of a previous POSITION_REQUEST command. The data fields in the response give the current position of a pod relative to the last transition of whichever sensor (i.e. either the left or right sensor) changed most recently. Position is given as an integer value in 10ths of a millimeter. If the pod is moving left in the zone then the value will be negative.","2.10 ROTATION_UPDATE","ROTATION_UPDATE messages are sent whenever a zone controller's wheel has rotated by the amount specified in a previous SET_PARAMETER message. Zone controllers have a default value corresponding to once every 5 centimeters. If the motor is stopped these messages also stop.","Note that a zone controller sends an ALARM message if the wheel stops rotating or fails to rotate at the expected rate based on the speed the zone controller has commanded.","2.11 SET_CONSTANT_SPEED","The SET_CONSTANT_SPEED command tells the zone controller to run the motor at a specified speed given in millimeters per second; e.g. for a speed of 56.7 cps the value would be 567. The execution of this command may be triggered in the same manner as a SET_PROFILE command; i.e. the \u2018Execution trigger\u2019 field can have the same values as given in the SET_PROFILE description.","2.12 SET_PROFILE_PARAM","The SET_PROFILE_PARAM message resets the current profile duration, a, and a parameters to the specified values indicated by the CAN message.","2.13 GET_PROFILE_PARAM","The GET_PROFILE_PARAM message requests from the zone controller its significant parameters values.","2.14 PROFILE_PARAM_RESP","The PROFILE_PARAM_RESP is sent following a GET_PROFILE_PARAM. This message contains significant values to the requested profile.","2.15 SET_PROFILE","The SET_PROFILE message tells a zone controller which motor profile to execute and optionally when this profile should begin execution.","2.16 ZONE_STATUS","A ZONE_STATUS message is sent by the zone controller in response to a CONTROLLER_STATUS_REQUEST command.","3.1 Handshake Controller","3.1.1 BUSY_SET","This is a response message to the CLC indicating that the E23 busy line has been set.","3.1.2 COMPLETE_HANDSHAKE","This command from the CLC commands the controller to complete (i.e. terminate) the handshake currently in progress","3.1.3 HANDSHAKE_COMPLETE","This message is sent by the controller once it has successfully completed the handshake in progress.","3.1.4 INITIATE_HANDSHAKE","This command is sent from the CLC to instruct the controller to establish a handshake with the load port or other connected device.","3.1.5 LP_INIT_LOAD_REQ","This message is sent by the controller to the CLC whenever it detects that the load port or other connected device has begun requesting it be loaded with new material.","3.1.6 LP_UNLOAD_REQ","This message is sent by the controller to the CLC whenever it detects that the load port or other connected device has begun requesting that the current material be unloaded from it and onto the conveyor.","3.1.7 SET_BUSY","This command is sent from the CLC to the controller to instruct the controller to set the busy line to the connected device, indicating that a transfer is in progress.",{"@attributes":{"id":"P-00678","num":"heading-00678"},"b":["3","2"]},"3.2.1 AXIS_STATUS","Requst status information from the axis controller.","3.2.1.1 DEFINE_LOCATION","This message is sent from the CLC to the axis controller to define the current position of the axis as a specified location. Subsequent GOTO commands may be issued to move to this position.","3.2.2 FIND_HOME","The FIND_HOME command is sent to cause the rotator to search for its home position sensor.","3.2.3 FIND_POSITION","The FIND_POSITION command would be sent by the CLC if the current position of the axis is unknown. This could happen as a result of a power failure during rotation such that the axis is in between sensors. The CLC must specify the motor direction to be used first in attempting to find the position. The total distance to travel may be specified. FIND_POSITIONS. The FIND_POSITIONS command will search for the number of positions previously defined. The axis must be in the home position prior to execution of the command.","3.2.4 GOTO","The GOTO command will cause the rotation controller to move to the specified sensor position from its current known position. The rotation controller will calculate the number of microsteps it needs to move, ramp up to top speed, cruise, and ramp down to creep speed, and hunt for the sensor (hopefully, it will stop directly on the sensor so no hunting is required).","3.2.5 MOTOR_IS_OFF","This message is sent whenever the motor is turned off, either by explicit command or the end of a profile.","3.2.6 MOTOR_OFF","This message is sent to immediately turn off the motor.","3.2.7 MOVE_N","This command moves the director a specified distance (in 1\/10 millimeter increments). The format is identical to the zone controller's MOVE_N (Data has a different meaning).","3.2.8 MOVE_N_DONE","Sent upon completion of a MOVE_N. Format identical to that of zone controller.","3.2.9 POSITION_REQUEST","This message requests the sensors defined as position sensors be read and reported back.","3.2.10 POSITION_RESPONSE","This message is sent in response to the POSITION_REQUEST. The state of the position sensors will be reported back in a bit mapped field (to allow for fault cases in which multiple sensors read closed)."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE EMBODIMENTS","APPENDIX C: Local CAN Bus Messages"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Additional objects and features of the invention will be more readily apparent from the following detailed description and appended claims when taken in conjunction with the drawings, in which:",{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 2A"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":"FIG. 2B"},{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIG. 2C"},{"@attributes":{"id":"P-00030","num":"00030"},"figref":"FIGS. 3A-3E"},{"@attributes":{"id":"P-00031","num":"00031"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00032","num":"00032"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00033","num":"00033"},"figref":["FIG. 5B","FIG. 5"]},{"@attributes":{"id":"P-00034","num":"00034"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00035","num":"00035"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00036","num":"00036"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00037","num":"00037"},"figref":"FIG. 9A"},{"@attributes":{"id":"P-00038","num":"00038"},"figref":"FIG. 9B"},{"@attributes":{"id":"P-00039","num":"00039"},"figref":"FIG. 9C"},{"@attributes":{"id":"P-00040","num":"00040"},"figref":"FIG. 9D"},{"@attributes":{"id":"P-00041","num":"00041"},"figref":"FIG. 9E"},{"@attributes":{"id":"P-00042","num":"00042"},"figref":"FIG. 9F"},{"@attributes":{"id":"P-00043","num":"00043"},"figref":"FIG. 9G"},{"@attributes":{"id":"P-00044","num":"00044"},"figref":["FIG. 10","FIG. 9A"]},{"@attributes":{"id":"P-00045","num":"00045"},"figref":"FIG. 11"},{"@attributes":{"id":"P-00046","num":"00046"},"figref":["FIG. 12A","FIG. 9A","FIG. 11"]},{"@attributes":{"id":"P-00047","num":"00047"},"figref":"FIG. 12B","b":"12"},{"@attributes":{"id":"P-00048","num":"00048"},"figref":"FIG. 13"},{"@attributes":{"id":"P-00049","num":"00049"},"figref":"FIG. 14"},{"@attributes":{"id":"P-00050","num":"00050"},"figref":"FIG. 15"},{"@attributes":{"id":"P-00051","num":"00051"},"figref":"FIG. 16"},{"@attributes":{"id":"P-00052","num":"00052"},"figref":"FIG. 17"},{"@attributes":{"id":"P-00053","num":"00053"},"figref":["FIGS. 18-19","FIG. 19"]},{"@attributes":{"id":"P-00054","num":"00054"},"figref":"FIGS. 20-22"},{"@attributes":{"id":"P-00055","num":"00055"},"figref":"FIGS. 23","b":["24","24"]},{"@attributes":{"id":"P-00056","num":"00056"},"figref":"FIG. 25"},{"@attributes":{"id":"P-00057","num":"00057"},"figref":"FIG. 26","b":"2"},{"@attributes":{"id":"P-00058","num":"00058"},"figref":"FIG. 27"},{"@attributes":{"id":"P-00059","num":"00059"},"figref":"FIG. 28"},{"@attributes":{"id":"P-00060","num":"00060"},"figref":"FIG. 29"},{"@attributes":{"id":"P-00061","num":"00061"},"figref":"FIG. 30"},{"@attributes":{"id":"P-00062","num":"00062"},"figref":"FIG. 31","b":["1","2","1","2"]},{"@attributes":{"id":"P-00063","num":"00063"},"figref":["FIG. 32","FIG. 31"]},{"@attributes":{"id":"P-00064","num":"00064"},"figref":"FIGS. 33A-33B"},{"@attributes":{"id":"P-00065","num":"00065"},"figref":["FIGS. 33C-33D","FIGS. 33A-33B"]},{"@attributes":{"id":"P-00066","num":"00066"},"figref":"FIG. 34"},{"@attributes":{"id":"P-00067","num":"00067"},"figref":"FIG. 35"},{"@attributes":{"id":"P-00068","num":"00068"},"figref":["FIG. 36","FIG. 34"]},{"@attributes":{"id":"P-00069","num":"00069"},"figref":"FIG. 37"},{"@attributes":{"id":"P-00070","num":"00070"},"figref":"FIG. 38"}]},"DETDESC":[{},{}]}
