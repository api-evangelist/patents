---
title: Common transaction manager interface for local and global transactions
abstract: A system and method for implementing a common transaction manager interface. A system may implement an application server with a transaction manager module configured to provide a common application interface to a local transaction manager and a global transaction manager. The transaction manager module may be configured to determine if a transaction initiated by an application component should be managed by the local transaction manager or the global transaction manager. The local transaction manger may be configured to create a local transaction object for each transaction managed by the local transaction manager, and the global transaction manger may be configured to create a global transaction object for each transaction managed by the global transaction manager. The local transaction objects and the global transaction objects may provide a common application interface for implementing their respective transactions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07743083&OS=07743083&RS=07743083
owner: Oracle America, Inc.
number: 07743083
owner_city: Redwood Shores
owner_country: US
publication_date: 20030424
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates to computer systems and computer software, and more particularly to transaction management in computer systems.","2. Description of the Related Art","Each application that runs on an application server may have an application state that includes data the application may use and\/or change. The data defining the application state may be stored on data sources such as, but not limited to, databases. Operations used to modify data stored in the data sources may be grouped together in transactions. Transactions may have characteristics including, but not limited to, atomicity (either all of the operations in the group are applied to the data in the database, or none of the operations in the group are applied), consistency (the transaction is a correct transformation of the data in the database according to instructions executed by an application component), isolation (each transaction does not affect other simultaneously occurring transactions), and durability (if a transaction completes successfully, failures in an application component or database will not corrupt the transformation of the data in the database). After a transaction completes, the data in the data sources may be modified. If a transaction fails (e.g., is not completed), the data used in the data sources involved in the transaction may be rolled back to its pre-transaction state.","As an application starts, an application server may start a new transaction and open connections to data sources the application needs. When the application server opens a connection to a data source, the connection may be managed as a local transaction connection or a global transaction connection. A local transaction may involve a one-phase commit and may be used when an application needs one data source. A global transaction may involve a two-phase commit and may be used when an application needs two or more data sources. In conventional application servers, all transactions must be managed the same for any given instance of the application server, i.e., all local transactions or all global transactions.","Global transactions may be managed by a separate transaction manager in an application server such as a JAVA TRANSACTION SERVICES (JTS) manager. The global transaction may use a two-phase commit protocol. A global transaction may involve a transaction protocol such as the X\/OPEN Distributed Transaction Processing XA standard from THE OPEN GROUP vendor consortium. Before a global transaction is committed to its respective data sources (i.e., to modify respective data in the data sources), each data source involved in the global transaction may be asked to prepare to commit the transaction. If each data source is able to commit the transaction, each data source may send a signal to the transaction manager indicating so. After all of the data sources have indicated that they are prepared to commit the transaction, the transaction manager may send a signal to commit the global transaction.","Local transactions may be managed by a resource manager. Typically, a local transaction is performed in a manner specific to the data source. Local transactions (typically involving one data source) do not need to use the first phase of the global transaction two-phase protocol (i.e., asking if the data sources are prepared to commit the transaction). In a local transaction, if the data source is prepared to commit the transaction, the data source commits the transaction when the resource manager is instructed to by the application server. In general, a local transaction may be performed faster than a global transaction. Also, different data sources may have different capabilities. For example, if a data source does not support a global transaction protocol, then it may not be able to participate in global transactions.","After a transaction is committed, the transaction may be recorded in a transaction log to keep track of the transaction in case a data source fails during the commit phase. If a data source fails during the commit phase, the data source may be updated using the information in the transaction log. If a data source fails during the commit phase, the data source may request transaction information from the transaction log. The transaction log may send information for a committed transaction to the data source that failed during the commit to allow the data source to update itself.","In one embodiment, a system may include a memory coupled to one or more processors and configured to store program instructions executable to implement an application server with a transaction manager module configured to provide a common application interface to a local transaction manager and a global transaction manager. In one embodiment, the transaction manager module may be configured to provide runtime logic to determine if a transaction initiated by an application component should be managed by the local transaction manager or the global transaction manager. In one embodiment, the local transaction manger may be configured to create a local transaction object for each transaction managed by the local transaction manager, and the global transaction manger may be configured to create a global transaction object for each transaction managed by the global transaction manager. In one embodiment, the local transaction objects and the global transaction objects may provide a common application interface for implementing their respective transactions.","In one embodiment, a method may include invoking a runtime logic by an application component in an application server to determine a transaction manager type for a transaction to be initiated by the application component. In one embodiment, the runtime logic may return the transaction manager type for the application component. The application component may call a common transaction manager interface to initiate a transaction. In one embodiment, the application component may use the same transaction manager interface to initiate the transaction regardless of the transaction manager type returned by the runtime logic. If the runtime logic returns the transaction manager type as global, the transaction may be managed using a global transaction manager. If the runtime logic returns the transaction manager type as local, the transaction may be managed using a local transaction manager.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["107","111","115","107","111","111","109","113","119","121","123","107","119","121","123","107","107"]},"In one embodiment, an application server  may run a plurality of application components (e.g., application components  and ). In one embodiment, application components  and  may be collections of data and methods to operate on the collections of data. For example, the application components  and  may be web applications, enterprise beans, message-driven beans, application clients, or connectors. In one embodiment, an application module  may be a package of application components, such as, but not limited to application components  and . One or more application modules  may be included in an application on the application server .","In one embodiment, an application server  may run several applications simultaneously. An instance-wide attribute may apply to the applications running on the application server . For example, an instance-wide attribute may be set to define a type of transaction manager to use for all transactions running on the application server . In one embodiment, the application components  and  may be configured to start transactions involving access to one or more data sources , , and  such as, but not limited to, databases, managed by resource mangers . Other data sources may also be within the scope of the invention.","In one embodiment, a transaction may be a group of operations on data stored in a data source. The transactions may have characteristics including, but not limited to, atomicity (either all of the operations in the group are applied to the data stored in the data source, or none of the operations in the group are applied), consistency (the transaction is a correct transformation of the data stored in the data source according to instructions executed by an application component), isolation (each transaction does not affect other simultaneously occurring transactions), and durability (if a transaction completes successfully, failures in an application component or data source will not corrupt the transformation of the data stored in the data source). For example, if the transaction includes a group of operations to transfer a sum of money from one bank account to another bank account (where the account balances are saved in a database), the transaction may not be committed to the database with the account balances until both the operation of debiting the amount from the first bank account and the operation of adding the amount to the second bank account have been performed. After the transaction is committed (i.e., the bank account balances updated to reflect the transfer), a transaction log may keep track of the transaction in case the database with the bank account balances fails during the commit phase of the transaction. If the database fails during the commit phase, the database may then be updated using the information in the transaction log.","In one embodiment, a transaction manager type for the transaction may be specified as global or local at an application module level  or application component level for each of the application components  and . In one embodiment, the application server  may be configured to determine the transaction manager type specified for each application component  and  and manage each transaction using the specified type of transaction manager . In one embodiment, the application server  may be coupled to clients  and  through a network  such as, but not limited to the Internet and\/or one or more local networks.","In one embodiment, the application components  and  executing on the application server  may need to access and modify data sources , , and , such as, but not limited to, databases, coupled to the application server . Before executing the application components  and , the application server  may initiate a transaction and open connections to needed data sources , , and . When the application server  establishes a connection to a data source , , and , the connection may be opened as a local transaction connection or a global transaction connection. A local transaction involving a one-phase commit may be used when accessing only one data source , , and . Local transactions involving one data source , , or  may not need to use the first phase of a two-phase commit (i.e., asking if the data source is prepared to commit). If the data source , , or  is prepared to commit, the data source commits the transaction when instructed to by the application server . A global transaction involving a two-phase commit may be used when accessing two or more different data sources , , and . Before a transaction is committed to the connected data sources , , and , each data source , , and  may be asked to prepare to commit. If each data source , , and  is able to commit, it may send a signal to the transaction manager application module  indicating so. After all of the data sources , , and  have indicated that they are prepared to commit, the transaction manager application module  may send a signal to commit the transaction and record the transaction in a transaction log. If the local transaction or global transaction is not completed successfully, the transaction manager application module may instruct the involved data sources , , and  to rollback any changes made during the transaction.","In one embodiment, one or more of the data sources ,  or  may be a logical data source that can associate with a local transaction capable version of the resource and a global transaction capable (e.g. XA) version of the resource. Based on what transaction type is started, the appropriate resource will be selected.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["207","209","211","201","203","205","111","203","109","113","203","203","205","109","113","109","113","205","201","201"]},"In one embodiment, the application server  may have runtime logic  configured to determine the transaction manager type for each transaction according to the transaction manager type  specified for the application component  or  that initiates the transaction. For example, if the transaction manager type  is specified at the application module level , the runtime logic may return the transaction manager type  specified at the application module level . In another example, if the transaction manager type  is specified at the application component level , and not specified at the application module level , the runtime logic may return the transaction manager type specified at each application component level . In one embodiment, the transaction manager type may be statically specified for one or more application components in a deployment descriptor for each application component. In another example, if a default transaction manager type  is specified at the instance-wide level , and the transaction manager type is not specified at the application module level  or the application component level , the runtime logic may return the default transaction manager type . The default, or instance-wide, transaction manager type may be specified in a configuration file for the application server.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3"},"At , a transaction manager type may be specified at an application module\/application component level for application components. In one embodiment, the transaction manager type may be specified for each application component in an application module at the application module level. In addition or alternatively, an application component in the application module may have a transaction manager type specified at the application component level. A default transaction manager type may be specified at the instance-wide level.","At , a transaction manager type may be determined at runtime for each transaction for the application component that initiates the transaction. For example, the specified transaction manager type may be searched for first at the application module level, second at the application component level, and third at the instance-wide level. Other search orders and levels may also be within the scope of the invention. In one embodiment, runtime logic on the application server may be used to determine the specified transaction manager type.","At , the transaction may be managed according to the transaction manager type determined at runtime. In one embodiment, the transaction manager application module may manage the transaction with the application component according to the type of transaction manager specified at the application module level, application component level, and\/or instance-wide level.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"},"At , whether the transaction manager type has been specified at the application module level may be determined. A runtime logic may be used by the application server to determine if the transaction manager type has been specified.","At , if the transaction manager type has been specified at the application module level, the transaction manager type for the application module may be returned. For example, a transaction manager type of \u201cglobal\u201d may have been specified at the application module level. The runtime logic may return \u201cglobal\u201d as the transaction manager type to use for each application component in the application module.","At , if the transaction manager type has not been specified at the application module level, whether the transaction manager type has been specified at the application component level may be determined. In one embodiment, the runtime logic may search each application component to determine if the transaction manager type has been specified at the application component level.","At , if the transaction manager type has been specified at the application component level, the transaction manager type for the application component may be returned. For example, a transaction type of \u201clocal\u201d may have been specified at the application component level. In one embodiment, if an effective transaction type is specified at both the application module level and the application component level, the runtime logic may return the transaction manager type specified at the application module level and ignore the transaction manager type specified at the application component level.","At , if the transaction manager type has not been specified at the application component level, whether the transaction manager type has been specified at the instance-wide level may be determined. A transaction manager type may be specified at the instance-wide level as a default.","At , if the transaction manager type has been specified at the instance-wide level, the instance-wide transaction manager type may be returned for the instance. For example, a transaction type of \u201cglobal\u201d may have been specified at the instance-wide level. In one embodiment, if an effective transaction type is specified at the instance-wide level as well as at the application module level and\/or the application component level, the runtime logic may return the transaction manager type specified at the application module level or application component level and ignore the transaction manager type specified at the instance-wide level.","At , if the transaction manager type has not been specified at the instance-wide level, an error may be returned. In one embodiment of the invention, another location for a default transaction manager type may be specified.","Specifying the transaction type at an application component level may provide a fine granularity for specifying transaction type to optimize performance. Specifying the transaction type at an application module level allows module-level granularity without the need to specify transaction type for each component. Specifying an instance-wide transaction type provides a default type when neither a component nor module level transaction type is specified.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["525","525","527","529","527","531","533","531","535","539","541","533","537","543","545"]},"Thus, the transaction manager module  may provide a common interface for interacting with both local and global transactions. This common interface may provide a common interface to return a type of transaction manager to use at runtime. For example, the common interface may include a getTxnMgr( ) method to determine the transaction manager using the following logic:",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ETT_determined = false"]},{"entry":[{},"if ( Application module level transaction manager type is specified )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ETT = Application module level transaction manager type"]},{"entry":[{},"ETT_determined = true"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"if ((ETT_determined =\u2009= false) and (Application component level"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"transaction manager type is specified))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ETT = Application component level transaction manager type"]},{"entry":[{},"ETT_determined = true"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"if ( ETT_determined =\u2009= false )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ETT = Instance-wide transaction manager type"]},{"entry":[{},"ETT_determined = true"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The global transaction objects , , and  may be created by the global transaction manager  and may each implement the common transaction interface . Similarly, local transaction objects , , and  may be created by the local transaction manager  and may each implement the common transaction interface . The global transaction objects , , and  and local transaction objects , , and  may be created as global transaction manager singletons and local transaction manager singletons respectively when the application server starts up.","A common interface may be used for both local transactions and global transactions. This common interface may include a common interface for thread association and disassociation for global and local transactions. Each transaction may be specific to a single thread of execution. When a transaction (global or local) is started, the transaction manager module's common interface may be used to associate the transaction with a particular thread. When the transaction is completed, the transaction manager module's common interface may be used to disassociate the transaction from the thread. The common interface for thread association\/disassociation may also be used when suspending and resuming a transaction.","The common interface provided by the transaction manager module  for local and global transactions may include a common interface for object association and disassociation. For example, different objects in an application server container may be part of a transaction and may need to know different events like \u201ctransaction has started\u201d, \u201ctransaction is about to commit\u201d and \u201ctransaction is completed\u201d, etc. The common object association\/disassociation interface may provide a common interface for objects involved in global or local transactions to receive (or no longer receive) such events or other transaction information.","The common interface provided by the transaction manager module  for local and global transactions may include a common query interface for object and thread association. This interface may be used to determine which transaction a particular object is associated with or which transaction a particular thread is associated with.","A distributed transaction may span multiple processes. The common interface provided by the transaction manager module  for local and global transactions may include a common interface to send transactional context from one process to another and create the transaction from the context.","In one embodiment, the common interface provided by the transaction manager module  for local and global transactions may include a common interface for all the standard interfaces required by the Java Transaction API (JTA) developed by Sun Microsystems, Inc. JTA specifies standard Java\u2122 interfaces between a transaction manager and the parties involved in a distributed transaction system: the resource manager, the application server, and the transactional applications.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 6"},"At , a transaction manager type may be determined for a transaction to be initiated by the application component. At , the transaction manager type may be returned for the application component. At , a common transaction manager interface may be called to initiate a transaction of the type returned. At , whether the runtime logic returned the transaction manager type as global may be determined. At , if the runtime logic did return the transaction manager type as global, the transaction may be managed using a global transaction manager. At , whether the runtime logic returned the transaction manager type as local may be determined. At , if the runtime logic returned the transaction manager type as local, the transaction may be managed using a local transaction manager.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 7","b":["701","703","707","705","707","711","709","713","709","725","727","733","731","733","737","709","719"]},"In one embodiment, a second application component  and the application module  may not have a transaction manager type specified. An instance-wide level may have a transaction manager type specified as \u201cglobal\u201d, and the runtime logic may determine that the second application component's transaction should be managed as a global transaction. The transaction manager application module  may initiate a global transaction using the global transaction manager . The global transaction manager  may create a global transaction object  to manage a global transaction between the second application component  and the databases  and . In one embodiment of the invention, the local transaction and the global transaction may be managed concurrently by the application server.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 8"},"At , a first application may be run on an application server. At , a transaction may be initiated. At , a first transaction may be managed from the first application component with a first data source as a local transaction. At , a transaction may be initiated. At , a second application component may be run on the application server. At , a second transaction may be managed from the second application with a second data source as a global transaction. At , the first transaction and the second transaction may be managed concurrently within the same application server instance.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 9","b":["1000","1000","1010","1020","1025","1015","1015"]},"The computer system  preferably includes a memory medium on which computer programs according to various embodiments may be stored. The term \u201cmemory medium may include an installation medium, e.g., a CD-ROM, or floppy disk; a computer system memory such as DRAM, SRAM, EDO DRAM, SDRAM, DDR SDRAM, Rambus RAM, etc., or a non-volatile memory such as a magnetic media, e.g., a hard drive , or optical storage. The memory medium may include other types of memory as well, or combinations thereof. In addition, the memory medium may be located in a first computer in which the programs are executed, or may be located in a second different computer, which connects to the first computer over a network. In the latter instance, the second computer provides the program instructions to the first computer for execution.","Also, the computer system  may take various forms, including a personal computer system, mainframe computer system, workstation, network appliance, Internet appliance, personal digital assistant (PDA), television system or other device. In general, the term \u201ccomputer system\u201d can be broadly defined to encompass any device having a processor, which executes instructions from a memory medium. The memory medium preferably stores a software program or programs for event-triggered transaction processing as described herein. The software program(s) may be implemented in any of various ways, including procedure-based techniques, component-based techniques, and\/or object-oriented techniques, among others. For example, the software program may be implemented using ACTIVEX controls, C++ objects, JAVABEANS, MICROSOFT FOUNDATION CLASSES (MFC), or other technologies or methodologies, as desired.","Memory  may store program instructions accessed by the CPU . For example, instructions and data implementing a transaction manager module and\/or application server may be stored in memory .","Computer system  may further include other software and hardware components, such as an input\/output (I\/O) interface , that may be coupled to various other components and memory . The CPU  may acquire instructions and\/or data through the I\/O interface . Through the I\/O interface , the CPU  may also be coupled to one or more I\/O components. As illustrated, I\/O components may include a hard disk drive , a network adapter , a display adapter  and\/or a removable storage adapter . Some components  to  may be coupled to the I\/O interface . In addition, the computer system  may include one or more of a particular type of component. The computer system  may include one or more components coupled to the system through a component other than the I\/O interface . Some computer systems may include additional and\/or other components than shown in  such as application software (e.g., stored in memory ), other CPUs, video monitors or other displays, track balls, mice, keyboards, printers, plotters, scanners, or other types of I\/O devices for use with computer system .","Various embodiments may further include receiving or storing instructions and\/or information implemented in accordance with the foregoing description upon a carrier medium. Suitable carrier media may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM, as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as a network and\/or a wireless link","Further modifications and alternative embodiments of various aspects of the invention may be apparent to those skilled in the art in view of this description. Accordingly, this description is to be construed as illustrative only and is for the purpose of teaching those skilled in the art the general manner of carrying out the invention. It is to be understood that the forms of the invention shown and described herein are to be taken as the presently preferred embodiments. Elements and materials may be substituted for those illustrated and described herein, parts and processes may be reversed, and certain features of the invention may be utilized independently, all as would be apparent to one skilled in the art after having the benefit of this description of the invention. Changes may be made in the elements described herein without departing from the spirit and scope of the invention as described in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention may be obtained when the following detailed description is considered in conjunction with the following drawings.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
