---
title: Generic declaration of bindings between events and event handlers regardless of runtime structure
abstract: Mechanisms for binding an event handler with an event in association with a component of a hierarchical structure are provided. The mechanisms receive a structure document specifying an event, an event handler, and a binding of the event handler with the event. The mechanisms further associate the event and event handler with one or more nodes of a hierarchical model of the hierarchical structure stored in a storage device of the data processing system. Moreover, the mechanisms bind the event handler with the event for the one or more nodes in accordance with the hierarchical model. In addition, the mechanisms generate one or more objects for implementing the hierarchical structure in a framework corresponding to the hierarchical model. The structure document specifies the event binding of the event handler with the event type in a declarative manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09529648&OS=09529648&RS=09529648
owner: International Business Machines Corporation
number: 09529648
owner_city: Armonk
owner_country: US
publication_date: 20090626
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms for providing a generic declaration of bindings between events and event handlers that operates regardless of the underlying runtime structure in which events are occurring.","Nearly any modern architecture for building a graphical user interface (GUI) includes an event subsystem. The event subsystem is responsible for managing the events that occur, i.e. are \u201cfired,\u201d either by the GUI runtime environment or due to user interaction with the GUI. An event may be a key press, mouse click, a GUI component receiving focus, the text in a text field becoming invalid due to a user entering additional text, or the like.","Most GUI frameworks also allow GUI developers to bind an action to be performed to a particular type of event that is fired by a specific event target, i.e. the control that is rendered as a result of the declaration of a GUI component. The specification of the action that is to be performed upon the firing of an event is called the event handler and the act of binding the event handler to an event is often implemented as code that registers or adds a listener to the event subsystem. The listener, in object-oriented programming, is an object that receives the event and processes it appropriately. In order for a listener to receive events, the listener must be registered as an event listener on the event source object and it must implement an appropriate interface.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 1","FIG. 1"],"b":["110","120","110","120","110","130","110","120","140","120","130","120","140"]},"In the HyperText Markup Language (HTML), events are bound to certain elements via a predefined set of attributes on the elements that declare the creation of the GUI component. Here, the event is given by an attribute, the event target is the element to which the attribute is attached, or more precisely, the control that is rendered as the result of the declaration of the element, and the event handler is usually a block of JavaScript code that is performed when the event is fired. For more information regarding events and event handling in HTML, reference is made to the HTML 4.01 specification available at the WorldWide Web (W3) Consortium website.","The following is an example of Java Swing\u2122 code (an Application Programming Interface for providing a graphical user interface for Java programs) for implementing an event handler that itself implements an event listener:",{"@attributes":{"id":"p-0008","num":"0007"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class ExampleClass implements ActionListener {"},{"entry":"\u2002..."},{"entry":"\u2003\u2003\u2003JButton button = new JButton(\u201cExample Button!\u201d);"},{"entry":"\u2003\u2003\u2003button.addActionListener(this);"},{"entry":"\u2002..."},{"entry":"\u2003\u2003\u2003public void actionPerformed(ActionEvent e) { numClicks++;"},{"entry":"\u2003\u2003\u2003label.setText(labelPrefix + numClicks);"},{"entry":"\u2003\u2003\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"With this example in mind, it should be noted that the event listener has three important portions. First, the event listener has a declaration of the event handler class and specifies whether the event handler class implements a listener interface or extends a class that implements a listener interface. In this example, the declaration is \u201cpublic class ExampleClass implements ActionListener {\u201d. Second, the event handler has a portion of code, referred to herein as the registration code, that registers an instance of the event handler class as a listener of one or more GUI components or elements so that the event handle may be registered as an event listener. In this example, the registration code is \u201cbutton.addActionListener(this)\u201d. Third, the event handler has a portion of code, referred to herein as the implementation code, that implements the methods in the listener interface. In this example, the implementation code is \u201cpublic void actionPerformed(ActionEvent e) {numClicks++; label.setText(labelPrefix+numClicks);}\u201d.","There are three main problems with the approach of registering event handlers and listeners with event sources in HTML in the manner generally known in the prior art. First, the types of events that can be observed are limited by HTML itself. If new events are to be observed, the HTML itself must be restated. Second, the event handler must take a specific form, usually script code in a specified file on the client computing device or server computing device, or within the document itself. Third, HTML presupposes a particular type of runtime structure. Namely, HTML presupposes a document object model (DOM) rendered inside a web browser or similar user agent.","Another example of declarative markup language for specifying renderable structures is XForms (a description of which may also be found at the W3 Consortium website) which uses the Extensible Markup Language (XML) Events specification to declare its event bindings. In XML Events, no assumption is made about the event types that can be observed except that the event type must be a legal XML name. In addition, the specification of an event handler is more generic since its value must only satisfy the criterion that it is a Uniform Resource Identifier (URI). Nonetheless, this language is still limited because the event handler cannot be specified as a Java class or executable on the client computer. That is, the language itself simply does not have syntax for this type of specification. Moreover, the XML Events specification still suffers in that it is tied to a particular runtime structure and presupposes a DOM as understood by the DOM Level 2 specification.","In one illustrative embodiment, a method, in a data processing system, is provided for binding an event handler with an event in association with a component of a hierarchical structure. The method comprises receiving, in a processor of the data processing system, a structure document specifying an event, an event handler, and a binding of the event handler with the event. The method further comprises associating, by the processor, the event and event handler with one or more nodes of a hierarchical model of the hierarchical structure stored in a storage device of the data processing system. Moreover, the method comprises binding, by the processor, the event handler with the event for the one or more nodes in accordance with the hierarchical model. In addition, the method comprises generating, by the processor, one or more objects for implementing the hierarchical structure in a framework corresponding to the hierarchical model. The structure document specifies the event binding of the event handler with the event type in a declarative manner.","In other illustrative embodiments, a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program, when executed on a computing device, causes the computing device to perform various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","In yet another illustrative embodiment, a system\/apparatus is provided. The system\/apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which, when executed by the one or more processors, cause the one or more processors to perform various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","These and other features and advantages of the present invention will be described in, or will become apparent to those of ordinary skill in the art in view of, the following detailed description of the example embodiments of the present invention.","The illustrative embodiments provide a mechanism for providing a generic declaration of bindings between event types and event handlers that operates regardless of the underlying runtime structure in which events are occurring. The mechanisms of the illustrative embodiments permit a flexible method for specifying the different aspects of event bindings including an event observer, an event target, an event type, and an event handler. With the mechanisms of the illustrative embodiments, the underlying event binding system, which processes the event binding declarations and injects them into the runtime environment, can handle the details of achieving the actual binding without the markup language itself referring to any aspect of the runtime environment or its event subsystem. Moreover, with the mechanisms of the illustrative embodiments, there are no restrictions on the types of events that can be targeted, the event targets themselves, or the event handlers that are bound to these events. In addition, because the event bindings are declarative, they can be used in a variety of applications to handle a variety of events and event handlers. By \u201cdeclarative\u201d what is meant is that the generic declaration of bindings between event types and event handlers is done by expressing the logic of an operation without describing its control flow, i.e. describing what the operation should accomplish rather than how to go about accomplishing the operation. This is in contrast to an imperative definition of event bindings that requires a detailed description of how exactly to perform the event bindings, which is specific to the underlying runtime structure, as is used in prior art mechanisms.","As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method, or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.","Any combination of one or more computer usable or computer readable medium(s) may be utilized. The computer-usable or computer-readable medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, radio frequency (RF), etc.","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java\u2122, Smalltalk\u2122, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In addition, the program code may be embodied on a computer readable storage medium on the server or the remote computer and downloaded over a network to a computer readable storage medium of the remote computer or the users' computer for storage and\/or execution. Moreover, any of the computing systems or data processing systems may store the program code in a computer readable storage medium after having downloaded the program code over a network from a remote computing system or data processing system.","The illustrative embodiments are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The illustrative embodiments may be utilized in many different types of data processing environments including a distributed data processing environment, a single data processing device, or the like. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments,  are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented.","With reference now to the figures and in particular with reference to , example diagrams of data processing environments are provided in which illustrative embodiments of the present invention may be implemented. It should be appreciated that  are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.","With reference now to the figures,  depicts a pictorial representation of an example distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system  may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system  contains at least one network , which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network  may include connections, such as wire, wireless communication links, or fiber optic cables.","In the depicted example, server  and server  are connected to network  along with storage unit . In addition, clients , , and  are also connected to network . These clients , , and  may be, for example, personal computers, network computers, or the like. In the depicted example, server  provides data, such as boot files, operating system images, and applications to the clients , , and . Clients , , and  are clients to server  in the depicted example. Distributed data processing system  may include additional servers, clients, and other devices not shown.","In the depicted example, distributed data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, the distributed data processing system  may also be implemented to include a number of different types of networks, such as for example, an intranet, a local area network (LAN), a wide area network (WAN), or the like. As stated above,  is intended as an example, not as an architectural limitation for different embodiments of the present invention, and therefore, the particular elements shown in  should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.","With reference now to , a block diagram of an example data processing device is shown in which aspects of the illustrative embodiments may be implemented. Data processing device  is an example of a computer, such as client  or server computer  or  in , in which computer usable code or instructions implementing the processes for illustrative embodiments of the present invention may be located.","In the depicted example, data processing device  employs a hub architecture including north bridge and memory controller hub (NB\/MCH)  and south bridge and input\/output (I\/O) controller hub (SB\/ICH) . Processing unit , main memory , and graphics processor  are connected to NB\/MCH . Graphics processor  may be connected to NB\/MCH  through an accelerated graphics port (AGP).","In the depicted example, local area network (LAN) adapter  connects to SB\/ICH . Audio adapter , keyboard and mouse adapter , modem , read only memory (ROM) , hard disk drive (HDD) , CD-ROM drive , universal serial bus (USB) ports and other communication ports , and PCI\/PCIe devices  connect to SB\/ICH  through bus  and bus . PCI\/PCIe devices may include, for example, Ethernet adapters, add-in cards, and PC cards for notebook computers. PCI uses a card bus controller, while PCIe does not. ROM  may be, for example, a flash basic input\/output system (BIOS).","HDD  and CD-ROM drive  connect to SB\/ICH  through bus . HDD  and CD-ROM drive  may use, for example, an integrated drive electronics (IDE) or serial advanced technology attachment (SATA) interface. Super I\/O (SIO) device  may be connected to SB\/ICH .","An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing device  in . As a client, the operating system may be a commercially available operating system such as Microsoft\u00ae Windows\u00ae XP (Microsoft and Windows are trademarks of Microsoft Corporation in the United States, other countries, or both). An object-oriented programming system, such as the Java\u2122 programming system, may run in conjunction with the operating system and provides calls to the operating system from Java\u2122 programs or applications executing on data processing device  (Java is a trademark of Sun Microsystems, Inc. in the United States, other countries, or both).","As a server, data processing device  may be, for example, an IBM\u00ae eServer\u2122 System p\u00ae computer system, running the Advanced Interactive Executive (AIX\u00ae) operating system or the LINUX\u00ae operating system (eServer, System p, and AIX are trademarks of International Business Machines Corporation in the United States, other countries, or both while LINUX is a trademark of Linus Torvalds in the United States, other countries, or both). Data processing device  may be a symmetric multiprocessor (SMP) system including a plurality of processors in processing unit . Alternatively, a single processor system may be employed.","Instructions for the operating system, the object-oriented programming system, and applications or programs are located on storage devices, such as HDD , and may be loaded into main memory  for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit  using computer usable program code, which may be located in a memory such as, for example, main memory , ROM , or in one or more peripheral devices  and , for example.","A bus system, such as bus  or bus  as shown in , may be comprised of one or more buses. Of course, the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit, such as modem  or network adapter  of , may include one or more devices used to transmit and receive data. A memory may be, for example, main memory , ROM , or a cache such as found in NB\/MCH  in .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash memory, equivalent non-volatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the illustrative embodiments may be applied to a multiprocessor data processing system, other than the SMP system mentioned previously, without departing from the spirit and scope of the present invention.","Moreover, the data processing device  may take the form of any of a number of different data processing systems including client computing devices, server computing devices, a tablet computer, laptop computer, telephone or other communication device, a personal digital assistant (PDA), or the like. In some illustrative examples, data processing device  may be a portable computing device which is configured with flash memory to provide non-volatile memory for storing operating system files and\/or user-generated data, for example. Essentially, data processing device  may be any known or later developed data processing system without architectural limitation.","As mentioned above, the mechanisms of the illustrative embodiments may be implemented in one or more of the data processing systems and environments illustrated above in  or other types of data processing systems and environments generally known in the art or later developed. The mechanisms of the illustrative embodiments provide an ability to generally declare event types and event handler bindings for graphical user interfaces (GUIs), or other types of hierarchical structures that use events and event handlers. The mechanisms use a declarative approach to defining the event handler bindings that is independent of the underlying runtime environment, e.g., an underlying browser, Java Runtime Environment (JRE), or the like. With the mechanisms of the illustrative embodiments, event types and event handlers may be defined in any desired programming language and, through the mechanisms of the illustrative embodiments, may be output as event types and event handler objects having bindings utilized by the runtime environment or framework in which the hierarchical structure is to be implemented. This allows hierarchical structures, such as GUIs, programmed in any of XML, HTML, Java Swing\u2122, or the like, to be input to the mechanisms of the illustrative embodiments, and resulting event handlers and their bindings may be generated in any of the programming languages, e.g., XML, HTML, Java Swing\u2122, or the like, depending upon the programming language used by the particular runtime environment or framework.","With the mechanisms of the illustrative embodiments, a hierarchical structure, such as a graphical user interface (GUI), is defined in terms of a model having a predetermined representation. In some illustrative embodiments, the model may be defined in terms of a structured document, such as an XML structured document, for example. In other example illustrative embodiments, the model may be defined, in terms of a directed acyclic graph (DAG), as an implementation of several Java\u2122 interfaces. A model for the hierarchical structure may be provided for each of the runtime environments, frameworks, or the like, that are supported by the mechanisms of the illustrative embodiments. Thus, there may be different DAGs defined for different runtime environments, frameworks, or the like. For example, a first model may be defined for implementing the hierarchical structure in a framework that utilizes HTML and a second model may be defined for implementing the hierarchical structure in a framework that utilizes Java Swing\u2122.","The predetermined representation further has an associated node naming mechanism that is used to correlate node identifiers with implementations of corresponding event types, event handlers, and their bindings in a desired programming language for a target runtime environment or framework. In other words, using the model for the target framework and the associated node naming mechanism, an input structure document's components may be converted or translated into corresponding output components for the particular runtime environments or frameworks that are supported by the implementation of the illustrative embodiments. The actual event handlers may be specified in the input structure document in any programming language since the correlation is performed on a model basis using a node naming methodology for the target runtime environment or framework.","Thus, the event types and event handlers of an input structure document, defining a hierarchical structure to be rendered in a particular runtime environment or framework, may be processed in accordance with this model to generate appropriate event types and event handler bindings in programming languages specific to the target runtime environments or frameworks in which the input structure document is implemented, regardless of the particular programming language used to define the input structure document. This in effect allows hierarchical structures to be defined in any programming language and allows them to be implemented in any runtime environment. Thus, the implementation of hierarchical structures is more dependent upon the definition of the model than the particular runtime environment or framework in which the hierarchical structure is to be implemented.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 4","FIG. 4"]},"As shown in , the generic event bindings mechanism comprises a controller , an interface , a model data structure storage , a nodal naming mechanism , a parsing engine , an event\/event handler definition structure storage , and a runtime environment (framework) interface engine . The controller  controls the overall operation of the generic event binding mechanism and orchestrates the operation of the other elements -. The interface  provides a communication pathway through which the event binding mechanism may communicate with other elements of a data processing system by receiving inputs and providing outputs. For example, the event binding mechanisms may receive a structured document input  defining event types, event handlers, and event bindings in one programming language and provide corresponding event handler objects  as outputs in the same or another programming language for a particular targeted runtime environment, i.e. framework, as part of a rendered hierarchical structure, e.g., GUI.","The model data structure storage  stores one or more model data structures defining one or more hierarchical structures using a predetermined representation. A different model may be provided for each type of runtime environment, framework, or the like, that is supported by the implementation of the mechanisms of the illustrative embodiments. For purpose of describing the illustrative embodiments herein, it will be assumed that the hierarchical structures are graphical user interfaces (GUIs) since event types, event handlers, and event bindings are typically used in the programming of GUIs. However, it should be appreciated that other types of hierarchical structures that utilize event types, event handlers, and event bindings may be used with the mechanisms of the illustrative embodiments without departing from the spirit and scope of the illustrative embodiments.","In one illustrative embodiment, the models of the hierarchical structures, e.g., GUIs, are defined in structure documents as directed acyclic graphs (DAGs) that can be represented as a set of nodes N and a set of paths between nodes P. A DAG has a set of root or start nodes R with each node in the set of nodes N providing a means by which to access its successor nodes, i.e. the nodes to which it is connected via a path P. The DAG further has a way to monitor changes in the structure of the DAG or modifications of the properties of a node N. Such DAG models are generally known in the art.","In accordance with the mechanisms of the illustrative embodiments, each node of the particular models utilizes a name that is able to be categorized or typed by the event binding mechanism using the nodal naming mechanism . For example, in Accessiblity Tools Framework (ACTF), available from the Eclipse Technology Project, the default node name of any object in the model is its unqualified Java class name, i.e. its name without the package. In models that represent structures that implement (or nearly implement) the W3 Consortium Document Object Model (DOM) Level 2 Core specification, the node name is a tag name of the element from which the object was rendered. In a hierarchy of accessible objects provided by a native accessibility architecture, the node name is the accessible role of the object.","The models may be provided as structured documents created using any of a number of different architectures, frameworks, or the like. The nodal naming mechanism  is able to determine the architecture or framework under which a model of a hierarchical structure was created and, based on a knowledge of the nodal naming convention for the particular architecture, framework, etc., extract a directed acyclic graph (DAG) representation of the hierarchical structure.","Input structure documents may be provided for defining specific hierarchical structures, such as a GUI, using any of the number of different architectures, frameworks, or the like. The input structure documents have event types and event handlers specified, such as in an \u201cevents document\u201d which may be a portion of the input structure document or a separate input structure document, with the bindings of the event types and event handlers also being specified in a declarative manner, i.e. without reference to the underlying framework. In the defining of these event types and event handlers, and their bindings, the event types are preferably annotated with identifiers of node names and node identifiers. These annotations inform the event binding mechanism of the illustrative embodiments to associate a particular event handler as the event handler for a particular event type of a particular node having the corresponding node name and node identifier. If no node identifier is specified, then the event handler is registered as the event handler for all nodes having the corresponding node name. These annotations may be processed in accordance with a DAG of a model stored in the model data structure storage  to thereby generate event and event handler objects  corresponding to a specific hierarchical structure, e.g., GUI, and particular runtime environment, framework, or the like.","When an input structure document  for a specific hierarchical structure is provided to the mechanisms of the illustrative embodiments, such as via interface , for rendering in a particular runtime environment or framework, such as during a creation or registration process of the input structure document , the input structure document  is parsed by the parsing engine  and processed in accordance with a corresponding model, provided in terms of a DAG for example, in the model data structure storage . As mentioned above, the input structure document  is annotated to correlate components of the input structure document  with nodes of a corresponding model's DAG in the model data structure . The parsing identifies the events and event handlers and their bindings specified in the input structure document  and the event binding mechanism  generates corresponding event handler objects, along with their bindings, for the particular runtime environment or framework in which the input structured document  is being implemented.","The event\/event handler definition structure storage  provides definitions of event types and event handlers for the various possible runtime environments, or frameworks, supported by the illustrative embodiments. These definitions may be correlated with the nodes of the models (defined as DAGs) so that a particular implementation of a hierarchical structure for the particular target runtime environment or framework is able to be generated. The runtime environment (framework) interface engine  is able to analyze the models and correlate them to the appropriate definitions for the target runtime environment or framework.","Thus, models may be created and stored for use in rendering specific hierarchical structures, as well as for creating, traversing, and generally interacting with hierarchical structures in particular runtime environments. The use of the models, along with a defined node naming methodology, allows annotated input structure documents to be correlated with the models to bind events and event handlers with specific nodes of the models to thereby generate a hierarchical structure. Definitions for the nodes of the hierarchical structure, for specific runtime environments or frameworks, may be retrieved and used to generate an implementation of the hierarchical structure for the target runtime environment or framework.","The event binding mechanism  of  may be provided as part of a rendering engine for rendering hierarchical structures, such as a GUI or the like.  illustrates one way in which an event binding mechanism of the illustrative embodiments may be implemented in a rendering engine  for generating a GUI having events and event handlers, and associated bindings, in accordance with one illustrative embodiment. As shown in , when building and rendering a GUI, a structural document  is first composed. The input structure document  may generally define a GUI and its corresponding events and event handlers as well as their bindings. The events, event handlers, and their bindings may be specified in an events document  portion of the structure document , or as a separate events document . There are a variety of document types that can be utilized for specifying the structure document . For example, the input structure document  may be defined in terms of an Extended Markup Language (XML) document, a HyperText Markup Language (HTML) document, a Java code or JavaScript document, or the like. The key here, however, is that the particular programming language used to generate the structure document  may be generic in nature in that the ultimate runtime environment(s), or framework(s),  need not utilize the same programming language as the structure document . For example, a GUI may be defined in terms of an XML structure document  and, through the mechanisms of the illustrative embodiments, be built and rendered for use in XML, HTML, Java, or other types of runtime environments and frameworks .","The input structure document  is annotated, such as in the events document , to include node names and node identifiers in association with events specified in the input structure document  in accordance with a naming methodology. For example, the naming methodology may be one or more of the naming methodologies used in any of a number of different architectures or frameworks, as previously discussed above. The node names and node identifiers are provided in such a manner that they may be identified during parsing of the input structure document  and correlated with nodes of a generic programming language model specified as a DAG.","Once constructed, the structure document  is communicated to the rendering engine  for building and rendering the hierarchical structure defined by the structure document . The rendering engine  may be any type of rendering engine capable of parsing and rendering hierarchical structures defined in a structure document . One example of an engine  is the Reflexive User Interface Builder (RIB)\u2122, which is available from International Business Machines Corporation of Armonk, N.Y. The rendering engine  begins the process of building and rendering a hierarchical structure based on the structure document  which is communicated to the rendering engine  through a first communication channel . The rendering engine  is enhanced to include the event binding mechanism  of the illustrative embodiments for identifying events, event handlers, and associating them with particular nodes in a generically defined DAG model of a GUI in accordance with a generic naming methodology.","While parsing the structured document  for components, and associating events, event handlers, and their bindings with nodes of the defined DAG model of a GUI, the rendering engine  may utilize an interface  to define classes of DAG components in a variety of frameworks , such as XML, HTML, SWT, Java, Java Swing\u2122 or the like. The interface  may be the runtime environment interface  in , for example.","Thus, with the mechanisms of the illustrative embodiments, once a model for a GUI has been defined for a target runtime environment, framework, or the like, in accordance with the mechanisms described above, and a naming methodology for forming node names is associated with that model, the event binding mechanism of the illustrative embodiments may process an annotated input structure document such as the following:",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<events model = \u201cweb\u201d>"]},{"entry":[{},"\u2003<event type = \u201conclick\u201d nodeName=\u201dDIV\u201d"]},{"entry":[{},"\u2003nodeID=\u201dmySpecialButton\u201d>"]},{"entry":[{},"\u2003\u2003<handler class=\u201dcom.xyz.events.MyHandler\u201d"]},{"entry":[{},"\u2003\u2003method=\u201dhandleEvent\u201d\/>"]},{"entry":[{},"\u2003<\/event>"]},{"entry":[{},"<\/events>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The parsing of this \u201cevents document,\u201d which in this example is defined for use with an HTML programming language model \u201cweb\u201d, is annotated with the nodeName and nodeID and may be part of an input structure document, may be performed by a parser of the event binding mechanism when the input structure document is created or registered for implementation with a target runtime environment or framework. In this example, the events document instructs the event binding mechanism to use the method \u201chandleEvent\u201d from the Java class com.xyz.events.MyHandler as the event handler for the onclick event of the node with name \u201cDIV\u201d and node id \u201cmySpecialButton.\u201d If no nodeID had been specified in the above example, then the event handler would have been bound to all nodes with the name \u201cDIV.\u201d The event binding mechanism is able to query the model in order to know how to perform the actual binding of the event handler with the event \u201conclick\u201d associated with the node having a node name of \u201cDIV\u201d and node id of \u201cmySpecialButton.\u201d For example, the model may be queried via an interface implementation that represents the model and may, for example, generate a button.addActionListener(myHandler) either as static Java code to be complied or, using the Java Reflection API, to be executed dynamically. In the domain of the live DOM may be modified to add the handler, e.g., div.addEventHandler(\u201conclick\u201d).","The above is an example of an events document that is defined in terms of an HTML framework, however with the mechanisms of the illustrative embodiments, the events document may be defined using any desired programming language and for any particular framework, as long as the events document is annotated to include the node name and, optionally, the node identifier in accordance with a known node naming methodology associated with a generic programming language model. The following is an example of an events document defined using Java Swing\u2122:",{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<events model=\u201dswing\u201d>"]},{"entry":[{},"\u2003<event type=\u201dpressed\u201d nodeName=\u201dJButton\u201d>"]},{"entry":[{},"\u2003\u2003<handler>"]},{"entry":[{},"\u2003\u2003\u2002highlightButton(event.getSource( ));"]},{"entry":[{},"\u2003\u2003\u2002System.out.println(\u201cbutton pressed\u201d);"]},{"entry":[{},"\u2003\u2003<\/handler>"]},{"entry":[{},"\u2003<\/event>"]},{"entry":[{},"<\/events>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This events document instructs the event binding mechanism to attach the given Java code as an event handler to all buttons in a Java Swing GUI to be invoked when these buttons are pressed. The event binding mechanisms and the model work together to map the \u201cpressed\u201d event type to the ActionListener.actionPerformed method on the javax.swing.JButton instances and to actually generate and programmatically attach this event handler to the target JButton instances. It should be noted that there is no restriction on the code that may be embedded in the <handler> element. For example, the code given in the example above may just as easily be JavaScript and not Java code.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 6","FIG. 6"],"b":["610","620","630","640","650","660","670"]},"Thus, the illustrative embodiments provide mechanisms for abstracting the definition of a hierarchical structure and its associated events, event handlers, and event bindings away from the underlying runtime environment, framework, or the like in which the hierarchical structure is to be implemented. In one illustrative embodiment, this allows GUIs to be defined using models provided for one or more runtime environments, frameworks, or the like, and a structured document referencing one of these models and using a node naming methodology that allows the events, event handlers, and event bindings to be associated with particular nodes of the models. In this way, the structure document need not reference any of the elements of the underlying runtime environment, framework, or the like. To the contrary, the implementation of the hierarchical structure in a particular runtime environment, framework, or the like, is handled by the definition of a hierarchical model, such as a directed acyclic graph, and correlating nodes of the model with definitions of components provided for the individual runtime environments, frameworks, and the like.","As noted above, it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment, the mechanisms of the illustrative embodiments are implemented in software or program code, which includes but is not limited to firmware, resident software, microcode, etc.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The invention, as well as a preferred mode of use and further objectives and advantages thereof, will best be understood by reference to the following detailed description of illustrative embodiments when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
