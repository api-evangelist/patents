---
title: Message broadcast protocol which handles configuration changes in a cluster of virtual servers
abstract: A cluster of virtual servers includes a plurality of physical nodes, where each physical node executes virtualization software which implements a virtualization environment in which one or more virtual server machines execute. The virtualization software executed by each physical node may enable the virtualization environment implemented by the physical node to be dynamically changed. Some types of configuration changes to the virtualization environment may take a significant amount of time to perform, e.g., several seconds or longer. While the configuration change is taking place, the physical node may be unable to respond to messages sent by other physical nodes in the cluster of virtual servers. The nodes may execute message broadcast software which implements a message broadcast protocol which takes into account the dynamic configuration changes to the virtualization environments of the nodes in the cluster of virtual servers so that these periods of unresponsiveness can be handled gracefully.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08635318&OS=08635318&RS=08635318
owner: Symantec Corporation
number: 08635318
owner_city: Mountain View
owner_country: US
publication_date: 20090915
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention relates to cluster environments in which a plurality of server computers cooperate to perform a distributed application. More particularly, the invention relates to a message broadcast protocol used by a cluster of virtual servers.","2. Description of the Related Art","A server cluster is a group of linked server computers that cooperate closely to perform a particular application. Clusters are usually deployed to improve performance and\/or availability over that provided by a single server computer. In order to cooperate to perform their intended function, the servers in the cluster need to exchange messages with each other using a message broadcast protocol.","The use of virtualization technology is becoming increasingly common in server clusters. A virtual machine (VM), also referred to as a virtual computer, is a software implementation of a machine (computer) that executes programs like a real machine. Virtualization provides the ability for multiple virtual machines to run together on the same physical computer. Each virtual machine may execute its own operating system and may appear to a user of the virtual machine to be the same as an independent physical computer. The software layer that executes on the physical computer to create and manage the virtual machines is referred to herein as virtualization software.","Virtualization may be used in a computer server cluster to make more efficient use of the physical resources of the physical computers (nodes) in the cluster. Clusters may be virtualized so that multiple virtual servers execute on each physical node in the cluster, e.g., where each virtual server is implemented as a virtual machine. By implementing cluster virtualization, organizations are able to consolidate the application workload of multiple servers onto a smaller number of physical nodes, which results in improved hardware utilization, fewer physical nodes, cost savings, and simplified deployment and management.","In addition to these benefits, the virtualization software which implements the virtual servers may also enable greater flexibility in the configuration of the cluster environment beyond what is possible in non-virtualized server clusters. For example, a virtual server may be dynamically migrated from one physical node of the cluster to another. As another example, the number of virtual CPUs assigned to a particular physical node may be dynamically changed.","These types of dynamic changes in the configuration of the virtualized server cluster are problematic for conventional message broadcast protocols designed to be used in non-virtualized server clusters. When the virtualization environment of a particular node is dynamically changed, the node may be temporarily unable to receive and\/or respond to messages broadcast by other nodes in the cluster during the configuration change. This may cause a slowdown in the operation of the other nodes while they wait for the node undergoing the configuration change to respond. It may also cause the other nodes to mistakenly assume that the node undergoing the configuration change has failed and is no longer a member of the cluster.","Various embodiments of a cluster of virtual servers are described herein. The cluster of virtual servers may include a plurality of physical nodes, where each node executes virtualization software which implements a virtualization environment in which one or more virtual server machines execute. A first node of the cluster of virtual servers may be configured to register to receive notifications of one or more types of configuration changes in the virtualization environment of the first node, where each respective type of configuration change prevents the first node from responding to broadcast messages sent by other nodes of the cluster of virtual servers during the respective type of configuration change. The first node may be further configured to receive a first notification indicating that a first type of configuration change in the virtualization environment of the first node has been initiated after registering to receive the notifications. In response to the first notification, the first node may transmit a first message to one or more other nodes of the cluster of virtual servers to inform the one or more other nodes that the first node is in a temporarily inactive state in which the first node is unable to respond to broadcast messages sent by other nodes of the cluster of virtual servers. The one or more other nodes of the cluster of virtual servers may be configured to store information indicating that the first node is in the temporarily inactive state in response to receiving the first message.","According to a further embodiment, the first node of the cluster of virtual servers may also be configured to determine a particular amount of time which the first type of configuration change in the virtualization environment of the first node is expected to take to complete. The first message transmitted to the one or more other nodes of the cluster of virtual servers may include the particular amount of time and may inform the one or more other nodes that the first node is expected to be in the temporarily inactive state for the particular amount of time.","The cluster of virtual servers may also include an additional node configured to broadcast heartbeat messages to other nodes of the cluster of virtual servers to determine whether the other nodes are currently active. The additional node may be configured to receive the first message indicating that the first node is expected to be in the temporarily inactive state for the particular amount of time, and increase a heartbeat timeout for the first node from a default value to a new value based on the particular amount of time in response to receiving the first message.","The cluster of virtual servers may also include an additional node configured to receive the first message indicating that the first node is in the temporarily inactive state. After receiving the first message, the additional node may initiate a multi-phase commit protocol by broadcasting a query message to each of the other nodes of the cluster of virtual servers requesting them to reply indicating whether they can commit a particular operation. The additional node may receive a reply to the query message from each node of the cluster of virtual servers except the first node affirming ability to commit the particular operation. In response to determining that the first node is in the temporarily inactive state, the additional node may determine that the particular operation should be committed by each of the other nodes of the cluster of virtual servers except the first node without waiting for a reply to the query message from the first node. The additional node may broadcast a commit message requesting each of the other nodes of the cluster of virtual servers except the first node to commit the particular operation. In some embodiments the additional node may set a response timeout for the first node to a particular value in response to receiving the first message indicating that the first node is in the temporarily inactive state. Determining that the particular operation should be committed by each of the other nodes of the cluster of virtual servers except the first node without waiting for a reply to the query message from the first node may include determining that the response timeout for the first node has expired since the time when the query message was broadcast.","The first node of the cluster of virtual servers may be further configured to receive a second notification indicating that the first type of configuration change in the virtualization environment of the first node has been completed, and transmit an additional message to the one or more other nodes of the cluster of virtual servers to inform the one or more other nodes that the first node has returned to a normal state in which the first node is able to respond to broadcast messages sent by other nodes of the cluster of virtual servers. A particular node of the one or more other nodes may receive the additional message transmitted from the first node indicating that the first node has returned to the normal state, and in response to the additional message, may determine that one or more operations were committed by each of the nodes of the cluster of virtual servers except the first node while the first node was in the temporarily inactive state. The particular node may transmit one or more messages to the first node requesting the first node to commit the one or more operations.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Various embodiments of a cluster of virtual servers are described herein. As used herein, the term \u201ccluster of virtual servers\u201d refers to a system which includes a plurality of physical nodes or computers, where each physical node executes virtualization software which implements a virtualization environment in which one or more virtual server machines execute. A virtual server machine is a server machine or server computer which is implemented as a virtual machine, e.g., as opposed to a physical server machine.","The physical nodes of the cluster of virtual servers may be configured to perform a message broadcast protocol. For example, the message broadcast protocol may be used to coordinate atomic transactions involving multiple physical nodes (or involving virtual server machines which execute on multiple physical nodes). For example, in response to a request to perform a particular operation, it may be desirable to ensure that either all of the physical nodes in the cluster commit the operation, or none of them do. The message broadcast protocol may be used to exchange messages among the physical nodes to ensure that the operation is committed atomically by the nodes. In some embodiments the message broadcast protocol may also be used to exchange heartbeat messages or other messages to identify which physical nodes are currently active as members of the cluster of virtual servers.","The virtualization software executed by each physical node may enable the virtualization environment implemented by the physical node to be dynamically changed in various ways. Some types of configuration changes to the virtualization environment may take a significant amount of time to perform, e.g., several seconds or longer. While the configuration change is taking place, the physical node may be unable to respond to messages sent by other physical nodes in the cluster of virtual servers. As described in detail below, the message broadcast software which implements the message broadcast protocol may take into account the dynamic configuration changes to the virtualization environments of the nodes in the cluster of virtual servers so that these periods of unresponsiveness can be handled gracefully, e.g., without causing operations performed by the other nodes of the cluster of virtual servers to fail, without causing the operations performed by the other nodes to be unacceptably slowed down, and\/or without causing the node undergoing the configuration change to be ejected from membership in the cluster of virtual servers.","Referring now to , an example of the cluster of virtual servers according to one embodiment is illustrated. In this example the cluster of virtual servers includes four physical nodes or computers A-D. (Unless otherwise specified, the term \u201cnode\u201d is used herein to refer to a physical node of the cluster of virtual servers.) In other embodiments the cluster of virtual servers may include various other numbers of physical nodes  (as long as there are at least two). Each node  may execute virtualization software which implements a virtualization environment in which one or more virtual server machines  execute. The virtualization software on a particular node  may instantiate multiple virtual machines within the virtualization environment on the particular node , where each virtual machine acts as a server computer (referred to as a virtual server machine ). For example, the particular node  may execute multiple operating systems, where each operating system corresponds to one of the virtual server machines  implemented on the particular node .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["28","30","30","30","28","10","30","30","10","30","30","10","30","30","10","30","30","10","30","28","30","10","10","30","30","30"]},"The physical nodes  of the cluster of virtual servers may be coupled to each other through a network . In some embodiments the nodes  may be coupled through a local area network (LAN). In other embodiments, the nodes  may be coupled through any of various other types of networks or combinations of networks. For example, the network  may include any type or combination of local area network (LAN), a wide area network (WAN), an Intranet, the Internet, etc. Examples of local area networks include Ethernet networks, Fiber Distributed Data Interface (FDDI) networks, and token ring networks. Also, each node  may be coupled to the network  using any type of wired or wireless connection medium. For example, wired mediums may include Ethernet, fiber channel, etc. Wireless connection mediums may include a satellite link, a modem link through a cellular service, a wireless link using a wireless communication protocol such as IEEE 802.11 (wireless Ethernet), etc.","In the illustrated embodiment the nodes  also couple through the network  (or through another network) to shared storage devices A and B. In various embodiments there may be any number of shared storage devices , and each shared storage device  may be any type of storage device configured to store data. For example, a shared storage device  may be a tape drive (e.g., a device operable to store data on tape cartridges), a disk storage unit (e.g., a device including one or more disk drives), an optical storage device (e.g., a device operable to store data on optical media), a flash memory storage device, etc. In some embodiments the shared storage devices  may be network-attached storage (NAS) devices. In other embodiments the shared storage devices  may be storage area network (SAN) devices.","As illustrated in , each node  may execute message broadcast software . The message broadcast software  may implement the message broadcast protocol which enables the nodes  to exchange messages and gracefully handles dynamic configuration changes in the virtualization environments on the nodes .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 2"],"b":["10","10","10","212","10","214","217","218","220","222","224","226","228","230","232","233","234","237","238","235","290","235","239","240","242","246","212","228","247","212","230","248","212"]},"The bus  allows data communication between central processor(s)  and system memory , which may include read-only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which software programs are loaded, including the message broadcast software . The ROM or flash memory can contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. Software resident with the node  is generally stored on and accessed via a computer-readable medium, such as a hard disk drive (e.g., fixed disk ), an optical drive (e.g., optical drive ), a floppy disk unit , or other storage medium. Additionally, software can be received through the network modem  or network interface .","The storage interface , as with the other storage interfaces of the node , can connect to a standard computer-readable medium for storage and\/or retrieval of information, such as a fixed disk drive . The message broadcast software  and other software executing on the node  may store information on the disk drive . In some embodiments the message broadcast software  and other software executing on the node  may also, or may alternatively, store information on a shared storage device . In some embodiments the shared storage device  may be coupled to the node  through the fibre channel network . In other embodiments the shared storage device  may be coupled to the node  through any of various other types of storage interfaces or networks.","Many other devices or subsystems (not shown) may be connected in a similar manner. Conversely, all of the devices shown in  need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code to implement the message broadcast protocol described herein may be stored in computer-readable storage media such as one or more of system memory , fixed disk , optical disk , or floppy disk . The operating system provided on the node  may be a Microsoft Windows\u00ae operating system, UNIX\u00ae operating system, Linux\u00ae operating system, or another operating system.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 3"],"b":["217","10","10"]},"In the illustrated embodiment the software of the node  includes virtualization software . The virtualization software  implements a virtualization environment  in which one or more virtual server machines  execute (e.g., the virtual server machines A and B in the illustrated example). The software of the node  also includes an operating system . (It is noted that the virtualization software  may also execute other operating systems which are used by the respective virtual server machines  of the virtualization environment . The operating system  of the physical node  may be separate from the operating systems of the virtual server machines .) The software of the node  also includes the message broadcast software . The message broadcast software  includes various modules such as a registration module , a notification reception module , a timeout calculation module , a status information module , a transaction protocol module , and a message queue module . The functions performed by the various modules of the message broadcast software  are described below. The software of the node  also includes a network communication module . The network communication module  may be used by the message broadcast software  to transmit messages to other nodes  in the cluster of virtual servers.","Thus, each node  of the cluster of virtual servers may execute a respective instance of the message broadcast software . The various instances of the message broadcast software  may communicate with each other to allow the nodes to exchange messages and to handle dynamic configuration changes that occur in the virtualization environments  of the nodes .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4","b":["15","10","928","10","10","10","10"]},"In block , the registration module  of the message broadcast software  executing on the first node may register to receive notifications of one or more types of configuration changes in the virtualization environment  of the first node. For example, the registration module  may use an application programming interface (API) of the operating system  or the virtualization software  to request to be programmatically notified when various types of configuration changes to the virtualization environment  occur. In particular, the registration module  may request to receive notifications of configuration changes to the virtualization environment  which take a significant amount of time (e.g., several seconds or more) to complete, and which render the first node temporarily unable to communicate with other nodes  of the cluster of virtual servers and\/or temporarily unable to commit operations requested by other nodes  of the cluster of virtual servers.","In various embodiments, the virtualization software  may be able to re-configure the virtualization environment  of the first node in various ways. As one example, a particular virtual server machine  executing within the virtualization environment  of the first node may be dynamically migrated to another node  of the cluster of virtual servers, or a particular virtual server machine  may be dynamically migrated from another node  to the virtualization environment  of the first node. For example, virtualization software from Sun Microsystems, Inc. supports the dynamic migration of logical domains (LDOMs) between physical nodes, e.g., where an LDOM corresponds to a particular virtual server machine . As another example, virtualization software from IBM Corp. supports the dynamic migration of micro partitions between physical nodes, e.g., where a micro partition corresponds to a particular virtual server machine . During the migration of a virtual server machine  to or from the first node, the first node may not be able to communicate with other nodes  of the cluster of virtual servers and\/or may not be able to commit operations requested by other nodes  of the cluster of virtual servers. Thus, the registration module  may request to receive notification of when a virtual server machine migration begins on the first node so that this event can be handled by the message broadcast protocol.","As another example of a configuration change which may disrupt the first node's normal operation, the virtualization software  may be able to dynamically change the resources assigned to a particular virtual server machine  and\/or re-distribute resources assigned to different virtual server machines . For example, in some embodiments the virtualization software  may create a pool of virtual CPUs. Each virtual server machine  may be assigned one or more of the virtual CPUs. The virtualization software  may be able to dynamically re-assign a virtual CPU from one virtual server machine  to another. As another example, the virtualization software  may dynamically increase or decrease an amount of RAM assigned to a particular virtual server machine . Thus, the registration module  may request to receive notification of when the virtualization software  begins to perform these or other types of changes to the resources allocated to the virtual server machines  on the first node.","As another example of a configuration change which may disrupt the first node's normal operation, the virtualization software  may be able to dynamically change the status of virtual or physical device drivers used in the virtualization environment  of the first node. The virtualization software  may also dynamically change resources used in the virtualization environment  such as network links, storage links or virtual switches. The registration module  may request to receive notifications of when the virtualization software  begins to perform these or other types of changes to the virtualization environment  of the first node.","Referring again to , subsequently to registering to receive notifications of the various types of configuration changes, in block  the notification reception module  of the message broadcast software  may receive a first notification indicating that a particular type of configuration change in the virtualization environment  of the first node has been initiated. In response to the first notification, the timeout calculation module  may determine a particular amount of time which the particular type of configuration change is expected to take to complete. In various embodiments the amount of time may be determined in various ways. For example, in some embodiments each type of configuration change may be expected to take a known and fixed amount of time, and the timeout calculation module  may simple retrieve information specifying the expected amount of time. In other embodiments the amount of time required to complete the configuration change may vary depending upon the current configuration of the virtualization environment  and the new configuration to which it needs to be changed. The timeout calculation module  may estimate the amount of time required to complete the configuration change depending upon various factors in the current or new configuration.","In block  the message broadcast software  of the first node may transmit a first message to the other nodes  of the cluster of virtual servers to inform the other nodes that the first node has entered a temporarily inactive state expected to last for the particular amount of time. The instances of the message broadcast software  executing on the other nodes  may receive the first message and update their status information for the first node to indicate that the first node is in the temporarily inactive state. They may then begin treating the first node differently to account for the possibility that the first node will be unresponsive to messages transmitted during the temporarily inactive state, as described below.","After the virtualization software  has completed the particular type of change to the virtualization environment  of the first node, the virtualization software  may notify the notification reception module  that the particular type of configuration change has been completed, as indicated in block . The message broadcast software  of the first node may then transmit a second message to a master node of the cluster of virtual servers to inform the master node that the configuration change in the virtualization environment of the first node has been completed, as indicated in block .","During the time in which the virtualization environment  of the first node was undergoing the configuration change, the other nodes  of the cluster may have continued to commit various operations which the first node would normally be expected to commit along with them. A node in the cluster may initiate a transaction to perform a particular operation by sending messages to the other nodes in the cluster, e.g., according to a multi-phase commit protocol. The messages specifying the operation to be performed may be sent to all the other nodes of the cluster, including the first node. However, since the first node is undergoing the configuration change the first node may be unable to receive or respond to the messages. The master node may keep a queue of the messages to which the first node did not respond while it was in the temporarily inactive state. Once the master node receives the second message indicating that the configuration change in the virtualization environment of the first node has been completed, the master node may transmit these queued messages to the first node. As indicated in block , the message broadcast software  of the first node may receive the queued messages from the master node. In block  the message broadcast software  of the first node may then process the received messages, e.g., by performing the specified operations. The messages may be numbered so that they are performed in a particular order, i.e., the same order in which the operations were performed by the other nodes of the cluster of virtual servers. It is possible that one or more of the messages received in block  may have already been processed by the first node. For example, even though the first node may have been unable to response to a particular message while it was in the inactive state, the first node may have still received and processed the messages. Any messages which have already been processed may be ignored.","After the queued messages have been processed, the first node should then be in the same state as the other nodes  of the cluster of virtual servers. The message broadcast software  of the first node may then transmit a third message to the other nodes  of the cluster of virtual servers to inform the other nodes  that the first node has returned to a normal state, as indicated in block . The other nodes  may then reset their status information for the first node to indicate that it should once again be treated normally by the message broadcast protocol.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 4","FIG. 5"],"b":["15","15"]},"In block  the message broadcast software  on each of the nodes other than the first node receives the first message transmitted by the first node indicating that the first node has entered the temporarily inactive state. It is possible that the first node is the master node. In this case, the other nodes of the cluster of virtual servers communicate to select a new node as the master node to replace the first node, as indicated in blocks  and .","In block  each of the other nodes in the cluster may store state information indicating that the first node is in the temporarily inactive state.","The master node may periodically broadcast heartbeat messages to the other nodes  of the cluster. Each of the other nodes  is expected to respond to the heartbeat messages within a default timeout amount of time. Since the first node is temporarily inactive, the master node increases the heartbeat timeout for the first node from the default value to a new value based on the particular amount of time for which the first node is expected to be in the temporarily inactive state, as indicated in block . Increasing the heartbeat timeout may prevent the first node from being removed from the cluster of virtual servers due to not replying to the heartbeat messages during the time in which the first node is in the temporarily inactive state.","In addition to the heartbeat timeout, another timeout referred to herein as a response timeout may be used in the cluster. Each of the other nodes may set the response timeout for the first node to a particular value indicative of the first node's temporarily inactive state, as indicated in block . As indicated in block , while the first node is in the temporarily inactive state, other nodes in the cluster may perform transactions for operations that need to be committed by all the nodes of the cluster of virtual servers. The transactions may be performed according to a multi-phase atomic commit protocol, such as a two-phase commit (2PC) protocol or a three-phase commit (3PC) protocol. Each transaction may be coordinated by any of the nodes in the cluster. For example, in a 2PC protocol, a coordinator node may first send a query message to each of the other nodes to determine whether they can commit the operation. Each node is expected to return a reply message of either Yes (can commit) or No (cannot commit). The coordinator node collects the responses. If all of the nodes voted Yes then the coordinator node sends another message requesting them to actually commit the transaction.","Normally the coordinator node may wait for all of the nodes to respond to the query message sent in the multi-phase atomic commit protocol. However, since the first node is temporarily inactive and may not be able to response, the response timeout is used to prevent the coordinator node from waiting for a reply from the first node for longer than the response timeout.","In block  the master node receives the second message indicating that the configuration change in the virtualization environment of the first node has been completed. The master node may then send the first node any queued messages for operations that were performed while the first node was undergoing the configuration change, as described above. After the first node has received and processed the messages, it sends the third message indicating that the first node has returned to the normal state. Each of the other nodes of the cluster receives the third message, as shown in block . They then reset the state information for the first node to indicate that the first node has returned to the normal state, and may reset the heartbeat timeout and the response timeout for the first node to their normal values, as indicated in block .","If the first node was originally the master node then the current master node may communicate with the other nodes of the cluster of virtual servers to reset the first node as the master node, as shown in blocks  and .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 6","FIG. 5"],"b":["613","701","10","703","10","705","707"]},"In block  the master node determines that the operation was not committed by the first node and queues a message to transmit later to the first node, where the queued message specifies the operation that was committed by the other nodes. The queued message will be transmitted from the master node to the first node after it has completed its configuration change so that it can perform the operation to synchronize itself with the other nodes.","It is possible that the master node can fail before the message queue is sent to the first node after it completes the configuration change. In this case the first node would not be able to synchronize itself with the other nodes. To overcome this problem, in some embodiments the other nodes of the cluster may also keep a copy of the message queue. Thus, if the master node fails then another node in the cluster can transmit the message queue to the first node.","As discussed above, if the first node is the master node then another node may be selected as the master node while the first node is in the inactive state. In various embodiments any of various techniques may be used to select the new master node. In some embodiments each node may have an ID, and the new master node may be selected on the basis of the node IDs. In some embodiments the master node may be selected as the node with the lowest ID. Normally, if a node with a lower ID joins the cluster then the newly joined node may become the master node. However, if the new node joins the cluster while the first node is in the inactive state then the current master node may remain as the master node until the first node returns to the normal state. This is because the newly joined node may not have a copy of all the messages that need to be broadcast to the first node after it completes its configuration change.","In various embodiments, various client software applications may use the services of the cluster of virtual servers. In some embodiments the cluster of virtual servers may implement an application programming interface (API) which notifies the client applications when the first node enters the temporarily inactive state. This enables the client applications to perform any necessary adjustments to compensate for the first node being inactive.","Various embodiments of a method for performing a message broadcast protocol in a cluster of virtual servers have been described above. The method is implemented by the physical nodes  of the cluster of virtual servers, and causes transformations to occur in one or more of the nodes . For example, nodes of the cluster are transformed by storing status information for the first node indicating that the first node is in the temporarily inactive state, and storing timeout information indicating the altered heartbeat timeout and response timeout for the first node. The master node, and possibly other nodes as well, are also transformed by storing the message queue for the operation messages that need to be transmitted to the first node after the first node completes the configuration change to its virtualization environment.","It is noted that various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a computer-accessible storage medium. Generally speaking, a computer-accessible storage medium may include any storage media accessible by one or more computers (or processors) during use to provide instructions and\/or data to the computer(s). For example, a computer-accessible storage medium may include storage media such as magnetic or optical media, e.g., one or more disks (fixed or removable), tape, CD-ROM, DVD-ROM, CD-R, CD-RW, DVD-R, DVD-RW, etc. Storage media may further include volatile or non-volatile memory media such as RAM (e.g. synchronous dynamic RAM (SDRAM), Rambus DRAM (RDRAM), static RAM (SRAM), etc.), ROM, Flash memory, non-volatile memory (e.g. Flash memory) accessible via a peripheral interface such as the Universal Serial Bus (USB) interface, etc. In some embodiments the computer(s) may access the storage media via a communication means such as a network and\/or a wireless link.","The foregoing description, for purpose of explanation, has been described with reference to specific embodiments. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as may be suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the invention can be obtained when the following detailed description is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
