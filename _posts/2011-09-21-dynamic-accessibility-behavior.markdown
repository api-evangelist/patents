---
title: Dynamic accessibility behavior
abstract: Configurations for dynamically detecting accessibility behavior in web client are disclosed. The subject technology initially determines whether an accessibility application (e.g., a screen reader) is executing. In one example, an event identifier is transmitted to simulate an accessibility event. The subject technology then determines whether a separate process from the web client queries for the transmitted event identifier. A global parameter is then set in the web client to enable an accessibility feature(s) of the web client if the accessibility application is executing. The subject technology then enables the web client for an accessibility mode.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08607251&OS=08607251&RS=08607251
owner: Google Inc.
number: 08607251
owner_city: Mountain View
owner_country: US
publication_date: 20110921
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Web accessibility refers to the practice of making websites usable by people of all abilities and disabilities. When a web site is designed to achieve web accessibility, all users can have equal access to information and functionality. By way of example, when text and images are large or enlargeable, it is easier for users with poor sight to read and understand the content. Some disabled users can further utilize assistive technology to provide more accessibility to web content. For example, a screen reader is an application that attempts to identify and interpret what is being displayed on the screen for presentation to a user in a more accessible form according to the user's needs (e.g., text-to-speech, sound icons, or as Braille).","The subject technology provides for dynamically detecting accessibility behavior in a web client. The subject technology determines whether an accessibility application is executing. The subject technology sets a global parameter in the web client to enable accessibility features if the accessibility application is executing. Further, the subject technology enables the web client for an accessibility mode.","The subject technology also provides a system for dynamically detecting accessibility behavior in a web client. The system includes memory and one or more processors. The system further includes one or more modules stored in memory and configured for execution by the one or more processors. The system includes include an accessibility module configured to determine whether an accessibility application is executing. The system includes a rendering module configured to provide an accessibility tree in response to detecting that the accessibility application is executing by the accessibility module. The system includes a browsing module configured to render content included on a web page based on the accessibility tree from the rendering module.","The subject technology further provides for transmitting an event identifier to simulate an accessibility event. The subject technology determines whether a separate process from a web client queries for the transmitted event identifier. The subject technology then sets a global parameter in the web client to enable accessibility features if the separate process queries for the transmitted event identifier. Additionally, the subject technology enables the web client for an accessibility mode if the global parameter is set.","It is understood that other configurations of the subject technology will become readily apparent to those skilled in the art from the following detailed description, wherein various configurations of the subject technology are shown and described by way of illustration. As will be realized, the subject technology is capable of other and different configurations and its several details are capable of modification in various other respects, all without departing from the scope of the subject technology. Accordingly, the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.","The detailed description set forth below is intended as a description of various configurations of the subject technology and is not intended to represent the only configurations in which the subject technology may be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a thorough understanding of the subject technology. However, it will be clear and apparent to those skilled in the art that the subject technology is not limited to the specific details set forth herein and may be practiced without these specific details. In some instances, well-known structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject technology.","Assistive technology can be provided for disabled users in order to access web content (e.g., a web page) via a web client (e.g., a browser). For example, a vision-impaired user can utilize a screen reader for providing information from the web content in an auditory format (e.g., voice) or by presenting the web content in Braille characters for the visually impaired. Accessibility protocols exist for assistive technology (an \u201caccessibility application\u201d as used herein) to communicate with accessible software programs, such as an accessible web client. The accessibility protocols can include communication in two different directions: 1) assistive technology sends messages to the web client, and 2) the web client sends messages to the assistive technology.","These accessibility protocols can be used by other applications for other purposes, including, but not limited, to automation. For example, tablet PCs may use accessibility protocols to query an application to determine the object under the cursor position, or macro recorder applications may use accessibility protocols to automate the control of an application. Assistive technology can utilize such accessibility protocols, resulting in thousands of messages that are generated per second or more. Thus, assistive technology should process these messages quickly and efficiently or the user experience will be degraded. In contrast, another application (e.g., a web client) that uses an accessibility protocol(s) may not process these messages related to an accessibility protocol(s) quickly or efficiently.","Optimizing the behavior of the web client for fast and efficient interaction with assistive technology can require putting the web client into a special state. Putting the web client in this state makes it more optimal for communicating with assistive technology, but at the cost of increased memory usage and CPU usage. This state is undesirable when interaction with assistive technology is not actively communicating with the web client.","One possible solution would be to put the web client into the accessibility-optimized mode if and when any communication using an accessibility protocol is first received. This can be undesirable because applications other than assistive technology may use accessibility protocols as well. As a result, the web client would unnecessarily incur the cost of optimizing the web client for communication with assistive technology.","To address the aforementioned issues, the subject technology can send an accessibility communication from the web client to any other application(s) that listens for such accessibility communication (e.g., messages). In particular, the subject technology provides accessibility communication that is designed to indicate the presence of information that would be very interesting to assistive technology, but would not be interesting to other applications that use an accessibility protocol. For example, in one example operating system, an \u201cEVENT_OBJECT_ALERT\u201d notification was found to be interesting to different screen reader applications but not interesting to other applications that use an accessibility protocol.","The subject technology can listen for a response to the communication sent from the web client. If a query for more information about the communication is received, the web client assumes that assistive technology is present and then enters the optimized accessibility mode. However, if a query is not ever received, then the web client assumes that any accessibility communication is coming from applications other than assistive technology. Thus, the web client does not enter the optimized accessibility mode and avoids incurring the cost of entering the optimized accessibility mode.","In some configurations, web content can be represented based on a document object model (DOM) that represents each element (e.g., forms, buttons, textual content, etc.) from the web content. The DOM in some configurations is configured as a tree structure including discrete elements as nodes within branches of the DOM tree. A node in the DOM tree can represent an object that corresponds with an element from the web content. Additionally, a render tree can be provided based on one or more nodes of the DOM tree (e.g., for elements from the web content) that will be rendered to a display or screen by the web client. In one example, the render tree includes a subset of the nodes in the DOM tree.","In some configurations, upon detection of an accessibility application (e.g., a screen reader), the web client can provide an accessibility tree for rendering the web content in an optimized accessibility mode of the web client. In one example, the accessibility tree is based one or more nodes of the aforementioned render tree. The accessibility tree can include document specific elements that provide additional or different elements in the web content for disabled users. In some instances, detection of an accessibility application can be unreliable and generate a false-positive (i.e., detecting an accessibility application when no such application is executing) that can cause the web client to incorrectly render the web content based on the inclusion of the accessibility tree. Additionally, rendering times for the web content can increase by unnecessarily processing the accessibility tree. Thus, the user experience in the web client is degraded.","Some configurations of the subject technology therefore provide for accurately detecting an accessibility program before web content is rendered by the web client. In one aspect, some implementations determine whether an accessibility application is executing. The web client can include multiple processes (e.g., a browser process and a renderer process) in which a browser process is responsible for operations for controls and user interface for the web client, and a renderer process is responsible for operations for rendering the web content for display. Some implementations can determine whether the accessibility application is executing by 1) transmitting an event identifier to simulate an accessibility event, and 2) determining whether a separate process from the web client queries for the transmitted event identifier. In the event that the separate process queries for the transmitted event identifier, the implementation detects that the accessibility application is executing. The implementation then sets a global parameter to enable accessibility features. In some configurations, the global parameter is set within the web client so that another process in the web client can read\/access the global parameter. After the global parameter is set, some implementations transmit an accessibility tree to a browser process of the web client.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100"]},"The process  starts at  when the web client is activated (e.g., by launching or running the web client). In one example, the web client implements a multi-process architecture which includes different processes for rendering and browsing. More specifically, the web client can include 1) a rendering process for rendering content (e.g., for a site that a user visits), and 2) a browser process for providing the web client's user interface. The web client can further provide a channel for inter-process communication between the rendering and browser processes.","After activating the web client, the process  at  determines whether an accessibility application is executing. In some configurations, the determination at  occurs before rendering web content. One example of determining whether the accessibility application is executing is discussed in more detail with respect to  below. The accessibility application can be a screen reader that converts content (e.g., text) in the web client to speech (or another similar auditory form) or to one or more Braille characters.","Although  illustrates that the process  at  determines whether the accessibility application is executing after the web client is activated, in some configurations, the determination at  can be performed after a user opens web content or navigates to a web page. In this manner, the process  can dynamically detect whether the accessibility application is executing. Irrespective of when the process  performs this operation, the process  ends if the process  does not determine at  that an accessibility application is executing.","Alternatively, if the process  determines that the accessibility application is executing at , the process  then at  sets a global parameter to enable accessibility features if the accessibility application is executing. In one example, the global parameter is a flag indicating that an accessibility feature(s) is enabled for the web client (e.g., due to the detection of the accessibility application). The process  can set global parameter in the web client to enable another process (e.g., a browser process) to access the global parameter.","The process  continues to  to enable the web client for an accessibility mode. More specifically, the process  at  prepares the web client's internal state for accessibility. In one example, the process  at  can transmit an accessibility tree to a browser process of the web client if the global parameter is set. In some configurations, the accessibility tree is based on a render tree. As described above, the render tree can include one or more objects based a document object model (DOM) for representing elements of an HTML document in object form. The browser process can then receive the accessibility tree in order to present one or more different UI elements in the web client UI according to the accessibility tree. By way of example, the browser process in some configurations can enlarge a UI element (e.g., an URL address bar, menu item, icon, dialog box, etc.) in order to assist a vision-impaired user. Moreover, the browser process can cache the accessibility tree in order to minimize the interprocess communication overhead between the browser and rendering processes of the web client. The process  then ends.","Although the example described above in  relates to a discussion for a multi-process web browser, some configurations of the subject technology can utilize a single-process web browser and still be within the scope of the subject technology.","As described above, the process  of  can determine whether an accessibility application is executing at . The following disclosure describes an example process for determining whether an accessibility application is currently executing in a system in more detail. In a system in which the web client and the accessibility are concurrently executing (e.g., both running on an operating system), the example process described below can perform operations to determine a runtime presence of the accessibility application in the system. In one example, the accessibility application can be a separate process in the system from the web client. The below discussion in connection with  can be implemented by a single process web client or a multi-process web client and still be within the scope of the subject technology.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["200","200"]},"The process  starts at  by transmitting an event identifier to simulate an accessibility event. The event identifier can correspond with a system alert associated with an accessibility feature or function in one example. In some configurations, the system can provide a Component Object Model interface (or any other software component communication model) to enable software components to communicate with each other. The process  can transmit the event identifier utilizing the Component Object Model interface. For instance, the Component Object Model enables interprocess communication between the web client and the separate process in the system.","The process  at  then determines whether a separate process from the web client queries for the transmitted event identifier. In one example, the process  can determine whether the separate process queries for the transmitted event identifier by receiving a request to obtain information about an accessibility object based on the event identifier. The accessibility object in some configurations can include information pertaining to one or more accessibility features or functions of the web client. The process  can determine that the accessibility application is executing because only an accessibility application (such as a screen reader) would query for information based the event identifier (e.g., for an accessibility object based on the event identifier).","Alternatively or conjunctively, the process  can determine whether the accessibility application is executing by checking a flag indicating that the accessibility application is activated. For instance, the flag can be a system property that the process  can check through a corresponding system or procedure call.","If the process  determines that the accessibility application is not executing at , the process  then ends. Alternatively, if the process  determines that the accessibility application is executing at , the process  continues to  to enable an accessibility feature(s) for the web client. In one example, the process  can set a flag to indicate that the accessibility feature(s) are activated for the web client because the accessibility application was detected based on the determination at . The process  then ends.","In some configurations, the event identifier can be received by a background process (e.g., a service, daemon, etc.) that facilitates communication between the web client and the separate process. The background process can then notify the separate process of the event identifier. In an instance that the separate process is an accessibility application, the separate process can then respond to the event identifier by submitting a query to the background process. The background process can then transmit the query to the web client. Upon receiving the query based on the event identifier, the web client then determines that the accessibility application is currently executing in the system. The web client can determine that the accessibility application is executing because only an accessibility application (such as a screen reader) would query for information based the event identifier (e.g., for an accessibility object based on the event identifier).","The following section describes an example computing environment including a system that can implement the above described processes as a computer program running on a particular machine, such as a computer or mobile device, or stored as instructions in a computer readable medium.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 3","FIG. 3","FIGS. 1 and 2"],"b":["305","305","305"]},"As shown in , the system  includes several modules for providing different functionality. The system  is configured to include a browsing module , a rendering module , and an accessibility module . The accessibility module  is configured to determine whether an accessibility application is executing. In particular, the accessibility module can implement the processes described above in . The accessibility application, moreover, can be a screen reader in one example. The rendering module  can be configured to provide an accessibility tree in response to detecting that the accessibility application is executing by the accessibility module . The accessibility tree is based on a render tree in one example. For instance, the render tree can include one or more nodes and each node corresponds with a user interface element in the web client. The browsing module  is configured to render content included on a web page based on the accessibility tree from the rendering module . The browsing module  can cache the accessibility tree received from the rendering module  in some configurations.","As shown in , each of the aforementioned modules can be configured to communicate between each other. For instance, different data, messages, API calls and returns can be passed between the different modules in the system .","Many of the above-described features and applications are implemented as software processes that are specified as a set of instructions recorded on a machine readable storage medium (also referred to as computer readable medium). When these instructions are executed by one or more processing unit(s) (e.g., one or more processors, cores of processors, or other processing units), they cause the processing unit(s) to perform the actions indicated in the instructions. Examples of machine readable media include, but are not limited to, CD-ROMs, flash drives, RAM chips, hard drives, EPROMs, etc. The machine readable media does not include carrier waves and electronic signals passing wirelessly or over wired connections.","In this specification, the term \u201csoftware\u201d is meant to include firmware residing in read-only memory and\/or applications stored in magnetic storage, which can be read into memory for processing by a processor. Also, in some implementations, multiple software components can be implemented as sub-parts of a larger program while remaining distinct software components. In some implementations, multiple software components can also be implemented as separate programs. Finally, any combination of separate programs that together implement a software component described here is within the scope of the subject technology. In some implementations, the software programs, when installed to operate on one or more systems, define one or more specific machine implementations that execute and perform the operations of the software programs.","A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.","Some configurations are implemented as software processes that include one or more application programming interfaces (APIs) in an environment with calling program code interacting with other program code being called through the one or more interfaces. Various function calls, messages or other types of invocations, which can include various kinds of parameters, can be transferred via the APIs between the calling program and the code being called. In addition, an API can provide the calling program code the ability to use data types or classes defined in the API and implemented in the called program code.","One or more APIs may be used in some configurations. An API is an interface implemented by a program code component or hardware component (\u201cAPI implementing component\u201d) that allows a different program code component or hardware component (\u201cAPI calling component\u201d) to access and use one or more functions, methods, procedures, data structures, classes, and\/or other services provided by the API implementing component. An API can define one or more parameters that are passed between the API calling component and the API implementing component.","An API allows a developer of an API calling component (that could be a third party developer) to utilize specified features provided by an API implementing component. There may be one API calling component or there may be more than one such component. An API can be a source code interface that a computing system or program library provides to support requests for services from an application. An operating system (OS) can have multiple APIs to allow applications running on the OS to call one or more of those APIs, and a service (such as a program library) can have multiple APIs to allow an application that uses the service to call one or more of those APIs. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.","In some configurations the API implementing component may provide more than one API, each providing a different view of or with different aspects that access different aspects of the functionality implemented by the API implementing component. For example, one API of an API implementing component can provide a first set of functions and can be exposed to third party developers, and another API of the API implementing component can be hidden (not exposed) and provide a subset of the first set of functions and also provide another set of functions, such as testing or debugging functions which are not in the first set of functions. In other configurations the API implementing component may itself call one or more other components via an underlying API and thus be both an API calling component and an API implementing component.","An API defines the language and parameters that API calling components use when accessing and using specified features of the API implementing component. For example, an API calling component accesses the specified features of the API implementing component through one or more API calls or invocations (embodied for example by function or method calls) exposed by the API and passes data and control information using parameters via the API calls or invocations. The API implementing component may return a value through the API in response to an API call from an API calling component. While the API defines the syntax and result of an API call (e.g., how to invoke the API call and what the API call does), the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling (API calling component) and an API implementing component. Transferring the API calls may include issuing, initiating, invoking, calling, receiving, returning, or responding to the function calls or messages. In other words, transferring can describe actions by either of the API calling component or the API implementing component. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant, key, data structure, object, object class, variable, data type, pointer, array, list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.","Furthermore, data types or classes may be provided by the API and implemented by the API implementing component. The API calling component therefore can declare variables, use pointers to, use or instantiate constant values of such types or classes by using definitions provided in the API.","Generally, an API can be used to access a service or data provided by the API implementing component or to initiate performance of an operation or computation provided by the API implementing component. By way of example, the API implementing component and the API calling component may each be any one of an operating system, a library, a device driver, an API, an application program, or other module (it should be understood that the API implementing component and the API calling component may be the same or different type of module from each other). API implementing components may in some cases be embodied at least in part in firmware, microcode, or other hardware logic. In some configurations, an API may allow a client program to use the services provided by a Software Development Kit (SDK) library. In other configurations an application or other client program may use an API provided by an Application Framework. In these configurations the application or client program may incorporate calls to functions or methods provided by the SDK and provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these configurations provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations, an API call can report to an application the capabilities or state of a hardware device, including those related to aspects such as input capabilities and state, output capabilities and state, processing capability, power state, storage capacity and state, communications capability, etc., and the API may be implemented in part by firmware, microcode, or other low level logic that executes in part on the hardware component.","The API calling component may be a local component (i.e., on the same data processing system as the API implementing component) or a remote component (i.e., on a different data processing system from the API-implementing component) that communicates with the API-implementing component through the API over a network. It should be understood that an API implementing component may also act as an API calling component (i.e., it may make API calls to an API exposed by a different API implementing component) and an API calling component may also act as an API implementing component by implementing an API that is exposed to a different API calling component.","The API can allow multiple API calling components written in different programming languages to communicate with the API implementing component (thus the API may include features for translating calls and returns between the API implementing component and the API calling component). The API however can be implemented in terms of a specific programming language. An API calling component can, in one configuration, call APIs from different providers such as a set of APIs from an OS provider and another set of APIs from a plug-in provider and another set of APIs from another provider (e.g. the provider of a software library) or creator of the another set of APIs.","The following description describes an example API architecture in which the processes described above in  can be implemented.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 4","FIG. 4"],"b":["400","415","410","410","405","410","405","410","415","410","415","410","405"]},"It will be appreciated that the API implementing component  can include additional functions, methods, classes, data structures, and\/or other features that are not specified through the API  and are not available to the API calling component . It should be understood that the API calling component  can be on the same system as the API implementing component  or can be located remotely and accesses the API implementing component  using the API  over a network. While  illustrates a single API calling component  interacting with the API , it should be understood that other API calling components, which can be written in different languages (or the same language) than the API calling component , can use the API .","The API implementing component , the API , and the API calling component  can be stored in a machine-readable medium, which includes any mechanism for storing information in a form readable by a machine (e.g., a computer or other data processing system). For example, a machine-readable medium includes magnetic disks, optical disks, random access memory, read only memory, flash memory devices, etc.","The following description describes an example system in which aspects of the subject technology can be implemented.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 5","b":["500","500","500","505","510","515","520","525","530","535","540"]},"The bus  collectively represents all system, peripheral, and chipset buses that communicatively connect the numerous internal devices of the system . For instance, the bus  communicatively connects the processing unit(s)  with the read-only memory , the system memory , and the storage device .","From these various memory units, the processing unit(s)  retrieves instructions to execute and data to process in order to execute the processes of the subject technology. The processing unit(s) can be a single processor or a multi-core processor in different implementations.","The read-only-memory (ROM)  stores static data and instructions that are needed by the processing unit(s)  and other modules of the system . The storage device , on the other hand, is a read-and-write memory device. This device is a non-volatile memory unit that stores instructions and data even when the system  is off. Some implementations of the subject technology use a mass-storage device (such as a magnetic or optical disk and its corresponding disk drive) as the storage device .","Other implementations use a removable storage device (such as a flash drive, a floppy disk, and its corresponding disk drive) as the storage device . Like the storage device , the system memory  is a read-and-write memory device. However, unlike storage device , the system memory  is a volatile read-and-write memory, such a random access memory. The system memory  stores some of the instructions and data that the processor needs at runtime. In some implementations, the subject technology's processes are stored in the system memory , the storage device , and\/or the read-only memory . For example, the various memory units include instructions for processing multimedia items in accordance with some implementations. From these various memory units, the processing unit(s)  retrieves instructions to execute and data to process in order to execute the processes of some implementations.","The bus  also connects to the optional input and output interfaces  and . The optional input interface  enables the user to communicate information and select commands to the system. The optional input interface  can interface with alphanumeric keyboards and pointing devices (also called \u201ccursor control devices\u201d). The optional output interface  can provide display images generated by the system . The optional output interface  can interface with printers and display devices, such as cathode ray tubes (CRT) or liquid crystal displays (LCD). Some implementations can interface with devices such as a touchscreen that functions as both input and output devices.","Finally, as shown in , bus  also couples system  to a network interface  through a network adapter (not shown). In this manner, the computer can be a part of a network of computers (such as a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), or an Intranet, or an interconnected network of networks, such as the Internet. Any or all components of system  can be used in conjunction with the subject technology.","These functions described above can be implemented in digital electronic circuitry, in computer software, firmware or hardware. The techniques can be implemented using one or more computer program products. Programmable processors and computers can be included in or packaged as mobile devices. The processes and logic flows can be performed by one or more programmable processors and by one or more programmable logic circuitry. General and special purpose computing devices and storage devices can be interconnected through communication networks.","Some implementations include electronic components, such as microprocessors, storage and memory that store computer program instructions in a machine-readable or computer-readable medium (alternatively referred to as computer-readable storage media, machine-readable media, or machine-readable storage media). Some examples of such computer-readable media include RAM, ROM, read-only compact discs (CD-ROM), recordable compact discs (CD-R), rewritable compact discs (CD-RW), read-only digital versatile discs (e.g., DVD-ROM, dual-layer DVD-ROM), a variety of recordable\/rewritable DVDs (e.g., DVD-RAM, DVD-RW, DVD+RW, etc.), flash memory (e.g., SD cards, mini-SD cards, micro-SD cards, etc.), magnetic and\/or solid state hard drives, read-only and recordable Blu-Ray\u00ae discs, ultra density optical discs, any other optical or magnetic media, and floppy disks. The computer-readable media can store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations. Examples of computer programs or computer code include machine code, such as is produced by a compiler, and files including higher-level code that are executed by a computer, an electronic component, or a microprocessor using an interpreter.","While the above discussion primarily refers to microprocessor or multi-core processors that execute software, some implementations are performed by one or more integrated circuits, such as application specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs). In some implementations, such integrated circuits execute instructions that are stored on the circuit itself.","As used in this specification and any claims of this application, the terms \u201ccomputer\u201d, \u201cserver\u201d, \u201cprocessor\u201d, and \u201cmemory\u201d all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification, the terms display or displaying means displaying on an electronic device. As used in this specification and any claims of this application, the terms \u201ccomputer readable medium\u201d and \u201ccomputer readable media\u201d are entirely restricted to tangible, physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals, wired download signals, and any other ephemeral signals.","To provide for interaction with a user, implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.","Configurations of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some configurations, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.","It is understood that any specific order or hierarchy of steps in the processes disclosed is an illustration of example approaches. Based upon design preferences, it is understood that the specific order or hierarchy of steps in the processes can be rearranged, or that all illustrated steps be performed. Some of the steps can be performed simultaneously. For example, in certain circumstances, multitasking and parallel processing can be advantageous. Moreover, the separation of various system components in the configurations described above should not be understood as requiring such separation in all configurations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.","The previous description is provided to enable any person skilled in the art to practice the various aspects described herein. Various modifications to these aspects will be readily apparent to those skilled in the art, and the generic principles defined herein can be applied to other aspects. Thus, the claims are not intended to be limited to the aspects shown herein, but is to be accorded the full scope consistent with the language claims, wherein reference to an element in the singular is not intended to mean \u201cone and only one\u201d unless specifically so stated, but rather \u201cone or more.\u201d Unless specifically stated otherwise, the term \u201csome\u201d refers to one or more. Pronouns in the masculine (e.g., his) include the feminine and neuter gender (e.g., her and its) and vice versa. Headings and subheadings, if any, are used for convenience only and do not limit the subject technology.","A phrase such as an \u201caspect\u201d does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology. A disclosure relating to an aspect can apply to all configurations, or one or more configurations. A phrase such as an aspect can refer to one or more aspects and vice versa. A phrase such as a \u201cconfiguration\u201d does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration can apply to all configurations, or one or more configurations. A phrase such as a configuration can refer to one or more configurations and vice versa.","The word \u201cexample\u201d is used herein to mean \u201cserving as an example or illustration.\u201d Any aspect or design described herein as \u201cexample\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs.","All structural and functional equivalents to the elements of the various aspects described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the claims. Moreover, nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features of the subject technology are set forth in the appended claims. However, for purpose of explanation, several configurations of the subject technology are set forth in the following figures.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
