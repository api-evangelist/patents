---
title: Consistent application programming interface for communicating with disparate vehicle network classes
abstract: A computer implemented translation system provides a programming interface between a client and remote devices connected to a vehicle data network. The translation system presents programmers with a uniform abstraction of vehicle networks that permits programming and diagnostic procedures to be carried out without reference by the programmer to nuances of the particular network class used on the motor vehicle. Three major interfaces are defined to implement the invention. A network interface incorporates a plurality of functions representing a model of a physical network. A data link interface responsive to client requests for acquiring a network instance corresponding to a physical network from the network interface. The establishment of a network instance may involve reference to a database to obtain appropriate drivers for the underlying physical network represented by the network instance. A remote device interface incorporates a plurality of functions representing the physical devices callable through the network interface and handles messaging between the client and a physical device attached to the underlying physical network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06907445&OS=06907445&RS=06907445
owner: International Truck Intellectual Property Company, LLC
number: 06907445
owner_city: Warrenville
owner_country: US
publication_date: 20010212
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE PRIOR ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates to vehicle communication networks and more particularly relates to providing an application programming interface which presents to programmers a common model covering a plurality of vehicle network classes.","Contemporary designs for the control and management of vehicle components increasingly rely on computer networking. Digital data is exchanged between component controllers over a common physical layer such as a twisted shielded pair of wires. Intelligible communication between two or more device controllers among a greater plurality of devices, all occurring over the common physical layer, depends upon the communicating devices being able to discriminate among messages they receive and respond to those messages directed to them. Such methods are well known in the art and are part of the standards which the Society of Automotive Engineers (SAE) has published and continues to publish as part of the SAE J1939 and the SAE J1587 protocols.","The J1939 protocol provides an open protocol and a definition of the performance requirements of the medium of the physical layer, but also allows for development of proprietary protocols. The SAE J1939 protocol is a specialized application of a controller area network (CAN) and may be readily implemented utilizing commercial integrated circuits such as the C167 Integrated Circuit manufactured by Siemens of Germany.","The CAN protocol is an ISO standard (ISO 11898) for serial data communication, particularly aimed at automotive applications. The CAN standard includes a physical layer (including the data bus) and a data-link layer, which define a few different message types, arbitration rules for bus access and methods for fault detection and fault confinement. The physical layer uses differential transmission on a twisted pair wire bus. A non-destructive bitwise arbitration is used to control access to the bus. Messages are small, at most eight bytes, and are protected by checksum error detection. Each message carries a numeric value which controls its priority on the bus, and may also serve as an identification of the contents of the message. CAN offers an error handling scheme that results in retransmitted messages when they are not properly received. CAN also provides means for removing faulty nodes from the bus. CAN further adds the capability of supporting what are termed \u201chigher layer protocols\u201d for standardizing startup procedures including bit rate setting, distributing addresses among participating nodes or kinds of messages, determining the layout of the messages and routines for error handling on the system level.","The SAE J1587 protocol relates to data exchange between microcomputers in heavy duty vehicle applications. The protocol defines formats for message and data, including field description, size, scale, internal data representation and position within a message. Guidelines for message transmission frequency and circumstances are provided. Message formats are to be published for information pertaining to vehicle operation and vehicle component performance, diagnostic and maintenance data, among other things. The protocol is used in conjunction with the SAE J1708, which defines requirements for hardware.","Digital data communications over serial data paths are an effective technique for reducing the number of dedicated communication paths between the numerous switches, sensors, devices and gauges installed on the vehicles. Multiplexing the signals to and from local controllers and switches promises greater physical simplicity through displacing much of the vehicle wiring harness, reducing manufacturing costs, facilitating vehicle electrical load management, and enhancing system reliability.","It is by no means clear that the two published standards will prove to be the universe of possible network protocols for vehicles. Indeed both standards provide for proprietary extensions to the protocols. The existence of more than one protocol complicates the work of programmers. Commonly, a separate programming interface for each class of vehicle network has been provided. Programmers have been required to know the details of the network protocol in order to program vehicle class networks. For example, a programmer has been required to know the details of network message formats and message structure. This forces programmers to spend time on nuances of network operation rather than applying a focused effort to programming related to vehicle operation. Generalized programming interfaces, for example, RP1210 and OPC have proved either too general or too poor in performance terms, and have lacked mechanisms for handling data in a consistent manner on all classes of networks.","Software development can be greatly aided by increasing the level of abstraction at which the programmer works. Increasing abstraction in a programming environment should be based on increasing independence from any one programming language or platform and allow sharing of fundamental components between programs. The flexibility and adaptability of such a system are enhanced by making the system extendible, which allows for evolution of the system and by providing a high level of robustness.","One system proposed meeting many of these criteria is the Microsoft Component Object Model (COM). COM provides a foundation for higher-level software services, which may be presented to a programmer at a high level of abstraction. COM provides mechanisms for communications between components, even across process and network boundaries, error and status reporting and for dynamic loading of components. Qualification of a software or data model or object as a COM component requires meeting certain interface design rules.","A programmer working in a COM environment is able to exploit a binary standard for function calling between components and to use common interfaces for strongly typed groups of functions. COM provides a base interface which allows components to dynamically discover the interfaces implemented by other components (through qualification) and which further provides reference counting to allow components to track their own lifetime and to delete themselves. See , Williams, Sara & Kindel, Charles (1994).","According to the invention there is provided a computer implemented translation system between a client and remote devices connected to a vehicle data network. The translation system presents programmers with a uniform abstraction of vehicle networks that permits programming and diagnostic procedures to be carried out without reference by the programmer to nuances of the particular network class used on the motor vehicle. As a result, a programmer works with any vehicle network through a common interface. Three major interfaces are defined to implement the invention. A network interface incorporates a plurality of functions representing a model of a physical network. A data link interface responsive to client requests for acquiring a network instance corresponding to a physical network from the network interface. The establishment of a network instance may involve reference to a database to obtain appropriate drivers for the underlying physical network represented by the network instance. A remote device interface incorporates a plurality of functions representing the physical devices callable through the network interface and handles messaging between the client and a physical device attached to the underlying physical network.","Additional effects, features and advantages will be apparent in the written description that follows.","Environment",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["11","10","13","10","18","18","30","30","18","18"]},"Active vehicle components are typically controlled by one of a group of autonomous, vocational controllers, which include an instrument and switch bank , a gauge cluster , an engine controller , a transmission controller , and an antilock brake system (ABS) controller , all of which are connected to body controller  over a serial data bus  and all of which are connected to bus  as nodes. The autonomous controllers include local data processing and programming and are typically supplied by the manufacturer of the controlled component. For each autonomous controller there is a defined set of variables used for communications between the autonomous controller and other data processing components on the network or attached to the network. Bus  is preferably a twisted pair cable constructed in accordance with SAE standard J1939 and is externally accessible via a diagnostic port . Diagnostic port  is typically located under the steering column inside the cab of vehicle , but may be located elsewhere. Although the autonomous controllers handle many functions locally and are functionally defined without reference to body controller , they may report data to body controller  and may receive operational requests from body controller . Gauge cluster , transmission controller  and engine controller  all may communicate with body controller , which also monitors inputs received from the auxiliary instrument and switch bank  over the serial communication link in harness . For a CAN system a J1939 compliant cable  is connected from port  to a remote data link computer .","External Hardware Implementation",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":["43","44","44","44","60","62","64","64","62","65","44","66","76","66","68","70","76","92","94","94","96","90","94","44","65","72","78","80","82","84","60","86","88","44","100","94"]},"Software Systems",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3","b":["100","100","100","38","39","40"]},"The IDataLink Interface","An IDataLink interface  provides the starting point for clients access to the functionality provided by the data link software package . It provides a mechanism for acquiring network interface instances corresponding to a physical network. Interface  further provides for the enumeration of those networks that have already been acquired. IDataLink interface  includes two functions. One function is an \u201cAcquire Network\u201d function . Function  returns an instance of an INetwork interface . The INetwork interface  provides the gateway to a physical network in general, and particular devices connected to the physical network. The name and instance number of a physical network are concatenated to generate a unique name that is used to refer to the given network. Multiple calls to acquire network with the same name return an INetwork pointer that points to the same underlying physical network. An example of a network name\/instance number concatenation where a CAN network is installed on a vehicle is:\n\nName=PCI-IntelliCAN 1\n\nThe name is thereafter used to acquire additional network configuration data stored in the WIN32 registry. Entries within the WIN32 registry tell the software all the details of how to connect to the underlying physical network, e.g., which ports to listen on, which channel, etc. A cookie is implied by software returning a valid INetwork interface pointer to a COM object that represents an underlying network.\n","The Acquire Network function  specifies three variables. The variables are denoted \u201cName\u201d, \u201cInstance\u201d and \u201cNetwork\u201d. Name is the name of a hardware device that will represent a physical connection between the data link computer  and the SAE standard network installed on a vehicle. At present there are two SAE published standards, and the variable can assume one of two values: (1) \u201cDearborn protocol adapter\u201d a value which implies the network shall be operating via physical connection to a Dearborn group DPA's II J1708 network interface (which is specific type of circuit board); and (2) \u201cI+ME PCI-IntelliCAN\u201d a value which implies that a network shall be operating via physical connection to a network utilizing the J1939 protocol (CAN). Should additional network protocols be defined, more allowed values may be added to software package . The variable \u201cInstance\u201d refers to physical interfaces within a machine. An instance number is then used to pick up any additional configuration data needed to utilize a network interface. The variable \u201cNetwork\u201d is an INetwork object that is returned to a client. The client will then use this object to communicate with the network.","The function _Enumerate Networks_  is used by clients to enumerate all physical networks, typically vehicle networks, that are currently available. A network is defined as available if an instance for the physical network has been created using the Acquire Network function . The client specifies a count of the number of INetwork pointers for which it is allocated storage. The data link software  then places as many enumerated networks into the network's array as possible. If there is insufficient storage, then the software returns only the count number of networks the client initially specified. Otherwise all networks that have been acquired are returned. When an acquired network is not called at all for an operating cycle, then count and networks return values are undefined and the HResult return code is set for fail. The return values for this function indicate success, a general failure that is a count or network's pointer, and a value for when no networks are successfully acquired. The variables include a count variable which is the number of networks that are in a set of networks returned to the client. Here the client specifies in a call the number of available network pointers in the network's variable. The client then receives the number of networks enumerated in this variable when the call returns. The second variable is the _networks_variable, which is a pointer to an array of INetwork object pointers that describe the networks of which the data link software package  is currently aware.","INetwork Interface","A second interface is the INetwork interface . The INetwork interface  is a generalized software model of physical networks. Interface  provides data link interface clients with a way of communicating with a specific network. The data link software  performs the network's specific network connection per the network class that the user requests detection upon. This includes loading any proprietary network drivers and initializing them. If there are any start-up procedures that a device may need to perform to become an active member of the network (e.g., perform an address claim procedure on a J1939 network), then the Connect function  performs this operation. The Connect function  has no variables.","The Detect Device function  allows clients to detect devices on a physical network. Clients must perform a detection before they can communicate with a device in a network independent way. Detection on a given network occurs only once for a given platform. Additional data link clients can perform a device enumeration to get the proper references to available network devices. The variables for the Detect Device function  include \u201cNotify Call Back\u201d, which is a call back pointer that the software uses to notify a client that a given device has been detected. This value must contain a COM object that implements the IDetectNotify interface . If the value does not return a COM object, then an error value is returned to the client. If a bad pointer value for the variable is passed, another error value is returned. A second variable for this function is a cookie which allows a client to effectively match a detection notification to an original detection request.","The \u201cDisconnect\u201d function  disconnects data link software  from the network. This step includes assuring failure of all future network requests as well as a disconnection of the network hardware and an unloading of any network drivers. No variables are required for this function.","An Enumerate Device function  is used to return the set of all devices that were detected the last time a detection occurred over the network. If there are no other remote devices on the network, then the set contains only the software's representation on the network. Variables for this operation include a Count variable which is the number of IRemoteDevice objects that are in the set of devices returned to the client. The client specifies on the call the number of available device pointers in the device less the number of variables. The client then receives the number of devices enumerated in this variable when the call returns. A device list variable is an array of IRemoteDevice objects that have been detected since the last network detection.","The \u201cget_AdapterName\u201d function  returns the adapter name of the underlying network. Its functional name is such that it can be used as a COM property or a function name. The only variable for this function is \u201cadapter name\u201d which is a storage place for the adapter name of the network represented by this object when returned to the client.","The \u201cget_BaudRate\u201d function  returns the operational baud rate of the underlying network. Its functional name is such that it can be used as a COM property or a function name. This whole variable for this function is \u201cbaud rate\u201d, a storage place for the baud rate of a network represented by this object.","The _get_LastDeviceDetectionTime_function  returns the last time a device detection was performed on the underlying network. Its functional name is such that it can be used as a COM property or a function name. The sole variable for this function is the _last detection time_, a storage place for the last detection time of the network.","The \u201cget_NetworkClass\u201d function  returns the network class (e.g., J1939, J1587) of the underlying network. Again the function name can be used as a COM property or a function name. A variable for providing a storage place for the network class type of a network is provided.","The \u201cget_NumberDetectedDevice\u201d function  returns the number of devices detected the last time the DetectDevices function  was performed on the underlying network. Again the functional name is such that it can be used as a COM property or a function name. Variable \u201cnumber of detected devices\u201d is a storage place for the number of detected devices on the network.","The \u201cRawMessageTrafficRegister\u201d function  is used by clients to request all or a subset of message traffic that is transmitted on the network. The client specifies a filter if they want only certain data. Alternatively clients can also run in an unfiltered mode, receiving notifications when any message is transmitted on the network. A filter is not a filter mask, so if a given data link software client wishes to register for a set of messages within a range of values, they need to register each raw message separately. The same client can register for raw message multiple times with the same call back. In this case the client would be notified each time a message matched the client's filter criteria and if the client registered twice for the same message header then the client would be notified twice for each message received from the network.","Function  includes three variables. The \u201cnotify call back\u201d variable is a call back pointer that the software uses to notify a client that a given message has been received that matches the client's filter criteria. This pointer must contain a COM object that implements the IRawMessageTrafficNotify interface . If the pointer does not contain the COM object, an invalid argument result is returned to the client. If a bad pointer value for this variable is passed, a pointer error is returned. A filter variable specifies network header message comparisons within a particular range. The client specifies this as a mechanism for filtering out raw messages which are not of interest. A network cookie variable is returned to the client so the client can effectively match a detection notification to the original detect request.","A \u201cRawMessageTrafficUnregister\u201d function  is used to cancel a previous registration for raw message traffic using the RawMessageTrafficRegister function . The client supplies a cookie given to it by the register call. The software then halts all future notifications for the registered filter criteria. If a client is receiving raw notifications for multiple registrations over the same call back mechanism then the other remaining raw message registrations remain in effect. Only the registration represented by the cookie is invalidated. Variable for this function is the cookie a client received from a previous registration with raw message traffic register.","The \u201cTransmitRawMessage\u201d function  is used by data link software clients to send out raw messages on the network. The client is wholly responsible for building the message header and message body, ensuring that it conforms to the protocol of the network and for checking for responses is appropriate. Time outs and message tries are wholly the responsibility of the client transmitting the raw message. Three variables provided for this function include, \u201cheader\u201d which is a message header that is to be used when the message is transmitted on the network, \u201cbody size\u201d which is the size in bytes of the message body and \u201cbody\u201d which is the message itself.","A IRawMessageTrafficNotify interface  is one interface of a data traffic management facility  used by data link software  to notify data link clients that a raw message has been received from a network. This interface is reached through the INetwork  interface. Only one function is implemented with this interface, a message received function  which is implemented by a data link client and is used by the data link software  to call back to clients when raw message traffic that fit the client's criteria is received. Five variables are included within this function including \u201ctime stamp\u201d, \u201cheader\u201d, \u201cbody size\u201d, \u201cbody\u201d and \u201ccookie\u201d which is the cookie that was returned to the client when it performed a register for raw message traffic that subsequently triggered operation of this function. The character of each of the remaining variables tracks the names of the variables.","The INetwork interface  also communicates with an IDetectDeviceNotify interface . Interface  is used by the data link software  and notify a data link client of the status of network detections. The interface includes two functions including a device detected function , used by the data link software to notify the client that a previously commenced device detection has just detected another remote device on the network. This function has two variables, one a cookie, returned to the data link software client when it originally requests a detection commence, and a \u201cremote device\u201d variable which is a representation of the remote device that was detected on the network. The client can use this pointer for further network communications.","A \u201cDetectionCompleted\u201d function  is used by data link software  to notify a client that a previously commenced device detection has been completed. This gives the client the opportunity to wait until notification arrives before attempting additional network communications because not all devices might be detected as yet. The only variable return with this function is a cookie which is returned to the data link software  when it originally detected the detection commence.","IRemote Device Interface","An IRemoteDevice interface  is also accessible from the INetwork interface . IRemoteDevice interface  includes a number of functions relating to receiving data from, and transmitting data to, actual physical devices. The structure of the interface reflects a generalization of a device and allows incorporation of a data base specifying operating parameters for physical devices.","IDataValueReceiveRegister function  is used by clients to request a particular data value from a remote device. The data link client specifies the data value that are of interest and a way of being notified by reference to a data base of values. The data link software  determines whether the message is broadcast by the remote device. If it is, then then the datalink software  notifies the client every time the message is received from the remote device. Otherwise the data link software  explicitly requests the data value from the remote device. If a device is unresponsive, then it is up to the data link client to determine this result. The data link software will not interpret the responsiveness of the device because the criteria for a responsive device may vary greatly from data link client to data link client.","DataValueReceiveRegister function  has three variables including a data value ID which is an abstract handle that represents the data value that is to be read from the remote device. Viable values for this handle can be found in the Tables. A notify call back variable is a call back pointer that the data link software  uses to notify a client that a given data link value has been received. This value must contain a COM object that implements the IDataValueReceiveNotify interface . If it does not, then an invalid argument pointer is returned to the client. If a bad pointer value for the variable is passed in, another error value is returned. A cookie is returned to the client so that the client can effectively match a receipt notification to the original request and for unregistration procedures.","A \u201cDataValueReceive\u201d function  is used by clients to request a particular data value from a remote device. The data link client specifies the data value that it is interested in. This function call is different from data value receive register in that only one value is read, and it is a synchronous call. This means that the call will not return until the requested data value is received from the remote device, or a time out occurs. The time out value is controlled as a property of the network as defined in a WIN32 registry. The data link software determines whether the message is broadcast by the remote device. If it is, then the software waits for the next time the message is received from the remote device and then returns the data value to the client. Otherwise the data link software explicitly requests the data value from the remote device. When the answer arrives, then the data link software returns to the client with the data value. If the device is unresponsive, then it is up to the data link client to determine this. A device is classified as unresponsive if it displays a prolonged pattern of communication difficulties. Such communication difficulties may include continued time out of data value requests from a given remote device. The data link software will not interpret the responsiveness of the device because the criteria for a responsive device may vary greatly from data link client to data link client. A data link client might determine whether a device is responsive or not by periodically transmitting a message to it. If the periodically transmitted message continually times out for a period of five minutes, then the client may presume that the remote device is off line.","The data status variable reflects whether the data is actually valid or not. If it indicates an error, then the contents of data value are meaningless. Data status is distinctly different from an HResult return value because an HResult return value is used to indicate an operation error in the software whereas the data status variable indicates the status of remote device communications which may be operating correctly, but not returning the desired results.","Three variables are provided for this function including a \u201cdata value ID\u201d which is an abstract handle that represents the data value that is to be read from the remote device. Allowable values for this handle may be found in an appendix to this application. The \u201cdata value\u201d variable represents the data requested by the client. For example, if the client requested engine speed, then this variable is what contains the engine speed value. If there is a problem with the transmission as indicated by data status, then this value is undefined and should not be interpreted. Finally, a \u201cdata status\u201d variable contains the status of network traffic that has generated this data value. If problems occur in obtaining the data value via the network then the data status variable reflects the problem.","A \u201cDataValueReceiveUnregister\u201d function  is used to cancel a previous registration for data value notification initiated using data value receive register function . The client supplies a cookie given to it by the register call. The data link software then halts all future notifications for the registered filter criteria. If a client is receiving notifications from multiple registrations over the same call back mechanism, then the other remaining data value registrations remain in effect. Only the registration represented by the cookie is invalidated. The cookie is the only variable for this function and is the cookie that the client received from a previous registration with the data value receive register function .","A \u201cChange-of-Status(COS)DataValueReceiveRegister\u201d function  is used by clients to request a change of state status for a particular data value on a remote device. The data link client specifies the data value that it is interested in and a way of being notified. The data link software  determines whether this message is broadcast by the remote device. If it is broadcast, then it notifies the client every time the message is received from the remote device. Otherwise the data link software  explicitly requests the data value from the remote device.","Data link software  can check data value as it is received from the remote device to ensure that the value does not fall outside of a tolerance range for the value. For example, if a data link client is monitoring a particular data value, it can specify notification if the value changes by 10%. In this case as soon as the data value changes more than 10% from the point of the original request, the client is notified. A number of variables are provided for this function. A data value ID variable is an abstract handle that represents the data value that is to be monitored on the remote device for a state change. A notify call back pointer is used by the data link software to notify a client that a given data link value has changed state. This value must contain a COM object that implements the ICOSDataValueReceiveNotifyinterface . If it does not, then an error value is returned to the client. If a bad pointer is passed in another error is returned to the client. Yet another variable is the \u201cstate change type\u201d variable. This variable describes the type of the state change that caused the notification. It is an enumeration that will either be state change which means the data is changed or a state constant which means that the data has remained constant, or has remained constant within a given value range. A tolerance variable is a tolerance value for change of data value as a percentage of the first value. Finally, a cookie is returned to the client so that the client can effectively match a change of state notification to an original request for unregistration purposes.","A \u201cCOSDataValueReceiveUnregister\u201d function  is used to cancel a previous registration for change of state data value notification initiated using the change of state data value receive register function . This function is used to cancel a previous registration for change of state data value notification. The client supplies a cookie given to it by the register call. The data link software then halts all future notifications for the registered filtered client criteria.","The DataValueTransmit function  is used by clients to send a particular data value to a remote device. The data link client specifies the data value that it is interested in and the data value it wants to send to the device. This call is different from the DataValuePeriodicTransmit-Registerfunction  in that only one value is sent, and it is a synchronous call. This means that the call will not return until the requested data value is sent to the remote device, or a time out occurs, The data status variable reflects whether the data transmission actually succeeded or not. The data link software  does not validate whether a value is in proper range. The caller is responsible for ensuring that any data value sent is in the proper value range. Variables for this function include data value ID, an abstract handle that represents the data value that is to be written to the remote device. A data value variable that the client requested to transmit to the remote device and a data status variable containing the status of network traffic that occurred with this data value transmit request. If there were any problems in obtaining the data value via the network the data status reflects this.","A DataValuePeriodicTransmitRegister function  is used by clients to send a particular data value to a remote device. The data link client specifies the data value in which it is interested and the data value it wants to send to the device. This call differs from data value transmit in that the value is periodically sent to the remote device based on a client's specify time value. This is an asynchronous procedure and means that the call will immediately return to the client. The client shall be notified at a later time of the result of transmissions to the remote device. The variables for this function include a data value ID which is an abstract handle that represents the data value that is to be written to the remote device. A data value variable that the client requested to transmit to the remote device. A timeout rate variable is a value representing the time value to wait in milliseconds for message transmission and an acknowledgment to complete. A transmit period variable indicates the periodic rate at which the software shall broadcast the data value to the remote device.","A DataValuePeriodicTransmitUnregister function  is used to cancel a previous registration to periodically transmit a data value using the data value periodic transmit register function. The client supplies a cookie given to it by the register call. The data link software then halts all future notifications for the registered filter criteria. If a client simultaneously receives notifications for multiple registrations over the same call back mechanism, then the other remaining registrations remain in effect. Only the registration represented by the cookie is invalidated.","The \u201cget_DeviceAddress\u201d function  returns the physical address or a remote device in the underlying network. Its function name is such that it can be used as a COM property or a function name. This property is read only enforceable because there is no corresponding published \u201cput device address\u201d function that would be used for setting the property externally via the interface. The variable included with this function is the \u201cdevice address\u201d variable, which is a storage place for the physical address of the remote device represented by this object.","A \u201cget_IndustryGroup\u201d function  returns the industry group for a remote device. Its functional name is such that it can be used as a COM property or a function name. The property is read only enforceable because there is no corresponding published put industry group that would be used for setting the property. The variable for this function is industry group which is a storage place for the industry group of the remote device.","A \u201cget_VehicleSystemInstance\u201d function  returns the vehicle system instance code of this remote device on the underlying network. Its functional name is such that it can be used as a COM property. This property is read only enforceable because there is no corresponding published put vehicle system instance function used for setting the property. The one variable defined for function  is a \u201cvehicle system instance\u201d variable which is the storage place for the vehicle system instance represented by the object.","A _get_VehicleSystem_ function  returns the vehicle system code of this remote device on the underlying network. Its functional name is such that it can be used as a COM property or a function name. The property is read only enforceable because there is no corresponding published put vehicle system that would be used for setting the property. One variable providing a storage place for the vehicle system represented by the object is defined for function .","A \u201cget_Function\u201d function  returns the function code of this remote device. A functional name is such that can be used as a COM property or a function name. The property is read only enforceable. The sole variable for the function is entitled function which is again a storage place for the function code.","A \u201cget_ECUInstance\u201d function  returns a ECU instance for this remote device on the underlying network. The \u201cECU Instance\u201d serves as part of the identification of the underlying device. Its functional name is such that it can be used as a COM property or a function name. The property is read only enforceable. ECU instance is the sole variable for this function which provides the storage place.","A \u201cget_ManufacturerCode\u201d function  returns a manufacturer code for a remote device on the underlying network. Its functional name is such that it can be used as a COM property or a function name. This property is read only enforceable because there is no corresponding published put manufacturer code that would be used for setting the property. Manufacturer codes are used for interrogating or querying a data base to obtain for a device values generated by a particular device, such as for an engine control module or anti-lock brake system. Manufacturer code is the only variable used with this function.","Finally a DataValueQuery function  provides a return route for placing requested values via variable names specified by the client.","Three interfaces are accessed through IRemoteDevice interface . The first of these interfaces is an IDataValueReceiveNotify interface  used by the data link software  to relate information to data link clients about data values that they are registered for. Only one function, a receive function , is provided for this interface and is used by data link software  to call back to clients when a data value that the client registered for is received over the network. Four variables are provided with this function including a time stamp, a data value, which may be specified by the manufacturer code, a status variable containing the status of network traffic that generated this data value and a cookie returned to the client when it performed a register for the data value that subsequently generated this function call back. An ICOSDataValueReceiveNotify interface  is used by the data link software  to relate information about the status of data values when they change state to data link clients that register for this notification. A data changed function  is used by the data link software to call back to clients when a data that the client registered for changes its state based on criteria specified by the client. Variables for this function include a time stamp, data value, data status, state status, which describes the type of state change causing the notification. This value is an enumeration that will either be state change which means the data changed or state constant which means the date is continually remaining constant within a tolerance range. A cookie variable is returned to the client when it performed a register for the data value that subsequently generated this function call back.","An IDataValueTransmitNotifyinterface  is used by data link software  to relate information about the status of data value transmissions to remote devices. A data transmitted function  is implemented through this interface to call back to clients when a data value that the client is transmitting has been sent to the network. The variables for this function include a time stamp. Another variable is transmit status which contains the status of network messages at the point of transmission to the network. Any problems in sending the data value are reflected in the field.","Database Support","A data link library or database provides definitions for the data link software  when applied to a heavy duty truck application. Clients use compiler mechanisms that need to be aware that they need to scope all data types defined within the data link library. The data link server exposes only one COM object that is externally creatable (i.e., creatable by third party software like data link clients). That COM object is entitled \u201cDataLinks\u201d. Data link clients are free to implement whatever COM object they deem suitable for handling their call back mechanism. The data link software requires only that for a given operation, the call back mechanism support a standard interface to call back on. For example, to provide a call back mechanism to the data link software  from notification on raw message receipt, the client needs only to provide an interface pointer that implements the IRawMessageTrafficNotify interface .","Table 1 draws on a commercial database package, which specifies variable classes for devices used on motor vehicles, for examples of the kind of data the invention can be applied to. The specific product is the Dearborn Group's NASPAK3 product, available from Dearborn Group, 27007 Mills Tech Court, Farmington Hills, Mich. This product is occasionally updated and the values here are used only as an example.",{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Data Value ID","Variable Name","Units","Lower Limit","Upper Limit"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["REQUEST_SPEED_OR","Request Speed","rpm","0","8031.875"]},{"entry":["SPEED_LIMIT","or Speed Limit"]},{"entry":["REQUEST_TORQUE_OR","Request Torque","%","\u2212125","125"]},{"entry":["TORQUE_LIMI","or Torque Limit"]},{"entry":["REQUESTED_PERCENT","Requested","% gain","0","100"]},{"entry":["CLUTCH_SLIP","percent clutch"]},{"entry":[{},"slip"]},{"entry":["REQUESTED_GEAR","Requested gear","gear value","\u2212125","125"]},{"entry":["SELECTED_GEAR","Selected gear","gear value","\u2212125","125"]},{"entry":["ACTUAL_GEAR_RATIO","Actual gear ratio","no unit","0","64.255"]},{"entry":["CURRENT_GEAR","Current Gear","gear value","\u2212125","125"]},{"entry":[{},{},"(unit less)"]},{"entry":["NUMBER_OF","Number of","unit less","0","125"]},{"entry":["SOFTWARE","software"]},{"entry":["IDENTIFICATION_FIELDS","identification"]},{"entry":[{},"fields"]},{"entry":["WHEEL_BASED_VEHICLE","Wheel-based","kph","0","251"]},{"entry":["SPEED","vehicle speed"]},{"entry":["CRUISE_CONTROL","Cruise control","kph","0","250"]},{"entry":["SET_SPEED","set speed"]},{"entry":["ACTUAL_RETARDER","Actual retarder-","%","\u2212125","125"]},{"entry":["PERCENT_TORQUE","percent torque"]},{"entry":["BRAKE_PEDAL_POSITION","Brake pedal","% gain","0","100"]},{"entry":[{},"position"]},{"entry":["OUTPUT_SHAFT_SPEED","Output shaft","rpm","0","8031.875"]},{"entry":[{},"speed"]},{"entry":["PERCENT_CLUTCH_SLIP","Percent clutch","%","0","100"]},{"entry":[{},"slip"]},{"entry":["TOTAL_IDLE_FUEL_USED","Total idle fuel","L","0","2105540608"]},{"entry":[{},"used"]},{"entry":["TOTAL_IDLE_HOURS","Total idle hours","hrs","0","210554060.75"]},{"entry":["TURBO-OIL-","Turbo oil","kPa","0","1000"]},{"entry":["PRESSURE","pressure"]},{"entry":["TURBO-SPEED","Turbo speed","rpm","0","257020"]},{"entry":["AIR_START_PRESS","Air start","kPa","0","1000"]},{"entry":[{},"pressure"]},{"entry":["NOMINAL_FRICTION","Nominal friction-","%","\u2212125","125"]},{"entry":["PERCENT_TORQUE","percent torque"]},{"entry":["ENGINE_S_DESIRED","Engine's desired","rpm","0","8031.875"]},{"entry":["OPERATING_SPEED","operating speed"]},{"entry":["ENGINE_S_OPERATING","Engine's","engpw","0","250"]},{"entry":["SPEED_ASYMMETRY","operating speed","r\/"]},{"entry":["ADJUSTMENT","asymmetry","engsp"]},{"entry":["TRIP_DISTANCE","Trip distance","km","0","526385151.9"]},{"entry":["TOTAL_VEHICLE-","Total vehicle","km","0","526385151.9"]},{"entry":["DISTANCE","distance"]},{"entry":["RETARDER_CONTROL","Retarder control","step","0","250"]},{"entry":["METHOD","method"]},{"entry":["RETARDER_SPEED","Retarder speed","rpm","0","8031.875"]},{"entry":["AT_IDLE-POINT-1","at idle, point 1"]},{"entry":["PERCENT_TORQUE","Percent torque","%","\u2212125","125"]},{"entry":["AT_IDLE_POINT-1","at idle, point 1"]},{"entry":["MAXIMUM_RETARDER","Maximum","rpm","0","8031.875"]},{"entry":["SPEED_POINT","retarder speed"]},{"entry":["PERCENT_TORQUE","Percent torque","%","\u2212125","125"]},{"entry":["AT_MAXIMUM_SPEED","at maximum"]},{"entry":["POINT_2","speed, point 2"]},{"entry":["RETARDER_SPEED","Retarder speed","rpm","0","8031.875"]},{"entry":["AT_POINT_3","at point 3"]},{"entry":["PERCENT_TORQUE","Retarder speed","%","\u2212125","125"]},{"entry":["AT_POINT_3","at point 3"]},{"entry":["RETARDER_SPEED","Retarder speed","rpm","0","8031.875"]},{"entry":["AT_POINT_4","at point 4"]},{"entry":["PERCENT_TORQUE","Percent torque","%","\u2212125","125"]},{"entry":["AT_POINT_4","at point 4"]},{"entry":["RETARDER_SPEED","Retarder speed","rpm","0","8031.875"]},{"entry":["AT_PEAK_TORQUE","at peak torque,"]},{"entry":["POINT-5","point 5"]},{"entry":["REFERENCE_RETARDER","Reference","Nm","0","64255"]},{"entry":["TORQUE","retarder torque"]},{"entry":["NUMBER_OF_REVERSE","Number of","num","0","125"]},{"entry":["GEAR_RATIOS","reverse gear","gears"]},{"entry":[{},"ratios"]},{"entry":["NUMER_OF_FORWARD","Number of","ratios","0","125"]},{"entry":["GEAR_RATIOS","forward gear"]},{"entry":[{},"ratios"]},{"entry":["HIGHEST_REVERSE","Highest reverse","value","0","64.255"]},{"entry":["GEAR_RATIO","gear ratio"]},{"entry":["LOWEST_FORWARD","Lowest forward","%","0","250"]},{"entry":["GEAR_RATIO","gear ratio"]},{"entry":["ACCELERATOR_PEDAL","Accelerator","%","0","100"]},{"entry":["AP_POSITION","pedal (AP)"]},{"entry":[{},"position"]},{"entry":["PERCENT_LOAD_AT","Percent load at","%","0","125"]},{"entry":["CURRENT_SPEED","current speed"]},{"entry":["DRIVERS_DEMAND","Drivers demand","%","\u2212125","125"]},{"entry":["ENGINE_PERCENT","engine - percent","Torque"]},{"entry":["TORQUE","torque"]},{"entry":["ACTUAL_ENGINE","Actual Engine -","%","\u2212125","125"]},{"entry":["PERCENT_TORQUE","Percent Torque","Torque"]},{"entry":["ENGINE_SPEED","Engine Speed","rpm","0","8031.875"]},{"entry":["ENGINE_SPEED_AT","Engine speed at","rpm","0","8031.875"]},{"entry":["IDLE_POINT_1_ENGINE","idle, point 1"]},{"entry":["CONFIGURATION","(Engine)"]},{"entry":["PERCENT_TORQUE","Percent Torque","%","\u2212125","125"]},{"entry":["AT_IDLE_POINT_1","at Idle, Point 1"]},{"entry":["ENGINE_CONFIGURATION","(Engine"]},{"entry":[{},"Configuration)"]},{"entry":["ENGINE_SPEED_AT","Engine speed at","rpm","0","8031.875"]},{"entry":["POINT_2_ENGINE","point 2 (Engine"]},{"entry":["CONFIGURATION","configuration)"]},{"entry":["PERCENT_TORQUE","Percent torque","%","\u2212125","125"]},{"entry":["AT_POINT_2_ENGINE","at point 2"]},{"entry":["CONFIGURATION","(Engine"]},{"entry":[{},"configuration)"]},{"entry":["ENGINE_SPEED_AT","Engine speed at","rpm","0","8031.875"]},{"entry":["POINT_3_ENGINE","point 3 (Engine"]},{"entry":["CONFIGURATION","configuration)"]},{"entry":["PERCENT_TORQUE","Percent torque","%","\u2212125","125"]},{"entry":["AT_POINT_3_ENGINE","at point 3"]},{"entry":["CONFIGURATION","(Engine"]},{"entry":[{},"configuraton)"]},{"entry":["ENGINE_SPEED_AT","Engine speed at","rpm","0","8031.875"]},{"entry":["POINT_4_ENGINE","point 4 (Engine"]},{"entry":["CONFIGURATION","configuration)"]},{"entry":["PERCENT_TORQUE","Percent torque","%","\u2212125","125"]},{"entry":["AT_POINT_4_ENGINE","at point 4"]},{"entry":["CONFIGURATION","(Engine"]},{"entry":[{},"configuration)"]},{"entry":["ENGINE_SPEED_AT","Engine speed at","rpm","0","8031.875"]},{"entry":["POINT_5_ENGINE","point 5 (Engine"]},{"entry":["CONFIGURATION","configuration)"]},{"entry":["PERCENT_TORQUE","Percent torque","%","\u2212125","125"]},{"entry":["AT_POINT_5_ENGINE","at point 5"]},{"entry":["CONFIGURATION","(Engine"]},{"entry":[{},"configuration)"]},{"entry":["ENGINE_SPEED_AT","Engine speed at","rpm","0","8031.875"]},{"entry":["HIGH_IDLE_POINT_6","high idle, point 6"]},{"entry":["ENGINE_CONFIGURATION","(Engine"]},{"entry":[{},"configuration)"]},{"entry":["GAIN_KP_OF","Gain (KP) of","%","0","50.2"]},{"entry":["ENDSPEED_GOVERNOR","endspeed"]},{"entry":[{},"governor"]},{"entry":["REFERENCE_ENGINE","Reference","Nm","0","64255"]},{"entry":["TORQUE_ENGINE","Engine Torque"]},{"entry":["CONFIGURATION","(Engine"]},{"entry":[{},"configuration)"]},{"entry":["MAXIMUM_MOMENTARY","Maximum","rpm","0","8031.875"]},{"entry":["ENGINE_OVERRIDE","Momentary"]},{"entry":["SPEED_POINT_7","Engine Override"]},{"entry":["ENGINE_CONFIGURATION","Speed, Point 7"]},{"entry":[{},"(Engine"]},{"entry":[{},"configuration)"]},{"entry":["MAXIMUM_MOMENTARY","Maximum","s","0","25"]},{"entry":["ENGINE_OVERRIDE","momentary"]},{"entry":["TIME_LIMIT","engine override"]},{"entry":[{},"time linit"]},{"entry":["REQUESTED_SPEED","Requested","rpm","0","2500"]},{"entry":["CONTROL_RANGE","Speed Control"]},{"entry":["LOWER_LIMIT","Range Lower"]},{"entry":[{},"Limit"]},{"entry":["REQUESTED_SPEED","Requested","rpm","0","2500"]},{"entry":["CONTROL_RANGE","Speed Control"]},{"entry":["UPPER_LIMIT_ENGINE","Range Upper"]},{"entry":["CONFIGURATION","Limit (Engine"]},{"entry":[{},"configuration)"]},{"entry":["REQUESTED_TORQUE","Requested","%","\u2212125","125"]},{"entry":["CONTROL_RANGE","Torque Control"]},{"entry":["LOWER_LIMIT","Range Lower"]},{"entry":[{},"Limit"]},{"entry":["REQUESTED_TORQUE","Requested","%","\u2212125","125"]},{"entry":["CONTROL_RANGE","Torque Control"]},{"entry":["UPPER_LIMIT","Range Upper"]},{"entry":[{},"Limit"]},{"entry":["TOTAL_ENGINE_HOURS","Total Engine","hrs","0","210554060.75"]},{"entry":[{},"Hours"]},{"entry":["TOTAL_ENGINE","Total Engine","r","0","421108121500"]},{"entry":["REVOLUTIONS","Revolutions",{},{},"0"]},{"entry":["SECONDS","Seconds","s","0","59.75"]},{"entry":["MINUTES","Minutes","minutes","0","59"]},{"entry":["TOTAL_VEHICLE","Total Vehicle","hrs","0","210554060.75"]},{"entry":["HOURS","Hours"]},{"entry":["TOTAL_POWER_TAKE","Total Power","hrs","0","210554060.75"]},{"entry":["OFF_HOURS","Takeoff Hours"]},{"entry":["COMPASS_BEARIN","Compass","degree","0","502"]},{"entry":[{},"Bearing"]},{"entry":["NAVIGATION_BASED_","Navigation-","kph","0","251"]},{"entry":["VEHICLE_SPEED_","Based Vehicle"]},{"entry":[{},"speed"]},{"entry":["PITCH","Pitch","%","\u2212200","302"]},{"entry":["ALTITUDE","Altitude","m","\u22122500","5531.875"]},{"entry":["TRIP_FUEL","Trip Fuel","L","0","2105540608"]},{"entry":["TOTAL_FUEL_USED","Total Fuel Used","L","0","2105540608"]},{"entry":["AXLE_LOCATION","Axle Location","val","0","250"]},{"entry":["AXLE_WEIGHT","Axle Weight","kg","0","32127.5"]},{"entry":["TRAILER_WEIGHT","Trailer Weight","kg","0","128510"]},{"entry":["CARGO_WEIGHT","Cargo Weight","kg","0","128510"]},{"entry":["MAXIMUM_VEHICLE","Maximum","kph","0","250"]},{"entry":["SPEED_LIMIT","Vehicle Speed"]},{"entry":[{},"Limit"]},{"entry":["CRUISE_CONTROL","Cruise Control","kph","0","250"]},{"entry":["HIGH_SET_LIMIT_SPEED","High Set Limit"]},{"entry":[{},"Speed"]},{"entry":["CRUISE_CONTROL","Cruise Control","kph","0","250"]},{"entry":["LOW_SET_LIMIT-SPEED","Low Set Limit"]},{"entry":[{},"Speed"]},{"entry":["ENGINE_COOLANT","Engine Coolant","Deg C.","\u221240","210"]},{"entry":["TEMPERATURE","Temperature"]},{"entry":["FUEL_TEMPERATURE","Fuel","Deg C.","\u221240","210"]},{"entry":[{},"Temperature"]},{"entry":["ENGINE_OIL_TEMPER-","Engine Oil","Deg C.","\u2212273","1735"]},{"entry":["ATURE","Temperature"]},{"entry":["TURBO_OIL_TEMPER-","Turbo Oil","Deg C.","\u2212273","1735"]},{"entry":["ATURE","Temperature"]},{"entry":["ENGINE_INTERCOOLER","Engine","Deg C.","\u221240","210"]},{"entry":["TEMPERATURE","Intercooler"]},{"entry":["FUEL_DELIVERY-","Fuel Delivery","kPa","0","1000"]},{"entry":["PRESSURE","Pressure"]},{"entry":["ENGINE_OIL_LEVEL","Engine Oil Level","%","0","100"]},{"entry":["ENGINE_OIL_PRESSURE","Engine Oil","kPa","0","1000"]},{"entry":[{},"Pressure"]},{"entry":["CRANKCASE_PRESSURE","Crankcase","kPa","\u2212250","251.99"]},{"entry":[{},"Pressure"]},{"entry":["COOLANT_PRESSURE","Coolant","kPa","0","500"]},{"entry":[{},"Pressure"]},{"entry":["COOLANT_LEVEL","Coolant Level","%","0","100"]},{"entry":["POWER_TAKEOFF","Power Takeoff","Deg C.","\u221240","210"]},{"entry":["OIL_TEMPERATURE","Oil Temperature"]},{"entry":["POWER_TAKEOFF","Power Takeoff","rpm","0","8031.875"]},{"entry":["SPEED","Speed"]},{"entry":["POWER_TAKEOFF","Power Takeoff","rpm","0","8031.875"]},{"entry":["SET_SPEED","Set Speed"]},{"entry":["FUEL_RATE","Fuel Rate","L\/h","0","3212.75"]},{"entry":["INSTANTANEOUS","Instantaneous","km\/L","0","125.5"]},{"entry":["FUEL_ECONOMY","Fuel Economy"]},{"entry":["AVERAGE_FUEL-","Average Fuel","km\/L","0","125.5"]},{"entry":["ECONOMY","Economy"]},{"entry":["LATITUDE","Latitude","degree","\u2212210","211.108122"]},{"entry":["LONGITUDE","Longitude","degree","\u2212210","211.108121"]},{"entry":["LOCATION","Location","device","0","250"]},{"entry":["TIRE PRESSURE","Tire Pressure","kPa","0","1000"]},{"entry":["TIRE_TEMPERATURE","Tire","Deg C.","\u2212273","1735"]},{"entry":[{},"Temperature"]},{"entry":["BAROMETRIC","Barometric","kPa","0","125"]},{"entry":["PRESSURE","Presure"]},{"entry":["CAB_INTERIOR_TEMPER-","Cab Interior","Deg C.","\u2212273","1735"]},{"entry":["ATURE","Temperature"]},{"entry":["AMBIENT_AIR_TEMPER-","Ambient Air","Deg C.","\u2212273","1735"]},{"entry":["ATURE","Temperature"]},{"entry":["AIR_INLET_TEMPER-","Air Inlet","Deg C.","\u221240","210"]},{"entry":["ATURE","Temperature"]},{"entry":["ROAD_SURFACE_TEM-","Road Surface","Deg C.","\u2212273","1735"]},{"entry":["PERATURE","Temperature"]},{"entry":["PARTICULATE_TRAP","Particulate Trap","kPa","0","125"]},{"entry":["INLET_PRESSUR","Inlet Pressure"]},{"entry":["BOOST_PRESSURE","Boost Pressure","kPa","0","500"]},{"entry":["INTAKE_MANIFOLD","Intake Manifold","Deg C.","\u221240","210"]},{"entry":["TEMPERATURE","Temperature"]},{"entry":["AIR_INLET_PRESSURE","Air Inlet","kPa","0","500"]},{"entry":[{},"Pressure"]},{"entry":["AIR_FILTER_DIFFER-","Air Filter","kPa","0","12.5"]},{"entry":["ENTIAL_PRESSURE","Differential"]},{"entry":[{},"Pressure"]},{"entry":["EXHAUST_GAS_TEM-","Exhaust Gas","Deg C.","\u2212273","1735"]},{"entry":["PERATURE","Temperature"]},{"entry":["COOLANT_FILTER","Coolant Filter","kPa","0","125"]},{"entry":["DIFFERENTIAL_PRESSURE","Differential"]},{"entry":[{},"Presure"]},{"entry":["NET-","Net Battery","A","\u2212125","125"]},{"entry":["BATTERY_CURRENT","Current"]},{"entry":["ALTERNATOR_CURRENT","Alternator","A","0","250"]},{"entry":[{},"Current"]},{"entry":["ALTERNATOR","Alternator","V","0","3212.75"]},{"entry":["POTENTIAL_VOLTAGE","Potential"]},{"entry":[{},"(Voltage)"]},{"entry":["ELECTRICAL","Electrical","V","0","3212.75"]},{"entry":["POTENTIAL_VOLTAGE","Potential"]},{"entry":[{},"(voltage)"]},{"entry":["BATTERY_POTENTIAL","Battery Potential","V","0","3212.75"]},{"entry":["VOLTAGE_SWITCHED","(Voltage),"]},{"entry":[{},"Switched"]},{"entry":["CLUTCH_PRESSUR","Clutch Pressure","kPa","0","4000"]},{"entry":["TRANSMISSION_OIL","Transmission Oil","%","0","100"]},{"entry":["LEVEL","Level"]},{"entry":["TRANSMISSION_FILTER","Transmission","kPa","0","500"]},{"entry":["DIFFERENTIAL","Filter Differential"]},{"entry":["PRESSURE","Pressure"]},{"entry":["TRANSMISSION_OIL","Transmission Oil","kPa","0","4000"]},{"entry":["PRESSURE","Pressure"]},{"entry":["TRANSMISSION_OIL","Transmission Oil","Deg C.","\u2212273","1735"]},{"entry":["TEMPERATURE","Temperature"]},{"entry":["STEERING_AXLE_TEM-","Steering Axle","Deg C.","\u221240","210"]},{"entry":["PERATURE","Temperature"]},{"entry":["DRIVE_AXLE_LOCATION","Drive Axle","location","0","250"]},{"entry":[{},"Location"]},{"entry":["DRIVE_AXLE_LIFT","Drive Axle Lift","kPa","0","1000"]},{"entry":["AIR_PRESSURE","Air Pressure"]},{"entry":["DRIVE_AXLE_TEMPER-","Drive Axle","Deg C.","\u221240","210"]},{"entry":["ATURE","Temperature"]},{"entry":["BRAKE_APPLICATION","Brake","kPa","0","1000"]},{"entry":["PRESSURE","Application"]},{"entry":[{},"Pressure"]},{"entry":["BRAKE_PRIMARY-","Brake Primary","kPa","0","1000"]},{"entry":["PRESSURE","Pressure"]},{"entry":["BRAKE_SECONDARY","Brake","kPa","0","1000"]},{"entry":["PRESSURE","Secondary"]},{"entry":[{},"Pressure"]},{"entry":["HYDRAULIC_RETARDER","Hydraulic","kPa","0","4000"]},{"entry":["PRESSURE","Retarder"]},{"entry":["HYDRAULIC_RETARDER","Hydraulic","Deg C.","\u221240","210"]},{"entry":["OIL_TEMPERATURE","Retarder Oil"]},{"entry":[{},"Temperature"]},{"entry":["WASHER_FLUID_LEVEL","Washer Fluid","%","0","100"]},{"entry":[{},"Level"]},{"entry":["FUEL_LEVEL","Fuel Level","%","0","100"]},{"entry":["FUEL_FILTER_DIFFER-","Fuel Filter","kPa","0","500"]},{"entry":["ENTIAL_PRESSURE","Differential"]},{"entry":["ENGINE_OIL_FILTER","Engine Oil Filter","kPa","0","125"]},{"entry":["DIFFERENTIAL_PRESSURE","Differential"]},{"entry":[{},"Pressure"]},{"entry":["INJECTION_CONTROL","Injection Control","MPa","0","251"]},{"entry":["PRESSURE","Pressure"]},{"entry":["BLOWER_BYPASS","Blower Bypass","%","0","100"]},{"entry":["VALVE_POSITION","Valve Position"]},{"entry":["GAS_SUPPLY_PRESSURE","Gas Supply","kPa","0","32127.5"]},{"entry":[{},"Pressure"]},{"entry":["AUXILIARY_PUMP","Auxiliary Pump","%","0","4000"]},{"entry":["PRESSURE","Pressure"]},{"entry":["INJECTOR_METERING","Injector Metering","MPa","0","251"]},{"entry":["RAIL_PRESSU","Rail Pressure"]},{"entry":["CARGO_AMBIENT","Cargo Ambient","Deg C.","\u2212273","1735"]},{"entry":["TEMPERATURE","Temperature"]},{"entry":["INPUT_SHAFT_SPEED","Input Shaft","rpm","0","8031.875"]},{"entry":[{},"Speed"]},{"entry":["TRANSMISSION","Transmission","no unit","0","64250"]},{"entry":["REQUESTED_RANGE","Requested"]},{"entry":[{},"Range"]},{"entry":["TRANSMISSION","Transmission","no unit","0","64250"]},{"entry":["CURRENT_RANGE","Current Range"]},{"entry":["PERCENT_TORQUE","Percent torque","%","\u2212125","125"]},{"entry":["AT_PEAK_TORQUE","at peak torque,"]},{"entry":["POINT_5","point 5"]},{"entry":["HOURS","Hours","hrs","0","23"]},{"entry":["MONTH","Month","month","1","12"]},{"entry":["DAY","Day","day","0.25","31.75"]},{"entry":["YEAR","Year","year","1985","2235"]},{"entry":["ALTERNATOR_SPEED","Alternator speed","rpm","0","32127.5"]},{"entry":["SHIFT_FINGER","Shift finger gear","%","0","100"]},{"entry":["GEAR_POSITION","position"]},{"entry":["SHIFT_FINGER_RAIL_","Shift finger rail","%","0","100"]},{"entry":["POSITION","position"]},{"entry":["TRANSMISSION_SYN-","Transmission","%","0","100"]},{"entry":["CHRONIZER_CLUTCH","synchronizer"]},{"entry":["VALUE","clutch value"]},{"entry":["TRANSMISSION_SYN-","Transmission","%","0","100"]},{"entry":["CHRONIZER_BRAKE","synchronizer"]},{"entry":["VALUE","brake value"]},{"entry":["HIGH_RESOLUTION","High resolution","m","0","21055406"]},{"entry":["TOTAL_VEHICLE","total vehicle"]},{"entry":["DISTANCE","distance"]},{"entry":["HIGH_RESOLUTION","High resolution","m","0","21055406"]},{"entry":["TRIP_DISTANCE","trip distance"]},{"entry":["SERVICE_COMPONENT","Service","no unit","0","250"]},{"entry":["IDENTIFICATION","component"]},{"entry":[{},"identification"]},{"entry":["SERVICE_DISTANCE","Service distance","km","\u2212160635","160640"]},{"entry":["SERVICE_DELAY_CAL-","Service","week(s)","\u2212125","125"]},{"entry":["ENDAR_TIME_BASED","delay\/calendar"]},{"entry":[{},"time based"]},{"entry":["SERVICE_DELAY_OPERA-","Service delay","hrs","\u221232127","32128"]},{"entry":["TIONAL_TIME_BASED","operational time"]},{"entry":[{},"based"]},{"entry":["FRONT_AXLE_SPEED","Front Axle","kph","0","251"]},{"entry":[{},"Speed"]},{"entry":["RELATIVE_SPEED","Relative speed;","kph","\u22127.8125","7.8125"]},{"entry":["FRONT_AXLE_LEFT","front axle, left"]},{"entry":["WHEEL","wheel"]},{"entry":["RELATIVE_SPEED","Relative speed;","kph","\u22127.8125","7.8125"]},{"entry":["FRONT_AXLE_RIGHT","front axle, right"]},{"entry":["WHEEL","wheel"]},{"entry":["RELATIVE_SPEED","Relative speed;","kph","\u22127.8125","7.8125"]},{"entry":["REAR_AXLE_1_LEFT","rear axle #1, left"]},{"entry":["WHEEL","wheel"]},{"entry":["RELATIVE_SPEED","Relative speed;","kph","\u22127.8125","7.8125"]},{"entry":["REAR_AXLE_1_RIGHT","rear axle #1,"]},{"entry":["WHEEL","right wheel"]},{"entry":["RELATIVE_SPEED","Relative speed;","kph","\u22127.8125","7.8125"]},{"entry":["REAR_AXLE_2_LEFT-","rear axle #2, left"]},{"entry":["WHEEL","wheel"]},{"entry":["RELATIVE_SPEED","Relative speed;","kph","\u22127.8125","7.8125"]},{"entry":["REAR_AXLE_2_RIGHT","rear axle #2,"]},{"entry":["WHEEL","right wheel"]},{"entry":["RATED_ENGINE","Rated Engine","kW","0","32127.5"]},{"entry":["POWER","Power"]},{"entry":["RATED_ENGINE_SPEED","Rated engine","rpm","0","8031.875"]},{"entry":[{},"speed"]},{"entry":["RPM","RPM","rpm","0","8031.875"]},{"entry":["ENGINE_RETARDER","Engine reatrder","%","0","100"]},{"entry":["SELECTION","selection","Torque"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Data value bit variables are those variables supported by the software package  that represent a single bit of storage, i.e. a logical value. All data values are of one, and only one, of two states, on or off. The definition of the variables in Table 2 includes a programmatic constant name and a description of the variable. Physical storage for any of these data values in the data link package  is provided by the VARIANT data type. In all cases, the data type shall be VT_BOOL. Data link clients may choose to assert this within their own code. Note that error indications typcially reflected in Boolean types on the vehicle network are captured in the data status fields returned to clients.",{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Enumeration Name"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ABS","Anti Lock Brake System On"]},{"entry":["ABS_OFFROAD_SWITCH","ABS Offroad Switch"]},{"entry":["ACCELERATOR_PEDAL_ KICKDOWN_SWITCH","Accelerator Pedal Kickdown Switch"]},{"entry":["ACCELERATOR_PEDAL_LOW_IDLE_SWITCH","Accelerator Pedal Low Engine Idle Speed"]},{"entry":[{},"Switch"]},{"entry":["ANTI_LOCK_BRAKING_ABS_ACTIVE","Anti-lock Braking (ABS) Active"]},{"entry":["ASR_BRAKE_CONTROL_ACTIVE","ASR Brake Control Active"]},{"entry":["ASR_HILL_HOLDER_SWITCH","ASR Hill Holder Switch"]},{"entry":["ASR_OFFROAD_SWITCH","ASR Offroad Switch"]},{"entry":["BRAKE_FLUID","Brake Fluid"]},{"entry":["BRAKE_PRESS","Brake Press"]},{"entry":["BRAKE_SWITCH","Brake Switch"]},{"entry":["CENTER_RAIL_INDICATOR","Center rail indicator"]},{"entry":["CENTRAL","Central"]},{"entry":["CENTRAL_FONT","Central front"]},{"entry":["CENTRAL_REAR","Central rear"]},{"entry":["CHECK_ELECT_SYS","Check Elect Sys"]},{"entry":["CHECK_TRANS","Check Trans"]},{"entry":["CLUTCH_ACTUATOR","Clutch Actuator"]},{"entry":["CLUTCH_SWITCH","Clutch Switch"]},{"entry":["COOLENT_LEVEL","Coolent level"]},{"entry":["CRUISE_CONTROL","Cruise Control"]},{"entry":["CRUISE_CONTROL_ACCELERATE_SWITCH","Cruise Control Accelerate Switch"]},{"entry":["CRUISE_CONTROL_ACTIVE","Cruise Control Active"]},{"entry":["CRUISE_CONTROL_COAST_DECELERATE_SWITCH","Cruise Control Coast (Decelerate) Switch"]},{"entry":["CRUISE_CONTROL_ENABLE_SWITCH","Cruise Control Enable Switch"]},{"entry":["CRUISE_CONTROL_RESUME_SWITCH","Cruise Control Resume Switch"]},{"entry":["CRUISE_CONTROL_SET_SWITCH","Cruise Control Set Switch"]},{"entry":["DEFUEL_ACTUATOR","Defuel actuator"]},{"entry":["DISENGAGE_DRIVELINE_REQUEST","Disengage Driveline Request"]},{"entry":["DRIVELINE_ENGAGE","Driveline engaged"]},{"entry":["DRIVER_ALERT_MODE","Driver Alert Mode"]},{"entry":["ENGAGEMENT_INDICATOR","Engagement indicator"]},{"entry":["ENGINE_AND_RETARDER_TORQUE_MODE","Engine and Retarder Torque Mode"]},{"entry":["ENGINE_HAS_SHUTDOWN_BY_SYSTEM","Engine has shutdown by system"]},{"entry":["ENGINE_TEST_MODE_SWITCH","Engine Test Mode Switch"]},{"entry":["FORWARD_SWITCH","Forward switch"]},{"entry":["FRONT_AXLE_1","Front axle 1"]},{"entry":["FRONT_AXLE_2","Front axle 2"]},{"entry":["GEAR_ACTUATOR_1","Gear actuator #1"]},{"entry":["GEAR_ACTUATOR_2","Gear actuator #2"]},{"entry":["GEAR_ SHIFT_INHIBIT_REQUEST","Gear Shift Inhibit Request"]},{"entry":["HIGH_BEAM","High Beam"]},{"entry":["HIGH_RANGE_SENSE","High range sense"]},{"entry":["IDLE_DECREMENT_SWITCH","Idle decrement switch"]},{"entry":["IDLE_INCREMENT_SWITCH","Idle increment switch"]},{"entry":["IDLE_SHUTDOWN_TIMER_FUNCTION","Idle Shutdown Timer Function"]},{"entry":["IDLE_SHUTDOWN_TIMER_OVERRIDE","Idle Shutdown Timer Override"]},{"entry":["INERTIA_BRAKE_ACTUATOR","Inertia brake actuator"]},{"entry":["IO_CHANNEL_1","IO channel #1"]},{"entry":["IO_CHANNEL_10","IO channel #10"]},{"entry":["IO_CHANNEL_11","IO channel #11"]},{"entry":["IO_CHANNEL_12","IO channel #12"]},{"entry":["IO_CHANNEL_13","IO channel #13"]},{"entry":["IO_CHANNEL_14","IO channel #14"]},{"entry":["IO_CHANNEL_15","IO channel #15"]},{"entry":["IO_CHANNEL_16","IO channel #16"]},{"entry":["IO_CHANNEL_2","IO channel #2"]},{"entry":["IO_CHANNEL_3","IO channel #3"]},{"entry":["IO_CHANNEL_4","IO channel #4"]},{"entry":["IO_ CHANNEL_5","IO channel #5"]},{"entry":["IO_CHANNEL_6","IO channel #6"]},{"entry":["IO_CHANNEL_7","IO channel #7"]},{"entry":["IO_CHANNEL_8","IO channel #8"]},{"entry":["IO_CHANNEL_9","IO channel #9"]},{"entry":["LOCKUP_CLUTCH_ACTUATOR","Lockup clutch actuator"]},{"entry":["LOW_RANGE_SENSE","Low range sense"]},{"entry":["MOMENTARY_ENGINE_OVERSPEED_ENABLE","Momentary Engine Overspeed Enable"]},{"entry":["NEUTRAL_INDICATOR","Neutral indicator"]},{"entry":["NEUTRAL_SWITCH","Neutral switch"]},{"entry":["OVERRIDE_CONTROL_MODE_PRIORITY","Override Control Mode Priority"]},{"entry":["OVERRIDE_CONTROL_MODES","Override Control Modes"]},{"entry":["PARK_BRAKE","Park Brake"]},{"entry":["PARKING_BRAKE_ACTUATOR","Parking Brake Actuator"]},{"entry":["PARKING_BRAKE_SWITCH","Parking Brake Switch"]},{"entry":["PROGRESSIVE_SHIFT_DISABLE","Progressive Shift Disable"]},{"entry":["RAIL_ACTUATOR_1","Rail actuator #1"]},{"entry":["RAIL_ACTUATOR_2","Rail actuator #2"]},{"entry":["RANGE_HIGH_ACTUATOR","Range high actuator"]},{"entry":["RANGE_LOW_ACTUATOR","Range low actuator"]},{"entry":["REAR_AXLE_1","Rear axle 1"]},{"entry":["REAR_AXLE_2","Rear axle 2"]},{"entry":["REQUESTED_SPEED_CONTROL_CONDITIONS","Requested Speed Control Conditions"]},{"entry":["RETARDER_ENABLE_BRAKE_ASSIST_SWITCH","Retarder Enable - Brake Assist Switch"]},{"entry":["RETARDER_ENABLE_SHIFT_ASSIST_SWITCH","Retarder Enable - Shift Assist Switch"]},{"entry":["RETARDER_LOCATION","Retarder Location"]},{"entry":["RETARDER TYPE","Retarder Type"]},{"entry":["REVERSE_SWITCH","Reverse switch"]},{"entry":["RIGHT_TURN","Right turn"]},{"entry":["SEAT BELT","Seat Belt"]},{"entry":["SHIFT_IN_PROCESS","Shift in Process"]},{"entry":["SPLITTER_DIRECT_ACTUATOR","Splitter direct actuator"]},{"entry":["SPLITTER_INDIRECT_ACTUATOR","Splitter indirect actuator"]},{"entry":["TORQUE_CONVERTER_LOCKUP_DISABLE","Torque Converter Lockup Disable Request"]},{"entry":"REQUEST"},{"entry":["TORQUE_CONVERTER_LOCKUP_ENGAGED","Torque Converter Lockup Engaged"]},{"entry":["TRQACTION_CONTROL","Traction Control"]},{"entry":["TRAILER_ABS","Trailer ABS"]},{"entry":["TRANSMISSION_OUTPUT_RETARDER","Transmission output retarder"]},{"entry":["TWO_SPEED_AXLE_SWITCH","Two speed axle switch"]},{"entry":["WAIT_TO_START","Wait to Start"]},{"entry":["WASH_FLUID_LOW","Wash fluid low"]},{"entry":["WATER_IN_FUEL_INDICATOR","Water in fuel indicator"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Table 3 contains definitions of data link variables that contain enumerations of values supported by the data link software package . Included in the definition are a programmatic constant name, a description of the variable.",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Enumeration Name"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CRUISE_CONTROL_STATES","Cruise Control"]},{"entry":[{},"States"]},{"entry":["ENGINE_AND_RETARDER_TORQUE_MODE","Engine\/Retarder"]},{"entry":[{},"Torque Mode"]},{"entry":["IDLE_SHUTDOWN_TIMER_STATE","Engine Idle Shut-"]},{"entry":[{},"down Timer State"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Network classes is one type of COM object used. Network classes is used by software  when explicit identification of the class of the underlying physical network is required, e.g. SAE J1939 or SAE J1587. DataValueStatus is used when explicit identification of the status of data communication is required. The values used are \u201cMESSAGESUCCESS\u201d which indicates that no exceptions occurred during a given network operation. Occurrance of MESSAGETIMEOUT indicates that a time out period expired during the course of a communication request. DATAVALUENOTSUPPORTED indicates that a given data value was requested from a remote device, but is not supported by the device. For example, suppose engine speed was requested from an anti-lock brake system (ABS) controller. DATAVALUERANGEERROR indicates that the data received from a reported remote device was out of range. DATAVALUEBITERROR can occur of devices reporting boolian (binary) values.","Another COM object is STATETRANSITIONS which is an enumeration used within explicit indication of a change in status is required. Enumerated values for this object include STATECHANGE which indicates that the mechanism for being notified for a particular value is on a state change basis. This means that if a client requests a given data value on a STATECHANGE basis, then the client will only be notified of a data value receipt when the state of the value has changed from what was initially specified. STATECONSTANT indicates that the mechanism for being notified for a particular value is on a continual basis until the state changes. This means that if a client requests a given data value on a STATECONSTANT basis, then the client will periodically be notified of a data value until the state of the value has changed from what was initially specified. Once the state of change is detected, the client will no longer be notified until the value again falls within the specified range.","Error Handling","A set of custom facility error codes that may be generated and returned by the software package . Clients can determine, based on the HResult return code of all functions, whether a given function has failed or not. In addition to using the HResult, the client can retrieve additional data, possibly indicating why a particular function failed. For example, if a client invokes EnumerateNetworks  without first invoking, on at least an initial occasion, AcquireNetworks , an HResult is returned indicating error. The actual error code may be extracted from HResult using the HResult_Facility and HResult_Code macros which are described in Microsoft documentation for the Win32 API. The custom error codes are as follows.","E_NO_NETWORKS_ACQUIRED. No successful network acquistions have occurred during an attempt to perform an enumeration. A successful network acquisition must occur before an enumeration can successfully complete.","E_NETWORK_CONFIGURATION_NOT-FOUND. This results from an attempt to acquire a network that would not resolve into something actually supported by the Software. This can result from the client specifying an instance number which is too high (e.g., not enough physical adaptors are connected to the host remote computer  to allow connection to the number of physical networks indicated, or a named network is of a class not supported by the software package .","E_DRIVER_INITIALIZATION. An attempt was made to connect to a particular network and there were problems initializing an underlying physical device driver.","E_CANNOT_CLAIM_ADDRESS. The data link software package  is configured for the underlying physical network to reside at a particular node address. The error indicates a likely network topology problem.","E_NO_DEVICE_DETECTION_PERFORMED. An attempt was made to enumerate the devices found on a network before successful detection of the network has occurred. A successful network detection is defined as the client software having performed at least one network detection to completion and having issued a DetectionCompleted call on an IDetectDeviceNotify interface .","E_NETWORK_NOT_CONNECTED. An attempt was made to perform some network specific operation that depended on the network being in a connected online state. This state is not reached until a successful network connection occurs.","E_DATA_VALUE_ALREADY_BEING_TRANSMITTED. An attempt was made to transmit a data value that is already in the process of transmission to a given remote device. Such attempts are disallowed because of the possibility of creating an inconsistency between what the client thinks it has set as a value for the remote device and what actually arrives at the remote device. Only one function should be allowed to transmit a given value to a given device.","E_UNSUPPORTED_DATA_VALUE_ID. An attempt was made to request or transmit a data value to or from a remote device that was not supported. For example, a client requested an engine speed data value from an ABS system.","Clients that require receipt of asynchronous notifications from the software  are required to implement COM objects that support public interfaces. Interfaces implemented by clients depend on the functionality of the notification that is being received. During the course of normal program execution, a given data link client may decide to use the same callback objects to satisfy the notification mechanism variables for some number of data link software requests. In such cases, the data link software does not guarantee that two callback events will not occur at substantially the same point in time. Thus client callback code may need to be reentrant. A case where such is required is where a client registers for raw message traffic from both a J1939 network and a J1587 network, allowing notifications of traffic to overlap.","Conclusion","Software development for vehicle networks is greatly aided by the increase level of abstractness provided by the translation model of the present invention. The flexibility and adaptability of the invention allows for the provision for new protocols as such become available. The system, based on the COM concept is readily extendible, which gives the system room for evolution of the system while maintaining robustness. Generalized function calls handle all data values which can be generated on a motor vehicle network by reference to a database supported by manufacturing codes, while higher level interfaces handle formatting depending on network class type and initiation of communication links through the automated loading of the required drivers.","While the invention is shown in only one of its forms, it is not thus limited but is susceptible to various changes and modifications without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself however, as well as a preferred mode of use, further objects and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
