---
title: Selectable control of raster image processor
abstract: Digital printing technologies often rely on raster image processors (RIPs or RIP engines) to convert vector image data to raster, or bit-map, data, which allows a printer to render the image as a pattern of dots or pixels. One problem that the present inventors recognized with conventional RIPs is that they have limited communications capabilities that can in some circumstances reduce their effective processing speed. Accordingly, at least some embodiments of the present invention allow controlling a RIP engine using two or more different RIP control entities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06929411&OS=06929411&RS=06929411
owner: Hewlett-Packard Development Company, L.P.
number: 06929411
owner_city: Houston
owner_country: US
publication_date: 20030903
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS","CONCLUSION"],"p":["Almost all digital printing and image-display technologies rely on a technique known as raster image processing to produce images on a passive or active display medium, such as paper or an electronic screen. In this technique, a hardware or software module, called a raster image processor (RIP or RIP engine), converts vector image data (a geometrical form of image data that facilitates image storage and manipulation) to raster data. The raster data, also known as bit-map data or hardware-ready bits, allows a printer or display to render the image as a pattern of dots or pixels.","In recent years, it has become common, particularly in professional printshops, to use two or more RIPs to rasterize some types of print jobs. For example, some jobs are so large that two or more RIPs are used to reduce the time spent rasterizing and thereby increase production rates. Also, some jobs include two or more types of vector image data, with each type requiring its own specialized form of RIP to convert it to raster data.","In both these cases, the multiple RIPs, generally referred to collectively as a RIP pipeline, are controlled by a RIP manager. The RIP manager, which can take the form of a hardware or software module, receives the print job, divides it into two or more parts, and then assigns each part to a particular RIP for rasterizing. Each of the RIPs then works independently to rasterize its part of the print job, notifying the RIP manager when done and thus allowing the RIP manager to reassign the RIP to another print job.","One problem that the present inventors recognized with conventional RIPs is that they have limited communications capabilities. In some situations, such as dealing with external clients (that is, other users of the RIP), these limited capabilities effectively reduce the processing speed of the RIPs.","Accordingly, the present inventors identified a need for RIPs with improved communications.","This description, which references and incorporates the above-identified figures and the appended claims, describes one or more specific embodiments of one or more inventions. These embodiments, offered not to limit but only to exemplify and teach the one or more inventions, are shown and described in sufficient detail to enable those skilled in the art to implement or practice the invention. Thus, where appropriate to avoid obscuring the invention, the description may omit certain information known to those of skill in the art.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1","b":["10","10","12","14","16"]},"Digital front end  includes a RIP manager  (more generally a RIP control entity), a RIP pipeline , RIP , and processing resources . Generally, each of these components, with the exception of processing resources , comprises one or more modules, objects, or other groupings or encapsulations of underlying functionality implemented in a programming code, such as JAVA or C++, that is carried on an electronic, magnetic, or optical storage medium or carrier signal. These various components can be intercoupled by any form of communications link. For example, the exemplary embodiment assigns each of these components an IP (Internet Protocol) address and communicates via one or more socket-based network protocols. Some embodiments implement one or more of these components in hardware, for example, as one or more application-specific integrated circuits and\/or in firmware, for example, as one or more ROM modules.","More specifically, RIP manager , which is coupled to RIP pipeline  and RIP , includes a graphical user interface (GUI) module  and a RIP database . GUI module  includes one or more graphical user interfaces which are displayed on a display device (not shown) and allow users to define or create one or more pipelines and associate one or more RIP engines with each pipeline, using a keyboard, mouse, or other input device (not shown) In particular, GUI module  includes an input (or input region) A, for example in the form of a check box or radio button, which allows users to enable or disable a RIP engine (such as RIP ) from receiving and\/or sending commands and data from entities other than RIP manager . Although not shown in the figure, the interface also includes one or more inputs (or input regions) for enabling automatic job acceptance and for setting or selecting automatic job-acceptance criteria, such as job size, job types, and job numbers, for separate RIP engines or RIP pipelines.","RIP database  includes data identifying one or more RIPs (or RIP engines) and related status and address information. In the exemplary embodiment, database  includes for each of one or more RIP engines: a corresponding network address and\/or name; a corresponding installation directory path name and\/or data; a corresponding current controlling RIP pipeline name or identifier; and corresponding location information for imposition, LUT, and ICC profile directories relative to the corresponding installation path.","RIP pipeline  can include two or more RIPs, of which a RIP  is generally representative. (The RIPs in pipeline  can be real RIPs, virtual RIPs, or combinations of real and virtual RIPs.) RIP , which is a conventional RIP in the exemplary embodiment, includes conventional RIP software modules and\/or hardware (not shown) for rasterizing input vector image data\u2014that is, for converting the vector image data to bit-map (or hardware-ready) data. Examples of input vector image data include PostScript (PS) data, Portable Document Format (PDF) data, and Printer Control Language (PCL) data.","RIP , which can be part of RIP pipeline  in some embodiments, includes a controller interface  and a RIP engine . Controller interface  enables one of a set of two or more RIP control or management entities, such as RIP manager  and external client , to control or otherwise communicate with RIP engine . In the exemplary embodiment, controller interface  includes one or more network socket connections (ports, modules or objects), of which socket ports A, B, C, and D are generally representative.","Socket port A is an input socket port for receiving packetized vector-image data from external client . Some embodiments include input socket ports that are devoted to particularly types of vector-image data. For example, one embodiment includes one input socket port for PS data and another for PDF data. Socket port B is a control socket port for communicating packetized messages between the external client and the RIP module, and socket port C is an output socket port for outputting packetized bit-map data from the RIP module to the external client (or other RIP control entity.) In some embodiments, socket port C is part of an output plug-in module that provides the associated RIP module the capability to communicate its output data in packet form via the output port.","Other embodiments may use other forms of interface mechanisms or protocols between controller interface  and external client . For example, some embodiments use a Harlequin SOAR (Scalable Open Architecture RIP) application programming interface (API), Adobe CPSI (Configurable PostScript Interpreter) API mechanism, or a hot-folder-based mechanism. The hot-folder-based mechanism may use a set of folders and\/or directories (for example, input, error, success, and output folders) as intermediate storage for messages, with multi-controller interface and RIPs monitoring the folders for new messages. Some embodiments base the controller interface on a Common Object Request Broker Architecture (CORBA). Examples of this form of architecture include System Object Model (SOM), Distributed SOM (DSOM), Component Object Model (COM), and Distributed COM (DCOM). Some embodiments use a Remote Procedure Call (RPC) architecture or protocol.","Socket port D functions as an intermediary between socket ports A-C and RIP engine . In other words, socket port D translates and\/or reformats commands and data to and\/or from the commands and data native to RIP engine .","RIP engine  provides conventional rasterizing of one or more types of vector-image data, such as PS data or PDF data. In some embodiments, RIP engine  includes a two or more specialized RIP engines and thus constitutes a RIP pipeline.","Processing resource  comprises one or more processing entities  and memory (or data storage) devices  for implementing the functionality of RIP manager , RIP pipeline , and RIP . In the exemplary embodiment, processing entities  include one or more integrated central processing units, and storage devices  include one or more volatile or non-volatile memory devices. Although shown as a centralized arrangement in this exemplary embodiment, some embodiments distribute one or more of these resources across a network.","In addition to digital front end , system  includes printer set  and external client . Printer set  includes a set of one or more printing or hard-copy imaging devices, of which printers , , and  are generally representative. Exemplary printers include: HP Indigo 1000, HP Indigo 3000, HP Indigo w3200, HP LaserJet, HP DeskJet, and HP DesignJet printers, which are available from Hewlett-Packard Company of Palo Alto, Calif. (HP, Indigo, Laserjet, DeskJet, and DesignJet are trademarks of Hewlett-Packard Company.)","External client  (more generally a RIP control entity) includes a computing device or other entity, such as an application or object, capable of controlling or otherwise communicating with a RIP, such as RIP . In the exemplary embodiment, client  takes the form of a variable-data-printing (VDP) manager within or without the same machine or processor(s) that implement digital front end . More particularly, external client  includes software modules or objects , , and  for communicating respectively with socket ports A, B, and C of controller interface .",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["20","100","20","202","218","100"]},"The exemplary method begins at block  which entails digital front end  (in FIG. ), or more precisely RIP manager , receiving at least one print job for processing. In the exemplary embodiment, the print job is received from a device, such as desktop publishing station (not shown), via a socket connection or link to a local-area or wide-area network. The print job, which may take the form of a Job Definition Format (JDF) job ticket, includes vector image data, such as PostScript (PS) data, Portable Document Format (PDF) data, or Printer Control Language (PCL) data, and a rasterization specification. Execution continues at block .","In block , RIP manager  assigns the job (or a portion thereof) to a RIP, such as RIP . The assignment, along with the relevant portion of the vector image data from the print job, passes through controller interface  to RIP engine . In the exemplary embodiment, the RIP manager communicates with RIP  (as well as other RIPs) over message channels that reference URLs (Uniform Resource Locators) of files that are transferred asynchronously between the RIP manager and the RIP engine. Execution proceeds to block .","Block  entails RIP  rasterizing the data and transferring the rasterized data to printer set  for printing. In the exemplary embodiment, this rasterization occurs in compliance with the rasterization specification using any technology suitable for the given vector image data and the targeted printer. Once rasterization is complete, RIP  notifies RIP manager  that it has completed its rasterization assignment. In the exemplary embodiment, this notification entails the RIP engine sending a \u201cjob done\u201d message to the RIP manager. In response, the RIP manager updates RIP database  to reflect the available status of RIP . Execution continues to block .","In block , RIP manager  receives a request from external client  to control one of the RIP engines. In the exemplary embodiment, this entails RIP manager  receiving a request from external client  to use a RIP. However in other embodiments, the request may identify a specific RIP or a set of RIP criteria that RIP manager  uses to identify an appropriate RIP, by for example searching RIP database  for available RIPs that are associated with RIP manager  and that meet or comply with the RIP criteria. In some embodiments, the client may request a RIP engine specifically for VDP jobs. Execution then continues at block .","Block  entails RIP manager  assigning or transferring control of an appropriate RIP, such as RIP , over to the external client. In the exemplary embodiment, this entails the RIP manager sending an \u201center direct mode\u201d message via controller interface  (more precisely socket port B) to RIP engine , with the message identifying a set of one or more socket ports and a network name of the external client. \u201cDirect mode\u201d refers to a communication mode that allows direct communication between a RIP engine and an external client (or other RIP-control entity) without using the RIP manager as an intermediary or pass-through.","In exemplary response to the \u201center direct mode\u201d message, RIP  initializes itself for interaction with the client and communicates a \u201cdirect mode ready\u201d message to RIP manager . Initialization entails launching one or more threads to monitor socket ports A and B for incoming data. In turn, RIP manager  sends a message identifying the RIP by its IP address to external client .","Block  entails the external client sending vector image and related control or message data directly to the identified RIP engine, in this case RIP . The precise form of this communication and the controller interface for the identified RIP engine is generally contingent on the implementation of external client and the RIP engine. In the exemplary embodiment, the data is sent to one or more input socket ports associated with the controller interface, such as input port A, and ultimately conveyed via socket port D to RIP engine . Other embodiments may omit an intermediate socket port, such as port D.","In block , the RIP module rasterizes the received image vector data. In the exemplary embodiment, the RIP engine buffers and rasterizes the data as it is received and outputs the corresponding bit-map data, through the controller interface, more precisely output socket port C, to the external client. When the client has finished sending data to the RIP engine, the client closes the input socket port A, signaling controller interface  for RIP  to close intermediate socket port D between the controller interface and the RIP module. The RIP module interprets this closure as an \u201cend of job\u201d signal, and closes the output socket port after all output data has been forwarded to the client (or other location), advancing execution to block .","In block , the external client notifies the RIP manager that it has finished using the identified or assigned RIP. Execution of the exemplary method then advances to block .","Block  entails the RIP manager (or other RIP control entity) making the RIP engine available for use by itself and\/or other RIP control entities, such as other external clients or other RIP managers. In the exemplary embodiment, this entails the RIP manager sending an \u201cexit direct mode\u201d message to the RIP engine, moving the virtual representation of the RIP engine to a temporary holding place until the RIP engine reports back to the RIP manager that it is ready for static processing, and updating the status of the RIP engine in the RIP engine database to indicate its availability. In response to the \u201cexit direct mode\u201d message, the RIP engine is restored to a state enabling it to handle requests from the RIP manager. In some instances, the RIP engine may be reassigned to a RIP pipeline to process static jobs.","The embodiments described in this document are intended only to illustrate and teach one or more ways of practicing or implementing the present invention, not to restrict its breadth or scope. The actual scope of the invention, which embraces all ways of practicing or implementing the teachings of the invention, is defined only by the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2","b":"100"}]},"DETDESC":[{},{}]}
