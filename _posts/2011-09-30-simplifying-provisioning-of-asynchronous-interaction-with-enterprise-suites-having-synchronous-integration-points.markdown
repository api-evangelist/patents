---
title: Simplifying provisioning of asynchronous interaction with enterprise suites having synchronous integration points
abstract: An aspect of the present invention simplifies provisioning of asynchronous interaction with enterprise suites having synchronous integration points. In one embodiment, a digital processing system receives, from a user, data indicating that asynchronous interaction is required for a synchronous integration point of an enterprise suite, and in response, auto-generates a set of service oriented architecture (SOA) artifacts designed to synchronously invoke the synchronous integration point and provide asynchronous interaction with external systems. The auto-generated SOA artifacts are then deployed in SOA server, whereby external systems can interact asynchronously to access a functionality provided by the synchronous integration point. According to another aspect, the system, also receives from the user, a second data indicating a set of policies to be applied, and in response, auto-generates the set of SOA artifacts to implement the set of policies during asynchronous interaction with external systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08667083&OS=08667083&RS=08667083
owner: Oracle International Corporation
number: 08667083
owner_city: Redwood Shores
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","1. Overview","2. Example Environment","3. Providing Integration Points","4. Accessing Integration Points","5. Simplifying Provisioning of Asynchronous Interaction","6. Example User Interface","7. Generating SOA Artifacts","8. Digital Processing System","9. Conclusion"],"p":["1. Technical Field","The present disclosure relates to enterprise systems, and more specifically to simplifying provisioning of asynchronous interaction with enterprise suites having synchronous integration points.","2. Related Art","An enterprise suite refers to one or more applications that cohesively operate together to implement diverse functionalities required in an enterprise\/organization. Each functionality represents a well-defined (in terms of required inputs and corresponding expected outputs, from a user perspective) high level function (e.g., create order and update invoice in inventory management, retrieve leads\/contact and place voice call to a lead in customer relationship management, etc.) that is available to respective groups of users. Examples of such enterprise suites include Oracle E-Business Suite Release 12.1.1 available from Oracle Corporation, SAP Business Suite available from SAP AG, etc.","Integration points are often provided by enterprise suites to facilitate external systems (e.g., client systems, third party applications, etc.) to access the corresponding functionalities. Integration points are referred to as such, since they are exposed (made accessible for invocation from external systems) with pre-specified identifiers (e.g., procedure names). External systems can accordingly access the corresponding functionality by invoking the integration points as per a pre-specified convention (e.g., an Application Procedure Interface (API) invocation).","Integration points often provide synchronous interaction, implying that an external system is required to wait for the response after invoking (or sending a request to) the integration point. Waiting implies that the execution flow (in the external system) typically stops at the invocation point until the corresponding response is received from the integration point.","In contrast, when accessing integration points that provide asynchronous interaction, the external system does not wait for the response. Rather, the response is delivered to the external system at a later time point after completion of processing of the request by the enterprise suite. Thus the execution flow in the external system can continue even after invocation of the integration point, without having to wait for the response. Integration points are accordingly viewed as synchronous and\/or asynchronous, depending on the interaction they provide.","There is often a need to provision asynchronous interaction with enterprise suites having synchronous integration points. Such a task entails providing additional layer(s) between the integration points and the external systems, with such provided layer(s) interacting synchronously with the integration points, and interacting asynchronously with the external systems. It is generally desirable to simplify the provisioning of such layer(s).","In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","An aspect of the present invention simplifies provisioning of asynchronous interaction with enterprise suites having synchronous integration points. In one embodiment, a digital processing system receives, from a user, data indicating that asynchronous interaction is required for a synchronous integration point of an enterprise suite. In response to the receiving of the data, the system auto-generates a set of service oriented architecture (SOA) artifacts designed to synchronously invoke the synchronous integration point and provide asynchronous interaction with external systems. The auto-generated SOA artifacts are then deployed in SOA server, whereby external systems can interact asynchronously to access a functionality provided by the synchronous integration point.","According to another aspect of the present invention, a list of synchronous integration points is displayed on a display unit, with the user enabled to indicate whether asynchronous interaction is required for any of the list of synchronous integration points. The SOA artifacts are auto-generated based on the indication received from the user.","According to one more aspect of the present invention, a second data, indicating a set of policies to be applied during asynchronous interaction, is received from a user. In response, a system auto-generates a set of SOA artifacts to implement the set of policies during asynchronous interaction with external systems. The set of policies may be one or more of addressing policy, atomic transaction policy, optimized message transmission policy, reliable messaging policy and security policy.","Several aspects of the present invention are described below with reference to examples for illustration. However, one skilled in the relevant art will recognize that the invention can be practiced without one or more of the specific details or with other methods, components, materials and so forth. In other instances, well-known structures, materials, or operations are not shown in detail to avoid obscuring the features of the invention. Furthermore, the features\/aspects described can be practiced in various combinations, though only some of the combinations are described herein for conciseness.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","110","110","120","130","160","160","170","180","180"]},"Merely for illustration, only representative number\/type of systems is shown in . Many environments often contain many more systems, both in number and type, depending on the purpose for which the environment is designed. Each system\/device of  is described below in further detail.","Intranet  represents a network providing connectivity between server systems A-B, SOA server  and data stores A-B, all provided within an enterprise (as indicated by the dotted boundary). Internet  extends the connectivity of these (and other systems of the enterprise) with external systems such as end user systems A-C. Each of intranet  and Internet  may be implemented using protocols such as Transmission Control Protocol (TCP) and\/or Internet Protocol (IP), well known in the relevant arts.","In general, in TCP\/IP environments, an IP packet is used as a basic unit of transport, with the source address being set to the IP address assigned to the source system from which the packet originates and the destination address set to the IP address of the target system to which the packet is to be eventually delivered. An IP packet is said to be directed to a target system when the destination IP address of the packet is set to the IP address of the target system, such that the packet is eventually delivered to the target system by Internet  and intranet . When the packet contains content such as port numbers, which specifies the target application, the packet may be said to be directed to such application as well.","SOA server  represents a server (referred to as \u201cprovider\u201d system) capable of providing SOA services, which can be invoked by other (consumer) systems via a network (Internet  and\/or intranet ) using well defined protocols such as SOAP over Hypertext Transfer Protocol (HTTP). As is well known, SOA services are defined by corresponding contracts often specified according to Web Service Definition Language (WSDL), which specify the corresponding input\/output parameters of the service, the type of the parameters, the format of invoking the service (sending the request), the format of the response, etc.","Examples of SOA servers are Oracle SOA Suite available from Oracle Corporation, IBM Websphere ESB Suite available from IBM Corporation, etc., which can be used to implement SOA services such as enterprise service bus (ESB) services which facilitate routing of requests\/responses between consumer and provider systems, business process execution language (BPEL) services used to orchestrate (perform together) one or more services provided by the other provider systems, web services that perform respective tasks, etc.","Each of end user systems A-C represents a system such as a personal computer, workstation, mobile station, etc., used by users to generate (user) requests directed to enterprise applications executing in server systems A-B. The requests may be generated using appropriate user interfaces. In general, a client system requests an enterprise application for performing desired tasks and receives corresponding responses containing the results of performance of the requested tasks. Each request is sent in the form of an IP packet directed to the desired server system, with the IP packet including data identifying the desired tasks in the payload portion.","Each of data stores A-B represents a non-volatile (persistent) storage facilitating storage and retrieval of a collection of data by enterprise applications executing in server systems A-B. Each of data stores A-B may be implemented as a database server using relational database technologies and accordingly provide storage and retrieval of data using structured queries such as SQL (Structured Query Language). Alternatively, each of data stores A-B may be implemented as a file server providing storage and retrieval of data in the form of files organized as one or more directories, as is well known in the relevant arts.","Each of server systems A-B represents a server, such as a web\/application server, executing enterprise applications capable of performing tasks (e.g., processing requests) requested by users using one of end user systems A-C. A server system may use data stored internally, external data maintained in data stores A-B or that received from external sources (e.g., from the user) in performing such tasks. The server system then sends the result of performance of the tasks to the requesting end user system (one of A-C).","It may be appreciated that the various enterprise applications executing in server systems A-B may be part of an enterprise suite that operate together to implement diverse functionalities of the enterprise (shown as the dotted boundary). As noted in the Background section, such an enterprise suite often provides integration points to facilitate external systems (e.g. users using end user systems A-C, third party applications executing in server systems A-B) to access corresponding functionalities within the enterprise suite. In particular, some of the integration points may be of \u2018legacy\u2019 type (implying that the points are continued for reasons such as continuity) and characterized by implementations using technologies that may not support external access over a network (e.g., using web services).","The manner in which such integration points may be provided and accessed (by external systems) is described below with examples.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 1"],"b":"100"},"The block diagram is shown containing enterprise suite  and API  executing in server system A, (third party) application  executing in server system B, service oriented architecture (SOA) suite  executing in SOA server  and SOA tool . Enterprise suite  is further shown containing executable modules A-C and integration points A-B. Each of the blocks is described in detail below.","Enterprise suite  represents a set of one or more enterprise applications that operate together to implement various functionalities of the enterprise. Enterprise suite  is shown as being executed in server system A merely for convenience. In alternative embodiments, the different applications forming part of the enterprise suite may be executing in multiple server systems in the enterprise, as will be apparent to one skilled in the relevant arts.","Enterprise suite  is shown providing integration points A-C, using which external systems are facilitated to access the corresponding functionalities (implemented within and) provided by enterprise suite . Each integration point is shown exposing a corresponding executable module A-C implementing a corresponding functionality within enterprise suite .","For example, each of executable modules A-C may be one of database resident programs such as PL\/SQL stored procedures, concurrent programs, XML (eXtensible Markup Language) Gateway Maps, Java classes such as Business Service Objects, Java API for Forms, DLL (Dynamic Link Library) files, etc. It should be noted that integration points A-C are synchronous integration points, in that the integration points provide only for synchronous interaction with external systems.","Application  (assumed to be executing in server system B, though can alternatively be executed in end user system A-C) represents a third party application which needs to access some of the functionalities provided by enterprise suite . Application  may accordingly interact with any of integration points A-C, based on the functionality (corresponding execution module A-C) sought to be accessed. The interaction may be performed either by invoking API  or by sending requests for services provided by SOA suite , as described below with examples.","API (application programming interface)  facilitates synchronous interaction between external systems such as application  and the various integration points (such as A-C) provided by enterprise suite . Though shown external to enterprise suite , it may be appreciated that in alternative embodiments, API  may be implemented as an integral part of enterprise suite .","API  commonly exposes each of integration points (A-C) as a corresponding a procedure having a procedure name and set of parameters. Application  may accordingly be designed to invoke (using standard protocols such as remote procedure calls (RPC), remote method invocation (RMI), well known in the arts) the procedure corresponding to the integration point sought to be accessed. In response to invocation of a specific procedure, API  invokes\/sends a request to the corresponding integration point (causing the executing of the corresponding execution module), waits for and receives a corresponding result\/response and then sends the result\/response to application .","It should be noted that such synchronous interaction with API  may necessitate application  to be implemented according to a specific set of programming languages (typically, associated with the programming language in which API  is implemented). Examples of such programming language include Java language (available from Oracle Corporation), C#\/VB.Net, languages available from Microsoft, and C\/C++ languages. There may be several scenarios in which such a limitation may not be desirable.","SOA suite  overcomes such a limitation by exposing the integration points (A-C) of enterprise suite  as corresponding SOA services. Application  may accordingly be designed to send requests for the SOA services corresponding to the desired integration points sought to be accessed. Application  sends the requests for the SOA services (and receives corresponding responses) according to standard protocols (SOAP over HTTP) noted above. Application  may according be implemented independent (for example, using any programming language) of the programming language\/environment in which SOA suite  and\/or API  is implemented.","In general, SOA services are implemented in the form of artifacts (in the provider systems such as SOA server ). Each SOA artifact typically contains program logic implementing one or more of such services. A service is typically made available at a corresponding Uniform Resource Locator (URL), and the requests (sent by consumer systems) contain additional data to indicate the specific operation in case more than one operation is implemented by the service, as is well known in the relevant arts.","SOA suite  may accordingly contain multiple SOA artifacts, with the corresponding services being made available at different URLs. In one embodiment, the SOA artifacts are designed to invoke the corresponding procedures in API  in response to invocation of the corresponding SOA service. However, in alternative embodiments, the SOA artifacts may directly invoke the corresponding integration points, without going through API .","It may be appreciated that SOA suite  may be designed to provide both synchronous and asynchronous interaction with the integration points supporting only synchronous interaction (such as A-C). In other words, SOA suite  is designed to interact synchronously with the integration points (A-C), and interact asynchronously with the external systems (application ).","There are several challenges to provisioning of such (SOA based) synchronous\/asynchronous interaction to integration points of an enterprise suite. For example, in a prior approach used for J2EE Connector Architecture (JCA) based products such as E-Business Suite Adapter available from Oracle Corporation and IBM Oracle Applications Adapter available from IBM Corporation, the SOA artifacts (forming SOA suite ) required for synchronous and asynchronous interaction are created\/developed manually by one or more developers.","Such manual development of the SOA artifacts may entail substantial effort (in terms of time and resources), and may thus be undesirable, particularly when there are a large number of integration points. Furthermore, some of the JCA products noted above facilitate only a limited type of execution modules (for example, database resident programs) to be exposed as corresponding integration points.","Another prior approach used in Integrated SOA Gateway (ISG) available as part of Oracle E-Business Suite product noted above, facilitates the generation (based on execution of executable modules) of some of the SOA artifacts, in particular the artifacts providing synchronous interaction with the integration points. However, such an approach does not generate the artifacts required for asynchronous interaction, and also does not take into consideration the various SOA\/web services policies\/standards such as WS-Atomic Transaction, WS-Reliable Messaging etc. to be enforced during the interaction.","SOA tool , provided according to several aspects of present invention, simplifies the provisioning of asynchronous interaction with enterprise suites having synchronous integration points, while overcoming some of the challenges noted above. SOA tool  may be implemented in any digital processing system (including server systems A\/B or SOA server ). The operation and implementation of SOA tool  is described below with several examples for illustration.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 3","FIGS. 1 and 2"]},"In addition, some of the steps may be performed in a different sequence than that depicted below, as suited to the specific environment, as will be apparent to one skilled in the relevant arts. Many of such implementations are contemplated to be covered by several aspects of the present invention. The flow chart begins in step , in which control immediately passes to step .","In step , SOA tool  receives, from a user, data indicating that asynchronous interaction is required for a synchronous integration point of an enterprise suite. The data may be received interactively (as described in sections below) or in the form of configured data files, as will be apparent to a skilled practitioner, based on the disclosure provided herein. For example, the data may indicate that asynchronous interaction is required for integration point A of enterprise suite .","In step , SOA tool  auto-generates a set of SOA artifacts (contained in SOA suite ) designed to synchronously invoke the synchronous integration point (A) and provide asynchronous interaction with external systems (such as application ). Auto-generation implies that the SOA artifacts are created by execution of executable modules without requiring any user inputs during and for the creation (after and in response to, receiving of the data in step ) of the SOA artifacts.","In step , SOA tool  deploys the set of SOA artifacts in a SOA server (for example, ) to facilitate an external system (application ) to interact asynchronously with the synchronous integration point (A). Deployment may entail performing various configurations by execution of various commands, creation and storage of specific artifacts in pre-specified locations, etc. The flow chart ends in step .","Thus, by auto-generation and deployment of the required SOA artifacts in response to the data received from a user, the provisioning of asynchronous interaction with enterprise suites having synchronous interaction points is simplified. In addition, it may be appreciated that the provisioning of synchronous interaction using SOA artifacts (in order to have better error response to the consumer\/external system when problems occur during execution of the integration points) may also be simplified.","The manner in which a user may be enabled to indicate the specific synchronous interaction point and the corresponding SOA artifacts may be generated is described below with examples.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 4","b":["400","160","210","400","250","210"]},"Display area  facilitates the user\/administrator to view the various integration points provided by enterprise suite  (collectively referred to as \u201cIntegration Repository\u201d as indicated by text ). Text  indicates the name \u201cORDER_MANAGEMENT\u201d of the package\/execution module (sought to be exposed), while text  indicate the type \u201cPL\/SQL\u201d of the package\/execution module. Thus, the execution module is a database resident program that is sought to be exposed as integration points to external systems (such as application ).","Text  indicates the status of whether SOA\/web services have been generated for this execution module and\/or the integration points. The text \u201cNot Generated\u201d indicates that web services for accessing the execution module have not yet been generated.","Display area  displays in a tabular form, a list of procedures\/functions contained in the package \u201cORDER_MANAGEMENT\u201d. Column \u201cSelect\u201d facilitates a user to select the desired procedures to be exposed as corresponding integration points (by selecting the corresponding checkbox shown in the column). Columns \u201cName\u201d and \u201cInternal Name\u201d respectively indicates the description and the corresponding internal name (also the procedure name using which the procedure is invoked) of each of the procedures.","Column \u201cInteraction Pattern\u201d facilitates the user to indicate whether synchronous and\/or asynchronous interactions are required for the corresponding procedure. The desired interaction pattern may be selected\/deselected from a pop-up\/context menu displayed (not shown) when the user selects the desired cell. Row  indicates that the user has indicated that synchronous and asynchronous interaction is required for the selected procedure \u201cCreate Order\u201d having internal name \u201cCREATE_ORDER\u201d.","Display area  facilitates the user to specify (by selecting the corresponding checkboxes) the desired protocols such as SOAP version 1.1, SOAP version 1.2, REST to be supported for the requests\/responses between the external systems and the SOA services generated for accessing the selected integration points. Display area  indicates that the user has selected the SOAP version 1.1 protocols.","Display area  facilitates the user to specify (by selecting the corresponding checkboxes) the desired policies\/standards to be enforced during the synchronous\/asynchronous interactions. In particular, the user may specify whether addressing policy is to be enforced, whether atomic transactions policy is to be enforced and the specific standard (WSAT10, WSAT11, WSAT12) to be used if the policy is enforced, whether optimized message transmission is to be enforced, whether reliable messaging policy is to be enforced and the specific standard (WSRM10, WSRM11) to be used, whether security policy is to be enforced and the specific type of security (such as \u201cUsername Token\u201d, \u201cSAML (Sender Vouches)\u201d, etc.) to be enforced.","Display area  indicates (based on the selected checkboxes) that the user has selected to enforce the atomic transaction policy according to WSAT10 standard and also the security policy using Username Tokens. It may be appreciated that the user may similarly select any desired combination of policies to be enforced using display area .","After selecting the integration points, the corresponding interaction patterns (synchronous and\/or asynchronous), the protocols to be supported and the specific policies to be enforced during the interactions, the user may select\/click on \u201cGenerate\u201d button , to initiate the generation of the SOA artifacts required for implementing the user selection.","Thus, in response to the user selecting button , a data indicating the integration points, the corresponding interaction patterns, the protocols and policies is sent to SOA tool . SOA tool , in response to receiving the above data, auto-generates and deploys the SOA artifacts required for providing asynchronous interaction, as described below with examples.","In one embodiment, the SOA artifacts are generated in the form of a composite application according to Service Component Architecture (SCA), a set of specifications which describe a model for building applications and systems using a Service-Oriented Architecture. More details on SCA are available at \u201chttp:\/\/osoa.org\/display\/Main\/Service+Component+Architecture+Home\u201d. The composites (individual services) are packaged as SCA composites as per the standard SCA assembly model. The resulting SCA composites can be deployed in any application server\/middleware which supports SCA model (for example, Oracle SOA Suite noted above).","It should be appreciated that SOA tool  generates all the SOA artifacts required to construct a SOA composite application e.g. XML Schemas, WSDLs, BPEL artifacts, service references, etc. required for the user selected integration points and the corresponding interaction patters. The exact artifacts would depend on a number of factors such as type (database program or Java class) of interaction point, interaction pattern (synchronous, asynchronous or both), as will be apparent to one skilled in the relevant arts.","In one embodiment described below, JCA (J2EE Connector Architecture) based artifacts are generated for providing synchronous interaction, while BPEL (Business Process Execution Language) based artifacts are generated for providing asynchronous interaction. For conciseness, only a few of the SOA artifacts generated by SOA tool  (in response to receiving the data corresponding to the selection of display area ) is described in detail below.","Each of , , A-B and A-B depict sample SOA artifacts auto-generated (by SOA tool ) for an interaction point in one embodiment. In particular, the sample SOA artifacts correspond to those auto-generated for providing synchronous and asynchronous interaction with the integration point \u201cCreate Order\u201d (as indicated by row ), the interaction supporting SOAP version 1.1 and enforcing atomic transaction and security policies (as respectively indicated in display areas  and ). Each of the figures is described in detail below.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIGS. 5A-5B","FIGS. 8A-8B"],"b":"510"},"Data portion  specifies the various policies to be enforced during any interaction with the SCA composite application. It may be observed that the policies include Username Token Security policy and transaction policy according to WSAT10 standard, as specified by the user in display area  of .","Data portion  indicates that a BPEL artifact specified in the file \u201cCREATE_ORDER_ASYNCH.bpel\u201d is to be included in the composite application. Data portion  indicates that the JCA artifact specified in the file \u201cCREATE_ORDER_apps.jca\u201d is also to be included in the composite application. Data portion  specifies the relation between the inputs (source URI) and the components specified in the composite application. In particular, data portion  indicates that the JCA adaptor is to be invoked when the source URI includes the text \u201cCREATE_ORDER\u201d and the BPEL process is to be invoked when the source URI includes the text \u201cCREATE_ORDER_ASYNCH\u201d. The components referred to in the composite application are described in detail below.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 6","b":["610","620"]},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIGS. 7A-7B","b":["710","720"]},"Data portion  specifies the sequence of actions to be performed in response to a request to the BPEL process. In particular, it may be observed that in data portion , the partner link (JCA adaptor) defined in data portion  is invoked. It may be observed that data portion  indicates that a call back service is invoked to return the results of invocation of the \u201cCREATE_ORDER\u201d integration point. Thus, an external system such as application  specifies the detail of the call back service and receives the results at a later time instance (after invocation), thereby accessing the integration point in an asynchronous manner.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 8A-8B"},"Data portions  and  indicate that the respective XML Schema Definition (XSD) files containing the schema specifying the various data types and structures to be used in synchronous and asynchronous interactions are to be included as part of the WSDL file. It should be noted that these XSD files are also generated by SOA tool , based on the type of the procedures\/functions and corresponding parameters exposed as integration points by the enterprise suite.","Data potion  specifies various message formats, while data portion  specifies the corresponding input\/output parameters of the service in terms of the message formats defined in data portion . Data portion  specifies the format of invoking the service (sending the request), the format of the response, etc. In particular, data portion  indicates the two operations \u201cCREATE_ORDER\u201d and \u201cCREATE_ORDER_ASYNCH\u201d that can be invoked\/accessed by external systems. Data portion  indicates the specifies the URL and port at which the above operations can be accessed.","Once the necessary artifacts are generated, SOA tool  assembles the generated artifacts according to SCA assembly model to create a deployable SCA JAR file (SOA Suite ). It should be appreciated that no user intervention is required during the auto-generation process. The auto-generation process remains completely transparent to the user\/administrator.","The user\/administrator can then choose to deploy the composite application into any desired SOA server, directly using the \u201cAdministration\u201d tab of the user interface shown in . In response to the user specifying a SOA server, SOA tool  deploys the SOA artifacts (forming the SCA composite application) into the selected SOA server (such as ). Thus, SOA tool  generates and deploys the SOA artifacts required for provisioning of asynchronous interaction with enterprise suites having synchronous integration points.","After deployment of the SOA artifacts, application  can send a request for the SOA service to SOA server  indicating the specific operation \u201cCREATE_ORDER\u201d or \u201cCREATE_ORDER_ASYNCH\u201d to be performed. In response to the request, SOA server  executes the respective JCA\/BPEL artifact, which in turn invokes the synchronous integration point \u201cCREATE_ORDER\u201d of the enterprise suite and receives the result of performance of the corresponding functionality (creation of an order). SOA server  enforces any policies specified during the interaction.","SOA server  may then send the result of invocation to application , in the scenario that the synchronous operation \u201cCREATE_ORDER\u201d was specified in the request. It should be appreciated that the request also specifies a call back service when the operation \u201cCREATE_ORDER_ASYNCH\u201d to be performed. SOA server  according invokes the call back service to return the results of invocation of the \u201cCREATE_ORDER\u201d integration point. Thus, application  is facilitated to interact asynchronously with synchronous integration points (A-C) of enterprise suite .","It may be appreciated that SOA tool  may be implemented as a part of enterprise management tools such as Oracle Enterprise Manager available from Oracle Corporation. Such modified management tools may then be utilized to manage the lifecycle of integration points, auto-generation and deployment of SOA services for the integration points, etc.","It should be further appreciated that the features described above can be implemented in various embodiments as a desired combination of one or more of hardware, executable modules, and firmware. The description is continued with respect to an embodiment in which various features are operative when the software instructions described above are executed.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 9","b":["900","900","160","250"]},"Digital processing system  may contain one or more processors (such as a central processing unit (CPU) ), random access memory (RAM) , secondary memory , graphics controller , display unit , network interface , and input interface . All the components except display unit  may communicate with each other over communication path , which may contain several buses as is well known in the relevant arts. The components of  are described below in further detail.","CPU  may execute instructions stored in RAM  to provide several features of the present invention. CPU  may contain multiple processing units, with each processing unit potentially being designed for a specific task. Alternatively, CPU  may contain only a single general-purpose processing unit.","RAM  may receive instructions from secondary memory  using communication path . RAM  is shown currently containing software instructions constituting shared environment  and\/or user programs  (such as networking applications, database applications, etc.). Shared environment  contains utilities shared by user programs, and such shared utilities include operating system, device drivers, virtual machines, flow engine, etc., which provide a (common) run time environment for execution of user programs\/applications.","Graphics controller  generates display signals (e.g., in RGB format) to display unit  based on data\/instructions received from CPU . Display unit  contains a display screen to display the images defined by the display signals (such as the user interface shown in  and A-B). Input interface  may correspond to a keyboard and a pointing device (e.g., touch-pad, mouse) and may be used to provide the user inputs required for several aspects of the present invention (such as those provided for interacting with the user interfaces shown in  and A-B). Network interface  provides connectivity to a network (e.g., using Internet Protocol), and may be used to communicate with other connected systems (such as client systems A-C, data store , etc.) of .","Secondary memory  (representing a non-transitory storage\/medium) may contain hard drive , flash memory , and removable storage drive . Secondary memory  may store the data (for example, data indicating the custom filters created by each user) and software instructions (for example, for performing the steps of ), which enable digital processing system  to provide several features in accordance with the present invention.","Some or all of the data and instructions may be provided on removable storage unit , and the data and instructions may be read and provided by removable storage drive  to CPU . Floppy drive, magnetic tape drive, CD-ROM drive, DVD Drive, Flash memory, removable memory chip (PCMCIA Card, EPROM) are examples of such removable storage drive .","Removable storage unit  may be implemented using medium and storage format compatible with removable storage drive  such that removable storage drive  can read the data and instructions. Thus, removable storage unit  includes a computer readable storage medium having stored therein computer software and\/or data. However, the computer (or machine, in general) readable storage medium can be in other forms (e.g., non-removable, random access, etc.).","In this document, the term \u201ccomputer program product\u201d is used to generally refer to removable storage unit  or hard disk installed in hard drive . These computer program products are means for providing software to digital processing system . CPU  may retrieve the software instructions, and execute the instructions to provide various features of the present invention described above.","It should be understood that numerous specific details, relationships, and methods are set forth to provide a full understanding of the invention. For example, many of the functions units described in this specification have been labeled as modules\/blocks in order to more particularly emphasize their implementation independence.","Reference throughout this specification to \u201cone embodiment\u201d, \u201can embodiment\u201d, or similar language means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases \u201cin one embodiment\u201d, \u201cin an embodiment\u201d and similar language throughout this specification may, but do not necessarily, all refer to the same embodiment.","Furthermore, the described features, structures, or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the above description, numerous specific details are provided such as examples of programming, software modules, user selections, network transactions, database queries, database structures, hardware modules, hardware circuits, hardware chips, etc., to provide a thorough understanding of embodiments of the invention.","While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents.","It should be understood that the figures and\/or screen shots illustrated in the attachments highlighting the functionality and advantages of the present invention are presented for example purposes only. The present invention is sufficiently flexible and configurable, such that it may be utilized in ways other than that shown in the accompanying figures.","Further, the purpose of the following Abstract is to enable the Patent Office and the public generally, and especially the scientists, engineers and practitioners in the art who are not familiar with patent or legal terms or phraseology, to determine quickly from a cursory inspection the nature and essence of the technical disclosure of the application. The Abstract is not intended to be limiting as to the scope of the present invention in any way."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Example embodiments of the present invention will be described with reference to the accompanying drawings briefly described below.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"],"b":"100"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 5A-5B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 7A-7B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8A-8B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9","b":"900"}]},"DETDESC":[{},{}]}
