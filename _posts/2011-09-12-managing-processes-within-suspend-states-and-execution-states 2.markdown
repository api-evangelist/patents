---
title: Managing processes within suspend states and execution states
abstract: One or more techniques and/or systems are provided for suspending logically related processes associated with an application, determining whether to resume a suspended process based upon one or more wake policies, and/or managing an application state of an application, such as timer and/or system message data. That is, logically related processes associated with an application, such as child processes, may be identified and suspended based upon logical relationships between the processes (e.g., a logical container hierarchy may be traversed to identify logically related processes). A suspended process may be resumed based upon a set of wake policies. For example, a suspended process may be resumed based upon an inter-process communication call policy that may be triggered by an application attempting to communicate with the suspended process. Application data may be managed while an application is suspended so that the application may be resumed in a current and/or relevant state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09588576&OS=09588576&RS=09588576
owner: Microsoft Technology Licensing, LLC
number: 09588576
owner_city: Redmond
owner_country: US
publication_date: 20110912
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Many computing devices, such as desktops, laptops, smart phones, and tablets, are developed around conserving power consumption, improving device and application startup latency, and improving overall responsiveness. For example, when a device is not used for some time, such as ten minutes, the device may be placed into a sleep state that may significantly reduce application activity, and thus may result in improved power consumption. When a user subsequently attempts to use the device, the device is awakened from this sleep state to afford the user with the full capabilities of the device.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Among other things, one or more systems and\/or techniques for suspending one or more processes associated with an application, determining whether to resume a suspended process based upon one or more wake policies, and\/or managing an application state of an application are disclosed herein.","A computing environment may host applications that are associated with processes, which may be executed by one or more processors as threads. It may be appreciated that one or more systems and\/or methods described herein may be applicable to applications, process, and\/or threads (e.g., since processes are made up of threads which run code on one more processors, the techniques and\/or systems mentioned herein are applied equally to threads). Because the computing environment may host a plurality of applications and\/or processes, a logical container hierarchy may be implemented to manage such applications and\/or processes. In particular, applications may be assigned to logical containers, such as a root logical container, within the logical container hierarchy. Similarly, processes may be assigned to logical containers. The logical container hierarchy may allow for hierarchical nesting of related applications, processes, and\/or logical containers. For example, a text editor application (e.g., a parent application\/process) may be assigned to a root logical container. The text editor application may be associated with one or more child processes, such as a text editor print process, a text editor save process, and\/or a spell checker process. Accordingly, the text editor print process, the text editor save process, and\/or the spell checker process may, for example, may be assigned to logical containers associated with (e.g., nested within) the root logical container assigned to the text editor application. In this way, an association (e.g., relationship) between the text editor application and\/or child processes may be identifiable.","In one example of suspending one or more processes associated with an application as provided herein, a notification that an application is inactive may be received (e.g., the application may not be visible to a user, the user may not have interacted with the application within a predetermined time, the application may be in a background state, etc.). One or more processes associated with the application may be identified. In one example, a logical container hierarchy may be consulted to identify the one or more processes. For example, a root logical container assigned to the application may be identified. A first process assigned to a first logical container associated with (e.g., nested within) the root logical container may be identified. A second process assigned to the first logical container associated with (e.g., nested within) the root logical container may be identified. A third process assigned to a second logical container associated with (e.g., nested within) the first logical container may be identified. In this way, the first, second, and third process may be identified as being associated with the application. It may be appreciated that a variety of processes and\/or applications may be identified as being associated with the application. The one or more processes associated with the application may be placed into a suspend state to conserve power consumption by rendering the suspended processes ineligible for processor execution scheduling. Once suspended, newly created threads and\/or processes associated with the suspended application (e.g., newly created processes assigned to logical containers nested within the root logical container) may be suspended to maintain suspension consistency across processes associated with the suspended application. In this way, processes currently associated with the application and\/or newly created processes may be identified as being associated with the application, and may be suspended accordingly. It may be appreciated that suspension of one or more processes as provided herein may occur when the device is or is not in a sleep mode, but where one or more applications are inactive or not being used. Thus, power may be conserved and\/or battery life extended even when a device is in use.","In one example of determining whether to resume a suspended process as provided herein, a set of wake policies associated with a suspended process may be maintained. A wake policy may be indicative of a reason to resume the suspended process into an execution state. In one example, a wake policy may correspond to a situation where a requesting application sends an inter-process communication call to a suspended process. In another example, a wake policy may correspond to a situation where a suspended application associated with the suspended process is transitioned into a foreground state. In another example, a wake policy may correspond to a situation where user input associated with the suspended application is detected. It may be appreciated that a wake policy may correspond to a variety of situations and\/or reasons to wake the suspended process. The wake policy may be associated with a counter indicative of a number of wake notifications (e.g., a notification that an event associated with a wake policy has occurred, such as a requesting application sending inter-process communication to the suspended process) associated with the wake policy that are currently pending for the suspended process. The counter may be incremented (e.g., an event associated with a wake notification may be pending) and\/or decremented (e.g., an event associated with a wake notification may be completed). For example, a counter for an inter-process communication wake policy may be incremented to 1 upon receiving a first wake notification that a spreadsheet application sent an inter-process communication call to a suspended text editor. The counter for the inter-process communication wake policy may be incremented to 2 upon receiving a second wake notification that a browser application sent an inter-process communication call to the suspended text editor.","The set of wake policies may be evaluated to determine whether to place the suspended process into an execution state or retain the suspended process in the suspend state. In one example, the suspended process may be placed into the execution state based upon determining at least one counter associated with a wake policy comprises a value above a threshold value (e.g., at least one counter has a value above 2). In another example, values of one or more counters may be aggregated together to create an aggregated value (e.g., three counters associated with various wake policies may have a value of 1, and thus an aggregated value of 3 may be determined). The aggregated value may be adjusted based upon weights associated with the wake policies (e.g., a wake policy associated with user input may receive a weight value of 2, while a wake policy associated with a remote third party request may receive a weight value of 0.5 because it may be more advantageous to respond aggressively to a user as opposed to a remote third party). Likewise a particular counter may be unconditionally observed (e.g., a user counter), whereas another counter may be conditionally observed (e.g., based on frequency, noisiness, source, etc.). If the suspended process is placed into the execution state as an executing application, then a current state of the wake policies and\/or a time elapsed since completion of a wake notification may be evaluated in determining whether and\/or when to place the executing process back into the suspend state. For example, the executing process may be retained in the execution state for a period of time in the event additional inter-process communication calls are performed. As an optimization, the notifications may be delivered on \u201cedge\u201d transitions (0->1, 1->0) for a particular counter. In the first case, the policy for execution is evaluated and in the second case the policy for suspension is evaluated.","It may be appreciated that in one example, the set of wake policies may be associated with a logical container assigned to the suspended process within a logical container hierarchy. Accordingly, if the suspended process is placed into the execution state, then one or more processes and\/or applications associated with the suspended process (e.g., processes assigned to logical containers associated with a logical container assigned to the suspended process) may be placed into the execution state.","In one example of managing an application state as provided herein, a list of timers associated with an application may be maintained. For example, absolute timers (e.g., a timeout set of 2:00 PM Aug. 31, 2011), relative timers (e.g., a timeout set at 10 minutes), and\/or other types of timers may be maintained. Upon receiving a notification that the application is to be suspended, an application state comprising timer rebasing data derived from the list of timers may be created. The application state may be created because certain timers, such as relative timers, may timeout while the application is suspended even though the underlying reason for the timer has not occurred. For example, a text editor application may set a relative timer of 10 minutes for a spell checker process because the spell checker process generally does not take more than 10 minutes to complete unless an error has occurred. However, the spell checker process may be suspended after 2 minutes from the creation of the relative timer, and may be suspended for 15 minutes. Without adjusting the relative timer, the relative timer may timeout (e.g., the timeout may be incorrect because the timeout is not related to an error of the spell checker, but merely a suspension of the spell checker). Because the spell checker has not erred, but is merely suspended, the relative timer may be rebased using relative timer rebasing data, such as a time till expiration value, within the application state (e.g., the application state may comprise relative timer rebasing data comprising a time till expiration value indicating a time span from when the relative timer is suspended to an original expiration time of the relative timer). Additionally, relative timers may be adjusted so that upon resumption of a suspended application, an abundance of timer expirations do not occur that may otherwise cause unnecessary CPU consumption and\/or may detract from user experience. In contrast, absolute timers may be associated with an absolute time (e.g., an original expiration time), such that an application may desire to be notified when the absolute time occurs regardless of whether an application associated with the timer was suspended. Accordingly, the absolute timer may be rebased using absolute timer rebasing data, such as an original expiration time, within the application state (e.g., the application state may comprise absolute timer rebasing data comprising the original expiration time). In this way, the application state comprising timer rebasing data may be used for rebasing timers upon resumption of the application from the suspend state back into the execution state.","In another example of managing an application state as provided herein, an application message queue associated with an application may be maintained while the application is in a suspend state. The application message queue may be configured to store system messages for the application (e.g., system messages associated with settings within a control panel). For example, an operating system of a tablet device may queue system messages for a text editor, such as a user interface color=green system message, a language=English system message, a tablet view orientation=portrait system message, etc. The application message queue may receive and\/or store system messages while the application is suspended. Because overlapping messages may be received over time that may render currently queued messages irrelevant (e.g., while suspended, a first message that the tablet view orientation has been set to portrait may be received, then later a second message that the tablet view orientation has been set to landscape may be received, which may make the first message irrelevant), it may be advantageous to manage the application message queue so that the application may be placed into an execution state in a current up-to-date application state. Accordingly, a first system message directed to the application queue while the application is in the suspend state may be received. A determination may be made as to whether the first system message corresponds to a second system message within the application message queue. Upon determining the first system message corresponds to the second system message, the first system message and\/or the second system message may be modified and\/or deleted (e.g., a newly received first system message that a user interface color=green may be placed in the application message queue, while an already queued second system message that the user interface color=red may be deleted). In this way, upon resumption of the application into the execution state, the application may process relevant system messages from the application message queue as opposed to \u201cstale\u201d and\/or irrelevant system messages. Managing the application message queue may have an additional positive performance impact in that the redundant messages do not unnecessarily consume system resources when the target process is not runnable\/executable (e.g., a new message may be dropped\/deleted, older corresponding messages may be dropped\/deleted while the new message may be retained, messages may be intelligently merged, etc.).","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are generally used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures and devices are illustrated in block diagram form in order to facilitate describing the claimed subject matter.","One or more systems and\/or techniques are provided herein for suspending one or more processes associated with an application, determining whether to resume a suspended process based upon one or more wake policies, and managing an application state of an application are provided herein. In particular, one or more processes associated with an application may be suspended (e.g., processes associated with an application may be identified based upon a logical container hierarchy, and may be suspended as a group). A suspended process may be resumed based upon maintaining a set of wake policies indicating reasons to resume the suspended process into an execution state (e.g., if a threshold number of inter-process communication calls from a requesting application to a suspended process are received, then the suspended process may be placed into an execution state to process the inter-process communication calls). During suspension of an application, an application state may be derived from timers associated with a suspended application, such that the timers may be rebased using the application state upon resumption of the suspended application into an execution state. Additionally, an application message queue may be managed while an application is suspended so that irrelevant and\/or stale messages are modified and\/or removed from the application queue. In this way, upon entering the execution state, the application may process relevant system messages so that the application may be placed into a current application state.","One embodiment of suspending one or more processes associated with an application is illustrated by an exemplary method  in . At , the method starts. At , a notification that an application is inactive may be received (e.g., the application may be transitioned into a background state, the application may be invisible to a user (e.g., behind a different application that has been brought to the foreground on a monitor), the user may not have interacted with the application for a period of time, etc.). At , one or more processes associated with the application may be identified. In one example, a logical container hierarchy (e.g., logical container hierarchy  of ) may be consulted to determine which processes are associated with the application. For example, the application may be assigned to a root logical container within the logical container hierarchy, while processes associated with the application may be assigned to logical containers associated with (e.g., nested within) the root logical container.","In one example of identifying one or more processes, a first process may be determined as being associated with the application based upon a determination that the first process is assigned to a first logical container associated with (e.g., nested within) the root logical container (e.g., the first process may be a direct child process of the application). In another example, a second process may be determined as being associated with the application based upon a determination that the second process is assigned to the first logical container associated with the root logical container (e.g., the second process may be a direct child process of the application). In another example, a second process may be determined as being associated with the application based upon a determination that the second process is assigned to a second logical container associated with the first logical container (e.g., the second process may be direct child process of the first process and\/or an indirect child process of the application). In this way, the one or more processes associated with the application may be determined.","At , the one or more processes may be placed into a suspend state. For example, a suspended process may be marked as ineligible for processor execution, such that the threads comprising the suspended process may not be considered as candidates by a thread scheduler for execution. In one example, the application and\/or other applications associated with the one or more processes may be notified of the suspension, which may provide an opportunity for such applications to save state information (e.g., a social network application may save state information associated with a current profile being viewed by a user, such that upon resumption, the social network application may present the current profile to the user). Memory content associated with a suspended process may be saved to a storage device as saved memory content. In this way, the saved memory content may be returned to memory, which may allow the suspended process to quickly resume execution.","It may be appreciated that a newly created process (e.g., a process created after the one or more processes are suspended) may be placed into a suspend state based upon a determination that the newly created process is associated with one or more of the suspended processes and\/or the inactive application. For example, a newly created process may be determined as associated with the inactive application based upon determining that the newly created process is assigned to a logical container associated with the root logical container of the inactive application. In this way, the newly created process may be placed into the suspend state. At , the method ends.","One embodiment of suspending one or more processes associated with an application is illustrated by an exemplary method  in . At , the method starts. At , a notification that an application is inactive may be received. At , a logical container hierarchy may be iteratively traversed to identify one or more processes associated with the application. In one example, a root logical container assigned to an application may be identified within the logical container hierarchy. A first process may be determined as being associated with the application based upon determining that the first process is assigned to a first logical container associated with (e.g., nested within) the root logical container. In another example, a second process may be determined as being associated with the application based upon a determination that the second process is assigned to the first logical container associated with the root logical container (e.g., the second process may be a direct child process of the application). In another example, a second process may be determined as being associated with the application based upon a determination that the second process is assigned to a second logical container associated with the first logical container (e.g., the second process may be a direct child process of the first process and\/or an indirect child process of the application). In this way, the one or more processes associated with the application may be identified. At , the one or more processes may be placed into a suspend state. In this way, processes and\/or newly created processes associated with the inactive application may be suspended. At , the method ends.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["300","300","322","322","302","304","302","304","302","322","306"]},"The suspension component  may be configured to iteratively traverse a logical container hierarchy  to identify one or more processes associated with the application. In one example, the text editor application  may be associated with a text editor process  assigned to a text editor root logical container . While executing, the text editor application  may have created one or more child processes, such as a text editor print process  and\/or a text editor save process , which may have been assigned to the text editor root logical container . Additionally, the text editor application  may have invoked spell check functionality associated with a spell checker process  assigned to a spell checker logical container . The spell checker logical container  may be nested within the text editor root logical container  because the spell checker process  may be associated with the text editor application . Accordingly, the suspension component  may determine that the text editor print process , the text editor save process , and\/or the spell checker process  may be associated with the text editor application  based upon traversing the logical container hierarchy . In this way, the suspension component  may suspend  the text editor process , the text editor print process , the text editor save process , the spell checker process , and\/or newly created processes associated with the text editor application  based upon the text editor application  being inactive, which may result in improved power consumption because such processes and\/or applications may be ineligible to consume processor execution resources and\/or other power consuming resources.","One embodiment of determining whether to resume a suspended process based upon a set of wake policies is illustrated by an exemplary method  in . At , the method starts. At , a set of wake policies associated with a suspended process may be maintained. A wake policy may be indicative of a reason to resume the suspended process into an execution state. In one example, a wake policy may correspond to an inter-process communication call from a requesting application to the suspended process (e.g., a spreadsheet application may attempt to request \u201ccut\u201d text from a text editor application to satisfy a \u201cpaste\u201d operation; a presentation application may comprise a \u201cpasted\u201d text object whose functionality and\/or data may be provided by the text editor application; etc.). In another example, a wake policy may correspond to user input associated with the suspended application (e.g., a user may attempt to interact with a suspended text editor application). In another example, a component (e.g., a hardware component, a software component, a remote third party component, a web component, etc.) may request access to the suspended process. In another example, a wake policy may correspond to a transition of a suspended application associated with the suspended process from a background state to a foreground state. In this way, the set of wake policies may comprise a variety of wake policies associated with various events\/reasons for resuming the suspended process.","A counter may be associated with a wake policy. The counter may be indicative of a number of wake notifications associated with the wake policy (e.g., instances of an event\/reason specified by a wake policy) that are currently pending for the suspended process. A wake notification may be a notification of an event\/reason specified by a wake policy, such as a notification of an inter-process communication call. The counter may be incremented (e.g., an event associated with a wake notification may be pending) and\/or decremented (e.g., an event associated with a wake notification may be completed). It may be appreciated that various wake policies and corresponding counters may be maintained within the set of wake policies. For example, a first counter for a user input wake policy may be incremented to 1 upon receiving a first wake notification that a user attempted to interact with a suspended text editor. The first counter for the user input wake policy may be incremented to 2 upon receiving a second wake notification that the user made a second attempt to interact with the suspended text editor. A second counter for an inter-process communication wake policy may be incremented to 1 upon receiving a third wake notification that a spreadsheet application attempted to communicate with the suspended text editor. The second counter may be decremented to 0 upon a notification that the spreadsheet application no longer desires to communicate with the suspended text editor (e.g., a user shuts down the spreadsheet application). In this way, counters associated with wake policies within the set of wake policies may be maintained.","In one example, wake notifications may be filtered (e.g., ignored, deleted, and\/or refrained from being issued) based upon how a counter is transitioned in light of an execution\/suspend state of the process. In one example, upon determining the process is in the execution state, a wake notification transitioning the counter from a 0 value to a 1 value may be filtered (e.g., a wake notification that may trigger a wake policy to place an already executing process into the executing state may be filtered because the executing process is already executing). In another example, upon determining the process is in the suspend state, a wake notification transitioning the counter from a 1 value to a 0 value may be filtered (e.g., a wake notification that may trigger a wake policy to place an already suspended process into the suspended state may be filtered because the suspended process is already suspended).","At , the set of wake policies associated with the suspended process may be evaluated to determine whether to place the suspended process into an execution state or retain the suspended process in a suspend state. In one example, the suspended process may be placed into the execution state based upon determining at least one counter associated with a wake policy comprises a value above a threshold value (e.g., at least one counter has a value greater than 0). If no counter comprises a value above the threshold value, then the suspended process may be retained in the suspend state. In another example, values of one or more counters may be aggregated together to create an aggregated value. For example, an aggregated value of 4 may be determined based upon a first counter associated with a user input wake policy having a value of 2 and a second counter associated with a remote third party inter-process communication call wake policy having a value of 2. The aggregated value of 4 may be adjusted based upon weights associated with the wake policies. For example, the user input wake policy may have a weighted value of 4 (e.g., based upon applying a 2\u00d7 weight modifier to the value of 2) because it may be desirable to resume\/wake the suspended process in response to user input so that an application associated with the suspended process is highly responsive to the user. The remote third party inter-process communication policy may have a weighted value of 1 (e.g., based upon apply a 0.5\u00d7 weight modifier to the value of 2) because it may be desirable to throttle down responsiveness to remote third parties that may be attempting to \u201cnoisily\u201d communicate with the suspended process for non-critical and\/or non-desirable reasons. The suspended process may be placed into the execution state based upon determining whether the aggregated value is above a threshold value (e.g., an aggregated value of 5 may be above a threshold value of 3).","It may be appreciated that in one example, the set of wake policies may be associated with a logical container assigned to the suspended process within a logical container hierarchy. Accordingly, if the suspended process is placed into the execution state, then one or more processes and\/or applications associated with the suspended process may be placed into the execution state. For example, a text editor process may be placed into the execution state. The text editor process may be assigned to a text editor root logical container. A spell checker process may also be placed into the execution state based upon determining the spell checker process is assigned to a logical container associated with (e.g., nested within) the text editor root logical container. In this way, one or more related processes may be resumed into the execution state. In one example, saved memory content associated with the resumed processes may be restored to memory so that such processes may promptly resume execution in a responsive manner, while still conserving power.","Once placed into the execution state as an executing process, a determination may be made as to whether and\/or when to return the executing process to the suspend state. In one example, a current state of the set of wake policies may be evaluated (e.g., if counter values and\/or an aggregate value of counter values are not above the threshold value, then the executing process may be placed back into the suspend state). In another example, a time elapsed since completion of a wake notification that caused the executing process to be placed into the execution state may be evaluated. For example, a presentation application may comprise a \u201cpasted\u201d text object whose functionality and\/or data may be provided by a suspended text editor application. An inter-process communication call may be made from the presentation application to the suspended text editor application regarding the \u201cpasted\u201d text object. A wake notification of the communication call may be received, and the suspended text editor application may be placed into an execution state to satisfy the inter-process communication call. It may be advantageous to allow the text editor application to remain in the execution state for a period of time (e.g., as opposed to immediately placing the text editor application back into the suspend state) because the presentation application may make subsequent inter-process communication calls to the text editor application regarding the \u201cpasted\u201d text object. At , the method ends.","One embodiment of determining whether to resume a suspended process based upon a set of wake policies is illustrated by an exemplary method  in . At , the method starts. At , a wake policy associated with a logical container assigned to a suspended process within a logical container hierarchy may be maintained. The wake policy may be indicative of a reason to resume the suspended process into an execution state. The wake policy may comprise a counter indicative of a number of wake notifications associated with the wake policy that are currently pending for the suspended process. A wake notification may be a notification of an event\/reason for resuming the suspended process specified by a wake policy, such as a notification of an inter-process communication call. The counter may be incremented based upon receiving a wake notification associated with the wake policy (e.g., a counter associated with a user input wake policy may be incremented based upon receiving a wake notification indicating a user attempted to interact with a suspended application associated with the suspended process). The counter may be decremented based upon receiving notification that the wake notification is not currently pending (e.g., the counter may be decremented based upon a notification that the user logged off a computing device hosting the suspended application).","In one example, upon determining a value of the counter is above a threshold, the suspended process may be placed into an execution state, at . In one example the logical container hierarchy may be traversed to identify one or more additional suspended processes associated with the suspended process based upon determining that the one or more additional suspended processes are assigned to logical containers associated with (e.g., nested within) the logical container of the suspended process. In this way, the one or more additional suspended processes may be placed into the execution state. In another example, upon determining the value of the counter is below the threshold, the suspended process may be retained in the suspend state, at . In this way, the suspended process may be placed into the execution state or retained in the suspend state based upon the wake policy. At , the method ends.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 6","b":["600","600","624","624","626","628","630","632","610","626","612","614","602","616","618","622","614","622","620","612"]},"The wake policy, such as the inter-process communication wake policy , may be associated with a counter indicative of a number of wake notifications associated with the wake policy that are currently pending for the suspended process. The wake component  may be configured to increment the counter based upon receiving a wake notification associated with the wake policy and\/or decrement the counter based upon receiving a notification that the wake notification is not currently pending. For example a wake notification  may be received. The wake notification  may indicate that a spreadsheet application  has sent an inter-process communication call to the suspended text editor application  regarding a pasted text object  (e.g., the pasted text object  may derived functionality and\/or data from the suspended text editor application , and thus the spreadsheet application  requests such functionality and\/or data from the suspended text editor application ). The wake component  may increment the counter associated with the inter-process communication wake policy  to 1 based upon the wake notification .","The wake component  may be configured to place the suspended process into an execution state based upon determining a value of the counter is above a threshold, otherwise the wake component  may retain the suspended process in a suspend state. For example, the wake component  may place the suspended text editor process  into an execution state based upon the counter of the inter-process communication wake policy  comprising a value of 1 that is greater than 0. The wake component  may traverse the logical container hierarchy  to identify one or more additional suspended processes associated with the suspended text editor process  that is to be resumed into the execution state. For example, the suspended text editor print process , the suspended text editor save process , and\/or the suspended spell checker process  may be identified based upon determining such processes are assigned to the text editor logical container  and\/or logical containers associated with (e.g., nested within) the text editor logical container , such as the spell checker logical container . In this way, the wake component  may place  the suspended text editor process , the suspended text editor print process , the suspended text editor save process , and\/or the suspended spell checker process  into the execution state, such that the text editor application  may respond to the inter-process communication call from the spreadsheet application . In one example, the wake component  may place saved memory content associated with the resumed processes into memory to improve responsiveness of the text editor application .","One embodiment of managing an application state of an application is illustrated by an exemplary method  in . At , the method starts. At , a list of timers associated with an application may be maintained (e.g., one or more timers of processes associated with the application may be maintained). That is, processes associated with the application may be associated with one or more timers, such as relative timers (e.g., a timeout set at 20 seconds by a text editor application for a text editor save process), absolute timers (e.g., a timeout set at 5:00 AM Sep. 15, 2011 by a calendar application), and\/or other types of timers. In one example of a timer, a text editor application may set a relative timer of 20 seconds for a text editor save process because the text editor save process generally does not take more than 20 seconds to complete unless an error has occurred. In another example of a timer, a calendar application may set an absolute timer of 5:00 AM Sep. 15, 2011 as a reminder to provide a user with a wake-up notification at 5:00 AM Sep. 15, 2011.","In one example, one or more of the timers may be associated with a root logical container assigned to the application and\/or one or more logical containers assigned to processes associated with the application within a logical container hierarchy. For example, a first timer associated with a first process of the application may be maintained based upon determining the first process is assigned to a first logical container associated with (e.g., nested within) the root logical container within the logical container hierarchy. A second timer associated with a second process of the application may be maintained based upon determining the second process is assigned to a second logical container associated with the root logical container and\/or the first logical container. In this way, the list of timers associated with processes of the application may be maintained.","Upon receiving a notification that the application is to be placed into a suspend state, an application state comprising timer rebasing data derived from the list of timers may be created, at . In one example, absolute timer rebasing data associated with an absolute timer may be stored within the application state. The absolute timer rebasing data may comprise an original expiration time of the absolute timer (e.g., the calendar application may desire a notification at 5:00 AM Sep. 15, 2011 regardless of whether the time has passed or not due to a process and\/or application being placed into a suspend state). In another example, relative timer rebasing data associated with a relative timer may be stored within the application state (e.g., the text editor application may desire a timeout notification if a text editor save process does not complete within 20 seconds while in the execution state). The relative timer rebasing data may comprise a time till expiration value (e.g., a time span from when the relative timer is suspended to an original expiration time of the relative timer). The relative timer rebasing data may, for example, comprise a time till expiration value different than the original expiration time because the text editor application may be concerned with whether the text editor save process took longer than 20 seconds to complete while in the execution state (e.g., taking longer than 20 seconds may indicate a fatal error occurred), such that a suspension of the text editor save process may toll the relative timer because an expiration of the relative timer due to the text editor save process being suspended may not be representative of a fatal timeout with which the text editor application may be concerned. In this way, the application state may be created.","Upon receiving notification that the application is to be placed into an execution state from the suspend state, the timer rebasing data within the application state may be applied to one or more timers associated with the list of timers. In one example, absolute timer rebasing data may be applied to an absolute timer to create a rebased absolute timer. The rebased absolute timer may comprise an original expiration time of the absolute timer. If the original expiration time has expired, then a notification of the expiration may be provided to the application. In another example, relative timer rebasing data may be applied to a relative timer to create a rebased relative timer. The rebased relative timer may comprise a rebased expiration timer derived from applying the time till expiration value to a current time. In this way, the application and\/or processes associated with the application may be placed into a current application state with respect to timers. At , the method ends.","One embodiment of managing an application state of an application is illustrated by an exemplary method  in . At , the method starts. An application may be associated with an application message queue. The application message queue may be configured to store system messages for the application. In this way, the application may receive system messages through the application message queue (e.g., the application may dequeue system messages while in an execution state). A system message may correspond to a variety of information relating to an application state, such as a change in system settings. In one example, a user may rotate a tablet device, which may change the view orientation from a landscape view mode to portrait view mode. An operating system of the tablet device may queue a system message in the application message queue indicating that the current view mode has been set to portrait. In this way, the application may dequeue the system message, and may render itself in a portrait mode to match the current state of tablet device. It may be appreciated that a system message may comprise a variety of other information, such as user interface color, language settings, input device information, etc.","At , the application message queue associated with an application may be maintained while the application is in a suspend state. That is, the application message queue may generally receive system messages regardless of whether the application is in the suspend state and\/or an execution state (e.g., while a text editor application is suspended, a user may rotate a tablet device multiple times, and thus the operating system may queue multiple system messages corresponding to current view modes). Unfortunately, multiple corresponding system messages may be queued within the application message queue while the application is in the suspend state, where one or more messages may become irrelevant and\/or stale. For example, while a text editor application is suspended, 4 system messages may be queued in the application message queue over time. A user may change a system language setting of a tablet device to German, and thus a language=German system message may be queued in the application system queue. Next, the user may rotate the tablet device to landscape mode, and thus a view mode=landscape may be queued in the application system queue. The user may then change the system language setting of the tablet device to English, and thus a language=English system message may be queued in the application system queue. Finally, the user may rotate the tablet device to portrait mode, and thus a view mode=portrait may be queued in the application system queue. In this way, the application message queue may comprise irrelevant and\/or stale system messages, such as the language=German and the view mode=landscape system message because the language and view mode has been changes to other values. Accordingly, the application message queue may be maintained to delete and\/or modify irrelevant and\/or stale messages.","In one example, a first system message direct to the application message queue may be received while the application is in the suspend state. A determination may be made as to whether the first system message corresponds to a second system message within the application message queue (e.g., if the first system message corresponds to a language system message, then the application message queue may be traversed to identify one or more system message corresponding to the language system message). Upon determining the first system message corresponds to the second system message, the first system message and\/or the second system message may be deleted and\/or modified (e.g., the first system message, which may be newer and\/or more relevant, may be retained, while the second system message may be deleted). For example, relevancy rankings may be assigned to the first and second system messages to determine which system message to modify and\/or delete. At , the method ends.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 9","b":["900","900","910","910","904","904","906","908","910","902","902"]},"Upon receiving the notification , the application state manager  may create an application state  comprising timer rebasing data derived from the list of timers . For example, relative timer rebasing data  for the spell checker relative timer  may be created. The relative timer rebasing data  may comprise a time till expiration value of 8 minutes because 2 out of the 10 minutes may have elapsed by the time the spell checker application was suspended, and thus leaving 8 minutes till expiration of the 10 minute relative timer. Absolute timer rebasing data  for the text editor absolute timer  may be created. The absolute timer rebasing data  may comprise an original expiration time of 3:00 PM Aug. 12, 2011. In this way, the application state  may be created.","Upon receiving notification that the text editor application and\/or the spell checker application are to be placed into an execution state, the relative timer rebasing data  and\/or the absolute timer rebasing data  within the application state  may be applied to the spell checker relative timer  and\/or the text editor absolute timer . In this way, a rebased relative timer of 8 minutes may be created and a rebased absolute timer of 3:00 PM Aug. 12, 2011 may be created.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 10","b":["1000","1000","1006","1006","1004","1004","1004","1004","1004"]},"While the application is suspended, new system messages  may be received (e.g., view mode=portrait new system message, user interface=red new system message, new input device=keyboard new system message, and\/or other new system messages). The message management component  may be configured to maintain the application message queue  in light of the new system message  so that irrelevant and\/or stale system messages are deleted and\/or modified from the application message queue . In one example, the view mode=portrait new system message may be determined as corresponding to the view mode=landscape system message within the application message queue . Because the view mode=portrait new system message may render the view mode=landscape system message irrelevant and\/or stale, the view mode=landscape system message may be deleted  and the view mode=portrait new system message may be added  to the application message queue .","In another example, the user interface=red new system message may be determined as corresponding to the user interface=green system message within the application message queue . Because the user interface=red new system message may render the user interface=green system message irrelevant and\/or stale, the user interface=green system message may be deleted  and the user interface=red new system message may be added  to the application message queue . In another example, the new input device=keyboard new system message may be determined as corresponding to the new input device=mouse system message. Because the new input device=keyboard new system message may be supplementary to the new input device=mouse system message, the new input device=mouse system message may be modified  to new input device=mouse and keyboard system message. In this way, the application message queue  may be maintained by the message management component while the application is suspended so that the application, once resumed, may dequeue merely relevant system messages.","Still another embodiment involves a computer-readable medium comprising processor-executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer-readable medium that may be devised in these ways is illustrated in , wherein the implementation  comprises a computer-readable medium  (e.g., a CD-R, DVD-R, or a platter of a hard disk drive), on which is encoded computer-readable data . This computer-readable data  in turn comprises a set of computer instructions  configured to operate according to one or more of the principles set forth herein. In one such embodiment , the processor-executable computer instructions  may be configured to perform a method , such as at least some of the exemplary method  of , at least some of exemplary method  of , at least some of exemplary method  of , at least some of exemplary method  of , at least some of exemplary method  of , and\/or at least some of exemplary method  of , for example. In another such embodiment, the processor-executable instructions  may be configured to implement a system, such as at least some of the exemplary system  of , at least some of the exemplary system  of , at least some of the exemplary system  of , and\/or at least some of the exemplary system  of , for example. Many such computer-readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 12","FIG. 12"]},"Although not required, embodiments are described in the general context of \u201ccomputer readable instructions\u201d being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media (discussed below). Computer readable instructions may be implemented as program modules, such as functions, objects, Application Programming Interfaces (APIs), data structures, and the like, that perform particular tasks or implement particular abstract data types. Typically, the functionality of the computer readable instructions may be combined or distributed as desired in various environments.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 12","FIG. 12"],"b":["1210","1212","1212","1216","1218","1218","1214"]},"In other embodiments, device  may include additional features and\/or functionality. For example, device  may also include additional storage (e.g., removable and\/or non-removable) including, but not limited to, magnetic storage, optical storage, and the like. Such additional storage is illustrated in  by storage . In one embodiment, computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage  may also store other computer readable instructions to implement an operating system, an application program, and the like. Computer readable instructions may be loaded in memory  for execution by processing unit , for example.","The term \u201ccomputer readable media\u201d as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory  and storage  are examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, Digital Versatile Disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .","Device  may also include communication connection(s)  that allows device  to communicate with other devices. Communication connection(s)  may include, but is not limited to, a modem, a Network Interface Card (NIC), an integrated network interface, a radio frequency transmitter\/receiver, an infrared port, a USB connection, or other interfaces for connecting computing device  to other computing devices. Communication connection(s)  may include a wired connection or a wireless connection. Communication connection(s)  may transmit and\/or receive communication media.","The term \u201ccomputer readable media\u201d may include communication media. Communication media typically embodies computer readable instructions or other data in a \u201cmodulated data signal\u201d such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.","Device  may include input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, video input devices, and\/or any other input device. Output device(s)  such as one or more displays, speakers, printers, and\/or any other output device may also be included in device . Input device(s)  and output device(s)  may be connected to device  via a wired connection, wireless connection, or any combination thereof. In one embodiment, an input device or an output device from another computing device may be used as input device(s)  or output device(s)  for computing device .","Components of computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of computing device  may be interconnected by a network. For example, memory  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via a network  may store computer readable instructions to implement one or more embodiments provided herein. Computing device  may access computing device  and download a part or all of the computer readable instructions for execution. Alternatively, computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at computing device  and some at computing device .","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form. Also, at least one of A and B and\/or the like generally means A or B or both A and B.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
