---
title: Enabling the use of process flow applications within an information management system (IMS)
abstract: An IMS process flow toolset can be used to create an IMS process flow application. The IMS process flow application can include an IMS process flow control program. The IMS process flow control program can embody process flow elements such as business logic and events as well as communication with external non-IMS applications. Both the IMS process flow application and IMS process flow control program can be run within the IMS.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08375353&OS=08375353&RS=08375353
owner: International Business Machines Corporation
number: 08375353
owner_city: Armonk
owner_country: US
publication_date: 20091230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The disclosure relates to the field of process flow applications and, more particularly, to enabling the use of process flow applications within an IMS.","A process flow application is a composite business program choreographing data exchanges between service blocks, representing the various software applications that participate in an electronic business process. These various software applications represented by the service blocks often operate on different platforms and\/or from different network locations (i.e., external to the business network). Process flow applications provide a high-level approach for managing business process across multiple, disparate software systems.","One software system central to the performance of many business processes is an information management system (IMS). However, use of IMS within a conventional process flow application is prohibitive. Firstly, current process flow generation tools lack the ability to handle function calls and\/or data structures that are specific to conventional IMS implementations. This increases the time and cost of using IMS within a process flow application since that such code elements would need to be added manually by application developers.","A current approach to overcome this is to handle the invocation of IMS applications as service components and not as complete service blocks. That is, instead of being able to pass the IMS application a set of input data for it to perform calculations upon and receive a final set of output data, the input and output is exchanged for each step or calculation performed. This increases the quantity of calls required to the IMS application to complete the step of the process flow. Each call to the IMS application requires an independent network request and response, increasing the network overhead and decreasing performance of the process flow application.","Another prohibitive factor is the interaction of IMS applications with external servers and business systems. Programming logic must be manually added to IMS applications in order to ensure proper communication with external servers, which may be running on a different platform. The manual addition of more code is required for the IMS application to support other business systems, such as business logic implementation, event processing, exception handling, and compensation logic. Because of the manual nature of these activities coupled with the lack of an IMS process flow tool, it would be a costly and time-consuming undertaking for an organization to modify their library of IMS applications.","One aspect of the disclosure can include an information management system (IMS) software flow toolset for developing IMS process flow applications executable within an IMS environment. The IMS software flow toolset can include an IMS process flow choreographer, an IMS control program generator, and an IMS source code editor. The IMS process flow choreographer can be used for visually designing and defining process flow elements of an IMS process flow application. The IMS control program generator can generate an IMS process flow control program from the flow elements and their connections as defined through the IMS process flow choreographer. The IMS process flow program can be a discrete component of the IMS process flow application. Bindings between the IMS process flow application and service components executably coupled to the IMS process flow application can be defined in the IMS process flow control program. The IMS source code editor can be for creating, editing, and saving source code of the IMS process flow application. The source code editor is able to at least view and edit code of the IMS process flow control program generated by the IMS control program generator. The source code editor is also able to at least create, edit, and view source code of the IMS application other than code defined within the discrete component that is the IMS process flow application. The IMS can include a collection of programs for storing, organizing, selecting, modifying, and extracting data from a hierarchical model based database.","Another aspect of the disclosure can include an information management system (IMS) comprising a transaction management subsystem, a database manager subsystem, a systems services subsystem, and a set of IMS process flow applications. The transaction management subsystem can be for creating, executing, and managing transaction processing applications and for performing network management, message management, data communication, and security functions for the IMS. The database manager subsystem can be for querying and storing data in accordance with a hierarchical model and for performing data integrity and data recovery functions. The systems services subsystem can be for managing memory of the IMS, for command processing, and for inter system communications. The IMS process flow applications can be executable within the IMS. Each of the IMS process flow applications can include an IMS process flow control program. The IMS process flow program can be a discrete component of the IMS process flow application. Bindings between the IMS process flow application and service components executably coupled to the IMS process flow application can be defined in the IMS process flow control program. The service components can include an external service component that executes outside the IMS and that communicates to the IMS via the systems services subsystem.","Another aspect of the disclosure can include a business process application that can invoke an IMS process flow application within an IMS. The business process application can execute within a server remotely located from the IMS. Responsive to the invoking, the IMS process flow application can run within the IMS. The IMS process flow application while running can perform a set of process flow activities. A flow between the process flow activities can be defined within an IMS process flow control program. The IMS process flow program can be a discrete executable component of the IMS process flow application. Bindings between the IMS process flow application and externally implemented service components can be defined in the IMS process flow control program. The IMS process flow activities can execute in accordance with the IMS process flow control program. At least one of the process flow activities can be an external activity performed by a service component external to the IMS. Execution of the external activity can be dependent upon completion of a first internal activity, as defined by the IMS process flow control program. Execution of the first internal activity can complete. Execution of the external activity can be responsively triggered based on the completion of the first internal activity in accordance with the IMS process flow program. The IMS can receive an indication that the external activity has completed. Responsive to the indication, execution of another of the activities can be initiated. This activity can be dependent upon completion of the external activity in accordance with the IMS process flow program.","The disclosure provides a solution that can enable the use of process flow applications within an information management system (IMS). An IMS process flow toolset can be used to create an IMS process flow application. The IMS process flow application can include an IMS process flow control program. The IMS process flow control program can embody process flow elements such as business logic and events as well as communication with external non-IMS applications. Both the IMS process flow application and IMS process flow control program can be run within the IMS.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","Referring now to ,  is a schematic diagram illustrating a system  that enables the use of IMS process flow applications  within an information management system (IMS)  in accordance with embodiments of the inventive arrangements disclosed herein. In system , a user  can utilize an IMS process flow toolset  running on a client device  to create an IMS process flow application  that runs within the IMS . That is, user  and client device  can perform function in a development environment . Server  and IMS  can be components of a production environment .","The IMS  can represent a computing system that supports data management and transaction activities. As shown in system , the IMS  can also be configured to communicate over a network  with an IMS process flow toolset  running on a client device  as well as business process applications  running on servers . Communications between device  and IMS  can occur during a software development phase of a software lifecycle, such as occurring during software  deployment. Communications between IMS  and server  can occur (in real-time or near real time) dynamically when executing application  or  in production environment .","The IMS process flow toolset  can represent a software development tool that can be used to create and\/or modify an IMS process flow application . As shown in system , the IMS process flow toolset  can include an IMS-specific source code editor  and an IMS process flow choreographer .","The IMS-specific source code editor  can represent a software development environment tool that supports a set of programming languages, such as COBOL and JAVA, used by the IMS , providing features and functionality tailored for the IMS  environment. Within the IMS-specific source code editor , the user  can create\/view\/modify the source code of the IMS process flow application . For example, the IMS-specific source code editor  can offer the user  features commonly found in integrated development environments (IDEs) such as keyword coloration and syntax checking in relation to IMS .","In order to create an IMS process flow application , the user  can launch the IMS process flow choreographer  from within the IMS-specific source code editor . The IMS process flow choreographer  can represent the software component of the IMS process flow toolset  that allows the user  to visually design and define the process flow elements of the IMS process flow application .","For example, the IMS process flow choreographer  can allow the user  to add and connect graphical icons that represent the various service components, computations, business logic, data variables, and compensation activities of the business process being implemented. The service components expressed within the IMS process flow choreographer  can include components external to the IMS  such as business process applications  operating from other servers .","It should be noted that, while graphical tools exist for creating process flow applications, such a graphical tool does not currently exist for creating a process flow application that runs within an IMS  and utilizes IMS applications as complete service components.","The graphical configuration of elements created by the user  within the IMS process flow choreographer  can be captured as an IMS process flow model . Since the graphical elements of the IMS process flow model  cannot be directly utilized by the IMS , the IMS control program generator  can be invoked from the IMS process flow choreographer  to generate an IMS process flow control program . The IMS process flow control program  can represent the underlying software code that corresponds to the graphical elements expressed within the IMS process flow model . For example, branching within the IMS process flow model  can be represented as a conditional control structure within the IMS process flow control program .","The IMS control program generator  can be further configured to automatically generate code stubs and\/or skeleton code (not shown) for establishing communication with the other external business process applications  over a network . The generated skeleton code can increase the ease of use of the IMS process flow toolset  for the user  by eliminating manual configuration of the required communication protocols.","Further, the software code for the IMS process flow control program  generated by the IMS control program generator  can also be viewed\/edited within the IMS-specific source code editor .","As shown in system , the IMS process flow control program  can be contained within the IMS process flow application . In an alternate embodiment, the IMS process flow control program  can exist separate from, but associated with the IMS process flow application .","Thus, the IMS process flow application  can represent an IMS application that has been modified to accommodate process flow elements. The process flow elements of the IMS process flow application  can be defined within a corresponding IMS process flow model  and encoded within an IMS process flow control program .","As used herein, IMS  can be a collection of programs for storing, organizing, selecting, modifying, and extracting data from a database. IMS  stores data using a hierarchical model (as opposed, for example, to a relational database model). IMS  can include a transaction management subsystem (not shown), a database manager subsystem (not shown), and a systems services subsystem (not shown). The transaction manager subsystem can create, execute, and manage transaction processing applications. The transaction management subsystem can also performing network management, message management, data communication, and security functions for the IMS . Transaction processing applications utilize transactions, which include the request and execution of a set of programs, performing administrative functions, and accessing a shared database. The IMS process flow application  can be a transaction processing application, which utilizes (is executed by) the transaction manager subsystem of the IMS .","The database manager subsystem can be for querying and storing data in accordance with a hierarchical model and for performing data integrity and data recovery functions. The IMS process flow application  can be a database processing application, which utilizes (is executed by) the database manager subsystem of the IMS .","The systems services subsystem can be for managing memory of the IMS, for command processing, and for inter system communications. Interactions between business process applications  and IMS process flow application  can occur through the system services subsystem.","In one embodiment (e.g., an IBM IMS V9 based one), the transaction manager subsystem can be integrated with external applications, such as LOTUS, WEBSPHERE MQ, and DB2 stored procedures. In the same embodiment, the database manager subsystem can be integrated with XQUERY, DB2Stored Procedures, WEBSPHERE INFORMATION INTEGRATOR CLASSIC FEDERATION, WEBSHPERE IMS DB UTILITY, and Customer Information Control System (CICS). The system services subsystem can use a JAVA Integrated connect to interface with TCP\/IP Clients, a SOAP gateway, WEBSPHERE APPLICATION SERVER, and WEBSPHERE\/RATIONAL tools. In one embodiment, the IMS process flow toolset  can interface with the IMS  via the JAVA Integrated connected component of the system services subsystem of IMS .","IMS  is organized hierarchically to: optimize storage and retrieval; to ensure integrity and recovery, to enable IMS  to be efficiently managed; to ease access from other environments; to provide Enterprise-class technology that is robust, secure, high performance, scalable, available, and manageable, to offer choice and flexibility in programming styles and languages; and to integrate well with existing and new investments in hardware, software and skills. In general, IMS  performs faster than rational database management systems (RDBMS) for the common tasks but may require more programming effort to design and maintain for non-primary duties. Often, a hierarchical (e.g., IMS ), relational, and XML based databases can be integrated together as a storage solution, where IMS  database is used for mission critical and high performance tasks, relational storage is used for decision support and application productivity purposes, and XML is used as a business to business (B2B) standard for data interchange. Thus, IMS  is one of a set of complementary technology specific systems functioning as a core component of many Enterprise storage solutions. As such, use of IMS flow toolset  to ease interactions and linkages between IMS  and server  (which has traditionally been a manual endeavor) can greatly reduce software development and maintenance costs within an Enterprise.","IMS  can implement the hierarchical model using blocks of data known as segments. Each segment can contain several pieces of data, which are called fields. For example, a customer database may have a root segment (or the segment at the top of the hierarchy). Child segments may be added underneath another segment. Unlike other databases, you do not need to define all of the data in a segment to IMS. For example, a segment may be defined with a size of forty bytes but only define one field that is six bytes long as a key field that you can use to find the segment when performing queries. IMS will retrieve and save all forty bytes as directed by a program but may not understand (or be concerned with) what the other bytes represent.","In various implementations, the IMS  can be implemented as a full function database, a fast path database, and\/or a high availability large database (HALDB). Full function IMS databases can have primary and secondary indexes, accessed using Data Language Interface (DL\/I) calls from various application program, such as structure query language (SQL) calls to a relational database. Full function databases can have a variety of access methods, such as Hierarchical Direct (HDAM), Hierarchical Indexed Direct (HIDAM), Simple Hierarchical Indexed Sequential (SHISAM), Hierarchical Sequential (HSAM), and Hierarchical Indexed Sequential (HISAM). In one embodiment, a full function database can store data using virtual storage access method (VSAM) or overflow sequential (OSAM).","Fast Path databases are optimized for extremely high transaction rates. Data Entry Databases (DEDBs) and Main Storage Databases (MSDBs) are the two types of fast path databases. Neither provide any indexing.","A HALDB is an extension of IMS full function databases that provide better availability, better handling of extremely large data volumes, and, with IMS V9, online reorganization to support continuous availability. A HALDB can store in excess of 40 terabytes of data.","Network  can include any hardware\/software\/and firmware necessary to convey data encoded within carrier waves. Data can be contained within analog or digital signals and conveyed though data or voice channels. Network  can include local components and data pathways necessary for communications to be exchanged among computing device components and between integrated device components and peripheral devices. Network  can also include network equipment, such as routers, data lines, hubs, and intermediary servers which together form a data network, such as the Internet. Network  can also include circuit-based communication components and mobile communication components, such as telephony switches, modems, cellular communication towers, and the like. Network  can include line based and\/or wireless communication pathways.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2","b":["200","200","100"]},"In sample IMS process flow , a business process application  can invoke an IMS process flow application  within the IMS . As the IMS process flow application  runs, the IMS process flow control program  can be invoked to perform the process flow activities.","In this example, the sample IMS process flow  conducted by the IMS process flow control program  can perform three steps, as defined in the corresponding IMS process flow model. First, the IMS process flow control program  can invoke IMS App . While the IMS process flow control program  waits for a response, IMS App  can call a SAP application  for additional data and\/or processing. SAP application  is an application conforming to the SAP solution platform by SAP Global Inc. of Walldorf, Germany. For example, the SAP application  can be an application executing within a SAP NETWEAVER BUSINESS WAREHOUSE management compliant system.","Once IMS App  conveys a response to the IMS process flow control program , the next step of the sample IMS process flow  can be performed, calling a Web service . The IMS process flow control program  again waits for a response from the Web service  before performing the third step. The third step can invoke IMS App . Upon receipt of a response from IMS App , the IMS process flow control program  can convey the final response to the requesting business process application .","Communication between the IMS process flow control program  and the other applications of sample IMS process flow  can utilize a variety of standard methods supported by the IMS , such as advanced program-to-program (APPC), asynchronous program switch calls, synchronous application programming language (API) callouts, and the like. Communications external to the IMS  can be configured to utilize an intermediary message handler (not shown), such as IMS CONNECT.","As shown in this example, this approach can enable the IMS  to act such as a typical process flow application server. The IMS  can act as both the requestor of and the responder to the other IMS applications  and  and external applications  and .","It should also be noted that, through the IMS process flow control program , a composite of IMS transactions and external applications can be performed as a single unit of work, represented by the process flow expressed by the IMS process flow model. Further, this approach also provides the IMS process flow application  with the ability to handle business events, exceptions, and compensation activities, a capability not easily accommodated in current implementations of IMS  within process flow applications.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 3","b":["300","300","100","200"]},"Sample IMS process flow model  can include multiple graphical elements - that can be arranged to express relationships and business logics. The graphical elements - of the sample IMS process flow model  can be arranged utilizing the IMS process flow choreographer.","As shown in this example, the sample IMS process flow model  can begin with graphical element  representing the obtainment of an order request message. Graphical element  can be connected to graphical element  that assigns the data received in the order request message to local variables. Any additional data transformations or calculations can also be defined within graphical element .","From graphical element , an IMS Application   can be called to perform one or more processing activities, such as retrieving available information about the requested item. When processing by the IMS Application   is complete, flow can proceed to a graphical element  representing business logic that can determine if enough of the requested item is in stock to satisfy the order.","The sample IMS process flow model  can now branch based upon the evaluation of graphical element . When the requested item is not in stock, flow can proceed to graphical element . Graphical element  can represent a looping control mechanism that can continue to loop until it runs out of suppliers to check. While there are suppliers to check, the actions represented by graphical elements  and  can be performed.","Each time the loop represented by graphical element  is performed, graphical element  can get the identity of the next supplier and pass the identity to the external non-IMS application . The external non-IMS application  can perform its defined actions, such as querying the identified next supplier for their available quantity of the requested item, and return flow back to the business logic of graphical element .","When the requested item is in stock, flow can proceed by invoking IMS Application   to perform the next processing step, such as initiating the order fulfillment process. IMS Application   can then pass the data to graphical element  for the assignment of output data.","Additionally, a compensation action  can also be defined to pass data to graphical element . In this example, the compensation action  can represent a refund process for a cancelled order. Once graphical element  has completed assigning data to the output variables, an order response message can be generated and sent by graphical element .","It should be emphasized that creation of a sample IMS process flow model  is not supported by current software tools used to create process flow applications and\/or IMS applications.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 4","b":["400","400","100","200","300"]},"It should be noted that the sample IMS process flow control program code  can be authored in one of a variety of programming languages and utilize application programming interfaces (APIs) that are supported by the IMS. Further, sample IMS process flow control program code  is for illustrative purposes only, and is not intended to express a complete implementation or limitation of an embodiment of the present invention.","The sample IMS process flow control program code  can begin with a procedure declaration at line . Grouping  can represent two lines of code that initialize local variables. Line  can represent a typical call statement for retrieving an input message from the IMS message queue using the COBOL-to-DLI (CBLTDLI) interface library, the \u2018GET UNIQUE\u2019 (GU) function, and the input\/out program control block (IOPCB). The retrieved message can be stored in the dataspace defined as INPUT-AREA.","A synchronous callout can then be made in line  utilizing a procedure encapsulated by \u2018ICAL-SENDRECV\u2019 and \u2018ICAL-SENDRECV-END\u2019. The business logic expressed in the IMS process flow model associated with the sample IMS process flow control program code  can be represented by the conditional IF-statement of line . Should the called procedure return a blank response message, line  can call the \u2018COMP-LOGIC\u2019 procedure to perform the defined compensation activity.","An output message can be returned to the original PCB using the call statement defined in line . The \u2018INSERT\u2019 (ISRT) function can be used with the CBLTDLI interface library to return the contents of the \u2018OUTPUT-AREA\u2019 to the IOPCB. Line  can signal the termination of the sample IMS process flow control program code .","The flowchart and block diagrams in the  illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
