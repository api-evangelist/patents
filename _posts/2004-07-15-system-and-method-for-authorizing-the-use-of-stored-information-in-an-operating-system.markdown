---
title: System and method for authorizing the use of stored information in an operating system
abstract: A method and apparatus for authorizing a file to use stored information for executing a process in a Linux operating system. The file includes an executable linking format, an application authorization data, and other attributes for the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07568102&OS=07568102&RS=07568102
owner: Sony Electroinics, Inc.
number: 07568102
owner_city: Parkridge
owner_country: US
publication_date: 20040715
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF EMBODIMENTS OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION"],"p":["1. Field of Invention","Embodiments of the present invention broadly relate to a system and method for storing and authorizing the use of stored information in an operating system. More specifically, embodiments of the present invention provide a system and method for enabling a system to authorize a use of a stored secret before exposing it to an application.","2. Description of the Background Art","It is an important security measurement to protect in an operating system for a computer the integrity of executable files, together with their custom attributes and data. Usually, custom attributes and data are stored in separate files. The integrities of both original executables and their attributes should be protected. Many executable files including their associated attributes are security sensitive; thus, maintaining, two or more files separately makes the original executable files and their attributes more vulnerable to security attacks. Furthermore, when two or more executable files are separately maintained, they may easily become asynchronous as a result of being separately maintained.","One type of standard file format for storing executable binaries is Executable and Linking Format (ELF) of the Linux Operating System. Information and data are organized in an ELF file as sections, which are indexed in a section table. Some custom attributes and data for executable binaries may be stored in ELF while additional attributes and data of other executable binaries may be stored in other executable binary files. In an ELF file, as with files of other operating systems, separately maintaining the original executables and their attributes in the ELF file in conjunction with other files makes the ELF file and all additional files more vulnerable to security attacks, as well as exposing all files including the ELF file to becoming asynchronous with respect to each other as a result of being separately maintained.","Embodiments of the present invention provide a method for authorizing an application program for a Linux operating system to use stored information. The method comprises providing an application program having a signature and used in executing a process in a Linux operating system, and associating stored information (e.g., a stored secret) with the signature of the application program so the application program may be used in a Linux operating system. The signature may comprise one of: a hash value, an encrypted secret, and a digital signature. Associating stored information includes decrypting sensitive content of the application program. In an embodiment of the invention where the signature comprises a hash value, the method may additionally comprise comparing the hash value of the application program with a hash value of an application that request the stored information.","Another embodiment of the present invention provides a method for authorizing a file to use stored information for executing a process in a Linux operating system. The method may comprise providing a file for executing a process in the Linux operating system and having an executable linking format and existing sections for data, and adding an application authorization data to the existing sections of the file so the file may use stored information (e.g., a stored secret) for executing a process in the Linux operating system. The method may further include adding customs attributes and data to the existing sections of the file to produce in the file an extended executable linking format in addition to the application authorization data. The application authorization data of the file may be compared with an application authorization data of an application that request the stored information. The application authorization data may comprise one of the following: arbitrary string used as an ID, an arbitrary string combined with a certificate associated with a signature on the file, and an arbitrary string combined with a domain name associated with the file.","Additional embodiments of the present invention provide a computer system comprising a Linux operating system using a file having an executable linking format, and application authorization data. Also provided is a machine-readable medium having stored thereon instructions for authorizing a file to use stored information for executing a process in a Linux operating system. The instructions include adding an application authorization data to existing sections of the file so the file may use stored information for executing the process in the Linux operating system.","Embodiments of the present invention further provide an apparatus for authorizing a file to use stored information for executing a process in a Linux operating system. The apparatus includes a file for executing a process in the Linux operating system and having an executable linking format and existing sections for data, and an application authorization data so the file may use stored information for executing the process in the Linux operating system.","Embodiments of the present invention also provide a system and method for storing in a single binary file custom attributes along with data to protect all of the stored information at the same time in the single binary file, while still maintaining backward compatible. Embodiments of the present invention further also provide a system and method for storing in an ELF for a particular file which is used to execute a process in the Linux Operating System, custom attributes and data of executable binaries already existing in the ELF for a particular file, along with information of executable binaries from one or more other files.","Embodiments of the present invention further also provide a method for adding sections to a format for a file used to execute a process in an operating system. The method comprises providing a file for executing a process in a Linux operating system and having an executable linking format and sections for data, and adding sections to the sections of the file. A process may be executed in the Linux operating system. The added sections may be indexed in an index section. The method may additionally comprise protecting the executable linking format including the added sections. Protecting the executable linking format may comprise assigning a hash value to the executable linking format, or inserting a digital signature into the executable linking format, or assigning a signing key to the executable linking format. If a digital signature is employed to protect the executable linking format, the digital signature may be removed from the executable linking format, and subsequently verified to produce a verified signature. After verification the removed digital signature may be reinserted into the executable linking format.","Embodiments of the present invention additionally provide a method for producing an extended executable linking format for a file used in executing a process in a Linux operating system. The method comprises providing a file for executing a process in the Linux operating system and having an executable linking format and sections for data, and adding customs attributes and data to the sections of the file to produce in the file an extended executable linking format for use in executing a process in the Linux operating system. The extended executable linking format may be protected, such as by a hash value. The method may additionally comprise protecting the hash value.","A further embodiment of the invention provides a method for protecting the integrity of a platform employed in executing a process in a Linux operating system. The method comprises providing a Linux operating system employing a platform having components, and protecting the components of the platform to produce a trusted platform used in executing a process in the Linux operating system. The components of the platform may be protected by a format selected from a group of formats consisting of a configuration file, an extended executable linking format, and a trusted executable format.","Embodiments of the invention further provide a computer system comprising a file for executing a process in the Linux operating system and having an executable linking format and sections for data. The file additionally has additional sections which have been added to the sections of the file.","Embodiments of the present invention also provide a machine-readable medium having stored thereon instructions for adding sections to existing sections of a file having an executable linking format and used in executing a process in a Linux operating system.","Embodiments of the present invention provide an apparatus for adding sections to an existing file for executing a process in an operating system. The apparatus comprises a file for executing a process in a Linux operating system and including an executable linking format having existing sections for data, and means for adding sections to the sections of the file.","These provisions together with the various ancillary provisions and features which will become apparent to those artisans possessing skill in the art as the following description proceeds are attained by devices, assemblies, systems and methods of embodiments of the present invention, various embodiments thereof being shown with reference to the accompanying drawings, by way of example only, wherein:","In the description herein for embodiments of the present invention, numerous specific details are provided, such as examples of components and\/or methods, to provide a thorough understanding of embodiments of the present invention. One skilled in the relevant art will recognize, however, that an embodiment of the invention can be practiced without one or more of the specific details, or with other apparatus, systems, assemblies, methods, components, materials, parts, and\/or the like. In other instances, well-known structures, materials, or operations are not specifically shown or described in detail to avoid obscuring aspects of embodiments of the present invention.","A \u201ccomputer\u201d for purposes of embodiments of the present invention may be any processor-containing device, such as a mainframe computer, a personal computer, a laptop, a notebook, a microcomputer, a server, or any of the like. A \u201ccomputer program\u201d may be any suitable program or sequence of coded instructions which are to be inserted into a computer, well know to those skilled in the art. Stated more specifically, a computer program is an organized list of instructions that, when executed, causes the computer to behave in a predetermined manner. A computer program contains a list of ingredients (called variables) and a list of directions (called statements) that tell the computer what to do with the variables. The variables may represent numeric data, text, or graphical images. If a computer is employed for synchronously displaying multiple video program ID streams, such as on a display screen of the computer, the computer would have suitable instructions (e.g., source code) for allowing a user to synchronously display multiple video program ID streams in accordance with the embodiments of the present invention.","A \u201ccomputer-readable medium\u201d for purposes of embodiments of the present invention may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, system or device. The computer readable medium can be, by way of example only but not by limitation, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, system, device, propagation medium, or computer memory. The computer readable medium may have suitable instructions for synchronously displaying multiple video program ID streams, such as on a display screen, in accordance with various embodiments of the present invention.","Referring now to , there is seen a schematic diagram of a trusted platform  communicating with a content render library , and with content distributor tools . The trusted platform  may be for any suitable platform of any Operating System. Similarly, the content render library  and the content distributor tools  may be any suitable respective content render library and content distributor tools of any Operating System. Preferably for various embodiments of the invention, the trusted platform , the content render library , and the content distributor tools  respectively comprise a trusted platform, a content render library, and content distributor tools for the Linux Operating System. While preferred embodiments of the invention will be explained for the Linux Operating System, it is to be understood that the spirit and scope of embodiments of the present invention are not to be limited to the Linux Operating System. The Linux Operating System in fully described in \u201cUnderstanding the Linux Kernel\u201d by Daniel P. Bovet & Marco Cesati, published by O'Reilly, fully incorporated herein by reference thereto as if repeated verbatim immediately hereinafter.","The trusted platform  comprises a key manager , a key service , a key , a trusted task structure  having application authorization data, a trusted content render process , content or data encryption key (DEK) , and an application authorization data . The content render library  comprises content render , elfer , trusted content render , extended ELF (EELF) , private key  (i.e. secret encryption key (SEK) private key), public key  (i.e. secret encryption key (SEK) public key), and AAD-public key  (i.e., public vendor key (VK)). The content distributor tools  comprises distributor tool  which generates from clear content  and the keys (i.e., private key , public key , and AAD-public key ) encrypted content header  and encrypted content .","Elfer  includes a standard format for storing executable binaries. As illustrated in , information and data in elfer  are organized in a file as sections , which are indexed in a section table . In elfer  some custom attributes and data for an executable binary may be stored along with rest of the information of the executable binary in the same binary file. In an embodiment of the invention and as illustrated in , additional sections (e.g. additional bytes of hardware) can be inserted into an existing executable binary without destroying the original program logic. In an embodiment of the invention, insertion of additional sections may include modification to the section table to maintain the integrity of the executable. For this embodiment however, the same executable image is preferably generated from the files before and after the insertion of the additional sections . It is to be understood that additional sections may include any suitable information, such as, by way of example only, information for the operating system or any other suitable application. This embodiment of the invention may be employed with trusted platforms, such as trusted platform , where integrity of security sensitive applications and their protection attributes need to be simultaneously protected together. For example, a DRM application has special protection requirements to the operating system, so that the operating system knows how to enforce the special protection requirements. Protection attributes may be inserted or added to elfer  to protect the operating system.","For embodiments of the present invention, the integrity of the files in elfer , either before or after the insertion of additional sections , may be protected by various means. In one embodiment of the invention, a hash value of the files in elfer  can be used to protect the integrity of the files. Because custom attributes are part of the same binary file, the integrity of both original executable and its attributes are protected together.","In another embodiment of the invention, a digital signature may be employed, either alone or in combination with a hash value, to protect the integrity of elfer . After the signature is signed, it may be inserted into elfer . In order to verify the signature, the signature may be initially removed from the ELF  through the assistance of network connections, and subsequently returned after verification to elfer  in the state when it was originally signed. An advantage of this procedure for protecting the integrity of files within elfer  is that third party vendors may sign and distribute their applications.","In yet another embodiment of the invention, the integrity of elfer  may be protected by assigning the files of the elfer  with a signing key that is known only to the intended system which is capable of subsequently verifying the integrity of the files of the elfer . By way of example only, in a trusted platform, such as trusted platform , the operating system can take the responsibility of maintaining the signing key.","If a hash value of the files in elfer  is used to protect the integrity of the files, the hash value and\/or related information must be stored and protected. If the elfer  is employed with a trusted platform, such as trusted platform  in , the trusted components within the trusted platform, are preferably verified in each step during the boot sequence. The hash values of the components are extended into the process content renders (PCRs). After a trusted kernel takes the control of the trusted platform , the kernel assumes the responsibility of verifying the integrity of additional components, such as kernel modules, libraries, and trusted applications. In order for the kernel to verify the integrity of a particular component, the hash value of the particular component needs to be protected. For the trusted platform , which preferably comprises a trusted Linux platform, the integrity of a particular component (e.g., a hash value of a particular component) may be protected by Configuration files, by Extended Executable Linking Format (EELF), or by Trusted Executable Format (TEF).","Referring now to  there is seen a configurator , elfer  and trusted platform . The configurator  has a Configuration file. If a hash value of a particular component is to be protected by a Configuration file, the Configuration file is preferably protected by extending its hash value to a PCR (process content render) or by using a digital signature. Because a single configuration file may be used for multiple protection targets, the Configuration file is preferably updated and re-protected each time there is a change to the target files.","Referring now, to  there is seen an Extended Executable Linking Format (EELF ) and trusted platform . EELF  includes ELF  and a Configuration file . If a hash value of a particular component is to be protected by an EELF, the information in the Configuration file, together with its ELF executable, is placed in a single file. This procedure protects both the target and the configuration in a single file. For embodiments of the invention where a hash value of a particular component is to be protected by non-ELF files, the information in the Configuration file, together with its non-ELF executable, is placed in a single file, as best illustrated in  where there is seen a trusted platform , and non-ELFer  having non-elf files , and a Configuration file .","For embodiments of the invention where a hash value of a particular component is to be protected by The Trusted Executable Format (TEF), only one Configuration file is employed for a single target within a trusted platform. In  there is seen trusted platform  and The Trusted Executable Format (TEF ). The trusted platform  includes a plurality of targets , such as targets and . TEF  comprises a plurality of Configuration files , such as Configuration files and . As illustrated in , Configuration files and are mapped directly to targets and since only one Configuration file is employed for a single target within trusted platform .","In another embodiment of the present invention the Executable Linking Format (ELF) (e.g., elfer  in ), includes targets which are to be protected. Representative protection targets include kernel modules, libraries, trusted and sensitive applications. Protection targets in ELF may be protected by extending the ELF file to produce an Extended Executable Linking Format (EELF), generally illustrated as  in . The ELF file may be extended by attaching additional information at the end of the ELF file without altering the execution format of the ELF file. EELF  maintains backwards compatibility since an existing executable engine will still be functional regardless of the additional information at the end of the ELF file.","EELF , as illustrated in , includes original ELF body , a header portion , an extended data portion , and a footer portion . The header portion  comprises particular information which is located in the extended data portion . The footer portion  is formatting which is included at the end in EELF  because respective sections within EELF  vary in length. Thus, the footer portion  provides the information to locate the beginning of the EELF .","The extended data portion  may include one or more of the following sections:\n\n","In an embodiment of the invention and as previously indicated, while EELF (e.g., EELF ) have features to protect the integrity of files used in the trusted platform, these integrity protection mechanisms may be replaced with a single protection mechanism called Trusted Executable Format (TEF) which is an alternative protection mechanism to employing EELF and is a variation of EELF . The Trusted Executable Format (TEF) is generally illustrated as  in  and broadly comprises EELF  and Meta Data  added to the header portion  of the EELF . More specifically and as best illustrated in , TEF  comprises original ELF body , header portion  including added Meta Data , extended data portion , and footer portion . The Meta Data  may be used to specify multiple related files (including executable file, configuration file, etc.) of different formats. By the use of Meta Data  in the header portion , one format may be used to securely support executable files and all of the data formats, such as non-executable files, beyond the limits of EELF .","In an embodiment of the present invention, TEF  comprises a superset of EELF  by supporting all the data formats that are beyond the limits of EELF . As indicated, TEF  comprises header portion  that may be specified in a format of Meta Data  (such as in SML format). It is to be understood that all the sections at the end of the EELF  may be included in the header portion  of TEF . The header portion  may include a generic file descriptor, which may be used to specify what type of file it is (including executable file, configuration file, etc.) and its format, as well as the security and integrity protection data. Data that is used as management information to describe files in this manner comprises Meta Data . Current Linux implementations support multiple executable formats, such as ELF, a out, perl, script, etc. To support TEF , Linux loaders are preferably enhanced in order to process the Meta Data  contained in the header portion  in order to delegate the execution to the existing execution engines. A benefit to this embodiment of the invention is that by defining a new file format with security and protection data, one can extend the system protection to all types of files.","Another aspect of the present invention provides for a system and procedure for protecting an encryption secret so that only a target application may access the secret and use it to decrypt the content for rendering. Thus, only a target application would be authorized to use the secret. In an embodiment of the present invention a system and method that enables a target application to authorize encryption\/decryption of data employs a single authorization phase comprising Application Authorization Data (AAD). For various embodiments of the present invention, characteristics of the AAD include: (i) the AAD is used for the purpose of authorization; (ii) the AAD is certified by the trusted system; (iii) the AAD is added to the application executable; and (iv) the AAD is also combined with the encrypted secret, more specifically by associating an encryption secret with a signature of a target application. The term \u201csignature\u201d may be a simple hash or digital signature of the target application.","One of the AAD basic mechanisms for a sensitive application to authorize the use of a secret to decrypt sensitive content is to use the hash value of the application for authorizing the use of a secret to decrypt sensitive content. The secret is combined with the hash value of the application and is encrypted using an encryption key to create an encrypted blob, generally illustrated as  in . Encrypted blob  before encryption comprises management information , hash value  of authorized application, and encrypted secret . In an embodiment of the invention, only the entity with the Encryption Key can decrypt the encrypted blob . The entity usually includes a supporting function that must verify the authenticity by comparing the hash value  of the authorized application from the encrypted blob  and the hash value of the application that requests the secret. The entity returns the secret to the application only if the two hash values match. Otherwise, an error is generated.","Another of the AAD basic mechanisms for a sensitive application to authorize the use of a secret to decrypt sensitive content is to use an encrypted hash (i.e., a digital signature) of the protected entity. To protect the content encryption secret with an encrypted hash (i.e., a digital signature) is an indirect association with the hash of the target entity.","In another embodiment of the invention, a sensitive application may authorize the use of a secret to decrypt sensitive content by embedding AAD in the target application. The EELF data may be signed for certifying the AAD value from the entity that signed the file. An EELF format having AAD is generally illustrated as  in . The EELF format  may include original ELF body , AAD , and a digital signature  for all prior sections within the EELF format . Thus, in the encrypted blob , the AAD  is used in place of the hash value  of the application for the authentication process.","Referring now to , there is seen schematic diagram of an unencrypted blob  after the encrypted blob  has been unencrypted. Unencrypted blob  comprises management information , AAD , and encrypted secret . In an embodiment of the invention the OS kernel may be responsible for verifying the authorization to access secrets and includes the Encryption Keys. An OS application loader may store the AAD  from the application (read from the Extended ELF data) in the extended process data structure. To decrypt sensitive information, a target application may load the secret or encrypted blob  and request the OS to decrypt the content secret. When a secret is requested for access by this application, the AAD value in the secret blob  is compared against the AAD of the application in the process data structure. The secret may only exposed to the requesting application if the two AAD values match. Otherwise, an error could be generated.","In various embodiments of the present invention, there are different variations or methods on how AAD may be constructed. In one method, the AAD may be an arbitrary string, which would be used solely as the ID. The ID would used in the Kernel to determine if the secret contained in the secret blob should be exposed to the application. The secret would only be exposed to applications with the same AAD. For this embodiment of the invention, multiple applications may share a single AAD.","In another method, the AAD may be an arbitrary string combined with the certificate associated with the signature on the application. In this method, the data structure for the Extended ELF may be same data structure of EELF  in . The encrypted blob would have an additional certificate. The kernel could determine if the arbitrary string and the certificate contained in the blob match with the application that request the secret before exposing the secret to the application. As a result, the encrypted content could only be decrypted by applications with the same magic string and the certificate. This would bind the AAD with the certificate and would eliminate any problem of a valid signature being used with an incorrect magic string. Alternatively, and in another embodiment, a public key of the certificate may be employed instead of the certificate itself in the encrypted blob.","In yet another method, the data structures may be the same in both the Extended ELF and the secret blob after replacing the certificate part with the domain name. By way of example only, a value of AAD in the secret blob may be a string in the format domain_name.authorization_phase, where the \u201cdomain_name\u201d may be the valid domain name of the application vendor, which therefore should match with the domain name found in the certificate associating with the signature of the application. The \u201cauthorization_phase\u201d may be any string, such as \u201ccom.sony.dvd_player.\u201d The domain name portion of the AAD may be verified against the certificate owner that is used to verify the digital signature of the software or application. If the domain names match, the AAD is valid. If the domain names do not match, the AAD is not valid and the application is not authorized to access secrets. This procedure may be used to prevent one sensitive application vendor from using the same AAD of an application from another vendor. Otherwise, the second vendor could be able to import an application with the AAD from the first vendor, and the second vendor's application could be used to reveal secrets targeted for the application from the first vendor. This method would still allow the sharing of magic strings for applications from same domain.","Referring again now to , elfer  preferably includes one or more functions for adding AAD  into sections of EELF . A trusted application loader could store the AAD  in the process data structure when loading the application. An API (Application Programming Interface) could be provided to Key Service  to access the AAD  of a rendering application process. As previously indicated the AAD  may be in the form Domain_name.authorization_phase. By way of example only, the AAD  for a Sony DVD player may appear as Com.sony.DVD_PLAYER_AUTH_DATA. As also previously indicated, this name convention may be used to prevent one sensitive application vendor from using the same AAD of an application from another vendor. Otherwise, the second vendor would be able to create an application with an AAD from the first vendor. This application may be used to reveal the secrets targeted to the application from the first vendor. This name convention also produces potential AAD conflictions from different vendors. The domain_name portion of the AAD  may be used by a trusted application loader to verify the AAD  against the signer in the certificate that is used to sign the render application. The public (VK, vendor key)  key may be included in the content encryption header with the AAD . Generally, content would be encrypted for applications that are signed by a vendor.","Continuing to refer again to , content distributor tools  take the clear content , public mSEK , a content encryption key, and one and more sets of combination of (AAD+public VK)  as inputs. The content encryption key may be an optional input item. If an encryption key is not included, it is generated on-the-fly. The content encryption key is typically symmetric and is used to encrypt the content. The encrypted content is pre-pended with a header. The header includes the content encryption key, encrypting algorithm, one or more sets of AAD and public VK combinations for potentially multiple targeting render applications. Multiple public VKs allow the encrypted contents shared between several render applications from different vendors. The header itself may be encrypted using the mSEK public key (e.g., mSEK Pub key ) of the target platform (e.g., trusted platform ). In an embodiment of the present invention, the structure of the header may generally be illustrated as  in . The header  may include encryption header magic number , content encryption key , encryption algorithm , AAD , pub VK , AAD , PUB VK , AADn  and Pub VKn .","Key service  includes a system call and service library for rendering application to make requests to the trusted platform  for decrypting the header (e.g., header  in ). The application should make a system call through the service library to obtain the content encryption key for the header of the encrypted content data. The key service  would in turn call the key manager  to decrypt the header using the private key . With a returned clear header, the key service  would make sure the requested application is the trusted and targeted rendering application by matching the AAD  stored in the process data with at least one of the AAD (e.g., AAD , et al) and public key (e.g., pub VK , et al) from the list in the content header (e.g., content header ).","Broadly, with respect to content encryption and authorization in the trusted platform , sensitive content is encrypted by the content distributor  for specified (or target) rendering application for a given (or target) trusted platform . A public key from the target platform is used to encrypt a secret that is in turn used to encrypt the content. The content is shipped to a customer and viewed using the rendering application on the target trusted platform. The rendering application requests the trusted platform OS to provide services for encrypting the secret that is used to encrypt the content. The trusted platform OS is responsible to make sure that the secret can only be revealed to the trusted, target rendering application. To associate the content with the target application, the AAD  is used, so that only the applications with the AAD  are allowed to access the sensitive contents.","Referring now to , there is seen a block flow diagram, generally illustrated as , for illustrating an embodiment of the invention for content encryption including authorization, decryption and protection. In accordance with block , a pair of key encryption is generated. More specifically the private key  and the public key  is generated. The private key  is handled by key manager , and should never be exposed. The public key  will be used by content distributor  for encrypting a content encryption key (usually a symmetric key generated on-the-fly). Preferably, the model (secret encryption) key (mSEK) is employed.","In block  the elfer  is used to sign the content rendering applications, preferably by appending EELF sections at the end of the application. One of sections contents includes AAD . The content distributor tools , as best illustrated by block , take the clear content , the public key (and AAD)  and generate encrypted content  with the header . The header  includes the AAD  and the content encryption key (DEK) , which is usually a symmetric key. The header  is encrypted using the public mSEK key . The content  following the header  is encrypted using the content encryption key .","In accordance with block , the trusted content rendering application composed in block  is loaded into the trusted platform . The trusted application should make necessary checks and store the AAD  from the EELF sections of EELF  in the process data structure. After the trusted content rendering application of block  is loaded into the trusted platform , the trusted content render  (see block ) loads into trusted platform  encrypted content, which comes from the content distributor tools . Assuming that the encrypted content is stored in a local disk of the trusted platform , the trusted content render , as illustrated by block , initially extracts the header portion from the encrypted content . Library or development kits (not shown) may be provided for a content rendering software developer. In accordance with block , the extracted header is sent to the key service library through a system call, which in turn requests the key manager  to decrypt the header in accordance with block . The key service , as illustrated by block , checks the AAD  from the header and compares the AAD  with the AAD in the process data structure of the render. If they match and the application is trusted, the decrypted content key is returned to the request rendering application. Finally, the application may be decrypted and the content played.","In an embodiment of the invention, AAD  with the render application may be used to authorize to access encrypted sensitive data or contents. Because EELF (e.g., EELF ) may also be included in trusted share libraries, it may include the same AAD  into the libraries that are used by the render applications and would require the application loader and key service  to check the AAD of the libraries.","In an embodiment of the present invention the trusted platform  may be trusted by sensitive applications for providing necessary protections from unauthorized accesses. This would include protecting memory accesses through various interfaces and swapped pages. The code space of sensitive applications is preferably protected from being accessed or altered without authorization. An example of a sensitive application would be DVD player software which would need the operating system (OS) to provide protections to licensed contents and other sensitive information that the software handles. This data may be decrypted into clear contents and rendered in the applications' memory space. The trusted platform  preferably protects the data from being accessed without authorization by any other processes running in the system, including processes with root privileges.","The owner of the trusted platform  preferably has physical access to the platform and operating system root privileges. The ownership model to the trusted platform module specified by a Trusted Computing Group (TCG) is preferably honored. Thus, the trusted platform  preferably has a single owner who has the authorization data to prove the ownership of the trusted platform module, therefore ownership of the trusted platform . Preferably, however, each entity bound to the trusted platform module would have specific authorization data which may not be accessible by the module owner. A trusted platform vendor may have special authorization data to access a set of maintenance capabilities to the trusted platform , which are known only to the specific platform vendor.","Reference throughout this specification to \u201cone embodiment\u201d, \u201can embodiment\u201d, or \u201ca specific embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention and not necessarily in all embodiments. Thus, respective appearances of the phrases \u201cin one embodiment\u201d, \u201cin an embodiment\u201d, or \u201cin a specific embodiment\u201d in various places throughout this specification are not necessarily referring to the same embodiment. Furthermore, the particular features, structures, or characteristics of any specific embodiment of the present invention may be combined in any suitable manner with one or more other embodiments. It is to be understood that other variations and modifications of the embodiments of the present invention described and illustrated herein are possible in light of the teachings herein and are to be considered as part of the spirit and scope of the present invention.","Further, at least some of the components of an embodiment of the invention may be implemented by using a programmed general purpose digital computer, by using application specific integrated circuits, programmable logic devices, or field programmable gate arrays, or by using a network of interconnected components and circuits. Connections may be wired, wireless, by modem, and the like.","It will also be appreciated that one or more of the elements depicted in the drawings\/figures can also be implemented in a more separated or integrated manner, or even removed or rendered as inoperable in certain cases, as is useful in accordance with a particular application. It is also within the spirit and scope of the present invention to implement a program or code that can be stored in a machine-readable medium to permit a computer to perform any of the methods described above.","Additionally, any signal arrows in the drawings\/Figures should be considered only as exemplary, and not limiting, unless otherwise specifically noted. Furthermore, the term \u201cor\u201d as used herein is generally intended to mean \u201cand\/or\u201d unless otherwise indicated. Combinations of components or steps will also be considered as being noted, where terminology is foreseen as rendering the ability to separate or combine is unclear.","As used in the description herein and throughout the claims that follow, \u201ca\u201d, \u201can\u201d, and \u201cthe\u201d includes plural references unless the context clearly dictates otherwise. Also, as used in the description herein and throughout the claims that follow, the meaning of \u201cin\u201d includes \u201cin\u201d and \u201con\u201d unless the context clearly dictates otherwise.","The foregoing description of illustrated embodiments of the present invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed herein. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes only, various equivalent modifications are possible within the spirit and scope of the present invention, as those skilled in the relevant art will recognize and appreciate. As indicated, these modifications may be made to the present invention in light of the foregoing description of illustrated embodiments of the present invention and are to be included within the spirit and scope of the present invention.","Thus, while the present invention has been described herein with reference to particular embodiments thereof, a latitude of modification, various changes and substitutions are intended in the foregoing disclosures, and it will be appreciated that in some instances some features of embodiments of the invention will be employed without a corresponding use of other features without departing from the scope and spirit of the invention as set forth. Therefore, many modifications may be made to adapt a particular situation or material to the essential scope and spirit of the present invention. It is intended that the invention not be limited to the particular terms used in following claims and\/or to the particular embodiment disclosed as the best mode contemplated for carrying out this invention, but that the invention will include any and all embodiments and equivalents falling within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
