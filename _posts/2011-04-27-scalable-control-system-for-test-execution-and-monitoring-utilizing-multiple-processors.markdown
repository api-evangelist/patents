---
title: Scalable control system for test execution and monitoring utilizing multiple processors
abstract: Various example embodiments are directed to systems and methods for managing a plurality of distributed test engines to test at least one device under analysis (DUA). A controller and a control database may be used to manage the plurality of test engines. The control database may have stored thereon a plurality of configuration documents, a plurality of instruction documents, and at least one statistics document. Each configuration document may be associated with at least one of the plurality of test engines and may indicate an execution group of the associated at least one test engine. Each instruction document may be associated with an execution group and may comprise an indication of a testing task to be performed by the execution group associated with the instruction document. The controller may be configured to write to the plurality of configuration documents to assign each of the plurality of test engines to an execution group; write to the plurality of instruction documents to provide, for each execution group, a testing task to be performed by test engines of the execution group on the at least one DUA. The control database may configured to receive from at least a portion of a plurality of test engines an update to the at least one statistics document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08464219&OS=08464219&RS=08464219
owner: Spirent Communications, Inc.
number: 08464219
owner_city: Sunnyvale
owner_country: US
publication_date: 20110427
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DESCRIPTION"],"p":["Computer network testing and monitoring applications are used to identify and protect computer networks, equipment, and\/or software from operational and security-related risks. Distributed testing and\/or monitoring applications include multiple remote clients controlled by a central controller. Each remote client is instructed to perform all or a portion of a testing and\/or monitoring task, such as detecting or simulating a malicious attack, simulating a load, etc.","The remote clients are controlled and coordinated by the central controller using a message-based approach. According to a message-based approach, the controller sends an instruction message or messages to each remote client for each action, or portion thereof, that the remote client is to perform. The remote clients must provide the controller with a response to each message to validate the success or failure of the request. Some existing systems limit the volume of required messages somewhat by using a multicast protocol from the controller to all remote clients. The controller obtains feedback from the remote clients using a polling scheme. According to a polling scheme, the controller solicits feedback from each client with directed or multicast messages. Protocols for client-controller communications are typically proprietary, increasing the costs of system development. Further, the rate of message exchange between the controller and the remote client may be limited based on the processing capacity of the central controller as well as the capacity of its network access interface.","Practically, limitations on message volume limit the number of remote clients that may be used in distributed testing and monitoring applications. For example, keeping track of the status of multiple remote clients may tax the processing capacity of the central controller, causing it to fall behind and knock the system out of synchronization. Also, control messages for message-based distributed testing and monitoring applications may not easily pass through firewalls, placing additional practical limitations on the usefulness of the systems.","Various example embodiments may be directed to systems and methods for distributed testing and monitoring applications. A plurality of distributed test engines may be utilized to perform testing tasks on a device and\/or devices under analysis. Each test engine may perform all or a portion of a testing task. The test engines may be directed by a controller and a control database. The control database may store one or more control documents for configuring, instructing and\/or receiving the results of testing tasks performed by the test engines. Some or all of the control documents may be test engine-specific, while others may be specific to a particular group of test engines. The controller may update the control documents at the control database to manage the operation of the test engines. For example, the controller may change or update a configuration, assign a test engine to a group, assign a testing task to one or a group of test engines, etc. Upon completion of a testing task and\/or after generating reportable result data, the test engines may record results at the one or more control documents, where it may be accessible to the controller. According to various example embodiments, the test engines may access the control database via an application program interface (API) that may be integral to the control database and\/or may be implemented as a network protocol wrapper and\/or interface wrapper. The API may be programmed to enable communication with the control database (e.g., by the controller and\/or the test engines) via a communication protocol, such as a hypertext transfer protocol (HTTP). For example, the API may receive instructions that may be used from the controller and\/or the test engines to access (e.g., read and\/or write to) documents stored at the control database.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","100","108","118","118","118","118","118","116","116","118"]},"Example testing tasks to be performed on DUA's  may include, for example, monitoring tasks (e.g., Secure Shell (SSH) channel monitoring, Simple Network Management Protocol (SNMP) monitoring, protocol instrumentation, etc.), or interactive tasks (e.g., concurrency scale tests, network performance tests, fuzz tests, etc.). Some testing tasks may be performed individually by a single test engine , while other testing tasks may be performed collectively by multiple test engines  working in conjunction with one another. According to various example embodiments, each test engine  may be implemented as a software element (e.g., a program or script) executed by one or more computer devices. In various example embodiments, a single computer device may implement multiple test engines . The test engines  may be in communication with the one or more devices under analysis  via a network , which may be any suitable form of local and\/or wide area network.","Operation of the test engines  may be controlled by a controller  utilizing a control database . The control database  may comprise various documents , ,  for providing instructions to the test engines  and receiving results of testing tasks performed by the test engines . The test engines  may access the documents , ,  via an API . For example, the API  may provide access to the control database  to the controller  and the plurality of test engines . For example, the API may process instructions from the controller  and\/or the test engines  to read and\/or write to the various documents , , , as described herein. According to various example embodiments, functionality for implementing the API  may be integral to the control database  or, in various example embodiments, may be coded as a separate interface wrapper . The API  may provide access to the control database  according to any suitable protocol. In some example embodiments, the API  may utilize Hypertext Transfer Protocol (HTTP). For example, HTTP protocol communications may take place on port eighty (80), allowing communications between the test engines  and the control database  through network firewalls. In some example embodiments, other firewall capable protocols and\/or configurations may be used. Also, in various example embodiments, the API  may be implemented to respond to requests consistent with Representational State Transfer (REST) constraints (e.g., the API may be RESTful). The test engines  may access the control database , for example, via a network that may be the network  or may be a separate network (e.g., as described herein). One example of a database including an integral API is the CouchDB available from the Apache Software Foundation.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["200","108","100","200","100","200","201","203","201","108","201","203","102","104","203","110","112","114","104","110","112","114"]},"At , the test engines  may be initialized, for example, utilizing one or more configuration documents . According to various example embodiments, each test engine  may have a configuration document  or a portion thereof, describing a configuration status of the test engine . Configuration documents  may be unique to a single test engine  and\/or shared among multiple test engines . The configuration documents  may be populated (e.g., written to) by assigned test engines , the controller  or both. For example, the test engine  may provide current configuration information including, for example, information about the platform on which it is running, the version of the software that it is currently executing and its boot time. The controller  may provide other information including, for example, a group assignment, an update interval (e.g., an interval at which the test engine  should update the configuration document ) and logging settings. Also, for example, the controller  may write to the configuration document  a software version and\/or operating parameter that the associated testing engine  should execute.","At initialization, each test engine  may access its configuration document  and may make appropriate modifications and\/or updates to initialization parameters. Example initialization parameters may comprise test engine versions, test engine local settings, license key material, and time synchronization. For example, a test engine  may access its configuration document  and write a current version identification (for the test engine  itself and\/or a component thereof). If the controller  has written a new version of the test engine  or any of its components to the configuration document , the test engine  may download and install updated software matching the version identifier or identifiers from the configuration document . Similarly, the test engine  may report various local settings to the configuration document , and retrieve any desired setting changes indicated by the controller  (e.g., as described at  below).","According to various example embodiments, initializing a test engine  may also involve the exchange of license key material. For example, the control database  may require each test engine  to produce license key material before allowing the test engine  to access a configuration document  or other document. In this way, the controller  and database  may ensure that only authorized test engines  have access to the system  and that all test engines  with access to the system are properly licensed. Similarly, in some example embodiments, a test engine  may require license key material from the controller  before accepting initialization data. For example, the test engines  may be programmed to avoid accepting instructions from controllers  that are not authorized. In various example embodiments, the controller  may deposit its license key material at the database  in a location accessible to the appropriate test engine. License key material may include any suitable type of authentication and\/or security data including, for example, a digital certificate, a piece of data encrypted with a private key of the test engine  and\/or controller, etc. Also, in various example embodiments, license key material may be communicated between the test engines  and controller  via the control database  (e.g., via the configuration documents ).","According to various example embodiments, time synchronization may also occur at about the time of initialization . For various testing tasks, it may be desirable for all or a portion of the test engines  to start a task, complete a task and\/or perform a given intermediate task step at the same time. Accordingly, some or all of the test engines  may receive time or clock synchronization data. The synchronization data may be periodically written to the configuration documents . Such data may comprise a link or pointer to a clock. In some example embodiments, synchronization data may comprise a reference to a system clock of a computer device implementing the database  that may have been, for example, synchronized with that of a computer device implementing the controller . Upon receiving synchronization data, each test engine  may set a system clock of the computer device executing the test engine  and\/or record an offset relative to the system clock. It will be appreciated that synchronization events may occur at other times in addition to or instead of at initialization . For example, each test engine  may periodically perform a time synchronization in order to maintain synchronization across all engines.","According to some example embodiments, the configuration document  for a test engine  may comprise an indication of group assignment for the test engine  at the time of initialization . Accordingly, the test engine  may read its group assignment from the configuration document  at initialization and subsequently access its group instruction document , as described below at . In other example embodiments, a test engine's configuration document  may not indicate a group assignment at initialization . For example, this may occur when the test engine  is newly added to the system  and before the controller  has assigned the test engine  to a group.","Timing of the initialization  of a test engine  may be determined according to any suitable method. For example, according to various example embodiments, a test engine  may initialize upon start-up. If no configuration document  exists for the test engine  at the time of initialization, the control database  and\/or the controller  may create a document , for example, as described herein below at . Also, in various example embodiments, initialization may occur for a test engine  after the test engine  has completed an assigned testing task. Additionally, in some example embodiments, initialization may occur upon an update to the configuration document  or portion thereof associated with the test engine . For example, in some example embodiments, the interface wrapper  and\/or other component of the system  (e.g., the controller , the database , etc.) may be configured to alert a test engine  when its associated configuration document  is modified. This may prompt the test engine  to access the configuration document  (e.g., to begin an initialization).","At , the controller  may register each test engine , for example, by updating initialization parameters for the test engines  at the appropriate configuration documents . Accordingly, the controller  may synchronize and\/or manage the version of each test engine  and\/or each of the components thereof as well as test engine local settings. In addition, registration of a test engine at  may also comprise assigning the test engine  to a group. Each group may comprise one or more test engines  to be used to perform a common task. For example, if the controller  is to implement a testing task such as a fuzz test, the controller  may determine the number of test engines  required to implement the fuzz test and then assign that number of available test engines  to a group for performing the fuzz test. The controller  may assign a test engine  to a group by writing an indication of the group to a configuration document  associated with the test engine . The indication of the group may comprise an indication of an instruction document  associated with the group and\/or the testing task to be performed.","At , a test engine  that has been assigned to a group may retrieve task instructions from the instruction document  of the group and wait for group action to begin. For example, the task instructions may comprise a description of the task including, for example, a time that the task is to begin and, when appropriate to the task, a time when the task is to end. Other example task instructions may include specific parameters of the task (e.g., protocols to use for protocol monitoring or instrumentation, mutation forms to use for test attacks, etc.). In some example embodiments, task instructions may also include a script or software code for performing the testing task and\/or a universal resource locator (URL) pointing to the script or software code. The controller  may populate the instruction document  at . According to various example embodiments, the control database  and\/or the controller  may be configured to send an indication to group members upon modification of the instruction document . This may indicate to the group members that they should access the instruction document  to update their operating parameters. In some example embodiments, the test engines  may be configured to periodically access the instruction document  to check for updates (e.g., at an interval set by the controller  and recorded at the instruction document ). Although the description herein describes a single instruction document  accessed by multiple test engines  assigned to a common group, it will be appreciated that, in some example embodiments, each test engine  may comprise a dedicated instruction document  describing the actions to be performed by the test engine. Also, for example, task information for each test engine  may be stored at the configuration document  associated with the test engine .","Upon reaching the start time, each test engine  in a group may begin to execute the testing task indicated by the instruction document  at . Results of the testing task may be posted back to the control database , for example, at one or more statistics documents . Results may be written to the statistics document  either during the testing task or at the completion of the testing task. Execution of the testing task may continue, for example, until the task is complete, until a scheduled end time for the task has arrived and\/or a until a stop order is given by the controller . For example, the controller  may write a stop order to an instruction document . The test engine or engines  implementing testing task to be stopped may cease their operation, either upon checking the instruction document  or upon receiving notification from the database , the controller  and\/or the API  that the modification has occurred. Upon completion of a testing task, a test engine  may re-initialize at , wait for an additional group instruction to be written to the instruction document , and\/or perform any other suitable action.","The controller  may monitor results of the testing tasks by monitoring the statistics document or documents . According to various example embodiments, the controller  may perform additional analysis based on the results of the testing tasks. For example, for protocol monitoring tasks, the controller  may determine if a protocol error has occurred. For simulated attack testing tasks, the controller  may determine whether a particular attack has been successful. In various example embodiments, the additional analysis described herein may be performed by the individual test engines  and reported directly to the statistics document . The controller  may, in some example embodiments, provide a user interface to a user reflecting results of the testing tasks during and\/or after completion of the tasks.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIG. 3"],"b":["110","108","110","302","108","110","304","110","110","110","108","102","305","108","108","306","108","308","108","310","108","102","314","316","108","114","318","108","108","318","108","320","110","322","108","110"]},"As described herein, the various fields of the configuration document  may be modified by the controller  and\/or the test engine . For example, fields that may be maintained by the test engine  may include the about field , the version field , the boot time field  and the running field . The controller  may maintain the group field , the interval field  and the logging setting fields , . The configuration document  may be read by the test engine  during initialization and, for example, when no testing tasks are running. Similarly, the controller  may update the configuration document  during idle time (e.g., when no testing tasks are executing).",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 4","FIG. 4"],"b":["112","108","112","102","402","112","402","112","404","112","108","112","404","112","108","406","108","102","104","106","108","112","408","108","112","410","108","114","110","102","408","410","108","108","408","410"]},"A job identification field  may indicate an identification of the testing task to be performed by the test engines . Run parameter field  may indicate instructions to the test engines  for performing the tasking including, for example, a script for executing all or a portion of the testing task and\/or a universal resource locator (URL) indicating the location of a script for executing all or a portion of the testing task. A start time field  may indicate when the testing task is to start. When the clocks of the respective test engines  are synchronized, having a common start time may provide the ability to start multiple test engines  (e.g., test engines  in a common group) on a testing task simultaneously. A type field  indicates a type of the document  (e.g., instruction document).","According to various example embodiments, each group of test engines  (e.g., as defined by the controller ) may have an instruction document , such as the document  shown in . The instruction document  may be read by the test engines , for example, when no testing tasks are executing. In some example embodiments, the instruction document  may comprise instructions for a single test engine , or instructions for test engines  from more than one execution group.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5","b":["114","114","108","108","114","102","112","114","108","114"]},"The statistics document  illustrated in  comprises an identification field  that identifies the statistics document and a revision field  that indications a revision level of the document. A bot identification field  may identify the test engine  or test engines  that record testing task results to the document . A group field  may indicate a group identification of the test engines  that record testing task results to the document . The status field  may comprise one or more fields for receiving statistics data from the test engine  or test engines . A timestamp field  may indicate the last time that the document  was updated and a type field  may indicate the type of document (e.g., a statistics or status document ).","Different computer systems components described herein (e.g., the controller , control database , test engines  and devices under analysis  may be executed by computer devices in communication with one another according to any suitable method. For example, in some example embodiments, some or all of the computer systems described herein may be in communication with one another via a network or networks. The network or networks may operate according to any suitable wired or wireless communication protocol and may utilize any suitable hardware or software. In some example embodiments, the network or networks may include, a wide area network (WAN) such as the Internet, a local area network (LAN), etc.","The various documents described herein , ,  may be stored at the control database  in any suitable manner and according to any suitable file system and\/or file structure. For example, each instance of a document , ,  may be a distinct file at the control database . Also, in some example embodiments, one or more instances of the documents , ,  may be stored in a single logical file at the control database . For example, configuration documents  and statistics documents  corresponding to a single test engine  may be stored in the same logical file. It will be appreciated, however, that documents , ,  may be logically arranged into files in any suitable manner. In various example embodiments, the various documents described herein, , ,  may be data stored in any suitable non-transitory form according to a defined structure.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 6","FIG. 6"],"b":["100","602","118","116","108","116","118","116","108","102","104","116","116","100","602","102","104","108","602","116","116","602","102","116","116","102","108","602","104","102","110","112","114","108","108","102","108","108","116"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 7","FIG. 1","FIG. 7"],"b":["702","108","706","702","104","106","702","706","118","704","702","706","108","104","104","706","108","108","104","704","108","704","104","108","104","704","80","443","108","108","104"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 8","FIG. 8"],"b":["100","104","104","104","104","104","104","110","112","114","104","106","108","104","108","108","110","112","104","104","104","110","112","114","108","108","110","112","114","104","104","108","104","104","108","104","108","104","108"],"i":["a","a ","a ","a ","a ","a ","a ","a","a ","a ","a ","a ","a "]},"According to various example embodiments, the testing tasks performed by the test engines  may be of any suitable type. For example, one or more test engines  may be configured, as described herein, to perform monitoring tasks and interactive tasks. In monitoring testing tasks, the test engines  may observe the devices under analysis  and record properties describing the devices under analysis . In various example embodiments, each DUA  may be observed by a separate test engine  and\/or by multiple test engines . In interactive tasks, the test engines  may interact with the devices under analysis  to observe the response and\/or find a limit of the capabilities of the devices under analysis .","Examples of monitoring testing tasks may include Secure Shell (SSH) channeling monitoring, Simple Network Management Protocol monitoring, and Protocol Instrumentation. According to SSH channel monitoring, one or more test engines  may connect to a DUA  and execute a periodic command for the purpose of establishing system health. The command may, for example, check a status of a process, a level of central processor unit (CPU) utilization, a level of memory utilization, etc. The connection between the one or more test engines  and the DUA  may be made according to an SSH channel. According to SNMP monitoring, one or more test engines  may collect statistics from a Management Information Base of a DUA . Example statistics may include, for example, CPU and memory utilization, error counts, etc. According to Protocol Instrumentation, one or more test engines  may collect statistics and\/or flag errors encountered during periodic checkpoint exchanges with the DUA  using valid protocol transactions. Although each of the monitoring testing tasks is described herein with reference to a single DUA , it will be appreciated that these testing tasks may be ramped up using multiple test engines  (e.g., a group of testing engines ). For example, a group of test engines  may be assigned a testing task requiring the group to monitor a corresponding group of devices under analysis .","Interactive testing tasks may generally comprise testing tasks where the test engine  or engine  provide simulated interactions (e.g., communications and\/or connections) with the devices under analysis  to test the capacity and\/or security of the devices under analysis . Utilizing groups of test engines  to perform load testing may increase the volume and\/or the variety of types of communications and\/or connections that may be sent to and\/or initiated with the devices under analysis . Examples of interactive testing tasks include concurrency scale tests, network performance tests, fuzz tests as well as other load and\/or security-related tests. According to concurrency scale tests, a test engine  or test engines  may generate high levels of connections to a DUA  utilizing various transport protocols including, for example Transmission Control Protocol (TCP), User Datagram Protocol (UDP) and Secure Sockets Layer (SSL). The test engines  may collect statistics for the attempted connections including, for example, pass rates, timeouts, errors, latencies, etc. According to network performance testing tasks, the test engine  or engines may generate high levels of network traffic representing varied types of transactions. Statistics may be kept for bytes and packets sent and received on each interface.","According to a fuzz test, a test engine or engines  may generate invalid, unexpected and\/or random data within the structure of one or more network protocols. The invalid, unexpected and\/or random data is then provided to devices under analysis . The test engine or engines  may identify the types of invalid, unexpected or random data cause different devices under analysis  to fail, thus identifying vulnerabilities of the devices under analysis . Invalid, unexpected and\/or random data may be generated in any suitable manner. Different types of fuzz testing tasks may include structure attacks, semantics attacks and state attacks. According to a structure attack, the test engines  generate messages that contain values and\/or parameters that violate an intended protocol. Types of structure attacks include, for example, empty-field, empty-message, extra-data, incomplete, invalid-count, invalid-enum (enumeration), invalid-eol (end-of-line), invalid-field, invalid-index, invalid-length, invalid-offset, invalid-syntax, invalid-type, invalid-utf8 (Unicode Transformation Format), missing-data, missing-field, mixed-case, overflow, repeated-field, too-many-fields, truncated, underflow, wrong-encoding, fmt-string (format), fragmented-field, invalid-encoding, invalid-field, invalid-ip (IP address), invalid-path, invalid-string, recursion, self-reference, and null-char (character), etc.","According to a semantics attack, the test engines  may send the devices under analysis  messages that are technically correct, but nonetheless unexpected. For example, one type of semantics attack may involve a message that indicates an invalid (e.g., non-existent) resource, such as a printer. This can cause the DUA  to hang or crash unexpectedly. Another example of a semantics attack may be a network packet with a source Internet Protocol (IP) address of \u201call-broadcast.\u201d If the DUA  were to respond to such a packet, it would generate enough packets to flood the network. According to a state attack, the test engines  may generate messages that are semantically correct, but incorrect based on the expectations of the device. For example, one type of state attack may involve the test engines  sending messages that are out-of-order (e.g., with respect to the type of message the DUA  is expecting to receive).","Other types of interactive testing tasks may involve general tests of the overall security of the device or devices under analysis . Examples of such tasks may include, for example, negotiating a lower (e.g., less secure) encryption algorithm, dictionary attacks (brute forcing commonly-used passwords), resource exhaustion, identifying misconfiguration of the DUA , identifying mechanisms for sending messages through the DUA  that bypass various security checks, and detecting insecure implementations of standard protocols and information disclosure.","Various communications are described herein between computer and\/or software components such as, for example, the controller , the control database , the test engines  and the API . When communications between computer components takes place over the Internet or other public network, it will be appreciated that these communications may be encrypted. For example, one or more of the systems may utilize an asymmetric or public key infrastructure (PKI) method. According to a PKI system, each system may have a public key that may be used for encrypting messages and a private key that may be used for decryption. The public key may be provided to any systems having need to send data to the first system. The data may be encrypted with the public key such that it may only be decrypted with the private key, which may be kept secret by the receiving system. In this manner, all communications between the various systems may be decrypted only by their intended recipients.","The examples presented herein are intended to illustrate potential and specific implementations of the present invention. It can be appreciated that the examples are intended primarily for purposes of illustration of the invention for those skilled in the art. No particular aspect or aspects of the examples are necessarily intended to limit the scope of the present invention. For example, no particular aspect or aspects of the examples of system architectures, methods or processing structures described herein are necessarily intended to limit the scope of the invention. Also, while specific testing applications have been described herein, it will be appreciated that the applications provided according to the description herein may include other testing applications as well as non-testing applications.","It is to be understood that the figures and descriptions of the present invention have been simplified to illustrate elements that are relevant for a clear understanding of the present invention, while eliminating, for purposes of clarity, other elements. Those of ordinary skill in the art will recognize, however, that these sorts of focused descriptions would not facilitate a better understanding of the present invention, and therefore, a more detailed description of such elements is not provided herein.","Moreover, the processes associated with the present example embodiments may be executed by programmable equipment, such as computers. Software or other sets of instructions may be employed to cause programmable equipment to execute the processes. The processes may be stored in any storage device, such as, for example, a computer system (non-volatile) memory, an optical disk, magnetic tape, or magnetic disk. Furthermore, some of the processes may be programmed when the computer system is manufactured or via a computer-readable memory medium.","It can also be appreciated that certain process aspects described herein may be performed using instructions stored on a computer-readable memory medium or media that direct a computer or computer system to perform process steps. A computer-readable medium may include, for example, any non-transitory media such as, for example, memory devices such as diskettes, compact discs of both read-only and read\/write varieties, optical disk drives, and hard disk drives. A computer-readable medium may also include memory storage that may be physical, virtual, permanent, temporary, semi-permanent and\/or semi-temporary. It will be appreciated that the term non-transitory refers to the medium and not to any data stored thereon. For example, a random access memory (RAM) is non-transitory, although the data stored thereon may change regularly.","A \u201ccomputer,\u201d \u201ccomputer device,\u201d \u201cmachine,\u201d \u201ccomputer device,\u201d \u201chost,\u201d \u201cengine,\u201d or \u201cprocessor\u201d may be, for example and without limitation, a processor, microcomputer, minicomputer, server, mainframe, laptop, personal data assistant (PDA), wireless e-mail device, cellular phone, pager, processor, fax machine, scanner, or any other programmable device configured to transmit and\/or receive data over a network. Computer systems and computer-based devices disclosed herein may include memory for storing certain software applications used in obtaining, processing, and communicating information. It can be appreciated that such memory may be internal or external with respect to operation of the disclosed example embodiments. The memory may also include any means for storing software, including a hard disk, an optical disk, floppy disk, ROM (read only memory), RAM (random access memory), PROM (programmable ROM), EEPROM (electrically erasable PROM) and\/or other computer-readable memory media.","In various example embodiments of the present invention, a single component may be replaced by multiple components, and multiple components may be replaced by a single component, to perform a given function or functions. Except where such substitution would not be operative to practice embodiments of the present invention, such substitution is within the scope of the present invention. Any of the servers or computer systems described herein, for example, may be replaced by a \u201cserver farm\u201d or other grouping of networked servers (e.g., a group of server blades) that are located and configured for cooperative functions. It can be appreciated that a server farm may serve to distribute workload between\/among individual components of the farm and may expedite computing processes by harnessing the collective and cooperative power of multiple servers. Such server farms may employ load-balancing software that accomplishes tasks such as, for example, tracking demand for processing power from different machines, prioritizing and scheduling tasks based on network demand, and\/or providing backup contingency in the event of component failure or reduction in operability.","Various example embodiments of the systems and methods described herein may employ one or more electronic computer networks to promote communication among different components, transfer data, or to share resources and information. Such computer networks can be classified according to the hardware and software technology that is used to interconnect the devices in the network, such as optical fiber, Ethernet, wireless LAN, HomePNA, power line communication or G.hn. The computer networks may also be embodied as one or more of the following types of networks: local area network (LAN); metropolitan area network (MAN); wide area network (WAN); virtual private network (VPN); storage area network (SAN); or global area network (GAN), among other network varieties.","For example, a WAN computer network may cover a broad area by linking communications across metropolitan, regional, or national boundaries. The network may use routers and\/or public communication links. One type of data communication network may cover a relatively broad geographic area (e.g., city-to-city or country-to-country) which uses transmission facilities provided by common carriers, such as telephone service providers. In another example, a GAN computer network may support mobile communications across multiple wireless LANs or satellite networks. In another example, a VPN computer network may include links between nodes carried by open connections or virtual circuits in another network (e.g., the Internet) instead of by physical wires. The link-layer protocols of the VPN can be tunneled through the other network. One VPN application can promote secure communications through the Internet. The VPN can also be used to separately and securely conduct the traffic of different user communities over an underlying network. The VPN may provide users with the virtual experience of accessing the network through an IP address location other than the actual IP address which connects the access device to the network.","Computer networks may include hardware elements to interconnect network nodes, such as network interface cards (NICs) or Ethernet cards, repeaters, bridges, hubs, switches, routers, and other like components. Such elements may be physically wired for communication and\/or data connections may be provided with microwave links (e.g., IEEE 802.12) or fiber optics, for example. A network card, network adapter or NIC can be designed to allow computers to communicate over the computer network by providing physical access to a network and an addressing system through the use of MAC addresses, for example. A repeater can be embodied as an electronic device that receives and retransmits a communicated signal at a boosted power level to allow the signal to cover a telecommunication distance with reduced degradation. A network bridge can be configured to connect multiple network segments at the data link layer of a computer network while learning which addresses can be reached through which specific ports of the network. In the network, the bridge may associate a port with an address and then send traffic for that address only to that port. In various example embodiments, local bridges may be employed to directly connect local area networks (LANs); remote bridges can be used to create a wide area network (WAN) link between LANs; and\/or, wireless bridges can be used to connect LANs and\/or to connect remote stations to LANs.","In various example embodiments, a hub may be employed which contains multiple ports. For example, when a data packet arrives at one port of a hub, the packet can be copied unmodified to all ports of the hub for transmission. A network switch or other devices that forward and filter OSI layer 2 datagrams between ports based on MAC addresses in data packets can also be used. A switch can possess multiple ports, such that most of the network is connected directly to the switch, or another switch that is in turn connected to a switch. The term \u201cswitch\u201d can also include routers and bridges, as well as other devices that distribute data traffic by application content (e.g., a Web URL identifier). Switches may operate at one or more OSI model layers, including physical, data link, network, or transport (e.g., end-to-end). A device that operates simultaneously at more than one of these layers can be considered a multilayer switch. In certain example embodiments, routers or other like networking devices may be used to forward data packets between networks using headers and forwarding tables to determine an optimum path through which to transmit the packets.","As employed herein, an application server may be a server that hosts an API, such as the API , to expose business logic and business processes for use by other applications. Examples of application servers include J2EE or Java EE 5 application servers including WebSphere Application Server. Other examples include WebSphere Application Server Community Edition (IBM), Sybase Enterprise Application Server (Sybase Inc), WebLogic Server (BEA), JBoss (Red Hat), JRun (Adobe Systems), Apache Geronimo (Apache Software Foundation), Oracle OC4J (Oracle Corporation), Sun Java System Application Server (Sun Microsystems), and SAP Netweaver AS (ABAP\/Java). Also, application servers may be provided in accordance with the .NET framework, including the Windows Communication Foundation, .NET Remoting, ADO.NET, and ASP.NET among several other components. For example, a Java Server Page (JSP) is a servlet that executes in a web container which is functionally equivalent to CGI scripts. JSPs can be used to create HTML pages by embedding references to the server logic within the page. The application servers may mainly serve web-based applications, while other servers can perform as session initiation protocol servers, for instance, or work with telephony networks. Specifications for enterprise application integration and service-oriented architecture can be designed to connect many different computer network elements. Such specifications include Business Application Programming Interface, Web Services Interoperability, and Java EE Connector Architecture.","Any patent, publication, or other disclosure material, in whole or in part, that is said to be incorporated by reference herein is incorporated herein only to the extent that the incorporated materials does not conflict with existing definitions, statements, or other disclosure material set forth in this disclosure. As such, and to the extent necessary, the disclosure as explicitly set forth herein supersedes any conflicting material incorporated herein by reference. Any material, or portion thereof, that is said to be incorporated by reference herein, but which conflicts with existing definitions, statements, or other disclosure material set forth herein will only be incorporated to the extent that no conflict arises between that incorporated material and the existing disclosure material.","While various example embodiments of the invention have been described herein, it should be apparent, however, that various modifications, alterations and adaptations to those embodiments may occur to persons skilled in the art with the attainment of some or all of the advantages of the present invention. The disclosed example embodiments are therefore intended to include all such modifications, alterations and adaptations without departing from the scope and spirit of the present invention as set forth in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"FIGURES","p":["Various example embodiments of the present invention are described here by way of example in conjunction with the following figures, wherein:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 8","FIG. 1"]}]},"DETDESC":[{},{}]}
