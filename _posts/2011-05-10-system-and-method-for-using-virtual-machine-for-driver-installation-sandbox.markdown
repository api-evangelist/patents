---
title: System and method for using virtual machine for driver installation sandbox
abstract: A method, system and computer program product for providing driver functionality in computing system includes installing an operating system on the computing system; forming a plurality of isolated sandboxes running on the computing system under control of the operating system; during an attempt to install a driver, installing driver stub in the operating system; installing the driver in one of the isolated sandboxes, wherein the driver directly uses at least part of system resources; using a gateway between the driver stub and the installed driver to provide an interface for transmitting requests from the driver stub to driver.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08171504&OS=08171504&RS=08171504
owner: Parallels IP Holdings GmbH
number: 08171504
owner_city: 
owner_country: CH
publication_date: 20110510
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present application is a continuation of U.S. patent application Ser. No. 11\/673,585, filed Feb. 11, 2007, entitled SYSTEM AND METHOD FOR USING VIRTUAL MACHINE FOR DRIVER INSTALLATION SANDBOX, now U.S. Pat. No. 7,941,813, which claims priority to U.S. Provisional Patent Application No. 60\/774,216, filed Feb. 17, 2006, entitled SYSTEM AND METHOD FOR USING VIRTUAL MACHINE FOR DRIVER INSTALLATION SANDBOX, which is incorporated herein by reference in its entirety.","1. Field of the Invention","This invention relates to a method and system for improving security of operating systems in computing systems running sandboxes.","2. Description of the Related Art","One of the problems of a modern operating system development is dealing with third-party device drivers. Typically, an operating system vendor, such as Microsoft, the developer of MS WINDOWS, and the various providers of LINUX, have to allow third party vendors to incorporate, or import, their drivers into operating system kernel address space. Quite often, the quality of the code of these drivers is rather uneven\u2014with the proliferation of vendors of hardware\u2014video cards, Wi-Fi cards, digital cameras, mobile phones, etc.\u2014the number of device drivers increases as well, while the skill set of the developers of these drivers is often mediocre.","The problem arises in that the operating system kernel address space is monolithic. Therefore, the operating system kernel has no realistic choice, other than to locate the device driver within the same operating system kernel space as other OS kernel code. Thus, any errors, mistakes, bugs, etc. in the driver itself can crash the computer system, can \u201chang it up,\u201d can result in other errors, such as attempts to access a memory location that should not be accessed, or one that does not exist, resulting in an exception or an interrupt, etc. The operating system vendor, nonetheless, has no realistic choice, since placing the driver in user space means that the overhead penalty would be unacceptable.","One of the conventional approaches of dealing with this problem is exemplified by the XEN approach, where a service operating system, or a number of service operating systems, are launched in a Virtual Machine environment. In this approach, one Virtual Machine can be assigned to one driver. This provides some measure of fault isolation. However, the XEN approach has not become popular in the industry, in part because of the complexity of the administration and support, and in part because each XEN Virtual Machine\/domain has its own full-fledged operating system. This feature limits the potential for scalability.","INTEL\u00ae Virtualization Technology provides for running multiple \u201cvirtual\u201d systems, e.g., multiple operating systems on a single hardware platform. This technology is hardware supported and provides hardware enhancements built into Intel's server platforms.","Another conventional approach goes back to the 1980s, and involves the use of microkernels. Some examples of microkernels are the GNU Hurd project, the Mach operating system kernel and others known in the art. In essence, true microkernels divide the monolithic kernel address space into several address spaces. This is a workable approach in theory, however, in practice, modern hardware processor architecture does not directly support efficient non-monolithic kernel address space. Therefore, as a practical matter, the true microkernel approach is more of a theoretical interest than a practical, commercially-realized idea.","Accordingly, the present invention is related to a system and method for using Virtual Machines as a driver installation sandbox that substantially obviates one or more of the disadvantages of the related art.","In one aspect, there is provided a system, method and computer program product for providing driver functionality in a computing system, including installing a full-functional operating system on the computing system; forming a plurality of isolated sandboxes running under control of a common supporting means; during an attempt to install a driver in the operating system, installing a driver stub in the operating system; installing the driver in one of the isolated sandboxes; and using a gateway between the driver stub and the installed driver to provide an interface for transmitting requests from the driver stub to the driver and responses back from the driver to the operating system.","Optionally, the driver directly uses at least some system resources that can include hardware resources, such as I\/O addresses, or interrupts and software resources, such as OS structures. A controlled memory area shared for common access of the operating system and\/or at least some of the sandboxes and may be used for effective communication. Parameters of the controlled memory area are dynamically changed, including any of its access level, contents, size, location and sharing mode. The operating system and the sandboxes have memory spaces that are at least partially isolated from each other. The computing system further can include at least two drivers installed in different sandboxes. The driver allocates resources on the OS kernel level, or with OS kernel privilege level and allocated resources are associated in OS kernel with driver stub. The sandboxes can be implemented as isolated Virtual Machines running on the computing system, and common supporting means includes using one of a Virtual Machine Monitor and\/or a Hypervisor. The sandboxes can share system resources.","In another aspect, a system for managing driver installation includes a full-fledged operating system running on the computing system with operating system (OS) kernel; an isolated sandbox; a driver running in the sandbox; a gateway that provides an interface from the OS kernel to the driver in the sandbox; an API redirection module that redirects driver calls via the gateway to the isolated sandbox and returns results of driver calls from the sandbox via the gateway. The driver calls are issued by user applications and\/or by other drivers.","In another aspect, a method for installing a driver includes initiating an isolated sandbox; launching a driver in the isolated sandbox; using a gateway that interfaces from the OS kernel to the driver in the isolated sandbox; and initiating an API redirection process that redirects driver calls to the isolated sandbox via the gateway and returns a result of driver call from the isolated sandbox via the gateway.","In another aspect, a computer useable medium for providing driver functionality, the computer useable medium having computer program logic stored thereon and executing on at least one processor, the computer program logic includes computer program code means for installing an operating system on the computing system; computer program code means for forming a plurality of isolated sandboxes running on the computing system under control of the operating system; during an attempt to install a driver, computer program code means for installing driver stub in the operating system; computer program code means for installing the driver in one of the isolated sandboxes, wherein the driver directly uses at least part of system resources; and computer program code means for using a gateway between the driver stub and the installed driver to provide an interface for transmitting requests from the driver stub to driver.","In another aspect, a method for installing a driver includes, on a computer having an operating system running in operating system kernel space, initiating a Virtual Machine running in user space; launching a driver in the Virtual Machine; initiating a gateway that interfaces to the driver; and initiating a redirection module that redirects driver calls from a user application to the gateway and returns a result of the driver call from the gateway back to the user application.","Additional features and advantages of the invention will be set forth in the description that follows, and in part will be apparent from the description, or may be learned by practice of the invention. The advantages of the invention will be realized and attained by the structure particularly pointed out in the written description and claims hereof as well as the appended drawings.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are intended to provide further explanation of the invention as claimed.","Reference will now be made in detail to the preferred embodiments of the present invention, examples of which are illustrated in the accompanying drawings.","Thus, the present invention is directed to the use of Virtual Machine technology to implement secure sandboxes used for installation of third party drivers. The use of Virtual Machine technology makes it possible to load and install a driver into what is essentially a very-limited purpose operating system\u2014unlike full featured operating systems that can be installed into Virtual Machines that they are normally designed to emulate (or otherwise virtualize).","To perform the operations, sandboxes may be configured during the boot loading of the computing system or during the boot loading of the operating system. In one embodiment, the sandbox may be formed using a preconfigured snapshot of the virtual machine, ready for use or configured after starting the virtual machine from a snapshot that provides for fast sandbox installation. Also, a snapshot of virtual machine may be used for error recovery, replication of drivers and other purposes. As another alternative, preconfigured sandbox snapshots may be used.","In the present invention, the term \u201coperating system\u201d is being used in the definition \u201climited OS\u201d or \u201climited purpose OS\u201d to define a software component required just for driver operability, and which does not need to perform most other basic tasks of operating system, although such limited functionality is not a strict requirement of such an \u201coperating system.\u201d For example, such an operating system can be limited essentially to little more than being able to handle the activities of the third party driver. In some embodiments of the invention, the \u201climited OS\u201d can provide for running user processes along with the installed drivers. This \u201climited OS\u201d can be integrated with the Primary (host) OS. For example, the limited OS can share kernel services and\/or kernel memory with the Primary OS.","The preferred embodiments of the invention can use conventional Virtual Machines known in the art or similar constructs. Some examples of software being able to support basic Virtual Machines are VMware Virtual Machine technology\/Virtual PC (e.g., binary translation\/direct execution), XEN or Parallels Software International, Inc., VM (e.g., software debugging\/direct execution) technology, although the invention is not limited to any particular virtualization technology. Also, Intel VT, or AMD Pacifica technology, or similar hardware-supported virtualization mechanisms are examples of hardware means for supporting sandboxes described herein.","The limited-purpose operating system inside the Virtual Machine serves to communicate with the primary operating system (through a Virtual Machine Monitor (VMM), through a Hypervisor, see U.S. application patent Ser. No. 11\/348,382; Filed: Feb. 7, 2006, incorporated herein by reference in its entirety, or through some other mechanism), and provides for memory management related to shared memory access with the main OS kernel memory. The limited-purpose operating system also provides access to various structures of the Primary Operating System, and also provides various function calls and service calls of the primary operating system, through which the driver does its actual work, optionally provide parsing and alteration of function call parameters and return values.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1A","FIG. 1A","FIG. 1A"],"b":["102","104","105","106","108","105","128","128","112","128","128","114","112","110","108","114","128","128","108","114","122","112","116","128","128","116","110","112","116","128","128","120","124"]},"A Virtual Machine  is also running on the computing system , which may have a Virtual Machine monitor (VMM), not shown in this figure, or another interface to the operating system . The function calls  are redirected by the API redirection module  to a gateway . The gateway  is an interface to the Virtual Machine , and more particularly, to the drivers . The gateway  may be viewed as a part of Virtual Machine monitor, or VMM or Hypervisor of any type. Although a full VMM can be used as a gateway , a substantially more limited VMM can preferably be used. In essence, the gateway  knows the addresses at which the drivers  are located, and knows the parameters that those drivers expect when called, as well as the output parameters of those drivers, also, the gateway  knows how to interface to the operating system APIs with the driver  parameters.","The gateway  then interfaces with drivers that are located within the Virtual Machine, such as through the device drivers A, B. The results are returned, through the gateway , back to the driver stub , and then back to the user process , or to the device driver  as shown in .","In some embodiments of the invention, where user processes run in the sandbox, additional communication means may be created to tie the user processes to the primary operating system, for example additional memory sharing between Virtual Machine and Primary OS user process may be used. As one example, the gateway  can provide such functionality","In one embodiment, the gateway is available to receive, data, and pack and unpack data in a computing system's memory when data is transmitting from the operating system to the driver in the sandbox and back. Such an implementation of the gateway may be done, e.g., during API call processing.","Although the present invention is related mainly to computing systems being implemented as an integrated hardware set, other embodiments are possible. For example, the sandbox may be created on a remote computing system and the gateway may include network communication means. The implementation where computing system is implemented as a computer cluster is also possible.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 1B","FIG. 1B","FIG. 1A"],"b":["106","150","150","152","152","130","102","105"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2A","FIG. 2A"],"b":["202","204","206","208","128","130"]},"The driver  may then be installed in the sandbox  (i.e., in the Virtual Machine) (step ) or the driver  may have been previously installed. A driver stub  is then set up, and the API redirection  is configured (step ). The gateway  is then configured for facilitating communication between the driver  and the driver stub  (step ). The installation is then complete (step ).",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 2B","FIG. 2B","FIG. 1A","FIG. 1A","FIG. 4"],"b":["252","105","254","256","126","126","105","258","120","260","128","128","122","262","130","264","126","268"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 3A","FIG. 3A"],"b":["126","108","114","112","304","112","120","306","120","128","130","308","128","110","108","114","310","312"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3B","FIG. 3B","FIG. 4"],"b":["128","130","122","124","362","364","120","366","120","128","130","124","128","370"]},"Not all memory can be directly modified by the driver , but only that memory which is explicitly configured as \u201cshared,\u201d for example, configured as shared for read, write, execute, access or any combination thereof.","In step , the driver  optionally returns the output values through the gateway  to whichever process or thread called the driver . The process then finishes in step .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 4","FIG. 1A","FIG. 4","FIG. 1A","FIG. 4"],"b":["126","126","130","105"]},"An example of the computing system  is illustrated in . The computing system  includes one or more processors, such as processor . The processor  is connected to a communication infrastructure , such as a bus or network. Various software implementations are described in terms of this exemplary computer system. After reading this description, it will become apparent to a person skilled in the relevant art how to implement the invention using other computer systems and\/or computer architectures.","Computing system  also includes a main memory , preferably random access memory (RAM), and may also include a secondary memory . The secondary memory  may include, for example, a hard disk drive  and\/or a removable storage drive , representing a magnetic tape drive, an optical disk drive, etc. The removable storage drive  reads from and\/or writes to a removable storage unit  in a well known manner. Removable storage unit  represents a magnetic tape, optical disk, or other storage medium that is READ by and written to by removable storage drive . As will be appreciated, the removable storage unit  can include a computer usable storage medium having stored therein computer software and\/or data.","In alternative implementations, secondary memory  may include other means for allowing computer programs or other instructions to be loaded into computing system . Such means may include, for example, a removable storage unit  and an interface . An example of such means may include a removable memory chip (such as an EPROM, or PROM) and associated socket, or other removable storage units  and interfaces  which allow software and data to be transferred from the removable storage unit  to computing system .","Computing system  may also include one or more communications interfaces, such as communications interface . Communications interface  allows software and data to be transferred between computing system  and external devices. Examples of communications interface  may include a modem, a network interface (such as an Ethernet card), a communications port, a PCMCIA slot and card, etc. Software and data transferred via communications interface  are in the form of signals  which may be electronic, electromagnetic, optical or other signals capable of being received by communications interface . These signals  are provided to communications interface  via a communications path (i.e., channel) . This channel  carries signals  and may be implemented using wire or cable, fiber optics, an RF link and other communications channels. In an embodiment of the invention, signals  comprise data packets sent to processor . Information representing processed packets can also be sent in the form of signals  from processor  through communications path .","The terms \u201ccomputer program medium\u201d and \u201ccomputer usable medium\u201d are used to generally refer to media such as removable storage units  and , a hard disk installed in hard disk drive , and signals , which provide software to the computing system .","Computer programs are stored in main memory  and\/or secondary memory . Computer programs may also be received via communications interface . Such computer programs, when executed, enable the computing system  to implement the present invention as discussed herein. In particular, the computer programs, when executed, enable the processor  to implement the present invention. Where the invention is implemented using software, the software may be stored in a computer program product and loaded into computing system  using removable storage drive , hard drive  or communications interface .","Having thus described a preferred embodiment, it should be apparent to those skilled in the art that certain advantages of the described method and apparatus have been achieved. It should also be appreciated that various modifications, adaptations, and alternative embodiments thereof may be made within the scope and spirit of the present invention. The invention is further defined by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE ATTACHED FIGURES","p":["The accompanying drawings, which are included to provide a further understanding of the invention and are incorporated in and constitute a part of this specification, illustrate embodiments of the invention and together with the description serve to explain the principles of the invention.","In the drawings:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
