---
title: Flexible interrupt handling methods for optical networking apparatuses with multiple multi-protocol optical networking modules
abstract: An API including an interrupt handler registration function and one or more interrupt dispatchers, is provided to an optical networking apparatus to facilitate registration of interrupt handlers to handle interrupts triggered by the function blocks of multi-protocol optical networking modules (MPONM). Each registered interrupt handler may handle interrupts triggered by one or more function blocks of any of the MPONM, and/or for one or more cause. In one embodiment, the one or more interrupt dispatchers are equipped to determine the triggering function block and the cause, and determine the interrupt handlers, if any, are to be notified. Each of the interrupt handlers to be notified is notified accordingly, including the triggering function block and the cause.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07130948&OS=07130948&RS=07130948
owner: 
number: 07130948
owner_city: 
owner_country: 
publication_date: 20020802
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION","Terminology","Section Headings, Order of Descriptions and Embodiments","Overview","Networking Applications","Module Data Structure","Module Initialization Function","Organization of Interrupt Registration Data","Interrupt Handler Register Function","Enabling\/Disabling Function Block\/Event Type Interrupt Functions","Interrupt Dispatcher Functions","Interrupt Handling Method","Conclusion and Epilogue"],"p":["The present invention relates to software methods and networking apparatuses. More specifically, the present invention relates to flexible interrupt handling methods for multi-protocol optical networking modules (MPONM) in an optical networking apparatus.","With advances in integrated circuit, microprocessor, networking and communication technologies, an increasing number of devices, in particular, digital computing devices, are being networked together. Devices are often first coupled to a local area network, such as an Ethernet based office\/home network. In turn, the local area networks are interconnected together through wide area networks, such as SONET networks, ATM networks, Frame Relays, and the like. Of particular importance is the TCP\/IP based global inter-network, the Internet. Historically, data communication protocols specified the requirements of local\/regional area networks, whereas telecommunication protocols specified the requirements of the regional\/wide area networks. The rapid growth of the Internet has fueled a convergence of data communication (datacom) and telecommunication (telecom) protocols and requirements. It is increasingly important that data traffic be carried efficiently across local, regional, as well as wide area networks.","As a result of this trend of increased connectivity, an increasing number of applications that are network dependent are being deployed. Examples of these network dependent applications include but are not limited to, the world wide web, email, Internet based telephony, and various types of e-commerce and enterprise applications. The success of many content\/service providers as well as commerce sites depend on high speed delivery of a large volume of data across wide areas. As a result, high speed data trafficking devices, such as high speed optical, or optical-electro routers, switches and so forth, are needed.","Unfortunately, because of the multiplicity of protocols, including datacom and telecom protocols, that may be employed to traffic data in the various types of networks, designers and developers of networking components and equipment, such as line cards, routers and switchers, have to wrestle with a multitude of prior art protocol processors. Each of these protocol processors is typically dedicated to the support of either local\/regional or regional\/wide area protocols, in their design of these components\/equipment. This burden is costly, and slows down the advancement of high speed networks.","U.S. patent application Ser. Nos. 09\/860,207 and 09\/861,002, both filed on May 18, 2001, entitled \u201cA MULTI-PROTOCOL NETWORKING PROCESSOR WITH DATA TRAFFIC SUPPORT SPANNING LOCAL, REGIONAL AND WIDE AREA\u201d, and \u201cAN OPTICAL NETWORKING MODULE INCLUDING PROTOCOL PROCESSING AND UNIFIED SOFTWARE CONTROL\u201d respectively, disclosed a novel highly flexible multi-protocol processor capable of supporting high-speed data traffic in local, regional, and wide area networks, and a multi-protocol optical networking module that can be constructed from such a multi-protocol processor. Resultantly, sophisticated optical-electrical networking apparatuses such as optical-electrical routers and switches may be built more efficiently with multiple ones of the disclosed multi-protocol optical networking module (each having its own multi-protocol processor).","In turn, the task for developing networking applications for such sophisticated optical-electrical networking apparatus with multiple ones of the disclosed multi-protocol optical networking module (each having its own multi-protocol processor) have become much more difficult, in particular, the task for handling various interrupts that may occur from the various multi-protocol optical networking module. Accordingly, a software architecture, including methods, that reduces the complexity and improves the ease for developing networking applications for such complex networking apparatuses with multiple ones of the disclosed multi-protocol optical networking module (each having its own integrated multi-protocol processor) is desired.","The present invention includes software methods, in particular, an application programming interface (API) for networking applications to interact with function blocks of multi-protocol processors of the MPONM of an optical-electrical networking apparatus, including an API having registration and dispatcher functions that support flexible handling of interrupts of the various MPONM.","In the following description, various aspects of the present invention will be described. However, it will be apparent to those skilled in the art that the present invention may be practiced with only some or all aspects of the present invention. For purposes of explanation, specific numbers, materials and configurations are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that the present invention may be practiced without the specific details. In other instances, well-known features are omitted or simplified in order not to obscure the present invention.","Parts of the description will be presented in data processing terms, such as data, variables, methods, request, return, and so forth, consistent with the manner commonly employed by those skilled in the art to convey the substance of their work to others skilled in the art. As well understood by those skilled in the art, these quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, and otherwise manipulated through electrical and\/or optical components of a processor and its subsystems.","Part of the descriptions will be described using networking terms, including but are not limited to:",{"@attributes":{"id":"p-0020","num":"0019"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Egress","Outgoing data path from the system to the network"]},{"entry":[{},"HDLC","High-Level Data Link Control. A communication"]},{"entry":[{},{},"protocol used in Packet Over SONET switching"]},{"entry":[{},{},"network."]},{"entry":[{},"Ingress","Incoming data path from the network to the system"]},{"entry":[{},"IP","Internet Protocol"]},{"entry":[{},"LAN","Local Area Network"]},{"entry":[{},"MAC","Media Access Control layer, defined for Ethernet"]},{"entry":[{},{},"systems"]},{"entry":[{},"POS","Packet Over SONET"]},{"entry":[{},"PPP","Point to Point Protocol"]},{"entry":[{},"SONET","Synchronous Optical NETwork, a PHY"]},{"entry":[{},{},"telecommunication protocol"]},{"entry":[{},"WAN","Wide Area Network"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The terms \u201cprovide\u201d and \u201cproviding\u201d, and other terms of the like, as used in this specification and in the claims, include indirect as well as direct provision of the object of the provision operation. That is, an entity A may \u201cprovide\u201d another entity B with an item C (the object of the provision operation) directly, or indirectly by providing entity B with the information to obtain object item C, such as a pointer to a location from which the object item C may be obtained.","Section headings are merely employed to improve readability, and they are not to be construed to restrict or narrow the present invention.","Various operations will be described as multiple discrete steps in turn, in a manner that is most helpful in understanding the present invention, however, the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular, these operations need not be performed in the order of presentation.","The phrase \u201cin one embodiment\u201d is used repeatedly. The phrase generally does not refer to the same embodiment, however, it may. The terms \u201ccomprising\u201d, \u201chaving\u201d and \u201cincluding\u201d are synonymous, unless the context dictates otherwise.","Referring now to \u2013wherein three block diagrams illustrating an overview of the software methods of the present invention, in accordance with one embodiment, including an optical-electrical networking apparatus  having multiple MPONM \u2013within which the present invention may be practiced, are shown. As illustrated, for the embodiment, optical networking apparatus  includes a number of MPONM \u2013a control processor , and memory , coupled to each other through system bus . Each of MPONM \u2013includes at least one multi-protocol processor having a number of function blocks, as illustrated in and physical layer optical-electrical components (not shown), as described in the above identified co-pending U.S. pending patent applications.","In various embodiments, the various MPONM \u2013may be connected to system bus  in like or different manners. For examples, all MPONM \u2013may be connected via corresponding parallel interfaces, or some MPONM * are connected via corresponding serial interfaces, while others are connected via corresponding parallel or other bus interfaces.","Accordingly, for the embodiment, various device drivers  are provided to facilitate the various corresponding types of interfaces for connecting MPONM \u2013to system bus . That is, a serial interface oriented device driver  is provided to facilitate connection of some or all of MPONM \u2013via corresponding serial interfaces, a parallel interface oriented device driver  is provided to facilitate connection of some or all of MPONM \u2013via corresponding parallel interfaces, and so forth.","In one embodiment, the function blocks of a multi-protocol processor include a system interface block , network interface blocks \u2013a MAC block , an Ethernet 64\/66 coder , an Ethernet on SONET coder block , a PPP protocol and HDLC processor block , a HDLC Packet over SONET coder block , a SONET path processor block , a SONET section and line processor block , and a control interface . The various function blocks - are selectively employed in combination to service data transmission and receipt in accordance with a selected one of a number of frame based protocols, including frame based protocols encapsulated within a synchronous protocol, as well as streaming and packet variants of the synchronous protocol. These protocols include at least one each a datacom and a telecom protocol.","Briefly, the system interface block  is employed to facilitate input of egress data from the system and output of ingress data to the system from MPONM. The MAC block  is employed to perform data link sub-layer media access control processing on egress and ingress MAC data. The Ethernet 64\/66 coder and Ethernet on SONET Coder blocks - are provided to perform physical sub-layer 64\/66 and Ethernet on SONET coding and decoding for the egress and ingress MAC data respectively.","The PPP\/HDLC processor block  is employed to perform data link sub-layer point-to-point protocol and high level data link control processing on IP, PPP, and HDLC data. The PPP\/HDLC processor  is employed to frame or de-frame IP and POS data, providing appropriate encapsulation or de-encapsulation, in accordance with PPP and HDLC. The HDLC POS coder block  is provided to perform physical sub-layer Packet Over SONET coding and decoding for the egress and ingress HDLC data respectively.","The SONET path processor block  is provided to perform path processing for \u201cpacketized\u201d SONET data and coded frame-based data, whereas the SONET section and line processor block  is provided to perform section and line processing for \u201cpacketized\u201d as well as \u201cstreaming\u201d SONET data. The network interface blocks \u2013are provided to facilitate output of egress data and input of ingress data.","Control interface  is employed to facilitate interaction between the multi-protocol processor and external devices.","The optical-electrical components of a MPONM * include e.g. digital-to-analog and analog-to-digital components, as well as laser components for encoding data on an optical beam and\/or decoding data from an encoded optical beam. For the purpose of the present application, the optical-electrical components of a MPONM * is also referred to as a \u201cfunction block\u201d. Accordingly, the term \u201cfunction block\u201d as used in the claim refers to a selected one of the function blocks of a multi-protocol processor and the collection of the optical-electrical components of a MPONM *.","Further, one or more of the function blocks (including the collection of optical-electrical components of a MPONM *) are equipped to trigger interrupts for a variety of events or reasons.","Thus, if networking applications  are required to access, control or otherwise interact with each of these function blocks of each of the multi-protocol processors of the MPONM directly, the complexity may become if not prohibitive, at least not very productive for the average software developers, especially in view of the multiplicity of multi-protocol processors and MPONM present in each optical networking apparatus , and the different manners the MPONM * may be connected.","Accordingly, to enable networking apparatus  to be used for a variety of networking applications, the present invention advantageously enables network applications  to flexibly provide for interrupt handlers  to handle various interrupts of interest in an application dependent manner. As will be readily apparent from the description to follow, the present invention further advantageously enables the flexible provision of interrupt handling in a reduced complexity manner.","In various embodiments, each multi-protocol processor  includes a number of global control\/status registers (not shown), in particular, one or more global control\/status registers for correspondingly storing one or more identifiers of interrupt triggering function blocks (including each collection of optical-electrical components of a MPONM *) of one or more interrupt lines. Further, each function block (including each collection of optical-electrical components of a MPONM *) equipped to trigger interrupts also includes among its function block control\/status registers (not shown), one or more function block control\/status registers for correspondingly storing one or more causes (e.g. event types) for the interrupts of the one or more interrupt lines.","Together, these control\/status registers enable the triggering function block and the cause for each interrupt to be readily determined. Resultantly, varying number of interrupt handlers  may be provided in varying manners to handle various combinations of interrupts of various triggering function blocks and causes, irrespective of MPONM *.","Further, to reduce the implementation complexity for the designers of networking applications , an API , having at least an externalized module initialization function  and an externalized interrupt handler registration function  () are provided to facilitate interactions between networking applications  and MPONM *, with respect to interrupt handling. For the embodiment of API  further includes a number of externalized function block as well as event type interrupt enabling\/disabling functions \u2013, and a number of internal dispatcher functions  (). The terms \u201cexternalized\u201d and \u201cinternal\u201d are used in the current context from the visibility perspective of networking applications , for ease of understanding. The characterization has no significance with respect to practicing the present invention.","For ease of understanding, only interrupt handling relevant functions of API  are shown and described. In various embodiments, API  may further include other functions to facilitate other interactions between networking applications  and MPONM *. Additionally, as illustrated in , corresponding function block service routines  are also provided for interfacing with corresponding like ones of the function blocks of the multi-protocol processors of the MPONM *.","Module initialization function  is employed to initialize corresponding data structures  for MPONM *, including interrupt handling related data, to facilitate the interactions, including interrupt handling.","Interrupt handler register function  is employed to facilitate networking applications  in registering one or more interrupt handlers  to handle the various interrupts triggered by the various function blocks of MPONM *. In one embodiment, each registration identifies the registering interrupt handler  and the interrupts of interest. In one embodiment, the interest is specified in terms of at least one of the triggering function block and\/or the cause interest.","That is, an interrupt handler  may be registered to specifically handle interrupts triggered for a particular event type by a particular function block (of any MPONM *). Alternatively, the interrupt handler  may be registered to handle interrupts triggered for the particular event type by any function block (of any MPONM *).","In yet other alternatives, the interrupt handler  may be registered to handle interrupts triggered for a plurality of event types by the particular function block (of any MPONM *). In still yet other alternatives, the interrupt handler  may be registered to handle interrupts triggered for a plurality of event types by a plurality of function blocks (of any MPONM *).","Note that resultantly, under the present invention, an interrupt may be handled by one or more registered interrupt handlers .","Interrupt Dispatcher functions  are employed to determine the appropriate registered interrupt handler or handlers  to be notified of the interrupts; and notify the interrupt handler or handlers  accordingly.","In one embodiment, a primary and two auxiliary dispatcher functions  are provided. The primary dispatcher function  is employed to receive and clear a received interrupt. The two auxiliary dispatcher functions  are employed to determine and notify the appropriate registered interrupt handler or handlers  to handle the interrupts triggered by a function block of a multi-protocol processor and the interrupts triggered by the collection of electrical-optical components of a MPONM * respectively.","Enabling\/Disabling interrupt functions \u2013, as their names suggest, are employed to enable\/disable interrupt generations by the various function blocks of the MPONM * during operation, at the occurrence of selected events. For the embodiment, Enable\/Disable Function Block Interrupt  enables\/disables interrupt generations by a function block in general, while Enable\/Disable Event Interrupt  enables\/disables interrupt generations by a function block for one or more specific event types.","In various embodiment, a function block will also stop generating an interrupt for the occurrence of certain event, if a prior generation was not acknowledged by control processor .","In one embodiment, portions of module data structures  are also used by the above described interrupt handling related functions to store a portion or all of interrupt handling related data.","Except for MPONM API , including the module initialization, interrupt handler registration, interrupt dispatcher and enabling\/disabling functions \u2013, and the manner networking applications  cooperate with MPONM API , in particular, with respect to interrupt handling, networking applications  and function block service routines  otherwise represent a broad range of such elements known in the art. Accordingly, except for the manner networking applications  and function block service routines  cooperate with MPONM API , the two elements will not be otherwise further described.","[The asterisk at the end of a reference number denotes a \u201cwild card\u201d, representing any of the trailing suffixes of the reference numbers employed in a figure. For example, * stands for one or more of or any one of the other  references of FIG. .]",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIGS. 2","FIG. 2"],"i":["a","b ","a, "],"b":["2","112","114","522","112","112","522","114","106","202"]},"In one embodiment, networking application  identifies the particular MPONM * by providing the \u201chandle\u201d of the device driver  handling the connecting interface through which the particular MPONM * is connected to bus , and if applicable, information (such as memory mapped addresses, port numbers and so forth) associated with how the particular MPONM * is mapped on the connecting interface.","As will be described in more detail below, in response, module initialization function  of MPONM API  in conjunction with the function block service routines  advantageously create an instance of a module data structure  for the MPONM * (if the data structure  has not been previously created for the MPONM *) to facilitate subsequent access, control and\/or interaction with the MPOMN * by networking applications .","As part of the initialization process, a basic interrupt handling framework for handling interrupts triggered by the various function blocks of the MPONM * being initialized, is also initialized, to be described more fully below.","At the end of the initialization process, a handle of the module data structure  for the MPONM * is returned. More specifically, in one embodiment, the \u201chandle\u201d is a pointer to the module data structure  of the MPONM *.","Thus, as illustrated, networking application  saves the returned handle (or pointer) to the module data structure  for the MPONM , upon receipt of the handle (or pointer) from module initialization function  of MPONM API .","Thereafter, networking application  determines if another MPONM  is to be initialized, block . If so, operations \u2013 are repeated; else the initialization process for networking application  continues and proceeds to completion.","In other embodiments, module initialization function  may support each initialization request requesting initialization of one or more desired MPONM * instead. For these embodiments, more than one desired MPONM * may be specified in a single request, with the request returning multiple corresponding handles (or pointers) for the successfully initialized ones of the requested MPONM *.","As illustrated in , upon having a need to request a service, e.g. registering an interrupt handler for interrupts triggered by certain function blocks or caused by certain events, or having an operation performed in a function block of a MPONM *, networking application  retrieves the handle (or pointer) to the data structure  of the MPONM *, block , formats, and submits the request to an appropriate externalized function of MPONM API .","For example, if a networking application  desires to register one or more interrupt handlers to handle interrupts triggered by certain function block(s) of the MPONM and\/or triggered for particular events, the networking application  may invoke externalized interrupt handler register function  to register the interest and the interrupt handler.","For the embodiment, each request, including the example interrupt handler registration request, may include an identification of the function block within which the requested service\/operation is related\/to be performed. However, generally, the identification of the function block is not particularized to a MPONM *; and neither is an identification of the MPONM * provided. Instead, the MPONM * within whose identified function block the requested service\/operation is related\/to be performed is implicitly identified. More specifically, for efficiency of operation, the handle (or pointer) of the data structure  of the MPONM  is provided.","As those skilled in the art would appreciate, the implicit reference through the handle or pointer of the data structure  of the MPONM * of interest, improves the ease of the use for the software developers of networking applications, who are more use to working with handles\/pointers, as opposed to having to be cognizant of specific hardware modules and hardware details, including the details of the connection interfaces through which the MPONM * are correspondingly connected.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 3","b":["118","118","106"]},"As illustrated, each module data structure  includes a root object  and cross function block data objects * having cross function block shared data variables. Examples of data included in root object  include but are not limited to data and\/or pointers employed in interacting with the appropriate device driver  for the particular MPONM *. Examples of such cross function data block shared variables include module identifier, interrupt handling related data, e.g., the registration data (), and registers for putting data into and getting data out of selected ones of the function blocks of the MPONM *.","Additionally, each module data structure  includes a number of \u201canchor\u201d data objects *, one each for the function blocks supported. \u201cAnchor\u201d data objects * may include a number of function block specific control data variables. Examples of such function block specific control data variables include status variables denoting e.g. whether the corresponding function block service routine  was successful in performing certain requested operations.","Further, attached with each \u201canchor\u201d data objects * of the function blocks, are function block specific data objects having function block specific operational data variables. Examples of such function block specific operational data variables include bit masks, data rates, filter criteria, and so forth.","In alternate embodiments, the present invention may be practiced using other data organization approaches.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIGS. 4","FIG. 4"],"i":["a","b ","a, "],"b":["4","522","114","106","522","114","106","402","522","118","106","106","112","522","118","106","418"]},"Otherwise, i.e. if the data structure  has not been previously created before, initialization function  creates the root object  and global shared data objects * of the data structure  of the MPONM , including in particular, the data associated with the interrupt handling framework, block .","As illustrated in initialization of the data associated with the interrupt handling framework  includes initializing a linked list (ref.  of ) (in a basic state) for storing information associated with the registered interrupt handlers, block . Initially, linked list  (in a basic state) is initialized with a single node identifying the default interrupt handler node. Linked list  will be further described below referencing .","Next, initialization function  initializes the hardware dependent interrupt variables\/registers in control processor , block . Then, initialization function  spawns the internal dispatcher functions  task\/thread, block .","Referring back to upon initializing the root and global shared data objects  and *, initialization function  successively calls the corresponding function block service routines  of the function blocks to contribute to the creation of data structure  to facilitate subsequent access, control or interaction with MPONM * by networking applications , block .","For the embodiment, after each invocation, initialization function  further determines if the contributory creation expected of the invoked function block service routine is successful, block . If an error is returned for the contributory creation, initialization function  successively undo all prior successful additions to the data structure , block , and returns an error notice to the network application , block .","If the contributory creation was determined to be successful at block , initialization function  further determines if additional function block service routines  are to be invoked, block . If at least one additional function block service routine  is to be invoked, initialization function  continues operation at block  as earlier described.","If not, the cooperation creation initialization process is completed, and initialization function  returns the handle\/pointer of the data structure  of MPONM * as earlier described, block .","Resultantly, accessing, controlling or otherwise interacting with MPONM *, including managing interrupt handling, by networking applications  is streamlined.","Note that as alluded to earlier, the exact manner a function block service routine  contributes in the creation of the data structure of a MPONM *, i.e. the kind of data variables the function block service routine  adds to, maintain, or otherwise manipulate, using data structure  is application dependent. Similarly, the nature and the manner the function block service routine  interacts with the MPONM * in particular the function block, are application dependent. These issues vary from function blocks to function blocks.","For ease of understanding, initialization function  has been logically described as a single functional entity. In practice, the functions performed by initialization function  may be implemented in one or more sub-functions, e.g. having all interrupt related initialization operations be implemented in its own interrupt related initialization sub-function.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 6","b":["600","602","604","113"]},"For the embodiment, the registration data of a registered interrupt handler  includes a pointer  to the interrupt handler itself. Further, the registration data includes one or more triggering function block interest and\/or one more triggering cause interest . That is, the registration data specifies the interrupts the registered interrupt handler  is interested in, accordingly to be notified, in terms of at least one of an interrupt's triggering function block and cause.","As alluded to earlier, an interrupt handler registration may specify that an interrupt handler  is to be notified of all interrupts triggered by one or more function blocks of any MPONM, irrespective of causes. An interrupt handler registration may also specify that an interrupt handler  is to be notified of all interrupts triggered by one or more function blocks of any MPONM, of particular respective causes. Likewise, an interrupt handler registration may specify that an interrupt handler  is to be notified of all interrupts of one or more causes, irrespective of the triggering function blocks.","For the embodiment, the registration data also includes a priority  of the registered interrupt handler. Recall from earlier description that more than one interrupt handlers may be registered by networking applications  to handle interrupts of certain function blocks and\/or causation events. Accordingly, more than one interrupt handlers may be notified for one received interrupt. For the embodiment, priority  is employed to order the dispatching of the notifications for the received interrupts. For ease of operation, entries\/nodes * are linked in order of their priorities.","For the embodiment, networking applications  may also register one or more context variables  to be provided to the interrupt handler on invocation. One use of context variables  is to enable the same interrupt handler to be shared by multiple MPONM *. The interrupt handler  determines the applicable MPONM * for an interrupt based on the value of these context variables  at the time the interrupt handler  is invoked.","As described earlier, interrupt handler register function  is employed to facilitate networking applications  in providing, or more specifically, registering provided interrupt handlers  to handle interrupts of various types. For the embodiment employing the data structure of  to store the registration data of the registered interrupt handlers , in response to a request to register an interrupt handler , interrupt handler register function  adds an entry * to linked list , and stores the pointer of the interrupt handler , and its interest, i.e. triggering function blocks, causes, and\/or other properties, therein. As described earlier, in one embodiment, the registration data are linked in the order of priority of the registered interrupt handlers .","In response to a request to un-register an interrupt handler , interrupt handler register function  removes the appropriate entry * from linked list .","As described earlier, Enabling\/Disabling Function Block\/Event Type Interrupt functions \u2013 are employed to facilitate networking applications  to enable\/disable a function block to generate interrupts during operation, in general, or for occurrences of events of particular event types. For the illustrated embodiment, when requested by networking applications , Enabling\/Disabling Function Block\/Event Type Interrupt functions - invoke the corresponding function block service routines  to accomplish the requested interrupt generation allowance enabling\/disabling.","As described earlier, interrupt dispatcher functions  are employed to determine which if any of the registered interrupt handlers  are to be notified of an interrupt, to handle the interrupt. For the embodiment employing the data structure of  to store the interrupt handler registration data, interrupt dispatcher function  identifies the interrupt handlers  to be notified by systematically analyzing entries\/nodes * of linked list . The stored function block and\/or cause interests of each registered interrupt handler are examined to determine if the corresponding registered interrupt handler  is to be notified. If so, the identified interrupt handler or handlers  are notified accordingly.","Recall in various embodiments, the entries\/nodes * are linked in the order of priority of the registered interrupt handlers. Accordingly, the interests are analyzed on a priority basis.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 7","b":["112","113","702","112","704"]},"During operation, the various function blocks of the various MPONM * generate various interrupts when various events occur, block . The causes of the interrupts, as described earlier, are stored in the control\/status registers of the triggering function blocks, and identities of the triggering function blocks are stored in the global control\/status registers of the MPONM *. The generated interrupts are routed to interrupt handler dispatcher functions , block .","As described earlier, interrupt handler dispatcher functions  first clear the interrupts, then systematically examine the interrupt handler registration data to determine which if any of the registered interrupt handlers  are to be notified to handle the interrupts, block . Upon determining the interrupt handlers  to be notified, interrupt handler dispatcher functions  notify the identified interrupt handlers  accordingly, block .","Upon being notified, the interrupt handlers  handle the interrupts as the designer of networking applications  desire, block .","Thus, it can be seen from the above descriptions, a novel highly flexible MPONM API equipped to streamline and improve the ease of network applications in accessing, controlling or otherwise interacting with function blocks of multi-protocol processors of MPONM, including flexible interrupt handling, has been described. While the present invention has been described in terms of the above described embodiments, those skilled in the art will recognize that the invention is not limited to the embodiments described. The present invention can be practiced with modification and alteration within the spirit and scope of the appended claims. Thus, the description is to be regarded as illustrative instead of restrictive on the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be described by way of exemplary embodiments, but not limitations, illustrated in the accompanying drawings in which like references denote similar elements, and in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIGS. 2","FIG. 1"],"i":["a","b "],"b":"2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 4","i":["a","b "],"b":"4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIGS. 5","FIG. 1"],"i":["a","b "],"b":"5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
