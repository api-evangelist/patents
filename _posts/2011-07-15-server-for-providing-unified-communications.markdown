---
title: Server for providing unified communications
abstract: A unified communication server or Client Application Server (CAS) comprises a client communication module, a status determination module, an operation determination module, an object manager, and a permissions module. The CAS enables communication between a client device and a plurality of communication services. The CAS receives requests for services from the client devices. The CAS interacts with a plurality of service providers offering different functionality and responds to requests or provides listings of available services in a unified manner despite the service offerings and service providers being disparate. The present invention also includes a number of methods including a method for operating a unified communication server, a method for generating a list of possible operations, a method for determining the status of a user and a method for determining permissions of a user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09455946&OS=09455946&RS=09455946
owner: Shoretel, Inc.
number: 09455946
owner_city: Sunnyvale
owner_country: US
publication_date: 20110715
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Prior Art PCM Architecture","Prior Art Email Architecture","Prior Art Mobile Client Architecture","Prior Art Web Client Architecture","Methods and Examples"],"p":["This application is a continuation in part of U.S. patent application Ser. No. 12\/985,326 filed on Jan. 5, 2011 and entitled \u201cUNIFIED COMMUNICATION\u201d and that claims priority from U.S. provisional patent application Ser. No. 61\/365,262, filed on Jul. 16, 2010 and entitled \u201cUC CLIENT APPLICATION SERVER (CAS) ARCHITECTURE & API\u201d both of which are incorporated by reference herein.","1. Field of the Invention","The present invention relates to communication systems. In particular, the present invention relates to unified communications among communication devices. Still more particularly, the present invention relates to a server for unified communications for several types of client devices.","2. Description of the Background Art","Existing communication systems provide numerous services to numerous different clients. These services include, for example, telephony calls, voicemail, directory, etc. A first problem present in existing communication systems is that the clients must communicate with different interfaces in order to access the different services provided by the communication system. For example, an internet protocol phone accesses a different interface than a personal computer with a web browser, and both of these devices access a different interface than a mobile phone. This makes it difficult to develop products for these different interfaces and the difference in interfaces affects the user interface of the various devices forcing the user to learn multiple methods to do the same thing.","A second problem present in existing systems is that the services offered by these systems cannot be easily opened up to third party developers that can provide new and innovative services for clients.","A third problem present in existing systems is that they do not support a subscription model that allows clients to subscribe to services offered by the communication system. For example, a user of a communication device cannot subscribe with the communication system to receive updates regarding the presence of another user on the network.","A fourth problem present in existing systems is that they are not able to allow an administrator to add, modify and delete permissions for other clients and\/or client devices and to provide clients with error messages when they do not have permission to receive a requested service.","The present invention overcomes the deficiencies and shortcomings of the prior art by providing a server and methods for unified communication. In one embodiment, the unified communication server or Client Application Server comprises a processing module and a CAS application. In another embodiment, the unified communication server or CAS includes a processor, memory and a plurality of modules configured to cooperate with client devices and communication services. In either embodiment, the CAS includes a client communication module, a status determination module, an operation determination module, an object manager, and a permissions module. The CAS enables communication between one or more types of devices and a plurality of communication services. The CAS receives requests for services from the client devices. The CAS is advantageous because it interacts with a plurality of service providers offering different functionality in a cohesive manner and responds to requests or provides listings of available services in a unified manner despite the service offerings and service providers being disparate. The present invention also includes a number of methods including a method for operating a unified communication server, a method for generating a list of possible operations, a method for determining the status of a user and a method for determining permissions of a user.","A system and method for unified communications is described. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent, however, to one skilled in the art that the invention can be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to avoid obscuring the invention. For example, the present invention is described in one embodiment below with reference to system operation and particular hardware. However, the present invention applies to any type of computing device that can receive data and commands, and any peripheral devices providing services.","Although the examples given herein describe the present invention in embodiments applicable to IP telephony, a person having ordinary skill in the art will recognize that the present invention is applicable to other technologies and provides unified communication for different communication devices not limited to IP telephony.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a non-transitory computer-readable memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a non-transitory computer readable storage medium, such as, but is not limited to, flash memory, any type of disk including floppy disks, optical disks, CD-ROMs and magnetic optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.","Descriptions herein to a server include one or more of: (1) a hardware server; (2) a software server executed by a processor; (3) a software server stored on a non-transitory computer-readable memory; (4) a virtual server executed by a processor; and (5) a virtual server stored on a non-transitory computer-readable memory. In one embodiment, the server is configured to provide the functionality of a telephony switch.","Descriptions herein to a switch refer to a telephony switch, and include one or more of: (1) a hardware telephony switch; (2) a software telephony switch executed by a processor; (3) a software telephony switch stored on a non-transitory computer-readable memory; (4) a virtual telephony switch executed by a processor; and (5) a virtual telephony switch stored on a non-transitory computer-readable memory. A hardware telephony switch is a hardware device configured to provide the functionality of a telephony switch. A virtual switch is a virtualized telephony switch.","All descriptions herein to modules include one or more of (1) computer code and routines stored on a non-transitory computer-readable memory and (2) a hardware device comprised of one or more circuit boards and\/or a processor.","Finally, the algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","Summary of Prior Art Telephony System ",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 1","b":["195","195","192","190","102","102","104","104","106","106","108","194","190","122","122","124","124","194","190","195","194","190"]},"The prior art telephony system  includes four client-server architectures: (1) a prior art Personal Call Manager architecture (the \u201cprior art PCM architecture\u201d) that communicates via signal line  and\/or signal line ; (2) a prior art email client architecture that communicates via signal line ; (3) a prior art mobile client architecture that communicates via signal line ; and (4) a prior art web client architecture that communicates via signal line . These four architectures are described below with reference to .","In one embodiment, the email client  is integrated with the Telephony Application Programming Interface  (\u201cclient-side TAPI \u201d) and the email client  signals the client-side TAPI  and the client-side TAPI  communicates with the TMS  via signal line  in order to initiate a telephone call. As described below with reference to , this and other complexities are not present in the embodiment of the present invention described for .","The prior art PCM architecture is a client-server architecture used for providing telephony functionality to a client device via signal line  and . The client device (not pictured) is a device for providing a human user access to telephony services. For example, the client device is a hardware device such as an Internet Protocol phone (\u201cIP phone\u201d). In another embodiment, the client device is a softphone application stored on a non-transitory memory and executed by a processor (e.g., a softphone stored and executed by a personal computer). The prior art PCM architecture comprises: the PCM ; the email client ; a client-side TAPI , the network , the TMS ; and a server-side TAPI .","The PCM  manages telephony functionality on the client-side  of the network . The PCM  is code and routines stored on a non-transitory computer-readable memory (not pictured) that comprise instructions for causing a processor to perform steps necessary to manage telephony functionality on the client-side  of the network . For example, the PCM  is telephony management software stored on a non-transitory memory and executed by a processor-based device such as a personal computer (not pictured). The processor of the personal computer executes the PCM  and performs steps necessary to provide call management for telephony calls made using the telephony architecture. In one embodiment, the PCM  is a conventional call manager application. The PCM  is communicatively coupled to the client-side TAPI  (and other elements described below with respect to the email architecture).","The email client  provides email functionality for the client device. The email client  is code and routines stored on a non-transitory memory (not pictured) that comprise instructions for causing a processor to perform steps necessary to provide email functionality for the client device. For example, the email client  is email software such as Microsoft Outlook stored on a non-transitory memory and executed by a processor-based device such as a personal computer (not pictured). The email client  is communicatively coupled to the client-side CSIS client  (and other elements described below with respect to the email architecture).","The client-side TAPI  is a conventional TAPI that works to assist the PCM  in providing call control for a client device (e.g., the telephone device that the user of the PCM  is assigned to, the personal computer described above for the PCM , a modem, a VOIP switch and\/or a private branch exchange). The client-side TAPI  is communicatively coupled to the network , the PCM  and the email client .","The network  is a partially public or a wholly public network such as the Internet. The network  can also be a private network or include one or more distinct or logical private networks (e.g., virtual private networks, Wide Area Networks (\u201cWAN\u201d) and\/or Local Area Networks (\u201cLAN\u201d)). Additionally, the communication links to and from the network  can be wire line or wireless (i.e., terrestrial- or satellite-based transceivers). In one embodiment of the present invention, the network  is an IP-based wide or metropolitan area network.","The TMS  interfaces with the server-side TAPI  to provide telephony functionality for the client-side. The TMS  is code and routines stored on a non-transitory memory (not pictured) that comprise instructions for causing a processor to perform steps necessary to process telephony requests for a client-side device. The TMS  is communicatively coupled to the server-side TAPI . The TMS  receives requests for a telephony service from the client-side device via the server-side TAPI . The TMS  processes these requests and communicates with the server-side TAPI  to provide the requested telephony service to the client device.","The server-side TAPI  is a conventional server-side TAPI that communicates with the TMS  and the client-side TAPI  to allow the PCM  to control telephony functionality for a client device. The server-side TAPI  is communicatively coupled to the client-side TAPI  via signal line . The server-side TAPI  is also communicatively coupled to the TMS , the PCM  and the email client .","The following is an example of how the prior art PCM architecture operates. The PCM  requests a telephony function. The request is passed to the client-side TAPI . The client-side TAPI  sends the request to the server-side TAPI  via the network  and signal line . The TMS  receives the request and processes the request to provide the client with the requested telephony functionality. For example, the requested telephony functionality is a VOIP phone call with another client device. The server-side TAPI  communicates with the client-side TAPI  to connect the requested call.","The prior art email architecture is a client-server architecture used for providing email functionality to a client device via signal line . The prior art email client architecture comprises: the PCM ; the email client ; a client-side Client Server Internet Service client  (the \u201cCSIS client \u201d); the network ; the CSIS server ; and a storage device .","The PCM , email client  and network  are the same as described above with reference to the prior art PCM architecture, so those descriptions will not be repeated here.","The client-side CSIS client  communicates with the CSIS server  to facilitate communication between client-side devices and server-side devices. For example, the client-side CSIS client  is code and routines stored on a client-side  device (e.g., a personal computer). The CSIS client  is communicatively coupled to the email client  and the PCM . The CSIS client  is also communicatively coupled to the CSIS server  via the network . The client-side CSIS client  receives a communication for a server-side device (represented by line ) and uses hypertext transfer protocol messages (\u201cHTTP messages\u201d) to communicate with the CSIS server  via the network .","The CSIS server  is a server that provides services requested by the client device. The requested service is specified by the HTTP messages received from the CSIS client . The CSIS server  is communicatively coupled to the network  and the storage device . The CSIS server  receives the HTTP messages from the CSIS client  (via the network ) and processes the messages to provide the requested service. The storage device  is a non-transitory computer readable memory that stores data and information necessary for the CSIS server  to provide the requested service. For example, the storage device  stores one or more of: directory information, voice mails, call history data, etc. In one embodiment there is more than one storage device . For example, a first storage device (not pictured) stores call history data and a second storage device (not pictured) stores other data and information.","The prior art mobile client architecture is a client-server architecture used for providing a conventional mobile device (not pictured) access to the TMS  and the CSIS server . The mobile device is any device capable of accessing a mobile voice network (not pictured). For example, the mobile device is a mobile phone. The prior art mobile client architecture comprises: the MCM ; the network , a Mobile Call Manager server  (\u201cMCM server \u201d); the server-side TAPI ; the TMS ; a server-side Client Server Internet Service client  (\u201cserver-side CSIS client \u201d); the CSIS server ; and the storage device .","The network , server side TAPI , TMS , CSIS server  and storage device  are the same as described above with reference to the prior art PCM architecture and the prior art email architecture, so those descriptions will not be repeated here.","The MCM  manages requests originating from mobile devices (e.g., smart phones, mobile phones, etc.). The MCM  is code and routines stored on a non-transitory computer-readable memory (not pictured) that comprise instructions for causing a processor to perform steps necessary to manage the requests originating from the mobile devices. For example, the MCM  is mobile call management software stored on a non-transitory memory and executed by a processor-based device such as a smart phone (not pictured). The processor comprised within the smart phone executes the MCM  and performs steps necessary to manage requests. For example, a user of the smart phone provides an input. The MCM  receives the input and causes the processor to make a request (i.e., a mobile device request) that is sent to the MCM server . The mobile device request includes a request for a service. For example, the mobile device request includes a request to be connected on a call with an IP phone associated with the server side TAPI  and the TMS . The MCM  is communicatively coupled to the MCM server  via the network . The MCM  transmits the mobile device request to the MCM server  via the network .","The MCM server  is a server that communicates with the MCM  to provide services requested by mobile devices. The MCM server  is communicatively coupled to the network , the server-side TAPI  and the server-side CSIS client . The MCM  utilizes a mobile data network (not shown) in communicating with the MCM server . The MCM server  receives the mobile device request from the MCM  and processes the mobile device request to: (1) determine which service is being requested; (2) determine whether the request should be passed to the server-side TAPI  or the server-side CSIS client ; and (3) transmit the request to the server-side TAPI  or the server-side CSIS client  as determined in step . The MCM server  stores data and information necessary to perform the above-described steps. For example, the MCM server  comprises a non-transitory computer-readable memory that stores data and information necessary to perform the above-described steps.","The server-side TAPI  performs functions similar to the client-side TAPI . The server-side TAPI  is a conventional TAPI that works to assist the MCM  in providing call control for a processor-based client device (e.g., a mobile device such as a smart phone or cell phone.). The server-side TAPI  is communicatively coupled to the network .","The server-side CSIS client  performs functions similar to the client-side CSIS client . The server-side CSIS client  communicates with the CSIS server  to facilitate communication between the MCM server  and the services provided by the CSIS server . For example, the server-side CSIS client  is code and routines stored on a server-side  device (e.g., a personal computer, switch, conference bridge, etc). The server-side CSIS client  is communicatively coupled to the MCM server  and the CSIS server . The server-side CSIS client  receives a mobile device message from the MCM server  requesting services for a client-side  mobile device. The server-side CSIS client  translates the messages received from the MCM server  to equivalent HTTP messages that are communicated by the server-side CSIS client  to the CSIS server .","The prior art web client architecture is a client-server architecture used for providing a client device access to the services provided by the CSIS server  via signal line . The client device (not pictured) is a processor-based device used to access the network . The prior art web browser architecture comprises: a client-side web client ; the network ; a server-side web client ; the CSIS server  and the storage device .","The network , CSIS server  and the storage device  are the same as described above with reference to the prior art PCM architecture, email architecture and mobile client architecture, so those descriptions will not be repeated here.","The client-side web client  provides a client device with access to the network . For example, the browser is a conventional browser application (e.g., Windows Internet Explorer, Mozilla Firefox, etc.) and the client device is a personal computer, smart phone, etc that stores the browser on a non-transitory memory and executes with a processor comprised within the computer to access the network . The browser  communicates with the server-side web client  to provide a client device with the services available from the CSIS server  via the network . The client-side web client  is communicatively coupled to the server-side web client  via the network . The client-side web client  sends messages to the server-side web client  via the network . The messages include, for example, requests for the services provided by the CSIS server .","The server-side web client  is similar to the client-side web client . The server-side web client  receives the messages from the client-side web client  via the network . The server-side web client  processes the messages to provide the client-side web client  with the services available from the CSIS server . The server-side web client  is code and routines stored on a non-transitory computer-readable memory (not pictured) that comprises instructions for causing a processor (not pictured) to perform steps necessary to work with the client-side web client  to provide the client device with the services available from the CSIS server . The server-side web client  is communicatively coupled to the client-side web client  via the network . The server-side web client  is also communicatively coupled to the CSIS server .","Unified Communication System ","As described briefly above with reference to , a problem present in with the prior art telephony system  is that the clients must communicate with different interfaces in order to access the different services present on the server-side  of the network . For example: (1) the PCM  must communicate with a client-side TAPI  in order to connect telephony calls using the TMS ; (2) the email client  must communicate with a client-side CSIS client  in order to access the services provided by the CSIS server ; (3) the MCM  must communicate with a MCM server  in order to connect telephony call using the TMS  or access the services provided by the CSIS server ; and (4) the client-side web client  must communicate with a server-side web client  in order to access the services provided by the CSIS server . What is needed is a single interface for clients to communicate with and access the services present on the server-side  of the network .","Referring now to , an embodiment of a unified communication system  according to one embodiment of the present invention is shown. Unified communication system  provides a single interface (i.e., the unified communication server or Client Application Server  referred to herein as \u201cthe CAS \u201d) for clients to access services available on the server-side  of the network . System  shown in  has numerous deficiencies that are overcome by system . These deficiencies include: (1) the different endpoints and\/or clients exhibit different behavior for different server implementations; (2) the system  requires numerous interfaces that provide less possibility for reusing logic and computer code from one endpoint and\/or client at another endpoint and\/or client; and (3) multiple client-side transports are necessary, i.e., one for each signal line , ,  and  described with reference to . In contrast, the CAS  of system  overcomes the deficiencies of the system  by providing a unified user interface in which: (1) endpoints and\/or clients do not exhibit varying behavior; (2) logic and computer code can be reused among many different endpoints and\/or clients; and (3) multiple client-side transports are not required.","The telephony system  also beneficially provides: (1) a plug-in architecture for expanding the services available to clients via the CAS ; (2) a subscription model for allowing clients to subscribe to services available through the CAS ; (3) the ability to provide multiple services to the client responsive to a single request message; and (4) the ability to allow clients having administrative rights to add, modify and delete permissions for other clients and\/or client devices and to provide clients with error messages when they do not have permission to receive a requested service. These benefits, among others, are not present in the prior art telephony system  described above with reference to .","The system  comprises: an IP phone ; a PCM ; an email client ; a client-side web client ; a MCM , a network ; the CAS ; a protocol adapter ; a TAPI ; a TMS ; a storage device ; a voicemail server ; a server-side web client ; and a collaboration services device . Optionally, the system  further comprises a second server  and a Client Application Server plug-in  (\u201cCAS plug-in \u201d). In one embodiment, the system  comprises one or more elements , , , , , , , , , , ,  , , , . In another embodiment, one or more systems  are communicatively coupled to one another and communicate with one another via the CAS  as described below.","The system  has a number of clients: the Internet Protocol phone  (\u201cIP phone \u201d); the PCM ; the email client ; the client-side web client ; and the MCM . The IP phone , PCM , email client  and client-side web client  are each communicatively coupled to the CAS  via the network . The CAS  is configured to provide clients located on the client-side  of the network  with access to services available on the server-side  of the network . In other words, the CAS  provides a single interface for the IP phone , the PCM , the email client  and the client-side web client  to communicate with and access the services available on the server-side  of the network . Optionally, the system  also includes other clients (e.g., a softphone stored and executed by a personal computer or equivalent computing device, a conference bridge storing and executing a telephony switch call manager application known to those skilled in the art, etc) that are communicatively coupled to the CAS  to receive services available through the CAS .","The IP phone , the PCM , the email client  and the client-side web client  are communicatively coupled to the CAS  via the network . The communicative coupling of the IP phone  to the CAS  is represented by line , the communicative coupling of the PCM  to the CAS  is represented by the line , the communicative coupling of the email client  to the CAS  is represented by line , and the communicative coupling of the client-side web client  to the CAS  is represented by signal line . The MCM  communicates with the CAS  via the network  and the protocol adapter . The communicative coupling of the MCM  to the protocol adapter  is represented by line , and the protocol adapter  is communicatively coupled to the CAS . The protocol adapter  receives the communication from the MCM , translates the communication to a different protocol (described below) and sends the communication to the CAS . The client-side web client  also has the ability to communicate with the CAS  via a server-side web client . The communicative coupling of the client-side web client  to the server-side web client  is represented by line . The server-side web client  is in turn communicatively coupled to the CAS .","In one embodiment, the protocol adapter  is configured as a client device. For example, the protocol adapter  is configured as a proxy (or a server) for the MCM  and the protocol adapter  is communicatively coupled to the CAS  as a client device. One having ordinary skill in the art will recognize different configurations in which the protocol adapter  is configured as a client device. Although not shown in , in some embodiments, the protocol adapter  is coupled for communication with the server-side web client , and is also coupled to the PCM  or the email client . The protocol adapter  uses these couplings to send or download voice mail files to the MCM , PCM , or the email client . The MCM  also executes Data API requests served by the server-side web client  in such embodiments.","In one embodiment, the MCM  is communicatively coupled to the CAS . For example, the CAS  is configured to perform the functionality of the protocol adapter  or the MCM  is configured to communicate with the CAS  using a CAS message. Thus, in one embodiment the system  does not include a protocol adapter .","The PCM , the email client , the client-side web client , the MCM , the TAPI , the TMS , the storage  and the server-side web-client  provide functionality similar to the PCM , email client , client-side browser , the MCM , the server-side TAPI , the TMS , the storage  and the server-side web-client  described above with reference to , respectively, so that description will not be repeated here. In one embodiment, a difference between the PCM , the email client , the client-side web client , the MCM , the TAPI , the TMS , the storage  and the server-side web-client  versus the similarly named components of  is that the PCM , the email client , the client-side web client , the MCM , the TAPI , the TMS , the storage  and the server-side web-client  comprise, among other things, a CAS client (not pictured). The CAS client is code and routines that enable the PCM , the email client , the client-side web client , the MCM , the TAPI , the TMS , the storage  and the server-side web-client  to communicate with the CAS  (either directly or indirectly). The TAPI  and the server-side web client  also differ from the similarly named components of  in that they are communicatively coupled to the CAS . In one embodiment, the CAS , the network , the client-side  and the server-side  depicted in  are similar to the elements depicted in  having like reference numerals, so the description for these elements will also not be repeated here.","The IP phone  is a conventional internet protocol phone. For example, the IP phone  is a hardware IP phone or a softphone that is stored in a non-transitory memory (not pictured) and executed by a processor (not pictured). The IP phone  is communicatively coupled to the CAS  via the network . The IP phone  communicates with the CAS  via the network  using the signal line . Examples of the IP phone  communicating with the CAS  are described below.","The CAS  includes a processing module , the CAS application  and the modules , , , , , ,  and  (referred to herein collectively as \u201cthe CAS modules\u201d) described below with reference to . The CAS  receives a request message from a client and processes one or more requests included in the request message. For example, the request message includes a request for a unified communication service. A unified communication service is any service that is provided by the server side . Although unified communication services include telephony services, they are not limited to just telephony services. For example, a unified communication service is a service as described with reference to . In one embodiment, the CAS  sends reply messages to the clients. The reply message includes, for example, a service that is responsive to the request included in the request message, an error message indicating that the client does not have permission to receive the requested service, etc. Other examples of reply messages are described below. The CAS  is communicatively coupled to the IP phone , the PCM , the email client  and the client-side web client  via the network . The CAS  communicates with the clients using various signal lines: the IP phone  communicates with the CAS  using the signal line ; the PCM  communicates with the CAS  using the signal line ; the email client  communicates with the CAS  using the signal line ; and the client-side web client  communicates with the CAS  using the signal line .","In one embodiment, the CAS  is a processor-based hardware device including a software server (i.e., virtual server) stored on a non-transitory memory of the CAS  (not pictured). The non-transitory memory also stores the CAS application  and the CAS modules described below with reference to . A processor of the CAS  executes the processing module , the CAS application  and the CAS modules. For example, the processing module , the CAS application  and the CAS modules are stored on a hardware telephony device such as a telephony switch (not pictured) configured as the CAS . The hardware telephony device (e.g., the telephony switch) is adapted to store, execute and implement the processing module , the CAS application  and the CAS modules. Examples of this functionality are described with reference to  through .","In one embodiment, the CAS  communicates with the clients (e.g., the IP phone , the PCM , the email client , the client-side web client ), the protocol adapter , the second server  and the collaboration services device  using CAS messages. A CAS message is any message that is sent or received by the CAS . In one embodiment, the CAS message includes standardized headers, i.e., the messages use certain predetermined headers. In one embodiment, the CAS messages are HTTP messages (i.e., the CAS messages are passed between the client and the CAS  via HTTP). The standardized headers provide the benefit of making the messages easier to parse in an understandable manner so that the client does not need to have any additional modifications other than being configured to send, receive and parse CAS messages. In one embodiment, the data included in the CAS message is encoded using JavaScript Objection Notation (\u201cJSON\u201d), Extensible Markup Language (\u201cXML\u201d) or a similar set of rules for encoding messages. A CAS message having standardized headers and encoded in JSON, XML or a similar set of rules for encoding messages is referred to herein as \u201ca CAS message encoded in a CAS format.\u201d In one embodiment, when such a CAS message as described in the immediately preceding sentence is encoded in JSON it is referred to herein as \u201ca CAS message encoded in a JSON-based CAS format,\u201d and when such a CAS message is encoded in XML it is referred to herein as \u201ca CAS message encoded in a XML-based CAS format.\u201d The CAS  is described in greater detail with reference to .","Five examples of CAS messages follow, each including examples of standardized headers. A first example CAS message follows. In this example a client is sending a request message to the CAS :","{\u201ctopic\u201d:\u201cfind\u201d,\u201cmessage\u201d:\u201clookup-contacts\u201d,\u201ctimestamp\u201d:1291231894934,\u201csequence-id\u201d:26,\u201crequest-id\u201d:26,\u201ctokens\u201d: \u201cv\u201d,\u201csource-flags\u201d:255,\u201csearch-fields\u201d:-1,\u201cresult-fields\u201d:2939,\u201cflags\u201d:0,\u201csort\u201d:2,\u201cmax\u201d:25,\u201cpres\u201d:0}","The above example includes examples of standardized headers. Specifically, the standardized headers are: (1) \u201ctopic;\u201d (2) \u201cmessage;\u201d (3) \u201ctimestamp;\u201d (4) \u201csequence-id;\u201d and (5) \u201crequest-id.\u201d","A second example CAS message follows. In this example a client is sending a request message to the CAS :","{\u201ctopic\u201d:\u201ctel\u201d,\u201cmessage\u201d:\u201cmake-call\u201d,\u201ctimestamp\u201d:1291231721388,\u201csequence-id\u201d:27,\u201crequest-id\u201d:27,\u201cdest\u201d:\u201c501\u201d,\u201cname-hint\u201d:\u201cVanessa\u201d,\u201cguided-conf-transfer\u201d:true}","The second example CAS message includes the same standardized headers as the first example CAS message. Similar standardized headers are present in each of the following example CAS messages. A person having ordinary skill in the art will recognize that other standardized headers are possible.","A third example CAS message follows. In this third example CAS  is sending a reply message to the client:","{\u201ctopic\u201d:\u201cfind\u201d,\u201cmessage\u201d:\u201clookup-contacts\u201d,\u201ctimestamp\u201d:1291231884203,\u201csequence-id\u201d:135,\u201crequest-id\u201d:26,\u201cresponse\u201d:0,\u201ccontacts\u201d:[[\u201cid\u201d,\u201csource-type\u201d,\u201cfirst\u201d,\u201cmid\u201d,\u201clast\u201d,\u201cco\u201d,\u201cdept\u201d,\u201csource-name\u201d,\u201ccontact-points\u201d,\u201cflags\u201d],[\u201c2\u201d,5,\u201cVanessa\u201d,\u201c\u201d,\u201c\u201d,\u201c\u201d,\u201c\u201d,\u201c\u201d,[[\u201cid\u201d,\u201ctype\u201d,\u201caddr\u201d,\u201caddr-canonical\u201d,\u201cfield\u201d],[1,16,\u201c501\u201d,\u201c501\u201d,10],[2,2,\u201cVKensington@tovino.shoretel.com\u201d,\u201cVKensington@tovino.shoretel.com\u201d,50],[3,4,\u201cVKensington@shoretel.com\u201d,\u201cVKensington@shoretel.com\u201d, 1000]],0],[\u201cSysDN:102\u201d,16,null,null,\u201cVoice Mail Login\u201d,\u201c\u201d,\u201c\u201d,\u201c\u201d,[[\u201cid\u201d,\u201ctype\u201d,\u201caddr\u201d,\u201caddr-canonical\u201d,\u201cfield\u201d],[1,16,\u201c102\u201d,\u201c102\u201d,10]],0]]}","A fourth example CAS message follows. In this fourth example CAS  is sending a reply message to the client:","{\u201ctopic\u201d:\u201ctel\u201d,\u201cmessage\u201d:\u201cmake-call\u201d,\u201ctimestamp\u201d:1291231710665,\u201csequence-id\u201d:62,\u201crequest-id\u201d:27,\u201cresponse\u201d:6}","A fifth example of CAS message follows. The fifth example includes an example of an asynchronous completion event for the fourth example CAS message described above:","{\u201ctopic\u201d:\u201ctel\u201d,\u201cmessage\u201d:\u201ctel-completion-evt\u201d,\u201ctimestamp\u201d:1291231710704,\u201csequence-id\u201d:65,\u201cresponse\u201d:6,\u201cerror\u201d:0}","The voicemail server  is a server that receives requests to perform write or read operations on voicemail data that is stored in the storage device . In one embodiment, the voicemail server  is comprised within a telephony switch, a conference bridge or some other processor-based telephony device having a non-transitory memory (not pictured). The voicemail data is stored in the non-transitory memory. The voicemail data is described in greater detail with reference to . In one embodiment, the voicemail data is stored on a memory that comprises the voicemail server . The voicemail server  is communicatively coupled to the CAS  and the storage device . The voice mail server  receives a request from the CAS  to perform a read operation or a write operation on the voicemail data stored in the storage device . In one embodiment, the voicemail server  is communicatively coupled to the TAPI  and the TMS  and the voicemail server  communicates with the CAS  to provide voicemail services to the TAPI  and the TMS .","The protocol adapter  receives messages from the MCM  and translates them to CAS messages that are sent by the protocol adapter  to the CAS . A person having ordinary skill in the art will recognize that messages received from the MCM  originate on a mobile network (not pictured) and have a protocol that is different from a CAS message. For the purpose of clarity, these messages are referred to herein as mobile device messages. The protocol adapter  is communicatively coupled to the MCM  via the network . The protocol adapter  is also communicatively coupled to the CAS . The protocol adapter  receives the mobile device messages and translates these messages to CAS messages. The protocol adapter  sends the CAS message to the client. The CAS message includes a request for a service that was included in the mobile device message. The CAS  communicates with the protocol adapter  (and other elements such as the TAPI , voicemail server , etc.) to process the CAS message and provide the mobile device with the requested service. In one embodiment, the protocol adapter  is communicatively coupled to the server-side web client .","In one embodiment, the protocol adapter  is a hardware device comprised of electronic circuit boards and\/or firmware adapted to provide the functionality described above for the protocol adapter . The protocol adapter  optionally comprises a processor and\/or a non-transitory memory that stores code and routines such as the firmware. In another embodiment the protocol adapter  is code and routines stored on a non-transitory memory and configured to provide the functionality described above for the protocol adapter  when executed by a processor (not pictured). For example, the protocol adapter  is an application stored in a memory of a computer (not pictured) and executed by a processor (not pictured) comprised within the computer.","In one embodiment, the protocol adapter  and the server-side web client  are comprised within the same hardware device (e.g., any telephony device). For example, the protocol adapter  and the server-side web client  are codes and routines stored on a non-transitory memory in the hardware device and configured to provide the functionality described above for the protocol adapter  and\/or the server-side web client  when executed by a processor (not pictured). One having ordinary skill in the art will recognize that in one embodiment one or more of the protocol adapter  and the server-side web client  are electronic circuit boards and\/or firmware adapted to provide the functionality described above for the protocol adapter  and\/or the server-side web client .","The collaboration services device  provides services such as instant messaging and presence to the clients. The collaboration services device  is communicatively coupled to the storage device  and the CAS . The collaboration services device  receives a CAS message from the CAS  requesting instant messaging and\/or presence services and the collaboration services device  communicates with the CAS  to provide these services to the requesting client.","In one embodiment, the collaboration services device  is a hardware device comprised of electronic circuit boards and\/or firmware adapted to provide the functionality described above for the collaboration services device . The collaboration services device  optionally comprises a processor and\/or a non-transitory memory that stores code and routines such as the firmware that is executed by the processor. In another embodiment, the collaboration services device  is codes and routines stored on a non-transitory memory and configured to provide the functionality described above for the collaboration services device  when executed by a processor (not pictured). For example, the collaboration services device  is an application stored in a memory of a computer (not pictured) and executed by a processor (not pictured) comprised within the computer.","A person having ordinary skill in the art will recognize that in one embodiment the TAPI  is configured to provide a portion of the presence service to the client device (e.g., IP phone ). For example, the TAPI  provides information such as whether the user of the client device is on the phone, out of office or whether the client device is ringing.","In one embodiment, the TAPI  and the TMS  communicate with each other to provide real time information about whether users are on a call. In another embodiment, the TAPI  and\/or the TMS  communicate with the configuration storage  (see ) to provide the client with information about whether a user is out of the office. For example, the configuration storage  is a database that is accessed by the TMS  to retrieve the information described above and then relayed to the TAPI  which then communicates with the CAS  to provide the client with this information via a CAS reply message. In one embodiment, the CAS  communicates with the configuration storage  to determine some or all of the presence information it will provide to the client (e.g., whether the user is out of the office).","The second server  is a server configured to communicate with the CAS  using the CAS plug-in . In one embodiment, this architecture beneficially isolates third party software operating on the second server  from the CAS  since the CAS plug-in  is executing in a different process than the processes executed on the CAS . The second server  is a server that is communicatively coupled to the CAS . The second server  communicates with the CAS  to provide services requested by clients that are available via the second server . For example, the second server  is a third party server that communicates with the CAS  to provide services such as presence or instant messaging to clients. In one embodiment, the collaboration services device  is a second server . The second server  includes a non-transitory storage medium (not pictured) and a processor (not pictured).","In one embodiment, the CAS plug-in  comprises third-party software and the CAS plug-in  and the CAS  execute on the same server, but are in different processes. This architecture beneficially isolates the CAS  from third party software since the CAS  is in a different process than the CAS plug-in .","The second server  comprises a CAS plug-in . The CAS plug-in  is code and routines that enable the second server  to communicate with the CAS . The CAS plug-in  is stored on the non-transitory storage medium and executed by the processor comprised within the second server .","In one embodiment, the CAS plug-in  is a service that provides additional functionality (e.g., services and\/or events) to clients communicatively coupled to the CAS . The services provided by the CAS plug-in  are referred to herein as plug-in services. The events provided by the CAS plug-in  are referred to herein as plug-in events. The CAS plug-in  operates on any processor-based device having a memory to store the CAS plug-in  such as the second server  described with reference to  or the processing module  described with reference to . In one embodiment, clients log into CAS  and access the services of the CAS plug-in  using CAS messages that request the plug-in services via the CAS . In one embodiment, CAS  forwards the requests to the CAS plug-in , the CAS plug-in  provides a response to CAS  and CAS  forwards the response to the client. In another embodiment, the CAS plug-in  is enabled to send events to CAS  and CAS  forwards the events to the client.","In yet another embodiment, the CAS  is configured so that the CAS plug-in  is required to register with the CAS  to be eligible to provide services to the clients. For example, CAS  is configured to have the services organized into topics (e.g., telephony, email, chat, instant messaging, etc). Some of these topics are set as restricted. A restricted topic is a topic of service that no CAS plug-in  can provide to the client. For example, the telephony service can be restricted so that no CAS plug-in  can provide telephony service to the clients. In this case, only the telephony module  comprised within the CAS  can provide telephony service to clients. In one embodiment, the CAS plug-in  registers with CAS  to provide services on any non-restricted topic. Once the CAS plug-in  is registered, the clients access the features of this plug-in  through CAS  using an API specific to the plug-in .","In one embodiment, the CAS  is configured so that only one CAS plug-in  can register for a given topic per instance of the CAS . In another embodiment, one CAS plug-in  is allowed to register an unlimited number of topics per instance of the CAS .","A person having ordinary skill in the art will recognize that the above-described plug-in architecture enables the CAS  to access additional functionality provided by the CAS plug-in . For example, the second server  is a server owned and operated by the same company that owns and operates the CAS , and that company implements upgrades to the services provided by CAS  via the second server  instead of upgrading the CAS  itself. This architecture also beneficially enables the CAS  to integrate third party applications and services into the CAS . For example, an integrator can write a CAS plug-in  that provides the third party application and\/or service and provide a means to enable the CAS  to access the services available via the CAS plug-in . The CAS plug-in  is stored on a different device such as the second server . In one embodiment, the means to enable the CAS  to access the services and\/or events available via the CAS plug-in  is a client that is stored on CAS  (or a plug-in that is stored on a non-transitory memory of the CAS  and is different from the CAS plug-in ) that enables the CAS  to access the CAS plug-in  when executed by a processor of the CAS . This client (or plug-in) is referred to herein as an access client (or an access plug-in).","As described above, the CAS plug-in  also provides additional functionality. This additional functionality includes any service not provided by the CAS  or duplicative in one or more respects. For example, the CAS plug-in  can provide clients of the CAS  with a cloud computing-based telephony service.","A person having ordinary skill in the art will recognize that, in one embodiment, the access client (or access plug-in) does not require a second server outside of the CAS  to function. For example, the CAS plug-in  is stored on any processor-based device and the access client (or access plug-in) communicates with the CAS plug-in  to provide different services to clients that communicate with the CAS .","In one embodiment the CAS plug-in  is stored on the CAS  and used by the CAS  to communicate with the second server  and provide clients with services available on the second server . For example, the CAS  stores the CAS plug-in  and the CAS plug-in  enables the CAS  to communicate with a second server  and retrieve services and events from the second server .","A person having ordinary skill in the art will recognize how the system  can be modified to include various telephony devices not shown, including, for example, a conference bridge, a telephony switch, a softphone, a smartphone, a mobile phone, etc.","CAS ","Turning to , the CAS  is shown according to various embodiments of the present invention.","Referring now specifically to , an example configuration in which the CAS  operates is shown. In addition to the CAS ,  also depicts: the IP phone ; the PCM ; the email client ; the MCM ; the client-side web client ; the network ; the protocol adapter ; the server-side web client ; the TAPI ; the voicemail server ; the storage device ; the collaboration services ; and a number of signal lines , , , , , , . Optionally, the system depicted in  also comprises a second server  that includes the CAS plug-in  or other clients that are not depicted in  such as softphones, conference bridges, call center applications, etc that are communicatively coupled to the CAS  via a signal line and the network . These elements listed above are similar to the elements described above for , so that description will not be repeated here.","Still referring to , the CAS  comprises: a Client Application Server application  (\u201cCAS application \u201d); a processing module ; a subscription module ; a telephony module ; a directory module ; a configuration module ; a voicemail module ; a call history module ; a presence module ; and an instant messenger module . In this first embodiment, the CAS  comprises one or more non-transitory computer-readable memories (not pictured). In one embodiment, one or more of the CAS application  and the CAS modules , , , , , , ,  are stored on a memory or one or more storage devices communicatively coupled to the processing module .","In one embodiment, the processing module  is a processor and a memory that acts as a server that receives CAS messages and processes these messages to provide services requested by the clients. The processing module  is communicatively coupled to: the PCM  (via the network ); the email client  (via the network ); the protocol adapter ; the client-side web client  (via the network ); the server-side web client ; the TAPI  (via signal line ); the CAS application ; and the CAS modules (i.e., modules , , , , , , , ). The processing module  communicates with the above-described elements to process requests included in CAS messages received by the processing module  as described below with reference to . In one embodiment, one or more of the CAS application  and the CAS modules , , , , , , ,  do not communicate with the processing module  using CAS messages in which case the processing module  translates messages to CAS messages that are sent as reply messages to the clients.","The CAS application  is software and routines that, when executed by the processing module , cause the processing module  to provide the functionality described below with reference to . For example, the CAS application  translates messages received from the CAS modules to CAS messages that are sent to the client as reply messages. The CAS application  is communicatively coupled to the processing module . In one embodiment, the CAS application  is stored on a non-transitory memory and executable by a processor. The CAS application  receives requests from the processing module , processes those requests, cooperates with the processing module  and the CAS modules , , , , , , ,  to perform the operations specified by the requests, and sends reply messages in response.","Referring now also to , one embodiment for the CAS application  is shown. In this embodiment, the CAS application  includes a client communication module , a status determination module , an operation determination module , an object manager , a permissions module , and a user interface module . These modules , , , ,  and  are coupled for communication with each other and the processing module  by bus . The bus  represents a shared bus for communicating information and data throughout CAS . The bus  may represent one or more buses including an industry standard architecture (ISA) bus, a peripheral component interconnect (PCI) bus, a universal serial bus (USB), or some other bus known in the art to provide similar functionality.","The client communication module  is software or routines for sending CAS messages to and receiving requests from clients , , ,  and . The client communication module  is coupled for communication with the other modules , , ,  and  of the CAS application  and the components of the CAS  by bus  to receive information which it prepares and delivers to the clients , , ,  and . The client communication module  prepares CAS messages including formatting the messages and populating the message fields such as headers, etc., as has been described above from the information received from the other modules , , ,  and  of the CAS application  and the CAS . The client communication module  also sends these messages to the clients , , ,  and  for processing and presentation at the clients. The client communication module  also receives request messages from the specific devices , , ,  and  and processes the request messages to identify the specific client device, the user and the operation being requested. The client communication module  is configured for communication with the other modules , , ,  and  of the CAS application  and the components of the CAS  to process the request message and control the operation of the other modules , , ,  and . In one embodiment, the client communication module  acts as a master processing unit to process the request message, and deliver any information and instructions to other modules , , ,  and  necessary to process the request.","The status determination module  is software or routines for determining the status of the user. The status determination module  is coupled by bus  for communication with the other modules , , ,  and  of the CAS application  and the components of the CAS . The status determination module  is responsive to message requests received from the client communication module . The status determination module  identifies the user and determines their status including such factors as class of service, client type, device type, state of users device, user preferences, IM (Instant Messaging) presence, DND (Do Not Disturb), call handling configuration, workgroup membership, workgroup login state, etc. The operation of the status determination module  is described in more detail below with reference to .","The operation determination module  is software or routines for determining an operation associated with a message request and determining whether it is possible to perform that operation. The operation determination module  is coupled by bus  for communication with the other modules , , ,  and  of the CAS application  and the components of the CAS . In one embodiment, the operation determination module  controls a substantial portion of processing of message requests. The processes performed by the operation determination module  are described in more detail below with reference to . The operation determination module  is responsive to a message request received from the client communication module . The operation determination module  processes the message requests to determine the operation that the client is requesting to be performed. The operation determination module  also communicates with the status determination module  to determine the status of the user. The operation determination module  also communicates with the component of the CAS  corresponding to the operation to determine whether the operation is possible. The operation determination module  also communicates with the permissions module  to determine whether the user specified in the message request has the appropriate permissions to perform the operation. If the operation determination module  determines that the operation can be performed, the operation determination module  sends the information for the operation to the object manager . In other embodiments, the operation determination module  is responsive to more general requests as to which operations are available for execution for a particular user. In some embodiments, the operation determination module  also sorts and\/or filters the list of possible operations to present the user with the operations that they are most likely to perform.","The object manager  is software or routines for generating an object with the information necessary to perform an operation. The object manager  is coupled by bus  for communication with the other modules , , ,  and  of the CAS application  and the components of the CAS . In one embodiment, the object manager  is coupled to receive information about an operation to be performed from the operation determination module . The object manager  communicates with the permissions module  to retrieve the permissions necessary to perform the operation. The object manager  communicates with the component of the CAS  responsible for performing the operation and secures the information needed to perform the operation. The object manager  generates an object including permissions to perform the operation along with the information about the operation itself and the object. The object manager  then provides the object to the client communication module  for delivery to the client , , ,  and .","The permissions module  is software or routines for determining the permissions available for a particular user. The permissions module  is coupled by bus  for communication with the other modules , , ,  and  of the CAS application  and the components of the CAS . The permissions module  is also coupled to retrieve information from permissions storage . The permissions module  receives information about a particular operation to be performed and the user performing the operation. In one embodiment, the permissions module  is responsive to requests from the operation determination module  and sends authorization back to the operation determination module . The permissions module  determines whether the user has permission to perform an operation by accessing the permissions storage . In another embodiment, permissions can be delegated to other users. In this case, the permissions module  determines whether the user is authorized to perform the operation based upon the user's permissions or the permissions which have been delegated to the user. In yet another embodiment, particular users can be administrators with rights to take actions for or on behalf of other users. In that case, the permissions module  determines whether the user is authorized to perform the operation based on their status as an administrator.","The user interface (U\/I) module  is software or routines for displaying information related to unified communication. In one embodiment, the user interface module  is responsive to message requests received from clients , , ,  and . In another embodiment, the user interface module  presents information regarding operations that are available for the user based upon: status of the user, status of a contact, permissions, client type, type of device, state of device, etc. In yet another embodiment, the user interface module  provides a unique display of information regarding operations and contacts that are available. In one embodiment, the user interface module  is coupled to receive information about objects from the object manager  and sends interface information to the client communication module  for delivery to the client , , ,  and . The user interface module  is coupled by the bus  for communication with the other modules , , ,  and  of the CAS application  and the components of the CAS .","The subscription module  manages subscriptions for clients. A subscription service includes, for example, adding, modifying or deleting a subscription for a client device. A subscription is a registration of one or more of the clients , , , , , ,  to receive notifications in changes in the services provided by the CAS modules , , , , , , , . In one embodiment, the subscription service includes subscriptions to services available on the second server . A person having ordinary skill in the art will recognize that subscription services are possible. The subscription module  is communicatively coupled to the processing module  and the storage device . Subscription data that describes the different subscriptions for the clients is stored in the storage device . The subscription module  receives a CAS message from the processing module  and processes the message. For example, the CAS message requests a read operation or a write operation for the subscription data stored on the storage device . The subscription module  communicates with the storage device  to process the request included in the CAS message. The subscription data is described in more detail with reference to . The subscription module  is described in more detail with reference to .","The telephony module  communicates with the TAPI  to provide telephony services for clients. A telephony service is a conventional telephony service and includes, for example, placing a telephone call, parking a call, placing a call on hold, placing a conference call, etc. A person having ordinary skill in the art will recognize that other telephony services are possible. The telephony module  is communicatively coupled to the processing module  and the TAPI . A client (e.g., the PCM , the IP phone , a softphone (not pictured), etc.) sends a CAS message to the processing module  requesting a telephone call connection. The processing module  passes the CAS message to the telephony module . The telephony module  communicates with the TAPI  to connect the call. The TAPI  sends a message to the processing module  via signal line  indicating that the call is connected. In one embodiment, the processing module  sends a reply message to the client indicating that the call is connected. The telephony module  is described in more detail with reference to .","The directory module  communicates with the storage device  to provide a directory service to clients. A directory service is a conventional directory service and includes, for example, searching a directory database for a telephone number associated with a user specified by the client. The directory service can include, for example: (1) a system directory; (2) a personal directory; (3) distribution lists; (4) speed dials; (5) imported data; and (6) uploaded data. A person having ordinary skill in the art will recognize that other directory services are possible. The directory module  is communicatively coupled to the processing module  and the storage device . A client (e.g., the PCM ) sends a CAS message to the processing module  requesting a directory service. The processing module  sends the CAS message to the directory module . The directory module  communicates with the storage device  to provide the requested service to the client. The processing module  sends a reply message to the client providing the requested service. The directory module  is described in more detail with reference to .","The configuration module  communicates with the storage device  to provide a configuration service to clients. A configuration service modifies or describes the configuration for a client. For example, a configuration services includes changing the configuration of a telephony device. A person having ordinary skill in the art will recognize that other configuration services are possible, including, for example, providing the client with information describing the current call handling mode for a client. The configuration module  is communicatively coupled to the processing module  and the storage device . A client (e.g., the PCM ) sends a CAS message to the processing module  requesting a configuration service. The processing module  sends the CAS message to the configuration module . The configuration module  communicates with the storage device  to provide the requested service. The processing module  sends a reply message to the client providing the requested service. The configuration module  is described in more detail with reference to .","The voicemail module  communicates with the voicemail server  and the storage device  to provide a voicemail service to clients. A voicemail service is a conventional voicemail service and includes, for example, replaying voicemails that are stored in the storage device . A person having ordinary skill in the art will recognize that other voicemail services are possible. The voicemail module  is communicatively coupled to the processing module  and the voicemail server . A client (e.g., the PCM ) sends a CAS message to the processing module  requesting a voicemail service. The processing module  sends the CAS message to the voicemail module . The voicemail module  communicates with the voicemail server  and the storage device  to provide the requested service. The processing module  sends a reply message to the client providing the requested service. The voicemail module  is described in more detail with reference to .","The call history module  communicates with the storage device  to provide a call history service to clients. A call history service is a convention call history service and includes providing a client with information indicating, for example, which calls have been placed, received and\/or missed using a particular telephony device (e.g., and IP phone). This embodiment of call history is referred to herein as a device-based call history. In one embodiment, call history is tracked on a user-basis instead of a device-basis. For example, a user has one or more devices and one or more extensions, and the call history for each of these device(s) and extension(s) is tracked and recorded in a unified call history record. This embodiment of call history is referred to herein as a user-based call history. The call history module  is communicatively coupled to the processing module  and the storage device . A client (e.g., the PCM ) sends a CAS message to the processing module  requesting a call history service. The processing module  sends the CAS message to the call history module . The call history module  communicates with the storage device  to provide the requested service. The processing module  sends a reply message to the client providing the requested service. The call history module  is described in more detail with reference to .","The presence module  communicates with the collaboration services device  to provide a presence service to clients. In one embodiment, the presence module  communicates with the telephony module  and the collaboration services device  to provide presence service to clients. In this embodiment, the presence module  is communicatively coupled to the collaboration services device  (as shown in ), the storage device  (as shown in ) and the telephony module  (not pictured in ). In an alternative embodiment, the telephony module  is communicatively coupled to the collaboration services device  (not pictured in ) and the presence module  is communicatively coupled to the storage device  and the collaboration services device . In another embodiment, one or more of the CAS modules , , , , , , , the CAS plug-in  and any other service provider work with the presence module  and the collaboration services device  to determine and provide presence data to the client device via the CAS .","A presence service is information indicating, for example, the availability of an individual user or a group of users on a network. The availability of a user or group of users on the network includes, for example, whether a device associated with a user or group of users is presently active on the network. In one embodiment, the availability of a user or group of users on the network includes a description of a type of activity taken by a user or group of users such as \u201con a call,\u201d \u201ccall on hold,\u201d \u201cphone ringing,\u201d etc. The presence module  is communicatively coupled to the processing module  and the collaboration services device . A client (e.g., the client-side web client ) sends a CAS message to the processing module  requesting a presence service. The processing module  sends the CAS message to the presence module . The presence module  communicates with the collaboration service device  to provide the requested service. The processing module  sends a reply message to the client providing the requested service. The presence module  is described in more detail with reference to .","The instant messenger module  communicates with the collaboration services device  to provide an instant messaging service to clients. An instant messaging service is real-time direct text-based communication between two or more people using personal computers or other processor-based devices. The instant messenger module  is communicatively coupled to the processing module  and the collaboration services device . A client (e.g., the client-side web client ) sends a CAS message to the processing module  requesting an instant messaging service. The processing module  sends the CAS message to the instant messenger module . The instant messenger module  communicates with the collaboration services device  to provide the requested service. The processing module  sends a reply message to the client providing the requested service. The instant messenger module  is described in more detail with reference to .","In one embodiment, the CAS modules (i.e., modules , , , , , , , ) are each hardware devices comprised of electronic circuit boards and\/or firmware adapted to provide the functionality described above for the modules , , , , , , , . The individual hardware devices optionally comprise a processor and\/or a non-transitory memory that stores code and routines such as the firmware. In another embodiment the various modules , , , , , , ,  are code and routines stored on one or more non-transitory memories and configured to provide the functionality described above for the modules , , , , , , ,  when executed by a processor (not pictured). For example, the modules , , , , , , ,  are one or more applications stored in a memory of a computer (not pictured) and executed by a processor (not pictured) comprised within the computer.","Referring now to , a second embodiment for the CAS  is shown. The second embodiment for the CAS  comprises a network communication module , a communication bus , a processor , a memory , the CAS application the telephony module , the directory module , the configuration module , the voicemail module , the call history module , the presence module , and the instant messenger module . The CAS application  further comprises the client communication module , the status determination module , the operation determination module , the object manager , the permissions module  and the user interface module .","Those skilled in the art will recognize that some of the components of this second embodiment of the CAS  have the same or similar functionality to the components of the first embodiment of the CAS of . Like components with the same or similar functionality have the same reference numerals in  and descriptions of these components will not be repeated here.","The network communication module  is coupled to network  and bus . The network communication module  includes ports for wired connectivity such as but not limited to USB, SD, or CAT-5, etc. The network communication module  links the processor  to the network  that may in turn be coupled to other processing systems. The network  may comprise a local area network (LAN), a wide area network (WAN) (e.g., the Internet), and\/or any other interconnected data path across which multiple devices may communicate. The network communication module  provides other conventional connections to the network  using standard network protocols such as TCP\/IP, HTTP, HTTPS and SMTP as will be understood to those skilled in the art. In other embodiment, the network communication module  includes a transceiver for sending and receiving signals using WIFI, Bluetooth\u00ae or cellular communications for wireless communication.","The processor  comprises an arithmetic logic unit, a microprocessor, a general purpose processing unit or some other processor array to perform computations and process signals. The processor  is coupled to the bus  for communication with the other components of the CAS . The processor  processes data signals and may comprise various computing architectures including a complex instruction set computer (CISC) architecture, a reduced instruction set computer (RISC) architecture, or an architecture implementing a combination of instruction sets. Although only a single processor is shown in , multiple processors may be included. The CAS  also includes an operating system executable by the processor  such as but not limited to WINDOWS\u00ae, MacOS X, or UNIX\u00ae based operating systems. The processor executes the methods described below with reference to .","The memory  stores instructions and\/or data that may be executed by processor . The instructions and\/or data may comprise code for performing any and\/or all of the techniques described herein. The memory  may be a dynamic random access memory (DRAM) device, a static random access memory (SRAM) device, flash memory or some other memory device known in the art. In one embodiment, the memory  also includes a non-volatile memory such as a hard disk drive or flash drive for storing log information on a more permanent basis. The memory  is coupled by the bus  for communication with the other components of CAS .","Storage Device ",{"@attributes":{"id":"p-0141","num":"0140"},"figref":["FIG. 4","FIGS. 3A-3C"],"b":["239","239","210","210","239","444","446","448","450","470","472","444","446","448","450","470","472","334","336","338","340","324","444","446","448","450","470","472","334","336","338","340","324"]},"Although only one storage device is depicted in , a person having ordinary skill in the art will recognize that in one embodiment there are more than one storage devices  communicatively coupled to the CAS  and that each one comprises one or more of the directory storage , configuration storage , voicemail storage , call history storage , permission storage  and the subscription storage . One skilled in the art will also recognize that in one embodiment the different storages , , , , ,  and the data they comprise are stored in different devices on the server-side  on the system . For example, the voicemail storage  is stored on a memory that comprises the voicemail server .",{"@attributes":{"id":"p-0143","num":"0142"},"figref":"FIG. 5","b":["500","502","504","210","230","220","190","228","202","204","208","504","210","206","504","230","230","230","504","210","208","504","220","220","210","210","330","506","330","506","330","508","210","324","332","334","336","338","340","350","360","330","508","210","324","332","334","336","338","340","350","360","330","508","324","332","334","336","338","340","350","360","506","330","332","330","508","210","324","332","334","336","338","340","350","360","228","202","204","206","208","220","230","324","332","334","336","338","340","350","360"]},"At step  the processing module  determines  if the CAS  communicates synchronously or asynchronously with the service provider. A determination that the CAS  communications synchronously occurs if the CAS  does not need to communicate with an intermediary to provide the client with the requested service. A determination that the CAS  communications asynchronously occurs if the CAS  communicates with an intermediary to provide the client with the requested service. An intermediary is the TAPI , the voicemail server  or the collaboration services device .","In one embodiment, step  is performed by one or more of the CAS modules , , , , , , , .","If a determination is made at step  that the CAS  communicates synchronously, then at step  the applicable module from step  communicates with the storage device  to provide the requested service. In one embodiment, the applicable module interfaces with middleware in order to communicate with the storage device  and provide the client with the requested service. The processing module  receives  a response from the applicable module. The processing module  translates  the response for the client. For example, the processing module  translates  the response to a HTTP message encoded according to JSON or XML. The processing module  then sends the response to the client.","If a determination is made at step  that the CAS  communicates asynchronously, then at step  the applicable module from step  communicates with the intermediary. Since asynchronous communication requires more time to provide the requested service to the client, at step  the processing module  alternatively sends a message to the client informing the client that asynchronous communication is occurring. For example, the message informs the human user of the client that providing the requested service will take additional time. In one embodiment, this message is encoded in JSON, XML or a similar coding language. In one embodiment, this message includes an identifier (e.g., an integer used as an identifier) that is later used to identify the reply message received from the CAS . For example, the client is an HTTP-based client that receives the message and the identifier. The client stores the identifier. After a period of time, the client receives the reply message from the CAS  and determines that the reply message corresponds to the identifier. In one embodiment, the above-described identifier is for clients having protocols that do not already contain a way to match up a request with a response. A person having ordinary skill in the art will recognize that HTTP-based clients already include the functionality of the identifier (i.e., HTTP-based clients can match up requests with responses), so, in one embodiment the above-described identifier is implemented for clients that use a protocol that does not have the functionality of the identifier and cannot match up requests with responses.","The applicable module receives  the response from the intermediary. The processing module  receives  a response from the applicable module . The processing module  then translates  the response for the client. For example, the response is translated to an HTTP message encoded using JSON (or XML, etc.). In one embodiment, the translated response includes the identifier (e.g., integer) described above with reference to step .","In one embodiment, the client logs in to the CAS  prior to requesting a service. For example, the CAS  has one or more threads that receive requests from a client (i.e., a thread pool). The individual threads that comprise the thread pool process individual requests from individual clients. For example, the processing module  assigns a first thread from the thread pool to log the client into the CAS  and process request messages received from the client. In one embodiment, when assigning a first thread, the processing module  does not make a distinction between a request for a service received from a client and a request for an event. The processing module  also does not make a distinction between which threads handle requests for a service and which threads handle requests for retrieving events. Instead, the processing module  assigns a second thread from the thread pool to run an event loop that waits for request messages from the client and dispatches reply messages after the request messages are processed. In one embodiment, the first thread also performs the function of the second thread.","In another embodiment, from the client perspective the two threads are: (1) one thread logs the client into the CAS  and sends request messages to the client; and (2) the second thread runs an event loop that sends request messages to the CAS  (or protocol adapter  or server-side web client ) and waits for reply messages responsive to the request messages.","In a different embodiment, the client is a client-side web client . The client-side web client  communicates with CAS  on two threads from the thread pool. At any given time the client-side web client  uses a first thread to make a GetEvent request to the CAS . The client-side web client  uses a second thread to either (1) make a request for a service from the CAS  or (2) wait to receive an input (e.g., a input received from a human user of the client-side web client ) to initiate a service request from the CAS . The GetEvent request is described in further detail in the provisional application having Ser. No. 61\/365,262, the entirety of which is incorporated by reference in this application (referred to herein as \u201cthe priority application\u201d).","In one embodiment, the CAS  has a general pool of threads that process requests from clients. Threads are not assigned to any particular client, and no distinction is made between clients in terms of choosing threads from the thread pool. In other words, all the threads in the general thread pool can handle requests from any client. This is advantageous in that the processing module  does not need one thread per client, which makes the CAS  scale up more efficiently.","In yet another embodiment, the client is a thick client. Specifically, one or more of the IP phone , PCM , email client  and MCM  are a thick client. For example, the MCM  is a thick client and is an element of a smartphone. A thick client is known to those having skill in the art. The thick client uses a first thread to make a GetEvent request to the CAS . The thick client uses a second thread to log in to the CAS  and make service requests to the CAS .","In one embodiment, one or more of the first thread and the second thread is a dedicated thread.","In one embodiment, the response described with reference to steps  and\/or  includes permission data. Permission data is data that specifies what actions the client can take with the provided service. For example, if the client requests a call history service (user-based and\/or device based), the CAS  returns a response to the client at step  that includes permission data that specifies what actions the client can take on call history entries returned to the client using the call history service. For example, the permission data specifies whether the call history entries included in the history service can be deleted, or whether notes included on the history entry can be updated. In one embodiment, the permission data is applied to individual history items, or the call history service as a whole (e.g., the client is not permitted to request a call history service). A person having ordinary skill in the art will recognize that other actions are possible for the above-described call history service. Accordingly, the client has a record of the tasks that can be performed for any service. For example, the client comprises a non-transitory memory (e.g., flash) and stores a record of the permission data on the memory. In one embodiment, if the permissions for a service change, CAS  sends a message to the client updating the permission data so that the client has real-time permission data. In one embodiment, the client does not offer the user the option of performing steps that exceed the scope of the permission for any given service. For example, if the permission for a history service does not permit the client to delete a history entry, the client is not provided with a menu option at the client device that would request deletion of the history entry. As a result, in one embodiment, the CAS  does not have the undesirable requirement of sending error messages to the client devices when they make a request that exceeds the scope of permission granted to the client. In another embodiment, the CAS  sends error messages to certain clients that are not designed and\/or configured according to the specifications of the CAS  (referred to herein as \u201cother-specification-based clients\u201d) when these other-specification-based clients make a request that exceeds the scope of permission granted to the client.","In another example of permission data, a client is a client-side web client  and requests a telephone call. The CAS  returns a reply message to the client-side web client  that includes, among other things, data specifying a state of the call, the parties on the call, and the way the call was constructed. In one embodiment, the data additionally provides information to the client on precisely what actions the client has permission to take on that call, such as answer, hold, drop, transfer, conference, begin a data conference based on the call, park, etc, as the call state changes, or additional parties are added to the call, CAS  keeps the client apprised of the changes in which actions are allowed via events sent to the client.","Accordingly, in one embodiment permissions are centralized on CAS  and pushed out to clients as permission data included with messages sent by CAS  to the clients. Centralizing permissions on the CAS  as described above beneficially enable, among other things, a dynamic and more reliable way of providing permissions to client devices. For example, other telephony systems (e.g., system ) provide static permissions to client devices that do not reflect the real-time status of permissions. The permission data provided by the CAS  beneficially enable the client to receive real-time status of permissions since CAS  provides updated permission data with each request. Centralizing permissions on the CAS  also beneficially enables, among other things, easier client authoring since the client does not need to contain logic to determine which actions the client can take (this information is being provided by the CAS  in one embodiment), and enable a configuration where the CAS  has access to all the information required for determining permissions (clients do not have this information centrally stored, and have to be configured with error-prone code in order to determine permissions). Another benefit of the above-described embodiment is that human users of clients will not expect to receive as many error messages. Other benefits will be apparent to one having skill in the art. The permission data will be described in more detail below with reference to .","In one embodiment, permission data limits the scope of features for a service that can be provided to a client. For example, whether a user can retrieve all of a call history. In another embodiment, permission data limits access to the service itself. For example, whether a user can request any call history service.",{"@attributes":{"id":"p-0159","num":"0158"},"figref":"FIG. 6","b":["601","228","228","330","602","330","602","228","330","604","330","606","340","340","614","450","450","239","228","340","616","340","450","450","450","340","340","450","340","330","330","618","330","330"]},"In one embodiment, as described above with reference to  (steps  and ), the response sent to the client at step  includes permission data describing what actions the client can take on call history data returned to the client using the call history service (e.g., whether the call history entries included in the history service can be deleted, or whether notes included on the history entry can be updated).",{"@attributes":{"id":"p-0161","num":"0160"},"figref":"FIGS. 7A and 7B","b":["701","228","228","330","702","330","702","228","330","704","330","706","338","338","714","240","338","240","240","239","240","448","338"]},"The voicemail module  receives  the voicemail reply data from the voicemail server . The voicemail module  generates and sends a message to the processing module  including the voicemail reply data. The processing module  translates the message received from the voicemail module  for the client. For example, the processing module  translates the message to an HTTP message encoded according to JSON. This message is referred to herein as the first voicemail reply message. The first voicemail reply message includes the voicemail reply data. The processing module  sends  the reply message to the client.","In one embodiment, the voicemail reply data also includes permission data that specifies what actions the client can take with the voicemail service. For example, the permission data specifies that the client can perform one or more of the following actions: (1) reply to the voicemail message; (2) forward the voicemail message; and (3) edit the subject of the voicemail message. Persons skilled in the art will recognize that the permission data can regulate other actions not listed here. In one embodiment, these permissions are kept up to date by CAS  via events and\/or messages sent by CAS  to the client. For example, if an administrator of CAS  changes the permissions, the CAS  sends a message to the client updating the permission data.","In one embodiment, permission data is not sent with reply messages for voicemail service requests. In this embodiment the client itself is configured so that the client only performs a limited number of options for how voicemail data is used, and the client only provides options to the user that are consistent with these options. Similar clients are described in U.S. patent application Ser. No. 12\/415,586, the entirety of which is hereby incorporated by reference. For example, the client is a IP phone  that is configured so that voicemail data is always played over the speaker of the IP phone . The client only provides the user with input options (i.e., buttons and\/or a user interface) that are consistent with this configuration (i.e., inputs are only provided for playing the voicemail data over the speaker of the IP phone ). In another example, the client is an MCM  stored on a smartphone and the client only supports playing the voicemail data back over the speaker of the smartphone, and this is the only option presented to the user of the client. For example, the smartphone only has one button for playback of voicemails, and this button is only configured to playback the voicemail over the speaker of the mobile phone. In yet another example, the client is a PCM  stored as an element of a personal computer and the client supports playing the voicemail data back over a set of speakers that are communicatively coupled to the personal computer or playing the voicemail data back over the IP phone  that is communicatively coupled to the client PCM . For example, the PCM  generates a graphical user interface displayed on a monitor communicatively coupled to the personal computer and the graphical user interface has two buttons for playback of voicemails. A first button is only configured to playback the voicemail over the speakers communicatively coupled to the personal computer. A second button is only configured to playback the voicemail over the IP phone  communicatively coupled to the personal computer. A person having ordinary skill in the art will recognize that other options for voicemail data are possible that are still consistent with the description for this embodiment.","Turning to , the processing module  receives  a second message from the client. For example, the second request includes data indicating that a user desires to play a selected voicemail message. The second message is referred to herein as the second voicemail request message. The processing module  sends  the second voicemail request message to the voicemail module . At step  the voicemail module  sends a request to the voicemail server  for the requested service. The voicemail server  receives the request and processes the request to retrieve data from the voicemail storage  responsive to the second voicemail request message. For example, the second voicemail request message includes data for playing the selected voicemail. The voicemail storage  is a storage device (e.g., a database stored on a hard drive, flash or other non-transitory memory) that includes, for example, stored voicemails for the client device. The voicemail server  generates a query and retrieves the selected voicemail from the voicemail storage . The voicemail server  sends the retrieved data to voicemail module . The voicemail module  receives  the data and sends the data to the processing module  in a message. The processing module  receives the message, translates the message for the client and sends  the translated message to the client. This message is referred to as the second voicemail reply message. At step , the voicemail module  receives data from the voicemail server  when an action is about to take place (e.g. the message is about to be played). The voicemail module  sends the data to the processing module  in a message. The processing module  receives the message, translates the message for the client and sends  the translated message (voicemail data) to the client. The voicemail data provides the client with the requested service. For example, the user of the client listens to a selected voice mail message using the IP phone  when the voicemail data is received .","In one embodiment, the second voicemail reply message includes additional permission data that specifies what actions the client can perform on the data that comprises the voicemail. The additional permission data specifies, for example, how the client can access the data that comprises the voicemail. For example, whether the client has the option to download the voicemail message media to a device and\/or play the voicemail message over a telephone or IP phone. Persons skilled in the art will recognize that the permission data can regulate other actions not listed here. In one embodiment, these permissions are kept up to date by CAS  via events and\/or messages sent by CAS  to the client. For example, if an administrator of CAS  changes the permissions, the CAS  sends a message to the client updating the permission data.","In one embodiment, if the client requests that the voicemail data is to be played back on the client device (e.g., IP phone ), the voicemail module  communicates with the voicemail server  to send request that the voicemail server  play the selected voicemail message. The voicemail server  receives the request to play a selected voicemail message and establishes a connection to the client (e.g., the IP phone ). The voicemail server  receives the request to play the selected voicemail message and establishes a connection to the client. The voicemail server  notifies the voicemail module  that the message is about to be played and starts playing the message for the client. When the voicemail module  receives the notification that the message is about to be played from the voicemail server , it sends an event to the client notifying it that the message is starting to play.","In another embodiment, the client (e.g., PCM ) sends a request to CAS  that the voicemail data be downloaded. In one embodiment, the downloaded voicemail data is played via speakers present at the client. For example, the client sends a request to the CAS  indicating that the client wants to download a specific message. The processing module  sends the request to the voicemail module  which sends the request to the voicemail server . In one embodiment, the voicemail module  sends a response to the client indicating the request has been received. The voicemail server  communicates with the storage  and prepares the selected voicemail message to be downloaded by the client. The voicemail server  downloads the voicemail data to the storage . When the message is ready to be downloaded, the voicemail module  is notified by the voicemail server  and sends an event to the client indicating the location of the message that can be downloaded (e.g., the storage ). The client can then download the message to a local memory and play the message using an application configured for this purpose.","In one embodiment, the voicemail module  saves the voicemail data received at step  described with reference to . For example, the voicemail module  saves the voicemail data in the storage . In one embodiment, the voicemail module  saves the voicemail data and the permission data. The client then sends a third request to the CAS . The third request includes, for example, a request for the list of voicemails included in the voicemail data. The third request is not depicted in , but will be understood to one having ordinary skill in the art as occurring between steps  and . The third request is referred to herein as a \u201cthird\u201d request, not because it comes after the first request or the second request described above with reference to , but instead to distinguish the content of the third request from the content of the first and second request, i.e., the actual data and\/or service that is being requested from the CAS . After receiving the third request, the method moves on to step  and continues as described above for .",{"@attributes":{"id":"p-0170","num":"0169"},"figref":"FIGS. 8A and 8B","b":["801","228","228","228","210","210"]},"At step , the processing module  receives a CAS message including a request for a user's call handling settings. This message is referred to herein as the first configuration request message. The message is generated by a client such as the IP phone . The processing module  determines  that the first configuration request message is requesting a configuration service. The processing module  sends  the message to the configuration module . The configuration module  generates  a query for the configuration storage . For example, the client device is an IP phone  and the configuration storage  is a database comprised within the storage device  that include data describing the call handling settings for the IP phone  (or a user of the IP phone ). In one embodiment, the call handling settings includes a menu of modifications that can be made to the call handling settings. The menu is based in part on permission data. For example, the menu options only include modifications that are within the permission boundaries for the user and\/or client device. The configuration module  retrieves  a response to the query. For example, the configuration module  sends the query to the configuration storage . The configuration storage  receives the query and executes the query on the configuration database. The configuration storage  generates an answer to the query and sends the answer in a response back to the configuration module . The answer includes data responsive to the client request. The configuration module  receives the answer to the query from the configuration storage . The configuration module  sends the answer to the processing module  and the processing module  translates the answer. For example, the processing module  translates the answer to an HTTP message encoded according to JSON. This message includes the retrieved configuration data and is referred to herein as the first configuration reply message. In one embodiment, the answer also includes permission data. The processing module  sends  the first configuration reply message to the client.","Turning to , the processing module  receives  a second configuration request message from the client. For example, the second configuration request message includes the data indicating a user selection made from the configuration menu sent to the client in the first configuration reply message. In this example, the user requests a change to the call handling mode for the IP phone , which is an example of a write operation to be performed on the configuration database. Since the configuration menu included a menu option for changing the call handling mode, the permission data described above with reference to step  included data indicating that the user has permission to modify the call handling mode of the client device. If the user did not have this permission, the option to modify the call handling mode of the client device would not have been present in the configuration menu. The processing module  sends  the second configuration request message to the configuration module . At step  the configuration module  performs the write operation  requested by the client. For example, the configuration module  modifies the configuration data by writing new configuration data to the configuration database . The call handling mode for the client device is now changed. Optionally, at step  the processing module  sends a message to the client confirming that the write operation occurred. Step  is depicted with a dashed line to indicate that it is an optional step of method .",{"@attributes":{"id":"p-0173","num":"0172"},"figref":"FIG. 9","b":["901","202","202","202","330","902","330","902","202","330","904","330","906","334","334","914","444","228","444","239","334","916","334","444","444","444","334","334","444","334","330","330","330","330","919"]},{"@attributes":{"id":"p-0174","num":"0173"},"figref":["FIG. 10","FIG. 9","FIG. 9","FIG. 9","FIG. 13","FIG. 10"],"b":["1001","208","208","330","1002","330","1002","208","330","1004","330","1006","350","350","350","472","334","472","919","444","916","334","472","350","1014","274","350","274","350","350","330","330","330","350","334"]},"In one embodiment, the initial request for presence service described with reference to step  includes a request for updates on the presence status of users. For example, and as a continuation of the example described above where presence status is provided with a directory listing, the user requests real-time updates on the presence status of the users included in the directory listing. The CAS  monitors the presence status of users and sends update messages to the client when the presence status of the users changes. For example, the CAS  communicates with the collaboration services device  to monitor the status of the users in the requested directory listing and send messages to the client that include data describing the updated presence status of the users in the directory listing.","In one embodiment, the request for presence service described with reference to step  includes a request for updates on the presence status of users until an event occurs that indicates that the CAS  should stop monitoring the presence status for these users. Examples of events that indicate the CAS  should stop monitoring the presence status for these users includes: (1) CAS  receives a message from the client cancelling the presence service; (2) the client logs out of CAS ; and (3) the client is abandoned by CAS  due to inactivity. The CAS  monitors the presence status of one or more users (e.g., the presence status of a device associated with a user) and sends presence status update messages to the client responsive to a change in the presence status of one or more users. For example, and as a continuation of the example described above where presence status is provided with a directory listing, the user requests real-time updates on the presence status of the users included in the directory listing and updates on the presence status of the users included in the requested directory listing. The CAS  communicates with the collaboration services device  to monitor the status of the users in the requested directory listing and send messages to the client that update the presence status of the users in the directory listing. The client then generates and sends a message to the CAS  canceling the presence updates. The CAS  receives the message and ceases all presence monitoring and updates for the client.","In one embodiment, the client sends a single request message for a presence service to the CAS . The request message is a CAS message. The CAS message requests both the presence service and the directory listing in a single message. For example, the CAS message includes a request that the CAS  provide the client with the directory listing or a subset thereof with presence information for the entries in the directory listing. The processing module  receives the request, optionally translates the request and passes the request to the directory module . The directory module  receives the request from the processing module  and communicates with the presence module  and the collaboration services device  to provide the requested service. The processing module  then sends a CAS message back to the client providing the requested directory listing and the requested presence information for the entries in the directory listing. In one embodiment, the single request described above also includes a request for updates about the presence information. In this embodiment, the directory module : (1) receives the request from the processing module ; (2) performs the steps described above; and (3) communicates with the subscription module  to subscribe the client to updates about the presence information similar to the description in the two paragraphs immediately above this paragraph.","In one embodiment, the presence module  communicates with the collaboration services device  and other CAS modules , , , , , ,  to provide a compound presence service to a client. The compound presence service provides presence information to one or more clients who have one or more presence-enabled addresses. Such a client device can include, for example, an IP phone , an externally assigned cell phone (not pictured), an externally assigned smartphone (not pictured) or any similar device. These devices are referred to herein as \u201cpresence-enabled devices.\u201d The presence-enabled devices can include any device capable of communicating with the collaboration services device  to provide a presence status. In one embodiment, the compound presence service provided by the presence module  provides one or more of the following: (1) information about a telephony presence (e.g., whether a user is using their phone and\/or how the user is using their phone (such as IP phone ), or a system that knows about other types of phones); (2) information about a instant messaging presence (i.e., information about a user's availability for receiving instant messages); (3) information about a mobile phone presence (i.e., whether a user is using a mobile phone (not pictured), how a user is using a mobile phone and\/or whether a person is available to make and\/or receive a call on a mobile phone); (4) a rollup presence (i.e., a rollup presence is a single presence state that rolls up the presences of all endpoints into one value\u2014this is explained in further detail below); and (5) any combination of the above described presence services (e.g., the presence module  retrieves a telephony presence and an instant messaging presence for client, or the presence module  retrieves all of the above described presence information for a client (referred to herein as a \u201ceverything presence request\u201d). For example, a first client is a first PCM  operating on a first personal computer. Persons having ordinary skill in the art will recognize that other clients are possible. A second user is associated with an IP phone  and a second PCM . The first PCM  sends a CAS message to the CAS  including a compound presence request. A compound presence request is a presence request that includes a request for more than one type of presence service. In this example, the compound presence request includes a telephony address and an instant messaging address for the second IP phone  and the second PCM  (i.e., the first user is requesting presence information about the second user). The processing module  receives the compound presence request and relays the request to the presence module . The presence module  analyzes the compound presence request and identifies the telephony address and the instant messaging address. Since the compound presence request includes both a telephony address and an instant messaging address, the presence module  determines that the first PCM  is requesting presence service for both telephony and instant messaging about the second user (i.e., about the second IP phone  and the second PCM ). The presence module  then communicates with the telephony module  and the collaboration services device  to provide a telephony presence service to the first PCM  (e.g., information about whether the second user is on the phone or not) and an instant messaging service (similar to what is described below with reference to ) about the second user. Instant messages and instant messaging services are described in greater detail with reference to  below.","In another embodiment, the compound presence request identifies a user and requests both telephony and instant message presence information for the user without providing the separate addresses. In this embodiment, presence module  utilizes storage  to determine the telephony address and instant message address from the user identifier and proceeds to provide the presence information utilizing these addresses.","In one embodiment, the directory module  and\/or the presence module  provide a client (or a user of the client) with directory and\/or presence information for only those entries they are authorized to receive such information for. In one embodiment, a client (or a user of the client) is authorized to receive directory data for certain entries but not the corresponding presence data for those entities. In one embodiment, the directory module  returns directory entries for a larger number of authorized entries but the presence module  returns presence information for only the subset that the client is authorized to receive.","As stated above, in one embodiment the presence module  is adapted to provide a rollup presence service to a client. There are various different embodiments of a rollup presence, including, for example, (1) a most available rollup presence and (2) a semi-available rollup presence. A person having ordinary skill in the art will recognize that other types of rollup presences are possible.","A most available rollup presence service describes a second user as a being \u201cavailable\u201d (or any other similar characterization) if the user is available on at least one client. For example, a second user is associated with multiple addresses such as an extension number and an instant messaging address (\u201cIM address\u201d). The second user's status on their extension (which could, for example, be assigned to the IP phone ) describes a telephony presence for the second user and the second user's IM status (e.g., on an instant messaging server (not pictured)) describes an IM presence for the second user. A first user accesses a client and requests a most available presence service for the second user. The presence module  receives the request and communicates with the telephony module  and the collaboration services device  to determine the telephony presence and the IM presence for the second user. So long as the second user is \u201cavailable\u201d via either telephony or IM, the presence module  sends a message to the first client indicating that the second user is \u201cavailable.\u201d If the second user is not \u201cavailable\u201d via either telephony or IM, the presence module  sends a message to the first client indicating that the second user is \u201cnot available\u201d (or any other similar characterization) or \u201coffline.\u201d A person having ordinary skill in the art will recognize that there are other ways to implement a most available rollup presence.","A semi-available rollup presence service is similar to a most available rollup presence service. The difference here is that a semi-available rollup presence service describes a second user as a being \u201csemi-available\u201d (or any other similar characterization) if the user is not available on every client associated with that user. For example, a second user is associated with multiple clients with multiple addresses such as an extension number and an IM address. A first user accesses a client and requests a semi-available presence service for the second user. The presence module  receives the request and communicates with the telephony module  and the collaboration services device  to determine the telephony presence and the IM presence for the second user. So long as the second user \u201cavailable\u201d at one but not all of the communication services (i.e., telephony and IM), the presence module  determines the second user to be \u201csemi-available\u201d and the presence module  sends a message to the first client indicating that the second user is \u201csemi-available\u201d (or any other similar characterization). If the second user is not \u201cavailable\u201d via either telephony or IM, the presence module  sends a message to the first client indicating that the second user is \u201cnot available\u201d (or \u201coffline\u201d). A person having ordinary skill in the art will recognize that there are other ways to implement a semi-available rollup presence.",{"@attributes":{"id":"p-0184","num":"0183"},"figref":"FIGS. 11A and 11B","b":["1101","330","1102","330","1102","330","1104","330","1106","360","360","1114","274","274","360","360","1116","330","330","330","1118"]},"With reference to , the processing module  receives  a message from the client including a response input from the client. This message is referred to herein as the IM response input message. For example, the web browser receives the first IM reply message and causes the new instant messaging window to be exposed using the graphics data included in the message. The user types an instant message and presses the \u201center\u201d key (or the \u201creturn\u201d key). The web browser generates a CAS message that includes the instant message and sends the IM response input message to the processing module . The processing module  sends  the IM response input message to the instant messenger module . The instant messenger module  sends the IM response input message to the collaboration services device . In one embodiment, instead of sending  the input message to the instant messenger module , the processing module  sends  the input message to the collaboration services device . The collaboration services device  receives and processes the input message. For example, the collaboration services device  communicates with a second web browser in use by a second user and relays an instant message to the second browser based on the IM response input message. The collaboration services device  receives a response from the second browser. For example, the response from the second browser is an instant message for the first user from the second user. This response is referred to herein as a \u201csecond IM response input message.\u201d The instant messenger module  receives  the second IM response input message from the collaboration services device  and sends it to the processing module  in a message. The processing module  translates  the message for the client. For example, the processing module  translates  the message to be a CAS message that includes the data included in the second IM response input message. This message is referred to herein as the second IM reply message. Step  is depicted in  with a dashed line since it is an optional step in method . For example, in one embodiment the second IM response input message sent from the collaboration services device  to the CAS  is a CAS message that does not require translation by the processing module . The processing module  sends  the second IM reply message to the first web browser.",{"@attributes":{"id":"p-0186","num":"0185"},"figref":"FIG. 12","b":["1201","208","208","330","1202","330","1202","208","330","1204","330","1206","332","332","1214","218","218","222","332","1216","218","218","332","218","222","1218"]},{"@attributes":{"id":"p-0187","num":"0186"},"figref":["FIG. 13","FIG. 10"],"b":["1301","208","208","208","330","1302","330","1302","208","330","1304","330","1306","324","472","472","324"]},"The \u201cread\u201d service continues at step  where the subscription module  generates  a query for the subscription database. For example, a query that retrieves a list of the subscriptions for a client device. The subscription module  receives  reply data responsive to the query. The subscription module  sends the reply data to the processing module  and the processing module  generates a CAS message that includes the reply data. This message is referred to herein as a subscription reply message. The processing module  sends  the subscription reply message to the client.","The \u201cwrite\u201d service continues at step  where the subscription module  writes new data to the subscription database. For example, the subscription module  writes a new subscription to the subscription database responsive to the request received from the client. The processing module  sends  a message that includes confirmation of the write function to the client. This message is referred to herein as the second subscription reply message.","In one embodiment, in response to both read and write functions, the subscription database returns a summary subscription list. The summary subscription list describes all or a portion of the subscriptions for the client.",{"@attributes":{"id":"p-0191","num":"0190"},"figref":"FIG. 14","b":["1401","210","210","1402","210","210","210","210","210","210","210","210"]},"The CAS  receives  a CAS message from the client. The CAS message is a bulk request. The bulk request includes multiple requests and specifies how to process replies to the requests. The CAS  determines  that the CAS message includes multiple requests and is therefore a bulk request. The CAS  determines  the different types of services requested by each different request. The CAS  determines  how the client wants the replies to be delivered, e.g., (1) bulk responses, (2) serial responses or (3) a mixture of bulk responses and serial responses. The CAS  processes  the different requests as specified above for  and sends the responses to the client as determined in step . The priority application includes additional description relevant to step .",{"@attributes":{"id":"p-0193","num":"0192"},"figref":"FIG. 15","b":["1501","255","208","255","208","330","1502","330","1502","208","330","1504","330","1506","255","330","1508","255","330","1518","255"]},"Referring now to , a first embodiment  of a method for operating a unified communications server  to respond to a client request is described. The method  described below with reference to  corresponds to the embodiment of CAS  shown and described above with reference to . For the purposes of the discussion of this method , it is assumed that the request is coming from a client  which may be any one of the IP phone , the PCM , the e-mail client , the client-side web client  or the MCM . The communication of the client  with CAS  is assumed to be with the processing module , the CAS application  or one of the modules , , , ,  and  of the CAS application . The use of the term CAS  below can refer to any one of these components of CAS .","The method begins by receiving input from the user at the client  and generating  a request message. The request is sent  to CAS . The CAS  determines  the user\/caller and a contact. Throughout this description the term user and the term caller will be used interchangeably as a reference to the person or user that is initiating a communication operation. The term contact or callee is used throughout the description to refer to the user or person that the user\/caller wants to connect with in terms of communication or find information about in terms of presence. Those skilled in the art will recognize that not all requests include a contact\/callee and that certain operations only involve the user\/caller. In step , the method determines an identification number for the caller (and the contact). This identification number can be used to retrieve more information about the caller (and the contact) such as their preferences for unified communication, the type of service, their permissions, etc. Next, the method determines  the status of the caller. For example, in one embodiment the status of the caller is determined by the status determination module  as has been described above. The process for determining the status of the caller is described in more detail below with reference to . In another embodiment, step  also determines the status of the contact. This is performed in a manner similar to determining the status of the caller. Next, the method determines  operations that are available for the caller. The operations that may be performed by this caller are determined by a number of factors including: the status of the caller, the status of the contact, the permissions of the caller, network and bandwidth conditions between caller and contact, class of service of caller or contact, etc. For example, if there's isn't enough bandwidth available for an operation, it may not even be presented even though both the caller and the contact are otherwise capable of it and also have permissions to do so. In another example, the class of service of the caller may indicate which operations he\/she is permitted to perform, and the class of service of the contact may indicate which operations he\/she accepts. Next the method generates  a list of operations based upon step . One embodiment for this step is described in more detail below with reference to . In another embodiment, the operations out of a defined set of \u201coperations one can take against a contact\u201d that the caller can take is determined based on their current status and permissions. Then each contact a second set of which operations can be accepted is determined. The available operations is the intersection of these two sets. This list of operations is sent  from the CAS  to the client . The client  receives the list of operations and presents  them in a user interface that allows the user to select one of the operations. In some embodiments, the CAS  continues to determine operations available, changes in user states and generates updates to the list of operations. For example, CAS  may continue to monitor the status of the user and contact as well as other previously mentioned factors. The CAS  sends  the updated list of operations to the client . The client  receives the updated list of operations and presents  the updated operations in a user interface that allows the user to select one of the operations. Those skilled it the art will recognize that steps  and  may be performed any number of times (zero or more) to continue to provide the user with the an updated list of options. Furthermore, there may be a substantial lapse of time between step  of  and step  of  as represented by the break lines  shown on .","Referring now also to , the client device  receives input from the user and generates  a selection. The selection is sent  from the client  to the CAS . Referring now also to , the method continues with the CAS  generating  an object corresponding to an operation and permissions. In one embodiment, the object is generated by the object manager  as has been described above with reference to . The object is then executed  by the CAS  to perform the operation. For example, the operation may be any one or more of the operations described above with reference to  such as but not limited to providing: a call history, a voicemail service, a configuration service, a directory service, a presence service, a telephony call service, a subscription service, a bulk command service (one or more command or groups of commands) or plug-in service. Depending on the operation or operations performed, the CAS  may have data for delivery to the client . The CAS  next determines  whether there is data to be delivered to the client . If not, the method is complete and ends. On the other hand, if the CAS  does have data for the client , the CAS  sends  data to the client . The client  then outputs  the data to the user by displaying it or generating audio or other output after which the method is complete and ends. In another embodiment, step  is not performed, and instead the method sends either the data or an acknowledgement in step . For example, in many embodiments, the signaling between the client  and the CAS  uses either an HTTP or HTTPS protocol. Under either of these protocols, communications from the client  to the CAS  are HTTP requests, and for every HTTP request the CAS  sends an HTTP response.","Referring now to , a second embodiment  of the method for operating the unified communications server  to respond to client requests is described. The method  described below with reference to  corresponds to the embodiment of CAS  shown and described above with reference to . Again, for the purposes of the discussion of this method , it is assumed that the request is coming from a client  which may be any one of the IP phone , the PCM , the e-mail client , the client-side web client  or the MCM . The communication of the client  with CAS  is assumed to be with the processor  or one of the modules , , , ,  and  of the CAS . The use of the term CAS  below can refer to any one of these components of CAS .","The second embodiment  of the method for operating the unified communications server  begins with the CAS  receiving  a request from the client . Next, the CAS  processes  the received request to determine the user\/caller, a contact if any, and an operation. In one embodiment, the operation is included as part of the request and this eliminates the need to perform step  as is described below. Then the CAS  determines  the status of the user\/caller. In one embodiment, the status determination module  retrieves information about the user\/caller. This step is described in more detail with reference to  below. The status of the user\/caller affects the operations that may be performed by the user. Depending on the operation, the CAS  may also determine the status of one or more contacts in addition to the status of the user\/caller. Next, the method determines  operations that are available to the user\/caller. The operations are available to the user depend upon various factors as has been described above. One embodiment for determining a list of operations for the user is described below with reference to . The method then receives  the selection of an operation from the client . The CAS  performs  the selected operation. Next the method determines  whether there is data to be provided to the client . As has been noted above, step  is omitted in those embodiments that utilize an HTTP or HTTPS protocol, and the method transitions directly from step  to step  in which either data or an response that acknowledge a request is sent. If in step  it is determined that there is not date for the client, the method is complete and ends. If so, the method sends  the data to the client for output. This method is very similar to the method described above with respect to  but many of the steps are performed by the processor  of the CAS  by executing routines in modules , , , ,  and .","Referring now to , one embodiment of a method  for generating a list of possible communication operations for a user will be described. The method begins by determining  the user that is making the request. Since each user may utilize various different client devices, the method first determines  the identity of the user. More specifically, the present invention determines an identification number or string associated with the user. This identification number or string is used by CAS  to retrieve information specific to the user such as user preferences, permissions, etc. The method continues by determining  the status of the user. This is the same status as has been described above with reference to . One embodiment for determining status is described in more detail below with reference to . Next, the method determines  a contact or possible contacts. In one embodiment, the request from the user includes a specific party that will be the contact such as the person being called in a voice call or a contact whose presence is of interest. In this case, the method determines information about that contact for use in determining which operations are available. In another embodiment, the request does not specify a contact, but is attempting to determine operations that are generally available for the user. In this case, the method determines potential contacts from a predefined list of contacts, historical contacts or frequently used contacts. In either case, step  determines the contact or contacts and identification information that is used in determining what operations are available. The method continues by determining  which operations can be performed for this user and therefore are available. In making this determination , the CAS  utilizes the information from steps ,  and . In one embodiment, the operations are represented as bit fields, and sent to the client as a combination (logical OR) of the bits. In another embodiment, the operations are sent as a list of operations, in some predefined order. Next, the method generates  data for a graphical user interface and formatting information to present the operations that can be performed by the user as well as an indication as to with which contact the operation may be performed. In an alternate embodiment, the information is text data with only order information and no formatting. For example, a caller, user A, may be enabled to perform voice calling, video calling or conference calling over the IP network. However, a second user, user B, may only be able to perform voice calling; while a third user, user C, may be able to perform video calling or audio calling. In one embodiment, the GUI or data generated by the present invention includes a table with operations along the X-axis, contacts along the Y-axis and an indication in each cell of the table to indicate what operations are possible with different users. The method completes by sending  this information about operation contacts or GUI to the client .","Referring now to , one embodiment of a method  for determining the status of a user and\/or status of a contact in accordance with the present invention is described. Throughout this application, status of the user or status of the contact are used to refer to various factors that are used to determine whether CAS  can perform a unified communication operation for the user. Those skilled in the art will recognize that the steps of this method can be performed in any order other than that shown in  and described below and that in some embodiments not all of the steps of  need be performed. The various factors that are included in the status determination can be determined in any variety of orders different from that described below. The method begins by determining  the class of service for the user. Then the method determines  the client type currently being used by the user to connect with the CAS . Next, the method determines  the device type of the user. For example, the user may be connecting with CAS  using a cell phone, using a desktop application, using a soft phone, using an IP phone, or using a conventional analog phone. Each device type has different functional capabilities to which the CAS  automatically adjusts the operations which it offers to the user. The method continues by determining  the state of the user's device. For example, the user may be online, the phone may be off hook or on hook as well as various other current states that are dependent upon the type of the device being used. Next, the method determines  the user's preferences. For example, the CAS  can retrieve user preference information for this user from storage . Although not shown in , in alternate embodiments, the CAS  determines other types of information that may be used to decide which operations are available. In one embodiment, after step , the method is complete and ends. However, if one or more contacts have been identified, the method continues to determine the same information for the one or more contacts. For example, the CAS  determines  the class of service,  the client type,  the device type,  the state of the contacts device, and  the contact's preferences. All of these factors are included in the status of the user or the status of the contact. Those skilled in the art will recognize that fewer or more factors than those shown in  and described above may be utilized to determine the status and in the determination of what operations are available.","Referring now to , a third embodiment of a method  for operating the unified communications server  including considering permissions for a user is described. In particular, this is the case where a user has requested a specific operation involving a contact. The method  begins by receiving  a request to perform an operation between a user and a contact. Then the method determining  whether the user is an administrator. An administrator is a user that can configure the system  and change the settings of other users. In one embodiment, it is based upon whether the user has administrative role. For example, the user may be an administrator for some component system with which the CAS  interacts (e.g., voicemail server). In another embodiment, particular users are designated as administrators upon initialization of the system . If the user is an administrator, then the method continues to identify  the administrative permissions assigned to the user, after which the method proceeds to step . On the other hand, if the user is not an administrator, the method continues from step  to step  to determine whether the user has any delegated rights. Certain users of the system  may have delegated rights. This allows those users to take particular actions on behalf of another user. For example, a secretary may be able to set up a call for his boss with other users. In one embodiment, these permissions consider class of service, device type and state of parties involved in the communication and other real-time aspects. If not, the method proceeds to step  as will be described below. However, if the user has delegated rights, the method proceeds to step  to identify what permissions have been delegated to this user. After step , the method continues in step  to determine the permissions assigned to this user. Each user has basic permissions to perform communication activities. In this step, the method determines the particular permissions that have been assigned to this user. Next the method determines  the status of the user as has been described above. Then the method retrieves  the status for the contact. The method proceeds by determining  whether the operation is possible. If so the method performs  the operation and then notifies  or provides the user with any information from performance of the operation. On the other hand, if the operation was not possible in step , the method generates an error  is complete and ends. In an alternate embodiment show by the dashed line, the user is notified either of the error or the performance of an operation based upon the step from which the method transitions to step .","Referring now to , a fourth embodiment of a method  for operating the unified communications server  including considering permissions for a user is described. In particular, this is the case where a user has requested an operation that does not specify a contact or there are more than one possible contact. For example, the operation could be to provide a list of contacts that have presence on the network. The method  begins by receiving  a request to perform an operation for a user and multiple contacts or unspecified contacts. Next, the method  performs steps  to  as has been described above. Next, in step , the method determines possible operations. This step includes a determination of not only the operations, but other contacts and their availability on the network for those operations. Then the method generates  a list of possible operations. In one embodiment, this list of operations is generated along with the preferred interface for delivery of the information to the client . The method completes by sending  the list of possible operations to the client  for display to the user.","The foregoing description of the embodiments of the present invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the present invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the present invention be limited not by this detailed description, but rather by the claims of this application. As will be understood by those familiar with the art, the present invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise, the particular naming and division of the modules, routines, features, attributes, methodologies and other aspects are not mandatory or significant, and the mechanisms that implement the present invention or its features may have different names, divisions and\/or formats. Furthermore, as will be apparent to one of ordinary skill in the relevant art, the modules, routines, features, attributes, methodologies and other aspects of the present invention can be implemented as software, hardware, firmware or any combination of the three. Also, wherever a component, an example of which is a module, of the present invention is implemented as software, the component can be implemented as a standalone program, as part of a larger program, as a plurality of separate programs, as a statically or dynamically linked library, as a kernel loadable module, as a device driver and\/or in every and any other way known now or in the future to those of ordinary skill in the art of computer programming. Additionally, the present invention is in no way limited to implementation in any specific programming language, or for any specific operating system or environment. Accordingly, the disclosure of the present invention is intended to be illustrative, but not limiting, of the scope of the present invention, which is set forth in the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate several embodiments of the invention and, together with the description, serve to explain the principles of the invention. The invention is illustrated by way of example, and not by way of limitation in the figures of the accompanying drawings in which like reference numerals are used to refer to similar elements.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 7A and 7B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 8A and 8B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 11A and 11B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 16A and 16B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 21"}]},"DETDESC":[{},{}]}
