---
title: Application manager for monitoring and recovery of software based application processes
abstract: A constant monitoring and recovery system that enables the measurement of task usage/metrics and performance of software-based business applications. These metrics can then be evaluated by logic, in combination with each other and/or a timer, in a distributed environment. This is accomplished with the introduction of an extremely low overhead to the application host. The results of the logic evaluation can cause real-time and real-world responses such as application restart, interaction with load balancing equipment, or notification (via email, pager, etc.). Data can also be persisted to a database for later archival or evaluation, with the ability to reduce granularity over time. Specifically, an application manager monitors business application processes, notifies failure and automatically recovers software based business applications based on the logic of the underlying applications. The application manager comprises three main components that work together: Instrumentation API for setting up monitoring parameters; Event Notification and Automatic Recovery Evaluation Engine; Monitoring Console Server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07028225&OS=07028225&RS=07028225
owner: Path Communications, Inc.
number: 07028225
owner_city: Los Angeles
owner_country: US
publication_date: 20010925
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE EMBODIMENT OF THE INVENTION","EXAMPLE"],"p":["1. Field of the Invention","The present invention is directed to a system for monitoring and recovery of software based application processes. More particularly, a system for automatically restarting software applications and providing failure notification for automated business processes, and providing tracing of performance and availability of the applications, and service level management.","2. Description of Related Art","The popularity of the Internet fueled a great demand in business-to-business and business-to-consumer Internet applications. Many organizations have established Web-based distributed applications for dissemination or collection of information, or to extend remote access and command capabilities of processes through Web-based interfaces. For example, a merchant's web system allows consumers to purchase items online, and pay with a credit card. Credit card transactions are processed by communication with an outside system belonging to a third party.","The tremendous expansion of the Internet has also changed the paradigm of implementation and deployment of software applications and expanded the number and features in software applications. For example, Application Service Providers (ASPs) operate and maintain software application at remote web sites and as part of their product offerings, make those software applications available to users via the Internet.","For distributed network systems, several protocols exist in which one computer system (a \u201chost\u201d system) receives and processes messages from a number of other computer systems (\u201cclient\u201d systems). In the example of the World Wide Web (\u201cWWW\u201d), in the simplest network configuration, one server would be the host system while each personal computer would be a client system. If a web site is very popular, or otherwise has large volume of traffic, the host operations may fail due to a system overload. To address this problem, load directions or load balancing techniques have been developed, by which several servers are arranged in parallel, and arrangements implemented for distributing work among them. Distribution of work, where a received message is allocated to a particular host computer, is often referred to as load directions or load balancing.","Other prior art systems remotely monitor network systems to provide failure notification based on certain triggering events, or to avoid system overload. However, developers working on building software systems have limited access into the performance of various components, and must often rely on sorting through log files or devising tests to determine various levels of functionality. Further, when the system is \u201clive\u201d and in use, most of the currently available monitoring tools only report on basic hardware performance metrics such as CPU usage, or the receipt of a response from \u201cping-ing\u201d a port on a given machine. There is no way to monitor the level of performance of the actual business logic of an application, or the details of interactions with other external applications. None of the prior art systems perform failure notification and automatic recovery based on logical evaluation of the monitoring data they receive.","Accordingly, there is a need for a system and method for remotely monitoring the network, which avoid these and other problems of known systems and methods.","The present invention is directed to a constant monitoring and recovery system that enables the measurement of task usage\/metrics and performance of software-based business applications. These metrics can then be evaluated by logic, in combination with each other and\/or a timer, in a distributed environment. This is accomplished with the introduction of an extremely low overhead to the application host. The results of the logic evaluation can cause real-time and real-world responses such as application restart, interaction with load balancing equipment, or notification (via email, pager, etc.). Data can also be persisted to a database for later archival or evaluation, with the option to reduce the granularity over time.","Specifically, the present invention provides an application manager that monitors business application processes, notifies failure and automatically recovers software-based business applications based on the logic of the underlying applications.","In one aspect of the present invention, extensive monitoring and reporting capabilities are provided to allow developers of software systems to have greater access into the performance of various components of the software system, and to determine various levels of functionality of the systems. This visibility, throughout the development, integration, and testing processes significantly reduces the time, effort, and cost of software development. Once deployed, this visibility turns the system from a \u201cblack box\u201d (which can be tested only from the outside) into a \u201cwhite box,\u201d with complete access to individual processes, users, and other performance metrics. A company needs this level of specificity to maintain service level contracts, upon which their income may well depend!","In another aspect of the present invention, a means for monitoring any desired metric of any software application is provided. For example, the level of performance of the actual business logic of an application and\/or the details of interactions with other external applications are monitored when the software system is \u201clive\u201d and in use. This data is then collected, filtered, aggregated, or evaluated against logic\u2014all based on whatever criteria the user specifies. All data is then persisted, as configured, to be available for historical as well as real-time reporting. An option is provided to persist data at decreasing levels of granularity over time, to avoid accumulating too much data in the database. For example, the system can be configured to save \u201cper second\u201d data for one day, \u201cper minute\u201d data for one week, and \u201cper hour\u201d data thereafter.","In a further aspect of the present invention, failure notification and recovery are performed based on logical evaluation of the monitoring data it receives. Real-world events can be initiated, such as restarting the application, with the possibility of performing a \u201csoft shutdown\u201d to further minimize service disruption and loss of transactions, and sending a notification via email or pager, etc.","The application manager in accordance with the present invention (referred herein as P.A.M.) is a constant monitoring and recovery tool comprised of three main components that work together:\n\n","Downtime can be predicted and minimized to several seconds when failure occurs.","In addition to the foregoing components, the P.A.M. system provides for Data Logging and Mining, featuring:\n\n","These and other functions, features and advantages of the present invention will become more apparent in the detail description below.","The present description is of the best presently contemplated mode of carrying out the invention. This description is made for the purpose of illustrating the general principles of the invention and should not be taken in a limiting sense. The scope of the invention is best determined by reference to the appended claims.","The present invention substantially reduces the difficulties and disadvantages associated with prior art monitoring and failure recovery systems. To facilitate an understanding of the principles and features of the present invention, they are explained herein below with reference to its deployments and implementations in illustrative embodiments. By way of example and not limitation, the present invention is described herein below in reference to examples of deployments and implementations in the Internet environment. The present invention can find utility in a variety of implementations without departing from the scope and spirit of the invention, as will be apparent from an understanding of the principles that underlie the invention.","Information Exchange Network","The detailed descriptions that follow are presented largely in reference to examples relating to information handling devices and information exchange systems in terms of methods or processes and symbolic representations of operations within information handling devices. These method descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art.","A method or process is here, and generally, conceived to be a self-contained sequence of steps leading to a desired result. These steps require physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It proves convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities.","Useful devices for performing the operations of the present invention include, but are not limited to, general or specific purpose digital processing and\/or computing devices, which devices may be standalone devices or part of a larger system. The devices may be selectively activated or reconfigured by a program, routine and\/or a sequence of instructions and\/or logic stored in the devices. In short, use of the methods described and suggested herein is not limited to a particular processing configuration.","The application manager system in accordance with the present invention may be implemented to monitor and recover software based business applications in, without limitation, distributed information exchange networks, including public and private computer networks (e.g., Internet, Intranet, WAN, LAN, etc.), value-added networks, communications networks (e.g., wired or wireless networks), broadcast networks, and a homogeneous or heterogeneous combination of such networks. As will be appreciated by those skilled in the art, the networks include both hardware and software and can be viewed as either, or both, according to which description is most helpful for a particular purpose. For example, the network can be described as a set of hardware nodes that can be interconnected by a communications facility, or alternatively, as the communications facility, or alternatively, as the communications facility itself with or without the nodes. It will be further appreciated that the line between hardware and software is not always sharp, it being understood by those skilled in the art that such networks and communications facility involve both software and hardware aspects. Prior to discussing details of the inventive aspects of the present invention, it is helpful to discuss one example of a network environment in which the present invention may be implemented.","The Internet is an example of an information exchange network including a computer network in which the present invention may be implemented, as illustrated schematically in . Many servers  are connected to many clients  via Internet network , which comprises a large number of connected information networks that act as a coordinated whole. Details of various hardware and software components comprising the Internet network  are not shown (such as servers, routers, gateways, etc.), as they are well known in the art. Further, it is understood that access to the Internet by the servers  and clients  may be via suitable transmission medium, such as coaxial cable, telephone wire, wireless RF links, or the like. Communication between the servers  and the clients  takes place by means of an established protocol. As will be noted below, the software based business applications and various components of the application manager system of the present invention may be configured in or as one or more of servers . Users may access the applications via clients . Some of the clients  and servers  may function as a client and\/or server to other client(s) and\/or server(s).","System Overview","The present invention is directed to a system for automatically restarting and providing failure notification for automated business processes in software applications. Although the invention will be described in the context of the World Wide Web, and more specifically in the context of online enterprise applications, it is not limited to use in this context. Rather, the invention can be used in a variety of different types of software use. For example, the invention can be used with distributed transaction computing and Enterprise Application Integration (EAI), to name a few.","The included diagrams refer to the invention as P.A.M. P.A.M. is the Path Application Manager that monitors software applications, which is developed by Path Communications Inc., the assignee of the present invention.","P.A.M. is a constant monitoring and recovery tool comprised of three main components that work together:\n\n","The Instrumentation API is easily programmed to create \u201chooks\u201d to monitor unlimited tasks in a standard or custom application. Administrators set parameters or metrics to create customized views that monitor the activity specific to their enterprise. Such metrics include load variations, average response time specific to a task occurring outside of the web page, and other enterprise specific issues. Specific risk and problem areas of any application can be easily identified and anticipated using P.A.M. Administrators can also set metrics to respond only when a prescribed threshold is reached. In this way, non-critical problems are addressed at low traffic times.","Key points about the Instrumentation API are:\n\n","The P.A.M. Engine takes information from the Instrumentation API, evaluates it, and then takes the appropriate preprogrammed action. It also forwards the appropriate information to the P.A.M. Console Server for archiving and data mining to assist administrators with resource allocation planning and to assist engineers with invaluable performance and behavior data. The application may be recycled, halted and started again and administrators will be automatically notified of the problem by pager, e-mail or cell phones.","P.A.M. also offers a \u201csoft shutdown\u201d that will stop an application in stages, allowing ongoing operations to complete. This allows, for example, an in process credit card transaction to go through before shutdown, thus decreasing end user frustration. Furthermore, most failures require 30 minutes or more for recovery while P.A.M. decreases recovery time to less than ten seconds. In fact, recovery is so fast that users using applications monitored by P.A.M. do not know when failures occur.","Key points about the P.A.M. Engine:\n\n","This way the important data is maintained without overloading the database.","(3) Monitoring Using the P.A.M. Console Server","The P.A.M. Console Server provides an interactive display of enterprise metrics, giving a view of the enterprise's \u201chealth\u201d at a glance both in real-time and historically. Views can be personalized according to individual administrative roles and security access levels. Administrators choose what information (such as performance data) should be accessible remotely and only that information is sent to the P.A.M. Console.","Key points about the P.A.M. Console Server:\n\n","The following is a simple, common example of the present invention working in a real life environment:","A merchant's web server allows consumers to purchase items online, and pay with a credit card. Credit card transactions are processed by communication with an outside system belonging to a third party vendor. The web server is implement with the P.A.M. Automatic Recovery and Notification Engine (see disclosure below for details). When P.A.M. on the web server receives data from an instrument on that server about the current level of memory availability, it is checked against the configured parameters and responses of the transaction. If P.A.M. determines that the level of memory is critically low, the application would be restarted. More specifically, P.A.M. would first send an instruction to the load-balancing equipment not to send any new transactions. It would then monitor the communication with the outside credit-card processing system, waiting until all transaction in progress have been resolved. Only then would P.A.M. actually restart the application. When everything is back up and running, it would instruct the load-balancing equipment to begin sending new transactions again. As a result, the end-user would never be aware of the application shutdown. No transactions would be left hanging, with the consumer wondering if their credit card had been charged or not. No incomplete entries would exist in the system, costing time and money to track down with the third-party vendor.","Illustrated Embodiments","Turning now to the drawings,  provides an overview of the embodiment of the invention in an implementation of the Path Application Monitor (P.A.M.). Each application on a \u201cHost Server\u201d  is instrumented for monitoring. In some instances embedded tools present in the application are used, such as those provided by Microsoft, Oracle and other companies. Other applications may use other APIs such as SNMP or JMX. In other cases custom-coded instrument API's  are used. Data from these instruments is transmitted to the Notification and Automatic Recovery Engine on the same server (see also , , ). This Engine transmits data to the P.A.M. Console Server , residing on its own host computer. The Console Server persists data to the database , as well as allowing viewing access to the data via a web browser , without the security risk of giving a user direct access to the application host. The Console Server also transmits data to its own Notification and Automatic Recovery Engine . Only one Notification and Automatic Recovery Engine is needed per hardware box.","The Notification and Automatic Recovery Engine (and ) also evaluates the instrument data collected\u2014singly, in combination, and with the aid of other criteria such as timers. By evaluating these measures compared to the specified criteria, the Engine will trigger real-world events such as restarting the application, notifying a contact via email or pager, writing the event to a log file, sending instructions to load-balancing equipment, etc.","The flow of data through the components of the invention is detailed in reference to . Instrument data comes from the client to the Instrumentation API in step S. After applying filtering logic in step S and aggregation logic in step S (see ), the API sends data to the Notification and Automatic Recovery Engine (if it is subscribed) in step S as well as the Console Server (if subscribed) in step S. The Notification and Automatic Recovery Engine runs its evaluation logic in step S (see ). If needed, it then causes a real-world action in step S. The Console Server persists the data to the database, if needed, in step S. If needed, it will also roll the data buffer in step S. Like the Notification and Automatic Recovery Engine, the Console Server may also cause real-world events if its specified criteria are met, in step S.",{"@attributes":{"id":"p-0054","num":"0116"},"figref":"FIG. 3","b":["211","212","213","214","215"]},"The communications between the invention's components, as highlighted in , are detailed specifically in and The invention uses two different modes of data transmission, for the most efficient and effective means of accomplishing its purposes. Packets sent between the Instrument API and the Automatic Recovery and Notification Engine in step S, and between the Engine and the P.A.M. Console Server in step S utilize UDP. This asynchronous communication allows the minimum overhead to the host application, making it worth the trade-off of having no guarantee of delivery. Using UDP also reduces the security risk associated with a full TCP socket connection. The transmission destinations are also configurable, and may be sent to redundant boxes.","Within the P.A.M. Engine, information travels between the Instrument Data Server and the Evaluation Engine in step S over a continuous TCP connection to the Pathways server\u2014as fully enumerated in U.S. patent application Ser. No. 09\/596,763, which is fully incorporated by reference herein. This synchronous transmission ensures complete and sequential delivery of the data. HTTP Protocol is used in step S to allow access to Instrument meta-data, to the Console Server, and in a restricted form to each CLS\/IDS for in-depth analysis by administrative staff.",{"@attributes":{"id":"p-0057","num":"0119"},"figref":["FIG. 5","FIG. 3"],"b":["219","220","221","222","223","224","225"]},"If the CLS\/IDS invokes Log Handling in step S or S (see ), the Log Client proceeds as shown in . The first determination, in step S, is whether the Log Level requires local logging. If so, the data is logged to a file in step S. In step S, it is verified that the file sizes present on the disk do not exceed configured limits, and in step S unwanted files are removed. The next determination, made in step S, is whether the Log Level requires packet forwarding. If so, the data is forwarded to hosts as configured, in step S. Finally, in step S, the data is transmitted over a Pathways continuous TCP connection (see U.S. patent Ser. No. 09\/596,763) to each subscriber of the given Log Level, Topic, and Verbosity.","The process used to start up and initialize the Evaluation Engine is detailed in . Considerable care was taken to avoid \u201cracing conditions\u201d at startup, and the flow pictured is only one possible example of the outcome. The invention is coded so that it can start up properly regardless of the order in which other applications or processes are invoked in a multi-Thread, multi-process, multi-server environment.","First, all script files are loaded, based on system configuration, in step S. Step S begins a loop process for each application registered to P.A.M. This is done through configuration files, which also include the correct loading sequence of applications. The script, once loaded in memory, is scanned to determine Instrument subscriptions, in step S. Then step S begins a sub-loop for each Instrument:","If the Instrument is pre-registered (including known OS instruments, and other industry-standard interfaces such as SNMP and NT-Perfmon), the Standard Instrument Adaptor is invoked, and registered to the appropriate data in step S. If it is not pre-registered, a continuous TCP socket connection (see U.S. patent Ser. No. 09\/596,763) to the Instrument Data Server (IDS) is established per configuration in step S. In step S the Engine signs into the IDS and registers for the Instrument in question. Then in step S it assigns the callback method to be invoked when new Instrument data is received (during runtime, this mechanism is what triggers the Instrument evaluation described in ).","This ends the per-Instrument loop. When all Instruments are completed, this ends the per-application loop. At the end of this process the Evaluation Engine is ready to receive all relevant information from the IDS and\/or other Instrument data sources.","One possible subscriber is the Evaluation Engine, shown in . After receiving the data for a subscribed instrument from the CLS\/IDS in step S (see ), the Engine invokes the JavaScript method which is registered to evaluate the given instrument (step S, see also ). If the evaluation results in the application failure flag being set in step S, then the application will be restarted in step S (see ). If the Evaluation logic described in  determines that a restart is needed, the process used by the invention to restart an application in a load-balanced environment is broken down in .","Depending on configured settings, an email (or other) notification of the impending restart may be sent in step S. The load balancing equipment is notified in step S not to send any new requests to the application. If there is time for a soft-shutdown, the invention will then monitor the specified Instrument (such as activeRequestCpount) until the application has completed all pending activity, shown in step S. After that has been accomplished, or if there is not time to wait for a soft-shutdown, the application is restarted in step S (see ). A timer event in step S allows time for the application to resume. In step S the load balancing equipment is notified that it may resume sending new sessions or requests, and (if configured) an email or other notification of the successful restart is sent in step S.","Software Components of P.A.M.","The following description further provides enablement for a person skilled in coding to develop the codes for the various components of P.A.M., in a manner to achieve the features and functionalities of the components described above:","The Notification and Automatic Recovery Engine code is comprised of:",{"@attributes":{"id":"p-0066","num":"0000"},"ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":{"@attributes":{"id":"ul0013-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":["Code that can read configuration and properties files, and instruct the engine what processes, executables, NT services or Unix daemon processes are monitored by the engine.\n        \n        ","Code that can monitor, start and stop NT services. (In order to simplify development it is recommended to implement a \u201cSingleton\u201d \u201cDaemonProcessManager\u201d which keeps track of all the processes managed by the system. An abstract class DeamonProcess is in turn implemented for WinServer, UnixService, etc.)\n        \n        ","Code that can monitor, start and stop Unix daemon processes.\n        \n        ","Code that can monitor, start and stop software processes as executables or under the Java Virtual Machine.\n        \n        ","Code that can monitor, start and stop machine-readable executable programs.\n        \n        ","Code that can read a JavaScript compliant rule file attached to each process, or assume default behavior when the file is not present.\n        \n        ","Code that evaluate and take action according to the script.\n        \n        "]}}}},"In order to comply to the latest JavaScript syntax a third party JavaScript engine can be used. All custom Object and or special method implementations, such as a method email (\u201c . . . msg . . . \u201d), need to be captured during the parsing and implemented as a part of the program.\n\n","Instrument and logging data are routed to remote hosts, and other actions taken based on configurations of Central Logging Server and Instrument Data Server. These actions can all be modified via configuration options in XML. This data transmission methodology includes:\n\n","Data collected from all applications can be archived, monitored in a way that enables the system to:\n\n","The process and system of the present invention has been described above in terms of functional modules in block diagram format. It is understood that unless otherwise stated to the contrary herein, one or more functions may be integrated in a single physical device or a software module in a software product, or one or more functions may be implemented in separate physical devices or software modules at a single location or distributed over a network, without departing from the scope and spirit of the present invention.","It is appreciated that detailed discussion of the actual implementation of each module is not necessary for an enabling understanding of the invention. The actual implementation is well within the routine skill of a programmer and system engineer, given the disclosure herein of the system attributes, functionality and inter-relationship of the various functional modules in the system. A person skilled in the art, applying ordinary skill can practice the present invention without undue experimentation.","While the invention has been described with respect to the described embodiments in accordance therewith, it will be apparent to those skilled in the art that various modifications and improvements may be made without departing from the scope and spirit of the invention. For example, the inventive concepts herein may be applied to wired or wireless system, based on the Internet, IP network, or other network technologies, for financial, informational or other applications, without departing from the scope and spirit of the present invention.","While the application manager system is described here as related primarily to Web based systems, where a distributed system makes availability difficult to manage, other embodiments may include any distributed systems that require remote monitoring and immediate action taken, while enabling only a small distraction for the calling software. Because one of the advantages to the implementation of this patent is the ability to gather filtered information from largely distributed systems, with minimum disruption to the environment in which the software is running or the network surrounding it, possible implementations can include WAP device health monitoring, appliance monitoring within a bandwidth restricted environment, etc. For instance, it is likely that in the near future all home appliances will have a chip in them to allow monitoring. But for cost consideration, it does not make sense to have full monitoring functionality built into every toaster, for example. Further, if the data is to be transmitted to a central location for monitoring, this could easily be such a huge volume as to be overwhelming. This is a clear example of a situation where the invention could be used to collect the data and filter it (perhaps at the \u201cper home\u201d level), transmit it, analyze it, and persist it as needed. Failure notification and perhaps features such as automatic shutdown could also be built into various points in the system.","Accordingly, it is to be understood that the invention is not to be limited by the specific illustrated embodiments, but only by the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTIPTION OF THE DRAWINGS","p":["For a fuller understanding of the nature and advantages of the present invention, as well as the preferred mode of use, reference should be made to the following detailed description read in conjunction with the accompanying drawings. In the following drawings, like reference numerals designate like or similar parts throughout the drawings.",{"@attributes":{"id":"p-0020","num":"0055"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0056"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0057"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0058"},"figref":"FIGS. 4","i":["a ","b "],"b":"4"},{"@attributes":{"id":"p-0024","num":"0059"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0060"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0061"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0062"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0063"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0064"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0030","num":"0065"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
