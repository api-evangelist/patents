---
title: Safe installation of browser extensions
abstract: Methods and apparatus for installing browser extensions are disclosed. An example method includes receiving a browser extension installation package in a main browser process, validating a digital signature of the installation package and launching a sandboxed sub-process of the browser application. The example method includes, in the sandboxed sub-process: respectively transcoding or recoding at least one of the plurality of constituent files, where the transcoded and/or recoded files replace their corresponding original constituent files. The example method includes, after the transcoding and/or recoding, passing the constituent files from the sandboxed sub-process to the main browser process and installing the browser extension to the browser application using the transcoded and/or recoded files.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732474&OS=08732474&RS=08732474
owner: Google Inc.
number: 08732474
owner_city: Mountain View
owner_country: US
publication_date: 20110518
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit, under 35 U.S.C. \u00a7119, of U.S. Provisional Patent Application No. 61\/345,999, U.S. Provisional Patent Application No. 61\/346,000 and U.S. Provisional Patent Application No. 61\/346,013, all filed May 18, 2010. The disclosures of these provisional patent applications are incorporated herein by reference in their entirety.","This application relates, in general, to installation of browser extensions.","Use of the World Wide Web continues to increase, as does the amount and variety of content that is available to its users. Users of the World Wide Web commonly use browsers (web browsers) implemented on a web-enabled computing device to access content. Such devices include personal computers, laptop computers, netbook computers, smartphones and cell phones, among a number of other possible devices. Such web browsers are configured to read programmatic code and render that code as web pages, which may include rendering both audio and visual content contained in various media files (e.g., image, video and audio files), as well as performing other functions defined in the programmatic code. Web pages are generally implemented using standard programming languages such as HTML, HTML5, CSS and JavaScript, among a number of other available programming languages.","Some browsers allow users to install add-ons (or extensions) to the browser, where such extensions add functionality to the browser and operate as an integrated part of the browser. For instance, an extension may provide a user access to its additional functionality by modifying a user-interface (UI) of the browser. As an example, a weather forecast extension may be added to a browser, where the extension provides easy access to weather information by adding an icon or a button to the UI of the browser. A user may then interact with the extension's button or icon (e.g., by clicking it or hovering over it with a pointing device) to obtain weather information, rather than having to browse to a weather related web page in order to obtain weather information.","Browser extensions are generally implemented using programmatic code that is written using the same programming languages that are used for implementing web pages. From a browser's perspective, extensions effectively function as web pages that are an integrated part of the browser once they are installed. By installing extensions that are of interest to him or her, a user can effectively create a custom browser that includes the functionality of the extensions they choose to install.","In a general aspect, a computer-implemented method for installing a browser extension in a browser application includes receiving, in a main process of the browser application running on a computing system, a browser extension installation package for installation in the browser application. The browser extension installation package includes a header and a compressed, archived file. The compressed archived file contains a plurality of constituent files of the browser extension. The computer implanted further includes placing the browser extension installation package in a temporary directory and launching a sandboxed sub-process of the browser application. The sandboxed sub-process has access to the temporary directory. The computer-implemented method also includes, in the sandboxed sub-process: unpacking the compressed, archived file into the plurality of constituent files of the browser extension, and transcoding or recoding at least one of the plurality of constituent files, where the transcoded and recoded files replace their corresponding original constituent files. After the transcoding and\/or recoding, the computer-implemented method also includes passing the constituent files back to the main browser process and, in the main process of the browser application, installing the browser extension to the browser application using the transcoded and recoded constituent files.","Example embodiments may include one or more of the following features. For instance, placing the browser extension installation package in a temporary directory may include creating and initializing, by the main browser process, a temporary file directory for use by the sandboxed process and copying the browser extension installation package to the temporary file directory. The sandboxed sub-process and the main process of the browser application may communicate via an inter-process communication (IPC) layer. The sandboxed sub-process may be restricted to accessing only resources of the computing system that are allocated to it by the main browser process. The transcoded and recoded constituent files may be passed back to the main browser process via the IPC layer.","The computer-implemented method may include, prior to launching the sandboxed sub-process: extracting a public key from the header; and validating (verifying) a digital signature of the compressed, archived file using the public key. If validation of the digital signature is successful, installation of the browser extension may continue. If validation of the digital signature is unsuccessful, installation of the browser extension may be canceled.","Unpacking the compressed, archived file into the plurality of constituent files of the browser extension may include determining whether unpacking of the compressed, archived file completed successfully. If unpacking of the compressed, archived file completed successfully, installation of the browser extension may continue. If unpacking of the compressed, archived file did not complete successfully, installation of the browser extension may be canceled.","The computer-implemented method may include, subsequent to unpacking the compressed, archived file, validating the header of the browser extension installation package. If validation of the header completes properly, installation of the browser extension may continue. If validation of the header does not complete properly, installation of the browser extension may be canceled. Validating the header may include: verifying that a size of the header matches an expected header size; verifying that the header includes a properly located browser extension installation package identifying code; verifying that the header includes a properly formed and properly located version field; verifying that a size of a public key included in the browser extension installation package matches an expected public key size; verifying that a size of a digital signature of the browser extension installation package matches an expected digital signature size; and\/or verifying that a format of the public key matches an expected public key format.","The computer-implemented method may include, subsequent to unpacking the compressed, archived file, verifying a digital signature of the unpacked browser extension installation package. If verification of the digital signature is successful, installation of the browser extension may continue. If verification of the digital signature is unsuccessful, installation of the browser extension may be canceled. Verifying the digital signature may include: extracting a public key from the browser extension installation package; decrypting the digital signature using the public key; generating a message digest of the unpacked browser extension installation package; and\/or comparing the generated message digest with the decrypted digital signature.","Transcoding or recoding the plurality of constituent files may include, for an image file of the browser extension installation package, decoding the image file using an image encoder\/decoder included in the browser application and re-encoding the image file to a bitmap format using the image encoder\/decoder included in the browser application. If decoding the image file completes successfully, installation of the browser extension may continue. If decoding the image file is unsuccessful, installation of the browser extension may be canceled.","Transcoding or recoding the plurality of constituent files may include, for one or more JavaScript Object Notation (JSON) objects of the browser extension installation package, parsing the one or more JSON objects using a JSON parser included in the browser application and serializing the one or more parsed JSON objects for communication over an IPC layer. If parsing of the one or more JSON objects is successful, installation of the browser extension may continue. If parsing of the one or more JSON objects is unsuccessful, installation of the browser extension may be canceled.","The one or more JSON objects may include a manifest file. The manifest file may include a plurality of fields containing defining information for the browser extension. The one or more JSON objects may include a catalog file, the catalog file including a plurality of key-value pairs, the key-value pairs being configured to provide for internationalization of the browser extension.","In another general aspect, a recordable storage medium has recorded and stored thereon instructions for installing a browser extension in a browser application, the instructions, when executed by a computing device, cause the computing device to receive, in a main process of the browser application, a browser extension installation package for installation in the browser application, where the browser extension installation package includes a header and a compressed, archived file. The instructions, when executed, further cause the computing device to place the browser extension installation package in a temporary directory and launch a sandboxed sub-process of the browser application, where the sandboxed sub-process has access to the temporary directory. The instructions, when executed, further cause the computing device to, in the sandboxed sub-process: unpack the compressed, archived file into a plurality of constituent files of the browser extension and transcode or recode at least one of the plurality of constituent files, where the transcoded and recoded files replace their corresponding original constituent files. The instructions, when executed, further cause the computing device to, after the transcoding and\/or recoding, pass the constituent files back to the main browser process and, in the main process of the browser application, install the browser extension to the browser application using the constituent files passed back from the sandboxed sub-process. The recordable storage medium may implement one or more the features discussed above with respect to the computer-implemented method general aspect.","In another general aspect, an apparatus includes a processor and a non-transitory recordable storage medium having instructions for installing a browser extension in a browser application recorded thereon. The apparatus is configured, as result of executing the instructions, to receive, in a main process of the browser application, a browser extension installation package for installation in the browser application, where the browser extension installation package includes a header and a compressed, archived file. The apparatus is also configured, as result of executing the instructions, to place the browser extension installation package in a temporary directory and launch a sandboxed sub-process of the browser application, where the sandboxed sub-process has access to the temporary directory. The apparatus is further configured, as a result of executing the instructions, to, in the sandboxed sub-process, unpack the compressed, archived file into a plurality of constituent files of the browser extension, and transcode or recode at least one of the plurality of constituent files, where the transcoded and recoded files replace their corresponding original constituent files. The apparatus is still further configured, as result of executing the instructions, to, after the transcoding and\/or recoding, pass the constituent files back to the main browser process and. in the main process of the browser application, install the browser extension to the browser application using the constituent files passed back from the sandboxed sub-process. The apparatus may implement one or more the features discussed above with respect to the computer-implemented method general aspect.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.","A system and\/or method for web-based applications, substantially as shown in and\/or described in connection with at least one of the figures, as set forth more completely in the claims.","Like reference symbols in the various drawings indicate like elements.","This document describes systems and techniques that relate to installation of an extension in a browser application using a sub-process of a main process of the browser application. Throughout this document, the terms browser application, web browser and web browser application may be used interchangeably to refer to the same thing. A browser application may be an application configured to run on a computing system and render web content, such as web pages, web-based application and browser extensions, as some examples. In an example embodiment, the browser sub-process noted above runs separately from other sub-processes of the browser, such as tabs, web-based applications and previously installed browser extensions.","As is described herein, the browser sub-process that is used during installation of a browser extension may operate as a sandboxed sub-process. As the term is used herein, a sandboxed process is an unprivileged process that is isolated from a main, privileged (e.g., is able to access system resources) browser process, as well as an underlying operating system of a computing device on which the browser application is implemented. Such sandboxing may be accomplished by limiting, or preventing access to the resources of the browser application and\/or resources of the underlying operating system (e.g., persistent memory, system calls, etc.) by the sandboxed sub-process.","Throughout this document, the terms extension and browser extension may be used interchangeably to refer to the same thing. In one example, a browser extension may be delivered to a computing device for installation as an installation package that includes a zipped bundle of files (e.g., compressed, archive file) and a header that includes some metadata about the extension. A properly formed extension, when unpacked and installed in the browser, adds functionality to the browser application. Extension applications may operate as webpages and may use all of the application programming interfaces (APIs) that the browser application provides to webpages, such as when they are executed as part of the trusted browser process or in a trusted sub-process. The types of data files of an extension application included in a zipped file bundle of an extension installation package may include hypertext mark-up language (HTML), cascading style sheets (CSS), JavaScript, images, and other types of files and web-related computer languages and code, such as JavaScript Object Notation (JSON) objects.","As discussed above, some of the types of data files used in browser extensions (e.g., image files and JSON objects) may be used as a vehicle for malicious acts, such as placing persistent malware (malicious software) on a user's computing system when an installation package for the browser package is unpacked, for example. In other instances, if poorly formed data files are included in a browser extension installation package, those poorly formed files may cause functionality problems in an associated browser application and\/or an underlying operating system of a computing device on which the browser application is implemented. Using the techniques described herein (e.g., using sandboxed sub-processes), such problems may be reduced, or eliminated.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1","b":["100","100","100"]},"In some instances, the browser extension installation package  will be well formed, while in other instances the browser extension installation package  may be poorly formed, and\/or may contain corrupt or malicious content. The techniques described herein may be used to safely install browser extensions from well-formed browser extension installation packages , as well as safely attempt to install poorly-formed and\/or malicious browser extension installation packages , while substantially reducing or eliminating the risks associated with installing such poorly-formed and\/or malicious browser extension installation packages in a privileged browser process.","In this example, the browser extension installation package  includes a header . The header  may adhere to a fixed format that allows the header  to be readily validated, such as by a sandboxed browser sub-process, as described herein. In an example embodiment, validating the header  comprises, at least, validating that the header  is properly formed with respect to a standard header format. An example approach for performing such validation of the header  is discussed below with respect to .","As shown in , the header includes an extension package ID code  (which may be referred to as a \u201cmagic number\u201d), a version number , a public key length , a digital signature length , a public key  and a signature . In an example, embodiment, extension package ID code  (magic number) may be a field that contains a constant value that indicates that the installation package  is (or purports to be) a browser extension installation package. In this example, the version  may be a field that species a file format version for the browser extension installation package .","In the header , the public key length  may be a field that specifies the length of the public key  (e.g., in bytes) and the signature length  may be a field that specifies a length of the digital signature  (e.g., in bytes). The public key  may be a field that contains a Rivest, Shamir and Adleman (RSA) public key. In an example embodiment, the public key  may be an X509 SubjectPublicKeyInfo block that corresponds with the extension developer's private encryption key. In this example, the digital signature  may be a digital signature of the compressed, archived zip file  that is included in the browser extension installation package . In one embodiment, the digital signature  may be generated by producing a hash of the zip file  (e.g., using a secure hash algorithm (SHA), such as SHA-1) and then encrypting the hash using the browser extension developer's private key that corresponds with the public key .","As shown in , the zip file  of the browser extension installation package  includes JSON objects , image files , other files  and another digital signature . In an example embodiment, the JSON objects  may include a manifest data file and a catalog data file. In this example, the manifest file may be a JSON-formatted file that includes a plurality of information fields that are used to define the corresponding extension, such as a name field and a version field. The manifest file may also include fields that define the types of actions the extension will take in the browser, such as displaying icons, for example. The manifest file may also be used to specify a number of other optional attributes of an extension, including specifying a second public key, which may be used to verify the unpacked contents of the zip file  or, alternatively, may be used to verify other portions of the extension. The catalog file, in this example, is a JSON-formatted file that includes a plurality of key-value pairs that may be used for internationalization of the browser extension included in the browser extension installation package .","In an example embodiment, the image files  may include icons, as well as images files that are used by the extension when it is rendered in the browser. The image files may be in a number of formats, such as ICO, GIF, JPG and PNG, among a number of other possible formats. As indicated in , the other files  of the zip file  may include HTML files, CSS files, JavaScript files, audio files, and\/or XML files among other types of files that an extension may need. XML files may also be provided to a computing device in response to auto-update requests that are made by an extension that is already installed. Such XML files may be transcoded and\/or recoded in similar fashion as a browser extension installation package, such as using the techniques described herein.","The digital signature , in this example, may be a digital signature of the unpacked zip file  of the browser extension installation package . For instance, the digital signature  may be generated using similar techniques as were described above with respect to the digital signature . Further, a method for verifying the digital signature  is described below with respect to .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2","FIG. 2"],"b":["200","200","200","200","220"]},"In this example, the sandboxed sub-process  is an unprivileged process, which runs as a separate thread from the main browser process . The sandboxed sub-process  is restricted from accessing resources of the computing system on which it running, with the exception of resources that are allocated to the sandboxed sub-process  by the main browser process . These resources restrictions and allocations may be enforced in accordance with a policy by the policy\/policy engine  of the main browser process  and the client policy engine  of the sandboxed sub-process .","As shown in , the main browser process  may include an inter-process communication (IPC) service  and the sandboxed sub-process  may include an IPC client . The sandboxed sub-process  may communicate with the main browser process  via its IPC client , an IPC layer  and the IPC service  of the main browser process . Using the IPC layer , the sandboxed sub-process  can request resources from the main browser process, such as services that are performed by the browser, including those described herein, such as below with respect to , for example.","As is also shown in , the sandboxed sub-process  may have access to a temporary file space , within which it may access and write browser extension temporary files  during sandboxed operations related to installing browser extensions, such as those described herein. The temporary file space  is a system resource (e.g., a dedicated area of a file system) that is allocated, by the main browser process , to the sandboxed sub-process . In one example embodiment (such as in the method ), the main browser process  may define the temporary file space  by initializing a directory path that is to be used by the sandboxed sub-process . Once the temporary file space  is initialized, the main browser process  may then launch the sandboxed sub-process  \u201caround\u201d the temporary file space .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 1","FIG. 2"],"b":["300","300","100","200","300","200"]},"As shown in , the browser  includes an archive (e.g., zip) file unpacker , which may be used to unpack the compressed, archive file  of the browser extension installation package  that includes the constituent elements (data files) of the browser extension installation package . The browser  also includes an image decoder\/encoder , which may be used to transcode and\/or recode the image files . The browser  further includes a JSON parser , a serializer  and an XML parser . The JSON parser  may be used to parse any JSON objects  included in the compressed archive file , such as a manifest and\/or a catalog, as are described herein. The serializer  may then be used to serialize the parsed JSON objects for transmission over an IPC layer between a main (privileged) browser process and a sandboxed sub-process. The XML parser  may be used to parse XML files, such as may be used to implement auto-updates to installed extensions, e.g., after being provided in response to an auto-update request generated by an installed extension. In an example embodiment, the serializer may also be configured to serialize such parsed XML files, which can then be passed to a main browser process from a sandboxed sub-process using an IPC layer, such as described herein.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIGS. 4-9","FIGS. 1-3","FIGS. 1-3"],"b":["400","500","600","700","800","900","400","900","400","900","400","900","400","900"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIGS. 1-3","FIG. 5","FIG. 5"],"b":["400","400","400","400","425","440","445","450","455","500","400"]},"At block , the method  includes receiving, in a main process  of a browser application  running on a computing system, a browser extension installation package , for installation in the browser application . The computing device may be, for example, one of the computing devices illustrated in . In the example method , the browser extension installation package  may include a header  and a compressed, archived file , the compressed archived file  containing a plurality of constituent files of the browser extension, such as the JSON objects , the image files  and the other files , as illustrated in .","At block , the method  includes creating a temporary file directory, which may also be referred to as designating temporary file storage space  in the corresponding computing system's file system. In the method , the temporary file directory\/file space  is accessible to the sandboxed sub-process . At block , the method  includes copying (or placing) the browser extension installation package  to (in) the temporary file directory\/file space .","The method  then moves to block , where the method  includes extracting a public key  from the header . The method  then includes, at block , validating a digital signature  of the compressed, archived file using the public key . At block , the method  includes launching the sandboxed sub-process  of the browser application, where the sandboxed sub-process has access to the temporary directory\/file space , as discussed above.","At block , the method  includes, in the sandboxed sub-process , at block , unpacking the compressed, archived file  into the plurality of constituent files ,  and  of the browser extension, which may be accomplished using the archive file unpacker  of the browser , where the constituent files ,  and  are placed in the browser extension working files  (in the sandboxed process ).","At block , the method  includes validating the header  of the browser extension installation package . An example approach for validating the header  is discussed below with respect to .","At block , the method  includes verifying the digital signature  of the unpacked browser extension installation package, which both may be included in the browser extension working files  of . An example approach for verifying the digital signature  is discussed below with respect to .","At block , the method includes transcoding or recoding at least one of the plurality of constituent files ,  and , where the transcoded and recoded files replace their corresponding original constituent files. As with the original constituent files, the replacements are placed in the browser extension working files , or within the temporary file space  of the sandboxed sub-process . Example methods for transcoding and\/or recoding are discussed below with respect to .","For purposes of this disclosure, transcoding is the process of decoding a file of a first format and then re-coding the decoded file to another format. In contrast, recoding is decoding an encoded file and then recoding the decoded file in the same format as the original file. Transcoding and recoding certain files that may be included with a browser extension installation package may help avoid unwanted effects that could result from such files, such as those discussed herein (e.g., data overruns, interference with other process, malicious act, etc.). Such effects may be avoid, because transcoding and recoding those files using known browser elements, such as the image file decoder\/encoder , the JSON parser  and the serializer  may eliminate, at least some of, any unwanted artifacts that are present in such data files.","The method  further includes, at block , after the transcoding and\/or recoding, passing the constituent files (including any files that were replaced at block ) back to the main browser process  from the sandboxed sub-process , e.g., from the browser extension working files . At block , the method  includes, in the main process  of the browser application , installing the browser extension to the browser application  using the transcoded and recoded constituent files and any files of the extension that were not transcoded or recoded. In an example, embodiment, the transcoded and\/or recoded files may be passed back to the main browser process  using the IPC layer , while files of the browser extension that were unpacked into the browser extension working files  but not transcoded or recoded, may simply be copied by main browser process  from the temporary file space  for use by the main browser process  in installing the browser extension of the browser extension installation package .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 5","FIG. 4","FIG. 4","FIG. 5","FIG. 4"],"b":["500","500","400","500","400","400","560","400","500","400"]},"The validation flow , at block , includes determining whether the digital signature verification at block  of the method  is successful. If the digital signature is successfully verified at block  (block ), the method  continues installation of the corresponding browser extension at block  (block  in ). The validation flow  then includes, at block , determining whether unpacking of a compressed, archive file of a browser extension installation package at block  is successful. If the unpacking is successfully completed, the method  continues installation of the corresponding browser extension at block  (block  in ).","At block , the method  includes determining whether the validation of a header of a browser extension installation package at block  (which may be implemented using the method ) is successful. If the validation is successful, the method  continues installation of the corresponding browser extension at block  (block  in ). The validation flow  then includes, at block , determining whether the digital signature verification at block  (which may be implemented using the method ) is successful. If the digital signature is successfully verified at block  (block ), the method  continues installation of the corresponding browser extension at block  (block  in ).","The validation flow  then includes, at block , determining whether transcoding\/recoding of files of the unpacked browser extension installation package at block  (which may be implemented using the methods  and ) is successful. If the transcoding\/recoding is successful, the method  continues installation of the corresponding browser extension at block  (block  in ).",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 6","FIG. 5","FIG. 6"],"b":["600","530","600","445","400","600","530","445","560","600"]},"In one embodiment, implementing the method  may be done to verify whether a header of a browser extension installation package adheres to a uniform, fixed format, such as that of the header  discussed above. As shown in , the method  includes, at block , verifying that a size of the header matches an expected header size. In an example embodiment, the operation at block  may be accomplished by reading the header and counting the number of bytes read. If the number of bytes read matches an expected number of bytes, the header size is verified.","At block , the method  includes verifying that the header includes a properly located browser extension installation package identifying code, such as the extension package ID code  (magic number) discussed above with respect to the header . If the header does include a properly located extension ID code , the method  continues on to block , where the header is checked to verify whether it contains a properly formed and properly located version field. After checking the version field, if verified, the method  continues to block , which includes verifying that a size of a public key included in the browser extension installation package matches an expected public key size. At block , the method  includes verifying that a size of a digital signature of the browser extension installation package matches an expected digital signature size. At block , the method  includes verifying that a format of the public key matches an expected public key format.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 7","FIG. 5"],"b":["700","700","540","700","450","400"]},"At block , the method includes extracting a public key from the browser extension installation package, such as extracting the public key  from the header  of the browser extension installation package . As was discussed above, the public key  of the header  may be included in an X509 SubjectPublicKeyInfo block. Of course, any appropriate public key (and corresponding private key) format may be used. In another example embodiment, the private key extracted at block  may be obtained from the unpacked, constituent files of the browser extension, such as described with respect to block  of , for example.","At block , the method  further includes decrypting a digital signature for the unpacked browser extension installation package using the extracted public key, where the digital signature may be included in the header or, alternatively, may be included unpacked with the browser files, such as at block  of the method . As discussed herein, in this example, the digital signature of block  may be generated using a private key that corresponds with the extracted public key, an RSA encryption algorithm and the SHA-1 hash function, though other approaches may be used.","At block , the method  includes generating a message digest of the unpacked browser extension installation package, which, in this example, may be done using the SHA-1 algorithm. The method  then includes, at block , comparing the message digest generated at block  with the decrypted digital signature generated at block . If there is a match at block , the digital signature of the unpacked browser extension package is verified. If there is not a match at block  this may indicate that the browser extension installation package  may have been corrupted and\/or modified and the installation of a corresponding browser extension may be aborted, such as at block  and block  of the method .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 8","FIG. 4","FIG. 2"],"b":["800","800","455","455","810","220"]},"As shown in , the method  includes, at block , decoding an image file using an image encoder\/decoder that is included in a browser application, such as encoder\/decoder  in the browser application . The operation at block , in one example, may be one part of a validation process for a browser extension installation package, such as the operation discussed above with respect to block  in . For instance, if the encoder\/decoder  does not successfully decode an image file (or a data file purporting to be an image file) that has been unpacked from a browser extension installation package (e.g., the browser extension installation package ), this may indicate that the offending data file is poorly formed, or could potentially contain malicious content.","If, as discussed above, the decoding operation of block , in this example, occurs in the sandboxed sub-process , any harmful effects that could result from attempting to decode a malicious or poorly formed image file (or purported image file) may be avoided. For example, as was discussed above with respect to block , if the decoding at block  fails to complete successfully, installation of a browser extension from an associated browser extension installation package may be halted, canceled and\/or aborted, such as at block  and  of . In this situation, appropriate notifications may be made, such as by notifying a user that an error occurred during installation of the browser extension (e.g., via a dialog box). In an example embodiment, the error notification may include an assigned error code and\/or a narrative description of the error.","Once the image file is successfully decoded at block , the method  includes, at block , re-encoding the image file in a bitmap format using the encoder\/decoder  of the browser , for example. Re-encoding the image file to a bitmap format using a known encoder (the encoder\/decoder ) may provide additional assurance that the transcoded\/recoded image file does not contain malicious content. This additional assurance may result from the fact that, because bitmap image formats are simple, linear data formats, even if the transcoded\/recoded image file contains data that corresponds with malicious content in the original image file, using a bitmap format file that is generated by a known encoder makes it unlikely that that transcoded\/recoded image file would manifest itself as any improper or malicious actions.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 9","FIG. 4","FIG. 2"],"b":["900","800","900","455","455","910","220"]},"As shown in , the method  includes, at block , parsing (in the sandboxed sub-process ) one or more JSON objects using a JSON parser that is included in the browser application, such as the JSON parser  in the browser application . The operation at block , in one example, may be one part of a validation process for a browser extension installation package, such as the operation that was discussed above with respect to block  in . For instance, if the JSON parser  does not successfully parse a JSON object (or a data file that purports to be a JSON object) that has been unpacked from a browser extension installation package (e.g., the browser extension installation package ) this may indicate that the offending data file is poorly formed, or may potentially contain malicious content.","However, if the parsing operation of block  occurs in the sandboxed sub-process , any harmful effects that could result from attempting to parse a malicious or poorly formed JSON object may be avoided. For example, as was discussed above with respect to block , if the parsing at block  fails to complete successfully, installation of a browser extension from an associated browser extension installation package may be halted, canceled and\/or aborted, such as at blocks  and  of . In this situation, appropriate notifications may be made, such as notifying a user that an error occurred during installation of the browser extension. In an example embodiment, the error notification may include an assigned error code and\/or a narrative description of the error.","Once the one or more JSON objects are successfully parsed at block , the method  includes, at block , serializing the one or more parsed JSON objects for communication over an inter-process communication layer, such as the IPC layer  shown in . In an example embodiment, successful completion of the serialization performed at block , as well as successfully passing the serialized, parsed JSON objects from the sandboxed sub-process  to the main (privileged) browser process  over the IPC layer  (such as was discussed with respect to block  of the method ) may provide further assurance that the JSON objects are well formed data files. Such further assurance may be due to the fact that the serializer  and the protocol of the IPC layer  have additional safeguards that may identify poorly formed and\/or malicious data files.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 10","b":["1000","1050","1000","1050"]},"Computing device  includes a processor , memory , a storage device , a high-speed interface  connecting to memory  and high-speed expansion ports , and a low speed interface  connecting to low speed bus  and storage device . Each of the components , , , , , and , are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate. The processor  can process instructions for execution within the computing device , including instructions stored in the memory  or on the storage device  to display graphical information for a GUI on an external input\/output device, such as display  coupled to high speed interface . In other implementations, multiple processors and\/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices  may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).","The memory  stores information within the computing device . In one implementation, the memory  is a volatile memory unit or units. In another implementation, the memory  is a non-volatile memory unit or units. The memory  may also be another form of computer-readable medium, such as a magnetic or optical disk.","The storage device  is capable of providing mass storage for the computing device . In one implementation, the storage device  may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory , the storage device , or memory on processor .","The high speed controller  manages bandwidth-intensive operations for the computing device , while the low speed controller  manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only. In one implementation, the high-speed controller  is coupled to memory , display  (e.g., through a graphics processor or accelerator), and to high-speed expansion ports , which may accept various expansion cards (not shown). In the implementation, low-speed controller  is coupled to storage device  and low-speed expansion port . The low-speed expansion port, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input\/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.","The computing device  may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server , or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition, it may be implemented in a personal computer such as a laptop computer . Alternatively, components from computing device  may be combined with other components in a mobile device (not shown), such as device . Each of such devices may contain one or more of computing device , , and an entire system may be made up of multiple computing devices ,  communicating with each other.","Computing device  includes a processor , memory , an input\/output device such as a display , a communication interface , and a transceiver , among other components. The device  may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Each of the components , , , , , and , are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.","The processor  can execute instructions within the computing device , including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide, for example, for coordination of the other components of the device , such as control of user interfaces, applications run by device , and wireless communication by device .","Processor  may communicate with a user through control interface  and display interface  coupled to a display . The display  may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. The display interface  may comprise appropriate circuitry for driving the display  to present graphical and other information to a user. The control interface  may receive commands from a user and convert them for submission to the processor . In addition, an external interface  may be provide in communication with processor , so as to enable near area communication of device  with other devices. External interface  may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.","The memory  stores information within the computing device . The memory  can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units. Expansion memory  may also be provided and connected to device  through expansion interface , which may include, for example, a SIMM (Single In Line Memory Module) card interface. Such expansion memory  may provide extra storage space for device , or may also store applications or other information for device . Specifically, expansion memory  may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example, expansion memory  may be provide as a security module for device , and may be programmed with instructions that permit secure use of device . In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.","The memory may include, for example, flash memory and\/or NVRAM memory, as discussed below. In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory , expansion memory , or memory on processor , which may be received, for example, over transceiver  or external interface .","Device  may communicate wirelessly through communication interface , which may include digital signal processing circuitry where necessary. Communication interface  may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver . In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module  may provide additional navigation- and location-related wireless data to device , which may be used as appropriate by applications running on device .","Device  may also communicate audibly using audio codec , which may receive spoken information from a user and convert it to usable digital information. Audio codec  may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device .","The computing device  may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone . It may also be implemented as part of a smart phone , personal digital assistant, or other similar mobile device.","Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and\/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and\/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.","These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and\/or object-oriented programming language, and\/or in assembly\/machine language. As used herein, the terms \u201cmachine-readable medium\u201d \u201ccomputer-readable medium\u201d refers to any computer program product, apparatus and\/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and\/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term \u201cmachine-readable signal\u201d refers to any signal used to provide machine instructions and\/or data to a programmable processor.","To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.","The systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), and the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","A number of embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention.","In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other embodiments are within the scope of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
