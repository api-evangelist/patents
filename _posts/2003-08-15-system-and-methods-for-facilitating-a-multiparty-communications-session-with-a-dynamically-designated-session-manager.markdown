---
title: System and methods for facilitating a multiparty communications session with a dynamically designated session manager
abstract: A system and methods for facilitating multiparty communications sessions with a plurality of participants and for dynamically designating a communications session manager. More particularly, a system and methods, including protocols, for: establishing a multiparty communications session between a plurality of participants and their respective communication devices in a full-mesh topology; establishing a dynamically designated session manager uniquely associated with a first participant of the multiparty session and, hence, such participant's communication device; as necessary, adding and removing participants and their respective communication devices from the multiparty communications session; and, designating, or electing, another participant as session manager when the first participant exits the multiparty communications session. The methods also enable participants to maintain consistent lists of session participants and establish peer to peer communication links between the participants.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07987233&OS=07987233&RS=07987233
owner: Microsoft Corporation
number: 07987233
owner_city: Redmond
owner_country: US
publication_date: 20030815
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates, generally, to multiparty communications systems and methods, and, more particularly, to multiparty communications systems and methods with a dynamically designated communications session manager.","Multiparty communications systems that permit communication between multiple participants are becoming increasingly popular, particularly within the Internet architecture. Originally, communications applications permitted communication between only two participants. Such one-on-one communication required little management because, with only two participants, a system for managing participants within a communications session was unnecessary. If one participant lost its connection to the communications session, then the other participant's connection was also lost.","A communications session involving more than two participants (i.e., a \u201cmultiparty communications session\u201d or a \u201cmultiparty session\u201d) introduces potential requirements which must be addressed by participant management. First, when a participant loses a connection in a multiparty session, the other participants should not lose their connections to each other. Second, already existing multiparty sessions must provide a mechanism for joining new participants and enabling current participants to exit the multiparty session. Third, with participants leaving and joining multiparty communications sessions, it is necessary to maintain an updated participant list, or roster, so that current participants of the multiparty session know who is connected to the multiparty session. The maintaining of an updated participant list, or roster, also assists in managing peer to peer communication channels between participants.","One method of participant management involves the use of a designated communications server, also known as a central server. In such a method, every participant wanting to join a multiparty communications session contacts the designated communications server. The designated communications server establishes a connection with each such participant and also maintains a list of current participants. Then, each joining participant accesses the list residing on the designated communications server to determine the identities of the other participants already a part of the communications session. When a participant leaves the communications session, the list of participants located at the designated communications server is updated accordingly. Unfortunately, the use of a designated communications server for ensuring synchronization of the list of participants can be costly for the consumer. Further, if the designated communications server crashes or goes offline, then the entire multiparty communications session is lost.","As is known in the art, a multiparty communications session may exist without a dedicated communications server. By having direct connections between participants, there is no need for such a central server to manage connections or a list of participants because each participant knows who is connected to the multiparty session and knows how to establish communications with the other connected participants. For example, in a multiparty session, Participant A knows who is connected to the multiparty session because every other participant within the multiparty session is directly connected to Participant A. While such a communications session eliminates the need for a dedicated communications server, certain disadvantages with such a communications session may exist. One common disadvantage manifests itself when a participant is trying to connect to an already existing multiparty session. For example, if a multiparty communications session already exists between Participant A, Participant B, and Participant C, then for Participant D to join the multiparty session individual connections must be made from Participant D to Participant A, from Participant D to Participant B, and from Participant D to Participant C. After Participant D establishes a connection to Participant A, but before Participant D establishes connections to Participant B and Participant C, there exists a period of time when Participant D is not known by Participant B and Participant C to be in the multiparty session. The result is a disjointed multiparty communications session where only Participant A knows all the participants within the multiparty session for such period of time. During such a disjointed multiparty communications session, communication may be lost or not properly provided to each participant currently within the session.","To prevent a disjointed multiparty communications session from occurring, it is known in the art to use a different type of communications session configuration. Instead of having every participant connect directly to all other participants of a multiparty session, one participant is designated as a connection hub in a hub-and-spoke, or star, configuration or topology. Similar to the topology created by the use of a dedicated communications server, one of the participants in a hub-and-spoke topology acts as a central point of the communications session. For example, if Participant A is designated as the central point of a communications session, then all other participants connect to Participant A and communicate with each other through Participant A. While eliminating the occurrence of a disjointed session, the hub-and-spoke, or star, configuration has disadvantages similar to those present when a dedicated communications server is employed in a multiparty communications session. For example, if the participant at the central point of the multiparty communications session loses connection, then the multiparty communications session must end or continue to utilize the computing and network resources of the central-point participant.","Accordingly, there is a need in the art for a system and method for managing a participant list, or roster, for a multiparty communications session without the need of a dedicated communications server.","There is also a need in the art for a system and method for providing multiparty communications sessions that do not become disjointed and that do not rely on a connection to a common or central point.","Additionally, there is a need in the art for a system and method for providing multiparty communications sessions where participants can join and leave the session without terminating the ongoing multiparty communication session between other participants.","Broadly described, the present invention comprises a system and methods for facilitating multiparty communications sessions with a plurality of participants and for dynamically designating a communications session manager (i.e., a \u201csession manager\u201d). More particularly, the present invention comprises a system and methods, including protocols, for: establishing a multiparty communications session between a plurality of participants and their respective communication devices in a full-mesh topology; establishing a dynamically designated session manager uniquely associated with a first participant of the multiparty session and, hence, such participant's communication device; as necessary, adding and removing participants and their respective communication devices from the multiparty communications session; and, designating, or electing, another participant as session manager when the first participant exits the multiparty communications session.","Advantageously, the present invention provides multiparty communications sessions with or without the involvement of a central server or dedicated communications server such as a multipoint control unit (MCU). Also, the present invention accounts for every participant within the multiparty communications session and reduces the possibility of disjointed dialog occurring between participants thereof. Every participant attempting to join the multiparty communications session must communicate with the dynamically designated session manager. The dynamically designated session manager ensures that such participants join the communications session sequentially, thus reducing the possibility of disjointed communications. By providing the flexibility of a dynamically designated, or dynamically elected, session manager coupled with the arrangement of participants in a full-mesh topology, a multiparty communications session in accordance with the present invention is not disrupted when a participant serving as the session manager terminates its connection to the multiparty session because a new session manager may be designated. Through use of an election process for such designation of a new session manager, the present invention provides a smooth transition of session management from one participant to another participant. Additionally, the use of a full-mesh topology, where each participant is connected to every other participant, provides for the synchronization of information concerning a multiparty communications session and its participants.","Other features and advantages of the present invention will become apparent upon reading and understanding the present specification when taken in conjunction with the appended drawings.","Referring now to the drawings, in which like numerals represent like components or steps throughout the several views,  displays a block diagram representation of the structural relationship of a plurality of participants  of a multiparty communications session  and the respective communication devices  thereof in accordance with an exemplary embodiment of the present invention. The communications session  comprises a plurality of participants  (i.e., also sometimes referred to herein as \u201cparticipants \u201d) with each participant  including a communication device  (i.e., with the alphabetic subscripts in  designating different participants ). Each participant  (and, hence, each communication device ) includes a respective user agent  which facilitates communication with the other participants  of the multiparty session . The number of participants  and user agents  within a communications session  may vary depending on the number of participants within the communications session  and, therefore, the communications session  is not limited to four participants , communication devices , and user agents  as shown in .","The participants  and their communication devices  are communicatively connected via a communication network  (i.e., also sometimes referred to herein as a \u201cnetwork \u201d). One skilled in the art will recognize that a network  typically comprises the infrastructure and facilities appropriate to communicatively connect a group of two or more communication devices  (including, without limitation, a plurality of computer systems in communication with each other). Such a network  and communication devices  may be configured in multiple topologies including, but not limited to, star, bus, or ring configurations. Also, a network  and communication devices  may be broadly categorized as belonging to a particular architecture including, but not limited to, peer-to-peer or client\/server architectures. The network  may additionally be classified by the geographical location of the communication devices  and the types thereof. For example, a network  communicatively connecting a plurality of computer systems or servers located proximate to each other, such as within a building, is referred to as a local-area network (LAN); if the computer systems are located farther apart, the network  is generally referred to as a wide-area network (WAN), such as the Internet; if the computer systems are located within a limited geographical area, such as a university campus or military establishment, the network  is referred to as a campus-area network (CAN); if the computer systems are connected together within a city or town, the network  is referred to as a metropolitan-area network (MAN); and if the computer systems are connected together within a user's home, the network  is referred to as a home-area network (HAN).","Each participant  and communication device  thereof connects communicatively with the network  and, therefore, connects communicatively with each other participant  and communication device  thereof. Communication devices  may include, but are not limited to, a desktop computer, laptop computer, mobile computer, server computer, wireless phone, personal digital assistant (PDA), and any other device capable of communicating with another communication device . In an exemplary embodiment of the present invention, the communication devices  are similar to the computer system  described below with reference to . Each communication device  comprises a respective software domain  (i.e., as described below with reference to ) having a user agent  that assists in facilitating communication with other communication devices . Each user agent , through use of the communication device's  network interface and other appropriate hardware and software components, connects communicatively to the network  for the bi-directional communication of signals and media therewith and, therefore, connects communicatively to each other user agent  for the bi-directional communication of signals and media therewith. Due at least in part to the user agents , the communication devices  have the capability of performing multiparty conferencing. Multiparty communication sessions  may be established in accordance with a number of common multiparty conferencing standards, including, but not limited to, server-based conferencing and client-based distributed conferencing (i.e., also known as full-mesh conferencing). Server-based conferencing, typically, requires a central server for signaling, media transfer, and managing the list of participants of a communications session . Client-based distributed conferencing, generally, utilizes peer-to-peer (p2p) signaling and media transfer, but requires a distributed membership state where each participant stores a partial or full list of participants of a communications session  and changes within the membership state are propagated by peer. In an exemplary embodiment of the present invention, the user agents  (and, hence, the participants  and communication devices ) communicate via a modified version of client-based distributed conferencing. Similar to client-based distributed conferencing, the user agents  employ bi-directional p2p signaling and media transfer via the network . Unlike client-based distributed conferencing, however, a session manager  keeps admission of new user agents  (and, hence, new participants  and communication devices ) in sequential order. The session manager  maintains and retains the authoritative participant list , or roster , while each user agent  retains a complete, but non-authoritative, copy of the current participant list . The participant list , or roster , includes information or data identifying the participants  of a communications session .","One skilled in the art will recognize that connecting communicatively may include or require any appropriate type of connection for the bi-directional communication of signals and\/or media including, but not limited to, analog, digital, wired and wireless communication channels. Such communication channels may utilize, but not be limited to, copper wire, optical fiber, radio frequency, infrared, satellite, or other facilities and media.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["200","210","280","200","210","280","210","280","200"]},"Hence, it should be understood that the present invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and\/or configurations that may be appropriate or suitable for use as communication devices  of the present invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The present invention may also be described in the general context of comprising computer-executable instructions, such as program modules, being executed by a computer system. Generally, program modules include routines, programs, programming, objects, components, data, data structures, etc. that perform particular tasks or implement particular abstract data types. The present invention may be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media, including, without limitation, in memory storage devices.","With reference to , an exemplary communication device  of the present invention includes a general purpose computing device in the form of a computer system . Components of computer system  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory  to the processing unit  for bi-directional data and\/or instruction communication. The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include the Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (i.e., also known as the \u201cMezzanine bus\u201d).","Computer system  typically includes a variety of computer-readable media. Computer-readable media may comprise any available media that can be accessed by, read from, or written to by computer system  and may include both volatile and nonvolatile, removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data, data structures, program modules, programs, programming, or routines. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magneto-optical storage devices, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer system . Communication media typically embodies computer-readable instructions, data, data structures, program modules, programs, programming, or routines in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above are also included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that direct the transfer of information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically stores data and\/or program instructions that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data  which may be resident in RAM , in whole or in part, from time-to-time.","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that may be included in the exemplary computing environment  include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives , ,  and their associated computer storage media discussed above and illustrated in , provide storage of computer-readable instructions, data, data structures, program modules, programs, programming, or routines for computer system . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components may either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers to illustrate that, at a minimum, they are different copies of operating system , application programs , other program modules , and program data . A user may enter commands and information into computer system  through connected input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other connected input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor , computer system  may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer system  may operate in a networked environment using bi-directional communication connection links to one or more remote computer systems, such as a remote computer system . The remote computer system  may be a personal computer, a laptop computer, a server computer, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer system , although only a memory storage device  of remote computer system  has been illustrated in . The bi-directional communication connection links depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networks are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When communicatively connected to a LAN , the computer system  connects to the LAN  through a network interface or adapter . When communicatively connected to a WAN , the computer system  typically includes a modem  or other means for establishing a communication link over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer system , or portions thereof, may be stored in the remote memory storage device . By way of example, and not limitation,  illustrates remote application programs  as residing in memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a bi-directional communication link between the computers may be used.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 2","FIG. 1"],"b":["300","106","300","106","210","300","301","307","310","316","322","301","307","310","316","322","107","300","106","100","101","401","100"]},"The user interface  provides a user with an interface for partaking in a communications session . In an exemplary embodiment of the present invention, the user interface  includes, but is not limited to, a message window for displaying messages, list of favorite participants, participant list for a communication session, text box for writing a message, and submit button for sending a message. Additionally, the user interface  may comprise programming, program modules, or machine instructions that perform or cause the performance of tasks: for displaying messages, the list of favorite participants, and the participant list for a communication session ; for inputting or writing messages; and, for sending messages, when executed by the processing unit  of the computer system . One skilled in the art will recognize that the user interface  may be designed similar to instant messaging applications such as \u201cMSN\u00ae MESSENGER\u201d available from Microsoft Corporation of Redmond, Wash. The present invention, however, is not limited to instant messaging and, therefore, the present invention may relate to any type of communications session  between multiple participants  which may join or leave the communications session .","The client API  connects communicatively and interacts with the user interface , SIP stack , audio\/video stack , and roster  through the inter-process communication of data, programming instructions, and\/or commands, as the case may be. One skilled in the art will recognize that an API typically comprises a set of routines, programming, programming instructions, or program modules used by an application program to guide the execution of procedures by an operating system. In an exemplary embodiment of the present invention, the client API  provides a set of routines, programming, programming instructions, or program modules for communicating and interacting with the user interface , SIP stack , audio\/video stack , and roster . Additionally, the client API  provides and receives SIP calls that enable multiparty conferencing and the designation of a new session manager , which are described in more detail below with reference to .","Typically, the client API  comprises an abstraction layer that enables the establishment of communications sessions  by connecting participants  to other participants  using Session Initiation Protocol via the SIP stack . The SIP stack  comprises system memory , preferably, random access memory (RAM) , which stores a plurality of primitives and\/or messages which implement the SIP protocol in connection with the methods described herein. The SIP stack  handles the session calls between participants  which assist in setting up a communications session . All SIP session calls are made through the SIP stack  and, therefore, the SIP stack  enables dialog between participants .","The audio\/video stack  comprises system memory  (i.e., preferably, random access memory (RAM) ) and\/or non-volatile memory ,  which stores audio and video data for communicating media within a communications session . The audio\/video stack  is used in connection with the SIP stack  when communicating audio and video data that requires more bandwidth than is allocated for a SIP message. Audio and\/or video data may be placed on the stack  when audio and\/or video data is provided to or received from participants .","For example and not limitation, if a user desires to set up a communications session , then the user selects a corresponding option from the user interface . In response, a routine of the user interface  associated with the option is executed by the processing unit  and calls an appropriate routine of the client API . The client API routine creates a high level session object and makes a call to the SIP stack  to set up the communications session . Responsive thereto, the SIP stack  communicates with the other participants  and sets up the multiparty session . The SIP stack  then communicates to the client API routine that the multiparty session  has been created. Finally, the client API routine communicates to the user interface routine that the multiparty session  has been created.","In an exemplary embodiment of the present invention, the user interface's  routines, program modules, programming, and\/or machine instructions reside, preferably, in an executable binary file stored in the hard disk drive  of each participant's computer system . The client API  routines, program modules, programming, and\/or machine instructions and the SIP stack , preferably, reside in a dynamic-link library (dll) stored in the hard disk drive  of each participant's computer system . Also, the audio\/video stack , preferably, resides in a separate dynamic-link library (dll) stored in the hard disk drive  of each participant's computer system .","The roster  (i.e., sometimes referred to herein as the \u201cparticipant list \u201d) comprises list data identifying each participant  within a communications session . Such data may include, but is not limited to, a unique identifier, participant or user name, or uniform resource identifier. The roster , typically, resides in the random access memory (RAM)  of each participant's computer system  and provides the client API  thereof with information about each participant  of the communications session  when requested.","The Session Initiation Protocol (SIP), an application-layer control\/signaling protocol, is a standard protocol that is well-known to one skilled in the art. Briefly described, SIP supports multiparty conferencing between user agents . SIP provides the standard for initiation, modification, and termination of a conferencing session. Each multiparty conference is represented by SIP relationships between user agents  and is managed by SIP dialog between user agents . SIP can support several models of multiparty conferencing such as, but not limited to, loosely coupled conferencing, fully distributed multiparty conferencing, and tightly coupled conferencing. Loosely coupled conferencing lacks a signaling relationship between user agents; does not have a central point of control, such as a central server; and the participation list  is learned through control information that is passed during the conference using, for example, the Real Time Control Protocol (RTCP). Fully distributed multiparty conferencing comprises a signaling relationship between each of the participants without a central point of control. Tightly coupled conferencing utilizes a central point of control or focus with each participant  connecting to the central point during the communications session . In an exemplary embodiment of the present invention, the communications sessions  between user agents  resemble tightly coupled conferencing.","SIP works in conjunction with other common protocols such as, but not limited to, Real-time Transport Protocol (RTP), Real-Time Streaming Protocol (RTSP), Media Gateway Control Protocol (MEGACO), and Session Description Protocol (SDP). Together with other common protocols, SIP enables user agents  to find and connect to other user agents , thus creating a communications session . Additionally, SIP enables other user agents  to join an already existing communications session . SIP provides the necessary primitives used to implement a variety of services, however, SIP does not provide services or program modules, such as the services or program modules associated with the client API  described herein, nor the methods or protocols described herein.","For example and not limitation, a SIP message from a first participant inviting a second participant to join a communications session  is provided in Table 1. The first line of the SIP message contains the message name. With reference to Table 1, the message name includes an INVITE primitive to a Participant B and the SIP version number. The subsequent lines of the SIP message correspond to header fields related to the INVITE primitive. The \u201cTo\u201d header field may contain a display name (i.e., Participant B) and a SIP uniform resource identifier (URI) (i.e., sip:B@microsoft.com) that directs the message to the intended recipient. The \u201cFrom\u201d header field may also contain a display name (i.e., Participant A), and a SIP URI (i.e., sip:A@microsoft.com) that indicates the message originator. The \u201cCall-ID\u201d header field forms part of the globally unique dialog identifier. Typically the \u201cCall-ID\u201d header field is generated by combining a random string with the originator's host name or interne protocol address. Together, the \u201cTo\u201d, \u201cFrom\u201d, and \u201cCall-ID\u201d header fields define a dialog or peer-to-peer SIP relationship. The \u201cCSeq\u201d header field, also known as the command sequence header field, contains an integer and a SIP method name. The integer, generally, is incremented sequentially for each new message within the dialog\/session. The \u201cContact\u201d header field provides the recipient with a SIP URI that represents a direct path back to the message originator. The \u201cContact\u201d header informs recipients where to send subsequent messages or requests. The \u201cSupported\u201d header field indicates what type of communications session  is supported and desired by the calling participant  (i.e., a multiparty session ). The \u201cEndPoints\u201d header field informs the recipient of the other participants  within the communications session  and is used in an INVITE message when establishing a new multiparty communications session . The \u201cContent-Type\u201d header field describes the type of message (i.e., an instant message, audio data, or video data). The \u201cContent-Length\u201d header field provides the byte size of the message. After the header fields and between the ellipses, the message is provided. Other header fields will be defined when introduced within this description.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"INVITE sip:B@microsoft.com SIP\/2.0",{}]},{"entry":[{},"To: Participant B <sip:B@microsoft.com>",{}]},{"entry":[{},"From: Participant A <sip:A@microsoft.com>",{}]},{"entry":[{},"Call-ID: 1234567890",{}]},{"entry":[{},"CSeq: 1 INVITE",{}]},{"entry":[{},"Contact: sip:A@microsoft.com",{}]},{"entry":[{},"Supported: multiparty",{}]},{"entry":[{},"EndPoints: Participant A <sip:A@microsoft.com>",{}]},{"entry":[{},"Content-Type: application\/SDP",{}]},{"entry":[{},"Content-Length: XXX",{}]},{"entry":[{},". . .",{}]},{"entry":[{},"m = message 5060 sip sip:A@microsoft.com",{}]},{"entry":[{},". . ."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"One skilled in the art will recognize that the Session Initiation Protocol (SIP) is one of many signaling protocols that may be used to implement this invention. Accordingly, the present invention may be implemented with response codes and header fields different than those described herein and, therefore, the present invention should not be limited to using the Session Initiation Protocol.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 4","FIG. 4"],"b":["100","401","404","100","401","404","104","404","404","404","100","107","300","106","404","100","404","100","100","404"],"i":["a ","d"]},"Each participant  connects communicatively with the session manager .  illustrates, by way of example, the connection between the participants  and the session manager , but one skilled in the art will recognize that different configurations exist. The dashed-lines between the participants  and the session manager  represent session management calls. Session management calls are communications from the participants  to the session manager  that include data concerning connection to the multiparty session , such as initiation requests, termination requests, modification requests, and invitation requests. Session management calls enable the session manager  to successfully manage the participant list , or roster , of the current multiparty session .","Additionally, each participant  connects communicatively with each other participant . The solid-lines between the participants  represent media calls. Media calls are communications between participants  and include, but are not limited to, text, audio, and video. Unlike the Session Initiation Protocol which assumes that all data will be transferred over a signaling layer, media calls may create an explicit call by using the INVITE primitive provided by SIP. In other words, a multiparty session  between the participants  is created before media is transferred. Typically, media is subsequently transferred over an instant messaging session, however, separate audio and video sessions may be created between each participant , if necessary due to bandwidth constraints. Alternatively, media may be transferred through a media multipoint control unit (MCU) that, for example, may be located on a central server. One skilled in the art will recognize that with central session control and a coordination point, a communications session  may be constructed in a variety of topologies that utilize the advantages of the present invention including, but not limited to, full-mesh topology, MCU-based topology, and a hierarchical fan-out topology.","The session manager  ensures that the participant list , or roster , properly reflects the participants  within the current communications session . Accordingly, all session calls are directed to the session manager . Additionally, the session manager  may also store other information about the multiparty session  that might be coordinated to each of the participants  within a communications session . The session manager  synchronizes session actions such as, but not limited to, participants  joining a communications session , participants  leaving a communications session , and inviting participants  into a communications session . Other synchronization roles may also be handled by the session manager , such as moderation of a distributed meeting. The session manager  also implements a rule set for the particular communications session . Such rules may include, but are not limited to, access restrictions, session duration, and session capacity. By way of example, and not limitation, the session manager  resides at a different location than Participant A , Participant B , Participant C , and Participant D . Such a location may include, but is not limited to, a central server, MCU, or remote client computer.","For example and not limitation, if Participant A , Participant B , and Participant C are members of a communication session , then Participant D must send a session call to the session manager  to request admission to the communications session . Alternatively, Participant A , Participant B , or Participant C may \u201crefer\u201d Participant D to the session by sending a \u201crefer\u201d session call to the session manager . The session manager  may then apply the rule set to determine if Participant D should be allowed within the current communications session . If the session manager  determines that Participant D may have access to the communications session , then the session manager  sends an \u201cinvite\u201d session call to Participant D . If Participant D accepts the invitation, then the session manager  updates the participant list , or roster , to include Participant D . The session manager  provides Participant D with the then current participant list , including Participant A , Participant B , and Participant C , through the original \u201cinvite\u201d session call. Once a signaling session is established between the session manager  and Participant D , then the current participant list  is propagated to Participant D and connections are established. Other potential scenarios are discussed below with reference to .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 5","FIG. 4","FIG. 5","FIG. 5"],"b":["100","401","404","100","401","404","404","404","404","106","300","107","100","401","404","100","404","100","100","404"],"i":["a ","d"]},"In an exemplary embodiment of the present invention, the session manager  resides with a designated participant . For example and not limitation, the session manager  may be associated with Participant A , as shown in . Therefore, each participant  connects communicatively to the session manager  (i.e., to Participant A ). Such a configuration eliminates the necessity of a central server or MCU to manage the participant list .","The dashed-lines between Participant A , Participant B , Participant C , and Participant D represent session management calls which are directed to the session manager  residing with Participant A . Additionally, the solid-lines between each of the participants  represent media calls. Except with respect to the location of the session manager , the multiparty session  illustrated in  substantially resembles the multiparty session  described above with reference to . Accordingly, no further description is necessary herein.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIGS. 6A-6B","b":["600","100","404","100","404","100","404","100","100","100","404","100","100","107","100"]},"For the purposes of the description herein with reference to , no communications session  currently exists between Participant A and Participant B , and Participant A performs the functions of the session manager . After starting at step , Participant A (i.e., the session manager ) proceeds to step  where the session manager  sends a multiparty INVITE message to Participant B . At step , the session manager  determines whether Participant B responded to the INVITE message in accordance with the required retry mechanism. The retry mechanism, preferably, designates how much time is to elapse before the session manager  evaluates whether Participant B responded to the INVITE message. The retry mechanism may also designate how many times the session manager  should send a multiparty INVITE message to Participant B , before evaluating if a response was received from Participant B . If Participant B does not respond in accordance with the required retry mechanism, then the session manager  proceeds to step  where it sends an INVITE error to Participant A (i.e., in Participant A's role as the calling participant). Next, the session manager  ceases operation in accordance with method  at step  due to failure of the INVITE from the session manager  to Participant B ","If, at step , the session manager  receives a response from Participant B in accordance with the required retry mechanism, the session manager  proceeds to step  where it determines whether Participant B has accepted the INVITE by analyzing the content of the received response. If the session manager  determines that Participant B did not accept the INVITE (i.e., for example and not limitation, due to an error or rejection), then the session manager  proceeds to step  as described below, otherwise the session manager  proceeds to step  of the method .","At step , the session manager  determines whether Participant B understood the multiparty INVITE message by examining the received response from Participant B to ascertain if the appropriate data thereof indicates that Participant B supports multiparty sessions . If session manager  determines that Participant B understood the multiparty INVITE message, then the session manager  terminates operation according to method  at step , because Participant B declined the invitation and, therefore, the INVITE from Participant A to Participant B failed. If, however, the session manager  determines that Participant B did not understand the multiparty INVITE message, then the session manager  proceeds to step  where the session manager  establishes and designates a one-on-one communications session  between Participant A and Participant B with Participant B being identified as a downlevel client (i.e., a dumb user agent). After the session between Participant A and Participant B is established, the session manager  ceases operation in accordance with method  at step , as a consequence of the successful completion of the INVITE.","If, however, at step , the session manager  determines that Participant B accepted the INVITE, then the session manager  establishes a multiparty session  between Participant A and Participant B at step . By accepting the multiparty INVITE, Participant B has indicated that it understood the multiparty INVITE message. Accordingly, the session manager  identifies Participant B as a multiparty client and designates the communications session  as a multiparty session . Next, at step , the session manager  sends an acknowledgement (ACK) to Participant B indicating that the communications session  has been established. The session manager  terminates operation in accordance with method  at step .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIGS. 7A-7B","FIGS. 6A-6B"],"b":["700","100","404","404","100","404","404","404","401"],"i":["a ","b","a "]},"After starting at step , Participant B receives a multiparty INVITE message from the session manager  at step  of method . At step , Participant B determines whether it is blocking communications from the session manager  (i.e., Participant A as the calling participant). If Participant B determines that it is blocking communications from the session manager , Participant B proceeds to step  where it sends an offline error to the session manager . Participant B ceases operation in accordance with method  at step , due to the failure of the INVITE received from session manager  by Participant B . One skilled in the art will recognize that the offline error may be used to mask that Participant B is blocking communication from other participants . Alternatively, Participant B may send different error messages or not send an error message at all.","If, however, at step  Participant B determines that it is not blocking communications with the session manager , then Participant B proceeds to step  where Participant B determines whether it supports multiparty sessions . If Participant B determines that it does not support multiparty sessions , then Participant B proceeds to step  where Participant B sends an error message to the session manager . Participant B then proceeds to step  of method , due to failure of the INVITE received from the session manager .","If, at step , Participant B determines that it supports multiparty sessions , then Participant B proceeds to step  of method  where it determines whether the INVITE message seeks to establish a new communications session . If the INVITE message does not seek to establish a new communications session , then Participant B proceeds to step  where it sends an already-in-session error to the session manager . Participant B then ceases operation in accordance with method  at step , due to failure of the INVITE received from the session manager . Otherwise, if the INVITE message seeks to establish a new communications session , then Participant B advances to step  where Participant B sends a 200 OK message to the session manager  (i.e., to Participant A in its capacity as the inviting participant). Then, at step , the session manager  designates that media may be communicated from Participant B to Participant A . Participant B then ends operation in accordance with method  at step .","Table 2 illustrates an exemplary call flow (i.e., using SIP) for Participant A (i.e., serving as the session manager ) inviting Participant B into a new communications session , where Participant B supports multiparty sessions . In Table 2, the \u201cEndPoints\u201d header field provides Participant B with a list of participants  that Participant B must connect with in order to properly join the communications session . If Participant B already has a connection to a participant  within the list of participants , then no further connection is necessary. Further, Participant B need not connect to itself, if Participant B is within the list of participants . Also in Table 2, the \u201cRM\u201d header field indicates the location of the session manager . The RM header field is not part of the basic Session Initiation Protocol. The present invention introduces a layer of functionality on top of the Session Initiation Protocol to assist in designating and electing a participant  as the session manager . Additionally in Table 2, the \u201c200 OK\u201d header field contains the SIP response code (i.e., 200) and the reason phrase (i.e., OK) which indicates whether a participant  has accepted a message or request. Further, the \u201cRequire\u201d header field indicates that the invited participant must support multiparty sessions  in order to accept the INVITE.",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A->B:","INVITE sip:B@microsoft.com SIP\/2.0"]},{"entry":[{},{},"To: sip:B@microsoft.com"]},{"entry":[{},{},"From: Participant A <sip:A@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 INVITE"]},{"entry":[{},{},"Contact: sip:A@microsoft.com"]},{"entry":[{},{},"Supported: multiparty"]},{"entry":[{},{},"EndPoints: Participant A <sip:A@microsoft.com>"]},{"entry":[{},{},"RM: sip:A@microsoft.com"]},{"entry":[{},{},"Content-Type: application\/SDP"]},{"entry":[{},{},"Content-Length: XXX"]},{"entry":[{},{},". . ."]},{"entry":[{},{},"m = message 5060 sip sip:A@microsoft.com"]},{"entry":[{},{},". . ."]},{"entry":[{},"B->A:","SIP\/2.0 200 OK"]},{"entry":[{},{},"To: sip:B@microsoft.com"]},{"entry":[{},{},"From: Participant A <sip:A@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 INVITE"]},{"entry":[{},{},"Contact: sip:B@microsoft.com"]},{"entry":[{},{},"Require: multiparty"]},{"entry":[{},{},"Content-Length: XXX"]},{"entry":[{},{},". . ."]},{"entry":[{},{},"m = message 5060 sip sip:B@microsoft.com"]},{"entry":[{},{},". . ."]},{"entry":[{},"A->B:","ACK sip:B@microsoft.com SIP\/2.0"]},{"entry":[{},{},"To: sip:B@microsoft.com"]},{"entry":[{},{},"From: sip:A@microsoft.com"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 ACK"]},{"entry":[{},{},"Content-Length: 0"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Table 3 illustrates a call flow (i.e., using SIP) for the session manager  inviting Participant B into a new communications session , where Participant B does not support multiparty sessions . Although Participant B sends a \u201c200 OK\u201d header in the call flow, the \u201cRequired\u201d header field is absent from the SIP message, thereby indicating that Participant B does not support multiparty sessions . When the session manager  receives the \u201c200 OK\u201d SIP message, the session manager  determines whether Participant B supports multiparty conferencing. If Participant B , as in this example, does not support multiparty conferencing, then the session manager  establishes a one-on-one communications session  between Participant A and Participant B .",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["A->B:","INVITE sip:B@microsoft.com SIP\/2.0"]},{"entry":[{},"To: sip:B@microsoft.com"]},{"entry":[{},"From: Participant A <sip:A@microsoft.com>"]},{"entry":[{},"Call-ID: 1234567890"]},{"entry":[{},"CSeq: 1 INVITE"]},{"entry":[{},"Contact: sip:A@microsoft.com"]},{"entry":[{},"Supported: multiparty"]},{"entry":[{},"EndPoints: Participant A <sip:A@microsoft.com>"]},{"entry":[{},"RM: sip:A@microsoft.com"]},{"entry":[{},"Content-Type: application\/SDP"]},{"entry":[{},"Content-Length: XXX"]},{"entry":[{},". . ."]},{"entry":[{},"m = message 5060 sip sip:A@microsoft.com"]},{"entry":[{},". . ."]},{"entry":["B->A:","SIP\/2.0 200 OK"]},{"entry":[{},"To: sip:B@microsoft.com"]},{"entry":[{},"From: Participant A <sip:A@microsoft.com>"]},{"entry":[{},"Call-ID: 1234567890"]},{"entry":[{},"CSeq: 1 INVITE"]},{"entry":[{},"Contact: sip:B@microsoft.com"]},{"entry":[{},"Content-Length: XXX"]},{"entry":[{},". . ."]},{"entry":[{},"m = message 5060 sip sip:b@microsoft.com"]},{"entry":[{},". . ."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIGS. 8A-8B","FIGS. 6A"],"b":["800","404","100","404","100","6","7","7","404","100","401","404","100","404","100","404","100","404","401","404","100","404","100","404","401","401","404","401","404","100"],"i":["b ","c ","b ","c","c "]},"For the purposes of , Participant A , Participant B , and Participant C are members of a current communications session  with Participant A acting as the session manager . If Participant B wants Participant D to join the communications session , then Participant B must request that the session manager  (i.e., Participant A ) send an INVITE message to Participant D in order to \u201cinvite\u201d Participant D to join the on-going communications session . Such a request is accomplished by Participant B sending an appropriate REFER message to the session manager .","After starting at step , Participant B advances to step  of method  where Participant B sends an appropriate REFER message to the session manager  on behalf of Participant D in order to request that the session manager  invite Participant D to join the communications session . Next, at step , Participant B determines whether the session manager  responded in accordance with a required retry mechanism by evaluating whether a response was received from the session manager . If the session manager  did not respond in accordance with the required retry mechanism, Participant B proceeds to step  where Participant B receives an error message from the session manager  signifying that the session manager  did not respond to the REFER message. Participant B ceases operation in accordance with method  at step , due to the failure of the REFER received by the session manager  from Participant B . If, however, at step , Participant B receives an appropriate response from the session manager  in accordance with the required retry mechanism, then Participant B advances to step  where Participant B determines whether the session manager  accepted the REFER by evaluating the appropriate data in the response message from the session manager . If Participant B determines that the session manager  did not accept the REFER, then Participant B terminates operation in accordance with method  at step , due to the failure of the REFER received by the session manager  from Participant B . If, at step , Participant B determines that the session manager  accepted the REFER, then Participant B proceeds to step  where Participant B yields until a NOTIFY message is received from the session manager  indicating that Participant D has successfully joined the communications session . Such a notification is not required for communication between the participants  to occur, but should be implemented to ensure conformance with the established standard.","Next, Participant B proceeds to step  where the session manager  determines whether Participant D successfully joins the communications session  by evaluating the appropriate response\/acknowledgment messages from Participant D . If the session manager  determines that Participant D did not successfully join the communications session , then Participant B terminates operation in accordance with method  at step , due to the failure of the INVITE from the session manager  to Participant D . Otherwise, if the session manager  determines that Participant D successfully joined the communication session , then Participant B ends operation in accordance with method  at step . Participant D officially joins the communications session  when it establishes media sessions with all of the participants  currently within the communications session . While every participant  possesses a participant list  within the communications session , only the participant  acting as the session manager  (i.e., Participant A ) provides the list of participants  to Participant D during the INVITE.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIGS. 9A-9B","FIGS. 8A-8B"],"b":["900","404","100","401","404","404","404","100","404","401","404","404","100","404","401","404","401","404","404"],"i":["a","b","c ","a ","b ","d ","b ","d","b ","d. "]},"After starting at step , the session manager  proceeds to step  of method  where it receives a REFER message from Participant B referring Participant D to a communications session . Next, the session manager  advances to step  where the session manager  determines whether the REFER message received from Participant B is for an existing communications session . If the session manager  determines that the REFER message from Participant B is not for an existing communications session , then the session manager  proceeds to step  where the session manager  sends an error message to Participant B indicating that the REFER message is for a nonexistent communications session . The session manager  then ends operation in accordance with the method  at step , due to the failure of the REFER by Participant B to the session manager . If, however, at step , the session manager  determines that the REFER message received from Participant B is for an existing communications session , then the session manager  proceeds to step  where the session manager  sends a 200 OK message to Participant B , indicating receipt of a valid REFER.","Next, at step , the session manager  sends an INVITE message to Participant D . The session manager  then proceeds to step  of method  where the session manager  determines whether Participant D accepted the INVITE by evaluating any responses from Participant D . If the session manager  determines that Participant D did not accept the INVITE, then the session manager advances to step  where the session manager  sends a NOTIFY message with an error message to Participant B (i.e, the referring participant). The session manager  then ends operation in accordance with method  at step , due to the failure of the INVITE from the session manager  to Participant D ","If, however, at step , the session manager  determines that Participant D accepted the INVITE, then the session manager  proceeds to step  where the session manager  sends a NOTIFY message with a success message to Participant B , indicating that Participant D has successfully joined the communications session . The session manager  then ends operation in accordance with method  at step .",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIGS. 10A-10C","FIGS. 8A-8B"],"b":["1000","404","100","404","9","9","404","404","404","100","404","401","404","404","100","404","401","404","404","401","100"],"i":["a","b","c ","a ","b ","d ","b ","d","d "]},"After starting at step , Participant D proceeds to step  of method  where it receives an INVITE message to a communications session  from the session manager . Next, at step , Participant D determines whether it is blocking communications from the session manager . If Participant D determines that it is blocking communications from the session manager , then Participant D proceeds to step  where it sends an offline error to the session manager . Participant D then terminates operation in accordance with method  at step , due to the failure of the INVITE from the session manager  to Participant D . If, however, at step , Participant D determines that it is not blocking communications from the session manager , then Participant D proceeds to step  where Participant D determines whether it supports multiparty sessions . If Participant D determines that it cannot support a multiparty session , then Participant D proceeds to step  where it sends an error message to the session manager . Participant D then ends operation in accordance with method  at step , due to the failure of the INVITE from the session manager  to Participant D . If Participant D cannot support multiparty sessions , then Participant D is considered a dumb user agent and, therefore, can only support a one-on-one communications session .","If, however, at step , Participant D determines that it can support multiparty sessions , then Participant D proceeds to step  where Participant D determines whether the INVITE message from the session manager  is for an existing multiparty session . If Participant D determines that the INVITE message from the session manager  is for an existing multiparty session , then Participant D advances to step  where Participant D sends a failure response to the session manager , and the session manager , in turn, sends an error message to Participant B (i.e., the referring participant ) indicating that Participant D is already in the communications session . Participant D ends operation in accordance with method  at step , due to the failure of the INVITE from the session manager  to Participant D . Otherwise, if at step , Participant D determines that the INVITE message from the session manager  is not for an existing communications session , then Participant D advances to step  where Participant D sends a join INVITE message to each participant  (i.e., also referred to herein as \u201ccontact point\u201d) listed in the original INVITE message from the session manager . Next, Participant D proceeds to step  where Participant D sends a 200 OK message to the session manager .","Participant D then advances to step  where Participant D determines whether any contact point returned an error to the join INVITE or did not respond within three attempts to connect, by evaluating the responses from the other participants . One skilled in the art will recognize that the number of attempts may be altered as desired and may depend on the protocol in use. If Participant D determines that a contact point returned an error to the join INVITE or did not respond within three attempts to connect, then Participant D proceeds to step  where Participant D sends a BYE message to any contact point that has accepted the join INVITE. Next, at step , Participant D sends a BYE message to the session manager . Participant D then terminates in accordance with method  at step , due to the failure of the INVITE from the session manager  to Participant D ","If, however, at step , Participant D determines that every contact point responded without error, then Participant D advances to step  where Participant D sends an ACK message to Participant A , Participant B , and Participant C after receiving all of the 200 OK messages from the participants  regarding the join INVITE message. Participant D ends operation in accordance with method  at step .",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIGS. 11A-11B","FIGS. 8A-8B"],"b":["1100","404","100","404","9","9","10","10","404","404","404","100","404","401","404","404","100","404","401","404","404","404","404","404","404","100","1100","404","1100","404","100","404"],"i":["a","b","c ","a ","b ","d ","b ","d","a","b","c ","d ","d ","c","d "]},"After starting at step , Participant C proceeds to step  of method  where Participant C receives a join INVITE message from Participant D . Participant C advances to step  where Participant C determines whether the join INVITE message from Participant D refers to an existing communications session . If Participant C determines that the join INVITE message from Participant D does not refer to an existing communications session , then Participant C proceeds to step  where the INVITE message refers to the initiation of a new communications session  discussed above in more detail with regard to  and A-B.","If, however, at step , Participant C determines that the join INVITE message refers to an existing communications session , then Participant C proceeds to step  where Participant C determines whether the communications session  referred to in the INVITE message from Participant D is known. If Participant C determines that the communications session  referred to in the INVITE message from Participant D is not known, then Participant C advances to step  where Participant C sends an unknown session error to Participant D . Participant C then ends operation in accordance with method  at step , due to the failure of the join INVITE from Participant D to Participant C ","If at step , Participant C determines that the communications session  referred to in the INVITE message from Participant D is known, then Participant C proceeds to step  where Participant C determines whether it is already part of the communications session  referred to in the INVITE message from Participant D . If Participant C determines that it is not already part of the communications session  referred to in the INVITE message from Participant D , then Participant C proceeds to step  where Participant C sends an error message to Participant D indicating that Participant C is not already a member of the communications session . Participant C terminates operation in accordance with method  at step , due to the failure of the join INVITE from Participant D to Participant C . Participant C determines whether it is a member of the existing communications session  for two reasons. First, Participant C might have left the communications session  after Participant D received the list of participants  from the session manager , but before receiving the INVITE message from Participant D . Second, Participant C might be registered at multiple end points, only one of which is a participant  of the communications session  referred to in the INVITE message. When an INVITE message for Participant C is received, the INVITE message will branch to all of the end points, including those that are not part of the existing communications session . Step  ensures that only the appropriate participants  will be allowed to accept the INVITE.","Otherwise, if at step , Participant C determines that it is already a member of the communications session  referred to in the INVITE message from Participant D , then Participant C advances to step  where Participant C determines whether it is the session manager  for the communications session  referred to in the INVITE message from Participant D . If Participant C determines that it is the session manager  for the communications session  referred to in the INVITE message from Participant D , then Participant C proceeds to step  where Participant C sends an error message to Participant D , indicating that the communications session  referred to in the INVITE message should already exist between Participant C and Participant D . Participant C then terminates operation in accordance with method  at step , due to failure of the INVITE between Participant D and Participant C ","If, however, at step , Participant C determines that it is not the session manager  for the communications session  referred to in the INVITE message from Participant D , then Participant C advances to step  where it sends a 200 OK message to","Participant D . Next, Participant C proceeds to step  where Participant C designates a media connection between Participant C and Participant D as existing. Participant C then ends operation in accordance with method  at step .","Table 4 illustrates the call flow (i.e., using SIP) for Participant B referring Participant D into an existing communications session , where Participant A is the session manager  and Participant D supports multiparty communications sessions . To ensure stability, the session manager  will not process an invitation request until all previous invitations have been processed. A sequential invitation scheme guarantees that new participants  receive a correct list of participants  within the communications session . In Table 4, the \u201cREFER\u201d header field indicates that the SIP message is referring a participant . The \u201cRefer-To\u201d header field indicates who is being referred and the \u201cReferredBy\u201d header field indicates who has made the referral. Also in Table 4, the \u201c202 Accepted\u201d header field contains the SIP response code (i.e., 202) and the reason phrase (i.e., accepted) that indicates whether a participant  has accepted an invitation. The \u201cNOTIFY\u201d header field indicates that the message is a notification to a participant  that an event has occurred, a change has occurred, that information needs to be updated, or the like. Additionally, the \u201cEvent\u201d header indicates what type of event is occurring or has occurred. The \u201cTriggeredInvite\u201d header field determines whether the SIP message is an INVITE to join an existing multiparty session .",{"@attributes":{"id":"p-0096","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"B->A:","REFER sip:D@microsoft.com SIP\/2.0"]},{"entry":[{},{},"To: sip:A@microsoft.com"]},{"entry":[{},{},"From: Participant B <sip:B@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 REFER"]},{"entry":[{},{},"Refer-To: D@microsoft.com"]},{"entry":[{},{},"Referred-By: B@microsoft.com"]},{"entry":[{},"A->B:","SIP\/2.0 202 Accepted"]},{"entry":[{},{},"To: sip:A@microsoft.com"]},{"entry":[{},{},"From: Participant B <sip:B@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 REFER"]},{"entry":[{},{},"Refer-To: D@microsoft.com"]},{"entry":[{},"A->D:","INVITE sip:D@microsoft.com SIP\/2.0"]},{"entry":[{},{},"To: sip:D@microsoft.com"]},{"entry":[{},{},"From: Participant A <sip:A@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 INVITE"]},{"entry":[{},{},"Contact: sip:A@microsoft.com"]},{"entry":[{},{},"Referred-By: B@microsoft.com"]},{"entry":[{},{},"Required: multiparty"]},{"entry":[{},{},"EndPoints: Participant A <sip:A@microsoft.com>,"]},{"entry":[{},{},"Participant B<sip:B@microsoft.com>,"]},{"entry":[{},{},"Participant C <sip:C@microsoft.com>, "]},{"entry":[{},{},"Participant D <sip:D@microsoft.com>"]},{"entry":[{},{},"RM: sip:A@microsoft.com"]},{"entry":[{},{},"Content-Type: application\/SDP"]},{"entry":[{},{},"Content-Length: XXX"]},{"entry":[{},{},". . ."]},{"entry":[{},{},"m = message 5060 sip sip:D@microsoft.com"]},{"entry":[{},{},". . ."]},{"entry":[{},"D->A:","SIP\/2.0 200 OK"]},{"entry":[{},{},"To: sip:D@microsoft.com"]},{"entry":[{},{},"From: Participant A <sip:A@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 REFER"]},{"entry":[{},{},"Require: multiparty"]},{"entry":[{},{},"Contact: sip:A@microsoft.com"]},{"entry":[{},{},"Content-Length: 0"]},{"entry":[{},"A->D:","ACK sip:D@microsoft.com SIP\/2.0"]},{"entry":[{},{},"To: sip:D@microsoft.com"]},{"entry":[{},{},"From: Participant A <sip:A@microsoft.com>"]},{"entry":[{},{},"Call-ID 1234567890"]},{"entry":[{},{},"CSeq: 1 ACK"]},{"entry":[{},{},"Content-Length: 0"]},{"entry":[{},"A->B:","NOTIFY B@microsoft.com"]},{"entry":[{},{},"To: sip:B@microsoft.com"]},{"entry":[{},{},"From: Participant A <sip:A@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 2 NOTIFY"]},{"entry":[{},{},"Event: REFER"]},{"entry":[{},{},"Contact: sip:B@microsoft.com"]},{"entry":[{},{},"Content-Type: application\/sip"]},{"entry":[{},{},"Content-Length: 16"]},{"entry":[{},{},". . ."]},{"entry":[{},{},"SIP\/2.0 200 OK"]},{"entry":[{},{},". . ."]},{"entry":[{},"D->B:","INVITE sip:B@microsoft.com SIP\/2.0"]},{"entry":[{},{},"To: sip:B@microsoft.com"]},{"entry":[{},{},"From: Participant D <sip:D@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 INVITE"]},{"entry":[{},{},"Contact: sip:D@microsoft.com"]},{"entry":[{},{},"Supported: multiparty"]},{"entry":[{},{},"TriggeredInvite: TRUE"]},{"entry":[{},{},"RM: sip:A@microsoft.com"]},{"entry":[{},{},"Content-Type: application\/SDP"]},{"entry":[{},{},"Content-Length: XXX"]},{"entry":[{},{},". . ."]},{"entry":[{},{},"m = message 5060 sip sip:D@microsoft.com"]},{"entry":[{},{},". . ."]},{"entry":[{},"D->C:","INVITE sip:C@microsoft.com SIP\/2.0"]},{"entry":[{},{},"To: sip:C@microsoft.com"]},{"entry":[{},{},"From: Participant D <sip:D@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 INVITE"]},{"entry":[{},{},"Contact: sip:C@microsoft.com"]},{"entry":[{},{},"Supported: multiparty"]},{"entry":[{},{},"TriggeredInvite: TRUE"]},{"entry":[{},{},"RM: sip:A@microsoft.com"]},{"entry":[{},{},"Content-Type: application\/SDP"]},{"entry":[{},{},"Content-Length: XXX"]},{"entry":[{},{},". . ."]},{"entry":[{},{},"m = message 5060 sip sip:A@microsoft.com"]},{"entry":[{},{},". . ."]},{"entry":[{},"B->D:","SIP\/2.0 200 OK"]},{"entry":[{},{},"To: sip:B@microsoft.com"]},{"entry":[{},{},"From: Participant D <sip:D@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 INVITE"]},{"entry":[{},{},"Require: multiparty"]},{"entry":[{},{},"Contact: sip:B@microsoft.com"]},{"entry":[{},{},"Content-Length: XXX"]},{"entry":[{},{},". . ."]},{"entry":[{},{},"m = message 5060 sip sip:B@microsoft.com"]},{"entry":[{},{},". . ."]},{"entry":[{},"C->D:","SIP\/2.0 200 OK"]},{"entry":[{},{},"To: sip:C@microsoft.com"]},{"entry":[{},{},"From: Participant D <sip:D@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 INVITE"]},{"entry":[{},{},"Require: multiparty"]},{"entry":[{},{},"Contact: sip:C@microsoft.com"]},{"entry":[{},{},"Content-Length: XXX"]},{"entry":[{},{},". . ."]},{"entry":[{},{},"m = message 5060 sip sip:C@microsoft.com"]},{"entry":[{},{},". . ."]},{"entry":[{},"D->B:","ACK sip:B@microsoft.com SIP\/2.0"]},{"entry":[{},{},"To: sip:B@microsoft.com"]},{"entry":[{},{},"From: Participant D <sip:D@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 ACK"]},{"entry":[{},{},"Content-Length: 0"]},{"entry":[{},"D->C:","ACK sip:C@microsoft.com SIP\/2.0"]},{"entry":[{},{},"To: sip:C@microsoft.com"]},{"entry":[{},{},"From: Participant D <sip:D@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 1 ACK"]},{"entry":[{},{},"Content-Length: 0"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Once Participant D receives a SIP 200 OK response from Participant B in reference to a join INVITE from Participant D , media may begin to flow between Participant D and Participant B even though Participant D may have outstanding INVITES to the other participants . If one of the outstanding INVITES fails, then Participant B will be notified that Participant D is leaving the communications session . Such an event is called a \u201cflicker\u201d, because Participant B observes Participant D become available to the communications session  and then leave the communications session  within a short period of time.","Several safeguards exist for capturing errors within a communications session , but are not necessarily an integral part of the present invention. If Participant D is not online when \u201cinvited\u201d by the session manager  to the communications session , then the relevant registrar (i.e., the session manager ) associated with the \u201cinvite\u201d will return a \u201c480 Temporarily Unavailable\u201d error message. If Participant D does not wish to join the communications session , then Participant D will send a \u201c603 Decline\u201d error message to the session manager . If Participant D has blocked communications with the session manager , then Participant D will send a \u201c480 Temporarily Unavailable\u201d error message to the session manager . If Participant D receives an INVITE message from the session manager  for a communications session  before Participant C leaves the communications session , but Participant D then tries to connect to Participant C after Participant C has left the communications session , then Participant C will return a \u201c610 Session Not Known\u201d error message to Participant D . Participant D will then assume that Participant C is no longer part of the original communications session . If Participant D cannot successfully send an INVITE message to any other participant , then Participant D should not join the communications session  and should cancel all pending INVITES and disconnect any successful connections. Then, Participant D should send a \u201cBYE\u201d SIP message to notify the session manager  that it could not join the communications session .","One skilled in the art will recognize that the present invention may be implemented without the safeguards for capturing errors described above. Such safeguards add value to the present invention, but are not absolutely necessary for multiparty communications sessions .",{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIG. 12","FIG. 12"],"b":["1200","100","404","404","404","404","100","404","404","404","404","404","100","404","404","404"],"i":["d ","a","b","c","d ","a","b","c. "]},"After starting at step , Participant D proceeds to step  of method  where Participant D sends a message to all media end points (i.e., all other participants ). Participant D then proceeds to step  where it yields until a response has been received from all media end points or a timeout period has expired. Next, at step , Participant D determines whether all the media end points received the message, by evaluating responses from each of the media end points. If Participant D determines that a media end point did not receive the message sent by Participant D , then Participant D terminates operation in accordance with method  at step , due to the failure of the instant message from Participant D to all media end points. Otherwise, if Participant D determines that all of the media end points received the message, then Participant D terminates operation in accordance with method  at step .","One skilled in the art will recognize that alternative reporting schemes may be implemented within the spirit of the present invention. For example, and not limitation, instant messages may be sent to all connected parties and success and failure messages may be reported for all participants  as separate events.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIGS. 13A-13B","b":["1300","401","107","100","401","404","107","401","401","100","404","404","401","404","404","404","401","401","404","401","100","404","401","404","401","404","404","404","404","404","404","404","401","404","401","404","100"]},"For the purposes of , Participant A desires to be the session manager  of an existing communication session , where Participant C may also desire to be the session manager . After starting at step , Participant A proceeds to step  of method  where Participant A sends a REQUESTRM message to all other participants  within the communications session , when it is determined that a session manager  is needed. Participant A then proceeds to step  where Participant A yields until a response is received from all other participants . Next, Participant A advances to step  once Participant A receives all of the responses from the other participants . At step , Participant A determines whether any other participant  wishes to become session manager  by evaluating the responses from the other participants . If Participant A determines that no other participant  wishes to become session manager  of the communication session , then Participant A proceeds to step  where Participant A sends a SETRM message to all participants  within the communications session  indicating that it has become the session manager . Participant A then terminates operation in accordance with method  at step , due to the successful election of a session manager .","If, however, at step , Participant A determines that another participant  (i.e., Participant C ) wishes to be session manager , then Participant A advances to step  where Participant A determines whether the bid value (i.e., random number) allows it to become the session manager , by comparing the bid value of Participant A with the bid number of Participant C . The bid value is generated and included in a REQUESTRM message when a participant  desires to become session manager . One skilled in the art will recognize that different techniques may be used to implement a bidding scheme. Such values may be random numbers, where the greatest number wins the bid. In a case where the bid numbers are the same, a tie-breaking mechanism may be developed (i.e., comparison of internet protocol addresses) and utilized to break the tie.","If Participant A determines that Participant A's bid value does not allow it to become the session manager , then Participant A proceeds to step  where Participant A accepts Participants C's request to be session manager , by sending a REQUESTRM response with ALLOW=YES to Participant C . Participant A then terminates operation in accordance with method  at step , due to the failure of Participant A's election as session manager .","If at step , Participant A determines its bid value allows Participant A to become the session manager , then Participant A advances to step  where Participant A declines Participant C's request to become session manager , by sending a REQUESTRM response with ALLOW=NO to Participant C . Participant A then proceeds to step  of session  where Participant A sends a SETRM message to all participants  within the communications session  indicating that it has become the session manager . Participant A ends operation in accordance with method  at step , due to the success of Participant A's election as session manager .","Table 5 illustrates the call flow (i.e., using SIP) for Participant B requesting to be session manager  where Participant C accepts the request. If, however, Participant C also wanted to be session manager , then Participant C would set the \u201callow\u201d attribute to \u201cno\u201d or \u201cfalse\u201d and at the same time send a REQUESTRM message to Participant B . The participant  with the higher number would automatically be selected as the session manager  with the participant  with the lower number accepting the REQUESTRM message from the participant  with the higher number. Also, the participant  with the higher number would decline the REQUESTRM message from the participant  with the lower number. It should be noted that, the REQUESTRM and SETRM header fields are not part of the basic Session Initiation Protocol, but are instead part of a layer of functionality and structure provided by the present invention on top of the Session Initiation Protocol to assist in designating and electing a participant  as the session manager .",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"B->C:","INFO C@microsoft.com"]},{"entry":[{},{},"To: sip:C@microsoft.com"]},{"entry":[{},{},"From: Participant B <sip:B@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 20 INFO"]},{"entry":[{},{},"Contact: sip:B@microsoft.com"]},{"entry":[{},{},"Content-Type: application\/ms-mim"]},{"entry":[{},{},"Content-Length: XXX"]},{"entry":[{},{},"<action>"]},{"entry":[{},{},"<RequestRM uri = \u201csip:B@microsoft.com\u201d bid = \u201c1234\u201d\/>"]},{"entry":[{},{},"<\/action>"]},{"entry":[{},"C->B:","SIP\/2.0 200 OK"]},{"entry":[{},{},"To: sip:C@microsoft.com"]},{"entry":[{},{},"From: Participant B <sip:B@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 20 INFO"]},{"entry":[{},{},"Contact: sip:C@microsoft.com"]},{"entry":[{},{},"Content-Type: application\/ms-mim"]},{"entry":[{},{},"Content-Length: XXX"]},{"entry":[{},{},"<action>"]},{"entry":[{},{},"<RequestRMResponse uri ="]},{"entry":[{},{},"\u201csip:B@microsoft.com\u201d allow = \u201ctrue\u201d\/>"]},{"entry":[{},{},"<\/action>"]},{"entry":[{},"B->C:","INFO C@microsoft.com"]},{"entry":[{},{},"To: sip:C@microsoft.com"]},{"entry":[{},{},"From: Participant B <sip:B@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 21 INFO"]},{"entry":[{},{},"Contact: sip:B@microsoft.com"]},{"entry":[{},{},"Content-Type: application\/ms-mim"]},{"entry":[{},{},"Content-Length: XXX"]},{"entry":[{},{},"<action>"]},{"entry":[{},{},"<SetRM uri = \u201csip:B@microsoft.com\u201d\/>"]},{"entry":[{},{},"<\/action>"]},{"entry":[{},"C->B:","SIP\/2.0 200 OK"]},{"entry":[{},{},"To: sip:C@microsoft.com"]},{"entry":[{},{},"From: Participant B <sip:B@microsoft.com>"]},{"entry":[{},{},"Call-ID: 1234567890"]},{"entry":[{},{},"CSeq: 21 INFO"]},{"entry":[{},{},"Contact: sip:C@microsoft.com"]},{"entry":[{},{},"Content-Type: application\/ms-mim"]},{"entry":[{},{},"Content-Length: XXX"]},{"entry":[{},{},"<action>"]},{"entry":[{},{},"<SetRMResponse uri = \u201csip:B@microsoft.com\u201d\/>"]},{"entry":[{},{},"<\/action>"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Whereas the present invention has been described in detail it is understood that variations and modifications can be effected within the spirit and scope of the invention, as described herein before and as defined in the appended claims. The corresponding structures, materials, acts, and equivalents of all mean-plus-function elements, if any, in the claims below are intended to include any structure, material, or acts for performing the functions in combination with other claimed elements as specifically claimed."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 6A-6B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 7A-7B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 8A-8B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 9A-9B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 10A-10C"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 11A-11B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 13A-13B"}]},"DETDESC":[{},{}]}
