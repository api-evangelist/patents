---
title: Reusable and extensible framework for multimedia application development
abstract: Systems and methods of developing and/or implementing multimedia applications. The system provides an extensible framework including an application layer, a framework utility layer, and a core engine layer. The framework utility layer includes an application programming interface, a video codec sub-framework (XCF), a video packetization sub-framework (XPF), and a video/text overlay sub-framework (XOF). The core engine layer includes one or more core codec engines and one or more core rendering engines. The XCF, XPF, and XOF sub-frameworks are effectively decoupled from the multimedia applications executing on the application layer, and the core codec and rendering engines of the core engine layer, allowing the XCF, XPF, and XOF sub-frameworks and core codec/rendering engines to be independently extensible. The system also fosters enhanced reuse of existing multimedia applications across a plurality of multimedia systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08885708&OS=08885708&RS=08885708
owner: Dialogic Corporation
number: 08885708
owner_city: Montreal
owner_country: CA
publication_date: 20091211
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["\u2014Not applicable\u2014","\u2014Not applicable\u2014","The present application relates generally to multimedia frameworks, and more specifically to systems and methods that employ extensible frameworks for the development and\/or implementation of multimedia applications across a plurality of multimedia systems.","Recent years have seen a significant increase in demand for multimedia applications. For example, increasing demand has been seen for multimedia applications used in conjunction with user access devices such as cell phones and mobile personal computers (PCs). Such multimedia applications include \u201creal-time\u201d video applications such as video conferencing, \u201cstreaming\u201d video applications for downloading video clips over a network, and \u201coff-line\u201d transcoding applications.","Because user access devices such as cell phones and mobile PCs generally provide relatively low upload and download bandwidths, such devices typically employ video coding\/compression formats such as MPEG-2, MPEG-4, H.263, or H.264 to reduce the transport time and storage requirements of video content accessed over the network. Some user access devices may also rely on media gateways in the network to run transcoding and transrating applications needed to perform video coding\/compression. As employed herein, the term \u201cmedia gateway\u201d refers to a translation system, device, or service for converting digital media streams from one computer or communications network to another. Transcoding applications typically implement video processing operations to depacketize the data of video content accessed over the network, to decompress the video data from one coding\/compression format (e.g., H.263) to a raw data stream, to re-compress the raw data stream to another coding\/compression format (e.g., MPEG-4), and to re-packetize the video data for subsequent forwarding over the network, which can include broadband and mobile networks. Transrating applications may be employed to transform the bit rate of the video data to assure connectivity between the broadband and mobile networks. Media gateways can also be configured to run content adaptor applications for adapting the video content to the display capabilities of specific user access devices.","Stream-combination or stream-mixing applications and video\/text overlay applications may also be employed to combine video streams and\/or text while the video data is in its decompressed form. For example, media servers such as video conferencing servers may be configured to run stream-combination applications for receiving video content from multiple sources over the network, depacketizing the data of the video content, decompressing the video data to raw data streams, combining the raw data streams, and re-compressing and re-packetizing the video data for subsequent forwarding over the network to target conference devices, which may include one or more mobile devices. Further, media gateways and\/or media servers may be configured to run video\/text overlay applications for receiving video content over the network, depacketizing the data of the video content, decompressing the video data to a raw data stream, combining the raw data stream with data from additional content, such as content corresponding to a \u201ctext crawl\u201d at the bottom of a display screen, and re-compressing and re-packetizing the video data for subsequent forwarding over the network to one or more user access devices.","Traditionally, providers of multimedia systems such as media servers, media gateways, video transcoders, content adaptation platforms, etc., have incorporated multimedia applications such as those described above separately into each system, with minimal reuse of the applications between the respective systems. Such multimedia applications can become tightly coupled with the multimedia systems configured to run them, making it difficult to replace one multimedia application with another, or to upgrade multimedia applications from one release to the next. Such multimedia applications may also be implemented in various multimedia systems in different ways. For example, providers of multimedia systems may employ different implementations of multimedia applications in their products based on the operating system that the multimedia system is running, making it difficult to reuse multimedia application code from one multimedia system in other multimedia systems. Such difficulties in reusing, replacing, and\/or upgrading multimedia applications in multimedia systems can translate into higher production costs, increased development time, and slower time to market.","It would therefore be desirable to have systems and methods of developing and\/or implementing multimedia applications in multimedia systems that avoid at least some of the drawbacks of the traditional approaches described above.","In accordance with the present application, systems and methods of developing and\/or implementing multimedia applications are disclosed that foster the reuse of the multimedia applications across a plurality of multimedia systems. The presently disclosed systems and methods employ an extensible framework that is effectively decoupled from the multimedia applications and core codec\/rendering engines, allowing the multimedia applications, the framework utilities, the core codec (encoder\/decoder) engines, and the core rendering engines to be independently modified, replaced, and\/or upgraded. Moreover, the extensible framework provides easy-to-use, flexible, operating system (OS) independent interfaces that multimedia application developers can use to create a range of multimedia applications.","In accordance with one aspect, a system for developing and\/or implementing multimedia application programs (referred to herein as the \u201cmultimedia applications\u201d) provides an extensible framework that includes an application layer component (referred to herein as the \u201capplication layer\u201d), a framework utility layer component (referred to herein as the \u201cframework utility layer\u201d), and a core engine layer component (referred to herein as the \u201ccore engine layer\u201d). One or more multimedia applications, such as transcoding applications, transrating applications, content adaptor applications, stream-combination applications, video\/text overlay applications, etc., can execute on the application layer. The framework utility layer includes an application programming interface (API), an extensible video codec sub-framework (XCF), an extensible video packetization sub-framework (XPF), an extensible video\/text overlay sub-framework (XOF), and a built-in debug support utility that can be used across the respective sub-frameworks. The API provides functional interfaces for the multimedia applications executing on the application layer. The XCF sub-framework provides transcoding and transrating functionalities, and supports multiple coding\/compression formats such as MPEG-2, MPEG-4, H.263, H.264, or any other suitable coding\/compression format. The XPF sub-framework supports multiple packetization\/depacketization schemes based on the real-time transport protocol (RTP) or any other suitable protocol. The XOF sub-framework provides video\/text overlay functionalities. The core engine layer includes one or more core codec engines and one or more core rendering engines. Each core codec engine is operative to transform encoded and\/or compressed multimedia data into a raw (i.e., unencoded and\/or decompressed) data stream for subsequent use by the core rendering engines. Each core rendering engine is operative to process one or more raw data streams into a multimedia output for display or presentation on a video display monitor, an audio speaker, or any other suitable display or presentation device.","In accordance with one exemplary aspect, the extensible framework is implemented at least in part using the C++ programming language, the Java programming language, or any other suitable object-oriented programming (OOP) language. The building blocks of such an OOP system are called \u201cobjects\u201d, which are programming units that group together data structures (the \u201cdata\u201d) and the operations or procedures (the \u201cmethods\u201d) that use or affect that data. Each object therefore includes data and one or more methods that can be performed on that data. Each object also has associated interfaces consisting of public methods and instantiated data. In accordance with this exemplary aspect, each of the XCF, XPF, and XOF sub-frameworks within the framework utility layer is implemented as an object having associated data, methods, and interfaces. The XCF, XPF, and\/or XOF sub-frameworks are configured to publish or \u201cexport\u201d their interfaces to the API, which, in turn, provides its functional interfaces for the multimedia applications executing on the application layer. The XCF, XPF, and XOF sub-frameworks are therefore effectively decoupled from the multimedia applications executing on the application layer. The XCF, XPF, and\/or XOF sub-frameworks are also configured to export their interfaces to the core codec engines and core rendering engines, respectively, of the core engine layer. The XCF, XPF, and XOF sub-frameworks are therefore also effectively decoupled from the core codec and rendering engines of the core engine layer.","By effectively decoupling the XCF, XPF, and XOF sub-frameworks from the multimedia applications, the core codec engines, and\/or the core rendering engines, independent extensibility of the XCF, XPF, and XOF sub-frameworks, and the core codec and rendering engines, can be achieved. For example, the XCF sub-framework can be independently extended to support additional codec engines, which, in turn, can be upgraded to support new codec engine releases. Further, the XPF sub-framework can be independently extended to support additional packetization\/depacketization schemes, and the XOF sub-framework can be independently extended to support additional video\/text\/image overlay applications. The framework utility layer can also be extended to include additional sub-frameworks, such as a container sub-framework or any other suitable sub-framework. Moreover, the core rendering engines can be independently extended to support the additional video\/text\/image overlay applications, and can be upgraded to support new rendering engine releases. The effective decoupling of the XCF, XPF, and XOF sub-frameworks from the multimedia applications and the core codec\/rendering engines also provides the extensible framework with easy-to-use, flexible, OS-independent interfaces that allow enhanced reuse of existing multimedia applications across a plurality of multimedia systems.","Other features, functions, and aspects of the invention will be evident from the Drawings and\/or the Detailed Description of the Invention that follow.","Systems and methods of developing and\/or implementing multimedia applications are disclosed that foster the reuse of multimedia applications across a plurality of multimedia systems. The presently disclosed systems and methods employ an extensible framework for the development and\/or implementation of multimedia applications that is effectively decoupled from the multimedia applications and core codec\/rendering engines, allowing the multimedia applications, the framework utilities, the core codec (encoder\/decoder) engines, and the core rendering engines to be independently modified, replaced, and\/or upgraded. Moreover, the extensible framework provides easy-to-use, flexible, operating system (OS) independent interfaces that multimedia application developers can use to create a range of multimedia applications.","As employed herein, the term \u201creuse\u201d refers to taking a complete multimedia application as a software component, and incorporating it into a target multimedia system, adding a minimal amount of software, as required and\/or as desired, to adapt the multimedia application to the specific needs of the target system. Further, as employed herein, the term \u201cextensible\u201d refers to a manner of software design that takes into account possible future advances and seeks to accommodate them by adding new functionality or modifying existing functionality, while at the same time minimizing any impact to existing system functions.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","100","104","1","104","108","1","108","102","104","1","104","108","1","108","102"],"i":["n ","m ","n ","m "]},"As shown in , the plurality of multimedia systems .-.are configured to run a plurality of multimedia applications .-., respectively. For example, the plurality of multimedia applications .-.may include a transcoding application, a transrating application, a content adaptor application, a stream-combination application, a video\/text overlay application, or any other suitable type of multimedia application. Each of the multimedia systems .-.therefore includes at least one processor operative to execute at least one computer program out of at least one memory to implement the processing operations dictated by the respective multimedia application .-.. In accordance with the illustrative embodiment of , each of the multimedia applications .-.employs an application programming interface (API) of a multimedia framework to communicate with one or more program modules (referred to herein as \u201csub-frameworks\u201d) for performing the processing operations required by the respective multimedia application.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 2","FIG. 9"],"b":["200","106","1","106","200","202","204","206","106","1","106","202","204","208","210","212","214","216","210","212","214","217","219","208","106","1","106","202","210","212","214","206","218","220","218","220"],"i":["n ","n ","n "]},"In accordance with the illustrative embodiment of , the extensible framework  may be implemented at least in part using the C++ programming language, the Java programming language, or any other suitable object-oriented programming (OOP) language. The building blocks of such an OOP system are called \u201cobjects\u201d, which are programming units used to group together data structures (also referred to herein as \u201cdata\u201d) and the operations or procedures (also referred to herein as \u201cmethods\u201d) that use or affect that data. Each object therefore includes data and one or more methods that can be performed on that data. The act of grouping data and methods into an object is called \u201cencapsulation\u201d. Objects also have associated interfaces consisting of public methods and real instances of the respective data structures. An object can be configured to publish or \u201cexport\u201d its interfaces to one or more software applications or engines. For example, an object can receive one or more commands or instructions at its interface from a specified software application, directing that object to perform one of its associated methods. Each command or instruction received at the object interface generally includes an indication of the selected method, such as the \u201cname\u201d of the method, along with a number of arguments appropriate for that method.","In an OOP system, an object type can be defined by an abstraction called a \u201cclass\u201d, which, in turn, is defined by associated instance variables and methods. Each object within a particular class has separate copies of the instance variables and methods defined for that class. A class can be used to create a particular instance of an object. Further, a hierarchy of classes can be defined such that a particular class has one or more subclasses. Each subclass inherits the class definition (i.e., the instance variables and methods) of its parent class. Each subclass can also add to or modify the behavior specified by the class definition inherited from its parent class.","In accordance with the illustrative embodiment of , each of the XCF, XPF, and XOF sub-frameworks , ,  within the framework utility layer  is implemented as an object having associated data, methods, and interfaces. Further, each of the XCF, XPF, and XOF sub-frameworks , ,  can publish or \u201cexport\u201d its interfaces to the API , which, in accordance with the illustrated embodiment, provides its functional interfaces for the multimedia applications .-.executing on the application layer . The XCF, XPF, and XOF sub-frameworks , ,  within the framework utility layer  are therefore effectively decoupled from the multimedia applications .-.executing on the application layer . In accordance with the illustrated embodiment, each of the XCF, XPF, and XOF sub-frameworks , ,  can also export its interfaces to one or more of the core codec engines  and the core rendering engines . The XCF, XPF, and XOF sub-frameworks , ,  within the framework utility layer  are therefore also effectively decoupled from the core codec and rendering engines ,  within the core engine layer .","In accordance with the illustrative embodiment of , the XCF and XOF sub-frameworks ,  export their interfaces to the core codec and rendering engines , , respectively, and to the API . -depict illustrative lists of format definitions implemented within the API  for a plurality of methods associated with the XCF and XOF sub-frameworks , . Such format definitions can be accessed, as required and\/or as desired, by the multimedia applications .-.executing on the application layer  (see ). As shown in -, the API  includes encoder-related format definitions (see ), decoder-related format definitions (see ), and overlay-related format definitions (see ). The format definitions , correspond to the methods associated with the XCF sub-framework , and the format definitions correspond to the methods associated with the XOF sub-framework . Each of the format definitions , , define the format by which the corresponding methods can be invoked by the multimedia applications .-.","In accordance with the illustrative embodiment of , the encoder-related format definitions include an EncoderCreate( . . . ) definition for creating an encoder, an EncoderDestroy( . . . ) definition for destroying an encoder, an EncoderSetDebug( . . . ) definition for setting the built-in debug support utility  (see ) for an encoder, an EncoderTrace( . . . ) definition for tracing an encoder video stream, an EncoderGetPStreamCoderType( . . . ) definition for obtaining the PStream (referred to herein as the \u201cPacket Stream\u201d) coder type, an EncoderSetDci( . . . ) definition for setting the DCI (Decoder Configuration Information) interface for an encoder, an EncoderGetDci( . . . ) definition for obtaining the DCI interface for an encoder, an EncoderStart( . . . ) definition for starting an encoder, an EncoderStop( . . . ) definition for stopping an encoder, an EncoderProcessData( . . . ) definition for processing encoder data, and an EncoderGenlFrame( . . . ) definition for generating intra-coded frames.","In accordance with the illustrative embodiment of , the decoder-related format definitions include a DecoderCreate( . . . ) definition for creating a decoder, a DecoderDestroy( . . . ) definition for destroying a decoder, a DecoderSetDebug( . . . ) definition for setting the built-in debug support utility  (see ) for a decoder, a DecoderTrace( . . . ) definition for tracing a decoder video stream, a DecoderGetPStreamCoderType( . . . ) definition for obtaining the Packet Stream decoder type, a DecoderSetDci( . . . ) definition for setting the DCI interface for a decoder, a DecoderGetDci( . . . ) definition for obtaining the DCI interface for a decoder, a DecoderStart( . . . ) definition for starting a decoder, a DecoderStop( . . . ) definition for stopping a decoder, and a DecoderProcessData( . . . ) definition for processing decoder data.","In accordance with the illustrative embodiment of , the overlay-related format definitions include an OvlMixerCreate( . . . ) definition for creating an overlay\/mixer, an OvlMixerDestroy( . . . ) definition for destroying an overlay\/mixer, an OvlMixerStartAll( . . . ) definition for starting an overlay\/mixer, an OvlMixerStopAll( . . . ) definition for stopping an overlay\/mixer, an OvlWindowCreate( . . . ) definition for creating an overlay window, an OvlWindowSubmitContent( . . . ) definition for submitting content to an overlay window, an OvlWindowClearContent( . . . ) definition for clearing the content from an overlay window, an OvlWindowStart( . . . ) definition for starting overlay window operations, and an OvlWindowStop( . . . ) definition for stopping overlay window operations.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 2","FIG. 4","FIG. 3","FIG. 3","FIG. 3"],"b":["208","204","208","402","404","406","408","402","106","1","106","202","402","404","300","406","300","408","300","208","410","202"],"i":["n ","a ","a","b ","b","c ","c"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 5","FIG. 2","FIG. 5","FIG. 2","FIG. 2"],"b":["210","204","210","502","504","506","502","504","506","502","218","504","218","506","210","216"]},"In accordance with the illustrative embodiment of , each of the encoder and decoder objects ,  can export its associated interfaces to the API . Each of the encoder and decoder objects ,  can also export a common interface to multiple encoders\/decoders (codecs), respectively, defined by the core codec engines , allowing the multimedia applications .-.executing on the application layer  to be agnostic to the codec type and\/or manufacturer. For example, the codecs defined by the core codec engines  may be Intel IPP-based video codecs or any other suitable codec. As shown in , the encoder, decoder, and debug objects , ,  are implemented on a platform abstraction sub-layer , which facilitates extensibility with a range of instruction set architectures, processors, operating systems, and\/or computing platforms. For example, the platform abstraction sub-layer  may be configured to facilitate extensibility with the x86 family of instruction set architectures based on the Intel 8086 processor or any other suitable architecture\/processor, the Microsoft Windows operating system or any other suitable operating system, and\/or the Linux computing platform or any other suitable computing platform.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 6","FIG. 2","FIG. 6"],"b":["212","204","212","602","604","602","604","602","604","212","606","504","210"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 7","FIG. 2","FIG. 7"],"b":["214","204","214","702","702","702","208","702","220","220"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 8","FIG. 2","FIG. 8","FIG. 2","FIG. 2","FIG. 5","FIG. 5","FIG. 7","FIG. 2","FIG. 4","FIG. 2","FIG. 2"],"b":["800","200","800","200","802","804","806","808","804","806","210","808","214","502","504","210","702","214","208","818","800","804","806","410","822","800","808","702","824","800","800","810","812","814","816","817","810","812","804","814","816","806","817","808","810","814","212","800","820","216"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 9","FIG. 2","FIG. 9","FIG. 5","FIG. 5"],"b":["900","210","900","902","904","906","904","906","502","504","502","908","900","504","910","900"]},"In further accordance with the illustrative embodiment of , the encoder object  exports its interfaces to the core codec engines  (see ) via the lower level encoder subclasses , , which inherit the class definition of the XCF_encoder subclass . Similarly, the decoder object  exports its interfaces to the core codec engines  via the lower level decoder subclasses , , which inherit the class definition of the XCF_decoder subclass . Specifically, the class definition of the subclass  specifies the methods that may be invoked to access the core functions of a first predetermined type of encoder (XCF_encoder_type1) included in the core codec engines , such as an MPEG-4 encoder or any other suitable type of encoder. Further, the class definition of the subclass  specifies the methods that may be invoked to access the core functions of a second predetermined type of encoder (XCF_encoder_type2) included in the core codec engines , such as an H.264 encoder or any other suitable type of encoder. Additionally, the class definition of the subclass  specifies the methods that may be invoked to access the core functions of a first predetermined type of decoder (XCF_decoder_type1) included in the core codec engines , such as an MPEG-4 decoder or any other suitable type of decoder. Further, the class definition of the subclass  specifies the methods that may be invoked to access the core functions of a second predetermined type of decoder (XCF_decoder_type2) included in the core codec engines , such as an H.264 decoder or any other suitable type of decoder. In effect, the subclasses , , ,  correspond to the glue sub-layer  (see ) for interfacing to the various types of codecs (encoders\/decoders) included in the core codec engines .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 10","FIG. 2","FIG. 10","FIG. 6","FIG. 6"],"b":["1000","212","1000","1002","1004","1006","1004","1006","602","604","1000","1008","1010","1004","1012","1014","1006","1008","1010","1012","1014"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 11","FIG. 2","FIG. 11","FIG. 7","FIG. 11","FIG. 7","FIG. 2","FIG. 2"],"b":["1100","212","1100","1102","1104","1104","702","1100","1106","1108","1104","702","220","1106","1108","1106","1108","219","220"]},"An illustrative method  of developing and\/or implementing a multimedia application within a multimedia system is described below with reference to . In accordance with the illustrative method of , the extensible framework  (see ) is employed to develop and\/or implement a transcoding application for incorporation into a video transcoding system. It should be appreciated, however, that the extensible framework  may be employed to develop and\/or implement any other suitable type of multimedia application for incorporation into any other suitable type of multimedia system. It is also noted that the transcoding application is configured for execution on the application layer  (see ) of the extensible framework , invoking the methods associated with the XCF, XPF, and\/or XOF sub-frameworks , ,  (see ), as required and\/or as desired, via the interfaces and\/or format definitions of the API  (see ).","As depicted in step  (see ), the transcoding application receives a video packet sequence, such as an RTP video packet sequence, from a packet interface of the video transcoding system. As depicted in step , the transcoding application invokes one or more suitable methods of the XPF sub-framework  to depacketize the video packet sequence, converting the video packet sequence into a first plurality of video frames compressed according to a specified coding\/compression format. As depicted in step , the transcoding application invokes one or more suitable methods of the XCF sub-framework  to decode the first plurality of video frames, generating a raw data stream, such as a YUV data stream, from the decoded video frames. As depicted in step , the transcoding application invokes one or more suitable methods of the XOF sub-framework  to combine the raw data stream with data from additional content, such as video, text, and\/or image content. As depicted in step , the transcoding application invokes one or more suitable methods of the XCF sub-framework  to encode the raw data stream, re-compressing the raw data stream to generate a second plurality of video frames compressed according to the same specified coding\/compression format or a different coding\/compression format. As depicted in step , the transcoding application invokes one or more suitable methods of the XPF sub-framework  to packetize the second plurality of video frames, generating a new video packet sequence, such as a new RTP video packet sequence. As depicted in step , the transcoding application provides the newly generated video packet sequence to the packet interface of the video transcoding system for subsequent transmission.","Having described the above illustrative embodiments, other alternative embodiments are possible and\/or variations to these illustrative embodiments may be made. For example, it was described that the extensible framework  (see ) may be implemented at least in part using any suitable object-oriented programming (OOP) language. It was also described that the API module  (see ) may be implemented using any suitable programming language. In accordance with one or more alternative embodiments, each of the extensible framework  and the API module  may be implemented using any suitable object-oriented or non-object-oriented programming language.","It is noted that the operations performed by the illustrative embodiments described above are purely exemplary and imply no particular order. Further, these operations can be used in any sequence when appropriate and\/or can be partially used. With these illustrative embodiments in mind, it should be understood that such operations can correspond to computer-implemented operations involving data stored on computer systems. Such computer-implemented operations require manipulation of physical quantities, which can take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, compared, or otherwise manipulated. It should further be understood that the presently disclosed system can correspond to a device or apparatus for performing such computer-implemented operations. The device or apparatus can be specially constructed for the required purpose, or can be a general-purpose computer including one or more processors operative to execute at least one computer program out of at least one memory for performing the required operations.","It is also noted that one or more of the functions necessary to implement the above-described systems and methods can be embodied\u2014in whole or in part\u2014in hardware, software, or some suitable combination of hardware and software, using programmable micro-controllers, microprocessors, digital signal processors, and\/or logic arrays, read-only memory (ROM), random access memory (RAM), CD-ROM, personal computers and computer displays, wire-based, optical fiber-based, or wireless communications media or devices, and\/or any other suitable hardware and\/or software components and\/or devices.","It will be appreciated by those skilled in the art that modifications to and variations of the above-described systems and methods may be made without departing from the inventive concepts disclosed herein. Accordingly, the invention should not be viewed as limited except as by the scope and spirit of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The invention will be more fully understood with reference to the following Detailed Description of the Invention in conjunction with the drawings of which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIGS. 3","FIG. 2","FIG. 2"],"i":["a","c "],"b":"3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 6","FIG. 2"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 7","FIG. 2"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 8","FIG. 2"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 9","FIG. 5"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 10","FIG. 6"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 11","FIG. 7"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 12","FIGS. 5"],"b":["6","7"]}]},"DETDESC":[{},{}]}
