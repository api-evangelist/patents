---
title: Methods and systems for managing data service specifications
abstract: Development of network-based computing resources can be enhanced through the use of methods and systems that allow for controlled editing of specification data used in an automated build process in a user-friendly way. Particularly, one or more software tools can be used to allow editing of application programming interfaces (API) specification data such as Web Application Description Language (WADL) or Web Service Description Language (WSDL) and/or to allow editing of elements used to generate software development kit (SDK) documentation relied upon by an automatic build system. For example, a first interface may be configured for editing parameter values and parameter types related to functionality of the API while a second interface may restrict use to editing descriptive aspects of the API such as the SDK.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189244&OS=09189244&RS=09189244
owner: Adobe Systems Incorporated
number: 09189244
owner_city: San Jose
owner_country: US
publication_date: 20090818
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The disclosure below generally relates to development of network-based computing resources, particularly to development of data services.","Web services and web applications include software systems that support machine-to-machine interaction over a network. For example, a web service or web application may comprise one or more application programming interfaces (APIs) that can be accessed over a network and executed on a remote system hosting the requested service or application. Typically, available functionality is specified in an API and corresponding documentation for use in invoking the web service. For instance, some web services may be defined using the Web Application Description Language (WADL), which is an XML-based format that describes services in a machine-processable way and\/or the Web Service Description Language (WSDL), which is an XML format for describing web services, such as by defining ports and messages.","Development of a web service or web application can raise logistical challenges. For example, the web service\/application may be developed to include a software development kit (SDK) for clients that includes detailed reference documentation, client libraries for invoking the web service\/application in target languages, and sample applications\/code. This effort may be difficult to coordinate among multiple parties responsible for various aspects of the project.","As an example, in some existing development workflows, technical writers are not permitted direct access to WADL or WSDL data. Instead, they may deal indirectly with data that is difficult to edit and which may be out of date. Furthermore, there may be some delay between when the technical writer makes a contribution and when the changes to the SDK can be seen by the writer. Similar issues may occur for other personnel, such as software engineers wishing to add or update an API.","Development of network-based computing resources can be enhanced through the use of methods and systems that allow for controlled editing of specification data used in an automated build process in a user-friendly way. Particularly, one or more software tools can be used to allow editing of API specification data such as WADL or WSDL and\/or to allow editing of elements used to generate SDK documentation relied upon by an automatic build system. This editing ability may lead to improved workflows whereby development personnel may have more direct access to portions of the API specification and may readily see the results of their efforts.","Embodiments include a method, comprising accessing specification data for a data service, the specification data defined in a first format. For example, the specification data may comprise one or more WADL files or constituent files comprising text and markup used to generate SDK documentation. The method can comprise identifying a portion or portions of the specification data to be edited, such as particular files or portions thereof. The identified portion(s) can be converted into a second format and an interface for editing the specification data in the second format can be generated. The method may comprise receiving data representing an edited version of the specification data in the second format\u2014for example, the editing interface may return the edited version. Based on the received data, the specification data in the first format can be updated, and the method can comprise triggering an automated build to update some or all components of the data service using the specification data as updated.","Embodiments include computing systems and computer-readable media comprising program code for providing aspects of the present subject matter. These illustrative embodiments are mentioned not to limit or define the limits of the present subject matter, but to provide examples to aid understanding thereof. Illustrative embodiments are discussed in the Detailed Description, and further description is provided there. Advantages offered by various embodiments may be further understood by examining this specification and\/or by practicing one or more embodiments of the claimed subject matter.","Reference will now be made in detail to various and alternative exemplary embodiments and to the accompanying drawings. Each example is provided by way of explanation, and not as a limitation. It will be apparent to those skilled in the art that modifications and variations can be made. For instance, features illustrated or described as part of one embodiment may be used on another embodiment to yield a still further embodiment. Thus, it is intended that this disclosure includes modifications and variations as come within the scope of the appended claims and their equivalents.","In the following detailed description, numerous specific details are set forth to provide a thorough understanding of the claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure the claimed subject matter.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","102","104","106","110","108","110"]},"The data service may, for example, comprise a web service provided by one or more server-side applications  whose functionality is invoked via application programming interface (API) . For instance, the web service may be implemented as a representational state transfer (REST) architecture in which the clients provide calls to remote methods via HTTP requests that can include one or more (and typically several) parameters using a format specified in documentation for API . In response, server-side application(s)  can return responses using a structure\/format also specified in documentation for API  or elsewhere. Although a single API is illustrated for the sake of simplicity, a data service may implement any number of APIs.","In this example, client platform  utilizes client application  and runtime library  to invoke the web service. Although a single client is shown here, the web service may support multiple clients and each client may use different programming languages and runtime libraries. This example depicts library  at client . For example, a library may be maintained separately (e.g., dynamically linked at runtime). However, in some embodiments, a library may or may not reach clients \u2014for example, a library  may be incorporated into a client application  at the time of development and thus may not be separately provided to a client.","The entity or entities that provide the web service may utilize one or more service development platforms  to execute one or more applications, programs, or components collectively illustrated as build system  to create and maintain the server-side application(s)  that provide the web service functionality. This is conceptually illustrated by dotted line . Service development platform  may comprise the same server or a different server that actually executes server-side application(s) .","In some embodiments, the web service provider may specify the functionality of the web service via WADL or WSDL as noted above. Build system  can be used to automatically generate suitable code for providing server-side application(s)  based on the WADL, WSDL, or another specification. In some embodiments, build system  may support automatic testing and\/or generation of software development kit (SDK) artifacts for use by one or more users (not shown) of client application .","For example, SDK artifacts can include runtime libraries  for one or more languages to facilitate the development process for distribution with client applications for use at runtime and\/or for use by users writing standalone client applications. Additionally, API documentation can be included to define the web service in terms of input and output parameters and syntax. Finally, additional reference documentation can be provided that includes sample code and sample input\/output data (also referred to as \u201cwiretraces\u201d).","Build system  may also generate code to test aspects of server-side application(s) . Thus, connection  is illustrated to represent build system  invoking the functionality of server-side application  via API  by running test code. When the data service is updated, build system  may publish the latest version of server-side application  and API  to server platform . Additionally, the latest SDK artifacts and test results may be made available to authorized users of server platform  or may be made available at development platform  for internal use. In practice, build system  may perform tests using a separate test build of the web service rather than the \u201cproduction\u201d version (if any).","In accordance with one or more aspects of the present subject matter, build system  can also include or be used alongside a specification management system  to allow users such as developers to edit the WADL, WSDL, or other specification data used by build system  to benefit from the infrastructure supporting the automated build process. For example, as conceptually indicated by dashed lines , portions of the specification data can be converted from a first format to a second format for use with an editing interface , which can be provided using one or more service development platforms  executing suitable development application or applications .","In some embodiments, interface  is provided via an HTML page with code for providing a JavaScript-based or other text editor and application  is a browser or other application that can render the HTML page. For instance, the TinyMCE Javascript WYSIWYG editor (available at http:\/\/tinymce.moxiecode.com) can be used but with formatting options adjusted to limit the ability of end users to introduce unwanted formatting. In some embodiments, the capabilities of the text editor can be customized based on user permissions.","In this example, build system  and specification management system  are provided via service development platform , which is separate from service development platform . For example, service development platform  may comprise a server maintained by the entity responsible for developing the web service, while one or more service development platforms  each represent a workstation interfaced to development platform  for use by developers associated with the entity or outside the entity. However, this is meant to be illustrative, and any suitable development architecture can be used.","As a particular workflow example, specification management system  may allow a technical writer using platform  controlled access to edit documentation that is embedded in the specification data or otherwise maintained with the web service without allowing access to other parts of the specification data.","As was noted above, the entity providing a web service may be hesitant or unable to allow a technical writer full access to WADL files for the service due to the risk that the technical writer may inadvertently alter portions of the WADL specification outside his or her assigned task. Additionally or alternatively, it may be difficult or impossible to allow the technical writer direct access to build system , especially if the technical writer is an independent contractor or is otherwise \u201coutside the company.\u201d Thus, as noted earlier, in a conventional development workflow, the technical writer may have been forced to rely on copies of the WADL files received indirectly. The files might not be representative of the most up-to-date specification and the technical writer may not have the opportunity to view the results of his or her work as integrated into the web service\/documentation.","Instead, in accordance with aspects of the present subject matter, controlled access to the WADL data can be facilitated by specification management system . The technical writer may be provided with current data and a more user friendly interface for performing his or her assigned portion of the task. Once he or she has updated his or her portion of the data, the updates can be merged into the WADL specification and used in the automated build process, with the technical writer able to view the results as published to the SDK after the next build.","As another example, specification management system  may allow a software engineer to edit portions of the specification data that define API functionality via a more user-friendly interface. For example, rather than using a separate XML editor and parsing the entire WADL file for a web service, the developer may be presented with an HTML-based page for only a particular API or portion thereof with form inputs (e.g., text boxes, drop-down menus, toggle switches) for defining and describing parameters. Similar to the case of the technical writer, the developer may be able to view the results of his or her work after the API specification data input via HTML page 126 is merged into the WADL specification and the next build is performed.","Portions of the specification data may be edited as noted above to change definition data for APIs. However, other portions of the specification data may also be edited. As an example, the data service may include one or more documentation pages that can be dynamically generated by an automated build system using constituent files comprising text and markup. For instance, a documentation page listing all available APIs may be generated using text comprising headings and introductory text, with API titles inserted based on identifying the name of each API defined in a corresponding WADL file. One or more portions of the constituent files may be selected, parsed, and converted for editing via the HTML interface in addition to or instead of WADL files.","Returning to the example of the technical writer, he or she may be able to enter changes to the introductory paragraphs and headings via an HTML formatted version of a portion of the constituent files via the editing interface. However, the task of defining tags or markup for inserting the WADL information may be left to another designer, and so that portion of the constituent files may not be presented to the technical writer via the editing interface.","The computer platforms of  may comprise computing devices with one or processors configured by software tangibly embodied in computer-readable media (e.g., memory) accessible to the processor(s).  provides an example of a computing platform  configured to provide a build system but a similar hardware architecture can be used for any or all of client platforms , server platform , service development platform , and service development platform .","Computing platform  comprises one or more processors  connected via a bus  to a memory . Additionally, bus  is connected to I\/O interface  and graphics processor . Graphics processor  drives one or more displays  that can be used to view output of computing platform . I\/O interface  provides connections to networking components  (e.g., local area and\/or wide-area connections), I\/O devices  (e.g., mouse, keyboard, speakers, and other input and output devices), and storage  (e.g., computer-readable media such as disk drives).","Memory  represents local and\/or remotely-accessible storage such as RAM. In this example, components for developing a data service embodied in memory and provide specification management functionality in accordance with aspects of the present subject matter. Particularly, the components used to provide specification management functionality in this example include a user interface module , a selection module , a conversion module , an editing interface module , and a version control module . Additional components include a build system  and data , which is meant to be representative of WADL files and other specification data relied upon in operation of the other components. This data may, of course, be accessed from other resources (e.g., databases, file stores).","Build system  can include a code generator module(s), test code generator module(s), documentation generator module(s), test code execution module(s), and other components that can be used to implement an automated build process based on specification data (e.g., WSDL, WADL, and\/or other specification data) as wet as output code, test case results, and executable files for use by developers. Additional details of exemplary build systems can be found in U.S. Pat. No. 8,949,792, titled \u201cMethods and Systems for Data Service Development,\u201d by Ian Paterson, Richard McMahon, and James Boag, filed the same day as the current application, and which is incorporated by reference herein in its entirety.","Memory  may include additional components and applications such as an operating system and the like. In this example, the build and specification management system is depicted as locally hosted with respect to I\/O devices  and display . However, in some embodiments, the build system is hosted on one or more servers interfaced to workstations that handle input\/output tasks.","User interface module  can be configured to provide documentation for data service, and may include a web server configured to provide a plurality of web pages documenting an SDK for the web service generated using WADL, WSDL, and\/or other specification data. For example, the web pages can comprise at least one definition page corresponding to an API and at least one documentation page for the data service. User interface module  can also generate appropriate pages for user logins, viewing reports of the build and editing process, and otherwise administering the automated build system and specification management system.","Selection module  can be configured to identify a portion in the specification data for editing. As an example, selection module  may be configured to locate an appropriate WADL file or constituent file containing concept documentation for generating documentation pages and locate one or more portions therein containing data to be edited. For instance, the selection module may be responsive to selection of an edit command in the definition page for an API to identify the portion in a structured markup file corresponding to the API. On the other hand, if an edit command is received specifying a documentation page, the selection module may identify the portion in a constituent file comprising text and markup for use by the automated build system in generating the documentation page.","In some embodiments, selection is based at least in part on user roles. For instance, user interface module  may provide a login or authentication mechanism to identify a user who desires to edit the specification data. Permission data can be accessed by the components of the specification management system to control the editing process. For example, selection module  may access permissions for the user to determine which, if any, files in the specification data can be edited by the user. The permission data may be used to identify particular portions of files and\/or editing capabilities.","As an example, a technical writer may be permitted to edit descriptive text embedded in WADL files, but not to edit portions of the WADL files defining requests, parameters, error codes, or flags. Accordingly, selection module  may only select portions of the WADL file having <doc> tags for conversion. A developer may have permission to edit any portion of the WADL file, and so when the developer requests to edit the file, the entire WADL file may be selected for conversion.","Conversion module  can be configured to convert the selected portion(s) from a first format into a second format. As an example, XML of a WADL file may be converted to HTML for editing. As another example, text and markup in a constituent file may be converted to formatted HTML for editing.","Editing interface module  can be configured to provide an interface to allow editing of the selected portion(s) while in the second format. As an example, editing interface module  may utilize the HTML provided by conversion module  to generate an HTML page readable by a browser. The page may include an embedded text editor; as an example, a WYSIWYG text editor can be included using JavaScript. Additionally or alternatively, appropriate selection mechanisms (e.g., dropdown menus, checkboxes, form fields, etc.) can be included in the page to simplify the editing process.","In some embodiments, editing interface module  configures the functionality of the interface based on user roles. For instance, the formatting capabilities of the text editor may be restricted to prevent a technical writer (or other user) from introducing formatting (e.g., headers, text colors, etc.) inconsistent with a defined style for the SDK being edited. These restrictions may be defined in terms of a style sheet or other configuration file accessible by editing interface module .","As another example, selection mechanisms may be locked for certain fields. For instance, dropdown menus and form fields used to define parameter values and parameter types may be displayed, but locked from editing, for a technical writer. On the other hand, form fields for inserting descriptive text may be freely editable for the technical writer. A developer accessing the same page may be able to edit the parameter types and values along with the descriptive text. Module  may also be responsive to commands received from the interface indicating that editing is complete. For example, the HTML page may include a \u201csave\u201d button that results in a POST request that is received by module .","Editing interface module may  may also include appropriate server-side components for responding during the editing process. For example, in some embodiments, the editing interface includes code for suggesting a parameter value for inclusion in the specification data. For instance, AJAX techniques may be used to identify user input in a field and provide a request to editing interface module  or responder  for a suggested value based on the field and input provided. The suggested value can be determined by consulting other fields having the same or a similar name or other parameters and providing the value(s) associated with the other field or fields.","As a particular example, a user may begin defining a parameter value already defined in one or more other existing APIs. For instance, the user may be defining a parameter value for a \u201crequest\u201d field describing the syntax for invoking a \u201cversion\u201d API that provides the current version of a web service, and one or more web services supported by the specification management system may already have the same API. AJAX code in the editing interface can provide the API name (\u201cversion\u201d in this example) and parameter being defined (\u201crequest=\u201d) and in response, module  or  can check existing APIs for previous input. For instance, module \/ may identify a parameter value such as (\u201crequest=\/{service name}\/version\/current\u201d) and provide it to the editing interface for suggestion to the user.","AJAX may also be used to provide spell-checking capability for editing components of the user interface. For example, if a Javascript WYSIWYG editor is used to allow editing of documentation, the editor can be configured to make a call to the server during the spell-check operation. The editor can make a call to the server-side components for a dictionary of terms or other working data for use in a spell-check operation and verify spelling (and\/or grammar or syntax) locally or can simply submit words to the server for spelling\/grammar\/syntax to be verified at the server. The server can be configured to track which words are corrected by user input, added to the dictionary, and so on for use in future spell check operations. The dictionary may be specific to the data service or may be maintained based on data from multiple different data services supported by the server.","Version control module  is configured to identify a desired change to the specification data based on one or more edits received via the editing interface, adjust the specification data, and trigger an automated build process based on the specification data as adjusted. For example, version control module  may be provided via a version tracking system, automated build system, and code for identifying and merging changes into the specification data.","As an example, a user may indicate that editing via the editing interface is complete. The editing interface module  may return the portion of the specification data as edited in the second format (e.g., HTML as edited) and returned by the interface for conversion by module . Module  may use an appropriate transformation technique to convert the edited HTML back into the source format (e.g., XML or text). Using data identifying the original source for the portion of the specification data, version control module  can create a new version of one or more files of the specification data that represents the updates. As an example, if the <doc> portion of a WADL file is updated, the changes can be merged into the <doc> portion of the WADL file. Version control module  may also provide suitable output for indicating changes between versions. For example, newly-added or deleted items may be indicated using colors, formatting (e.g., underlines, strikethroughs).","Version control module  can trigger a build of some or all portions of the data service. For example, if changes are made only to constituent files used to generate documentation, then version control module  may trigger a build to assemble the documentation. As another example, if a subset of APIs are changed, then only the portions of the SDK related to the changed APIs may be re-built.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 3","b":["300","302","304"]},"Assuming the user has some editing permissions, the user may be presented with an \u201cedit\u201d button that triggers a controlled editing process. This is represented at block , where the system presents an editing interface to the user. For example, as was noted above, an HTML page may be generated based on a portion of the specification data, with the HTML page including form-based input mechanisms and\/or a WYSIWYG editor. The user can then provide suitable input to adjust the specification data.","At block , the changes made by the user are merged into the API specification or other specification data. Then, at block , an updated build is triggered. For example, the updated specification data may be used as the basis of a new version that is built using the automated build system and then published to an appropriate portion of the repository. Then, the user may view the SDK as updated or, if the build fails, appropriate error messages can be provided.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 4","b":["400","402","404"]},"For example, in some embodiments an SDK definition page features an \u201cedit documentation\u201d button which, when triggered, causes the XML parser to search for <doc> tags in the WADL file and convert the documentation information into HTML for editing. As another example, metadata for the specification management system may indicate that the user is a technical writer, triggering conversion of <doc> elements for editing but preventing conversion of other portions of the WADL file. As another option, some, but not all of the WADL file may be converted according to some other criterion.","In some embodiments, portions of the WADL or other definition file are parsed to identify portions of the document object model (DOM) using Xpath expressions. For instance, portions of interest can be identified using a document structure specified in an XML schema. For example, portions of the WADL or other file representing API paths (e.g., \/comments\/{commentid}.xml), preferred HTTP methods (e.g., GET\/POST\/PUT), parameters, and descriptive preamble can be identified by parsing the WADL file based on the XML schema.","In some embodiments, a WADL or other definition file can include markup intended for use by components that generate an editing interface. For example, automatic code generation may depend on one or more flags that can be edited in the user interface. Particularly, the HTML preamble can include XML elements corresponding to the flags as noted below:",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<wadl:doc title=\u2018Copy Resource\u2019>"]},{"entry":[{},"\u2002<html:p>"]},{"entry":[{},"\u2003Copies a resource from one location within DataService to another."]},{"entry":[{},"\u2003Specify the source and destination as absolute paths on the same"]},{"entry":[{},"\u2003DataService service. The source is copied without change to the"]},{"entry":[{},"\u2003destination."]},{"entry":[{},"\u2002<\/html:p>"]},{"entry":[{},"\u2002<html:ul id=\u2018flags\u2019>"]},{"entry":[{},"\u2003<html:li id=\u2018ticket_needed\u2019>"]},{"entry":[{},"\u2003\u2002<html:strong>Ticket Needed<\/html:strong>"]},{"entry":[{},"\u2003\u2002:yes"]},{"entry":[{},"\u2003<\/html:li>"]},{"entry":[{},"\u2003<html:li id=\u2018ssl_needed\u2019>"]},{"entry":[{},"\u2003\u2002<html:strong>SSL Required<\/html:strong>"]},{"entry":[{},"\u2003\u2002:no"]},{"entry":[{},"\u2003<\/html:li>"]},{"entry":[{},"\u2003<html:li id=\u2018supports_metadata\u2019>"]},{"entry":[{},"\u2003\u2002<html:strong>Uploading Metadata<\/html:strong>"]},{"entry":[{},"\u2003\u2002:no"]},{"entry":[{},"\u2003<\/html:li>"]},{"entry":[{},"\u2002<\/html:ul>"]},{"entry":[{},"<\/wadl:doc>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the example above, the flags are intended for consumption by both code generation components that recognize the unordered list id=\u2018flags\u2019 and the user interface components, which when presenting an interface for setting the flags can generate a series of drop-down selection boxes. The elements with \u201chtml:\u201d preambles can be readily converted to standard HTML by removing the \u201chtml:\u201d preambles.","Block  represents the conversion process. For instance, any suitable conversion technique may be used to convert the structured XML of the portion(s) of the WADL file into HTML for editing. As an example, suitable XSL or XSLT code may be used to obtain HTML-formatted data by removing XML tags and including suitable HTML tags, if not present within the XML already. For example, the tag <html:p> in the example above can be converted to simply <p> when this portion of the WADL file is to be edited; when editing is complete, the <p> tag can be returned to <html:p> for updating the WADL file. Of course, more complex conversions may be needed and can be provided for in the XSL, XSLT, or other transformation components.","Block  represents receiving changes made in the interface. This may, for example, as a result of edits made by a user at the user's computing platform that are then communicated to the specification management system. For example, if a JavaScript WYSIWYG editor is provided, then a \u201csave\u201d command in the JavaScript editor may provide a POST request to the specification management system which is interpreted as an indication that editing is complete. As another example, a user may make selections from drop-down menus, check, uncheck, or toggle switches, or fill in form fields and then press an onscreen \u201ccommit\u201d or other button to indicate that editing is complete.","Block  represents converting the HTML as edited into XML and merging the changes into the WADL file. For example, counterpart XSL or XSLT files may be used to obtain a suitable XML data structure by removing HTML tags and\/or placing the HTML tags within suitable XML tags for the WADL file. The original specification data can be parsed to determine where the changes should be made, e.g., to locate corresponding portions of the WADL file, and update the portions to reflect the user's intended change or changes.","In the example above, the specification data comprised one or more WADL files. However, the same workflow can be used in editing constituent documents used to generate documentation for the data service as part of the build process. For the sake of clarity, such a process is discussed below.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 5","FIG. 4"],"b":["500","502"]},"In any event, at block  WADL-derived information is identified and inserted into a working file along with the text from the concept documentation. For example, the concept documentation may include tags or placeholders indicating where information from one or more WADL files is to be included. As a particular example, a block of text may describe the overall functionality of the web service and reference a list of available APIs. A tag or indicator can be included beneath the introductory paragraph to indicate that a list of available APIs is to be generated from the titles of the WADL files specified for the web service. Accordingly, as additional APIs are defined via corresponding WADL files, the list will be updated with successive builds.","Block  represents identifying layout commands included in the concept documentation. For example, the concept documentation may indicate that the text of the concept documentation (and dynamic content, if any) is to be included in a particular tab defined in a layout file. Layout information may be defined in one or more XML files or style sheets, for instance.","Based on the layout information and working file of concept documentation text and WADL-derived information, one or more documents can be generated at block . For example, the layout definition files can be parsed and used to generate HTML code (e.g., using suitable XSL files) to provide a navigation framework and the content of the page can be inserted.","At block , the generated HTML page can be published along with other portions of the SDK. As noted earlier, method  may occur as part of a build process triggered by changes to the API specification. However, the documentation may be re-built even in the absence of API changes\u2014for example, changes to the concept documentation or related specification data (e.g., updates to the XSL files to reflect a new navigation framework) may trigger a new build of the documentation.","A user can be allowed to edit the base text and\/or markup in the constituent files so that the build process generates updated documentation. For example, a technical writer may be allowed to edit the text in an HTML format, with changes to the HTML made via an editing interface. Then, the changes can be converted to text with appropriate markup for use to apply formatting and add other elements during the build process. As another example, a user may be allowed to edit the tags and markup used to dynamically insert text (e.g., from WADL files) and\/or apply formatting and layout if the user has sufficient permission.","The discussion above included examples of workflows for editing SDK definition and documentation files. However, the present subject matter can be utilized to define SDKs as well. For example, user interface component  may include a command for a user to create a new SDK rather than entering an existing SDK. As another example, new API definition pages can be generated within a new or existing SDK.","When a new SDK or element thereof is created, corresponding specification data can be set up using templates. For example, when creating a new SDK, a base set of constituent files for documenting the SDK can be created and a directory structure for defining WADL files can be created. A user can then create one or more new APIs for the SDK, with each newly-created API resulting in generation of a basic WADL file to be filled in by the user and\/or others.","Aspects of the present subject matter will now be discussed in the context of exemplary user interfaces shown in .",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 6","b":["600","600","600","600","602","604","606","608","610"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 7","b":["700","700","700","702","704","706","706","708","704"]},"As shown at , an interface listing a plurality of APIS (\u201cAddRating\u201d, \u201cCreateAcct\u201d, and \u201cGetRating\u201d) is provided. The API name, title, and available actions are indicated. For example, a user may select \u201cedit\u201d to trigger the generation of an editing interface or \u201cdestroy\u201d to remove the API entirely. The API name\/title may be clickable to view the API documentation as currently published.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 8","b":["800","800","800","700","802","804"]},"Substantive content for the \u201cCreatAcct\u201d API is presented in main content area . A descriptive preamble  featuring title  and additional descriptive text provides a basic description of the \u201cCreateAcct\u2019 API, including its formal title \u201cCreate Account.\u201d Another portion of content area  includes attribute list , which may correspond to API features or required attributes. In this example, the attributes are whether a ticket is needed or whether use of the API requires a secure socket layer (SSL). Content area  also includes an indicator  providing the syntax for invoking the API (a POST command passing \u201ccreate_account.path\u201d) and a listing of parameters at . In this example, a single parameter \u201cemail\u201d is listed by name, type, and with a brief description. In practice, parameter listing  can include any required or optional parameters, each of which may have additional information displayed.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 9","FIG. 8"],"b":["900","700","900","900","902","904"]},"Text field  allows the user to specify the title for the API; changes to the content of field  can result in changes to the underling WADL so that a new title is displayed at  and at  in interfaces  and , respectively. Interface element  includes a pull-down menu and text field for specifying the syntax for invoking the API. For example, the pull-down menu may be used to define a POST, PUT, GET, or other command, while the text field can be used to define the syntax for invoking the command. Changes at element  can result in changes to the documentation as shown at  and can also propagate out to code generation elements of the build system. Accordingly, interface element  may not be displayed to all users. For example, a technical writer may be able to view element  but may not be able to change the values thereof while a developer may be able to change all elements.","Interface  has been generated to include a text editor  in which text  is provided in a WYSIWYG manner\u2014that is, the text as displayed at  appears in the same way it appears at  in the documentation. For example, HTML code for interface  can be generated so as to include Javascript or other code for providing the text editor. Another example of code for providing the text editor is a rich internet application, such as an Adobe\u00ae Flash\u00ae plug-in. Editor  can be configured to include spell-check functionality or to provide a call to the specification management system for spell checking as noted above. In some embodiments, the spell-checking can be based on a listing of parameter names and values for other portions of the API and\/or other SDKs. For example, \u201chome_account_id\u201d may have been inserted in response to a user typing \u201chome_acc\u201d and selecting a completion suggestion if \u201chome_account_id\u201d is a previously-used term in another API or SDK.","Interface  includes a parameter editing portion  including a plurality of text fields , attribute editing commands , and text field . In this example, the text fields include attribute names (\u201cname\u201d, \u201crequired\u201d, and \u201ctype\u201d) and fields for corresponding values (\u201cemail\u201d, \u201ctrue\u201d, and \u201cSvc_email\u201d). Text field  depicts the descriptive text associated with the parameter. In this example, a single parameter \u201cemail\u201d is shown, although multiple instances of editing portion  can be included for each parameter, along with a title for each parameter. Other attribute editing commands include an \u201cadd\u201d command for adding another attribute and attribute value. In some embodiments text fields  are provided with appropriate code (e.g., Javascript) for invoking AJAX functionality provided by the specification management system. For instance, if a user begins typing a parameter name or value, a listing of existing parameter names (or existing parameter values for a given name) can be consulted to provide a suggestion to the user.","Flag interface  includes drop down menus for setting flags used by the build system and\/or documentation components. For instance, as was noted above, the \u201cCreateAcct\u201d API included an indication that a ticket is not needed, while SSL is required. These attributes may correspond to flags used by the build system in generating code. For example, the SSL flag may toggle configuration of client libraries generated by the build system to utilize HTTPS and HTTP requests.","As was mentioned above, a user can edit the descriptive and\/or functional aspects of the API definition and then commit the changes. The HTML-as-edited can then be converted into XML for use in updating the WADL file corresponding to the API and an updated build can be triggered.","A similar workflow and interface can be presented for editing SDK documentation not tied to particular APIs. For example, as was noted above, documentation may be generated by constituent files that are combined with data extracted from the WADL files, such as constituent files providing descriptive text for a listing of all APIs where the contents of the listing are determined from the titles of all the WADL files for the SDK. The constituent files can be selected from an interface similar to that of  and then converted to HTML for editing in an interface similar to .","General Considerations","Some portions of the detailed description were presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory, such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art.","An algorithm is here and generally is considered to be a self-consistent sequence of operations or similar processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels.","Unless specifically stated otherwise, as apparent from the foregoing discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a computing platform, such as one or more computers and\/or a similar electronic computing device or devices, that manipulate or transform data represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the computing platform.","A computing device can include any suitable arrangement of components that provide a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor-based computer systems accessing stored software that programs or configures the computing system from a general-purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming, scripting, or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.","Embodiments of the methods disclosed herein may be performed in the operation of such computing devices. The order of the blocks presented in the examples above can be varied\u2014for example, blocks can be re-ordered, combined, and\/or broken into sub-blocks. Certain blocks or processes can be performed in parallel.","As noted above, a computing device may access one or more computer-readable media that tangibly embody computer-readable instructions which, when executed by at least one computer, cause the at least one computer to implement one or more embodiments of the present subject matter. When software is utilized, the software may comprise one or more components, processes, and\/or applications. Additionally or alternatively to software, the computing device(s) may comprise circuitry that renders the device(s) operative to implement one or more of the methods of the present subject matter.","Examples of computing devices include, but are not limited to, servers, personal computers, personal digital assistants (PDAs), cellular telephones, televisions, television set-top boxes, and portable music players. Computing devices may be integrated into other devices, e.g. \u201csmart\u201d appliances, automobiles, kiosks, and the like.","The inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components. For instance, processes discussed herein may be implemented using a single computing device or multiple computing devices working in combination. Databases and applications may be implemented on a single system or distributed across multiple systems. Distributed components may operate sequentially or in parallel.","When data is obtained or accessed as between a first and second computer system or components thereof, the actual data may travel between the systems directly or indirectly. For example, if a first computer accesses data from a second computer, the access may involve one or more intermediary computers, proxies, and the like. The actual data may move between the first and second computers, or the first computer may provide a pointer or metafile that the second computer uses to access the actual data from a computer other than the first computer, for instance. Data may be \u201cpulled\u201d via a request, or \u201cpushed\u201d without a request in various embodiments.","The technology referenced herein also makes reference to communicating data between components or systems. It should be appreciated that such communications may occur over any suitable number or type of networks or links, including, but not limited to, a dial-in network, a local area network (LAN), wide area network (WAN), public switched telephone network (PSTN), the Internet, an intranet or any combination of hard-wired and\/or wireless communication links.","Any suitable tangible computer-readable medium or media may be used to implement or practice the presently-disclosed subject matter, including, but not limited to, diskettes, drives, magnetic-based storage media, optical storage media, including disks (including CD-ROMS, DVD-ROMS, and variants thereof), flash, RAM, ROM, and other memory devices.","The use of \u201cadapted to\u201d or \u201cconfigured to\u201d herein is meant as open and inclusive language that does not foreclose devices adapted to or configured to perform additional tasks or steps. Additionally, the use of \u201cbased on\u201d is meant to be open and inclusive, in that a process, step, calculation, or other action \u201cbased on\u201d one or more recited conditions or values may, in practice, be based on additional conditions or values beyond those recited. Headings, lists, and numbering included herein are for ease of explanation only and are not meant to be limiting.","While the present subject matter has been described in detail with respect to specific embodiments thereof, it will be appreciated that those skilled in the art, upon attaining an understanding of the foregoing may readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, it should be understood that the present disclosure has been presented for purposes of example rather than limitation, and does not preclude inclusion of such modifications, variations and\/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A full and enabling disclosure is set forth more particularly in the remainder of the specification. The specification makes reference to the following appended figures.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 9","FIG. 8"]}]},"DETDESC":[{},{}]}
