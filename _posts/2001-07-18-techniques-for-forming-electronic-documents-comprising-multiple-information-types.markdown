---
title: Techniques for forming electronic documents comprising multiple information types
abstract: Techniques for forming electronic documents include storing a plurality of information types for describing how information is used. Also, a plurality of document types is stored. Each document type includes a unique set of information types. A plurality of units of information is also stored. Each unit of information is associated with an information type. A document is produced based on a particular document type having a particular set of information types, and based on a first set of units of information. Each unit of information of the first set is associated with a corresponding information type in the particular set of information types. This invention allows content to be associated with a particular use, through the information type, so that the content can be incorporated in all documents where such usage is desired. This invention also allows the enterprise to control the method of generating and presenting a particular content or information object based on its use and its temporal data, e.g., how often it is refreshed. Such control is employed in predictive caching technologies. Further, the system can allow and reference which documents or info types point to other documents or info types, thereby enabling the system to replace all affected objects and pointers when changes occur, and facilitating caching all objects that are affected by a change.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07062705&OS=07062705&RS=07062705
owner: Cisco Technology, Inc.
number: 07062705
owner_city: San Jose
owner_country: US
publication_date: 20010718
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This application is related to and claims domestic priority from prior U.S. Provisional application Ser. No. 60\/252,378, filed Nov. 20, 2000, the entire disclosure of which is hereby incorporated by reference as if fully set forth herein. This application is related to prior non-provisional application Ser. No. 09\/823,662, filed on Mar. 30, 2001, entitled \u201cQuery Translation System for Retrieving Business Vocabulary Terms\u201d by inventors M. Kirkwood et al., the entire disclosure of which is hereby incorporated by reference as if fully set forth herein. This application is related to prior non-provisional application Ser. No. 09\/823,819, filed on Mar. 30, 2001, entitled \u201cBusiness Vocabulary Data Storage Using Multiple Inter-Related Hierarchies\u201d by inventors M. Kirkwood et al., the entire disclosure of which is hereby incorporated by reference as if fully set forth herein. This application is related to prior non-provisional application Ser. No. 09\/925,204, filed on Aug. 8, 2001, entitled \u201cMultiple Layer Information Object Repository\u201d by inventors M. Kirkwood et al., the entire disclosure of which is hereby incorporated by reference as if fully set forth herein. This application is related to prior non-provisional application Ser. No. 09\/908,947, filed on Jul. 18, 2001, entitled \u201cBusiness Vocabulary Data Retrieval Using Alternative Forms\u201d by inventors M. Kirkwood et al., the entire disclosure of which is hereby incorporated by reference as if fully set forth herein.","The present invention generally relates to data processing in the field of electronic document creation. The invention relates more specifically to defining document types in terms of information types related to stored object information objects for producing consistent documents in any form of presentation.","Through economic growth, mergers and acquisitions, business enterprises are becoming ever larger. Further, large business enterprises in the field of high technology now offer ever larger numbers of products and services that derive from an increasingly large variety of technologies, work processes, or sub-components thereof.","In this environment, managing the creation, use, and maintenance of the company's intellectual assets, such as products and technologies is an acute problem. As an enterprise grows, providing documentation of the enterprise products, services and activities that maintain consistent usage of names of products and services throughout the enterprise becomes even more challenging and has many different permutations. When an enterprise derives its business opportunities from research and development into new technologies or improvements of existing technologies, maintaining consistent usage of technology designations is a challenge, especially when there is disagreement or confusion about the uses, advantages or benefits of a particular technology. Such confusion can arise whether disagreements arise or not, as when there is little or no communication between different teams within an enterprise, or when the overhead involved in communicating the complexity outstrips the organization's ability.","The World Wide Web is one communication medium that exacerbates the problem, by allowing access to internal information to the enterprise's partners and customers. Large enterprises that own or operate complex Web sites, portals, or other network resources that contain product and technology information face a related problem. Specifically, ensuring consistent usage of product names, technology terms, and information objects across a large, complicated Web site is problematic. A particular problem involves maintaining consistent use of content when different parts or elements of the Web site applications or other types of documents are created by different individuals or groups, or for varying types of customers or tasks that each user is trying to accomplish.","In addition, an enterprise may want to project a planned impression to its employees, partners, customers and marketplace. Whether formal or causal, traditional or high tech, this impression is projected by the choice of words, fonts, images, audio and video. The same information presented by two different arms of the enterprise may end up projecting two different impressions. A document may be presented in different media, making more difficult the projection of a designed impression. For example, printed documents may have limitations on delivery, such as not containing audio and video clips as can a web page; documents presented on wireless devices typically do not display color and have too few pixels to display most images that can be presented on a printed page. Each of these media continues to be in flux, and systems may have to support presentation of such media using different physical devices or delivery client software.","Furthermore, the content presented to a user depends upon who the user is, or at least what role the user plays. A technical person has a different interest than a marketing person. A corporate partner expects to see more privileged content than a member of the public.","Based on the foregoing, there is a clear need for improved ways to manage one or more vocabularies of all company business practices and pertaining to all business terminology (\u201cconcept\u201d), including but not limited to product names and technology terms.","In particular, there is a need for a way to structure stored information about those concepts so that it can be located and retrieved based on its use in various documents, by different users, regardless of who authored the information, who is generating a document that incorporates the information, and where the information resides.","Furthermore, there is a need for presenting the information retrieved in a consistent manner so the enterprise can project a designed impression to its employees, partners, customers and marketplace.","Furthermore there is a need for tailoring the presentations based on the device presenting the document.","There is also need for a system that is extensible or adaptable when new business practices, products or technologies are developed by diverse, distributed groups in a large business enterprise, and that can be shared with other enterprises, individuals, and industry standards across the business world.","The foregoing needs, and other needs and objects that will become apparent from the following description, are achieved in the present invention, which comprises, in one aspect, a method of forming electronic documents. A plurality of information types for describing how information is used is stored. Also, a plurality of document types is stored. Each document type includes a unique set of information types. A plurality of units of information is also stored. Each unit of information is associated with an information type. A document is produced based on a particular document type having a particular set of information types, and based on a first set of units of information. Each unit of information of the first set is associated with a corresponding information type in the particular set of information types. For example, documents may be produced based on a particular document type having a particular set of information types, and a series of relationships with other concepts, such as profile, geography, output, template, and any number of other concepts or attributes.","In other aspects, the invention encompasses computer readable media, and systems configured to carry out the foregoing steps.","This invention allows content to be associated with a particular use, through the information type, so that the content can be incorporated in all documents where such usage is desired. This invention also allows the enterprise to control the method of generating and presenting a particular content or information object based on its use. Such control is employed in predictive caching technologies.","A method and apparatus for producing documents from stored information related to business vocabulary data are described. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","1.0 Business Vocablary Data Processing","Business vocabulary terms are used to name products, product lines, technologies, people, processes, development efforts and other business activities of an enterprise. Some of the vocabulary terms are used only internally and some are used for interaction with the public to establish brand name recognition or to support precise communication of customer interests and orders. Terms related in meaning or form are used to associate related business products and activities in the minds of the users of those terms. For example, a device sold by an enterprise might be named Perseus, after a hero of Greek mythology, and a software program for executing on that device might be named Pegasus, after the winged horse Perseus rode. Similarly, different models of the Perseus device might be called AlphaPerseus and BetaPerseus, to show they are part of the same product line, while different versions of each model may be numbered, such as BetaPerseus 2.0 and BetaPerseus 2.4.","The present invention is based in part on a recognition that the business terms of an enterprise constitute an important type of business data that should be included in the automated data processing that the enterprise performs. This vocabulary data about the products, services and activities of a business is a form of metadata for the products, services and activities of the enterprise. Those terms can be used to categorize the products, services and activities and to retrieve stored information about those products, services and activities. The data structures employed to store, retrieve and process this metadata should account for the associations in meaning and form and support rapid associative or inferential search and retrieval.","2.0 Vocabulary Development Framework","According to the present invention, the various terms that constitute the business vocabulary of an enterprise are modeled as nodes in a hierarchy called the MetaData Framework (MDF) or the Vocabulary Development Framework (VDF). In this framework, any business term that is derived from another particular business term is positioned in the hierarchy at a node that branches from the node of that particular business term from which it is derived. When the hierarchy is embodied in stored data with appropriate data structures and software programs, it is extremely useful in naming products and associating products with product lines.","For example,  shows a hypothetical product type hierarchy for a hypothetical enterprise that manufactures and sells network devices. In this hierarchy, node  is a root node representing network device products sold by the enterprise. Node  has three child nodes, , ,  that are connected by arrows . The parent\/child relationship is denoted by an arrow pointing from parent to child in . A relationship statement can be obtained reading from arrow head to arrow tail by the words \u201cis a child of\u201d or read in the opposite direction by the words \u201cis a parent of\u201d Thus node  is a child of node . Node  is a parent of node . In the product type hierarchy of , arrow  represents the product type parent\/child relationship.","Node  represents the devices named \u201cPerseus.\u201d In this embodiment, the name of node  includes \u201cPerseus.\u201d Nodes ,  represent devices named \u201cHercules\u201d and \u201cJason,\u201d respectively.  shows that the Perseus device comes in three models, \u201cAlphaPerseus,\u201d \u201cBetaPerseus\u201d and \u201cGamaPerseus,\u201d represented by the three nodes , , , respectively. The BetaPerseus model has evolved over time through versions 1.0, 2.0 and 3.0, represented by nodes , , , respectively. The names of these nodes are \u201cBetaPerseus 1.0,\u201d BetaPerseus 2.0,\u201d and \u201cBetaPerseus 3.0,\u201d respectively. BetaPerseus 2.0 also experienced some evolutions called \u201cBetaPerseus 2.4\u201d and \u201cSuperPerseus,\u201d which are represented by nodes , , respectively.","This hierarchy consists of binary relationships; that is, each relationship requires one parent and one child. The product type relationships of  are constrained by a rule that each child may have only one parent. There is no rule restricting the number of children a parent may have in this hierarchy.","Various applications use the information in the VDF implementation to perform different functions for the enterprise. In one application, the VDF relationships in the illustrated hierarchy are used to determine that the product named \u201cSuperPerseus\u201d is actually a version of the BetaPerseus model that is based on version 2.4. In another application, the VDF names are used to help provide names for products as new products are developed by automatically including the product type and model name and by preventing the re-use of an existing version number. Embodiments of this application enforce a rule that each name shall be unique. The enterprise uses the VDF with other embodiments of such an application to enforce other naming rules, such as requiring the model name shall be part of the device name. In this case the ambiguous name \u201cSuperPerseus\u201d is not allowed, and is discarded in favor of the automatic name, \u201cBetaPerseus 2.5\u201d, or some allowed variation of that, which is stored as the name of node . In another application, the VDF names are used to help describe stored information about the enterprise for producing electronic documents.","The vocabulary data framework (VDF) captures simultaneous multiple relationships among names, products, solutions, services, documentation and activities for an enterprise. In particular, the VDF allows other relationships to be established between nodes simultaneously with the product type relationship. Furthermore, the VDF allows any of these new relationships to involve more than the two nodes of the binary parent-child relationship already described. For example, it allows a trinary relationship among a father node, a mother node, and a child node. In general, the VDF allows N-ary relationships among nodes, where N is any integer equal to or greater than one and specifies the number of participants in the relationship.","In the more general realm of the VDF, the enterprise is considered a data domain that includes many atomic concepts that may be related. Atomic concepts include any data item involved in the enterprise that is not subdivided into separately referenced storage units. These atomic concepts include the business vocabulary for the enterprise data that is the subject of the present invention. Concepts include product type names, as in the above example, but also comprise names of projects and departments and references to paragraphs, chapters, documents, images, multimedia files, database records, database queries, network resources, citations, and network addresses, among other things. The concepts and relationships are captured in conceptual graphs which are organized primarily by a partial-order relationship, commonly known as a type hierarchy. The concepts are nodes in the graph and the relationships are connections between two or more nodes. Both concepts and relationships have enumerated characteristics in some embodiments.","The graph of  is an example of a conceptual graph ordered by its product type hierarchy of binary (parent-child) relationships. Whereas this is one example based on a product type hierarchy, the VDF allows for simultaneous and inter-related multiple type hierarchies, as is explained in more detail in the following sections.","2.1 Multiple Hierarchies","As seen above in , concepts are related in a graph depicting product types. All the concepts in this graph are associated with one category of information in the enterprise data. That category is device product types, and that hierarchy relates concepts for products that are related in development history, structure or function. However, enterprise data may include other categories or relationships. In general, multiple categories encompass the enterprise data. For example, some of the enterprise data for an enterprise that manufactures and sells network devices are related to equipment solutions for common networking problems encountered by customers of the enterprise. Products of the enterprise that are unrelated by the hierarchy of  nevertheless may be useful to solve the same kind of customer problem. Thus, such products relate to the same solution. To reflect these relationships, enterprise data also are placed in a category called networking solutions in one embodiment, and are organized in a solutions hierarchy that exists concurrently with the product type hierarchy.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2A","FIG. 2A","FIG. 2A","FIG. 1"],"b":["212","214","216","202","205","105"]},"As shown in the example of , the product GammaPerseus, at node , is part of the equipment solution for single server local networks of node . Both AlphaPerseus, at node  and Jason at node  are part of the equipment solution for wide area networks connecting two sites, at node . BetaPerseus 2.0, at node , and Hercules, at node , are part of the equipment solution for private wide area networks connecting three to eight sites represented by node . Nodes  and  represent software products Pegasus 3.3 and a graphical user interface (GUI) upgrade that are installed on the BetaPerseus 2.0 device in addition to the default software that comes with that device.","The concepts at nodes , , ,  may be placed in a category called networking solutions. The concepts , , , ,  have already been placed in a category called enterprise device products; but they may also be placed in the category networking solutions. The concepts at nodes ,  may be placed in a category called software products and also in the networking solutions category.  demonstrates that hierarchies of concepts in categories of enterprise data may be defined in addition to the hierarchy of concepts in the product type category, and demonstrates that categories may overlap.","Alternatively, non-overlapping categories are used in other embodiments. In such an embodiment, the relationship represented by arrow  is expressed as a relationship of a sub-component to a component of a networking solution, in which the sub-component may be a different category than the component. Rules can be expressed for the relationship. One possible rule is: software can be a sub-component of hardware, but not the other way around. Similarly, a product can be a sub-component of a networking solution category but not the other way around.","2.2 Non-Binary Relationships",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 2B"},"The characteristics of the relationship type describe the number of participants and their category or categories. In this example the relationship type includes characteristics that indicate there are three participants, one from the user category, one from the technology category and one from the product device category. In addition, the characteristics of this relationship include at least one relationship value for storing the quality of expertise (unknown, poor, average, good, excellent). More details on defining and storing concepts and relationships are given in a later section.","The conceptual graph of this relationship in  shows three nodes , ,  representing the three concepts, e.g., product BetaPerseus 2.0, technology private wide area network, and technician Jane, respectively. The three nodes are connected by a three-way, non-directional link . The link  includes an attribute named \u201cquality\u201d that takes on a value such as \u201cgood,\u201d indicating that Jane's expertise is good for using BetaPerseus 2.0 in private, wide area networks.","2.3 Documentation Category","Another category of concepts that is extremely useful to an enterprise, for both internal and external users, is documentation concepts, which encapsulate elements of electronic or tangible documents. Concepts within a documentation category include headings, sections, paragraphs, drawings, images, information type, and document type, among others. Information type concepts express the type of content in terms of how it is used, e.g., by what it says; for example, information type concepts include but are not limited to \u201cIntroduction,\u201d \u201cFeatures & Benefits,\u201d \u201cProduct Photo,\u201d \u201cExternal Article Section\u201d etc. Documentation concepts may be organized in a document type hierarchy that facilitates automatically generating accurate, complete, up-to-date visual or printed documentation pertaining to a particular product or service. Document type hierarchies include, for example, \u201cData Sheet,\u201d \u201cProduct Home Page,\u201d \u201cPress Release,\u201d \u201cOperator's Manual,\u201d and \u201cExternal Article.\u201d For example, a device, like the hypothetical Beta Perseus 2.0, can be linked by a relationship to a document type hierarchy describing the device, such as a \u201cPerseus 2.0 Operator's Manual.\u201d As another example, a device, like the Beta Perseus 2.0, can be linked by a relationship to a section concept in a document type hierarchy describing the networking solutions of which the device is a component, such as a \u201cSmall Business Networking Press Release.\u201d More examples of document categories of concepts are given in a later section.","2.4 Multiple Inter-Related Hierarchies","As seen in the above examples, a single concept, such as the device product BetaPerseus 2.0 may appear in several separate hierarchies. According to one embodiment, information defining the concept is stored only once in the VDF and relationships are defined to all other nodes to which the concept is adjacent in all the hierarchies.","Hierarchies may be implemented using a variety of programming techniques and data storage. One advantage of this approach is that changes to the concept can be made in only one location in the VDF and all hierarchies immediately become up-to-date and reflect the changes. Further, all information generated based upon the hierarchies, such as documentation or screen displays, automatically reflects the changes.","Another advantage is that applications that retrieve the data can navigate one of the hierarchies to a particular concept and then immediately find the other hierarchies in which that concept occupies a node. Thus, a customer who has purchased a particular device product for one networking solution can determine other solutions that use that same device. The customer follows the current solution to the product and then reviews the relationships with other networking solutions of interest to the customer that utilize the device. When a networking solution of interest is found using the device, the newly found solution can be navigated above and below the node representing the device concept in order to determine what software and other devices, if any, are components and sub-components of the new solution. Further, the customer can search by solution and identify multiple products that can satisfy the solution. The customer can then inspect each of the products, obtain its documentation, and determine which product is best suited to the customer's particular needs. In some embodiments, such information is synchronized with the customer's online profile so that it is available for later reference and can be personalized.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 3","FIG. 1","FIG. 2A","FIG. 2B","FIG. 1","FIG. 2A"],"b":["302","304","306","308","390","310","312","301","322","324","390","332","334","321","391","390","346","356","346","344","342","341","356","354","352","351"]},"The BetaPerseus 2.0 concept at node  is linked to the following nodes in multiple inter-related hierarchies. The BetaPerseus 2.0 concept at node  is a product type child of the BetaPerseus 1.0 concept at node , as represented by arrow . The BetaPerseus 2.0 concept at node  is a product type parent of the BetaPerseus 2.4 concept at node , as represented by arrow , and the BetaPerseus 3.0 concept at node , as represented by arrow . The BetaPerseus 2.0 concept at node  is further a solutions type sub-component of the private wide area net (3 to 8 sites) concept at node , as represented by arrow . The BetaPerseus 2.0 concept at node  has solutions type sub-components of the Pegasus 3.3 software tools concept at node , as represented by arrow , and the management software GUI upgrade concept at node , as represented by arrow . The BetaPerseus 2.0 concept at node  has two companion expertise type participants as represented by link ; one at Jane represented by node  and one at private wide area networks represented by node . In all, the example concept at node  has 6 binary relationships and one ternary relationship with eight nodes in four hierarchies (product type, equipment solutions, users and technologies). Each of the concepts and relationships may be represented using stored data in a database or appropriate programmatic data structures.","Many of the other nodes in  may have relationships with other hierarchies in addition to the relationships shown. These other relationships are omitted so that  and this discussion are more clear. Multiple relationships similar to the examples listed for node  may be defined for these other nodes.","2.5 Root Concepts","At the top of each hierarchy for each category is a category root node representing the category root concept from which all the other concepts in the category branch. For convenience in navigating from one category to the next, each of the category root nodes is made a child of an enterprise data root node representing a top-level pseudo-concept for the enterprise data. In one embodiment, the pseudo-concept is \u201cVocabulary,\u201d and every node related to the Vocabulary concept by a direct \u201cchild of\u201d relationship is a root node representing a root concept for one category.","2.6 Implementation of the VDF","One embodiment uses a rule-base and declarative computation approach to express the concepts, relationships and rules of the VDF. This approach may be implemented using a high level computer programming language. In one embodiment, the approach is implemented using a logical processing language such as PROLOG\u2122. The high level logical processing language translates statements declaring types and statements expressing rules about combining types into another language, such as the C programming language, that can be compiled and run on a large variety of general-purpose computer platforms.","In this embodiment, the concepts, relationships, attributes and logical implications (including integrity constraints and general computations) are expressed as logical assertions. There are two kinds of logical assertions, facts and rules. A fact is a logical assertion that is considered unconditionally true. A rule is a logical assertion whose truth or lack of truth depends on the truth or lack thereof of other assertions. In this implementation, concepts, relationships and attributes are generally represented as facts, whereas logical implications are represented using rules.","2.6.1 Defining Concepts","For example, in one embodiment, a statement declaring that the phrase BetaPerseus 2.0 is a concept is presented in a high level logical processing language by the expression:\n\n","The concept may have several attributes besides the phrase that defines it. For example the concept may have a creation date and an author. Attributes of a concept are presented with the following expression:\n\n","2.6.2 Defining Relationships","The relationships that constitute a hierarchy connect one concept to one or more other concepts. Relationships are defined with the following expression:\n\n","The ternary relationship of  is defined, after each of the individual concepts are defined, by the expression:\n\n","Similarly, a marketing document stored as a Web page on a network and identified by its universal resources Locator (URL) address \u2018http:\/\/\/www.Enterprise.com\/literature\/devices\/catalog\/Chap2\/\u2019 is related to the concept \u2018BetaPerseus 2.0\u2019 by the expression:\n\n","The relationships defined above can also be given attributes according to this embodiment. Typical relationship attributes include the author of the relationship and the date the relationship is created. These attributes are set for a relationship having an unique identification of rID1 with the expressions:\n\n","A relationship can also be defined for other relationships. For example, a relationship of type \u201crevision\u201d is used to track changes in another relationship.\n\n","2.6.3 Defining Rules","The hierarchies that relate concepts may have to follow certain rules. For example, as stated above, the product type hierarchy requires that a child have only one parent. These rules are enforced using logical constraints defined in a high level logical processing language as rules. A constraint that detects multiple parents in a set of expressions in the high level logical processing language of one embodiment is given by the expression:\n\n","Another example of a rule that is enforced in the high level logical language as a constraint is the rule that every concept must be a descendent of a root concept. As described above, a root concept is a concept that is a child of the pseudo concept \u201cVocabulary.\u201d A concept is a descendent of the concept Vocabulary if the concept Vocabulary is reachable from the concept by a succession of one or more \u201cchild of\u201d relationships. If the concept Vocabulary cannot be reached from a given concept, then the given concept is an orphan concept. Orphan concepts are a violation of the rules for the product type hierarchy and generally result from errors in concept definitions or are introduced when a parent concept is deleted from the hierarchy. This constraint depends on a definition of \u201creachable.\u201d Reachable is defined as follows:\n\n","As discussed above, the example expressions presented in this section are processed by the high level logical processing system to generate code, such as C language code, that implements the concepts, relationships and constraints defined in these expressions. The C language code can then be compiled and executed on any computer system with a C compiler. Further, the C language code can be incorporated in other application programs or compiled into libraries having functions that are called from separate application programs.","3.0 Vocabulary Database","A vocabulary database provides persistent storage for the concepts, relationships, and rules of the vocabulary data framework for the enterprise data.","One embodiment uses a relational database to store the concepts and the relationships among concepts and the rules; however, any suitable data store can be used. In one specific embodiment, a cached data store is used. A relational database uses a schema to describe a series of tables each made up of one or more rows, each made up of one or more fields. The schema names the table and the fields of each row of the table. An example relational database schema to implement the VDF according to one embodiment is described below. In some embodiments the relational database includes a unique row identification number (rowID) for each row in each table.","In this embodiment, a vocabulary table includes a row for each root concept in the VDF. The fields of each row include the concept name, the concept description and the creation date, as shown in Table 1. A unique rowID may also be included in each row but is not shown in the example tables. Example root concepts are included in several rows of Table 1.",{"@attributes":{"id":"p-0081","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The Vocabulary Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Root Category Name","Description","Creation Date"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Product","Product category","Apr. 12, 2000"]},{"entry":["User","User category","Apr. 12, 2000"]},{"entry":["Technology","Technology Category","May 15, 2000"]},{"entry":["Solution","Networking Solutions Category","Jan. 1, 2001"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Each root concept in the vocabulary table has its own table comprising one row for every concept within the category. All concepts that are descendants of the root concept via the \u201cchild of\u201d relationship are stored in the table defined by the root concept. Table 2 is an example Table for the Product root concept.",{"@attributes":{"id":"p-0083","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The Product Category Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Description","Creation Date"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Network Device Products","Enterprise devices","Apr. 12, 2000"]},{"entry":[{},"Perseus","router product","Apr. 12, 2000"]},{"entry":[{},"Hercules","gateway product","Apr. 12, 2000"]},{"entry":[{},"Jason","hub product","Apr. 12, 2000"]},{"entry":[{},"AlphaPerseus","router product","Apr. 12, 2000"]},{"entry":[{},"BetaPerseus","router product","Jun. 16, 2000"]},{"entry":[{},"BetaPerseus 1.0","router product","Jun. 16, 2000"]},{"entry":[{},"GammaPerseus","router product","Sep. 19, 2000"]},{"entry":[{},"BetaPerseus 2.0","router product","Sep. 19, 2000"]},{"entry":[{},"BetaPerseus 2.4","router product","Dec. 12, 2000"]},{"entry":[{},"BetaPerseus 3.0","router product","Jan. 1, 2001"]},{"entry":[{},"SuperPerseus","router product","Feb. 1, 2001"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"Several tables are employed to store relationships. These tables support N-ary relationships. The relationship type table holds one row for each relationship type, as illustrated in Table 3 for some sample relationship types described above. The table rows include fields for the name of the relationship type, as used in the high level language or conceptual graphs, a fuller description of the relationship, the number of participants and the creation date.",{"@attributes":{"id":"p-0085","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The Relationship Types Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Relationship Type",{},"Number of",{}]},{"entry":["Name","Description","Participants","Creation Date"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["product_child_of","product lineage","2","Apr. 12, 2000"]},{"entry":["solution_child_of","solution lineage","2","Apr. 12, 2000"]},{"entry":["user_child_of","user categories","2","Apr. 12, 2000"]},{"entry":["technology_child_of","technology","2","Apr. 12, 2000"]},{"entry":[{},"lineage"]},{"entry":["expertise","expertise of","3","Jan. 1, 2001"]},{"entry":[{},"person with"]},{"entry":[{},"product in"]},{"entry":[{},"technology"]},{"entry":["marketDoc","Marketing docu-","2","Sep. 19, 2000"]},{"entry":[{},"ment for product"]},{"entry":["revision","track revisions in","2","Feb. 1, 2001"]},{"entry":[{},"concepts\/relation-"]},{"entry":[{},"ships"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"The participant type table holds one row for each participant type in a relationship type, as illustrated in Table 4 for the example relationships of Table 3. This table has a row for each participant of each relationships type. Each row has fields for the name of the relationship type, the role of the participant in the relationship, and the participant type, which is the category of the concept that may fill the given role in the relationship type.",{"@attributes":{"id":"p-0087","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The Participant Types Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Relationship Name","Role","Participant Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["product_child_of","child","Product"]},{"entry":["product_child_of","parent","Product"]},{"entry":["solution_child_of","child","Networking Solution\/Product"]},{"entry":["solution_child_of","parent","Networking Solution\/Product"]},{"entry":["user_child_of","child","User"]},{"entry":["user_child_of","parent","User"]},{"entry":["technology_child_of","child","Technology"]},{"entry":["technology_child_of","parent","Technology"]},{"entry":["expertise","person","User"]},{"entry":["expertise","product","Product"]},{"entry":["expertise","technology","Technology"]},{"entry":["marketDoc","product","Product"]},{"entry":["marketDoc","document","Document"]},{"entry":["revision","old version","Vocabulary\/relationshipID"]},{"entry":["revision","new version","Vocabulary\/relationshipID"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The relationship instance table (Rinstance table) and the participant instance table (Pinstance table) have entries for every instance of the relationships as they are defined for the enterprise data. An example Rinstance table is shown in Table 5 and an example Pinstance table is shown in Table 6, for some of the relationships described above. When a particular relationship is defined between two or more concepts, a new relationship identification (rID) is generated. In one embodiment the particular relationship ID, rID, is the unique rowID corresponding to the next row in the Rinstance table.",{"@attributes":{"id":"p-0089","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The Relationship Instance (Rinstance) Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"rID","Relationship Type Name","Creation Date"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"5000","product_child_of","Sep. 19, 2000"]},{"entry":[{},"5001","marketDoc","Sep. 19, 2000"]},{"entry":[{},"5002","product_child_of","Sep. 19, 2000"]},{"entry":[{},"5003","expertise","Sep. 19, 2000"]},{"entry":[{},"5004","marketDoc","Sep. 20, 2000"]},{"entry":[{},"5005","revision","Sep. 20, 2000"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"When a \u201cproduct child of\u201d relationship is created between the HetaPerseus 2.0 and BetaPerseus 1.0 on Sep. 19, 2000, an entry is made into a row of Table 5 and a unique rID of \u201c5000\u201d is generated by the system. Then two rows are added to Table 6 for the two concepts that participate in the \u201cproduct child of\u201d relationship that has just been added to Table 5. Those two rows each list in the rID field the rID value of \u201c5000\u201d generated for this relationship. One row is generated in Table 6 for the concept BetaPerseus 2.0 in the participant role of child for rID \u201c5000.\u201d A second row is generated in Table 6 for the concept BetaPerseus 1.0 in the participant role of parent for rID \u201c5000.\u201d",{"@attributes":{"id":"p-0091","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The Participant Instance (Pinstance) Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["rID","role","Participant"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["5000","child","BetaPerseus 2.0"]},{"entry":["5000","parent","BetaPerseus 1.0"]},{"entry":["5001","product","BetaPerseus 2.0"]},{"entry":["5001","document","http:\/\/\/www.Enterprise.com\/literature\/devices\/"]},{"entry":[{},{},"catalog\/Chap2\/'"]},{"entry":["5002","child","BetaPerseus 2.4"]},{"entry":["5002","parent","BetaPerseus 2.0"]},{"entry":["5003","person","Jane"]},{"entry":["5003","product","BetaPerseus 2.0"]},{"entry":["5003","technology","private wide area net"]},{"entry":["5004","product","BetaPerseus 2.0"]},{"entry":["5004","document","http:\/\/\/www.Enterprise.com\/Hello\/Chap2\/"]},{"entry":["5005","old version","5001"]},{"entry":["5005","new version","5004"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"On the same date, in this example, the new product is related to its marketing document with the marketdoc relationship that gets rID \u201c5001.\u201d Its participants are listed in Table 6 on the two rows having rID \u201c5001.\u201d Later that day anew product_child_of relationship is generated for BetaPerseus 2.4 and receives rID \u201c5002.\u201d Its participants are listed in the two rows of Table 6 with rID of \u201c5002.\u201d Then the expertise relationship of Jane using the BetaPerseus 2.0 in private wide area networking is established on the same day and gets an rID of \u201c5003.\u201d The three participants of that relationship are added to Table 6 in the three rows with an rID value of \u201c5003.\u201d The next day, on Sep. 20, 2000, a new marketing document is associated with the product by generating a new marketdoc relationship that receives the rID of \u201c5004.\u201d The product and document participants are added to Table 6 in the rows showing an rID value of \u201c5004.\u201d Finally, the revision of the marketing document is memorialized with the revision relationship, which receives an rID of \u201c5005.\u201d The two participants of the revision relationship are added as two rows to Table 6 having an rID value of \u201c5005\u201d in Table 5. The two participants are the old marketDoc relationship rID of \u201c5001\u201d and the new marketDoc relationship rID of \u201c5004.\u201d Though participants are listed in Table 6 with increasing values in the rID field, it is not necessary that the value of rID increase monotonically for the system to operate.","The \u201cis a\u201d relationship is a common relationship that also could be represented with entries in the Relationship Type, Participant Type, Relationship Instance and Participant Instance tables. However, better performance is achieved if all instances of an \u201cis a\u201d relationships are placed in an \u201cIs_A\u201d table. For one embodiment, an example Is_A table is shown in Table 7. For this example, all \u201cproduct child of\u201d relationships are kept in this Is_A table.",{"@attributes":{"id":"p-0094","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Is A Table."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Concept Name","Parent Concept","Creation Date"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Enterprise Network","Product","Apr. 12, 2000"]},{"entry":[{},"Device Product"]},{"entry":[{},"Perseus","Enterprise Network","Apr. 12, 2000"]},{"entry":[{},{},"Device Product"]},{"entry":[{},"AlphaPerseus","Perseus","Apr. 12, 2000"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"Attributes of concepts and relationships beyond those already included in the above tables are kept in one or more attributes tables. In one embodiment, all these additional attributes of concepts are kept in a single concepts attributes table. Similarly, all the additional attributes of relationships are kept in a single relationships attributes table. Table 8 is an example concepts attributes table for the example concepts described above.",{"@attributes":{"id":"p-0096","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Concepts Attributes Table."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Concept Name","Attribute Name","Attribute Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"BetaPerseus 2.0","author","John Smith"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"Table 9 is an example relationships attributes table for the example relationships described above. The expertise relationship was described above to include an attribute called \u201cquality\u201d for indicating the quality of the expertise using one of the values \u201cunknown,\u201d \u201cpoor\u201d, \u201caverage,\u201d \u201cgood,\u201d and \u201cexcellent.\u201d This relationship type occurred in the relationship having rID of 5003 as shown above in Table 5. Therefore the corresponding entry in the relationships attributes table is given in Table 9.",{"@attributes":{"id":"p-0098","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Relationships Attributes Table."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"rID","Attribute Name","Attribute Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"5003","quality","good"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"The rules that express general computations and constraints on the relationships are also stored in tables. In this embodiment, the rules are stored as text for the high level logical processing language. In this way, the stored rules can be imported directly into a rules engine program of the high level logical processing system. Table 10 is an example rules table including the reachable rule described above.",{"@attributes":{"id":"p-0100","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Rules Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Rule Statement",{}]},{"entry":["Rule Name","Sequence Number","Rule Statement"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["reachable","1","reachable (ConceptX, ConceptY) if"]},{"entry":[{},{},"(ConceptX, child of, Concept Y)"]},{"entry":["reachable","2","reachable (ConceptX, ConceptY) if"]},{"entry":[{},{},"reachable (ConceptX, ConceptW),"]},{"entry":[{},{},"reachable (ConceptW, ConceptY)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"One embodiment of the VDF allows multiple concepts from different concept categories to have the same name. The duplicate names are converted to unique identifiers called DupIDs and the unique identifiers are used in the concept database. The duplicates table is used in the conversion process. Table 11 is an example duplicates table for an embodiment in which a product concept and a technology concept both use the name Perseus. In this case, the name inserted into the second row of Table 2 above would be \u201c1234\u201d instead of \u201cPerseus.\u201d",{"@attributes":{"id":"p-0102","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Duplicates Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DupID","Name","Category"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"1234","Perseus","Product"]},{"entry":[{},"2789","Perseus","Technology"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"One embodiment of the VDF also allows raw terms to be stored in the database. Raw terms are words or phrases that may become a concept at a later time. Raw terms can originate from a wide variety of sources, such as a trade journal article reviewing a product or a customer order. The raw terms are stored in this embodiment in a dedicated table. Table 12 is an example raw term table.",{"@attributes":{"id":"p-0104","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 12"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The Raw Terms Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Raw Term Name","Description","Creation Date","Category"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["SuperPerseus","term for BetaPerseus","Dec. 12, 2000","Product"]},{"entry":[{},"2.5 coined by"]},{"entry":[{},"Reviewer A. Newman"]},{"entry":["P-Routers","Term for Perseus","Sep. 25, 2000","Product"]},{"entry":[{},"routers in customer"]},{"entry":[{},"request from Company"]},{"entry":[{},"A"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The Vocabulary Development Server (VDS) is one or more processes that provide management of and access to the enterprise data in the vocabulary database to other processes in an enterprise data processing system. Herein, the vocabulary database is also called the VDS Concept Database.","In the disclosed embodiment, the VDS includes several object-oriented application program interfaces (APIs). Several of the VDS APIs use function calls that are configured to allow client processes to interact with the database application without a need to know the organization of the database implementation. This allows modifications to be made to the database organization, such as adding relationships or adding or deleting levels to one or more hierarchies, without changing the client processes. All adjustments to changes in the database are accommodated in the VDS APIs.",{"@attributes":{"id":"p-0107","num":"0122"},"figref":"FIG. 4A","b":["410","420","422","422"]},"A database concept access API  provides processes for manipulating concepts, relationships and rules in the concept database without requiring knowledge of the actual database schema. For example, processes are included to return all the concepts in a given category, to generate and store a concept category, to add a concept to a category, to return sub-concepts (that is, concepts that are descendent of a given concept), to return child concepts, to return the parent concept of a given concept, to return ancestor concepts, to rename a given concept, to set the parent of a given concept, to delete a concept, and to return duplicate mapping. The database concept access API  also includes processes for manipulating relationships, such as to return all relationships, to return all relationship types, to return all \u201cIs_A\u201d relationships, to return all relationships of a given type, to generate and store a relationship type, to generate and store a relationship, to modify a participant or participant type in a relationship type, to modify a participant instance in a relationship instance and to delete a relationship. The database concept access API  includes processes for manipulating attributes, such as to return attribute information for all concepts in a given category, to set attribute information, to update attribute information, and to delete attribute information. The database concept access API  includes processes for manipulating rules, such as to return all rules in the rule table, to return all rules with a given name, to set the definition of a rule with a given name and sequence number, to generate and store a new rule with a given name and definition, to delete a given rule, and to delete rules with a given name.","The VDS database concept access API  is used by applications that are external to the VDS , such as concept application , and servlet of Web Server . The VDS database concept access API  is also used by other processes within VDS , such as the concept import module  and the concept export module , and the rule engine  of the concept access API . All elements of  that are shown outside of VDS  are shown by way of example, and are not required. Further, the structural elements of VDS  are shown as examples and the specific architecture shown is not required.","The concept import module  is designed for the bulk import of a large amount of data, splitting that data into concepts, and storing the concepts in the concept database . The concept export module  is designed for the bulk export of a large number of related concepts and concept attributes to an external system, such as concept application , and client  or concept web application  through the Web server  via servlet ","The concept access API  provides processes for use by other applications that deal with groups of related concepts, or for responding to queries about concepts, relationships and rules that are received from external application programs. The API is used, for example, by the concept application  and servlet of Web server  which are technically client processes of the VDS. Through network  and the Web server , a standalone client  such as a Web browser or a concept Web application  obtains and uses concept data. These are technically client processes of the Web server .","The concept access API  groups related concepts based on the requests made by the client processes. The concept definitions and relationships are checked to determine that constraints are not violated. Rules that are employed to define the computations or constraints employed by the concepts and relationships are obtained from the concept database  through the database concept access API , are converted to executable statements, and are executed by the rule engine  of the concept access API .","In one embodiment, the rule engine  is integrated with the concept access API  through the use of a foreign function facility of the PROLOG\u2122 rule engine. This component provides service functions that enable the rule engine to access information, including rules expressed in text of a high level language, from the concept database  through the database concept access API . Rule execution functions can execute in the rule engine  the rules retrieved from the database . These functions marshal the function arguments (such as concepts\/relationships\/attribute) into the rule arguments, execute the PROLOG\u2122 rule and retrieve any results, and un-marshal the rule results into a results set suitable for returning back to the client process, e.g., the calling application.","In this arrangement the concept database can be continually updated with new concepts, new hierarchies, new levels in old hierarchies, new relationships between hierarchies, and new rules, without requiring changes in the applications such as concept application , Web server , standalone client , or concept Web application . Any changes dictated by changes in the database  can be accommodated by changes in one or more of the APIs of the VDS, such as database access API , database concept access API, and concept access API .","5.0 Information Object Repository (IOR)","According to one embodiment, the concept application  is an information object repository application. An information object repository (IOR) holds content for documents. For example, in this embodiment, the marketing document described above at URL address \u2018http:\/\/\/www.Enterprise.com\/Hello\/Chap2\/\u2019 is in the IOR. The content is stored and retrieved in units of data herein called information object. An IOR application produces documents, such as operating manuals, marketing documents, and Web pages for a Web site by combining one or more information object in the IOR. One or more IOR processes employed by the IOR application manage the IOR by relating the content in the IOR to one or more concepts in the concept database  and determine the information object to incorporate into documents based on one or more relationships in the concept database .","Using this technique, content originally unrelated and authored over time by many different persons and organizations can be related using the business vocabulary concepts and relationships in the VDS. Thus a person wishing to learn about the BetaPerseus 2.0 can use an IOR application to find all the manuals, press releases, and articles that describe it no matter when or by whom the document was written, as long as the content is registered with the IOR.","As another example, a system put together by a joint venture can produce a system document that uses descriptions of the components originally written independently by the joint venture partners. In addition, the information object supplied to a requester can be tailored to the person making the request, for example, by providing more technical information to a technical user than to a marketing user. Furthermore, information objects can easily be reused in several documents. For example, an introductory paragraph for the BetaPerseus 2.0 written for a marketing document can be used in a press release, a data sheet, and the home page for the BetaPersus 2.0 on the Web site of the enterprise.","Embodiments are described herein in the context of examples involving generation of electronic documents in the form of Web pages. Embodiments are applicable to generation of any form of electronic document, and are not limited to use with Web sites or Web pages.","5.1 IOR Creation Layer","One set of IOR processes are used to manage the registration of information objects into the IOR and the concept database. This set of IOR processes and the data storage for the IOR comprise the creation layer of the IOR, herein designated IOR-C.  is a block diagram illustrating the IOR-C of the IOR according to one embodiment.","In this embodiment, the IOR processes are invoked through an interface  for the IOR-C . For example, an application programming interface of the IOR-C interface  is invoked by a content generation application . In another example, an IOR administrator performs administration of the IOR through an administrator user interface of the IOR-C interface . In other embodiments the IOR processes execute under control of a standalone IOR batch or user-interactive application.","The IOR-C interface  includes methods to access the business vocabulary development server (VDS)  of the enterprise through the concept access API . As shown in , this embodiment of the VDS has an external concept access API  which uses a concept cache server  to speed retrievals from the VDS . The concept cache server  uses a cache memory to temporarily store a subset of the concepts and relationships in the concept database ( in ) of the VDS ","The IOR-C interface  includes methods to store and retrieve information objects in a content management system (CMS) such as in a local CMS  or over the network  in a remote CMS . A CMS includes persistent storage where an information object is stored. For example, persistent content store  includes information object .","A CMS is capable of managing a variety of types of information in each information object. For example an information object may comprise a block of text, an application program, a query for a database, a vector graphic, an image, audio data, video data, and other binary data. The block of text may be text that represents code for a compiler, such as C code, and formatted text, such as text in the Hypertext markup language (HTML) or in the extensible markup language (XML), as well as unformatted text using one of several character codes, such as ANSI one byte and Unicode four byte codes.","In some embodiments, the CMS comprises the local operating system directory structure. For example, different information objects are simply kept in different files with different file extensions for the different types of data, and the files are organized into one or more directories in a hierarchy of directories and files. In another embodiment, the CMS is a database server for managing a database of information objects.","It is not necessary that all the information objects be in a single CMS on one computer device. Data integration tools  are commercially available for associating data in one CMS, such as CMS , with data in another CMS, such as remote CMS . In the depicted embodiment, the methods of the IOR-C interface access the data integration tools . In an embodiment with all the information objects stored in a single local CMS, the data integration tools  are not included, and the methods of the IOR-C interface access the local CMS  directly.","Each information object in the CMS is identified uniquely by an information object reference . Depending on the CMS employed, the reference may be a file name, a file name including one or more directories in the hierarchy of directories, a network resource address, a universal resource locator (URL) address, a record identification in a predetermined database, or a record identification in a predetermined content management system.",{"@attributes":{"id":"p-0128","num":"0143"},"figref":"FIG. 4B","b":["470","480","402","410","454","470"]},"The IOR-C interface  includes methods to manage the IOR by relating the information objects in the CMS to one or more concepts in the concept database . The IOR-C interface includes methods to generate and retrieve information object concepts in the concept database associated with the information objects. The IOR-C interface also includes methods to generate and retrieve relationships between the information object concepts and other concepts in the concept database.","5.2 Information Objects and Relationships","For each information object that is registered in the IOR  by a method of the IOR-C interface , a particular information object concept is added to the concept database of the VDS . In one embodiment, an information object category is added to the Vocabulary Table (such as the sample Vocabulary Table listed in Table 1). The particular information object is a child of the information object category and is represented as a new row in an Information Object Table. The concept cache server  or concept access API  is invoked by the IOR-C method to add this concept to the database. In another embodiment, an information object relationship is added to the Relationship Instance Table (such as the sample Relationship Instance Table listed in Table 5). In this embodiment, the information object is an instance of an information type relationship type which is listed in the Relationship Type Table (such as the sample Relationship Type Table listed in Table 3).","Table 13 lists sample entries in a hypothetical Information Object Table according to the embodiment in which the information object is a concept. In this embodiment, the information object concept has a name that is the unique reference for the corresponding information object in the CMS. As shown in Table 13, the unique reference is a URL in this embodiment.",{"@attributes":{"id":"p-0133","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 13"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The Information Object Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Description","Creation Date"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["http:\/\/www.Enterprise.com\/","marketing document for","Sep. 19, 2000"]},{"entry":["literature\/devices\/catalog\/","Perseus routers"]},{"entry":"Chap2\/"},{"entry":["http:\/\/www.Enterprise.com\/","marketing document for","Sep. 20, 2000"]},{"entry":["Hello\/Chap2\/","Perseus routers"]},{"entry":["ftp:\/\/Enterprise.com\/","BetaPerseus introductory","Dec. 12, 2000"]},{"entry":["literature\/devices\/Perseus\/","paragraph for silver partner"]},{"entry":["Intro17.txt\/","marketing person"]},{"entry":["ftp:\/\/Enterprise.com\/","BetaPerseus 2.0 intro-","Apr. 12, 2000"]},{"entry":["literature\/devices\/Perseus\/","ductory paragraph for"]},{"entry":["Intro5.txt\/","technical person"]},{"entry":["http:\/\/Enterprise.com\/","BetaPerseus 2.0 data sheet","Apr. 12, 2000"]},{"entry":["datasheets\/DS33\/","table"]},{"entry":["http:\/\/Enterprise.com\/","Jason data sheet table","Apr. 12, 2000"]},{"entry":"datasheets\/DS12\/"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Adding the information object concept to the concept database links the concept database to an information object in the CMS, but this action alone does not relate one information object to another. Once a particular information object concept has been added to the concept database, a relationship is formed with one or more other concepts in corresponding other hierarchies. As each information object has an information object concept added to the database and linked to another concept, relationships between the information objects are implied by the relationships between the corresponding concepts.","For example, an instance of a \u201chas info object\u201d relationship type is added to the database to relate at least one product concept to each information object added. These relationships relate the first and second information objects in Table 13 to the Perseus concept in the product hierarchy, the third information object to BetaPerseus concept, the fourth and fifth information objects to the BetaPerseus 2.0 concept, and the sixth information object to the Jason concept in the product hierarchy. Since both the fourth and fifth information objects are related to the same product concept, by implication the information objects are related to each other. In this way, the information objects referenced by URLs \u201cftp:\/\/Enterprise.com\/literature\/devices\/Perseus\/Intro5.txt\/\u201d and \u201chttp:\/\/Enterprise.com\/datasheets\/DS33\/\u201d are related by implication, and can reasonably be placed in the same document in some circumstances. In this example, the two information objects referenced by the fourth and fifth information objects are closely related even though those two information objects reside in the CMS in entirely different levels of different subdirectories in the Enterprise.com directory.","Similarly, since BetaPerseus 2.0 is a child of BetaPerseus and BetaPerseus is a child of Perseus in the product hierarchy, the corresponding information objects are implied to share this same hierarchical relationship. Thus one can navigate among the information objects, and their associated information objects, using the relationships among the concepts related to the information objects. These techniques allow the rich collection of relationships in the concept database to provide organization for the information objects stored in the CMS.",{"@attributes":{"id":"p-0137","num":"0152"},"figref":"FIG. 5"},"A particular information object concept  is a child of information object category  by the information object child of relationship indicated by arrow . The particular information object  is a participant in a 5-ary \u201chas info object\u201d relationship indicated by the five-pronged connection . This \u201chas info object\u201d relationship involves a concept  of the product hierarchy as in the above example, but also involves other concepts. The \u201chas info object\u201d relationship also involves a concept  in an information type hierarchy and two concepts in a \u201cuser profile\u201d hierarchy, one a child concept  of a job role concept , and the other a child concept  of a partner level concept . These other concepts and hierarchies are described in more detail next. The 5 participant \u201chas info object\u201d relationship specifies that a particular information object provides a particular information type about a particular product in the product hierarchy of interest to a person playing a particular job role for a particular level of partner to the enterprise.","Introduction concept  is a child of an \u201cinfo type\u201d category  by the \u201cinfo type child of\u201d relationship indicated by arrow . According to this embodiment, various documents generated from the information objects use or reuse one or more concepts of the \u201cinfo type\u201d category. In one embodiment, the \u201cinfo type\u201d hierarchy is a one level hierarchy below the \u201cinfo type\u201d category as the root concept. Every different info type concept is a child of the \u201cinfo type\u201d root concept. The \u201cinfo type\u201d concepts include \u201cIntroduction,\u201d \u201cFeatures and Benefits,\u201d \u201cProduct Photo,\u201d \u201cSchematic Drawing,\u201d \u201cOperational Properties,\u201d \u201cData Sheet Table,\u201d and \u201cExternal Article Section,\u201d among others.","In another embodiment, the info type hierarchy is a multiple level hierarchy, with some info type concepts comprising one or more other info type concepts. For example, a \u201cData Sheet Table\u201d info type concept has several child info type concepts, each one describing a different aspect of the product, such as the product's power consumption, its physical dimensions, and its weight, among others.","Another embodiment includes a child node of the information type root to distinguish application database content, Web services, and content information types.","In one embodiment, the generation of content for info types is controlled by one or more authoring templates. A template is a data structure storing some data and configured to store additional information provided by a user. A template often contains data employed by a process to prompt a user for the additional information. For example, an authoring template for the Data Sheet Table info type includes data indicating the several child info types that are included when a particular Data Sheet Table concept is generated. This example template is employed by a process to prompt a user to specify the information objects for all the child info types that make up the particular Data Sheet Table.","Each concept of the \u201cinfo type\u201d hierarchy is related to one or more concepts in a \u201cdocument type\u201d hierarchy by a \u201chas_docinfo\u201d relationship indicated in  by the double arrow . The \u201cdocument type\u201d hierarchy is a one level hierarchy below the \u201cdocument type\u201d category as the root concept. Every different document type concept is a child of the \u201cdocument type\u201d root concept. The \u201cdocument type\u201d concepts include \u201cMarketing Document,\u201d \u201cProduct Home Page,\u201d \u201cData Sheet,\u201d \u201cPress Release,\u201d \u201cOperator's Manual,\u201d \u201cProduct Overview\u201d and \u201cExternal Article,\u201d among others.","In one embodiment, the \u201chas_docinfo\u201d relationship, such as , provides a specific organization of information objects to produce a particular document of a given document type. For example, a product marketing document type is a participant in four \u201chas_docinfo\u201d relationships, one each with a \u201cProduct Photo\u201d information type concept having a position attribute value \u201cfirst,\u201d an \u201cIntroduction\u201d information type concept having a position attribute value \u201csecond\u201d, a \u201cFeatures and Benefits\u201d information type having a position attribute value \u201cthird\u201d and an \u201cOrdering\u201d information type having a position attribute value \u201cfourth.\u201d For another example, a product home Web page document type is a participant in five \u201chas_docinfo\u201d binary relationships, one each with a \u201cProduct Name Heading\u201d information type in a first position, a \u201cIntroduction\u201d information type in a second position, a \u201cList of Other Info Types for Concept\u201d information type in a third position, a \u201cList of Other Documents for Concept\u201d information type in a fourth position, and a \u201cList of Next Concepts in Hierarchy\u201d information type in the fifth position. The last three information type concepts do not need information objects to provide the content for the Web page document type, because these lists can be derived from the relationships in the VDS for a given concept. By tying information object concepts indirectly to document type concepts through information type concepts, a particular information object can be reused in more than one document under many versions and variations in other characteristics.","In another embodiment, a document type participates in binary relationships that identify an information type, template type, output type, and language.","In yet another embodiment, the presentation of info types in a document is controlled by one or more document presentation templates. For example, a document presentation template associated with a Product Overview document type determines info types to be included and their arrangement in the document. In one embodiment, several templates are employed for a single document type, one template for presentation on a printed page, another template for a Web page, and yet another template for display on a wireless device. Wireless devices typically have very small print areas and hold substantially less information than a Web page or printed page.","In some embodiments, the presentation of each info type is separately determined by one or more info type presentation templates.","The relationship  depicted in  of the \u201chas info object\u201d relationship type includes a marketing role concept  as a participant. Marketing role concept  is a child of a \u201cjob role\u201d concept  which is a child of a \u201cuser profile\u201d category  by the \u201cuser profile child of\u201d relationship indicated by arrows and , respectively. According to this embodiment, the content in an information object referenced by an information object for a particular information type for a particular product depends on the job role of the person who is reading the document. The content is expected to be different for a person in a marketing role, concept , than one in a technical role, concept , or even one in a sales role, concept , which may represent some mixture of the content provided for the two other roles. These other job roles are also children of the job role concept . Still other job role children concepts are defined in other embodiments. For example, a \u201cdefault\u201d concept child of the \u201cjob role\u201d concept  is used for a person who does not play a particular role. This person is treated as an uninitiated member of the general public.","Silver partner concept  is a child of a \u201cpartner level\u201d concept  which is a child of a \u201cuser profile\u201d category  by the \u201cuser profile child of\u201d relationship indicated by arrows and , respectively. According to this embodiment, the content in an information object for a particular information type for a particular product depends on the kind of partner to the enterprise is the corporate employer of the person who is reading the document. A gold partner, represented by concept , is an entity or affiliate treated as any other member of the enterprise itself. A silver partner, represented by concept , has some favorable access to information. A default partner, represented by concept , has no formal relationship with the enterprise and is treated as a member of the general public. Examples of different partner levels include Guest, in which all information is available to the general public; Customer, which identifies an entity that has a contract with the enterprise; Partner, which identifies an entity having a preferred status with the enterprise; Reseller, which identifies an entity that sells products or services for the enterprise; Employee, which identifies an individual who is an employee or contractor to the enterprise. The content is expected to be different for partners at the different levels. These particular partner levels are all children of the \u201cpartner level\u201d concept . Still other children concepts are defined in other embodiments.","Table 14 gives the entries in the relationship type table for the relationship depicted in  by connection . Table 15 gives the entries in the participant type table for the relationship depicted in  by connection .",{"@attributes":{"id":"p-0151","num":"0166"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 14"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The \u201cHas Info Object\u201d Entries in Relationship Types Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Relationship Type",{},"Number of",{}]},{"entry":["Name","Description","Participants","Creation Date"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["has_info_object","references content","5","Apr. 12, 2000"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0152","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 15"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The \u201cHas Info Object\u201d Entries in Participant Types Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Relationship Name","Role","Participant Type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"has_info_object","info_object","info_object"]},{"entry":[{},"has_info_object","info_type","info_type"]},{"entry":[{},"has_info_object","concept","Vocabulary"]},{"entry":[{},"has_info_object","job_role","job_role"]},{"entry":[{},"has_info_object","partner_level","partner_level"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"The particular instance of the \u201chas info object\u201d relationship depicted in  specifies that a particular information object referenced by a particular information object  provides an \u201cIntroduction\u201d info type about the BetaPerseus 2.0 product of interest to a person playing a marketing role for a silver level partner to the enterprise.","To manage a plurality of information objects, the IOR-C interface provides methods for defining the information object type, for setting the attributes of a concept of the information object type, for defining the \u201chas info object\u201d relationship type involving the information object type, and for setting the attributes of a particular relationship of the type.","5.3 Templates",{"@attributes":{"id":"p-0156","num":"0171"},"figref":"FIG. 6","b":["600","664","650","666","610","632","632","666","664"]},"The persistent concept store also includes an information type  stored as a concept or relationship. Associated with the info type  are templates  for authoring and presenting the info type. Any method in the art may be used for associating the templates with the info types. For example, references to the templates are included as attributes of the concept or relationship representing the info type in the database. As another example, relationships are used in which the info type and the templates are participants. The templates are data structures configured to receive user input and may include data to use with the user input and to prompt for desired input. Any method in the art may be used to indicate how information should be entered. For example the template can be a hypertext markup language (HTML) page with a form for accepting text input or the file names of images or other data. As another example the template can be an extensible markup language (XML) document with a document type definition (DTD) describing the allowed entries.","For example, template is an authoring template including data indicating how to produce an information object (content) for the info type. In some embodiments this data indicates the other information types included in the information type . In some embodiments this data includes user privileges for users authorized to generate the information object.","For example, template is a printed page presentation template including data indicating how to present the information object on a printed page. Any method in the art may be used to indicate the presentation. For example, in one embodiment HTML tags are used to identify the position and fonts for text and the position and size of images. In another embodiment, an extensible stylesheet language (XSL) is used to format an XML document or transform the XML document to HTML or to some other presentation format.","Similarly, templates and are presentation templates for web pages and wireless devices. For example, in one embodiment HTML tags are used to identify the position and fonts for text, the position and size of images and video, and the order for audio data and computer programs. In another embodiment, an extensible stylesheet language (XSL) is used to format an XML document or transform the XML document to HTML or to some other presentation format, such as a wireless markup language (WML) for wireless devices.","In another example, the templates are a set of relationships to the Template Locations vocabulary, which is related to each template.","The persistent concept store also includes a document type  stored as a concept or relationship. Associated with the doc type  are templates  for authoring and presenting documents of the doc type. Any method in the art may be used for associating the templates with the doc types. For example, references to the templates are included as attributes of the concept or relationship representing the document type in the database. As another example, relationships are used in which the document type and the templates are participants.","For example, template is an authoring template including data indicating how to produce a document of the document type. In some embodiments this data indicates the other information types included in the document type . In some embodiments this data includes user privileges for users authorized to generate documents of the document type.","For example, template is a printed page presentation template including data indicating how to present the document on a printed page. The order and arrangement of information types are specified in this template. Any method in the art may be used to indicate the presentation. Similarly, templates and are presentation templates for web pages and wireless devices.","Using information types and templates, documents can be produced automatically that share the same information object  when useful and that present the information objects in a consistent way. For example, the presentation templates for the \u201cProduct Introduction\u201d information type can indicate a larger font than the presentation templates for \u201cData Sheet Table\u201d information type. Similarly, the presentation templates can tailor the information object for the output device. For example, the Data Sheet Table can be broken up and presented one row at a time on a wireless device according to the data in template ","5.4 Multiple Layer IOR",{"@attributes":{"id":"p-0167","num":"0182"},"figref":"FIG. 7","b":["782","782","782","784","784"],"i":["a ","b ","c ","a","b"]},"Transform process  obtains information from the IOR-C layer  using the IOR-C layer interface  and generates the IOR-M layer using the IOR-M layer interface . The IOR-M layer includes a content cache , a concept cache , and a concept cache server . A management layer tool  also uses the IOR-M interface to allow a user to view and edit the information objects, concepts and relationships in the IOR-M ","The content cache is a data store that includes a subset of the information objects stored in the CMS of the IOR-C layer. Information objects that have become obsolete or that are not yet released are excluded from the content cache . Also excluded are information objects that are not used by the electronic documents to be produced. This is an element of predictive caching to cache those objects expected to be used. Predictive caching is aided by information types that indicate the use of information objects. Some information objects of the CMS are combined into a single object in the content cache , if doing so is expected to enhance efficiency of use. For example, information objects that are always used together in the documents to be produced, as determined by the templates, may be combined into a single information object in the content cache . In some embodiments, the information objects carried over by the transform layer apply the formatting in the associated templates and are stored as formatted objects. The information objects referring to the formatted objects are called formatted information objects. These actions can be triggered by events, usage, or other such algorithms.","The concept cache is a data store that includes a subset of the concepts and relationships stored in the concept database. The concept data from the concept database is de-normalized in the concept cache to improve speed of retrieval by allowing a concept that participates in more than one relationship to be stored more than once in the concept cache. For example, an information type concept is stored with other information type concepts in the information type hierarchy and again with each document type that includes the information type. Thus, when a document is generated, a fill description of the information types is with the document type, reducing time needed to retrieve such data from the concept cache.","The management layer concept cache server provides access to the concepts and relationships in the management layer concept cache . The cache servers  in all the layers support the same methods provided by the concept access API ( in ), but each cache server  operates on the concept cache  in the same layer.","The deploy process  obtains information from the IOR-M layer using the IOR-M layer interface and generates the IOR-S layer using the IOR-S layer interface . The IOR-S layer includes a second content cache , a second concept cache , and a second concept cache server . A quality assurance application, such as the model electronic document generator , uses the IOR-S interface to allow a user to test the IOR-S layer for its suitability for generating documents to be provided in a later stage. For example, the IOR-S layer is tested using the IOR-S interface to ensure that all information objects in the content cache have an information object concept in the concept cache and that the information object concept has a relationship with at least an information type concept. As another example, authors use the IOR-S interface to view the information objects and determine that the information is correct for the concepts to which the information objects are related by a corresponding information object.","A model electronic document generator  also uses the IOR-S interface to allow a Web site developer to generate, view and edit the electronic documents to be provided by the Web server. In the course of operations the model electronic document generator  produces a search index , a directory structure for storing electronic documents produced, and static electronic documents that do not depend on the user profile of the user viewing the page.","The replicate process  obtains information from the IOR-S layer and reproduces it in a fast, Web server layer, IOR-F, on each of one or more Web servers, such as Web server . The IOR-F layer includes a third content cache copied from the second content cache , a third concept cache copied from the second concept cache , and a third concept cache server . The search index , directory structure and static pages are also replicated as search index , directory structure and static pages , respectively, on each of the Web servers, such as Web server , and\/or cache services that are available.","An electronic document generator  produces electronic documents  in response to requests from client . The electronic document generator  uses the search index , the directory structure , the static pages , and the IOR-F layer in any combination to produce the electronic documents . As described in more detail in the next section, when a user selects a concept with content that depends on the user profile, the electronic document generator uses the concept cache server to determine information types in the electronic document type, and the information objects related to the information types for the selected concept. The electronic document generator then retrieves the information objects from the content cache using the URL reference from the information object.","Also shown on Web server  is a web application  that may be requested through the electronic documents .","In the following sections, the dynamic document production is described.","5.5 Electronic Document Production",{"@attributes":{"id":"p-0179","num":"0194"},"figref":"FIG. 8A","b":"810"},"In step , data indicating the information types used in various documents are generated and stored. These information types indicate how information objects associated with them are to be used. For example, information types include \u201cProduct Introduction,\u201d \u201cProduct Field Notice,\u201d and \u201cFeatures and Benefits,\u201d \u201cProduct Small Photo,\u201d \u201cProduct large Photo,\u201d \u201cProduct Front Wireframe,\u201d \u201cProduct Rear Wireframe,\u201d \u201cData Sheet Table\u201d and \u201cProduct MSRP,\u201d among others. An embodiment of step  is described in more detail below with reference to .","In step , data indicating the document types are generated and stored. The document types are unique collections of information types used in the course of communicating information about an enterprise to its employees, partners, customers and marketplace. For example, document types include \u201cMarketing Document,\u201d \u201cProduct Home Page,\u201d \u201cData Sheet,\u201d \u201cPress Release,\u201d \u201cOperator's Manual,\u201d \u201cProduct Overview\u201d and \u201cExternal Article,\u201d among others. A \u201cProduct Overview\u201d document type includes a \u201cProduct Introduction\u201d information type and a \u201cProduct Small Photo\u201d information type. An embodiment of step  is described in more detail below with reference to .","In step , units of information, called information objects, are stored and associated with an information type. For example, an image of the BetaPerseus 2.0 router is captured by a digital camera and stored using a format developed by the Joint Photographic Experts Group (JPEG) in a file named \u201cbp20.jpg\u201d in persistent content store  of . The JPEG file is then associated with the information type \u201cProduct Small Photo\u201d in any manner in the art. An embodiment of step  is described in more detail below with reference to .","In step , a document is produced based on a particular document type made up of a particular set of information types and based on a set of information objects associated with information types in the particular set of information types. In several embodiments, this step is performed by the electronic document generators such as the model web page generator  and the web page generator  in . For example a BetaPerseus 2.0 Overview Web Page is produced based on the \u201cProduct Overview\u201d document type and a particular set of information objects associated with the \u201cProduct Introduction\u201d and the \u201cProduct Small Photo\u201d information types of the \u201cProduct Overview\u201d document type. Because multiple information objects may be associated with the \u201cProduct Introduction\u201d information type, the information object included in the particular set of information objects for the BetaPerseus 2.0 Overview Web Page is selected from the multiple information objects based on the values of one or more other attributes associated with the information object. For example, the selected information object is associated with a product having a name attribute of \u201cBetaPerseus 2.0\u201d and with a user having a role attribute of \u201cmarketing.\u201d An embodiment of step  is described in more detail below with reference to  and .","In step  the information objects associated with the information types are changed. This can be done in any manner in the art. This is accomplished in one embodiment by replacing the contents in the file referenced by the information object. In another embodiment, this is accomplished by generating a new file with a new reference and storing the new reference in the information object already associated with an information type. Documents produced subsequently to this step, indicated by the arrow returning control to step , then present the new information object.",{"@attributes":{"id":"p-0185","num":"0200"},"figref":["FIG. 8B","FIG. 8A"],"b":["810","810","811"]},"In step , an authoring template is stored which includes data indicating how to produce an information object for the particular information type, e.g., as attributes or relationships to other concepts used throughout the system. For example, the maximum number of pixels are specified for a Product Small Photo information type; and an author is prompted for information to use in the caption and to identify the product concepts and user concepts to which the information type is related. In some embodiments, the data also include a set of one or more user privileges, specifying the privileges of users who may author information objects for this information type. As described above, any method in the art may be used for associating the templates with the info types, such as attributes with a reference to the template, or relationships with the templates as participants.","In step , one or more presentation templates are stored which includes data indicating how to present an information object for the particular information type for various output devices. For example, an image for the Product Small Photo information type is converted to black and white image for a wireless device. For another example the Product Small Photo image is surrounded by a red border and the caption is placed on the lower border for presentation on a Web browser. In some embodiments, the data also include a set of one or more user privileges, specifying the privileges of users who may view information objects for this information type.",{"@attributes":{"id":"p-0188","num":"0203"},"figref":["FIG. 8C","FIG. 8A"],"b":["830","830"]},"In step , a document type is stored as a concept in the concept database with attributes such as a name and creation date. In another embodiment, a document type is stored as a relationship in the concept database.","In step , an authoring template is stored which includes data indicating how to produce a document of the particular document type. For example, the data indicates that a Product Overview document type includes a Product Introduction information type and a Product Small Photo information type. In some embodiments, the template also indicates whether an information type is primary, required or optional. A primary information type is the main focus for a document, therefore the document of this type is not allowed to exist if this information type is missing. For example, the Product Introduction is a primary information type for the Product Overview document type. A required information type is one that is included before a document is finished for presentation to a user. For example, an author may view a document in which a required information type is missing, but not a user. Such a document is not presented to a user. A document may be produced and presented even if an optional information type is missing. For example, the Product Small Photo is an optional information type for the documents of the Product Overview document type.","The relationships with the authoring template may define prompts for requesting an author to input a subject for the document, such as the product service or activity to be described, and the user role of the person to whom the document is presented. In some embodiments, the data also include a set of one or more user privileges, specifying the privileges of users who may author information objects for this information type. As described above, any method in the art may be used for associating the templates with the info types, such as attributes or relationships with a reference to the template, or relationships with the templates as participants.","In step , one or more presentation templates are stored which include data indicating how to present a document of the particular document type for various output devices. For example, the Product Introduction information type is presented before the Product Small Photo information type for a wireless device. For another example the Product Small Photo image, surrounded by its red border and the caption, is placed to the right of a text box with the Product Introduction on the Web page. In some embodiments, the data also include a set of one or more user privileges, specifying the privileges of users who may view documents of this document type.","In step , the information types are associated with the document types as one or more relationships stored in the concept database, with the document type and information type as participant concepts in each relationship. An attribute of the relationship includes the value \u201cprimary,\u201d \u201crequired\u201d or \u201coptional,\u201d and may include many other relationship participants or attributes.",{"@attributes":{"id":"p-0194","num":"0209"},"figref":["FIG. 8D","FIG. 8A"],"b":["850","850"]},"In step , it is determined whether a user is a privileged author for generating information objects for a particular information type. If so, control passes to step  to author an information object based on the authoring template. If not, control passes to step  to store the information object in the persistent content store  of . For example, in step , a privileged user authors an Introduction for the BetaPerseus 2.0 for use by a person playing a marketing role for a silver partner. In step  the introduction is stored in a file Intro777.html. As another example, a BetaPerseus 2.0 image is stored in file bp20.jpg in step .","In step , an information object is generated and stored in the database as a concept. The information object includes data indicating the reference to the information object in the persistent store, such as a database record number or a file name. For example an information object X is generated for the BetaPerseus 2.0 image information object, and stored in the database; info object X includes data indicating reference \u201cbp20.jpg.\u201d Another information object Y is generated for the BetaPerseus 2.0 Introduction information object, and stored in the database; info object Y includes data indicating reference \u201cIntro777.html.\u201d","In step  a relationship is generated and stored in which the information object and an information type are participants. For example a relationship  in , of the \u201chas info object\u201d relationship type, is generated and stored with info object Y and information type \u201cProduct Introduction\u201d as participants, as shown in .","In step , a relationship is stored with the information object Y and zero, one or more other concepts as participants. Either the relationship or at least one of the other concepts has a particular value for a certain attribute used to identify the information object as one of interest for a particular document. For example, the info object Y is related to the concept for BetaPerseus 2.0 by the relationship  in , because the corresponding information object was produced for that product. The concept BetaPerseus 2.0 has a name attribute with the value \u201cBetaPerseus 2.0.\u201d This relationship  identifies info object Y as an info object related to the product BetaPerseus 2.0. In one embodiment, the relationship is the same relationship that has the information type as a participant. For example relationship  depicted in  includes both the information type \u201cProduct Introduction\u201d and the product \u201cBetaPerseus 2.0\u201d as participants. In other embodiments one or more separate relationships have the info object Y and the other concepts as participants. In the depicted embodiment, the relationship  also includes the marketing role and the silver partner level as participants. These concepts have name attributes with values of \u201cmarketing role\u201d and \u201csilver partner,\u201d respectively. In other embodiments, a product or a user role or a partner level or some combination is an attribute of the relationship itself rather than an attribute of a concept that is a participant. Step  allows the document production process to distinguish, based on the values of one or more attributes, among several information objects that are associated with the same information type.","In step , the information object is formatted based on the presentation template for the information type. In step , the formatted information object is stored in the persistent content store at a new location indicated by a new reference; and the information object is updated to include the new reference. When an information object references an information object that has been formatted according to a presentation template, the information object is called a formatted information object. Steps  and  sometimes improve performance and\/or assist in presentation processing for certain data storage mediums, e.g., CD-ROM distribution. For example, if a particular information object is repeatedly used in many documents on the same output device, then performance may improve if the information object is formatted and stored once and repeatedly retrieved in already formatted condition. In some embodiments, steps  and  are not performed.",{"@attributes":{"id":"p-0200","num":"0215"},"figref":["FIG. 8E","FIG. 8F","FIG. 8A"],"b":["870","870"]},"In step  a document type is determined for the document to be produced. Any method for determining the document type can be used. For example, a user requests a document of the \u201cProduct Overview\u201d document type by selecting \u201cProduct Overview\u201d from a pull down menu. Based on this selection, the document production process determines the information types for the selected document type. For example, the document production process determines from the relationships involving the Product Overview document type, that the information types Product Introduction and Product Small Photo are included.","In step , the presentation template for the document type is determined. Any method for determining the presentation template can be used. For example, the document production process determines from the context of the user's request that the document is to be produced for a web page. A relationship with the Product Overview document type is found having a reference to a template as a value for a web page presentation template attribute. The presentation template indicates the Introduction is placed to the left of the Product Small Photo.","In step  a subject for the document is determined based on determining that a particular set of one or more attributes should have specified values. For example, the user profile indicates the user fills a marketing role for a silver partner; and the user request for the document type includes data indicating the product to be overviewed is the BetaPerseus 2.0. Thus the subject of the document is determined to be the \u201cBetaPerseus 2.0\u201d value for the product name, and, if different documents are produced based on the user profiled, the subject is defined by the marketing role of a silver partner.","Step  starts a loop through the information types of the document type for the document being produced. The next information type of the document type is made the current information type. The first time step  is encountered, the first information type is made the current information type. For example, the Product Introduction is made the current information type.","In step , the information object is found that is related to the current information type and to concepts or relationships with the particular values of the attributes determined in step . For example, several relationships of the \u201chas info object\u201d type are found with a product attribute value of \u201cBetaPerseus 2.0\u201d and an information type of \u201cProduct Introduction.\u201d The user profile is employed to determine that only one relationship, relationship  in , has a user role and partner level that matches the user profile of the requesting user. The information object of relationship , here called info object Y, is determined to be the information object for the document being produced.","In step , the information object referenced by the determined information object is retrieved. For example, the information object at Intro777.html is retrieved. If no information object applies to the subject and user profile, no information object is retrieved for the current information type.","Step  represents a decision point for determining whether the loop over the information types is complete. If not, control passes to step  to make the next information type the current information type. For example, the Product Small Photo is made the next information type. The use of specific relationships that are specifically designed to determine if a particular document page is built can also assist this, in another embodiment.","When the last information type has had its information object, if any, retrieved, control passes to step . In step , it is determined whether a primary information type is absent. For example, it is determined in step  whether the Product Introduction, primary for the Product Overview document type, is absent. If so, control passes to step  to exit the document production process. The document does not exist to be produced.","If an information object for the primary information type is not absent, control passes to step , depicted in . In step , the information objects are formatted according to their presentation templates, unless already formatted in steps  and  in . Also in step , the document is formatted according to the presentation template for the document type and output device. For example, the BetaPerseus 2.0 Product Overview document is formatted according to the template for the Product Overview document type for a Web page. In this example, the Product Introduction is placed on the left of the page and the Product Small Photo is placed on the right, inside a red border with the picture caption in the lower border.","In step , it is determined whether the user is a privileged viewer for all the information types in the document. If not, control passes to step  to remove the information objects for information types the user is not privileged to view.","In step , it is determined whether a required information type is absent. If so, control passes to step  to send a message to an author of the document to provide the required information type. The absent but required information type is made the current information type and control passes back to step  in  to determine the information object related to the information type.","If no required information types are absent, control passes to step  to present the formatted document to the user on the output device.","Using these steps, information objects are automatically reused in all documents based on the information type describing the use of the information, the subject of the document, and the user profile. In addition, the document is automatically formatted for the output device on which the document is presented.","The capabilities provided by these steps allow predictive caching to be employed. Because content is associated with a use through the information type concepts, the information objects associated with the most common uses, and with a particular active user for output to the particular device employed by the user, can be moved to a cache before specifically requested by the document production process. Then when the process does request the particular information object, it is likely already in cache. This reduces or eliminates the delays caused by retrieving data from a persistent store.","Thus, the ability to create predictive caching technologies is provided. Caching decisions may be carried out, for example, based on relationships, network infrastructure, or other priority mechanisms. Using the disclosed structure, for example, a Japanese partner who is accessing information from Tokyo experiences different caching and delivery behavior because of the partner's location with respect to the caches, service agreement, language, and other partner details (e.g., kind of product, tools used, bookmarks, etc.).","6.0 Hardware Overview",{"@attributes":{"id":"p-0216","num":"0231"},"figref":"FIG. 9","b":["900","900","902","904","902","900","906","902","904","906","904","900","908","902","904","910","902"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (\u201cCRT\u201d), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for producing electronic documents. According to one embodiment of the invention, a document production application is provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (\u201cISDN\u201d) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (\u201cLAN\u201d) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (\u201cISP\u201d) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accordance with the invention, one such downloaded application provides for a document production application as described herein.","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","7.0 Extensions and Alternatives","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2A","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIGS. 8B","FIG. 8A"],"b":["8","8","8","8"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
