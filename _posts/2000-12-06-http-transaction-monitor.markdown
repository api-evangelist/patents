---
title: HTTP transaction monitor
abstract: An apparatus for monitoring data flow in a web application includes a data collector which collects data about transactions on a server that hosts components of the web application. The transactions on the server are initiated through an HTTP request from a client. The apparatus further includes a graphical display which displays the collected data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07016953&OS=07016953&RS=07016953
owner: Sun Microsystems, Inc.
number: 07016953
owner_city: Santa Clara
owner_country: US
publication_date: 20001206
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","COPYRIGHT NOTICE","GLOSSARY OF TERMS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Architecture Overview","Directory Structure","HTTP Transaction Monitor GUI","HTTP Transaction Monitor Server-Side Functionality","Operation"],"p":["This application claims priority from provisional application Ser. No. 60\/237,823, filed Oct. 3, 2000.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever.","The following glossary of some terms are helpful in understanding the background discussion and the detailed description of the invention.","API\u2014Application Programming Interface. An interface for application programs and utilities to access the internal services provided by the operating system.","Applet\u2014A Java\u2122 program embedded in a web page and executed in a Java\u2122-enabled web browser.","ASP\u2122\u2014Active Server Pages\u2122. A scripting environment developed by Microsoft Corporation. ASP\u2122 allows HTML, scripts, and ActiveX components to be combined to create dynamic web pages.","Bean\u2014A JavaBeans\u2122 component.","Web Browser\u2014A client application connected to the World Wide Web that requests resources from a Web server, usually for the purpose of displaying them. Examples of browsers are Internet Explorer and Netscape Navigator.","Class\u2014A user-defined data type that defines a collection of objects that share the same characteristics. An object is one instance of the class.","Cookie\u2014A packet of information sent by an HTTP server to a web browser and then sent back by the browser each time the browser accesses that server. Cookies can contain any arbitrary information the server chooses and are used to maintain state between HTTP transactions. Cookies are not visible to the browser user.","DHTML\u2014Dynamic HTML. An extension of HTML, created by Microsoft Corporation. DHTML gives greater control over the layout of page elements and the ability to have web pages which change and interact with the user without having to communicate with the server.","Directory\u2014A simulated file folder on disk.","Execution Server\u2014An HTTP server that includes facilities for executing JSP\u2122 pages and servlets, or dynamic page generation components in general, from within an IDE.","GUI\u2014Graphical User Interface. A graphics-based interface that incorporates icons and\/or pull-down menus and user interaction with the GUI.","CGI\u2014Common Gateway Interface. A standard for running external programs from a HTTP server.","CGI Script\u2014A small program written in a script language such as Perl that can be invoked through a request to the web server.","Hook\u2014Programming instructions that provide breakpoints for future expansion. Hooks can be used to call some outside routine or function or may be places where additional processing is added.","HTML\u2014Hypertext Markup Language. A hypertext document format used on the World Wide Web.","HTTP\u2014HyperText Transfer Protocol. The client-server TCP\/IP protocol used on the World Wide Web for the exchange of documents.","HTTP Server\u2014A server process running at a web site which sends out web pages in response to HTTP requests from remote browsers.","HTTP Session\u2014Allows the server to maintain state between different HTTP requests. The HTTP server knows which session to associate with the request because the browser sends the session ID as part of the request. This can either be done with a cookie or by adding a parameter to the request URL.","IDE\u2014Integrated Development Environment. An application that facilitates the process of writing software. An IDE typically includes a syntax-based editor, graphical tools for program entry, and integrated support for compiling, running, and debugging the program.","IDE Session\u2014The instance of an application that is created when the application is started. The session ends when the application is exited.","Internal Server\u2014An HTTP server that runs in the same process as an IDE for the purpose of providing services to the IDE.","JavaBeans\u2122\u2014A component software architecture that runs in the Java\u2122 environment, initially developed by Sun Microsystems, Inc. JavaBeans\u2122 allows developers to create reusable components that can be assembled together using a visual application builder tool.","JSP\u2122\u2014JavaServer Pages\u2122. A specification to extend the Java\u2122 Servlet API to generate dynamic web pages on a web server. It includes a set of tags in XML format for creating dynamic content in web pages. In order to use JSP\u2122 on a web server, the web server needs a JSP\u2122 engine and a servlet engine. The JSP\u2122 engine is responsible for generating a servlet from the JSP\u2122 page and maintaining a name convention such that the servlet is invoked when the JSP\u2122 page is processed. JSP\u2122 was developed by Sun Microsystems, Inc.","JSP\u2122 Page\u2014A text-based document that uses fixed template data and JSP\u2122 elements and describes how to process a request to create a response. The template data consists of JSP\u2122 tags embedded in static content which is typically HTML.","Servlet\u2014A Java\u2122 program that runs exclusively in a servlet engine which is an extension to a web server.","XML\u2014Extensible Markup Language.","LRI\u2014Local resource identifier. The location of the resource relative to the hierarchical structure of the server.","URL\u2014Uniform Resource Locator. A compact string representative of resources available via the network. A URL has the form <protocol>:\/\/<server name> <LRI> <? optional parameters>.","Process\u2014A self-contained operating environment that behaves as if it is a separate computer. A Java\u2122 virtual machine is a Java\u2122 interpreter that converts Java byte code into machine language one at a time and then executes it.","1. Field of the Invention","The invention relates generally to software development process. More specifically, the invention relates to a method and system for test-running and debugging web applications.","2. Background Art","A web application is a web site where users can access the information they need and change the state of application logic on a server through a set of web pages. Web application development is usually centered around tools and technologies. A web application centered around the Java\u2122 technology may comprise the following: JSP\u2122 pages and Java\u2122 servlets that handle HTTP requests and generate dynamic content, server-side beans that encapsulate application behavior and state, static HTML files, DHTML files, image files, sound files, and libraries with additional Java\u2122 components, such as client-side Java\u2122 applets and any Java\u2122 class files used by the other Java\u2122 components. The J2EE\u2122 specification describes a standard for how to organize such files into web modules, including describing how they are accessed. Web modules could be developed in an IDE, such as sold under the trade name Forte\u2122 for Java\u2122 by Sun Microsystems, Inc.","The task of debugging web applications such as described above is in some ways very different from standalone executables. A common approach to identifying bugs in standalone programs is source level debugging. Source level debugging essentially involves following the execution of a program by stepping through the source code line by line. At each step of the debugging process, the program's internal variables are accessed and examined to isolate the source of the bug. While this approach is useful for debugging standalone programs, it is often too fine-grained for web applications for two reasons. One of the reasons is that the behavior of the components that make up a web application, at least the components that handle the HTTP transactions, are typically very simple in comparison to the components of the standalone program. The other reason is that the components of the web application are managed by the web server, not by the web application itself. This means that data flow between the components is managed at the level of the web server.","In the Java\u2122-centered web application described above, the components that enable dynamic content generation include the JSP\u2122 pages and Java\u2122 servlets. The following is a listing of a sample JSP\u2122 page that sets a new attribute and generates a response page which displays the attribute the user is trying to set and the attributes that are currently set.",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Sample Listing of a JSP\u2009\u2122 Page"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<%@page contentType =\u201ctext\/html\u201d%>"]},{"entry":[{},"<html>"]},{"entry":[{},"<head>\u2009<title>Output Page<\/title>\u2009<\/head>"]},{"entry":[{},"<body>"]},{"entry":[{},"<h1>Output page<\/h1>"]},{"entry":[{},"<p>You added the following attribute to the session:"]},{"entry":[{},"<table>"]},{"entry":[{},"<tr>\u2009<td>\u2009<b>Attribute:<\/b>\u2009<\/td>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<td>\u2009<%=request.getParameter(\u201catt\u201d)%>\u2009<\/td>"]},{"entry":[{},"<td>\u2009<b>Value<\/b>\u2009<\/td>"]},{"entry":[{},"<td>\u2009<%=request.getParameter(\u201cval\u201d)%>\u2009<\/td>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/tr>\u2009<\/table>"]},{"entry":[{},"<%"]},{"entry":[{},"session.Attribute ((String) request.getParameter(\u201catt\u201d),"]},{"entry":[{},"request.getParameter(\u201cval\u201d));"]},{"entry":[{},"%>"]},{"entry":[{},"<p>Current attributes in the session:"]},{"entry":[{},"<table>"]},{"entry":[{},"<tr>\u2009<td>\u2009<b>Attribute<\/b>\u2009<\/td>\u2009<td>\u2009<b>Name<\/b>\u2009<\/td>\u2009<\/tr>"]},{"entry":[{},"<%"]},{"entry":[{},"java.util.Enumeration e = session.getAttributeNames (\u2009);"]},{"entry":[{},"while e.hasMoreElements (\u2009)) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String name = (String)e.nextElement(\u2009);"]},{"entry":[{},"String value = (String)session.getAttribute(name);"]},{"entry":[{},"out.println(\u201c<tr>\u2009<td>\u201d + name + \u201c<\/td>\u2009<td>\u201d +"]},{"entry":[{},"\u2009value + \u201c<\/td>\u2009<\/tr>\u201d);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"%>"]},{"entry":[{},"<\/table>"]},{"entry":[{},"<\/body>"]},{"entry":[{},"<\/html>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The code excerpt above is fairly representative of the level of complexity in JSP\u2122 pages. A JSP\u2122 page can involve complex processing, but the code that performs the complex processing is typically encapsulated in a bean or in a JSP\u2122 tag, leaving the source of the page itself relatively simple. In many cases, bugs in JSP\u2122 pages can be easily identified by visual inspection of the code. The same is true for servlets. In practice, many of the bugs in JSP\u2122 pages and servlets, or for that matter any dynamic page generation components, arise because of incorrect data flow between the components of the web application. For this reason, source level debugging is too fine grained a process as a first option for debugging JSP\u2122 pages and servlets. If the user has access to the parameter values and other data used by the JSP\u2122 page or servlet, they can often identify the source of the problem much quicker than if they have to go through the overhead of starting a debugger and stepping through the code.","The data passed into the JSP\u2122 page is not easily available to the developer. The data comes from different sources such as the parameters passed in with the HTTP request, cookies, session variables, and HTTP headers. These sources are all managed at the level of the HTTP server as opposed to by the JSP\u2122 page itself, and the HTTP server usually does not provide an easy way of tracking the data. While HTTP request parameters may be shown in the browser's location window for HTTP \u201cget\u201d requests, nothing is shown for HTTP \u201cpost\u201d requests, and cookies and session variables are typically not logged by either the server or the browser. Likewise, there is usually no easy way to display the HTTP headers sent by the client.","In order to be able to test-run and debug the web application efficiently, a mechanism is needed which will allow data flow between the components of the web application to be monitored. If the data flow between the components of the web application can be followed, then the component not behaving correctly can be identified. Even where the problem is not incorrect data flow, monitoring data flow can help quickly determine where the problem arises. Once the component during whose execution the problem arises has been identified, the source of the bug can be isolated. The bug may be in the JSP\u2122 page or servlet itself or in a component which the JSP\u2122 page or servlet invokes. As pointed out above, bugs in the JSP\u2122 page or servlet are often obvious from code inspection. Source level debugging may be needed if the bugs are in components invoked by the JSP\u2122 page or servlet.","In one aspect, the invention relates to an apparatus for monitoring data flow in a web application. The apparatus comprises a data collector which collects data about transactions on a server that hosts components of the web application. The transactions are initiated through an HTTP request from a client. The apparatus further includes a graphical display that displays the collected data. In one embodiment, the data collector comprises a process which uses hooks in the server to intercept the transactions in order to collect data about them. In another embodiment, the data collector comprises a process which uses hooks in a server plug-in application that handles the dynamic components of the web application to intercept the transactions in order to collect data about them. In some embodiments, the data collected by the data collector is selected from the group consisting of attributes of incoming request to and outgoing response from the server, attributes of incoming cookies to and outgoing cookies from the server, status of HTTP session between the server and the client before and after transactions are processed, and attributes of the client.","In another aspect, the invention relates to a method for monitoring data flow in a web application. The method comprises sending a request to a server that hosts components of the web application. Prior to the server processing the request, the method includes intercepting the request to collect data about the request. The method further includes receiving a response from the server. Prior to the server sending the response, the method includes intercepting the response to collect data about the response. The method further includes displaying the collected data in a graphical display.","Other aspects and advantages of the invention will be apparent from the following description and the appended claims.","Embodiments of the invention provide a mechanism for monitoring data flow between the components of a web application during testing and debugging of the web application. Generally speaking, the mechanism comprises a client-side component that may or may not be integrated with an IDE and a server-side component that runs as part of an execution server which could be started by the IDE. For each HTTP transaction, the server-side component records data about the incoming request, about the data states maintained on the server, and about the environments of the servlet or JSP\u2122 that processes the request if there is one. The client-side component lists all HTTP transactions currently handled by the test server and any transactions that have been explicitly saved by the user. Current transactions are kept for the duration of the IDE session. The invention also provides a facility for saving transactions so that the transactions can be explored at a later time.","In the detailed description of the invention which follows, a web application which contains JSPs\u2122 and servlets is used in illustrating the principles of the invention. However, it would be understood by one of ordinary skill in the art that the principles of the invention are applicable to web applications containing other types of dynamic page generation components such as ASPs\u2122 and CGI scripts. Also, for convenience, the following detailed description is outlined into five principal sections, including Architecture overview, Directory Structure, HTTP Transaction Monitor GUI, HTTP Transaction Monitor Server-Side Functionality, and Operation.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 1","b":["2","2","6","6","6","6","6","10","10","6","10","6","6","15","6","10","12","6","6"]},"An HTTP transaction monitor  includes a server-side component  that collects data about HTTP transactions on the execution server  and a client-side component  that displays the collected data. The HTTP transactions can either be initiated by the IDE  or through an external HTTP client, e.g., a browser, pointed to the host and port of the execution server . The server-side component  comprises the data collector  which is responsible for collecting data before and after the execution server  processes the HTTP requests. In one implementation, the data collector  runs on the execution server  and relies on hooks in the execution server  to intercept HTTP requests in order to collect data about them. In an alternate embodiment, the data collector  uses hooks in a server plug-in application that handles the dynamic components of the web application, e.g., a servlet engine, to intercept HTTP requests in order to collect data about them. The collected data is written to files in a directory .","The client-side component  is accessible through the IDE . The client-side component  includes a GUI  that displays the transactions for which the server-side component  has collected data. The client-side component  further includes a mechanism for receiving notification of new HTTP transactions, which are subsequently listed on the GUI . In one embodiment, this functionality is handled by a servlet  which runs on the internal server  and is called whenever the server-side component  records a new transaction.","In one implementation, the directory  is treated as part of the server-side component  and is installed as a web module on the execution server . In alternative embodiments, the directory  may maintained by the client-side component . The contents of the directory  include the following:\n\n","In one implementation, the directory  contains a list of servlets which are invoked by the client-side component . The servlets, indicated collectively at , perform the following functions:\n\n",{"@attributes":{"id":"p-0060","num":"0065"},"figref":["FIGS. 2\u20134","FIG. 1"],"b":["22","22","6","22","24","26","28","22","26","28","26","22"]},"Entries in the \u201cCurrent Transactions\u201d subcategory are available during the current IDE session, while entries in the \u201cSaved Transactions\u201d subcategory persist until they are deleted by the user. The entries in the \u201cCurrent Transactions\u201d and \u201cSaved Transactions\u201d subcategories are obtained from the \u201ccurrent\u201d and \u201csave\u201d subdirectories in the directory  (shown in ).","Individual transaction nodes in the \u201cCurrent Transactions\u201d subcategory have two actions: \u201cDisplay\u201d and \u201cSave.\u201d In the \u201cSaved Transactions\u201d subcategory, the individual transactions have \u201cDisplay\u201d and \u201cDelete\u201d actions. The \u201cDisplay\u201d action causes data about the corresponding transaction to be shown in the right pane . The data can also be displayed simply by selecting the node. In one implementation, the \u201cSave\u201d action sends a message to the execution server  (shown in ) to mark the corresponding transaction records as saved. This assumes that the directory  (shown in ) is installed as a web module on the execution server. If the directory  (shown in ) is maintained by the client-component  (shown in ), the \u201cSave\u201d action causes the client-component  itself to perform this task. Similarly, the \u201cDelete\u201d action causes the records for the corresponding transactions to be deleted and removes the node from the GUI . In one implementation, the list of actions available under each transaction category is displayed in a pop-up menu ( in ) when the user clicks on a transaction.","Each of the nodes corresponding to the parent categories \u201cAll Transactions,\u201d \u201cCurrent Transactions,\u201d and \u201cSave Transactions\u201d have a \u201cDelete\u201d action which causes the individual transactions underneath them to be deleted. Invoking the \u201cDelete\u201d action on the \u201cAll Transactions\u201d category deletes all transaction entries and removes all nodes from the GUI . Invoking \u201cDelete\u201d action on \u201cSaved Transactions\u201d deletes all saved transactions and removes the node in the \u201cSaved Transactions\u201d category. Invoking \u201cDelete\u201d action on \u201cCurrent Transactions\u201d deletes all current transactions and removes the node in the \u201cCurrent Transactions\u201d category. A row of buttons  above the transaction list allows the user to reload all transactions and to modify display parameters. The button  reloads all the transactions. The button  displays the transactions in alphabetical order, by LRI. The button  displays the transactions in temporal order, last transaction last. The button  displays the transactions in reverse temporal order, last transaction first. The button  toggles whether the time stamp of the transaction is shown or not.","The right pane  of the frame  includes a label  which displays the LRI and timestamp of the currently selected transaction. The right pane  also includes a display component  consisting of six tabs  and data display . In one embodiment, the data display  is an embedded HTML browser without toolbar and controls. The six tabs  are labeled \u201cRequest,\u201d \u201cCookies,\u201d \u201cSession,\u201d \u201cServlet,\u201d \u201cClient,\u201d and \u201cAll,\u201d respectively. The \u201cRequest,\u201d \u201cCookies,\u201d \u201cSession,\u201d \u201cServlet,\u201d and \u201cClient,\u201d tabs correspond to the five categories of data collected by the server-side component  and will be further described in the next section. In , the \u201cCookies\u201d tab is selected, causing the attributes of incoming and outgoing cookies for the transaction selected on the left pane  to be displayed inside the data display . When the \u201cSession\u201d tab is selected, the session status before and after the transaction selected on the left pane  is displayed inside the data display . When the \u201cRequest\u201d tab is selected, properties of the request and response associated with the transaction selected on the left pane  is displayed inside the data display . The \u201cServlet\u201d and \u201cClient\u201d tabs cause servlet properties data and client data, respectively, to be displayed in the data display  for a selected transaction. The \u201cAll\u201d tab causes the all transaction data to be displayed at once in the data display .",{"@attributes":{"id":"p-0065","num":"0070"},"figref":"FIG. 3","b":["22","6","22","6","22","22","6","6","6"]},"Referring to , for each HTTP transaction that the execution server  processes, a new directory is created under the subdirectory \u201ccurrent\u201d in the directory . The name of the new directory uniquely identifies the HTTP request. Five categories of data are collected and saved in five files. The categories of data collected are specified in Table 1 below.",{"@attributes":{"id":"p-0067","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Types of Data Collected by Server-Side Component"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Category","Type of Data Collected"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Request","The HTTP method, the LRI, path information (if"]},{"entry":[{},{},"appropriate), the query string, the protocol version,"]},{"entry":[{},{},"the referrer (if appropriate), the value of any"]},{"entry":[{},{},"incoming parameters, and the exit status of the"]},{"entry":[{},{},"HTTP response. (See FIG. 4)"]},{"entry":[{},"Cookies","List of incoming and outgoing cookies. For"]},{"entry":[{},{},"incoming cookies, the name and value is provided."]},{"entry":[{},{},"For outgoing cookies, the name, value, domain"]},{"entry":[{},{},"time to live, path and whether the cookie requires"]},{"entry":[{},{},"secure protocol. (See FIG. 2)"]},{"entry":[{},"Session","Whether the session exists before and after the"]},{"entry":[{},{},"transaction. Which attributes were set and what"]},{"entry":[{},{},"their values are before and after the transaction."]},{"entry":[{},{},"The session's properties: its ID, when it was"]},{"entry":[{},{},"created, its maximum inactive interval, and when"]},{"entry":[{},{},"it was last accessed. (See FIG. 3)"]},{"entry":[{},"Servlet","Name of the servlet as configured, its class name,"]},{"entry":[{},"Properties","its package name, the description given by the"]},{"entry":[{},{},"developer, and the relative path to the servlet. The"]},{"entry":[{},{},"servlet's initialization parameters, if there are any."]},{"entry":[{},{},"The absolute path to the J2EE\u2009\u2122 context. The"]},{"entry":[{},{},"servlet engine's properties (Java Development Kit"]},{"entry":[{},{},"and platform)."]},{"entry":[{},"Client","The version of the HTTP protocol, the client's IP"]},{"entry":[{},{},"address, any other information provided through"]},{"entry":[{},{},"the HTTP headers such as the nature of the client"]},{"entry":[{},{},"(e.g., the type and version of the browser)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"22","figref":"FIG. 2"},"The data collector  intercepts HTTP requests before and after the execution server  processes them to collect the data. For the Tomcat web server, for example, a single instance of the \u201cRequestInterceptor\u201d API can be used to collect data. The Tomcat web server is an open-source software project jointly run by Apache Software Foundation and Sun Microsystems, Inc. The \u201cRequestInterceptor\u201d API provides hooks for invoking methods before and after the HTTP request is processed. Before processing the HTTP request, the HTTP request is intercepted on the execution server  in order to collect data about the client, the session state before the transaction, incoming cookies, servlet properties data, and all the request data except the exit status (see Table 1 above). Before sending the HTTP response corresponding to the HTTP request to the client, the HTTP response is intercepted on the execution server  in order to collect data about outgoing cookies, the session state after the transaction, and the exit status. After collecting data, the data collector  notifies the servlet  that a new transaction has been recorded in the directory . The servlet  then calls the appropriate one of the servlets  to get the data to create the new transaction node in the GUI . In another embodiment, the \u201cFilter\u201d API, as described in the version 2.3 of the Java\u2122 Servlet specification, can be used for the same purpose as the \u201cRequestInterceptor\u201d API.","The testing of a web application involves among other tasks verifying that each dynamic web component, e.g., JSP\u2122 page or servlet in the case of a Java web application, generates the appropriate result for all possible input. This involves testing individual web components and also sequences of components as they would be traversed by a user who browses the web site. In the discussion which follows, the web application to be tested has been developed in an IDE, for example, the IDE  (shown in ). The IDE  (shown in ) must be running to test-run and debug the web application. The developer can execute the JSP\u2122 pages or servlets from the IDE. The HTTP transaction monitor GUI  is displayed by either one of two previously described mechanisms. As shown in , the contents of a web application is displayed in an Explorer GUI  that is included in the IDE . The developer selects a page in the web application and then asks the IDE  to display the page. For example, in , a JSP\u2122 page called \u201cinput\u201d has been selected. To display the page, the IDE  sends an HTTP request to the execution server  (shown in ). The output of the execution server  (shown in ), i.e., the HTTP response, is displayed in the browser  which is included in the IDE .","Before the execution server  (shown in ) processes any incoming HTTP request, the data collector  (shown in ) intercepts the request and collects data about the request. After collecting the data, control is returned to the execution server  (shown in ), and the execution server  (shown in ) processes the request. The execution server  (shown in ) invokes a servlet (not shown) generated from the JSP\u2122 page with the data that came in with the HTTP request. After processing, the execution server  (shown in ) sends the response page back to the browser . Before the response page is sent to the browser , the data collector  (shown in ) again intercepts the response, collects data on the response, and then yields control back to the execution server  (shown in ). After collecting data, the data collector  (shown in ) invokes the servlet  (shown in ) to update the GUI . As shown, a \u201cGet inputjsp\u201d node has been added to \u201cCurrent Transactions\u201d subcategory on the left pane  of the GUI . The browser  displays the \u201crequest\u201d data collected by the data collector  for the \u201cGet inputjsp\u201d transaction. In , the \u201csession\u201d data collected by the data collector  for the \u201cGet inputjsp\u201d transaction is displayed in the browser . A pop-up menu  is also shown which allows the data associated with the \u201cGet inputjsp\u201d node to be saved for future use.","For illustrative purposes, assume that the \u201cinputjsp\u201d page includes a form with input fields for user input. A sample listing of such a page is shown below, and the rendering of the page is shown in the browser  in .",{"@attributes":{"id":"p-0072","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing of input.jsp"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<%@page contentType =\u201ctext\/html\u201d%>"]},{"entry":[{},"<html>"]},{"entry":[{},"<head>"]},{"entry":[{},"<title>Input Page<\/title>"]},{"entry":[{},"<\/head>"]},{"entry":[{},"<body>"]},{"entry":[{},"<h1>Input page<\/h1>"]},{"entry":[{},"<form method=\u201cPOST\u201d action=\u201coutput.jsp\u201d>"]},{"entry":[{},"<table>"]},{"entry":[{},"<tr>\u2009<td>Attribute<\/td>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<td>\u2009<input type=text size=12 name=\u201catt\u201d>\u2009<\/td>\u2009<\/tr>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<tr>\u2009<td>Value<\/td>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<td>\u2009<input type=text size=12 name=\u201cval\u201d>\u2009<\/td>\u2009<\/tr>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<tr>\u2009<td>\u2009<input type=\u201csubmit\u201d name=\u201cSubmit Query\u201d>\u2009<\/td>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<td>\u2009<\/td>\u2009<\/tr>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/table>"]},{"entry":[{},"<\/form>"]},{"entry":[{},"<\/body>"]},{"entry":[{},"<\/html>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0073","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing of output.jsp"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<% @page contentType=\u201ctext\/html\u201d%>"]},{"entry":[{},"<html>"]},{"entry":[{},"<head>"]},{"entry":[{},"<title>Output Page<\/title>"]},{"entry":[{},"<\/head>"]},{"entry":[{},"<body>"]},{"entry":[{},"<h1>Output page<\/h1>"]},{"entry":[{},"<p>You added the following attribute to the session:"]},{"entry":[{},"<table>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0074","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing of output.jsp"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<tr>\u2009<td>\u2009<b>Attribute:<\/b>\u2009<\/td>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<td>\u2009<%=request.getParameter(\u201catt\u201d)%>\u2009<\/td>"]},{"entry":[{},"<td>\u2009<b>Value<\/b>\u2009<\/td>"]},{"entry":[{},"<td>\u2009<%=request.getParameter(\u201cval\u201d)%>\u2009<\/td> <\/tr>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/table>"]},{"entry":[{},"<%"]},{"entry":[{},"session.Attribute((String) request.getParameter(\u201catt\u201d),"]},{"entry":[{},"request.getParameter(\u201cval\u201d));"]},{"entry":[{},"%>"]},{"entry":[{},"<p>Current attributes in the session:"]},{"entry":[{},"<table>"]},{"entry":[{},"<tr>\u2009<td>\u2009<b>Attribute<\/b>\u2009<\/td>\u2009<td>\u2009<b>Name<\/b>\u2009<\/td>\u2009<\/tr>"]},{"entry":[{},"<%"]},{"entry":[{},"java.util.Enumeration e = session.getAttributeNames (\u2009);"]},{"entry":[{},"while e.hasMoreElements(\u2009)) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String name = (String)e.nextElement(\u2009);"]},{"entry":[{},"String value = (String)session.getAttribute(name);"]},{"entry":[{},"out.println(\u201c<tr>\u2009<td>\u201d + name + \u201c<\/td>\u2009<td>\u201d +"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"value + \u201c<\/td>\u2009<\/tr>\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"%>"]},{"entry":[{},"<\/table>"]},{"entry":[{},"<\/body>"]},{"entry":[{},"<\/html>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"figref":"FIG. 5","b":"52"},"With a \u201cpost\u201d request, the data transmitted to the execution server  is not shown as part of the URL in the browser , i.e., no parameters are appended to the URL. The URL is displayed in the location window  of the browser . Before the execution server  (shown in ) processes the \u201cpost\u201d request, the data collector  (shown in ) intercepts the request and collects data about the request. After collecting the data, control is returned to the execution server  (shown in ), and the execution server  (shown in ) processes the request to generate the response page shown in . Before the execution server  (shown in ) sends the response page to the browser , the data collector  again collects data about the response. The data collected by the data collector  (shown in ) is added as a \u201cPOST outputjsp\u201d node to the \u201cCurrent Transactions\u201d subcategory on the left pane  of the GUI . Note that the \u201cGet inputjsp\u201d node has been moved to the \u201cSaved Transactions\u201d subcategory by invoking the \u201cSave\u201d action (see ).",{"@attributes":{"id":"p-0076","num":"0081"},"figref":["FIG. 5","FIG. 6","FIG. 4","FIG. 7"],"b":["48","22","48","22","48","22","48","22","48","48","52","10"]},"The invention provides general advantages. Using the data collected by the data collector , the developer can examine the attributes of incoming requests and outgoing responses on the execution server  through the GUI , thus allowing data flow in the web application to be monitored. If a problem arises, the developer can easily find the source of the problem by examining the transactions between the browser and the server. The problematic transactions can be saved, for example, by clicking on them and choosing the \u201csave\u201d action. The developer then has the opportunity to return at a later time to examine the transactions. The invention is not limited to IDE's but can be used in web application testing\/debugging tools in the same manner described above. Testing tools will typically not provide the facility to fix the problem in real-time, but the problem can be noted and then sent to the developer who will fix them.","While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of this disclosure, will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly, the scope of the invention should be limited only by the attached claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIGS. 6 and 7","FIG. 5"]}]},"DETDESC":[{},{}]}
