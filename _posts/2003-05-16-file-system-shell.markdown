---
title: File system shell
abstract: A file system shell is provided. One aspect of the shell provides virtual folders which expose regular files and folders to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Users are able to work with the virtual folders through direct manipulation (e.g., clicking and dragging, copying, pasting, etc.). Filters are provided for narrowing down sets of items. Quick links are provided which can be clicked on to generate useful views of the sets of items. Libraries are provided which consist of large groups of usable types of items that can be associated together, along with functions and tools related to the items. A virtual address bar is provided which comprises a plurality of segments, each segment corresponding to a filter for selecting content. A shell browser is provided with which users can readily identify an item based on the metadata associated with that item. An object previewer in a shell browser is provided which is configured to display a plurality of items representing multiple item types.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07409644&OS=07409644&RS=07409644
owner: Microsoft Corporation
number: 07409644
owner_city: Redmond
owner_country: US
publication_date: 20030516
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE(S) TO RELATED APPLICATION(S)","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This application is related to U.S. applications attorney docket Nos. MSFT-1-20362, MSFT-1-20460, MSFT-1-20699, MSFT-1-20700, and MSFT-1-20790, and U.S. application Ser. Nos. 10\/395,533 and 10\/395,560, each of which is hereby incorporated by reference in its entirety.","The present invention relates to file systems, and more particularly, to a file system shell.","Present computer file systems have a number of undesirable limitations. One limitation is that users are generally unable to control the structure that they are shown. In other words, when folders are organized, a user must choose a structure, and that structure is then difficult to change. As a specific example, for a \u201cmusic\u201d folder, a user may choose to organize the music files in an artist\/album format, wherein all of the album folders for each artist are grouped into that particular artist's folder, and all of the songs on a particular album are grouped into that album's folder. The artist\/album format is not conducive to playing a type of music (e.g., playing two jazz songs from two different artists), or for playing a selection of albums from different artists.","As another issue, a user may have a large number of files which are difficult to organize. Some users implement a rigid sense of placement for the files, and thus create strict hierarchies for them. The management of such files become increasingly complex and difficult as the number of available documents grows, making search and retrieval also difficult. This problem is further exacerbated when additional files are utilized from other locations, such as shared files, etc.","Users also have to deal with files being in different locations, such as on different devices, on other PCs, or online. For example, users can select to listen to their music on the computer (as may be accessible to a music program) or can go online and listen to music from Web sites, however there is a strict division between these two sources. Music coming from different locations is organized differently, and not kept in the same fashion or place. As another example, files stored on a corporate network may inherently be separated from files a user has on a current machine.","Users also have to keep track not only of what file data is stored, but where it is stored. For example, for music files, users are forced to keep copies on various systems and to try to track which music files are located where. This can make files difficult to locate, even when they are locally stored.","It is also sometimes difficult to find and return to files that a user has. A user may find it difficult to recall where and how they stored certain files. Given a set of folders and even a group of similar files, users often find it difficult to quickly find the one that they are looking for. For files stored in a difficult place to find, it is that much more complex to locate. In addition, once users have enough files in a folder, it becomes more difficult to parse the folder quickly, especially if the contents are similar.","It is also sometimes difficult for users to find or return to files on a network. Sharing and publishing files is often hard to do, and it may often be even more difficult to retrieve such a file from someone who makes it available. Users typically have to memorize or map the various sites and names that they need for finding files on a network.","Name spaces may vary, which can cause confusion to the user as to what is \u201ccorrect.\u201d This is particularly true on a network where there are different naming conventions, limitations, and so on. For example, certain operating systems may require short names with no spaces in order for them to be visible.","Programs also often save files to their own directory or other name spaces, which can make it difficult for users to find their way back to the files. Programs often have default directories and places they save documents. A user often has to search through their hard disk and make guesses about where a file is stored.","Related items are also often stored in separate places. Related files that a user has may be stored on different parts of the hard disk, etc. This problem becomes more common with the developments of digital media services that have multiple content types (e.g., pictures, music, video).","Another issue with file systems is related to the address bar. As users navigate within a file system on a computer, a conventional graphical interface control, referred to as an address bar, shows the users where they are in the file system hierarchy. The conventional address bar shows the current location in terms of the file system's hierarchical structure of folders, subfolders, and files. Altering the user's location displayed in the conventional address bar is typically performed in one of two manners. The first is to manually edit the address in the address bar. Manually editing the address in the address bar permits a user to relocate to any number of locations in the file system hierarchy, but requires the user to have specific information regarding the organization of the file system on the computer, i.e., a specific file system location. The second method involves using external navigation tools which, when manipulated, update the address bar to reflect the new address or location. While bypassing the manual edit of the address in the address bar, manipulating external navigation tools still requires the user to have specific information concerning the organization of the file system and traverse the hierarchical structure. However, conventional address bars cannot reference files or data stored among multiple file system locations, such as folders or drives, due to a one-to-one relationship between the address in the address bar and a specific location in the file system hierarchy.","The prior art lacks an address bar that allows users to specify addresses that display files stored among multiple file system locations. The prior art further lacks an address bar that also permits users to easily modify the address of the address bar without manually editing the address, or requiring specific knowledge concerning the organization of the underlying file system. Also lacking in the prior art is an address bar that presents alternative selections of files to the user from which the user may select to navigate to those selections of files. Such an address bar could also selectively present a conventional address bar interface to the user enabling the user to interact with the address bar according to previous experience according to user preferences.","Another issue with file systems is related to the identification of items stored on a computer. The need to readily identify items stored in a computing environment such as a personal computer (PC) is dramatically increasing as more individuals utilize computers in their daily routines and as the type of stored information varies between pictures, music, documents, etc. Documents and media are typically stored on computers in a hierarchical fashion and are organized with files of information or media stored within folders. File system browsers enable users to navigate through the file system and locate and open files and folders. For example, Microsoft Corporation's WINDOWS\u00ae EXPLORER\u2122 is an operating system utility which enables users to browse the file system.","Many users find it difficult to correctly identify a file based on the information currently available in conventional file system browsers. Of course the contents of a file can be verified by opening it with an application program, but this method of browsing files is extremely inefficient. The ability to view metadata about a file within a file system browser can greatly assist a user in identifying a particular file without having to open it. In Microsoft Corporation's WINDOWS\u00ae 9X operating systems, for example, a user can view object metadata by accessing the property sheet for a particular object. A property sheet presents the user with a list of the attributes or settings of an object in the form of a tabbed, index-card-like selection of property pages, each of which features standard dialog-style controls for customizing parameters. However, using the property sheet to locate an item can be slow and cumbersome, and some users find it difficult to locate the relevant metadata in a property sheet. Similarly, the use of infotips to locate an item can be slow and cumbersome because a user must hover the mouse over each file in order to view the limited metadata displayed in an infotip.","Conventional file system browsers do not allow users to enter and edit metadata relating to files and folders, which would significantly enhance a user's ability to later locate a file. To date, the ability of users to enter and edit metadata has been limited to special purpose software programs. For example, media players for electronic music files present users with the ability to edit metadata associated with music albums and artists. Another example of such programs includes application programs for electronic picture files. However, the utility of media players and other such programs is limited to the particular type of file supported by the program, as opposed to a general purpose file system browser which supports multiple file types.","Microsoft Corporation's WINDOWS\u00ae XP operating system includes an image browser for use in the My Pictures folder. The My Pictures folder is endowed with special features which enable users to view pictures as photos, not just as document icons. My Picture's image browsing features include the ability to view thumbnail-size and large versions of photos, rotate photos that are sideways, and create a slide show. A user can also view a photo's details, such as its dimensions, the date and time it was taken, and the name of the camera that took it. The preview control area in the My Picture's folder contains an enlarged preview image of a user-selected image, iterator buttons to assist a user in iterating through a series of pictures and controls for rotating pictures in a clockwise or counterclockwise direction. While the image browsing features in WINDOWS\u00ae XP have advanced the state of the art by alleviating the need to invoke an application program to view and manipulate pictures, users still cannot enter and edit metadata associated with the pictures.","Accordingly, there is a need for an improved user experience within a shell or file system browser which enables users to readily locate an item based on the metadata associated with that item. There is also a need for a system and method which allow users to enter and edit metadata associated with items of various types within a shell browser without the need to invoke an application program. There is also a need for a file system or shell browser which offers users improved file content recognition features so that users can readily locate their files. A need also exists for an improved graphical user interface for a shell browser which allows for the selection of a previewer for a particular file type from a plurality of available previewers. There is also a need for an extensible shell browser which would allow software developers to provide additional information and functionality to users on a file type basis. There is also a need to provide a similar UI experience across different collections of items.","In accordance with one aspect of the invention, a system and method utilizing virtual folders is provided. The virtual folders expose regular files and folders (also known as directories) to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Thus, the system is able to take a property that is stored in the database and represent it as a container that is like a folder. Since users are already familiar with working with folders, by presenting the virtual folders in a similar manner, users can adapt to the new system more quickly.","In accordance with another aspect of the invention, the virtual folders are provided according to a method that is utilized in a computer system having a display and a memory for storing the items. In accordance with the method, a metadata property is selected. The system then searches for items that have the selected metadata property, and a virtual folder display object is provided that represents the collection of items that have the metadata property.","In accordance with another aspect of the invention, the system includes a folder processor that obtains queries from a user and a relational database for storing information about the items. The folder processor first obtains a query from a user and passes the query to the relational database. The relational database provides results back to the folder processor, and based on the results from the relational database, the folder processor provides the results to the user as virtual folders. In one embodiment, the results that are provided back to the folder processor include database rows and columns. The database rows and columns are converted by the folder processor into an enumerator structure, which is then used to populate the display with the resulting virtual folders.","In accordance with another aspect of the invention, users are able to work with the virtual folders through direct manipulation. In other words, the mechanisms that are provided for manipulating the virtual folders are similar to those that are currently used for manipulating conventional physical folders (e.g., clicking and dragging, copying, pasting, etc.).","In accordance with another aspect of the invention, the method for performing the direct manipulation of the virtual folders is provided in a computer system having a display and a memory for storing the items. In accordance with the method, groups of items are represented as virtual folders. Defined actions are provided that can be performed for direct manipulation of the virtual folders, wherein when a defined action is performed, the virtual folder is manipulated as directed by the defined action. An example of a defined action would be clicking and dragging a virtual folder. In one embodiment, the action of clicking and dragging a first virtual folder to a second virtual folder performs the function of copying the items from the first virtual folder to the second virtual folder. The copying of items to a virtual folder may involve adding or otherwise altering selected metadata properties that are associated with the items.","In accordance with another aspect of the invention, filters are provided for manipulating the virtual folders. The filters are essentially tools for narrowing down a set of items. In one embodiment, the filters are dynamically generated based on the properties of the separate items. For example, for a set of items, the filter mechanism may review the properties, and if the items generally have \u201cauthors\u201d as a property, the filter can provide a list of the authors. Then by clicking on a particular author, the items that don't have the author disappear. This allows the user to narrow the contents.","In accordance with another aspect of the invention, a method for filtering items is provided in a computer system having a display and a memory for storing items with metadata properties. Display objects are provided on the display that each represent one or more items. The metadata properties of the items that are represented by the display objects are evaluated. A filter term is provided on the display that corresponds to a metadata property that is shared by a plurality of the items, wherein the selection of the filter term causes the items that are represented on the display to be reduced to those items that share the specified metadata property.","In accordance with another aspect of the invention, a plurality of items are represented on the display, and a filter term is dynamically generated based on the metadata properties of the items. When the filter term is selected, it reduces the items that are represented on the display to those that have the metadata property that corresponds to the filter term.","In accordance with another aspect of the invention, a plurality of items are represented on the display, and a filter area is provided in which a user can enter a filter term. When a filter term is entered by the user, the items that are represented on the display are reduced to those that contain the filter term. As the user types the filter term, additional items may be filtered as each new character is added to the filter term.","In accordance with another aspect of the invention, a back button is provided which may be used to back through a filtering process. For example, after a user has entered a filter term, the user may wish to return to the set of items that were represented on the display before the filter term was applied. The back button allows the user to back up to the desired point in the filter navigation.","In accordance with another aspect of the invention, quick links are provided. In one embodiment, quick links are a set of predefined links (e.g., located on the left side of the display) that can be clicked on to generate useful views of the sets of items. These can be predefined by the program, or set by a user. For example, clicking on \u201call authors\u201d could return a view stacked by authors. \u201cAll documents\u201d may return a flat view of all the documents across all of the storage areas. Users can also create their own quick links. For example, a user might filter down to all of the documents that they modified in January 2003, and then could save that as a quick link.","In accordance with another aspect of the invention, a method for providing quick links is implemented in a computer system having a display and a memory for storing items. In accordance with the method, a user first navigates to a view of a desired collection of items. A quick link that corresponds to the desired collection of items is saved and is provided with a name. The name of the quick link is presented on the display such that by clicking on the quick link a user can return to the view of the desired collection of items.","In accordance with another aspect of the invention, libraries are provided. Libraries consist of large groups of usable types of files that can be associated together. For example, photos may be one library, music may be another, and documents may be another. The libraries provide tools and activities that are related to the particular types of items. For example, in the photo library, there are tools and filters that relate to manipulating photos, such as for creating slide shows or sharing pictures.","In accordance with another aspect of the invention, a method for creating libraries is provided in a computer system with a display and a memory for storing items. The method begins by creating a library to contain items with one or more specified metadata properties. Then, items with the one or more specified metadata properties are automatically grouped into the library. Tools are also provided for manipulating the items of the library.","In accordance with another aspect of the invention, a wide scope of files or items may be available. In other words, the system is able to represent files\/items from multiple physical locations (e.g., different hard drives, different computers, different network locations, etc.) so that to a user all the items appear to be from one location. For example, a user can be presented with all of their music files on a single screen, and manipulate the files all from one view, even though the files may be physically stored on different hard drives, different computers, or different network locations.","In accordance with another aspect of the invention, a scope is utilized in a method for displaying items in a computer system having a display. The method involves defining a scope of the physical memory locations from which items are to be drawn, the scope comprising the present computer memory and at least one other physical location. Once a query is received, in response to the query items are drawn from the physical locations as defined in the scope, and the items that are drawn from the query are then presented in a view on the display. In one embodiment, the at least one other physical location may be another computer, a location on a network, or an external storage device. In one embodiment, the view on the display can be switched to a physical folder view which indicates the physical locations where the items are physically stored.","In accordance with another aspect of the invention, non-file items may be represented in the virtual folders. In other words, files that are stored in memory are located in a physical store. The virtual folders can be made to include items that are not currently represented in the physical store. Examples of non-file items are e-mails, and contacts.","In accordance with another aspect of the invention, a method for presenting non-file items is implemented in a computer system with a display and a memory for storing items. The method includes providing a database that allows both non-file items and file items to be searched by a query. Once a query is received, both non-file items and file items that match the query are drawn, and the items that match the query are then presented on the display. In one embodiment, a relational database is provided that includes selected information about file items, and which may hold certain non-file items in their entireties.","In accordance with another aspect of the invention, a virtual address bar for selecting content stored on a computer file system is provided. A virtual address bar comprises a plurality of segments. Each segment corresponds to a filter for selecting content stored on the computer file system. Collectively, the corresponding filters of each segment in the virtual address bar represent a virtual address for selecting content stored on a computer file system.","Each segment is an interactive segment that can respond to user interactions to modify the virtual address of the virtual address bar. Selecting a segment in the virtual address bar causes those segments subsequent to the selected segment to be removed from the virtual address bar. Alternatively selecting a segment in the virtual address bar causes a list of selectable peer filters to be displayed to the user. The peer filters are peers to the alternatively selected segment's corresponding filter. Selecting one of the peer filters causes the alternatively selected segment to replace its corresponding filter with the selected peer filter. Additionally, those segments subsequent to the alternatively selected filter segment are removed from the virtual address bar.","Segments may be added to the virtual address bar according to external user actions. Segments are added at the end of the segments in the virtual address bar. Any segments that conflict with an added segment are removed. An existing segment in the virtual address bar conflicts with the added segment when the existing segment is mutually exclusive to the added segment. An existing segment in the virtual address bar also conflicts with the added segment when the existing segment is broader or narrower in scope than the added segment.","In accordance with another aspect of the invention, a shell browser is provided which includes a window and an edit control. The window displays a group of items and also displays metadata values associated with one or more of the displayed items. The edit control permits user modification of at least a portion of the metadata values displayed in the window.","In accordance with another aspect of the invention, a graphical user interface is embodied on a computer-readable medium and is executable on a computer. The graphical user interface includes a first screen area which displays a set of items in a shell browser and a second screen area which displays metadata associated with one or more of the displayed items. The graphical user interface also presents the user with means within the shell browser for modifying the displayed metadata.","In accordance with a further aspect of the invention, computer-implemented methods are provided for enabling a user to modify metadata within a shell browser. One such method includes displaying a plurality of items, receiving a first input from the user representing a selection of at least one displayed item, displaying metadata associated with the selected item(s) and providing an edit control for user modification of the displayed metadata. Another such method includes displaying a welcome pane and metadata associated with the welcome pane and providing an edit control for user modification of the displayed metadata.","In accordance with another aspect of the invention, a data structure containing metadata associated with one or more items is displayed in a shell browser. The data structure, which is stored on one or more computer-readable media, includes a field containing user modifiable metadata associated with the one or more displayed items, and the user modifiable metadata contained in the data structure is also displayed in the shell browser.","In accordance with another aspect of the invention, a shell browser is provided which includes a default previewer and an extensibility mechanism. The default previewer provides a standard level of functionality for multiple item types. The extensibility mechanism enables functionality beyond the standard level provided by the default previewer for one or more of the item types.","In accordance with another aspect of the invention, a shell browser is provided which includes a first previewer and a second previewer. The first previewer provides a standard level of functionality for multiple item types, and the second previewer provides an alternative or extended level of functionality for one or more of the multiple item types. The shell browser is configured to selectively deploy either the first previewer or the second previewer for the one or more item types.","In accordance with another aspect of the present invention, a graphical user interface for a shell browser which supports multiple item types is provided. The graphical user interface includes a first screen area for displaying a set of items in the shell browser and means for selecting a previewer for the displayed items from a plurality of available previewers.","In accordance with another aspect of the invention, a computer-implemented method is provided for selecting a previewer in a shell browser which supports multiple item types. The method includes providing a plurality of previewers in the shell browser for a particular item type and selecting one of the previewers for the particular item type. The method then associates the selected previewer with the particular item type.","In accordance with another aspect of the invention, a computer-implemented method is provided for enabling the use of third party previewers in a shell browser which supports multiple item types. The method includes providing a shell browser having a default previewer for the multiple item types and providing an extensibility mechanism which enables a third party to develop an alternative previewer for at least one of the multiple item types.","In accordance with another aspect of the invention, a data structure is provided which contains information indicative of a plurality of previewers in a shell browser. The data structure, which is stored on one or more computer-readable media, includes a first field containing information indicative of a default previewer which supports multiple item types. A second field contains information indicative of an alternative previewer for a first item type, and a third field contains information indicative of whether to invoke the default previewer or the alternative previewer when items of the first item type are displayed in the shell browser.","In accordance with another aspect of the invention, different types of items are grouped into libraries for which a similar set of basic UI features are provided. In other words, a similar set of basic UI features is provided for different types of libraries, such as a document library, a photo library, and a music library. This set of basic UI features may include features such as filtering, creating new categories, editing the metadata of the items, altering the pivots, etc. The similar set of basic UI features for the libraries allows a user to process and organize different types of items using attributes and features they are already familiar with.","The present invention is directed to a file system shell which incorporates a number of desirable features. In essence, the shell provides users with the ability to view and manipulate files and other items that are stored on a computer. The following description first provides a summary of the features that are shown in the , and then provides a detailed discussion.","In summary,  are generally directed to an overall system for virtual folders. Virtual folders provide a method for allowing a conventional user interface to expose regular files and folders (also known as directories) to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk.  are generally directed to stacks, which are related to the ability of the virtual folders to take any property that is stored in the database and represent it as a container that is like a folder.  are generally directed to direct manipulation of virtual folders, which relates to providing mechanisms for manipulating virtual folders that are similar to the mechanisms currently used for manipulating standard folders (e.g., copying, pasting, clicking and dragging, etc.).  are generally directed to filters, which provide a set of tools for narrowing down a set of files\/items.  are generally directed to quick links, which are a set of predefined links that can be clicked on to generate useful views of sets of files\/items.  are generally directed to libraries, which are related to the concept that groups of usable types of files can be associated together, and that tools and activities that are related to the particular types of items can be provided.  are generally directed to scope which is related to the concept of being able to acquire files\/items from multiple physical locations (e.g., different hard drives, different computers, from a computer in a network location, etc.) so that to the user all the files\/items are presented with the same convenience as if they were being provided from one location.  are generally directed to non-file items, which can be included in the database along with files, and which can include items such as emails and contacts.  are generally directed to a virtual address bar which comprises a plurality of segments, each segment corresponding to a filter for selecting content.  are generally directed to a shell browser, with which users can readily identify an item based on the metadata associated with that item.  are generally directed to extending the functionality of an object previewer in a shell browser configured to display a plurality of items representing multiple item types. The following description provides a detailed discussion of each of these aspects of the invention.","As noted above,  are generally directed to a system for implementing virtual folders. Virtual folders utilize the same or similar user interfaces that are currently used for file systems. The virtual folders expose regular files and folders (also known as directories) to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Location-independent views are created which allow users to manipulate their files and folders utilizing similar controls as those presently used for managing file systems. In general, this means that users can organize and rearrange their files based on inherent properties in the files themselves, instead of the managing and organization being done as a separate part of the system. The virtual folders may represent files or items from different physical locations, such as from multiple disk drives within the same computer, between multiple computers, or different network locations, such that one view of files or items can expose files or items sitting at different physical locations. In one embodiment, the different items or files need only be connected via an IP network in order to be included.","The virtual folder modeling is also able to be used for traditionally non-file entities. An application of this is to have a set of user interfaces similar to files and folders (that is, objects and containers) to show traditionally non-file entities. One example of such non-file entities would be e-mails, while another would be contact information from a contact database. In this manner, virtual folders provide for a location-independent, metadata-based view system that works regardless of whether the data being shown is from files or non-file entities. In general, these aspects allow more flexibility in terms of letting users manipulate their files and data, using both common user interface techniques (drag and drop, double-click, etc.) as well as leveraging the rich integration of various data types.",{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 1"},"Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer.","Generally, program modules include routines, programs, characters, components, data structures, etc., that perform particular tasks or implement particular abstract data types. As those skilled in the art will appreciate, the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer , including a processing unit , system memory , and a system bus  that couples various system components including the system memory  to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that helps to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive  for reading from or writing to a hard disk , a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk , such as a CD-ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage of computer-readable instructions, data structures, program modules, and other data for the personal computer . Although the exemplary environment described herein employs a hard disk , a removable magnetic disk , and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer-readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs), and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus , but may also be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). A display in the form of a monitor  is also connected to the system bus  via an interface, such as a video card or adapter . One or more speakers  may also be connected to the system bus  via an interface, such as an audio adapter . In addition to the display and speakers, personal computers typically include other peripheral output devices (not shown), such as printers.","The personal computer  may operate in a networked environment using logical connections to one or more personal computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local area network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer  or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary, and other means of establishing a communications link between the computers may be used.","As implemented on a system of the type illustrated in , the present invention utilizes virtual folders which make it easier for users to perform basic tasks around file manipulation and folder navigation (browsing) and to provide higher level storage capabilities which can be leveraged in new features. The virtual folders expose files and items to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk.",{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 2","b":"200"},"As illustrated in , the virtual folder system  includes a folder processor , a relational database , a virtual folder descriptions database , an other shell folders component , a folder handler's component , and a shell browser and view component . The folder processor  includes a native handling code component , a handler factory component , a property writer component , a rowset parser component , a query builder component , an enumerator component , and a property factory component .","The relational database  stores properties about all files in the system. It also stores some items, like contacts (i.e., non-file items), entirely. In general, it stores metadata about the types of files and items that it contains. The relational database  receives SQL queries from the query builder . The relational database  also sends SQL rowsets to the rowset parser component , with one row per item column, columns being the item properties.","The virtual folder descriptions database  includes the virtual folder descriptions. The virtual folder descriptions database  sends data to the query builder component , including a list of types to display in the folder, the initial filter, and the physical locations to show results from (the scopes).","With regard to the other shell folders component , the folder processor  delegates to existing shell folders from many types of items, including all files, for handlers or properties. The other shell folders component  sends properties from other folders to the property factory . The other shell folders component also sends handlers to the handler factory .","The folder handlers component  provides code behavior for the items that exist only in the database, like contacts. This is what allows non-file items to behave akin to files. The folder handlers component  sends handlers to the handler factory .","For the native handling code component , the folder processor  directly implements certain handlers based on the properties of the items. The native handling code component  sends handlers to the handler factory . For the native handling code component  and the folder handlers component , like all namespaces, virtual folders have to provide a set of handlers (context menu, icon, thumbnail, infotip, . . . ) for their items. For most of these (infotip, data object, drag-drop handler, background context menu . . . ) the virtual folder provides a common (native) handler for all the types it holds. However there are others which the author of the type has to provide (context menu on the item itself, writable property store, . . . ). The default handler can also be overridden. Virtual folders reuse this for files and allow non-file items do the same.","The handler factory  takes ID lists and produces code behaviors that provide context menus, icons, etc. In general, the folder processor  may use native handlers, external handlers, or delegate to other shell folders to get handlers, as described above with respect to the native handling code component , the other shell folders component , and the folder handlers component . The handler factory component  sends handlers to the shell browser in view , as requested by the view. The handler factory component  sends a property handler to the property writer .","The property writer  converts user intentions such as cut, copy, and paste into property rights to the file or item. A shell browser and view component  sends data to the property writer , including direct manipulation (cut\/copy\/paste) or editing of metadata. In general, since virtual folders present an organization based on the properties of an item, operations such as move and copy (drag-drop) become an edit on those properties. For example, moving a document, in a view stacked by author, from Author  to Author , means changing the author. The property writer component  implements this function.","The rowset parser  takes database rowsets and stores all item properties into a shell ID list structure. A rowset takes the piecewise definition of the virtual folder and builds a SQL string which can then be issued to the database. The rowset parser component  sends ID lists to the enumerator component . As described above, the rowset parser component  also receives data from the relational database , including SQL rowsets, with one row per item, the columns being item properties.","The query builder component  builds SQL queries. The query builder component  receives data from the enumerator component , including new filters from the navigation. The query builder component  also receives data from the virtual folder descriptions database , including a list of the types to display in the folder, the initial filter, and the physical location to show results from (the scopes). The query builder component  sends the SQL queries to the relational database .","In general, the query builder component  includes a set of rows (in other words a table). This is what running the query yields. The rowset parser component  takes each row and using the column names transforms the row into an ID list. An ID list is a well-known shell structure which is used to reference items in a namespace. Doing this allows virtual folders to be just like any other namespace to the rest of the shell. Also caching this data helps keep database access, which can be costly, to a minimum.","The enumerator component  operates in response to a navigation to a virtual folder. As described above, the enumerator component  receives ID lists from the rowset parser component , and sends new filters from the navigation to the query builder component . The enumerator  also sends data to the shell browser and view component , including ID lists that are returned to be inserted into the view after a navigation.","The property factory component  takes ID lists and property identifiers and returns values for those properties. The property factory component  receives data from the handler factory component  including the property handler. As described above, the property factory component  also receives data from the other shell folders component , including properties from other folders. The property factory component  also sends data to the shell browser and view component , including item properties, as requested by the view.","The shell browser and view component  displays the contents of a folder in a window, and handles all the user interaction with the displayed files or items, such as clicking, dragging, and navigating. Thus, the shell browser and view component  receives the user actions. The shell browser and view component  also gets the data regarding the code behaviors that it needs from the folder, in this case the folder processor .","As described above, the virtual folders expose regular files and folders (also known as directories) to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Thus, the system is able to take a property that is stored in the database and represent it as a container that is like a folder. Since users are already familiar with working with folders, by presenting the virtual folders in a similar manner, users can adapt to the new system more quickly.",{"@attributes":{"id":"p-0151","num":"0150"},"figref":"FIG. 3","b":["300","302","304","306","308"]},{"@attributes":{"id":"p-0152","num":"0151"},"figref":"FIG. 4","b":["320","322","324","326"]},"At a block , the folder processor takes these results and converts them from the rows and columns of data into an enumerator structure, which is used by the folder view to populate the screen with the resulting virtual folders and items for the user to interact upon. At a decision block , a user decides whether to change the view (by issuing a different query or \u201cpivot\u201d). For example, a user could issue a \u201cshow all artists\u201d pivot. If the user does want to change the view, then the routine returns to block  where the folder processor passes this new query to the relational database, and receives back new rows and columns of results, and constructs a new enumerator structure. The process then continues as described above, as the folder view clears and updates, using the enumerator to draw the \u201cartist\u201d objects to the screen.","In one example, album objects are provided that represent containers that users can navigate into. For example, double-clicking the \u201cBeatles\u201d albums will navigate the view to see all of the Beatles' songs. The folder processor issues the \u201cshow all Beatles' songs\u201d query to the relational database, which hands back the rows and columns of data for those songs. The folder processor creates an enumerator of all these songs, which then get drawn to the screen.","The user can also choose the view at any point while browsing virtual folders. From the above example, after narrowing down to just show Beatles songs, a user can change the view to only show the songs as albums. The process of changing the view of items into another representation is called \u201cstacking\u201d. This is because the items are conceptually arranged into \u201cstacks\u201d based on that representation. In this case, the songs are rearranged into stacks for each of the various albums. Users can then navigate into one of these stacks, only seeing the songs from that particular album. Again, the user can rearrange the view of these remaining songs into stacks based on a property (e.g., a rating, for example). If the rating property were selected, the songs from that Beatles album would be shown in stacks for a one-, two-, or a three-star rating.","The results of each query depend on which physical locations are included in the scope. For example, the scope may be made to include only the folders in the user's \u201cmy documents\u201d folder. Alternatively, the scope could include all folders on the computer, or even all folders on multiple network connected computers. The user is able to view and change the scope through a scope property sheet. In one example, the scope property sheet could be exposed by right-clicking on the virtual folder and choosing \u201cproperties.\u201d The user could add new folders to the scope, or remove folders that were previously added.","One group of users for which virtual folders will provide particular utility is knowledge workers. Virtual folders allow knowledge workers to easily switch between viewing documents by file type, project, case number, author, etc. Since knowledge workers each tend to have a different method for organizing documents, virtual folders can be used to accommodate these different preferences.",{"@attributes":{"id":"p-0158","num":"0157"},"figref":"FIG. 5"},"As illustrated in , a folder  is a \u201cmy documents\u201d folder. At a first level, the folder  includes folders , , and , corresponding to Clients , , and , respectively. At a second level, each of the folders , , and  contain a folder , , and , respectively, which each correspond to the contracts for the selected client. At a third level, each of the folders , , and  contains a folder , , and , respectively, each corresponding to the year . At the third level, each of the folders , , and  also contains a folder , , and , respectively, each corresponding to the year .","It will be appreciated that a number of obstacles are presented to a user who wishes to navigate a physical folder file structure such as that illustrated in . For example, if the user wishes to work with all of the contracts that the user has produced, the user will first need to navigate to the folder  to work with the contracts for Client , and then will have to renavigate to the folder  to reach the contracts for Client , and will again have to renavigate to the folder  for the contracts for Client . This arrangement makes it difficult for the user to access all of the contracts, and in general prevents simultaneous viewing and manipulation of all of the contracts. Similarly, if the user wishes to view all of the contracts produced in the year , the user will have to navigate and renavigate to the folders , , and , respectively. As will be described in more detail below, the virtual folders of the present invention provide an improved file system structure.",{"@attributes":{"id":"p-0161","num":"0160"},"figref":["FIG. 6","FIG. 6"],"b":["500","500","510","520","530"]},{"@attributes":{"id":"p-0162","num":"0161"},"figref":["FIG. 7","FIG. 6"],"b":["510","511","512","510"]},{"@attributes":{"id":"p-0163","num":"0162"},"figref":["FIG. 8","FIG. 7","FIG. 9"],"b":["511","513","511","510","511","513"]},{"@attributes":{"id":"p-0164","num":"0163"},"figref":["FIG. 9","FIG. 6","FIGS. 8 and 9","FIG. 5"],"b":["520","521","522","521","523"]},{"@attributes":{"id":"p-0165","num":"0164"},"figref":"FIG. 10","b":["600","600","610","613","620","626","630","633","640","645","651","655"]},"The quick link elements include an \u201call categories\u201d quick link , on \u201call authors\u201d quick link , a \u201cJanuary work\u201d quick link , and a selection for displaying additional quick links . As will be described in more detail below, quick links can be selected by a user to perform desired navigations of the virtual folders. Quick links may be provided by the system, and some quick links may be created and saved by a user.","The filter elements include a \u201cfilter by\u201d indicator , an entry blank , a \u201cby date\u201d indicator , a \u201cyear\u201d selector , a \u201cpick an author\u201d selector , a \u201cpick a category\u201d selector , and a \u201cmore filters\u201d selector . The \u201cfilter by\u201d indicator  directs a user to the fact that the items below can be used to filter the virtual folders or items. The entry blank  provides an area in which a user can type a desired new filter term. The \u201cby date\u201d indicator  directs a user to the fact that by selecting a date from the \u201cyear\u201d selector , the virtual folders or items can be filtered by the selected year. The \u201cpick an author\u201d selector  allows a user to filter according to a specific author. The \u201cpick a category\u201d selector  allows a user to filter according to a selected category. The \u201cmore filters\u201d selector  allows a user to pull up additional filters on the display.","The activity selectors include a \u201ccreate a new category\u201d selector , \u201cactivity\u201d selectors  and , and a \u201cmore activities\u201d selector . As will be described in more detail below, the activities that are presented may be for generally desirable functions, or may more specifically be directed to activities useful for the type of virtual folders that are currently being displayed. For example, the \u201ccreate a new category\u201d selector  can be selected by the user to create a new category which will be represented by a new stack.","As noted above, the activity selectors  and  may be more specifically directed to the type of folders or items that are being displayed. For example, the present display is of a document library, for which the \u201cactivity\u201d selectors  and  may be directed to activities specifically tailored for documents, such as editing or creating attachments. If the present library had been a photo library, the \u201cactivity\u201d selector  and  could be for activities specifically directed to photos, such as forming photo albums or sharing photos with other users.","The information and control elements include information lines  and , a control line , a backspace control , and information lines  and . The information lines  and  provide information as to the current navigation of the virtual folders or items. In the present example, the information line  indicates that the current navigation is to a document library, while the information line  indicates the more complete navigation, showing that the document library is within the storage area. The control line  provides a number of standard controls, and the backspace button  allows a user to back up through a navigation. The information line  provides numerical information about the contents of the present navigation. In the present example, the information line  indicates that there are  items which take up 100 MB in the stacks of the document library. The information line  is available to provide additional information, such as additional information about a file that is selected.","The stacks of the document library include an \u201cABC Corp.\u201d stack , a \u201cbackups stack\u201d , a \u201cbusiness plans\u201d stack , an \u201cXYZ Corp.\u201d stack , and a \u201cmarketing reports\u201d stack . The numbers on top of each of the stacks indicate how many items are in each stack. For example, the \u201cABC Corp.\u201d stack  is shown to include 8 items. The total number of items of the stacks adds up to the number of items indicated in the information line , which as described above is  in the present example. A selection box SB is provided which can be utilized by a user to select a desired item. The selection of the \u201cABC Corp.\u201d stack  yields a view of the items of that stack, as will be described below with respect to .",{"@attributes":{"id":"p-0172","num":"0171"},"figref":["FIG. 11","FIG. 10","FIG. 11","FIGS. 12-16"],"b":["651","640","641","651","751","758","1","8","644","651"]},{"@attributes":{"id":"p-0173","num":"0172"},"figref":["FIG. 12","FIG. 11","FIG. 12"],"b":["760","760","761","762","763","764","765","766","767","768","769","770","763"]},{"@attributes":{"id":"p-0174","num":"0173"},"figref":["FIG. 13","FIG. 12","FIG. 13"],"b":["780","781","782","783","784","783"]},{"@attributes":{"id":"p-0175","num":"0174"},"figref":["FIG. 14","FIG. 13","FIG. 14"],"b":["791","792","791","792","758","8","791","792","651","792","651"]},{"@attributes":{"id":"p-0176","num":"0175"},"figref":["FIG. 15","FIG. 14","FIG. 15","FIG. 16"],"b":["782","791","792","782"]},{"@attributes":{"id":"p-0177","num":"0176"},"figref":["FIG. 16","FIG. 14","FIG. 16"],"b":["793","794","751","752","1","2"]},{"@attributes":{"id":"p-0178","num":"0177"},"figref":["FIG. 17","FIG. 18"],"b":["616","616"]},{"@attributes":{"id":"p-0179","num":"0178"},"figref":["FIG. 18","FIG. 17","FIG. 17","FIG. 18"],"b":["651","655","851","852","853","854","855","856","857"]},"As shown in , a user is able to switch from the virtual files representation of  to the physical file representation of . This allows a user to toggle between virtual file representations and physical file representations, depending on which is desired for a current task. The different locations of the physical folders - also illustrate that the scope of the virtual file system may be relatively broad, as will be described in more detail below.",{"@attributes":{"id":"p-0181","num":"0180"},"figref":["FIG. 19","FIG. 19"],"b":["880","882","884","886"]},{"@attributes":{"id":"p-0182","num":"0181"},"figref":["FIG. 20","FIG. 10","FIG. 20","FIG. 20","FIG. 21","FIG. 20"],"b":["656","656","656","656","656","651"]},{"@attributes":{"id":"p-0183","num":"0182"},"figref":["FIG. 21","FIG. 20","FIG. 21","FIG. 20"],"b":["651","656","651","656","656","651","651","656"]},"Another example of direct manipulation is right clicking an item and selecting delete. In one embodiment, when a deleting function is selected by a user, the user is queried whether the item should be deleted all together, or simply removed from the present virtual folder. If the item is just to be removed from a present virtual folder category stack as noted above, this can be accomplished by removing the desired category from the metadata for the item. In other words, if one of the items that had been copied from the ABC Corp. stack  to the West Coast stack  was then to be removed from the West Coast stack , this could be accomplished by modifying the category data for the particular file to no longer include the \u201cWest Coast\u201d category.",{"@attributes":{"id":"p-0185","num":"0184"},"figref":"FIG. 22","b":"900"},{"@attributes":{"id":"p-0186","num":"0185"},"figref":["FIG. 22","FIG. 22"],"b":["902","904","906"]},{"@attributes":{"id":"p-0187","num":"0186"},"figref":"FIG. 23","b":["920","922","924","926"]},{"@attributes":{"id":"p-0188","num":"0187"},"figref":["FIGS. 24-29","FIGS. 24-29","FIG. 30"],"b":["643","643","640","641"]},{"@attributes":{"id":"p-0189","num":"0188"},"figref":["FIG. 24","FIG. 10"],"b":["621","640","641","651","652","654","644"]},{"@attributes":{"id":"p-0190","num":"0189"},"figref":["FIG. 25","FIG. 10","FIG. 24","FIG. 25","FIGS. 24 and 25"],"b":["640","641","651","652","654","644","10"]},"The back button  may be utilized by a user to back through the filtering process. As described above with respect to , the back button  allows a user to back up through a navigation. With regard to the examples of , after filtering by the term \u201cABC\u201d in , a user could select the back button  so as to back up one step of the filtering process, which would return to the state of . Alternatively, in another embodiment, the back button  may clear out the entire filter term, and may thus return to the state before that filtering occurred. In this case, by pressing the back button  in , a user would return to the state of .","In one embodiment, in addition to the back button, an additional means is provided for a user to back up in or otherwise modify the filtering navigation. This additional means involves allowing the user to directly access and modify the information line , which correspondingly changes the filter navigation. In other words, by directly accessing and modifying the information line , the user can remove one or more of the applied filters, or modify the values for any of the applied filters. This feature is described in greater detail in U.S. patent application Ser. No. 10\/420,040, filed Apr. 17, 2003, which is commonly assigned and hereby incorporated by reference in its entirety.","A timer may also be utilized in conjunction with a user typing in filter terms such as those shown in . The timer is used to monitor for a pause in the typing by the user. After a selected interval of no typing, the filter is applied. For example, in the state of , a user has typed the filter term \u201cAB\u201d, with no significant time lag between the \u201cA\u201d and the \u201cB.\u201d After typing the term \u201cAB\u201d, the user pauses, thus producing the state shown in , where the filter term \u201cAB\u201d is applied. Sometime later, the user adds the letter \u201cC\u201d to complete the filter term \u201cABC\u201d, and then pauses again, at which point the filter term \u201cABC\u201d is applied as illustrated in .","In one embodiment, after a user has typed a filter term in the filter area , and then chooses another filter or navigation, the navigation state is updated, and the filter term in the filter area  is made to be empty again. In addition, as will be described in more detail below with reference to , other filter controls may be updated based on the selection of certain filter terms.",{"@attributes":{"id":"p-0195","num":"0194"},"figref":"FIG. 26","b":["622","623"]},{"@attributes":{"id":"p-0196","num":"0195"},"figref":["FIG. 27","FIG. 27"],"b":["623","651","652","653","654","644","640","641"]},{"@attributes":{"id":"p-0197","num":"0196"},"figref":"FIG. 28","b":["950","950","623"]},{"@attributes":{"id":"p-0198","num":"0197"},"figref":["FIG. 29","FIG. 28","FIG. 29"],"b":["640","641","652","653","644","623"]},"As described above with respect to , filter terms may be presented by the system, or typed by a user. Once a filter term is selected, the remaining filter terms that are presented may be updated (e.g., after the year \u201c2002\u201d is selected in , in  the options for selecting a year are no longer presented and instead a \u201cpick a month\u201d option is provided). As noted above, the back button  may be selected by a user to back through the filtering process. For example, after the month of \u201cJanuary\u201d has been selected in , the user may select the back button  to back up the filtering process to the year \u201c2002\u201d, as illustrated in . The filter menu may also include a \u201cstack by\u201d function, which would work similarly to the stack by function described above with respect to . For example, a \u201cfile type\u201d filter could have choices for \u201cExcel\u201d, \u201cPowerPoint\u201d, \u201cWord\u201d, and also \u201cStack by file type\u201d. Choosing the \u201cstack by\u201d function changes the view to show stacks for the various file types.","In general, the filters may be configured to apply to different properties of the files or items. In one embodiment, the filters may be classified according to different types, such as: alphabet index; discrete values; dates; and numerical ranges. Example properties for the alphabet index may include file name, author, artist, contact friendly name, owner, document author, document title, document subject, and description. Example properties for the discrete values may include location, file type (application name), genre, track, decade (for music), rating (for music), bit rate, protected, document category, document page count, document comments, camera model, dimensions, product name, product version, image X, image Y, and document created time. Example properties for the dates may include last accessed, last modified, created on, taken on (for pictures). An example property for the numerical range may be file size.","It will be appreciated that the filters described above with respect to  allow users to reduce a list of items to find a particular item that is of interest. As a specific example, according to the processes described above, a user could narrow a current list of documents to only show Microsoft Word files, authored by a particular person and edited in the last week. This functionality allows a user to find a particular item in a list of many, and helps the user avoid having to manually scan each item in the list.",{"@attributes":{"id":"p-0202","num":"0201"},"figref":"FIG. 30","b":"940"},"As shown in , at a block , a user makes a selection on the display to indicate that a new quick link should be formed from the present filter term or navigation. At a block , the user provides a new name for the new quick link. At a block , the new quick link is saved and the new quick link name is provided in the quick link section on the display.",{"@attributes":{"id":"p-0204","num":"0203"},"figref":["FIG. 31","FIG. 29","FIG. 29","FIG. 31","FIG. 29"],"b":"612"},{"@attributes":{"id":"p-0205","num":"0204"},"figref":["FIG. 32","FIG. 32"],"b":"611"},{"@attributes":{"id":"p-0206","num":"0205"},"figref":["FIG. 33","FIG. 32","FIG. 33"],"b":["950","951","954","1","4"]},{"@attributes":{"id":"p-0207","num":"0206"},"figref":["FIG. 34","FIG. 33"],"b":["1","1","951","951","1","2","95","1","1","1","2","951","1","1","951","951"]},{"@attributes":{"id":"p-0208","num":"0207"},"figref":["FIG. 35","FIG. 10","FIG. 35"],"b":["960","962","964","966"]},{"@attributes":{"id":"p-0209","num":"0208"},"figref":["FIG. 36","FIG. 36","FIG. 10"],"b":["971","972","973","974","975","976","977","977","644","971"]},{"@attributes":{"id":"p-0210","num":"0209"},"figref":"FIG. 37","b":"990"},"As shown in , at a block , a scope is defined for the physical locations from which items are to be drawn. At a block , in response to a query, the items are drawn from the physical locations as defined in the scope. At a block , all of the items drawn by the query are presented on a single display.",{"@attributes":{"id":"p-0212","num":"0211"},"figref":["FIG. 38","FIG. 38","FIG. 34","FIG. 18"],"b":["1000","1010","1020","1030","1040","1001"]},{"@attributes":{"id":"p-0213","num":"0212"},"figref":["FIG. 39","FIG. 39"],"b":["1080","1082","1084","1086"]},{"@attributes":{"id":"p-0214","num":"0213"},"figref":["FIG. 40","FIG. 40","FIG. 2"],"b":["1101","1102","1103","1104","1101","1102","230"]},{"@attributes":{"id":"p-0215","num":"0214"},"figref":["FIGS. 41-50","FIG. 10"],"b":"641"},{"@attributes":{"id":"p-0216","num":"0215"},"figref":["FIG. 41","FIG. 1"],"b":["1200","1200","1202","1202"]},"The exemplary networked computing environment  may also include one or more remote servers, such as server , that stores files accessible to the computing device , and connected to the computing device via a communications network, such as the Internet , as shown in . In addition, the computing device  may also be connected to other information sources storing files or other content, such as a remote database . Those skilled in the art will recognize that files and information stored on both the remote server  and the remote database , as well as on local storage devices such as hard disk drive (), may be accessible to, and displayable on, the computing device  as part of an integrated file system on the computing device. Additionally, while a particular configuration of a remote server  and remote database  is presented in , those skilled in the art will readily recognize that this particular configuration is for illustrative purposes only, and should not be construed as limiting upon the present invention.",{"@attributes":{"id":"p-0218","num":"0217"},"figref":["FIG. 42","FIG. 1"],"b":["1300","1302"]},"An address in the conventional address bar  corresponds to a specific location in a file system. As previously described, in order to edit the address displayed in the conventional address bar , a user must modify the address according to specific knowledge of the file system. Alternatively, a user may select an entry in a tree view  to navigate to an alternative location. Those skilled in the art will recognize that other controls external to the address bar  may also be available that are not shown in the exemplary file view . While the address displayed in the conventional address bar  corresponds to a specific location in a file system, related files distributed among multiple folders in the file system cannot be displayed in conjunction with the conventional address bar .",{"@attributes":{"id":"p-0220","num":"0219"},"figref":["FIG. 43","FIG. 10","FIG. 42"],"b":["1400","1402","1402","641","1402","1404","1304","1300"]},"Similar to a conventional address, such as address  of , the virtual address's selection criteria may reference files stored in a specific location in the file system hierarchy. However, in contrast to a conventional address, the virtual address's selection criteria may also reference files irrespective of their specific file system location. Thus, a virtual address may reference files stored in multiple locations in a computer file system. As shown in , the file viewer , according to the virtual address  in the virtual address bar , is able to display additional files, such as files  and , not found in the file viewer  of . Additionally, the virtual address bar  may also be utilized to display content other than files in a computer file system. For example, the virtual address bar  may be used to reference content including system devices, system services, or Internet locations.",{"@attributes":{"id":"p-0222","num":"0221"},"figref":"FIG. 44A","b":["1404","1402","1402","1502","1504","1506","1508","1402"]},"The first segment in a virtual address bar, such as segment , is referred to as a root segment, or root filter. The root segment represents the broadest category of content available for selection by the virtual address bar . For example, segment  \u201cFiles\u201d would likely represent a filter that references all files accessible the computer file system. Alternatively, a root segment may represent a filter that references all system services available to the user on the computer system, or a filter that references all hardware devices installed in the computer system. Those skilled in the art will recognize that numerous other alternative root filters may be utilized by the present invention. Thus, the above described examples are given for illustrative purposes, and should not be construed as limiting upon the present invention. Additionally, the labels displayed for each segment, such as \u201cFiles\u201d on the root segment , are illustrative and should not be construed as limiting upon the present invention. According to one embodiment, a label displayed on a segment is user configurable.","Each additional segment in a virtual address bar , such as segments , , and , represent additional filters to be applied when selecting and displaying files or content in a file viewer . For example, root segment  \u201cFiles\u201d references all files available to the computer system. Segment  \u201cDocument Library\u201d filters the files selected by the root segment , by selecting those files that were generated as documents by the user, such as through a word processor, spreadsheet, or some other document generating application. Segment  \u201cWord Documents\u201d filters the files selected by segment  according to those documents that were generated using a word processor, such as Microsoft Corporation's Word application. Finally, segment  \u201cAuthor A\u201d filters the word processing documents selected by segment  according to whether they were authored by \u201cAuthor A.\u201d Thus, content selected according to the virtual address represented in the virtual address bar  must satisfy the filters corresponding to all of the segments in the virtual address bar.","Segments in the virtual address bar  are generally ordered from those filters that are most inclusive, to those filters that are least inclusive. For example, as previously discussed, segment  \u201cFiles\u201d is the broadest and most inclusive. Segments  \u201cWord Documents\u201d and segment  \u201cAuthor A\u201d are less inclusive. The virtual address bar  illustrates the ordering of segments from left to right, and, for purposes of the present discussion, segments , , and  are subsequent to the root segment . However, it should be understood that other orientations are possible, such as a top-down arrangement, without departing from the scope of the invention. Thus, the orientation from left to right should be viewed as illustrative, and not construed as limiting on the present invention.","As previously mentioned, segments in a virtual address bar , such as segments , , , and , do not necessarily correspond to specific locations in a computer file system, such as folders, drives, and directories. Thus, segment  \u201cDocument Library\u201d may reference files or content distributed on multiple servers, drives, or folders\/directories. However, certain segments in a virtual address bar  may reference specific locations with a computer file system hierarchy. A further discussion of virtual address segments referencing specific file system locations is given below in regard to .","In contrast to a conventional address bar, each segment in a virtual address bar  represents an actionable, interactive user interface element. For example, a segment in a virtual address bar  is responsive to user selection, monitors whether a cursor is located over the segment for a specific period of time, and may be removed from the virtual address bar by a dragging user interaction. Hence, as shown in , a user may place a cursor  over a segment in the virtual address bar , such as segment  \u201cDocument Library,\u201d to select, or click, on that segment in order to navigate to that level, i.e., truncate the virtual address at that segment, as described in regard to .",{"@attributes":{"id":"p-0228","num":"0227"},"figref":["FIG. 44B","FIG. 44A","FIG. 44A","FIG. 44B","FIG. 44A","FIG. 44B"],"b":["1504","1402","1504","1402","1504","1404","1506","1508","1404","1402","1400","1400","1512","1514","1516","1518","1400"]},"In addition to selecting segments in a virtual address bar to navigate to a less restrictive segment, a user may also wish to navigate to, or select, peer filters of current segments in a virtual address. A peer filter is an alternative filter that may be selected and applied to a given segment in the virtual address bar. For example, with reference to , peer filters for segment  \u201cWord Documents\u201d may include filters such as \u201cExcel Documents,\u201d \u201cJournals,\u201d and the like. Other types of filters, including specific file system locations, hardware devices, or computer services, may also be applied to a given segment in the virtual address bar. Peer filters may or may not be logically related to a given segment's current filter. Each segment in a virtual address bar may have peer filters. Selecting a peer filter of a segment in a virtual address bar is sometimes referred to as navigating laterally. Selecting peer filters of segments in a virtual address bar is described below in regard to , and also in regard to .",{"@attributes":{"id":"p-0230","num":"0229"},"figref":["FIGS. 45A-45D","FIG. 45A"],"b":["1600","1600","1602","1608","1600"]},"To illustrate alternatively selecting a segment, with reference to , a user first places the cursor  over segment  \u201cDocument Library\u201d for a predetermined amount of time, i.e., hovers over the segment, to select that segment.  demonstrates the results of alternatively selecting segment  \u201cDocument Library\u201d in the virtual address bar . As shown in , after alternatively selecting segment  \u201cDocument Library,\u201d a peer filter view  is displayed including peer filters corresponding to the selected segment. It should be understood that the peer filters presented in the peer filter view  are for illustrative purposes only, and should not be construed as limiting upon the present invention.","In order to select an alternative peer filter, as shown in , the user positions the cursor  over one of the filters presented in the peer filter view , such as peer filter , and selects the peer filter. As shown in , after selecting the alternative peer filter , the previously selected segment  () is replaced with a new segment  representing the selected alternative peer filter . Additionally, those segments that followed the alternatively selected segment  in the virtual address bar  of , specifically segments  \u201cJournals\u201d and  \u201cAll Documents in 2002\u201d, are removed from the virtual address bar  in . Although not shown, it follows that any files or content previously selected according to segments  \u201cDocument Library\u201d,  \u201cJournals\u201d, and  \u201cAll Documents In 2002\u201d would no longer be displayed in a corresponding file viewer, and only those files or content selected according to segments  \u201cFiles\u201d and  \u201cPicture Library\u201d would be displayed.","Segments may be added to a virtual address in a virtual address bar through various user interactions at the end of the existing segments. To add a filter to a virtual address in a virtual address bar, a user may manipulate an actionable control associated with a particular filter found on a window, or file viewer with the virtual address bar. For example, with reference to the file viewer  of , a user may click on the actionable control  \u201c2003\u201d to add a corresponding filter to the virtual address  in the virtual address bar . Alternatively (not shown), a user may manually enter in a known filter at the end of the virtual address by typing the filter's name. Numerous other ways of adding a filter to a virtual address exist, all of which are contemplated as falling within the scope of the present invention. Thus, it should be understood that the above examples are for illustration purposes, and should not be construed as limiting upon the present invention.","When a filter is added to a virtual address in a virtual address bar, a process is undertaken to ensure that the newly added filter does not conflict with any filters currently existing as part of the virtual address. If the newly added filter conflicts with an existing filter, the existing filter is removed. A newly added filter conflicts with an existing filter in a virtual address if the newly added filter varies from the breadth of the existing filter, being either more or less broad than the existing filter. Additionally, a newly added filter conflicts with an existing filter if the newly added filter is mutually exclusive to the existing filter. However, a newly added filter that is equivalent to an existing filter is not added because it has no effect. It should be understood that the above description of conflicts is given for illustration purposes, and should not be construed as limiting upon the present invention. Those skilled in the art will recognize that other conflicts between filters may exist that are contemplated as falling within the scope of the present invention.",{"@attributes":{"id":"p-0235","num":"0234"},"figref":["FIGS. 46A-46D","FIG. 46A","FIG. 46B","FIG. 46B"],"b":["1702","1700","1702","1700","1706","1702","1706","1700","1706","1702","1702"]},"As shown in , another filter is added to the virtual address , represented by segment  \u201cAuthor A.\u201d The process undertaken for adding this new filter determines that the new filter, \u201cAuthor A,\u201d would conflict with the filter represented by segment  \u201cAuthor A-F\u201d because the new filter, \u201cAuthor A,\u201d is narrower than the existing filter. Accordingly, segment  \u201cAuthor A-F\u201d is removed from the virtual address bar , and segment  \u201cAuthor A\u201d is added to the end of the segments in the virtual address bar.",{"@attributes":{"id":"p-0237","num":"0236"},"figref":["FIG. 46D","FIG. 46C","FIG. 46D","FIG. 46C"],"b":["1710","2003","1700","1702","1702","1706","1700","1710"]},"When a virtual address bar, such as virtual address bar  (), cannot completely display the virtual address due to size limitations of the virtual address bar, a portion of the virtual address is displayed according to the size of the virtual address bar. However, the undisplayed portions of the virtual address may still be accessed by the user. More specifically, the virtual address bar displays actionable visual indicators to scroll the virtual path within the virtual address bar.  illustrate an exemplary virtual address bar  displaying a virtual address where the virtual address exceeds the virtual address bar's display capacity. As shown in , scroll icons  and  indicate the direction the virtual address bar  may scroll in order to display the previously undisplayed portions of the virtual address. However, while the illustrative diagrams demonstrate the use of scroll icons, it is for illustrative purposes only, and should not be construed as limiting on the present invention. Those skilled in the art will recognize that there are numerous other ways of scrolling the virtual address in a virtual address bar, all of which are contemplated as falling within the scope of the present invention.",{"@attributes":{"id":"p-0239","num":"0238"},"figref":"FIG. 48A","b":["1900","1900","1900","1900","1902","1904","1902","1904","1906"]},"As shown in , a virtual address bar  may be configured to function as a conventional address bar. For example, with reference to , by placing a cursor  in the empty space of the virtual address bar  and clicking there, the virtual address bar  switches from displaying segments representing a virtual address, to functioning as a conventional address bar displaying a conventional address , as shown in . The conventional address  in the virtual address bar  of  approximates the virtual address displayed in the virtual address bar  of . However, those filters in the virtual address bar  of  that do not correspond to physical locations in a computer file system cannot be displayed and are removed from the conventional address . Specifically, segment  \u201cCase Files\u201d and segment  \u201cContains \u2018Fax\u2019\u201d are not part of the conventional address  ().","In order to reconfigure a virtual address bar , functioning as a conventional address bar, to function normally as a virtual address bar, the user must so indicate in a manner other than clicking on the empty area of the bar. When configured to function as a conventional address bar, a virtual address bar must permit the user to click in the empty area for address editing purposes. Clicking in the empty area of a conventional address bar places an editing cursor at the end of the address\/path for editing purposes. Accordingly, to reconfigure the virtual address to again function in its normal manner as described above, a user must press a predefined key or key sequence, such as the Esc or Tab key, or by place the focus on another area of a window or view by clicking on another area of the window or view. Those skilled in the art will recognize that other user actions may also be utilized to reconfigure the virtual address bar  to again function in its normal mode as described above, all of which are contemplated as falling within the scope of the present invention.",{"@attributes":{"id":"p-0242","num":"0241"},"figref":["FIG. 49","FIGS. 45A-45D"],"b":["2000","2002","2000","2004","2006","2008","2010","2012","2014","2000"]},{"@attributes":{"id":"p-0243","num":"0242"},"figref":["FIG. 50","FIG. 43"],"b":["2100","2102","2100"]},"At block , a determination is made whether the new filter conflicts with an existing filter already in the virtual address. As previously discussed in regard to , a new filter may conflict with an existing filter by substantially narrowing or broadening the scope of the existing filter. Alternatively, a new filter may conflict with an existing filter because a new filter is mutually exclusive to an existing filter. If, at decision block , the new filter conflicts with an existing filter, at block , the existing filter is removed from the virtual address. Alternatively, at , if the new filter does not conflict with an existing filter or, after removing the existing conflicting filter in block , at block , the new filter is added at the end of the virtual address. Thereafter, the exemplary routine  terminates.",{"@attributes":{"id":"p-0245","num":"0244"},"figref":"FIGS. 51-57"},"Turning to  A, a window  represents a screen-size display area for a graphical user interface of a shell browser. The window  contains a preview pane area  and a view area . The preview pane  may include a preview control , a user interface (UI) or edit control , and a task control . Typically, the preview control  will provide the user with an image or other visual display of the item being previewed (e.g., a selected file). The preview control  may also present the user with controls such as iterator buttons which allow the user to shift the focus from one item to the next by clicking a mouse button. Metadata corresponding to one or more items and\/or metadata corresponding to the item container may be displayed in a variety of locations within the window . For example, the edit control and metadata may be co-located within edit control area  so that the edit control area not only includes a display of key properties of the previewed item but also presents the user with the option of making edits to the metadata. The task control  contains tasks relevant to the namespace and\/or the selection.","For purposes of the present invention, the terms \u201cmetadata\u201d and \u201cuser modifiable metadata\u201d exclude the shell item name. The term \u201cshell item name\u201d refers to the property which is used for purposes of sorting and displaying the item within the shell browser. As mentioned above, one unique aspect of the present invention is the ability of a user to edit metadata within a shell browser.","Those skilled in the art will appreciate that the present invention contemplates the presence of optional features within the window . For example, the preview control  and the task control  are not essential features for purposes of the present invention. Moreover, other non-essential features which are not shown in  A, such as a toolbar which includes iterator buttons or a show\/hide button so the user can open\/close the preview pane, are also within the scope of the present invention. Nevertheless, these and other optional features may assist the user in readily locating a particular item in the shell browser.","The view area  provides a listview of one or more items , such as file system files or folders. The term \u201clistview\u201d refers to an enumeration or list of items within a container. The terms \u201citem\u201d and \u201cshell item\u201d are used interchangeably herein to refer to files, folders and other such containers, and other non-file objects which can be represented in a listview. Examples of non-file objects may include, but would not be limited to, contacts, favorites and email messages. The terms \u201cshell browser\u201d and \u201cfile system browser\u201d are used interchangeably herein to refer to a browser which allows a user to navigate through various namespaces including files and other non-file items.","Those skilled in the art will appreciate that the present invention contemplates many possible designs and layouts for the window . For example, the preview pane  is shown above the view area  in  A. However, other layouts, such as placing the preview pane  and the view area  side-by-side, are clearly within the scope of the present invention. The location of the edit control  is also independent of the location of the displayed metadata and independent of the location of any other controls. There are also many possible view types for the items depicted in listview area , such as details, slide show, filmstrip, thumbnail, tiles, icons, etc.",{"@attributes":{"id":"p-0251","num":"0250"},"figref":["FIG. 51B","FIG. 51A"],"b":["2204","2214","2212","2212","2214","2216","2218","2208","2200","2202","2214","2214","2218"]},"Referring next to , a schematic illustration is provided of a welcome pane  in a shell browser. A welcome pane is sometimes referred to as a \u201cnull select\u201d pane because it represents a namespace or container as opposed to a selection. If the user has not yet made a selection, a preview pane  displays metadata  and key tasks relating to the folder or shell library. If desired, the tasks may be separated into premiered tasks  and other relevant tasks . The welcome pane  also includes a view area , in which multiple files or other items  may be viewed. The welcome pane metadata  may include information such as properties of the container (e.g., MyPictures), in which case the metadata display may be static. Alternatively, the welcome pane metadata  may include information such as a sampling of metadata from each of the items within the container, in which case the metadata display may change frequently. For example, the metadata display may be limited to properties of one item at a time by cycling from one item to the next every  seconds.",{"@attributes":{"id":"p-0253","num":"0252"},"figref":["FIG. 53","FIG. 53","FIG. 52","FIG. 53"],"b":["2400","2400","2402","2404","2406","2408","2300","2400","2410","2412","2404","2406","2408"]},{"@attributes":{"id":"p-0254","num":"0253"},"figref":["FIG. 54","FIG. 53","FIG. 54"],"b":["2500","2500","2500","2500"]},"Those skilled in the art will appreciate that the present invention contemplates means other than context menus for enabling user modifications to displayed metadata within a shell browser. Another such means for is for the user to click on the metadata to enter an editing mode. By contrast, a user could enter an editing mode by hovering over the relevant text or object in the preview pane. Numerous alternative means are available and within the scope of the present invention.",{"@attributes":{"id":"p-0256","num":"0255"},"figref":"FIG. 55","b":["2600","2600","2602","2604","2606","2608"]},{"@attributes":{"id":"p-0257","num":"0256"},"figref":"FIG. 56","b":["2700","2702","2700","2704","2706","2708","2710","2712"]},"In the event a user selects multiple items at , the displayed metadata may include intersecting properties of the selected items, a union of properties, or perhaps a new property relevant to the selected items. Alternatively, the displayed metadata may include a rotating sample of metadata from each of the selected items (e.g., cycling from one selected item's metadata to the next selected item's metadata every  seconds). It is possible for the display of metadata which would result from a selection of all of the items to be identical to the display of metadata which would result from a null select.",{"@attributes":{"id":"p-0259","num":"0258"},"figref":"FIG. 57","b":["2800","2800","2802","2802","2800","2804","2800","2806","2804","2806","2800","2808","2808","2804","2806","2800"]},"The present invention enables a number of scenarios which were not possible with conventional shell browsers. As a first example, a student can manage her projects using the preview pane. When she obtains new documents as part of a project she is working on, she can select those documents in her document library and enter the name of the document author and the name of the project into keyword fields using the edit control. Now the new documents will show up in her favorite view: \u201cDocuments Grouped by Keyword and Listed by Author.\u201d A second example of a new scenario enabled by the present invention involves an employee looking for materials for an upcoming ad campaign. As he browses through his employer's stock collection of photos using the shell browser, he selects a couple of pictures and, from the preview pane, adds a new keyword \u201cSummer 2003 Campaign.\u201d Having updated the metadata for a multiple selection, the employee then pivots by keyword and can view all of the \u201cSummer 2003 Campaign\u201d files grouped together. Many other scenarios which take advantage of the present invention would be apparent to those skilled in the art.",{"@attributes":{"id":"p-0261","num":"0260"},"figref":"FIGS. 58-66"},{"@attributes":{"id":"p-0262","num":"0261"},"figref":["FIG. 58","FIG. 58"]},{"@attributes":{"id":"p-0263","num":"0262"},"figref":["FIG. 58","FIG. 58","FIG. 58"],"b":["3200","3206","3202","3204","3206","3204","3202","3202","3204","1","2","3","4","3204","3204","1","2","4","3"]},"A user can select any one of the thumbnail images, which will cause a larger preview image of the user thumbnail selection image to be displayed within the preview control area. In addition, user selection of a thumbnail image will also allow the user to select and perform any one of the tasks listed in the task option area , with respect to the selected image. A first control button allows a user to quickly and successively preview an enlarged image of each of the thumbnail images within a given folder, by iterating in one direction. In other words, a user would not have to specifically \u201cclick\u201d on each and every successive thumbnail image in order to preview the picture. Instead the user will merely click on the first control button repeatedly to move through the folder. A second control button performs a similar iteration function but only in the opposite direction.","Turning to , a window  represents a screen-size display area for a graphical user interface of a general purpose shell browser. The window  contains a preview pane area  and a view area . The preview pane  may include a preview control , an edit or metadata control , and a task control . Typically, the preview control  will provide the user with an image or other visual display of the item being previewed (e.g., a selected file). The preview control  may also present the user with controls such as iterator buttons which allow the user to shift the focus from one item to the next by clicking a mouse button. The edit control  not only includes a display of key properties of the previewed item, it also presents the user with a control for making edits to the metadata. The task control  contains tasks relevant to the namespace and\/or the selection.","Those skilled in the art will appreciate that the present invention contemplates the presence of optional features within the window . For example, the metadata control  and the task control  are not essential features for purposes of the present invention. Moreover, other non-essential features which are not shown in , such as a toolbar which includes iterator buttons or a show\/hide button so the user can open\/close the preview pane, are also within the scope of the present invention. Nevertheless, these and other optional features may assist the user in readily locating a particular item in the shell browser.","The view area  provides a listview of one or more items , such as file system files or folders. The term \u201clistview\u201d refers to an enumeration or list of items within a container. The terms \u201citem\u201d and \u201cshell item\u201d are used interchangeably herein to refer to files, folders and other such containers, and other non-file objects which can be represented in a listview. Similarly, \u201cshell item\u201d refers to an item in a shell library. Examples of non-file objects may include, but would not be limited to, contacts, favorites and email messages. The terms \u201cshell browser\u201d and \u201cfile system browser\u201d are used interchangeably herein to refer to a browser which allows a user to navigate through various namespaces including files and other non-file items.","Those skilled in the art will appreciate that the present invention contemplates many possible designs and layouts for the window . For example, the preview pane  is shown above the view area  in . However, other layouts, such as placing the preview pane  and the view area  side-by-side, are clearly within the scope of the present invention. There are also many possible views for the items depicted in view area , such as details, slide show, filmstrip, thumbnail, tiles, icons, etc.","Referring next to , a schematic illustration is provided of a welcome pane  in a shell browser. A welcome pane is sometimes referred to as a \u201cnull select\u201d pane because it represents a namespace or container as opposed to a selection. If the user has not yet made a selection, a preview pane  displays metadata  and key tasks relating to the folder or shell library. If desired, the tasks may be separated into premiered tasks  and other relevant tasks . The welcome pane  also includes a view area , in which multiple files or other items  may be viewed. The welcome pane metadata  may include information such as properties of the container (e.g., MyPictures), in which case the metadata display may be static. Alternatively, the welcome pane metadata  may include information such as a sampling of metadata from each of the items within the container, in which case the metadata display may change frequently. For example, the metadata display may be limited to properties of one item at a time by cycling from one item to the next every 30 seconds.",{"@attributes":{"id":"p-0270","num":"0269"},"figref":["FIG. 61","FIG. 61","FIG. 60","FIG. 61"],"b":["3500","3500","3502","3504","3506","3508","3400","3500","3510","3512","3504","3506","3508"]},{"@attributes":{"id":"p-0271","num":"0270"},"figref":["FIG. 62","FIG. 61"],"b":["3500","3600","3602","3604","3614","3606","3608","3600","3610","3612","3612","3604","3606","3608"]},"The extended controls  represent a level of functionality beyond what is typically available from a shell browser. For example, a default preview pane or preview control, such as those shown in , may simply display a preview image of a selected item. If the item is a word processing document or slide presentation, the default preview image may be the first page of the document or slide deck. However, by extending the functionality of the preview image to make it more interactive, a user can quite easily manipulate extended controls  to page through the document or slide presentation. This enhanced level of functionality improves the user experience because it allows the user to more comprehensively browse the previewed item without opening it, which is particularly useful for files that are not readily identifiable based on the first page alone.","Extended controls  can be made available to the user as part of an alternative previewer in a shell browser. The term \u201cpreviewer\u201d can refer to a preview control or to the a preview pane which includes a preview control. The present invention contemplates a shell browser which provides the user with a default previewer offering a standard level of functionality for multiple item types and one or more alternative previewers offering a different level of functionality for particular item types to enhance the user experience. Opening up the development of alternative previewers to independent software vendors (ISVs) and other third party developers adds value to the file browsing experience by showing relevant aspects of the file in an easily recognizable way. The present invention contemplates custom previewers for numerous file types and non-file item types including, but not limited to, image files, video files, contacts, games, scanners, video cameras, document files, spreadsheet files, slide presentation files, drawing files and tablet ink files.","The present invention enables a number of scenarios which were not possible with conventional shell browsers, some of which have been described above. Third parties are allowed to describe and demonstrate their file types by providing code that can look inside the file type and provide a meaningful image that a user will understand. For example, Apple could implement a QuickTime\u2122 preview control, which would be displayed when the user selects a QuickTime\u2122 file in the shell browser. This preview control could provide an alternative or extended level of functionality beyond the default previewer in the shell of an operating system, including functionality such as showing the first five seconds of a QuickTime\u2122 movie and\/or offering buttons and controls for the user to launch the QuickTime\u2122 player. An alternative previewer for a music file could provide similar extended functionality. As those skilled in the art will appreciate, the possibilities for extended functionality in an alternative previewer are unlimited.",{"@attributes":{"id":"p-0275","num":"0274"},"figref":["FIG. 63","FIG. 61"],"b":["3714","3700","3702","3704","3706","3708","3700","3710","3712","3706","3708"]},"The context menu  in  presents the user with several options, including the choice of selecting either the default previewer or an alternative previewer for the selected item. The generic text shown in the menu  is of course merely one example of the type of options which may be presented to a user for selecting a previewer. A context menu can be provided in any window, including a welcome pane, to improve the user experience. As those skilled in the art will appreciate, any number and variety of context menus could be supported by the present invention. For purposes of the present invention, one means for enabling user selection of a previewer within a shell browser is to provide a context menu such as context menu . A user may summon the context menu, for example, by clicking on the corresponding text or object in the preview pane.","Those skilled in the art will appreciate that the present invention contemplates means other than context menus for selecting a previewer for the displayed items from a plurality of available previewers within a shell browser. Another such means is for the user to click on the preview control to enter a selection mode. Similarly, the user may be prompted to select a previewer by right-clicking within the preview pane. By contrast, a user could enter a selection mode by hovering over relevant text or over a relevant object in the preview pane. Numerous alternative means are available and within the scope of the present invention.",{"@attributes":{"id":"p-0278","num":"0277"},"figref":"FIG. 64A","b":["3800","3800","3802","3804","3800","3806","3800","3808"]},{"@attributes":{"id":"p-0279","num":"0278"},"figref":"FIG. 64B","b":["3810","3810","3812"]},"At , the system (as opposed to the user) automatically and transparently selects a default previewer from two or more available previewers for a particular item type. The system may select a previewer in response to an event such as display of a new item type or the presence of an alternative previewer. The system is configured to select a default previewer based on logical rules. Under exceptional circumstances, the system may decide at  to override the rules and select a previewer that would not have been selected under the applicable rules. For example, if the rule is to select a newly available previewer over the current default previewer, an installed application may generally have the authority to change the default previewer to the previewer now available from the installed application. However, the shell browser, for example, may reserve the right to override the change proposed by the newly installed application. For instance, an override may be appropriate when the newly installed application cannot be authenticated as a proper owner of the item type in question.","In any event, the method  then associates the selected previewer with the particular item type at . The selected previewer will remain in use until a different one is selected. However, if the selected previewer is an installed application, uninstalling the application will also terminate the use of the selected previewer.","Referring next to , a flow diagram illustrates a method  for enabling the use of third party previewers in a shell browser which supports multiple item types in accordance with an embodiment of the present invention. The method  includes providing a shell browser having a default previewer for the multiple item types at . The method  further includes providing an extensibility mechanism for third party development of an alternative previewer for at least one of the multiple item types at . The alternative previewer may be registered in the shell browser at . In the case of an installed application, registration may occur substantially at the time of installation. For example, if the application is installed by an OEM, the alternative previewer may be registered before the user has acquired the computer. Alternatively, the user may install the application locally or remotely.","There are many possible approaches for the extensibility mechanism referenced above in . One such approach involves exposing a set of application program interfaces (APIs) so that independent software vendors (ISVs) and other third party developers may develop alternative previewers. With the API approach, a registration mechanism exists which allows an ISV to associate their preview control with an item type owned by the ISV. When an item or file of that type is selected in the shell browser, the ISV's preview control is instantiated via this registration mechanism and the extensibility API. The API provides data to the preview control: data representing the selected item(s) in the view and data representing the parent container of the items in the view. The preview control operates on this data and provides a user interface through the API which is presented in the shell browser. The user may provide input with keystrokes and mouse events which are passed by the shell browser to the preview control which can operate on those user input events.","Those skilled in the art will appreciate that many approaches are possible in the context of the extensibility mechanism of the present invention. In addition to the API approach, similar functionality may be achieved via user configuration, a pointer to HTML or hosting a flash. Moreover, the extensibility model may require that only one application that owns the item type selected may provide only one alternative previewer. In other words, the number of available previewers may be limited to a default previewer and one alternative previewer to avoid a poor user experience in which multiple registered, extended previewers are in competition with one another. However, another model would be to allow any application that can handle the selected item type to provide one additional previewer. An alternative model would allow any running code to provide one additional previewer for any item type. It may also be desirable under certain circumstances to allow replacement or removal of the default previewer. Many other models are possible and are contemplated by the present invention.",{"@attributes":{"id":"p-0285","num":"0284"},"figref":"FIG. 66","b":["4000","4000","4002","4004","4006","4008","4006","4010","4002","4004","4006"]},"While the preferred embodiment of the invention has been illustrated and described, it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention. For example, it will be appreciated that the locations of the various UI features that are shown herein are illustrative and may be altered, and that different placements of the various UI features will still fall within the spirit and scope of the invention. Furthermore, the different aspects of the invention described herein may be formed in various combinations, also without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same become better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 9","FIG. 6"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 13","FIG. 12"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 14","FIG. 13"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 15","FIG. 14"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 16","FIG. 14"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 18","FIG. 17"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 20","FIG. 10"]},{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 21","FIG. 20"]},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 24","FIG. 10"]},{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 25","FIG. 10"]},{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 26","FIG. 10"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 27","FIG. 10"]},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 29","FIG. 10"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 31","FIG. 29"]},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 33","FIG. 32"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 34","FIG. 33"],"b":["1","1"]},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 44A","FIG. 5"]},{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 44B","FIG. 45A"]},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIGS. 45A-45D"},{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIGS. 46A-46D"},{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIGS. 47A and 47B"},{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 48A"},{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 48B","FIG. 48A"]},{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 50"},{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 51"},{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 51"},{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 53"},{"@attributes":{"id":"p-0109","num":"0108"},"figref":["FIG. 54","FIG. 53"]},{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 55"},{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 57"},{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 58"},{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 60"},{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 61"},{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 62"},{"@attributes":{"id":"p-0118","num":"0117"},"figref":["FIG. 63","FIG. 61"]},{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 64A"},{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 64B"},{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 65"},{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 66"}]},"DETDESC":[{},{}]}
