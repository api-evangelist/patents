---
title: Single-ended deduplication using cloud storage protocol
abstract: A single-ended optimized storage protocol enables storage clients or other devices to direct a remote data storage to copy data. In response to commands via the protocol, a remote data storage can copy portions of a data stream at the remote data storage to destination storage locations within the same or a different data stream. The protocol may be utilized for optimized transfer of data via a network to a remote data storage. An initial data stream is divided into segments. Redundant segments are removed from the data stream to form an optimized data stream, which is transferred to the remote data storage. Commands are issued to the remote data storage using the protocol to direct the remote data storage to reconstruct the initial data stream at the remote data storage using the optimized data stream and optionally segments from other data streams previously transferred to the remote data storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317377&OS=09317377&RS=09317377
owner: RIVERBED TECHNOLOGY, INC.
number: 09317377
owner_city: San Francisco
owner_country: US
publication_date: 20110323
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates generally to data storage systems, and systems and methods to improve storage efficiency, compactness, performance, reliability, and compatibility. In general, data storage systems receive and store all or portions of arbitrary sets or streams of data. Data storage systems also retrieve all or portions of arbitrary sets or streams of data. A data storage system provides data storage and retrieval to one or more storage clients, such as user and server computers. Stored data may be referenced by unique identifiers and\/or addresses or indices. In some implementations, the data storage system uses a file system to organize data streams into files. Files may be identified and accessed by a file system path, which may include a file name and one or more hierarchical file system directories. In other embodiments, data streams may be arbitrary sets of data that are not associated with any type of file system or other hierarchy.","Cloud storage services are one type of data storage available via a wide-area network. Cloud storage services provide storage to users in the form of a virtualized storage device available via a wide-area network (WAN), such as the Internet or a private WAN. In general, users access cloud storage services to store and retrieve data using web services protocols, such as REST, SOAP, or XML-RPC. Cloud storage service providers manage the operation and maintenance of the physical data storage devices; therefore, users of cloud storage services can avoid the initial and ongoing costs associated with buying and maintaining storage devices. Users of cloud storage services also avoid the administrative complexity arising from configuring, managing, and maintaining their own data storage systems. Cloud storage services typically charge users for consumption of storage resources, such as storage space and\/or transfer bandwidth, on a marginal or subscription basis, with little or no upfront costs. In addition to the cost and administrative advantages, cloud storage services often provide dynamically scalable capacity to meet its users changing needs.","Many data storage systems are tasked with handling enormous amounts of data. Although cloud storage services often have sufficient storage capacity to store large data sets, the bandwidth limitations of the wide-area network connecting storage clients with the cloud storage service make transferring large data sets to the cloud service time consuming.","To reduce the time and bandwidth required to transfer large data sets over a WAN, WAN optimization devices may be used in pairs on both sides of the WAN connection. WAN optimization typically improves the data transfer rates over a WAN by compressing data at the source using a first WAN optimization device, communicating the compressed data via the WAN to a destination, and then decompressing the data at the destination using a second WAN optimization device. However, this double-ended WAN optimization technique is difficult and expensive to use with cloud storage services, because the cloud storage service provider must purchase and configure a WAN optimization device to work with the WAN optimization devices at the storage clients' locations.","Another prior approach to reducing the time and bandwidth required to transfer data to a cloud storage service over a WAN is to store the data in its compressed form in the cloud storage service. In this approach, a WAN optimization device compresses the data at the source and communicates the compressed data via the WAN to cloud storage service. The cloud storage service then stores the data in its compressed form. Although this approach eliminates the need for a second WAN optimization device at the cloud storage service, the stored data is no longer in its native, uncompressed form. As a result, any storage client that wishes to read the data stored in the cloud storage service must include or be associated with a WAN optimization device to decompress and convert the data back to its original form. This requirement is especially burdensome where the cloud data storage is used to distribute data to a large number of users (such as part of a content distribution network) or where the cloud data storage is used to deploy applications and data to distributed or cloud computing systems.","Embodiments of the invention include a single-ended optimized storage protocol and systems and methods for optimized data transfer from a storage client to a cloud storage service or other type of remote data storage connected via a network. In an embodiment, the single-ended optimized storage protocol enables a storage client, cloud storage optimization device or application, or other type of application or operating system to direct a remote data storage to copy data. In response to commands via the single-ended optimized storage protocol, a remote data storage can copy any portion of a data stream at the remote data storage to a destination storage location within the same data stream or within a different data stream. The destination data stream may be stored at the remote data storage or a different remote data storage. The remote data storage may copy a portion of a data stream without transferring the data stream back to the storage client for processing.","A storage client, cloud storage optimization device or application, or other type of application or operating system may utilize the single-ended optimized storage protocol to optimize the transfer of data over a network between a storage client and a cloud storage service or other remote data storage. In an embodiment, a data stream is divided into segments. Redundant segments, which are segments that are identical to previously processed segments in the same or another data stream, are removed from the data stream to form a data stream optimized for transfer to the remote data storage.","In an embodiment, the optimized data stream is transferred to the remote data storage and stored. The storage client, cloud storage optimization device or application, or other type of application or operating system issues one or more commands via the single-ended optimized storage protocol to the remote data storage. These commands direct the remote data storage to reconstruct the initial data stream at the remote data storage using the contents of the optimized data stream and optionally segments from other data streams previously transferred to the remote data storage.","Embodiments of the invention reduce the time and bandwidth needed to transfer data to a storage device using a single-ended optimization architecture. Additionally, embodiments of the invention store data on the storage device in its native format, enabling any number of storage clients to access the data without the need for decompression or optimization devices.","To achieve these goals, embodiments of the invention include a single-ended optimized storage protocol for remotely copying data within or between data streams stored on a remote storage device. The single-ended optimized storage protocol enables a storage client to direct a remote storage device to copy some or all of the data in a data stream stored at the remote storage device. The data is copied by the remote storage device without the need to transfer data back to the storage client for intervening processing.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIGS. 1A-1B","FIG. 1A"],"b":["100","100","105","110"]},"Each data stream may be associated with a file; a serialized object or data structure; unstructured, semi-structured, or structured data; or any other arbitrary binary data. The remote storage device includes any physical or logical data storage device separate from the storage clients. The remote storage device may be connected with storage clients via one or more local-area networks (LANs), wide-area networks (WANs), and\/or storage-area networks (SANs).","In example , the single-ended optimized storage protocol enables a storage client to direct the remote storage device to copy data from a source data stream  to at least one destination data stream . In an embodiment, the storage client uses a storage interface API to identify source and destination data streams. Additionally, the storage client uses the storage interface API to select all or a portion of the data in the source data stream  to copy to the destination data stream . In this example , the portion of the data is identified by a source offset  representing the location of the beginning of the data to be copied and source length representing the amount of data to be copied. Alternatively, the portion of the data to be copied may be specified by two source offsets representing the locations of the beginning and end of the data to be copied within the source data stream .","The storage client also uses the storage interface API to specify a copy destination location in the destination data stream . The remote storage device will overwrite any data in the destination data stream that occupies the location intended for the copied data.","In a further embodiment, the storage interface API may optionally allow the storage client to specify multiple destination data streams and\/or locations in the destination data streams for the copied data in a single protocol command. For example, data from source data stream  is copied to destination data streams and . Additionally, this data is copied to destination locations and in the destination data stream . Conversely, if the storage interface API does not include the ability to specify multiple destination data streams and\/or destination locations for data in a single protocol command, this functionality can be implemented by storage clients using multiple protocol commands.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1B","b":["120","120","125","120","125","132","134","136"]},"As discussed above, in an embodiment of the invention, the remote storage device copies data between or within data streams stored by the remote storage device or between data streams stored by two or more remote storage devices in response to commands from storage clients using the single-ended optimized storage protocol. Moreover, these data copy operations can be performed by the remote storage devices without the need to transfer data back to the storage client for intervening processing.","The remote data storage devices may be implemented as one or more cloud storage services. Furthermore, embodiments of the single-ended optimized storage protocol may be implemented within a cloud storage communications protocol and\/or using internet transport protocols, such as HTTP, standard web services protocols, such as SOAP, REST, or XML-RPC, and\/or proprietary service protocols.","Using the single-ended optimized storage protocol, embodiments of the invention may reduce the time and bandwidth required to transfer data from a storage client to a cloud storage service via a WAN. Furthermore, embodiments of the invention using the single-ended optimized storage protocol do not require specialized WAN-optimization devices or additional decompression or computing capabilities at the cloud storage service provider. Moreover, although the single-ended optimized storage protocol enables storage clients to transfer data to cloud storage services with reduced time and bandwidth, the data is stored at the cloud storage service in its native form, making the data usable for other storage clients without WAN-optimization or decompression capabilities.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["200","200","205","205","210","210","210","210","210","210","210"],"i":["a ","b","a ","b"]},"User network location  may include a local-area network (LAN)  for facilitating communications between storage clients  and cloud storage services. In a further embodiment, user network location  may include a storage-area network instead of or in addition to the local-area network . The local-area network  is connected with a wide-area network (WAN) , such as the internet or a private wide-area network. Other network devices , such as gateways, firewalls, and routers, may be used to connect the local-area network  with wide-area network .","Also connected with the wide-area network  is one or more cloud storage services. Each cloud storage service is implemented at one or more cloud storage service data centers, such as cloud storage service data center . Cloud storage service data center  includes a cloud storage service interface  and at least one data storage devices , such as a file server or disk or storage array system. Cloud storage service interface  receives data read and write requests using cloud storage protocols, for example based on web services protocols such as XML-RPC, SOAP or REST, and performs corresponding storage operations with the data storage devices . Additionally, cloud storage service interface  implements the single-ended optimized storage protocol described above to copy arbitrary selections of data within or between data streams as specified by one or more storage clients. Cloud storage service interface  may be connected with the data storage devices  via local-area networks and\/or storage-area networks . Cloud storage service interface  may access data storage devices using file system protocols, such as CIFS or NFS, and\/or block-based storage protocols, such as iSCSI or iFCP.","To reduce the bandwidth and time required to transfer data from storage clients  at the user network location , an embodiment of system  includes cloud storage optimization device . As described in detail below, cloud storage optimization device  receives a data stream from a storage client , removes redundant information from this data stream to reduce its size, transfers the optimized data stream via the WAN  to the cloud storage service data center  for storage in storage device , and then generates one or more commands using the single-ended optimized storage protocol to direct the cloud storage service interface  to reconstruct the initial data stream in the storage device .","In embodiments of the invention, cloud storage optimization device  intercepts network traffic from storage clients  to identify storage write requests using cloud storage protocols. The cloud storage optimization device  then optimizes the intercepted data streams from the storage clients . In another embodiment, the cloud storage optimization device  presents an interface to storage clients  as if it were a remote cloud storage service. In this embodiment, the cloud storage optimization device  receives storage write requests from the storage clients  via a cloud storage protocol and optimizes the received data streams before transferring them to the cloud storage service. In still another embodiment, the cloud storage optimization device  presents one or more virtual storage devices to the storage clients . The virtual storage devices may be accessed by storage clients  using a file system protocol, such as CIFS or NFS, a block-based storage protocols, such as iSCSI or iFCP, and\/or any other type of standard or proprietary storage device protocol. In this embodiment, the cloud storage optimization device  receives storage write requests from storage clients to one or more virtual storage devices, converts the received data into optimized data streams, and transfers the optimized data streams to the cloud storage service using a cloud storage protocol and\/or a single-ended optimized storage protocol.","Embodiments of the cloud storage optimization device  may be implemented as a standalone device; integrated with other network devices, such as WAN optimization or storage virtualization devices; or as software executing on one or more of the storage clients .","In addition to user network location , embodiments of system  may include one or more additional user network locations . Additional user network location  include storage clients  and network devices , such as gateways, firewalls, and routers, to connect the local-area network and\/or storage-area network  with wide-area network . However, unlike user network location , additional user network location  does not include a cloud storage optimization device. Thus, storage clients  at additional user network location  do not receive the advantages of optimized data transfer to the cloud storage service. However, because the data streams are stored in their native format, rather than a compressed format, by the cloud storage service, storage clients  are able to access and use data streams without any additional intervening decompression applications or devices. System  may be used to enable storage clients  to distribute data efficiently to storage clients  at one or more additional network locations  and to other entities.","As described above, a cloud storage optimization device or application receives a data stream from a storage client, removes redundant information from this data stream to reduce its size, transfers the optimized data stream via the WAN to the cloud storage service data center for storage, and then generates one or more commands using the single-ended optimized storage protocol to direct the cloud storage service to reconstruct the initial data stream at the cloud storage service data center. To this end,  illustrates a method  of optimizing the transfer of data to a storage device according to an embodiment of the invention. Method  may be implemented by a cloud storage optimization device or application and\/or an application or operating system executed by a storage client.","Step  receives all or a portion of a data stream from a storage client. A data stream may be associated with a file; a serialized object or data structure; unstructured, semi-structured, or structured data; or any other arbitrary binary data.","Step  divides the received data stream into one or more segments using any segmentation algorithm known in the art. Embodiments of step  may divide the data stream into segments based on factors including the contents of the data stream, the potential size of a segment, and\/or the type of data in the data stream. Step  may use hashes, checksums, or other data characterization techniques to segment the data stream. Segments may be organized with respect to each other in flat or hierarchical relationships. Segments may be of fixed or variable length.","Step  identifies redundant segments. In an embodiment, a segment is redundant if another segment with identical contents exists elsewhere in the received data stream or optionally in a data stream previously processed. An embodiment of step  identifies redundant segments by determining a hash, checksum, and\/or other data characterization based on the contents of a given segment. The value of this data characterization of a segment is compared with the data characterization values of previously processed segments. If the data characterization value of a given segment matches that of a previously processed segment, step  specifies that the given data segment is redundant. In another embodiment, step  identifies redundant segments by comparing the contents of a new segment with the contents of previously processed segments. This direct data comparison may be performed instead of or in addition to the comparison of data characterization values of segments. Step  performs this evaluation for all of the segments produced by step .","In an embodiment, a cloud storage service optimization device or application maintains records of the data characterization values of some or all of the previously processed segments and\/or the contents of previously processed segments. Step  compares the data characterization value and\/or the contents of a given segment with these records to determine if the given segment is redundant. In a further embodiment, these records are associated with information identifying the locations of these previously processed segments, such as their associated data streams, beginning offsets in their respective data streams, and segment lengths or ending offsets.","In another embodiment, each unique segment is stored separately on a remote storage device. In this embodiment, step  access the remote storage device to determine if a given segment matches a previously stored segment. In a further embodiment, the unique segments are stored in association with file names or other identifiers corresponding to their data characterization values. Thus, step  may determine if a given segment is redundant by comparing its data characterization value with the file names or other identifiers of the segments stored in the remote data storage. If the remote data storage includes any segment having a file name or other identifier corresponding with the data characterization value of a given segment, then this segment is redundant.","Step  removes redundant segments from the data stream. Step  records the identity of each redundant segment and its location in the data stream so that these segments can later be restored to the data stream. In an embodiment, step  replaces the data of a redundant segment with data that can be easily compressed, such as a constant value like \u20180\u2019 or \u20181\u2019. In another embodiment, step  removes a redundant segment and replaces it with the contents of the next non-redundant segment.","Step  communicates a modified version of the received data stream to the remote storage device. In an embodiment, the modified version of the received data stream includes the non-redundant segments and does not include the redundant segments. The modified data stream may optionally include padding or other easily compressed data as a placeholder for the redundant segments.","Step  communicates the modified data stream to a remote data storage. The remote data storage may include a cloud storage service connected with the storage client providing the initial data stream via a wide-area network. In an embodiment, step  uses a cloud storage protocol, for example based on web services protocols such as XML-RPC, SOAP or REST, to transfer the modified data stream to the remote data storage. Because the modified data stream does not include the redundant segments, the bandwidth and time required to transfer the modified data stream to the remote data storage is typically much less than the amount of bandwidth and time that would be required by the initial data stream.","Step  generates one or more commands using the single-ended optimized storage protocol to restore the redundant segments to the modified data stream stored in the remote data storage, thereby reconstructing the initial data stream at the remote data storage. In an embodiment, step  generates at least one single-ended optimized storage protocol copy command for each segment to be restored to the modified data stream.","As discussed above, an embodiment of a single-ended optimized storage protocol copy command includes a source data stream identifier, a source offset, a source length or source ending offset, a destination data stream identifier, and a destination offset. For each redundant data segment to be restored to the modified data stream, an embodiment of step  creates a single-ended optimized storage protocol copy command with the source data stream identifier, source offset, and source length set to a location of a previously stored copy of the segment on the remote data storage. This previously stored copy of a segment may be part of a previously processed data stream or in another part of the modified data stream. Embodiments of step  use its records of previously processed segments and their storage locations and\/or queries of the contents of the remote data storage to determine the location of the previously stored copy of the segment for the single-ended optimized storage protocol copy command.","Similarly, step  sets the destination data stream identifier and destination offset in the single-ended optimized storage protocol copy command to the location of the previously removed redundant segment. In an embodiment, step  sets the destination data stream identifier to the modified data stream so that redundant segments are copied into the modified data stream by the remote data storage. The one or more single-ended optimized storage protocol copy commands generated by step  will direct the remote data storage to further alter the modified data stream so that its contents are identical to the initial data stream. In another embodiment, step  sets the destination data stream identifier to a different data stream in the remote data storage. In this embodiment, step  creates a new data stream identical to the initial data stream by copying non-redundant segments from the modified data stream to this new data stream and copying redundant segments from the modified data stream and\/or other data streams to the new data stream.","Step  sends the single-ended optimized storage protocol copy commands generated by step  to the remote data storage for execution. The remote data storage executes these copy commands to copy redundant segments into their appropriate places in the modified data stream, thereby reconstructing the initial data stream on the remote data storage.","Because the single-ended optimized storage protocol copy commands executed by the remote data storage copies segments without the need for intervening transfer to the storage client or cloud storage optimization device for processing, these copy commands can be completed relatively quickly and typically in much less time than it would take to transfer the initial data stream with its redundant segments directly to the remote data storage. This performance advantage typically exists where the remote data storage is connected with the storage client via a local-area network and\/or wide-area network.","As described above, redundant segments are removed from a data stream to create an optimized data stream for transfer via a local-area and\/or wide-area network to a remote data storage. Redundant segments may be any segment found in a previously processed data stream or in portions of the current data stream previously processed. Segments from previously processed portions of the current data stream may be used if the data stream is the first data stream to be transferred to the remote data storage or if some segments are repeated within a data stream but not found in any other previously processed data stream.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 4","b":["400","405","400","405","405"]},"The initial data stream  is converted to an optimized data stream  by removing redundant segments. In this example , redundant segments are replaced with easily compressed data, such as zeros or other constant values, in optimized data stream . For this example , the cloud storage optimization device or other entity processing the data stream determines that segments A, B, and C, although repeated within the initial data stream , have not been previously been transferred to the remote data storage. Therefore, the optimized data stream  includes a single copy of segments A, B, and C. In this example, segment D has been previously transferred to the remote data storage and thus all copies of this segment can be removed from the optimized data stream .","The optimized data stream  is then transferred to the remote data storage via a local-area, wide-area, and\/or storage area network. Because the redundant segments have been replaced with zeros in this example, the data compression built into many network and\/or storage interfaces, such as run-length encoding, reduces the optimized data stream  to a compressed data stream  of reduced size. Upon receipt of the compressed data stream , the remote data storage decompresses the data stream and stores the result in the form of the optimized data stream.","Following storage of the optimized data stream at the remote data storage, the storage client, cloud storage optimization device or application, or other application or device generates one or more single-ended optimized storage protocol commands to direct the remote data storage to reconstruct the initial data stream on the remote data storage. Example  illustrates the reconstruction  of the initial data stream on the remote data storage. One or more single-ended optimized storage protocol copy commands are executed by the remote data storage to copy segment A to locations . Similarly, one or more single-ended optimized storage protocol copy commands are executed by the remote data storage to copy segments B and C to locations  and , respectively. Because segment D was previously transferred to the remote data storage as part of a different data stream, one or more single-ended optimized storage protocol copy commands are executed by the remote data storage to copy segment D from previously transferred data stream  to locations  in the reconstructed data stream . Once a data stream has been reconstructed at the remote data storage, the data stream may be read by any number of storage clients in its native format.","As described above, embodiments of the invention may also utilize segments from previously transferred data streams to reduce the size of new data stream to be transferred to the remote data storage. However, this requires that the cloud storage optimization device or application, or other application or device, have an accurate record of the segments previously transferred to the remote data storage. If a first cloud storage optimization device transfers a data stream to a remote data storage using the optimized data transfer and another storage client later deletes or modifies this data stream, the first cloud storage optimization device's record of segments stored on the remote data storage may become inaccurate. This can cause errors in reconstruction of data streams at the remote data storage.","There are several approaches to prevent these types of reconstruction errors. First, storage clients may be restricted to read-only access for data streams that the cloud storage optimization device may use to reconstruct further data streams. Second, the cloud storage optimization device may verify the existence and\/or contents of segments on the remote data storage during the identification of redundant segments in new data streams. This approach may be implemented by including a query function in the single-ended optimized storage protocol that returns a hash, checksum, or other data characterization of specified data stored in the remote data storage to the cloud storage optimization device.","A third approach to preventing reconstruction errors includes storing copies of segments separately in the remote data storage in addition to the data streams provided to other storage clients. These separate copies of the segments are hidden and\/or protected from modification or deletion from other storage clients. The cloud storage optimization device may use these copies of the segments on the remote data storage as the source for reconstructing an initial data stream.","Embodiments of the invention may store a copy of each segment as a separate data stream or alternatively store a copy of two or more segments in a single data streams. A cloud storage optimization device or application may maintain records regarding the contents and access parameters (such as data stream identifiers or storage locations) of the copies of the segments. Alternatively, an embodiment of the cloud storage optimization device may rely on metadata associated with the segments stored on the remote data storage to identify the segments. For example, each segment stored on the remote data storage may be associated with a file name, data stream identifier, or other metadata field set to the value of the hash of its contents. The cloud storage optimization device may retrieve the metadata associated with segments stored at the remote data storage to determine whether segments in a data stream being processed are already stored at the remote data storage and thus are redundant.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 5","FIG. 5"],"b":["2000","2000"]},"Computer system  includes a central processing unit (CPU)  for running software applications and optionally an operating system. CPU  may be comprised of one or more processing cores. Memory  stores applications and data for use by the CPU . Examples of memory  include dynamic and static random access memory. Storage  provides non-volatile storage for applications and data and may include fixed or removable hard disk drives, flash memory devices, ROM memory, and CD-ROM, DVD-ROM, Blu-ray, HD-DVD, or other magnetic, optical, or solid state storage devices.","In a further embodiment, CPU  may execute virtual machine software applications to create one or more virtual processors capable of executing additional software applications and optional additional operating systems. Virtual machine applications can include interpreters, recompilers, and just-in-time compilers to assist in executing software applications within virtual machines. Additionally, one or more CPUs  or associated processing cores can include virtualization specific hardware, such as additional register sets, memory address manipulation hardware, additional virtualization-specific processor instructions, and virtual machine state maintenance and migration hardware.","Optional user input devices  communicate user inputs from one or more users to the computer system , examples of which may include keyboards, mice, joysticks, digitizer tablets, touch pads, touch screens, still or video cameras, and\/or microphones. In an embodiment, user input devices may be omitted and computer system  may present a user interface to a user over a network, for example using a web page or network management protocol and network management software applications.","Computer system  includes one or more network interfaces  that allow computer system  to communicate with other computer systems via an electronic communications network, and may include wired or wireless communication over local area networks and wide area networks such as the Internet. Computer system  may support a variety of networking protocols at one or more levels of abstraction. For example, computer system may support networking protocols at one or more layers of the seven layer OSI network model. An embodiment of network interface  includes one or more wireless network interfaces adapted to communicate with wireless clients and with other wireless networking devices using radio waves, for example using the 802.11 family of protocols, such as 802.11a, 802.11b, 802.11g, and 802.11n.","An embodiment of the computer system  may also include one or more wired networking interfaces, such as one or more Ethernet connections to communicate with other networking devices via local or wide-area networks.","The components of computer system , including CPU , memory , data storage , user input devices , and network interface  are connected via one or more data buses . Additionally, some or all of the components of computer system , including CPU , memory , data storage , user input devices , and network interface  may be integrated together into one or more integrated circuits or integrated circuit packages. Furthermore, some or all of the components of computer system  may be implemented as application specific integrated circuits (ASICS) and\/or programmable logic.","Further embodiments can be envisioned to one of ordinary skill in the art. In other embodiments, combinations or sub-combinations of the above disclosed invention can be advantageously made. The block diagrams of the architecture and flow charts are grouped for ease of understanding. However it should be understood that combinations of blocks, additions of new blocks, re-arrangement of blocks, and the like are contemplated in alternative embodiments of the present invention.","The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be described with reference to the drawings, in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 1A-1B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
