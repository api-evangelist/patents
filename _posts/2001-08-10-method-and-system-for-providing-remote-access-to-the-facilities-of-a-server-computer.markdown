---
title: Method and system for providing remote access to the facilities of a server computer
abstract: A method and system for providing remote access to the facilities of a server computer are provided. A site integration application programming interface at a co-branded Web site. The site integration application programming interface exposes a number of servlets that may be executed in response to requests received from a business partner Web site over a secure communications link. The servlets provide functionality for accessing the user registration and deletion facilities of the co-branded Web site. Moreover, the servlets also provide access to other administrative facilities provided at the co-branded Web site. The servlets also provide functionality for authorizing a user to access the co-branded we site. This servlet may be executed in conjunction with the login facilities of the business partner web site to permit concurrent login at both sites.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730089&OS=07730089&RS=07730089
owner: Punch Networks Corporation
number: 07730089
owner_city: Seattle
owner_country: US
publication_date: 20010810
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT"],"p":["This invention is a continuation-in-part of U.S. patent application Ser. No. 09\/441,614, filed Nov. 16, 1999, now abandoned which is expressly incorporated herein by reference, and which claims the benefit of U.S. Provisional Application No. 60\/108,661, filed on Nov. 16, 1998, which is hereby also incorporated herein by reference.","This invention relates generally to the management of computer databases and, more specifically, to computer systems for providing remote access to the facilities of a server computer operative to store and update a network database.","With the advent and explosion of the Internet, a wide variety of World Wide Web (\u201cWeb\u201d or \u201cWWW\u201d) sites have become available to users that provide all types of services and information. In order to provide a consistent user interface and brand name across several Web sites, a Web site may be \u201cco-branded.\u201d Co-branding refers to the process of creating a custom version of a Web site that is visually consistent with another Web site and, in some circumstances, that appears to be provided in part by the owner of the other Web site.","For instance, a Web site may be provided that offers a service through which users can maintain and update a shared network database. A business partner of such a Web site may desire to offer such a service to their employees or customers. However, the business partner may desire to have the service provided in a manner that is visually consistent with their main Web site. To accomplish this, a \u201cco-branded\u201d version of the Web site for maintaining and updating a shared network database is created. The co-branded Web site contains colors, graphics, and other visual elements that are visually consistent with the colors, graphics, and other visual elements utilized at the business partner's main Web site. Moreover, the business partner's Web site is modified so that the users of the business partner's Web site may access the co-branded Web site through the business partner's Web site. Because the sites are provided in a visually consistent manner, users are more comfortable using the co-branded Web site and do not feel as if they are being transported to an external Web site.","By co-branded a Web site as described above, a great deal of value may be provided to the business partner. The business partner can offer services that appear to come from the business partner without making a large investment in creating such a service from the ground up. However, such an arrangement is not without its drawbacks. For instance, the partner Web site and the co-branded Web site are typically password protected and therefore require users to register before they may be authorized to access the Web sites. This may be frustrating for a user or system administrator who has to register twice with each site and then login to each site separately for access. Moreover, when users are deleted from the partner Web site, they should also be deleted from the co-branded Web site. If this does not occur, a former employee or customer may retain access to the co-branded Web site even after their authorization to access the partner site has been deleted.","Accordingly, in light of the above, there is a need for a method and system for providing remote access to the facilities of a server computer that synchronizes the user registration, deletion, and other maintenance facilities of a co-branded Web site with those of a partner Web site. Additionally, there is a need for a method and system for providing remote access to the facilities of a server computer that permits a user to simultaneously login to a co-branded Web site and a partner Web site.","The present invention solves the above-described problems by providing a method and system for providing remote access to the facilities of a server computer that synchronizes the user registration, deletion, and other administrative facilities of a co-branded Web site with those of a partner Web site. Moreover, the present invention solves the above-described problems by providing a method and system for providing remote access to the facilities of a server computer that permits a user to concurrently login to a co-branded Web site and a partner Web site.","Generally described, the present invention provides a site integration application programming interface (\u201cAPI\u201d) at a co-branded Web site. The site integration API exposes a number of scripts, procedures and\/or programs in the server (\u201cservlets\u201d) that may be executed in response to requests received from a business partner Web site over a secure communications link. The servlets provide functionality for accessing the user registration and deletion facilities of the co-branded Web site. Moreover, the servlets also provide access to other administrative facilities provided at the co-branded Web site. The servlets also provide functionality for authorizing a user to access the co-branded Web site, also known as \u201clogging\u201d a user into the co-branded Web site.","More specifically described, a login user servlet is provided for receiving requests to authorize a user to access the co-branded Web site and for validating such requests. Through the use of the login user servlet, a user may be concurrently logged in to the co-branded Web site and a partner Web site. A create user servlet and a delete user servlet are provided for authorizing new users to access the co-branded Web site or deleting user authorization for accessing the co-branded Web site, respectively. A create webgroup servlet is provided for creating a new webgroup through which users may collaborate and share resources over a network communications link. Moreover, servlets are also provided for adding users to a list of users authorized to access the webgroup and for removing users from the list of users authorized to access the webgroup. Still further, servlets are provided for issuing an invitation to join the co-branded Web site to a user that has not joined the co-branded Web site. Additionally, a servlet is provided for issuing an invitation to join the co-branded Web site to a user that previously received such an invitation, but lost the previously issued invitation.","The present invention also provides a computer-controlled apparatus and a computer-readable medium for providing remote access to the facilities of a server computer.","Referring now to , an illustrative operating environment for an actual embodiment of the present invention will be described.  illustrates a WebGroups WWW site embodying aspects of the present invention. The WebGroups WWW site is operated as an Internet service available to any client computer -executing a WWW browser, or other Hypertext Transfer Protocol (\u201cHTTP\u201d) enabled application, and that is connected to the Internet . Additionally, client computers -may comprise any Internet enabled device, such as a cellular telephone, Internet kiosk, or other similar Internet appliance. Client computers -accessing the WebGroups WWW site may communicate through the Internet  via a dial-up modem A through an Internet Service Provider (\u201cISP\u201d), through a corporate Local Area Network (\u201cLAN\u201d) , via a high-speed cable or Digital Subscriber Line modem B, or a narrow-band (low-speed) or broad-band (high-speed) wireless network. Client computers -may comprise general purpose computers having local disks -as are well known to those skilled in the art.","In an illustrative embodiment, the WebGroups WWW site comprises three components that may execute on one or more computers: WWW server , punch server , and database server . All three components may execute simultaneously on a single monolithic machine, or each component may be executed on one or more machines independently, either locally or remotely. Utilizing a WWW browser executing on client computer -, a user can access the WebGroups WWW site via a Secure Hyper-Text Transfer Protocol (\u201cHTTPS\u201d) session or via a less secure HTTP session. Alternatively, utilizing an HTTPS- or HTTP-enabled application, operating system \u201cplug-in,\u201d or extension executing on client computer -, a user may access the WebGroups WWW site via an HTTPS or HTTP session. In a preferred embodiment, when accessing the WebGroups WWW site, all communication between the WWW browser and the WebGroups WWW site is encrypted with the Secure Sockets Layer (\u201cSSL\u201d) protocol as is known to those skilled in the art.","WWW server  receives and responds to HTTP requests. All user interactions with the WebGroups WWW site are performed through this server. HTML pages are transmitted and displayed to client computer -to log a user into the WebGroups WWW site, and to perform functions to publish and retrieve documents as described in more detail below. WWW server  comprises standard WWW server software as is known to those skilled in the art, along with an additional set of software components to customize the data returned to the client computer -. These additional software components are referred to herein as HTTP servlets.","The HTTP servlets are invoked when a user makes a request for specific information tailored to that user, for instance a file tree or member list. Application software residing on the WWW server  invokes the HTTP servlets. This application software can be resident within the WWW server software or it may comprise a separate application that communicates with WWW server . Operation of the HTTP servlets is described in more detail below with respect to .","The second component within the WebGroups WWW site is punch server . The HTTP servlets described above communicate with punch server . In response to this communication, punch server  executes additional application code, called punch servlets, which perform database queries and return results for display to the user by the HTTP servlets. For example, when a user logs into the WebGroups WWW site, the punch servlets provide a unique User ID and Password. This data is then transmitted from WWW server  to the HTTP servlets, which then communicate with punch server  to determine whether the information provided is valid.","Punch server  performs a database query to the third component, database server . Database server  returns the results of the query to punch server . Punch server  checks the data returned, and if the User ID and Password are valid, creates a file tree which it then returns to the appropriate HTTP servlet executing on WWW server . The HTTP servlet executing on WWW server  formats and displays the tree to the user in a dynamically-generated HTML file. Operation of the punch servlets is described in more detail below with respect to FIGS.  and A-C.","Punch server  is also responsible for reading and writing user files to the file system . Punch server  encrypts all files before writing them to the file system, and decrypts all files as it reads them. Punch server  may encrypt all files based on a single pre-determined algorithm, a set of pre-determined algorithms, or a dynamically generated algorithm based upon the characteristics of the publisher, the file type, the transaction time and date, or some other unique method as are known to those skilled in the art. Punch server  is also responsible for e-mail notifications and invitations. Punch server  is also responsible for initiating or receiving and responding to automatic update procedures and requests. When a user is invited to a new webgroup, the invited user is sent an e-mail notification via an external Simple Mail Transport Protocol (\u201cSMTP\u201d) e-mail server . Alternatively, or additionally, the invited user may be notified via some other real-time or non-real-time messaging system, or communications protocol. A user may be notified in a similar manner when a new file or version is published. A user may also be automatically transmitted new files or updates to existing files when a new file or version is published. Punch server  may also maintain a connection to an external Lightweight Directory Access Protocol (\u201cLDAP\u201d) server , or some other public or private Internet user-location service or database. In this manner, punch server  may utilize the LDAP server  to look up potential users and groups for inclusion in a new or existing webgroup.","The third component of the WebGroups WWW site, database server , executes commercial database software as is well known to those skilled in the art (e.g., Oracle, Sybase, or Microsoft Corporation's SQL Server). Database server  responds to queries from punch server , performs queries to the tables in its databases  and , and returns the results to punch server . As is described in more detail below, account database  and file management database  contain user account information, authority information (i.e., which user has access to which file(s)), file information such as name, creator, creation date, description, etc., and user file version (i.e., which users have which version of which files).","Referring now to , aspects of the invention will be described in the context of the WebGroups WWW site embodying aspects of the present invention. As described above, a user may utilize a standard WWW browser  to visit the WebGroups WWW site. The user may then provide a name, password, and e-mail address to establish a WebGroups account. Once the user has provided this information, the user is presented with the display as seen in . The display comprises a webgroup tree , which may include files, folders, or other webgroups. If the user selects a webgroup in the webgroup tree , such as \u201cTest User's First WebGroup,\u201d the user is presented with status information regarding the webgroup. The status information may include information regarding the user's authority in the webgroup, a description of the webgroup, and information regarding the contents of the webgroup.","The user may also be presented with menu items for receiving account information, help, and for logging out of the webgroup server. The user may also be presented with an \u201caction bar\u201d containing menu items for performing a variety of functions within webgroup tree . The action bar may include menu items for publishing, downloading, and deleting files or folders from the webgroup. The action bar may also include menu items for creating a new folder or webgroup, adding members to an access control list for a file, folder, or webgroup, and for changing the view of webgroup tree .","When the user selects the action bar menu item for creating a new folder, the user is presented with new folder dialog box . In new folder dialog box , the user may provide a name and a description for the folder to be created. The user may then select the \u201ccreate folder\u201d user interface button to create the new folder in webgroup tree . For instance, if the user names the new folder \u201cFolderAAA,\u201d a new folder named \u201cFolderAAA\u201d is created in the webgroup tree . The newly created folder  is reflected in the webgroup tree shown in .","Referring now to , folder information display  is provided if the user selects folder . Folder information display  includes information for the selected folder, including the user's authority, the date and identity of the user that created the selected folder , a description of the selected folder , and the number of files and folders within the selected folder . Once the user has selected folder , the user may select the action bar menu item for publishing another file or folder into folder . When the action bar menu item for publishing is selected, the publish file dialog box  is displayed. The publish file dialog box  permits the user to browse their client computer to identify a file to be published to the webgroup. The user may also select a user interface button for publishing an entire folder. The user may also enter a description of the file or folder to be published. For instance, the user may publish the file \u201cFaq.txt\u201d to the webgroup server and provide with it the description \u201cFAQ.\u201d","Once the user selects the file to be published to the WebGroups WWW site, a determination is made as to whether a version of the file exists on the WebGroups WWW site. If a version of the file does exist on the site, only the differences between the file to be published and the version of the file on the site are transmitted. The transmitted information is then stored on the site and may be used later to recreate that version of the file for other users. Publishing a file from the client to the WebGroups WWW site is described in detail below with respect to .","Referring now to , the publication of file  is reflected in webgroup tree . If the user selects the file , the file information display  is provided. The file information display  provides information regarding the selected file, including the name, description, size, and creator of the file . The file information display  also provides the status of the version of the file on the client computer. In this manner, the user will be notified if the client computer does not contain an up-to-date version of the file. The file information display  also includes the location of the file on the client computer's local disk. The location of each file on the client computer is maintained so that the user will not need to be prompted when publishing a new version of the file or downloading a more recent version.","With file  still selected, the user may select the menu item for providing a file version display . The file version display  identifies each version of the file stored on the WebGroups WWW site, the date each file was created, the publisher of each file, and the size of the version information. By selecting from the versions identified in file version display , the user may select to download any previous or subsequent version of the file. Upon selecting a version from the file version display , punch server  will identify and transmit the delta file(s) required to modify the version of the file stored on the client computer to the version selected. If the client computer does not have any previous or alternate version of the selected file stored, the delta file(s) comprising the entire file will be transmitted to the client computer.","Referring now to , the user may download the latest version of the file , by selecting the file  and then selecting the action bar menu item \u201cdownload.\u201d The differences between the latest version stored on the server and the version stored on the user's client computer are then transmitted to the client computer. If the client computer does not have a previous or alternate version of the selected file stored, the differences comprising the entire file are transmitted to the client computer. A software application program running on the client computer combines the differences with the version on the client computer to create the latest version. Once the download has been completed, the download information display  is presented to the user which confirms that the download was successfully completed. An illustrative method for downloading files is described in more detail below with reference to .","With the file  selected, the user may also select the action bar menu item \u201cmembers.\u201d The file authority display  is then provided, which allows the user to identify the other members of the webgroup that have access to the selected file  or folder. The user may add new members and set the authority levels for each member. The user is also asked to provide the e-mail address or other contact information for each member. The user may type this information in directly, or may search for this information using the LDAP server . Using this information, members of the webgroup will be invited, and may be notified and updated, when new files or versions are published to the webgroup.","Referring now to , an illustrative software architecture of client computer  embodying aspects of the present invention will be described. Client computer  executes WWW browser , which allows the computer to connect to the WebGroups WWW site over the Internet (or Intranet) . The webgroups application software  executes in conjunction with WWW browser  and utilizes client computer's  Transport Control Protocol\/Internet Protocol (\u201cTCP\/IP\u201d) service  to enable this connection.","TCP\/IP is the standard protocol used on the Internet  for creating stream connections between two computers and is well known to those skilled in the art. TCP\/IP provides the ability to connect two computers together if they are both connected to the Internet, are reachable over the Internet (i.e., they are not hidden behind a firewall), or reachable via proxy server (i.e., via an Internet reachable server which makes and receives requests on behalf of clients behind a firewall), and they have a unique, valid Internet Protocol (\u201cIP\u201d) address. To connect to the WWW server  (shown in ), the user of WWW browser  enters the WebGroups Uniform Resource Locator (\u201cURL\u201d) address (e.g. http:\/\/www.punchwebgroups.com) into the address window (not shown) of WWW browser . This URL is translated into a unique IP address (e.g. 204.182.34.2) by the Internet Domain Name Service (\u201cDNS\u201d) service. If WWW server  is found, a stream connection is created between the client computer  and WWW server  that allows interaction with the WebGroups WWW site.","The Secure Sockets Layer (\u201cSSL\u201d) protocol  is built on top of the TCP\/IP layer. The SSL protocol  encapsulates all data sent between the computer and the server thereby providing authentication, data integrity, and privacy. Authentication may be either unidirectional or mutual. For example, a challenge may be presented by the WWW browser , to which the WWW server  must respond with a valid, digitally signed digital certificate. This certificate must be signed by a known certificate authority root certificate, or a new root certificate for the signing authority must also be sent to the client computer . The WWW browser  verifies the validity of the digital certificate by verifying the digital signature on the server certificate and the root certificate and any other certificates in the certificate hierarchy. If the certificate is valid, the SSL protocol  may proceed. Mutual authentication requires a certificate for both the WWW server  and the WWW browser , and both sides of the communication perform the validity checks.","Data integrity is provided by the SSL protocol  by attaching unique data (known as a \u201cMAC\u201d to those skilled in the art) to each packet sent over the network. This unique data is created via a secure one-way hash function. As each packet arrives, the data is passed through the one-way function and compared with the MAC. This guarantees that the data has not been corrupted during transmission. The data is secured by encrypting each packet with a uniquely generated symmetric session key. The session key is then encrypted with the recipient's public key. The recipient decrypts the session key, then uses this key to decrypt the data in each packet. The SSL protocol  thus secures the communication between the WWW browser  and the WWW server  in an end-to-end fashion.","The WWW browser  provides a method of sending and receiving information from the user computer to other computers over the Internet . HTTP communications class  provides a standard mechanism for sending and receiving HTML documents. These documents are displayed to the user by WWW browser . Those skilled in the art will appreciate that other types of application programs such as client-resident applications, operating system \u201cplug-ins,\u201d or application extensions may be used to provide this functionality. WWW browser  also accesses a mechanism to store persistent data to a local disk  located on client computer , called a cookie class . Cookie class  is also used to create unique user sessions with the webgroups server and other Internet services.","To create a unique user session, WWW server  creates a random string of bits for each user accessing the server and writes this information into a cookie. The cookie is sent to the WWW browser  and stored in a cookie \u201ccache\u201d located on local disk  of the client computer . Each time the user accesses WWW server , the cookie is sent to the WWW server  with the HTTP request. WWW server  uses the data contained in the cookie to look up the user's information. Cookies provide the ability to \u201cexpire\u201d; that is, to be deleted after a certain period of time defined by the cookie creator, thus providing a mechanism for session timeout. Cookies are used in an embodiment of the present invention for session management and for caching the user's User ID. The use and implementation of cookies is well known to those skilled in the art.","WebGroups application software  is downloaded to WWW browser  when the WebGroups WWW site is first accessed. Among other features, WebGroups application software  provides the webgroups tree display  to the user. When the webgroups client application is a WWW browser, a preferred embodiment of the webgroups application software  consists of a Java Applet for File Storage and recombination\/differencing, persistence class , and a combination of HTML and JAVASCRIPT for user interface class  and information tree class . As described above, the webgroups tree display  provides a hierarchical list of webgroups, folders, and files to the user in the output window of WWW browser . The user may manipulate the webgroups tree  (shown in ), by opening and closing nodes, or drilling down to any desired file or folder. Only the set of nodes available to the user is transmitted to the WWW browser  and displayed to the user by WebGroups application software . Other nodes that may exist on the WebGroups WWW site but that the user does not have authority to view are not displayed to the user.","User interface functions for implementing WebGroup actions, such as creating a new webgroup, publishing a file, or downloading a file, are implemented by user interface class . When the webgroups client application is a WWW browser, the user interface class  is created on WWW server  and sent to the WWW browser  for display. User interface class  displays information about selected nodes, members attached to a node, and other details. It also allows the user to create, modify, and delete data in the information tree.","Persistence class  provides functionality for differencing and recombination. As described in more detail below, this class allows the WWW browser , and webgroups application software  to read and write files from local disk , to publish files from local disk  to the WWW server , and to download files from WWW server  to local disk . When publishing files, persistence class  creates delta files containing the differences between the old and modified versions of the file being published, and sends this delta file to WWW server . If the file is being published for the first time, the entire file will be sent as one delta file. When downloading files, persistence class  attempts to download a delta file if client computer  already contains a previous version of the file. This delta file is recombined with the older version on local disk  to create the new version. If the file is not found, persistence class  will request that WWW server  send the entire file. Illustrative routines for publishing and downloading modules are described in greater detail below with reference to  and .","Referring now to , an illustrative software architecture for the WebGroups WWW site will be described. WWW server  includes an HTTP server  that responds to standard HTTP requests such as Put, Post, and Get from WWW browsers running on computers attached to the Internet. HTTP server  responds to these requests with static or dynamic HTML pages or other data. HTTP servers are well known to those skilled in the art.","HTTP class  captures specific HTTP requests and forwards them to components embodied in punch server . If HTTP server  receives a request that is specially tagged or that it cannot understand, it uses the HTTP class  to service the request. The HTTP class  communicates with components in punch server  via the Java Remote Method Invocation (\u201cRMI\u201d) protocol, which allows the punch server  components to reside on any server with which the HTTP server  can communicate.","User\/session manager class  creates, retrieves, and updates user account information. This class is also responsible for account creation, user login, logout, session management, and user invitations and notifications. When a new user account is created, the account data (user name, ID, password, e-mail address, etc.) is sent to the HTTP server , which it forwards to the HTTP class . The HTTP class  uses RMI to connect to the user\/session manager class , which then uses the database access class  to store the new account information in the account database . The user\/session manager class  is responsible for maintaining the data integrity of the user information stored in the database, performing error and uniqueness checks on all data to be stored.","When an existing user attempts to log into the WebGroups WWW site, the user\/session manager class  is queried to determine the validity of the user's ID and password. This class queries the database to look up the user's information. If the ID and password are valid, the user is allowed to log in. An entry for the user is then added to the session manager and a unique session cookie is generated and sent to the user's WWW browser. The session table tracks which users are logged into the WebGroups WWW site. The session manager keeps track of which users are active and which are idle in a session table. After a configurable period of inactivity, the user is removed from the session table. If the user attempts another action, the user must first log in before any action may be performed. When a user logs out from the WebGroups WWW site, their ID is removed from the session table.","User\/session manager class  is also used when a new webgroup is created. The user creating the webgroup may either enter the data for each user to be invited to the webgroup manually, or they may query the user\/session manager class  to look for groups of users using the Lightweight Directory Access Protocol (LDAP) class . The LDAP class  queries an external LDAP server  to retrieve user or group information, which is returned to user and used in creating or editing the members of a webgroup.","After a user is logged into the WebGroups WWW site, the information tree class  (shown in ) requests that the webgroups tree be transmitted to the WWW browser . The information tree manager class  is queried by the HTTP class  to dynamically create the webgroups tree. The user's session key cookie is used to query the file management database  to look up the nodes that the user has authority to view. A hierarchical tree is created of these nodes, which is then returned to the user. The information tree class  in WWW browser  () receives this tree and displays it to the user.","When a new file is published, the filename, contents (a delta file), and an optional description are sent from WWW browser  to HTTP server , which forwards it to the HTTP class , which then forwards it to the recombination and difference class . This class uses the information tree manager class  to verify that another file with the same name has not already been published into the same level of the tree. If not, the delta file contents are sent to the encryption class , where they are encrypted for storage on the file system . The file system access class  creates a new directory structure for the file, and writes the contents to the file system . The information tree class  is sent the filename, location, description, size, creator, creation date, and other identifying information about the file, which is stored in the file management database . The user publishing the file and all other users associated with the webgroup into which the file was published are added to the file management database , with their version downloaded information set appropriately. Next, each user is sent an e-mail notification of the new file. The user\/session manager class  sends the invitation information to the e-mail notification class , which uses an external Simple Mail Transfer Protocol (\u201cSMTP\u201d) server  to send the notification messages. Additionally, the user\/session manager class  may send the information to the HTTP class , which would then communicate with the HTTP server , which may initiate communication with other members of the webgroup for transmitting new files and updates to existing files.","A similar procedure to that described above is used for downloading files. HTTP class  sends a download request to the information tree manager class , which determines the version of the file the user currently has. Recombination and difference class  is used to retrieve the correct version(s) from the file system, build the desired version, and transmit it to client computer .","Referring now to , an illustrative account database and file management database utilized in an embodiment of the present invention will be described. Account database  and file management database  are used by the information tree manager class  (shown in ) to determine which user is allowed to view, download, or publish nodes in the webgroup tree. Files are published into folders or webgroups . Webgroups are a special type of folder. All folders and files are virtual on the WebGroups WWW server; that is, there is no concrete representation of the folder and file hierarchy stored on the file system . Rather, the data resides only in the file management database . Any number of folders may be created, in any desired nesting hierarchy. Associated with each folder and file in the system is an access control list (\u201cACL\u201d)  stored in file management database , which creates a mapping between the folder or file and the users that have access to the folder or file. The set of users in the ACL is created when a new webgroup is created. All folders and files (nodes) within the webgroup have the same set of user associated with them. However, the ACL for each folder and file within a webgroup may be customized.","Each user has a single authority on every node within a webgroup. This authority may be manage, publish, subscribe, or limited. Limited is the lowest authority level and does not allow the user to view or access the node. Subscribe allows the user to view the information, download it, but not publish new information. Publish authority adds the ability to create new folders inside the node and to publish new files and versions. Manage authority adds the ability to delete the node and all of its children, to add and delete members, and to modify their existing authorities.","File user information is associated with each ACL that contains the current state of the file on the user's local disk . If the user has already downloaded a version of the file to their local disk, the ACL is modified to contain the version number the user has downloaded, when they downloaded it, and where it is stored on their local disk. This information is kept up to date each time a user downloads or publishes a new file or version, and is used both to build the set of nodes to send to the user in the webgroups tree, and to send notifications and updates to all appropriate users in the ACL.","Referring now to , an illustrative server file system embodying aspects of the present invention will be described. File management database  resides on database server  (shown in ), and comprises pointers -to delta files -. Delta files -are stored on punch server  as encrypted user files . Each delta file -represents the differences between one version of a file and a subsequent version. Each delta file -is published to a directory named with the hexadecimal representation of a unique database identifier associated with each delta file -. Therefore, each version of a file resides in its own subdirectory. In order to minimize the random access memory required by the client and server machines participating in a publish operation, each file is partitioned into delta files -as it is published. Punch server  stores delta files -into their respective version subdirectories. As each delta file -is written, the punch server encrypts the files as is well known to those skilled in the art. Punch server  also decrypts delta files -as it reads them.","Referring now to , the creation of a new WebGroups account and logging into the WebGroups WWW site will be described. Routine  begins at block , where a main menu is displayed including a form into which the user must enter their WebGroups ID and password. At block , a determination is made as to whether the user has requested a new user account. If the user has not requested a new account, Routine  branches to block , where a determination is made as to whether the user has supplied a WebGroups ID and password. If the user has supplied an ID and password, a determination is made at block  as to whether the user is registered. This is accomplished by querying the HTTP class . The HTTP class  queries the user\/session manager class , which queries the database access class  to look up the user ID and password provided by the user. If the user ID matches that returned from the database, the password is hashed and compared to that returned. If the password also matches, the user is logged into the WebGroups WWW site. If either do not match, an error is presented to the user at block , and the user is allowed to try again.","When a user has successfully logged in to the WebGroups server at block , the user\/session manager class  creates a new session object for the user. A unique, random string of bits is generated and inserted into the \u201cSession Key\u201d cookie by the server. This string is added to the user\/session manager class  session table to provide a mapping between the Session Key and the User ID, and to provide a list of all users currently logged into the WebGroups WWW site. Real-time communications methods such as on-line chat, voice-based conversations, or some other \u201cinstant messaging\u201d type of application, may be utilized to provide inter-user communication. The Session Key cookie is transmitted with each request from the webgroups client application  to the WebGroups WWW site. This cookie is used by the user\/session manager class  to retrieve the User ID that is then used to retrieve information from the database server  to display to the user.","If, at block , it is determined that the user has requested a new account, the user is presented with a form into which they may provide their first name, last name, e-mail address, and their desired User ID and Password. At block , this form is submitted to the WebGroups WWW site. The user\/session manager class  then verifies the validity of the information presented. If the information is valid, the user\/session manager class  queries the database server  for another account with the given User ID or e-mail address. If an account with the given User ID or e-mail address already exists in the database, an error message is returned to the user. If both are unique, the user account is created, a new record is added to the database, and the user is then logged into the WebGroups WWW site at block .","Referring now to , Routine  continues to block , where the webgroup tree and action bar are displayed to the user. The information tree class  makes a request to HTTP server  to download the webgroups tree, it is important to note that this is a virtual folder and file hierarchy based upon each individual user, as the webgroups server  contains no direct mapping of folders and files for each user in the server file system . The information tree manager class  on the server is queried to build the webgroups tree for the user. The Session Key cookie is used by the user\/session manager class  to retrieve the User ID, which is then used by the information tree manager class  to query the account database  to retrieve the set of webgroups, folders, and files (called nodes) to be displayed to the user. As described above, only those nodes to which the user has authority and access are returned, based on the nodes' ACLs . Nodes that the user has only Limited authority over are not returned. The set of nodes is returned to the WWW browser , where it is formatted by the Information Tree class  and displayed to the user in the browser window.","At block , a user may provide input using a mouse, keyboard, or other user interface selection device. When a user selects a node in the webgroup tree displayed by the WWW browser , the information tree class  sends a request to the HTTP server  for information about that node. At block , a determination is made as to whether a webgroup has been selected. If a user selects a webgroup, Routine  branches to block , where the information about the selected webgroup is retrieved by the information tree manager class  from the file management database , and is returned to the WWW browser , where the information tree class  formats it for display to the user. This information may consist of the webgroup name, description, creation date, creator, members associated with the webgroup, or nodes contained within the webgroup. If a determination is made at block  that the user did not select a webgroup, Routine  continues to block .","At block , a determination is made as to whether the user has selected a folder. If the user selects a folder, Routine  branches to block , where information about the selected folder is retrieved by the information tree manager class  from the file management database , and is returned to the WWW browser , where the information tree class  formats it for display to the user. This information may consist of the folder name, description, creation date, creator, members associated with the folder, or nodes contained within the folder. If, at block , a determination is made that the user did not select a folder, Routine  continues to block .","At block , a determination is made as to whether the user has selected a file. If the user has selected a file, Routine  branches to block , where information about the selected file is retrieved by the information tree manager class  from the file management database , and is returned to the WWW browser , where the information tree class  formats it for display to the user. This information may consist of the file name, size, description, creation date, creator, or members associated with the file. If, at block , a determination is made that the user did not select a file, Routine  continues to block , shown in .","Referring now to , a determination is made at block  as to whether the user has selected a user interface button for creating a new folder. If the user has selected such a button, and the user has manage or publish authority on the selected node, Routine  branches to block . At block , the user is prompted to provide a folder name and optionally a description for the new folder. Once the user submits this information, the new folder is created at the current selected location in the webgroups tree and is displayed to the user and to all other members of the associated webgroup. If, at block , it is determined that the user did not select a user interface button for creating a new folder, Routine  continues to block .","A determination is made at block  as to whether the user has selected a user interface button for deleting or removing the selected node. If the user has selected such a button, the Routine  branches to block . If the user has manage authority on the selected node, the user is prompted for confirmation of the deletion operation at block . If the user confirms the deletion operation, the selected node and all its child nodes are deleted, and the webgroups tree is redrawn to reflect deletion. This operation performs the same for webgroups, folders, and files. If a file is deleted, all of its versions are also deleted. If, at block , it is determined that the user did not select a user interface button for deleting an object, Routine  continues to block .","At block , a determination is made as to whether the user has selected a user interface button for publishing a file or folder. If the user selects the publish button, and the user has manager or publish authority, the user is presented with one of two options depending on the selected node. If a file is selected, the user is prompted with a publish version form. If a folder is selected, the user is presented with a publish file form which allows the user to select and publish a new file from the local disk  into an existing folder or webgroup. The publish file form also has an additional button to \u201cpublish a folder\u201d. Publishing a version publishes a new version of a file that has already been published into the selected webgroup. If the user selects the \u201cpublish a folder\u201d button, they will be allowed to select and publish an entire directory of files from the local disk  into a folder or webgroup. Block  for publishing a file or folder is described in detail below with reference to . If the user has not selected a menu item for publishing a file or folder, Routine  continues to block .","At block , a determination is made as to whether the user has selected a menu item for downloading the selected node. If the user selects the download button, and if the user has any authority other than limited, the user is presented with one of two options at block . If a file is selected, the user is prompted with a download file form. If a folder is selected, the user is presented with a download folder form. The download file form allows a user to download a specific file to any location on their local disk. The download folder form downloads the contents of an entire webgroups folder to a given folder on the user's local disk . Block  for downloading a file or folder is described in greater detail below with reference to . If, at block , the user has not selected a user interface button for downloading the selected file, Routine  continues to block .","At block , a determination is made as to whether the user has selected a menu item for creating a new webgroup. If the user selects the new webgroup button, the Routine  branches to block , where a new webgroup is created. An illustrative Routine  for creating a new webgroup is described below with reference to .",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIGS. 11A-11B","FIG. 11A"],"b":["1100","1100","1102","1100","1104","20","20","1100","1106","1100","1114"]},"At block , a delta file is created for the file to be published. An illustrative routine for creating the delta file is described below with reference to . Routine A continues from block  to block , where the delta file is transmitted from the client computer  to the punch server , and stored on the server file system as encrypted user files . As a final confirmation of the publish operation, punch server  compares a hash calculated on the published file to the hash calculated for the same file by the client computer . At block , an e-mail is sent to members of the webgroup to which the file was published, notifying them that a new version has been received. Communications may be initiated with each member of the webgroup to automatically transmit the delta file(s) required to update them to the new version.","If, at block , a determination is made that a file has not been selected, Routine A continues to block . At block , the user is prompted to identify a folder or directory to be published. Once the user has identified a directory to be published, Routine A continues to block . At block , the selected directory is published to the punch server . An illustrative routine B for publishing a folder is described below with reference to . Routine A continues from block  to block , where it returns to block , .","Referring now to , Routine B for publishing a folder begins at block , where the first file in the directory is identified and selected. Routine B continues to block , where Routine A for publishing a file is executed for the selected file. Routine B continues to block , where a determination is made as to whether more files remain in the directory to be published. If additional files remain to be published, Routine B branches to block , where the next file in the directory is selected. The next file is then published at block . If no additional files remain to be published at block , Routine B continues to block , where it returns to block , .","Referring now to , an illustrative Routine  for downloading an electronic document will be described. Routine  begins at block , where a file or folder identifier is received that identifies the file or folder to be downloaded. At block , a determination is made as to whether the user has selected a folder to be published. If the user has selected a folder, Routine  branches to block , where the first file in the folder is located. If the user has not selected a folder, Routine  continues to block .","At block , a determination is made as to whether any version of the selected file exists on the client computer . If a version of the file exists on the client computer , Routine  continues to block . If no version of the file exists on the client computer , Routine  branches to block , where the user is permitted to identify a location on client computer  for storing the selected file. Routine  then continues to block .","At block , the last version of the file downloaded by client computer  is identified. From block , Routine  continues to block , where the delta file or files necessary to make the last version downloaded by client computer  current are identified. At block , the delta files are transmitted from the punch server  to client computer . At block , the delta files are combined with the client version of the selected file to create a complete version of the selected file on the client computer . At block , a read-only reference copy of the previous version is stored on the client computer .","Routine  continues from block  to block , where a determination is made as to whether additional files remain to be published. If additional files remain to be published, Routine  branches to block , where the next file is retrieved, and blocks  through  are repeated. If no additional files remain to be published, Routine  continues to block  where it returns to block , .","Referring now to , an illustrative Routine  for creating a new webgroup will be described. As described above, webgroups are groups of users that have access to all information published into the webgroup. All webgroups are created by users and any user may create a new webgroup, provided they have not exceeded a predefined webgroup quota. At block , a user provides a name for the webgroup, and optionally adds a description to it. From block , Routine  continues to block , where the user may optionally provide the identity of additional users of the webgroup. Each user added will see this new webgroup in their webgroups tree when they next log into the WebGroups WWW site or, if they are already logged in, when their webgroups tree is refreshed. Additionally, at block , the creator adds the name, e-mail address, and default authority level (Manage, Publish, Subscribe, or Limited) for each user that is to have access to the new webgroup. At block , all of the webgroup information is sent to the HTTP server, where the user\/session manager class  creates the new webgroup.","At block , the user\/session manager class  creates a new entry for the webgroup in the file management database , and creates a new ACL  for the webgroup using the database access class . For each user to be added to the webgroup, the database access class  is queried to determine if the user already has an account (using the e-mail address as the key). If the user has an account, they are added to the invitation list. If they do not have an account, a temporary account is created for the user along with a temporary user ID and Password. The user is then added to the invitation list. All users on the invitation list are sent an e-mail notifying them of the new webgroup using the e-mail notification class  and the external SMTP server . For new accounts, the users are also sent a new account creation message containing their temporary ID and Password. Any manager of a webgroup may delete the webgroup and all its contents. A manager may also modify existing user authorities, add new users to the webgroup, and delete existing users from a webgroup.","The LDAP server  may also be queried by the user to find groups of users based on name or regular expression matches. If the user searches for a regular expression, all matches found in the LDAP server  are returned to the user. The user may then select one of more of these groups to add to the webgroup. For every LDAP group added to the webgroup, each member of that group is added individually to the webgroup.","Referring now to , an illustrative Routine  for creating a delta file will be described. The output of Routine  is a delta file comprising the differences between two modules. As used herein, a module means any logical or physical collection of data, including, but not limited to, a byte, a database record, a database table, a data file, a file system folder or directory, or a computer, or a logical collection of computers. Routine  begins at block , where a relimiter for a first module is determined. The relimiter comprises the most frequently occurring data in the module. Illustrative routines for determining a relimiter for a module are described below with respect to .","Routine  continues from block  to block , where the first module is divided into sections called module blocks following each occurrence of the relimiter. At block , the second module is also divided into sections called module blocks following each occurrence of the relimiter. At block , the contents of module blocks for the first and second modules are sequentially compared to determine which module blocks have changed between the first and second modules. At block , the module blocks that have changed are saved and\/or transmitted as a delta file. In an alternative embodiment, the changed module block(s) can also be saved and\/or transmitted as individual delta file(s). At block , Routine  returns to block , .","Referring now to , an illustrative Routine  for determining a relimiter will be described. Routine  begins at block , where a determination is made as to whether a relimiter has been previously determined for the module. If a relimiter has been previously determined for the module, there is no need to re-calculate it. Therefore, Routine  continues to block , where it returns to block , . If a relimiter has not been previously determined, Routine  branches to block .","At block , the data element occurring most frequently in the module is determined. The data element may comprise a bit, byte, word, or other data element. The module may be scanned sequentially to determine the most frequently occurring data element. Routine  continues from block  to block , where the relimiter is set to the most frequently occurring data element determined in block . At block , a determination is made as to whether the relimiter is optimal for the module. In an embodiment, this determination is made by determining the number of times the relimiter occurs in the module. The relimiter occurring the largest number of times is the optimal relimiter. Another factor used to determine the optimal relimiter may include the distance between occurrences of the relimiter. If the relimiter is optimal, Routine  continues to block . If the relimiter is not optimal, Routine  branches to block .","At block , the most frequently occurring data element neighboring the relimiter is determined. From block , Routine  continues to block , where the relimiter is set to the concatenation of the relimiter and the most frequently occurring data element neighboring the relimiter. Routine  then continues to block , where another determination is made as to whether the relimiter is optimal. If the relimiter is not optimal, blocks  and  repeat. If the relimiter is optimal, Routine  continues to block , where it returns to block , . An example of Routine  applied to an illustrative module is described below with respect to .","Referring now to , an alternate Routine  for determining a relimiter and creating a delta file will be described. Routine  begins at block , where the first and second modules are broken into module blocks of a predetermined sized. Rather than utilizing a dynamically determined relimiter as described above with respect to , Routine  uses a relimiter that is of a predetermined size. For instance, the relimiter may be predefined as 512 bits, or 256 bytes. In this manner, each of the modules is broken into module blocks of the same predetermined size.","Block  continues to block , where the module blocks of the first module are compared to the module blocks of the second module to determine which modules blocks have changed. At block , the module blocks that have changed are saved as a delta file. From block , Routine  returns to block , .","Referring now to , , and A-C, an illustrative example of creating a delta file for two modules and will be described. As described above, a relimiter must first be determined for module (block , ). To determine the relimiter, the data element occurring most frequently must be determined (block , ). By sequentially scanning module , it is determined that the most frequently occurring data element, a bit in this example, is a \u201c1.\u201d Therefore, the relimiter is set to \u201c1\u201d (block , ). Because a one bit relimiter is not optimal, the most frequently occurring data element neighboring the relimiter is determined (blocks  and , ). To accomplish this, the most frequently occurring bits preceding and succeeding each occurrence of a \u201c1\u201d in module are determined. The most frequently occurring bit preceding each \u201c1\u201d in module is a \u201c0.\u201d Likewise, the most frequently occurring bit succeeding each \u201c1\u201d in module is also a \u201c0.\u201d Therefore, the most frequently occurring 3-bit pattern is \u201c010.\u201d The relimiter is accordingly set to \u201c010\u201d (block , ).","The above process is again repeated with \u201c010\u201d as the relimiter. This results in the determination that the most frequently occurring 5-bit pattern is \u201c10100.\u201d However, because \u201c10100\u201d occurs only once in module , and the pattern \u201c010\u201d occurs six times in module , pattern \u201c010\u201d is the optimal relimiter. Accordingly, \u201c010\u201d is utilized as the relimiter for module ","According to another embodiment of the invention, a predefined relimiter may be used. For instance, the relimiter \u201c101\u201d may be predefined and utilized to break modules into blocks as described above. In even yet another embodiment of the present invention, a predetermined number of data elements may be used to break modules into blocks. For instance, modules may be broken into blocks that are 100 bytes long. Other methods for breaking modules into blocks may be apparent to those skilled in the art.","Once the relimiter has been determined, modules and are broken into module blocks following each occurrence of the relimiter (blocks  and , ). This process is illustrated in , and results in the creation of module blocks and for modules and , respectively. It should be appreciated by the reader that module blocks and may be created physically by creating new files for each of the module blocks, or may be created virtually by creating pointers to each of the module blocks. In an additional embodiment of the present invention, this process may continue by comparing the identified module blocks with each other to identify and remove duplicate module blocks.","Once modules and have been divided into module blocks and , the modules blocks are compared sequentially to determine which module blocks have changed (block , ). This process is illustrated in , and results in a list of module blocks that have changed between modules and . The module blocks that have changed are saved as a delta file (block , ). Because the delta file comprises only those module blocks that have changed, the delta file may be combined with a previous version of the module to create a new version of the module. In an additional embodiment of the present invention, this process may continue by comparing the changed module blocks with each other to identify and remove duplicate module blocks.","Turning now to , an illustrative embodiment of the invention will be described for providing remote access to the registration and maintenance facilities of the web server . According to this embodiment of the invention, a \u201cco-branded\u201d WebGroups WWW site  may be provided. For instance, a business partner of the operator of the WebGroups WWW site may desire to have a version of the WebGroups WWW site available for their employees or customers. In order to provide a version of the WebGroups WWW site that is user friendly, the co-branded version of the WebGroups WWW site may be provided in a manner that is visually consistent with a business partner website  provided by the business partner. As an example, the co-branded WebGroups WWW site  may include a color scheme, header graphics, and site-specific text, that makes the co-branded WebGroups WWW site  visually and verbally consistent with the business partner website . In order to provide such co-branding, partner customization data  may be stored at the web server  that identifies the visual attributes and other data that the web server  may utilize to present the co-branded WebGroups WWW site  in a manner that is visually consistent with the business partner website .","In this embodiment of the present invention, a user authorized to utilize the co-branded WebGroups WWW site  may log into the web server  through a direct connection from the client computer . Facilities are provided at the web server  to allow a user utilizing the client computer  to log into both the business partner website  and the co-branded WebGroups WWW site  provided by web server  through a single login on the partner site. Additionally, facilities are also provided at the web server  for allowing remote administration of the co-branded WebGroups WWW site  by an operator of the business partner web server . These facilities are described in detail below.","The facilities maintained at the web server  for providing concurrent login at the business partner web server  and the web server  and the facilities for maintaining the co-branded WebGroups site  are accessed via a site integration application programming interface (\u201cAPI\u201d) . In particular, the site integration API  includes a login user servlet  for processing login requests to the co-branded WebGroups WWW site  from the business partner web server . The login servlet  and the related operation of the business partner web server  are described below with respect to . The site integration API  also maintains facilities for updating information regarding authorized users of the co-branded WebGroups WWW site  and for deleting user authorization to access the co-branded WebGroups WWW site . These facilities are contained in the update user servlet  and the delete user servlet , respectively. These facilities are described below with respect to . The web server  also provides facilities for authorizing new users to access the co-branded WebGroups WWW site . This functionality is contained in a create user servlet  which is described below with respect to .","The web server  also provides facilities for allowing remote administration of webgroups. For instance, the create webgroup servlet  provides a facility for remotely instructing the web server  to create a new webgroup. The create webgroup servlet  is described below with respect to . Similarly, facilities are provided for adding users to the group of users authorized to access a webgroup and for removing such users. These facilities are provided by the add users to webgroup servlet  and the remove users from webgroup servlet . These facilities are described below with respect to , respectively.","A facility may also be provided by the lost invitation servlet  that permits a user to retrieve an invitation number that had been previously issued to the user but lost. This is necessitated by the fact that when a current webgroup user invites another user who does not have an active WebGroup WWW site account to join a webgroup, an invitation number is issued to the new user that references their name and e-mail address in lieu of an automatically generated login and password. In order to create a new WebGroup WWW site account and accept the invitation, the new user must enter this invitation number when he or she first registers. Since the original invitation number is required to register, a mechanism must exist for the user to recover and retrieve that number if the new user loses the invitation. This functionality is provided by the lost invitation servlet , which is described below with respect to .","Turning now to , an illustrative Routine  will be described for processing a login request at the business partner website . The Routine  begins at block , where a login request is received at the business partner website . The Routine  then continues to block , where an attempt is made to log the user into the business partner website . This would typically include checking the login and password provided by the user against a database of authorized users maintained at the business partner web server .","From block , the Routine  continues to block , where a determination is made as to whether the login and password provided by the user are valid. If the login and password are not valid, the Routine  branches to block , where it ends. If the login and password are valid, the Routine  continues from block  to block , where the user is logged into the business partner website. The Routine  then continues from block  to block  where a determination is made as to whether the user should also be logged into the co-branded WebGroups WWW site  provided by the web server . If the user is not to be logged into the co-branded WebGroups WWW site , the Routine  branches from block  to block , where it ends. If the user is to be logged into the co-branded WebGroups WWW site , the Routine  continues from block  to block .","At block , a secure communications link, or connection, is opened between the business partner web server  and the web server . This secure communications link may comprise an HTTPS connection or other type of secure link. Other types of secure communications links may be apparent to those skilled in the art. From block , the Routine  continues to block  where a request is transmitted for the login user servlet  located on the web server  via the secure communications link. When such a request is received at the web server , the web server  determines whether the user may be authorized to access the co-branded WebGroups WWW site , and returns an HTTP status code indicating success or failure. The status code is received by the business partner web server  via the secure communications link. Accordingly, at block , a determination is made as to whether the user was successfully logged into the web server  and the co-branded WebGroups WWW site . If a success code was not received at block , the Routine  branches to block  where an indication is provided that the user has not been authorized to utilize the co-branded WebGroups WWW site . The Routine  then continues from block  to block , where it ends. If, at block , it is determined that a success code was returned, the Routine  continues to block  where an indication is provided that the user has been authorized to utilize the co-branded WebGroups WWW site . The Routine  then continues from block  to block , where it ends.","Referring now to , an illustrative Routine  will be described that illustrates the operation of the login user servlet  according to an actual embodiment of the present invention. As described above with reference to , the login user servlet  is executed in response to a request from the business partner web server  to authorize a user for access the co-branded WebGroups WWW site . Accordingly, the Routine  begins at block  where a login request is received at the server computer  from the business partner website  via a secure communications link. The Routine  then continues to block , where determination is made as to whether the user is authorized to access the co-branded WebGroups WWW site . This determination may be made by consulting a co-branded WebGroups WWW site user database , shown in . If the user is not authorized to access the co-branded WebGroups WWW site , the Routine  branches to block , where a failure status code is returned. If the user is authorized to access the co-branded WebGroups WWW site , the Routine  continues from block  to block , where the user is authorized to access the co-branded WebGroups WWW site . The Routine  then continues from block  to block .","At block , a determination is made as to whether a passthrough flag was included with the login request. A passthrough flag indicates to the web server , that the user should be passed directly through to a session with the co-branded WebGroups WWW site . If, at block , it is determined that a passthrough flag has not been set, the Routine  branches to block  where a status code is returned to the business partner web server  indicating success. The status code may also include a URL for accessing the user's account with the co-branded WebGroups WWW site . The Routine  continues from block  to block , where it ends. If, at block , it is determined that the passthrough flag has been set, the Routine  continues from block  to block , where the user is redirected to the user session with the co-branded WebGroups WWW site . The Routine  then continues from block  to block , where it ends.","As mentioned briefly above, the site integration API  provided at the web server  also provides facilities for integrating the registration services of the business partner website  with the co-branded WebGroups WWW site . Referring now to , an illustrative Routine  will be described which illustrates the operation of the create user servlet  for providing a portion of such functionality. The create user servlet  provides functionality for registering a new user as an authorized user of the co-branded WebGroups WWW site . In particular, the create user servlet  authorizes a new user based on a request received from the business partner web server . In this manner, a new user may be registered to access the co-branded WebGroups WWW site  at the same time a registration is created allowing the user access to the business partner web site . This type of synchronization can greatly reduce the administrative overhead incurred when registering users separately at the co-branded WebGroups WWW site  and the business partner website .","The Routine  begins at block , where a request is received at the web server  for the create user servlet . This request is received at the web server  from the business partner web server  via a secure communications link. This request may also be transmitted from the business partner web server  in response to the creation of a new user profile at the business partner web server . The request may include a site password for the co-branded WebGroups WWW site . This password comprises a string value that validates the request and assures that the request is originating from an appropriate source. The request may also include a login ID to identify the new user to be created, a password for the new user to be created, an e-mail address for the new user to be created, and the new user's first and last names.","The request to execute the create user servlet  may also optionally contain an invitation number. The invitation number contains an integer that represents an invitation associated with this user. The invitation number will be passed when the new user has been invited to join the co-branded WebGroups WWW site  by an existing user. Because a user can receive multiple invitations, more than one invitation number may be passed with the request. All invitation numbers are automatically associated with the same user. Additionally, once an invitation number has been associated with a user, it is no longer valid when received in conjunction with a request.","The Routine  continues from block  to block  where a determination is made as to whether the site password included as part of the request is correct. If the site password is incorrect, the Routine  branches to block  where a failed validation status code is returned to the business partner web server . If, at block , it is determined that the site password is correct, the Routine  continues to block . At block , a determination is made as to whether the user to be created currently exists in the co-branded WebGroups WWW site user database . If the user already exists in the user database, the Routine  branches to block , where a status code indicating that the user already exists is returned to the business partner web server . If the user does not already exist, the Routine  continues from block  to block .","At block , a new user entry is created in the co-branded WebGroups WWW site user database . This entry will include parameters passed as a part of the request, including the new user's name, login ID, password, and e-mail address. The Routine  then continues from block  to block  where a determination is made as to whether an invitation number was also passed with the request. If an invitation number was passed with the request, the Routine  branches to block , where a determination is made as to whether the invitation number is valid. If the invitation number is not valid, the Routine  branches to block  where a success code is returned indicating a failure to associate the invitation number with a valid invitation number. If, at block , it is determined that the invitation number is valid, the Routine  continues to block  where the invitation number is invalidated so that it may not be utilized with a future request.","If, at block , it is determined that an invitation number was not passed with the request, the Routine  continues to block  where a status code is returned to the business partner web server  indicating that the new user was successfully created. From blocks , , , and , the Routine  continues to block , where it ends.","As described briefly above, the site integration API  also provides functionality for updating a user entry in the co-branded WebGroups WWW site user database . This functionality is typically provided in response to a request from the business partner web server  over a secure communications link, and may be utilized by the business partner web server  to coordinate changes to a user database located at the business partner web server  with the co-branded WebGroups WWW site user database .","Referring now to , an illustrative Routine  showing the operation of the update user servlet  for providing functionality for updating a user database will be described. The Routine  begins at block , where a request is received to update user information stored in the co-branded WebGroups WWW site user database  via a secure communications link. The request may include the login and password for the user whose information is to be changed. The request may also include a key identifying the parameter to be changed and the new value for the parameter. For example, if a user's password was to be changed, the parameter would include text identifying the password parameter and a new value for the password.","The Routine  continues from block  to block , where a determination is made as to whether the login and password supplied as part of the request are correct. If the login and password are incorrect, the Routine  branches to block  where a status code indicating a failed validation is returned to the business partner web server . If, at block , it is determined that the login and password are correct, the Routine  continues to block . At block , the user information contained in the co-branded WebGroups WWW site user database  is modified as requested in the received change parameter, or parameters. The Routine  then continues to block , where a success status code is returned to the business partner web server . The Routine  then continues to block , where it ends.","Turning now to , an illustrative Routine  will be described which illustrates the operation of the delete user servlet . A user may be deleted from the co-branded WebGroups WWW site user database  in a manner similar to that described above with reference to  for creating a new user. The Routine  begins at block  where a request is received at the web server  from the business partner web server  via a secure communications link. The request identifies the delete user servlet  along with the login and password for the user to be deleted. The Routine  then continues from block  to block , where a determination is made as to whether the received login and password are correct. If the received login and password are incorrect, the Routine  branches to block  where a failed validation status code is returned to the business partner web server . If, at block , it is determined that the login and password are correct, the Routine  continues to block .","At block , the user information associated with the received login and password is deleted from the co-branded WebGroups WWW site user database . The Routine  then continues to block , where a success status code is returned from the web server  to the business partner web server  via the secure communications link. The Routine  then continues from block  to block , where it ends.","Turning now to , an illustrative Routine  will be described that illustrates the operation of the create webgroup servlet . The create webgroup servlet  creates a new webgroup at the co-branded WebGroups WWW site  in response to a request received from the business partner web server  via a secure communications link. In this manner, the operator of the business partner web server  can create new webgroups and assign members to these new groups without the requirement that they utilize the user interface front end provided at the co-branded WebGroups WWW site .","The Routine  begins at block , where a request is received for the create webgroup servlet  via a secure communications link. As mentioned above, this request is typically received from the business partner web server . The request includes a login and password for the user desiring to create a new webgroup. The request also includes a string value that represents the webgroup name, and an optional series of string values that identify users who should be authorized to access the new webgroup.","The Routine  continues from block  to block , where a determination is made as to whether the login and password supplied as a part of the request are correct. If the login and password are incorrect, the Routine  branches to block , where a failed validation status code is returned to the business partner web server . If, at block , it is determined that the login and password are correct, the Routine  continues to block .","At block , a determination is made as to whether the user identified by the login received as a part of the request has exceeded their quota for creating new webgroups. If the user has exceeded their quota, the Routine  branches to block , where a quota exception status code is returned to the business partner web server . If, at block , it is determined that the user has not exceeded their webgroup quota, a new webgroup is created as specified in the webgroup name parameter received with the request. The Routine  then continues from block  to block .","At block , a determination is made as to whether users were identified as part of the request to create the new webgroup. If users were not identified, the Routine  branches to block , where it ends. If, at block , it is determined that users were specified as a part of the request, the Routine  continues to block . At block , the users specified as part of the request are added to the new webgroup and provided with permission, or authorization rights, to access the new webgroup. The Routine  then continues from block  to block , where it ends.","Turning now to , an illustrative Routine  will be described that shows the operation of the add users to webgroup servlet . The add users to webgroup servlet  allows users to be added to the group of users authorized to utilize an existing webgroup. It is typically received in response to a request from the business partner web server  via a secure communications link. In this manner, the operator of the business partner web server  can add users to existing webgroups without the requirement that they utilize the user interface provided by the co-branded WebGroups WWW site .","The Routine  begins at block , where a request is received for the add users to webgroup servlet  via a secure communications link. The request includes a login and password for the user desiring to add new users to a webgroup, the identity of the webgroup to which users should be added, and the e-mail addresses for one or more new users to be added to the webgroup.","The Routine  continues from block  to block , where a determination is made as to whether the login and password supplied as a part of the request are correct. If the login and password are incorrect, the Routine  branches to block , where a failed validation status code is returned to the business partner web server . If, at block , it is determined that the login and password are correct, the Routine  continues to block .","At block , a determination is made as to whether a valid webgroup was identified as a part of the request. If a valid webgroup was not identified as part of the request, the Routine  branches to block  where an invalid webgroup status code is returned to the business partner web server . If, at block , it is determined that a valid group was identified as a part of the request, the Routine  continues from block  to block .","At block , a determination is made as to whether the user identified as a part of the request has the appropriate authorization to add users to the specified webgroup. If the user does not have the correct authorization, the Routine  branches to block , where an invalid authorities status code is returned to the business partner web server . If, at block , it is determined that the user has the appropriate authority to add users to the webgroup, the Routine  continues from block  to block .","At block , a determination is made as to whether the new user to be added to the webgroup is currently a member of the webgroup. If the user to be added is currently a member of the webgroup, the Routine  continues to block , where it ends. If the user to be added is not currently a member of the webgroup, the Routine  branches to block , where the new user is added to the webgroup and provided with the appropriate authority to utilize the webgroup.","The Routine  then continues to block , where an electronic message is transmitted to the new user with notification that the user has been added to the new webgroup. The electronic message may comprise an e-mail message, an instant pager message, or other type of electronic message known to those skilled in the art. From block , the Routine  continues to block  where a success status code is returned to the business partner web server . The Routine  then continues to block , where it ends.","Turning now to , an illustrative Routine  will be described that shows the operation of the remove users from webgroup servlet . The remove users from webgroup servlet  allows users to be removed from the group of users authorized to utilize an existing webgroup. It is typically received in response to a request from the business partner web server  via a secure communications link. In this manner, the operator of the business partner web server  can remove users from existing webgroups without the requirement that they utilize the user interface provided by the co-branded WebGroups WWW site .","The Routine  begins at block , where a request is received for the remove users from webgroup servlet  via a secure communications link. The request includes a login and password for the user to remove users from a webgroup, the identity of the webgroup from which the user should be removed, and the e-mail addresses for one or more users to be removed from the webgroup.","The Routine  continues from block  to block , where a determination is made as to whether the login and password supplied as a part of the request are correct. If the login and password are incorrect, the Routine  branches to block , where a failed validation status code is returned to the business partner web server . If, at block , it is determined that the login and password are correct, the Routine  continues to block .","At block , a determination is made as to whether a valid webgroup was identified as a part of the request. If a valid webgroup was not identified as part of the request, the Routine  branches to block  where an invalid webgroup status code is returned to the business partner web server . If, at block , it is determined that a valid group was identified as a part of the request, the Routine  continues from block  to block .","At block , a determination is made as to whether the user identified as a part of the request has the appropriate authorization to remove users from the specified webgroup. If the user does not have the correct authorization, the Routine  branches to block , where an invalid authority status code is returned to the business partner web server . If, at block , it is determined that the user has the appropriate authority to remove users from the webgroup, the Routine  continues from block  to block .","At block , a determination is made as to whether the user to be removed from the webgroup is currently a member of the webgroup. If the user to be removed is not currently a member of the webgroup, the Routine  continues to block , where it ends. If the user to be removed is a current member of the webgroup, the Routine  branches to block , where the user is removed from the webgroup. The Routine  then continues to block , where a success status code is returned to the business partner web server . The Routine  then continues to block , where it ends.","Referring now to , an illustrative Routine  will be described that illustrates the operation of the new invitation servlet . When a current webgroup user invites another user who does not have an active WebGroup WWW site account to join a webgroup, an invitation number is issued to the new user that references their name and e-mail address in lieu of an automatically generated login and password. In order to create a new account and accept the invitation, the new user must enter this invitation number when he or she first registers. Since the original invitation number is required to register, a mechanism must exist for the user to recover and retrieve that number if the new user loses the invitation. This functionality is provided by the new invitation servlet .","The Routine  begins at block , where a request is received for the new invitation webgroup servlet  via a secure connection from the business partner web server . The request includes the e-mail address for which a new invitation number should be issued. The Routine  continues from block  to block , where a determination is made as to whether the e-mail address received as part of the request is valid. If the e-mail address is invalid, the Routine  branches to block  where a failed validation status code is returned to the business partner web server .","If, at block , it is determined that the received e-mail address is valid, the Routine  continues to block . At block , an invitation number associated with the received e-mail address is generated. The Routine  then continues to block , where an electronic message is transmitted to the received e-mail address including the retrieved invitation number. The Routine  then continues to block  where a success status code is returned to the business partner web server . The Routine  then continues to block , where it ends.","Referring now to , an illustrative Routine  will be described that illustrates the operation of the lost invitation servlet . As described briefly above, when a current webgroup user invites another user who does not have an active WebGroup WWW site account to join a webgroup, an invitation number is issued to the new user that references their name and e-mail address in lieu of an automatically generated login and password. In order to create a new account and accept the invitation, the new user must enter this invitation number when he or she first registers. Since the original invitation number is required to register, a mechanism must exist for the user to recover and retrieve that number if the new user loses the invitation. This functionality is provided by the lost invitation servlet .","The Routine  begins at block , where a request is received for the lost invitation webgroup servlet  via a secure connection from the business partner web server . The request includes the e-mail address for which a lost invitation number should be reissued. The Routine  continues from block  to block , where a determination is made as to whether the e-mail address received as part of the request is valid. If the e-mail address is invalid, the Routine  branches to block  where a failed validation status code is returned to the business partner web server .","If, at block , it is determined that the received e-mail address is valid, the Routine  continues to block . At block , the invitation number associated with the received e-mail address is retrieved. The Routine  then continues to block , where an electronic message is transmitted to the received e-mail address including the retrieved invitation number. The Routine  then continues to block  where a success status code is returned to the business partner web server . The Routine  then continues to block , where it ends.","It should be appreciated that the present invention provides a method and system providing remote access to the facilities of a server computer. While an illustrative embodiment of the invention has been illustrated and described, it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same becomes better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 2A-2B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 3A-3B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 4A-4B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 5A-5B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 8A-8B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 10A-10C"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 17A-17C"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 28"}]},"DETDESC":[{},{}]}
