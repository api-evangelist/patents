---
title: Cataloging system for image-based backup
abstract: Examples of systems and methods for cataloging image-based backups are disclosed. In certain implementations, these systems and methods can obtain information about file system structure from a volume undergoing image-based backup. The systems and methods can generate a catalog of the file system structure that can be stored with the backup image. The systems and methods can generate a searchable index of the catalog so that users can search for files within the backup image without being required to manually mount the backup image containing the searched-for file. As a result, in certain embodiments, users advantageously can more quickly locate and restore files from image-based backups.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569446&OS=09569446&RS=09569446
owner: Dell Software Inc.
number: 09569446
owner_city: Aliso Viejo
owner_country: US
publication_date: 20110608
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","I. Introduction","II. Example Backup Systems","III. Example Cataloging Processes","IV. Example File-Level Restore or Recovery Processes","V. Terminology"],"p":["This application claims the benefit of priority under 35 U.S.C. \u00a7119(e) of U.S. Provisional Patent Application No. 61\/352,745, filed on Jun. 8, 2010, and entitled \u201cCATALOGING SYSTEM FOR IMAGE-BASED BACKUP,\u201d the disclosure of which is hereby incorporated by reference in its entirety.","Many companies take advantage of virtualization solutions to consolidate several specialized physical servers and workstations into fewer servers running virtual machines. Each virtual machine can be configured with its own set of virtual hardware (e.g., processor, memory, ports, and the like) such that specialized services that each of the previous physical machines performed can be run in their native operating system. For example, a virtualization layer, or hypervisor, can allocate the computing resources of one or more host servers into one or more virtual machines and can further provide for isolation between such virtual machines. In such a manner, the virtual machine can be a representation of a physical machine by software.","In many virtual machine implementations, each virtual machine is associated with at least one virtual machine disk or image located in one or more files in a data store. The virtual machine image can include files associated with a file system of a guest operating system. The virtual machine image can be copied, moved, backed up, or the like, similar to a general data file.","This disclosure describes examples of systems and methods for cataloging image-based backups. In certain embodiments, these systems and methods obtain information about file system structure from a volume undergoing image-based backup. The systems and methods can generate a catalog of the file system structure, which can act like a content index for the files, directories, and\/or folders of the file system. The systems and methods may generate a searchable index from the catalog so that users can search for files (or directories or folders) within the backup image without being required to manually mount the backup image containing the searched-for file. As a result, in certain embodiments, users advantageously can more quickly locate and restore files from image-based backups.","In certain aspects, embodiments of a system for backing up a virtual machine disk file in a virtual computing environment are disclosed. In some embodiments, the system comprises a computer system comprising computer hardware, and the computer system comprises a data store. The computer system can be programmed to implement a cataloging module and a backup module. The cataloging module can be configured to access a virtual machine disk file comprising a file system of a guest operating system of a virtual machine to obtain metadata about the file system. The metadata can comprise information about a logical structure of the file system. The cataloging module can also be configured to analyze the metadata to determine a logical hierarchy of a set of files in the file system and to analyze the metadata to determine one or more attributes of the set of files in the file system. The cataloging module can also be configured to generate a catalog comprising information about the logical hierarchy and the one or more attributes of the set of files in the file system and to store the catalog outside the virtual machine. The backup module can be configured to backup the virtual machine disk file to a backup image stored on the data store.","In some embodiments, the computer system may be further programmed to implement a restore module, which can be configured to receive a search inquiry for a file that may be included in a backup image that can be associated with a catalog. The restore module can also be configured to generate a searchable index from the catalog associated with the backup image, search the searchable index of the catalog associated with the backup image to determine matches to the search inquiry, and output information relating to the matches to the search inquiry. In some embodiments, the restore module may be further configured to receive a selection of a match to the search inquiry, mount the backup image associated with the selection of the match to the search inquiry, and restore the selection from the mounted backup image to a target. The restore module may be configured to search multiple savepoints for a file or a directory, where a savepoint can include a backup image and its associated catalog.","In certain aspects, embodiments of a method of backing up a virtual machine disk file in a virtual computing environment are disclosed. In some embodiments, the method is performed under control of a computer system comprising one or more physical computing devices. The method can comprise accessing metadata of a virtual machine disk file comprising a file system of a guest operating system of a virtual machine executing on a host server. The metadata can comprise information about a logical structure of the file system. The method can also comprise analyzing the metadata to determine a logical hierarchy of a set of files in the file system and one or more attributes of the set of files in the file system, generating a catalog comprising information about the logical hierarchy and the one or more attributes of the set of files in the file system, and storing the catalog in a persistent storage outside the virtual machine. The method can also comprise indexing the catalog to provide a searchable index and backing up the virtual machine disk file to a backup image. In some embodiments, the method can comprise filtering the metadata according to at least one filtering criterion to determine the set of files in the file system.","In certain aspects, embodiments of a computer-readable storage medium comprising computer-executable instructions configured to implement a method of backing up a virtual machine image are disclosed. In some embodiments, the method comprises accessing metadata of a virtual machine image comprising a file system of a guest operating system of a virtual machine, analyzing the metadata to determine a logical hierarchy of a set of files in the file system and one or more attributes of the set of files in the file system, generating a catalog comprising information about the logical hierarchy and the one or more attributes of the set of files in the file system, storing the catalog in a persistent storage, indexing the catalog to provide a searchable index, and backing up the virtual machine image to a backup image.","The metadata of the virtual machine file or image can comprise information about a logical or physical structure of a file system in a virtual disk file. For example, the metadata may comprise a Master File Table (MFT), inodes or vnodes, and so forth.","Backups of virtual machine images may include two general types\u2014file-based backups and image-based backups. A file-based backup backs up individual files of a virtual disk image. A file-based backup can allow a user to select which files of an image to back up or can automatically back up certain files. Many file-based backups provide the ability to easily search for files that were backed up. In contrast, an image-based backup can back up an entire virtual disk image. An advantage of backing up an entire image is the ability to rapidly restore an image, as opposed to individually restoring files. However, because an entire image is backed up, files cannot be easily searched for in a backup image. A user instead typically mounts a backup image and then searches for the file. If several image-based backups have been performed, the user may need to mount several different backup images before finding the desired file.","This disclosure describes examples of systems and methods for cataloging image-based backups. In certain embodiments, these systems and methods obtain information about file system structure from a volume undergoing image-based backup. The systems and methods can generate a catalog of the file system structure, which can act like a content index for the files, directories, and\/or folders of the file system. The systems and methods may generate a searchable index from the catalog so that users can search for files (or directories or folders) within the backup image without being required to manually mount the backup image containing the searched-for file. As a result, in certain embodiments, users advantageously can more quickly locate and restore files from image-based backups.","Embodiments of the systems and methods for cataloging image-based backups will now be described with respect to the Figures. These systems and methods are described in the context of virtual machine systems. However, it should be understood that some or all of the features described herein can be applied to image-based backups of physical systems. For example, in some implementations, a physical disk can be mounted remotely (e.g., using common internet file system (CIFS) or network file system (NFS) protocols), and the backup and cataloging operations described herein performed over a network.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1A","b":["100","100","120","140","102","130","102","106","104","112","100","112","142","144","142"]},"In certain embodiments, the virtual machine(s)  can use the virtual disk file  or virtual machine image residing on the data store  to store its operating system, program files, and other data associated with its activities. Example formats of virtual disk files can include Virtual Hard Disk (VHD) from Microsoft Corp. (Redmond, Wash.), Virtual Machine Disk (VMDK) from VMware, Inc. (Palo Alto, Calif.), Virtual Desktop Image (VDI) by Oracle Corporation (Redwood City, Calif.), and so forth.","As further illustrated in , the backup system A can include a backup, or target, server  for storing backup files, such as a backup of one or more of the virtual disk files . As shown, the backup server  is coupled to the network  and can directly communicate with the management server . The management server  can cause backups of virtual disk files  to be stored in the backup server .","As shown in , the network  can provide a wired and\/or wireless communication medium between the host server , the management server  and\/or the backup server . In certain embodiments, the network  includes a local area network (LAN). In yet other embodiments, the network includes one or more of the following: internet, intranet, wide area network (WAN), public network, combinations of the same or the like. In certain embodiments, the network  can be configured to support secure shell (SSH) tunneling or other secure protocol connections for the transfer of data between the host server(s)  and\/or the data store(s) .","In certain embodiments, the host server  can include one or more computing devices configured to host one or more virtual machines  executing on top of a hypervisor . In certain embodiments, the hypervisor  can decouple the physical hardware of the host server  from the operating system(s) of the virtual machine(s) . Such abstraction allows, for example, for multiple virtual machines  with different operating systems and applications to run in isolation or substantially in isolation on the same physical machine.","The hypervisor  can include a virtualization platform that allows for multiple operating systems to run on a host computer at the same time. For instance, the hypervisor  can include a thin piece of software that runs directly on top of the hardware platform of the host server  and that virtualizes resources of the machine (e.g., a native or \u201cbare-metal\u201d hypervisor). In such embodiments, the virtual machine(s)  can run, with their respective operating systems, on the hypervisor  without the need for a host operating system. Examples of such bare-metal hypervisors can include, but are not limited to, ESX SERVER by VMware, Inc. (Palo Alto, Calif.), XEN and XENSERVER by Citrix Systems, Inc. (Fort Lauderdale, Fla.), ORACLE VM by Oracle Corporation (Redwood City, Calif.), HYPER-V by Microsoft Corporation (Redmond, Wash.), VIRTUOZZO by Parallels, Inc. (Switzerland), or the like.","In yet other embodiments, the host server  can include a hosted architecture in which the hypervisor  runs within a host operating system environment. In such embodiments, the hypervisor  can rely on the host operating system for device support and\/or physical resource management. Examples of such hosted hypervisors can include, but are not limited to, VMWARE WORKSTATION and VMWARE SERVER by VMware, Inc. (Palo Alto, Calif.), VIRTUAL SERVER by Microsoft Corporation (Redmond, Wash.), PARALLELS WORKSTATION by Parallels, Inc. (Switzerland), or the like.","The hypervisor , in certain embodiments, may be capable of creating a snapshot of a virtual file system A and\/or one or more virtual disk files  in order to record changes intended to such files during a certain period of time (e.g., during a backup operation). The hypervisor  may be capable of creating a snapshot of a virtual disk file  (e.g., a point-in-time copy of the entire virtual disk file  or a differential copy storing changes relative to a previous snapshot). The backup system A may perform the backup operations on the snapshot rather than on the virtual disk file , which can allow applications executing in the virtual machine  to continue writing data to the virtual disk file .","In certain embodiments, each virtual machine  can include a guest operating system and associated applications. In such embodiments, the virtual machine  can access the resources (e.g., privileged resources) of the host server  through the hypervisor . At least some of the machines can also include a backup service  in certain embodiments, which can assist with backup operations, as described below.","The host server  can communicate with the data store  to access data stored in one or more virtual machine files. For instance, the data store  can include one or more virtual machine file systems  that maintain virtual disk files or virtual machine images for some or all of the virtual machines  on the host server . In certain embodiments, the virtual machine file system  includes a VMWARE VMFS cluster file system provided by VMware, Inc. In such embodiments, the VMFS cluster file system enables multiple host servers (e.g., with installations of ESX server) to have concurrent access to the same virtual machine storage and provides on-disk distributed locking to ensure that the same virtual machine is not powered on by multiple servers at the same time. In other embodiments, the virtual machine file system  is stored on the host server  instead of in a separate data store.","The data store  can include any physical or logical storage for holding virtual machine files. The data store  can exist on a physical storage resource, including one or more of the following: local disks (e.g., local small computer system interface (SCSI) disks of the host server ), a disk array, a storage area network (SAN) (e.g., fiber channel), an iSCSI disk area, network attached storage (NAS) arrays, network file system (NFS), or the like.","In the embodiment depicted in , the management server  can include a backup module , a cataloging module , and a user interface module . Each of these modules can be implemented in hardware and\/or software. In certain embodiments, the backup module  can coordinate backup operations of the virtual disk files  stored in the data store . The backup module  can perform image-based backups as well as possibly other types of backups (e.g., incremental or differential backups). The backup module  may perform shadow copy or snapshot operations. In some embodiments, the backup module  can coordinate with the backup service  within the virtual machine  to perform various backup operations such as, e.g., virtual disk backups in the manner described in U.S. patent application Ser. No. 12\/182,364, filed Jul. 30, 2008, titled \u201cSystems and Methods for Performing Backup Operations of a Virtual Machine,\u201d the disclosure of which is hereby incorporated by reference in its entirety. The backup systems A and B may implement additional features described in U.S. patent application Ser. No. 12\/502,052, filed Jul. 13, 2009, titled \u201cBackup Systems and Methods for a Virtual Computing Environment,\u201d the disclosure of which is hereby incorporated by reference in its entirety. In some embodiments, the backup module  performs backup operations without coordinating with a backup service inside the virtual machine .","The cataloging module  can access the virtual disk file  to obtain information about the virtual disk file's  file system A. The cataloging module  can use this file system information to make a searchable index of an image-based backup, as will be described in further detail below. In the example context of VMWARE systems, the cataloging module  can access a .VMDK virtual disk file  to obtain the file system information.","In certain embodiments, the cataloging module  can access metadata  of the file system to obtain the file system information. Advantageously, in certain embodiments, the metadata  of a file system can include a summary or description of the files and directory structure of the file system A. The metadata  of the file system A may describe the logical structure of the files , including the locations of the files in a logical hierarchy such as a directory tree. In addition, the metadata  can specify the physical structure of the files , such as the locations of the files  in the virtual disk file , the size of the files , and so on. In general, the term \u201cfile\u201d may be used to generally indicate a logical unit of a file system such as, e.g., a file, a directory, a folder, and so forth.","For example, the metadata  may include file or directory name, creation date, access permissions, and other attributes of the file (or directory). The attributes for a file (or directory) can include information such as, e.g., file locations, allocated and\/or actual file size, times for the last modification, access, or backup of the file, whether the entry is a file or a directory, a file record number (or \u201cID\u201d) for the file, a file record number of a parent directory, whether the file is \u201cread only,\u201d \u201ccompressed,\u201d \u201cencrypted,\u201d a \u201csystem file,\u201d etc., security information, and other file system attributes. Attributes can include newly added attributes when they are made available to users (e.g., in future releases of an operating system).","Different guest operating systems can include different file systems. While file systems from different operating systems are implemented differently, most file systems share the common characteristic of using metadata to describe the structure of the files. The metadata  for a WINDOWS-based New Technology File System (NTFS) A, for instance, can include a system file called a Master File Table (MFT). The MFT can be organized as a data structure or database table or tables, with a row (or record) in the MFT representing one file or directory. In some cases, the first record of the MFT describes the master file table itself. Records for small files or directories (e.g., 512 bytes or smaller) may be contained within the MFT. Records for larger files or directories may point to data structures (e.g., B-trees) containing the file or directory information. Data about the files  stored in the MFT can include information such as file permissions, ownership, size, location of data, and other WINDOWS attributes.","The metadata  in many LINUX and UNIX-based systems include an inode or vnode for some or all of the files. The inodes (or vnodes) are data structures that can include file permissions, ownership, size, location, and status of data blocks of the file. For example, in some implementations, an inode is similar to a record in the MFT. The metadata in many Mac OS-based systems utilizing a Hierarchical File System (e.g., HFS or HFS Plus) may be stored in a HFS Catalog File. The cataloging module  can access the MFT on WINDOWS systems, the inodes\/vnodes on UNIX\/LINUX systems, and the HFS Catalog File on Mac OS systems to obtain the file system information.","In certain embodiments, the cataloging module  can obtain and analyze the metadata  of the virtual disk file  outside of the virtual machine , for example, outside of a guest operating system of the virtual machine . The cataloging module  can therefore reduce the impact of backup operations on the virtual machine . Alternatively, in certain embodiments, a component operating within the virtual machine  can obtain and\/or analyze the metadata, such as an application executing in the virtual machine . For instance, the management server  can inject a lightweight binary file into the virtual machine  executing on the host. On WINDOWS systems, for example, the management server  can inject the binary using Windows Management Instrumentation (WMI) features. The binary file can then obtain and\/or analyze the metadata  of the virtual disk file .","Advantageously, in certain embodiments, the cataloging module  can store the file system information obtained from the metadata  in a catalog . The catalog  can function as a content index for the files and directories of the file system in the backup image . The catalog  can include one or more databases, data structures, or the like. In some implementations, the catalog  may include (or be associated with) a searchable index that can enable efficient searches for content (e.g., files or directories) in the backup image . In other implementations, the catalog  may include a file (e.g., a DSV file described below) that can be imported into a database program and indexed for searching. The catalog  (and\/or a searchable index associated with the catalog) can be stored together with, or as part of, the backup image . The catalog  can be stored on the backup server  or on another storage device (e.g., in a memory). The catalog  can preserve the file system's A directory structure, enabling a user to search the catalog  to find files in the backup image .","In certain embodiments, the user interface module  can cause the display of one or more windows for obtaining user input and\/or outputting status information with respect to backup or restore operations and so forth. The user interface module  may display the progress of ongoing backup or restore operations, provide alerts, and so forth. The user interface module  may communicate notifications regarding the backup or restore operations for example, via electronic mail, text message, etc., may store logging information about the backup or restore operations, and so forth.","The user interface module  can provide functionality for users to search the catalog  for files in the backup image . For example, the user interface module  may provide a window having a search box in which a user can enter a search string (e.g., a portion of a file name). Search results (e.g., a list of backup images  including the search string) may be displayed. In some implementations, the user can select a search result (e.g., a particular backup image), and the user interface module  can display the file system (e.g., a directory tree) of the backup image. A user may select one or more of the files (or some or all of the entire directory tree) for restoring.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 1B","b":["100","100","100","124","150","112","150","152","154","150","100"]},"Although the example backup systems A and B have been described with reference to particular arrangements, other embodiments can comprise more or fewer components. For example, in certain embodiments, the backup systems A, B can function without the backup server , and backup files can be stored to the data store  (or other remote data store) or a local storage device directly coupled to the management server  or host system . In various embodiments, some or all of the functionalities described herein for the management server  and\/or the backup server  may be merged or separated, and performed differently than described in the illustrated embodiments.","In yet other embodiments, the host server  can comprise a plurality of servers in a clustered arrangement such that the computing and memory resources of the clustered servers are shared by one or more virtual machines . Moreover, in certain embodiments, the backup tool maintained by the management server  can instead reside on the host server  and\/or the backup server .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 2A","b":["200","100","100","200","124","200"]},"At block , a backup image of a virtual machine (e.g., a virtual machine disk file ) can be transferred to and stored in a data repository. In some implementations, a snapshot of the virtual machine is taken and the snapshot is backed up. In the context of the system of , for instance, a virtual machine disk backup image  can be stored at the backup server . File system information can be captured at block  by accessing file system metadata. The file system information can be captured by mounting the backup image  (or a snapshot) and by accessing metadata (e.g., the MFT, HFS Catalog File, or inodes) in the backup image  (or the snapshot).","The file system information can be captured before, after, or in parallel with backing up the virtual machine image. For example,  schematically illustrates an example parallel file system capture\/image backup process B in which the file system information is captured (e.g., via the metadata ) while the backup is being performed.  schematically illustrates another example backup process  in which the file system information is captured while the backup image is being created. In some embodiments, the cataloging module  obtains the file system information prior to completing the backup of the backup image  to avoid mounting the backup image  on a central location (e.g., the backup server ). By avoiding mounting the backup image  on a central location, the cataloging module  can distribute the load of cataloging virtual machine images, as at least some virtual disk files  can be indexed on separate physical servers. Cataloging the file system information prior to finishing backup operations can also allow searching to be performed before and\/or while a backup is being performed.","As discussed above, in certain embodiments that catalog is generated at the time the backup image is created, and the catalog may act as a content index of some or all of the files and directories of the file system of the backup image. Each backup image may be associated with its own individualized catalog. In some embodiments, the catalog may, in effect, act as a content index that is synchronized with the content (e.g., files or directories) stored in the backup image. The catalog may be searched (e.g., directly or after import into a database program that indexes the catalog for searching) for content that may be stored in the backup image.","At block , the file system information can be persisted. Persisting the file system information can include storing the file system information in a catalog, such as the catalog  described above with respect to . The catalog may be stored in any type of computer-readable medium. In one embodiment, the catalog can be persisted in a normalized database structure that may be optimized for inserting data. The normalized database may reduce or minimize redundancy of the data, provide fewer relations with anomalies, and improve efficiency. An example process for generating a catalog will be described with reference to .","At block , a searchable index of the catalog can be created. Use of the searchable index can improve the speed of searches of the catalog. The index can be implemented using a variety of data structures such as, e.g., B-trees, B+-trees, bitmap indexes, hashes, etc. The searchable index can be created at least in part by denormalizing the database structure of the catalog. In some cases, the database may be flattened as much as possible, logging may be turned off, and if possible, one table may be used. In some implementations, the searchable index can be efficiently generated from the catalog by using structured query language (SQL) bulk operations.","As discussed above, file system information can be persisted at block  of the cataloging processes A, B into a catalog.  schematically illustrates an example process  for generating the catalog that can be used in some implementations of the system. The example process  may be advantageously used for implementations in which the file system metadata does not include path information for the files and directories of the file system. In the example process , the metadata can be read (or iterated) one or more times to generate a catalog that includes information about the files and directories referenced in the metadata. The information can include path information relating to the path of the file or directory in the directory tree hierarchy of the file system. The path information may include a full or absolute path relative to a root directory, a path relative to a parent directory, etc. The catalog may also include attribute information about one or more attributes of the files and directories (e.g., name, size, last write time, etc.). An example format of a catalog will be discussed with reference to .","The non-limiting example process  is described in the context of a WINDOWS NTFS system in which the file system metadata is stored in the MFT. At block , the MFT is read record-by-record to determine the files (and directories) referenced by the MFT. The MFT may be accessed using WINDOWS application programming interface (API) calls in some implementations. In some NTFS systems, files and directories may be identified by a file record number (FRN) representing the file (or directory) in the MFT.","At block , the MFT is read record-by-record a second time to determine one or more file system attributes for each of the files and directories determined at block . The attributes can include path information of the files and directories. For example, in some embodiments, the path information includes information about the parent directory to a file or directory (e.g., the FRN of the parent directory). In other embodiments, the path information may include the full or absolute path. Accordingly, the MFT can be accessed to build a list of files and directories and some or all of their attributes including, for example, path information for a directory tree of the file system directory.","The attributes determined at block  may include other attributes stored by the MFT or linked or pointed to by the MFT. As discussed above, the attributes may include file or directory name, creation date, access permissions, and other attributes of the file (or directory). The attributes for a file (or directory) can include information such as, e.g., allocated and\/or actual file size, times for the last modification, access, or backup of the file, whether the entry is a file or a directory, whether the file is \u201cread only,\u201d \u201ccompressed,\u201d \u201cencrypted,\u201d a \u201csystem file,\u201d etc., security information, and other file system attributes. When additional or different attributes are made available to users (e.g., when a new version of an operating system is released), embodiments of the process  may permit determination of these additional or different attributes from the MFT.","In the example process depicted in , the MFT is read (or iterated) twice. In other implementations, path information and\/or other attributes of the files and directories may be extracted from a single pass through the MFT. In yet other implementations, three or more passes through the MFT may be used to extract information for the catalog.","In some embodiments, at optional block , the information (e.g., attributes) obtained from the MFT may be used to filter some or all of the files and directories based on one or more filter criteria. For example, the filter criteria may include timestamp attributes obtained from the MFT that are used to filter the information from the MFT to determine the files\/directories that have been modified since the date of the last backup. In other implementations, the information from the MFT can be filtered in other ways. For example, the information may be filtered by file or directory path to generate a catalog of only certain directories or files, or the information may be filtered based on security information to generate a catalog of files and directories for which a user has adequate permissions. Many types of filtering based on file system attributes are possible.","At block , a catalog can be generated from the (optionally) filtered information retrieved in the one or more passes through the MFT. In some cases, the catalog can include all the files and directories in the file system represented in the MFT (e.g., in the case where no filtering is used or in the case where all the files\/directories meet the filter constraints). In other cases, the catalog may include a subset that may be less than all the files and directories represented in the MFT (e.g., when not all of the files\/directories in the MFT meet filter constraints). In some such implementations, the backup image may include all the files and directories of the virtual disk image, but the catalog would reference only a subset of these files and directories (e.g., due to the filtering). In such cases, a user may not be able to use the catalog to search for un-cataloged files or directories.","In some implementations, the catalog can be stored as a delimiter-separated values (DSV) file, such as, e.g., a comma-separated values (CSV) file, in which numbers and text are stored in a plain textual form. Lines in the DSV text file can represent rows or records of a database table, and delimiters (e.g., commas in a CSV file) in a line separate the fields in the table's row. Each row of a DSV file can be separated by a newline. Delimiters may include commas, tabs, semicolons, colons, vertical bars, spaces, or other control characters. In other implementations, the catalog may be stored as a flat file, database, data structure, etc.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 3B","b":"350"},"The second row of the example catalog  references the root directory of the file system. The FRN and the ParentFRN of the root directory are the same (5, in this example). The size of directories is shown as 0 bytes in the example catalog . The third and fifth rows of the example catalog  reference directories (as can be seen by the IsDir value of 1). The fourth row references a file (IsDir value of 0).","The example catalog  includes path information in the form of a FRN for a file (or directory) and a FRN for the parent directory of the file (or directory). The full or absolute path to any file or directory can be determined from this information. For example, the fourth row of the catalog  references a file \u201cSetup.exe\u201d with an FRN of 73 and a ParentFRN of 65. The catalog can be consulted to determine which directory has an FRN of 65 (which is the ParentFRN of the file \u201cSetup.exe\u201d). From the third row of the catalog , it can be seen that the FRN of 65 references the directory \u201cAdmin\u201d. Thus, the information in the catalog can be used to determine that file \u201cSetup.exe\u201d is included in the directory \u201cAdmin.\u201d With further reference to rows 1-3 of the example catalog , it can be determined that the directory \u201cAdmin\u201d (having a ParentFRN of 60) is a subdirectory of the directory \u201cProgram Files\u201d (having a ParentFRN of 5) which is a subdirectory of the directory \u201cI\u201d (having a FRN of 5). Since the ParentFRN (5) of the directory \u201cI\u201d is equal to its FRN (5), this directory is the root directory of the file system. Thus, in this illustrative example, the full or absolute path to the file \u201cSetup.exe\u201d can be determined from the catalog  to be \u201c\/Program Files\/Admin\/Setup.exe.\u201d Accordingly, full or absolute paths can be constructed from FRNs and parent FRNs included in the catalog in some illustrative embodiments. In other embodiments, the full or absolute paths or other types of path information (e.g., a path relative to a home or working directory) for files and directories can be stored in the catalog. In yet other embodiments, an index for the catalog (or another file or data structure) can store some or all of the path information.","The example catalog  depicted in  is intended to be illustrative and not limiting. In other catalog embodiments, additional and\/or different information (e.g., attributes) can be stored in the catalog. For example, a different set of attributes can be stored for different entries in the catalog, e.g., attributes included in the catalog for directories may be different from attributes included in the catalog for files. In other embodiments, the format of the catalog can be different than shown in .","As discussed above, in some implementations, the catalog can be indexed (e.g., at block  of the example processes A, B). For example, a catalog in DSV file format (e.g., the example catalog  which is in CSV file format) can be imported into a relational database program and indexed (and\/or bookmarked) for efficient searching. In some implementations, the catalog can be indexed and a searchable index may be stored with the catalog (e.g., in a persistent backup data store associated with the backup server ). In other implementations, the catalog may be indexed after the backup is completed, for example, when a user desires to restore a file (or directory) that may be present on the backup image associated with the catalog. In some implementations, the cataloging module  can be configured to execute the database program.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 4","FIGS. 1A and 1B"],"b":["400","100","100","402","112","106","104"]},"In the example process , after the snapshot is created, two threads are launched and execute asynchronously. In the implementation shown in , the first thread is a backup thread that begins at block , and the second thread is a cataloging thread that begins at block . The two threads may be executed by the backup server  described with reference to . Thus, in some implementations, the backup thread and the cataloging thread execute outside the virtual machine associated with the virtual machine disk file being backed up. In other implementations, one or both of the backup and cataloging thread may execute within the virtual machine associated with the virtual machine disk file being backed up (e.g., via injection of a binary into the virtual machine).","At block  of the backup thread, data in the snapshot can be transported from the snapshot source (e.g., the data store ) to a backup target such as a storage repository, e.g., a data store associated with the backup server . The data in the snapshot may be transported in a binary stream that does not require knowledge of the volume level structure of the virtual disk file.","At block  of the cataloging thread, the snapshot can be mounted to provide volume level access to the file system (and metadata) of the virtual disk file (or image) stored in the snapshot being backed up by the backup thread. In cases in which the snapshot source is locally attached to the backup server  (e.g., via a LAN), the snapshot may not need to be mounted at block . At block , the metadata of the file system (e.g., the metadata ) can be accessed, and at block  a catalog of the file system (e.g., the catalog ) can be generated from the metadata. As discussed above, in certain NTFS implementations, the metadata can comprise the MFT, which can be analyzed to generate the catalog (see, e.g., the example process  depicted in ). The catalog can be stored temporarily in memory or in a data store (e.g., if the catalog is too large to fit in memory) prior to being stored persistently in a backup data store.","At block , the catalog can be stored persistently, for example, in a backup data store associated with the backup server . In some cases, as discussed above, the catalog can be stored in a DSV file format suitable for importation into a database program (see, e.g., the example catalog  depicted in ). The snapshot can be unmounted at block . In some implementations, the snapshot can be unmounted after the catalog is stored (persistently or otherwise) but before indexing of the catalog (at block ) is started or completed. In other implementations, the snapshot can be unmounted after the catalog is created (at block ) and stored in memory (or a data store). For example, in some implementations, once the catalog is created, the cataloging process may have no further need for access to the file system metadata (e.g., the MFT), and the snapshot can be unmounted to free network connection resources.","The catalog can be indexed at block , which may advantageously provide efficient search capabilities for files or directories in the backup image. In some implementations, a searchable index can be generated at the time of the backup, and the searchable index can be stored in persistent storage with the catalog and the backup image. In other implementations, the catalog can be stored with the backup image, and a searchable index generated as part of a restore or recovery operation (which may occur at a time or times after the backup has been performed). For example, when a user desires to restore (or recover) a file or directory, the catalog may be imported into a relational database management program, which can index the catalog for searching. The user can search the index for file(s) or director(ies) that may be present in the backup image associated with the catalog as will be further described with reference to .","After the backup thread transports the snapshot data to the target source and after the cataloging thread unmounts the snapshot, a savepoint may be established and verified at block . The savepoint may include the backup image and the catalog. The savepoint may be used to restore or rollback the state of the virtual machine to the time of the snapshot. In some implementations, if the savepoint cannot be verified, the snapshot may be committed (e.g., as discussed below with reference to block ), the catalog may be deleted, and the backup process may be automatically retried (e.g., the process  may return to block ). At block , some implementations may synchronize the backup thread and the cataloging thread, and may activate the catalog by publishing the catalog to users of the backup system (e.g., the catalog  is made available to users of the system A, B). In some such implementations, the catalog may be activated after the catalog has been indexed at block . In other implementations, the catalog may be activated before the catalog has been indexed (or before indexing has been completed). For example, in some such implementations, a catalog may be indexed only after a user attempts to access the catalog (e.g., via the user interface module , for example, during a restore or recovery procedure). After the catalog is activated, the catalog and the backup virtual disk image can be available for search and file-level restore or recovery at block . An example process for file-level restore is described with reference to .","In some virtualization environments (e.g., certain VMware implementations), when a snapshot of a base virtual disk file is created, any new writes by the virtual machine are not stored in the base virtual disk file but instead stored in a delta file (sometimes called a redo log) associated with the snapshot. In some such embodiments, the changes in the delta file can be committed to the base virtual disk file and the snapshot deleted at block . The backup thread completes at block .","Multiple virtual machines can be backed up by repeating the cataloging process A, B,  for different virtual machine images. In one embodiment, a single catalog can be maintained for multiple virtual machine images so that users can search for a file without knowing which virtual machine image includes the file. In other embodiments, separate catalogs (and\/or indexes) can be maintained for different virtual machine images. The user interface module  can present to the user information about the catalog (or catalogs) so that the user can search for and select a file (or files or an entire volume) to restore.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 5","b":["500","100","100","500"]},"At block , a user can search a catalog for a file (or group of files). The user may be a system administrator who manages backups or an end-user of a virtual machine. The catalog may be the catalog  described with reference to . Advantageously, the catalog  can be indexed to enable rapid and efficient searches of the catalog. For example, in some implementations, the catalog  can be imported into a relational database program and indexed (and\/or bookmarked) for efficient searching. In other implementations, the catalog  itself may comprise a searchable index or be stored along with a searchable index. The user can access the catalog and\/or searchable index via a user interface provided by the user interface module . For example, the user may enter a search string that includes a portion of the name of a desired file (or files). The search string may include wildcards in some implementations.","Advantageously, as described above, in certain embodiments the user does not need to specify which virtual machine image includes the requested file. For example, the system may be able to access one or more savepoints referencing backup images and associated catalogs (and\/or associated searchable indexes). The user interface module  may display an indicator (e.g., an icon) that indicates which savepoint(s) include a searchable index or have been indexed to provide a searchable index. The search results can be output for display to the user by the user interface module .","In response to the user's search request, search results from one, some, or all of the savepoints can be provided to the user at block . For example, a user may search for a file (e.g., \u201cSetup.exe\u201d) and the file may have been backed up in multiple backup disk images. The user may view the user interface to select which version of the file to restore. Since the catalog can include attributes of the files and directories, the user interface may display information about the files that help the user to determine which version of the file to restore. For example, the user interface may display a timestamp for the file (e.g., creation time, last modified time, last accessed time, etc.) to assist the user in selecting, e.g., the most recent version of the file.","At decision block , the user can then select a file name (or file names) in the search results, or alternatively, the user can select the entire image. In response to the user selection of a file (or files), at block  the backup image where the selected file is stored can be mounted. Mounting the image can include making a file system of the image accessible to the user. The file can then be restored from the image at block . Alternatively, the entire image can be restored instead of just the file at block . More generally, the user interface module  can provide users with the option to (or can automatically) restore one or more files, a directory, a partition, or some other subset of an image, including the full image. Accordingly, embodiments of the disclosed systems and methods can allow a user to readily search for and restore a desired file (from multiple backup images) without having to mount each backup image to determine whether the image contains the desired file. Thus, certain embodiments of the disclosed system and methods may provide certain advantages of file-based backup (e.g., easy ability to search for and restore particular files) as well as certain advantages of image-based backup (e.g., backup of an entire file system).","For purposes of illustration, certain aspects, advantages and novel features of various embodiments of the inventions have been described herein. It is to be understood that not necessarily all such advantages can be achieved in accordance with any particular embodiment of the inventions disclosed herein. Thus, the inventions disclosed herein can be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as can be taught or suggested herein. Further, no element, feature, block, or step, or group of elements, features, blocks, or steps, are necessary or indispensable to each embodiment. Additionally, all possible combinations, subcombinations, and rearrangements of systems, methods, features, elements, modules, blocks, and so forth are within the scope of this disclosure.","Depending on the embodiment, certain acts, events, or functions of any of the algorithms, methods, or processes described herein can be performed in a different sequence, can be added, merged, or left out all together (e.g., not all described acts or events are necessary for the practice of the algorithm). Moreover, in certain embodiments, acts or events can be performed concurrently, e.g., through multi-threaded processing, interrupt processing, or multiple processors or processor cores or on other parallel architectures, rather than sequentially.","The various illustrative logical blocks, modules, processes, methods, and algorithms described in connection with the embodiments disclosed herein can be implemented as electronic hardware, computer software, or combinations of both. To clearly illustrate this interchangeability of hardware and software, various illustrative components, blocks, modules, operations, and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. The described functionality can be implemented in varying ways for each particular application, but such implementation decisions should not be interpreted as causing a departure from the scope of the disclosure.","The various illustrative logical blocks and modules described in connection with the embodiments disclosed herein can be implemented or performed by a machine, such as a general purpose processor, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA) or other programmable logic device, discrete gate or transistor logic, discrete hardware components, or any combination thereof designed to perform the functions described herein. A general purpose processor can be a microprocessor, but in the alternative, the processor can be a controller, microcontroller, or state machine, combinations of the same, or the like. A processor can also be implemented as a combination of computing devices, e.g., a combination of a DSP and a microprocessor, a plurality of microprocessors, one or more microprocessors in conjunction with a DSP core, or any other such configuration.","The blocks, operations, or steps of a method, process, or algorithm described in connection with the embodiments disclosed herein can be embodied directly in hardware, in a software module executed by a processor, or in a combination of the two. A software module can reside in RAM memory, flash memory, ROM memory, EPROM memory, EEPROM memory, registers, hard disk, a removable disk, a CD-ROM, or any other form of volatile or non-volatile computer-readable storage medium known in the art. A storage medium can be coupled to the processor such that the processor can read information from, and write information to, the storage medium. In the alternative, the storage medium can be integral to the processor. The processor and the storage medium can reside in an ASIC. The ASIC can reside in a user terminal. In the alternative, the processor and the storage medium can reside as discrete components in a user terminal.","Conditional language used herein, such as, among others, \u201ccan,\u201d \u201cmight,\u201d \u201cmay,\u201d \u201ce.g.,\u201d and the like, unless specifically stated otherwise, or otherwise understood within the context as used, is generally intended to convey that certain embodiments include, while other embodiments do not include, certain features, elements and\/or states. Thus, such conditional language is not generally intended to imply that features, elements, blocks, and\/or states are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding, with or without author input or prompting, whether these features, elements and\/or states are included or are to be performed in any particular embodiment. The terms \u201ccomprising,\u201d \u201cincluding,\u201d \u201chaving,\u201d and the like are synonymous and are used inclusively, in an open-ended fashion, and do not exclude additional elements, features, acts, operations, and so forth. Also, the term \u201cor\u201d is used in its inclusive sense (and not in its exclusive sense) so that when used, for example, to connect a list of elements, the term \u201cor\u201d means one, some, or all of the elements in the list.","While the above detailed description has shown, described, and pointed out novel features as applied to various embodiments, it will be understood that various omissions, substitutions, and changes in the form and details of the devices or algorithms illustrated can be made without departing from the spirit of the disclosure. As will be recognized, certain embodiments of the inventions described herein can be embodied within a form that does not provide all of the features and benefits set forth herein, as some features can be used or practiced separately from others. The scope of certain inventions disclosed herein is indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Throughout the drawings, reference numbers are re-used to indicate correspondence between referenced elements. The drawings are provided to illustrate embodiments of the inventions described herein and not to limit the scope thereof.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
