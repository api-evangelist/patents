---
title: Virtualization of configuration settings
abstract: A hardware and/or software translation system to automatically apply user-specific configuration settings to a computer irrespective of the application version or operation system version for which the settings were originally established. By automatically applying user-specific configuration settings to a version of an application or operating system, the translation system eliminates any post-installation reconfiguration, thereby simplifying the process of changing or upgrading the version of an application or operating system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08464242&OS=08464242&RS=08464242
owner: Tranxition Corporation
number: 08464242
owner_city: Jupiter
owner_country: US
publication_date: 20090708
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Computer users configure their computers in order to most efficiently and comfortably perform tasks. For example, a user may configure a word processing application to include a footer containing the user's initials in every document created by the user. As another example, a user may configure the mouse to open files with a single click instead of a double click. The footer and mouse configurations are referred to as configuration settings. Some configuration settings are considered global in the sense that all applications executing on the computer share the configuration settings, while other configuration settings are specific to an application or a group of applications. For example, a configuration setting that indicates the base color for a window may be global, whereas a configuration setting that indicates spelling errors are to be automatically corrected may be specific to an application or a group of applications. Typically, both global and application-specific configuration settings are configurable by a user.","In many cases, when a software vendor brings a new version of an application (or operating system) to market, users often choose to continue using outdated versions rather than upgrade their computer to the most recent version of the software. This choice to continue with the status quo is commonly driven by the decrease in productivity and satisfaction that users experience when they are unable to easily return their computer (if at all) to their accustomed, pre-installation operating state. Specifically, when a user installs a new version of an application on his computer, the newly installed version of the application does not include the configuration settings established by the user for the previous version of the application. As a result, the user loses the ease of use provided by his configuration settings, which makes it difficult to use the application. This problem is typically addressed by the user manually reconfiguring the application in the way that he is accustomed. However, this solution tends to be time consuming, tedious, and error prone even for experienced, computer-savvy users. In addition, the difficulty of manually reconfiguring the application may be further exacerbated for the user if the user interface of the new version of the application differs from the previous, user-configured version.","A translation system is provided that automatically applies configuration settings to a computer irrespective of the application version or operation system version for which the settings were originally established. The translation system maintains a repository of configuration settings that are stored in a primary format. The repository may be a configuration store for a specific version of an application in which the primary format is the version-specific format of the configuration store. For example, the primary format may indicate that a configuration setting is stored at a location expected by a particular version of an application, that the configuration setting is referred to using the name expected by that version of the application, that the value (data) of the configuration setting is the type expected by that version of the application, and so on. As another example, the repository may be a configuration store that is independent of any version of the application or even of any application in which case the primary format may be an intermediate, application independent format, such as XML. To automatically apply configuration settings, the translation system intercepts requests specifying configuration settings that are used by applications and\/or system components. In response to intercepting a request to read a configuration setting, the translation system determines whether the version of the requesting application uses a format other than the primary format in which the configuration setting is stored. If the primary format differs from the version-specific format, the translation system translates the requested configuration setting from the primary format to the format of the requesting application. For example, prior to returning the read configuration setting, the translation system may translate the value (data) of the configuration setting from the primary format type (e.g., binary) to the type expected by the version of the requesting application (e.g., string). The translation system may also translate the intercepted request itself. For example, prior to reading the configuration setting, the translation system may translate the intercepted request to read the configuration setting from the location specified by the requesting application to the location specified by the primary format. To facilitate the adoption of a new version of an application, the developer of the version of an application may provide the translation definitions and\/or transformations necessary to support translations between the primary format of the repository and the format of the new version. In this way, the translation system allows a user to start using the new version of the application program without having to manually transfer configuration settings to the new version.","By automatically translating configuration settings for one or more versions of an application, the translation system eliminates any post-installation reconfiguration, thereby simplifying the process of changing or upgrading the application. In addition, by automatically translating configuration settings, the translation system enables multiple concurrent installations of an application to use the same configuration data. Additional advantages of the translation system will become apparent as further features of the translation system are described herein.","In some embodiments, the translation system manages a set of configuration settings established by a user and\/or an organization for an application. As used herein, the term \u201capplication\u201d is used to refer to a single application, a group of applications, an operating system, or the like, for which configuration settings may be established. As such, references to particular applications should not be taken as restrictive. It is noted that the translation system does not need to modify the application code to translate configuration settings between version-specific formats of the application and the primary format. In addition, as used herein, the term \u201cuser-specific configuration setting\u201d is used to refer to a configuration setting that has been modified, or is capable of being modified, from a default configuration setting value. User-specific configuration settings may be specific to a single user, a group of users, or a machine. As used herein, the term \u201cdefault\u201d configuration setting is used to refer to a configuration setting that is undefined or that has been defined by the application manufacturer, and the term \u201cstandard\u201d configuration setting is used to refer to a configuration setting that has been defined by an organization for use across a number of computers.","For each configuration setting, the translation system maintains translation definitions that identify the transformations, if any, that may be used to translate an intercepted request and\/or a configuration setting from a format used by one version of the application to a format used by another version of the application. As used herein, the term \u201ctransformation\u201d is used to refer to a function that converts the attributes of a configuration setting (e.g., the location, name, value (data), type, etc.), configuration setting metadata, and\/or the like from one format to another format. That is, a transformation defines how an intercepted request and\/or the requested configuration setting is converted from a format used by one version of an application to a format used by another version of the application. For example, a transformation may translate the location specified in an intercepted request to another location. As another example, a transformation may translate a configuration setting's type (e.g., binary) without necessarily changing the underlying value (data) of the configuration setting.","To facilitate description, the following example is provided. Microsoft\u00ae Office stores a configuration setting in the system registry of the Microsoft Windows\u00ae operating system to indicate the identity of the user operating an application (e.g., Excel, Word, etc.). In both the 2003 and 2007 versions of Microsoft\u00ae Office, the name of this configuration setting is \u201cUserName.\u201d However, in the 2003 version of Microsoft\u00ae Office, the user name configuration setting is a binary type (REG_BINARY) and is stored at: HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\11.0\\Common\\UserInfo, whereas in the 2007 version of Microsoft\u00ae Office, the user name configuration setting is a string type (REG_SZ) and is stored at: HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\12.0\\Common\\UserInfo. In this example, the translation system may include a number of transformations to translate intercepted requests for the user name configuration setting. For example, the translation system may include a location mapping transformation that is used to translate the location specified by an intercepted request (e.g., HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\11.0\\Common\\UserInfo) to the location in which the user name configuration setting is actually stored (e.g., HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\12.0\\Common\\UserInfo). Similarly, in this example, the translation system may include a number of transformations to translate the configuration setting type. For example, the translation system may include a data manipulation transformation that is used to translate the value (data) of the user name configuration setting from the type used by the 2003 version of Office (e.g., binary) to the type used by the 2007 version of Office (e.g., string), and vice versa.","In some embodiments, the configuration settings established by a user for an application are managed by the translation system in a format used by a version of the application designated as the primary version. The primary format may be the format expected by the version of the application for which the configuration settings were established by the user, an intermediate format (e.g., XML), a format used by the most widely deployed version of the application, a user-selected format, and so on.","Typically, while an application executes, it makes multiple requests for configuration settings. Such requests are generally directed to one or more configuration data stores that are used by applications and\/or operating system components to create, read, update, and\/or delete configuration data. The translation system intercepts applications' requests for configuration data. In some embodiments, the translation system intercepts such requests by instrumenting an application programming interface (\u201cAPI\u201d) that is used by the application to access configuration data (e.g., a registry API). As used herein, the term \u201cAPI\u201d is used to refer to a collection of functions or a single function within a collection. When an application calls an instrumented function of the API, the function transfers control to the translation system.","In some embodiments, when the translation system intercepts a configuration request to read a configuration setting, the translation system determines whether the intercepted request specifies a configuration setting that is managed by the translation system. In some embodiments, the translation system includes a catalog of configuration settings that have been, or may be, established for one or more applications. The translation system may determine whether the intercepted request specifies a configuration setting that is managed by the translation system by searching the configuration settings catalog for the specified configuration setting. If an intercepted request does not specify a configuration setting managed by the translation system, the translation system may transfer control back to the API indicating that the API should continue with its normal processing. If an intercepted request does specify a configuration setting managed by the translation system, the translation system identifies the version of the application from which the request was intercepted and compares the primary format in which the configuration setting is stored to the format expected by the version of the application from which the request was intercepted (referred to herein as the \u201cversion-specific format\u201d) to determine whether to apply a transform to the intercepted request and\/or to the configuration setting.","If the primary format and the version-specific format are the same, the translation system retrieves the configuration setting and returns it to the requesting application. If the primary format differs from the version-specific format, the translation system determines whether it is necessary to translate the intercepted request to a request for the version in which the configuration setting is stored (e.g., the primary format). For example, the location in which the configuration setting is stored by the requesting application may be a different location than that recognized by the primary version of the application. If appropriate, the translation system translates the intercepted request and then retrieves the configuration setting.","In some embodiments, the translation system determines whether the primary format of the attributes of the retrieved configuration setting (e.g., the name, location, value, type, etc.) differs from the version-specific format expected by the version of the application from which the request was intercepted. For example, the configuration setting type (e.g., string, binary, etc.) expected by the requesting application may be different from the type used by the primary version of the application. As another example, the absence of a requested configuration setting may be used to indicate a default value; however, the default value of the primary version of an application may be different from the default value of the version of the application from which the configuration request was intercepted. Likewise, the absence of a configuration setting may be treated differently by different versions of an application (e.g., the primary version may return the default value and another may return an error). If the primary format differs from the version-specific format, the translation system applies one or more transformations to the retrieved configuration setting to convert the configuration setting from the primary format to the version-specific format, and then returns the translated configuration setting. The translation system may use many different techniques to intercept requests for configuration settings. For example, some APIs provide a hooking mechanism through which hooks may be registered to transfer control to the translation system before and\/or after an API function is performed.","The translation system may also intercept other types of requests, such as requests to create, update, merge, split, and\/or delete a configuration setting. For example, if the translation system intercepts a request to update the value of a configuration setting, the translation system determines whether it is necessary to translate the intercepted request and\/or the configuration setting. The translation system compares the primary format in which the configuration setting is stored to the version-specific format specified by the intercepted request. If the primary format and the version-specific format are not the same, the translation system applies a transformation to the intercepted request and\/or to the configuration setting to convert the configuration setting from the version-specific format to the primary format prior to storing the updated configuration setting.","Before describing the translation system in greater detail, it is useful to consider an environment in which the translation system can be implemented.  is a data flow diagram showing how requests for configuration settings are intercepted and processed by a translation system in one or more embodiments. In the illustrated embodiment, the translation system  includes an interceptor component  and a translation component . The translation component consists of a configuration settings catalog , a primary version mapping component , translation definitions , and a collection of transformations . The translation system resides on a host computing device and serves as an intermediary between applications . . . and their configuration settings, which are stored in configuration data stores . . . . The translation system  may be used to virtualize configuration settings across a wide variety of computing devices, such as a personal computer, workstations, personal digital assistant, cell phone, digital camera, servers, or other electronic device. As used herein, the term \u201cconfiguration setting\u201d is used to refer to any application state or preference which is persisted and retrieved by an application. The translation system  may reside on the same computing device or a different computing device as the applications . . . and\/or the configuration data stores . . . . Similarly, one or more of applications . . . may reside on the same computing device or different computing devices. In some embodiments, the translation system  includes a configuration settings data store that is used by the translation system in place of configuration data stores . . . ","In the illustrated example, the interceptor component  intercepts a request  made by an application to read a configuration setting via an API from a configuration data store . For example, an application such as Microsoft\u00ae Excel reads configuration settings controlling various aspects of the programs behavior, such as user name and initials. The application may store these settings in a number of configuration data stores, such as a system registry, a file, network storage, environment variables, or other persistent storage mediums. Typically, these settings are retrieved via an API interface  specific to the configuration data store . For example, the configuration settings that represent the user name and initials for Microsoft\u00ae Excel are stored in the system registry on the Microsoft Windows\u00ae operating system. The Microsoft Windows\u00ae system registry API includes the following functions (among others) which control reading of data:","RegCreateKey\/RegOpenKey( )\u2014retrieve a handle to a registry key","RegGetValue\/RegQueryValue( )\u2014retrieve type and value of a registry key","Similarly, other configuration data stores , such as a file system, database, or network resource have APIs to read configuration data and metadata. It is noted that a configuration setting may be determined or influenced via metadata returned by an API, such as its absence or presence, one or more of its attributes, or bookkeeping information. For example, if a registry key does not exist, the application may assume a default configuration value.","The translation system may use various techniques to intercept calls to the APIs , such as, for example, those described in commonly-owned U.S. Pat. No. 7,293,170 of R. Bowler et al., filed on Oct. 13, 2005 and entitled \u201cCHANGING THE PERSONALITY OF A DEVICE BY INTERCEPTING REQUESTS FOR PERSONALITY INFORMATION,\u201d which is hereby incorporated by reference.","In the illustrated example, the interceptor component  intercepts the request  and then the translation component  determines the version of the application from which the request was intercepted. For example, in the Microsoft Windows\u00ae operating system, the translation component  may call GetModuleFileName to retrieve the full path of the executable followed by a call to GetFileVersionInfo to retrieve a version data structure which can be queried for file (and product) versions. In some embodiments, other file metadata may be used such as creation timestamp, file checksum, etc. In some embodiments, other information may be used to derive the application version, such as by examining calls the application has made, or arguments passed, and so on. In some embodiments, the translation component  determines the version of the requesting application when intercepting the first application call and then caches the determined version for subsequent calls intercepted from the application.","In some embodiments, the translation component  searches the configuration settings catalog  to determine if the request is for a configuration setting managed by the translation system . In some embodiments, the translation component makes this determination based on whether there is an entry in configuration settings catalog  corresponding to the version of the application from which the request was intercepted and\/or the location of the configuration setting indicated by the intercepted request. As used herein, the term \u201clocation\u201d is used to refer to a place where a configuration setting resides, such as a registry path, file path, offset within a file, database row, method returning a location (e.g. a calculated location), and so on. It will be appreciated that other methods may be used to determine whether a request pattern is associated with a configuration setting managed by the translation system . For example, a registry call to open a key using the sub-key path HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\Excel later followed by a call to query the value UserInfo can be canonicalized and described in the configuration settings catalog .","In the illustrated example, if it is determined that the request  to read a configuration setting is one which matches a configuration setting managed by the translation system , the configuration data  is retrieved from the configuration data store . As used herein, the term \u201crequest\u201d is used to refer to one or more individual API calls, such as, for example, a call to open a registry key followed by a call to query its value, or opening of a file and seeking to a particular offset. In some embodiments, the translation system  maintains state information to associate API calls. For example, the translation system  may store a handle to a registry key when it intercepts a call to open the registry key for the purpose of associating it with a later call to query a value from the key. Prior to returning the retrieved configuration data, the translation component performs the appropriate transformations on the data, if any.","In some embodiments, if the interceptor component  intercepts an API call for a configuration setting that is not managed by the translation system , the translation component  passes the call through to the API  and returns the result. For example, the API  may access the configuration data store  directly to retrieve the configuration setting. The translation component  may record state information related to the call even though the call does not at that time identify configuration data managed by the translation system . For example, it may record a handle value when a call is made to open a registry key but return the result to the application unmodified.","When the translation component  determines that a call is directly requesting a configuration setting managed by the translation system , it uses the primary version mapping component , the translation definitions , and the transformations  to appropriately transform the intercepted request and\/or the configuration setting from the primary format to a format expected by the version of the application from which the request was intercepted. By querying the primary version mapping  component, the translation component  determines the user's primary version for the application. In some embodiments, a user's primary version represents the version format (primary format) in which the user's configuration settings are stored for the application. It is noted that an application may also consist of configuration settings specific to one or more of the user's groups, the machine itself, and\/or other categories. The primary version mapping component  appropriately contains mappings for each of these types. Thus, while a user's settings may be associated with version 1.0, the machine's settings may be associated with version 2.0. Simultaneously, the running application  may be version 3.0.","In some embodiments, the translation component  compares the primary format of the configuration setting to the version-specific format used by the version of the application from which the request was intercepted. Typically, when the version-specific format matches the primary format of the configuration setting, no transformation is necessary. When the version-specific format differs from the primary format, the translation component  may determine how to translate the requesting application's configuration setting request to a request for the version in which the configuration setting is stored (e.g., the primary version). In some embodiments, the primary version mapping component  indicates which translation definition  to use. The translation definitions  indicate which of the transformations  are to be used to convert an intercepted request and\/or a configuration request from one version format to another. These transformations  may include data manipulation transformations, calls to retrieve data from an alternate location, merging or splitting of data, or a combination of these. A transformation  may query the underlying configuration data store , and convert the retrieved data from one format to another. For example, a data manipulation transformation may convert the value (data) of a configuration setting from a double word type to a string type. A transformation may be used to map the location of a configuration setting to a different location than that used by requesting application's version. For example, the version mapping component  may indicate that application version 2.0's request to retrieve the setting HKEY_CURRENT_USER\\application\\2.0\\wallpaper should use a transformation which indicates the setting should be retrieved from version 1.0 at the location HKEY_CURRENT_USER\\application\\1.0\\wallpaper. This transformation would make a different call to read the underlying configuration data from a location other than the original call, but still return the result in response to the original call. In some embodiments, a transformation  may transform metadata or return codes from the call. For example, in the user's primary version of an application, a setting may be defaulted if the key is not present, but in the requesting application's version, the setting is defaulted only if it is empty. In this case, the transformation modifies the result and the return code to simulate an empty key instead of returning an error.","In some embodiments, if the translation component  in-is unable to process an intercepted request, the translation component  returns an error message to the interceptor component  and logs the request and\/or other information describing the processing error for later troubleshooting. The translation component  may be unable to process a request, for example, if an exception is thrown in response to accessing a configuration setting. In some embodiments, the action taken by the interceptor component  in response to a received error message is dependent on the API  that was intercepted. For example, the interceptor component  may return the appropriate error code to the application. As another example, the interceptor component  may return an indication that the intercepted API  should continue its normal processing. Typically, an exception is not propagated back to the requesting application.","In the illustrated example, after a transformation  (if any) is applied to the request   to read the configuration setting, the result is returned back to the translation component , which applies the appropriate transforms (if any) to the configuration setting attributes (e.g., name, data, etc.). Then, the result is returned back to the interceptor, which returns the configuration data  to the requesting application . Thus, the translation system  can seamlessly integrate the reading of settings in one version of an application with those stored using a different version.","The translation system  may intercept and process other types of requests. For example, in the illustrated example, an application makes a call  to an API to store configuration data. As used herein, the term \u201cstore\u201d refers to creation, modification, or deletion of a configuration setting. For example, a program such as Microsoft Excel stores the user name and initials when the user modifies this setting using the Options menu.","In some embodiments, the interceptor component  behaves similarly to store requests as it does to read requests. For example, the Microsoft Windows system registry API includes the following functions (among others) which control creating, modifying, and deleting of data:","RegCopyTree( )\u2014copies a registry key, values and subkeys","RegCreateKey( )\u2014creates and opens a registry key","RegDeleteKey( )\/RegDeleteTree( )\/RegDeleteValue( )\u2014removes a key, tree, or value","RegReplaceKey( )\/RegRestoreKey( )\/RegSaveKey( )\/RegSetValue( )\u2014modifies or creates keys or values","In the illustrated embodiment, the interceptor component  intercepts the store request . The translation component  determines the version of the application from which the request  was intercepted and searches the configuration settings catalog  to determine if the request is for a configuration setting managed by the translation system . In the illustrated example, if it is determined that the request  to store a configuration setting is one which corresponds to a configuration setting managed by the translation system, the translation component  performs the appropriate transformations on the intercepted request and\/or the configuration setting, if any.","When the translation component  determines that a call is to store configuration data managed by the translation system , it uses the primary version mapping component , the translation definitions , and the transformations  to appropriately transform the requesting application's setting to the format of the primary version. The translation component  determines how to translate the requesting application's store request  to a store request for the primary version. The primary version mapping component  indicates which translation definition  to use. The translation definitions  identify transformations  to convert the intercepted request and\/or the configuration setting from one version format to another. These transformations  may include data manipulation transformations, calls to store data at an alternate location, merging or splitting of data, or a combination of these. For example, the version mapping component  may indicate that application version 2.0's request to store the setting HKEY_CURRENT_USER\\application\\2.0\\wallpaper should use a transformation  which indicates the setting should be stored in a version 1.0 format at the location HKEY_CURRENT_USER\\application\\1.0\\wallpaper. This transformation  (or another) would make a different call to store the underlying configuration data  at the translated location and return the result in response to the original call. It is noted that intermediate steps may occur prior to storing the configuration setting. For example, when a registry value is to be created, it may be necessary to first create its parent's keys. In some embodiments, when the primary version mapping component  indicates the requesting application version matches the primary version of the stored setting, no transformation is necessary and the call can proceed as normal.","In the illustrated example, after a transformation  is applied to the request  to store a configuration setting, the result (e.g., return code), if any, is returned back to the interceptor, which returns the result to the requesting application . Thus, the translation system  seamlessly translates the storing of configuration settings by one or more versions of an application.","While various embodiments are described in terms of the environment illustrated in , those skilled in the art will appreciate that the translation system  may be implemented in a variety of environments including a single, monolithic computer system, a distributed computer system, as well as various other combinations of computer systems or similar devices connected in various ways. In some embodiments, a variety of computing systems or other devices may be used in place of the applications . . . , such as virtual machines, emulators, application servers, communications servers, database servers, file servers, game servers, etc.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 2","b":["200","200","100","205","100","210","100","215","100","220","200","100","115","220","100","105","225","150","100","200","100","230","230","100","150","100","200","100","100","100"]},"Those skilled in the art will appreciate that the steps shown in  and in each of the following flow charts may be altered in a variety of ways. For example, the order of certain steps may be rearranged; certain sub-steps may be performed in parallel; certain shown steps may be omitted; or other steps may be included; an so on.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIGS. 3A-3C","b":["300","300","150","105","300","150","140","301","100","302","100","301","302","100","135","303","100","100","100","115","115","100","115"]},"In step , if the intercepted request is not for configuration data managed by the translation system , then the translation system  continues to step , else the translation system  continues to step . In step , the translation system  returns an indication that the intercepted API  should continue its normal processing, and then the translation system  loops back to step . The intercepted API  should continue its normal processing, for example, because the configuration setting that the application  is requesting is not available for translation. In some embodiments, the translation system  may record state information related to the request even though the request does not specify a configuration setting managed by the translation system . For example, it may record a handle value when a request is made to open a registry key that is not managed by the translation system .","In step , the translation system  determines the type of the request intercepted. To facilitate description in , it is assumed that the type of request intercepted is either a request to read or a request to update a configuration setting. However, it is noted that the translation system  may intercept other types of requests (e.g., create, delete, merge, split, etc.) and, if desirable, transform the intercepted request and\/or its associated configuration data. In step , if the intercepted request is a request to read a configuration setting, then the translation system  continues to step  to process the read request (), else the translation system  continues to step  to process the update request ().","In step , the translation system  compares the request format used by the primary version of the application  to the request format used by the version of the application from which the request was intercepted. In step , if the primary format differs from the intercepted request format, then the translation system  continues to step , else the translation system  continues to step . In step , the translation system  selects a transformation  and applies the transformation to the intercepted request to translate the request from the format used by the version of the application from which the request was intercepted to the primary format. In step , the translation system  retrieves the configuration setting. In step , if the primary format of the retrieved configuration setting is the same as the version-specific format expected by the version of the application from which the request was intercepted, then the translation system  continues to step , else the translation system  continues to step . In step , the translation system  returns the retrieved configuration setting to the requesting application. Then the translation system  loops back to step . In step , the translation system  selects a transformation  to translate the retrieved configuration setting from the primary format to the version-specific format of the version of the application from which the request was intercepted. The translation system  may select a transformation  by, for example, querying the translation definitions  for a transformation  corresponding to the configuration setting, the primary format (source format), and the version-specific format (target format). In step , the translation system  applies the selected transformation  to the retrieved configuration setting. In step , the translation system  returns the translated configuration setting to the requesting application. Then the translation system  loops back to step .","In step , the translation system  compares the request format used by the primary version of the application  to the request format used by the version of the application from which the request was intercepted. In step , if the primary format differs from the intercepted request format, then the translation system  continues to step , else the translation system  continues to step . In step , the translation system  selects a transformation  and applies the transformation  to the intercepted request to translate the request from the format used by the version of the application from which the request was intercepted to the primary format. In step , if the version-specific format of the updated configuration setting is the same as the primary format, then the translation system  continues to step , else the translation system  continues to step . In step , the translation system  stores the updated configuration setting. In step , the translation system  selects a transformation  to translate the updated configuration setting from the version-specific format to the primary format in which the configuration setting is stored. In step , the translation system  applies the selected transformation  to the updated configuration setting. In step , the translation system  stores the translated configuration setting. Then the translation system  loops back to step .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIGS. 4A-4D","FIG. 4A"],"b":"100"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 4A","b":["400","400","120","400","405","405","405","410","415","420","405","405"],"i":["a ","b "]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 4B","b":["115","100","115","425","425","425","415","430","435","440","445","445","425","445"]},"In some embodiments, the translation component  uses the configuration settings catalog  to determine whether a configuration setting that is associated with an intercepted request is managed by the translation system . For example, the translation component  may determine that a configuration setting is managed by the translation system  based on whether there is an entry  in configuration settings catalog  corresponding to the version of the application from which the request was intercepted and\/or the location of the configuration setting indicated by the intercepted request.","In some embodiments, the translation component  uses the configuration settings catalog  to determine whether the primary version of an application specifies a configuration setting format that differs from the format expected by the version of the application from which a request was intercepted. For example, after the translation component  determines the version of the requesting application and the primary version of the application for the user, the translation component  may query the configuration settings catalog  to determine the configuration setting format expected by the primary version and requesting version of the application. In the illustrated embodiment, entry indicates that version 1 of the application expects the u_name configuration setting to have a binary type (REG_BINARY), while entry indicates that version 2 of the application expects the same configuration setting to have a string type (REG_SZ). Based on the queried format information, the translation component  may select one or more transformations to translate the value (data) of the configuration setting from one type to another (e.g., a binary-to-string transformation). In the current example, the translation component  may also apply transformations to translate the intercepted request. For example, if the primary version is version 1 and the intercepted request is received from version 2, the translation component may apply a location mapping transformation to translate the request to indicate the location  specified by entry ","In some embodiments, the translation component  uses a translation definition  to determine whether the primary version of an application specifies a format that differs from the format expected by the version of the application from which the request was intercepted.  is a table diagram showing sample contents of a translation definitions table , in one or more embodiments. In the illustrated embodiment, the translation definitions table  identifies, for each configuration setting, a transformation to translate the configuration setting from a source format (e.g., the primary format) to a target format (e.g., a version-specific format). The existence of a transformation may be used to indicate that the primary format differs from the version-specific format. In the illustrated embodiment, the translation definitions table  includes one or more entries . Each entry  corresponds to a configuration setting of an application. Each entry  is divided into fields which contain information identifying a source version, a target version, and a transformation for translating the configuration setting between the corresponding source and target versions of an application. In the illustrated embodiment, each entry includes an application ID field  that identifies an application; a setting ID field  that identifies a configuration setting of the application; a source version field  that identifies the format of the configuration setting from which the configuration setting is translated; a target version field  that identifies the format of the configuration setting to which the configuration setting is translated; and a transform ID field  that identifies a transformation  capable of translating an intercepted request and\/or a configuration setting from a format used by the source version  to a format used by the target version . In some embodiments, when the format of a configuration setting is the same for both the source and target versions of an application, the translation definitions table  stores an indication that no transformation is necessary to complete an intercepted request for that configuration setting. For example, in the illustrated embodiment, entries and each list a transform ID  of zero, indicating that no transformation is necessary for the u_initial configuration setting when the source version of the application is V1 and the target version is V2, and vice versa.","In some embodiments, the translation system includes, or interacts with, an authoring component to generate translation definitions entries . The authoring component may be used to observe and analyze an application's access to configuration data and\/or the application's run-time behavior to identify which accessed configuration settings correspond to standard and\/or user-specific configuration settings. The authoring may use various techniques to identify such configuration settings, such as, for example, those described in commonly-owned U.S. patent application Ser. No. 12\/367,718 of M. Lanner et al., filed on Feb. 9, 2009 and entitled \u201cAUTOMATIC ANALYSIS OF AN APPLICATION'S RUN-TIME SETTINGS,\u201d which is hereby incorporated by reference.","In some embodiments, the authoring component stores an indication of the identified user-specific configuration settings in a configuration data table.  is a table diagram showing sample contents of a configuration data table  in one or more embodiments. The configuration data table  includes one or more entries . In some embodiments, each entry  corresponds to a configuration setting established by a user (or an organization) for an application. For example, in the illustrated embodiment, each entry includes a user ID field  that identifies a user; an application ID field  that identifies an application; a setting ID field  that identifies a configuration setting of the application; and a data field  that identifies the value of the configuration setting. In some embodiments, the data  is stored in the configuration data table  in the primary format identified for the user.","In some embodiments, the authoring component determines how each configuration setting in the configuration data table  is defined for one or more versions of the application. For example, the authoring component may determine the location at which a configuration setting is stored, the configuration setting name, type, and so on for each version of the application. The authoring component may include a user-interface to receive a request to monitor an application for configuration settings and\/or to receive a selection of one or more versions of an application for which translation definitions  are to be generated. In some embodiments, to determine how a configuration setting is defined by a selected version of an application, the authoring component launches the selected version of the application and manipulates the configuration setting while monitoring the application's access to the configuration setting. It is noted that the authoring component may be used to manipulate any number of configuration settings. However, to facilitate description, it is assumed that the authoring component separately manipulates each configuration setting. For example, the authoring component may include a script to launch Excel 2003 and set a user name to indicate the identity of a user operating the application. To set the user name, the script launches the application, selects the \u201cTools\u201d menu, selects the \u201cOptions . . . \u201d menu item, selects the \u201cGeneral\u201d tab, enters a name in the \u201cUser name\u201d field, and selects the \u201cOK\u201d button. By monitoring the system registry, the authoring component may determine that the Excel 2003 stores the entered name as the value (data) of the UserName registry key, which has a REG_BINARY type (binary format), and which is stored at: HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\11.0\\UserInfo.","The authoring component may compare the configuration setting attributes for each selected version of the application and identifies one or more transformations  that are capable of converting the attributes, if necessary, to and from each selected version. In some embodiments, the authoring component generates a translation definition entry  for each selected version of the application as the source version and the other versions as the target versions. The translation definition table  may include each generated translation definition entry , or a selection of the generated entries . For example, the translation definition table  may store only those entries  whose source version  or the target version  correspond to a primary version  of an application.","In some embodiments, the translation system includes, or interacts with, a settings upgrade component that is used to change the primary version  of an application for a user, a group of users, and so on. For example, if the primary format for configuration settings of Microsoft\u00ae Excel is the format used by the 2003 version of Excel and a company upgrades its employees' computers within the finance department to Excel 2007, the setting upgrade component may be used to change primary format for those employees' configuration setting from the format used by the 2003 version of Excel to the format used by the 2007 version of Excel. By upgrading the primary version to reflect a newly deployed or installed version of an application, the settings upgrade component improves the run-time performance for those users that use the new version of the application. The settings upgrade component may also change the primary version  of the application indicated in the primary version table  for the user.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 5","b":["500","500","500"]},"In step , the settings upgrade component receives a request to change the current primary version of an application to an identified version of the application for a user. For example, the settings upgrade component may receive a request to change the current primary version of Excel to Excel 2007 for a user, or group of users, listed in the primary version table . The settings upgrade component loops through each configuration setting of the application that is included in the configuration settings catalog  in steps -. In some embodiments, the configuration settings catalog  may not include entries  for the identified version of the application. In such embodiments, the settings upgrade component may call the authoring component to determine the format of each configuration setting in the identified version and\/or to generate catalog entries  for configuration settings of the application.","In step , the settings upgrade component selects a configuration setting. The settings upgrade component loops through each version of the application supported by the translation system for the selected configuration setting in steps -. In step , the settings upgrade component selects a version of the application. In step , if the translation definition table  does not include an entry  listing the identified version as the source version  and the selected version as the target version , then the settings upgrade component continues to step , else the settings upgrade component continues to step . In step , the settings upgrade component updates the translation definition table  to identify a transformation  to translate the format of the selected configuration setting from the identified version format (source format ) to the version-specific format of the selected version of the application (target format ), if any. For example, the settings upgrade component may update the translation definition table  by querying the configuration settings catalog  to determine the type of the selected configuration setting used by the identified version of the application (e.g., REG_BINARY) and\/or the type used by the selected version of the application (e.g., REG_SZ), and then creating an entry  that identifies the appropriate transformation  (e.g., binary-to-string). In some embodiments, if the format used by the identified version and the selected version are the same, the settings upgrade component updates the translation definition table  to include an indication that no transformation is needed to translate the selected configuration setting between the identified version and the selected version of the application. For example, in , translation definitions entries and identify that the u_initial configuration setting does not require translation between V1 and V2 of the application.","In step , if the translation definition table  does not include an entry  listing the selected version as the source version  and the identified version as the target version , then the settings upgrade component continues to step , else the settings upgrade component continues to step . In step , the settings upgrade component updates the translation definition table  to identify a transformation  to translate the format of the selected configuration setting from the version-specific format of the selected version (source format ) to the format of the identified version of the application (target format ), if any. For example, the settings upgrade component may update the translation definition table  by querying the configuration settings catalog  to determine the type of the selected configuration setting used by the selected version of the application (e.g., REG_SZ) and\/or the type used by the identified version of the application (e.g., REG_BINARY), and then creating an entry  that identifies the appropriate transformation  (e.g., string-to-binary). In step , if another version of the application is supported by the translation system, then the settings upgrade component selects the next version and continues at step , else the settings upgrade component continues to step . In step , if the current primary format of the selected configuration setting differs from the format used by the identified version, then the settings upgrade component continues to step , else the settings upgrade component continues to step . In step , the settings upgrade component converts the selected configuration setting from the primary format to the format used by the identified version. In step , if any configuration settings of the application have not been upgraded, then the settings upgrade component selects the next configuration setting and continues at step , else the settings upgrade component continues to step . In step , the settings upgrade component changes the stored indication  of the primary version of the application from the current primary version to the identified version. Then the upgrade process  completes.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 6","FIG. 6"],"b":["600","605","610","610","610"]},"The processors  are the central processing units (\u201cCPUs\u201d) of the computer and, thus, control its overall operation. In some embodiments, the processors  accomplish this by executing software stored in memory . In some embodiments, the computer includes a processor  having two or more independent cores in a package composed of a single integrated circuit (referred to as a \u201cdie\u201d), one or more dies packaged together, multiple packages, and so on. In some embodiments, the computer includes a hyper-threaded processor that, despite having only a single core, is capable of performing as a multi-core processor. A processor  may be, or may include, one or more programmable general-purpose or special-purpose microprocessors, digital signal processors (\u201cDSPs\u201d) programmable controllers, application specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d), or the like, or a combination of such devices.","Memory  includes the main memory of the computer. Memory  includes any form of volatile, nonvolatile, removable, and non-removable computer-readable storage media, or any combination of such media devices that are capable of storing information such as computer-readable instructions, data structures, program modules, or other data. Memory  stores (among other things) an operating system . The operating system  may be a Microsoft Windows\u00ae operating system, a Linux operating system, a Mac OS, or the like. It is noted that the translation system, the settings upgrade component, and the authoring component do not depend on the operating system  implemented by the computer.","Also connected to the processors  through the interconnect system  are one or more internal storage devices , a storage adapter  and a network adapter . Internal storage devices  may include volatile (e.g., RAM), nonvolatile (e.g., ROM, Flash, etc.), removable, and non-removable computer-readable storage media, or any combination of such media devices that are capable of storing information such as computer-readable instructions, data structures, program modules, or other data. It is further noted that the term storage medium may refer to a physical or a virtualized computer-readable storage medium. The storage adapter  allows the computer to access one or more storage subsystems and may be, for example, a Fibre Channel adapter, a USB adapter, a SCSI adapter, eSATA adapter, or the like. The network adapter  provides the computer with the ability to communicate with remote devices over a network and may be, for example, an Ethernet adapter, a Fibre Channel adapter, or the like.","While computer systems configured as described above are typically used to support the operation of the translation system, the settings upgrade component, and\/or the authoring component, those skilled in the art will appreciate that the technology may be implemented using devices of various types and configurations, and having various components. For example, the computer may include one or more input\/output (I\/O) devices (e.g., keyboard, mouse, microphone, display, printer, etc.) that allow a user to access programs and\/or data stored in memory  of the computer, even though it is not illustrated as such in .","Thus, a translation system has been described. Although the translation system has been described with reference to specific embodiments, it will be recognized that the translation system is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly, the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["One or more embodiments of the technology are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIGS. 3A-3C"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 4A-4D"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
