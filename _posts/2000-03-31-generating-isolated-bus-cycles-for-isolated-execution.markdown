---
title: Generating isolated bus cycles for isolated execution
abstract: The present invention is a method and apparatus to generates an isolated bus cycle for a transaction in a processor. A configuration storage contains configuration parameters to configure a processor in one of a normal execution mode and an isolated execution mode. An access generator circuit generates an isolated access signal using at least one of the isolated area parameters and access information in the transaction. The isolated access signal is asserted when the processor is configured in the isolated execution mode. A bus cycle decoder generates an isolated bus cycle corresponding to a destination in the transaction using the asserted isolated access signal and the access information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07111176&OS=07111176&RS=07111176
owner: Intel Corporation
number: 07111176
owner_city: Santa Clara
owner_country: US
publication_date: 20000331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION","Architecture Overview","Generating Isolated Bus Cylcles"],"p":["1. Field of the Invention","This invention relates to microprocessors. In particular, the invention relates to processor security.","2. Description of Related Art","Advances in microprocessor and communication technologies have opened up many opportunities for applications that go beyond the traditional ways of doing business. Electronic commerce (E-commerce) and business-to-business (B2B) transactions are now becoming popular, reaching the global markets at a fast rate. Unfortunately, while modern microprocessor systems provide users convenient and efficient methods of doing business, communicating and transacting, they are also vulnerable to unscrupulous attacks. Examples of these attacks include virus, intrusion, security breach, and tampering, to name a few. Computer security, therefore, is becoming more and more important to protect the integrity of the computer systems and increase the trust of users.","Threats caused by unscrupulous attacks may be in a number of forms. Attacks may be remote without requiring physical accesses. An invasive remote-launched attack by hackers may disrupt the normal operation of a system connected to thousands or even millions of users. A virus program may corrupt code and\/or data of a single-user platform.","Existing techniques to protect against attacks have a number of drawbacks. Anti-virus programs can only scan and detect known viruses. Most anti-virus programs use a weak policy in which a file or program is assumed good until proved bad. For many security applications, this weak policy may not be appropriate. In addition, most anti-virus programs are used locally where they are resident in the platform. This may not be suitable in a group work environment. Security co-processors or smart cards using cryptographic or other security techniques have limitations in speed performance, memory capacity, and flexibility. Redesigning operating systems creates software compatibility issues and causes tremendous investment in development efforts.","In the following description, for purposes of explanation, numerous details are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that these specific details are not required in order to practice the present invention. In other instances, well-known electrical structures and circuits are shown in block diagram form in order not to obscure the present invention.","One principle for providing security in a computer system or platform is the concept of an isolated execution architecture. The isolated execution architecture includes logical and physical definitions of hardware and software components that interact directly or indirectly with an operating system of the computer system or platform. An operating system and the processor may have several levels of hierarchy, referred to as rings, corresponding to various operational modes. A ring is a logical division of hardware and software components that are designed to perform dedicated tasks within the operating system. The division is typically based on the degree or level of security and\/or protection. For example, a ring- is the innermost ring, being at the highest level of the hierarchy. Ring- encompasses the most critical, security-sensitive components. In addition, modules in Ring- can also access to lesser privileged data, but not vice versa. Ring- is the outermost ring, being at the lowest level of the hierarchy. Ring- typically encompasses users or applications level and has the least security protection. Ring- and ring- represent the intermediate rings with decreasing levels of security and\/or protection.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1A","b":["50","50","50","0","10","1","20","2","30","3","40","52","52","50","50","52"]},"Ring-  includes two portions: a normal execution Ring-  and an isolated execution Ring- . The normal execution Ring-  includes software modules that are critical for the operating system, usually referred to as kernel. These software modules include primary operating system (e.g., kernel) , software drivers , and hardware drivers . The isolated execution Ring-  includes an operating system (OS) nub  and a processor nub . The OS nub  and the processor nub  are instances of an OS executive (OSE) and processor executive (PE), respectively. The OSE and the PE are part of executive entities that operate in a secure environment associated with the isolated area  and the isolated execution mode. The processor nub loader  is a protected bootstrap loader code held within a chipset in the system and is responsible for loading the processor nub  from the processor or chipset into an isolated area as will be explained later.","Similarly, ring- , ring- , and ring-  include normal execution ring- , ring- , ring- , and isolated execution ring- , ring- , and ring- , respectively. In particular, normal execution ring- includes N applications  to N and isolated execution ring- includes K applets  to K.","One concept of the isolated execution architecture is the creation of an isolated region in the system memory, referred to as an isolated area, which is protected by both the processor and chipset in the computer system. The isolated region may also be in cache memory, protected by a translation lookaside buffer (TLB) access check. Access to this isolated region is permitted only from a front side bus (FSB) of the processor, using special bus (e.g., memory read and write) cycles, referred to as isolated read and write cycles. The special bus cycles are also used for snooping. The isolated read and write cycles are issued by the processor executing in an isolated execution mode. The isolated execution mode is initialized using a privileged instruction in the processor, combined with the processor nub loader . The processor nub loader  verifies and loads a ring- nub software module (e.g., processor nub ) into the isolated area. The processor nub  provides hardware-related services for the isolated execution.","One task of the processor nub  is to verify and load the ring-S nub  into the isolated area, and to generate the root of a key hierarchy unique to a combination of the platform, the processor nub , and the operating system nub . The operating system nub  provides links to services in the primary OS  (e.g., the unprotected segments of the operating system), provides page management within the isolated area, and has the responsibility for loading ring- application modules , including applets  to K, into protected pages allocated in the isolated area. The operating system nub  may also load ring- supporting modules.","The operating system nub  may choose to support paging of data between the isolated area and ordinary (e.g., non-isolated) memory. If so, then the operating system nub  is also responsible for encrypting and hashing the isolated area pages before evicting the page to the ordinary memory, and for checking the page contents upon restoration of the page. The isolated mode applets to and their data are tamper- and monitor-proof from all software attacks from other applets, as well as from non-isolated-space applications (e.g., to 42), dynamic link libraries (DLLs), drivers and even the primary operating system . Only the processor nub  or the operating system nub  can interfere with or monitor the applet's execution.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1B","b":["10","0","10","3","40","50","60"]},"The accessible physical memory  includes an isolated area  and a non-isolated area . The isolated area  includes applet pages  and nub pages . The non-isolated area  includes application pages  and operating system pages . The isolated area  is accessible only to elements of the operating system and processor operating in isolated execution mode. The non-isolated area  is accessible to all elements of the ring- operating system and to the processor.","The normal execution ring-  including the primary OS , the software drivers , and the hardware drivers , can access both the OS pages  and the application pages . The normal execution ring-, including applications  to N, can access only to the application pages . Both the normal execution ring-  and ring- , however, cannot access the isolated area .","The isolated execution ring- , including the OS nub  and the processor nub , can access to both of the isolated area , including the applet pages  and the nub pages , and the non-isolated area , including the application pages  and the OS pages . The isolated execution ring- , including applets to , can access only to the application pages  and the applet pages . The applets to reside in the isolated area .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1C","b":["100","100","110","120","130","140","150","160","170","175","180","182","184","186","130","150","130","100"]},"The processor  represents a central processing unit of any type of architecture, such as complex instruction set computers (CISC), reduced instruction set computers (RISC), very long instruction word (VLIW), or hybrid architecture. In one embodiment, the processor  is compatible with an Intel Architecture (IA) processor, such as the Pentium\u2122 series, the IA-32\u2122 and the IA-64\u2122. The processor  includes a normal execution mode  and an isolated execution circuit . The normal execution mode  is the mode in which the processor  operates in a non-secure environment, or a normal environment without the security features provided by the isolated execution mode. The isolated execution circuit  provides a mechanism to allow the processor  to operate in an isolated execution mode. The isolated execution circuit  provides hardware and software support for the isolated execution mode. This support includes configuration for isolated execution, definition of an isolated area, definition (e.g., decoding and execution) of isolated instructions, generation of isolated access bus cycles, and generation of isolated mode interrupts.","In one embodiment, the computer system  can be a single processor system, such as a desktop computer, which has only one main central processing unit, e.g. processor . In other embodiments, the computer system  can include multiple processors, e.g. processors , , , etc., as shown in . Thus, the computer system  can be a multi-processor computer system having any number of processors. For example, the multi-processor computer system  can operate as part of a server or workstation environment. The basic description and operation of processor  will be discussed in detail below. It will be appreciated by those skilled in the art that the basic description and operation of processor  applies to the other processors and , shown in , as well as any number of other processors that may be utilized in the multi-processor computer system  according to one embodiment of the present invention.","The processor  may also have multiple logical processors. A logical processor, sometimes referred to as a thread, is a functional unit within a physical processor having an architectural state and physical resources allocated according to some partitioning policy. Within the context of the present invention, the terms \u201cthread\u201d and \u201clogical processor\u201d are used to mean the same thing. A multi-threaded processor is a processor having multiple threads or multiple logical processors. A multi-processor system (e.g., the system comprising the processors , , and ) may have multiple multi-threaded processors.","The host bus  provides interface signals to allow the processor  or processors , , and to communicate with other processors or devices, e.g., the MCH . In addition to normal mode, the host bus  provides an isolated access bus mode with corresponding interface signals for memory read and write cycles when the processor  is configured in the isolated execution mode. The isolated access bus mode is asserted on memory accesses initiated while the processor  is in the isolated execution mode. The isolated access bus mode is also asserted on instruction pre-fetch and cache write-back cycles if the address is within the isolated area address range and the processor  is initialized in the isolated execution mode. The processor  responds to snoop cycles to a cached address within the isolated area address range if the isolated access bus cycle is asserted and the processor  is initialized into the isolated execution mode.","The MCH  provides control and configuration of memory and input\/output devices such as the system memory  and the ICH . The MCH  provides interface circuits to recognize and service isolated access assertions on memory reference bus cycles, including isolated memory read and write cycles. In addition, the MCH  has memory range registers (e.g., base and length registers) to represent the isolated area in the system memory . Once configured, the MCH  aborts any access to the isolated area that does not have the isolated access bus mode asserted.","The system memory  stores system code and data. The system memory  is typically implemented with dynamic random access memory (DRAM) or static random access memory (SRAM). The system memory  includes the accessible physical memory  (shown in ). The accessible physical memory includes a loaded operating system , the isolated area  (shown in ), and an isolated control and status space . The loaded operating system  is the portion of the operating system that is loaded into the system memory . The loaded OS  is typically loaded from a mass storage device via some boot code in a boot storage such as a boot read only memory (ROM). The isolated area , as shown in , is the memory area that is defined by the processor  when operating in the isolated execution mode. Access to the isolated area  is restricted and is enforced by the processor  and\/or the MCH  or other chipset that integrates the isolated area functionalities. The isolated control and status space  is an input\/output (I\/O)-like, independent address space defined by the processor  and\/or the MCH . The isolated control and status space  contains mainly the isolated execution control and status registers. The isolated control and status space  does not overlap any existing address space and is accessed using the isolated bus cycles. The system memory  may also include other programs or data which are not shown.","The ICH  represents a known single point in the system having the isolated execution functionality. For clarity, only one ICH  is shown. The system  may have many ICHs similar to the ICH . When there are multiple ICHs, a designated ICH is selected to control the isolated area configuration and status. In one embodiment, this selection is performed by an external strapping pin. As is known by one skilled in the art, other methods of selecting can be used, including using programmable configuring registers. The ICH  has a number of functionalities that are designed to support the isolated execution mode in addition to the traditional I\/O functions. In particular, the ICH  includes an isolated bus cycle interface , the processor nub loader  (shown in ), a digest memory , a cryptographic key storage , an isolated execution logical processor manager , and a token bus interface .","The isolated bus cycle interface  includes circuitry to interface to the isolated-bus cycle signals to recognize and service isolated bus cycles, such as the isolated read and write bus cycles. The processor nub loader , as shown in , includes a processor nub loader code and its digest (e.g., hash) value. The processor nub loader  is invoked by execution of an appropriate isolated instruction (e.g., IsoCreate) and is transferred to the isolated area . From the isolated area , the processor nub loader  copies the processor nub  from the system flash memory (e.g., the processor nub code  in non-volatile memory ) into the isolated area , verifies and logs its integrity, and manages a symmetric key used to protect the processor nub's secrets. In one embodiment, the processor nub loader  is implemented in read only memory (ROM). For security purposes, the processor nub loader  is unchanging, tamper-proof and non-substitutable. The digest memory , typically implemented in RAM, stores the digest (e.g., hash) values of the loaded processor nub , the operating system nub , and any other critical modules (e.g., ring- modules) loaded into the isolated execution space. The cryptographic key storage  holds a symmetric encryption\/decryption key that is unique for the platform of the system . In one embodiment, the cryptographic key storage  includes internal fuses that are programmed at manufacturing. Alternatively, the cryptographic key storage  may also be created with a random number generator and a strap of a pin. The isolated execution logical processor manager  manages the operation of logical processors operating in isolated execution mode. In one embodiment, the isolated execution logical processor manager  includes a logical processor count register that tracks the number of logical processors participating in the isolated execution mode. The token bus interface  interfaces to the token bus . A combination of the processor nub loader digest, the processor nub digest, the operating system nub digest, and optionally additional digests, represents the overall isolated execution digest, referred to as isolated digest. The isolated digest is a fingerprint identifying the ring- code controlling the isolated execution configuration and operation. The isolated digest is used to attest or prove the state of the current isolated execution.","The non-volatile memory  stores non-volatile information. Typically, the non-volatile memory  is implemented in flash memory. The non-volatile memory  includes the processor nub . The processor nub  provides the initial set-up and low-level management of the isolated area  (in the system memory ), including verification, loading, and logging of the operating system nub , and the management of the symmetric key used to protect the operating system nub's secrets. The processor nub  may also provide application programming interface (API) abstractions to low-level security services provided by other hardware. The processor nub  may also be distributed by the original equipment manufacturer (OEM) or operating system vendor (OSV) via a boot disk.","The mass storage device  stores archive information such as code (e.g., processor nub ), programs, files, data, applications (e.g., applications to ), applets (e.g., applets to ) and operating systems. The mass storage device  may include compact disk (CD) ROM , floppy diskettes , and hard drive , and any other magnetic or optical storage devices. The mass storage device  provides a mechanism to read machine-readable media. When implemented in software, the elements of the present invention are the code segments to perform the necessary tasks. The program or code segments can be stored in a processor readable medium or transmitted by a computer data signal embodied in a carrier wave, or a signal modulated by a carrier, over a transmission medium. The \u201cprocessor readable medium\u201d may include any medium that can store or transfer information. Examples of the processor readable medium include an electronic circuit, a semiconductor memory device, a ROM, a flash memory, an erasable programmable ROM (EPROM), a floppy diskette, a compact disk CD-ROM, an optical disk, a hard disk, a fiber optical medium, a radio frequency (RF) link, etc. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels, optical fibers, air, electromagnetic, RF links, etc. The code segments may be downloaded via computer networks such as the Internet, an Intranet, etc.","I\/O devices  may include any I\/O devices to perform I\/O functions. Examples of I\/O devices  include a controller for input devices (e.g., keyboard, mouse, trackball, pointing device), media card (e.g., audio, video, graphics), a network card, and any other peripheral controllers.","The token bus  provides an interface between the ICH  and various tokens in the system. A token is a device that performs dedicated input\/output functions with security functionalities. A token has characteristics similar to a smart card, including at least one reserved-purpose public\/private key pair and the ability to sign data with the private key. Examples of tokens connected to the token bus  include a motherboard token , a token reader , and other portable tokens  (e.g., smart card). The token bus interface  in the ICH  connects through the token bus  to the ICH  and ensures that when commanded to prove the state of the isolated execution, the corresponding token (e.g., the motherboard token , the token ) signs only valid isolated digest information. For purposes of security, the token should be connected to the digest memory.","The isolated execution mode protects the platform, system, or environment from attacks, especially attacks by software. In one embodiment of the present invention, a mechanism is provided to prevent software attacks. This mechanism includes generation of special bus cycles by the processor. The special bus cycle is used to enable the processor to perform operations such that they could not be performed by software instructions.","A significant feature of the isolated execution mode is that it prevents a corrupted ring- area from getting access to a user's important data. It does this by using execution mode. In this manner, both ring- programs and direct memory access (DMA) devices are restricted from accessing the isolated memory area.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 2A","FIG. 1C"],"b":["115","115","210","218","220"]},"The instruction decoder and execution unit  receives an instruction stream  from an instruction fetch unit. The instruction stream  includes a number of instructions. The instruction decoder and execution unit  decodes the instructions and executes the decoded instructions. These instructions may be at the micro- or macro-level. The instruction decoder and execution unit  may be a physical circuit or an abstraction of a process of decoding and execution of instructions. In addition, the instructions may include isolated instructions and non-isolated instructions. The instruction decoder and execution unit  generates a virtual address  when there is an access transaction. The TLB  translates the virtual address  into a physical address which is part of access information . The instruction decoder and execution unit  interfaces with the isolated bus cycle generator  via control\/status information  and operand . The control\/status information  includes control bits to manipulate various elements in the isolated bus cycle generator  and status data from the isolated bus cycle generator . The operand  includes data to be written to and read from the isolated bus cycle generator . The access information  includes address, read\/write, and access type information.","The isolated bus cycle generator  receives and provides the control\/status information , the operand , and receives the access information  from the instruction decoder and execution unit  as a result of instruction execution. The isolated bus cycle generator  generates an isolated bus cycle . The isolated bus cycle  includes information sent to devices (e.g., chipsets) external to the processor  to indicate that the processor  is executing an isolated mode instruction. The isolated bus cycle  may also be used internally by the processor  to control and monitor other isolated or non-isolated activities.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 2B","FIG. 2A","FIG. 2A"],"b":["220","220","250","270","280","220","224","226","210","226","282","284","286","226","110"]},"The configuration storage  contains configuration parameters to configure the processor  in one of a normal execution mode and an isolated execution mode. The configuration storage  receives the operand  from the instruction decoder and execution unit  () and includes a processor control register  and an isolated setting . The processor control register  contains an execution mode word . The execution mode word  is asserted when the processor  is configured in the isolated execution mode. In one embodiment, the execution mode word  is a single bit indicating if the processor  is in the isolated execution mode. The isolated setting  defines the isolated memory area (e.g., the isolated area  in the system memory  shown in ). The isolated setting  may include a mask register , a base register , and a length register . The mask register  contains an isolated mask value . The base register  contains an isolated base value . The length register  contains a length value . The isolated mask, base and length values , , and  are used to define the isolate memory area. The isolated memory area may be defined by using any combination of the mask, base, and length values , , and . For example, the base value  corresponds to the starting address of the isolated memory area, while the sum of the base value  and the length value  corresponds to the ending address of the isolated memory area.","The access generator circuit  generates an isolated access signal  using at least one of the isolated area parameters in the configuration-storage  and the access information  in a transaction generated by the processor . The isolated access signal  is asserted when the processor  is configured in the isolated execution mode. The access generator circuit  receives the physical address  and the read\/write signal . The access generator circuit  also generate an access grant signal  to indicate if an isolated access has been granted. A similar checking is also performed for snoop checking when the physical address is provided at the FSB.","The bus cycle decoder  generates an isolated bus cycle  corresponding to a destination in the transaction using the asserted isolated access signal  and the access information . The bus cycle decoder  receives the read\/write signal  and the access type . The read\/write signal  indicates whether a read or a write transaction is being performed. The access type  indicates a type of access, including a memory reference, an input\/output (I\/O) reference, a logical processor entry to an isolated enabled state, and a logical processor withdrawal from an isolated enabled state. The destination of the transaction may be one of an isolated memory area, an isolated register, and an isolated state, corresponding to the memory reference, the I\/O reference, and the isolated enabled state, respectively.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 3","FIG. 2B"],"b":["270","270","310","320"]},"The address detector  receives the isolated setting  (e.g., the isolated mask value , the isolated base value , the isolated length value ) from the configuration storage  in . The address detector  detects if the physical address  is within the isolated memory area defined by the isolated setting . In one embodiment, the isolated memory area is defined by the isolated mask and base values  and . The address detector  includes a masking element  and a comparator . The masking element  masks the physical address  with the isolated mask value . In one embodiment, the masking element  performs a logical AND operation. The comparator  compares the result of the masking operation done by the masking element  and the isolated base value , and generates the isolated access signal . The isolated access signal  is asserted when the physical address  is within the isolated memory area as defined by the isolated mask and base values  and , respectively.","The access grant generator  combines the isolated access signal  and the execution mode word  to generate an access grant signal . The access grant signal  is asserted when both the isolated access signal  and the execution mode word  are asserted to indicate that an isolated access is valid or allowed as configured. In one embodiment, the access grant generator  performs a logical AND operation.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 4","b":["280","280","410","420"]},"The decoder  receives the access information  including access type  and the read\/write signal , and the isolated access signal  from the access generator  (). The decoder  may be implemented with a hardwired logic circuit or a programmable logic device using the truth table . The decoder  generates the isolated bus cycle  with appropriates coded information.","The truth table  provides logic equations to generate the isolated bus cycle . The isolated bus cycle  may be coded in a number of ways. In one embodiment, the isolated bus cycle  is coded using binary information. There are essentially seven values or states of the isolated bus cycle : a not-available cycle, an isolated logical processor entry cycle, an isolated logical processor withdrawal cycle, an isolated data read cycle, an isolated data write cycle, an isolated control read cycle, and an isolated control write cycle. The isolated bus cycle  can be coded using 3 bits of data. The isolated bus cycle  can be made available to the external devices so that it can be decoded and used accordingly. The isolated logical processor entry and withdrawal cycles form a logical processor cycle. The isolated data read and write cycles form a data access cycle. The isolated control read and write cycles form a control access cycle. The isolated logical processor cycles are typically generated when the processor operates in ring-. The isolated data access cycles are typically generated when the processor accesses an isolated memory area. The data access information can be decoded with the normal bus protocol. The control access cycles are typically generated when the processor accesses an isolated register residing in the MCH and the ICH in ring-O.","The truth table  includes as inputs the access type , the read\/write (RD\/WR#) , and the isolated access signal . The access type  includes an isolated enabled state and a memory\/input-output (M\/IO#). The isolated enabled state has two states: an enabled entry state and an enabled withdrawal state. The enabled entry state is asserted when a logical processor enters an isolated execution mode. This occurs when the processor executes an appropriate isolated instruction such as an isolated initialize (iso_init) instruction. The enabled withdrawal state is asserted when a logical processor withdraws from an isolated execution mode. This occurs when the processor executes an appropriate isolated instruction such as an isolated close (iso_close) instruction. In addition, the truth table  may also include the ring level to restrict access. For example, the isolated input\/output space is accessible only at ring-.","The isolated bus cycle  is not available when the isolated access signal  is de-asserted. The isolated bus cycle  is the logical processor entry cycle when the isolated access signal  is asserted and the isolated enabled state is in the enabled entry state. The isolated bus cycle  is the logical processor withdrawal cycle when the isolated access signal  is asserted and the isolated enabled state is in the enabled withdrawal state. The isolated bus cycle  is the isolated data read cycle when the isolated access signal  is asserted, the M\/IO# indicates a memory reference (e.g., M\/IO#=1), and the read\/write indicates a read operation (e.g., RD\/WR#=1). The isolated bus cycle  is the isolated data write cycle when the isolated access signal  is asserted, the M\/IO# indicates a memory reference (e.g., M\/IO#=1), and the read\/write indicates a write operation (e.g., RD\/WR#=0). The isolated bus cycle  is the isolated control read cycle when the isolated access signal  is asserted, the M\/IO# indicates an input\/output reference (e.g., M\/IO#=0), and the read\/write indicates a read operation (e.g., RD\/WR#=1). The isolated bus cycle  is the isolated control write cycle when the isolated access signal  is asserted, the M\/IO# indicates an input\/output reference (e.g., M\/IO#=0), and the read\/write indicates a write operation (e.g., RD\/WR#=0).",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5","b":"500"},"Upon START, the process  defines an isolated memory area using the isolated setting (e.g., isolated mask and base values) (Block ). Then, the process  asserts the execution mode word in the processor control register to configure the processor in the isolated execution mode (Block ). Next, the process  determines if the physical address as generated in a transaction is within the isolated memory area as defined by the isolated setting (Block ). If not, the process  generates a failure or fault condition or performs access to the non-isolated memory area if allowed (Block ) and is then terminated. Otherwise, the process  asserts the isolated access signal (Block ).","Next, the process  determines what access type is being used in the transaction (Block ). If the access type is a memory reference, the process  generates a data access cycle (Block ). If the access type is an input\/output reference, the process  generates a control access cycle (Block ). If the access type is an entry or withdrawal state, the process  generates a logical processor access cycle (Block ). Then the process  is terminated.","In summary, the present invention is a method and apparatus to generate an isolated bus cycle for a transaction in a processor. A configuration storage contains configuration parameters to configure a processor in one of a normal execution mode and an isolated execution mode. An access generator circuit generates an isolated access signal using at least one of the isolated area parameters and access information in the transaction. The isolated access signal is asserted when the processor is configured in the isolated execution mode. A bus cycle decoder generates an isolated bus cycle corresponding to a destination in the transaction using the asserted isolated access signal and the access information.","In one embodiment, the configuration parameters include an isolated setting and an execution mode word. The destination in the transaction may be one of an isolated memory area, an isolated register, and an isolated state. The isolated memory area is located in a memory external to the processor. The isolated register may be located in a chipset external to the processor. The access information includes a physical address and an access type. The configuration storage includes a register to contain the isolated setting for defining the isolated memory area. The isolated setting may be a mask value, a base value, a length value, or any of their combinations. The configuration storage further includes a processor control register to contain the execution mode word which is asserted when the processor is configured in the isolated execution mode. The access generator circuit includes an address detector to detect if the physical address is within the isolated memory area defined by the isolated setting. The isolated bus cycle may be one of a data access cycle, a control access cycle, and a logical processor access cycle. The data access cycle is generated when the access type is a memory reference to the isolated memory area. The control access cycle is generated when the access type is an input\/output reference to the isolated register which may be external to the processor. The logical processor access cycle is generated when the access type is one of a logical processor entry to and a logical processor withdrawal from the isolated state. The logical processor entry to the isolated state updates a logical processor counter in the chipset in a first direction (e.g., increment). The logical processor withdrawal from the isolated state updates a logical processor counter in the chipset in a second direction (e.g., decrement).","While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications of the illustrative embodiments, as well as other embodiments of the invention, which are apparent to persons skilled in the art to which the invention pertains are deemed to lie within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will become apparent from the following detailed description of the present invention in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2A","FIG. 1C"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
