---
title: System and method for virtual partition monitoring
abstract: A method is provided in one example embodiment that includes receiving in an external handler an event notification associated with an event in a virtual partition. A thread in the process in the virtual partition that caused the event can be parked. Other threads and processes may be allowed to resume while a security handler evaluates the event for potential threats. A helper agent within the virtual partition may be instructed to execute a task, such as collecting and assembling event context within the virtual partition, and results based on the task can be returned to the external handler. A policy action can be taken based on the results returned by the helper agent, which may include, for example, instructing the helper agent to terminate the process that caused the event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298910&OS=09298910&RS=09298910
owner: McAfee, Inc.
number: 09298910
owner_city: Santa Clara
owner_country: US
publication_date: 20110608
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION OF EXAMPLE EMBODIMENTS","Overview","Example Embodiments"],"p":["This specification relates in general to information technology security, and more particularly, to a system and method for virtual partition monitoring.","The evolution of virtualization techniques in information technology has led to a variety of applications, from cloud-based computing to embedded systems in mobile phones. In general, virtualization obscures hardware characteristics of a computing platform and instead presents an abstract platform that can host other platforms, including complete operating systems. One popular virtualization technique is to deploy a hypervisor (also known as a virtual machine manager) that can allow guest software (including complete operating systems) to run concurrently on an abstract host platform. The hypervisor can provide a simulated computing environment, often referred to as a \u201cvirtual machine,\u201d for its guest software. Thus, multiple disparate operating systems can run under a hypervisor on a single chassis, for example.","However, virtual machines are likely to become more popular targets for malicious attacks as the number of deployed virtual machines increases. And while virtualization provides many advantages, it can also present unique security challenges. For example, external security software can monitor events in a virtual machine, such as monitoring memory for read, write, or execute access, but there may be a substantial challenge in understanding the context of such events. Without adequate understanding of the event context, security actions may be significantly limited. Hence, many challenges remain for providing a secure virtualization platform.","A method is provided in one example embodiment that includes receiving in an external handler an event notification associated with an event in a virtual partition. A thread in the process in the virtual partition that caused the event can be parked. Other threads and processes may be allowed to resume while a security handler evaluates the event for potential threats. A helper agent within the virtual partition may be instructed to execute a task, such as collecting and assembling event context within the virtual partition, and results based on the task can be returned to the external handler. A policy action can be taken based on the results returned by the helper agent, which may include, for example, instructing the helper agent to terminate the process that caused the event.","In more particular embodiments, the external handler may operate in a second virtual partition, in a virtualization host, or as a hypervisor extension, for example. The virtual partitions may be virtualization guests in a virtualized platform, such as an instance of a virtual machine, and the event notification can be sent by a hypervisor extension to the security handler.","Turning to ,  is a simplified block diagram illustrating an example embodiment of a virtualized platform  in which virtual partitions may be monitored in accordance with this specification. Virtualized platform  includes hardware , a hypervisor , and a hypervisor extension module . In general, hardware  represents any machine or apparatus that is capable of accepting, performing logic operations on, storing, or displaying data, and may include without limitation a processor and memory . Virtualized platform  may have more than one virtual partition, such as a virtualization guest  and a security monitor . In some embodiments, hypervisor  may be a native or \u201cbare metal\u201d hypervisor that runs directly on hardware  (as illustrated in ), but may alternatively run under host software (e.g., a virtualization host) executing on hardware . Security monitor  may communicate with hypervisor extension  through a registered callback, for example, as well as directly with helper agent  (i.e., bypassing hypervisor extension ) through network communications, for example.","In general, a virtual partition may be an instance of a virtual machine, sandbox, container, or any other isolated environment, which can have software running within it. The software may include operating system and application software. To all software running within a virtual partition, though, the virtual partition may appear to be a distinct physical machine.","For purposes of illustrating the principles of monitoring virtual partitions in a virtualized platform such as platform , it is important to understand the activities and communications occurring within such a platform. The following foundational information may be viewed as a basis from which the present disclosure may be properly explained. Such information is offered earnestly for purposes of explanation only and, accordingly, should not be construed in any way to limit the broad scope of the present disclosure and its potential applications.","Processes typically operate with constantly changing contexts (or states), such as data in process registers, control registers, memory, tables, or lists. As used herein, the term \u201cprocess\u201d is used in a broad sense to refer generically to a process, application, thread, task, instruction set, code block, or other similar operating unit. What constitutes context may depend on underlying hardware and operating system software, but in general, context includes a minimal set of data required to resume execution if a process is interrupted. However, it can also refer to any information that may be useful in understanding the environment or circumstances of an intercepted event. Context data of one process may be readily available to other processes within a single operating environment, including processes within a virtual partition, but may difficult to access from outside the operating environment of the process, such as from a process in another virtual partition on the same virtual platform.","Hypervisor extensions, central processing unit extensions, chipset extensions, and the like, can be used to facilitate enhanced monitoring of processes with different contexts. For example, hypervisor extensions can provide enhanced monitoring of virtualization guests, such as monitoring memory for read, write, or execute access, from an external context, such as from a second virtualization guest acting as a security monitor.","An extension set may also support monitoring of other types of events, including other types of memory access or changes to memory attributes, such as making a region writable or executable. Execution of specific CPU instructions or instruction types can also be monitored, such as a CPU \u201cCALL\u201d or \u201cRET\u201d instruction. Monitoring may also be more targeted, such as for events triggered by a specific process, code within a specific region (or regions), execution of a specified address, writing to a specified address, CPU registry changes, or CPU ring state change.","Assembling context information may include, for example, enumerating modules (e.g., dynamic-link libraries or \u201cDLLs\u201d) loaded within a process that triggered an intercepted event. Within a guest operating system, such an enumeration can be trivial as it is likely supported by a set of application programming interfaces (APIs) of the operating system. Enumerating modules externally to the guest operating system, however, can require traipsing through a series of internal operating system structures to find the modules.","Templates for structures internal to a guest operating system can be maintained to provide some context, but maintaining versions of these templates for each guest operating system version can be extremely burdensome. Moreover, documentation of some systems, such as Microsoft Windows, may not be available, which can add to the burden.","Monitoring supported by an extension set, such as a hypervisor extension, can include callbacks to registered handlers or agents. Thus, if access is detected within a monitored memory region, for example, the event can trigger a registered callback with the event context. A callback may take place prior to or after event completion. A process that caused the event may be suspended while a callback is made, or a callback may be asynchronous to event completion. Information passed to the callback may include event context, such as the identity of the target of the event (e.g., the memory region being accessed) and the execution component (e.g., process) that triggered the event (e.g., a process identifier, thread, or code location).","In general, monitoring of a virtualization partition can be classified into two categories: (1) internal event handling and (2) external event handling. In internal event handling, notification concerning an event in a virtual partition, such as accessing monitored memory, is sent to a handler within the same virtual partition as the event that triggered the notification. In contrast, external monitoring of a virtual partition provides notification of an event in the monitored virtual partition to a handler executing outside of the monitored virtual partition. The handler may run within a virtualization host (if there is one), a hypervisor, or within a separate virtual partition. Current hypervisor extensions may require a handler to execute outside the monitored memory, within another virtualization guest functioning as a security monitor, for example.","However, if a handler executes outside of the monitored virtual partition, understanding the context of the intercepted event may present a substantial challenge. Without access to event context, it can be difficult to make security decisions about the legitimacy of the intercepted event. Thus, using external delivery of virtualized partition monitoring while providing for full context of the origins of an intercepted event can provide significant value.","In addition to the challenges of assembling context information for an event, delivering the monitoring events to registered callbacks executing outside of a virtual partition can introduce further problems. With this mode of event delivery, for example, a virtual processor of the virtual partition that triggered the monitoring event can be completely halted while the externally executing callback handler processes the event. Unless there are more virtual processors available, no other activity within the virtual partition may occur. Even if there are other virtual processors, the entire virtual partition can still be halted if these also trigger monitoring events. Thus, this type of delivery can introduce a performance penalty for hypervisor-based monitoring and also prevent a virtualization guest from assisting an external callback handler, such as with the discovery of context information.","External event handlers can provide several advantages over internal event handlers. These advantages can include protecting the event handler and associated decision-makers from direct attack by malware executing within a monitored virtual partition. Other advantages include agent-less security where a virtual partition may be protected without deploying a security agent within it. Accordingly, the value of external delivery of virtual partition monitoring could be significantly enhanced if a more complete context of the origins of intercepted operations could be provided without the numerous problems that typically accompany external event handlers as described herein.","In accordance with embodiments described herein, virtualization platform  can overcome these shortcomings (and others) while preserving advantages of external event handling by providing external monitoring without requiring an understanding of internal operating system structures. Virtualization platform  may, for example, provide hybrid virtual partition monitoring with an external handler that can receive notification of events intercepted within a monitored virtual partition, such as a monitored virtualization guest running under a hypervisor. An internal helper agent deployed within the virtual partition can perform certain tasks on behalf of the external handler, which may include assembling context information associated with an intercepted event and providing the results to the external handler. An internal helper agent may include a component that resides within a monitored process, as well as a component that may execute separately. An external handler can use information and activities of an internal agent to guide policy decisions, such as blocking an event and terminating the event process or thread if it violates a security policy. In some embodiments, an external handler may direct that an internal agent implement certain policy actions.","In some embodiments of virtualization platform , operations associated with an intercepted event in a virtual partition may be parked or suspended within the virtual partition while the event is evaluated, which can allow other processes and threads to execute in the virtual partition. Suspending associated operations can minimize performance impacts on the virtual partition and also allow an internal agent to run within the virtual partition to execute tasks for an external handler. Moreover, these tasks can be performed in a thread different from the thread that originated the intercepted event, thereby reducing risks of interoperability and deadlock issues.","In more particular embodiments, an external security handler or agent may register with an extended hypervisor to receive notification of an event in a virtualization guest. A helper agent running within the virtualization guest can create threads that wait to receive task requests from the security handler. The helper agent may also create a memory region within a monitored process to contain data used to communicate with the security handler and code that the security handler can control. In response to an event interception, a security handler can put the event-triggering thread in a holding state and initiate tasks for a helper agent to perform within the monitored virtualization guest.","Turning to ,  is a simplified block diagram illustrating additional details that may be associated with one potential embodiment of virtual platform .  includes hypervisor extension module , virtualization guest , and security monitor . Security monitor  also may be a virtualization guest within hypervisor , particularly a trusted guest with additional privileges. Virtualization guest  and security monitor  each may include a respective virtual processor -, a respective memory element -, and various software elements (including distinct operating systems in certain embodiments). More particularly, virtualization guest  may include a helper agent , event parking module , and a monitored process . A data area  may be used to communicate with event parking module . An embedded component  of helper agent  may also reside in monitored process . Security monitor  may have a security handler  and a detection module . Hypervisor extension  may provide monitoring and execution control over monitored process , and event callback to security monitor  if an event triggers a notification. An intra-guest communication mechanism may enable direct communication between helper agent  and security handler .","In alternative embodiments, security monitor  (including handler  and detection module ) may reside within hypervisor  (outside of a virtual partition) or as a hypervisor extension. In yet other embodiments, security monitor  may operate within the execution environment of a host operating system if, for example, hypervisor  is not an embedded hypervisor.","In regards to the internal structure associated with virtual platform , hardware  can include memory elements (as shown in ) for storing information to be used in the operations outlined herein. Additionally, virtual platform  may include a processor and one or more virtual processors that can execute software or an algorithm to perform activities as discussed herein. These devices may further keep information in any suitable memory element (random access memory (RAM), ROM, EPROM, EEPROM, ASIC, etc.), software, hardware, or in any other suitable component, device, element, or object where appropriate and based on particular needs. Any of the memory items discussed herein should be construed as being encompassed within the broad term \u2018memory element.\u2019 The information being tracked or sent by hypervisor , hypervisor extension , virtualization guest , or security monitor  could be provided in any database, register, control list, or storage structure, all of which can be referenced at any suitable timeframe. Any such storage options may be included within the broad term \u2018memory element\u2019 as used herein. Similarly, any of the potential processing elements, modules, and machines described herein should be construed as being encompassed within the broad term \u2018processor.\u2019","Note that in certain example implementations, the functions outlined herein may be implemented by logic encoded in one or more tangible, non-transitory media (e.g., embedded logic provided in an application specific integrated circuit (ASIC), digital signal processor (DSP) instructions, software (potentially inclusive of object code and source code) to be executed by a processor, or other similar machine, etc.). In some of these instances, a memory element (as shown in ) can store data used for the operations described herein. This includes the memory element being able to store software, logic, code, or processor instructions that are executed to carry out the activities described herein. A processor can execute any type of instructions associated with the data to achieve the operations detailed herein. In one example, a processor (as shown in ) or a virtual processor (as shown in ) could transform an element or an article (e.g., data) from one state or thing to another state or thing. In another example, the activities outlined herein may be implemented with fixed logic or programmable logic (e.g., software\/computer instructions executed by a processor) and the elements identified herein could be some type of a programmable processor, programmable digital logic (e.g., a field programmable gate array (FPGA), an erasable programmable read only memory (EPROM), an electrically erasable programmable ROM (EEPROM)) or an ASIC that includes digital logic, software, code, electronic instructions, or any suitable combination thereof.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIGS. 3A-3B","FIG. 3A","FIG. 3B"],"b":["100","100"]},"Turning to , security monitor  may register with hypervisor extension  at  to receive an event notification (e.g., a callback) for a specified event. Additionally, helper agent  may create a thread at  that waits for a task request from a handler, such as a request via network communication from handler . Event parking module  and data area  may also be created at  and . Event parking module  can wait for an operating system supported signaling mechanism, for example.","An embedded component, such as embedded component , may also be created within each monitored process at , including a memory region that resides within the address space of each monitored process. For example, code injection may be used to insert executable code into a running process, which may include loading executable modules (such as DLLs) into the process. Typically, the first step for injection is to gain sufficient access to a process to allow creation of memory regions where injected code can be placed and executed. An access token may often be obtained to gain access to a running process. The access token may include privileges to allocate memory within the process, write to that memory, and change attributes of the memory (e.g., to allow for execution). Once access to a process has been obtained, memory can be created within that process. Code may be written to that memory and attributes set to allow for execution from within the memory. In other embodiments, an operating system may provide a mechanism for specifying that a process should load a module into each instance. For example, the \u201crundll\u201d registry key in Windows operating systems can cause processes to load all modules listed in the key.","The injected code may then be executed. If a module is loaded on process start, the injected code may have executed when the module was loaded. DLLs can execute code within their \u201cdllmain\u201d export in Windows, for example. Alternatively, injected code may be initiated by creating a new thread within the process to execute code in the injected memory region. Code hooking may also be used to redirect execution to injected code. Code hooking can cause execution of code within a process to branch to code within the injected memory region. For example, instructions at the start of an interface may be replaced with a \u201cjump\u201d instruction that can transfer execution into injected code. Using code injection and code hooking can enable enhanced monitoring of operations in a process that may not otherwise be possible.","Turning to , a process (such as process ) may trigger a monitored event and callback from hypervisor extension  at , such as by attempting to access a memory region for which security monitor  registered to receive callbacks. Security handler  can receive the callback with event data at  and use hypervisor extension  to direct virtual processor to execute event parking module  at . The callback can be completed and virtualization guest  returned to a running state so that only process  is parked. Since it does not use a busy loop, the rest of the system may continue to run normally, which can allow helper agent  to execute.","The event may be identified in data area , for example, and event parking module  may perform a task communicated via embedded component . The task may include, for example, setting an instruction pointer and stack to a certain value to implement a control transfer. The task may also include setting any other register to a value, such as to set a return value for an API. Thus, helper agent  can provide a mechanism to park a thread or process that has triggered a callback, and allow a thread to carry out a task on behalf of security handler  using mechanisms available within virtualization guest , such as APIs provided by a guest operating system, which can significantly increase stability and compatibility. Virtualization guest may resume execution of other processes, threads, etc. at .","Security handler  may send a task request to helper agent  (e.g., via intra-guest communication mechanism) at . Helper agent  (or a thread within helper agent ) may receive the request and retrieve a data payload from the request. The data payload may include a description of a task to execute, such as enumerating all modules (e.g., DLLs) loaded within a process. Thus, security handler  may request context data for an event at , for example. Examples of context data may include information about a process that triggered an event, the type of action that triggered the event (e.g., write access to a specific memory region), a process that owned a specific memory region that was accessed, or details about a file operation (e.g., file size, name, modification date, etc). Helper agent  can carry out the described task and return any results to security handler , such as returning context data for process  at .","Based on context data and event data, detection module  can determine if the event is malicious or otherwise violates a security policy. If no security policy is violated, security handler  may use hypervisor extension  to allow process  to continue at , such as by resetting virtual processor 's instruction pointer to resume execution from the point where the triggering event occurred. Resetting the instruction pointer may minimize problems that might otherwise be encountered if process  were operated as a normal thread. Alternatively, data area  may be set with a command to set the instruction pointer and stack pointer back to values that return execution to the point where the triggering event occurred.","If, however, detection module  identifies a security policy violation at , security handler  can instruct helper agent  to implement action at , such as blocking process  from further execution. An action may be carried out by either helper agent  or embedded component . For example, blocking a triggering operation may be best performed by embedded component , while terminating monitored process  may be best performed by helper agent  (executing externally to monitored process ). Event parking module  may also implement action, depending upon the type of action. If an action is asynchronous, such as terminating a process, security handler  can communicate this to helper agent  and conclude processing of the triggering event. If an action is synchronous, the action may be indicated in data area , for example, to signal helper agent , and then processing of the monitored event may be concluded. The violation may also be recorded in a log or reported to an administrator via email, for example, at .","It is important to note that the steps in the appended diagrams illustrate only some of the possible scenarios and patterns that may be executed by, or within, virtual platform . Some of these steps may be deleted or removed where appropriate, or these steps may be modified or changed considerably without departing from the scope of teachings provided herein. In addition, a number of these operations have been described as being executed concurrently with, or in parallel to, one or more additional operations. However, the timing of these operations may be altered considerably. The preceding operational flows have been offered for purposes of example and discussion. Substantial flexibility is provided by virtual platform  in that any suitable arrangements, chronologies, configurations, and timing mechanisms may be provided without departing from the teachings provided herein.","Moreover, the principles described herein are readily applicable to other monitoring systems in which a callback or other event notification may be delivered from a guest or specialized container to a handler having a different context, such as for document control, auditing, forensics, and performance monitoring, for example.","Numerous other changes, substitutions, variations, alterations, and modifications may be ascertained to one skilled in the art and it is intended that the present disclosure encompass all such changes, substitutions, variations, alterations, and modifications as falling within the scope of the appended claims. In order to assist the United States Patent and Trademark Office (USPTO) and, additionally, any readers of any patent issued on this application in interpreting the claims appended hereto, Applicant wishes to note that the Applicant: (a) does not intend any of the appended claims to invoke paragraph six (6) of 35 U.S.C. section 112 as it exists on the date of the filing hereof unless the words \u201cmeans for\u201d or \u201cstep for\u201d are specifically used in the particular claims; and (b) does not intend, by any statement in the specification, to limit this disclosure in any way that is not otherwise reflected in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["To provide a more complete understanding of the present disclosure and features and advantages thereof, reference is made to the following description, taken in conjunction with the accompanying figures, wherein like reference numerals represent like parts, in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 3A-3B"}]},"DETDESC":[{},{}]}
