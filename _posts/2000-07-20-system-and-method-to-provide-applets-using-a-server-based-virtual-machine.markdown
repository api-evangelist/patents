---
title: System and method to provide applets using a server based virtual machine
abstract: A system and method for delivering application data to both constrained and non-constrained devices. In a Java implementation, the Abstract Window Toolkit (AWT) is used when a client computer system is not constrained and is running the Java Virtual Machine. When the client computer is constrained and, therefore, is unable to execute the Java Virtual Machine, the server computer uses a second library called a Markup Language Window Toolkit (MLWT) with the same API names as in the AWT. The result of the Java Virtual Machine executing APIs from the AWT within a browser on the client computer system are graphics that appear on the client's browser display. Correspondingly, the result of a server executing a Java Virtual Machine executing APIs from the MLWT is HTML and/or JavaScript that is capable of being processed and displayed by a client computer system without using a Java Virtual Machine. The system and method further determines whether a client computer system is constrained resulting in the use of either the AWT or the MLWT.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06976059&OS=06976059&RS=06976059
owner: International Business Machines Corporation
number: 06976059
owner_city: Armonk
owner_country: US
publication_date: 20000720
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Technical Field","The present invention relates in general to a method and system for delivering a common application to both a constrained and non-constrained device. More particularly, the present invention relates to an improved method and system for processing Internet applications (i.e., Java Applets).","2. Description of the Related Art","Computer systems in general and International Business Machines (IBM) compatible personal computer systems in particular have attained widespread use for providing computer power to many segments of today's modern society. Systems with microprocessors are finding themselves in an array of smaller and more specialized objects that previously were largely untouched by computer technology. These devices are sometimes called \u201cpervasive computing systems\u201d because of their appearance as both traditionally computerized devices, such as desktop computers, tower computers, and portable computers, as well as newly computerized devices such as telephones, appliances, automobiles, and other devices. Pervasive computing devices often include a system processor and associated volatile and non-volatile memory, a display area, input means, and often interfaces, such as a network interface or modem, to other computing devices.","One of the distinguishing characteristics of these systems is the use of a system board to electrically connect these components together. These pervasive computing devices are information handling systems which are designed primarily to give independent computing power to a single user, or a group of users in the case of networked pervasive computing devices. Pervasive computing devices are often inexpensively priced for purchase by individuals or businesses. A pervasive computing device may also include one or more I\/O devices (i.e. peripheral devices) which are coupled to the system processor and which perform specialized functions. Examples of I\/O devices include modems, sound and video devices or specialized communication devices. Nonvolatile storage devices such as hard disks, CD-ROM drives and magneto-optical drives are also considered to be peripheral devices. Pervasive computing devices are often linked to computing systems and other pervasive computing devices using a network, such as a local area network (LAN), wide area network (WAN), or other type of network such as the Internet. By linking to computers including pervasive computing devices, a pervasive computing device can use resources owned by another computing device. These resources can include files stored on nonvolatile storage devices and resources such as printers.","Servers provide information to client computers, such as pervasive computing devices, that link to the servers through the network. Because a server serves a wide variety of clients, the processing abilities and power of the client computers requesting information is often unknown by the server. One type of information provided by servers is an applet. An applet is a program written in the Java\u2122 programming language that can be included in an HTML page, much in the same way an image is included. When a Java technology-enabled browser is used view a page that contains an applet, the applet's code is transferred to the client's computer system and executed by the browser's Java Virtual Machine (JVM) running in the client computer system. Java applets are more capable and dynamic than many other types of network (Internet) based applications.","A challenge, however, is providing applet functionality to the wide variety of devices that request information from a server. While a typical desktop computer system may be able to execute a JVM in its browser, other more constrained pervasive computing devices cannot run a JVM and are therefore unable to view content that is delivered as part of an applet. For example, a cellular telephone may be a pervasive computing device with a link (i.e., wireless modem connection) to the Internet and a display screen capable of displaying web pages delivered from the Internet. However, because of its small size, smaller computing power, and smaller power source (rechargeable battery), the cellular telephone pervasive computing device may lack the power to run the Java Virtual Machine in is basic browser. In addition, the wireless modem connection may be slower than a broadband Internet connection further inhibiting the cell phone's ability to download Java applets.","Content providers that wish to serve both non-constrained client computers and more constrained pervasive computing devices traditionally provide both an applet and a servlet. A servlet is a Java application that runs on a server in order to produce content (i.e., HTML) to be sent to a client computer. If the client is capable of running the applet, the applet is loaded into the client's computer system and run by the Java Virtual Machine running in the client's computer. If the client is not capable of running the applet, the servlet is executed by the server and the contents are delivered and displayed on the client computer. A challenge with the current art, therefore, is that two programs (i.e., an applet and a servlet) are needed to support constrained and non-constrained clients.","What is needed, therefore, is a method for running the same applet on either the server or the client depending on the constraints existing within the client computer system.","It has been discovered that providing a markup language windowing toolkit (MLWT) allows an applet to execute on either the server computer system or on the client computer system. If a client computer system is unable to execute an applet, the applet is run by the server computer in the server's Java Virtual Machine using the MLWT rather than Java's standard abstract windowing toolkit (AWT) to create hypertext markup language (HTML) and\/or JavaScript that can be viewed by the client computer without using a Java Virtual Machine. On the other hand, if the client computer is capable of executing the applet, the applet is delivered to the client computer system and executed by the client's Java Virtual Machine using the AWT. In this manner, the same program is used both as a servlet and an applet without needing two separate application programs.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations, and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.","The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention which is defined in the claims following the description.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","140","170","110","140","140","100","140","110","120","130","140","130"]},"On the other hand, if the client computer system is not a constrained device, decision  branches to \u201cno\u201d branch  whereupon Java binary code  comprising the applet is sent to desktop computer system . Once delivered to desktop computer system , Java binary code  is executed by a Java Virtual Machine using the Abstract Windowing Toolkit running on the desktop computer system within a browser window on the desktop computer. Examples of browsers include Netscape Navigator\u2122 and Microsoft Internet Explorer\u2122. The Abstract Windowing Toolkit (AWT) is a Java\u2122 application programming interface (API) that enables programmers to develop Java applications with graphical user interface (GUI) components such as windows, buttons, and scroll bars. The Java Virtual Machine (JVM or VM) is responsible for translating the AWT calls into the appropriate calls to the operating system running on the client's desktop computer system. Ideally, the AWT should allow any Java application to appear the same whether it is being run on a Microsoft Windows, Macintosh, or UNIX environment. The Java VM is a self contained operating environment that behaves as if it is a separate computer (separate from the client computer system). Java applets run in a Java Virtual Machine that has no access to the host operating system. The independence of the Java VM from the client operating system ensures that the Java application will operate the same in any Java VM regardless of the client's operating system or hardware. Because programs running in the Java VM do not access the host operating system, there is less likelihood of rogue Java programs damaging other files or programs stored on the client computer system.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["200","220","200","210","240","270","240","240","240","250","250","200","240","210","230","230","250","240"]},"Server  has also determined that non-constrained client  is running Java Virtual Machine  within browser . Because non-constrained client is running a Java Virtual Machine, server  sends Java binary  to non-constrained client . Java Virtual Machine  is able to execute Java binary  and display the resulting output to the user of non-constrained client  in browser .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3","b":["300","310","340","380","315","318","380","300","330","300","300","320","320","320","335","335","380","390"]},"On the other hand, if server  determines that the client is running a Java Virtual Machine, decision  branches to \u201cno\u201d branch  whereupon Java applet  is sent to non-constrained device . Java applet  is executed by Java Virtual Machine  running within browser  on non-constrained device . To render graphics, Java applet  uses APIs within abstract windowing toolkit . Note that Java applet  is the same applet as was run by server  within Java Virtual Machine . In non-constrained device  abstract windowing toolkit  is used to render graphics, while in server  Markup Language Window Toolkit  is used to render HTML\/JavaScript that can be rendered in a basic browser.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4","b":["400","405","400","400","405","410","405","415","400","420","400","425","430","405","400","430"]},"Server  receives the constrained response from the client (step ). If the client is not constrained, decision  branches to \u201cno\u201d branch  whereupon the applet is sent to the client as Java binary code (step ) before server processing ends at termination . Correspondingly, if client computer determines that it is not constrained, decision  branches to \u201cno\u201d branch  whereupon the Java applet is received from the server and executed using the client's Java Virtual Machine using the abstract window toolkit located on client's computer (step ) before client processing ends at termination .","On the other hand, the client computer may be constrained. In this case, decision  branches to \u201cyes\u201d branch  whereupon the applet is executed in the server's Java Virtual Machine using the Markup Language Window Toolkit (step ). The result of the applet being executed in the server's Java Virtual Machine using the Markup Language Window Toolkit is HTML and\/or JavaScript code that can be processed by client computer without use of a Java Virtual Machine. This resulting HTML and\/or JavaScript code is sent to the client computer in step  before server processing ends at termination . The client receives the HTML and\/or JavaScript code at step  and renders the code in the client's browser without use of a Java Virtual Machine. At this point, client processing ends at termination .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5","b":["500","520","550","510","540","510","540","500","510","500","520","530","590","540","500","540","560","560","560","520","590"]},"Both Abstract Windowing Toolkit  and Markup Language Window Toolkit  include multiple APIs for producing various graphics. Ideally, each API included in Abstract Windowing Toolkit  is included in Markup Language Window Toolkit . For example, an API to create a command button is included in both Abstract Windowing Toolkit  and Markup Language Window Toolkit . When Abstract Windowing Toolkit  is being used by the Java Virtual Machine, a command button appears on the browser screen when the API is used. Similarly, when Markup Language Window Toolkit  is used by the Java Virtual Machine, an API with the same name (i.e., CreateCommandButton( )) creates HTML or JavaScript code that will render a command button when processed by the browser.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6","b":["600","610","620","630","600","640","640","600","650","650","650","640","650","640","640","650","650","640","600"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7","b":["701","701","700","705","710","705","715","720","725","700","710","720","705","725","730","735","725","740","745","750","755","760","762","764","766","768","770","772","740","740"]},"BIOS  is coupled to ISA bus , and incorporates the necessary processor executable code for a variety of low-level system functions and system boot functions. BIOS  can be stored in any computer readable medium, including magnetic storage media, optical storage media, flash memory, random access memory, read only memory, and communications media conveying signals encoding the instructions (e.g., signals from a network). In order to attach computer system  another computer system to copy files over a network, LAN card  is coupled to PCI-to-ISA bridge . Similarly, to connect computer system  to an ISP to connect to the Internet using a telephone line connection, modem  is connected to serial port  and PCI-to-ISA Bridge .","While the computer system described in  is capable of executing the copying processes described herein, this computer system is simply one example of a computer system. Those skilled in the art will appreciate that many other computer system designs are capable of performing the copying process described herein.","One of the preferred implementations of the invention is an application, namely, a set of instructions (program code) in a code module which may, for example, be resident in the random access memory of the computer. Until required by the computer, the set of instructions may be stored in another computer memory, for example, in a hard disk drive, or in a removable memory such as an optical disk (for eventual use in a CD ROM) or floppy disk (for eventual use in a floppy disk drive), or downloaded via the Internet or other computer network. Thus, the present invention may be implemented as a computer program product for use in a computer. In addition, although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software, one of ordinary skill in the art would also recognize that such methods may be carried out in hardware, in firmware, or in more specialized apparatus constructed to perform the required method steps.","While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims. It will be understood by those with skill in the art that is a specific number of an introduced claim element is intended, such intent will be explicitly recited in the claim, and in the absence of such recitation no such limitation is present. For non-limiting example, as an aid to understanding, the following appended claims contain usage of the introductory phrases \u201cat least one\u201d and \u201cone or more\u201d to introduce claim elements. However, the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles \u201ca\u201d or \u201can\u201d limits any particular claim containing such introduced claim element to inventions containing only one such element, even when the same claim includes the introductory phrases \u201cone or more\u201d or \u201cat least one\u201d and indefinite articles such as \u201ca\u201d or \u201can\u201d; the same holds true for the use in the claims of definite articles."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings. The use of the same reference symbols in different drawings indicates similar or identical items.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
