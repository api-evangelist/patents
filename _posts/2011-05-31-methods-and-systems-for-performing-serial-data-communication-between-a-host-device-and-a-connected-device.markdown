---
title: Methods and systems for performing serial data communication between a host device and a connected device
abstract: Various methods, devices, systems, and machine readable mediums are provided which may be used in accordance with a protocol, such as a protocol used to support the transfer of data and commands between a host and a device. In one embodiment, a driver on a host device may be used to implement a protocol to provide support for various features of the universal serial bus (USB) attached storage (UAS) protocol when interfacing the host device with one or more connected devices that are compatible with either the USB 2.0 standard or the USB 3.0 standard. In this regard, a single driver on the host device may be used to support USB 2.0 and USB 3.0 devices. In another embodiment, such a protocol may be used to support USB 3.0 devices without requiring USB 3.0 streaming capabilities to be supported by host devices or connected devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645601&OS=08645601&RS=08645601
owner: SMSC Holdings S.A.R.L.
number: 08645601
owner_city: Luxembourg
owner_country: LU
publication_date: 20110531
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY CLAIM","FIELD OF THE INVENTION","DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims benefit of priority of U.S. provisional application Ser. No. 61\/354,035, titled \u201cMethods and Systems For Performing Serial Data Communication\u201d, filed Jun. 11, 2010, whose inventors are Juan Ortiz and Biao Jia and which is hereby incorporated by reference in its entirety as though fully and completely set forth herein.","The present invention generally relates to data communication and more particularly to serial data transfer protocols.","Modem hardware systems, such as host devices, often use software in the form of device drivers to facilitate communication between the host devices and other connected devices (e.g., internal or external devices in communication with the host devices). For example, a driver may be used to permit a host device to communicate with a connected device in accordance with a particular protocol.","For well established protocols, such drivers may be provided as part of an operating system of the host device. In this regard, if a particular protocol (e.g., a communication protocol, data transfer protocol, or other types of protocols) has gained wide acceptance in the marketplace, an operating system provider may find it worthwhile to bundle a generic driver with an operating system. As a result, device providers (e.g., manufacturers, vendors, or other parties) need not provide device-specific drivers for devices that are compatible with such accepted protocols.","Unfortunately, such generic drivers are typically not provided with operating systems until a protocol has in fact become ubiquitous in the marketplace. As a result, when new protocols are introduced, device providers are often forced to provide any drivers needed to support the new protocols.","This situation is particularly problematic with regard to the current state of Universal Serial Bus (USB) technology. In this regard, the USB 2.0 standard (e.g., which as used herein is intended to include the USB 2.0 standard and all similar versions (e.g., USB 2.x)) has been widely accepted in the marketplace. As a result, generic drivers are readily available for host devices to support the USB attached storage (UAS) protocol for USB 2.0 connected devices. However, the USB 3.0 standard (e.g., which as used herein is intended to include the USB 3.0 standard and all similar versions (e.g., USB 3.x)) is relatively new and calls for various additional features, such as full duplex operation (e.g., streaming) to be supported in the UAS protocol for the USB 3.0 standard. As a result, generic drivers are currently not readily available for connected devices implemented in accordance with the USB 3.0 standard.","Moreover, the hardware and software development associated with providing streaming capabilities as set forth in the USB 3.0 standard is particularly cumbersome for device providers to implement. For example, the existing UAS protocol under the USB 3.0 standard calls for the host device and the connected device to both support streaming. However, in order to provide a device driver capable of implementing streaming, device providers typically need access to the application programming interface (API) of a controller of the host device. Unfortunately, current USB 3.0 controllers are often closed to outside developers. In addition, the implementation of drivers to support streaming in the UAS protocol of the USB 3.0 standard often requires changes to the existing USB 2.0 stack (e.g., low level, middle level, and high level drivers) used by host devices.","As a result, current providers of USB 3.0 devices are often unable to develop appropriate drivers in an efficient or economical manner.","In accordance with techniques described herein, various methods, devices, systems, and computer readable mediums are provided which may be used in accordance with a protocol, such as a protocol used to support the transfer of data and commands between a host and a device. In one embodiment, a driver on a host device may be used to implement a protocol (e.g., referred to herein as SymUAS) to provide support for various features of the UAS protocol when interfacing the host device with one or more connected devices that are compatible with either a first serial bus standard (e.g., USB 2.0 standard) or a second serial bus standard (e.g., the USB 3.0 standard). In this regard, a single driver on the host device may be used to support the first and second serial bus standards (e.g., USB 2.0 and USB 3.0) devices. In one specific embodiment, such a protocol may be used to support USB 3.0 devices without requiring USB 3.0 streaming capabilities to be supported by host devices or connected devices. While USB 2.0 and 3.0 standards are discussed below, the described embodiments may be expanded to any two standards or versions of standards.","In another embodiment, a method of implementing serial data communication between a host device and a connected device includes issuing a plurality of commands from the host device to the connected device, wherein each command includes a unique tag corresponding to a unique universal serial bus (USB) stream identifier; receiving from the connected device a first ready notification of a USB 3.0 standard, wherein the first ready notification indicates that the connected device is prepared to execute one of the commands, wherein the first ready notification does not identify the one of the commands or the tag associated with the one of the commands; receiving from the connected device a second ready notification of a USB 2.0 standard, wherein the second ready notification indicates that the connected device is prepared to execute the one of the commands, wherein the second ready notification includes the tag associated with the one of the commands to identify the one of the commands to the host device; and performing a data transfer associated with the one of the commands.","In another embodiment, a host device includes a processor; a controller; and a memory adapted to store a plurality of machine readable instructions comprising a driver which when executed by the processor adapted to cause the controller to perform a method of implementing serial data communication between the host device and a connected device, the method includes issuing a plurality of commands from the host device to the connected device, wherein each command includes a unique tag corresponding to a unique universal serial bus (USB) stream identifier, receiving from the connected device a first ready notification of a USB 3.0 standard, wherein the first ready notification indicates that the connected device is prepared to execute one of the commands, wherein the first ready notification does not identify the one of the commands or the tag associated with the one of the commands, receiving from the connected device a second ready notification of a USB 2.0 standard, wherein the second ready notification indicates that the connected device is prepared to execute the one of the commands, wherein the second ready notification includes the tag associated with the one of the commands to identify the one of the commands to the host device; and performing a data transfer associated with the one of the commands.","In another embodiment, a machine readable medium is adapted to store a plurality of machine readable instructions which when executed are adapted to cause a controller of a host device to perform a method of implementing serial data communication between the host device and a connected device, the method includes issuing a plurality of commands from the host device to the connected device, wherein each command includes a unique tag corresponding to a unique universal serial bus (USB) stream identifier; receiving from the connected device a first ready notification of a USB 3.0 standard, wherein the first ready notification indicates that the connected device is prepared to execute one of the commands, wherein the first ready notification does not identify the one of the commands or the tag associated with the one of the commands; receiving from the connected device a second ready notification of a USB 2.0 standard, wherein the second ready notification indicates that the connected device is prepared to execute the one of the commands, wherein the second ready notification includes the tag associated with the one of the commands to identify the one of the commands to the host device; and performing a data transfer associated with the one of the commands.","The claims are incorporated into this section by reference. A more complete understanding of embodiments of the present invention will be afforded to those skilled in the art, as well as a realization of additional advantages thereof, by a consideration of the following detailed description of one or more embodiments. Reference will be made to the appended sheets of drawings that will first be described briefly.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Terms","The following is a glossary of terms used in the present application:","Memory Medium\u2014Any of various types of memory devices or storage devices. The term \u201cmemory medium\u201d is intended to include an installation medium, e.g., a CD-ROM, floppy disks, or tape device; a computer system memory or random access memory such as DRAM, DDR RAM, SRAM, EDO RAM, Rambus RAM, etc.; or a non-volatile memory such as a magnetic media, e.g., a hard drive, or optical storage. The memory medium may comprise other types of memory as well, or combinations thereof. In addition, the memory medium may be located in a first computer in which the programs are executed, or may be located in a second different computer which connects to the first computer over a network, such as the Internet. In the latter instance, the second computer may provide program instructions to the first computer for execution. The term \u201cmemory medium\u201d may include two or more memory mediums which may reside in different locations, e.g., in different computers that are connected over a network.","Carrier Medium\u2014a memory medium as described above, as well as a physical transmission medium, such as a bus, network, and\/or other physical transmission medium that conveys signals such as electrical, electromagnetic, or digital signals.","Programmable Hardware Element\u2014includes various hardware devices comprising multiple programmable function blocks connected via a programmable interconnect. Examples include FPGAs (Field Programmable Gate Arrays), PLDs (Programmable Logic Devices), FPOAs (Field Programmable Object Arrays), and CPLDs (Complex PLDs). The programmable function blocks may range from fine grained (combinatorial logic or look up tables) to coarse grained (arithmetic logic units or processor cores). A programmable hardware element may also be referred to as \u201creconfigurable logic\u201d.","Computer System\u2014any of various types of computing or processing systems, including a personal computer system (PC), mainframe computer system, workstation, network appliance, Internet appliance, personal digital assistant (PDA), smart phone, television system, grid computing system, or other device or combinations of devices. In general, the term \u201ccomputer system\u201d can be broadly defined to encompass any device (or combination of devices) having at least one processor that executes instructions from a memory medium.","Automatically\u2014refers to an action or operation performed by a computer system (e.g., software executed by the computer system) or device (e.g., circuitry, programmable hardware elements, ASICs, etc.), without user input directly specifying or performing the action or operation. Thus the term \u201cautomatically\u201d is in contrast to an operation being manually performed or specified by the user, where the user provides input to directly perform the operation. An automatic procedure may be initiated by input provided by the user, but the subsequent actions that are performed \u201cautomatically\u201d are not specified by the user, i.e., are not performed \u201cmanually\u201d, where the user specifies each action to perform. For example, a user filling out an electronic form by selecting each field and providing input specifying information (e.g., by typing information, selecting check boxes, radio selections, etc.) is filling out the form manually, even though the computer system must update the form in response to the user actions. The form may be automatically filled out by the computer system where the computer system (e.g., software executing on the computer system) analyzes the fields of the form and fills in the form without any user input specifying the answers to the fields. As indicated above, the user may invoke the automatic filling of the form, but is not involved in the actual filling of the form (e.g., the user is not manually specifying answers to fields but rather they are being automatically completed). The present specification provides various examples of operations being automatically performed in response to actions the user has taken.","FIG. \u2014Exemplary Host Device and Connected Device","In accordance with embodiments disclosed herein, various techniques are provided for interfacing connected devices with host devices. For example, a driver may be provided that supports various connected devices implemented in accordance with different protocols. In one embodiment, such a driver may be used to support the UAS protocol for USB 2.0 devices and also for USB 3.0 devices. In such an embodiment, the driver may be used with existing USB 2.0 stacks on the host device without requiring the stacks to be upgraded to support streaming in accordance with the UAS protocol of the USB 3.0 standard.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","130","110","130","120","110","110"]},"In the embodiment illustrated in , host device  includes a processor , a memory , a controller , and a driver . Processor  may be configured with appropriate software (e.g., a computer program for execution by processor ) that is stored on a machine readable medium  (e.g., a CD-ROM or other appropriate medium) and\/or in memory  to instruct processor  to perform one or more of the operations described herein with regard to host device . Similarly, one or more additional machine readable mediums  may also be used to instruct a processor of connected device . Please note that memory  is also a machine (or computer) readable memory medium.","Driver  (e.g., a software driver, also referred to as a SymUAS driver) may be included as part of the software that is stored on machine readable medium  and\/or in memory  to instruct processor  how to interface and communicate with connected device  through controller  in accordance with various protocols.","Controller  may be implemented to support data communication to connected device  through bus . In various embodiments, bus  may be implemented to support a USB 2.0 interface, a USB 3.0 interface, a Firewire interface (e.g., an IEEE 1394 interface), and\/or other appropriate interface. Accordingly, it will be appreciated that in one embodiment bus  may be implemented as a cable including wires for passing data communications between host device  and connected device . In another embodiment, bus  may include additional wires for providing bus power from host device  to connected device . Also, host device  and connected device  may include appropriate ports  and , respectively, to connect to bus .","Connected device  includes a controller , a memory , and various additional components . Controller  may be implemented to support data communication between host device  and additional components  through bus  in accordance with the various types of interfaces described with regard to bus . The connected device  may include any logic (e.g., integrated circuits, programmable hardware elements, such as FPGAs, processors and memory, etc.) in order to implement the embodiments described herein. For example, the controller  may be configured to perform the steps described in .","Additional components  may provide any types of components as may be desired in particular implementations (e.g., one or more processors, additional memories, hard drives, and\/or any other type of component depending on the particular type of connected device  provided). Accordingly, it will be appreciated that connected device  may be any desired type of device such as a storage device, a hard drive enclosure, a peripheral, or any other type of device. In one embodiment, connected device  is an SW631x device available from Symwave, Inc. of Laguna Niguel, Calif.","FIG. \u2014Exemplary Communications",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["110","130","110","130","110","130","110","130","130"]},"In one embodiment, communications between host device  and connected device  may be provided in four phases: a command information unit phase (steps  to ), a ready information unit phase (steps  to ), a data phase (steps  to ), and a status information unit phase (steps  to ).","At step , host device  sends a command to connected device  in the form of a command information unit (CIU) notification with a tag that specifies a stream number (e.g., a stream identifier also referred to as a streamID). In various embodiments, the command of step  may be, for example, a data read command, a data write command, or any other appropriate type of command. Multiple commands may be issued from host device  to connected device , with each command having a different associated tag. In this regard, connected device  may respond to (e.g., reply to and\/or otherwise execute) the commands out of order if desired. In this regard, the tag may be later used by connected device  to notify host device  which command is being executed.","The tag identifies a particular stream (e.g., a stream pipe) which corresponds to a data transfer (e.g., a bulk transfer) between endpoints of host device  and connected device . In this regard, It will be appreciated that, under the USB 2.0 standard, streams may be handled by software rather than hardware. As such, data transferred in accordance with the USB 2.0 standard may not include stream information. Accordingly, under the USB 2.0 standard, software may schedule only one data transfer at a time and may identify different data transfers using tags which are sent one at a time. In contrast, under the USB 3.0 standard (e.g., in the link layer), stream identification may be handled by hardware. That is, data transferred in accordance with the USB 3.0 standard may include information to distinguish between different data transfers (e.g., using streamIDs).","It will be appreciated that the USB 2.0 standard does not require the usage of endpoint ready (ERDY) notifications and therefore does not use streamIDs. Instead, under the USB 2.0 standard, tags may be embedded into CIU notifications, ready information unit (RIU) notifications, and status information unit (SIU) notifications.","Under the USB 3.0 standard, tags may be embedded into CIU notifications and SIU notifications, and streamIDs may be embedded into ERDY notifications (e.g., which may be equal to the tag values embedded in CIU and SIU notifications).","Under the SymUAS protocol, in one embodiment, tags maybe embedded in CIU notifications, RIU notifications, and SIU notifications. Moreover, under the SymUAS protocol, in such an embodiment, the streamID value embedded in ERDY notifications may be a zero value. Therefore, in such an embodiment, the SymUAS driver (e.g., software driver) may instead use the tag values embedded in CIU notifications, RIU notifications, and SIU notifications to perform software streaming.","At step , connected device  responds to the command with an ERDY notification (e.g., a type of ready notification) to indicate that connected device  is prepared to execute the command of step . For example, in the case of a data read or data write command, the ERDY notification may indicate that connected device  is ready to send or receive data to or from host device .","In one embodiment, the ERDY notification of step  does not include the tag previously sent by host device  in step . In this regard, it will be appreciated that the ERDY notification in this embodiment significantly differs from conventional ERDY notifications called for by the USB 3.0 standard which include the tag with the ERDY notification. Rather, in this embodiment, the tag may be included in a different communication in step  further described herein. As such, this different communication may be substituted for a conventional USB 3.0 ERDY notification.","At step , host device  sends an acknowledgement (ACK) notification to acknowledge receipt of the ERDY notification sent by connected device .","At step , connected device  sends a notification to host device  to indicate that connected device  will next be sending the data (e.g., in the case of a data read command) requested by the command of step . In the case of a different command (e.g., a data write command or other command), the notification of step  may reference such commands as appropriate.","In one embodiment, the notification of step  may be sent in the form of an RIU notification (e.g., another type of ready notification) with a tag that specifies the tag of the command to be executed (e.g., in this case, the command sent in step ). It will be appreciated that the RIU notification is a type of notification that may be used in accordance with the USB 2.0 standard, but is not used in the USB 3.0 standard. In this regard, it will be appreciated that in this embodiment connected device  may be configured to still provide RIU notifications, even though connected device  is implemented as a USB 3.0 device. In particular, connected device  may use the USB 2.0 compatible RIU notification of step  (e.g., including a tag specifying a stream number) in place of a conventional USB 3.0 ERDY notification (e.g., that would typically include the tag sent by host device  in step ).","At step , host device  sends an ACK notification to acknowledge receipt of the RIU notification sent by connected device .","At step , connected device  sends an ERDY notification to indicate that connected device  is ready to perform a data transfer as part of the execution of the command of step . For example, in the case of a data read command, the ERDY notification may indicate that connected device  is ready to send data to host device , and in the case of a data write command, the ERDY notification may indicate that connected device  is ready to receive data from host device . In one embodiment, the ERDY notification of step  does not include the tag previously sent by host device  in step  as similarly described herein with regard to the ERDY notification of step .","At step , host device  sends an ACK notification to acknowledge receipt of the ERDY notification of step  sent by connected device .","At step , connected device  sends the data (e.g., in the case of a data read command) requested by the command of step . In the case of a different command (e.g., a data write command or other command), a different communication may be provided (e.g., data may be sent from host device  to connected device  for a data write command, or any other appropriate communication may be used).","At step , host device  sends an ACK notification to acknowledge receipt of the data sent by connected device .","At step , connected device  sends an ERDY notification to inform host device  that connected device  will next be sending status information to indicate the status of the execution of the command sent by host device  in step . In one embodiment, the ERDY notification of step  does not include the tag previously sent by host device  in step  as similarly described herein with regard to the ERDY notification of step .","At step , host device  sends an ACK notification to acknowledge receipt of the ERDY notification sent by connected device .","At step , connected device  sends an SIU notification to host device  to indicate the status of the execution of the command sent by host device  in step . In the embodiment identified in , the command execution has been completed as a result of the data transfer performed in step . Accordingly, the SIU notification of step  includes the streamID and indicates that the command has been completed.","SIU notifications provided in accordance with the USB 2.0 and 3.0 standards include a tag that specifies a particular streamID. For streaming performed under the USB 3.0 standard, the streamID provided in conventional USB 3.0 ERDY notifications may be processed by hardware, and the tag (e.g., provided in conventional USB 3.0 SIU notifications) may be processed by software (e.g., a UAS driver). The streamID may include the same value as the tag included in the SIU notification. Accordingly, in one embodiment, the processing of SIU notifications (e.g., also the processing of other commands and\/or notifications where appropriate) under the USB 2.0 standard and\/or under the SymUAS protocol may not use the streamID. Rather, in such an embodiment, software (e.g., an appropriate driver) may use the tag for software streaming and for all other processing of SIU notifications.","At step , host device  sends an ACK notification to acknowledge receipt of the SIU notification sent by connected device .","FIG. \u2014Additional Details for Communications Between Host and Connected Device",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 3","FIG. 3"],"b":["110","130","118","110"]},"As shown in , a command table  and command buffers  and  maybe provided on host device  (e.g., which may be maintained in memory  of host device ). Command table  may be used to store commands issued by host device  along with the tags associated with the commands. As discussed, communications between host device  and connected device  may be provided in four phases: a command information unit phase (steps  to ), a ready information unit phase (steps  to ), a data phase (steps  to ), and a status information unit phase (steps  to ). In this regard, each of these four phases may be completed for each command issued by host device . In particular, command buffers  and  may be used to send and receive the various communications between driver  and connected device  for each phase.","As also shown in , a command buffer , a ready buffer , a data buffer , and a status buffer  may be provided on connected device  (e.g., which may be maintained in memory  of connected device ). In various embodiments, each buffer , , , and  corresponds to an endpoint (e.g., EP) recognized by driver  in accordance with the USB 2.0 and USB 3.0 standards. Command buffer  may be used to store commands received from host device . Ready buffer  may be used to store RIU notifications to be provided by connected device . Data buffer  may be used to send and receive data between host device  and connected device . As shown in , data buffer  may include URB tags, each of which may correspond to a particular streamID to identify data associated with the particular command to be executed in response to an RIU notification. Status buffer  may be used to send SIU notifications to host device .","When a command is to be issued by host device , driver  builds the command and inserts the command into command table . As shown in , each command in command table  has an associated tag (e.g., corresponding to a streamID). In one embodiment, up to 32 different commands may be stored in command table .","Dashed arrows between driver  and connected device  indicate communications associated with a first command (e.g., corresponding to tag ), and solid arrows between driver  and connected device  indicate communications associated with a second command (e.g., corresponding to tag ) for each of the previously described four phases. In particular, various communications are shown for CIU notifications, RIU notifications, data, and SIU notifications associated with the first and second commands.","As previously discussed, connected device  may respond to different commands issued by host device  out of order if desired. Accordingly, in one embodiment, CIU notifications  and  may be sent with no intermediate delay to connected device  without waiting for any RIU notifications to be received back from connected device .","In one embodiment, connected device  sends RIU notifications  and  when it is ready to send or receive data associated with a corresponding command. In one embodiment, the data phase (e.g., data transfer) between host device and connected device  is not performed unless an RIU notification is received. In one embodiment, data communications  and  may be sent in any order (e.g., after an appropriate RIU notification has been received). For example, data  corresponding to CIU notification  may be sent before data  corresponding to CIU notification , even if CIU notification  issues before CIU notification . In one embodiment, an SIU notification is sent by connected device  for each completed data transfer. In one embodiment, such SIU notifications are not required to be sent immediately after the data transfer (e.g., other intervening information unit notifications may be processed, such as CIU notifications, RIU notifications, or data associated with another command).","Appendix","Additional aspects of various embodiments of the invention are further described in the attached appendix. In particular, an extensible host controller interface (XHCI) XHCI stream array is shown. The XHCI stream array is an array of pointers in which an index in the array contains a memory pointer to a Stream Context. Each Stream Context in turn points to several Transfer Descriptors (TD) which form a Transfer Ring. Each TD in a Transfer Ring contains pointers to the actual buffer where data is located. As a result, a single Stream Array (e.g., associated with a specific endpoint) may handle multiple data buffers through the use of transfer rings.","In one embodiment, a SymUAS driver may provide streaming through the operation of a higher level software driver, rather than through the use of a lower level host controller software driver such as a conventional XHCI. In this regard, the SymUAS driver may use arrays which point to a context, which in turn points to the data buffer directly (e.g., using three levels of structures\/arrays to access the data buffer, in contrast to a conventional XHCI which may use four levels).","Where applicable, various embodiments provided by the present disclosure can be implemented using hardware, software, or combinations of hardware and software. Also where applicable, the various hardware components and\/or software components set forth herein can be combined into composite components comprising software, hardware, and\/or both without departing from the spirit of the present disclosure. Where applicable, the various hardware components and\/or software components set forth herein can be separated into sub-components comprising software, hardware, or both without departing from the spirit of the present disclosure. In addition, where applicable, it is contemplated that software components can be implemented as hardware components, and vice-versa.","Software in accordance with the present disclosure, such as program code and\/or data, can be stored on one or more machine readable mediums. It is also contemplated that software identified herein can be implemented using one or more general purpose or specific purpose computers and\/or computer systems, networked and\/or otherwise. Where applicable, the ordering of various steps described herein can be changed, combined into composite steps, and\/or separated into sub-steps to provide features described herein.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention may be obtained when the following detailed description is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
