---
title: Non-intrusive data logging
abstract: Mediums, methods, and systems are provided for efficiently logging data. A model may include one or more logging points which process data, the data being stored in a log associated with the logging point. The logging point may request that a logging object store the data point. The logging object may include a reference to a vector for storing the data point. When two or more logging objects are associated with the same logged data points, the two or more logging objects may share the same vector. If an object logs a point which is not present in a shared vector, the object may update the object's reference so that the object references a different existing vector, or the object may create a new vector. The vectors may be compressed and/or made circular to achieve improved efficiency.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08631013&OS=08631013&RS=08631013
owner: The MathWorks, Inc.
number: 08631013
owner_city: Natick
owner_country: US
publication_date: 20110921
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation-in-part of, and claims priority to, U.S. patent application Ser. No. 13\/023,190, abandoned filed Feb. 8, 2011 and entitled \u201cNon-Intrusive Data Logging,\u201d which is a continuation of U.S. patent application Ser. No. 11\/841,960, filed Aug. 20, 2007, issued as U.S. Pat. No. 7,890,542, which is a continuation of U.S. application Ser. No. 10\/417,397, filed Apr. 16, 2003, issued as U.S. Pat. No. 7,512,613. The contents of the aforementioned applications are incorporated herein by reference.","Data may be generated or processed by hardware devices or software programs. In some circumstances the data is stored or logged for future use. For example, data may be stored or logged by writing the data to a persistent storage medium. A collection of stored data points may be referred to as a data log.","Multiple hardware devices or multiple software entities may create or process related data points that are logged together. For example, consider an airplane with a number of sensors that monitor the state of the airplane during operation. It may be helpful to log the output of the sensors so that the output can be subsequently reviewed, for example, during post-flight maintenance or in case of a mishap. Each sensor may generate multiple data points to be stored in a log associated with the sensor, and multiple logs may be created (for example, one for each sensor). Accordingly, it may be necessary to store multiple data logs with each data log containing large amounts of data.","Computer-implemented methods, mediums, and systems are described herein for creating and sharing data logs amongst logging points. Data logs may be shared by associating logging objects with the logging points and associating logging vectors with the logging objects. Different logging objects may point to the same logging vector in order to allow the data logs to be shared.","Accordingly, a first object may be created. The first object may interact with a first logging location in an arbitrary model in the environment. The arbitrary model may be, for example, a block diagram model of a dynamic system.","The first object may include a first reference, such as a pointer, and a first counter for indexing into a vector. The first object may create a first vector having a first data point. The data may be, for example, time data that indicates at what time a certain event occurred.","A second object may also be created. The second object may interact with a second logging point in the arbitrary model. The second object may include a second reference and a second counter for indexing into a vector.","If the second object shares at least the first data point in the first vector with the first object, then the second object's counter may be used to reflect the number of elements into the first vector which the second object shares with the first object. If the second object does not share the first data point with the first object, then a second vector may be created, and the second object may index into the second vector.","The vectors may store the data in a compressed or circular format. Initially, the vectors may store uniform data and may compress the uniform data. If non-uniform data is received at an object associated with a compressed uniform vector, then the vector may be changed into an uncompressed vector. The vector may also be associated with a threshold describing the maximum number of data points that may be stored in the vector. If the threshold is exceeded, the vector, which is initially a linear vector storing each data point, may be changed into a circular vector which overwrites the oldest data points in the vector.","In exemplary embodiments, data logs may be shared in real time or near-real-time without the processing overhead associated with conventional techniques.","Exemplary embodiments may provide a data logging infrastructure for efficiently logging data from a variety of sources. A model may include one or more logging points that process data. Logging points are locations in the model that create or process data and request that the data be stored in a data log.","The data may be stored in logs associated with the logging points. Each logging point may request that a logging object store a data point of the data. The logging object may include a reference to a data vector for storing the data point. When two or more logging objects are associated with the same logged data points, the two or more logging objects may share the same vector. If an object logs a point that is not present in a shared vector, the object may update its reference so that the object references a different existing vector, or the object may create a new vector. The vectors may be compressed and\/or made circular to achieve improved efficiency.","Exemplary embodiments may include one or more object classes and support mechanisms that may be manifested in a programming language, such as Java, C++, or MATLAB of The MathWorks, Inc. of Natick, Mass. In some embodiments, the logging objects, data vectors, and vector collections described herein may be provided as part of a technical computing environment, such as the Simulink environment (also of The MathWorks, Inc.).","Data logs may often be repetitive with respect to each other. For example, multiple redundant sensors may be in place in case one of the sensors fails. Further, sensors that are spatially close together or that monitor similar aspects of an entity's performance may generate very similar data points. In some situations, logging points may log time data\u2014that is, the logging points may log the time at which an event may occur. In the case of events affecting multiple logging points, much repetitive logging data may be generated.","In conventional systems, one of two techniques for logging data are used. First, either each logging point is associated with a unique data log (which may result in multiple copies of repetitive logs), or second, the data logs may be processed after data logging is complete to determine which data logs can be shared or eliminated. This second conventional technique is also not able to share logs in real time or near-real-time, which may be useful when the data is provided in the form of a stream.","Further, conventional data logging solutions have typically been implemented on a case-by-case basis. That is, a data logging solution that is compatible with one software environment or hardware device may not be compatible with another software environment or hardware device. Accordingly, a significant amount of customization may be required to ensure that a data logging solution is efficient and effective for a particular data logging situation.","In contrast, exemplary embodiments allow data logging to be achieved with respect to arbitrary input sources, such as an arbitrary model. That is, the data logging techniques described herein are agnostic as to where the logged data originates. The data logging techniques described herein can be carried out regardless of what type of model or environment requests that the data be logged. This is possible in part because only the values to be logged need to be passed to the logging infrastructure.","Exemplary embodiments utilize logging objects to store data in a data vector. The logging objects may receive requests from logging points in an arbitrary model to log a particular unit of data. The request may be as simple as providing a data value from a logging point to a logging object associated with the logging point.","An example of a logging object  is depicted in . The logging object  may include a counter  and a reference .","The counter  may have a value that identifies how many data points the logging object  has been requested to log. In an embodiment, counter  may be initialized to zero if the logging object  is created before any requests for data logging have been received. Alternatively, the logging object  may be created when an initial request to log data is received, in which case the counter may be initialized to 1.","The reference  may have a value that identifies a storage location where a data vector associated with the logging object  may be found. The reference  may be, for example, a pointer to a location in memory where an associated data vector is located. Alternatively, the reference  may identify the data vector by name or using some other identifier. A central repository, such as a table or other type of data store, may map identifiers to vectors. The logging object may query the repository to locate the data vector corresponding to the identifier stored in the logging object's reference .","An example of a data vector  is shown in . The data vector  may store data points , , ,  using a suitable data structure. The data vector  may be associated with a size that describes how many data points are present in the vector. The data vector  may be represented as a logically or physically contiguous portion of memory in an electronic device, where the contiguous memory portion is associated with a starting address and an amount of memory associated with the vector as represented by the vector's size.","Each data point , , ,  may be associated with an index value that describes the data point's location in the vector. The index value of the vector may represent an offset from the vector's starting address where the data point may be found in the electronic device's memory. For example, if there are N data points with data point  being a first data point and the data point  being a last data point. In the example, data point  may be at vector index \u201c0,\u201d the data point  may be at vector index \u201c1.\u201d Further, data point  may be at vector index \u201cN-2,\u201d and data point  may be at vector index \u201cN-1.\u201d Although data vectors are typically indexed beginning with the 0index location (and thus the Ndata point in the vector is stored at vector index N-1), a size of the vector typically reflects the total number of elements stored in the vector (and thus the size of the data vector  of  is N, not N-1). It should be noted that the present invention may use substantially any starting index and indexing technique.","For example, the idata point, having a value V, in a data vector named \u201cfirstvector\u201d (which would be stored in the (i-1)index location) may be represented as:\n\nfirstvector[i-1]=V\n","Although the data vector  depicted in  stores data having a single dimension (e.g., an array), a data vector need not be limited to a single dimension. For example,  depicts an example of a data vector  representing multidimensional data. The data vector  has an index , which represents the dimension along which the data log is progressing. The data vector  further represents a first dimension of a data point  and a second dimension of a data point . Thus, for any given index , a first dimension and a second dimension of a data point may be obtained.","For example, a data point (having a value V) stored at the first index location \u201cx,\u201d second index location \u201cy,\u201d and third index location \u201cz\u201d of a data vector named \u201csecondvector\u201d may be represented as:\n\nsecondvector[x-1,y-1,z-1]=V\n","The logging objects  and data vectors  may be used to log data from data logging points, as shown in . As shown in , an environment  may support an arbitrary model . An arbitrary model may be a model that is independent of the logging infrastructure. Thus, substantially any type of model may utilize the logging infrastructure described herein by making calls to the functionality exposed by the logging infrastructure and made available to the model .","The environment  may be any type of environment that is capable of interacting with model . Examples of environments  include, but are not limited to, Simulink, Stateflow, and MATLAB, each of the MathWorks, Inc. of Natick, Mass. Further examples of environments and models will be provided below with respect to .","The model  may be any type of model that represents a system, such as a dynamic system. Models may have executable semantics and may be executable. Models may include, but are not limited to, block diagrams, state diagrams, data flow diagrams, etc. The model  may be provided in the environment .","Within the model , logging points may process data or cause data to be processed. For example, a first logging point  a second logging point , and a third logging point  may be provided. The logging points , ,  may be hardware or software constructs, or a combination of hardware and software. The logging points , ,  may represent, for example, blocks in a block diagram model, ports of blocks in a block diagram model, signal lines between blocks in a block diagram model, states in a state transition diagram model, transitions in a state transition diagram model, memory locations of variables in a model, signal logging antennas, scopes, etc. The logging points interact with logging objects to log the data.","A first logging object  including a counter  and a reference  is associated with the first logging point . A second logging object  including a counter  and a reference  is associated with the second logging point . A third logging object  including a counter  and a reference  is associated with the third logging point .","The logging points , ,  and the logging objects , ,  need not be present in the same model , but may be spread between two or more distinct models. In this way, different models may share data logs. For example, a first logging point may be present in a first model, and the first logging point may generate data that corresponds to a second logging point from a second model. Using the techniques described herein, the first logging point may share a data log with the second logging point.","Each of the logging objects , ,  is associated, through its respective reference , , , with one of the data vectors , . By causing multiple references to point to the same data vector, a single data vector may be shared between multiple logging objects. For example, in  the first logging object  is associated with a first data vector  because reference  of first logging object  points to the first data vector . Second logging object  is associated with a second data vector  because reference  of second logging object  points to second data vector . Third logging object  is also associated with second data vector  because reference  of third logging object  also points to second data vector . Thus, the second logging object  and the third logging object  share second data vector .","It should be noted that two or more objects sharing a data vector have not necessarily logged the same number of data points. For example, consider a data vector having ten values [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]. A first logging object may have logged all ten of those values so that the log of the first logging object is represented by the ordered set [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]. However, a second logging object may have logged only three values: [0, 1, 2]. In this case, the first logging object and the second logging object can share the data vector because at least the subset of the data vector that is relevant to the second logging object is present at the beginning of the data vector used by the first logging object (i.e., [0, 1, 2]).","In the example, the counter of the first logging object would read \u201c10,\u201d because the first logging object has logged 10 values. The counter of the second logging object would read \u201c3,\u201d because the second logging object has logged only 3 values. Therefore, the correct data log for the second logging object can be found by reading 3 (the value of the counter) entries from the shared vector. If the second data object attempted to log the value \u201c100\u201d as the second data object's 4data point, the second data object may no longer share the data vector with the first logging object because the 4value in the shared data vector is 3, not 100. Accordingly, the second logging object may be divorced from the shared vector and may either share a different vector having the appropriate log values, 0, 1, 2, 100, or may create a new vector if it is not possible to share a vector. In another embodiment, the second logging object may create an additional pair of counter and reference. The additional pair may refer to a shared vector that contains the unshared log value 100 while the original pair of counter and reference refers to the log values 0, 1, 2, which is maintained as a shared log.","As a concrete example, consider three sensors (S, S, S) that may record data, such as a data stream. In this example, each sensor is a logging point , , . A request to log the data of each sensor may be made on behalf of the sensor as the data is received. For example, sensor S may request that a logging system log the data point \u201c5,\u201d followed by the data point \u201c2,\u201d followed by the data point \u201c1.\u201d The sensor S may request that the logging system log the data point \u201c5,\u201d followed by the data point \u201c7,\u201d followed by the data point \u201c1.\u201d The sensor S may request that a logging system log the data point \u201c5,\u201d followed by the data point \u201c7,\u201d followed by the data point \u201c1.\u201d In this case, sensors S and S may share data logs because both S and S have logged the same data. Sensor S has logged at least one different data point, and therefore may not share the entire data log of sensors S and S (although some partial sharing may be possible).","An example of a technique for sharing data logs amongst logging points in a model is described with reference to  and .  is a flowchart depicting an initial setup for a logging object that logs an initial data point.  is a flowchart depicting subsequent requests to log further data points.","Referring to , a request to log an initial data point may be received (step ). The request may originate, for example, from the environment , the model , or a logging point itself.","The request may be received at a logging object associated with the logging point that generated the data point that is the subject of the request. Alternatively, the request may be received at a data logging environment that is responsible for logging the data. The data logging environment may be the same as the environment  containing the model , or may be a different environment.","The request may provide a value to be logged to the logging object or environment. In one example, the logging object may be provided as a part of an application program interface (API) that exposes methods to the environment . One of the methods may provide a way to request that the logging object for which the method is called log a data point. For example, such a method may be represented as:\n\nlog(d)\n\nwhere \u201clog\u201d is the name of the method and \u201cd\u201d represents the value to be logged. If a logging object named \u201cdatalog1\u201d is created, then a logging point can request that the object \u201cdatalog1\u201d log a data point \u201cd\u201d by calling the method:\n\ndatalog1.log(d)\n","At step , a logging object may be created in response to the request to log the initial data point. In one example, an exemplary logging infrastructure provides logging object classes, data vector classes, and an API exposed to entities internal and external to the logging infrastructure (such as the environment ). A class constructor of the API may be called to create a logging object. The logging object may be created with an initial counter  value of \u201c1\u201d to indicate that the logging object is associated with a first initial value. The logging objects may be created with a NULL reference .","Step  may be carried out before step ; that is, one or more logging points may be identified in the model before the logging points begin to process data, and logging objects may be created for the logging points. In this case, the logging objects may be created with a counter value of \u201c0.\u201d Alternatively, the logging point may begin to process data, and once the logging point requests that an initial data point be logged, an associated logging object may be created to accept the data point. In another embodiment, the logging point may store a number of data points before requesting that the initial data point and\/or subsequent data points be logged by a logging object.","At step , it is determined if the newly-created logging object can share an existing data vector. In order to determine whether an existing data vector can be shared, the first value of any existing data vector may be compared to the initial value that was requested to be logged at step . If any existing data vector has a matching initial value, then the answer at step  is \u201cyes\u201d and processing proceeds to step . If more than one existing data vector has a matching initial value, then the logging object may use the first vector that is located having the matching initial value. Alternatively, a vector may be chosen at random from among the vectors having the matching initial value.","In another example, a vector may be chosen based on criteria. For example, the logging object may become associated with a vector that is associated with the most or least other logging objects (e.g., the most or least \u201cpopular\u201d vector), or with a vector that is associated with a logging point having common characteristics with the logging point that requested that the data point be logged in step . However, these options may require that certain additional information about the vectors or logging points be known to the logging objects. The additional information may undermine the ability of a logged object to interact with an arbitrary model . Accordingly, it may be preferable to simply choose the first available matching vector.","In yet another example, user input may be requested to choose the vector that the logging object is to be associated with.","At step , the logging object created at step  associates itself with the matching vector identified at step . This may be achieved, for example, by causing the reference of the logging object to point to the matching vector. Processing then proceeds to step  of .","If no existing data vector has a matching initial value at step , then the answer at step  is \u201cno\u201d and processing proceeds to step . Similarly, if no data vectors yet exist, then the answer at step  is \u201cno\u201d and processing proceeds to step .","At step , a new data vector is created for the logging object created at step . A new data vector may be created by calling a class constructor associated with a data vector class. A data vector having a different size may also be created, and the data vector may be resized as needed. The initial data point identified at step  may then be stored in the newly created data vector at the first index value (e.g., index value \u201c0\u201d). Alternatively, if the data vector class includes a constructor that allows the vector to be created with initial data, then a suitable constructor may be called to create a new vector populated with the initial data point identified at step .","Once the new vector is created and associated with the logging object created at step , processing proceeds to step  of .","At step , the logging object is already associated with a logging point and a data vector that may be shared with other logging objects. Accordingly, at step  the logging object may receive a request to log a subsequent data point (e.g., any data point after the initial data point) from the logging object's associated logging point. The data point may be the Mdata point logged by the logging object. The request may indicate a value V to be logged. For example, the logging point, the environment , or the model  may instruct the data object \u201cdatalog1\u201d to log the value V by calling the method:\n\ndatalog1.log(V)\n","Before the request is received, the counter of the logging object is set to N-1 (because, previously, N-1 data points have been logged by the object). In order to account for the new request, the counter of the data object is incremented at step  so that the counter reflects that N data points have been logged (or requested to be logged).","At step  the logging object queries the data vector currently associated with the logging object for the associated data vector's size. For example, the data vector may be represented by an object having a method such as \u201csizeof( )\u201d that returns the size of the data vector.","Alternatively, the data vector may be represented by an object having a property such as \u201clength\u201d that allows the size of the vector to be determined by determining the value of the property, as in the example below:\n\nint size=datavector1.length\n","The logging object may compare the size of the associated data vector with the current value of the logging object's counter (N).","A size of the associated data vector that is less than N may indicate that the data vector has logged fewer data points than the logging object. Because the logging object has been successfully associated with the data vector to this point, it can be assumed that there are N-1 data points in the associated data vector, which correspond to the first N-1 points logged by the logging object. Further, the first N-1 points of the associated data vector are the same as the (at most) N-1 data points logged by any other logging objects currently sharing the data vector. The other logging objects currently sharing the data vector have not yet logged an Ndata point, because otherwise the size of the data vector would be at least N. Therefore, the logging object may safely append the value V to the end of the vector at step . Processing may return to step  while the logging object awaits another data log request from the associated logging point.","On the other hand, if at step  the size of the data vector associated with the logging object is N or greater, then the data vector is shared with other logging objects and there are values in the data vector that have the potential to conflict with the value V that the current data object is attempting to log. Accordingly, at step , the logging object queries for the Nvalue stored in the data vector currently associated with the logging object. For example, the data vector may be represented by an object having a method such as \u201cgetvalue(i)\u201d that returns the ivalue of the data vector, as in the example below:\n\ndatavector1.getvalue(i)\n","Alternatively, the data vector may be represented by an object that can be queried for a value by specifying which value is requested, as in the example below:\n\nvalue=datavector1[i]\n","The Nvalue stored in the data vector may be compared to the value V in order to determine whether the two values are equal. The Nvalue may be compared to the value V in a number of ways. For example, the Nvalue and the value V may be compared using a simple comparison operator (such as \u201c==\u201d or \u201c<\u201d or \u201c>\u201d) in order to determine whether the values are equal. If the Nvalue and the value V represent objects instead of scalar values (or represent compound values), the objects or compound values may be compared using a built-in comparison operator of the object class. Alternatively, a user may specify how the objects or compound values are to be compared. If an unknown object class is encountered, or if the environment is not programmed with predetermined instructions for comparing values of the types represented by the Nvalue and the value V, a prompt may be presented asking whether the values are equal and\/or how equality for the value types should be determined in the future.","Values represented by different types may also be compared. For example, the Nvalue may be an integer while the value V may be a double. The environment may compare these values using the built-in comparison operators of the value types. Alternatively, the environment may include a default rule which states that values of different types can never be equal, even if they have the same underlying value (e.g., integer 8 and double 8.0). The rules for comparing values of different types may be specified by a user.","If an object is stored in the vector and the object includes two or more data fields, the object may be determined to be equal to a value if one or more of the data fields are equal. Alternatively, it may be determined that an object having multiple fields is equal to a multi-fielded value only if the object and value share all of the same fields.","In the case of logging points logging objects having multiple data fields, the logging points may share a single vector representing all the data fields, or each data field may be assigned an individual vector such that a single logging point refers to multiple vectors. Thus, the objects may be decomposed into primitive data sequences that are stored in the data vectors.","If it is determined at step  that the Nvalue stored in the data vector (at index N-1) is equal to the value V, then no action needs to be taken, because the value that the logging point requested to be logged is already present in the shared vector. Therefore, processing may return to step  while the logging object awaits another data log request from the associated logging point.","If it is determined that the Nvalue in the data vector is not equal to the value V that the logging point requested to be logged, then it is determined that the logging object cannot continue to share the data vector currently associated with the logging object. Accordingly, at step  it is determined if a suitable substitute vector exists that the logging object can share.","The existence of a suitable substitute vector may be determined in a number of ways. For example, it is known that the first N-1 values of the previously associated data vector correspond to the data log of the logging object, and that the Nvalue of the data log is the value V. Accordingly, each existing data vector may be queried until a data vector is found having the same first N logged values.","Alternatively, in some circumstances it may be likely that the initial values in the vector are the same, but the values begin to diverge after a certain point. In these circumstances it is more likely that any differences that exist in the data vectors will be found at the end of the vectors. Accordingly, in order to conserve processing resources by searching the vectors more efficiently, the data vectors may be searched backwards for correspondence with the data log of the logging object. That is, a search for correspondence may begin with the Nvalue of the data vectors and check backwards for correspondence to the 1value of the data vectors.","Yet alternatively, a checksum (e.g., using the MD5 algorithm) for the data stored in each of the vectors may be compared. Comparison of the checksum of the data to be logged with the checksums of the vectors may then provide candidates for a substitute data vector.","If it is determined at step  that a substitute data vector exists, then at step  the substitute data vector is associated with the logging object. This may be achieved by updating the reference  of the logging object to refer to the substitute data vector. For example, if the reference  is a pointer, then the pointer may be changed to point to the substitute data vector. Processing then returns to step  as the logging object awaits another data log request from the associated logging point.","If it is determined at step  that a suitable substitute data vector does not exist, then at step  a new data vector may be created for the logging object. The new vector may be populated with the first N-1 values from the previously associated data vector and the new value V to be logged in the new vector. Processing then returns to step  as the logging object awaits another data log request from the associated logging point.","At any point, the results of logging the data may be displayed on a display device using a graphical viewer (e.g., a GUI). For example, a user may be shown which logging vectors contain data from the various data logs, such as in a relational graph.","For some data points, the environment may be aware of certain data points that will be logged even before the model is executed. For example, certain data values may be determined at compile time (e.g., in the case of time data, some data may be known based on predetermined sample times that will be used during the execution of the model). In this case, data logs for the logging points associated with this already-known data may be populated with known information before execution of the model begins. Sharable vectors may also be shared between the logging points before execution of the model begins.","Similarly, predetermined information may also be used to exclude the possibility of data sharing. For example, if a compiler determines that two variables are of different data types (in a situation where variables of different data types are treated as inherently unequal), the compiler may report this information to the logging infrastructure so that the logging infrastructure never attempts to share data logs in situations involving the different variables.","The technique described above allows data logs to be created independent of the type of environment , model , logging points, or data to be logged. By sharing data vectors among logging objects, increased levels of processor and\/or memory efficiency may be realized. Compressing data vectors and\/or making the data vectors into circular buffers may further improve the processor and\/or memory efficiency of the techniques. Such a procedure is described by the state diagram of .","As shown in , when a new data vector is created, the data vector may be stored as a compressed linear vector at state . At state , it may be known that the data in the vector is uniform (e.g., spaced at regular intervals). This is because the vector is typically created either empty (with 0 data points) or with a single data point, and three or more data points may be required before data can be non-uniform (e.g., not spaced at regular intervals).","A vector storing uniform data may be stored in a compressed format by identifying the starting value of the data, the pattern present in the data, and the number of values or ending value of the data. For example, if a data vector stores the following data log:","[50, 52, 54, 56, 58, 60, 62]","Then the data vector can be represented in the following compressed manner:","{50, +2, 7}","As long as the data remains uniform, the data vector can remain compressed. However, when non-uniform data is detected, the data vector may become uncompressed as represented at state . To uncompress or decompress the data vector, the values of the data log may be derived from the compressed form of the data vector, with the new non-uniform data point appended to the end.","In the above example, if the next value to be logged is \u201c63,\u201d then the data vector may be uncompressed by starting with value 50 and storing a total of 7 values, each next value being 2 greater than the value that preceded it. The 8value may be 63.","Exemplary embodiments can make use of data compression techniques known in the art. An appropriate technique may be selected based on the type of data and\/or the data points to be logged.","In order to save storage space, a data vector may also be associated with a maximum index threshold. The maximum index threshold may be predetermined, or may be specified by a user before, during, or after the creation of a data vector. When a request comes to log a new data point, the data vector may check the new size of the data vector against the maximum index threshold. If the maximum index threshold is exceeded, then the data vector may be converted from a linear vector to a circular vector. The circular vector may use a circular buffer, overwriting earlier values with new additions in a first-in-first-out (FIFO) manner. As shown by states  and , a compressed or an uncompressed vector may be stored in a circular format.","It is also possible to create a vector already populated with a number of data points, as when a substitute vector is created when a data point is divorced from an existing associated data vector. In this case, it may be determined, at the time of vector creation, whether the data in the vector is uniform and whether the number of data points requested to be logged exceeds the maximum threshold. The vector may then be created as compressed or uncompressed and linear or circular as the situation warrants.","An example of compressed and uncompressed, linear and circular, and shared and unshared vectors is provided in . As shown in , 9 logging objects , , , , , , , ,  are associated with logging points in a model (not shown). Each logging object has an associated reference , , , , , , , ,  that points to a respective logging vector , , , , or .","In the example of , the logging object  is associated with the data log represented by the linear vector . The logging objects , ,  are associated with the data log represented by the linear vector  that is shared between the logging objects , , . Similarly, the logging objects , ,  are associated with the data log represented by the circular vector  that is shared between the logging objects , , .","The vectors , ,  may be uncompressed vectors. As shown by the compressed linear vector  and the compressed circular vector , it may not be necessary to share compressed vectors (or to make the compressed vectors sharable to begin with), and thus a logging object may be associated with an unshared compressed vector. It may not be necessary to share compressed vectors because in some circumstances the representation of the compressed vector is smaller than the structures needed to share the compressed vector. For example, if a compressed vector can be represented in a smaller amount of memory space than a pointer for pointing into the vector collection , it would be more beneficial to simply store each compressed vector individually without attempting to share the compressed vector.","One or more of the above-described acts may be encoded as computer-executable instructions executable by processing logic. The computer-executable instructions may be stored on one or more non-transitory computer readable media. One or more of the above described acts may be performed in a suitably-programmed electronic device.  depicts an electronic computing device  that may be suitable for use with one or more acts disclosed herein.","The computing device  may take many forms, including but not limited to a computer, workstation, server, network computer, quantum computer, optical computer, Internet appliance, mobile device, a pager, a tablet computer, a smart sensor, application specific processing device, etc.","The computing device  is illustrative and may take other forms. For example, an alternative implementation of the computing device  may have fewer components, more components, or components that are in a configuration that differs from the configuration of . The components of  and\/or other figures described herein may be implemented using hardware based logic, software based logic and\/or logic that is a combination of hardware and software based logic (e.g., hybrid logic); therefore, components illustrated in  and\/or other figures are not limited to a specific type of logic.","The processor  may include hardware or software based logic to execute instructions on behalf of the computing device . In one implementation, the processor  may include one or more processors, such as a microprocessor. In one implementation, the processor  may include hardware, such as a digital signal processor (DSP), a field programmable gate array (FPGA), a Graphics Processing Unit (GPU), an application specific integrated circuit (ASIC), a general-purpose processor (GPP), etc., on which at least a part of applications can be executed. In another implementation, the processor  may include single or multiple cores  for executing software stored in a memory , or other programs for controlling the computing device .","The computing device  may include one or more tangible non-transitory computer-readable storage media for storing one or more computer-executable instructions or software that may implement one or more embodiments of the invention. The non-transitory computer-readable storage media may be, for example, the memory  or the storage . The memory  may include a computer system memory or random access memory (RAM), such as dynamic RAM (DRAM), static RAM (SRAM), extended data out RAM (EDO RAM), Content Addressable Memory (CAM), etc. The memory  may include other types of memory as well, or combinations thereof.","One or more processors  may include a virtual machine (VM)  for executing the instructions loaded in the memory . A virtual machine  may be provided to handle a process running on multiple processors so that the process may appear to be using only one computing resource rather than multiple computing resources. Virtualization may be employed in the computing device  so that infrastructure and resources in the computing device may be shared dynamically. Multiple VMs  may be resident on a single processor .","A hardware accelerator , may be implemented in an ASIC, FPGA, or some other device. The hardware accelerator  may be used to speed up the general processing rate of the computing device .","The computing device  may include a network interface  to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., T1, T3, 56 kb, X.25), broadband connections (e.g., integrated services digital network (ISDN), Frame Relay, asynchronous transfer mode (ATM), wireless connections (e.g., 802.11), high-speed interconnects (e.g., InfiniBand, gigabit Ethernet, Myrinet) or some combination of any or all of the above. The network interface  may include a built-in network adapter, network interface card, personal computer memory card international association (PCMCIA) network card, card bus network adapter, wireless network adapter, universal serial bus (USB) network adapter, modem or any other device suitable for interfacing the computing device  to any type of network capable of communication and performing the operations described herein.","The computing device  may include one or more input devices , such as a keyboard, a multi-point touch interface, a pointing device (e.g., a mouse), a gyroscope, an accelerometer, a haptic device, a tactile device, a neural device, a microphone, or a camera, that may be used to receive input from, for example, a user. Note that computing device  may include other suitable I\/O peripherals.","The input devices  may allow a user to provide input that is registered on a visual display device . A graphical user interface (GUI)  may be shown on the display device .","A storage device  may also be associated with the computer . The storage device  may be, for example, a hard-drive, CD-ROM or DVD, Zip Drive, tape drive, flash drive, or other suitable tangible computer readable storage medium capable of storing information. The storage device  may be useful for storing application software programs, such as an environment  (which may be, for example the MATLAB\u00ae environment or the Simulink\u00ae environment) including a model  (such as a block diagram model), applications  and an operating system (OS) . The storage  may further store one or more logging objects  and one or more logging vectors .","The environment  may include a text-based modeling environment, a graphical modeling environment, or some other modeling environment. Examples of environments may include MATLAB\u00ae and Simulink\u00ae, Stateflow\u00ae, Simscape\u2122, and SimMechanics\u2122 which are available from The MathWorks, Inc.; LabVIEW\u00ae or MATRIXx available from National Instruments, Inc; Mathematica\u00ae available from Wolfram Research, Inc.; Mathcad available from Mathsoft Engineering & Education Inc.; Maple\u2122 available from Maplesoft, a division of Waterloo Maple Inc.; Poseidon for UML by Gentleware, AG of Hamburg, Germany; MagicDraw by NoMagic, Inc., of Plano, Tex.; Comsol available from Comsol AB of Sweden; Scilab\u2122 available from The French National Institution for Research in Computer Science and Control (INRIA), Le Chesnay Cedex, France; and GNU Octave, available from the GNU Project; SoftWIRE available from Measurement Computing; VisSim available from Visual Solutions; WiT available from DALSA Coreco; VEE Pro available from Agilent; Dymola available from Dynasim AB; Extend available from Imagine That, Inc.; Scicos available from The French National Institution for Research in Computer Science and Control (INRIA); MSC.Adams\u00ae available from MSC.Software Corporation; Rhapsody\u00ae and Rational\u00ae available from International Business Machines Corporation; ARTiSAN Studio available from ARTiSAN Software Tools, Inc.; and SCADE\u2122 from Esterel Technologies, Inc.","Environments  may be programs that may enable, for example, a user to construct and analyze a model  of a process or system. Examples of models  may include, for example, time-based block diagram models, discrete event diagram models and state machine diagram models, data-flow diagram models, and other models, such as Unified Modeling Language (UML) models, among others.","The computing device  can be running an operating system (OS) . Examples of OS  may include the Microsoft\u00ae Windows\u00ae operating systems, the Unix and Linux operating systems, the MacOS\u00ae for Macintosh computers, an embedded operating system, such as the Symbian OS, a real-time operating system, an open source operating system, a proprietary operating system, operating systems for mobile computing devices, or other operating system capable of running on the computing device and performing the operations described herein. The operating system may be running in native mode or emulated mode.","One or more embodiments of the invention may be implemented using computer-executable instructions and\/or data that may be embodied on one or more non-transitory tangible computer-readable mediums. The mediums may be, but are not limited to, a hard disk, a compact disc, a digital versatile disc, a flash memory card, a Programmable Read Only Memory (PROM), a Random Access Memory (RAM), a Read Only Memory (ROM), Magnetoresistive Random Access Memory (MRAM), a magnetic tape, or other computer-readable media.","One or more embodiments of the invention may be implemented in a programming language. Some examples of languages that may be used include, but are not limited to, Python, C, C++, Objective C, C#, SystemC, Java, Javascript, a hardware description language (HDL), unified modeling language (UML) and derived profiles and languages (e.g., SysML), and Programmable Logic Controller (PLC) languages. Further, one or more embodiments of the invention may be implemented in a hardware description language or other language that may allow prescribing computation. One or more embodiments of the invention may be stored on or in one or more mediums as object code. Instructions that may implement one or more embodiments of the invention may be executed by one or more processors. Portions of the invention may be in instructions that execute on one or more hardware components other than a processor.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["700","600","712","713","714","715"]},"The network  may transport data from a source to a destination. Embodiments of the network  may use network devices, such as routers, switches, firewalls, and\/or servers (not shown) and connections (e.g., links) to transport data. \u2018Data,\u2019 as used herein, may refer to any type of machine-readable information having substantially any format that may be adapted for use in one or more networks and\/or with one or more devices (e.g., the computing device , the service provider , etc.). Data may include digital information or analog information. Data may further be packetized and\/or non-packetized.","The network  may be a hardwired network using wired conductors and\/or optical fibers and\/or may be a wireless network using free-space optical, radio frequency (RF), and\/or acoustic transmission paths. In one implementation, the network  may be a substantially open public network, such as the Internet. In another implementation, the network  may be a more restricted network, such as a corporate virtual network. The network  may include Internet, intranet, Local Area Network (LAN), Wide Area Network (WAN), Metropolitan Area Network (MAN), wireless network (e.g., using IEEE 802.11, Bluetooth, etc.), etc. The network  may use middleware, such as Common Object Request Broker Architecture (CORBA) or Distributed Component Object Model (DCOM). Implementations of networks and\/or devices operating on networks described herein are not limited to any particular data type, protocol, architecture\/configuration, etc.","The service provider  may include a device that makes a service available to another device. For example, the service provider  may include an entity (e.g., an individual, a corporation, an educational institution, a government agency, etc.) that provides one or more services to a destination using a server and\/or other devices. Services may include instructions that are executed by a destination to perform an operation (e.g., an optimization operation). Alternatively, a service may include instructions that are executed on behalf of a destination to perform an operation on the destination's behalf.","The target environment  may include a device that receives information over the network . For example, the target environment  may be a device that receives user input from the computer .","The cluster  may include a number of units of execution (UEs)  and may perform processing on behalf of the computer  and\/or another device, such as the service provider . For example, the cluster  may perform parallel processing on an operation received from the computer . The cluster  may include UEs  that reside on a single device or chip or reside on a number of devices or chips.","The units of execution (UEs)  may include processing devices that perform operations on behalf of a device, such as a requesting device. A UE may be a microprocessor, field programmable gate array (FPGA), and\/or another type of processing device. UE  may include code, such as code for an operating environment. For example, a UE may run a portion of an operating environment that pertains to parallel processing activities. The service provider  may operate the cluster  and may provide interactive optimization capabilities to the computer  on a subscription basis (e.g., via a web service).","Units of Execution (UEs) may provide remote\/distributed processing capabilities for products such as MATLAB\u00ae from The MathWorks, Inc. A hardware unit of execution may include a device (e.g., a hardware resource) that may perform and\/or participate in parallel programming activities. For example, a hardware unit of execution may perform and\/or participate in parallel programming activities in response to a request and\/or a task it has received (e.g., received directly or via a proxy). A hardware unit of execution may perform and\/or participate in substantially any type of parallel programming (e.g., task, data, stream processing, etc.) using one or more devices. For example, a hardware unit of execution may include a single processing device that includes multiple cores or a number of processors. A hardware unit of execution may also be a programmable device, such as a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), a digital signal processor (DSP), or other programmable device. Devices used in a hardware unit of execution may be arranged in many different configurations (or topologies), such as a grid, ring, star, or other configuration. A hardware unit of execution may support one or more threads (or processes) when performing processing operations.","A software unit of execution may include a software resource (e.g., a technical computing environment) that may perform and\/or participate in one or more parallel programming activities. A software unit of execution may perform and\/or participate in one or more parallel programming activities in response to a receipt of a program and\/or one or more portions of the program. A software unit of execution may perform and\/or participate in different types of parallel programming using one or more hardware units of execution. A software unit of execution may support one or more threads and\/or processes when performing processing operations.","The term \u2018parallel programming\u2019 may be understood to include multiple types of parallel programming, e.g. task parallel programming, data parallel programming, and stream parallel programming. Parallel programming may include various types of processing that may be distributed across multiple resources (e.g., software units of execution, hardware units of execution, processors, microprocessors, clusters, labs) and may be performed at the same time.","For example, parallel programming may include task parallel programming where a number of tasks may be processed at the same time on a number of software units of execution. In task parallel programming, a task may be processed independently of other tasks executing, for example, at the same time.","Parallel programming may include data parallel programming, where data (e.g., a data set) may be parsed into a number of portions that may be executed in parallel using, for example, software units of execution. In data parallel programming, the software units of execution and\/or the data portions may communicate with each other as processing progresses.","Parallel programming may include stream parallel programming (also referred to as pipeline parallel programming). Stream parallel programming may use a number of software units of execution arranged, for example, in series (e.g., a line) where a first software unit of execution may produce a first result that may be fed to a second software unit of execution that may produce a second result given the first result. Stream parallel programming may also include a state where task allocation may be expressed in a directed acyclic graph (DAG) or a cyclic graph.","Other parallel programming techniques may involve some combination of task, data, and\/or stream parallel programming techniques alone or with other types of processing techniques to form hybrid-parallel programming techniques.","The foregoing description may provide illustration and description of various embodiments of the invention, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations may be possible in light of the above teachings or may be acquired from practice of the invention. For example, while a series of acts has been described above, the order of the acts may be modified in other implementations consistent with the principles of the invention. Further, non-dependent acts may be performed in parallel. Further, although features and accessing classes have been described above using particular syntaxes, features and accessing classes may equally be specified using in different ways and using different syntaxes.","In addition, one or more implementations consistent with principles of the invention may be implemented using one or more devices and\/or configurations other than those illustrated in the Figures and described in the Specification without departing from the spirit of the invention. One or more devices and\/or components may be added and\/or removed from the implementations of the figures depending on specific deployments and\/or applications. Also, one or more disclosed implementations may not be limited to a specific combination of hardware.","Furthermore, certain portions of the invention may be implemented as logic that may perform one or more functions. This logic may include hardware, such as hardwired logic, an application-specific integrated circuit, a field programmable gate array, a microprocessor, software, or a combination of hardware and software.","No element, act, or instruction used in the description of the invention should be construed critical or essential to the invention unless explicitly described as such. Also, as used herein, the article \u201ca\u201d is intended to include one or more items. Where only one item is intended, the term \u201ca single\u201d or similar language is used. Further, the phrase \u201cbased on,\u201d as used herein is intended to mean \u201cbased, at least in part, on\u201d unless explicitly stated otherwise. In addition, the term \u201cuser\u201d, as used herein, is intended to be broadly interpreted to include, for example, a computing device (e.g., a workstation) or a user of a computing device, unless otherwise stated.","The scope of the invention is defined by the claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1D"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
