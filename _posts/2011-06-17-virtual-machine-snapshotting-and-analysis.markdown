---
title: Virtual machine snapshotting and analysis
abstract: Described are techniques for capturing and analyzing snapshots of virtual machines. One or more computers may automatically obtain snapshots of virtual machines as they are executing to form a pool of virtual machine snapshots. The virtual machine snapshots are then read to obtain a set of features properties of the virtual machine snapshots, including information about a running guest operating system, software installed on the virtual machine, metadata about the virtual machine itself, and others. The features or properties are analyzed, in one embodiment using a machine learning algorithm, to automatically compute and store information about the virtual machines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286182&OS=09286182&RS=09286182
owner: Microsoft Technology Licensing, LLC
number: 09286182
owner_city: Redmond
owner_country: US
publication_date: 20110617
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Modern computing continues to have areas where improvement is desired. The continuing evolution of how computers are designed and programmed at both the intra-machine and inter-machine level leads to new issues of performance, security, reliability, power consumption, efficiency, and so forth. Increasing complexity can make it difficult to identify bugs or critical aspects of machines or software. It has been known to analyze groups of static computers (e.g., static files of dormant machines) to learn about individual machines as well as groups of machines. Physical computers (physical machines) have been automatically analyzed to identify features in common among failing or well-performing machines, programmatic bugs, machines that are performing poorly or are experiencing errors, and so forth. However, to date, such analysis has been limited to the static state of physical machines, log files, disk images, and the like. It has not been possible to analyze, as a body, large groups of running computers.","Recently, however, in some environments such as compute clouds, data centers, etc., operating systems and software thereon are sometimes run on virtual machines (VMs), which are described in detail below. With virtual machine technology, it is possible to capture and store a snapshot of a running \u201cmachine\u201d, including hardware state of the machine, software state, operating system state, file system state, memory state, and so forth. This captured state of a machine \u201cin motion\u201d holds information that has not previously been considered as a collective set of data that may be subject to analysis.","Techniques related to analysis of sets virtual machine snapshots are discussed below.","The following summary is included only to introduce some concepts discussed in the Detailed Description below. This summary is not comprehensive and is not intended to delineate the scope of the claimed subject matter, which is set forth by the claims presented at the end.","Described are techniques for capturing and analyzing snapshots of virtual machines. One or more computers may automatically obtain snapshots of virtual machines as they are executing to form a pool of virtual machine snapshots. The virtual machine snapshots are then read to obtain a set of features properties of the virtual machine snapshots, including information about a running guest operating system, software installed on the virtual machine, metadata about the virtual machine itself, and others. The features or properties are analyzed, in one embodiment using a machine learning algorithm, to automatically compute and store information about the virtual machines.","Many of the attendant features will be explained below with reference to the following detailed description considered in connection with the accompanying drawings.","Machine Virtualization",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","104","106","108","110","112","100","114","114","114","114"]},"The virtualization layer  may be of any variety of known or future implementations, such as Hyper-V Server\u2122, VMWare ESX Server\u2122, Xen, Oracle VM\u2122, etc. The architecture of the virtualization layer may a hosted type, with a virtual machine monitor (VMM) running on a host operating system, or a bare-metal type with a hypervisor or the like running directly on the hardware  of the computer . As used herein, the term \u201cvirtual machine\u201d refers to a system-type virtual machine that simulates any specific hardware architecture (e.g., x86) able to run native code for that hardware architecture; to the guest, the virtual machine may be nearly indistinguishable from a hardware machine. Virtual machines discussed herein are not abstract or process-type virtual machines such as Java Virtual Machines.","The virtualization layer  performs the basic function of managing the virtual machines  and sharing of the hardware  by both itself and the virtual machines . Any of a variety of techniques may be used to isolate the virtual machines  from the hardware . In one embodiment, the virtualization layer may provide different isolated environments (i.e., partitions or domains) which correspond to virtual machines . Some of the virtualization layer  such as shared virtual device drivers, inter virtual machine communication facilities, and virtual machine management APIs (application programming interfaces), may run in a special privileged partition or domain, allowing for a compact and efficient hypervisor. In other embodiments, functionality for virtual machine management and coherent sharing of the hardware  may reside in a monolithic on-the-metal hypervisor.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["100","114","140","100","142","114","114","140","140","114","140","141","100","100","140","114","140"]},"The virtualization layer  manages execution of the virtual machine , handling certain calls to the guest's kernel, hypercalls, etc., and coordinating the virtual machine \u2032s access to the underlying hardware . As the guest and its software run, the virtualization layer  may maintain state of the guest on the virtual disk image ; when the guest, or an application run by the guest, writes data to \u201cdisk\u201d, the virtualization layer  translates the data to the format of the virtual disk image  and writes to the image.","The virtualization layer  may perform a process  for shutting down the virtual machine . When an instruction is received to stop the virtual machine , the state of the virtual machine  and its guest is saved to the virtual disk image , and the executing virtual machine  process (or partition) is deleted. A specification of the virtual machine  may remain for a later restart of the virtual machine .","Virtual Machine Shapshotting",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3","b":["114","114","180","104","113","180","182","180","104","100","114","100","184","186","188","114","114","100","180"]},"Capturing a snapshot  may be performed with known techniques or with existing implementations of virtualization technology. Notably, snapshot  may include any information available in an equivalent running physical machine. For example, snapshot  may include a copy of the memory of the virtual machine , which may include executing processes , kernel data structures , or any information in the virtualized physical memory of the virtual machine . In addition, the snapshot  may include information captured from physical or virtual devices used by the virtual machine , including register values, buffer contents, etc. In some implementations, the snapshotting process  may also capture information about the virtual physical environment of the virtual machine , such as virtual CPU information (number of virtual cores or CPUs), amounts of memory and storage, virtual devices, virtual network interface cards, BIOS, virtual mother board, device drivers, and others. Some virtualization implementations may link a snapshot to the virtual machine's disk image, and the snapshot may comprise storage blocks of the executing virtual machine that differ from the virtual machine's disk image. In sum, snapshot  is a persistent object such as a file that contains the captured working state of a virtual machine. Most virtualization implementations allow a snapshot to be loaded and executed; the virtual machine executing the snapshot (possible a virtual machine other than the original from which the snapshot was captured) begins executing as though the original virtual machine at the time the snapshot was taken. In other words, the state of an executing virtual machine may be captured and later resumed in the same or a new virtual machine.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4","b":["114","210","212","114","210","114","184","188","214"]},"The snapshot manager  may be part of a virtual machine management system that manages virtual machines across a network. In one embodiment, snapshots  are repeatedly taken over time for any given virtual machine, possibly forming a chain of sequential snapshots for a virtual machine. For example, in , VM- has snapshot SS, SS, and others, captured at different points in time. VM- can be restarted at any time from one of its snapshots. For example, after SS is captured, SS could be loaded into VM- and VM- would be running in nearly the same state it had when SS was captured. This can allow a tree or hierarchy of versions of instances a virtual machine to be captured.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 5","FIG. 5"],"b":["230","114","1","2","114","2","114","2","1","2","2","2","1","2","1","1","2","1","2","230","1","1","1","1","2","1","2"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 6","b":["232","234","236","234"]},"Virtual Machine Snapshot Analysis",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 7","b":["214","184","114","212","114","230"]},"The snapshots are read by a feature extractor . A subset of the stored virtual machine snapshots may be selected or queried for according to a particular purpose of the analysis, the selection of analysis algorithm, and so forth. The feature extractor  accesses a virtual machine snapshot, mounts\/reads the file system therein, reads the stored memory content, reads configuration (e.g., registry) settings, and\/or reads metadata about the virtual machine included with the snapshot, to identify a set of pre-defined features of the snapshot. Any type of feature may be subject to extraction for analysis. The feature extractor  may have a template or definition file that defines the features to be sought and extracted, for example a set of files, a set of attributes of the virtual machine itself, a set of software packages to be checked for, etc. Feature extraction and example features are discussed in greater detail with reference to .","Returning to , the feature extractor  outputs a set of features for each virtual machine image in the form of a feature pool . The feature pool  associates features of the snapshots with the individual snapshots they were obtained from. The feature pool  allows the virtual machine snapshots to be analyzed as a group (e.g., for clustering analysis or other types of machine learning) by an analysis tool .","The analysis tool  receives the feature pool  and performs analysis on the feature pool . The analysis can take a wide range of forms. The analysis tool , running as software on one or more computers, may be programmed with custom logic such as a decision tree or a set of rules (obtained from a rule database) that are specific to a particular analysis to be performed (e.g., security, or performance, or a particular software bug). The analysis tool  may instead perform analysis using statistical modeling or machine learning techniques described below, where analytical conclusions are not from hard-coded logic but rather the meaning of features depends on training data and\/or the feature pool  as a whole.","The analysis tool  outputs analysis output , which also may take a variety of forms. The purpose of automated snapshot analysis is to identify or estimate properties or traits of virtual machines that correspond to the snapshots being analyzed. As such, analysis output  may be a ranking of snapshots according to likelihood of a virtual machine having a defined condition (e.g., infected with a computer virus), or having a particular trait (e.g., will experience a failure in the next 8 days), or belongs to a particular category (e.g., underperforming machines) etc. Analysis output  may also, rather than analyzing snapshots relative to predefined semantic meaning, identify statistical traits of virtual machines, clusters of machines grouped by similarities, and others.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 8","b":["252","252","252"]},"Feature pool C is a set of feature vectors . Each feature vector is a set of values arranged in a predefined order, with each value at a position corresponding to a feature variable in a vector of feature variables . In some embodiments where machine learning is used, there is no need to explicitly define the feature variables. Again, the features in a feature vector are simply values derived from a snapshot, including its semantic content and\/or metadata. For example, it is possible to read the stored copy of working memory in a snapshot and parse for objects such as names of open files, programmatic objects, or other objects that can be seen as having been active when the virtual machine was snapshotted.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 9","b":["290","292","294"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 10","b":["254","254","310","312","254","314","254","318","320"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 11","b":["340","340","342","342","340","342","342"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 12","b":["360","362","364","366","366","368","370","372","366","374"]},"As noted earlier, many forms of machine learning may be used. Any type of linear classifier may be used. Semi-supervised learning algorithms may be used. As used herein \u201cmachine learning\u201d will refer to any known or future artificial intelligence algorithms for automated learning, including, categorically: supervised learning algorithms (e.g., neural networks, Bayesian statistics, decision trees, learning automata, regression analysis, Gaussian process regression, inductive logic programming, etc); statistical classification algorithms (e.g., linear classifiers, k-nearest neighbor, boosting, Bayesian networks, hidden Markov models, etc.); unsupervised learning algorithms (e.g., data clustering, expectation-maximization, radial basis function network, etc.); associative learning (e.g., a-priori algorithms and FP-growth algorithms); hierarchical clustering algorithms; partial clustering algorithms; and\/or others.","Because snapshots are taken from live running virtual machines, run-time state may be taken into account. In particular, features of a guest operating system may be used, including features related to memory, processes, threads, boot state, and other features that are not found in dormant physical computers (or images thereof), or information found in static files, log files, etc.","Conclusion","Embodiments and features discussed above can be realized in the form of information stored in volatile or non-volatile computer or device readable media. This is deemed to include at least media such as optical storage (e.g., compact-disk read-only memory (CD-ROM)), magnetic media, flash read-only memory (ROM), or any current or future means of storing digital information. The stored information can be in the form of machine executable instructions (e.g., compiled executable binary code), source code, bytecode, or any other information that can be used to enable or configure computing devices to perform the various embodiments discussed above. This is also deemed to include at least volatile memory such as random-access memory (RAM) and\/or virtual memory storing information such as central processing unit (CPU) instructions during execution of a program carrying out an embodiment, as well as non-volatile media storing information that allows a program or executable to be loaded and executed. The embodiments and features can be performed on any type of computing device, including portable devices, workstations, servers, mobile wireless devices, and so on."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present description will be better understood from the following detailed description read in light of the accompanying drawings, wherein like reference numerals are used to designate like parts in the accompanying description.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
