---
title: Apparatus and method for routing composite objects to a report server
abstract: A computer readable medium stores instructions for execution on a computer. The instructions receive a collection of composite objects. An aggregate dataset that includes a portion of contents of object instances in the collection of composite objects is created. The aggregate dataset includes contents of object instances formed by reflection, where reflection includes obtaining type information of object instances in the collection of composite objects. A report schema specifying how data for a report is to be processed and formatted is received. The aggregate dataset is queried to retrieve data. The data is processed into a report in accordance with the report schema. The data in the report is formatted in accordance with the report schema.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08005785&OS=08005785&RS=08005785
owner: Business Objects Software Ltd
number: 08005785
owner_city: Dublin
owner_country: IE
publication_date: 20090629
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BRIEF DESCRIPTION OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a continuation of U.S. patent application Ser. No. 11\/403,459, filed Apr. 12, 2006, now U.S. Pat. No. 7,555,495 the contents of which are incorporated by reference.","This invention relates generally to reporting technology and application programming. More particularly, this invention relates to apparatuses and methods for creating reports from composite objects.","Business Intelligence (BI) generally refers to software tools used to improve business enterprise decision-making. These tools are commonly applied to financial, human resource, marketing, sales, customer and supplier analyses. More specifically, these tools can include: reporting and analysis tools to present information, content delivery infrastructure systems for delivery and management of reports and analytics, data warehousing systems for cleansing and consolidating information from disparate sources, and data management systems, such as relational databases or On Line Analytic Processing (OLAP) systems used to collect, store, and manage raw data.","A subset of business intelligence tools are report generation tools. There are a number of commercially available products to produce reports from stored data. For instance, Business Objects Americas of San Jose, Calif., sells a number of widely used report generation products, including Crystal Reports\u2122, Business Objects OLAP Intelligence\u2122, Business Objects Web Intelligence\u2122, and Business Objects Enterprise\u2122. As used herein, the term report refers to information automatically retrieved (i.e., in response to computer executable instructions) from a data source (e.g., a database, a data warehouse, a plurality of reports, and the like), where the information is structured in accordance with a report schema that specifies the form in which the information should be presented. A non-report is an electronic document that is constructed without the automatic retrieval of information from a data source. Examples of non-report electronic documents include typical business application documents, such as a word processor document, a presentation document, and the like.","A report document specifies how to access data and format it. A report document where the content does not include external data, either saved within the report or accessed live, is a template document for a report rather than a report document. Unlike other non-report documents that may optionally import external data within a document, a report document by design is primarily a medium for accessing and formatting, transforming or presenting external data.","A report is specifically designed to facilitate working with external data sources. In addition to information regarding external data source connection drivers, the report may specify advanced filtering of data, information for combining data from different external data sources, information for updating join structures and relationships in report data, and logic to support a more complex internal data model (that may include additional constraints, relationships, and metadata).","In contrast to a spreadsheet, a report is generally not limited to a table structure but can support a range of structures, such as sections, cross-tables, synchronized tables, sub-reports, hybrid charts, and the like. A report is designed primarily to support imported external data, whereas a spreadsheet equally facilitates manually entered data and imported data. In both cases, a spreadsheet applies a spatial logic that is based on the table cell layout within the spreadsheet in order to interpret data and perform calculations on the data. In contrast, a report is not limited to logic that is based on the display of the data, but rather can interpret the data and perform calculations based on the original (or a redefined) data structure and meaning of the imported data. The report may also interpret the data and perform calculations based on pre-existing relationships between elements of imported data. Spreadsheets generally work within a looping calculation model, whereas a report may support a range of calculation models. Although there may be an overlap in the function of a spreadsheet document and a report document, these documents express different assumptions concerning the existence of an external data source and different logical approaches to interpreting and manipulating imported data.","In normal operation, a report server accesses a data source and launches a query to retrieve data for a report. The report is processed and formatted per the schema that defines the report. In this way, data is pulled from a data source and is placed in a report.","Normally, a report server does not treat the data stored in composite objects as a data source for reporting purposes. In accordance with the object oriented paradigm, an application programmer creates an application comprising a collection of individual objects that may act on themselves and each other. This is in contrast to a traditional model in which an application operates as a collection of functions. In designing an object oriented program, a computer programmer produces objects that enable the requirements of the application If reporting is a requirement, the programmer must engage in a lot of activity to produce a report. Further, application programmers do not normally concern themselves with working with data structures that are distinguished by the ease in which they can become data sources for a report server. For example, an application programmer could be working with legacy code that includes a collection of objects designed with no reporting function in mind. However, the application programmer, possibly to satisfy new requirements, may now need to implement a reporting function with the collection of objects as a data source.","A remedy to relieve the application programmer's burden is an application programming interface (API), which provides the application programmer with access to reporting capabilities. However, the API may create a disincentive to the application programmer to create an object that makes a good source for report data. Accordingly, it would be desirable to provide an API that facilitates reporting off objects created by application programmers.","The invention includes a computer readable medium that stores instructions for execution on a computer. The instructions receive a collection of composite objects. An aggregate dataset that includes a portion of contents of object instances in the collection of composite objects is created. The aggregate dataset includes contents of object instances formed by reflection, where reflection includes obtaining type information of object instances in the collection of composite objects. A report schema specifying how data for a report is to be processed and formatted is received. The aggregate dataset is queried to retrieve data. The data is processed into a report in accordance with the report schema. The data in the report is formatted in accordance with the report schema.","An embodiment of the invention includes a computer readable medium storing executable instructions include a first function that receives a collection of objects and creates an aggregate dataset that includes a portion of the contents of object instances in the collection of objects. The portion of contents of object instances is created by reflection, where reflection comprises obtaining type information of object instances in the collection of objects. A second function pushes the aggregate dataset to a report server via an application program interface. The report server has a primary data source; the aggregate data set operates as a secondary data source. The primary data source is bypassed as the aggregate dataset is utilized as a report data source. A report with data from the aggregate data set is received from the report server.","Like reference numerals refer to corresponding parts throughout the several views of the drawings.","Various features associated with the operation of the present invention will now be set forth. Prior to such description, a glossary of terms used throughout this description is provided.","An application programming interface (API) is the interface that a program provides in order to service requests from other computer programs, and\/or to allow data to be exchanged between the program and another program. For example, an application created by an application programmer may use an API to utilize another program.","A composite object is an object that includes a heterogeneous plurality of simple data types and\/or objects. An application programmer can programmatically employ a composite object to create an application that uses an API or invokes a method. A composite object can also include method functions.","Serialization is the process of converting the data representation of an object to another form such that it can be transmitted across a network or saved to a storage medium. The object can be saved in binary or in some human-readable format, such as a markup language. The converted form of the object can be used to re-create the original object, in whole or in part. This process of serializing an object is also known as marshalling an object.","A simple data type is a basic building block for programs and composite data types. What is a simple data type varies with programming language but a typical simple data type includes: Boolean values, integers, floating-point numbers, characters, string types, or references.","Reflection is the ability of an application to observe and optionally modify its structure. It can be applied to an object to get information about the object's structure.","An application programmer is a computer programmer that may use an API in creating an application. The application created by the programmer is for use by the user of a computer.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","100","100","130","140","140"]},"The first computer  includes a central processing unit  connected to a set of input\/output devices  via a bus . The input\/output devices  may include standard components, such as keyboard, mouse, display, printer, and the like. A network interface circuit (NIC)  is connected to the bus , which is coupled to the CPU  and input\/output devices .","Also connected to the bus  is a memory . The memory  stores executable instructions to implement operations of the invention. In an embodiment the memory  stores one or more of the following modules: an operating system module , a conversion module , a report server application programming interface (API) , and an application module .","The operating system module  includes instructions for handling various system services, such as file services or for performing hardware dependant tasks. The conversion module  includes executable instructions to produce an aggregate dataset from a collection of objects stored in the application module .","The report server API module  includes data and executable instructions to allow programs to interact with a report server, e.g., make requests to a report server. The report server API module  can be structured to be language agnostic with inter-operability across computers and platforms. The report server API module  includes executable instructions to make function calls across network  or a wider network. In an embodiment of the invention, report server API module  is configured in accordance with Microsoft's .NET\u2122 framework.","The application module  includes executable instructions for the application created by an application programmer for use by the user of computer . The application module  includes a collection of composite objects that implement, in whole or in part, the application.","The second computer  includes a central processing unit  connected to a set of input\/output devices  via a bus . The NIC  provides connectivity to communication channel . Also connected to the bus  is a memory . The memory  stores executable instructions to implement operations of the invention. In an embodiment, the memory  stores one or more of the following modules: a report server module , and a data source management system (e.g., a DBMS) module .","The report server module  includes executable instructions to generate reports. The data source management system  includes executable instructions to allow a computer program to interface with a data source. Examples of a data source include a database, a data warehouse, a plurality of reports, and the like.","The modules stored in system memories  and  are exemplary. Additional modules such as a graphical user interface module can be included. It should be appreciated that the functions of the presented modules may be combined. In addition, a function of a module need not be performed on a single machine, e.g., the first computer or the second computer. Instead, the function may be distributed across system  or a wider network, if desired. In an embodiment of the present invention, the system  may operate in a non-client-sever framework unifying all, or part, of the operations associated with the computers of system . Specifically, the report server module  can be included in memory  of computer . It is the functions of the modules that are significant, not where they are performed or the specific manner in which they are performed.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 2","FIG. 2"],"b":["202","114"]},"In processing operation , the executable instructions in the conversion module  produce an aggregate dataset corresponding to the collection of objects. The aggregate dataset is a binary or human readable dataset that includes a portion of the data from all the objects in the collection of objects.","In the optional processing operation , the aggregate dataset is serialized. The instructions in the API module  determine if serialization is required, i.e., is the report server module local (on computer ) or remote (on computer ). This determination is transparent to the application programmer.","In processing operation , an application running on computer  makes use of instructions in the API module  to push the aggregate dataset to the report server. In the processing operation  the report server receives the aggregate dataset, engages in some report processing, and returns a report.","In an embodiment of the present invention, the processing operations , , and  are performed in a manner that is transparent to the application programmer. That is, the application programmer produces code that makes function calls without having to implement every operation in . In an embodiment, the application programmer passes a collection of objects to the conversion module , in processing operation , and receives a report as a result of processing operation . This aspect of the invention is apparent from the following pseudo code segment.","The following code segment is pseudo code that would invoke the processing operations from , and would be similar to code include in the application module  from .",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Pseudo Code Segment for Invocation Code"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AA",". . . "]},{"entry":["AB","report.load( . . . reportPath . . . )"]},{"entry":["AC","createArray array1 = [objectInstance_1, objectInstance_2, . . . ,"]},{"entry":[{},"objectInstance_n]"]},{"entry":["AD","report.setDatSource(array1)"]},{"entry":["AE","report.export(PDF)"]},{"entry":["AF",". . . "]},{"entry":["AG","createArray array2 = [pointer_a, pointer_b, . . . ]"]},{"entry":["AH","report.setDatSource(array2)"]},{"entry":["AI","report.refresh( )"]},{"entry":["AJ","report.export(RPT)"]},{"entry":["AK",". . ."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3","FIG. 2","FIG. 3"],"b":["204","302"]},"In processing operation , the executable instructions in the conversion module  use the type information to create a template for the aggregate dataset.","In processing operation , all public simple data in each object instance in the collection of objects is converted into a value in the aggregate dataset. In an embodiment, processing operation  includes duplicating the template created in operation  for each object instance in the collection of objects. Processing operation  further includes populating each duplicate template with the value of each simple data type found in each object instance in the collection of objects.","The following code segment is pseudo code that could convert a collection of objects to an aggregate dataset in accordance with the processing operations from .",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Pseudo Code Segment for Conversion"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BA)",". . . "]},{"entry":[{},"BB)","dataSet = new Table( )"]},{"entry":[{},"BC)","InfoArray typeOfObject ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typeof(objectCollection.getRepresentativeObject( ))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BD)","propertyInfoArray properties ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typeOfObject.GetProperties(\u201cpublic\u201d, \u201csimple\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BE)","foreach (property in properties)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BF)","dataSet.AddColumn(property.propertyType( ))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BG)","endforeach"]},{"entry":[{},"BH)","foreach (object in objectCollection)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BI)","(if not first object dataSet.AddNewRow( ))"]},{"entry":[{},"BJ)","foreach(property in properties)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BK)","dataSet[row= object, column= property] ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"objectCollection.getValue( . . . )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BL)","endforeach"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BM)","endforeach"]},{"entry":[{},"BN)",". . ."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 4","FIG. 1"],"b":["162","160","150","402","402"]},"In processing operation , the report server retrieves a report schema corresponding to the report identifier. Using this report schema the report server queries the dataset in processing operation . Also in operation , the report server then processes and formats the report per the report schema. In some cases of processing the data the report server can re-organize data, transform data, or generate new data, e.g., sums or percentages. In processing operation  the report server returns the report.","The processing operations described in  are in contrast to the normal pull operation of a report server. In a pull operation an application or a user requests a report from a report server. The report server retrieves the report from a cache, or generates the report content\u2014that is, executes a query against the data source(s) to get a snapshot of data. The report and its data are therefore pulled from the report server. The report server can query a data source with the use of a data source management system, such as the DBMS module  shown in , to access a data source(s), not shown.","In accordance with an aspect of the invention, the processing operations described in  are push operations. The data for a report is pushed to the report server. In an embodiment, the report server can perform a normal pull operation, in addition to serving a push operation, by querying a data source to retrieve additional data.","In an embodiment, an application is programmed for use in commerce, e.g., a store. Consider a system for managing a store. The system processes orders and creates associated reports. These reports include: sales reports catalogs, invoices, receipts, quotations, packing slips, product specific information (e.g., instruction, material safety data sheets), and the like. In programming such systems, the programmer is not always concerned with the ease in which the application interfaces with a database. For example in ecommerce, the programmer is often preoccupied with creating an application that presents the store to customers (i.e., the storefront). Conversely, the application programmer could be preoccupied with creating a system that fulfils requirements other than reporting.","For example, an application programmer may want to create an application for a book store. The user of the application is the proprietor of the book store. The proprietor may want to provide a report, such a quotation, to a customer. For example, a customer may want a quotation on the following books:\n\n","The application programmer would have developed a system that can provide the required reporting functionality. The application programmer may use an object to represent a book, bookObject. For example, bookObject may have the following pseudo code.",{"@attributes":{"id":"p-0056","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Pseudo Code for Instance of bookObject"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CA)","{ . . . "]},{"entry":[{},"CB)","Author = Haruki Murakami (string)"]},{"entry":[{},"CC)","Title = Norwegian Wood (string)"]},{"entry":[{},"CD)","Other title = Noruwei no mori (string)"]},{"entry":[{},"CE)","Translator = Jay Rubin, Random House (string)"]},{"entry":[{},"CF)","Format = Paperback (enumerated type)"]},{"entry":[{},"CG)","Pages = 304 (integer)"]},{"entry":[{},"CH)","Publisher = Vintage (string)"]},{"entry":[{},"CI)","Published = 1987; Reissue edition (September 12, 2000)"]},{"entry":[{},{},"(composite object)"]},{"entry":[{},"CJ)","Language = English (enumerated type)"]},{"entry":[{},"CK)","ISBN = 0375704027 (integer)"]},{"entry":[{},"CL)","Dimensions = 8.0 \u00d7 5.2 \u00d7 0.7 inches (composite object)"]},{"entry":[{},"CM)","Weight = 9.1 ounces (composite object)"]},{"entry":[{},"CN)","Price = US$10.74 (composite object)"]},{"entry":[{},"CO)",". . . }"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In an embodiment of the present invention a collection of bookObjects can be used to create a report, e.g., quotation by transforming a collection of objects into an aggregate dataset and pushing them to a report server. An example of a quotation generated from bookObjects associated with the books given above is shown in . Therein,  is a report generated by the application and given by the proprietor to a customer. The details of each person are displayed in header . Three books are included in the quote ,  and . Not all data from the corresponding bookObject is displayed in quotation . This can be a result of formatting, e.g., Publisher, or because the bookObject uses a composite object for the data, e.g., Dimensions. A price is listed on the bottom line .","An embodiment of the present invention relates to a computer storage product with a computer-readable medium having computer code thereon for performing various computer-implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention, or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer-readable media include, but are not limited to: magnetic media such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute program code, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer code include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hardwired circuitry in place of, or in combination with, machine-executable software instructions.","The foregoing description, for purposes of explanation, used specific nomenclature to provide a thorough understanding of the invention. However, it will be apparent to one skilled in the art that specific details are not required in order to practice the invention. Thus, the foregoing descriptions of specific embodiments of the invention are presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed; obviously, many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, they thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the following claims and their equivalents define the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["The invention is more fully appreciated in connection with the following detailed description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
