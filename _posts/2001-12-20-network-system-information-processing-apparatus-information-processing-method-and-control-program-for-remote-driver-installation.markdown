---
title: Network system, information processing apparatus, information processing method, and control program for remote driver installation
abstract: There is a problem of making it possible to set up a driver with a simple operation when a driver for a peripheral device on the network is not installed. When a driver setup instruction is given, an instruction is sent to the specified PC to perform an operation to set up the driver specified by the user, and the information processing unit performs the operation to set up the driver based on the instruction. For example, when the peripheral device is a printer, the information processing unit determines whether or not the setup operation has been completed normally, and if the driver has been correctly installed, test printing is executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07743374&OS=07743374&RS=07743374
owner: Canon Kabushiki Kaisha
number: 07743374
owner_city: Tokyo
owner_country: JP
publication_date: 20011220
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to a network system, an information processing unit, an information processing method, and a control program, and relates to those for displaying and managing information processing units and peripheral devices shared on a network.","2. Related Background Art","In recent years, with the spread of personal computers (hereafter referred to as PCs), printers, scanners, digital cameras, and the like, networks such as LAN are coming to be used widely. Thus, needs for sharing a printer, a modem, a scanner, and the like on a network are also growing. Also, numerous drivers for using those peripheral devices, as well as their installing methods have been provided.","One installing method is to perform installing or version upgrading of a driver on a client unit based on an instruction from the client unit, the printer driver being stored in a specific directory of a server unit connected to the client unit via a network. Also, there is a technique in which a driver is downloaded by a pull from a client unit, which having been notified of updating of the driver stored in predetermined server unit, by the client requesting the driver in the server unit to be sent.","Though this is not about distribution of drivers, in the field of data distribution, a technique is also known in which data distribution is performed by a push without waiting for a request from a client unit when there is updating of data on a data distribution server unit.","In order to make peripheral devices available it is necessary to install drivers corresponding to respective devices. For example, in newly making a device available for a client unit, it is necessary to newly add a driver. Also, when a driver is already installed, there is an issue of how to perform version upgrading of the driver.","There is also a problem that it is difficult to determine whether the driver has actually been set up normally upon the completion of its installing or version upgrading.","Furthermore, procedures for installing drivers, upgrading their versions, and setting them up are different from driver to driver. It is also necessary to select a driver type according to the environment for the device and the client unit, complicating the operation. According to the prior art, there is a problem that the working efficiency is very low as it is necessary to perform complicated work on the side of client setting up drivers, such as adding and modifying of drivers based on instructions from the client unit.","Furthermore, in recent years, as network systems are expanding in scale, there are more occasions to set up drivers, installing them or upgrading their versions on a plurality of client units on a unit basis. There is a problem that workload becomes heavier if complicated procedures are to be performed for installing drivers, upgrading their versions, or setting them up on client units.","The present invention has been devised in view of such problems. In an embodiment of the invention, the object is to provide a scheme that alleviates the workload in setting up information, allowing driver information for a client unit to be set up with a simple operation.","A further object is to provide a scheme in a printing system comprising a plurality of client units for accomplishing driver install operations in accordance with the setup status of each client unit on which a driver is to be installed so that the user of each unit can perform the install operation without paying attention to the setup status of the driver.","A further object is to provide a scheme for performing driver set up by carrying out push install from the server unit onto the client unit without waiting for a request from the client unit so that a complicated install operation would not be required at the client unit.","A further object is to provide a scheme for executing test printing after the completion of driver information install in order to check if the setup of driver information has been completed normally.","When the problems described above are solved according to the invention, a further problem arises, which is as follows; the workload is heavy for checking the operation of each client unit to see whether or not driver information has been set up on a plurality of client units correctly after installing a driver on the client units at a time by push install. Therefore, in one of the embodiments of the invention, a further object is to have the test printing executed in conjunction with the push install of driver information from the server unit onto the plurality of client units after giving a setup instruction so that the peripheral device can be checked to see whether or not it has been set up correctly.","In order to achieve at least one of the above described objects, in the embodiments of the invention, the following configuration will be disclosed.","For example, an information processing unit in communication with client units is disclosed, the information processing unit comprising unit managing means for managing at the client units the setup status of the driver for a peripheral device connected to the client units, and transmission controlling means for controlling operations to send a plurality of client units driver information corresponding to the client units based on the setup status.","In addition, an information processing unit in communication with a plurality of client units is disclosed, the information processing unit comprising determining means for determining a plurality of client units on which driver information is to be installed, and transmission controlling means for controlling distribution of driver information that controls a peripheral device connected to the client units to the plurality of clients determined by the determining means.","In addition, an information processing unit in communication with a peripheral device and a server unit is disclosed, the information processing unit comprising recognizing means for recognizing a setup instruction and driver information from the server unit, and program managing means for installing on the client units driver information for controlling the peripheral device in response to recognizing the setup instruction without requesting the server unit for a setup instruction.","In addition, an information processing unit in communication with a server unit and a peripheral device is disclosed, the information processing unit comprising program managing means for setting up a driver based on a setup instruction for the driver of the peripheral device from the server unit, and causing generation of an instruction to have the peripheral unit execute test printing to check if the setup has been completed normally.","In addition, an information processing unit in communication with client units is disclosed, the information processing unit comprising determining means for determining client units on which a driver is to be set up, and transmission controlling means for controlling operations to send the client units an instruction to set up a driver for said client units as well as an instruction to have the client units execute test printing to check if the driver setup for the client units has been completed normally.","In the following, embodiments of a network system, an information processing unit, an information processing method, a control program, and a computer readable medium will be described with reference to the drawings.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 1","b":["1","1"]},"Reference numeral  denotes a CPU (Central Processing Unit). Reference numeral  denotes program memory (hereafter referred to as PMEM), which appropriately selects\/reads a program for a processing described below from a hard disk , and executes it on the CPU . Data input from a keyboard  is also stored as code information in the PMEM serving as text memory as well.","Reference numeral  denotes a communication control unit, which controls data input and output at a communication port . A signal output from the communication port  travels through a communication line  to ports on other units (denoted by reference numeral  in ) in the network. Interaction with a printer, a scanner, and the like shared on the network is performed through this communication control unit . In the present embodiment, while the invention is described with reference to a network such as LAN, needless to say, it is applicable also to a case where the communication port  and the communication line  connected to this communication control unit  constitute a common public network.","Reference numeral  denotes an external storage device control unit. Reference numerals  and  denote disks for data files. Thus, for example, the disk  is a floppy disk FD, and the disk  is a hard disk HD. A driver install module is stored in the HD  of the client unit, and an installer for setting up a driver on the client unit is installed on the HD  of the server unit. Each program is loaded from the HD  of each unit to PMEM as necessary, and executed at CPU .","Reference numeral  denotes an input control unit (input controlling means), to which input devices (input means) such as the keyboard  and the mouse  are connected. A user can give operational commands and the like by operating the keyboard . The mouse  serves as a pointing device PD for specifying and manipulating image information on a CRT , allowing a cursor to be moved on the CRT  in any direction on the X and Y axes so that a command icon to give an instruction for processing can be selected, a target for editing and a position for drawing can be specified, and inputting of a GUI command and the like can be executed. For example, when a user presses down on a certain part of the PD, having placed the cursor on a certain position on the screen with the PD, the driver install module installed on this unit performs operations, such as issuing various commands, in response to this input. The driver install module is a preferred exemplary transmission controlling means, and in response to a certain command, the OS can control the communication control unit, operating it to transmit desired information and so on.","Reference numerals ,  and  denote video image memory (VRAM), a display output control unit, and a CRT (Cathode-Ray Tube) respectively. Data displayed on the CRT  will be expanded as bitmap data on the VRAM .","Reference numeral  denotes a printer control unit, controlling data output to a printer  connected to the unit. Reference numeral A denotes an image reading device control unit, controlling a image reading device B connected to the unit.","A hard disk  and a floppy disk  may also be used to store the programs stored in the PMEM  in the present embodiment. Further, the programs may also be stored in other units connected to the network.","In the following, cases where drivers for peripheral devices are set up will be described with reference to .  is a flow chart showing the processing of setting up a driver. First, in step S, a server unit, which is a preferred exemplary information processing unit, obtains the connection status information for the PCs and the peripheral devices in the network by means of a device managing module (device managing means) in the server unit, and stores the information. The peripheral devices, for example, include a inkjet printer, a digital camera, a copy machine with a printer function, and the like.","Next, in step S, the server unit obtains and recognizes information indicating the setup status of peripheral devices for each PC. The drivers for peripheral devices include those for a printer, a scanner, a digital camera, a FAX, and the like. As a method of obtaining setup status information, for example, on each PC, a module (device managing means) that obtains driver information installed on its own machine can be envisioned so that when invoked, it communicates with peripheral devices and other PCs, collects information, and communicates the information via the network. The driver information includes, for example, device drivers for controlling peripheral devices, and the driver setup status of peripheral devices includes registered names of registered peripheral devices, names of drivers for operating these peripheral devices (driver names registered with the system), driver version information, driver module names, and the like. A device name is a preferred exemplary printer identification information. A driver name is a preferred exemplary driver identification information. For example, printer and driver names include identifiers such as numerals and symbols that are not character strings and that can be recognized by an information processing unit.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 3","b":"2000"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 4","b":["401","402","403"]},"Reference numerals to denote icons representing respective functions to be performed by operating PCs and peripheral devices at the toolbar . For example, the icon is one for executing a copy function to read image data from a selected scanner and output the image data to a selected printer. The icons , , , , , and are respectively those for executing a FAX function, an image data reading function, an image data reading function with OCR processing, a function to manage FAX receive data and distribution data, an information updating function, and a function to terminate updating.","Reference numerals to denote icons representing PCs and peripheral devices shared on the network. These icons to are displayed in different forms according to device types such as \u201cPC\u201d, \u201cprinter\u201d, \u201cscanner\u201d, and \u201cFAX modem\u201d, or device status such as \u201cprocessing\u201d, and \u201cerror has occurred\u201d. The icon is one that represents a user's own machine, while the icon is one representing the domain where the user's machine is logged on. Since a user's own machine is a special one, it is displayed distinctly from other PCs.","Also, icons such as the icon representing PCs and peripheral devices which are shared on the network, but on which drivers are not installed, are displayed in gray. Also, icons such as the icons and with connected devices, which nevertheless are not displayed in expansion, are displayed with \u201c+\u201d marks, while those such as the icon displayed in expansion are displayed with \u201c\u2212\u201d marks. Those having no connected devices such as the icons and bear no marks.","In this manner, the connection states, and furthermore status of all the PCs and peripheral devices in the network can be checked on the screen. In this example, because of the limited space on the screen, not all the icons are displayed. But, it is possible to see the existence of all the PCs and peripheral devices using the scroll bar located at the side of the screen.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 5","b":["501","502","503"]},"Reference numerals to denote icons representing respective functions to be performed by operating PCs and peripheral devices at the toolbar . What is involved is similar to the cases of icons A to shown in . Reference numerals to denote icons representing PCs and peripheral devices shared on the network. There, driver information for peripheral devices is displayed, allowing the user to see it.","Returning to the flow chart in , in step S, the installer in the install server unit determines whether or not to set up a driver for a peripheral device. For example, the printer in  can be selected and a driver setup instruction can be given through the menu. Here, if no driver setup instruction is given, the processing is terminated.","If a driver setup instruction is given, the processing proceeds to step S, where a screen is displayed for letting the user specify the driver to be set up.  shows an exemplary screen for selecting a driver to be set up. There, the user specifies a target printer by selecting the manufacturer. The user can also specify the folder in which setup information is located.","Further, in step S, the installer (selection indicating means) in the install server unit selects and indicates client units on which a driver is to be set up based on input from a pointing device (PD) such as a mouse.  shows an exemplary screen for selecting client units on which a driver is to be set up. There, domains and client units can be selected. A plurality of client units can be selected here.","If an OK is indicated through a PD and the like, the installer (determining means) in the install server unit proceeds to step S, where it determines whether or not it is necessary to set up the specified driver on each one of the specified client units based on driver information from respective client units. If there is no necessity for the setup such as, for example, when the specified driver is already installed, the installing will not be performed.","If there is a need for setup, the installer in the install server unit proceeds to step S, where it controls the OS to send an instruction for performing a setup operation for the driver specified in step S on the client units determined by the installer as requiring setup, the determination being made among those client units specified in step S. Here, the installer in the install server unit, if it determines that there are a plurality of client units requiring setup, controls the OS to send driver information to the plurality of client units. Then, the driver setup operations are performed based on that instruction. The setup instruction includes a driver setup instruction structure as well as a setup specifying command.  shows an exemplary driver setup instruction structure contained in a driver setup instruction. The structure consists of a device type, a driver name, version information, an output port, setup information and the like. Here, the setup information may be sent together with this structure, or it may be stored in a folder shared on the network, specifying the pathname.","Then, in step S, the installer in the install server unit determines whether or not the driver setup operation has been terminated normally. In one determination method, the determination will be made based on whether or not the install operation has been performed normally, as well as on whether or not the driver operates normally in actual use. For example, a message for a normal termination may be sent to the client unit that gave a setup instruction when a driver has been installed normally, allowing the normal termination to be confirmed on the screen.","In the case of a printer, whether the driver has been installed normally may be determined by performing test printing and checking the printing result.  shows an exemplary driver setup check printing. In this manner, by printing the name of the output source client that requested the printing, the driver name, and the version information, it is possible to confirm on which client unit the setup operation has been completed normally. In the case of normal termination, the processing is terminated.","If the operation has not been terminated normally, the processing proceeds to step S, and the installer in the install server unit determines whether or not to instruct re-execution for the client units on which a normal termination has not been achieved. If there is an instruction for re-execution, the processing returns to step S, and if there is no instruction for re-execution, the processing is terminated.","As stated above, at the screen on which client units and peripheral devices shared on the network are displayed, if it is found that a driver for a peripheral device is not installed, one can install the driver with a simple operation, and also check if it has been successfully installed, thus greatly improving work efficiency in the network.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 39","FIG. 1"],"b":["381","382","383","385","386","360","385","386","381","383"]},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 32","b":["385","385","385","385"]},"First, in step S, the installer in the install server unit  determines whether there is an instruction for remotely installing a driver on respective client units in step S. In the remote install instruction, for example, when the user operates the mouse  of the keyboard , referring to a graphical user interface displayed on the CRT of each client unit in , a setup instruction is input in the input control unit  in response to that operation. Then, if the installer in the install server unit  determines that there is no instruction for remote installing, it terminates the processing. If remote installing is to be performed, the installer in the install server unit  proceeds to step S. If the installer in the install server unit  determines that there is an instruction for remote installing in step , it proceeds to step S to create driver setup information for the driver to be remotely installed. The driver setup information includes information that has been collected in advance and managed by the device managing module (device managing means) in the install server unit, such as, for example, a driver name as exemplary identification information for the driver to be installed, a driver version number as preferred exemplary information to show a driver version, a printer name as preferred exemplary device identification information, an output port name, a module for making a port available, and a driver setup instruction. A printer name is a registration name to be registered with a registry and the like on the OS of each client unit.  shows an exemplary screen for setting driver information.","Reference numeral  denotes a printer name specifying unit. At the printer name specifying unit , a printer name to be registered with each client unit can be selected or entered. The printer name specifying unit  may also allow a plurality of printers searched in the network to be specified there. Next, reference numeral  denotes a port specifying unit. At the port specifying unit, a port can be added by pressing down on the port addition specifying unit. FIG.  shows how logical ports corresponding to an IP address and lpr are created, the IP address being information to indicate the location of a printer in the network, and the lpr being a printing protocol specified to be used lpr is a traditional print managing program developed with OSs of the BSD family, but other print managing programs may be used. Reference numeral  denotes a driver specifying part, which is for specifying a driver to be installed on each client unit. By operating the driver addition specifying unit , a driver can be specified.","The forgoing is an example of port creation for the case where TCP\/IP and lpr are used to have a network printer process a printing job. A port can be created for a local printer as well. For example, in the case where a local printer for a client unit is configured, a COM port and LPD port may be specified, and setup status information may be created accordingly.","It is also possible to configure a port to represent printing via a print server. For example, if the print server name for the print server  is \u201cSVPC1\u201d, and the printer name for the printer  is \u201cLASER950\u201d, by specifying \u201c\u00a5\u00a5SVPC1\u00a5LASER950\u201d as a port, a port is set to have the LASER950 process a printing job with the SVPC1 as the print server.","In the processing describe above, the install server unit  is automatically determining OS types and OS versions based on information for respective client units collected in advance and stored in the install server unit . However, when the OSs installed on respective client units cannot be automatically determined, the graphical user interface shown in  may be modified so that the user can specify OS types and versions as well as CPU architectures prior to the generation of setup information by the installer in step S.","Next, the processing proceeds to step S, where as shown in  the installer (selecting means) in the install server unit  selects a client unit on which a selected driver is to be installed. It is also possible to select a plurality of client units at a time. Once client units for installing are selected, the installer (determining means) in the install server unit  determines the selected PCs, and performs the processing in step S. Then, the installer in the install server unit  makes a setting either to execute or not to execute test printing at the completion of driver install on respective client units. If the installer in the install server unit  does not make a setting to execute test printing, the process proceeds to step  and it performs the processing of step S. If the installer in the install server unit  makes a setting to execute test printing, it makes the OS or the printer driver generate test print instruction information and have the information additionally stored in the setup information.",{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 34"},"In step S, the installer in the server unit (determining means) determines a specified client unit(s), controls the OS to send the determined client units the setup information set in the above described process and the driver to be installed as driver information, and then terminate the processing.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 37","b":["371","377","371","391","376","376","371","371","374","375","372","376","376","371","374"]},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 35","b":["305","305"]},"Here, the driver install module is assumed to always reside in client units. The driver install module is waiting for an instruction from the install server unit . The driver install module may be invoked in response to an invoking command in a remote setup instruction from the install server unit , making the module start an install operation automatically. Preferably, the driver install module will be remotely invoked using SOAP (Simple Object Access Protocol), which is an example of RPC. Alternatively, each client unit may receive a reboot command from the install server unit . Each client module may be configured to invoke the driver install module upon rebooting of each client unit so that the driver install module executes a setup instruction after the rebooting. Compared to the case where the driver install module is always resident in the client, this allows resources such as RAM to be utilized more efficiently, and also allows security to be enhanced.","In the following, processing at the driver install module will be described.","First, in step S, the driver install module (recognizing means) recognizes and determines whether there is an install instruction from the install server unit . If there is no instruction, the install processing is terminated. If there is an install instruction, the processing proceeds to step S. In step S, the driver install module determines whether the output port stored in the setup information is already configured. If the specified output port already exists, the processing proceeds to step S. If the output port does not exist, then the processing proceeds to step S, where the driver install module sets up the specified output port. Specifically, for example, when printing is processed using lpr on TCP\/IP, the driver install module instructs the OS to incorporate a lpr module and creates a corresponding logical port. Here, preferably, a lpr module contained in the setup information created in step S is used. Then, the processing proceeds to step S.","In step S, the driver install module determines whether a driver corresponding to the driver name and version specified for installing is already configured. If the specified driver is already configured, the processing proceeds to step S. If the specified driver is not configured, then the processing proceeds to step S. In step S, the driver install module (program managing means) executes the installing of a driver. Here, the driver install module controls the install operation by instructing the OS to automatically store in a set storage area in the client unit the body of a program contained in the setup information created in S. When the driver install operation is finished, the processing proceeds to step S.","In step S, whether or not the printer specified for installing already exists is determined. In the present embodiment, names registered with the registry in the OS of each client unit is searched to determine whether or not there is the same name as the printer name about to be newly registered. If the same printer name does not exists, the processing proceeds to step S, and a printer is configured with the specified printer name. In the present embodiment, the driver installer module instructs the OS to register this printer name with the OS registry as a new printer. Then, the driver installer module controls the OS to associate the printer name with a driver. If the printer already exists, then the processing proceeds to step S. Since the OS cannot setup a different printer with the same name, it automatically creates a different printer name, for example, by adding a sub-classification number or the like. Then, the driver installer module controls the OS to perform such configuration as establishment of association between the printer driver and the printer name by the printer name. Then, the processing proceeds to step S, where the driver installer module determines whether or not there is a test printing execution instruction. If there is no test printing execution instruction, the driver installer module terminates the install processing. If there is a test printing execution instruction, the driver install module have the printers on which installing has been completed execute test printing. Specifically, the driver generates a job to output a text that includes the name of the user's own client unit as well as printer and driver names to be printed, sends the job to the printer, and have the printing executed. Alternatively, a printer that generates a text output that includes the name of the user's client unit, a printer name (printing request source), and a driver name sends another printer a recognizable command.","Note that a program constituting the body of a driver is sent as driver information in S. In another embodiment, instead of sending a driver, the install server unit  may send a URL indicating the location within the network of the driver to be installed along with setup information. The driver install module may download the driver from the WEB server  indicated by the URL, and instruct the OS to execute the installing.","In the above described embodiment, setup information is generated merely with a batch setup instruction from the install server , and install operations are performed automatically or semi-automatically at the client units based on that information. This has an advantage of eliminating the necessity for performing a different operation for each device such as the installing, version upgrading, and setting up of a driver, working on each client unit in turn. This has a further advantage of eliminating the necessity for performing for each client unit a complicated operation such as properly selecting the type of the driver depending on the environment of the device or client unit, the version of driver to be newly installed or updated and so on, instructing the client unit to register the specified printer name, and associating a printer to be registered with the driver.","Additionally, according to the embodiment described above, with the enforcement of test printing, the necessity to check the operation of a peripheral device for each client unit is eliminated even when a driver is added or updated at client units, for example, by a service person giving a driver setup instruction for a plurality of client units at the install server unit . For example, there is an advantage that a determination can be made as to whether or not the printing system is configured to allow the printer that has been set up to perform normal printing operations only by checking the test printout output at the printer without checking setting of each client unit. The determination includes the one whether the setup of the drivers for individual clients completed properly, and the one whether the print server operates properly.","In the following, the part that varies from the above described embodiments will be presented.  shows a variation corresponding to S and S in . An operation is shown which is invoked when a driver install module at a client unit proceeds to installing a driver after a port has been set up based on a setup instruction from the install server unit . After this operation, a printer registration operation is invoked.","In this embodiment, if driver updating is selected as an instruction to set up a driver at the install server unit , information for the driver updating instruction will be stored in driver setup information, which represents preferred exemplary information to indicate setup status, and then sent to a client unit from the install server unit.","In S, the driver install module determines if a driver with the driver name specified in the driver setup information exists. If the driver install module determines that a driver with the specified name does not exist, it performs an operation to newly install a driver in S. Specifically, it stores a driver module constituting a driver with the specified driver name in a set storage area of the client unit. On the other hand, if the driver install module determines that a driver with the driver name specified in S exists, then it performs the operation of S. In S, the driver install module determines whether or not the version of the existing driver in the client unit is older than that of the driver specified in the driver setup information for updating. In S, if the driver install module determines that the version of the existing driver in the client unit is older than that of the driver specified in the driver setup information for updating, it instructs the OS to perform a driver updating operation in S. Then, the OS that received the instruction from the driver install module stores the driver module in a set storage area of the client unit, and the processing proceeds to S. On the other hand, in S if the driver install module determines that the version of the existing driver in the client unit is newer than the version of the driver specified in the driver setup information for introduction, then the processing is terminated. In S, the driver install module determines whether or not the previous driver is still left there. If in S the driver install module determines that the module of the driver is no longer left, having been completely overwritten by the new driver, then the processing is terminated. If in S the driver install module determines that part of or the whole of the driver module is still left, then the driver module is deleted, and after the deletion, the processing is terminated.","In the following, the part that varies from the above described embodiments will be presented.  shows a variation corresponding to S in . An operation is shown which is invoked when a driver install module at a client unit proceeds to installing a driver after a port has been set up based on a setup instruction from the install server unit . After this operation, a printer registration operation is invoked.","In S, the installer in the install server unit  searches for a driver name and version information in the client unit by referring to driver setup information, which is preferred exemplary setup status information for peripheral devices managed by a device managing module (device managing means), the information being collected through communication with client units and peripheral devices and stored in the install server in advance. Then, in S, the installer in the install server unit  determines whether a driver with the name specified in the driver setup information is in the client unit. If in S the installer in the install server  determines that a driver with the specified name does not exist, it controls the transmission operation of the OS to make the server unit actively send a driver distribution notice to the client in S. On the other hand, if in S the driver install module determines that there is a driver with the specified driver name, then it performs the operation of S. In S, the driver install module determines whether or not the version of the existing driver in the client unit is older than that of the driver specified in the driver setup information for updating. In S, if the installer (transmission controlling means) in the install server unit  determines that the version of the existing driver in the client unit is older than that of the driver specified in the driver setup information for updating, it controls the distribution operation of the OS by instructing the OS to send a driver distribution notice in S. Having received the instruction from the driver install module, the OS, if it receives an ACK response from the client unit in S, sends the driver information to the client unit S, and then the processing is terminated. If an ACK response is not received from the client unit in S, the installer in the install server unit  indicates an error, and then the processing is terminated. By repeating the above described processing for each PC, a driver can be actively distributed to a plurality of PCs from the server side without any request from the client side.","With the processing described above, deleting and updating of drivers can be accomplished just by giving a setup instruction once, thus greatly reducing the workload for updating drivers. Also, by keeping track of a driver name and version information in the client unit through setup status information, a driver that need to be newly incorporated into the client unit can be selectively distributed.","In the following, with reference to , cases where drivers for peripheral devices are checked, and possibly deleted will be described.  is a flow chart showing processing to check and possibly delete a driver. First, in step S, the connection status information of all the client units and peripheral devices on the network is obtained and stored.","Next, in step S, the setup status information of the drivers installed on the user's machine for peripheral devices is obtained. Drivers for peripheral devices are those for a printer, a scanner, a digital camera, a FAX machine, and the like.",{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 12","b":["301","302","303"]},"Reference numerals to denote icons representing respective functions to be performed by operating PCs and peripheral devices at the toolbar . For example, the icon is one for executing a copy function to read image data from a selected scanner and output the image data to a selected printer. The icons , , , , , , , and are respectively those for executing a FAX function, an image data reading function, an image data reading function with OCR processing, a function to manage FAX receive data and distribution data, a display switching function, a screen display editing function, an information updating function, and a function to terminate updating.","Reference numerals to denote icons representing PCs and peripheral devices shared on the network. These icons to are displayed in different forms according to device types such as \u201cPC\u201d, \u201cprinter\u201d, \u201cscanner\u201d, and \u201cFAX modem\u201d, or device status such as \u201cprocessing\u201d, and \u201cerror has occurred\u201d. The icon is one that represents a user's own machine, while the icon is one representing the domain where the user's machine is logged on. Since a user's own machine is a special one, it is displayed at the top to distinguish it from other PCs. Other PCs are displayed in ascending or descending alphabetical order.","Also, icons such as the icon representing PCs and peripheral devices which are shared on the network, but on which drivers are not installed, are displayed in gray. Also, icons such as the icon with connected devices, which nevertheless are not displayed in expansion, are displayed with \u201c+\u201d marks, while those such as the icon , , displayed in expansion are displayed with \u201c\u2212\u201d marks. Those having no connected devices such as the icon bear no marks.","In this manner, the connection states, and furthermore status of all the PCs and peripheral devices in the network can be checked on the screen. In this example, because of the limited space on the screen, not all the icons are displayed. But, it is possible to see the existence of all the PCs and peripheral devices using the scroll bar located at the side of the screen.",{"@attributes":{"id":"p-0125","num":"0124"},"figref":["FIG. 13","FIG. 12"],"b":["303","303","303"],"i":["i ","h","i "]},"Returning to the flow chart in , in step S, whether or not to check drivers for peripheral devices is determined. For example, a driver checking instruction can be given by selecting devices to be checked, with a screen as shown in  being displayed. On this screen, one can also set whether or not to display a message when a driver is determined unnecessary during the checking, with a corresponding device not being found. If there is no driver checking instruction, the processing is terminated.","If there is a driver checking instruction, the processing proceeds to step S, where a determination is made as to whether all the drivers targeted for checking have been checked. If all the drivers have been checked, then this processing is terminated.","If not all the drivers have been checked, the processing proceeds to step S, and a determination is made as to whether or not drivers to be checked have been set for delete protection. For example, when checking is performed on a routinely used printer, it would be inconvenient for the user if the driver were to be deleted as not having a corresponding device just because the power supply happened to be turned off, requiring the user to install the driver again afterward.","Therefore, drivers that should not be deleted are allowed to have a delete protection setting.  shows an exemplary screen for setting delete protection for a driver. There, a delete protection setting can be made by selecting drivers to be protected and adding them to the registration on the protection list. On the other hand, it is also possible to select drivers to be taken off from the delete protection to delete them from the protection list.","In step S, if the protection is on, the processing returns to step S, where the next driver is checked. If it is not protected, the processing proceeds to step S, where a determination is made as to whether or not there is a device corresponding to the driver. For example, in the case of a printer, the determination is made by a query to the output port to see if there is any response. In the case of a scanner and the like, checking is performed by a similar operation on the input port. If there is a target device, the processing returns to step S, where the next driver is checked.","If there is no target device, then the processing proceeds to step S, where a determination is made as to whether or not to display a delete message. This determination will be made based on the information set in step S. If there is a setting to display a message, the processing proceeds to step S. If there is a setting not to display a message, the processing proceeds to step S.","In step S, a message is displayed prompting the user to indicate whether or not to execute the deletion.  shows an exemplary message to be displayed when a driver to be deleted is found. With a target driver being displayed in this manner, the user indicates whether or not to delete it. If \u201cYES\u201d is indicated, the processing proceeds to step S. If \u201cNO\u201d is indicated, the delete operation is cancelled, and the processing returns to step S, where the next driver is checked.","In step S, the delete operation for the specified driver is executed. After the operation, the processing returns to step S, where the next driver is checked.","In a flow chart shown in , while driver checking is performed at a computer provided with a device in a sharing configuration, cases where an instruction to delete a driver is given at a computer provided with a device in a sharing configuration may also be envisioned.  show flow charts for cases where an instruction to delete a driver is given at a computer provided with a device in a sharing configuration.","First, steps S and S represent operations similar to those represented by steps S and S. In step S, whether or not all the installed drivers have been checked is determined. If all the drivers have been checked, this processing is terminated.","If not all the drivers have been checked, the processing proceeds to step S, where a determination is made as to whether the device corresponding to the driver is a local device or whether it is a device shared on the network. If it is not a local device, the processing returns to step S, where the next driver is checked.","If it is a local device, the processing proceeds to step S, where a determination is made as to whether or not there is a device corresponding to the driver. The method of determination is similar to the one in step S. If there is a device corresponding to the driver, the processing proceeds to step S.","If there is no device corresponding to the driver, the processing proceeds to step S, where a determination is made as to whether or not that driver has a sharing configuration. If it does not have a sharing configuration, the processing proceeds to step S.","If it has a sharing configuration, the processing proceeds to step S, where other computers are notified of the fact that the target device has been disabled through the network, and the processing proceeds to step S.  shows an exemplary information structure for notifying driver deletion, the structure carrying such information as a device type, a driver name, version information, and an output port.","In step S, whether or not the target driver is set for delete protection is determined. The method of determination is similar to the one in step S. If it is set for delete protection, the processing returns to step S, where the next driver is checked.","If it is not set for delete protection, the processing proceeds to step S, where a determination as to whether or not to execute the deletion is determined. The method of determination is similar to the one in step S. If the driver deletion is cancelled at this point, the processing returns to step S, where the next driver is checked.","If the execution of the driver deletion is indicated, the processing proceeds to step S, where the operation to delete the driver is executed, and after the operation is completed, the processing returns to step S, where the next driver is checked.","In step S, whether or not the sharing configuration for the target driver has been cleared is determined. If the sharing configuration for the target driver has not been cleared at this point, the processing returns to step S, where next driver is checked.","If the sharing configuration for the target driver has been cleared, the processing proceeds to step S, where other computers are notified of the fact that the target device has been disabled through the network.","A computer receiving a driver deletion notice as described above in turn, first, determines whether or not it has received a deletion notice in step S as shown in . If it has not received a notice, the processing is terminated.","If it has received a notice, the processing proceeds to step S, where a determination is made as to whether or not there is a driver corresponding to the driver deletion notice. If there is no corresponding driver, the processing is terminated.","If there is a corresponding driver, the processing proceeds to step S, where a determination is made as to whether or not the target driver is set for delete protection. The method of determination is similar to the one in step S. If it is set for delete protection, the processing is terminated.","If it is not set for delete protection, the processing proceeds to step S, where a determination is made as to whether or not to display a message. If there is no setting to display a message, the processing proceeds to step S. If there is a setting to display a message, the processing proceeds to a step S, and a message is displayed.","Then, if the deletion is not indicated in step S, the processing is terminated. If the deletion is indicated, the processing proceeds to step S, where the target driver is deleted, and then the processing is terminated.","As stated above, at the screen on which client units and peripheral devices shared on the network are displayed, when a peripheral device shared on the network is disabled by deletion or by clearing of the sharing configuration, one can easily uninstall the driver that has become unnecessary with a simple operation. Also, when a driver for a peripheral device with a sharing configuration is deleted, or when the sharing configuration is cleared, by informing other computers, the driver that has become unnecessary can be deleted. With these features, work efficiency on the network can be greatly improved.","In the following, cases are described where version upgrading for the driver of a peripheral device is performed with reference to .  is a flow chart showing processing for upgrading the version of a driver. First, in step S, the connection status information of all the client units and peripheral devices on the network is obtained and stored.","Next in step S, the setup status information of the drivers in each client unit for peripheral devices is obtained. Drivers for peripheral devices are those for a printer, a scanner, a digital camera, a FAX machine, and the like. As a method of obtaining setup status information, for example, on each PC, a module that obtains driver information installed on its own machine can be envisioned so that when invoked, it collects information and communicates the information via the network.",{"@attributes":{"id":"p-0153","num":"0152"},"figref":"FIG. 21"},"In step S, the connection status information of all the client units and peripheral devices in the network is displayed based on the obtained information. Since this screen display is already described in relation to , it will not be described in detail.",{"@attributes":{"id":"p-0155","num":"0154"},"figref":"FIG. 22"},"Returning to the flow chart in , in step S, whether or not drivers for peripheral devices have been updated is determined. If drivers have not been updated, the processing is terminated. If the drivers have been updated, the processing proceeds to step S. A method of updating drivers can be envisioned in which drivers are updated on each client unit, registering that driver information with a PC to serve as the server unit. In this embodiment, for the server unit as well as for the client units, PCs as exemplary information processing units are used. Alternatively, another method can be envisioned in which the user registers the newest drivers after downloading them from sites of their respective manufacturers. Furthermore, checking of driver versions may be performed at particular locations on the network specified by the user in advance.  shows an exemplary screen for making settings for driver version checking. By setting a particular URL in advance as shown in the drawing, a setting to perform regular driver version checking can be made, thus obtaining a new version automatically when the driver is updated.","In step S, whether the updated driver is the newest version or not is determined. If it is not the newest version, the processing is terminated since there is no need to send an updating notice. If it is the newest version, then the processing proceeds to step S. A method of determining a driver version can be envisioned in which the determination is made based on the driver information for each printer managed by the server unit.  shows an exemplary structure in which a version is managed for each driver. It consists of a device type such as \u201cprinter\u201d or \u201cscanner\u201d, a device driver name, the number of version information items being managed, driver version information, and corresponding driver information. A determination is made by comparing the version information being managed to the version information for the updated driver.","In step S, whether or not there is a client unit using the updated driver is determined. The determination is made using a driver device information structure obtained from each client unit. If no target client unit is found at this point, the processing is terminated. If target client units are found, the list of target client units is displayed.  shows an exemplary screen for selecting client units on which a driver is to be updated. If \u201cOK\u201d is selected there, after selecting target client units, the processing proceeds to step S, where a notice is sent to the selected target client units. Also, if the user selects \u201call the target PCs\u201d, all the target client units will be selected.","In step S, the selected target client units are notified of the fact that a driver is updated.  shows an exemplary information structure for a device updating notice. This structure consists of a device type, a driver name, version information, and an output port.","The processing proceeds to step S, where a determination is made as to whether or not there are requests to obtain the driver information from the client units that have been notified. If there are no requests or if there are responses from the clients that there is no need for sending the driver information, the processing proceeds to step S. If there are requests, the processing proceeds to step S, where the driver requested information is sent to requesting clients.","In step S, whether responses have been received from all the client units notified is determined. If responses have been received from all the client units, the processing is terminated. If responses have not been received from all the client units yet, the processing returns to step S.","Turning now to , it shows a flow chart for processing in the client. First, in step S, whether or not there has been a driver updating notice from the server unit is determined. If no notice has been received, the processing is terminated.","If a notice has been received, the processing proceeds to step S, where a determination is made as to whether or not to update the driver. For example, a method can be envisioned in which the user gives an instruction, the receiving of a driver updating notice being indicated by a message.  shows an exemplary message to notify that a driver has been updated. If \u201cNO\u201d is selected there, the processing is terminated, notifying the server unit that the target driver information is not necessary. If \u201cYES\u201d is selected, the processing proceeds to step S, where a request for the target driver information is made to the server unit.","Next, in step S, whether the driver information has been obtained or not is determined. If it has not been obtained, the processing returns to step S, where the request for acquisition is repeated to the server unit. If the driver information is obtained, the processing proceeds to step S, where the driver updating operation is performed. Then, after informing the server unit of the newest driver install status in step S, the processing is terminated.","While in the flow charts shown in , the selection of client units to be notified is performed at the PC serving as the server unit, a case may also be contemplated where a driver updating operation is performed based on a determination of the status of the driver installed on the user's PC serving as a client unit.  shows a flow chart where a driver updating operation is based on a determination of the status of the driver installed on the user's PC serving as a client.","Steps S to S in  are similar to steps S to S. Then, in step S, after notifying all the client units of the fact that a driver has been updated, the processing is terminated. Also, the information structure to be notified is as shown in .","Then, a request from a client is processed in accordance with the flow chart shown in . First, in step S, whether or not there is a request for driver information is determined. If there is no request, the processing is terminated.","If there is a request, the processing proceeds to step S, where requested driver information is read from the driver information being managed. Then, in step S, the driver information is sent to requesting clients.","At the client, the processing proceeds in accordance with the flow chart shown in . This flow chart is approximately the same as the flow chart shown in , with step S and steps S to  corresponding to steps S to S described with reference to . Only a determination involved in step S is different.","In this step S, if a driver updating notice is received from the server unit, necessary data is read from the driver updating notice structure, and by comparing the data with the information for the driver installed on the user's machine, whether a driver corresponding to the notice exists or not is determined. If the target driver is not found, the processing is terminated ignoring this notice. If the target driver is found, the processing similar to the one shown in  is performed.","As described above, at the screen on which client units and peripheral devices shared on the network are displayed, when a driver for a peripheral device is updated, one can perform the processing for updating the driver with a simple operation. Also, since only a driver updating information notice need to be sent to each client unit in determining whether or not to perform the processing for updating a driver, traffic on the network can be reduced to the minimum. These features allow work efficiency on the network to be greatly improved.","A case where various devices are operated according to a program stored in a computer (CPU or MPU) of a unit or system also falls within the scope of the invention, the program code for implementing the features of the above described embodiments being supplied in software to the computer of the unit or system, and the computer being connected to the various devices to operate them in a manner to implement the features of the above described embodiments.","In this case, it is the above described software program code itself that implements the features of the above described embodiments, the program code itself and means for providing a computer with the program code such as, for example, a storage medium storing such program code constituting the invention. For a storage medium for storing for storing such program code, for example, a floppy disk, a hard disk, optical disk, magneto-optical disk, CD-ROM, magnetic tape, a non-volatile memory card, and ROM can be used.","In addition to the case where the features of the above described embodiments are implemented by the execution of program code supplied to a computer, needless to say, the invention also includes a case where the features of the above described embodiments are implemented by the program cooperating with an OS (Operating System), other application software, or the like running on the computer.","Needless to say, the invention further includes a case where the features of the above described embodiments are implemented by a CPU or the like provided on a feature expansion board or unit executing part or the whole of processing based on instructions of program code, the supplied program code being stored in memory provided on a feature expansion board or unit of a computer.","The form and structure of each part shown in any of the above described embodiments are but examples for illustrating how to implement the invention, and they should not be construed as limiting the scope of the invention. That is, the invention can be implemented in various ways without departing from the spirit or the main features of the invention. As stated above, according to the invention, at the screen on which client units and peripheral devices shared on the network are displayed, if it is found that a driver for a peripheral device is not installed, one can install the driver with a simple operation, and also check if it has been successfully installed, thus greatly improving work efficiency in the network.","According to an embodiment of the invention, at the screen on which client units and peripheral devices shared on the network are displayed, if it is found that a driver for a peripheral device is not installed, the system administrator can remotely install the driver from the server unit with a simple operation, and also check to see if the driver has been correctly installed by having the printer execute test printing, thus improving work efficiency.","As described above, the invention has an advantage of alleviating the workload involved in setting up information by allowing driver information for a client unit to be set up with a simple operation.","In addition, it has an advantage of allowing the user to perform driver install operations without paying attention to the driver setup status of each unit since a driver install operation is performed in a printing system comprising a plurality of client units in accordance with the setup status of each client unit on which a driver is to be installed.","In addition, it has an advantage of eliminating complicated install operations at client units since driver setup is performed by push install from the server unit to the client units without waiting for requests from the client units.","In addition, it has an advantage of making it possible to check whether driver information setup has been completed normally, providing a scheme for executing test printing after installing the driver information."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"p":["Other features and advantages of the present invention will be apparent from the following description taken in conjunction with the accompanying drawings, in which like reference characters designate the same or similar parts throughout thereof.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 13","b":"303","i":"i "},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 32","b":"385"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 33","b":"385"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 34","b":"385"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 35","b":"305"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 36","FIG. 35"],"b":["3504","3505"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 38","FIG. 32"],"b":"3206"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 39"}],"heading":"BRIEF DESCRIPTION OF THE DRAWINGS"},"DETDESC":[{},{}]}
