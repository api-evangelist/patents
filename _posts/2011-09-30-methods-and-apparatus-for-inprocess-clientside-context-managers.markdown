---
title: Methods and apparatus for in-process client-side context managers
abstract: Methods and apparatus for client-side context managers are disclosed. An example apparatus for use in a healthcare information system includes a primary application implemented on a client device in communication with a server; a secondary application implemented on the client device, wherein the primary application is to be initiated before the secondary application can be initiated; and a context manager integrated into the primary application to execute in connection with the primary application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08914485&OS=08914485&RS=08914485
owner: General Electric Company
number: 08914485
owner_city: Schenectady
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE DISCLOSURE","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure relates generally to healthcare information systems and, more particularly, to methods and apparatus for client-side context managers.","Healthcare environments, such as hospitals and clinics, typically include information systems (e.g., electronic medical record (EMR) systems, lab information systems, outpatient and inpatient systems, hospital information systems (HIS), radiology information systems (RIS), storage systems, picture archiving and communication systems (PACS), etc.) to manage healthcare information such as, for example, patient medical histories, imaging data, test results, diagnosis information, management information, financial information, and\/or scheduling information. The information may be centrally stored or divided at a plurality of locations. Healthcare practitioners may desire to access patient information or other information at various points in a healthcare workflow. For example, during surgery, medical personnel may access patient information, such as images of a patient's anatomy, which are stored in a medical information system. Further, healthcare practitioners may enter new information, such as medical history, diagnostic, financial, or treatment information into a healthcare information system before and\/or after a completed medical procedure, analysis, and\/or appointment. Healthcare practitioners often utilize a plurality of applications on a computing platform (e.g., a workstation) to interact with a plurality of information sources across the healthcare information system.","An example apparatus for use in a healthcare information system includes a primary application implemented on a client device in communication with a server; a secondary application implemented on the client device, wherein the primary application is to be initiated before the secondary application can be initiated; and a context manager integrated into the primary application to execute in connection with the primary application.","An example method for use in a healthcare information system includes implementing a primary application on a client device in communication with a server; implementing a secondary application on the client device, wherein the primary application is to be initiated before the secondary application can be initiated; and in response to an initiation of the primary application, executing a context manager as part of the primary application.","An example tangible machine readable medium has instructions stored thereon that, when executed, cause a machine to at least implement a primary application on a client device in communication with a server; implement a secondary application on the client device, wherein the primary application is to be initiated before the secondary application can be initiated; and in response to an initiation of the primary application, execute a context manager as part of the primary application.","The foregoing summary, as well as the following detailed description of certain implementations of the methods, apparatus, systems, and\/or articles of manufacture described herein, will be better understood when read in conjunction with the appended drawings. It should be understood, however, that the methods, apparatus, systems, and\/or articles of manufacture described herein are not limited to the arrangements and instrumentality shown in the attached drawings.","Although the following discloses example methods, apparatus, systems, and articles of manufacture including, among other components, firmware and\/or software executed on hardware, it should be noted that such methods, apparatus, systems, and\/or articles of manufacture are merely illustrative and should not be considered as limiting. For example, it is contemplated that any or all of these firmware, hardware, and\/or software components could be embodied exclusively in hardware, exclusively in software, exclusively in firmware, or in any combination of hardware, software, and\/or firmware. Accordingly, while the following describes example methods, apparatus, systems, and\/or articles of manufacture, the examples provided are not the only way(s) to implement such methods, apparatus, systems, and\/or articles of manufacture.","Healthcare information systems sometimes employ a context management system, such as a Clinical Context Object Workgroup (CCOW) system. While the following description includes examples utilizing CCOW data, the example methods, apparatus, systems, and\/or articles of manufacture disclosed herein can be implemented in connection with any suitable type of context data (e.g., in combination with CCOW data and\/or in isolation). Typically, context data is maintained by healthcare information systems to enable synchronization across disparate applications or programs executed on a healthcare information device (e.g., a medical workstation at a hospital or clinic) being used by a healthcare practitioner (e.g., a physician, a physician's assistant, a nurse, a support staff member, administrative personnel, a member of a billing department, etc.). The CCOW standard, for example, uses a technique referred to as \u201ccontext management\u201d to provide a unified view of information associated with separate and\/or different healthcare applications related to a subject (e.g., a patient, a user, a practitioner, and\/or a healthcare event (e.g., an appointment, test, analysis, trauma, procedure, etc.), a location, etc.). In such instances, when a practitioner enters subject identifying data (e.g., a patient identifier or a user identifier) into a first application (e.g., an admissions program) of a CCOW-enabled system to cause a presentation of information related to the patient in the first application, a second application (e.g., a financial program) of the CCOW-enabled system automatically retrieves its respective information related to the patient and displays the same to the user of the system. That is, context management systems enable efficient cross-application workflows by automatically synchronizing common context subjects (e.g., Patient or User). As a result, the user is spared the trouble of having to log in multiple times and to look up the same subject (e.g., patient) in each application. Further, such a system aides the user in avoiding mistakes arising from the first application displaying information related to a first patient and the second application displaying information related to a second patient on the same screen. In such instances, the user may erroneously reference data related to the first patient in the first application while dealing with the second patient and, therefore, enter or provide the wrong information to a system or person. In other words, the unified view provided by a CCOW-enabled system ensures that a user interacting with multiple applications on a device is presented with the proper information across each of the applications or programs running on the device.","To implement context management, some CCOW-enabled systems utilize a central server to implement a context manager that is accessible by, for example, a healthcare workstation. In such configurations, the healthcare workstation can be referred to as a client machine in relation to the server (e.g., a remotely located server) that implements the context manager.  is a block diagram of an example healthcare information system  in which a context manager  is implemented on a server  remotely located from a client machine or workstation  of a healthcare enterprise . The context manager  can communicate with the client workstation  via a network . The healthcare enterprise  may be any type of healthcare facility such as, for example, a clinic, a physician's office, a laboratory, a testing center, etc. The example healthcare information system  of  may include additional or alternative healthcare enterprises that are configured to share healthcare information. For example, the example healthcare information system  of  may implement an XDS (Cross Enterprise Document Sharing) integration profile to facilitate the sharing (e.g., registration, distribution, access, etc.) of healthcare data among the healthcare enterprises (which are collectively referred to as an Affinity Domain in IHE (Integrating the Healthcare Enterprise) XDS terminology).","In the illustrated example of , the enterprise  includes a healthcare data system  in communication with the client workstation . Generally, the healthcare data system  of  includes one or more information systems and\/or components configured to store, manipulate, analyze, and\/or otherwise process healthcare information. An example healthcare data system is described in detail below in connection with .","The client workstation  includes one or more applications  that provide users access to the information associated with the healthcare data system  and\/or other sources of data. Although the application(s)  are executed on the client workstation , the client workstation  may also utilize one or more virtual applications implemented on a server located remotely from the client workstation . In the illustrated example of , the client workstation  utilizes a virtual application  implemented on a server  (e.g., a Citrix server). The client workstation  can communicate with the virtual application  and\/or the server  via the network . Although shown outside of the healthcare enterprise  in , in some examples the server  and, thus, the virtual application  may be considered part of the healthcare enterprise . For example, the server  and the virtual application  may be on a local network (e.g., the network ) of the healthcare enterprise . The virtual application  provides a particular functionality to the client workstation  without the client workstation  having to execute (e.g., process) the virtual application . That is, the remotely located server  provides additional processing capabilities to the client workstation  by processing the virtual application  on the server  and providing the results of the virtual application  to the client workstation . Thus, the client workstation  employs a mixture of applications ranging from the application(s)  executing on the client workstation  to the virtual application  (and any other additional virtual applications) executing on the server .","In prior art systems such as the system  of  in which the context manager  is implemented on the server-side, certain aspects of firewall protection implemented on the client workstation  and\/or issues with Network Address Translation (NAT) between the client workstation  and the remotely located servers  and\/or  can prevent and\/or complicate the ability of the context manager  to send messages to the local applications. That is, the context manager  and the local applications communicate using application-to-manager messages and manager-to-application messages according to, for example, the Hyper-Text Transfer Protocol (HTTP). When remotely located from the client workstation , the context manager  is restricted, at minimum, from sending manager-to-application messages to the local application(s)  due to firewalls and\/or NAT issues implemented on the client workstation . Additional drawbacks of having the context manager  implemented on the server-side (e.g., on the server ) include the need for additional servers, the context manager  and the application(s) the context manager  supports are subject to a single point of failure configuration, a bottleneck may form at the server , a load balancer may need to be employed for reliability and\/or scalability, the application(s)  are required to make network calls to the context manager , etc.","As a result, some systems implement the context manager on the client-side. Although implementing the context manager on the client-side alleviates the firewall and\/or NAT issues between the context manager and the local applications , the client-side implementation of the context manager creates and\/or involves problems for the virtual application . In particular, the virtual application  is subject to firewall and\/or NAT issues when communicating with a client-side context manager. For example, initiations of message exchanges between the virtual application  and a client-side context manager in previous systems were inhibited by firewall protections and\/or NAT issues at the client device. Thus, in previous systems, the implementation of a client-side context manager hindered the availability of remotely implemented virtual applications (e.g., the virtual application  of ).","Example methods, apparatus, and\/or articles of manufacture disclosed herein enable utilization of virtual applications implemented on a server by a system in which a context manager is implemented on a client device of a healthcare enterprise. That is, example methods, apparatus, and\/or articles of manufacture disclosed herein allow users of a client device or workstation at a healthcare enterprise to deploy a context manager on the client-side while still supporting virtual applications, thereby avoiding the costs and hindrances of a server-side implementation of the context manager. Example methods, apparatus, and\/or articles of manufacture disclosed herein also improve performance of local application of the client device by eliminating the need for the local applications to make network calls to a remote server implementing the context manager. Additional aspects and advantages of the example methods, apparatus, and\/or articles of manufacture disclosed herein are described below.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 2","FIG. 2","FIG. 2"],"b":["200","200","202","202","202","202","204","206","208","210","212","214","216","206","208","210","212","214","216","202","206","208","210","212","214","216","204","210","214","206","214","210","206","216","206","216","206","208","210","212","214","216","204"]},"The example healthcare enterprise  also includes a client workstation . The client workstation  may be any equipment (e.g., a personal computer) capable of executing software that permits electronic data (e.g., medical reports) and\/or electronic medical images (e.g., x-rays, ultrasounds, MRI scans, medical reports, test results, etc.) to be acquired, stored, or transmitted for viewing and operation. The workstation  receives commands and\/or other input from a user (e.g., a physician, surgeon, nurse, or any other healthcare practitioner) via, for example, a keyboard, mouse, track ball, microphone, etc. The example workstation  include one or more application(s)  that facilitate interactions and exchanges with, for example, the healthcare data system  and\/or any other suitable source of data and\/or processing capabilities. In addition to the application(s)  local to the client workstation , the client workstation  utilizes a virtual application  implemented on a server  located remotely from the workstation . In the illustrated example of , the server  is a Citrix server through which the client workstation  can utilize the virtual application  executing on the server . The example client workstation  may access the virtual application  via a network , such as a LAN and\/or the Internet. In some examples, the client workstation  can access the Citrix server using an alternative network (e.g., without traversing the network ).","The example client workstation  also includes a client-side context manager . In contrast to the prior art system  of , in which the context manager  is implemented on the server , the client workstation  of  and the application(s)  thereof are not required to make network calls to the client-side context manager . As described in detail below in connection with , the example client-side context manager  maintains and enhances the ability of the client workstation  to utilize the virtual application  in comparison with previous systems. In previous systems, for virtual applications to communicate with a client-side context manager, client firewalls required opening and network(s) needed additional configuration so that the client-side devices were addressable from the virtual application server, which is especially difficult when the virtual application server is on the Internet and the client devices are on a LAN. In contrast, the example client-side context manager  of  disclosed herein is capable of establishing a connection with the virtual application  in spite of any firewall protection and\/or NAT issues that previously restricted and\/or inhibited establishment of such a connection.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 2","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["228","228","300","302","304","306","228","300","302","304","306","228","300","302","304","306","228","300","302","304","306","228","228"]},"The example client-side context manager  of  enables a connection between the virtual application  and the client-side context manager  such that the context manager  can be implemented on the client workstation  that utilizes the virtual application . That is, the example client-side context manager  of  enables the client workstation  to have the context manager  implemented locally and, at the same time, to readily utilize virtual applications implemented on a remotely located server (e.g., the server  of ). As described above, virtual applications at remote servers of previous systems are sometimes prevented from initiating a connection with a context manager implemented on a client machine due to, for example, firewall protection and NAT issues. However, the example client-side context manager  of  enables the virtual application  to initiate such a connection by providing access to a dedicated location of a file system of the client machine and monitoring that location for an item placed there by the virtual application .","In particular, the example location informer  of  provides the virtual application  with access to a location (e.g., a folder) in a file system  of the client workstation  of . The location or folder is selected and dedicated (e.g., by the context manager ) to the virtual application  and\/or other virtual applications. Additional locations or folders are dedicated to other virtual applications, if any, utilized by the client workstation . In other words, for each virtual application utilized by the client workstation , a location in the file system  is selected for the respective virtual application. Alternatively, a single location (e.g., folder) can be dedicated to multiple virtual applications. In such instances, different file names can be used to write different files, each corresponding to a virtual application, into the single file.","Some services (e.g., Citrix, Microsoft\u00ae RDS) provide a mechanism that allows the virtual application  access to the dedicated folder on the client workstation . Such a mechanism involves mapping a drive letter to the dedicated folder and exposing that drive to the virtual application . The virtual application  can then access the drive using an indicator (e.g., as \\\\tsclient\\Z), which could be a configurable setting that a SDK (Software Development KIT) component or COM component would read from a file.","Thus, in some examples, the location informer  utilizes an SDK component or a plug-in model configured to inform the virtual application  of how to communicate with the dedicated location. In many instances, CCOW-enabled applications use a third party SDK component to handle all messaging. In the illustrated example of , the SDK can be customized, transparently to the user, to include the protocol disclosed herein for finding and utilizing a file location at the client workstation . Additionally or alternatively, the location informer  can provide a CCOW reference to the context manager  to CCOW-enabled applications (e.g., the virtual application ) that can be used to find the context manager . According to the CCOW specification, the CCOW reference can be in the form of a COM (Component Object Model) object or a HTTP URL (Hyper-Text Transfer Protocol universal resource locator). In the illustrated example of , the location informer  provides the COM object to the server  that would encapsulate and mediate access to the dedicated folder. To enable the virtual application  to utilize the dedicated location of the file system , the COM object exposes the virtual application  to an application programming interface (API) (e.g., a standard CCOW API). That is, the COM object mediates access to the dedicated location for the virtual application . The COM object can run in-process with the virtual application . The COM object provided by the location informer  also enables the virtual application  to write an item (e.g., file) to the location. Further, the exposure to the API provided to the virtual application by the COM object also enables the virtual application  to, when a connection is desired between the server  and the client workstation  (e.g., so that the client workstation  can utilize the virtual application ), write an item to the dedicated location in the file system . As described above, the virtual application  is restricted from sending a conventional connection request to the client-side context manager  due to, for example, firewall protections and\/or NAT issues. Thus, the example client-side context manager  of  provides an alternate method and\/or mechanism for the virtual application to initiate a connection with the context manager  and the application(s)  of the client workstation . The item or file that the virtual application  is to write to the location includes instructions for the client-side context manager  to establish a connection with the virtual application . For example, the item written to the dedicated location may include an address (e.g., an HTTP URL) to which the client-side context manager  can send a message to request the connection.","The example file system watcher  monitors the dedicated location of the file system  (along with other dedicated locations of the file system corresponding to other virtual application(s)) corresponding to the virtual application  to detect a write of the item by the virtual application . The example file system watcher  detecting the item being written in the dedicated location of the file system  triggers the client-side context manager  to establish a connection with the virtual application . To establish the connection, the example file reader  analyzes the item written into the dedicated location to identify the instructions for connecting to the virtual application . As described above, the virtual application  includes instructions, such as an address associated with the server , in the item to enable the client-side context manager  to communicate with the virtual application .","The example file reader  of  conveys the results of the analysis to the connection establisher . The example connection establisher  uses the information conveyed thereto from the file reader  to generate and transmit a message to the virtual application  at the server . The message generated and transmitted by the connection establisher  is a request that the virtual application  can accept by replying to the message. The virtual application  initiates a listener (e.g., in conjunction with placing the item in the dedicated location in the file system ) that is capable of receiving the request from the client workstation . A reply from the virtual application  to the request establishes a connection (e.g., a bi-directional socket connection or a one-way socket connection, such as HTTP) between the client-side context manager  and the virtual application . As result, the virtual application  and the client-side context manager  can convey message to each other in both directions (e.g., from the virtual application  to the context manager  and from the context manager  to the virtual application ) without firewall protections and\/or NAT issues interfering with such an exchange. As described above, firewall protection and NAT issues caused virtual applications at remote servers difficulties when initiating a connection with a context manager implemented on a client machine. However, the example client-side context manager  of  enables the virtual application  to indirectly initiate such a connection by enabling a write to the dedicated location of the file system  and monitoring that location for an item placed there by the virtual application . The item being placed in the location by the virtual application  causes the client-side context manager  to directly initiate the connection with the virtual application  by sending a connection request via the connection establisher . The direct initiation by the client-side context manager  is not blocked by the firewall protection and avoids the NAT issues that prevent a direct initiation by the virtual application .","In some examples, the connection establisher  provides an alternative manner to avoid firewall and\/or NAT issues that prevent the virtual application  from communicating with a context manager implemented on the client side. In particular, the connection establisher  can establish a two-way socket connection to a server-side intermediary component upon startup. The server-side intermediary component may be provided to the server  by, for example, the connection establisher . A locator server on the server  would provide a URL-reference to the intermediary component, thereby making the intermediary component appear to be a server-side context manager to the virtual application . However, in actuality, the intermediary component would forward all traffic to the client-side context manager via the pre-established socket connection. This configuration also avoids the firewall and NAT issues described above.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIGS. 2","FIG. 4","FIG. 7","FIG. 4"],"b":["3","712","710","712","712","228"]},"As mentioned above, the example processes of  may be implemented using coded instructions (e.g., computer readable instructions) stored on a tangible computer readable medium such as a hard disk drive, a flash memory, a read-only memory (ROM), a compact disk (CD), a digital versatile disk (DVD), a cache, a random-access memory (RAM) and\/or any other storage media in which information is stored for any duration (e.g., for extended time periods, permanently, brief instances, for temporarily buffering, and\/or for caching of the information). As used herein, the term tangible computer readable medium is expressly defined to include any type of computer readable storage and to exclude propagating signals. Additionally or alternatively, the example processes of  may be implemented using coded instructions (e.g., computer readable instructions) stored on a non-transitory computer readable medium such as a hard disk drive, a flash memory, a read-only memory, a compact disk, a digital versatile disk, a cache, a random-access memory and\/or any other storage media in which information is stored for any duration (e.g., for extended time periods, permanently, brief instances, for temporarily buffering, and\/or for caching of the information). As used herein, the term non-transitory computer readable medium is expressly defined to include any type of computer readable medium and to exclude propagating signals.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4","b":["218","222","400","301","218","224","402","300","222","301","404","300","222","301","301","228","302","301","406","408","304","410","304","222","222","224","304","306","224","228","222","412","228","222","222","310","228","222","414","408","302","222"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 5","FIG. 5","FIG. 2","FIG. 5","FIG. 2","FIG. 5"],"b":["500","500","502","202","500","504","502","504","202","502","506","504","504","506","508","510","512","508","510","506"]},"The example client workstation  of  includes a primary application  and a secondary application . The primary application  and the secondary application  enable a healthcare practitioner using the client workstation  to interact with, for example, the healthcare data system  and\/or the servers  and . For example, the primary application  and\/or the secondary application  may retrieve information from a corresponding component of the healthcare data system , configure equipment associated with a corresponding component of the healthcare data system , present data associated with a corresponding component of the healthcare data system , and\/or otherwise interact with one or more components of the healthcare data system .","In the illustrated example of , the primary application  implements a program that the user of the client workstation  typically and\/or is required to open first at the onset of a session with the client workstation . For example, the primary application  may implement an authentication program to verify the identity of users attempting to logon to the client workstation . In some examples, before the secondary application  can be launched, the authentication program of the primary application  is required to verify the identity of a user of the client workstation . Additionally or alternatively, the primary application  may provide an overview of a workflow associated with the user (e.g., who may be identified via login information) and can be used to manage the workflow and the tasks thereof. Additionally or alternatively, the primary application  may implement a launch bar that the user would have running on a desktop including icons that launch healthcare applications (e.g., the secondary application ). The secondary application  is more specific relative to the primary application  in that the secondary application  is dedicated to particular component(s) of the healthcare data system . For example, the secondary application  may implement an interface program that facilitates interactions with a PACS or an EMR.","The example client workstation  also includes an example in-process context manager  configured in accordance with the example methods, apparatus, and\/or articles of manufacture disclosed herein. In previous systems, a client-side context manager is executed as a separate process as the applications that utilize the context manager. In contrast to previous systems, the in-process context manager  disclosed herein is executed inside the process of the primary application . That is, instead of providing the context manager to the client workstation  and having the client workstation  run the context manager as a standalone program (as in previous systems), the example in-process context manager  of  is integrated into the primary application . Thus, as the example in-process context manager  is integrated with the primary application , the example in-process context manager can be executed in response to an initiation of the primary application .","In some examples, the in-process context manager  can be enabled to be implemented as a client-side mechanism by the example methods, apparatus, and\/or articles of manufacture disclosed above in connection with . That is, the example in-process context manager  of  can, in addition to the functionality described below, establish a connection with a virtual application implemented on a server in response to the virtual application placing an item in a monitored file system location on the client workstation . In other words, the example client-side context manager  of  and\/or  can be integrated into a primary application on the client workstation  of  as described in connection with  below.","In some examples, the in-process context manager  is integrated into the primary application  by placing the content (e.g., logic and\/or instructions) of the context manager  inside a dynamically linked library (DLL) and providing the DLL as an optional component in a SDK that the client workstation applications  and  use to communicate with a context manager (e.g., a CCOW context manager). In such instances, the primary application  can reference the DLL including the context manager  to execute the context manager  as part of the primary application . As a result, when a user of the client workstation  initiates a session and opens the primary application , which, in some instances, is necessary before proceeding to use other aspects of the client workstation  (e.g., the secondary application ), the in-process context manager  is automatically initiated and begins running.","In some examples, executing the context manager  as part of the primary application  includes executing a first thread associated with the context manager  in parallel with a second thread associated with one or more aspects of the primary application . Of course, execution of the context manager  and\/or the primary application  may involve a more than one thread each, as many threads can be executed in connection with the context manager  and\/or the primary application .","In instances in which the primary application  includes an authentication program, the in-process context manager  can be executed in response to the initiation of the primary application  or in response to an identity verification (e.g., a successful login via the authentication program).","The example in-process context manager  of  and the execution thereof within the primary application  improves the performance of the context management by enabling a one-hop communication requirement between applications rather than a two-hop (or more) communication requirement of the prior art. Further, the in-process context manager  can be deployed as part of the primary application  instead of as a standalone program, thereby simplifying the implementation of the context management system for the client workstation .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIG. 5","FIG. 6","FIG. 7","FIG. 6"],"b":["712","710","712","712","518"]},"As mentioned above, the example processes of  may be implemented using coded instructions (e.g., computer readable instructions) stored on a tangible computer readable medium such as a hard disk drive, a flash memory, a read-only memory (ROM), a compact disk (CD), a digital versatile disk (DVD), a cache, a random-access memory (RAM) and\/or any other storage media in which information is stored for any duration (e.g., for extended time periods, permanently, brief instances, for temporarily buffering, and\/or for caching of the information). As used herein, the term tangible computer readable medium is expressly defined to include any type of computer readable storage and to exclude propagating signals. Additionally or alternatively, the example processes of  may be implemented using coded instructions (e.g., computer readable instructions) stored on a non-transitory computer readable medium such as a hard disk drive, a flash memory, a read-only memory, a compact disk, a digital versatile disk, a cache, a random-access memory and\/or any other storage media in which information is stored for any duration (e.g., for extended time periods, permanently, brief instances, for temporarily buffering, and\/or for caching of the information). As used herein, the term non-transitory computer readable medium is expressly defined to include any type of computer readable medium and to exclude propagating signals.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 6","FIG. 5","FIG. 5","FIG. 6"],"b":["518","506","600","518","514","518","506","602","506","514","506","514","604","518","514","606","518","506","610","608","518","514"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["710","710","712","714","712","710","712","714"]},"The processor  of  is coupled to a chipset , which includes a memory controller  and an input\/output (I\/O) controller . As is well known, a chipset typically provides I\/O and memory management functions as well as a plurality of general purpose and\/or special purpose registers, timers, etc. that are accessible or used by one or more processors coupled to the chipset . The memory controller  performs functions that enable the processor  (or processors if there are multiple processors) to access a system memory  and a mass storage memory .","The system memory  may include any desired type of volatile and\/or non-volatile memory such as, for example, static random access memory (SRAM), dynamic random access memory (DRAM), flash memory, read-only memory (ROM), etc. The mass storage memory  may include any desired type of mass storage device including hard disk drives, optical drives, tape storage devices, etc.","The I\/O controller  performs functions that enable the processor  to communicate with peripheral input\/output (I\/O) devices  and  and a network interface  via an I\/O bus . The I\/O devices  and  may be any desired type of I\/O device such as, for example, a keyboard, a video display or monitor, a mouse, etc. The network interface  may be, for example, an Ethernet device, an asynchronous transfer mode (ATM) device, an 802.11 device, a DSL modem, a cable modem, a cellular modem, etc. that enables the processor system  to communicate with another processor system.","While the memory controller  and the I\/O controller  are depicted in  as separate blocks within the chipset , the functions performed by these blocks may be integrated within a single semiconductor circuit or may be implemented using two or more separate integrated circuits.","Certain embodiments contemplate methods, systems and computer program products on any machine-readable media to implement functionality described above. Certain embodiments may be implemented using an existing computer processor, or by a special purpose computer processor incorporated for this or another purpose or by a hardwired and\/or firmware system, for example.","Certain embodiments include computer-readable media for carrying or having computer-executable instructions or data structures stored thereon. Such computer-readable media may be any available media that may be accessed by a general purpose or special purpose computer or other machine with a processor. By way of example, such computer-readable media may comprise RAM, ROM, PROM, EPROM, EEPROM, Flash, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to carry or store desired program code in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer or other machine with a processor. Combinations of the above are also included within the scope of computer-readable media. Computer-executable instructions comprise, for example, instructions and data which cause a general purpose computer, special purpose computer, or special purpose processing machines to perform a certain function or group of functions.","Generally, computer-executable instructions include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types. Computer-executable instructions, associated data structures, and program modules represent examples of program code for executing steps of certain methods and systems disclosed herein. The particular sequence of such executable instructions or associated data structures represent examples of corresponding acts for implementing the functions described in such steps.","Embodiments of the present invention may be practiced in a networked environment using logical connections to one or more remote computers having processors. Logical connections may include a local area network (LAN) and a wide area network (WAN) that are presented here by way of example and not limitation. Such networking environments are commonplace in office-wide or enterprise-wide computer networks, intranets and the Internet and may use a wide variety of different communication protocols. Those skilled in the art will appreciate that such network computing environments will typically encompass many types of computer system configurations, including personal computers, hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked (either by hardwired links, wireless links, or by a combination of hardwired or wireless links) through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Although certain methods, apparatus, and articles of manufacture have been described herein, the scope of coverage of this patent is not limited thereto. To the contrary, this patent covers all methods, apparatus, and articles of manufacture fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 4","FIGS. 2"],"b":"3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 7","FIG. 4","FIGS. 2","FIG. 6","FIG. 5"],"b":"3"}]},"DETDESC":[{},{}]}
