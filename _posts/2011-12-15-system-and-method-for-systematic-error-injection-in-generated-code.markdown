---
title: System and method for systematic error injection in generated code
abstract: A system and method introduces one or more errors into computer programming code generated from a model or other source program. The one or more errors are not present in the model, but are introduced into the code generated from the model. The one or more errors may simulate one or more bugs in the code generation process. The generated code, including the one or more introduced errors, may be analyzed by one or more verification tools. The one or more verification tools examine the generated code in an effort to detect the one or more errors that were introduced. The one or more verification tools may compare the generated code to the model or source program. If the one or more verification tools is able to detect the one or more introduced errors, then the one or more verification tools may be considered to be validated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317408&OS=09317408&RS=09317408
owner: THE MATHWORKS, INC.
number: 09317408
owner_city: Natick
owner_country: US
publication_date: 20111215
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["The invention description below refers to the accompanying drawings, of which:",{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIGS. 3A-C"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIGS. 8A and 8B","FIG. 6"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 9-15"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 17","FIG. 16"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIGS. 20 and 21","FIG. 19"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 23"},"To develop or model a system, such as a dynamic system, a developer may use a programming or modeling environment. The developer may construct one or more computer-generated models of the system within the modeling environment. Exemplary systems include embedded systems, such as controllers having microprocessors, microcontrollers, and\/or other programmable devices. The model may be or may include a graphical model, a block diagram, a text-based model, a state machine, an object class diagram, and a sequence diagram, among other modeling constructs. The modeling environment may include a plurality of tools, such as a simulation engine for executing the model. The modeling environment also may include an automated code generation tool for generating code from the model. The generated code may be in the form of source code that conforms to the syntax and semantics of a programming language, such as C, C++, a Hardware Description Language (HDL), etc. The generated code may be compiled or translated into machine code for execution. When executed, the generated code is intended to produce correct results, namely the same results as the model. The generated code may constitute production code, or it may be used for simulation acceleration, rapid prototyping, and hardware in the loop testing.","A code generation tool, like any complex software, however, may not be free of errors. Accordingly, the output of a code generator may contain bugs. These bugs may or may not be detected by a compiler, and they may or may not cause the generated code to produce results that differ from the model. Furthermore, the bugs occurring in the generated code due to errors in the code generation tool may not be detected by a particular verification tool used by the developer to check the generated code.","Exemplary embodiments of the present invention may be used to introduce one or more errors deliberately into computer programming code generated from a model or other source program. The generated code, including the one or more introduced errors, may then be analyzed by one or more verification tools to determine whether the verification tool can detect the occurrence of the introduced errors. In an embodiment, a system, such as a modeling environment may include a plurality of modules. In particular, the modeling environment may include a code generator module and an error injection system. The error injection system may include an error injector unit, an injected error selector, an error class library, and a report generator. The error injection system may also have an interface, such as an Application Programming Interface (API) that may be utilized by other modules to access the error injection system, e.g., for configuration, reporting, and other purposes.","The error class library may include definitions of a one or more error classes or types, one or more error class may be selected, e.g., by the user, for introduction into the generated code during the code generation process. Exemplary error classes include statement out of order execution, incorrect translation of a math operation, write after write operation, uninitialized read, etc. The user may select one or more error classes to be introduced into the general code. The user may also select the number of instances of a selected error class to be introduced into the generated code.","During the code generation process, the error injection system may introduce one or more errors of the one or more selected error classes into the code generated from the model. In an embodiment, the one or more errors may be introduced as the code is being generated for the model. For example, the code generator may construct one or more in-memory, intermediate representations (IRs) of the model. The IR may be functionally equivalent to the model. The error injection system may alter the IR so as to deliberately inject one or more errors according to the one or more error classes that were selected. In particular, the error injector unit may search the IR for suitable locations for injecting the one or more errors. The error class library may include one or more templates or patterns for use by the error injector unit to find and identify locations within the IR for the introduction of the one or more errors. The error class library may further include templates or samples for use by the error injector unit in constructing the one or more errors being introduced.","The code generator may utilize the altered IR in performing further code generation processes. The code generator outputs generated code, which includes one or more introduced errors. The report generator of the error injection system may generate one or more reports that specify the locations and provide other information about the one or more errors introduced into the generated code.","The system may also include or have access to a verification tool suite that includes one or more verification tools for testing computer programming code. The user may select one or more of the verification tools from the suite for testing the generated code that includes the one or more introduced errors. Other embodiments may select one or more verification tools programmatically, e.g., based on one or more characteristics of the generated code. In an embodiment, the user may examine the output of the selected verification tool and, utilizing information from the report, determine whether the verification tool detected the one or more errors introduced into the generated code. In another embodiment, the error injection system may obtain the output produced by the selected verification tool, and the error injection system may automatically determine whether or not the verification tool detected the one or more introduced errors. The error injection system may then report its findings to the user. Accordingly, the suitability of the verification tool for identifying such error classes may be determined.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","100","102","104","106","108","110","112","100","114","106","116","118","120"]},"The main memory  may store a plurality of libraries or modules, such as an operating system , and one or more applications running on top of the operating system , including a high-level modeling environment .","The removable medium drive  may accept and read a computer readable medium , such as a CD, DVD, floppy disk, solid state drive, tape, flash memory or other medium. The removable medium drive  may also write to the computer readable medium .","Suitable computer systems include personal computers (PCs), workstations, laptops, tablets, palm computers and other portable computing devices, etc. Nonetheless, those skilled in the art will understand that the computer system  of  is intended for illustrative purposes only, and that the present invention may be used with other computer systems, data processing systems or computational devices. The present invention may also be used in a networked, e.g., client-server, computer architecture, or a public and\/or private cloud computing arrangement.","Suitable operating systems  include the Windows series of operating systems from Microsoft Corp. of Redmond, Wash., the Linux operating system, the MAC OS\u00ae series of operating systems from Apple Inc. of Cupertino, Calif., and the UNIX\u00ae series of operating system, among others.","As indicated above, a user or developer, such as an engineer, scientist, programmer, etc., may utilize the keyboard , the mouse , and the display  to operate the high-level modeling environment , and construct one or more models of a system that is being designed.","In an embodiment, suitable high-level modeling or design environments include the MATLAB\u00ae and SIMULINK\u00ae technical computing environments from The MathWorks, Inc. of Natick, Mass., the Stateflow charting tool from The MathWorks, Inc., the LabVIEW programming system from National Instruments Corp. of Austin, Tex., the Visual Engineering Environment (VEE) from Agilent Technologies, Inc. of Santa Clara, Calif., a Unified Modeling Language (UML) system, a Systems Modeling Language (SysML) system, the System Generator System from Xilinx, Inc. of San Jose, Calif., and the graphical modeling system described in U.S. Pat. No. 7,324,931 for Conversion of Model Components Into References, which is hereby incorporated by reference in its entirety, among others. The high-level modeling environment may operate at a level that is higher than certain programming languages, such as the C, C++, C#, SystemC programming languages.","Those skilled in the art will understand that the MATLAB\u00ae technical computing environment is a math-oriented, textual programming environment for digital signal processing (DSP) design, among other uses. The SIMULINK\u00ae technical computing environment is a graphical, block-based environment for modeling and simulating dynamic systems, among other uses. A model may be a time-based, block diagram model that inherits data types, sample times, and data dimensions. The model may have dynamic typing, execution order inferencing, and may support array-based operations.","In another embodiment, a lower level programming language, such as the C, C++, and C# programming languages, among others, may be used to create the model instead of a high-level modeling environment.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["200","200","202","204","206","208","209","210","202","212"]},"In an embodiment, an error injection system  may be integrated with the high-level modeling environment . For example, the error injection system  may be implemented as an add-on tool to the environment , or it may be built-into the environment  or the code generator , among other options. Alternatively, the error injection system  may be separate from the modeling environment , but in communicating relationship with it. The error injection system  may include a plurality of components or modules. In particular, the system  may include an error class library  having one more error classes -, an injected error selector , an error injector unit , and a report generator . The error injection system  may also have an Application Programming Interface (API)  for use in communicating with the system .","The high-level modeling environment  also may include a verification tool suite  having one or more verification tools, such as tools -. Alternatively, the verification tools  may be separate from the high-level modeling environment .","In an embodiment, the modeling environment  may receive inputs by a user as the user creates, edits, revises, and\/or opens one or more models, which may be stored in main memory  or persistent memory . For example, the user may select a plurality of graphical objects, such as icons or blocks, from one or more libraries or palettes of pre-defined objects, and place the selected objects onto a model canvas that may be managed by the model editor . The user also may employ a connection tool to establish connections among the blocks, which may or may not be visually represented on the model canvas. The graphical objects of the model may represent dynamic systems, computations, functions, operations, or states, and the connections, which may appear as wires or arrows, among the objects may represent data, control, signals, events, or mathematical relationships among those dynamic systems, computations, functions, operations, or states. A set of interconnected blocks may be organized into a subsystem, and a set of states may be organized into a subchart. A model may also include one or more sub-models.","In particular, the UI engine  and model editor  may provide or support a graphical user interface (GUI) that includes the model canvas for displaying a model. The model may be a Simulink model, a Stateflow chart, a LabVIEW block diagram, a VEE diagram, a MATLAB file, a MatrixX model, etc. The model may represent a dynamic system, such as an aircraft flight controller, an engine control unit (ECU), an embedded system, etc. The simulation engine  may simulate the modeled system, e.g., it may execute the model.","The GUI may also include a plurality of command buttons, including a Run button, that may be selected by the user. The UI engine  may also provide or support a Command Line Interface (CLI) that may receive a text-based run command entered by the user. In response to the user selecting the Run button or entering the run command, the simulation engine  may execute or simulate the graphical model, and may output the results produced by the model's execution, for example, to the user via the display .","The UI engine  may also provide or support a Code Generation button in the GUI that may be selected by the user, or the UI engine  may receive a code generation command entered by the user, e.g., in the GUI or the CLI. The code generation command also may be invoked programmatically, for example, when a particular event occurs, such as a model passing verification, etc. In response to the code generation command being activated, the code generator  may generate code for the model, and may store the generated code in memory. In an embodiment, the generated code may be textual code, such as textual source code, that may be compiled and executed on a target machine or device. The generated code may conform to one or more programming languages, such as C, C++, C#, SystemC, VHDL, Verilog, embedded MATLAB, a vendor or target specific HDL code, such as Xilinx FPGA libraries, etc.","Suitable code generators for use with the present invention include, but are not limited to, the Simulink Coder, the Embedded Coder, and the Simulink HDL Coder products from The MathWorks, Inc., and the TargetLink product from dSpace GmbH of Paderborn Germany. Suitable verification tools for use with the present invention include, but are not limited to, the Simulink Design Verifier, the Simulink Code Inspector, and the Simulink Verification and Validation products from The MathWorks, Inc. Other verification tools include the Rational\u00ae Purify\u00ae dynamic software analysis tool from IBM of Armonk, N.Y., the Embedded Validator product from BTC Embedded Systems AG of Oldenburg Germany, and tools for determining compliance with a coding standard, such as the Joint Strike Force C++ coding standard (JSF++), the Motor Industry Software Reliability Association (MISRA) C and C++ standards, e.g., MISRA C: 2004, and MISRA C++: 2008. The Polyspace code analysis product from The MathWorks, Inc., for example, can be used to check for compliance with the MISRA C: 2004, MISRA C++: 2008, and JSF++: 2005 coding standards. Those skilled in the art will understand that other code generation systems and verification tools may be used.","The injected error selector , the error injector unit , and the report generator  of the error injection system  may each comprise registers and combinational logic configured and arranged to produce sequential logic circuits. In an embodiment, the injected error selector , the error injector unit , and the report generator  may be implemented through one or more software modules or libraries containing program instructions pertaining to the methods described herein. The software modules may be stored on main memory  and\/or computer readable media, such as computer readable medium , and executable by one or more processing elements, such as processing element . Other computer readable media may also be used to store and execute these program instructions. In alternative embodiments, various combinations of software and hardware, including firmware, may be utilized to implement the present invention.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIGS. 3A-C","b":["200","302","200","200","106","116","118","120","204","120","208","120"]},"The graphical model may be executed by the simulation engine , as indicated at block . For example, a user may select the Run button presented by the UI engine, or enter a text-based command. A model may also be executed programmatically. Model execution may include a compile stage, a link stage, and a simulation loop stage. The compile and link stages may be performed by the model compiler  of the simulation engine . The compile stage may involve preparing data structures and evaluating parameters, configuring and propagating block characteristics, determining block connectivity, performing block reduction and block insertion, and generating a sorted order of the equations corresponding to the individual blocks of the model. One or more in memory representations, such as intermediate representations (IRs), may be generated for the model by the IR builder . The link stage may involve memory allocation, and generation of a block method execution list from the sorted order. During the simulation loop stage, the compiled and linked version of the model may be directly utilized by the simulation engine  to execute the model in an interpreted mode.","In an embodiment, at least one of the IRs may be in the form of a hierarchical, Data Flow Graph (DFG) having a plurality of nodes interconnected by edges. The nodes of the IR may represent blocks from the executable graphical model, the edges of the IR, called signals, may represent the connections between the blocks of the model. Special nodes, called network instance components (NICs), may be used to provide hierarchy in the IR, for example, by abstractly representing subsystems of the model. Thus, each block or subsystem of the model may map to one or more nodes of the IR, and each line or arrow of the model may map to one or more edges of the IR.","In an embodiment, the in-memory representation may have a plurality of hierarchically arranged levels. More specifically, the IR may be a top-level of the in-memory representation of the model and one or more of the components of the IR may be a particular type or form of in-memory representation. For example, one or more components of the IR may be a Control Flow Graph (CFG), Control Data Flow Graph (CDFG), program structure tree (PST), abstract syntax tree (AST), a netlist, etc. A CDFG may capture the control flow as well as the data flow of a graphical model through data dependency and control dependency edges.","The in-memory representation or IR may be stored in memory, such as main memory .","Model execution may be carried out for one or more inputs, such as a set of inputs, and may produce one or more results or outputs, such as a set of outputs. Model execution may take place over a time-span. For example, execution may begin at a start time, include one or more time steps, and end at a stop time. The results produced during model execution may be saved for later analysis, such as a comparison with results produced by code generated for the model.","To generate code from the model, a user may select a code generation command button presented by the UI engine. Alternatively, the user may enter a text command to generate code for the model, or code generation may occur or at least begin programmatically. In an embodiment, before launching the code generation process for the model, one or more code generation parameters or options may be selected for the model, and one or more code generation parameters or options may be selected for one or more objects of the model, such as one or more subsystems.","For example, the UI engine  may present a Model Code Generation pane on the display . The Model Code Generation pane may include one or more options whose value may be selected by the user, e.g., through graphical widgets, such as checkboxes, radio buttons, drop down menus, etc. A first option may specify the programming language of the code to be generated from the model, such as C, C++, C#, Ada, HDL, etc. Another option may specify a code generation objective, such as execution efficient, Read Only Memory efficient, Random Access Memory efficient, etc. Another option may specify the type of code to be generated, such as normal code and instrumented code. Instrumented code may include features that make debugging the code easier.","Code generation may include a compile stage and a link stage, as described above. The compiled and linked version of the model may be translated into code conforming to the syntax and semantics of the specified target language. The generated code may be in the format of the designated target language. Alternatively or additionally, the generated code may be in the form of object code or machine instructions, such as an executable, suitable for execution by a target device, such as a central processing unit, a microprocessor, a digital signal processor, a programmable hardware device, etc. The generated code may be in the form of a hardware description, for example, a Hardware Description Language (HDL), such as VHDL, Verilog, a netlist, or a Register Transfer Level (RTL) description. The hardware description may be utilized by one or more synthesis tools to configure a programmable hardware device, such as Programmable Logic Devices (PLDs), Field Programmable Gate Arrays (FPGAs), and Application Specific Integrated Circuits (ASICs), among others.","The code generator  may apply one or more optimizations during the code generation process. For example, the code generator  may roll or unroll For Loops, inline or reuse functions, store signals in reusable memory locations, and remove superfluous temporary variables, among other optimizations. One or more of the optimizations may be user-selected, e.g., on the Model Code Generation pane. For example, the user may select one or more code reuse options, expression folding options, dead path elimination options, etc.","As part of the code generation process, the code generator  may generate a plurality of code modules, such a model header file (model.h), a model source file (model.c), and one or more header and source files for one or more non-inlined portions of the model, such as non-inlined subsystems. Header files may define data types, data structures, and macros required by the generated code. For example, model.h may declare model data structures and a public interface to the model entry points and data structures.","In an embodiment, a user may create a main.c file to execute the generated code in a desired manner. Specifically, the main.c file may call top-level model functions to execute the model.","Other code modules or files may also be created such as one or more make files (model.mk), which may be used to build an executable from the source files.","The generated code may be stored in memory, such as main memory  or disk storage . The generated code also may be executed producing code generated results.","Error Injection","The error injection system  may receive a request, e.g., from the user, to introduce one or more errors into the code generated from the model, as indicated at block . For example, the Model Code Generation pane may include an option that may be selected in order to cause the error injection system  to introduce one or more errors into the generated code. The one or more errors may be introduced as part of the code generation process. The one or more errors being introduced are errors that do not exist in the original model. Instead, the errors that are being introduced deliberately into the generated code may represent errors that might possibly occur as a result of a bug in the code generation unit. Accordingly, the generated code, including the one or more deliberately introduced errors, is purposefully not a faithful representation of the model. Nonetheless, the generated code, including the one or more introduced errors, may be valid and executable code according to the semantics and syntax of the target language, such as the C programming language.","In particular, the error injection system  may receive a designation of one or more classes of errors to be introduced into the generated code, as indicated at block . In an embodiment, if the user selects the option to introduce one or more errors into the generated code in the Model Code Generation pane, the injected error selector  may cooperate with the UI engine  to present a sub-pane or dialog box on the display .  is an illustration of an error selection pane  that may be presented on the display . The error selection pane  may include a plurality of entries, such as entries -. Each entry  may correspond to a particular class or type of error to be introduced into the generated code. The error classes presented in error selection pane  may correspond to the error classes  stored in the error class library .","Exemplary error classes may include:",{"@attributes":{"id":"p-0061","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["statement out of order execution \u2014in which the execution order of two or more statements in the generated code is changed from the execution order specified in the model;","write after write \u2014in which a write to a variable is followed in the generated code by another write to the variable before that variable is read;","uninitialized read \u2014in which a variable is read in the generated code before the variable is initialized;","incorrect literal \u2014in which the value of a literal or constant in the generated code is changed from the value in the model;","incorrect data dependency \u2014in which the input data dependency of a component of the generated code is changed from the input data dependency specified in the model;","incorrect sample time \u2014in which the sample time of a component of the generated code is changed from the sample time specified in the model;","missing type cast \u2014in which the data type of a variable in the generated code is changed from the data type specified in the model;","incorrect array indexing \u2014in which the index into an array in the generated code is changed from the index specified in the model;","unprotected multi-task access \u2014in which the protection over a resource, such as a global variable, shared by multiple tasks in the model is omitted in the generated code;","variable shadowing \u2014in which a variable declared within a certain scope has the same name as a variable in an outer scope; and","incorrect math operation \u2014in which a math operation specified in the model is changed to a different math operation in the generated code."]}}}},"It should be understood that other error classes, such as memory leaks, also may be included.","A checkbox may be associated with each entry  presented in the error selection pane . The user may select one or more error classes by selecting the respective checkbox in the error selection pane , for example, with the mouse . In addition, one or more entries  may include a drop down menu or other graphical widget that may provide further options. For example, the incorrect math operation entry may have a drop down menu , which may be used to select the particular type of incorrect math operation, such as inserting a subtraction operation instead of an addition operation, inserting a multiplication operation instead of a division operation, etc.","The classes of errors that are available for selection may be stored in the error class library  of the error injection system .","The error selection pane  may also include one or more command buttons, such as an OK button , a Cancel button , a Help button , and an Apply button . After checking the checkboxes for the desired error or errors, a user may select the Apply button  and the OK button  to save the selection.","In an embodiment, the user may also select the number of instances of an error of a selected error class to be introduced into the generated code, as indicated at block . For example, one or more entries  of the error selection pane  may include a data entry field for receiving a specified number of error instances of the respective class that are to be introduced into the generated code. A user may enter a desired value into one or more of the number of errors fields. In an embodiment, the number of errors for one or more of the selected error classes may be determined programmatically by the error injection system , rather than being designated by a user. For example, the number of error instances introduced into the generated code may be randomly determined by the error injector unit . For example, the error injector unit  may choose to introduce the first possible occurrence that represents the class of error in question, or perhaps the last. In another example, the error injection unit  may retain state information, such as a universally unique identifier (UUID) of the model object corresponding to the operation in the generated code so as to not repeat the same error as injected previously. In yet another example, the error injector unit  may choose a location where the measured cyclomatic complexity of the generated code is highest for introducing one or more errors. Cyclomatic complexity is a measure of the structural complexity of a model. It may approximate the McCabe complexity measure for code generated from a model. The McCabe complexity measure may be slightly higher on generated code due to error checks that the model coverage analysis may not consider.","A scope for one or more of the errors to be introduced may also be specified, where the specified scope is less than the entire model. For example, a user may specify that the one or more error instances of a given error class be introduced in only a portion of a model, such as a subsystem or a sub-model within the model. In response the error injector unit  may limit the introduction of errors to the portion of the generated code that corresponds to the specified scope, for example the subsystem, sub-model or other model portion that was specified.","During the code generation process, the error injection system  interfaces to and cooperates with the code generator  to introduce one or more instances of errors of the one or more selected error classes into the code as it is generated from the model. Specifically, the IR builder  of the compiler  may construct one or more in-memory, intermediate representations (IRs) from the model, as indicated at block .","The model editor  may save the model as originally constructed or opened, as indicated at block  (). The model compiler  may save one or more of the IRs or other in-memory representations of the model as originally created, i.e., without any modification or alteration, as also indicated at block . The original model and one or more IRs may be saved in main memory  and\/or in persistent memory .","In an embodiment, the error injection system  may create a copy of one or more of the IRs constructed by the IR builder  from the model, and may introduce one or more error instances by modifying the copy of the IR. The error injector unit  may alter the IR that was constructed for the model (or a copy thereof) to include one or more errors of the selected error classes, as indicated at block . Specifically, the error injector unit  may search the IR (or the copy thereof) for a particular structure, pattern, or entry. The particular pattern that is searched for may depend on the class of error being introduced. Upon locating an occurrence of the particular pattern in the IR, the error injector unit  may then alter the IR to introduce the error, thereby creating an altered IR. For example, the error injector unit  may replace all or part of the particular pattern located in the IR with a different structure or pattern, thereby altering the original IR. Additionally or alternatively, the error injector unit  may add or modify a statement or entry in the generated code before or after the location matching the particular pattern. By operating on a copy of the IR, both an original and an altered IR (and\/or in-memory representation) may be separately saved and stored.","In an embodiment, the error injector unit  or the error injection system  may include one or more tools for tracing portions of the IR or generated code back to the model for which code is being generated. By tracing which portions of the IR and\/or generated code correspond to parts of the model, the error injector unit  may determine where to introduce one or more errors in the generated code, and the format of the one or more errors being introduced.","A suitable tool for tracing portions of the IR and\/or generated code to portions of the model is described in U.S. Patent Publication No. 2008\/0098349 for Traceability in a Modeling Environment, which is hereby incorporated by reference in its entirety.","The error class library  may include information on how error instances may be introduced into the IR. Specifically, the error class library  may store one or more templates or patterns for use in searching the IR, and one or more error templates or patterns for use in constructing a particular error being introduced in the generated code.","In an embodiment, the original IR constructed from the model may be saved, and an altered IR created. If a second class of error is to be introduced, the error injector unit  may operate on the altered IR. That is, the error injector unit  may search the altered IR, and may make further alterations to it.","The code generator  may utilize the one or more altered IRs to generate code having one or more introduced errors, as indicated at block . The code generator  may output the generated code , which includes one or more introduced errors, and the generated code may be saved to memory, such as one or more of memories  and .","For example, suppose one of the error types selected by the user is incorrect array indexing. Suppose further that the model includes an operation that indexes the 12th element of a 1\u00d724 array. The error injector unit  may search the IR constructed from the model for an array, and an operation that indexes into that array. The error injector unit  may then alter the IR so that the IR, as altered, now indexes a different element of the array, such as the 22nd element rather than the 12th element.","The report generator  may generate one or more reports concerning the one or more errors introduced into the generated code, as indicated at block . For example, the report generator may generate a report that identifies each error introduced into the code by the error injector unit  and the class of the introduced error. The report may indentify each error by specifying the file of the generated code in which the error is located, e.g., model.c, and the line number of the introduced error in that file, e.g., line . The report may be output by the report generator, as indicated at block . For example, the report may be displayed on the display , sent to a printer for printing, and\/or saved in memory, such as main memory  and\/or persistent memory , as one or more electronic files or objects.","In addition, the generated code  may be subjected to analysis by one or more verification tools . More specifically, the modeling environment  may receive a selection of one or more verification tools that are to analyze the generated code, as indicated at block . A user may direct the generated code to be analyzed by one or more verification tools to see whether the selected verification tool is capable of identifying the one or more errors that were introduced into the generated code by the error injector unit . In an embodiment, one of the code generation options presented in the code generation option pane may be a verification option. If the verification option selected, the UI engine  may present a verification tool selection pane.  is a schematic illustration of a verification tool selection pane . The verification tool selection pane  may include a list of entries -, where each entry represents an available verification tool. A checkbox may be associated with each entry -. The user may enter a check, e.g., with the mouse , into the checkbox associated with one or more verification tools that are to analyze the generated code. The verification tool selection pane  may also include one or more command buttons, such as an OK button , a Cancel button , a Help button , and an Apply button . After checking the checkboxes for the desired verification tools, a user may select the Apply button  and the OK button  to save the selection.","Exemplary verification tools include the FlexeLint and PC-lint C\/C++ static code checkers from Gimpel Software of Collegeville, Pa., the Simulink Code Inspector product from The MathWorks, Inc., the Astree run-time analyzer and other products from Absint Angewandte Informatik GmbH of Saarbruecken, Germany, the Polyspace code verifiers from The MathWorks, Inc., the Insure++ error detection tool and the Parasoft C++ test analysis tool from Parasoft Corp. of Monrovia, Calif., the DevPartner BoundsChecker runtime error checker from Micro Focus IP Development Ltd. of Berkshire, UK, and the open source Valgrind debugging and profiling tools. It should be understood that other verification tools may be used, such as proprietary, internal tools.","Each of the selected verification tools may analyze the generated code, as indicated at block  (). The analysis of the generated code by the verification tool may include a comparison of the generated code to the model, which remained in its original form, i.e., un-modified, as indicated at block . Additionally or alternatively, the generated code having the one or more errors may be compared with one or more of the original, un-modified IRs of the model, as also indicated at block . Furthermore, code may be generated from the one or more original, un-modified IRs, and this \u201cclean\u201d code may be compared to the generated code having the one or more introduced errors by the verification tool, again as indicated at block .","Additionally or alternatively, the generated code having the one or more errors may be subject to manual code inspection. For example, one or more programmers or coders with significant experience may manually analyze the generated code in an attempt to detect the one or more introduced errors. The introduction of errors into the generated code also may be used to train programmers or coders in the art of error detection.","Each verification tool selected to analyze the generated code may provide the results of its analysis, as indicated at block . A user may review the results of the analysis by the one or more verification tools, and determine whether the one or more tools was able to detect the one or more errors that were deliberately introduced into the generated code by the error injection system . If the verification tool was able to detect the one or more introduced errors, then the verification tool may be considered to be validated at least for the class of error that the tool detected in the generated code. That is, if the verification tool successfully detects the introduced errors, it may then be deemed to be suitable for detecting such errors caused by a bug in a code generator.","In an embodiment, the error injection system  may obtain the output (e.g., one or more results) produced by the selected verification tool, as indicated at block . The error injection system  may review the output, and automatically determine whether or not the verification tool detected the one or more errors introduced into the generated code, as indicated at block . The report generator  may produce a report indicating whether or not the verification tool was able to detect the one or more introduced errors, as indicated at block . The report may be output for review by the developer, as indicated at block .","The error injection system  may provide one or more metrics regarding the errors detected by the one or more verification tools. For example, the error injection system  may indicate whether a designated verification tool was able to detect at least 85% of all of the errors of one or more error classes.",{"@attributes":{"id":"p-0085","num":"0094"},"figref":"FIG. 6","b":["600","600","600","602","604","606","608","610","600","612","614","616","618","606","608","610","600","620"]},"The model  may be constructed on a model canvas  of a model editor . The model editor  may include a window, a menu bar , a toolbar , etc. The toolbar  may include a Run button , among other command buttons. In response to a user selecting the Run button , for example with the mouse , the simulation engine  may execute the model .",{"@attributes":{"id":"p-0087","num":"0096"},"figref":["FIG. 7","FIG. 6"],"b":["700","620","700","702","704","706","708"]},{"@attributes":{"id":"p-0088","num":"0097"},"figref":["FIG. 8","FIG. 7","FIG. 6"],"b":["800","600","210","800","600","800","600","800","802","44","612","804","49","618","600","800","806","808","60","706","620","806","808","706","800","810","620"]},"Statement Out of Order Execution","Suppose a user wants to test whether a particular verification tool can detect that two or more operations of a model occur out of order in code generated from the model. To conduct such a test, the user may select the checkbox for entry for statement out of order execution from the error selection pane , thereby directing the error injection system  to introduce at least one error from the statement out of order execution error class in code generated for the model  by the code generator .","In response to the selection of the statement out of order execution error class, the error injector unit  may evaluate the code as it is being generated, or after the code has been generated, for the model, and swap the order of entries  and , such that entry  occurs before entry  in the generated code having one or more introduced errors from the statement out of order execution error class.",{"@attributes":{"id":"p-0092","num":"0101"},"figref":["FIG. 9","FIG. 8"],"b":["900","900","902","44","904","49","902","904","900","902","904","804","802","800","900","802","804","900","900","804","802","230","228","902","904"]},"In an embodiment, the error injector unit  may introduce the one or more errors by modifying the generated source code, such as code . In another embodiment, the error injector unit  may introduce the one or more errors by modifying one or more IRs generated from the model  during the code generation process.","It should be understood that the verification tool may analyze the source code generated for the model with the introduced error and\/or object code or an executable produced by compiling or interpreting the source code. It should be further understood that the verification tool also may analyze the model .","Incorrect Math Operation","Suppose a user wants to test whether a given verification tool can detect that a math operation in a model appears incorrectly in code generated for the model. In this case, the user may select the checkbox for entry from the error selection pane , and may select \u201cdivision instead of multiplication\u201d from the drop down menu , thereby directing the error injection system  to introduce at least one error from the incorrect math operation error class in code generated for the model  by the code generator .","In response to the selection of the incorrect math operation error class, the error injector unit  may evaluate the code as it is being generated, or after the code has been generated, for the model. The error injector unit  may modify the generated code such that the symbols \u201c<<\u201d at entry  are changed to \u201c>>\u201d which means divide by 2.",{"@attributes":{"id":"p-0098","num":"0107"},"figref":["FIG. 10","FIG. 8"],"b":["1000","1000","1002","60","1002","806","800","1","800","2","1000","1000","806","230","228","1002"]},"It should be understood that the selected verification tool may compare the model  to the generated code. Alternatively or additionally, the selected verification may compare the model results produced during execution of the model with code generation results produced during execution of the generated code.","Write after Write","In an embodiment, code generated for a model should not include two write operations to the same variable without a read operation occurring between the two writes. Instead, after a first write to a given variable in the generated code, the given variable should be read or otherwise utilized before a second write is performed to the given variable. Suppose a user wants to test whether a given verification tool can detect the occurrence of two writes without an intervening read in code generated from a model. In this case, the user may select the checkbox for entry from the error selection pane , thereby directing the error injection system  to introduce one or more write after write errors in code generated for the model  by the code generator .","In response, the error injector unit  may look for a write operation occurring in the code generated for the model . The error injector unit  may identify entry  at line  of the generated code , which assigns a value to a variable of the generated code identified as \u201crtb_equal_to_count\u201d. The error injector unit  may create and insert a new entry into the generated code following the entry  at line . That is, the error injector unit may introduce a new line of code between lines  and  of the generated code . The new line of code introduced into the generated code  may perform a write to the same variable as entry  at line , i.e., to variable \u201crtb_equal_to_count\u201d.",{"@attributes":{"id":"p-0103","num":"0112"},"figref":["FIG. 11","FIG. 8"],"b":["1100","1100","1102","50","800","1100","49","50","800","222"]},"rtb_equal_to_count=rtDWork.X+=1;","This newly added statement  represents a second write to the variable \u201crtb_equal_to_count\u201d without a read occurring between the two writes.","The generated code  having such a write after write error may still be compiled by the target language compiler , and executed. The generated code  with the introduced error, e.g., write after write to the variable \u201crtb_equal_to_count\u201d, may be analyzed by one or more of the verification tools  of the verification tool suite , such as the Polyspace or FlexeLint tools. If the selected verification tool detects the introduction of the second write  at line  following the first write at line , then the user will have some confidence that the verification tool is capable of detecting such errors should they occur due to a bug in the code generator tool.","Uninitialized Read","An uninitialized read occurs when a read operation targets a memory location that has been allocated but has not yet been written to.","Suppose a user wants to test whether a given verification tool can detect that a uninitialized read occurs in code generated from a model. In this case, the user may select the checkbox for entry from the error selection pane , thereby directing the error injection system  to introduce at least one uninitialized read error in code generated for the model  by the code generator .","In response, the error injector unit  may look for the occurrence of an entry that involves a first write to a variable. The error injector unit  may insert a new entry and\/or modify an existing entry before the first write that includes a read of the variable. For example, the error injector unit  may determine that entry  at line  represents a first write to the variable rtb_equal_to_count. The error injector unit  may modify entry  at line  so as to introduce an uninitialized read error.",{"@attributes":{"id":"p-0111","num":"0120"},"figref":["FIG. 12","FIG. 8"],"b":["1200","1200","1202","49","51","810","49","800","1202","1200"]},{"@attributes":{"id":"p-0112","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (rtDWork.X > 1) {"]},{"entry":[{},"\u2003\u2003\u2003rtb_equal_to_count = (rtDWork.X != 16);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Entry  () at line  originally performed an unconditional write to the variable rtb_equal_to_count. As modified by the error injector unit , however, entry  of automatically generated code  performs a conditional write to the variable rtb_equal_to_count. In particular, the variable rtb_equal_to_count is only written if the variable rtDWork.X is greater than 1. If the variable rtDWork.X is not greater than 1, then the variable rtb_equal_to_count is not written by the modified version of the entry. This condition, when the variable rtDWork.X is not greater than 1, then results in entry  at line  of the generated code  (corresponding to entry  () at line ), which includes a read of the variable rtb_equal_to_count, to represent an uninitialized read.","The generated code  including the uninitialized read error may still be compiled by the target language compiler , and executed. The generated code  with the uninitialized read error may be analyzed by one or more of the verification tools  of the verification tool suite , such as the Polyspace tool. The verification tool may examine the model  and the generated code  having the uninitialized read error introduced therein. If the selected verification tool detects the uninitialized read error in the generated code , then the user will have some confidence that the verification tool is capable of detecting such errors should they occur due to a bug in the code generator tool.","It should be understood that the error injector unit  may make alternative or additional modifications to introduce one or more uninitialized read errors into the generated code. For example, the error injector unit , instead of modifying entry  at line , may remove entry  at line  entirely. This would result in entry  at line  representing an uninitialized read.","Incorrect Literals","A literal, also referred to as a constant, explicit constant, or manifest constant, is a value, such as a numeric, alphabetic, or alphanumeric value, in a model and\/or in generated code. The value may be written according to the syntax of the particular language. Literals do not change in value. To the extent a model includes one or more literals, they should be accurately reproduced in code generated for the model.","Suppose a user wants to test whether a given verification tool can detect that a literal occurring in a model appears incorrectly in the generated code. In this case, the user may select the checkbox for entry from the error selection pane , thereby directing the error injection system  to introduce at least one incorrect literal error in code generated for the model  by the code generator .","In response, the error injector unit  may look for the occurrence of one or more literals in the code generated for the model . The error injector unit  may identify entry  at line  of the generated code , which includes the literal \u201c16,\u201d and corresponds to the Limit constant block . The error injector unit  may introduce an error in the generated code  by changing the literal \u201c16\u201d in entry  at line  to a different value, such as \u201c20\u201d.",{"@attributes":{"id":"p-0120","num":"0129"},"figref":["FIG. 13","FIG. 8"],"b":["1300","1300","1302","49","804","804","1302"]},"Again, the generated code  including the incorrect literal error at entry  may still be compiled by the target language compiler , and executed. The generated code  with incorrect literal error may be analyzed by one or more of the verification tools  of the verification tool suite , such as the Simulink Code Inspector tool. The verification tool may examine the model  and the generated code  having the incorrect literal error introduced therein. If the selected verification tool detects the incorrect literal error in the generated code , then the user will have some confidence that the verification tool is capable of detecting such errors should they occur due to a bug in the code generator tool.","Incorrect Data Dependency","The term data dependency may refer to the input signals, data, etc. on which a block of a graphical model operates. In the code generated for a model, one or more operations may be included that represent a given block of the model. The one or more operations should read inputs that correspond to the inputs to the given block in the model. If the one or more operations read a different input, then an incorrect data dependency error may be said to exist in the generated code.","Suppose a user wants to test whether a given verification tool can detect that an incorrect data dependency occurs in the generated code for a model. In this case, the user may select the checkbox for entry from the error selection pane , thereby directing the error injection system  to introduce at least one incorrect data dependency error in code generated for the model .","In response, the error injector unit  may identify one or more operations within the generated code that correspond to a block of the model , and modify one or more of the inputs to the operations. For example, the error injector unit  may identify an entry  at line  which represents the trigger input to the amplifier subsystem block  of the model . As shown in the model  and in the generated code at entry  at line , the trigger input to the amplifier subsystem block  reads the output of the relational operator block . In order to introduce an incorrect data dependency error into the generated code, the error injector unit  may modify entry  at line  so that it reads a value in the generated code that corresponds to the output of the sum block  of the model .",{"@attributes":{"id":"p-0126","num":"0135"},"figref":["FIG. 14","FIG. 8"],"b":["1400","1400","1402","54","810","222","810","54","800","1402","1400"]},{"@attributes":{"id":"p-0127","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if","((unit8_T) (1U + (uint32_T) rtDWork.X) &&"]},{"entry":[{},{},"(rtPrevZCSigState.Amplifier_Trig_ZCE != POS_ZCSIG))"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"As modified, the operation of entry  now reads the output corresponding to the sum block , i.e., (uint_T)(1U+(uint_T)rtDWork.X), rather than the output corresponding to the relational operator block .","The generated code  including the incorrect data dependency error may still be compiled by the target language compiler , and executed. The generated code  with incorrect data dependency error may be analyzed by one or more of the verification tools  of the verification tool suite , such as the Simulink Code Inspector tool. The verification tool may examine the model  and the generated code  having the incorrect data dependency error introduced therein. If the selected verification tool detects the incorrect data dependency error in the generated code , then the user will have some confidence that the verification tool is capable of detecting such errors should they occur due to a bug in the code generator tool.","Incorrect Array Indexing","A model may include an array data type. An array data type may have a plurality of elements. Examples of arrays include a 10-element vector, and an N-dimension matrix. A block of a model may operate on an array, or on a particular element of an array, e.g., by indexing into the array to reach the particular element. In addition, a block of a model may perform one or more operations and the results of the one or more operations may be an array. If the code generated for a model incorrectly indexes into an array either as a read or a write, then an incorrect array index error may be said to exist in the generated code.","Suppose a user wants to test whether a given verification tool can detect whether the code generated for a model incorrectly indexes into an array either during a read or write to the array. In this case, the user may select the checkbox for entry from the error selection pane , thereby directing the error injection system  to introduce at least one incorrect array indexing error in code generated for the model .","In response, the error injector unit  may identify one or more operations within the generated code that read or write to an array, and modify those one or more operations to change the array indexing. For example, the input to the amplifier subsystem block  of the model  is a 3-element array, and the output of the subsystem block  is also a 3-element array. The error injector unit  may locate the portion of the generated code that corresponds to the input and\/or output of the amplifier subsystem block , and change the array indexing. For example, entry  at line  and entries  at line  and  at line  correspond to operations performed by the subsystem block  and, more particularly, by the Gain block  of the subsystem . Entry  at line  operates on the first element, rtU.Input[], of the input to the amplifier subsystem block , and generates the first element, rtY.Output[], of the output of the amplifier subsystem block . Entry  at line  operates on the second element, rtU.Input[], of the input, and generates the second element, rtY.Output[], of the output. Entry  at line  operates on the third element, rtU.Input[], of the input, and generates the third element, rtY.Output[], of the output.","To introduce an incorrect array indexing error into the generated code for the model , the error injector unit  may modify one or more of entries - corresponding to lines -.",{"@attributes":{"id":"p-0135","num":"0144"},"figref":["FIG. 15","FIG. 8"],"b":["1500","222","806","808","1502","1504","60","62","1500","1502","1504"]},{"@attributes":{"id":"p-0136","num":"0145"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"rty.Output[0] = rtU.Input[2] <<1;"]},{"entry":[{},"rty.Output[1] = rtU.Input[1] <<1;"]},{"entry":[{},"rty.Output[2] = rtU.Input[0] <<1;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As shown, generated code  has been modified so that the first output element, rty.Output[], instead of being a function of the first input element, rtU.Input[], is now a function of the third input element, rtU.Input[]. In addition, the third output element, rty.Output[], instead of being a function of the third input element, rtU.Input[], is now a function of the first input element, rtU.Input[]. Such an introduced error may not be detected by a static analyzer, as the code including the introduced errors may compile, link and be executed.","The generated code  with the incorrect array indexing errors may be analyzed by one or more of the verification tools  of the verification tool suite , such as the Simulink Code Inspector and\/or the Valgrind tools. The verification tool may examine the model  and the generated code  having the incorrect array indexing errors. If the selected verification tool detects the incorrect array indexing errors in the generated code , then the user will have some confidence that the verification tool is capable of detecting such errors due to a bug in the code generator tool.","Incorrect Sample Time","A model may include portions whose blocks are sampled at different rates. For example, a model may include a first portion whose blocks are sampled at a fast rate, and a second portion whose blocks are sampled at a slow rate. A user or developer may specify the sampling rate of the blocks of the model. Such models may be referred to as multi-rate models. Specific transition blocks, such as the Rate Transition blocks available in the Simulink product, may be used to connect portions of a model operating at different rates. Code may be generated for multi-rate models. For example, the portions of the model that operate at different rates may be mapped to different rate grouped functions of the generated code. If the code for a block sampled at the slow rate is included in the fast rate grouped functions, then an incorrect sample time error may be said to exist in the generated code.",{"@attributes":{"id":"p-0141","num":"0150"},"figref":"FIG. 16","b":["1600","1600","1602","1604","1602","1606","1608","1604","1610","1612","1614","1616","1618","1620","1622","1602","1604","1602","1604"]},{"@attributes":{"id":"p-0142","num":"0151"},"figref":"FIG. 17","b":["1700","1600","1700","1702","33","66","1604","1600","1704","68","77","1602","1600","1702","1706","54","1616","1604","1600","1702","0","1704","1"]},"Suppose a user wants to test whether a given verification tool can detect the occurrence of an incorrect sample time error in the generated code for a model. In this case, the user may select the checkbox for entry () from the error selection pane , thereby directing the error injection system  to introduce at least one incorrect sample time error in code generated for the model .","In response, the error injector unit  may identify one or more entries of code in a section operating at a first sample rate that can be moved to a section operating at a second sample rate. By moving such an entry, the error injector unit  may introduce an incorrect sample time error into the generated code.",{"@attributes":{"id":"p-0145","num":"0154"},"figref":["FIG. 18","FIG. 17"],"b":["1800","1800","1802","33","65","1604","1600","1804","67","77","1602","1600","1706","1702","222","1800","1806","76","1616","1600","1806","1804","1","1602","1600","1616","1604","1600"]},"The generated code  including the incorrect sample time for the code corresponding to the Sum block  may still be compiled by the target language compiler , and executed. The generated code  with incorrect sample time error may be analyzed by one or more verification tools  of the verification tool suite , such as the Simulink Code Inspector and the Polyspace tools. The verification tool may examine the model  and the generated code  having the incorrect sample time error introduced therein. If the selected verification tool detects the incorrect sample time error in the generated code , then the user will have some confidence that the verification tool is capable of detecting such errors should they occur due to a bug in the code generator tool.","Unprotected Multi-Task Access","The code generated for a multi-rate model, such as model  (), may implement multiple tasks, such as a first task for implementing the functionality of the slow rate region , and a second task for implementing the functionality of the fast rate region . The generated code may include one or more synchronization points that control the transfer of data between the two tasks, for example through locks or other mechanisms. In particular, the generated code  () includes an entry  at lines - that implements a synchronization point. However, if data is transferred between different tasks without utilizing the one or more synchronization points, an unprotected multi-task error may be said to occur.","Suppose a user wants to test whether a given verification tool can detect the occurrence of an unprotected multi-task access in code generated for a model. In this case, the user may select the checkbox for entry from the error selection pane , thereby directing the error injection system  to introduce at least one unprotected multi-task access error in code generated by the code generator .","In response to the selection of the unprotected multi-task access error class, the error injector unit  may evaluate the code as it is being generated, or after the code has been generated, for the model . The error injector unit  may modify the generated code, for example by removing line  of the generated code , which controls when the \u201crtDWork.RateTransition_Buffer\u201d variable is read. Alternatively, the error injector unit  may modify line  to read as follows:\n\n","The generated code with the one or more unprotected multi-task access errors may be analyzed by one or more verification tools  of the verification tool suite , such as the Polyspace or Simulink Code Inspector tools. If the selected verification tool detects the introduction of the error, then the user will have some confidence that the verification tool is capable of detecting such errors should they occur due to a bug in the code generator tool.","Missing Type Cast","Data type refers to the way in which numbers are represented in computer memory. Different representations of numbers provide different precision, dynamic range, performance and memory usage. The modeling environment  may support the specification of various data types for signals and block parameters. Exemplary data types include: double-precision floating point (double), signed 8-bit integer (int), unsigned 8-bit integer (uint), signed 32-bit integer (int), and unsigned 32-bit integer (uint), among others. Data types of signals and block parameters may be specified within a model, for example by the user. Data types also may be inherited from other signals, blocks or other elements of the model. Code may be generated for a model, and the generated code may represent the signals and block parameters of the model according to the data types specified in the model. If the data type for a signal or block parameter in the generated code differs from the data type specified in the model for that signal or block parameter, then a missing type cast error is said to exist in the generated code.",{"@attributes":{"id":"p-0154","num":"0164"},"figref":"FIG. 19","b":["1900","1900","1902","1904","1906","1908","1909","1910","1902","1904","1906","32","1908","8","1909","1910","32"]},{"@attributes":{"id":"p-0155","num":"0165"},"figref":["FIG. 20","FIG. 21"],"b":["2000","1900","2000","2000","2002","2004","39","40","1902","1904","1900","2100","1900","2100","2100","2102","39","1910","1900"]},"Suppose a user wants to test whether a given verification tool can detect when a data type specified in the model is missing or appears incorrectly in the generated code. In this case, the user may select the checkbox for entry from the error selection pane , thereby directing the error injection system  to introduce at least one missing type cast error in code generated for a model by the code generator .","In response, the error injector unit  may evaluate the code as it is being generated, or after the code has been generated, and introduce a missing type cast error into the code. The error injector unit  may alter or modify the generated code to introduce a missing type cast error. For example, the error injector unit  may modify entry  at line  to read as follows:\n\n","As shown, the error injector unit  has removed \u201c(int_T)\u201d from entry , thereby introducing a missing type cast error into the generated code. The generated code including the missing type cast error may still be compiled by the target language compiler , and executed. The generated code with missing type cast error may be analyzed by one or more verification tools  of the verification tool suite , such as the Simulink Code Inspector tool. The verification tool may examine the model  and the generated code having the missing type cast error introduced therein. If the selected verification tool detects the missing type cast error in the generated code, then the user will have some confidence that the verification tool is capable of detecting such errors should they occur due to a bug in the code generator tool.","Variable Shadowing","A graphical model may include a plurality of scopes or levels. Objects, such as variables, functions and data stores, may be defined at a particular scope or level. Referring to an object by name may result in the use of the object that is closest in scope. This can cause errors if the wrong variable is being used.","Suppose a user wants to test whether a given verification tool can detect whether the code generated for a model includes a variable shadowing error. In this case, the user may select the checkbox for entry from the error selection pane , thereby directing the error injection system  to introduce at least one variable shadowing error in code generated for a model.","In response, the error injector unit  may evaluate the code as it is being generated, or after the code has been generated, for the model, and introduce a variable shadowing error into the code. In an embodiment, the error injector unit  may introduce the one or more errors by modifying the generated source code, such as code . In another embodiment, the error injector unit  may introduce the one or more errors by modifying one or more IRs generated from the model  during the code generation process.",{"@attributes":{"id":"p-0163","num":"0174"},"figref":["FIG. 22","FIG. 8"],"b":["2200","2200","2202","2205","49","52","804","800","2206","38"]},"It should be understood that the generated code  having such an introduced error may still be compiled and executed. The generated code  with the introduced error, e.g., entries - replacing entry , may be analyzed by one or more verification tools  of the verification tool suite , such as a compiler or a static code checker. If the selected verification tool detects that entries - represent a variable shadowing error, the user will have some confidence that the verification tool is capable of detecting such errors should they occur due to a bug in the code generator tool.","Memory Leak","Suppose a user wants to test whether a particular verification tool can detect a memory leak in code generated from a model. In this case, the error injector unit  may be configured to allocate memory in the generated code, but not free the allocated memory. For example, the error injector unit  may include a \u201cmalloc( )\u201d function in the generated code, for example as part of an initialize function, such as a \u201cmodel_initialize( )\u201d function. Normally, such memory allocations are freed, for example in a \u201cmodel_terminate( )\u201d function. However, the error injector unit  may allocate memory but not free the allocated memory, thereby introducing a memory leak into the generated code. The generated code having the memory leak introduced therein may be analyzed by one or more verification tools , such as the Rational\u00ae Purify\u00ae dynamic software analysis tool.","In an embodiment, the class of error may be selected, e.g., by the user, based on the analysis to be performed on the generated code. For example, a user may select an error class type that should be detected by a static code analyzer, by a compiler during the compilation of the generated code, or by a dynamic analyzer. In response to the selection of an error to be detected by a static analyzer, the injected error selector  and the error injector unit  may introduce an error in which the generated code relies on C promotion rules instead of explicitly elaborating a statement with parentheses. Such an introduced error should be detected by a static code analyzer as a MISRA-C violation, even though such code is semantically and syntactically valid C code. In response to the selection of an error to be detected at a compile time, the injected error selector  and the error injector unit  may assign a constant data pointer to a non-constant data pointer. Code containing such an introduced error may compile and run successfully, but is expected to produce a warning during compilation. In response to the selection of an error to be detected by a dynamic analyzer, a run-time error, such as a memory leak, an array index out of bounds, etc., may be introduced automatically into the generated code.","In addition, the class of error that may be selected for introduction into the to generated code may relate to one or more of the optimizations performed by the code generator . For example, a user may select an error class relating to incorrect loop unrolling, missing arguments in inlining, incorrect strength reduction, or reuse of functions that are different, etc. For example, if the code generator optimized the generated code to inline a function that is normally,",{"@attributes":{"id":"p-0169","num":"0180"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"A = var1;"]},{"entry":[{},"B = var2;"]},{"entry":[{},"Y = subtract(A,B)"]},{"entry":[{},"}"]},{"entry":[{},"Whereby sum is"]},{"entry":[{},"double subtract(in1,in2)"]},{"entry":[{},"{"]},{"entry":[{},"\u2002return in1\u2212in2;"]},{"entry":[{},"}"]},{"entry":[{},"A bug in the code generator for the inlined case might be:"]},{"entry":[{},"{"]},{"entry":[{},"\u2002Y = B\u2212A;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The number of error instances that the error injector unit  actually introduces into the generated code may be specified in a report produced by the report generator . If the error injector unit  was unable to introduce any errors of a given class, the report may indicate the introduction of zero errors of that error class. In addition, the error injection system  may issue a warning, e.g., to the user, that no errors of the specified error class were introduced into the generated code.",{"@attributes":{"id":"p-0171","num":"0182"},"figref":"FIG. 23","b":["2300","2300","2300","2300","2302","2304","2304","2306","2302"]},"The report  also may include a result summary section . Section  may include one or more entries for each error that was detected by the verification tool, e.g., Simulink Code Inspector. For example, the result summary section  may include an entry  which indicates that the verification tool located a violation in the generated code that corresponds to the introduced error. The entry may include a violation region  containing information regarding the identified error, such as the portion of the generated code having the identified error. The entry  also may include a hyperlink  that links to another report (or to another part of the report ) providing further details of the analysis performed by the verification tool. By selecting the hyperlink , this detailed report may be presented in the browser application.","In an embodiment, one or more components may interact with the error injection system  through the API . For example, configuration information, such as configuration information received from a user via the UI engine  may be passed to the error injection system  via the API . In addition, to the extent the report generator  is not part of the error injection system , information about one or more introduced errors and\/or information about what errors were detected by the verification tools  may be returned to the report generator  via the API . Other components also may access the error injection system  via the API . Since the verification tools may produce output in different formats, it may be advantageous in an embodiment to collect results from the different tools, and map them into a canonical form. For example, one tool may produce a warning such as:","Warning : variable shadowing found on line  with variable \u2018foo\u2019 Another tool may produce the following warning for the same error:","Line  shadows the variable \u2018foo\u2019","The API  may create a canonical form to insulate the programmer from varying or alternative outputs produced by the specific tools. For example, the output or results produced by the different tools may be collated and made accessible from the modeling environment  or another tool, such as the MATLAB development environment. For example, the API  may support the following commands from the MATLAB development environment in order to query the results generated by the tools:\n\n","Despite the results coming from a plurality of tools (e.g., the FlexeLint and Parasoft C++ Test static code analysis tool) with different output representations of warnings, the output for the example above using the API  is consistent. Specifically, an exemplary output is shown below:\n\n","The foregoing description of embodiments is intended to provide illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from a practice of the invention. For example, while a series of acts has been described above with respect to the flow diagrams, the order of the acts may be modified in other implementations. Further, non-dependent acts may be performed in parallel. Also, the term \u201cuser\u201d, as used herein, is intended to be broadly interpreted to include, for example, a computer or data processing system (e.g., system ) or a user of a computer or data processing system, unless otherwise stated.","Further, certain embodiments of the invention may be implemented as logic that performs one or more functions. This logic may be hardware-based, software-based, or a combination of hardware-based and software-based. Some or all of the logic may be stored in one or more tangible non-transitory computer-readable storage media and may include computer-executable instructions that may be executed by a computer or data processing system, such as system . The computer-executable instructions may include instructions that implement one or more embodiments of the invention. The tangible non-transitory computer-readable storage media may be volatile or non-volatile and may include, for example, flash memories, dynamic memories, removable disks, and non-removable disks.","No element, act, or instruction used herein should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article \u201ca\u201d is intended to include one or more items. Where only one item is intended, the term \u201cone\u201d or similar language is used. Further, the phrase \u201cbased on\u201d is intended to mean \u201cbased, at least in part, on\u201d unless explicitly stated otherwise.","The foregoing description has been directed to specific embodiments of the present invention. It will be apparent, however, that other variations and modifications may be made to the described embodiments, with the attainment of some or all of their advantages. For example, in addition to or instead of executable graphical models, the invention may be used with graphical models having executable semantics, such as models created using Architecture Analysis and Design Language (AADL), Uniform Modeling Language (UML), and\/or SysML tools. In addition, the generated code may include fixed-point code to run on a fixed-point processor, or code to emulate fixed-point behavior on a floating-point processor. Therefore, it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention."],"DETDESC":[{},{}],"heading":"DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT"}
