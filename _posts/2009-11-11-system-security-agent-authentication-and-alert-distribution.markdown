---
title: System security agent authentication and alert distribution
abstract: An aggregation agent may combine and correlate information generated by multiple on-host agents and/or information generated in response to multiple security events. The aggregation agent may transmit the combined information to a security console. The security console may check the identity of the aggregation agent to determine whether to accept the information. The security console may map information to one or more consoles.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07937760&OS=07937760&RS=07937760
owner: Intel Corporation
number: 07937760
owner_city: Santa Clara
owner_country: US
publication_date: 20091111
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application is a Divisional of U.S. application Ser. No. 11\/026,646, filed Dec. 30, 2004 now U.S. Pat. No. 7,631,354.","Embodiments of the invention relate to network security and particularly to host agent-based security management.","To address the increase in malware (e.g., virus, worm) and unwanted system intrusions (e.g., hacker, denial of service attack), the number of security protections has increased on electronic devices\/machines, including computers, personal digital assistants (PDAs), or other networked devices. Many agent-based security solutions are currently employed, an agent being hardware and\/or software that may monitor system conditions, detect anomalous behavior, prevent attacks, etc. The number and complexity of the agents is increasing, and each agent may generate alert messages or other security-related information\/reports to transmit to a remote security console\/server. If a security breach were to occur, it may affect areas monitored by multiple agents, each of which may generate an alert\/report. Thus, duplicate information may be crowding the network bandwidth as the agents report to a remote security console. Furthermore, as the number of agents increases, the number of ports open on the host machine typically increases as each agent establishes a link over which to report. As more ports are opened, potential vulnerability of the host increases, as each port represents a potential attack point for the system. Furthermore, as the number of agents increases, the complexity of security management increases. Additionally, there is currently no provision to ensure that alerts\/reports are coming from the agents\/entities that appear to be sending them.","Various references herein to an \u201cembodiment\u201d are to be understood as describing a particular feature, structure, or characteristic included in at least one embodiment or implementation of the invention. Thus, the appearance of phrases such as \u201cin one embodiment,\u201d or \u201cin alternate an embodiment\u201d may describe various embodiments of the invention, and may not necessarily all refer to the same embodiment.","A networked system may be a computer or other computing device interacting with a network over a network interface medium (e.g., a network interface controller card, a wireless interface circuit, etc.). Such a system may include multiple agents to monitor various aspects of the system and\/or system performance, and the agents may be resident on the system. An agent may be considered to be resident on the host if the agent is an embedded circuit and\/or embedded system, a software module to execute on the system's operating environment (hardware and\/or software, which may include an operating system), or is a standalone physical or software entity mounted on the system. Examples may include an antivirus application\/program, intrusion detection system (IDS), intrusion prevention system (IPS), host-based firewall, compliance agent, vulnerability scanning agent, event log, patch monitor, or other component to perform a security function and generate security and\/or alert information\/data. In one embodiment an operating system also tracks certain security-related events, and the operating system subroutine\/thread may be considered an \u201cagent\u201d for purposes of discussion herein. Thus, in a generic sense, an agent may be a part of an application\/program that generates alert\/report data.","In one embodiment the agents may be associated with one or more management consoles, which may be generically referred to as \u201cconsoles\u201d herein. A console may be a physical entity and\/or a software module operating at a security server coupled over a network to the host system having the agents. Just as multiple consoles may be associated with a single agent, a single console may manage multiple agents, and thus be associated with the multiple agents. Agents and consoles may thus have an interrelationship for data exchange, and management action by a console based on information from an agent. This interrelationship may be referred to by expressing that an agent corresponds to or is associated with a console, or vice versa. The data that may be passed from an agent to a console, or, for example, configuration settings that may be sent from the console to an agent may relate to security alerts. The alerts may indicate a vulnerability, an attack, a failure, an anomalous execution event, corrupt data, etc. An event may trigger multiple agents to generate alert data, and in some cases result in duplication of alert information.","Currently, alerts from security software and operating system components flow to individual consoles associated with the particular agent gathering and transmitting information. Thus, multiple ports may be open on a system merely to pass security information. Traditionally, the individual consoles send data to a central console for aggregation and correlation of alerts. This flow may result in a considerable time delay (lag) before triggering events at the host system may reach the central console and be dealt with. Such a delay may result in serious compromise of the host system and\/or the network of which the host system is a client.","With an aggregation or correlation agent placed at the host system end of the network, many problems associated with traditional agent management may be ameliorated. In one embodiment an aggregation\/correlation agent is mounted on the host system\/client machine. As discussed in more detail below, the agent may be hardware, software, and\/or a combination. In another embodiment the agent resides at a switch or router. The agent may aggregate and correlate alert data received from multiple agents on the host system. Functions that may be performed by the aggregation agent include, but is not limited by, one or more of the following: authenticating the multiple agents, authenticating itself (the aggregation agent) to a security server, aggregating alert information, correlating alert information, compressing an alert message, and communicating alert information to one or more security consoles. The agent may also provide functions to encrypt and\/or sign the aggregated data. The aggregation agent may have access to a secure storage and\/or a secure communication link to reduce the risk of compromise of the aggregation agent and reduce the risk of spoofing the agent.","Aggregating and correlating the alert information may include combining multiple alerts from an agent into a single alert message (cross-message aggregation), combining alerts from multiple agents into a single alert message (cross-agent aggregation), a combination of these two, analyzing the alerts and intelligently combining selected ones of the alerts into a single alert message, and generating a tag to associate an alert with an agent. Aggregating and\/or compressing the data\/alert message may serve to reduce the number of ports open, and the communication bandwidth. Encrypting and\/or signing the data\/alert message may serve to secure the message from attack and\/or validate that the data is indeed passed from the entity purporting to transmit the data\/alert message.","In one embodiment the aggregation agent communicates with each individual console to provide alert data of interest to the console (e.g., data associated with an on-host agent corresponding to the console, an alert that affects a resource monitored by the console). In an alternate embodiment, the aggregation agent communicates directly with a central or control console, which may then distribute information to individual consoles. In addition to receiving and distributing the alert data, the central console may manage a secure link with the aggregation agent, for example, configuring the link for communication between the aggregation agent and the central console. Configuration of the communication link between the aggregation agent and the central console may include setting a channel, dynamically altering a configuration established at initialization, setting a protocol, specifying an encryption standard, etc.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","100","111","113","111","113","100","100","111","113"]},"Host system  may include aggregation agent , which represents an agent to aggregate and correlate data from agents -. In one embodiment aggregation agent  represents a hardware-based agent that resides on the hardware of host system , below the OS. Thus, aggregation agent  may not be visible\/accessible to the host OS and\/or other elements of the operating environment of host system .","Each of agents - may collect and\/or generate data indicating a security state of a resource of host system , which is forwarded to aggregation agent . Aggregation agent  may operate as a local authentication entity for agents -. In this manner, aggregation agent  may authenticate that information received that is purported to be from a particular agent is actually from the purported agent. For example, one simple method may be to perform a hash on an agent application executable. Hardware agents may present keys. Thus, aggregation agent  may verify the validity of agents -.","Aggregation agent  may aggregate data from agents - in a variety of ways. For example, agent  may generate multiple alerts, which may be sent individually to aggregation agent . Rather than sending multiple alert messages from agent , aggregation agent  may aggregate the multiple alerts into a single alert message, and tag the message as corresponding to agent . In another example, agent  and agent  may generate the same or a similar alert message or generate data resulting from the same security event. Rather than sending alerts from two separate agents when the alerts correspond to the same security event, aggregation agent  may transmit a single alert, the alert being tagged as corresponding to both agent  and agent  (e.g., including two identifiers in the message). Additionally, agent  and agent  may generate alert data using a common alert format (for example, a standard security alert message), which can be consolidated into a single message of the common format, with alert information included from both agents.","In one embodiment aggregation agent  includes intelligence (e.g., logic to determine and\/or compare the contents of reports\/alerts, to process information received at aggregation agent , etc.) to enable aggregation agent  to selectively report alerts. For example, agent  may indicate an alert to aggregation agent . Aggregation agent  may recognize the alert as corresponding to a known vulnerability and\/or attack against which a compliance agent in system  indicates that system  is inoculated. System  may be inoculated against a threat if it has updates\/patches installed, has defense mechanisms in place that recognize and\/or operate against a threat or vulnerability, etc. With a valid compliance agent\/engine operating on system , aggregation agent  may determine that there is no need to generate an alert to a security server for an attack that poses no threat to system . In such an implementation aggregation agent  may have, or have access to, a security policy, a reporting policy, and\/or attack signature information.","In addition to aggregation and correlation, aggregation agent  may include capabilities to encrypt and\/or sign (attest) alert messages to be sent over network . In one embodiment the encryption standard may be specified by a receiving entity, for example, control console  of management system . Signing the alert message may include use of a cryptographic key to encode the message. Signing the alert may provide assurance to a receiving entity (e.g., a consol) that the entity sending the alert is an entity that should send the alert, and that the entity is indeed who\/what it purports to be. This may, for example, reduce exposure to spoofing. Aggregation agent  may also compress alert data in addition to aggregating the data, to further reduce network traffic usage. While aggregation agent  in one embodiment transmits alert data to control console , in an alternate embodiment aggregation agent  directly transmits alert data to a console - corresponding to the agent - from which the data originated.","Link  over network  represents a transmission path from aggregation agent  to management system . Link  may include a wired or wireless transmission path. The transmission path may be over coaxial cable, twisted pair (e.g., Category-5 cable), etc. In one embodiment control console  manages link , and indicates a port, channel, protocol, encryption, etc. These configurations may be selected in an authentication process when the link is established. The configurations may be dynamically modifiable by control console . In one embodiment control console  may re-direct aggregation agent  from communicating with control console  to a different console, for example, in the case of failover.","Control console  and consoles - represent hardware and\/or software security enforcement and\/or security decision points. They may, for example, be secure enterprise applications on a security server. Management system  represents a security system, or security management that may, in one embodiment manage security of a local area network . Consoles - may correspond to each of agents -, and thus may include antivirus enforcement, IDS, IPS, or firewall control, a compliance server, a security event server, etc. Consoles - may be mapped one to one (have a single corresponding console for each agent), as well as being mapped M to N, where M and N are integers that may not be equal. For example, one or more agent and console combinations may correspond to an N to one or one to N relationship. In one embodiment control console  authenticates consoles - when distributing alert information.","Control console  may receive an aggregated message, having data aggregated in any manner discussed above, as well as receiving data aggregated in different ways from aggregation agent . Thus, for example, if agents  and  represent agents sharing a common alert format, and agent  uses a different alert format, aggregation agent  may aggregate an alert generated by agent  with another alert generated by agent  and transmit the aggregated alert, as well as cross-correlating alerts from agents  and  and transmitting an aggregated alert with data from both agents to control console . Control console  may, in response to receiving the alert message, determine which of consoles - should receive the message. In one embodiment this involves resolving a tag or identifier in the message and transporting the message to the indicated entity. Alternatively, or in addition, this may involve storing\/managing a list of information desired by each individual console -, and pass specific information to the appropriate console .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 2","FIG. 2"],"b":["0","0","0","0"]},"In one embodiment agent A resides on the host machine on which host agents  through N reside. In another embodiment agent A resides outside of the host machine, for example, at a local area network server, a wireless access point, or a router. There may be benefits to having agent A reside on the host machine as opposed to outside the host machine. For example, having agent A outside the host machine may still require host agents  through N to have a large number of ports open to communicate with agent A. However, there may be advantages in the implementation of the aggregation functions outside the host machine, such as the development and deployment of agent A.","Agent A may connect to the network through network infrastructure A, which may represent a server, an access point, a switch, a router, etc., or a combination of these. Agent A is not necessarily directly coupled to network infrastructure A. In one embodiment an agent B may be present in the system. Agent B may be a correlation or aggregation agent as is agent A. In one embodiment agent B represents agent A located on the network side of network infrastructure A rather than on the client side of network infrastructure A. In addition to representing an alternate deployment of agent A, agent B may also represent a distribution of the functions of agent A, which may execute some functions on the client side of network infrastructure A as well as functions on the network side of network infrastructure A. For example, agent A may represent the aggregation functions, and agent B could represent compression and\/or encryption functions.","At the security management side, a management server B may reside on the network side of network infrastructure B. Network infrastructure B may be similar or the same as network infrastructure A, but is located at the security management side of the network. As with the potential distribution of the functions of the aggregation agent, or the alternate locations for the aggregation agent as represented by agent A and agent B, a management server or console may have distributed functions, or may have alternate locations, as represented by management server A and management server B. The management server may be understood to represent or to include a control console, as discussed above. Thus, management server A may distribute data received from agent A to servers  to N, which may correspond to a host agent  to N.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["300","310","300","310","310"]},"Interface  may provide a communication interface between aggregation agent  and a software module\/program\/application, a computing platform, an external electronic system (not shown), and\/or network. For example, aggregation agent  may run on a computing platform on a computing system\/device with interface  to provide a communication interface to resources on the computing system, for example, programs, software libraries, processors, etc.","In one embodiment application  may represent an application running on aggregation agent . In another embodiment application  may represent one or more programs and\/or other series of instruction sequences provided from outside aggregation agent , for example, over interface  to be executed on control logic . In one embodiment aggregation agent  may execute part of all of a user application or a system application. Application  may provide instructions to control logic  to cause or result in aggregation agent  performing an operation.","Instructions and\/or data may also be provided to control logic  by memory . For example, control logic  may access, or read a portion of memory  to obtain instructions to perform a series of operations and\/or data for use with operations. Thus, control logic  can receive one or more instructions from internal application software running locally associated with aggregation agent , such as application , from memory , and\/or from an external application, storage medium, etc., through interface . Memory  may also store information for use by aggregation agent  and\/or represent a memory accessible to aggregation agent . For example, memory  may be a storage structure having statistics to be correlated.","Aggregation agent  includes correlation engine . Correlation engine  is shown with various features, which represent functions or features that correlation engine  may provide. Each function or feature may be provided through performing one or more operations. Correlation engine  may include one or more of: receive data feature , attestation feature , correlation feature , compression feature , transmission feature , and security feature . In one embodiment one or more of these features may exist independently of and\/or be external to aggregation agent . Thus, correlation engine  may be more complex or less complex, containing some, all, or additional features to those represented in .","Receive data feature  may provide functionality to enable correlation engine  to gather data to aggregate from multiple agents. The host agents may be coupled with aggregation agent  over a bus or over a software link (e.g., a function call, a reserved memory location). In one embodiment receive data feature  includes polling or querying the agents to determine if they have data or alerts for aggregation agent . Other mechanisms of receiving data may be via interrupt, in that a host agent may trigger a software and\/or hardware interrupt mechanism of aggregation agent  if an event occurs that generates an alert, or the use of a coordinated communication mechanism, for example, a round robin scheme. Receive data feature  may include functionality associated with receiving data in a standard format from one or more agents, and supporting the standard alert message format. Likewise, receive data feature  may need to support non-standard formats of data and interpret the data received.","Attestation feature  may provide functionality to enable correlation engine  to authenticate the agents with which aggregation agent  is coupled. This may be accomplished, for example, through use of a hash of the agent executable. Hardware agents may have keys. In addition to authenticating the host agents, attestation feature  may refer to the ability of attestation feature  to provide credentials to a management console to authenticate aggregation agent . In one embodiment aggregation agent  signs every message as a form of non-repudiation on messages from aggregation agent  to a management console. Keys may be used by attestation feature  to provide the secure information. Keys may be stored in a non-volatile storage. Non-volatile storage  represents a non-volatile storage medium accessible to aggregation agent , for example, a flash, a hard-drive, a trusted platform module (TPM). Non-volatile storage  is not necessarily a part of aggregation agent , nor is non-volatile storage  necessarily under the exclusive control of aggregation agent , although it may be. Non-volatile storage  may be a secure storage (e.g., a TPM), and in one embodiment is a storage location inaccessible to a host operating environment, for example, an operating system or host application.","Correlation feature  may provide functionality to enable correlation engine  to correlate data received from the multiple host agents. Correlation of data may include intelligent analysis of the data received. Data may be combined to reduce or eliminate duplicate information, or to reduce a number of messages sent. Correlation feature  may include the capability to combine multiple separate reports\/alerts from the same or different agents into a single message, remove duplicate alerts, and tag data as corresponding to a particular one or ones of the host agents present in a client machine. In one embodiment correlation feature  include the ability to determine that a reported event is not a threat to the particular client machine, and so suppress the report. An event may not be a threat to a client machine if, for example, the client machine knows of the particular attack posed and has protective mechanism(s) in place to prevent susceptibility to the attack.","Compression feature  may provide functionality to enable correlation engine  to compress an aggregated data message that may be prepared for transmission to a management server\/console. Techniques to compress data messages are known and will not be discussed in detail herein.","Transmission feature  may provide functionality to enable correlation engine  to send an aggregated message to a management entity, for example, a security server that may include a management console. In one embodiment transmission feature  provides the ability to communicate with a central console that distributes the message data to one or more consoles associated with a host agent that generated the data. In another embodiment transmission feature  transmits directly to a console associated with a host agent that generated the data. Transmission feature  may also include the ability to configure the communication link between aggregation agent  and a security server according to specifications given by the security server. In one embodiment this includes dynamically adjusting an established link, and may include switching between different security server entities.","Security feature  may provide functionality to enable correlation engine  to provide security in transmission of an aggregated data message. For example, security feature  may enable correlation engine  to sign the aggregated data message and\/or provide authentication credentials to a receiving entity (e.g., a console). In one embodiment this may include presenting a cryptographic key, which may be stored in a secure memory device. Security feature  may also enable correlation engine  to encrypt data transferred from aggregation agent  to a security server\/console. The encryption used may be based upon a configuration of aggregation agent  and\/or be based upon an encryption standard indicated by the receiving entity. Correlation engine  may additionally compress the aggregated data message in preparation for transmission to the receiving entity.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["400","410","400","410","410"]},"Interface  may provide a communication interface between management console  and a software module\/program\/application, a computing platform, an external electronic system (not shown), and\/or network. For example, management console  may run on a computing platform on a computing system\/device with interface  to provide a communication interface to resources on the computing system, for example, programs, software libraries, processors, etc.","Application(s)  represent one or more applications that may interact with management console . In one embodiment application  may represent an application running on management console . In another embodiment application  may represent one or more programs and\/or other series of instruction sequences provided from outside management console , for example, over interface  to be executed on control logic . In one embodiment management console  may execute part of all of a user application or a system application. Application  may provide instructions to control logic  to cause or result in management console  performing an operation.","Instructions and\/or data may also be provided to control logic  by memory . For example, control logic  may access, or read a portion of memory  to obtain instructions to perform a series of operations and\/or data for use with operations. Thus, control logic  can receive one or more instructions from internal application software running locally associated with management console , such as application , from memory , and\/or from an external application, storage medium, etc., through interface . Memory  may also store information for use by management console  and\/or represent a memory accessible to management console . For example, memory  may be a storage structure having statistics to be correlated.","Management console  includes management engine . Management engine  is shown with various features, which represent functions or features that management engine  may provide. Each function or feature may be provided through performing one or more operations. Management engine  may include one or more of: line configuration feature , agent identification feature , alert distribution feature , enforcement feature , and security feature . In one embodiment one or more of these features may exist independently of and\/or be external to management console . Thus, management engine  may be more complex or less complex, containing some, all, or additional features to those represented in .","Line configuration feature  may provide functionality to enable management engine  to control configuration of a link between management console  and an aggregation agent over which management console  receives aggregated security data. The configuration may occur at initialization of the aggregation agent, or at initialization of the link as the aggregation agent attempts to establish the communication path with which to send security data. The configuration may include settings related to the port, channel, protocol, encryption standard, bit rate, etc. In one embodiment the link is private between management console  and the aggregation agent, and controlled with line configuration feature .","Agent identification feature  may provide functionality to enable management engine  to authenticate the aggregation agent sending security information. The aggregation agent may be authenticated at the initialization of the communication link between the aggregation agent and management console . Agent identification feature  in one embodiment expects a signature and\/or other form of attestation by the aggregation agent on every message sent to management console . This may reduce the possibility of spoofing, and improve the possibility that the security message is being provided by the entity that management console  believes is sending the message.","Alert distribution feature  may provide functionality to enable management engine  to determine which of multiple consoles should receive data from a security alert\/report message. In one embodiment this includes obtaining a console identifier from the message and forwarding the message to the proper console. In another embodiment alert distribution feature  includes managing a list, map, or table (e.g., a look-up table) with information that is requested by each console. Alert distribution feature  may extract a data element from a received message and determine with the list\/table which console or consoles should receive the information. For example, a breach of a host-based firewall may trigger both a host firewall agent and a compliance agent to register security events, which may be sent to the aggregation agent. The aggregation agent may determine that the event alerts overlap, and so aggregates the alert into a single \u201cfirewall breach\u201d alert that is transmitted to management console . Alert distribution feature  may then determine from a look-up table that both the compliance console and the firewall management console want such a message. The message may then be forwarded on to the two (or potentially one or more than two) consoles. In similar fashion, an IDS agent and an antivirus agent may detect a virus event, and this message could be aggregated at the aggregation agent and mapped back out at management console .","Enforcement feature  may provide functionality to enable management engine  to take appropriate action based on the messages received at management console . This may include, for example, quarantining the client from the network, generating an alert to an administrator, etc.","Security feature  may provide functionality to enable management engine  to process a received message according to one or more security and\/or transmission techniques. For example, an aggregated alert message may be received compressed from the transmitting agent. Security feature  may provide the ability to decompress the message to determine its contents and\/or separate individual alerts from the aggregated alert message. Security feature  may provide the ability to decrypt an encrypted message from the agent. In one embodiment security feature  works in conjunction with line configuration feature  to provide the ability to receive and process a message according to a designated transmission configuration. Security feature  may provide authentication services and\/or information to verify the identity of an agent. This may include the management of security keys for use in authentication.","Aggregation agent  of  and\/or management console  may be implemented with firmware, software, or a combination of firmware and software. Aggregation agent  and\/or management console  may be implemented in hardware and\/or a combination of hardware and software and\/or firmware. The software and\/or firmware content may provide instructions to cause or result in executing hardware to perform various operations, including some or all of the functions\/features described above. Instructions that may cause\/result in the performing of functions\/operations described herein may be received via an article of manufacture by a machine\/electronic device\/hardware and performed by\/on the machine. An article of manufacture may include a machine accessible\/readable medium having content to provide the instructions. A machine accessible medium includes any mechanism that provides (i.e., stores and\/or transmits) information\/content in a form accessible by a machine (e.g., computing device, electronic device, electronic system\/subsystem, etc.). For example, a machine accessible medium includes recordable\/non-recordable media (e.g., read only memory (ROM), random access memory (RAM), magnetic disk storage media, optical storage media, flash memory devices, etc.), as well as electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.), etc. The machine accessible medium may further include a computing system having code loaded on the computing system that the computing system may be able to execute when the computing system is in operation. Thus, delivering a computing system with such code may be understood as providing the article of manufacture with such content described above. Furthermore, storing code on a database or other memory location and offering the code for download over a communication medium via a propagated signal may be understood as providing the article of manufacture with such content described above. Thus, aggregation agent  and\/or management console  may represent a software module and\/or a general computing element (e.g., a processor), a specific computing element (e.g., dedicated logic) executing software\/firmware, and\/or a signal embodying data to define\/provide instructions to execute features of aggregation agent  and\/or management console .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 5","b":["502","504","506"]},"If authentication is unsuccessful, , the any data received from the host agents at the aggregating agent may be dropped, . If the authentication is successful, , the aggregating agent may proceed to perform one or more processes on the data to prepare to transmit the data to the management console. For example, the aggregating agent may aggregate the data, , taking multiple alert messages and preparing a single alert message with all the alert data. The data may also be compressed according to known techniques, and\/or encrypted, . Encryption may use any known encryption, whether standard or proprietary. The aggregating agent may also sign the data message, , and transmit the data to the management console on a security server, .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 6","b":["602","604"]},"If the signature is not valid, , any data received from the aggregating agent may be dropped, . If the signature is determined to be valid, , the control console may process the message. If the message is encrypted and\/or compressed, the control console may decrypt and\/or uncompress the message, . This may be based on standard techniques as are known, and would be the reverse procedures of those performed by the aggregating agent. Additionally, the control console may correlate the data, . In this context, correlating the data may refer to the control console determining a console associated with an agent and\/or associated with the data in the message that should receive the information. Non-repudiated data may then be sent to the appropriate management system, for example, a management console, or a console associated with the host agent that generated the data, .","Besides what is described herein, various modifications may be made to the disclosed embodiments and implementations of the invention without departing from their scope. Therefore, the illustrations and examples herein should be construed in an illustrative, and not a restrictive sense. The scope of the invention should be measured solely by reference to the claims that follow."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following description includes discussion of various figures having illustrations given by way of example of implementations of embodiments of the invention. The drawings should be understood by way of example, and not by way of limitation.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
