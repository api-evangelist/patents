---
title: Database data recovery system and method
abstract: The present invention relates to a system and method of data restoration, for instance, after the occurrence of a user error. In particular, snapshot database can be maintained that stores a copy of database data. The snapshot database does not have to store a complete copy of all data on a source database, but rather shares data that is common to both but not necessarily identical. If an error occurs on the primary database then the database can be reverted back to a point in time prior to the error by replacing source database files with snapshot files. Additionally, an undo component can be employed in conjunction with the snapshot to approach an error to a finer grained point in time. In brief, the present invention can restore a database much faster and simpler, while utilizing less space and resources than conventional data restoration technologies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08095511&OS=08095511&RS=08095511
owner: Microsoft Corporation
number: 08095511
owner_city: Redmond
owner_country: US
publication_date: 20040428
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention claims the benefit of U.S. Provisional Application Ser. No. 60\/547,641, filed Feb. 25, 2004 entitled Database Data Recovery System and Method, which is incorporated herein by reference. Furthermore, the present invention is a continuation-in-part of U.S. application Ser. No. 10\/611,774, entitled Transaction Consistent Copy-On-Write Databases filed Jun. 30, 2003 which is also incorporated herein by reference.","The present invention relates generally to databases and more particularly toward database restoration technologies.","Database systems are quite prevalent in today's world. Databases store large quantities of information in such a manner so as to facilitate expeditious querying and ease of use. For example, in a conventional relational database, information can be organized as objects such as records, tables and indexes. Database engines provide a mechanism to retrieve and manipulate data from database tables upon specification of a query by a user. A query is typically expressed in some query language such as Structured Query Language (SQL). A query can specify one or more tables as well as rows and columns therein to be retrieved and otherwise manipulated. Upon proper specification of a query, the database engine retrieves data, performs any specified operations and produces a results table. Databases are popular and useful at least in part because of their ability to store large amounts of data, which can be efficiently retrieved and manipulated by simply specifying a query.","Unfortunately, user errors are a common problem in database systems. Usually, such errors occur when a database application or a user changes or deletes data by mistake and the database system correctly follows the command and promptly changes or deletes data. This is referred to in the art as the quick finger delete problem. For example, a user could issue a command to delete a table and forget to specify the \u201cWHERE\u201d clause causing more data to be deleted than intended. Additionally, a user may install a new application that modifies a database in a manner unbeknownst to the user. There are several conventional solutions to this problem. Generally, the most common solution is a full database restore to a point in time prior to the occurrence of a user error. Once restored, the database can be brought online and all changes, including the user error, are lost. However, a full database restore is time intensive sometimes taking days to complete.","Alternatively, data that was unintentionally modified can be remedied by extracting relevant information from a restore database and merging it back into the original database. A variation on this scheme is called log shipping.","Log shipping involves keeping a coping of the database on another secondary server in a restore state, but at a constant delay behind the original server. Log backups are applied to the secondary database only after a delay (e.g., 24 hours). If a user error occurs on an original database, and a database administrator notices the error within the delay, then the database administrator can revert to the secondary server because it already contains the database at a point in time prior to the error. Unfortunately, log shipping is complex requires many additional resources and space.","Restoring a database utilizing conventional systems and methodologies requires sizeable delays and therefore is generally an option of last resort. Furthermore, log shipping requires additional hardware and adds complexity to the database system. Mitigating errors is a large and important problem in database systems. Accordingly, there is a need in the art for a new system and method of restoring databases that is, among other things, both quick and simple.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key\/critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","The subject invention relates to creation of and employment of a database snapshot. The invention mitigates problems associated with restoring a database, which takes time and is generally an option of last resort as well as log shipping which typically requires additional hardware and adds complexity to the database system. Reverting to a database snapshot alleviates some of these problems. According to an aspect of the subject invention, a database snapshot (DBSS) is a database that looks like a read only, point in time copy of another (source) database. The DBSS is not necessarily a complete copy of the source database; the two databases share data that is common to both, which makes the DBSS quick to create and space efficient. As the source database is modified, the original data is copied to space efficient storage for use by the DBSS to maintain its point in time view of the source database. If a user error occurs on the source database and a DBSS has been created before the error, then the database administrator has the option to revert the entire database back to the DBSS, which is at a point in time before the user error. All changes to the source database, including the user error, are lost. Moreover, the revert is generally much quicker than a normal restore and it does not require duplicate resources that log shipping does.","According to an aspect of the invention reversion to a database snapshot can comprise copying database snapshot file pages over a source or primary database, truncating a primary database, applying open uncommitted transactions to the database, and utilizing database logs to converge upon an event such as a user error.","In accordance with one aspect of the invention, a user or database administrator can create one or more database snapshots at various points in time. For example, if a user is going to be performing testing he\/she could create a database snapshot to enable reversion to a previous database state or view. However, according to another aspect of the subject invention a monitor component can be employed to monitor a primary database and automatically create database snapshots upon certain happenings. For example, if the monitor detects or is able to infer that a new application is about to be installed it can initiate creation of a database snapshot to preserve the state of the database prior to alterations by the new application.","According to yet another aspect of the subject invention, a mirror database can be automatically updated to reflect changes made to a primary database upon reversion. Hence, a mirror database can be updated and synchronized without utilizing a lengthy full restore as is conventionally done.","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the invention may be practiced, all of which are intended to be covered by the present invention. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention is now described with reference to the annexed drawings, wherein like numerals refer to like elements throughout. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed. Rather, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention.","As used in this application, the terms \u201ccomponent\u201d and \u201csystem\u201d are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the present invention may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d (or alternatively, \u201ccomputer program product\u201d) as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. For example, a computer readable media can include but are not limited to magnetic storage devices (e.g., hard disk, floppy disk, magnetic strips . . . ), optical disks (e.g., compact disk (CD), digital versatile disk (DVD) . . . ), smart cards, and flash memory devices (e.g., card, stick). Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the subject invention.","Restoration System","Turning initially to , a data restoration system  is illustrated. Data restoration system  comprises a source database , snapshot component , a snapshot database , and a restore component . Source database  (also referred to hereinafter as primary database) houses large quantities of data in an organized manner so as to facilitate queries and other uses. Database  can be any kind of database including but not limited to a relational or multidimensional database. Snapshot component  generates a snapshot database(s)  (also referred to herein as DBSS for database snapshot) based in part on the source database. The snapshot database(s)  allow users to create a transaction consistent view of an existing source database  without making a complete copy thereof. As the source database  diverges from the snapshot database , the snapshot component  ensures that the snapshot database  obtains a copy of the data before it is modified, for instance, in page units. In other words, if a source database page contain the letter \u201cA\u201d and a transaction was executed that caused \u201cA\u201d to be changed to \u201cB,\u201d then the corresponding snapshot database page would be written with and thus store the letter \u201cA.\u201d According to an aspect of the subject invention, the snapshot database  can be a read only point in time copy of a source database . The DBSS is not necessarily a complete copy of the source database . The two databases can share data that is common to both, which makes the DBSS quick to create as well as space efficient. As the source database  is modified, the original data can be copied to space efficient storage for use by the DBSS to maintain its point in time view of the source database . Furthermore, it should be appreciated that there can be more than one snapshot database  associated with a source so as to provide multiple points of reversion. Additionally, the snapshot database  can be transient or persistent. Transient snapshots are internal volatile copies that are destroyed after crash, failure, or shutdown. Persistent snapshots are public copies that can be more securely kept on a storage device for use by other applications.","Restore component  utilizes the snapshot database  to restore the source database  to a point in time prior to an event. In accordance with an aspect of the subject invention, the event can correspond to a user error such as a quick finger delete where a user accidentally deletes data from the source table. Alternatively, an event can correspond to a system crash, lock up, or any other situation or scenario in which data is otherwise lost or manipulated. If an event occurs on the source database  and a snapshot database  has been created before the error, a database administrator has the option of employing the restore component  to revert the entire source database  back to the snapshot database , which is at a point in time before the event. The restore component  can utilize the data residing in snapshot database  to restore the source database  to a previous point in time before the event. For example, the snapshot database data can be written over the current source database values at corresponding locations. Alternatively, the snapshot database  can be populated with shared data and become the new source database. It should be appreciated that this restore process is typically much faster than conventional restore technologies as only sparse files need to be copied to the source database, rather than restoring the whole thing. Furthermore, the restore process is more efficient in that it does not require the duplicate resources, for example, that log shipping requires.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2","b":["140","210","220","210","220","210"]},"The undo component  can be employed, among other things, to compensate for this inaccurate representation upon reversion. For example, the undo component  can store all open transactions at the time of snapshot database creation, which includes all transactions that began before the creation of the snapshot and terminated thereafter. These stored transactions can subsequently be utilized to roll forward the restored primary database to capture the open transactions and converge upon a restoration event. Furthermore, the undo component  can utilized conventional database logs that capture database changes at periodic intervals or upon the command of an administrator to converge even closer to an event such as an error thereby minimizing the loss of \u201cgood\u201d transactions. Accordingly, the present invention facilitates database recovery at least as well as can conventionally be accomplished but at a much faster speed utilizing less system resources.","Turning to , a timeline  is illustrated to further provide clarity concerning the database restoration operations according to aspects of the invention. Time advances from left to right on the timeline . In other words, events positioned farther to the right occur later in time than those further to the left. At , the database snapshot (DBSS) is created. A period of time passes (minutes, hours, days . . . ) and an event occurs at . For example, the event can correspond to a user accidentally deleting a complete table or otherwise modifying page data. Thereafter, a restore operation can be initiated by a database administrator, for instance. Consequently, the revert component  () of the subject invention can be employed to restore the database to the point in time  in which the database snapshot was created. According to an aspect of the subject invention, this can be accomplished by copying sparse file data from the snapshot database over the corresponding data in the source database thereby placing the source database in a consistent stable state devoid of the effects of the event at . The undo component  () can then be employed to advance the source database toward the event  so as to maintain \u201cgood\u201d data while losing or altering data caused by the event. This can be accomplished by applying open transactions stored in an undo file to the restored database and\/or database log files.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":["400","400","120","110","130","410","420","110","120","110","130","130","130"]},{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CREATE DATABASE ss_database_name"]},{"entry":[{},"ON < filespec > [ , ...n ]"]},{"entry":[{},"AS SNAPSHOT OF source_database_name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["110","130","110","410","130","110","110"]},"It should be appreciated that recovery can be run on the DBSS  before it is available to be read, to bring it into a consistent state. Current open transactions are rolled back, and some of the original pages will probably be copied over to the sparse files because of the rollback. According to an aspect of the invention, a DBSS has no log. Once created, a DBSS  can remain in existence until it is dropped by the database administrator if it is persisted otherwise it can be dropped upon error or system shut down.","Multiple DBSSs  may exist at different points in time for a single source database . According to one aspect of the present invention, all snapshots besides the one being reverted or restored can be destroyed. Alternatively, all snapshots residing later in time than the snapshot being reverted to can be destroyed, while those occurring earlier in time can be saved. Snapshots of a source database taken after a snapshot that is or is going to be reverted to are not very valuable. Furthermore, new snapshots can be taken of the source after it has been restored utilizing a database snapshot, for instance. Snapshots taken before the snapshot used for a restore are much more valuable as one could still revert back to the particular point in time captured by the prior snapshot.","DBSS  can be created and dropped in a periodic manner, or ad hoc if the user wants a single \u201csafe\u201d point in time to enable reversion thereto. For example, a user may want to create a snapshot upon installation of a new application or during testing. A revert to DBSS  could be issued utilizing the following command:",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"RESTORE DATABASE { database_name |"]},{"entry":[{},"@database_name_var } FROM"]},{"entry":[{},"DATABASE_SNAPSHOT=<snapshotname>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["420","120","420"]},"To restore a database, the source database is closed, and all connections to it are closed. Consequently, the source is unavailable for transactions during this process. The database can be marked as RESTORE to notify external viewers of the unavailability of the database. A server can then proceed to copy the pages in the sparse files to the original position (when the DBSS was created) in the source database files. Copying the changed pages in most instances is significantly faster than restoring from backup. Once the pages are copied, the log for the database can be rebuilt. The source database is now back at a point in time it was at when the DBSS was created. All changes since the DBSS was created have been removed. If an UNDO file is created, then the log chain is not broken, and a data log backups taken from the source database can be applied to roll the source database forward.","The scheme to support roll forward after the revert using an undo file can be summarized as follows. On the creation of the DBSS, the original value of every page touched by the recovery of the DBSS when it is created can be saved as a \u201cpre-image\u201d in a separate undo file. On the revert, DBSS pages can be copied to the source database as described. The pre-images can be copied from the separate UNDO file. At this point, the database is exactly as it was when the DBSS was created. Thereafter, database logs can be employed to roll forward the reverted DBSS to a point in time just before the user error occurred, so as to minimize the amount of data lost.","Turning to , a diagram is provided to illustrate an exemplary database restore  in accordance with an aspect of the subject invention. Source database  includes two database files  and . Database files  and  both contain eight pages each of various data. A snapshot of the source database is generated. Accordingly, database snapshot  is created. The snapshot database can have two snapshot database sparse files  and  corresponding to source files  and  respectively. At the time the snapshot originates, these database sparse files can simply be shells as they can share all data with source files  and . At some point after creation of the snapshot, values in the source database can be altered. Here, the values changed reside on pages 3 and 7 in file  and file 2 on page 4. Specifically page 3 has been changed from \u201cC\u201d to \u201cZ,\u201d page 7 has been changed from \u201cG\u201d to \u201cY,\u201d and page 4 has been changed from \u201cL\u201d to \u201cZ.\u201d Accordingly, the original values prior to the change have been saved to the sparse files  and , here \u201cC,\u201d \u201cG,\u201d and \u201cL.\u201d On a restore, the pages in the sparse file, here 3 and 7 from file  and page 3 from file  can be copied back over the updated pages in the source or primary database .","Copying the pages comprises several scenarios including simply copying the modified pages back, or more complex ones like adding or deleting files, growing or shrinking the primary database files to the size of the sparse files, adding or deleting the pages (i.e. keeping track of the pages added to the primary so that they can be removed while restoring) etc. For the file additions and deletions, one can compare the file lists of both the source database and the database snapshot and synchronize them. For page additions, if the source is bigger then the snapshot or replica, the source can be chopped off or truncated at the end to the size of the replica, in part because pages that were added, were added at the end of the source according to an aspect of the invention. If the replica is bigger, this means pages were deleted from the primary source. Hence, the size of the source can be increased and all the pages for that range will already be in the snapshot and thus will be copied over by the normal copy operation.","One na\u00efve algorithm to copy the pages back would be copy them one by one. However, according to an aspect of the invention an asynchronous copy operation implementation can be employed. For instance, a single thread and three queues, a read queue, a write queue, and an empty buffer queue, can be utilized. While copying back, if the page was there in the source (e.g., meaning it changed) or it was not there (e.g., meaning it was deleted) it can simply be copied to the source. If however, there are extra pages in the primary source, then they would have been added at the end of the file, which can be remedied by truncating the file to the size of the replica. Finally, the source can be unlocked to complete the restore.","According to another aspect of the invention, the log backup associated with a source database can be broken after a restore. Hence, log backups will fail on the reverted database until a full or file backup is taken. The reverted database can retain the same recovery model as it did when it was created. Hence, the system of the present invention can support (1) starting the revert; (2) manipulating data; (3) rebuilding the log; and (4) restarting the database.","According to yet another aspect of the invention, a new source database can be created from the snapshot database by copying the data from the original source database. Any error during the database creation may require a database administrator (DBA) to restart the operation, for example, once the server becomes available. Once the database is created, the DBA can drop the source database and rename the reverted database. Such a system can be employed with respect to data mirroring for example.","Turning to , an exemplary data mirroring system  is illustrated in accordance with an aspect of the subject invention. System  comprises two databases: source database  and mirror database , database snapshot(s)  and restore component . Source database  is the primary database. Mirror database  is a separate database comprising almost a bit for bit replica of the source database . Thus, as changes are being made to source database  they can be sent over a network, for instance, to mirror database . The idea behind mirroring is that if the primary source database  fails or otherwise becomes unavailable, for instance due to a power failure, mirror database  can become the new source database for transactions thereby facilitating high availability of data via redundancy. According to an aspect of the present invention previously described, the source database  can have snapshot database snapshot (s)  associated therewith to facilitate point-in-time reversion. Thus, a database administrator could revert the source database  to a previous point in time utilizing database snapshot  and restore component . If a revert is performed on the source database , the mirror database  should also reflect the changes. Conventionally, a time consuming backup and full restore was needed to update and resynchronize the mirror database . According to an aspect of the invention, the mirror database  can automatically be updated and synchronized with the source. Since the changes to the source are automatically reflected in the mirror database changes to the source during the revert can also be passed to the mirror simultaneously or asynchronously after the revert has been completed on the source.","Turning to , an exemplary system  for mirroring a database with snapshots is illustrated in accordance with an aspect of the subject invention. As shown the system  includes a base or destination database  named DB1_LS. Applications  seek to view data from database . In particular, applications  can interact with snapshots  named DB1001, DB1002, and DB1003. The first snapshot DB1001 can be created and referenced to DB1, for example:",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CREATE DATABASE DB1_001 AS SNAPSHOT OF DB1_LS"]},{"entry":[{},"ON (NAME = \u2018datafile\u2019, FILENAME = \u2018F:\\DB1_001.SNP\u2019)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"sub":["\u2014","\u2014"]},{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CREATE DATABASE DB1_002 AS SNAPSHOT OF DB1_LS"]},{"entry":[{},"ON (NAME = \u2018datafile\u2019, FILENAME = \u2018F:\\DB1_002.SNP\u2019)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"sub":["\u2014","\u2014"]},{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CREATE DATABASE DB1_003 AS SNAPSHOT OF DB1_LS"]},{"entry":[{},"ON (NAME = \u2018datafile\u2019, FILENAME = \u2018F:\\DB1_003.SNP\u2019)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Additionally, according to an aspect of the subject invention database snapshots can be utilized for consistency checks on a database. For example, a DBCC CHECKDB( ) command can be executed on a database. As a consequence, an internal snapshot of the database with the backing storage can be created in alternate streams of existing database files. The pages can then be read for the consistency check and the system can either read them from the base database if they have not been modified or from alternative streams if they have been modified.","It should also be appreciated that although not illustrated the subject invention can employ one or more graphical user interfaces (GUIs). The GUIs can be utilized to support management of snapshots. For example, a plurality of text and graphical components including but not limited to text boxes, buttons, tabs, drop-down menus, and scroll bars can be employed to create a snapshot and subsequently revert a database back thereto.","Furthermore, both the database snapshot and the source database associated therewith can be backed up in a conventional sense. For instance, an administrator may backup individual files or filegroups from the snapshot. When the backups are restored, they are restored as regular databases. On a backup operation of the source, the user can specify which snapshots are to be taken with the backup. On restore, the user can specify which snapshots are to be restored as well.","Database Snapshots (also known as Copy-On-Write Databases)","Generally, a database consists of files of two types: data files and log files. Log files contain a series of log records. Log records may be identified with a log sequence number (LSN). As depicted in , according to one aspect of the invention, the primary database  includes of a set of data files  and a log file . Data files  can be divided into blocks or units of storage called pages.","A database snapshot for a database can be created which provides a transaction consistent view of an existing database at a previous point in time without creating a complete copy of the database. A database snapshot, in conjunction with the database, includes all the information necessary to produce a copy of the database at the previous time. The database snapshot, however, does not in itself contain all of the information and thus can be smaller in size than a full copy would be. Additionally, a snapshot can be created on the fly as modifications are made to the database, which allows the costs (time and processing) to be spread over time. If a copy was made of the database snapshot at the prior time, the time and processing cost would be concentrated at one time. Additionally, database snapshots are advantageous in that they can be created while update activity continues on the database. The primary database is the database which is being used and of which one or more database snapshots are being created.","As described supra, a database snapshot contains all the information needed to, along with the primary database, determine the contents of the primary database at a previous time. The database snapshot can comprise a side file corresponding to each file in the primary database. A side file contains a copy of all data from the corresponding data file, which has been changed since the database snapshot was created. In one aspect of the present invention, in order to avoid the need for a mapping table from pages in the side file to pages in the primary file, the side files are stored in sparse files. In a sparse file, only portions of the file that are actually written to need storage space. All other regions of the file can be unallocated. It should be noted, however, that storing side files in sparse files is not a requirement of the present invention and alternative storage systems and methodologies are considered to be within the scope of the invention.","According to another aspect of the invention, the sparse file mechanism works with a standard region size. If data within one region is written to the sparse file, even if the data does not fill the entire region, space for the entire region can be allocated. Because this space is allocated and can be read from, a distinction can be made between the areas of the region filled with valid data and the areas of the region, which exist because the granularity of the sparse file requires a region of a certain size to be allocated if any storage within that region is necessitated.","Because the database snapshot includes the original value of all of the data, which has been changed in the primary database since the database snapshot was created, the database data as of the time of the creation of the database snapshot may be read from the snapshot. In order to respond to a request for data from the database snapshot, data can be read from the database snapshot's side files, if the side files contain the data from the request. The data to be read which is not present in the side files has not been changed since the database snapshot was created and can be read from the primary database.","According to yet another aspect of the invention, the side files comprise pages of data from the primary database. When any data on any page of the primary database is changed, the page of data is stored in a side file. The present invention is described with reference to pages as the unit of data in the primary database; however, it is contemplated that other units of data from the primary database may be utilized.","In order to determine which data has been written to the side file and which data should be read to the primary database, the presence of valid data in the side file should be ascertained. In one instance, it can be read directly to ascertain if valid data exists. According to another aspect of the invention, a side page table can be created which stores data regarding whether a given page exists and is valid.","For each page in the primary database, the side page table can store information regarding whether the page should be read from the primary database, indicating that it has not changed, or whether the page should be read from a side file, because it has changed. The side page table allows a fast determination of whether a given page exists in the side file.","According to another aspect of the invention, the side file and the sparse file mechanism both use the same page\/region size. That is, the pages that the side file stores from the primary database are the same size as the regions, which the sparse file stores when any memory is written into the sparse file. For example, if the sparse file regions are 8 KB and the pages stored from the primary database are also 8 KB, the page size and the region size are equal. In this case, any region that is filled will be filled completely by the page read from the primary database, and there is no possibility that invalid data is stored in the region.","In accordance with another aspect of the invention, a number of side file regions can correspond exactly to each page. For example, if the sparse file regions are 8 KB (kilobytes) and the pages stored from the primary database are 16 KB, then each page stored in the side file will fill two regions. In this case, as well, any region that is filled will be filled completely by contents from the page read from the primary database. Again, there is no possibility that invalid data is contained in the region.","For these aspects of the invention, the side page table comprises an in-memory bitmap, which holds one bit of information for each page in the side file. For each page in the side file, the corresponding bit indicates whether the page is in the side file.","According to another aspect of the invention, the granularity of the side file region is larger than the granularity of the pages stored from the primary database. For example, if each region of the side file is 64 KB and the size of the pages is 8 KB, then the presence of a region in the side file does not necessarily indicate that all information in the region is valid data from the primary database. If only one page is copied to the side file, in the example, only 8 KB of the 64 KB in the allocated region will contain valid data. In another embodiment, some side file pages are spread across regions.","For these aspects, the side page table comprises two in-memory bitmaps, which hold two bits of information for each page in the side file, which we will term bit and bit. For each page in the side file, the corresponding bits indicate (bit) whether the page is definitely in the side file, and (bit) whether the page is potentially in the side file. Bit may also be thought of as indicating that the region in which the page would be stored in the side file has been allocated. However, as discussed below, in one embodiment, this bit is set only when the side page table is reconstructed.","The bitmaps are maintained in-memory and therefore may not be persistent. If they are erased, the bitmaps are reconstructed from the sparse file information. The sparse file is consulted, and, for each page, if the side file has allocated space for the region in which the page is located, bit is set to indicate that the page is potentially in the side file. For each page, bit is initially set to indicate that it is not definite that the page is in the side file.","If the side page table is maintained in such a way that it is persistent, then the granularity of the regions and the pages may be disregarded, and the one-bit side page table may be used. However, in one embodiment, in order to support a persistent database view after a database server restart, the two-bit page table is used.","In accordance with one aspect of the invention, no page table is created for the side files. In this case, whenever it is necessary to determine whether a copy has been made of a page in the database snapshot, the database snapshot is consulted. The invention will be described below with reference to an aspect of the invention in which a one-bit or a two-bit page table exists, however, other embodiments of the invention in which there is no page table, and the database view must be examined to determine whether it contains a page copied from the primary database are also contemplated.","As shown in , the database snapshot  for primary database  consists of side files . Each of the data files  in primary database  has a corresponding side file  in the database snapshot . Additionally, side page table data  is stored in-memory for the database snapshot . According to one aspect of the invention, side page table data  is one side page table, which covers all of the side files . According to another aspect of the invention, a separate side page table can exist for each of side files .","In a database, the transaction log is a serial record of all the transactions that have been performed against the database since the transaction log was last backed up. The transaction log is used to recover the database to a point of failure. According to one aspect of the invention, the transaction log is modeled as a circular queue. A transaction log may be truncated by deleting an inactive portion of the log. This inactive portion contains completed transactions which do not need to be recovered at least because the changes they reflect have been persisted to the data files. Conversely, the active portion of the transaction log contains both completed transactions and transactions that are still running and have not yet completed (active transactions.) Truncation can be done to minimize inactive space in the transaction log instead of allowing the transaction log to continue to grow and use more space.","Active transactions may cause transaction-inconsistency. For an active transaction, some modifications of data files may not have been written from the buffer cache to the data files, and there may be some modifications from incomplete transactions in the data files. The log file  can be used to ensure that a recovery of the database is transaction consistent. This can be done using ARIES (Algorithms for Recovery and Isolation Exploiting Semantics)-style recovery. Every modification recorded in the log which may not have been written to the data files is rolled forward by performing the modification on the database. To ensure the integrity of the database, every incomplete transaction found in the transaction log is rolled back by undoing the modification on the database.","In order to create a database snapshot, the physical structures (the side files and page tables) of the database view must be initialized. First, a side file  is created for each data file  in the primary database . As discussed above, a side file may be a sparse file or in another embodiment may be a non-sparse file of the same size as the data file . Side file are associated with the data files  in the primary database .","Because transactions are continuously occurring and the database view is transaction consistent, the transaction log should be used during the creation of a database snapshot. In order to ensure that information regarding transactions that should be used for the database view is not discarded, log truncation (if it exists) is disabled on the primary database .","According to an aspect of the invention, a side page table  is initialized for the database snapshot. Initially, the side page table  is set to indicate that no pages exist in side file , and, in the case of a two-bit side page table, that no pages are potentially or definitely in side file .","When the initialization is completed, the database snapshot is ready to go \u201conline\u201d. The database snapshot will now be running alongside the primary database , and when modifications are performed, copies of the original values of the modified pages (i.e. the pages' contents before the updates are performed) will be stored in the database snapshot. An exemplary method for implementing a transaction-consistent snapshot of a database can include determining a split point on the transaction log. This split will correspond to the point in time that the database snapshot represents. The LSN of the end of the log on the primary database  can be obtained when the database snapshot is created; this LSN is the \u201csplit point\u201d at which the primary database  and the database snapshot  will start diverging. The primary database  can then be marked so that database snapshot processing is required. Database snapshot support in the primary database  as described below, begins.","In order for the database snapshot to be consistent, the log of the primary database  prior to the split point must be analyzed to determine what transactions were active at the time of the split. The oldest active (as of the split point) transaction in the log is identified. Log truncation is enabled before that oldest active transaction.","In a manner similar to ARIES (Algorithms for Recovery and Isolation Exploiting Semantics)-style recovery, all the operations in the log of the primary database  from the oldest active transaction prior to the split point are performed to the database snapshot.  is a block diagram of an example transaction log, log file , according to an aspect of the invention. Log entries in log file  include log entries , , , , , , , , ,  and . A split point  is determined. Transactions continue being written to the log however, truncation is disabled. The log file  is examined, and any modifications to the database as a result of transactions from the oldest active transaction to the split point (from log entry n  through log entry n+7, in the example in ) are performed to the side files . The result of the modifications in each of these transactions is stored in the side files . Then, these transactions are examined. Modifications written to the log file by any active transactions in the log, such as log entry n , log entry n+2 , and log entry n+6, are undone in the side files .","Some transactions, however, may not yet have been committed. Therefore, active transactions in the log up to the split point should be located and undone. According to an aspect of the invention, where an incomplete transaction changes the value for a certain location in the database, the change, which has been added to the side file above, is removed from the side file. Alternatively, the undoing of a transaction can be accomplished by modifying the database snapshot, as detailed below, setting the data in the side file to match the data in the database as of the split point.","In this way, only the completed transactions from the log are reflected in the database snapshot. When the transactions on the log are reflected in the database snapshot, with the exception of transactions active when the split point occurred which have been undone, log truncation is enabled on the primary database . Because database snapshot processing has been enabled, the database snapshot will be updated as changes are made to the primary database , and so the database snapshot can be used to determine the contents of the primary database  as of the time of the split point.","When a database server restarts after it is shut down (either normally or abnormally), the database snapshot should be reinitialized. In order to do so, the side page tables, which have been stored in memory, must be reinitialized.","In order to reinitialize the side page table, in a two-bit side page table implementation, for each region in the side page table that has been allocated, the data (bit) in the side page table for each page in a region that has been allocated is set to indicate that the page may possibly have been written to side file . The data in the side page table for all other pages is set to indicate that there is no possibility that the page was written to side file . It is not definite, however, that the page was written to side file , and therefore bit is not set initially.","Alternatively, either in the two-bit side page table implementation or in the one-bit side page table implementation, side file may be examined to determine, for each page, if the page in side file  is valid, as described supra. The page table is set to indicate, for each page which does exist, that the page does actually exist in side file . All other pages are set to indicate that the page does not exist in side file .","In order for the database snapshot to store information from the primary database  before the data is overwritten, the primary database  must support the creation of a database snapshot. For each page that the primary database  modifies, a determination must be made as to whether the page is in the database snapshot. If the page exists in the database snapshot, then it is the correct version of the page. For example, this may have been when a previous modification had been made to that page in the primary database . If the page is changed again in the primary database , the version in the database view should not change.","When the information is received from the primary database  that a page has being changed, if the page is in side file , nothing should be done. If the page is not in side file , the page should be written to side file , and the correct bit should be set in the side page table. In the case where there is a two-bit page table, there are three possibilities for bit and bit for the page, as indicated by the following Table 1:",{"@attributes":{"id":"p-0092","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Cases for Two-Bit Page Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Bit1 indicates that","Bit1 does not indicate"]},{"entry":[{},"the page","that the page"]},{"entry":[{},"is definitely","is definitely"]},{"entry":[{},"in the side file","in the side file"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Bit2 indicates that","Case 1: page is in the","Case 2: page is possibly in"]},{"entry":["the page is possibly","side file","the side file"]},{"entry":"in the side file"},{"entry":["Bit2 indicates that","Case 1: page is in the","Case 3: page is definitely"]},{"entry":["the page is","side file [alternately:","not in the side file"]},{"entry":["definitely not in the","Case 4: invalid]"]},{"entry":"side file"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"According to an aspect of the invention, when bit indicates that the page is definitely in side file , bit is ignored; thus, as shown in Table 1, where bit indicates that the page is definitely in side file , the page is assumed to be in side file  no matter what bit indicates. In an alternate embodiment, when bit is set to indicate that the page is definitely in side file , bit is set to indicate that the page is possibly in side file , and in this alternate embodiment, when bit indicates that the page is definitely in side file  yet bit indicates that the page is definitely not in side file , the case is invalid and an error has been encountered.","When the primary database  indicates that a page is being changed, for a two-bit page table, the actions which should be taken for the cases listed above are as follows:","Case 1: Do nothing.","Case 2: Determine if the page is in side file , if it is not, write the page to side file .","Case 3: Write the page to side file .","When the page is written to side file , in either Case 1 or Case 2 the old version of the page in the primary database  (the version now being modified by the primary database ) is written to side file . Additionally, the page table is set to indicate that the page is now in side file  so that any subsequent writes to the page will be handled according to Case 1, and the correct page for the database view remains stored in side file .","In order to determine if the page is in side file  in Case 2, data corresponding to the page is read from side file . If the data is valid then a previous version of the page is in side file , then it should not be overwritten. In one embodiment, the page table bit corresponding to the page is set to indicate that the page is definitely in side file , so future writes to the page are handled under Case 1.","Data invalidity may be indicated by data placed in newly allocated regions to indicate that no valid data has yet been written to the region. For example, all zeros may be written to a newly allocated region, if it is known that no page of the database will ever contain all zeros. If this is the case, then the presence of the page in side file  is indicated by the corresponding page in side file  being part of an allocated region and containing some non-zero data.","The cases detailed in Table 1 are also useful for performing a read of data stored in a database snapshot. When data in a page is being read from a database view, the page should be read from side file  if it exists in side file . If it does not, the page should be read from the primary database . In a two-bit page table system, the actions that should be taken for the three cases are as follows:","Case 1: Read the page from side file .","Case 2: Determine if the page is in side file , if it is, read the page from side file , if it is not, read the page from the primary database .","Case 3: Read the page from the primary database .","The database snapshot represents the state of a database at a prior point in time. A user may choose to use the database snapshot as a database. For example, the user may choose to perform an action on the database snapshot, to create a database snapshot of the database as it would have been had the action been performed on the database snapshot at the prior point in time. Additionally, during initialization, as detailed above, transactions may be performed and undone on the database snapshot.","To modify the database snapshot, the modification should be based on the data in the database snapshot and the resulting page should be stored in the database snapshot. If no data exists in the database snapshot for the page, then the modification should be based on the data in the primary database , and the resulting page should be stored in the database snapshot.","In a two-bit page table system, the actions that should be taken for the three cases are as follows:","Case 1: Read the page from side file , perform modifications, write the page to side file .","Case 2: Determine if the page is in side file , if it is, proceed as in case 1, if it is not, proceed as in case 3.","Case 3: Read the page from the primary database , write the page to side file  and set the page table to indicate that the page is in side file . Perform modifications to the page and write the modified page to side file  when appropriate.","In view of the exemplary system(s) described supra, a methodology that may be implemented in accordance with the present invention will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation, the methodology is shown and described as a series of blocks, it is to be understood and appreciated that the present invention is not limited by the order of the blocks, as some blocks may, in accordance with the present invention, occur in different orders and\/or concurrently with other blocks from what is depicted and described herein. Moreover, not all illustrated blocks may be required to implement the methodology in accordance with the present invention.","Additionally, it should be further appreciated that the methodologies disclosed hereinafter and throughout this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers. The term article of manufacture, as used, is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. By way of illustration and not limitation, the article of manufacture can embody computer readable instructions, data structures, schemas, program modules, and the like.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 11","b":["1100","1110","1120","1130","1130"]},{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 12","b":["1200","1210","1220","1230","1240"]},"Turing to  a data restoration methodology  is depicted in accordance with an aspect of the subject invention. At , a database snapshot is created and maintained. The database snapshot can be created by a user at any time. Furthermore, more than one snapshot can be created so as to provide a plurality of points of reversion over time. The snapshot database can also be created automatically. For example, a monitor component can observe actions with respect to the source or primary database and detect and\/or infer actions that may significantly alter the database. For instance, a snapshot could be created automatically upon detection of an installation of a new application. The database snapshot can, according to an aspect of the invention, store changes to the source database. Accordingly, maintaining the database snapshot corresponds to copying changes thereto. According to another aspect of the invention, the snapshot can comprise sparse files thereby storing only changes to corresponding pages and sharing all other data with the primary database. At , the database can be reverted to a prior point in time marked by a snapshot upon the occurrence of an event including but not limited to a user error (e.g., quick finger delete). Reversion or restoration can comprise, inter alia, copying pages from the snapshot database over pages in the primary database, truncating the primary database, applying uncommitted open transactions at the time of snapshot creation to the database, and applying database log information to the primary database to converge upon the event.","Sample Operating Environments","In order to provide a context for the various aspects of the invention,  as well as the following discussion are intended to provide a brief, general description of a suitable computing environment in which the various aspects of the present invention may be implemented. While the invention has been described above in the general context of computer-executable instructions of a computer program that runs on a computer and\/or computers, those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally, program modules include routines, programs, components, data structures, etc. that perform particular tasks and\/or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations, including single-processor or multiprocessor computer systems, mini-computing devices, mainframe computers, as well as personal computers, hand-held computing devices, microprocessor-based or programmable consumer electronics, and the like. The illustrated aspects of the invention may also be practiced in distributed computing environments where task are performed by remote processing devices that are linked through a communications network. However, some, if not all aspects of the invention can be practiced on stand-alone computers. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary environment  for implementing various aspects of the invention includes a computer . The computer  includes a processing unit , a system memory , and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .","The system bus  can be any of several types of bus structure(s) including the memory bus or memory controller, a peripheral bus or external bus, and\/or a local bus using any variety of available bus architectures including, but not limited to, 11-bit bus, Industrial Standard Architecture (ISA), Micro-Channel Architecture (MSA), Extended ISA (EISA), Intelligent Drive Electronics (IDE), VESA Local Bus (VLB), Peripheral Component Interconnect (PCI), Universal Serial Bus (USB), Advanced Graphics Port (AGP), Personal Computer Memory Card International Association bus (PCMCIA), and Small Computer Systems Interface (SCSD.","The system memory  includes volatile memory  and nonvolatile memory . The basic input\/output system (BIOS), containing the basic routines to transfer information between elements within the computer , such as during start-up, is stored in nonvolatile memory . By way of illustration, and not limitation, nonvolatile memory  can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM), electrically erasable ROM (EEPROM), or flash memory. Volatile memory  includes random access memory (RAM), which acts as external cache memory. By way of illustration and not limitation, RAM is available in many forms such as synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), enhanced SDRAM (ESDRAM), Synchlink DRAM (SLDRAM), and direct Rambus RAM (DRRAM).","Computer  also includes removable\/non-removable, volatile\/non-volatile computer storage media.  illustrates, for example disk storage . Disk storage  includes, but is not limited to, devices like a magnetic disk drive, floppy disk drive, tape drive, Jaz drive, Zip drive, LS-100 drive, flash memory card, or memory stick. In addition, disk storage  can include storage media separately or in combination with other storage media including, but not limited to, an optical disk drive such as a compact disk ROM device (CD-ROM), CD recordable drive (CD-R Drive), CD rewritable drive (CD-RW Drive) or a digital versatile disk ROM drive (DVD-ROM). To facilitate connection of the disk storage devices  to the system bus , a removable or non-removable interface is typically used such as interface .","It is to be appreciated that  describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system , which can be stored on disk storage , acts to control and allocate resources of the computer system . System applications  take advantage of the management of resources by operating system  through program modules  and program data  stored either in system memory  or on disk storage . Furthermore, it is to be appreciated that the present invention can be implemented with various operating systems or combinations of operating systems.","A user enters commands or information into the computer  through input device(s) . Input devices  include, but are not limited to, a pointing device such as a mouse, trackball, stylus, touch pad, touch screen, keyboard, microphone, joystick, game pad, satellite dish, scanner, TV tuner card, digital camera, digital video camera, web camera, and the like. These and other input devices connect to the processing unit  through the system bus  via interface port(s) . Interface port(s)  include, for example, a serial port, a parallel port, a game port, and a universal serial bus (USB). Output device(s)  use some of the same type of ports as input device(s) . Thus, for example, a USB port may be used to provide input to computer  and to output information from computer  to an output device . Output adapter  is provided to illustrate that there are some output devices  like monitors, speakers, and printers, among other output devices  that require special adapters. The output adapters  include, by way of illustration and not limitation, video and sound cards that provide a means of connection between the output device  and the system bus . It should be noted that other devices and\/or systems of devices provide both input and output capabilities such as remote computer(s) .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as remote computer(s) . The remote computer(s)  can be a personal computer, a server, a router, a network PC, a workstation, a microprocessor based appliance, a peer device or other common network node and the like, and typically includes many or all of the elements described relative to computer . For purposes of brevity, only a memory storage device  is illustrated with remote computer(s) . Remote computer(s)  is logically connected to computer  through a network interface  and then physically connected via communication connection . Network interface  encompasses communication networks such as local-area networks (LAN) and wide-area networks (WAN). LAN technologies include Fiber Distributed Data Interface (FDDI), Copper Distributed Data Interface (CDDI), Ethernet\/IEEE 802.3, Token Ring\/IEEE 802.5 and the like. WAN technologies include, but are not limited to, point-to-point links, circuit-switching networks like Integrated Services Digital Networks (ISDN) and variations thereon, packet switching networks, and Digital Subscriber Lines (DSL).","Communication connection(s)  refers to the hardware\/software employed to connect the network interface  to the bus . While communication connection  is shown for illustrative clarity inside computer , it can also be external to computer . The hardware\/software necessary for connection to the network interface  includes, for exemplary purposes only, internal and external technologies such as, modems including regular telephone grade modems, cable modems, DSL modems, power modems, ISDN adapters, and Ethernet cards.",{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 15","b":["1500","1500","1510","1510","1500","1530","1530","1530","1510","1530","1500","1550","1510","1530","1510","1560","1510","1530","1540","1530"]},"What has been described above includes examples of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims. Furthermore, to the extent that the term \u201cincludes or having\u201d is used in either the detailed description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other aspects of the invention will become apparent from the following detailed description and the appended drawings described in brief hereinafter.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
