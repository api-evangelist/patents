---
title: Generated object model for test automation
abstract: A generated object model engine abstracts actions, used in test cases, in a manner to produce new object model types that are independent of an underlying code implementation. The generated object model engine analyzes action classes to aggregate a set of actions having similarly-related class types. Action classes having similarly-related class types are then used to form a new object model type. The new object model type may be used in a test case to hide the action's code implementation from the test case.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949774&OS=08949774&RS=08949774
owner: Microsoft Corporation
number: 08949774
owner_city: Redmond
owner_country: US
publication_date: 20110906
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Software testing is a crucial part in the development of a software application. Software testing requires test cases that can discover program errors quickly and thoroughly. A comprehensive test case may take an enormous amount of time and expense to develop and maintain. Test cases may be written in a traditional general purpose programming language. These test cases are dependent on the code implementation which may be difficult and costly to maintain over time. Alternatively, domain specific languages, scripting languages, and declarative languages may be used to create test cases in a manner where the test cases are independent of the underlying software implementation. However, these languages may lack the broad programming constructs and capabilities needed to construct quality written test cases for certain types of applications.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","An integrated development environment may include a generated object model engine having the capability to abstract programmable actions into an object model that is independent of an underlying code implementation. The generated object model engine analyzes the actions or operations used in a test case application to determine those that may be aggregated into a new object model type. The actions are analyzed with respect to object model generation rules that consider the characteristics of their class structure in order to group similarly-related actions into a new object model type. In an embodiment, the object model generation rules may be based on class types.","In an embodiment, the generated object model engine forms an object model from similarly-related action classes. An action class is a class having properties and constructors that take inputs. Action classes having a similarly-related class type may be aggregated to form a new object model type. The class types may be determined from runtime type resolution and from type detection rules that may consider type inheritance, namespaces, attributes, and\/or function parameters associated with an action class. The final result of the generated object model may be a new object model type taking the form of an API that contains the aggregated set of actions. The new object model type exposes an abstract view of the aggregated actions to the test case while hiding the code implementation of the aggregated actions.","These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.","Various embodiments are directed to a technology for aggregating programmable actions into an object model that is independent of the underlying code implementation. In an embodiment, the generated object model may be a collection of object model types for use in test case applications that are written in a general purpose programming language. The object model type may be implemented as an API. The code implementation of the object model is hidden from a test case application thereby enabling the action's code implementation to change without affecting the test case application. In this manner, the test cases are easier to maintain and update over time as updates and changes are made to the action's code implementation.","In one or more embodiments, the test cases may be developed and tested in an integrated development framework (IDE) that supports applications written in a variety of programming languages, including an object-oriented programming language. For test cases written in an object-oriented programming language, classes are the main structural component of a program. In one or more embodiments, the generated object model may be constructed for actions classes. However, the embodiments are not limited to this construction and the generated object model may be constructed for other types of data structures, such as without limitations, script commands, functions, and the like.","Action classes are classes whose properties and constructors have inputs. As such, the action classes are actions that a user would take in developing a software application. For example, CreateProject and OpenProject are well-known classes that enable a user to develop a software application. The CreateProject class may be used by a user to create a software application. The OpenProject class may be used by a user to open an existing software application. Action classes having a similar class type may be aggregated to form a new object model type. The class types may be determined from runtime type resolution and from type detection rules that may consider type inheritance, namespaces, attributes, and function parameters associated with an action class. The final result of the generated object model may be a new object model type taking the form of an API that contains the aggregated set of actions. The new object model type exposes an abstract view of the aggregated actions to the test case while hiding the code implementation associated with the aggregated actions.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 1","FIG. 5"],"b":["100","100","100","100","102","102","104","106","108"]},"The computing device  may include an integrated development environment (IDE)  that may be used as a test automation framework. The IDE  may be a software application that contains a set of resources and tools for use in developing and testing software applications, such as, without limitation, test cases. In one or more embodiments, the IDE may be Microsoft's Visual Studio\u00ae. However, the embodiments are not limited to Visual Studio\u00ae and other IDE's may embody the techniques described herein such as without limitation, Eclipse, NetBeans, etc.","The IDE  may include an editor , one or more compilers , one or more interpreters , a test engine , a generated object model (GOM) engine , one or more libraries , one or more action class libraries , and a GOM file . The editor  enables a user to write and edit software applications. The software applications may include source code created in one or more programming languages (e.g., Visual Basic, Visual J#, C++. C#, J#, Java Script, APL, COBOL, Pascal, Eiffel, Haskell, ML, Oberon, Perl, Python, Scheme, Smalltalk and the like), declarative languages (e.g., XML, XAML, script files, etc.) and the like. Each compiler  translates source code associated with a particular programming language into an intermediate language representation (i.e., managed code), machine code (i.e. native code) or the like. Each interpreter  executes a set of executable instructions (i.e., .exe file) to perform a task, such as execution of a test case. The test engine  may be a software component that executes a test case and in some cases may be implemented as an interpreter . The GOM engine  creates the generated object model which is described in more detail below.","The IDE  may include one or more libraries , one or more action class libraries , and a GOM file . The libraries  are a collection of programmable resources, such as APIs, classes, executable code, data structures, and so forth. The action class libraries  are a particular set of libraries that contain action classes. The GOM file  stores the generated object model which may be implemented as a code file or an assembly file (e.g., .NET assembly, managed code, API, binary file, etc.).","The system  may comprise a computer-implemented system having multiple components, programs, procedures, modules. As used herein these terms are intended to refer to a computer-related entity, comprising either hardware, a combination of hardware and software, or software. For example, an element shown in  may be implemented as a process running on a processor, a hard disk drive, multiple storage drives (of optical and\/or magnetic storage medium), an object, an executable, a thread of execution, a program, and\/or a computer. One or more elements may reside within a process and\/or thread of execution, and an element may be localized on one computer and\/or distributed between two or more computers as desired for a given implementation. The embodiments are not limited in this manner.","The various embodiments of the system  may be implemented using hardware elements, software elements, or a combination of both. Examples of hardware elements may include devices, components, processors, microprocessors, circuits, circuit elements, integrated circuits, application specific integrated circuits, programmable logic devices, digital signal processors, field programmable gate arrays, memory units, logic gates and so forth. Examples of software elements may include software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces, instruction sets, computing code, code segments, and any combination thereof. Determining whether an embodiment is implemented using hardware elements and\/or software elements may vary in accordance with any number of factors, such as desired computational rate, power levels, bandwidth, computing time, load balance, memory resources, data bus speeds and other design or performance constraints, as desired for a given implementation.","Attention now turns to a more detailed discussion of the operation of the system with reference to various exemplary methods. It may be appreciated that the representative methods do not necessarily have to be executed in the order presented, or in any particular order, unless otherwise indicated. Moreover, various activities described with respect to the methods can be executed in serial or parallel fashion, or any combination of serial and parallel operations. The methods can be implemented using one or more hardware elements and\/or software elements of the described embodiments or alternative embodiments as desired for a given set of design and performance constraints. For example, the methods may be implemented as logic (e.g., computer program instructions) for execution by a logic device (e.g., a general-purpose or specific-purpose computer).","Turning to , there is shown an exemplary life cycle of the generated object model. In the development phase , the action classes are written or developed by a software developer or user of the IDE (block ). In the build phase , the generated object model (GOM) is created using the action classes , a set of type generation rules , and code generation rules , and then compiled and stored in a GOM file  (block ). The generated object model may be implemented as a set of APIs which may then be incorporated into one or more test cases  (block ). A test case  may then be compiled (block ) into a test case assembly file  (block ). In the test phase , the test case assembly file  is executed. An API call contained in the test case assembly file  may be converted into a corresponding XML code (block ) which is then executed (block ). In particular, the XML code may instantiate the class implementing the API, create an instance of the class, or object, in memory, read in the parameters for the object from the test case and call the execute method on that class (block ).","Attention now turns to a more detailed description of the process for creating the generated object model. Referring to , the GOM engine  may analyze a variety of action classes . Initially, the GOM engine  proceeds by loading in all the available action classes (block ). The action classes may be contained in a number of binary files stored in one or more action class libraries -. The action classes may pertain to a diverse set of methods or actions that may be used in one or more test cases.","Next, the GOM engine  may apply the object generation rules to create new object model types (block ). The object generation rules may be based on a set of rules that aggregates action classes based on similarly-related class types. The GOM engine  may first determine the class type of each action class. This may be accomplished through runtime type resolution. For example, in the .NET framework, the System.Reflection feature may be used to obtain information about an object at runtime. In particular, the names of the methods in the class, the type of the object, and so forth. The GOM engine  may utilize this feature to determine the class type of each action class (block ).","Next, the GOM engine  may then aggregate the action classes based on a similar class type through type detection rules (block ). The type detection rules may be specified by a developer of a test case. The type detection rules utilize the structural relationships between the classes to identify patterns indicative of a similarly-related class type. The type detection rules may consider type inheritance, namespaces, attributes, and function parameters associated with an action class. For example, the type detection rules may specify one or more of the following: classes having similar class names are related; child classes are similarly-related to their parent class; classes from the same namespace are similarly related; and classes having the same attribute tags. The GOM engine  aggregates the action classes in accordance with the type detection rules to generate a new object type for each set of aggregated classes (block ).","The new object model type may then be transformed into program code using a set of code generation rules  (block ). The code generation rules generate source code from the binary representation of the action class. For example, in the .NET framework, the code document object module (CodeDOM) may be used to generate source code representative of the new object model type. The new object model type may be stored as a code file  or compiled into a binary or assembly file  (e.g., .NET assembly file). The code file  may represent the new object model type in source code which may be embedded into another software application.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIGS. 4A and 4B","FIG. 4A"],"b":["200","208","200","200","202","200","204","206"]},"The category name may be used by the GOM engine  to aggregate other action classes having the same category name into a generated object model  having the object model type \u201cProjectSystem.\u201d The generated object model  uses the method \u201cProjectSystem.CreateProject( )\u201d  to activate the method  of action class  which in turns invokes the API, \u201cDteProjectSystem.CreateNewProject.\u201d",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4B","b":["208","214","214","200","218","220","218","222","224","214"]},"Attention now turns to a discussion of an exemplary operating environment. It should be noted that the operating environment  is exemplary and is not intended to suggest any limitation as to the functionality of the embodiments. The embodiments may be applied to an operating environment  having one or more client(s)  in communication through a communications framework  with one or more server(s) . The operating environment  may be configured in a network environment or distributed environment having remote or local storage devices. Additionally, the operating environment  may be configured as a stand-alone computing device having access to remote or local storage devices.","Each client(s)  is coupled to one or more client data store(s)  that store information local to the client . Each server(s)  is coupled to one or more server data store(s)  that store information local to the server . A client  may be embodied as a hardware device, a software module, or as a combination thereof. Examples of such hardware devices may include, but are not limited to, a computer (e.g., server, personal computer, laptop, etc.), a cell phone, a personal digital assistant, or any type of computing device, and the like. A client  may also be embodied as a software module having instructions that execute in a single execution path, multiple concurrent execution paths (e.g., thread, process, etc.), or in any other manner.","A server  may be embodied as a hardware device, a software module, or as a combination thereof. Examples of such hardware devices may include, but are not limited to, a computer (e.g., server, personal computer, laptop, etc.), a cell phone, a personal digital assistant, or any type of computing device, and the like. A server  may also be embodied as a software module having instructions that execute in a single execution path, multiple concurrent execution paths (e.g., thread, process, etc.), or in any other manner.","The communications framework  facilitates communications between the client  and the server . In an embodiment, the communications framework  may be embodied as a communications network, such as the Internet, a local area network, or a wide area network, or combinations thereof. The communications framework  may embody any type of communications medium, such as wired or wireless networks, utilizing any communication protocol.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6","b":["102","102","270","104","272","106","104","270","102","256"]},"The memory  may be any computer-readable storage media or computer-readable media that may store processor-executable instructions, procedures, applications, and data. The computer-readable media does not pertain to propagated signals, such as modulated data signals transmitted through a carrier wave. It may be any type of memory device (e.g., random access memory, read-only memory, etc.), magnetic storage, volatile storage, non-volatile storage, optical storage, DVD, CD, floppy drive, disk drive, flash memory, and the like. The memory  may also include one or more external storage devices or remotely located storage devices. The memory  may contain instructions and data as follows:","an operating system ;","an interactive development environment  having\n\n","various other applications and data .","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","Although the embodiments have been illustrated with respect to test automation applications, the embodiments are not limited to any particular type of application or interactive development environment. In addition, the embodiments have been described with respect to abstracting logical actions implemented as action classes. However, the embodiments are not limited to action classes and the technology described herein may be applied to other programming constructs, such as without limitation, function calls, script commands, and the like."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
