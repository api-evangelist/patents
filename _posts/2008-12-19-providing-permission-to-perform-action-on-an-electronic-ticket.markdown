---
title: Providing permission to perform action on an electronic ticket
abstract: Described are methods and systems related to providing permission to a user to perform an action on a workflow driven ticket. The ticket is accessed to determine an action type to be performed on the ticket and a correlated object associated therewith. A role based permission tuple is determined based upon a role of the user. A ticket based permission tuple is determined by generating a universal permission tuple based upon the action type and generating a dependency map based upon the correlated object. The dependency map is mapped to the universal permission tuple to construct the ticket based permission tuple. The role based permission tuple is supplemented with the ticket based permission tuple, to provide the required permission to execute the action. Upon an execution of the action, the permission is partially revoked, by removing the ticket based permission tuple.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08296840&OS=08296840&RS=08296840
owner: SAP AG
number: 08296840
owner_city: Walldorf
owner_country: DE
publication_date: 20081219
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["Embodiments of the invention generally relate to the field of workflow management, and more particularly they relate to methods and systems to provide permission to perform an action on a workflow driven ticket.","Workflow management generally relates to managing the execution of a series of processes designed to accomplish some work. Processes in a workflow are made up of a sequence of tasks that may depend on one another and the execution of the tasks may need to take these dependencies into account in order to accomplish the desired work. In one sense, workflows are abstract representations of patterns of activities executed according to a business context determined by, among other things, the types of resources involved, the roles of the individuals asked to execute the tasks and the types of tasks involved.","In an enterprise context, workflow management is used to accomplish a wide variety of business activities such as approving purchases, hiring, sales, marketing and so on. Such activities will have a security component at least because it may involve accessing sensitive information or restrictions on appropriate permissions needed to take certain actions. Enterprise access control applications typically manage permissions and access based on the statically pre-determined role of a user. However, in a dynamic workflow situation, certain tasks or activities may be delegated or otherwise received by individuals who may not have all the access or authority needed to accomplish the tasks they have been assigned based solely on their static role definition. Thus, the task may be left incomplete mainly because a user is allowed to access the task, but may not be allowed to work on the task. In other words, the user may not have all the permissions needed to perform the necessary tasks to complete the activity that is in their workflow. Therefore, a method and system is required for providing such permission to perform action necessary to complete the business process.","Described are methods and systems related to providing permission to a user to perform an action on a workflow driven ticket. To perform an action on the workflow driven ticket, one or more of permissions may be required by the user. In one aspect, a role definition of the user and a role assignment of the user may be used to determine role based permissions for the user. The permission that is provided based upon the role of the user may be described in the form of a role based permission tuple that lists an object and the action that a user with the appropriate permissions can perform on that object.","In one embodiment, additional ticket based permissions may be provided temporarily and specified as a set of objects and corresponding operations that have to be performed that are specific to the ticket. In another embodiment, any ticket based permission could supplement any permission that the user may already have (e.g., role based permissions). The ticket itself could comprise information sufficient enough to enable such access. For instance, in one aspect, to provide the additional permissions, the ticket is parsed to access an action type to be performed on the ticket and a correlated object associated with the action to be performed. Based on the action type, a universal permission tuple is determined. In one embodiment, the universal permission tuple includes one or more object types and the corresponding operations allowed to be performed on the object types associated with the ticket. Based upon the correlated object associated with the ticket, a dependency map is generated. The dependency map identifies one or more auxiliary objects related to the correlated object. The dependency map and the universal permission tuple are mapped to construct a ticket based permission tuple. The ticket based permission tuple is a particular permission tuple constructed based upon an instance of an object type and a corresponding operation to be performed on the object type, that is particular to the ticket. The ticket based permission tuple supplements the role based permission tuple to provide complete permission that may be needed to perform the action on the ticket.","In yet another aspect, dependency maps are generated by determining auxiliary objects based on identifying objects hierarchically related to the correlated object. In one embodiment, at least one target auxiliary object type is identified along with a direction in which to traverse a hierarchy of which the correlated object is a part. The auxiliary object can be identified by traversing the hierarchy until the object of target type is encountered and all objects below the target object in the hierarchy are designated as auxiliary objects of the correlated object for generating the dependency map.","In an embodiment, the ticket based permission tuple is removed based upon the completion of the action on the ticket. The removal of the ticket based permission tuple would revoke the complete permission provided on the ticket. On removal of the ticket based permission tuple, the user will no longer have permission to perform the necessary action on the ticket. By restricting the permission, the action to be performed on the workflow ticket is restricted to the intended user at the intended time. The ticket does not accept any modifications to be performed once the partial permission is revoked. Also, the types of operations that have to be performed on the ticket are monitored.","In an embodiment, an already existing permission is supplemented with the additional permission (e.g., ticket based permission tuple). This additional permission is independent from currently available permissions. Thus the application programming interface (API) layer does not require any modification with respect to permission logic that is currently available. The additional permission is only being inserted to the existing permission logic, to generate the permissions needed for executing an action on the ticket.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following description of embodiments thereof, presented in connection with the following drawings in which like reference numerals are used to identify like elements throughout.","A workflow is a process that is made up of a sequence of processes or tasks which may be dependent on each other. Tasks are specific pieces of work that may need to be carried out to perform an action. According to one embodiment, a workflow driven ticket is a collection of information, received via workflow for instance, requesting that the recipient take a specific action with respect to the content of the ticket. The workflow ticket is a specific instance of a workflow task that is instantiated at runtime and is sometimes also referred to as a workflow item. The information in the ticket may include details about the type of action to be completed, one or more objects that are involved in the action, operations that have to be performed on the objects and the like. In one embodiment, an object associated with a ticket is a collection of any type of data including, but not limited to, text documents such as forms, database tables, reports, analytics, graphics, images, business objects, hyperlinks and so on. Thus, the objects could be some information needed to perform the action. The action itself need not be directly on the object itself. So the action could include but is not limited to, approving, reviewing, editing, and commenting on the object itself. However, the action itself could be some operation that needs to be performed based on the information provided in the object. Each object may have metadata associated with it that describe its attributes, characteristics, components, properties, relationships and any other data that describe the object.","A user is notified of a ticket via workflow notifications in the form of emails, additions to their universal task list and other messages that could alert the user to the presence of a new ticket that needs their attention. However, users receiving these tickets need permission to take the actions described in the ticket.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1A","b":["110","110","110","110","105","110","105","110","105","105","105","105"]},"In one embodiment, a user-role data repository  may include information about the users  allowed to work on various ticket types such as his or her role, assignment and the role definition. Based upon the role definition and role assignment of the user  from user-role data repository , role based permission tuple  is determined. Role based permission tuple  is just one exemplary method of specifying permissions needed to complete the action specified in the ticket . The role based permission tuple  includes permissions that are available to the user  based on their role alone. The role based permission tuple  may be in the form of a permission pair, including an object and an operation that the holder of the permission is allowed to perform on the object.","In an embodiment, role based permission tuple  which is provided based upon the role of the user  may not be sufficient to perform the specified action on ticket . An additional set of permissions may be necessary to complete the action. To determine this additional set of permissions, ticket  is parsed to access the action type and the correlated object associated with ticket . Based upon the action type, required metadata is retrieved from ticket metadata repository , to determine a generalized set of permissions referred to herein as universal permission tuple  that may be needed by a user  to perform the specified action on the ticket . Universal permission tuple  includes tuples of object types and corresponding operations to be performed on the object types. The object types define the type of objects (e.g., documents, data, and images) that a user  may need to access, alter, create and so on, in to order complete the action associated with the ticket . The corresponding operations define what the users  are allowed to do with the object types that are associated with ticket . For example, the object types that are associated with ticket  may include \u201cEVALUATION\u201d, \u201cSALES DEAL\u201d, \u201cCUSTOMER\u201d, \u201cPRODUCT\u201d, \u201cBALANCE SHEET\u201d, \u201cBILL OF MATERIALS\u201d, \u201cPURCHASE ORDER\u201d, \u201cINVOICE\u201d. The corresponding operations for the object types may include \u201cCREATE\u201d, \u201cRETRIEVE\u201d, \u201cMODIFY\u201d, \u201cASSESS\u201d, \u201cTALLY\u201d, \u201cAPPROVE\u201d, \u201cORDER\u201d and the like.","The ticket  in a workflow typically includes a correlated object pertaining to an action associated with the ticket (e.g., ticket ). However, to perform the action specified on the ticket  the user  may be required to access or otherwise interact with objects other than the correlated object. In one embodiment, these other objects can be identified based on their relationships or dependencies with the correlated object of the ticket . Such auxiliary objects may be objects that exist around the correlated object associated with ticket . The auxiliary objects that are present around the correlated object may be determined based upon a relationship of the correlated object. For instance, depending upon where a correlated object exists in a hierarchical chain.","The collection of auxiliary objects can be structured as a dependency map  identifying one or more auxiliary objects that are related to the correlated object associated with ticket , and the corresponding relationships. For example, the correlated object of ticket  is \u201cSALES DEAL 123\u201d. The metadata about \u201cSALES DEAL 123\u201d may note that this particular sales deal pertains to \u201cPRODUCT XYZ\u201d and \u201cCUSTOMER ABC.\u201d Thus, the auxiliary objects \u201cPRODUCT XYZ\u201d and \u201cCUSTOMER ABC\u201d can be included in a dependency map  for the ticket . Typically, auxiliary objects are specific to the correlated object of a ticket (e.g., ).","The metadata needed to identify these auxiliary objects can be retrieved from ticket metadata repository . Some of the data needed to determine the dependency map  could also be included in the ticket  itself. In one embodiment, starting with the object referred to by the workflow driven ticket , the object hierarchy is traversed until a target object is found. In one embodiment, the target object is specified in the metadata but preferably, the metadata does not refer to specific instances of target objects since these are not known at the time the metadata is built. Therefore it refers to a type of target object. In the sales deal evaluation for \u201cSALES DEAL 123\u201d, the metadata could define that permissions should be granted on all products within the same organization unit as the sales deal is defined for. So the object type of the target would be \u201cORGUNIT\u201d, a hierarchy traversing mode may be \u201cupwards.\u201d The dependency map  determination process will now traverse the hierarchy upwards starting with the \u201cSALES DEAL 123\u201d looking for an object type \u201cORGUNIT.\u201d Once an object of type \u201cORGUNIT\u201d is encountered the process will traverse downwards in order to discover all child objects of that organizational unit and for each child of type \u201cPRODUCT\u201d the user  will be granted \u201cDISPLAY\u201d permission based on the universal permission tuple  \u201cPRODUCT\/DISPLAY\u201d.","Universal permission tuple  and dependency map  are mapped to construct ticket based permission tuple  that is particular to the ticket  in question. Ticket based permission tuple  is a particular permission tuple that is constructed specifically for ticket , and in an embodiment, has a life that is only as long as the ticket . This particular permission tuple defines a particular instance of an object and a corresponding operation to be performed on the ticket . The particular instance of the object and the corresponding operation is determined based upon mapping information about the correlated object, the auxiliary objects and the universal permission tuples  by using the object types as the key. For instance, the instance of the object type may be the correlated object type that is defined in ticket  and the corresponding operation may be the operation that is defined in the universal permission tuple  for that object type. For example, the instance of the object type may be \u201cSALES DEAL 123\u201d and the operation to be performed may be \u201cRETRIEVE\u201d.","The constructed ticket based permission tuple  provides additional permissions based upon the action types and the correlated objects of ticket , that was not provided by role based permission tuple . Ticket based permission tuple  supplements the role based permission tuple , to provide the complete permission needed to execute the action on ticket . In an embodiment, ticket based permission tuple  is temporary and is removed based upon the completion of the action on ticket . The removal of ticket based permission tuple  would revoke some of the permissions provided but the role based permission would remain.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1B","b":["150","160","150","155","165","175","170","170","165"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 2A-2B","b":["205","205","205","205","205"]},"Referring first to , based upon a role definition and a role assignment defined for a role of a user, a role based permission tuple  is determined. Role based permission tuple  includes an object and a corresponding operation to be performed on the object, that the user is allowed to perform. For instance, a role definition for a first user \u201cJOHN\u201d may be a \u201cCUSTOMER CARE REPRESENTATIVE\u201d and the role assignment may be \u201cCUSTOMER ABC\u201d. The role based permission tuple  for ticket , for John includes object \u201cCUSTOMER ABC\u201d and corresponding operation \u201cEDIT\u201d. The role based permission tuple  for John includes the object and the corresponding operation that John is allowed to perform, and defines permission based upon John's role.","In an embodiment, these permissions may not be sufficient to complete the execution of the ticket . Some additional permission may be necessary for performing the action on the ticket . Here, John has permission to edit the customer records of \u201cCUSTOMER ABC\u201d, but this permission does not allow John to evaluate a \u201cSALES DEAL 123\u201d that may be defined for a particular product of \u201cCUSTOMER ABC\u201d. To provide the additional permission, the ticket  is parsed to access the action type to be performed on the ticket  and a correlated object associated with the ticket . Based upon the action type of the ticket , universal permission tuple  is determined. Universal permission tuple  includes the object types and the corresponding operations to be performed on the object types associated with the ticket . For instance, universal permission tuple  includes object type \u201cEVALUATION\u201d and corresponding operation \u201cCREATE\u201d, object type \u201cSALES DEAL\u201d and corresponding operation \u201cRETRIEVE\u201d, object type \u201cPRODUCT\u201d and corresponding operation \u201cACCESS\u201d, and object type \u201cCUSTOMER\u201d and corresponding operation \u201cACCESS\u201d. This list preferably comprises all the permissions needed for John to perform the action on ticket . However, it is possible that some of the permissions needed to accomplish the operation could also be defined based on the role of the person. For instance, user John who is a customer care representative for customer ABC at  has a role based permission to \u201cEDIT\u201d customer records for customer ABC, which is a higher permission than the permission \u201cACCESS\u201d required to perform the action on the ticket . In this case, the role based permission supersedes the ticket based permission regarding the customer record for customer ABC.","However, not all the necessary permissions can be obtained based on user's role. In that event, one has to rely on the temporary access provided by the ticket based permission tuple . The ticket based permission tuple  is created by particularizing the universal permission tuple  to the ticket  based upon its correlated object. Dependency map  identifies one or more auxiliary objects related to the correlated object, and the corresponding identifiers. For instance, dependency map  identifies the auxiliary object \u201cCUSTOMER ABC\u201d and auxiliary object \u201cPRODUCT XYZ\u201d that are related to \u201cSALES DEAL 123\u201d.","Dependency map  and universal permission tuple  are mapped to construct ticket based permission tuple  that particularizes the universal permission tuple  to the particular ticket . It is this strong association of the ticket based permission tuple  to the ticket  and the action associated with the ticket  that allows the system to provide the needed permissions without having a large overhead for maintaining the lifecycle of these permissions. The temporary permissions simply expire when the ticket is cleaned-up after the action on the ticket  is completed. Ticket based permission tuple  is a particular permission tuple constructed based upon an instance of an object type and a corresponding operation to be performed on the object type, that is particular to ticket . For instance, ticket based permission tuple  includes an instance of a new object type \u201cEVALUATION OF SALES DEAL\u201d and corresponding operation \u201cCREATE\u201d, the instance of the object type \u201cSALES DEAL 123\u201d, and corresponding operation \u201cRETRIEVE\u201d, the instance of the object type \u201cPRODUCT XYZ\u201d, and corresponding operation \u201cACCESS\u201d and the instance of the object type \u201cCUSTOMER ABC\u201d, and corresponding operation \u201cACCESS\u201d.","Ticket based permission tuple  is supplemented to role based permission tuple  to construct master permission tuple , to provide complete permission to perform the action on ticket . Master permission tuple  now includes object type \u201cCUSTOMER ABC\u201d and corresponding operation \u201cEDIT\u201d, object type \u201cEVALUATE SALES DEAL\u201d and corresponding operation \u201cCREATE\u201d, object type \u201cSALES DEAL 123\u201d and corresponding operation \u201cRETRIEVE\u201d, and object type \u201cPRODUCT XYZ\u201d and corresponding operation \u201cACCESS\u201d. Each object type and corresponding operation in master permission tuple  is an instance of the object type and corresponding operation that is particular to ticket . However, as noted above, where role based permissions provide permissions at levels at or above what is required for the action, the role based permissions preferably supersede the ticket based permissions. Ticket based permission tuple  may be removed from master permission tuple , based upon the completion of the action on ticket .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2B","b":["235","205","235"]},"In an embodiment, these permissions may not be sufficient to complete the execution of the ticket . Some additional permission may be necessary for performing the action on the ticket . Here, in , Lisa has permission to access \u201cPRODUCT XYZ\u201d, but this permission does not allow Lisa to evaluate a \u201cSALES DEAL 123\u201d that may be defined for a particular \u201cCUSTOMER ABC\u201d. To provide the additional permission, the ticket  is parsed to access the action type to be performed on the ticket  and a correlated object associated with the ticket . Based upon the action type of the ticket , universal permission tuple  is determined. Universal permission tuple  includes object type \u201cEVALUATION\u201d and corresponding operation \u201cCREATE\u201d, object type \u201cSALES DEAL\u201d and corresponding operation \u201cRETRIEVE\u201d, object type \u201cPRODUCT\u201d and corresponding operation \u201cACCESS\u201d, and object type \u201cCUSTOMER\u201d and corresponding operation \u201cACCESS\u201d. This list preferably comprises all the permissions needed for Lisa to perform the action on ticket . However, it is possible that some of the permissions needed to accomplish the operation could also come based on the role of the person. For instance, user Lisa who is a product manager for product XYZ at  has a role based permission to \u201cEDIT\u201d product records for product XYZ, which is a higher permission than the permission \u201cACCESS\u201d required to perform the action on the ticket . In this case, the role based permission supersedes the ticket based permission regarding the product record for product XYZ.","However, not all the necessary permissions can be obtained based on user's role. In that event, one has to rely on the temporary access provided by the ticket based permission tuple . The ticket based permission tuple  is created by particularizing the universal permission tuple  to the ticket  based upon its correlated object. Dependency map  identifies one or more auxiliary objects related to the correlated object, and the corresponding identifiers. For instance, dependency map  identifies the auxiliary object \u201cPRODUCT XYZ\u201d and auxiliary object \u201cCUSTOMER ABC\u201d that are related to \u201cSALES DEAL 123\u201d.","Dependency map  and universal permission tuple  are mapped to construct ticket based permission tuple  that particularizes the universal permission tuple  to the particular ticket . It is this strong association of the ticket based permission tuple  to the ticket  and the action associated with ticket  that allows the system to provide the needed permissions without having a large overhead for maintaining the lifecycle of these permissions. The temporary permissions simply expire when the ticket is cleaned-up after the action on the ticket  is completed. Ticket based permission tuple  is a particular permission tuple constructed based upon an instance of an object type and a corresponding operation to be performed on the object type, that is particular to ticket . For instance, ticket based permission tuple  includes an instance of a new object \u201cEVALUATION OF SALES DEAL\u201d and corresponding operation \u201cCREATE\u201d, the instance of the object type \u201cSALES DEAL 123\u201d, and corresponding operation \u201cRETRIEVE\u201d, the instance of the object type \u201cPRODUCT XYZ\u201d, and corresponding operation \u201cACCESS\u201d and the instance of the object type \u201cCUSTOMER ABC\u201d, and corresponding operation \u201cACCESS\u201d.","Ticket based permission tuple  is supplemented to role based permission tuple  to construct master permission tuple , to provide complete permission to perform the action on ticket . Master permission tuple  now includes object type \u201cPRODUCT XYZ\u201d and corresponding operation \u201cEDIT\u201d, object type \u201cEVALUATE SALES DEAL\u201d and corresponding operation \u201cCREATE\u201d, object type \u201cSALES DEAL 123\u201d and corresponding operation \u201cRETRIEVE\u201d, and object type \u201cCUSTOMER ABC\u201d and corresponding operation \u201cACCESS\u201d. Each object type and corresponding operation in master permission tuple  is an instance of the object type and corresponding operation that is particular to ticket . However, as noted above, where role based permissions provide permissions at levels at or above what is required for the action, the role based permissions preferably supersede the ticket based permissions. Ticket based permission tuple  may be removed from master permission tuple , based upon the completion of the action on ticket .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 3","b":["305","310"]},"In process block , based upon the action type of the ticket, a universal permission tuple is determined. The universal permission tuple includes one or more object types and corresponding operations to be performed on the object types associated with the ticket. In process block , based upon the correlated object associated with the ticket, a dependency map is generated. The dependency map identifies one or more auxiliary objects related to the correlated object. In process block , the dependency map is mapped to the universal permission tuple, to construct a ticket based permission tuple. The ticket based permission tuple is a particular permission tuple constructed based upon an instance of an object type and a corresponding operation to be performed on the object type, that is particular to the ticket. The ticket based permission tuple provides the additional permission necessary to perform the action on the ticket.","In process block , the ticket based permission tuple is supplemented to the role based permission tuple to provide complete permission to perform the action on the ticket. In process block , based upon completion of the action on the ticket, the permission is partially revoked by removing the ticket based permission tuple.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4","b":["400","405","410","415","420","440","460","455","405","415","455","415","420","455","420","405","415","455","415","440","460","455"]},"System  provides permission to the user to perform the action on ticket . Ticket  includes an action to be executed on the ticket , and a correlated object associated with the ticket . The correlated object may include the object on which the action needs to be performed. Based upon a role of the user, authorization engine  determines necessary permissions to generate role based permission tuples  particular to the ticket  (e.g., based on the role of the user receiving the ticket) from the role based permission tuple  stored in the user-role assignment repository . In an embodiment, these role based permissions may not be sufficient to complete the execution of the action on the ticket . An additional set of permissions may be necessary to complete the action. To determine this additional set of permissions, authorization engine  calls API layer , to parse ticket , and access the action type and correlated object associated with ticket . Based upon the action type, required metadata is retrieved from ticket metadata repository , to determine universal permission tuple  that may be needed by the user to perform the specified action on ticket . In an embodiment, universal permission tuple  may be stored on ticket metadata repository . Based upon the correlated object pertaining to the action associated with the ticket , required metadata is retrieved from ticket metadata repository , to determine dependency map . Dependency map  identifies one or more auxiliary objects that are related to the correlated object.","Authorization engine  maps universal permission tuple  and dependency map  to construct ticket based permission tuple  based on the mapping. Ticket based permission tuple  is a particular permission tuple that is constructed specifically to ticket , and may have a life that is only as long as ticket . This particular permission tuple defines a particular instance of an object and a corresponding operation to be performed on the ticket . The constructed ticket based permission tuple  provides additional permissions based upon the action types and the correlated objects of ticket , that was not provided by role based permission tuple . In an embodiment, ticket based permission tuple  may be temporarily stored in ticket metadata repository . Authorization engine  supplements role based permission tuple  with ticket based permission tuple , to provide complete permission to execute the action on ticket . Once the ticket based permission tuple  is available along with the role based permission tuple , business logic execution engine  executes necessary action on ticket . In an embodiment, ticket based permission tuple  is temporary and is removed based upon the completion of the action on ticket . The removal of ticket based permission tuple  would revoke the some of the permissions provided but the role based permission tuple  would remain.","Embodiments of the invention may include various steps as set forth above. The steps may be embodied in machine-executable program code which causes a general-purpose or special-purpose processor to perform certain steps. Alternatively, these steps may be performed by specific hardware components that contain hardwired logic for performing the steps, or by any combination of programmed computer components and custom hardware components.","Embodiments of the present invention may also be provided as a tangible machine-readable medium for storing the machine-executable instructions. The tangible CD-ROMs, DVD ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, or any other type of machine-readable media suitable for tangibly storing electronic instructions. The machine readable medium can provide the instructions stored therein to a computer system comprising a processor capable of reading and executing the instructions to implement the method steps described herein.","It should be appreciated that reference throughout this specification to one embodiment or an embodiment means that a particular feature, structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. These references are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures or characteristics may be combined as suitable in one or more embodiments of the invention.","Throughout the foregoing description, for the purposes of explanation, numerous specific details were set forth in order to provide a thorough understanding of the invention. It will be apparent, however, to one skilled in the art that the invention may be practiced without some of these specific details. The detailed description as set forth above includes descriptions of method steps. However, one skilled in the art will understand that the order of the steps set forth above is meant for the purposes of illustration only and the claimed invention is not meant to be limited only to the specific order in which the steps are set forth. Accordingly, the scope and spirit of the invention should be judged in terms of the claims which follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The embodiments of the invention, together with their advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings. The invention is illustrated by the way of example and not by the way of limitation in the figures of the accompanying drawings. It should be noted that references to \u201can\u201d or \u201cone\u201d embodiment in this disclosure are not necessarily to the same embodiment, and such references mean at least one.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 2A-2B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
