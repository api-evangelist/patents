---
title: Power estimation using activity information
abstract: A method of estimating power consumption of an electronic device is performed by a processing device. The estimating includes estimating a power consumption of a gate-level implementation of an electronic device design. The estimating further includes independently calculating for each of a plurality of implementation-invariant nodes of the design an incremental power dissipation associated with that node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08739094&OS=08739094&RS=08739094
owner: LSI Corporation
number: 08739094
owner_city: Milpitas
owner_country: US
publication_date: 20111222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is directed, in general, to systems and methods for electronic design automation.","An integrated circuit (IC) typically includes numerous connections between electrical components. These connections are often designed with the assistance of an electronic design automation (EDA) tool. The EDA tool typically includes software instructions operating on an engineering workstation to provide visualization of the IC design. A design engineer manipulates modular design cells from a cell library to build up a design database. An autorouter within the EDA tool determines the connection paths between the design cells. When the design layout is complete, the layout data are used in a pattern generation (PG) step that generates pattern data suitable to produce a set of pattern masks used in photolithographic steps of an IC manufacturing process.","Before the PG step, the designer may perform a gate-level simulation of the IC design and estimate the power consumption of the IC from simulated activity on the IC. If the estimate exceeds a design objective, the designer may revise the design database to reduce the power consumption locally or globally as needed to meet the relevant design objective. The designer may again perform a gate-level simulation to determine if the revised design meets the design objective. This revision cycle consumes significant time, as the gate-level simulation of even a moderately complex IC design may require significant time and computational resources.","One aspect provides a method of estimating power consumption of an electronic device. The estimating includes employing a computing device to estimate the power consumption of a gate-level implementation of an electronic device design. The estimating further includes independently calculating for each of a plurality of implementation-invariant nodes of the design an incremental power dissipation associated with that node.","Another aspect provides a computer program product. The computer program product includes a computer readable medium having a series of operating instructions embodied therein. The series of operating instructions is adapted to be executed to implement a method of estimating power consumption of an electronic device. The method includes estimating a power consumption of a gate-level implementation of an electronic device design. The estimating further includes independently calculating for each of a plurality of implementation-invariant nodes of the design an incremental power dissipation associated with that node.","Yet another aspect provides an electronic device design power estimation system. The estimation system includes an electronic design automation tool and a power estimation module. The power estimation module is configured to receive from the electronic design automation tool an electronic device design. The power estimation module is further configured to estimate a power consumption of a gate-level implementation of the design. The estimating includes independently calculating for each of a plurality of implementation-invariant nodes of the design an incremental power dissipation associated with that node.","Embodiments of methods and systems described herein provide an innovative technique to estimate the power consumed by a candidate design for an electronic device, e.g. an integrated circuit (IC). In various embodiments signal transition (\u201cactivity\u201d) data are determined from a register-transfer level (RTL) description of the design at implementation-invariant nodes. The activity data are coupled with a back-annotated description of the design. Power consumption metrics for the design are determined, allowing the design to be modified at an earlier stage in the IC design cycle, e.g. prior to a full gate-level simulation, than is provided by conventional power estimation methods. By identifying noncompliant regions of the design without performing a full closed-timing analysis, embodiments provide for bypassing costly gate-level simulations while providing guidance to the designer that is sufficient to produce a useful estimate of power consumption of the candidate design.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","110","115","110","120","115"]},"A power simulation module  receives the RTL description database  and estimates a metric that characterizes power consumption of the candidate design  and provides a power consumption database . The power simulation module  and the power consumption database  are described in greater detail below.","In an assessment module  the power estimate from the power consumption database  is assessed for compliance with one or more design criteria, such as total time-average power consumption, peak instantaneous power consumption, and\/or total power consumption within one or more implementation-invariant nodes of the design. If the assessment module  determines that the candidate design  is noncompliant with one or more design criteria, the candidate design  may be modified in a design modification step  to correct the source(s) of the noncompliant power consumption. The power estimation may then be repeated if desired to determine a new power estimate.","After the candidate design  is determined by the assessment module  to comply with applicable power consumption criteria, the method  proceeds to a gate-level simulation module . The simulation module , which may be conventional, may provide a gate-level power estimate. This power estimate in some cases may determine that the power consumption of the candidate design  is noncompliant notwithstanding the prediction by the power simulation module . In such cases, the design  may again be modified in the step  to correct any sources of noncompliance. However, such \u201cfalse negatives\u201d by the power simulation module  are expected to be infrequent enough that the early screening provided by the method  will result in an overall increase in design productivity. Moreover, the simulation module  may in some cases determine that one or more logic or timing errors in the candidate design  require correction, notwithstanding the power estimate. When this is the case, the RTL description may be modified to correct both the logic error and any noncompliant power consumption.","Once the candidate design  complies with the power consumption criteria as determined by both the assessment module  and the simulation module , the method  proceeds to a transistor-level layout module  and a tapeout module  in which the candidate design  is rendered in a design database suitable for pattern generation. The modules  and  may be conventional.","The functions referred to herein, e.g. with respect to , may be modules or portions of modules (e.g., software, firmware or hardware modules). For example, although the described embodiment includes software modules and\/or includes manually entered user commands, the various example modules may be application specific hardware modules. The software modules discussed herein may include script, batch or other executable files, or combinations and\/or portions of such files. The software modules may include a computer program or subroutines thereof encoded on computer-readable media.","Additionally, those skilled in the art will recognize that the boundaries between modules are merely illustrative and alternative embodiments may merge modules or impose an alternative decomposition of functionality of modules. For example, the modules discussed herein may be decomposed into sub-modules to be executed as multiple computer processes and, optionally, on multiple computers. Moreover, alternative embodiments may combine multiple instances of a particular module or sub-module. Furthermore, those skilled in the art will recognize that the functions described in example embodiments are for illustration only. Operations may be combined or the functionality of the functions may be distributed in additional functions in accordance with the invention.","Alternatively, such actions may be embodied in the structure of circuitry that implements such functionality, such as the micro-code of a complex instruction set computer (CISC), firmware programmed into programmable or erasable\/programmable devices, the configuration of a field-programmable gate array (FPGA), the design of a gate array or full-custom application-specific integrated circuit (ASIC), or the like.","Each of the blocks of the method  may be executed in whole or in part by a functional module, e.g. a software module or hardware module, or a portion of a module, or a computer system user using a computer system or electronic design automation tool, e.g. a design workstation, such as a computer system , described below. Thus, the method , the functions thereof and modules therefore may be executed on a computer system configured to execute the functions of the method  and\/or may be executed from computer-readable media. The method  may be embodied in a machine-readable and\/or computer-readable medium for configuring a computer system to execute the method. Thus, the software modules may be stored within and\/or transmitted to a computer system memory to configure the computer system to perform the functions of the module.","Such a computer system normally processes information according to a program (a list of internally stored instructions such as a particular application program and\/or an operating system) and produces resultant output information via I\/O devices. A computer process typically includes an executing (running) program or portion of a program, current program values and state information and the resources used by the operating system to manage the execution of the process. A parent process may spawn other, child processes to help perform the overall functionality of the parent process. Because the parent process specifically spawns the child processes to perform a portion of the overall functionality of the parent process, the functions performed by child processes (and grandchild processes, etc.) may sometimes be described as being performed by the parent process.","The software modules described herein may be received by such a computer system, for example, from computer readable media. The computer readable media may be permanently, removably or remotely coupled to the computer system. The computer readable media may non-exclusively include, for example, any number of the following: magnetic storage media including disk and tape storage media, optical storage media such as compact disk media (e.g., CD-ROM, CD-R, etc.) and digital video disk storage media, nonvolatile memory storage memory including semiconductor-based memory units such as flash memory, EEPROM, EPROM, ROM or application-specific integrated circuits (ASICs), volatile storage media including registers, buffers or caches, main memory, RAM and the like, and data transmission media including computer network, point-to-point telecommunication and carrier wave transmission media. In a UNIX-based embodiment, the software modules may be embodied in a file which may be a device, a terminal, a local or remote file, a socket, a network connection, a signal, or other expedient of communication or state change. Other new and various types of computer-readable media may be used to store and\/or transmit the software modules discussed herein.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["200","200"]},"The computer system  includes a bus  that interconnects major subsystems of the computer system . The number and type of subsystems connected to the bus  is not limited to any particular number and type. In an illustrative and nonlimiting embodiment the computer system  includes a central processor unit (CPU) , a system memory , a display  and display adapter, a keyboard  and keyboard adapter, a fixed disk  and storage interface, and a network interface . In a nonlimiting embodiment the computer system  is a UNIX\u2122 workstation.","The computer system  is configured to store operating instructions, e.g. on the fixed disk , that implement one or more embodiments of the disclosure. The instructions may be contained in, e.g. a standalone program or a subroutine. Additionally, operating instructions may be received by the CPU  via electronic signals received via the network interface .","In some cases the computer system  is optimized for circuit design activities, and may include the capability to visualize the candidate design , such as by an EDA tool. Without limitation, an example of such a platform and tool is a UNIX-based engineering workstation running the IC Compiler tool from Synopsys, Inc., Mountain View, Calif., USA. The various modules described herein may be linked to or invoked by other software operating on the computer system  by, e.g. a subroutine call or application programming interface (API).",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["130","130","310","320","310","320","310","320"]},"Each of the modules ,  receives the RTL description database  as input, and each of the modules ,  provides output to a power estimation module . The activity simulation module  produces as output a value change dump (VCD) file , the implementation module  produces as output a back-annotation database , and the power estimation module  stores estimated power values in the power consumption database .","The activity simulation module  simulates the activity of the candidate design  in accordance with the RTL description database  and test vectors  to determine state changes at implementation-invariant nodes in the candidate design . The state changes are captured in the VCD file . The activity simulation module  determines the state of at least some and preferably all of the implementation-invariant nodes of the candidate design  at each of a number of time increments. For example, the activity simulation module  may operate the candidate design  in a simulation space for each of a number of the test vectors . The activity simulation module  then captures the state at implementation-invariant nodes at each of a number of cycles of the simulation clock.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4A","b":["410","420","115","410","430","430","120","430","440","450","420","460","440","450","420"]},"The gate-level elements are determined by the implementation module  from the functional description of the design block . Depending on specific design choices the elements determined by the implementation module  may differ from one to another particular candidate design . However, the inputs  and the output  are invariant between different implementations of the logic within the logic cone . Moreover, inputs to and outputs from any registers or latches inferred in the RTL implementation are also included in the set of implementation-invariant nodes.","Returning to , the implementation module  operates to render the candidate design  at a physical (e.g. gate) layer from which physical parameters such as propagation delays may be determined. Implementation may include, e.g. selecting combinations of gates, and connections between the gates, that provide the function of each design block in the RTL description database . The module  produces as output the back-annotation database  that captures such physical parameters.","The back-annotation database  includes back-annotation data, e.g. parametric data determined from a physical implementation of the candidate design  that affects the timing of signals in the simulation space. The back-annotation data may include, e.g. input ramptime, output loading and gate delays for functional cells in the candidate design . These data may be generated, e.g. by an EDA tool such as the aforementioned Synopsys tool.","In the illustrated embodiment the implementation module  operates in parallel with the simulation module , but is not limited to such operation. The implementation module  may be executed on a same or a different computing platform as the simulation module , e.g. on the computer system . It may preferred, however, to execute the simulation module  and the implementation module  on separate computing platforms to allow simultaneous operation to reduce the total time needed to prepare the inputs to the power estimation module . In some embodiments, a first computing platform is optimized for executing the simulation module , while a second computing platform is optimized for executing the implementation module . Optimization may include, e.g. appropriate selection of processor speed and architecture, and selection of memory configuration.","The power estimation module  operates to associate each implementation-invariant node of the candidate design  with activity data from the VCD file  and back-annotation data from the back-annotation database  relevant to that node. The power associated with the transitions at each node may then be computed using well-known physical relationships. The module  may compute the power dissipation for each node at each time increment of the simulation. Advantageously, in some embodiments as described further below the power estimation module  streamlines the power calculation by computing the estimated power at each implementation-independent node only once.","However, the power may be overestimated in some cases by including simulated transitions that are unlikely to occur in actual operation of the candidate design . To reduce such overestimation, a timing constraints database  provides timing data that may be used by the power estimation module  to modify the treatment of events at implementation-invariant nodes. For example, some events that would otherwise be included in a power estimate may be disregarded when the timing data indicate that event would not propagate within the circuit.","This aspect is described further with reference to , which present illustrative and nonlimiting examples of several timing scenarios.  illustrates a hypothetical design block including latches , . The latch  receives a clock A at its clock input, and the latch  receives a clock B at its clock input. Both latches ,  receive an input signal I at their respective data inputs. The latch  produces a signal output O, and the latch  produces a signal output O.","In , the input signal transitions from zero to one, and the clock A leads the clock B by, e.g. 10 ns. In , the input I leads both the clocks A and B. In this case the output signals O and O both record a change of state triggered by their respective clocks. In , the input I leads the clock B, but lags the clock A. In this case the output O records a state change, while the output O does not. In the case of , the input I lags both the clocks A and B. In this case, neither of the outputs O and O records a state change. The incremental power associated with each of these cases is different.","In this example, the timing constraints database  in the case of  would not include an entry to disregard either of the state changes at O or O. In the case of the example of , the timing constraints database  may include an entry interpreted by the power estimation module  to disregard a state transition at the output O that might otherwise be predicted to occur by the simulation module . In the case of the example of  the timing constraints database  may include entries directing the power estimation module  to disregard state transitions at both of the outputs O and O that might otherwise be predicted to occur by the simulation module .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4B","FIG. 4B"],"b":["440","430","430","460"]},"For each logic cone, the activity of any part of the cone can be derived from one or more of the following:","1) The activity at the implementation-invariant inputs of the logic cone;","2) The timing information defining the clocks and timing for implementation-invariant points;","3) The logic function of the gates in the cone, e.g. as defined in the back-annotation database ;","4) The connectivity of the gates in the cone, e.g. as defined in the back-annotation database ; and","5) The timing of signals propagating through the logic cone, e.g. as defined in the back-annotation database .","A logic cone may be of any size. However, the larger the logic cone, the less likely it will be to observe multiple occurrences of a state change at the output for a particular combination of inputs. The value of the methods and systems described herein may be greater for those cases in which multiple instances of a combination of state changes are observed, so the previously described computational benefit may be realized. However, if logic cones used in the simulation are too small, then the power computation may be dominated by too many small blocks. A balance is therefore desirable between the size and the number of logic cones used in the simulation. This balance will typically be design-dependent and resource-dependent.","Once the logic cones are established, the power estimation module  may calculate the incremental power dissipation of the logic cones selected to represent the candidate design . The incremental power calculation of each logic cone may be performed independently of the calculation power calculation of the remaining logic cones. These values may if desired be independently calculated on N computing platforms operating in parallel, thus reducing the computation time of the power estimation by about 1\/N. In this manner, the design activity represented by the modules  and  and the step  may be performed with a manageable cycle time, providing for rapid refinement of the power consumption characteristics of the candidate design .","Herein, with respect to calculated power of a logic cone, \u201cindependently calculated\u201d means that each power calculation may be performed independently of other logic cones, e.g. on different computing platforms, or in a manner in which the power calculation with respect to one logic cone does not depend on the input or output of any other logic cones.","In effect the power simulation module  performs a gate-level simulation on each logic cone. However, in contrast with conventional practice, the gate-level simulations of multiple logic cones are performed independently, making the power simulation easily scalable to use with multiple computing platforms. In another aspect, the candidate design  does not need to be timing closed because the candidate design  has been split into the individual logic cones, with the inputs to the cones defined by the input activity information. Moreover, once the power for a particular state change has been calculated, it does not need to be recalculated. For example, the input activity information for a logic cone may be transformed into an algebraic relationship weighting the power dissipation associated with each state change by the number of times that state change is encountered in the simulation. This aspect obviates the need for redundant computation of the power dissipation of a state change that has already been encountered in the simulation, significantly reducing computational time and resources.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 4B","b":["470","480","470","480","490","460","470","480","490"],"o":["AB","CD","EF"]},{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE I"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C","D","E ( )","F ( )","Z"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"T","0","1","1","0","1","1","0"]},{"entry":[{},"T","1","1","0","0","0","1","1"]},{"entry":[{},"T","0","1","1","0","1","1","0"]},{"entry":[{},"T","1","1","0","0","0","1","1"]},{"entry":[{},"T","0","1","1","0","1","1","0"]},{"entry":[{},"T","1","1","0","0","0","1","1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"8","align":"center","rowsep":"1"}}]}]}}]}}},"With continuing reference to Table I and , an example of power computation for the logic cone  is described without limitation to any particular logic configuration. Those skilled in the art will appreciate that the principles embodied in the described example may be applied to logic cones of any number or size.","The power dissipated by the candidate design  is expected to be dominated by switching losses when the design in implemented in CMOS. Thus, the power dissipated by each of the NAND gates ,  and  may be computed at each unique combination of state transitions of the E, F and Z outputs at each of a series of time increments in a design simulation.","First the transition from Tto Tis considered. The E output switches from 1\u21920, F is a constant 1, and Z switches from 0\u21921. The E output will switch at Tplus the gate delay of the gate . The Z output will switch at Tplus the gate delay of the gate  and the gate delay of the gate . The standard cells are characterized for power based on input ramptime and output loading. Because this is the first time this combination of state transitions has been encountered in the logic cone , the power consumption of the gates  and  is retrieved from the standard cell library based on the unique combination of output loading and input ramptime of these standard cells. The total power consumption of the gates  and  represents the incremental power dissipated by the logic cone  for the T\u2192Tstate transition. This value is stored in the power estimate database , mapped to the combination of state transitions at inputs A, B, C and D, and the state transition at output Z.","At the transition T-T, the E output switches from 0\u21921, and Z switches from 1\u21920. The E output will switch at Tplus the gate delay of the gate . The Z output will switch at Tplus the gate delay of the gate  and the gate delay of the gate . Again, this combination of state transitions has not been previously encountered in this time increment, so the power consumption of the gates  and  is retrieved from the standard cell library based on the unique combination of output loading and input ramptime of these standard cells. The total power dissipated by the gates  and  for this state transition is again stored in the power estimate database , mapped to the unique combination of state transitions at inputs A-D and the output Z.","At the transition T-T, E again switches from 1\u21920, and Z again switches from 0\u21921. The E output will switch at Tplus the gate delay of the gate . The Z output will switch at Tplus the gate delay of the gate  and the gate delay of the gate . The power for this state transition has already been calculated for the T\u2192Ttransition, and was stored in the power estimate database . Thus, for this state transition, the power consumption of the logic cone  can be retrieved from the power estimate database  using the transitions at inputs A-D and the output Z. Thus, the computation of the incremental power of the logic cone  is bypassed for the T-Ttransition, saving computational resources.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 6","b":["330","600","115","600","601","600","600","200"]},"A decisional step  begins a DO loop that operates over time increments \u0394t in the design simulation. The time increments may be of any length, but may preferably correspond to a period of the highest frequency clock of the candidate design . For each \u0394t the method  proceeds to a decisional step . The step  begins a DO loop that operates over each implementation-invariant node of the candidate design , e.g. the inputs . For each node, the method  increments a loop counter i in a step  and proceeds to a decisional step .","In the step  the method  determines if the power associated with the implementation-invariant node, designated \u03b4P, has been previously computed. If \u03b4Phas not been previously computed, the method  advances to a step . In the step , the method  computes \u03b4Pand saves the result in the power estimate database  as previously described. In a step  the method  adds \u03b4Pto a value \u0394P that represents the total power over all the implementation-invariant nodes of the candidate design . The method  then loops back to the step  to increment the loop counter and repeat the loop for the next implementation-invariant node.","At the step , if the method determines that the power at current implementation-invariant node has been previously calculated, the method  bypasses the power calculation for that node. The method  proceeds instead to a step  in which \u03b4Pis retrieved from the power estimate database . Retrieving the previously stored value of the incremental power at that node avoids expending the computation resources and time that would otherwise be needed to recalculate \u03b4P. The method  then advances to the step  to accumulate the incremental power as previously described.","After completing the calculation of \u0394P at the current value of \u0394t, the method exits the \u0394P loop at  and advances to a step . At the step , the method accumulates \u0394P in a total estimated power P and returns to the step . The method then repeats the \u0394t loop for the remaining time increments of the model.","After the estimated power is computed for the last time increment, the \u0394t loop at  and returns to the caller via .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIGS. 7 and 8","FIGS. 1"],"b":["700","800","700","800","2","3","4","5","6","700","800","700","800"]},"Referring first to , the method  begins with an entry step , which may be reached, e.g. from a calling routine or an application programming interface (API) call. In a step , a design database, e.g. the register transfer level description , is received of an electronic device design, e.g. the RTL database . In a step , signal activity is simulated, e.g. by the simulation module  at a plurality of implementation-invariant nodes of the design, e.g. the nodes  and . In a step  a gate-level implementation is determined of the design database, e.g. by the implementation module . In a step  a power consumption of the design is estimated, e.g. by the power estimation module . The estimating includes independently calculating for each implementation-invariant node the incremental power dissipation at that node. In a step , the design database is modified after the estimating, thereby reducing the estimated power consumption of the electronic device design. The method ends at , e.g. returning to a calling program.","In the above-described embodiment of the method , incremental power consumption of a plurality of logic cones within the RTL database may be separately determined. In such embodiments the determining may include calculating incremental power consumption of a first subset of logic cones of the design on a first computing platform, and further calculating incremental power consumption of a second subset of logic cones of the design on a second computing platform.","In any of the above-described embodiments, the method  may include creating a database of incremental power consumption associated with a plurality of logic cones within the RTL database. In such embodiments the incremental power consumption of each logic cone may be indexed by a pattern of state transitions at inputs and outputs of the logic cones. In such embodiments the incremental power associated with a particular logic cone may be retrieved from the database, e.g. by indexing the database with a state transition pattern corresponding to the desired power estimate.","In any of the above-described embodiments the method  may be implemented as an API of an electronic design automation tool.","In any of the above-described embodiments another power consumption estimate may be performed after modifying the RTL database based on a previous power consumption estimate.","In any of the above-described embodiments a gate-level simulation of the electronic device design may be performed, e.g. by the gate-level simulation module , after the power estimate is complete.","The method  ends at a step , e.g. a return to a calling program.","Referring next to , the method  begins with an entry step , which also may be reached, e.g. from a calling routine or an API call. In a step  a power consumption is estimated of a gate-level implementation of an electronic device design. The estimating includes independently calculating for each of a plurality of implementation-invariant nodes of the design an incremental power dissipation associated with that node.","The above-described embodiment of the method  may further include steps  and . In the step  a design database, e.g. the RTL database , of the electronic device design is received. In the step  the design database is modified after computing the estimate to reduce the estimated power consumption.","In any of the above-described embodiments of the method  the estimating may include a step  in which signal activity is simulated at the plurality of implementation-invariant nodes of the electronic device design. Such embodiments may include a step  in which the estimating further includes disregarding simulation signal transitions that do not propagate in the electronic device design.","The above-described embodiments of the method  may include a step  in which a gate level simulation is performed of the electronic device design after computing the estimate.","The above-described embodiments of the method  may include a step  in which incremental power consumption is independently determined for a plurality of logic cones within the design database.","The above-described embodiments of the method  may include a step  in which a second power consumption estimate is executed of the modified design database.","In any of the above-described embodiments of the method  the method may be implemented as an application programming interface of an electronic design automation tool.","The method  ends at a step , e.g. a return to a calling program.","Those skilled in the art to which this application relates will appreciate that other and further additions, deletions, substitutions and modifications may be made to the described embodiments."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION","p":["Reference is now made to the following descriptions taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIGS. 5A-5D","FIG. 3"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIGS. 7 and 8","FIGS. 1"],"b":["3","4","5","6"]}]},"DETDESC":[{},{}]}
