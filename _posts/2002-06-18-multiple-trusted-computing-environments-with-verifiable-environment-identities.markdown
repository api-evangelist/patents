---
title: Multiple trusted computing environments with verifiable environment identities
abstract: A host computing platform  provides one or more computing environments  and includes a trusted device  arranged to form an integrity metric individual to each computing environment  The integrity metric is provided to a user  in response to an integrity challenge, signed for authentication using a signature key  held by the trusted device. In one embodiment the trusted device  selects a signature key unique to the computing environment  or in a second embodiment the trusted device forms the signed integrity metric including an identity label, in each case such that the user  can verify that the signed integrity metric corresponds to the expected computing environment 
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07076655&OS=07076655&RS=07076655
owner: Hewlett-Packard Development Company, L.P.
number: 07076655
owner_city: Houston
owner_country: US
publication_date: 20020618
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":"CROSS REFERENCE TO RELATED APPLICATIONS","p":["The subject matter of the present application may also be related to the following U.S. patent applications: \u201cOperation of Trusted State in Computing Platform,\u201d Ser. No. 09\/728,827, filed Nov. 28, 2000; \u201cPerformance of a Service on a Computing Platform,\u201d Ser. No. 09\/920,554, filed Aug. 1, 2001; \u201cSecure E-Mail Handling Using a Compartmented Operating System,\u201d Ser. No. 10\/075,444, filed Feb. 15, 2002; \u201cElectronic Communication,\u201d Ser. No. 10\/080,466, filed Feb. 22, 2002; \u201cDemonstrating Integrity of a Compartment of a Compartmented Operating System,\u201d Ser. No. 10\/165,840, filed Jun. 7, 2002; \u201cRenting a Computing Environment on a Trusted Computing Platform,\u201d Ser. No. 10\/175,185, filed Jun. 18, 2002; \u201cInteraction with Electronic Services and Markets,\u201d Ser. No. 10\/175,395, filed Jun. 18, 2002; \u201cMultiple Trusted Computing Environments,\u201d Ser. No. 10\/175,542, filed Jun. 18, 2002; \u201cPerforming Secure and Insecure Computing Operations in a Compartmented Operating System,\u201d Ser. No. 10\/175,553, filed Jun. 18, 2002; \u201cPrivacy of Data on a Computer Platform,\u201d Ser. No. 10\/206,812, filed Jul. 26, 2002; \u201cTrusted Operating System,\u201d Ser. No. 10\/240,137, filed Sep. 26, 2002; \u201cTrusted Operating System,\u201d Ser. No. 10\/240,139, filed Sep. 26, 2002; and \u201cApparatus and Method for Creating a Trusted Environment,\u201d Ser. No. 10\/303,690, filed Nov. 21, 2002.","The present invention relates in general to a method for providing multiple computing environments running on a single host computing platform, and relates to a method for verifying integrity of the computing environments.","It is desired to run multiple applications on a single host computing platform such as a server. To minimise interference between applications which are incompatible or which do not trust each other, it is known to provide multiple computing environments which are separate and logically distinct. It is desired to provide a high degree of isolation between the multiple computing environments, and ideally it is desired to verify the integrity of one computing environment independently of any other computing environment, such that each computing environment is independently trustworthy.","A problem has been identified in that it is desired to confirm that the supplied integrity information corresponds to an expected computing environment (and is not based on some other subverted computing environment). An aim of the present invention is to provide a method for verifying the integrity of a computing environment, including verifying that the integrity information provided corresponds to the expected computing environment. Another aim is to provide a computing platform for performing the method.","According to a first aspect of the present invention there is provided a method for verifying integrity of a computing environment, comprising the steps of: identifying a computing environment which it is desired to verify; obtaining an integrity metric associated with the identified computing environment; signing the integrity metric with a signature key, to form a signed integrity metric, the signed integrity metric including information identifying a computing environment; and transmitting the signed integrity metric to a challenger.","The method preferably is initiated by the step of receiving an integrity challenge from the challenger. Preferably, the integrity challenge includes challenge information identifying a computing environment which it is desired to verify. Preferably, the challenge information includes a computing environment identity label. Preferably, the identity label is an external computing environment identity label. Conveniently the method includes the initial step of supplying the external computing environment identity label to the challenger, prior to the challenger issuing the identity challenge.","In one preferred embodiment the integrity challenge is received from the challenger and passed through a computing environment, suitably toward a component of a host computing platform which is arranged to co-operate in the verifying method. In this case, the information identifying a computing environment which is returned as part of the signed integrity metric comprises information identifying the challenging computing environment which passes the integrity challenge and\/or information identifying a computing environment which it is desired to verify. That is, the challenging computing environment passing the challenge can be identified, and this challenging computing environment can be the same as or different to a computing environment which it is desired to verify. Suitably, an identity label is used to identify the challenging computing environment and\/or the computing environment to verify. Preferably, the identity label is an internal computing environment identity label, for use within the host computing platform. Conveniently, the method includes an initial step of applying the internal computing environment identity label to the computing environment, prior to receiving the integrity challenge.","The method preferably includes checking that an identity label received in the integrity challenge corresponds to an identity label of a computing environment passing the integrity challenge. Preferably, the method includes confirming that a computing environment passing the integrity challenge has authorisation to request verification of a computing environment which it is desired to verify. Preferably, the confirming step comprises restricting authorisation of a computing environment passing a challenge only to request verification of that computing environment. Alternatively, the confirming step comprises selectively restricting the computing environment passing the integrity challenge to request verification of another computing environment.","Preferably, the step of identifying a computing environment which it is desired to verify uses identity information supplied in an integrity challenge from a challenger and\/or uses identity information about a computing environment which passes the integrity challenge. Preferably, the identity information is an external computing environment label or an internal computing environment label.","In a second embodiment the method comprises the step of selecting one of a plurality of signature keys, the one signature key being associated with the identified computing environment. Preferably, the signing step comprises signing the integrity metric with the selected signature key. Conveniently, the method includes an initial step of supplying a verifying signature key to a challenger. Preferably, the verifying signature key and the signing signature key form a complimentary public key and private key pair.","In a particularly preferred embodiment, the signing step includes forming the signed integrity metric with an external data field, the external data field including the information identifying a computing environment. Suitably, the method includes the step of receiving an integrity challenge from a challenger, the integrity challenge including external data; and forming a hash function of the received external data and the information identifying the computing environment, to form the external data field of the signed integrity metric. Preferably, the information comprises a computing environment identity label of the computing environment associated with the integrity metric. Preferably, the computing environment identity label is an internal computing environment identity label or an external computing environment identity label. Additionally or alternatively, the information includes a challenging identity label of a computing environment which passes an integrity challenge. Preferably, the challenging identity label is an internal computing environment identity label or an external computing environment identity label. Preferably, the information includes both a computing environment identity label identifying a computing environment associated with the integrity metric, and a challenging computing environment label identifying a computing environment which passes an integrity challenge. Preferably, the information includes an identity of a virtual machine application running in or forming the computing environment. Preferably, the information includes an identity of a guest operating system provided by the virtual machine application. Preferably, the information includes an identity of at least one process running on the guest operating system.","In each of the above embodiments, the method preferably includes the final step of verifying the signed integrity metric received by the challenger. Preferably, the verifying step includes verifying the signature of the signed integrity metric. Preferably, verifying the signature uses a verifying signature key. When applied to the second preferred embodiment, preferably, the verifying signature key and the signing signature key form a corresponding public key and private key pair.","Preferably, the verifying step includes verifying the information identifying a computing environment. Preferably, this step includes verifying an identity of a computing environment associated with the integrity metric of the signed integrity metric. Also, the verifying step can include verifying an identity of a challenging computing environment which passes an integrity challenge. Preferably, the verifying step uses an internal identity label and\/or an external identity label associated with a computing environment.","Preferably, the verifying step includes verifying the integrity metric of the signed integrity metric. Preferably, the verifying step comprises comparing the signed integrity metric against expected values.","Suitably, the or each computing environment is one of a plurality of computing environments provided on a single host computing platform. Preferably, the computing environment which it is desired to verify and, optionally, the computing environment passing the integrity challenge, are each one of a plurality of computing environments provided on the single host computing platform. Preferably, the integrity metric or group of integrity metrics comprise one or more integrity metric values each stored in a platform configuration register of a trusted device. Preferably, the method includes an initial step of forming an integrity metric or group of integrity metrics for the or each computing environment, and storing the integrity metric or group of integrity metrics as one or more integrity metric values each in a platform configuration register of a trusted device.","According to a second aspect of the present invention there is provided a computing platform supporting at least one computing environment, the computing platform comprising: a trusted device unit arranged to identify a computing environment which it is desired to verify, obtain an integrity metric associated with the identified computing environment, sign the integrity metric with a signature key, to form a signed integrity metric, the signed integrity metric including information identifying a computing environment, and transmitting the signed integrity metric to a challenger.","Preferably, the trusted device unit comprises a trusted device and a trusted device driver. Preferably, the trusted device driver is arranged to receive an integrity challenge from a challenger, identify a computing environment which it is desired to verify, and transmit the signed integrity metric to the challenger; and the trusted device is arranged to retrieve a stored integrity metric associated with the identified computing environment, and sign the integrity metric with the signature key. Preferably, the trusted device is arranged to store a plurality of signature keys, and is arranged to select one of the signature keys associated with the identified computing environment.","Preferably, the trusted device is arranged to form the signed integrity metric including an external data field which includes the information identifying a computing environment. Preferably, the trusted device receives the integrity challenge including an external data from the challenger, and is arranged to form the external data field of the signed integrity metric using a hash function of the received external data and the information identifying a computing environment. Preferably, the computing platform supports a plurality of computing environments, and one of the plurality of computing environments is identified.","The preferred embodiment of the present invention will be particularly described and explained with reference to  below. However, as background to the present invention and to show the preferred embodiment in combination with other aspects of the invention in a preferred practical application, the following description is provided with reference to .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["20","20","21","22","21","211","21","212"]},"In the preferred embodiment the hardware  includes a trusted device . The trusted device  is suitably a physical component such as an application specific integrated circuit (ASIC). Preferably the trusted device is mounted within a tamper-resistant housing. The trusted device  is coupled to the computing unit , and ideally to the local user interface unit . The trusted device  is preferably mounted on a motherboard of the computing unit . The trusted device  functions to bind the identity of the computing platform  to reliably measured data that provides an integrity metric of the platform.","Preferably, the trusted device  performs a secure boot process when the computing platform  is reset to ensure that the host operating system  of the platform  is running properly and in a secure manner. During the secure boot process, the trusted device  acquires an integrity metric (or a group of integrity metrics) of the computing platform , such as by examining operation of the computing unit  and the local user interface unit . The integrity metrics are then available for a user to determine whether to trust the computing platform to operate is a predicted manner. In particular, a trusted computing platform is expected not to be subject to subversion such as by a virus or by unauthorised access. The user includes a local user of the computing platform, or a remote user communicating with the computing platform by networking (including LAN, WAN, internet and other forms of networking).","WO 00\/48063 (Hewlett-Packard) discloses an example computing platform suitable for use in preferred embodiments of the present invention. In this example the trusted device  acquires a hash of a BIOS memory of the computing unit  after reset. The trusted device  receives memory read signals from the main processor and returns instructions for the main processor to form the hash. The hash is stored in the trusted device , which then returns an instruction that calls the BIOS program and a boot procedure continues as normal.","Preferably, the trusted device  controls the local user interface  such that a local user can trust the display of data provided on a visual display unit. WO 00\/73913 (Hewlett-Packard) discloses an example system for providing a trustworthy user interface by locating a driver for the visual display unit within the trusted device .","The hardware  may also comprise a trusted user interface for performing secure communication with a user device such as a smart card held by the user. The trusted user interface allows the user to perform trusted communications with the trusted device  in order to verify the integrity of the computing platform . The use of a smart card or other token for trusted user interaction is described in more detail in WO 00\/54125 (Hewlett-Packard) and WO 00\/54126 (Hewlett-Packard).",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1","b":["10","20","30","30","20","10","10","20","213"]},"The computing platform  provides a computing environment  which gives access to resources of the computing platform, such as processor time, memory area, and filespace. Preferably, a plurality of discrete computing environments  are provided. Each computing environment is logically distinct, but shares access to at least some of the resources of the computing platform with other computing environments.","Suitably, the computing environment  comprises a compartment. The actions or privileges within a compartment are constrained, particularly to restrict the ability of a process to execute methods and operations which have effect outside the compartment, such as methods that request network access or access to files outside of the compartment. Also, operation of the process within the compartment is performed with a high level of isolation from interference and prying by outside influences.","Preferably, the compartment is an operating system compartment controlled by a kernel of the host operating system . This is also referred to as a compartmented operating system or a trusted operating system.","Compartmented operating systems have been available for several years in a form designed for handling and processing classified (military) information, using a containment mechanism enforced by a kernel of the operating system with mandatory access controls to resources of the computing platform such as files, processes and network connections. The operating system attaches labels to the resources and enforces a policy which governs the allowed interaction between these resources based on their label values. Most compartmented operating systems apply a policy based on the Bell-LaPadula model discussed in the paper \u201cApplying Military Grade Security to the Internet\u201d by C I Dalton and J F Griffin published in Computer Networks and ISDN Systems 29 (1997) 1799\u20131808.","The preferred embodiment of the present invention adopts a simple and convenient form of operating system compartment. Each resource of the computing platform which it is desired to protect is given a label indicating the compartment to which that resource belongs. Mandatory access controls are performed by the kernel of the host operating system to ensure that resources from one compartment cannot interfere with resources from another compartment. Access controls can follow relatively simple rules, such as requiring an exact match of the label.","Examples of resources include data structures describing individual processes, shared memory segments, semaphores, message queues, sockets, network packets, network interfaces and routing table entries.","Communication between compartments is provided using narrow kernel level controlled interfaces to a transport mechanism such as TCP\/UDP. Access to these communication interfaces is governed by rules specified on a compartment by compartment basis. At appropriate points in the kernel, access control checks are performed such as through the use of hooks to a dynamically loadable security module that consults a table of rules indicating which compartments are allowed to access the resources of another compartment. In the absence of a rule explicitly allowing a cross compartment access to take place, an access attempt is denied by the kernel. The rules enforce mandatory segmentation across individual compartments, except for those compartments that have been explicitly allowed to access another compartment's resources. Communication between a compartment and a network resource is provided in a similar manner. In the absence of an explicit rule, access between a compartment and a network resource is denied.","Suitably, each compartment is allocated an individual section of a file system of the computing platform. For example, the section is a chroot of the main file system. Processes running within a particular compartment only have access to that section of the file system. Through kernel controls, the process is restricted to the predetermined section of file system and cannot escape. In particular, access to the root of the file system is denied.","Advantageously, a compartment provides a high level of containment, whilst reducing implementation costs and changes required in order to implement an existing application within the compartment.","Referring to , it is desired to run a process  in one of the computing environments . In practical embodiments, many processes run on the computing platform simultaneously. Some processes are grouped together to form an application or service. For simplicity, a single process will be described first, and the invention can then be applied to many processes and to groups of processes.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 2","b":["24","23"]},"The process  runs on a guest operating system . The guest operating system  is suitably provided by a virtual machine application . The virtual machine application  runs on the host operating system  and provides an image of a computing platform, or at least appropriate parts thereof. The virtual machine application  provides the virtual guest operating system  such that, as far as the process  is concerned, the process  runs on the guest operating system  equivalent to running on a host operating system . For the purposes of the present invention, the guest operating system  is preferably a replica of the host operating system, or at least necessary parts thereof. However, it is equally possible for the virtual machine application  to provide a different emulated software or hardware environment, such as a different operating system type or version. An example virtual machine application is sold under the trade mark VMware by VMware, Inc of Palo Alto, Calif., USA.","The virtual machine application  assists security by isolating the process  from the remainder of the computing platform. Should problems occur during running of the process  or as a result thereof, the host operating system  can safely shut down the guest operating system  provided by the virtual machine application . Also, the virtual machine application  protects the host operating system  and hardware resources  from direct access by the process . Therefore, it is very difficult for the process  to subvert the host operating system . Further, the process  accesses resources of the computing platform made available through the virtual machine application . Each process  only sees resources of the computing platform allocated through the virtual machine application , such that a process  can be restricted to an appropriate share of the resource of the computing platform and cannot stop other processes having their allocated share.","Preferably, the virtual machine application  providing the guest operating system  runs in a compartment  of the host operating system . The compartment confines communications and data access of the virtual machine application. The compartment  provides secure separation between applications, such that processes are inhibited from communicating with each other, accessing each others status, or interfering with each other, except in accordance with strictly enforced access controls. In particular, a compartment assists the virtual machine application in resisting subversion by a process running in that computing environment.","Referring again to , the process  runs in the computing environment . It is desired to confirm the integrity of this computing environment. Also, many similar computing environments can be provided on the computing platform simultaneously, and it is desired to confirm the integrity of one selected computing environment independently of the integrity of any other computing environment. That is, it is desired that the multiple computing environments are independently trustworthy. Advantageously, the use of a guest operating system , preferably in combination with a compartment , provides a high degree of isolation between computing environments, such that the integrity of one computing environment is not affected by activity in any other computing environment.","As described above, the trusted device  is arranged to form an integrity metric (or a group of integrity metrics) of the host operating system . Also, in the preferred embodiments of the present invention, the trusted device  is arranged to obtain an integrity metric (or a group of integrity metrics) for each computing environment . Preferably, the trusted device  obtains an integrity metric of the guest operating system . Further, the trusted device preferably obtains an integrity metric of the virtual machine application . Each integrity metric suitably comprises one or more separate integrity metric values.","In the preferred configuration the host operating system  has direct access to the trusted device . However, to improve security, processes (i.e. applications) running on the host operating system  do not have direct access to the trusted device . Therefore, a trusted device driver  is provided, suitably as part of the host operating system . The trusted device driver  provides an interface available to applications running on the host operating system , including allowing results to be reported to the trusted device , and allowing stored integrity metric values to be obtained from the trusted device .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 3","b":["213","213","0","7","231","230","221","24","213"]},"The stored integrity metric value  preferably represents a sequence of integrity metric values obtained, for example, by examination of the host platform  periodically or in response to relevant events. The old stored integrity metric value is combined with a new integrity metric value to produce a new updated digest of the sequence of values.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 4"},"In step , the host operating system  is provided. Suitably, this includes the steps of starting a BIOS, starting an OS loader, and starting the host operating system as will be familiar to the skilled person.","In step , a group of integrity metrics  for the host operating system  are measured and reported to the trusted device . Preferably, the trusted device  obtains an integrity metric for the BIOS, and preferably also obtains an integrity metric for the OS loader and the operating system software. Preferably, integrity metric values relevant to the host operating system are stored in a group of PCRs (or other addressable storage) such that the integrity metrics  for the host operating system are available later. Steps  and  are shown separately for clarity. In practical embodiments of the invention it will be appreciated that the integrity metrics  are obtained concurrently with providing the host OS .","Optionally, at step  additional integrity metrics are obtained relevant to other selected elements of the computing platform. For example, the trusted device  performs data event logging as described in WO 00\/73880 (Hewlett-Packard). Also, the trusted device  may produce a digest by applying a hash function to all or selected data files stored on the computing platform, as described in WO 00\/73904 (Hewlett-Packard). Preferably, at least some of the integrity metrics obtained in step  or step  are updated periodically or in response to relevant events to confirm the current integrity status of the host operating system and related components of the computing platform.","In step , a guest operating system  is provided, to form a new computing environment . Suitably, step  includes providing a virtual machine application  which provides the guest operating system .","Preferably, the step  includes providing the guest operating system  in a compartment  of the host operating system . Also, the step  preferably includes providing a history of all processes (applications) launched in the compartment. Here, it is desired to record whether any other applications have been launched alongside the virtual machine application  which provides the guest operating system .","In step , the trusted device  obtains an integrity metric for the computing environment . In particular, the trusted device  obtains an integrity metric or group of integrity metrics  for the guest operating system , and preferably the virtual machine application . The corresponding integrity metric values  are stored in a PCR or group of PCRs allocated to that computing environment. Also, the step  preferably includes obtaining an integrity metric for the or each process  in the computing environment. Suitably, each integrity metric is obtained by forming a digest (hash value) of program code of a process. As will be familiar to the skilled person, the term integrity metric can refer to a single data item, or can refer to a metric formed from two or more parts each of which themselves can be considered an integrity metric.","Preferably, step  is repeated such that a current integrity status of the computing environment is available and history information is updated, periodically or in response to a relevant event.","When it is desired to create or update a stored integrity metric for a particular computing environment, a result is reported to the trusted device driver  along with information identifying that particular computing environment, such as an arbitrary label. In one preferred embodiment a process ID of the virtual machine application  is used to identify the computing environment. In another embodiment each logical computing environment is supplied with a secret, e.g. a secret is supplied to the virtual machine application  by the trusted device driver , and then the secret is subsequently used to identify the computing environment. Suitably the computing environment label, such as a secret, is supplied by the host OS  when the virtual machine application  is launched.","Referring to , a preferred method for verifying a computing environment will now be described.","Optionally, in step  a secure channel is established for communicating with the computing platform . For a local user , a secure channel is provided such as by using a trustworthy user interface and\/or by using a token such as a smart card. A remote user  establishes a secure channel  such as by performing authentication of the computing platform, ideally using a signature from the trusted device . Here again, the user optionally employs trusted hardware, such as the user's own client platform, a PDA, mobile phone or other device, optionally in co-operation with a smart card or other token. Preferably, the step  includes establishing the authentication and authorisation of the user.","In step , the user  requests demonstration of the integrity of a computing environment . For example, the user  issues an integrity challenge. To avoid a re-play attack, the challenge suitably includes a random number sequence (nonce). More detailed background information is provided in \u201cTCPA Specification Version 1.0\u201d published by the Trusted Computing Platform Alliance.","In step  the trusted device  supplies integrity metrics associated with the host operating system . Suitably, these integrity metrics include integrity metrics for the BIOS, operating system loader and host operating system, and integrity metrics formed by periodic or event-driven checks on the host operating system and related components of the computing platform.","In step , the trusted device  supplies an integrity metric associated with the selected computing environment. Preferably, the step  includes supplying integrity metrics associated with the virtual machine application , the guest operating system , the process , and a history of periodic or event-driven checks made on the integrity status of the computing environment .","The step  preferably includes supplying a history of any applications launched by the host operating system in the same compartment as the guest operating system, i.e. alongside the virtual machine application .","Preferably, in step  the integrity metric for the host operating system  and the computing environment  are compared against expected values, such as by using a certificate issued by a trusted party that is prepared to vouch for the integrity of the computing platform. If the comparison is successful, the computing environment is considered to be a trusted computing environment.","The apparatus and methods described above provide integrity information concerning a selected one of the multiple computing environments. However, a problem has been identified in that it is desired to confirm that the supplied integrity metrics correspond to an expected computing environment (and are not based on some other computing environment). In particular, it is desired to confirm that a process  is running in an expected computing environment , by receiving integrity information identified as being specific to that computing environment.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 6","FIG. 2","FIG. 5"],"b":["10","502","10","24"]},"In a first example, the integrity challenge is issued direct to a component of the host operating system , such as the trusted device driver . In this embodiment, the integrity challenge includes information previously given to the user , such as an arbitrary label, which allows the trusted device driver  to establish the relevant computing environment . The external computing environment identity label given to the user  may be the same as, or complementary to, any information held internally identifying the computing environment. Suitably, the external identity information supplied as part of the integrity challenge is matched against a list of computing environments currently provided on the host operating system, this step ideally being performed by the trusted device driver . Suitably, there is a one to one relationship between the compartment identity label as given to the user , and any compartment identity label used internally in the host computing platform . In step  the trusted device  supplies an integrity metric or group of integrity metrics  associated with the identified computing environment . Suitably, a response is returned directly to the challenging user .","In a second preferred example, an indirect integrity challenge is issued from the user  and is received by a component of the relevant computing environment , such as the process  which suitably forms part of an application running in that computing environment . The integrity challenge is passed from the computing environment  to the trusted device driver . In this case, the trusted device driver  can readily establish the identity of the computing environment  passing the integrity challenge. In one example embodiment the computing environment  supplies an internal computing environment identity label such as a process ID of the virtual machine application , or a secret previously given to the virtual machine application  by the host operating system . In step  the trusted device  supplies integrity metrics associated with that computing environment . Suitably, a response is returned to the challenging user  indirectly through components of the computing environment  which received the indirect integrity challenge. Alternatively, the response can be sent direct to the challenging user .",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 7"},"Step  comprises retrieving integrity metric values stored within the trusted device . Suitably, the integrity metric values are retrieved from one or more PCRs. These integrity metric values correspond to the integrity metric or group of integrity metrics for a particular computing environment. Optionally, as described above, other integrity metrics or groups of integrity metrics are obtained for the host operating system and other selected parts of the computing platform, as desired.","Step  comprises signing the integrity metrics or group of integrity metrics (e.g. combined to form a digest) using a signature key held by the trusted device, to form a signed integrity metric. The signed integrity metric includes information identifying a computing environment.","In step  the signed integrity metric is transmitted to the challenger, i.e. the user .","In step  the challenger verifies the received signed integrity metric. Suitably, the challenger holds a verifying signature key which corresponds to the signing signature key used to the sign the integrity metric. The challenger verifies the signature, and can then check the integrity metric values.","In a first preferred method for passing computing environment identity information, the signed integrity metric includes an external data field which is adapted to identify the computing environment. The external data field is intended to minimise the risk of a replay attack by returning an external data value to the challenging user , the external data value being generated originally by the user  and supplied to the computing platform when issuing the integrity challenge. In the most common examples this external data value is a random number (nonce), or is a time value or a serial number allocated to the user. In this first embodiment the external data field is replaced by a hash function combining the supplied external data with information identifying the computing environment. For example, the signature in step  is formed with:\n\n","As mentioned above with reference to , an integrity challenge can either be issued directly to a component of the host operating system as in the first example, or indirectly through a particular computing environment as in the second example.","Where the challenge is issued directly, then suitably the user supplies the external computing environment identity label as part of the integrity challenge, and the compartment_ID field is used to return the supplied external label to the user, such that the user can then confirm that the supplied integrity information corresponds to an expected computing environment.","Where the integrity challenge is issued indirectly through a computing environment , as in the second is example of , then the user  usually does not need to supply an external label. In this case, the internal computing environment identity label held by the computing environment is used to form the compartment_ID field. The user  ideally has been previously supplied with the internal label for the computing environment of interest, and compares the previously supplied internal identity label against the content of the compartment_ID field, to determine that the supplied integrity information corresponds to the expected computing environment. Alternatively, the user  has been previously supplied with an external label for the computing environment of interest. The computing environment passing the indirect integrity challenge provides the internal identity label, and the compartment_ID field is completed with the external label corresponding to that computing environment. The user  can then confirm that the external label provided in the compartment_ID field matches the expected computing environment.","Suitably, the compartment_ID in the externaldata field is added by the trusted device driver . In this case, the user  sends only the supplied_externaldata field (for example a nonce). After the trusted device driver  recognises the identity of the computing environment , the corresponding compartment_ID is placed in the hash function to make the externaldata field. The trusted device  signs the externaldata field as received from the trusted device driver , along with the corresponding integrity metrics for that computing environment, to form the signed integrity information.","The hash function forming the external data field is optionally extended to include other desired identity information concerning the computing environment . In one example the compartment_ID field comprises a process_ID for identifying the process , and a VM_ID for identifying the virtual machine application .","As a further refinement of this first preferred embodiment, the external label and the internal label can be employed in co-operation. Suitably, the integrity challenge issued by the user includes the external label. Suitably, the trusted device driver  matches the external label against the internal label of the computing environment passing the integrity challenge. If they match (i.e. both the internal label and the external label correspond to the same computing environment), then the trusted device driver  can be confident that the integrity challenge was received in the computing environment expected by the user , and will pass the challenge to the trusted device  for signing. Otherwise, the challenge is rejected, the user  will then not receive the expected integrity information, and knows that the challenge was not issued to the expected computing environment.","The first preferred embodiment of the present invention can also be used to pass a challenger_ID label, which identifies a computing environment receiving the user integrity challenge. This embodiment is particularly useful where, for example, the user issues an integrity challenge to a first computing environment, requesting integrity metrics about a second computing environment (the second computing environment being suitably identified by an internal or external label). In the response, the user  receives a challenger_ID label confirming the identity of the computing environment to which the challenge was issued, which is expected to correspond to the first computing environment; and receives a compartment_ID label identifying the computing environment relevant to the supplied integrity metric or group of integrity metrics, here expected to be the second computing environment. Hence, the user  is able to build up a more comprehensive picture of the computing environments running on the computing platform, and can identify and verify computing environments other than the computing environment to which the challenge is issued. In some circumstances the user  may only desire confirmation of the challenger_ID label, such that the compartment_ID label is not required and need not be supplied.","In a second preferred method for passing computing environment identity information, the trusted device  uses a different signature key for each computing environment. In step , the integrity metric or group of integrity metrics for a particular computing environment of interest are obtained, such as by using an internal label or supplied external label as mentioned above. Suitably, the trusted device driver  establishes a signature key pair associated with the selected computing environment, preferably a private signature key which corresponds to a public verification key. The private signature keys are each held by the trusted device , and the trusted device driver  identifies to the trusted device  which of the private signature keys should be used to sign the integrity metrics. Suitably, the trusted device  stores a plurality of private signature keys, each associated with one of the computing environments . In step , the integrity metrics are signed by the trusted device  with the private signature key unique to the selected computing environment . In step , the challenging user  uses the expected corresponding public verification key to verify the signed data. The verification will fail if the user does not receive signed integrity information concerning the expected computing environment.","As an option for either of the methods just discussed with reference to , in some circumstances it is desired to improved still further a user's confidence that the integrity metric or group of integrity metrics received in a response correspond to an expected computing environment. This aspect of the invention is particularly applicable to the situation where an indirect integrity challenge is issued to a computing environment . Preferably, the trusted device driver  enforces an authorisation policy, which restricts the type of integrity response which a computing environment is able to request. That is, when passing the indirect integrity challenge requesting integrity information about a particular computing environment, the trusted device driver  enforces an authorisation policy to confirm that the computing environment passing the challenge is authorised to access integrity information corresponding to the requested computing environment. As a specific example, a strict authorisation policy is enforced, such that each computing environment  can only successfully pass an integrity challenge requesting integrity information about that computing environment. The authorisation policy prevents the integrity challenge obtaining integrity information about any other computing environment. Therefore, when the user  successfully receives an integrity response, the user is confident that the received integrity information corresponds to the computing environment to which the challenge was issued.","The preferred methods of  are each particularly intended for use with a computing environment as discussed above with reference to . However, the methods of  are applicable to any suitable form of computing environment.","In a further preferred aspect that can be applied to any of the methods described herein, the guest operating system  is itself a compartmented operating system. Multiple applications can be run on the guest operating system , each within a separate compartment of the guest operating system. This embodiment enables each computing environment  to be subdivided, and the methods described above are applied to the subdivided computing environments.","Advantageously, a trusted computing environment is provided by using a trusted device to verify that a guest operating system has booted in a trusted manner. By repeating this process and running multiple guest operating systems, multiple trusted computing environments are provided. A first application can run in a first of the computing environments, whilst a second application can run in a second of the computing environments, where the first and second applications are mutually incompatible or one does not trust the other. The preferred implementation using a virtual machine application in combination with a compartment allows each computing environment to be independently trusted.","It is very difficult for a process running in one computing environment to affect the integrity of any other computing environment. Advantageously, a user can verify the integrity of one computing environment without reference to the integrity of any other computing environment. In the preferred implementation each computing environment has an associated set of one or more integrity metrics which do not include or depend on information about any other computing environment.","Advantageously, a method has been described whereby an integrity response is provided allowing the user (challenger) to confirm that the integrity information corresponds to the expected computing environment. By combining this method with the other methods described above it is very difficult for a computing environment to be subverted and for incorrect integrity information to be supplied to the user."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"p":["For a better understanding of the invention, and to show how embodiments of the same may be carried into effect, reference will now be made, by way of example, to the accompanying diagrammatic drawings in which:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
