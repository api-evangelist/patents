---
title: Unified messaging system configured for transport of encrypted messages
abstract: A unified messaging system is configured for encrypting messages. The calling party is prompted to encrypt the unified message, for example as part of an extended options menu. The unified messaging system encrypts the unified message based on an encryption key input by the user into an encrypted message, and generates an open-network destination header for identifying a destination location for the encrypted message according to an open-network protocol. The unified messaging system then outputs the open-network destination header and the encrypted message as an open-network encrypted message to an open-network message store. During retrieval of the message, the unified messaging system identifies the encrypted message and prompts the destination subscriber for a decryption key; the unified messaging system performs a decryption operation to recover a decrypted file, and outputs the decrypted file for playback to the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07308477&OS=07308477&RS=07308477
owner: Cisco Technology, Inc.
number: 07308477
owner_city: San Jose
owner_country: US
publication_date: 20010110
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to unified messaging systems configured for receiving, storing, and supplying messages to a subscriber, independent of message format or the type of device used by the sender of the message or the subscriber accessing the messages.","2. Description of the Related Art","The evolution of the public switched telephone network has resulted in a variety of voice applications and services that can be provided to individual subscribers and business subscribers. Such services include voice messaging systems that enable landline or wireless subscribers to record, playback, and forward voice mail messages. However, the ability to provide enhanced services to subscribers of the public switched telephone network is directly affected by the limitations of the public switched telephone network. In particular, the public switched telephone network operates according to a protocol that is specifically designed for the transport of voice signals; hence any modifications necessary to provide enhanced services can only be done by switch vendors that have sufficient know-how of the existing public switched telephone network infrastructure.","Unified communications systems are under development as a way of enhancing messaging services for users such as wireless telephone subscribers. A disadvantage of unified communications systems implemented as enhanced versions of the voice mail system, paging system, or e-mail interface resident within the wireless telephone communications system is that such implementation requires detailed knowledge of the proprietary protocols associated with the voice mail systems. Hence, such implementations are available only from switch vendors having knowledge of the proprietary protocols.","Use of a unified communications system implemented independent of the existing proprietary voice mail systems, such as the commercially-available Cisco Unified Open Network Exchange (Cisco uOne) (Products UONE-FOUND 4.1S, and UONE-VOICEMSG4.1S) from Cisco Systems, Inc., enables service providers to use scalable and distributed systems using recognized communication protocols. Hence, the service providers may use such unified communications systems across multiple platforms, independent of protocol, for storage of unified messages (carrying e.g., voice messages, facsimile, and\/or e-mail) stored in a centralized messaging store or distributed message stores. In particular, such unified communications systems may transfer unified messages to message stores according to a prescribed open network protocol, for example IMAP protocol via the Internet.","Commonly-assigned, copending application Ser. No. 09\/480,485, filed Jan. 11, 2000, entitled Application Server Configured for Dynamically Generating Web Pages for Voice Enabled Web Applications, the disclosure of which is incorporated in its entirety herein by reference, discloses an application server that executes a voice-enabled web application by runtime execution of extensible markup language (XML) documents that define the voice-enabled web application to be executed. The application server includes a runtime environment that establishes an efficient, high-speed connection to a web server. The application server, in response to receiving a user request from a user, accesses a selected XML page that defines at least a part of the voice application to be executed for the user. The XML page may describe any one of a user interface such as dynamic generation of a menu of options or a prompt for a password, an application logic operation, or a function capability such as generating a function call to an external resource. The application server then parses the XML page, and executes the operation described by the XML page, for example dynamically generating an HTML page having voice application control content, or fetching another XML page to continue application processing. In addition, the application server may access an XML page that stores application state information, enabling the application server to be state-aware relative to the user interaction. Hence, the XML page, which can be written using a conventional editor or word processor, defines the application to be executed by the application server within the runtime environment, enabling voice enabled web applications to be generated and executed without the necessity of programming language environments.","Hence, web programmers can write voice-enabled web applications, using the teachings of the above-incorporated application Ser. No. 09\/480,485, by writing XML pages that specify respective voice application operations to be performed. The XML documents have a distinct feature of having tags that allow a web browser (or other software) to identify information as being a specific kind or type of information. Hence, the XML documents define the application to be executed by the application server within the runtime environment, enabling voice enabled web applications to be generated and executed without the necessity of programming language environments.","Hence, open network-based systems such as the commercially-available Cisco uOne system (4.1S) or the system disclosed in application Ser. No. 09\/480,485 enable the use of open-network systems such as IMAP message stores, or LDAP directories accessible via an IP-based network such as the Internet, enabling worldwide deployment based on IP-based access protocols. The Internet, however, is recognized to have security risks; hence, there is a concern about transporting sensitive information such as unified messages carrying voice messages, facsimile, and\/or e-mail via a medium that is susceptible to eavesdropping.","There is a need for an arrangement that enables use of open standards-based unified messaging systems to receive, store, and\/or send unified messages in a secure manner.","There also is a need for an arrangement that enables an open standards-based unified messaging system to encrypt unified messages carrying, for example, voice messages, facsimile, and\/or e-mail messages, to ensure secure transmission across an open standards-based network such as the Internet.","These and other needs are attained by the present invention, where a unified messaging system is configured for encrypting messages based on a user selection. The unified messaging system provides a user interface session enabling a party desiring to leave a message (i.e., calling party) for a destination subscriber according to a selected unified messaging format, for example voice, fax, e-mail, Short Message Service, etc. During the user interface session, the calling party is prompted to encrypt the unified message having the message according to the selected unified messaging format, for example as part of an extended options menu. In response to detecting an encryption selection from the user, the unified messaging system sends a key prompt for the user to select an encryption key. The unified messaging system encrypts the unified message based on the encryption key into an encrypted message, and generates an open-network destination header for identifying a destination location for the encrypted message according to an open-network protocol.","The unified messaging system then outputs the open-network destination header and the encrypted message as an open-network encrypted message to an open-network message store. During retrieval of the message by the unified messaging system (e.g., the same messaging system or another unified messaging system serving a destination subscriber), the unified messaging system identifies the encrypted message and prompts the destination subscriber for a decryption key; the unified messaging system performs a decryption operation configured for generating a decrypted file from the encrypted message based on the decryption key, and outputs the decrypted file for playback to the user, where a match between the encryption key and the decryption key enables recovery of the unified message. Hence, unified communications may be implemented using secure encryption resources, with minimal modifications to the unified communications systems.","One aspect of the present invention provides a method in a unified communications system. The method includes receiving a request for a user interface session to enable a user to leave a message for an identified destination subscriber. A first prompt is generated enabling the user to select encryption of the message, and a second prompt is generated, based on the user selecting encryption of the message, for the user to supply an encryption key. The method also includes causing encryption of the message into an encrypted message based on the encryption key supplied by the user, and outputting the encrypted message to a determined destination based on determined subscriber profile attributes for the identified destination subscriber.","Another aspect of the present invention provides a method in a unified communications system. The method includes receiving a request for a user interface session to enable a messaging subscriber to retrieve stored messages, and accessing subscriber profile information from a subscriber profile directory according to a prescribed open network protocol. The method also includes determining one of the stored messages is encrypted based on access of a message store according to a prescribed open network protocol and based on the accessed subscriber profile information. A prompt is generated, based on identifying the one stored message as encrypted, for the messaging subscriber to supply a decryption key, and decryption of the one stored message is attempted based on the decryption key supplied by the messaging subscriber.","Still another aspect of the present invention provides a unified communications server including an interface configured for receiving a request for a user interface session to enable a user to leave a message for an identified destination subscriber, an IP-based interface, and an application runtime environment. The IP-based interface enables retrieval of subscriber profile attributes for the identified destination subscriber from an IP-based subscriber profile directory, and storage of messaging information for the identified destination subscriber in an IP-based subscriber message store. The application runtime environment is configured for generating the user interface session and accessing the subscriber profile attributes, and generating first and second prompts enabling the user to select encryption of the message and input an encryption key, respectively. The application runtime environment also causes the message to be encrypted into an encrypted file based on the encryption key supplied by the user, and outputs an encrypted message including the encrypted file for storage in the IP-based subscriber message store for the identified destination subscriber.","Additional advantages and novel features of the invention will be set forth in part in the description which follows and in part will become apparent to those skilled in the art upon examination of the following or may be learned by practice of the invention. The advantages of the present invention may be realized and attained by means of instrumentalities and combinations particularly pointed out in the appended claims.","The disclosed embodiment is directed to secure transfer of unified messages by unified communications systems based on encrypting the unified messages into encrypted messages using available executable encryption routines. In particular, a user desiring to leave a message is prompted during a user interface session to select encryption of the message, and supply an encryption key. The unified messaging system causes encryption of the message into an encrypted message, for example by invoking a prescribed encryption utility. In addition, the unified messaging system generates an identifiable tag, for example a MIME extension, that specifies that the associated file is encrypted, enabling a messaging system having retrieved the message to identify that decryption is necessary to recover the original message. The unified messaging system then outputs the encrypted message to a determined destination via an IP-based network, for example according to SMTP or IMAP protocol, to a destination subscriber message store based on determined subscriber profile attributes for an identified destination subscriber.","Once the encrypted message is stored in the destination subscriber message store, the destination subscriber may retrieve the message using, for example, a messaging system. The messaging system, which may be the same unified messaging system used to encrypt the original message or the destination subscriber's assigned messaging system, determines that the message is encrypted based on the associated tag, and prompts the user for a decryption key. The messaging system then attempts decryption of the stored message by invoking a prescribed encryption utility for generation of a decryption result based on the decryption key, and outputs the decryption result to the user. Hence, a match between the encryption key and the decryption key results in successful decryption of the original message, whereas a mismatch in the encryption and decryption keys results in erroneous data being sent to the user.","Hence, unified messages can be securely transferred across an IP based network such as the Internet, with minimal processing requirements by the unified messaging systems serving as session servers for the party leaving a message and the party retrieving and message. Hence, the encryption and decryption operations do not adversely affect scalability of the unified messaging systems.","A description will be provided of the unified messaging architecture, followed by a description of the method for encrypting and decrypting unified messages.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 1","FIG. 3"],"b":["42","42","64","44","42","44","50","42","56"],"i":["a ","b","a ","b "]},"As shown in , each of the clients (tiny clients, skinny clients, thin clients and fat clients) are able to communicate via a single, unified architecture  that enables voice communications services between different clients, regardless of whether the client actually has browser capabilities. Hence, the fat client and the thin client are able to execute voice enabled web applications without any hardware modification or any modification to the actual browser; rather, the browsers  in the clients and merely are provided with an executable voice resource configured for providing browser audio control, described below.","The user devices , , and , illustrated as a cordless telephone , a fax machine having an attached telephone, and an analog telephone , are referred to herein as \u201cskinny clients\u201d, defined as devices that are able to interface with a user to provide voice and\/or data services (e.g., via a modem) but cannot perform any control of the associated access subnetwork.","The wireless user devices , , and , illustrated as a cellular telephone (e.g., AMPS, TDMA, or CDMA) , a handheld computing device (e.g., a 3-Com Palm Computing or Windows CE-based handheld device) , and a pager , are referred to as tiny clients. \u201cTiny clients\u201d are distinguishable from skinny clients in that the tiny clients tend to have even less functionality in providing input and output interaction with a user, rely exclusively on the executable application in an access subnetwork to initiate communications; in addition, tiny clients may not be able to send or receive audio signals such as voice signals at all.","Hence, the skinny clients , , and and the tiny clients , , and access the unified voice messaging services in the unified network  via a proxy browser , configured for providing an IP and HTTP interface for the skinny clients and the tiny clients. In particular, browsers operate by interpreting tags within a web page supplied via an HTTP connection, and presenting to a user media content information (e.g., text, graphics, streaming video, sound, etc.) based on the browser capabilities; if a browser is unable to interpret a tag, for example because the browser does not have the appropriate executable plug-in resource, then the browser typically will ignore the unknown tag. Hence, the proxy browser  can provide to each of the skinny clients and tiny clients the appropriate media content based on the capabilities of the corresponding client, such that the cordless telephone and telephone would receive analog audio signals played by the proxy browser  and no text information (unless a display is available); the fax machine and pager would only receive data\/text information, and the cellular telephone and the handheld computing device would receive both voice and data information. Hence, the proxy browser  interfaces between the IP network and the respective local access devices for the skinny clients and the tiny clients to provide access to the unified messaging network .","The proxy browser  and the web browsers  within the fat client and the thin client execute voice enabled web applications by sending data and requests to a web server , and receiving hypertext markup language (HTML) web pages from the web server , according to hypertext transport protocol (HTTP). The web server  serves as an interface between the browsers and an application server  that provides an executable runtime environment for XML voice applications. For example, the web server  may access the application server  across a common gateway interface (CGI), by issuing a function call across an application programming interface (API), or by requesting a published XML document or an audio file requested by one of the browsers  or . The application server , in response to receiving a request from the web server , may either supply the requested information in the form of an HTML page having XML tags for audio control by a voice resource within the browser, or may perform processing and return a calculated value to enable the browser  or  to perform additional processing.","The application server  accesses selected stored XML application pages (i.e., XML pages that define an application) and in response generate new HTML pages having XML tags during runtime and supply the generated HTML pages having XML tags to the web server . Since multiple transactions may need to occur between the browser  or  and the application server , the application server  is configured for storing for each existing user session a data record, referred to as a \u201cbrownie\u201d, that identifies the state of the existing user session; hence, the application server  can instantiate a procedure, return the necessary data, and terminate the procedure without the necessity of maintaining the instance running throughout the entire user session.","Hence, the application server  executes voice application operations from a stored XML document based on a transient application state, where the application server  terminates the application instance after outputting the generated XML media information to the browser  or .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["10","20","66"]},"The unified communications system  includes a proxy device  (e.g., a gate server) configured for terminating incoming calls (e.g., voice calls, fax calls, etc.) from the public switched telephone network , SMS messages received according SMPP protocol, e-mail messages received according to SMTP protocol, etc. The proxy device  includes an IP gateway  and a proxy browser , serving as an IP and HTTP interface for a voice over IP resource  and the application server , respectively. The application server is configured for accessing according to IP protocol an IMAP message store (i.e., messaging server) , an LDAP directory (i.e., database server) , and a registry of active users having an ongoing session with the application server , described in further detail with respect to . Since the application server is configured for accessing the IMAP message store directory , the LDAP directory , and the registry according to IP protocol, the application server is able to access any directory having a valid IP address via the IP network , including the directories and associated with the unified communications system . In particular, the application server can either directly access subscriber profile information from the LDAP directory via the IP network , or the application server may send a request to the LDAP directory , relying on the LDAP directory to search and retrieve from the LDAP directory the necessary subscriber profile information for a roaming subscriber.","In addition, the access of the LDAP directory and the IMAP message store by the application server enables the application server to initiate a messaging operation, personalized on behalf of a destination subscriber, for a calling party attempting to reach the destination subscriber. In particular, an incoming call from the calling party terminated to the IP gateway  causes the browser  to initiate a messaging application session with the application server by sending an HTTP request that includes the dialed number identification string (DNIS) of the destination subscriber. The application server , in response to receiving the HTTP request including the DNIS of the destination subscriber, obtains the subscriber profile information from the LDAP directory and possibly a personalized prompt from the IMAP message store , enabling the application server to provide for the calling party a messaging session on behalf of the destination subscriber.","Hence, the application server can provide secure messaging services for subscribers, without the necessity of telephony network facilities of the public switched telephone network . Hence, the application server can provide portable application services based on accessing subscriber profile information via the IP network .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 3"],"b":["66","66"]},"The application server  receives via the web server  HTTP requests from either a PC-based web browser  capable of supplying full media content (e.g., audio, text, images, and streaming video), or a proxy browser  configured for serving as an HTTP interface for a user input device, such as a telephone , having limited media capabilities (e.g., audio only). In response to receiving the HTTP requests, the voice application server  accesses a selected XML document based on parameters specified within the HTTP request (e.g., commands specified within the URL), and based on application state determined from accessing a brownie, assuming the HTTP request specifies a valid session identifier. As described below, the application runtime environment within the voice application server  parses the XML tags within the accessed XML document, and dynamically generates an HTML page having XML tags that specify media content (e.g., .wav files) and control information for playing the media files by the corresponding browser.","The voice application server  is configured for accessing service application programming interfaces (API's)  to resources based on prescribed procedures that may be called during parsing of an XML tags in a selected XML document. As described below, the application server  issues function calls to an API  for accessing the resources for prescribed operations, enabling the deployment of a robust, scalable unified messaging system having messaging operations distributed across multiple platforms. In particular, the application server  accesses subscriber profile information from an IP-based database server  according to LDAP protocol. As described below, the application server  is configured for storing and retrieving messages in a standardized format (e.g., e-mail with binary encoded attachments) in an IMAP messaging server . In addition, the application server  may issue function calls for a text to speech resource, or an outgoing fax server, in order to deliver different-format messages to users, depending on the capability of the user devices. Hence, the voice application server  may access the text to speech resource for converting an e-mail message into a audio-based message to be played for the user of the telephony device . Similarly, the voice application server  may determine that the proxy browser  does not interface with a telephony gateway device having facsimile transmission capabilities, hence the fax message retrieved from the IMAP message store  would be sent to the outgoing fax server for retransmission to another telephone number identified as serving a fax machine.","According to the disclosed embodiment, the API  also is used to invoke an encryption utility or a decryption utility , that may be executable either on the application server  or on another server via a secure link . Additional details of using the encryption utility and the decryption utility are described below with respect to , A and B. The application server  is implemented as a server executing a PHP hypertext processor with XML parsing and processing capabilities, available open source on the Internet at http:\/\/www.php.net. As shown in , the server system  includes an XML parser  configured for parsing the application-defining XML documents stored in the XML document database , or the XML documents (i.e., \u201cbrownies\u201d) stored in the registry  and configured for specifying the state and attributes for respective user sessions. The application server  also includes a high speed interface  that establishes a high-speed connection between the application server  and the web server . For example, the PHP hypertext processor includes a high-speed interface for Apache Web servers.","The application server  also includes a runtime environment  for execution of the parsed XML documents. As described above, the runtime environment  may selectively execute any one of user interface operation , a logic operation , or a procedure call  as specified by the parsed XML document by executing a corresponding set of executable functions based on the rule set for the corresponding operation. In particular, the application runtime environment  includes a tag implementation module  that implements the XML tags parsed by the XML parser . The tag implementation module  performs relatively low-level operations, for example dynamically generating an XML menu page using executable functions specified by a menu rule set in response to detecting a menu tag, performing a logical operation using executable functions specified by a logic rule set in response to a decision tag, or fetching an audio (.wav) file in response to detecting a sound tag. Hence, the tag implementation module  implements the tag operations that are specified within the XML framework of the stored XML documents.","The application server  also includes a set of libraries  that may be implemented as dynamically linked libraries (DLLs) or application programming interface (API) libraries. The libraries  enable the runtime environment  to implement the procedures  as specified by the appropriate XML document. For example, the application server  may issue a function call to one of a plurality of IP protocol compliant remote resources , , or  according to IMAP protocol, LDAP Protocol, or SMTP protocol, respectively, described below. For example, the PHP hypertext processor includes executable routines capable of accessing the IMAP or LDAP services. Note that the mechanisms for accessing the services , , or  should be established within the application server before use of XML documents that reference those services. Once the services , , or  are established, the application runtime environment  can perform a function operation by using executable functions specified by a function call rule set.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIG. 5A","FIG. 4","FIG. 5B","FIGS. 5A and 5B"]},"The method of encrypting a message begins in step , where an application server  (e.g., ) receives an HTTP request from a browser  serving a corresponding IP gateway  for a user interface messaging session. The application server responds to the HTTP request by accessing in step  an LDAP directory or for the called party, identified for example based on the supplied DNIS. The application server generates in step  a prompt for the calling party to leave a message, for example by providing to the proxy browser  a generic prompt or a personalized prompt retrieved from the called party IMAP message store . The proxy browser , upon receiving the prompt from the application server  (e.g., in the form of a web page having XML media and control tags for playing of the .wav prompt), plays the prompt for the calling party and records the message as a .wav file , illustrated in ; upon completing recording of the message in the .wav file, the proxy browser  posts the .wav file to a prescribed URL specified in the web page from the application server  via a secure link.","As shown in , the .wav file  includes an audio header  and an audio payload . The audio header  includes known fields (e.g., RIFF, WAV, Format (FMT), Method (MTH), Length (LGN)) enabling a media player to decode and playback the payload  as playable audio.","The application server , in response to receiving the .wav file  storing the message from the calling party in step , sends a prompt in step  enabling the calling party to specify an encryption option. If in step  the calling party does not select encryption, the application server  generates in step  a transport header (e.g., an SMTP header) and outputs the unencrypted message to the called party message store  via IMAP or SMTP. If, however, the application server  determines in step  that the calling party selects encryption, the application server  sends in step  an encryption key prompt for the calling party to enter an encryption key. Upon receiving the encryption key from the calling party, the application server  sends in step  the received encryption key and .wav file  to the invoked encryption utility , illustrated in .","The encryption utility encrypts in step  the .wav file , including header  and payload , into an encrypted file  illustrated in . The application server  receives in step  the encrypted file , and generates in step  a message transport header  and a MIME extension \u201c.uem\u201d  for the encrypted file  identifying the received file as encrypted. The application server  outputs in step  the resulting encrypted message  to the called party message store  via IMAP or SMTP protocol.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 5B","b":["66","180","66","62","25","66","88","182","184","66","86","186"]},"In response to receiving a selection input from the messaging subscriber, the application server  accesses in step  the stored message selected by the messaging subscriber from the message store  according to IMAP protocol. Upon retrieving the message, for example the encrypted message , the application server  parses the MIME header field  to determine in step  whether the selected message has a file extension (e.g., \u201c.uem\u201d) that specifies encryption.","If the retrieved message does not have a file extension specifying encryption, the application server outputs the stored message in step  for playback to the messaging subscriber. However, if the application server  determines in step  that the MIME header field  specifies the attached file is encrypted, the application server  generates in step  a prompt for a decryption key. The prompt is output to the proxy browser , which collects a decryption key input from the messaging subscriber.","The application server , in response to receiving the decryption key from the messaging subscriber, sends in step  the received decryption key and the encrypted portion  of the stored message to the invoked decryption utility , illustrated in . The actual decryption operation by the decryption utility is essentially the reverse of the encryption operation illustrated in . The application server obtains the decryption results from the invoked encryption utility in step , and outputs in step  the decryption result to the proxy browser  for attempted playback to the messaging subscriber.","Hence, the application server  forwards the decryption result to the proxy browser , regardless of whether there is a match between the encryption key used to encrypt the file , and the decryption key used to attempt decryption of the encrypted file . Hence, use of commercially available encryption and decryption utilities , as well as the passing of the decryption result to the proxy browser  handling the message retrieval session, ensures that the application server  maintains scalability and security by minimizing involvement in the encryption and decryption operations.","According to the disclosed embodiment, unified messages managed by unified messaging systems can be securely transported across an open protocol based network, such as the Internet, without compromising security or adversely affecting the operational performance of the unified messaging systems.","Although the disclosed embodiment describes performing encryption and decryption by the application server  using locally accessible encryption and decryption utilities , encryption and decryption also may be performed by the user session interface, for example the proxy browser .","While this invention has been described in connection with what is presently considered to be the most practical and preferred embodiment, it is to be understood that the invention is not limited to the disclosed embodiments, but, on the contrary, is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Reference is made to the attached drawings, wherein elements having the same reference numeral designations represent like elements throughout and wherein:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 5A and 5B"}]},"DETDESC":[{},{}]}
