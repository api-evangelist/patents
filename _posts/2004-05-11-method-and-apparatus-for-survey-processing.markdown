---
title: Method and apparatus for survey processing
abstract: Certain embodiments of the present invention provide a system and method for improved, real-time survey data processing and analysis. Certain embodiments use distributed computing techniques to perform statistical calculations for survey data, such as general purpose and multi-rater feedback data. Certain embodiments use a matrix structure coupled with hash tables for efficient processing of survey statistics across an entire survey. Certain embodiments use a criteria parser based on externally definable lexical rules to determine which survey responses belong to which groups. Certain embodiments allow coalescing of summarization requests between summarization servers to allow for peak performance across any number of surveys. Certain embodiments provide a scalable, adaptable survey processing system and method that processes survey results in real time, allowing for immediate feedback during the survey process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07418496&OS=07418496&RS=07418496
owner: Personnel Research Associates, Inc.
number: 07418496
owner_city: Rolling Meadows
owner_country: US
publication_date: 20040511
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present application relates to, and claims priority from, U.S. Provisional Application No. 60\/471,223 filed on May 16, 2003, and entitled \u201cMethod and Apparatus for Survey Processing\u201d.","The present invention generally relates to survey data processing and analysis. More specifically, the present invention relates to improved, real-time survey data processing and analysis.","Many companies value surveys, such as employee evaluation and satisfaction surveys. Companies use employee surveys to judge performance and award promotions, for example. Companies also use customer satisfaction surveys to gauge success of products or services and determine improvements. Managers may also be evaluated by employees using surveys.","Surveys may help initiate changes in a workplace environment, product or service improvements, and employee training, for example. Survey results may influence major strategic decisions by a corporation. Current survey systems do not provide a rapid response to help in making important, timely business decisions. Additionally, current survey systems are not easily accessible on demand.","Therefore, a system that provides real-time administration and processing of a survey would be highly desirable. Additionally, a system that improves accessibility to surveys, survey data, and survey statistics would be highly desirable. A survey processing system that allows survey information and classifications to be dynamically adjusted would also be highly desirable. Thus, there is a need for a system and method for improved, real-time survey data processing and analysis.","Certain embodiments of the present invention provide a system and method for improved, real-time survey data processing and analysis. Certain embodiments use distributed computing techniques to perform statistical calculations for survey data, such as general purpose and multi-rater feedback data. Certain embodiments use a matrix structure coupled with hash tables for efficient processing of survey statistics across an entire survey. Certain embodiments use a criteria parser based on externally definable lexical rules to determine which survey responses belong to which groups. Certain embodiments allow multiplexing of summarization requests between summarization servers to allow for peak performance across any number of surveys. Certain embodiments provide a scalable, adaptable survey processing system and method that processes survey results in real time, allowing for immediate feedback during the survey process.","In an embodiment, a survey processing system includes a read engine adapter for reading survey data and marking a starting point for processing of survey data, a statistical survey processor for processing the survey data using lexical analysis, the statistical survey processor generating statistics for at least one of a survey, a question, and a dimension based on the survey data, and a write engine adapter for outputting updated survey statistics.","The read engine may read a previous summarization state from a database to establish an initial state for summarization and statistical processing. In an embodiment, the statistical survey processor includes a criteria parser for categorizing survey data based upon definable lexical rules. The statistical survey processor may identify reporting groups of which the survey data is a member. The system may also include a hash matrix for storing statistics for a survey.","In an embodiment, a real-time survey analysis system includes a runtime engine for receiving survey data, at least one summarization coalescer for sorting survey data and routing the survey data to at least one statistical summarization engine, and at least one statistical summarization engine for analyzing the survey data in real time to perform at least one of summarization and statistical analysis. The at least one summarization coalescer sorts and routes the survey data based on at least one criterion.","In an embodiment, the at least one summarization coalescer receives a stream of survey data from a plurality of sources. The survey data may include survey completion data and\/or new survey reporting group data. The one or more criterion may include one or more criterion to allow the summarization coalescer to group incoming survey data in an optimal order for processing. In an embodiment, the summarization coalescer compares a plurality of survey data with a history list of recently processed surveys to route the plurality of survey data to the at least one statistical summarization engine. The one or more statistical summarization engines may read a previous summarization state from a database to mark a starting point from incremental statistic computation using the survey data.","In an embodiment, the real-time survey analysis system further includes a reporting engine for generating a new group for survey reporting. The system may also include a database for storing at least one of survey data and survey reporting group definitions. Additionally, the system may include a user interface for entering survey data. In an embodiment the user interface is a Web-based user interface.","An embodiment of a method for real-time processing of survey data includes receiving a survey event, determining a routing of the survey event based on at least one criterion, routing the survey event to a survey processor, processing the survey event at the survey processor in real time, and providing real-time feedback from the survey event. The method may further include determining whether an incoming event includes survey data or a new survey group. In an embodiment, the processing step includes statistical processing of survey data. The processing step may also include creating a new survey group. In an embodiment, the processing step analyzes survey responses by survey, question, and\/or theme. The method may also include updating stored data based on the processed survey event.","The foregoing summary, as well as the following detailed description of certain embodiments of the present invention, will be better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, certain embodiments are shown in the drawings. It should be understood, however, that the present invention is not limited to the arrangements and instrumentality shown in the attached drawings.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","110","120","130","140"]},"The user interface  presents a user with a survey and accepts the user's survey data. The survey data is then transmitted to the database  for storage. The survey analysis system  processes the data from the database  to produce desired output. Processed results may be displayed at the output  and\/or stored in the database .","In an embodiment, the user interface  may be a Web-based interface or other data input form, for example. The user interface  may be implemented with Hypertext Markup Language (HTML), Extensible Markup Language (XML), Simple Object Access Protocol (SOAP), perl, java, or other Common Gateway Interface (CGI) scripts, for example, to capture user survey responses as data for the database . Data and other messages may be passed from the user interface  to the database  using a message transport, such as Microsoft\u00ae Message Queue. In an embodiment, the database  is a server such as a cluster of quad processor servers running Structured Query Language (SQL) Server and configured to provide redundancy and security for data. The user interface  may reside on the same computer as the database  or the survey analysis system  or may be implemented on a separate computer. For example, the user interface  may be run on a single or dual processor server. The components of the system  may be networked via a connection such as Ethernet, gigabit Ethernet, wireless connection, or other wire connection. In an embodiment, TCP\/IP is used as a network protocol for communication between system  components. In an embodiment, the survey analysis system  is a quad processor server, for example. The components of the system  may be implemented in software and\/or in hardware.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","130","200","210","220","230","233","240","243"]},"The survey runtime engine  receives survey data from the user interface . Survey data is transmitted to the database . The survey runtime engine  also sends a survey complete message to one of the summarization coalescers -. Similarly, the survey reporting engine  may send a group definition to the database  and a group definition complete message to one of the summarization coalescers -. The summarization coalescers - communicate with statistical summarization engines - to summarize and perform a statistical analysis, for example, of the survey data or group definition. The statistical summarization engines - receive information from the database  and update the database .","In an embodiment, after a user has completed a survey at the user interface , such as a Web-based survey, a survey complete event is generated by the survey runtime engine . The event includes information that identifies the survey response record in the form of a database identifier, a survey identifier, and user respondent identifier combination, for example. The survey complete event may be sent to a statistical summarization engine - directly or to a summarization coalescer - for routing to an appropriate statistical summarization engine -. The survey complete event may also be marked in the database  as an uncompleted request for summarization for the user.","Similarly, in another embodiment, a user may create a new group for reporting. The survey reporting engine  generates a new group event including an identifier for the group. The new group event may be sent to a statistical summarization engine - directly or to a summarization coalescer - for routing to an appropriate statistical summarization engine -. The survey reporting engine  may also send the new group definition to the database  for use in creating a new summarization record for the group, for example.","The summarization coalescer - receives a stream of events from multiple sources. The stream of events includes a new group definition event and\/or a new survey complete event, for example. The summarization coalescer - groups incoming messages, such as grouping messages in an optimal order, to facilitate efficient summarization. Messages are sent to statistical summarization engines - based on to which survey the respondent is responding (for survey complete events) or the group being defined (for new group definition events).",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","240","243","300","310","320","330","300"]},"The summarization coalescer  receives a new event. The summarization coalescer  sorts incoming messages in a queue. The summarization coalescer  may also group incoming event messages in an optimal order to facilitate efficient summarization. In an embodiment, the summarization coalescer  has optimization goals including grouping summarization messages in the largest possible groups based on current queue status and assuring that each survey is given \u201cattention\u201d. For example, even if survey A has 1000 times more survey submit events than survey B, survey B will not have to wait an overly long amount of time to be analyzed and updated. In an embodiment, the summarization coalescer  runs until no more messages are present in the message queue. When the queue is empty, the summarization coalescer  \u201csleeps\u201d until a new message is received. The summarization coalescer  may run perpetually if the queue is never empty.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":["400","230","230","410","230","420","230","430","230","440","450","300"]},"As described above, the summarization coalescer  determines which survey to process. In an embodiment, the summarization coalescer  retains a history list of surveys recently processed. To determine which survey to process, the summarization coalescer  compiles a candidate list of possible combinations by finding all unique surveys that are represented in the queue up to a certain depth \u201cd\u201d. Once the candidate list \u201cC\u201d is developed, the candidate list is compared to the history list. The history list \u201cH\u201d represents surveys that have been recently processed, up to depth \u201ch\u201d. Entries in the history list may be listed in order of completion with the most recently completed surveys at the top, for example.","In an embodiment, the summarization coalescer  tries to find the first entry in \u201cC\u201d that is not in \u201cH\u201d (C\/H), while at the same time computing an ordered set \u201cHC\u201d that represents the intersection of \u201cH\u201d and \u201cC\u201d (H\u2229C). If (C\/H) evaluates to a non-empty set, the first item from (C\/H) is selected as the summarization candidate. If (C\/H) evaluates to an empty set, the candidate is chosen from the last element in the set (H\u2229C) as represented by \u201cHC\u201d. If the set is non-empty, the first candidate is taken from a list of candidates that has not been processed recently. If the set is empty, all of the candidates have been processed recently. Thus, the candidate that represents the least recently processed survey (last element from (H\u2229C)) is processed. Once the list of messages is determined, the list is compiled into a set of \u201cM\u201d that may be represented internally by a vector structure. The vector is then passed to the summarization engine  for processing.","As described above, \u201ct\u201d represents a number of entries to \u201cpeek\u201d up the queue when computing the set of \u201cM\u201d messages to be processed in a single iteration of the statistical summarization engine . In an embodiment, \u201ct\u201d is set according to the available RAM on a computer running the statistical summarization engine . For example, a server with 2 GB of RAM may process approximately 100,000 survey complete events from a single survey.","The candidate seek depth \u201cd\u201d represents a number of entries to \u201cpeek\u201d up the queue when computing the set \u201cC\u201d of candidate surveys to be processed. The depth \u201cd\u201d helps to ensure that the summarization coalescer  does not spend too much time gathering candidates in cases where survey processing in an instance of the summarization coalescer  is predominantly a small number of surveys.","A candidate set limit \u201cc\u201d indicates a maximum number of candidate events to gather. For example, if a candidate gathering operation yields \u201cc\u201d entries before getting to depth \u201cd\u201d in the queue, the candidate gathering operation loop stops. The limit \u201cc\u201d helps to optimize time spent gathering candidates when a high number of different surveys are being processed at any one time.","The history set limit \u201ch\u201d indicates a maximum number of candidate history entries to remember. A low setting for \u201ch\u201d may result in \u201cresource starvation\u201d for small surveys that are being summarized on the same server as large surveys. A high setting for \u201ch\u201d may result in overly long computation time for finding the candidate.","As described above, in an embodiment, the summarization coalescer  processes entries in the queue so that requests are grouped in a manner that does not starve surveys from getting summarization requests processed in favor of a dominant survey at a particular time. Avoiding resource starvation versus performance of the coalescing operation may then be controlled by variables that control the depth and memory of the candidate seeking. In an alternative embodiment, the summarization coalescer  may simply examine the first item in the queue and then grab the first \u201cz\u201d items that match the first item. Resource starvation would be avoided, but a dominant survey may be able to affect the summarization of a lesser quantity survey. For example, many requests coming from one survey may cause a backup that affect the summarization speed of a much smaller survey. However, the simpler method may provide less overhead and complexity in configuration.","The summarization engine  receives summarization requests as compiled by the summarization coalescer  and drives a summarization computation based on the requests. The engine adapter (read)  reads survey data from the database  according to the messages from the summarization coalescer . The engine adapter (read)  reads a previous summarization state from the database  to mark a starting point for incremental statistic computation.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5","b":["500","510","310","230","520","310"]},"If the summarization request message relates to a survey submit event, then at step , the engine adapter (read)  reads a survey data set from the database  for the new survey responses. The survey data set includes structural information about the survey (groups of related questions or items, master dimension or theme composed of subcomponents, for example). If the summarization request message relates to a new group event, then at step , the engine adapter (read)  reads an entire survey data set from the database . The data set may include items, dimensions, response scales, and other related information, for example.","Next, for a survey submit event, at step , a previous summary state is read from the database . The previous summary state may include item, dimension, response scale, and other related information, for example. The previous summary state represents an initial state before incremental summarization.","Then, for a survey submit event, at step , groups are found for each line of data of which, based on the data, for example, the respondent is a member. The statistics processor  may be called to determine to which groups each single line of data belongs. Group membership for a survey may be based on answers from the survey or pre-coded information that is attached to the respondent, such as division or demographic information, for example. For a new group event, at step , lines of data are found that the new group will summarize. The statistics processor  may be called to determine which lines of data belong to the new group. The group may be initially calculated based on surveys that have been submitted prior to creation of the group. In an embodiment, group and survey submit events are run serially so that incorrect data is not created by a survey event being processed at the same time as a group to which it belongs. Order of operations is not important.","At step , the engine adapter (read)  calls the statistics processor  to perform a calculation for the affected groups (for the new group if the event is a new group event). Structure, information, data to be summarized, and groups to which the data applies may be passed to the statistics processor , for example.","In an embodiment, the statistics processor  updates statistics based on new survey responses or creates new statistics lines based on new groups. The statistics processor  performs incremental statistical computation to determine an adjusted state of statistics based on newly received survey data (e.g., incremental summarization), for example. The statistics processor  also performs parsing of data to determine group membership for a given respondent. Parsing by groups allows the read engine adapter  to load groups into the statistical summarization engine  that may be applicable for a particular round of incremental summarization.","In an embodiment, the statistics processor  includes a criteria parser. The criteria parser uses declarative logic statements to perform a lexical analysis of a survey data stream, for example. The criteria parser performs a lexical analysis of the data stream to determine which data belongs to which group, for example. The parser may be customized to implement operators allowing faster and more efficient parsing of survey data. For example, a parser with specialized operators may be generated using Unix utilities lex and yacc and programmed using the C or C++ programming language.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 6","b":["600","610","320","620","320","630","320"]},"At step , the statistics processor  receives each relevant line of data and performs incremental summarization. That is, the statistics processor  increments the appropriate line in the data set. For each line of data, the statistics processor  uses the previous state and the new line of data for each group of which the line is a member. The statistics processor  updates the hash matrix with the updated data. Then, at step , once all lines of data are processed, the updated summarization state is returned to the engine adapter (write) .","The hash matrix structure used in summarization stores statistics for a survey in a memory efficient manner. The hash matrix structure includes hash tables on each axis of the matrix. In an embodiment, the hash matrix provides a constant look-up time with minimal collisions.","In an embodiment, the hash matrix stores statistics for a survey in an \u201citem\/dimension\u201d element of a matrix and a \u201cgroup\u201d element of a matrix. The groups in the matrix are the groups to which the relevant line of data is a member, unless the hash matrix is a batch matrix including all groups. In an embodiment, the hash matrix is a two-dimensional array of statistics objects coupled with three hash table structures. The hash table structures include a structure for items, a structure for groups, and a structure for each dimension or group of items, for example. The hash table structures provide an associative look-up in the hash matrix on the basis of an item\/group or dimension\/group pair, for example. As a result, look-ups for a particular statistic (for purposes of retrieval or update, for example) are performed in O(C) time. In an embodiment, memory usage is optimized for the smallest memory usage possible while maintaining a statistic state.","In an embodiment, the hash table is a 10\u00d7N allocation, where N is the size of the group element or the size of the combined items and dimensions element. In a typical case, collisions in the hash table are infrequent. A higher hash table allocation multiplier may be used to reduce collisions in certain cases.","For example, overall memory utilization within the hash matrix may be 200 bytes\u00d7G\u00d7(I+D), where G is a group count, I is an item count, and D is a dimension (or group of items) count. If G=10,000 and I+D=1000, total memory utilization to hold a summarization state is slightly over 2 Gigabytes, including space used by the hash tables, for example.","Once summarization is complete, the incremented statistics are written back to the database . Control flow is passed back to the summarization coalescer . If more messages remain in the message queue, the summarization coalescer  may repeat the statistics summarization process. The engine adapter (write)  receives results generated by the statistics processor . The engine adapter (write)  writes the updated statistics to the database . Thus, the database  is updated with the analyzed survey results and\/or the new group.","Statistics for a particular item\/group pair may include mean, standard deviation, response frequency for each response option, recode frequency for each recode, actual N, weighted N, and a stored non-response count, for example. Statistics for a particular dimension\/group pair include mean, standard deviation, response frequency for each response option, recode frequency for each recode, actual N, weighted N, and a stored non-response count, for example.","Statistics may be calculated for each question in a survey. Additionally, statistics or scores may be calculated for dimensions or themes in a survey. In an embodiment, calculations are done prior to suppressing data due to an insufficient number of respondents. Additionally, responses outside a valid range of answers are ignored. In an embodiment, rounding occurs when data is retrieved not when statistics are calculated. In an embodiment, a blank record in the database  is counted toward a total number of responses but not for a question-level response calculation. Reverse score settings may also be used in calculations (a response with valid values ranging from 1 to 5 may be recoded as: 1=5, 2=4, 3=3, 4=2, and 5=1, for example).","Suppression of responses may be used to ensure that each group has at least N responses to a question or a dimension. Alternatively, results may be suppressed based on responses of other groups. Relationships between groups and suppression rules may be configured. A group may be assigned a minimum number or level of responses for a particular question or group of questions, for example.","In an aggregate method for determining statistics, theme or dimension results are created from question level results. Response frequencies are summed from questions comprising the dimension of interest. Calculations are similar to survey question response calculations, but the number of respondents is averaged for a dimension or theme score. First, response categories or buckets (for example, favorable, neither, unfavorable, good, poor, fair, yes, no, etc.) are added from the questions that are used to compute the dimension. Then, for a percentage statistic, response frequency bucket counts from the dimension are divided by a total of counts across all frequency buckets. Each response bucket may be assigned a value for mean and standard deviation calculations, for example. For mean or average scores, dimension frequency bucket values are multiplied by dimension frequency bucket counts. The total is then divided by a total number of respondents. For example, Mean=((Frequency Bucket 1\u00d71)+(Frequency Bucket 2\u00d72)+(Frequency Bucket 3\u00d73))\/Total Number of Respondents. A number of users responding to a dimension may be calculated as an average of a number responding across the questions used to calculate the dimension. The numbers of respondents for each question are added, and then the total is divided by the total number of questions used to calculate the dimension. In an embodiment, questions with zero respondents are included in the dimension number responding calculation. A count of non-responses may also be calculated by summing non-response frequency buckets.","In an embodiment, survey question statistics follow rules defined under an aggregate method. Alternatively, other statistical methods may be used to process survey data. In an embodiment, question results are produced for a group if the question is included in a data file layout definition for the group.","In a \u201cby case\u201d method for determining statistics, dimension results are created for each respondent who answered at least one question within the dimension. Respondent dimension scores are averaged. First, question results are processed for each respondent. Then, a dimension score is created for each respondent by summing item responses and dividing by the number of questions answered within the dimension. A mean\/average dimension score may be calculated from the summed item buckets using the following formula, for example: Mean=((Frequency Bucket 1\u00d71)+(Frequency Bucket 2\u00d72)+(Frequency Bucket 3\u00d73))\/Total Number of Responses Across Items. Calculations may be finalized by averaging the respondent dimension scores.","A \u201cby item\u201d method uses the aggregate method, described above, to calculate item results. Item results may then be averaged to create dimension scores. In an embodiment, items that do not meet a minimum N requirement are ignored. Additionally, dimension calculations may be based on rounded item results.","Master themes or dimensions may also be calculated. Master dimensions are built from sub-dimensions rather than from items. Sub-dimensions may be calculated based on question results. Sub-dimension results may be used to calculate master dimension results using the \u201cby case\u201d or \u201cby item\u201d calculation method, for example.","Mean and standard deviation may be recalculated when a respondent is added to a group. The following equations may be used to calculate mean and standard deviation:\n\n=(1)\/\u2003\u2003(1);\n\n2\u2003\u2003(2);\n\n2=2+(\u00d7(1)\u00d72) \u2003\u2003(3);\n\n11\u2003\u2003(4);\n\n(2\/(1)) \u2003\u2003(5),\n\nwhere X is a respondent's answer, N is a number of respondents, S represents a mean, S indicates a sum of squares, SD is a standard deviation, and SQR is a square root. Thus, a previous mean value may be used with a respondent's answer and a number of respondents to calculate a new mean value. Similarly, a previous sum of squares may be used with a respondent's answer and a number of respondents to determine an updated standard deviation.\n","In an embodiment, results may be weighted by respondent to reflect population characteristics. If a weight value is present in a data table for a respondent, the respondent's result is weighted by the weight value. To weight data, the weight value is added to the data rather than incrementing a response bucket by one. A statistic representing a number of respondents is typically not weighted but represents the true number of people responding to a question.","The statistical summarization engines - may include a plurality of routines for statistics and data. For example, an engine - may include a \u201cget data\u201d routine to return a requested statistic. In an embodiment, the get data routine accommodates both suppression and rounding results. In an embodiment, the get data routine takes several parameters, including an identifier for a requested group, an identifier for a requested question or dimension, a request type (question or dimension, for example), a desired statistic, a desired suppression, and a rounding format (number of decimal points, for example). Additional parameters may be used to specify conditions for suppression, for example. The desired statistic may be a frequency bucket (a number responding for a specific bucket requested), a percentage bucket (a percentage responding for a specific bucket requested), a non-response bucket (a number of non-responses for a bucket or buckets), a mean or average score, a standard deviation, a number of valid responses for a requested question or dimension (Actual N), and\/or a total number of respondents for a group regardless of question or dimension (Total N), for example. A desired suppression may include no suppression, minimum N responses, group suppression, custom suppression, or other suppression routine, for example.","The get data routine may return the desired statistic and an outcome of the data search. The routine may return a success (statistic was found and not suppressed), suppressed (statistic was found but was suppressed due to selected suppression rules), or invalid (statistic was not found and no data was returned), for example.","The statistical summarization engines - may also include a \u201cget population\u201d routine, for example. In an embodiment, the get population routine counts a number of records matching a group's criteria as population size. Alternatively, all records in a record set may be returned so that information from the records may be printed.","Another routine is a \u201cget written comment\u201d routine. The get written comment routine retrieves written comments from a written comment file for a specified group. Written comments may be returned by question and\/or by topic within a question, for example. In addition to actual comments, other statistics may be provided, such as a number of comments from the question for the group, a number of respondents providing comments for the question, a number of comments within a topic for a written comment question, and a percentage of comments within a topic for a written comment question.","In an alternative embodiment, the system  may include a reporting system (not pictured). The reporting system may function as a batch processor to definition business rules for parsing and survey statistical analysis, for example. In an embodiment, the reporting system includes a single statistics processor that performs incremental statistical processing, for example. In an embodiment, messages are not multiplexed or coalesced, as in . Data and groups are retrieved and summarized in the statistical processor of the reporting system. Statistical results may be displayed, printed, and\/or stored in the database , for example. The reporting system may be used to define and analyze groups, dimensions items, responses, data fields, and\/or report data, for example. The reporting system may update the database  for use with the survey analysis system .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 7","b":["700","700","700","710","720","730","700"]},"The font module  facilitates font selection and generation for the report, such as the report PDF file. In an embodiment, the font module  is a public application programming interface (API). The font module  encapsulates a font used in generation of PDF or other document format files. The font module  allows font selection that functions independent of a particular character set. For example, the font module  substitutes appropriate fonts if Kanji characters are being printed using a Latin-based font.","To configure the font for the report, the font module  may use properties such as Embedded, Encoding, FontName, FontScale, GetLangEnum, IsBold, IsItalic, IsUnderlined, IsUnicode, Language, and Size. The font module may also use methods such as Copy, GetLanguageList, SetFontByName, SetFontCustom, and SetStyle.","The color module  may also be implemented as a public API, for example. In an embodiment, the color module  simplifies assigning color to objects when generating a document, such as a PDF file. For example, the color module  allows creation of a color using RGB triads or \u201cnamed colors\u201d from a pre-set enumeration. For color generation, the color module  may use properties such as color (red, green, and blue, for example) and name. The color module  may also use methods such as copy, SetByName, and SetByRGB.","The PDF module  includes drawing, measuring, and layout routines used in generation of PDF, Microsoft\u00ae Excel, Microsoft\u00ae Word, HTML, XML or other document files. For example, the PDF module  includes a PrintTextInBox routine that takes a FontPDF object (for text font) created by the font module  and a ColorPDF object (for text color) created by the color module . The PrintTextInBox routine also uses coordinates for document layout, an alignment enumerator value, and an optional parameter to indicate a number of characters not printed with an attempt to print (useful for knowing how many lines to layout), for example. The PDF module  may use output from the font module  and color module  to generate a report layout for displaying survey and statistical data at the output . Survey statistical data may be inserted in the report template generated by the system . The completed report may be stored and\/or displayed. In an embodiment, the report PDF file is displayed on the Web. In an alternative embodiment, the report file is converted to an Extensible Markup Language (XML) format document for display on the Web.","In order to produce the report document layout, the PDF module  may use properties such as Creator, CurrentPage, DocumentStatus, and m_PDF. The PDF module  may also use methods such as AddBookMark, AddImage, AddimageInBox, AddWebLinkBox, BeginPage, CloseFile, Copy, CurHGraphPos (current horizontal position of graph cursors, CurHPos (current horizontal position of text cursor), CurPageHeight, CurPageWidth, CurVGraphPos (graph cursor vertical position), CurVPos (text cursor vertical position), DrawShape (bar, line, box, circle, polygon, for example), EndPage, GetActualX\/Y, GetMatchingPenColor, HTMLColorToRGB, MoveHPos, MoveVPos, OpenFile, PlacePDI, PrintText, PrintTextInBox, PrintTextInBoxHTML, ScalePage, and SetCursomPageSize.","Therefore, certain embodiments of the present invention present a real-time, electronic survey processing system. Certain embodiments allow a user to create surveys and collect data. Questions, groups, and dimensions (themes), for example, may be defined. An engine may process the data. Then a report is generated from the processed data.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 8","b":["800","810","820"]},"Next, at step , survey participants connect to a survey administration system and complete the survey. For example, the survey participants access a Web page to take the survey. The identity of the participant may be authenticated. Then, at step , the responses of the participants are captured. For example, a Web-based form captures the participants' responses.","At step , identification and password information, except for a respondent identifier, is stripped from the survey data. Then, at step , the survey data is sent to a processing and reporting system. In an alternative embodiment, paper surveys may be entered into a datafile for processing. Finally, at step , a report of statistical survey data may be generated.","Survey and report displays may be translated for different languages. In an embodiment, a translation of survey questions may be submitted when the survey is created, and the responses and resulting output are translated accordingly.","In an embodiment, an administrator may select different rules for processing survey data. The administration may set different response values, response scales, and\/or reference items for surveys. Types and styles of statistical reports may be selected and fed to the reporting system . Groups may be defined based on a certain set of values for selected questions. Groups may also be selected using a syntactical interpreter. The interpreter may construct a data select statement using statistical operators to define groups of data.","In an alternative embodiment, a sampling tool may be used to sample survey data and statistics. The sampling tool may perform statistical calculations on the survey data. The sampling tool may perform random statistical calculations and stratified statistical calculations (data divided into subgroups, for example) using the survey response data.","Thus, certain embodiments of the present invention provide a system and method for analyzing survey and statistical data. Certain embodiments use distributed computing techniques to perform statistical calculations for data such as general purpose and multi-rater feedback data. Certain embodiments provide a scalable system that may add and subtract hardware to accommodate survey load without affecting software or functionality. Certain embodiments include a matrix structure coupled with hash tables for efficient processing of survey statistics across an entire survey. In certain embodiments, a criteria parser based on externally definable lexical rules may be used to determine, for example, which survey responses belong to which groups. In an embodiment, a user may define criteria statements and retrieve results in real time. Certain embodiments multiplex survey summarization requests among multiple summarization servers to allow for peak performance across a plurality of surveys. Multiple surveys and\/or multiple databases may be accommodated. Thus, certain embodiments provide processing of survey data in real time and allow for immediate feedback during the survey process.","While the invention has been described with reference to certain embodiments, it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted without departing from the scope of the invention. In addition, many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from its scope. Therefore, it is intended that the invention not be limited to the particular embodiment disclosed, but that the invention will include all embodiments falling within the scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
