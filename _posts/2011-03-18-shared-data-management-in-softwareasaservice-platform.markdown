---
title: Shared data management in software-as-a-service platform
abstract: Shared data management in software-as-a-service platform may provide a common object data schema for one or more data objects and one or more data attributes associated with said one or more data objects stored in a master database. A plurality of applications may be enabled to be deployed dynamically on a platform and interoperate by sharing said data values stored in the master database. Data trading is enabled in which applications request permissions to read from or write to, or both, the master database, and in which the requests are mediated by granting or denying permissions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08667024&OS=08667024&RS=08667024
owner: International Business Machines Corporation
number: 08667024
owner_city: Armonk
owner_country: US
publication_date: 20110318
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The present application relates generally to computers and applications, and more particularly to enabling and managing data sharing in software-as-a-service platform.","In many entities still, in-house IT applications are poorly integrated, for example, with disparate applications running on their own, even when there are commonalities in the data those applications use. In such cases, data updated by one application is usually imported to another application manually. For instance, an IT administrator may have to manually access data updated or used by one application and load on to another application.","Take for example, local or municipal government's IT applications used to support service delivery for the municipalities. Those applications typically aligned directly to the departmental structure, with application(s) covering only the tasks associated with a single department. However, services offered and provided to citizens often involve the work of many departments. Consider, for example, a parcel that has been recently renovated by its owners. The parcel owner applies for a building permit from the Building department. After the work has been completed and the Certificate of Occupancy has been issued, the Assessor's office must update the parcel details to reflect the renovations and initiate a parcel reassessment. The newly assessed value has to be updated in the tax system for calculation of the property tax liability. Finally, the property tax payments collected by the tax department are directly entered into the tax system, and must later be updated in and reconciled with the accounts of the Finance department's General Ledger. This example describes the complex interactions between four departments as part of the administration for parcel management services including the renovations, assessment and property tax processes.","In many cases, the departments all use distinct, nonintegrated, custom software programs to aid in their work. Additionally, departments may also use paper-based records and manual record-keeping. Municipalities may choose to pay for pair-wise integration between software applications or purchase pre-integrated software packages, especially for departments that share information frequently. Departments such as Police and Justice, Assessment and Tax, Personnel and Finance rely heavily on the sharing of information that is central to their work. The Police department may need to notify the Justice department of arrest and investigation details as input to current and future court cases. The Assessment department may need to periodically give the Tax department the tax roll, a listing of all taxable parcels, their current assessment values, and valid exemptions. The Personnel department (and\/or individual departments) maintains information on employee pay rates, raises, benefits, and work hours. These factors are used to calculate semi-monthly pay to produce payroll checks.","Although municipalities have the choice to pay for integration between independent applications, the cost is usually prohibitive. Additionally, the association of IT applications to a single specific department can be a limiting factor for service offerings. The applications are not flexible to adapt to new needs, therefore the only way currently to have this information reflected in multiple department software is through constant manual transmission and inputting.","A method and system for shared data management in software-as-a-service platform may be provided. The method, in one aspect, may include providing a common object data schema for one or more data objects and one or more data attributes associated with said one or more data objects stored in a master database. The method may also include allowing a plurality of applications to be deployed dynamically on a platform, and receiving registrations from said applications deployed on the platform, the registrations including one or more requests to read or requests to write data values or both, for selected attributes of said one or more data attributes by said plurality of applications. The method may further include enabling said plurality of applications to interoperate by sharing said data values stored in the master database.","A system for shared data management in software-as-a-service platform, in one aspect, may include a common object data schema for one or more data objects and one or more data attributes associated with said one or more data objects. A shared data management server may be operable to publish said common object data schema. The shared data management server may be further operable to allow a plurality of applications to be deployed dynamically on a platform. The shared data management server may be yet further operable to mediate data sharing of data associated with said common object data schema among said plurality of applications.","A computer readable storage medium storing a program of instructions executable by a machine to perform one or more methods described herein also may be provided.","Further features as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. In the drawings, like reference numbers indicate identical or functionally similar elements.","Shared data management (SDM) is disclosed in one embodiment that enables platform-mediated data sharing among applications, for example, in Software-as-a-Service platform. Software-as-a-Service or SaaS refers to providing the use of software or application as a service on demand, for instance, by subscription, e.g., in a \u201cpay-as-you-go\u201d model. A customer or a user subscribes for the use of a software application, for instance, as needed by the customer. Typically, an application being provided as a service is resident in a remote platform which a customer may access via a network (e.g., the Internet via a browser or the like interface). The remote platform may include a number of different applications. For instance, a provider of SaaS provides a computing platform and resources for running applications. The applications need not have been developed by the provider, but may have been deployed and set up on the platform by independent software vendors. SDM of the present disclosure provides a common database system, a common data object schema or model, and logic or algorithms for enabling those applications to share data.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["102","106","104","104","104","108","110","112","114","116","118","102","108","110","112","108","110","112"]},"SDM  provides platform-mediated, loosely-coupled linkages between applications, i.e., \u201cservice composition\u201d in one or more SaaS platforms. Service composition refers to data sharing. SDM  addresses application integration by enabling data sharing of applications (e.g., , , ) deployed on the platform . SDM  also may function as to store and manage high-value shared data for different applications, for example, pertaining to municipal government operations such as land parcels, citizen information, and municipal assets, and others.","The common object schema  for data to be stored, for example, in a master database may be generated, for instance, in consultation with the users and developers of the applications. For example, in the case of application used by a municipal government, the municipal government (e.g., users and\/or administrators therein) and those who develop the applications (e.g., independent software vendors (ISV) may be consulted to create a common object schema for data used by the government and the applications.","A software interface such as an application program interface (API) allows the ISVs to create services that access shared objects. In this way applications or services (e.g., , , ) may be hosted on the SaaS platform . In one aspect, each application (e.g., , , ) keeps its own private database (e.g., , ,  respectively) with mapping of attributes in a master database of the SDM  with those in private database.","A user (e.g., an administrator of municipal government) may subscribe to a set of applications hosted on SaaS platform . A set of applications that a user subscribes to may be referred to as the \u201csubscription set.\u201d The SDM  of the present disclosure in one embodiment allows the applications in a subscription set to work cooperatively without being directly aware of each other's presence. For instance, the applications need not directly communicate with each other, hence, the application need not be tightly-coupled. Communications and interactions among applications in a subscription set are mediated by SDM , and therefore, the applications are loosely-coupled.","Data Sharing in SDM  may be accomplished, for example, by analyzing the data used in the SaaS platform  and identifying the data objects commonly used by the applications hosted on the platform . For instance, in a municipal government information technology (IT) system, government data systems may be analyzed and data objects common to the government applications may be identified. The identified common data objects used by the applications may be stored and maintained by SDM  in a database system, using a generated object schema or model for those objects. In an IT environment (e.g., of one or more municipal governments), it is possible that there may be multiple copies of the same object from one or more applications. Also, there may be conflicting information about the object from different applications that read and\/or write values to the object. SDM  may store the master copy of the objects (also referred to as authoritative information or data). Thus, SDM  may take responsibility for common data, making it easier to create new applications that can use the data and making the platform more sticky, that is, making it easier to keep the applications and their users on the platform.","Common data objects managed by the SDM may be viewed as \u201cMaster Data\u201d. The data is to be authoritative, e.g., there are no duplicates and\/or full auditable history may be made available. Common data objects may be high value information that an organization uses repeatedly across many business processes. The database system used in the SDM to store the common data objects may offer data sharing functionality for SaaS with features such as data stewardship which prevents inadvertent creation of duplicate parties and products, and eliminates any duplicates by using sophisticated matching techniques, point-in-time history which includes a full audit database that contains the full modification histories of all business objects so that rich set of query options are available for the audit database, track source of data which keeps track of the source of all data and when it was added, and rules of visibility which allows administrators to define what elements and sub-elements users and user groups can see based on defined constraints.","Data stewardship refers to the functionality that, for example, allows an administrator to eliminate data errors such as inadvertently created duplicates business objects. The Point-in-time functionality, for example, allows the administrator to view the state of an object at a particular moment in the past. Data source tracking, for example, enables the administrator to identify the specific application that updated an attribute of an object.","An example of a database system may be master data management (MDM) system from International Business Machines Corporation (IBM), Armonk, N.Y. SDM  in one embodiment may be implemented with one or more MDM systems.","An MDM system manages master data, for example, manages objects and attributes; defines data governance procedures such as conflict resolution, data import and data integration; defines transactions over the mater data; and defines access control to objects and attributes. An MDM server may ensure consistent master information across transactional and analytical systems; address issues such as data quality and consistency proactively rather than \u201cafter the fact\u201d in the data warehouse; decouple master information from individual applications; become a central, application independent resource; and simplify ongoing integration tasks and new application development. An MDM system may be implemented in \u201cconsolidation\u201d style in which data is periodically replicated to the MDM server; \u201cregistry\u201d style in which the MDM server know where to find the data, e.g., by reference; \u201ctransactional hub\u201d style in which MDM server becomes the system of record for master data, for example, for appropriately architected applications.","In one aspect, SaaS  may also use the MDM system as a transactional hub so that transactions operate on data stored in the MDM system, for example, as the \u201cTransactional Hub\u201d style implementation of an MDM system, in which MDM system becomes a system of record for master data. Other styles of MDM system may be used. MDM server may provide an integrated, consistent view (and, e.g., \u201cmaster\u201d copy or master view) of data or selected data which originally reside in applications' private databases. Once the master view is created, one can write new applications which work on the integrated view, e.g., single view of \u201cCitizen\u201d data object.","Additionally, one can configure and \u201cenable\u201d the applications to see the master view of the data. For instance, an application from independent software vendors may be deployed and registered in the SaaS platform . The application's data may be registered to MDM system in the platform . The platform  makes the data available to other applications, which are also registered to the platform (e.g., as sort of a \u201cdata marketplace\u201d). The platform  configures the application which adopts new data from other applications in the platform. The end user sees and uses the newly configured, extended application from the platform. MDM may be an application running on DB2\u2122, database system from IBM.","MDM database may federate legacy databases so that new applications can query MDM database and see data from several legacy databases. There are several different ways for an MDM system to adopt legacy data. The ways for adopting legacy data are referred to as \u201carchitecture styles\u201d. Different architecture styles handle the data consistency issue between MDM database and private database differently. For instance, \u201cRegistry style\u201d utilizes referencing or pointing, and therefore, data instances are not replicated. \u201cTransaction style\u201d utilizes values or copies of the data, therefore, legacy database may be discarded once the data instances are copied to MDM database and there are no data replications. In \u201cCo-existence style\u201d, the legacy application maintains its private data; and the MDM database synchronizes with the legacy databases; the details are left to MDM system implementation. In \u201cConsolidation style\u201d, ETL (Extract, Transform & Load) for data analysis with MDM data\u2014the legacy application does not use MDM data for operation and there is no data replication. Extract, transform and load (ETL) is a process in database usage and especially in data warehousing and also in master data management that involves: extracting data from outside sources, transforming it to fit operational and analytical needs (which can include quality levels), and loading it into the end target (master database or data warehouse).","In another embodiment, external data sources may import (write) data into SDM . External applications may read data from SDM .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 2","FIG. 1"],"b":["202","106","204"]},"At , new applications may be registered and added to a catalog of applications on the SaaS platform, with application links to offers and\/or requests, i.e., which application is offering to write and\/or requesting to read which data specified in the SDM data model. An administrator of SaaS platform may add or remove applications from an application catalog. For example, a platform administrator may study the application and approve it for the SaaS platform, for example, if it meets platform requirements. A platform administrator may store the trade for the application in an SDM operational database. In addition, a platform administrator may specify the pricing strategy for the application and add the application to an offering catalog.","In another aspect, a platform administrator may remove an application from the offering catalog. Current subscribers are notified of the application being removed, and all instances of the application may be deleted from all subscribers' subscription sets. In addition, a platform administrator may remove the trade for the application in the SDM operational database.","At , a user or customer of the applications (e.g., an IT administrator on the user side or customer side) may subscribe to the use of the applications on the SaaS platform, for example, from a list contained in the offering catalog. A subscribing user may grant permissions to the offers and\/or requests. Thus, a user may select applications, decide which application features to use, and define a shared data access policy. A policy may be a high level statement regarding which departments will control the shared objects. Other policies may be specified. The user (e.g., software customer's IT administrator) may designate who will access the application. For instance, if the user is an IT administrator of a municipal government, that IT administrator may designate what users or user groups in the municipal government may access the application. The user (e.g., an IT administrator) may use a tool such as shared data editor to specify shared object permissions. The statuses of permissions (granted or denied) associated with the shared data objects are stored, for example, in an operational database. SDM also may send event notifications (e.g., broadcast) about the new permissions to all trading applications.","Thus, the customer (user of the applications) may add an application to a subscription set. In addition, the customer may remove an application from the subscription set, or modify permissions for applications in the subscription set. Permissions may be granted\/denied as follows: accept an attribute update offer; decline an attribute update offer; grant an attribute access request; deny an attribute access request. After permissions are determined by the customer, applications are notified of the permissions. This may occur at any time, for instance, during configuration or deployment of the application, and\/or during operation of the application (e.g., when the application is running on the platform to provide its services). During operation of an application, it may update the attribute corresponding to an accepted offer in the SDM. The application may read the attribute value from SDM. If an attribute update offer is declined, the application may not update or write to SDM. In this case, the application's functionality may be modified so that updating or writing of the data associated with the update offer is disabled. Once attribute access (read) request is granted, an application may read from SDM. Once attribute access (read) request is denied, an application may not read that data in SDM associated with the denied request. In one embodiment, the read requests may be either a mandatory read or optional read. That is, if an application needs to read the data associated with the read request in order to perform its functions, the request for that data is considered as mandatory. If an application can function without the data, the read request for that data is considered as optional. In the event that a mandatory request is denied, and for instance, the denied application could not obtain the data other than through the SDM, the application may be in disabled state, since it cannot obtain the data needed to function. Alternatively, the application may run in a different mode without the data. In the event an optional request is denied, the application may still provide its functionalities.","At , SDM broadcasts configuration changes to all subscribed applications. If an application is removed from the subscription set, event notification (e.g., broadcast) is sent about the deleted permissions to all trading applications. At , applications publish one or more attribute values (data) and they are shared if permission is granted. In this way, at , the application in a subscription set may interact with one another through SDM, but not directly with one another. At , in response to a user (e.g., user's administrator) changing subscriptions, the subscription to one or more applications is removed. In another aspect, the subscription may be removed in response to the subscription expiring. The removal is broadcast as shown at .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3","b":["302","304","306","308","310","312","302","302","304","302","308","310","312","304","302","314"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4","b":["402","408","410","412","404","402","408","410","412","404","402","402"]},"Applications (e.g., , , ) send trade requests (i.e., data offers and requests) to SDM . The trade requests may be stored in an SDM operational database . A user of the applications or the like or an SDM administrator may use a tool, for example, Shared Data Editor  to view or otherwise identify trades from selected applications dynamically, and also grant permissions to the applications dynamically. Permissions may be granted to applications, for example, to read, to write, or to both read and write the data specified in the trade. Providing permissions may be automated. In one embodiment, the granted trade requests are stored in SDM operational database . SDM  notifies applications (e.g., , , ) about the permissions set. In response, applications (e.g., , , ) may adapt their functionality to match the granted permissions. For example, one or more functions may be disabled if the application is not given access to requested data. SDM  notifies applications when requests are no longer viable, e.g., because associated offers are removed or disabled.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 5","FIG. 5"],"b":["506","510","508","512","514","516","512","514","516","518","510","512","514","516","520","508","506","506","508","510","506","506","502","502","504"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":["602","604","606"]},"A tax application , for example, may keep track of tax bills and payments and needs mandatory read access to ID, Owner Name, and Owner address. All read requests may be mandatory and if denied, application may not be able to function. A tax application  may send an offer to update Tax Status object in the land parcel shared objects . In one embodiment, all update offers may be optional. In one aspect, even if offer is not accepted, application may be able to function since for instance, each application has its own database.","A parking lot management application  may be used to manage parking permits for town-owned parking lots. This application  may require optional read access to Tax Status and mandatory read access to parcel ID, Owner Name and Owner Address. If the read request is granted, Tax Status may be used to deny parking permits to delinquent residents. If not granted, the application still may operate without the data. This application may also offer to update Registered Vehicles object in the land parcel shared objects . The value of this attribute may be useful for other applications as well.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 7","FIG. 5"],"b":["702","704","706","708","710"]},"In one embodiment, there may be a plurality of user groups using the SDM of the present disclosure. For example, a platform administrator may design and publish shared object schema of SDM on SaaS, and maintain the application catalog. An independent software vendor (ISV) may create applications that access SDM and deploy on the SaaS. A customer (user) may subscribe to those applications.","The SDM on SaaS may also include a plurality of user interfaces. For example, a platform administrator user interfaces may be provided to manage the application catalog, for example, add, update and remove ISV applications in an integrated catalog. ISV user interfaces may be provided for submitting application to the catalog, providing application user interface and taking input from user and storing data in private databases. Customer business manager user interfaces may be provided to allow users to search for list of applications deployed on SaaS, e.g., with description of those applications. Customer IT administrator user interfaces may be provided for a user to configure application permissions to shared data, and to manage users, groups and roles. In addition, each application deployed on SaaS may include its own user interface.","An ISV thus may develop and register applications on SaaS. A platform administrator may add new application to a catalog and remove applications from the catalog. A customer IT administrator may add an application to a subscription set, remove an application from the subscription set, modify permissions for applications in the subscription set. The applications in the subscription set may interact by sharing the data in SDM according to the permissions.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 8","b":["806","802","804","804","804","802","808","802","802"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 9","b":["904","906","904","906","904","906","902","902","902","904","904","902"]},"In one embodiment, event handling mechanism may be provided that uses event listener\/handler, for instance, instead of applications providing APIs. An event listener template may be provided as a part of an ISV toolkit to participate in the event sharing mechanism. Applications may be developed to adapt to the configuration changes in the shared data attributes. Applications may enable\/disable data updating or publishing based on the function a customer selects to use or not use. Applications may enable\/disable functions based on the status of a subscribed attribute. Applications may enable\/disable functions based on the status of the access permission. Event listener may have a filter function to listen to only the changes in the subscribed attributes. Types of configuration changing events may include availability of an attribute (status of publishing) and changes in the permission status of a specific application (allowed to read or write or not, change in composition). Any configuration changes may result in new event generation to all subscribed listener. In one embodiment, a publisher does not need to have the event listener. Changes to schema may be notified to ISVs and an ISV may decide if the ISV should modify applications to support the new attributes or not.","In another aspect, event broadcasting may be utilized. Frequency of broadcasting configuration changes may be tuned based on the behavior of a system (e.g., number of attributes used, frequency of trading, frequency of changes in the composition, and others).",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 10","b":["1002","1004","1006","1002","1008","1010","1012","1004","1014","1016","1018","1006","1020","1022","1024","1026","1028","1024","1026","1028","1024","1026","1028"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 11","b":["1102","1104","1102","1102","1102","1110","1102","1106","1114","1108","1110","1114","1102","1114","1112"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 12","b":["1204","1202"]},"In another aspect, the SaaS platform may be implemented as cloud computing paradigm, although not limited to only the cloud implementation. Cloud computing is internet-based computing in which shared resources, software, and information are provided to computers and other devices on demand. As such, cloud computing represents a paradigm shift in which the details of IT operation are abstracted from the users. The users no longer need to understand all details of IT architecture\u2014they can access and use sophisticated services with a Web browser and an Internet connection.","For example, a SaaS platform with SDM may run on a cloud infrastructure; the applications provided by independent service vendors (ISV) that can reside within or external to the cloud. Any entity (e.g., local government) may register as a client and enables simple subscription to a rich set of application-based services without building its own IT infrastructure. Actors\/players in this system may include the creator and operator of the platform; independent Service Vendors (ISVs) as the creator and manager of the software applications running on the platform; Clients, i.e. municipal governments, who choose to subscribe to application bundles; and Client Relation Owners (CROs) as the coordinator of the business requirements between clients and the platform owners, including identifying clients wanting to subscribe to the platform and enabling selection of ISV software by participating clients. In such as way, for example, service delivery capability may be provided with basic services that offer scalable and secure solutions for the entities while reducing the operation cost and with data synchronization services that help synchronize data elements among multiple services (applications).","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages, a scripting language such as Perl, VBS or similar languages, and\/or functional languages such as Lisp and ML and logic-oriented languages such as Prolog. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The systems and methodologies of the present disclosure may be carried out or executed in a computer system that includes a processing unit, which houses one or more processors and\/or cores, memory and other systems components (not shown expressly in the drawing) that implement a computer processing system, or computer that may execute a computer program product. The computer program product may comprise media, for example a hard disk, a compact storage medium such as a compact disc, or other storage devices, which may be read by the processing unit by any techniques known or will be known to the skilled artisan for providing the computer program product to the processing system for execution.","The computer program product may comprise all the respective features enabling the implementation of the methodology described herein, and which\u2014when loaded in a computer system\u2014is able to carry out the methods. Computer program, software program, program, or software, in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: (a) conversion to another language, code or notation; and\/or (b) reproduction in a different material form.","The computer processing system that carries out the system and method of the present disclosure may also include a display device such as a monitor or display screen for presenting output displays and providing a display through which the user may input data and interact with the processing system, for instance, in cooperation with input devices such as the keyboard and mouse device or pointing device. The computer processing system may be also connected or coupled to one or more peripheral devices such as the printer, scanner, speaker, and any other devices, directly or via remote connections. The computer processing system may be connected or coupled to one or more other processing systems such as a server, other remote computer processing system, network storage devices, via any one or more of a local Ethernet, WAN connection, Internet, etc. or via any other networking methodologies that connect different computing systems and allow them to communicate with one another. The various functionalities and modules of the systems and methods of the present disclosure may be implemented or carried out distributedly on different processing systems or on any single platform, for instance, accessing data stored locally or distributedly on the network.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements, if any, in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","Various aspects of the present disclosure may be embodied as a program, software, or computer instructions embodied in a computer or machine usable or readable medium, which causes the computer or machine to perform the steps of the method when executed on the computer, processor, and\/or machine. A program storage device readable by a machine, tangibly embodying a program of instructions executable by the machine to perform various functionalities and methods described in the present disclosure is also provided.","The system and method of the present disclosure may be implemented and run on a general-purpose computer or special-purpose computer system. The computer system may be any type of known or will be known systems and may typically include a processor, memory device, a storage device, input\/output devices, internal buses, and\/or a communications interface for communicating with other computer systems in conjunction with communication hardware and software, etc.","The terms \u201ccomputer system\u201d and \u201ccomputer network\u201d as may be used in the present application may include a variety of combinations of fixed and\/or portable computer hardware, software, peripherals, and storage devices. The computer system may include a plurality of individual components that are networked or otherwise linked to perform collaboratively, or may include one or more stand-alone components. The hardware and software components of the computer system of the present application may include and may be included within fixed and portable devices such as desktop, laptop, and\/or server. A module may be a component of a device, software, program, or system that implements some \u201cfunctionality\u201d, which can be embodied as software, hardware, firmware, electronic circuitry, or etc.","The embodiments described above are illustrative examples and it should not be construed that the present invention is limited to these particular embodiments. Thus, various changes and modifications may be effected by one skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 5a","FIG.5b"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
