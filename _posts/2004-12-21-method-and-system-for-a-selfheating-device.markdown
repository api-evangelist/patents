---
title: Method and system for a self-heating device
abstract: A self-healing device is provided in which changes made between the time that an infection resulting from an attack on the device was detected and an earlier point in time to which the device is capable of being restored may be recovered based, at least in part, on what kinds of changes were made, whether the changes were bona fide or malware induced, whether the changes were made after the time that the infection likely occurred, and whether new software was installed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07624443&OS=07624443&RS=07624443
owner: Microsoft Corporation
number: 07624443
owner_city: Redmond
owner_country: US
publication_date: 20041221
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is related to concurrently filed nonprovisional U.S. patent application Ser. No. 11\/019,094, entitled \u201cCOMPUTER SECURITY MANAGEMENT, SUCH AS IN A VIRTUAL MACHINE OR HARDENED OPERATING SYSTEM,\u201d which is assigned to the same assignee as this application.","The present invention relates to computing devices and more particularly to recovering and restoring computing devices affected by malware.","Current anti-virus technology is designed to quarantine or disinfect files and data damaged or destroyed by a malicious software attack, such as a virus or worm, generally referred to herein as malware. However, reversing the damage requires knowledge about the malware that was used in the attack, such as the type of damage caused by a specific virus and instructions to reverse the damage. Obtaining such knowledge is a labor-intensive process, as anti-virus researchers must reverse engineer the specific virus and develop the instructions to reverse the damage, i.e., a signature to identify and remove the malware must be developed. Consequently, there is often a delay in obtaining the signatures necessary to repair the files and data affected by the attack. Moreover, the resulting repair may not cover variants of the malware, which require obtaining updated signatures. This is especially problematic, since the devices under attack are frequently personal computers of consumers that have not installed anti-virus software, or who have allowed their anti-virus subscriptions to lapse and, therefore, do not have updated signatures.","Malware sometimes opens a \u201cback door\u201d into the device under attack that can be exploited by other malware to further compromise the device. Because it is not always possible to know what other malware exploited the back door and installed itself, the device may be in an indeterminate state of infection, and the damage may not be easily repaired using signature-based removal.","Malware can also leave the device in a state in which the operating system files are no longer intact. This requires a recovery step to replace the damaged operating system files before attempting to repair the remaining damage.","In some cases, the damage caused by malware may be irreparable. For example, malware that propagates via file infectors can damage executables or user data in a non-reversible way, leaving the files infected or disabled. Malware can also maliciously delete files which existing anti-virus technology cannot restore.","These problems coupled with the speed with which malware can infect massive numbers of devices before being detected, as well as the prevalence of malware that can infiltrate process in such a way as to bypass existing anti-virus defenses, presents numerous challenges in defending against malware attacks.","The foregoing problems with the prior state of the art are overcome by the principles of the present invention, which is directed toward methods, systems, computer program products, and data structures for recovering from a malware attack.","According to one aspect of the invention, a device is analyzed to determine whether any changes were made between a time that an infection resulting from an attack was detected and an earlier point in time to which the device may be capable of being restored. When no changes were made, the state of the device may be restored to the earlier point in time. When changes were made, the state of the device may be restored based at least in part on whether the changes were made after the time that the infection is estimated to have occurred. The state of the device may be further restored based on what kinds of changes were made, whether the changes were bona fide or malware induced, and whether new software was installed.","According to one other aspect of the invention, evidence that may indicate a presence of infection is uncovered from changes in the state of the device. The evidence may be uncovered from information parsed and\/or aggregated from a change journal maintained for a file system used by the device. The evidence may also be uncovered from examining differences between archived and live data stored on the device, including differences between the device's disk states at different points in time. The evidence may include evidence that indicates the time that the infection actually or likely occurred. The evidence that indicates the time that the infection actually or likely occurred may be analyzed to determine an estimate of the actual time that the infection occurred.","According to one other aspect of the invention, an earlier point in time to which the device may be capable of being restored, referred to as a restore point, may be determined from the device's available disk state(s) saved at a corresponding earlier point in time. The available saved disk state may be evaluated for trustworthiness via a disk state interface. The disk state interface may operate in conjunction with one or more malware providers to evaluate the trustworthiness of a disk state for, among other uses, recovering from a malware attack. The evaluation of trustworthiness may include grading the disk state in accordance with a grading scheme, the grading scheme indicating the presence or absence of infection, or whether the presence or absence of infection is unknown.","According to yet another aspect of the invention, the device is processed to identify changes made since time that the infection is estimated to have occurred. The changes may include additions, modifications, and deletions of files and other data, and may include changes that are bona fide or malware induced. The files and other data include, but are not limited to, operating system files and\/or other system data, including registry entries, as well as user files and\/or other user data. Changes that are temporary may be excluded.","According to still another aspect of the invention, the device is further processed to determine whether new software was installed since a restore point. When no new software was installed, the device may be recovered, at least in part, by restoring the state of the operating system files and\/or other system data, including registry entries, to the restore point.","According to still another aspect of the invention, the device may be recovered by selectively recovering changes that were made after the time that the infection is estimated to have occurred, including selectively recovering changes based on user confirmation. The device may be further recovered by selectively recovering changes from a saved disk state corresponding to a restore point based on the trustworthiness of the saved disk state.","According to one other aspect of the invention, the changes may be presented in a user interface to facilitate recovering the device, including prompting the device user to confirm which changes to recover and\/or how to recover them, and further including presenting the device user with the trustworthiness of the saved disk state from which changes may be recovered.","The following discussion is intended to provide a brief, general description of a computing system suitable for implementing various features of the invention. The computing system will be described in the general context of a personal computer usable in a distributed computing environment, in which complementary tasks may be performed by remote computing devices linked together through a communication network. However, those skilled in the art will appreciate that the invention may be practiced with many other computer system configurations. For example, the invention may be practiced with a personal computer operating in a standalone environment, or with multiprocessor systems, minicomputers, mainframe computers, and the like. In addition to the conventional computer systems described above, those skilled in the art will recognize that the invention may be practiced on other kinds of computing devices including laptop computers, tablet computers, personal digital assistants (PDAs), or any device upon which computer software or other digital content is installed.","For the sake of convenience, much of the description of the computing system suitable for implementing various features of the invention may include references to the Windows NT operating system and File System (NTFS) used to store and retrieve files residing on a storage volume. However, those skilled in the art will recognize that those references are only illustrative and do not serve to limit the general application of the invention. For example, the invention may be practiced in the context of other operating systems and file systems, such as the file allocation table (FAT) and the OS\/2 High Performance File System (HPFS) used in other versions of the Windows operating system, or the LINUX operating system and associated file system.","Certain aspects of the invention may be described in terms of programs executed or accessed by an operating system in conjunction with a personal computer. However, those skilled in the art will recognize that those aspects also may be implemented in combination with various other types of program modules or data structures. Generally, program modules and data structures include routines, subroutines, programs, subprograms, methods, interfaces, processes, procedures, functions, components, schema, etc., that perform particular tasks or implement particular abstract data types.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","100","114","126","120","134","114","114","120","126","120"]},"The evidence of the attack, as well as the estimate of the time of infection, may be based on information gleaned from one or more sources  on the device, including but not limited to, the saved disk state(s) , live data , and a change journal  generated by a file system operating on the device. In one embodiment, the information is parsed and aggregated by a state change parser\/aggregator module  that uncovers evidence that may indicate a presence of infection from state changes and other system audit information.","For example, in one embodiment, the state change journal  may be implemented as Windows NT file system (\u201cNTFS\u201d) change journal. As files, directories, and other NTFS objects are added, deleted, and modified, NTFS enters change journal records in streams, one for each volume on the device. Each record indicates the type of change and the object changed. The offset from the beginning of the stream for a particular record is called the update sequence number (USN) for the particular record. New records are appended to the end of the stream, after which the file system updates a master file table (\u201cMFT\u201d) entry with the last USN value for the changed file or directory.","In one embodiment, the saved disk state(s)  from which the device may be restored and data recovered may be point-in-time copies of a volume of data automatically provided by an archival process  such as the Windows Volume Shadow Copy Services (\u201cVSS\u201d), also referred to as shadow copies. However, it is understood that other means for saving disk states in a device may be employed without departing from the scope of the claims that follow, as long as the disk states are sufficiently trustworthy for the purpose of restoring a device and\/or recovering data. For example, in one embodiment the saved disk state(s)  may be generated by an archival process that generates snapshots of data on the device automatically or on demand, or obtained from disk states preserved in a volume for which a mirrored plex is retained, or from data that has been replicated using a separate storage device or subsystem.","In one embodiment, the state change parser\/aggregator module  parses the information in the change journal  or examines the saved disk state(s)  to uncover evidence that may indicate the actual time of an infection. In this manner, the state change parser\/aggregator module  may provide the recovery analyzer  with sufficient information to enable the analyzer to at least determine an estimate of the actual time of infection, i.e., to determine the likely time of infection. It should be understood that other sources of system audit information besides the change journal  and the saved disk state(s)  could be used in a similar manner to uncover evidence and determine the likely time of infection. For example, process audit logs that pinpoint process creation times and other logged events from the device's management console output logs may also be used, as long as the evidence that is uncovered is sufficient to determine the likely time of infection with a substantial degree of specificity. In some instances, the evidence may even be sufficient to determine the actual time of infection. Accordingly, in the description that follows, references to determining the likely time of infection may be understood to include determining the actual time of infection should sufficient evidence be uncovered.","In one embodiment, once the likely time of infection has been determined, the recovery process  may be initiated to begin the recovery from the malware attack in accordance with the present invention. Alternatively, the analyzer  may instead initiate a classic anti-virus disinfection process  in those situations where the triggering event warrants conventional disinfection of the device, e.g., where the anti-virus signature indicates that the malware is relatively simple and disinfection is well-defined.","In a typical embodiment, the recovery process  may be split into two processes, a system restore process  that performs a system rollback to recover system files, and a user data rollback to recover user files. The recovery process  may initiate one or both processes  and  to restore the system and\/or selectively recover data on the device using saved disk state(s)  made prior to the likely time of infection.","In one embodiment the recovery process  is performed in conjunction with a user interface as will be described in further detail in . The user interface facilitates confirmation of the recovery procedures by the device's user.","The operation of the recovery procedures embodied in the recovery analyzer  and recovery process  may be triggered by one or more infection detectors . In one embodiment, the infection detectors  comprise at least one of a behavior trigger engine  and an anti-virus trigger engine . The infection detectors  may be adapted to use minimal signature and\/or other detection heuristics  and signature updates  to detect an event that triggers the operation of the recovery procedures. The event typically signals possible or actual damage to the device of the type that correlates to damage caused by a known virus or other type of malware, e.g., an event that matches a signature. However, the event may also include the discovery of other types of suspect behavior or information on the device that is not signature-based, but that indicates the presence of malware. For example, to reduce reliance on anti-virus signature definition, the minimal signature and\/or other detection heuristics  may include, among others, the occurrence of unusual disk or network activity, or the presence of suspicious data. Alternatively, or in addition, the operation of the recovery analyzer  and recovery process  may be triggered manually through a manual trigger .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["200","100","204","202","218","204","204","204","204","204","206","204","208","204","210","204","212"],"sub":["restore","infection","detection","recovery","restore","infection","detection","recovery"]},"Continuing with reference to , at process block , the system's analyzer  analyzes the device to determine an estimate of the actual time of infection, t, B, i.e., the likely time of infection, typically by using the services of a state change parser\/aggregator , as described previously with reference to . In some cases, the system's analyzer  may be able to determine the actual time of infection, t, B, and not just an estimate. In the illustrated scenario, the likely time of infection, or, the actual time of infection, t, B, as the case may be, together with the pre-infection disk states, e.g. the available disk states saved at time tA, are input to the recovery process  to determine whether the device's operating system and user data may be recovered. In some cases, a system restore process  is used to restore the device to the state it was in prior to the likely or actual time of infection t, B, using the previously saved disk states, as indicated at reference numeral . Alternatively, or in addition, a user rollback process  is used to selectively roll back the affected files or other data on the device to the state they were in prior to the likely or actual time of infection t, B, using the previously saved disk states, as indicated at reference numeral .","In a typical scenario, there may be several saved disk states tA from which the device's operating system and user data may be recovered using the system restore process  and\/or user rollback process . However, not all of the available saved disk states tA may be trustworthy. For example, in some devices, the operating system will save disk states by taking shadow copies on a regular basis in anticipation that the shadow copies will be relied upon from time to time by one or more system components and\/or other third party applications. The shadow copies typically persist across the lifecycle of a virus\/malware infection and subsequent disinfection. Given their read-only nature, the shadow copies may themselves be infected, and not \u201ccleanable.\u201d","Since an infected disk state may be persisted in a shadow copy over a long period of time, it may be prudent for applications that rely on shadow copies, such as the system restore  and user rollback processes , to obtain verification of a shadow copy's trustworthiness. The level of trustworthiness may vary depending on the type of use. For example, when performing a system restore, the shadow copy may or may not be held to a higher standard of trustworthiness than when performing a single file (e.g., user data) restore. Accordingly, in one embodiment the system restore  and user rollback processes  may obtain verification of the trustworthiness one or more saved disk states tA from which the device's operating system and user data may be recovered as will be described in further detail below with reference to .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 1"],"b":["100","300","302","100","114","304","104","102","300","126","300","128"]},"In a typical embodiment, an alternate and potentially more effective way for the client device  to recover from the attack (and often before the attack can be propagated to other devices connected to the device ) may be to use the rollback and recovery process  instead of attempting a classic disinfection. Using the likely time of infection, as determined by the analyzer , (or the actual time of infection t, B, as the case may be) the rollback recovery process  uses pre-infection saved disk state(s)  of files and data that may have been affected by the malware attack to provide a user with options for recovering their device. The options may be presented to the user as part of a system restore process  and a user data rollback process , each of which may use a rollback and recovery user interface  to receive a user input  that enables the selection and confirmation of the options. Examples of the user interfaces will be described and shown in further detail with reference to  and . In one embodiment, the options that may be presented to the user as part of a system restore process  and a user data rollback process , may depend on the trustworthiness of the pre-infection saved disk state(s)  of files and data that may have been affected by the malware attack. In a typical embodiment, the trustworthiness of the pre-infection saved disk state(s)  may be determined as described in detail with reference to .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 4","FIG. 1"],"b":["130","132","400","404","402","306","130","132","204","404","412","406","204","404","204"],"sub":["restore ","restore ","restore "]},"In one embodiment, the query  includes an indication of the intended use of the saved disk state, should it be determined to be trustworthy. The intended use may include such uses as restoring a system from the disk state, restoring a single file, backing up a system, backing up a single file, and the like. In some cases, the intended use may affect the determination of whether the saved disk state is trustworthy. For example, as noted previously, when the intended use is to restore a system, the required level of trustworthiness may be more stringent than when the intended use is to restore a single user file.","As a default action, should anti-virus providers  be unavailable or unable to determine the trustworthiness, the disk state interface  may attempt to determine the general trustworthiness of the disk state on its own. Once the trustworthiness has been determined, the disk state interface aggregates the results of the query , if applicable, and returns the result to the requester, e.g., the system restore process  or the user data rollback process . The requester can then determine whether to proceed with the intended use of the saved disk state.","Continuing with reference to , in one embodiment the trustworthiness of a disk state is graded in accordance with a grading scheme. For example, as illustrated in , the determination of the trustworthiness of one or more of the available disk states  may result in a corresponding graded disk state . The system restore  or user data rollback process  may use the graded disk state  to present the options to the user for restoring their device or recovering their files in the user interface  previously described with reference to .","In one embodiment, the grading scheme used to grade the saved disk state may comprise a color scheme. For example, a color scheme uses a particular color to visually represent a particular level of trustworthiness, e.g., RED represents an infected disk state, YELLOW represents an unknown disk state, and GREEN represents a disk state that is not infected, i.e., a \u201cpre-infected\u201d disk state. Of course, it is understood that a color scheme is just one example of a grading scheme, and that other grading schemes may be employed in the present invention without departing from the scope of the claims that follow. For example, certain icons or numbers may be used to represent the levels of trustworthiness instead of colors.","In one embodiment, the system restore  or user data rollback  processes may present the grading scheme representing the levels of trustworthiness of the saved disk state to a user in the user interface . The colors are used to guide the user in making a decision whether to proceed with restoring their system or recovering their files from the saved disk state. For example, a user may decide to forego a particular system restore option when the available disk state(s) from which the restoration would be performed is depicted in the user interface  as infected, unknown, or otherwise less than trustworthy. On the other hand, the user may decide to chance a particular user data recovery option when the available disk state from which the recovery would be performed is depicted in the user interface  as unknown.","It should be noted that other types of components of a device  may invoke the disk state interface  for purposes other than to restore the system or to recover user data. For example, there may be other types of disk state clients , such as applications to view previous versions or backups of system or user data, or applications to create backup data that may be interested in the trustworthiness of the disk states with which they are interacting.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 5","b":["500","502","114"],"sub":["detection","restore","restore ","infection"]},"In a typical embodiment, when there has been no software installation activity, then processing continues at decision block A, in which the recovery analyzer  determines whether there has been any user data activity within the same timeframe. In those cases where there has been user data activity but no software installation activity, then a method for recovering the device is performed as described in further detail with reference to . Otherwise, at decision block B, in those cases where there has been both software installation and user data activity, then a method for recovering the device is performed as described in further detail with reference to .","Continuing with reference to , in one embodiment, when there has been no software or user data activity, the user of the device may be given the option, described at process block , to perform a full disk revert. A full disk revert may be achieved by reconfiguring a volume on the device to a state that existed at a given point prior to the time of infection, t, using, for example, the available pre-infection saved disk state(s)  to overwrite live data . Since a full disk revert may destroy user data that was created or modified after the time the device was infected, this option may not always be acceptable to the user.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 6","FIG. 1"],"b":["600","02","130"],"sub":["restore","restore ","infection"]},"At decision block , in those cases where the user data activity includes the creation of new files after the time of infection, t, the user is given the option of deleting those new files. For example, at decision block , a user data rollback process , first described with reference to , may employ a user interface process . The user interface process , first described with reference to , is employed to prompt the user to provide user confirmation  prior to deleting the new files, as described in process block .","At decision block , in those cases where the user data activity includes the modification of existing files after the time of infection, t, the device determines whether the modifications were, at least in part, attributable to the malware attack, or only to the user. At process block , the device may automatically restore the state of the malware-affected files prior to the infection. For example, the user data rollback process , first described with reference to , may be employed to automatically restore the state of the malware-affected user files to t. In a typical embodiment, tmay be the most recent time prior to the likely time of infection, t, for which a saved disk state of the affected user files and other data are available.","At decision block , in those cases where the device determines that the modifications were only attributable to the user, then the user is given the option to restore the files. For example, at decision block , the user data rollback process  may employ the user interface process  to prompt the user to provide user confirmation  prior to restoring those user files, as described in process block .","Once the affected system and user files have been automatically or selectively restored, and the device has recovered from the malware attack, the process ends at termination block . In this manner, the device may be able to recover from a malware attack more quickly, and without unnecessary disruption of the user's activity than is typically possible using conventional malware disinfection.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 7","FIG. 6","FIG. 6"],"b":["700","702","310","704"]},"Continuing with reference to , in those cases where the user does not want to have to reinstall the software, processing continues to determine whether the state of some system files may be recovered in a way that will reduce the impact on software installation activity that occurred after the time of the last available point of restoration, t. For example, at process block , the system restore process  may be employed to compare the disk state saved at the time of infection, t, with the disk state saved at the time that the malware attack was first detected, t. Based on that comparison, at decision block , the system restore process  may determine whether the changes uncovered in the comparison were likely the result of bona fide changes to files, or were likely malware induced. At process block , in those cases where the changes were likely malware induced, the system restore process  may automatically restore only certain files and data, such as certain system files, but no registry entries. In those cases where the changes were likely bona fide changes, then the system restore process  may leave the files as they are.","In a typical embodiment, once the malware induced changes have been removed by restoring the affected files to the state they were in at the time of the most recent available restoration point, t, then processing may branch to  at entry point \u201cB.\u201d With reference to , processing continues at entry point \u201cB,\u201d where the user data restoration and selective recovery of the device may proceed at decision block  in the same manner as previously described.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIGS. 8A-8C","FIGS. 1-7","FIG. 8A","FIG. 3"],"b":"310"},"In the illustrated example, the user is informed that the recovery of their computer will proceed in two steps. First, the user is informed that the recovery process will restore the operating system files and applications to their pre-infection states, as previously described with reference to the system restore process . Then, the user is informed that the recovery process will present the user with an inventory of user data files that have changed since the attack, as previously described with reference to the user data rollback process . The user is further informed that the recovery process will provide the user with the opportunity to copy the archived versions from a backup, e.g., from a saved disk state, to the main folders, e.g., to live data, as will be further described with reference to . By interacting with the command buttons, e.g., the \u201cNEXT\u201d command button, the user can step through the wizard to authorize and confirm the recovery of all or selected files and other data on their computer.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIGS. 8B and 8C","FIGS. 9A-9E"],"b":["130","132"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIGS. 9A-9E","FIGS. 1-6","FIG. 9A","FIG. 3"],"b":"310"},"In the portion of the example interface illustrated in , the user is provided with option buttons that may be used to select the option of recovering all of the files that were deleted or changed since the likely time of infection, t, or, alternatively, the option of recovering selected ones of the files that were deleted or changed. By interacting with the option and command buttons, e.g., the \u201cNEXT\u201d command button, the user can step through the wizard to recover all or selected files and other data on their computer.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 9D","FIG. 9E"],"sub":"infection","b":"132"},"While numerous embodiments of the invention have been illustrated and described, it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention. For example, in one embodiment of the present invention, the functionality of the various components of the system  for recovering from a malware attack may be implemented in different combinations of processes, programs, interfaces, and repositories, and may be distributed across one or more computing devices. For example, some of the functionality of the system , such as the infection detector process , may be implemented remotely in a web service to which the client computing device  is subscribed, while other functions, such as the state change parser\/aggregator , may be implemented locally. It will be further appreciated that although the embodiments of the invention have been described in the context of recovering from an infection caused by a malware attack, the methods and systems may also be applied to reverse the effects of contamination caused by the presence of unwanted software, such as performance degradation due to spyware or adware."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same become better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIGS. 8A-8C","FIGS. 1-7"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIGS. 9A-9E","FIGS. 1-7"]}]},"DETDESC":[{},{}]}
