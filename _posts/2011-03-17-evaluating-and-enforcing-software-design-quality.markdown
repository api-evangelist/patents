---
title: Evaluating and enforcing software design quality
abstract: Evaluation and enforcement of software design quality, in which a system applies design quality rules to a design of a software application to detect violations and provides output describing one or more violations of the design quality rules detected. Based on the output, the system receives user input to address the one or more violations of the design quality rules and, subsequent to receiving the user input, evaluates code developed for the software application for violations of the design quality rules to assess quality of the code being developed for the software application based on the design of the software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839211&OS=08839211&RS=08839211
owner: Accenture Global Services Limited
number: 08839211
owner_city: Dublin
owner_country: IE
publication_date: 20110317
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of priority to Indian Patent Application No. 716\/CHE\/2010, filed Mar. 18, 2010, and Indian Patent Application No. 2959\/CHE\/2010, filed Oct. 6, 2010, each of which is incorporated herein by reference in its entirety.","The present disclosure generally relates to evaluating and enforcing software design quality.","Applications may provide a modeling and development environment that leverages the Unified Modeling Language (UML) for designing architecture for software applications and web services. The applications may include capabilities focused on architectural code analysis and model-driven development with the UML for creating resilient applications and web services.","In one aspect, a system includes at least one computer and at least one computer-readable medium coupled to the at least one computer having instructions stored thereon which, when executed by the at least one computer, causes the at least one computer to perform operations. The operations include accessing a design of a software application prior to development of code for the software application and accessing design quality rules that are defined to evaluate quality of designs of software applications. The operations also include applying the accessed design quality rules to the accessed design of the software application to detect violations of the accessed design quality rules and providing output describing one or more violations of the accessed design quality rules detected. The operations further include, based on the output, receiving user input to address the one or more violations of the accessed design quality rules and, subsequent to receiving the user input to address the one or more violations of the accessed design quality rules, evaluating code developed for the software application for violations of the accessed design quality rules to assess quality of the code being developed for the software application based on the design of the software application.","Implementations may include one or more of the following features. For example, the operations may include obtaining a recovered software design by reverse engineering the code developed for the software application and applying the accessed design quality rules to the recovered software design to detect violations of the accessed design quality rules. In this example, the operations may include comparing the recovered software design with a version of the design of the software application stored after receiving the user input to address the one or more violations of the accessed design quality rules and, based on comparison results, detecting inconsistencies between the recovered software design and the version of the design of the software application stored after receiving the user input to address the one or more violations of the accessed design quality rules. Output may be provided that describes one or more inconsistencies between the recovered software design and the version of the design of the software application stored after receiving the user input to address the one or more violations of the accessed design quality rules.","In some implementations, the operations may include receiving user input defining a new design quality rule to apply to the accessed design of the software application and applying the new design quality rule to the accessed design of the software application to detect whether the accessed design of the software application violates the new design quality rule. The operations also may include receiving user input defining prioritization of the accessed design quality rules and applying the accessed design quality rules to the accessed design of the software application based on the defined prioritization of the accessed design quality rules.","The operations further may include receiving user input defining specific applicability criteria of the accessed design quality rules for the software application, identifying a subset of the accessed design quality rules to apply to the accessed design of the software application based on the defined specific applicability criteria, and applying the subset of the accessed design quality rules to the accessed design of the software application. In addition, the operations may include receiving user input defining exclusion criteria of the accessed design quality rules for the software application, identifying a subset of the accessed design quality rules to apply to the accessed design of the software application based on the exclusion criteria, and applying the subset of the accessed design quality rules to the accessed design of the software application.","In some examples, the operations may include initializing a violation list for the accessed design of the software application and, for each rule in the accessed design quality rules, identifying a type of design element on which the rule is applied and identifying design elements of the identified type in the accessed design of the software application. For each identified design element, the operations may include applying the rule on the identified design element, determining whether the rule has been violated by the identified design element based on applying the rule on the identified design element, and, conditioned on a determination that the rule has been violated by the identified design element, adding a violation to the violation list based on the rule and the identified design element.","For each identified design element, it may be determined whether the identified design element has been identified to be excluded from design quality analysis and applying the rule on the identified design element and determining whether the rule has been violated are conditioned on a determination that the identified design element has not been identified to be excluded from design quality analysis. In addition, for each identified design element, it may be determined whether the rule has been applied on the identified design element and applying the rule on the identified design element and determining whether the rule has been violated are conditioned on a determination that the rule has not been applied on the identified design element.","In some implementations, the operations may include accessing, from a database, help information related to a detected violation of the accessed design quality rules, generating a context specific help message for the detected violation of the accessed design quality rules based on the accessed help information, and providing output based on the generated context specific help message for the detected violation. The operations also may include accessing, from a database, refactoring information related to a detected violation of the accessed design quality rules, generating a context specific refactoring suggestion for the detected violation of the accessed design quality rules based on the accessed refactoring information, and providing output based on the generated context specific refactoring suggestion for the detected violation. The generated context specific refactoring suggestion may describe a suggestion for correcting the detected violation of the accessed design quality rules. The operations may include receiving user input that updates the accessed design of the software application to correct a detected violation of the accessed design quality rules.","In some examples, the operations may include receiving user input to ignore a detected violation of the accessed design quality rules. In these examples, the operations may include requiring user input of a rationale for ignoring the detected violation to allow the detected violation to be ignored, receiving user input describing the rationale for ignoring the detected violation, and recording the rationale for ignoring the detected violation when ignoring the detected violation. Further, in these examples, the operations may include adding, to an activity log, an entry to indicate that the detected violation has been ignored and the rationale for ignoring the detected violation, and enabling a reviewer to review the activity log including the entry that indicates the detected violation has been ignored and the rationale for ignoring the detected violation.","In addition, the operations may include accessing a partial design of the software application and applying the accessed design quality rules to the partial design of the software application to detect violations of the accessed design quality rules. The operations also may include, subsequent to receiving the user input to address the one or more violations of the accessed design quality rules, generating an unresolved violations report that specifies at least one detected violation that has not been corrected in the design of the software application and providing the unresolved violations report to a reviewer.","In another aspect, a method includes accessing a design of a software application prior to development of code for the software application and accessing design quality rules that are defined to evaluate quality of designs of software applications. The method also includes applying the accessed design quality rules to the accessed design of the software application to detect violations of the accessed design quality rules and providing output describing one or more violations of the accessed design quality rules detected. The method further includes, based on the output, receiving user input to address the one or more violations of the accessed design quality rules and, subsequent to receiving the user input to address the one or more violations of the accessed design quality rules, evaluating code developed for the software application for violations of the accessed design quality rules to assess quality of the code being developed for the software application based on the design of the software application.","In yet another aspect, at least one computer-readable storage medium is encoded with executable instructions that, when executed by at least one processor, cause the at least one processor to perform operations. The operations include accessing a design of a software application prior to development of code for the software application and accessing design quality rules that are defined to evaluate quality of designs of software applications. The operations also include applying the accessed design quality rules to the accessed design of the software application to detect violations of the accessed design quality rules and providing output describing one or more violations of the accessed design quality rules detected. The operations further include, based on the output, receiving user input to address the one or more violations of the accessed design quality rules and, subsequent to receiving the user input to address the one or more violations of the accessed design quality rules, evaluating code developed for the software application for violations of the accessed design quality rules to assess quality of the code being developed for the software application based on the design of the software application.","In a further aspect, a system includes at least one processor and a memory coupled to the at least one processor having instructions stored thereon which, when executed by the at least one processor, causes the at least one processor to perform operations. The operations include accessing a design of a software application and accessing design quality rules associated with at least one design quality attribute. The accessed design quality rules are defined to evaluate quality of designs of software applications in terms of the at least one design quality attribute. The operations also include applying the accessed design quality rules to the accessed design of the software application to detect violations of the accessed design quality rules and accumulating, for the at least one design quality attribute, violations detected by applying the accessed design quality rules to the accessed design of the software application. The operations further include computing a design quality index for the accessed design of the software application based on the accumulated violations and providing output related to design quality of the software application based on the computed design quality index.","Implementations may include one or more of the following features. For example, the operations may include identifying a subset of design quality rules classified as pertaining to the at least one design quality attribute, applying the identified design quality rules to the accessed design of the software application to detect violations of the identified design quality rules, and accumulating all violations detected by applying the identified design quality rules to the accessed design of the software application. In another example, the operations may include accessing all design quality rules defined to evaluate quality of designs of software applications, identifying the detected violations that pertain to the at least one design quality attribute, and accumulating the identified violations that pertain to the at least one design quality attribute.","In addition, the operations may include aggregating, for the at least one design quality attribute, the detected violations across each class included in the accessed design of the software application and accumulating, for the at least one design quality attribute, the detected violations across the design of the software application using the aggregated violations for each class included in the accessed design of the software application. The operations may include counting the detected violations that pertain to the at least one design quality attribute.","In some implementations, the operations may include accessing design quality rules that pertain to multiple, different design quality attributes and accumulating, for each of the multiple, different design quality attributes, detected violations that pertain to the corresponding design quality attribute. In these implementations, the operations may include computing, for each of the multiple, different design quality attributes and based on the violations accumulated for the corresponding design quality attribute, a metric that reflects software design quality in terms of the corresponding design quality attribute and computing a design quality composite index based on the metrics computed for each of the multiple, different design quality attributes. Further, in these implementations, the operations may include accessing design quality rules that pertain to all design quality attributes evaluated by the system.","In some examples, the operations may include accessing design quality rules that pertain to a performance design quality attribute, a security design quality attribute, and a rigidity design quality attribute. In these examples, the operations may include accumulating, for the performance design quality attribute, detected violations that pertain to the performance design quality attribute, accumulating, for the security design quality attribute, detected violations that pertain to the security design quality attribute, and accumulating, for the rigidity design quality attribute, detected violations that pertain to the rigidity design quality attribute. In addition, in these examples, the operations may include computing, for the performance design quality attribute and based on the violations accumulated for the performance design quality attribute, a performance metric that reflects software design quality in terms of the performance design quality attribute, computing, for the security design quality attribute and based on the violations accumulated for the security design quality attribute, a security metric that reflects software design quality in terms of the security design quality attribute, and computing, for the rigidity design quality attribute and based on the violations accumulated for the rigidity design quality attribute, a rigidity metric that reflects software design quality in terms of the rigidity design quality attribute. The operations may include computing a design quality composite index by combining the performance metric, the security metric, and the rigidity metric.","Further, the operations may include accessing a performance weighting factor, a security weighting factor, and a rigidity weighting factor, multiplying the performance metric by the performance weighting factor to determine a performance value, multiplying the security metric by the security weighting factor to determine a security value, and multiplying the rigidity metric by the rigidity weighting factor to determine a rigidity value. The operations also may include summing the performance value, the security value, and the rigidity value to determine the design quality composite index.","In some implementations, the operations may include accessing design quality rules that pertain to a performance design quality attribute, accumulating, for the performance design quality attribute, detected violations that pertain to the performance design quality attribute, and computing a performance metric for the accessed design of the software application based on the accumulated violations that pertain to the performance design quality attribute. The performance metric may reflect software design quality in terms of performance.","In addition, the operations may include accessing design quality rules that pertain to a security design quality attribute, accumulating, for the security design quality attribute, detected violations that pertain to the security design quality attribute, and computing a security metric for the accessed design of the software application based on the accumulated violations that pertain to the security design quality attribute. The security metric may reflect software design quality in terms of security.","Further, the operations may include accessing design quality rules that pertain to a rigidity design quality attribute, accumulating, for the rigidity design quality attribute, detected violations that pertain to the rigidity design quality attribute, and computing a rigidity metric for the accessed design of the software application based on the accumulated violations that pertain to the rigidity design quality attribute. The rigidity metric may reflect software design quality in terms of how flexible the accessed design of the software application is to change.","In some examples, the operations may include accessing design quality rules that pertain to extensibility of the design of the software application, accumulating detected violations that pertain to the extensibility of the design of the software application, and computing a rigidity metric for the accessed design of the software application based on the accumulated violations that pertain to the extensibility of the design of the software application. The operations also may include accessing design quality rules that pertain to modifiability of the design of the software application, accumulating detected violations that pertain to the modifiability of the design of the software application, and computing a rigidity metric for the accessed design of the software application based on the accumulated violations that pertain to the modifiability of the design of the software application.","In some implementations, the operations may include accessing design quality rules that pertain to extensibility of the design of the software application and accessing design quality rules that pertain to modifiability of the design of the software application. In these implementations, the operations may include accumulating detected violations that pertain to the extensibility of the design of the software application and accumulating detected violations that pertain to the modifiability of the design of the software application. Further, in these implementations, the operations may include computing an extensibility metric for the accessed design of the software application based on the accumulated violations that pertain to the extensibility of the design of the software application, computing a modifiability metric for the accessed design of the software application based on the accumulated violations that pertain to the modifiability of the design of the software application, and combining the extensibility metric and the modifiability metric.","In some examples, the operations may include accessing an extensibility weighting factor and a modifiability weighting factor, multiplying the extensibility metric by the extensibility weighting factor to determine an extensibility value, and multiplying the modifiability metric by the modifiability weighting factor to determine a modifiability value. In these examples, the operations may include summing the extensibility value and the modifiability value to determine the rigidity metric.","In some implementations, the operations may include determining an effort estimation value associated with the accessed design of the software application that accounts for the computed rigidity metric. In these implementations, the operations may include determining an effort estimation value for a change to the accessed design of the software application, increasing the determined effort estimation value based on the computed rigidity metric, and providing output related to the change to the accessed design of the software application based on the increased effort estimation value.","In yet another aspect, a method includes accessing a design of a software application and accessing design quality rules associated with at least one design quality attribute. The accessed design quality rules are defined to evaluate quality of designs of software applications in terms of the at least one design quality attribute. The method also includes applying the accessed design quality rules to the accessed design of the software application to detect violations of the accessed design quality rules and accumulating, for the at least one design quality attribute, violations detected by applying the accessed design quality rules to the accessed design of the software application. The method further includes computing a design quality index for the software application based on the accumulated violations and providing output related to design quality of the software application based on the computed design quality index.","In another aspect, at least one computer-readable storage medium is encoded with executable instructions that, when executed by at least one processor, cause the at least one processor to perform operations. The operations include accessing a design of a software application and accessing design quality rules associated with at least one design quality attribute. The accessed design quality rules are defined to evaluate quality of designs of software applications in terms of the at least one design quality attribute. The operations also include applying the accessed design quality rules to the accessed design of the software application to detect violations of the accessed design quality rules and accumulating, for the at least one design quality attribute, violations detected by applying the accessed design quality rules to the accessed design of the software application. The operations further include computing a design quality index for the accessed design of the software application based on the accumulated violations and providing output related to design quality of the software application based on the computed design quality index.","Implementations of any of the techniques described throughout the disclosure may include a method or process, a system, or instructions stored on a computer-readable storage device. The details of particular implementations are set forth in the accompanying drawings and description below. Other features will be apparent from the following description, including the drawings, and the claims.","Like reference numbers represent corresponding parts throughout.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 1","b":["100","102","102","104"]},"As another example, a reverse engineered model may be evaluated. For example, if a UML design for a model does not exist, a UML model  may be created from code in a code repository . For example, class, interface and package information may be extracted from the code using an extractor component  and dependencies between classes, packages, and other design elements may be identified using a dependency finder component . A model creator  may create the model , using the extracted class, interface, and package information and the identified dependencies. The recovered design may be stored in the UML design repository  or in a UML model repository .","The model processor  may process an original or reverse engineered design to produce model information such as, for example, metrics, signature metadata, and annotations, which may be stored in a model information repository . Furthermore, a user  may create one or more package annotations , which may also be stored in the model information repository . Package annotations may include, for example, comments about the design of classes, packages, and other software elements.","A rules engine  may access design quality rules from a rules repository . The rules repository  may include pre-defined rules and may also include rules customized by the user  using a rule\/rule set customization component . Design quality rules may be defined to evaluate a quality of design of a software application.","The rules engine  may process the model information from model information repository , applying the rules retrieved from the rules repository  to the design to detect violations of the design quality rules. If violations of the rules are found, violations may be stored in a violations database . Violations may also be reported to the user  using a visualization and reporting component . The visualization and reporting component  may display refactoring suggestions to the user . Refactoring suggestions may be determined by a contextual refactoring component  which may provide suggestions based on information retrieved from a design quality knowledge repository .","The user  may provide user input to address one or more violations of the design quality rules. For example, the user  may provide input, using a modeling application, to update the design to correct one or more detected violations of the design quality rules. As another example, the user  may provide an input to ignore a detected violation, and may provide a rationale for why the violation can be ignored.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 2","b":["200","200","100","200","100","102","100","200"]},"When the process  begins (), the system  determines whether code exists for the model (). For example, in reference to , the model processor  may determine whether code for the model exists in the code repository .","If code does not exist for the model, the system  determines whether an original design exists (). For example, in reference to , the model processor  may determine whether an original design for the model exists in the UML design repository . The model processor  may determine that a partial design exists.","If an original design does not exist, the process  ends (). If an original design (e.g., complete or partial) exists, the system  accesses the original design (). For example, in reference to , the model processor  may access the design from the UML design repository .","The system  analyzes the accessed original design (). For example, in reference to , the model processor  may process the UML model to produce model information such as, for example, metrics, signature metadata, and annotations, which may be stored in a model information repository . A rules engine  may access design quality rules from a rules repository . The rules repository  may include pre-defined rules and may also include rules customized by the user  using a rule\/rule set customization component . The rules engine  may process the model information from the model information repository, applying the rules retrieved from the rules repository . If violations of the rules are found, violations may be stored in a violations database . Analyzing the design is described in more detail below with respect to .","If code is determined to exist (e.g., in step ), the system  reverse engineers the code to obtain a recovered design (). For example, in reference to , class, interface and package information may be extracted from code in a code repository  using an extractor component  and dependencies between classes, packages, and other design elements may be identified using a dependency finder component . A model creator  may create the model , using the extracted class, interface, and package information and the identified dependencies. The recovered design may be stored in the UML design repository  or in a UML model repository .","The system  determines whether an original design exists (). For example, in reference to , the model processor  may determine whether an original design for the model exists in the UML repository . If an original design exists, the system  accesses the original design (). For example, in reference to , the model processor  may access the design from the UML repository .","The system  accesses the recovered design regardless of whether or not an original design exists (). For example, in reference to , the model processor  may access the recovered design from the UML model repository .","The system  analyzes the original and\/or recovered design (). If both a recovered design and an original design have been accessed, the model processor may compare the recovered design to the original design to see if the recovered design deviates from the original. The model processor may analyze the recovered design and\/or the original design as described below with respect to .","Different approaches may be used to determine whether a recovered design deviates from an original design. For example, a UML diagram associated with the recovered design may be compared to a UML diagram associated with the original design. As another example, a violations report obtained from running design quality rules on the recovered design may be compared to a violations report obtained from running design quality rules on the original design. The number and type of violations associated with the recovered design may be compared to the number and type of violations of the original design. If more than a threshold number of differences are identified by such a comparison, it may be determined that the recovered design deviates from the original design.","As yet another example of identifying design deviation between an original design and a recovered design, structural metrics associated with the recovered design may be compared to structural metrics associated with the original design. Structural metrics may include, for example, the number of classes, packages, and interfaces included in a design, coupling between design entities, and metrics which indicate the amount and depth of inheritance used in the design. If the number and\/or magnitude of differences in structural metrics between the recovered design and the original design exceeds a threshold, it may be determined that the recovered design deviates from the original design.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 3","b":["300","300","100","300","100","102","100","300"]},"The system  reads a design model (). For example and in reference to , the model processor  may access a design model from the UML design repository .","The system  displays available annotations to the user (). For example, the design model may be displayed in a modeling application, and annotations included in the design may be displayed to the user in the modeling application.","The system  determines whether new annotations exist (). For example, the system  can receive a user input from the user representing a request to add a new annotation to the design.","If new annotations exist, the system  receives user input defining one or more new annotations (). For example, the user may provide details for the annotation (e.g., text comments).","The system  receives user input applying annotations to the model (). For example, the user may identify one or more software elements (e.g., classes, packages) which are associated with one or more annotations.","The system  displays design quality rules to the user (). For example, existing design quality rules may be displayed to the user in a user interface. The user interface may display the name of each rule, a scope, and an explanation. Design quality rules may be retrieved from a rule repository (e.g., repository , ).","The system  determines whether there are new design quality rules (). For example, the user may provide a user input indicating a request to add a new rule.","If there are new design quality rules, the system  receives user input defining one or more new rules (). For example, the user may provide a name for the rule, a description, a scope applicability (e.g., package, class, sequence diagram, interface), and a condition defining the rule (e.g., a condition based on one or more attributes of a software element, such as number of operations of a class or interface, number of descendants, number of classes in a package, or any other attribute).","The system  receives user input prioritizing rules (). For example, the user may use a user interface to arrange a list of rules in an order which represents the desired priority of rules (e.g., rules placed near the top of a priority list may have a higher priority than rules placed near the bottom of a priority list).","The system  receives user input specifying applicability and exclusion criteria for rule execution (). For example, the user may specify one or more rules or one or more rule types to exclude from rule execution. As another example, the user may specify one or more design elements (e.g., class, package) to exclude from evaluation.","The system  runs the rules on the model (). Running rules on the model is described in more detail below with respect to .  illustrates a process  for running rules on a software model. The operations of the process  are described generally as being performed by the system . The operations of the process  may be performed by one of the components of the system  (e.g., the model processor ) or may be performed by a combination of the components of the system . In some implementations, operations of the process  may be performed by one or more processors included in one or more electronic devices.","The system  initializes a violation list (). For example, a violations list may be represented as one or more data structures or software objects or as one or more data elements in a database system.","The system  identifies a rule (). For example, a rule may be identified from a list of rules retrieved from a rules repository (e.g., the design quality rules repository  described above with respect to ).","The system  identifies the type of design element on which the rule is to be applied (). For example, a rule may be applicable to a design element such as a class, an interface, a package, or a sequence diagram.","The system  identifies a design element of the identified type (). For example, if the design element type is a class, the system  identifies a class included in a software design.","The system  determines whether the design element is in an exclusion list for the rule (). For example, a user-specified exclusion list may exist, and user-specified design elements may be included in the exclusion list to be excluded when design quality rules are applied. If the design element is in an exclusion list, the rule is not applied to the design element.","If the design element is not in an exclusion list for the rule, the system  determines whether the rule has been applied on the design element () and, if the rule has not been applied on the design element, the system  applies the rule on the design element (). For some rules, one or more metrics associated with the rule (e.g., number of operations, number of ancestors) may be determined for the design element. If the rule has been applied on the design element, the system  does not apply the rule to the design element again.","The system  determines whether the rule is violated (). For example, one or more metrics for the design element may be compared to a threshold. For example, a \u201cgodly interface\u201d rule (e.g., rule , ) may be violated if the number of operations defined by an interface exceeds a threshold of twenty. As another example, an excessive remoting rule (e.g., rule , ) may be violated if the number of remote calls in a sequence diagram exceeds a threshold of three.","For some rules, the rule may be violated if the design element has a particular feature. For example, a private constructor found in class rule (e.g., rule , ) may be violated if a class includes a private constructor. As another example, a non-API (Application Programming Interface) method access rule (e.g., rule , ) may be violated if a class has public methods which are not accessed outside of the package of the class. As yet another example, a design-to-contract rule (e.g., rule , ) may be violated if a package has only concrete classes and no interfaces.","If the rule is violated, the system  creates a violation and adds the violation to the violation list (). For example, a violation added to the violation list may include information on the rule type, a rule priority, non-functional attributes impacted by the rule violation, and an identifier of the design element(s) which caused the rule violation.","The system  determines whether more design elements exist (). For example, if the design element type associated with the rule is class, the system  determines whether there are other classes included in the design model for which the rule has not been applied.","If more design elements exist, the system  identifies a next design element of the identified type () and repeats application of the rule to the next design element. For example, if the design element type is a class, the system  identifies a class included in the design model for which the rule has not been applied and applies the rule to the identified class.","If more design elements do not exist, the system  determines whether more rules exist (). For example, the system  may determine whether all rules retrieved from a rules repository have been applied to the design. If more rules exist, the system  repeats steps  to  using the identified rule. If no more rules exist, the system  identifies a violation in the violation list (). For example, an iterator object may be used to iterate over a collection of violation objects in a violation list. As another example, a database cursor may be used to iterate over violation database records retrieved from a database.","The system  creates generic context help using a help database (). For example, help information related to a detected violation of the accessed design quality rules may be accessed from a help database (e.g., the design quality knowledge repository  described above with respect to ). A context specific help message for the detected violation of the accessed design quality rules may be generated based on the accessed help information and the help message may be displayed to the user.","The system  creates one or more context refactoring suggestions using a refactoring database (). For example, refactoring information related to a detected violation of the accessed design quality rules may be accessed from a database (e.g., the design quality knowledge repository  described above with respect to ). A context specific refactoring suggestion for the detected violation of the accessed design quality rules may be generated based on the accessed refactoring information. The generated context specific refactoring suggestion may describe a suggestion for correcting the detected violation of the accessed design quality rules. The refactoring suggestion may be displayed to the user.","The system  determines whether to ignore the violation (). For example, the system  may determine to ignore the violation if the user indicates that they wish to ignore the violation or if the violation is of a violation type included in a user exclusion list.","If the violation is to be ignored, the system  receives rationale for deletion of the violation (). For example, a user may provide a rationale for ignoring when the user specifies that they wish to ignore the violation. The system  may require the user to provide rationale to ignore a violation, so that the rationale is captured and can be reviewed at a later date.","The system  adds an entry to an activity log (). For example, an entry may be added to an activity log to indicate that the detected violation has been ignored and the rationale for ignoring the detected violation.","The system  determines whether more violations exist (). For example, the system  may determine whether there are unprocessed violations in a violations list. If more violations exist, the system  identifies a next violation in the violation list () and repeats the steps  to  for the identified violation.","Returning to , the system  receives user input to refactor the model (). For example, a user input may be received to address one or more violations of the accessed design quality rules by updating the design.","The system  determines whether the user is satisfied with the analysis (). For example, a design reviewer can indicate whether the design is acceptable. If the user is satisfied with the analysis, the system  generates a report (). For example, a design review questions report may be generated. As another example, an unresolved violations report may be generated, such as input for a review. If the user is not satisfied with the analysis, the system  reruns the rules on the model (), possibly after the model is refactored.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 5","b":["500","502","504","506","508","510","502","502"]},"Technology-based rules  may include rules pertaining to best practices in using specific technologies or specific frameworks, such as a particular web technology or e-commerce technology framework. As another example, technology-based rules  may include rules which can be related to improving performance in a particular environment. For example, a technology-based rule for a networked environment may be based on limiting remote calls between system components.","Metric-based rules  may include rules which are primarily or solely based on metrics derived from software code or a software design model (e.g., UML model). A metric-based rule may be used to assess structural quality of a design. A rule may be based on one or more composite metrics (e.g., a metric based on one or more other metrics). One or more composite metrics may be used as a basis for obtaining goals such as component testability. For example, a testability rule may be based on one or more metrics which indicate the number of public operations in a class or package. A metric-based rule may be based on custom thresholds. For instance, in some environments, a threshold for a maximum recommended depth of an inheritance tree may be two and, in other environments, a maximum recommended depth of an inheritance tree may be three.","Pattern-based rules  may be based on higher levels of abstraction than metric-based rules . Pattern based rules  may include, for example, rules based on \u201cGang of Four\u201d patterns (e.g., design patterns described in a seminal \u201cDesign Patterns: Elements of Reusable Object-Oriented Software\u201d book written by Gamma, Helm, Johnson, and Vlissides), or other patterns suggested in other literature, or on custom patterns specified by the user. Patterns may be identified, for example, by analyzing dependencies between design elements or by analyzing signatures of design elements. Example pattern-based rules  include design-to-contract and program-to-interface patterns (described in more detail below).","Architecture-based rules  may include rules which have a greater abstraction than pattern-based rules . For example, architecture-based rules  may be based on the structure of architecture components and the relationship between architecture components. Architecture-based rules  may include rules based on pre-defined structure and relationship guidelines and rules based on organization-specified or user-specified guidelines. Architecture-based rules  may be templatized and may be based on other structural and relationship-based rules included in a rule knowledge base.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIG. 6","FIG. 1"],"b":["600","602","630","600","601","602","630","602","630","122","602","604","606"]},"A high-coupling, high-inheritance, and high dependency out rule  may be violated, for example, if a class has many inbound dependencies and a high level of inheritance (e.g., as compared to a threshold). Such a class may represent a \u201cbrittle\u201d class and, if such a class fails (e.g., in testing), dependent classes may be affected. A non API method access rule  may be violated, for example, if a class has public methods but the class is not accessed by other classes outside of the package of the class. Ideally, a class has public methods only if the particular functionality exposed by the public methods is accessed by other classes (especially classes from outside the class's package). If a class has public methods which are not accessed by classes in other packages, the exposure of the public methods in a class may eventually lead to erroneous usage of functionality and break the API of the system.","A private constructor found in class rule  may be violated, for example, if a private constructor is found inside of a class definition. Private constructors may be used for preventing class instantiation. Private constructors are, however, not the default for some languages. Therefore, private constructors may be marked for further evaluation. A \u201cgodly interface\u201d rule  may be violated, for example, if an interface has a large amount of behavior (e.g., as compared to a threshold). An interface with a large amount of behavior may be considered for refactoring. Since each client of an interface depends on the exposed class interface, there is an inadvertent coupling between each of the clients of a class. If one client needs additional functionality added to the single class interface, when this functionality is added to the interface, every other client may need to change to support the added functionality even though many of the classes may not need the functionality. Therefore, one change of one client class may force a change to propagate throughout the system to many client classes, which can result in time consuming code maintenance and hard to locate software bugs.","A PIF (Program to Interface Factor) rule  may be violated, for example, if a package is coupled to the rest of the system through concrete classes, rather than through interfaces. Ideally, a package is coupled only through interfaces. Using concrete classes, rather than interfaces, may lead to low-extensibility packages. A \u201cgodly package\u201d rule  may be violated, for example, if a package includes more than a threshold number of classes and\/or interfaces. A package with a relatively high number of classes and\/or interfaces may include too much functionality and, as such, may be a candidate for refactoring.","A design to contract rule  may be violated, for example, if a class-to-interface ratio for a package is either too high or too low (e.g., as compared to a threshold). For example, a package that has only classes may be absolutely concrete and may not be extensible. However, a package that has only interfaces may be absolutely abstract and may be deemed to be incorrectly labeled if it is not labeled as a framework package. A dependency inversion rule  may be violated, for example, if a low-level module depends on a high-level module. Ideally, high-level modules do not depend upon low-level modules and both high-level modules and low-level modules depend only upon abstractions. An omni-present package rule  may be violated, for example, if a package with coupling links to a large number of packages in the system (e.g., as compared to a threshold). Typically an omni-present package is a package including utility classes or core components of a system. If there are too many omni-present packages, refactoring the system may be considered.","An open-close rule  may be violated, for example, if a software entity is not open for extension and closed for modification. In general, an open-close principle can be applied to classes, modules, or functions. Being open for extension but closed for modification may prevent a change from being detrimental to the system. An excessive remoting rule  may be violated if a sequence diagram includes a high number of remote calls (e.g., as compared to a threshold). A high number of remote calls may impact performance. A factory rule  may be violated, for example, if a class has multiple constructors. Having multiple constructors for a class may make it hard to decide which constructor to call during development. It may be useful to have all classes in a class hierarchy have nonpublic constructors and to create a factory class which clients can use to directly instantiate classes that reside in one package and implement a common interface.","Other rules may be violated. For example, an excessive coupling rule may be violated if there is excessive coupling between classes. A lack of stable abstraction rule may be violated if the abstraction of a package is not in proportion to its stability (e.g., if stable packages are not abstract or instable packages are not concrete). A stable dependency rule may be violated if a package depends on another, less-stable package. A \u201cfeature-envy\u201d rule may be violated if a method refers to data of other classes more than data of its own class. A \u201clong-method\u201d rule may be violated if a method includes more than a threshold number of lines of code (long methods may be hard to understand, debug, and reuse). A data-class rule may be violated (triggering further inquiry) if a class has more than a threshold number of public accessor methods.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 7","FIG. 5"],"b":["700","702","744","700","701","702","744","702","744","510"]},"A NOC (Number of Children) metric  indicates the number of children (e.g., UML generalization) of a class. An \u201cOpsInh\u201d (Operations Inherited) metric  indicates the number of inherited operations of a class while an \u201cAttrInh\u201d (Attributes Inherited) metric  indicates the number of inherited attributes of a class. A \u201cDIT\u201d (Depth of Inheritance Tree) metric  indicates the depth of a class in an inheritance hierarchy and may indicate the longest path from the class to the root of an inheritance tree.","A \u201cNumDesc\u201d (Number of Descendants) metric  indicates the number of descendants of a class (e.g., the number of children of a class, the number of children of the class's children, etc.). A \u201cNumAnc\u201d (Number of Ancestors) metric  indicates the number of ancestors of a class. A \u201cDep_In\u201d (Dependency Indicator) metric  indicates the number of elements which depend on a class, and may include incoming UML dependencies (e.g., dotted arrows on a UML diagram), method call or parameter type dependencies.","A \u201cNumAssEl\u201d (Number of Associated Elements) metric  indicates the number of associated elements in a same scope (e.g., namespace, package) as a class. Associations to elements in a same scope are encouraged, because they do not cross a scope boundary and contribute to cohesion within a package or namespace. Associations may include aggregations, compositions, and UML associations and may include incoming, outgoing and bidirectional associations.","A \u201cNumOps\u201d (Number of Operations) metric  indicates the number of operations in a class. For example, all operations that are explicitly modeled (e.g., overriding operations, constructors, destructors), regardless of their visibility, owner scope and abstractness, may be included. However, inherited operations might not be included.","A \u201cgetters\u201d metric  indicates the number of operations of a class which have a name starting with \u201cget\u201d, \u201cis\u201d, or \u201chas\u201d. A \u201csetters\u201d metric  indicates the number of operations of a class which have a name starting with \u201cset\u201d. A connectors metric  indicates the number of connectors owned by a class.","A \u201cNumOps\u201d (Number of Operations) metric  is similar to the NumOps metric , but indicates the number of operations for an interface rather than for a class. An \u201cAssoc\u201d (Associations) metric  indicates the number of elements an interface is associated with. A \u201cNumAnc\u201d (Number of Ancestors) metric  is similar to the NumAnc metric  but indicates the number of ancestors of an interface rather than a class. A \u201cNumIndClients\u201d (Number of Indirect Clients) metric  indicates the number of elements which implement a descendent of an interface while a \u201cNumDirClients\u201d (Number of Direct Clients) metric  indicates the number of elements directly implementing the interface.","A \u201cNumOpsCls\u201d (Number of Operations\u2014Class) metric  indicates the number of operations in the classes of a package while a \u201cNumClsRec\u201d (Number of Classes\u2014Recursive) metric  indicates the number of classes in a package and subpackages of the package. A nesting metric  indicates a nesting level of a package within a package hierarchy. A NumCls metric  indicates the number of classes in a package and a \u201cNumInterf\u201d (Number of Interfaces) metric  indicates the number of interfaces in a package.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":["FIGS. 8 to 20","FIG. 8"],"b":["800","2000","800","800","802","804","814","802","804","814","815","816","820","822","804","816","824","826","828","804"]},"Violations , , and , each also are \u201cenforce dependency inversion\u201d violations, which are applicable to classes , , and , respectively. Violation  is an excessive coupling violation applicable to the class , affects non-functional maintainability and modularity attributes, and is of medium priority. Violation  is an \u201cexcessive remote calls between classes\u201d violation and is applicable to an AccountCollaboration interaction sequence diagram (not shown). The violation  affects performance and is a severe priority violation.",{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 9","b":["900","902","904","906","908","908","908"]},"The refactoring suggestions view  may be shown, for example, if a user indicates that they wish to see refactoring suggestions for a violation (e.g., for one of the violations - described above with respect to ). For example, details  about an excessive-remote-calls violation include considerations for the designer, and refactoring hints. The refactoring suggestions view  may also include one or more refactoring examples, such as, for example, \u201cbefore and after\u201d sequence diagram examples shown in an example .",{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 10","b":["1000","1000","1000","1002","1003","1002","1004","1006","1008","1004","1006"]},"A design violations view may be integrated with the user interface . For example, a violations view tab  may be selected among other tabs  of a modeling application to display a violations view . The violations view  may be similar to the violations view  described above with respect to  and may be used to show violations found after running design quality rules on the model . For example, the user may run design quality rules on the model  by selecting a \u201ccheck design\u201d menu item  from a menu  (the user may initiate the running of design quality rules in other ways, such as by using a hotkey sequence, a toolbar button, a command button, a pull-down menu, or by some other user input action). Also, design quality rules may be run on a design using batch or other background processes which do not require user input.",{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 11","b":["1100","1102","1103","1104","1102","1106","1108","1106","1108","1102","1106","1106","1106","1110"]},"In response to the selection of the menu control , a user interface such as the user interface  illustrated in  may be displayed. The user interface  includes a help view  which includes a help description  related to the not-programming-to-interface violation . The help view  may include one or more links  to external resources (e.g., external web sites) which may include further information about the violation . The user may view refactoring suggestions related to the violation  by, for example, selecting the violation  and selecting a control such as a menu control .","In response to the selection of the menu control , a user interface such as the user interface  illustrated in  may be displayed. The user interface  includes a refactoring suggestion view  which includes a refactoring discussion  and an example which includes a refactored component , which is a refactored version of component  to correct the violation of not-programmed-to-interface. The user may use the refactoring suggestion to resolve the not-programmed-to-interface violation . After refactoring, the user may re-run the design quality rules on the design, such as by selecting a menu control .",{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 14","b":["1400","1402","1404","1406","1408","1402","1402","1410","1412","1414","1408","1416","1416","1408","1408","1408","1418"]},"In response to the selection of the menu control , a user interface such as the user interface  illustrated in  may be displayed. The user interface  includes a help view , which includes a help description  related to the excessive coupling violation . The user may view refactoring suggestions related to the violation  by, for example, selecting the violation  and selecting a control such as a menu control .","In response to the selection of the menu control , a user interface such as the user interface  illustrated in  may be displayed. The user interface  includes a refactoring suggestion view , which includes a refactoring discussion . The user may use the refactoring suggestion to resolve the excessive-coupling violation . For example, as mentioned in the refactoring discussion , to fix a problem of excessive coupling, a designer may try to redesign the class or package and reduce the number of classes with which the class is coupled. For example, a designer can select a redesign control  to return to a modeling view (e.g., modeling view  described above with respect to ) to redesign the model . As another example, the designer may ignore an excessive coupling violation if, for example, the designer believes it is fine to have a high degree of coupling for the class and if the class is still understandable and easily maintainable despite the large number of dependencies. A designer may ignore a violation, for example, by entering a rationale for ignoring in a text entry control  and selecting an ignore control . The designer may be required to enter a rationale to ignore the violation.","In addition to running rules on classes, interfaces, and packages, design quality rules may also be run on other design elements, such as sequence diagrams. For example,  illustrates a user interface , which includes a model view . The model view  includes a sequence diagram  modeling interactions between classes of a customer package  and an account package . The user may run design quality rules on the sequence diagram , for example, by selecting a menu control . Violations violating design quality rules may be shown, such as an excessive remote calls violation . The excessive remote calls violation  may result from the number of remote calls in the sequence diagram  exceeding a threshold. The excessive remote calls violation  is a severe violation which may have a significant impact on performance of the application under design. The user may learn more about the violation  by, for example, selecting the violation  and selecting a control such as a menu control .","In response to the selection of the menu control , a user interface such as the user interface  illustrated in  may be displayed. The user interface  includes a help view  which includes a help description  related to the excessive remote calls violation . The help view  may include one or more links  to external resources (e.g., external web sites) which may include further information about the violation . The user may view refactoring suggestions related to the violation  by, for example, selecting the violation  and selecting a control such as a menu control .","In response to the selection of the menu control , a user interface such as the user interface  illustrated in  may be displayed. The user interface  includes a refactoring suggestion view , which includes a refactoring discussion . The user may use the refactoring suggestion to resolve the excessive remote calls violation , such as by referring to a \u201cbefore and after\u201d sequence diagram example .","A design may be reviewed by stakeholders other than the designer. For example, a design review may be attended to, for example, by one or more subject matter experts, one or more designers, one or more developers, or one or more other project stakeholders. The user may generate a design review document by selecting a control such as menu control . In response to selecting the menu control , a user interface such as the user interface  illustrated in  may be displayed. The user interface  displays an example design review document , which includes evaluation questions . The evaluation questions  may be based on violations in the model and may be used, for example, as a basis for a design review. An XML (eXtensible Markup Language) report (not shown) of violations may also be generated.",{"@attributes":{"id":"p-0129","num":"0128"},"figref":"FIG. 21","b":["2100","2100","2101","2101","2101","2101","2101","2100","2101","100","102","100","2100"],"i":["a","b","c","d","e","c "]},"The designer creates one or more annotations () and creates a design (). For example, the designer may create a software design using a modeling application and may create software design elements, such as classes, interfaces, packages, sequence diagrams, and interactions diagrams. The designer may create one or more annotations, which describe one or more design elements, using the modeling application.","A rule and exclusion list is configured using the design tool (). For example, the designer may use an interface of the design tool to create one or more custom rules, or to add one or more predefined rules, or one or more software design elements, to one or more exclusion lists.","A partial design is analyzed using the design tool (). For example, the designer may use an interface of the design tool to run design quality rules on the design. Violations may be reported to the designer in an interface of the design tool ","The designer corrects the design (). For example, the designer may correct the design using a modeling application, based on refactoring suggestions displayed by the design tool ","The designer completes an initial design and submits the initial design for review (). For example, the initial design may be submitted for review to the design reviewer . Before submitting the design to the design reviewer , the designer may generate an unresolved violation report (), for example, using the design tool ","The design reviewer reviews the unresolved violation report () and may review other design documents, such as one or more modeling diagrams. In addition to examining specific violations, the design reviewer may consider a design quality composite index. A design quality composite index is discussed in more detail below.","If the design reviewer determines that the design is not acceptable (), the designer corrects the design () and analyzes the complete, corrected design (). For example, the designer may use an interface of the design tool to run design quality rules on the design. Violations may be reported to the designer in an interface of the design tool ","If the design reviewer determines that the design is acceptable (), a review checklist is generated (). For example, a review checklist, which may include evaluation questions such as the evaluation questions  described above with respect to , may be generated by the design tool . The developer builds the system (e.g., writes code based on the design), taking into account the generated design review checklist (). The code reviewer starts reviewing the code () according to code review guidelines.","In some situations, a reverse-engineered design may be evaluated. For example, a design may be reverse-engineered from code using the design tool (). For example, a reverse-engineered design may be evaluated to determine whether violations in the reverse-engineered design are detected or to determine whether inconsistencies exist between the original design and a reverse-engineered design based on the implemented code (e.g., to determine whether the developer built the system as designed).","The reverse-engineered design is analyzed (). For example, the designer or the developer may use an interface of the design tool to run design quality rules on the design. Analyzing the reverse-engineered design may include comparing the reverse-engineered design to the original design (e.g., the design analyzed in step ), to determine whether the reverse-engineered design deviates from the original design. As described above with respect to , different approaches may be used to determine whether the reverse-engineered design deviates from the original design. For example, a UML diagram associated with the reverse-engineered design may be compared to a UML diagram associated with the original design, structural metrics associated with the reverse-engineered design may be compared to structural metrics associated with the original design, or violations obtained from running design quality rules on the reverse-engineered design may be compared to violations obtained from running design quality rules on the original design.","In some implementations, violations may be reported in a user interface generated by the design tool . As another example, a violation report may be generated (). The code reviewer may review the violations (). If the violations are acceptable (), the process  ends (). If the violations are not acceptable (), the developer makes implementation changes (), and an updated design may be retrieved from the updated code (). The updated design is analyzed (), a violation report is generated (), and the violations are reviewed (). A similar process may repeat until the code reviewer determines that the violation report is acceptable ().",{"@attributes":{"id":"p-0141","num":"0140"},"figref":"FIG. 22","b":["2200","2200","100","2200","100","102","100","2200"]},"The system  accesses a design of a software application (). For example, in reference to , the model processor  may access the design from the UML design repository .","The system  accesses design quality rules associated with at least one design quality attribute (). For example, in reference to , the rules engine  may access design quality rules from the design quality rules repository , where the accessed design quality rules are defined to evaluate quality of designs of software applications in terms of one or more design quality attributes. The rules engine  may access, for example, all design quality rules stored in the design quality rules repository , or the rules engine may access a subset of rules stored in the design quality rules repository . The rules engine  may identify a subset of design quality rules that are classified as pertaining to the one or more accessed design quality attributes. Design quality rules may pertain, for example, to a performance design quality attribute, a security design quality attribute, a rigidity design quality attribute, or another type of design quality attribute.","The system  applies the accessed design quality rules to the accessed design of the software application to detect violations (). For example, the accessed design quality rules may be applied to the accessed design as described above with respect to . In the process  of , a design quality rule, the type of design element on which the design quality rule is to be applied, and a design element of the identified type are identified. If the design element is not in an exclusion list for the design quality rule and if the rule has not already been applied to the design element, the design quality rule is applied to the design element. If it is determined that the design quality rule is violated, a violation is added to a violation list. The design quality rule is applied to any remaining available design elements. Similar processing occurs for other design quality rules until all design quality rules have been applied.","The system  accumulates detected violations (). For example, detected violations may be stored in a violations list. The system  may accumulate all violations detected by applying the identified design quality rules. As another example, the system  may identify the detected violations that pertain to the one or more design quality attributes and may accumulate only the identified violations that pertain to the one or more design quality attributes. The system  may aggregate, for the one or more design quality attributes, the detected violations across each class included in the accessed design of the software application and the system  may accumulate, for the one or more design quality attributes, the detected violations across the design of the software application using the aggregated violations for each class included in the accessed design of the software application. The system  may count the detected violations that pertain to the one or more design quality attributes.","The system  computes a design quality index for the design of the software application based on the accumulated violations (). To define the design quality index, a number of notations are introduced below. A software system may be represented by a set of design entities Ent. Each design entity d\u03b5Ent has a type. The set of all such design entity types may be represented by \u0393 and an individual type may be represented by \u03c4\u03b5\u0393. In some implementations, \u0393={class, interface, method, package}. Further, \u03c4may denote the type of a design element d. A design quality rule set as a whole may be represented by R and an individual design quality rule by r. A design quality rule r may be applicable to one and only one design entity type \u03c4. A subset of design quality rules \u03c4(R)R may be defined as the subset of design quality rules that are applicable for a design type \u03c4. Furthermore, \u03c4may be defined to denote the design type applicable to r. Different design quality rules are applicable for different design quality attributes such as maintainability, extensibility, performance, security, rigidity, etc. Let QA be the set of design quality attributes and QARules(q) be the set of design quality rules that impacts the attribute q.","A design quality rule r models a design defect. When the design defect modeled by r is present in a design entity d, it may be defined that r(d)=true. It may be assumed that a design quality rule accurately models a design defect. A design quality rule r may be associated with a user defined importance factor \u03b1 and correspondingly, \u03b1may denote the importance factor associated with the design quality rule r.","Using the notations defined above, \u03c4(R) may be defined as the set of all possible design defects that are possible to be found in the design entity d (the design entity d may, in fact, have no design defects). A set of design quality rules Vio(d) may be defined such that Vio(d)={r|r\u03b5\u03c4(R) and r\u03b5QARules(q) and r(d)=true} which indicates the set of design quality rules applicable for the design entity d after checking the design entity d for design violations pertaining to a set of design quality attributes. A design quality index DQI(d) may be defined such that",{"@attributes":{"id":"p-0149","num":"0148"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"msub":{"mi":["DQI","q"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"d"}},{"mn":"1","mo":"-","mfrac":{"mrow":[{"munder":{"mo":"\u2211","mrow":{"mi":"r","mo":"\u2208","mrow":{"msub":{"mi":["Vio","q"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"d"}}}},"mo":"\u2062","msub":{"mi":["\u03b1","r"]}},{"munder":{"mo":"\u2211","mrow":{"mi":"r","mo":"\u2208","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":{"mi":["\u03c4","d"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"R"}},{"mi":["Q","A"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"mrow":{"mi":"Rules","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"q"}}}],"mo":"\u22c2"}}}},"mo":"\u2062","msub":{"mi":["\u03b1","r"]}}]}}],"mo":"="}}},"br":{},"sub":"q"},{"@attributes":{"id":"p-0150","num":"0149"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"msub":{"mi":["DQI","q"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"System"}},"mo":"=","mfrac":{"mrow":[{"munder":{"mo":"\u2211","mrow":{"mi":["d","Ent"],"mo":"\u2208"}},"mo":"\u2062","mrow":{"msub":{"mi":["DQI","q"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"d"}}},{"mo":["\uf603","\uf604"],"mi":"Ent"}]}}}},"br":{}},"The system  provides output related to design quality of the design of the software application based on the computed design quality index (). For example, a computed design quality index may be displayed to the user, such as on a user interface and\/or on a printed report.",{"@attributes":{"id":"p-0152","num":"0151"},"figref":"FIG. 23","b":["2300","2300","100","2300","100","102","100","2300"]},"The system  accesses a design of a software application (). For example, in reference to , the model processor  may access the design from the UML design repository .","The system  accesses design quality rules that pertain to multiple, different design quality attributes (). For example, in reference to , the rules engine  may access design quality rules from the design quality rules repository . The rules engine  may access, for example, design quality rules that pertain to all design quality attributes evaluated by the system , or, as another example, the rules engine  may access design quality rules that pertain to a performance design quality attribute, a security design quality attribute, and a rigidity design quality attribute.","The system  applies the accessed design quality rules to the accessed design of the software application to detect violations (). For example, the accessed design quality rules may be applied to the accessed design as described above with respect to .","The system  accumulates, for each of the design quality attributes, detected violations that pertain to the corresponding design quality attribute (). Violations may be accumulated using one or more violations lists. For example and as shown in , performance violations for a performance design quality attribute may be accumulated using a performance violations list , security violations for a security design quality attribute may be accumulated using a security violations list , and rigidity violations for a rigidity design quality attribute may be accumulated using a rigidity violations list .","The system  computes, for each of the design quality attributes and based on the violations accumulated for the corresponding design quality attribute, a metric that reflects software design quality in terms of the corresponding design quality attribute (). For instance, in the example of , a performance metric  may be computed for a performance design quality attribute, a security metric  may be computed for a security design quality attribute, and a rigidity metric  may be computed for a rigidity design quality attribute. The performance metric  may be computed based on the violations included in the performance violations list  and may reflect software design quality in terms of performance. The security metric  may be computed based on the violations included in the security violations list  and may reflect software design quality in terms of security. The rigidity metric  may be computed based on the violations included in the rigidity violations list  and may reflect software design quality in terms of how flexible the accessed design of the software application is to change. Computing the rigidity metric  is described in more detail below with respect to .","Returning to , the system  computes a design quality composite index based on the metrics computed for each of the design quality attributes (). For instance, in the example of , a design quality composite index  may be computed. The design quality composite index  may be computed by summing a performance value, a security value, and a rigidity value. The performance value may be determined by multiplying the performance metric  by an accessed performance weighting factor . The security value may be determined by multiplying the security metric  by an accessed security weighting factor . The rigidity value may be determined by multiplying the rigidity metric  by the rigidity weighting factor .",{"@attributes":{"id":"p-0159","num":"0158"},"figref":"FIG. 25","b":["2500","2500","100","2500","100","102","100","2500"]},"A design reviewer may consider rigidity of the design of a software application. In general, a design quality rule models a particular design defect and a design defect, in turn, adversely impacts software quality. Several design defects discussed above adversely impact software extensibility and modifiability. In other words, if such a design defect is present in a software system, the defect may cause the software system to be less extensible and modifiable. As the software system becomes less extensible and modifiable, it may become more rigid. A rigid system, even when it correctly executes functionality, may be difficult to modify and change when it undergoes maintenance. An attempt may be made to quantify how a design defect impacts the rigidity of a system.","When the process  begins, the system  accesses a design of a software application (). For example, in reference to , the model processor  may access the design from the UML design repository .","The system  accesses design quality rules that pertain to extensibility and modifiability (). For example, in reference to , the rules engine  may access design quality rules pertaining to extensibility and modifiability from the design quality rules repository . For example and in reference to , the excessive inheritance design quality rule , the high-coupling, high-inheritance, and high dependency out design quality rule , the godly inheritance design quality rule , the PIF design quality rule , the violation of design-to-contract principle design quality rule , and the violation of open-close principle design quality rule  may be accessed.","The system  applies the accessed design quality rules to the accessed design of the software application to detect violations (). For example, the accessed design quality rules may be applied to the accessed design as described above with respect to .","The system  accumulates detected violations that pertain to extensibility and modifiability (). Violations may be accumulated using one or more violations lists. For example and as shown in , violations that pertain to the extensibility of the design of the software application may be accumulated using an extensibility violations list , and violations that pertain to the modifiability of the design of the software application may be accumulated using a modifiability violations list .","The system  computes a rigidity metric for the design of the software application based on the accumulated violations (). For instance, in the example of , a rigidity metric  may be computed. The rigidity metric  indicates how resistant a system would be to a change in design caused either due to design refactoring during system design or a code change as a result of a change request. The rigidity metric  may be computed based on an extensibility metric  and a modifiability metric . The extensibility metric  may be computed based on the accumulated violations in the extensibility violations list  and the modifiability metric  may be computed based on the accumulated violations in the modifiability violations . An extensibility weighting factor  and a modifiability weighting factor  may be accessed. The extensibility metric  may be multiplied by the extensibility weighting factor  to determine an extensibility value and the modifiability metric  may be multiplied by the modifiability weighting factor  to determine a modifiability value. The extensibility value and the modifiability value may be summed to determine the rigidity metric .","As another example, the rigidity metric  may be calculated using the formula:\n\n\u03a9()=\n\nwhere DQIq is the DQI specific to the design quality attribute q and \u03bb is a user defined parameter that can vary depending on the design entity type (e.g., class, package).\n",{"@attributes":{"id":"p-0167","num":"0166"},"figref":"FIG. 27","b":["2700","2700","100","2700","100","102","100","2700"]},"The system  determines an effort estimation value for a change to a design of a software application (). For example, a package d may need modification. A designer may, based on the nature of a change request, estimate an effort(d). The estimate effort(d) may not take into account the additional complexity that may arise due to rigidity of the package d.","The system  computes a rigidity metric for the design of the software application (). For example, a rigidity metric may be computed as described above with respect to .","The system  increases the effort estimation value based on the computed rigidity metric (). In general, rigidity information may be used to consider impact on maintainability. The modified estimate may be calculated as\n\neffort\u2032()=effort()\u03a9()\n\nwhere \u03a9(d) is the computed rigidity metric.\n","When a package d is completely malleable (e.g., \u03a9(d)=1), then the modified estimation effort\u2032(d) has a value equal to the initial estimation effort(d). However, in other cases where the package d is not completely malleable, the estimated effort effort(d) may increase by a factor of edue to rigidity.","As another example,  illustrates change in effort estimation. An adjusted effort for design change  may be calculated, for example, by multiplying an initial estimated effort for design change  by a rigidity metric .","Returning to , the system  provides output related to the change to the design of the software application based on the increased effort estimation value (). For instance, in the example of , output  may be provided, where the output  includes an estimated time  to complete the design change and an estimated cost  to complete the design change.","A rigidity metric may also be used to estimate an effort of maintaining a software application. For example and as shown in , an adjusted maintenance effort  may be computed by multiplying an initial estimated maintenance effort  by a rigidity metric . An expected cost of future maintenance  may be computed based on the adjusted maintenance effort . A budget report  for future software maintenance may be generated and may include a comparison of the expected cost of future maintenance  and a budget  for future maintenance.",{"@attributes":{"id":"p-0175","num":"0174"},"figref":"FIG. 30","b":["3002","3002","3004","3002","3006","3008","3010"]},"The change request  may be analyzed manually, by an automatic process (e.g., a text processing or text recognition process), or by a combination of one or more manual or automated processes, to identify code components which need to be changed to implement the change request . The change request  may include one or more requested changes. For each requested change, one or more change types may be identified. For example, a change may be or may involve a user interface change, a business logic change, a database-related change, or a customization of a pre-configured object, to name a few examples.","The set of impacted components  may include primary components that may be changed to implement the change request , as well as secondary components which also may be changed due to a dependence on one or more primary components. For each impacted component , an estimate of severity of impact may be determined (). A severity of impact estimate may include a volume estimate and a complexity estimate. For example, volume may be defined as units of code to be changed. As one example, if the change request results in changes to business logic, a volume estimate may be specified as a number of code methods to be changed. As another example, if the change request involves user interface changes, the number of user interfaces or number of user interface elements impacted may be included in a volume estimate. Volume estimates also may include an estimation of test effort (e.g., testing of primary components changed and regression testing of other parts of the system). A complexity estimate may correspond to estimated effort to implement a change. For example, complexity may be estimated as one of \u201chigh,\u201d \u201cmedium,\u201d or \u201clow.\u201d","For each impacted component, an effort estimate is calculated (), based on the severity of impact estimate. An effort estimate may be, for example, a number of person hours estimated to change the impacted component to satisfy the change request . An effort estimate may take into account rigidity of the impacted component. For example, an estimate effort may be modified by considering rigidity and complexity of impact of the impacted component (). A final estimate of implementing the change request  may be calculated (), for example, by combining (e.g., adding together) modified efforts for all impacted components .","As an example, application code may be evaluated for design quality (), and for each impacted component , a rigidity metric may be computed (). For example, a rigidity metric may be computed as described above with respect to . Also as described above, a rigidity metric may be calculated for a component d as\n\n\u03a9()=\n\nwhere DQIq is a DQI specific to the design quality attribute q, and \u03bb is a user defined parameter that can vary depending on the design entity type (e.g., class, package). The design quality attribute q may be, for example, modifiability and\/or extensibility. Instead of or in combination with varying \u03bb based on the design entity type, \u03bb may be varied corresponding to a complexity estimate for the impacted component. For example, \u03bb may be varied based on whether a complexity estimate is \u201chigh,\u201d \u201cmedium,\u201d or \u201clow.\u201d For example, if a complexity estimate is \u201clow\u201d for an impacted component, \u03bb may be set to zero, which may result in \u03a9(d) having a value of one. As described above, a modified effort\u2032(d) for a component d may be calculated as\n\neffort\u2032()=effort()\u03a9()\n\nand if \u03a9(d) has a value of one, then the modified effort\u2032(d) may be equal to an original estimated effort.\n","As another example, if a complexity estimate for an impacted component is \u201chigh,\u201d \u03bb may be set to one, which means that \u03a9(d) may have a value from one to 2.718, depending on DQI(d). Put another way, a modified effort\u2032(d) may be from one to nearly three times an original effort estimate, based on the degree of rigidity of the component d.",{"@attributes":{"id":"p-0181","num":"0180"},"figref":"FIG. 31","b":["3100","3100","200","300","400","2100","2200","2300","2500","2700","3100","100"]},"The system  includes a processor , a memory , a storage device , and an input\/output device . Each of the components , , , and  are interconnected using a system bus . The processor  is capable of processing instructions for execution within the system . In one implementation, the processor  is a single-threaded processor. In another implementation, the processor  is a multi-threaded processor. The processor  is capable of processing instructions stored in the memory  or on the storage device  to display graphical information for a user interface on the input\/output device , which may include a display.","The memory  stores information within the system . In one implementation, the memory  is a computer-readable medium. In one implementation, the memory  is a volatile memory unit. In another implementation, the memory  is a non-volatile memory unit.","The storage device  is capable of providing mass storage for the system . In one implementation, the storage device  is a computer-readable medium. In various different implementations, the storage device  may be a floppy disk device, a hard disk device, an optical disk device, or a tape device.","The input\/output device  provides input\/output operations for the system . In one implementation, the input\/output device  includes a keyboard and\/or pointing device. In another implementation, the input\/output device  includes a display unit for displaying graphical user interfaces.","The features described can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device, for execution by a programmable processor; and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The elements of a computer may include a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.","The features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, e.g., a LAN, a WAN, and the computers and networks forming the Internet.","The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 1","b":["22","31"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 2","b":["3","4","21","23","25","27"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIGS. 8-20"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 30"}]},"DETDESC":[{},{}]}
