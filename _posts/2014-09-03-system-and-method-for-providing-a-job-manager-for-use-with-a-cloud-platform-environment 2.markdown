---
title: System and method for providing a job manager for use with a cloud platform environment
abstract: In accordance with an embodiment, described herein is a system and method for providing a job manager for use with a cloud computing environment. In accordance with an embodiment, the system include a job manager that manages the execution of jobs within the cloud environment including their job states. A job manager service provides an application program interface which receives administrative commands to be processed within the cloud environment as jobs. The job manager updates a job registry, including registering instances of the administrative commands together with unique job identifiers, and returning the job identifiers so that a user can retrieve command process status, and the result of the job can be stored in the job registry. For example, the job manager can perform housekeeping tasks, such as purging jobs according to a retention policy, performing any necessary cleanup, and performing security checks to ensure tasks are authorized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09634965&OS=09634965&RS=09634965
owner: ORACLE INTERNATIONAL CORPORATION
number: 09634965
owner_city: Redwood Shores
owner_country: US
publication_date: 20140903
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","COPYRIGHT NOTICE","FIELD OF INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","EXAMPLE","Usage Example 1","Usage Example 2"],"p":["This application claims the benefit of priority to U.S. Provisional Application titled \u201cSYSTEM AND METHOD FOR MESSAGING, JOB MANAGEMENT, AND OTHER FUNCTIONALITY IN A CLOUD PLATFORM ENVIRONMENT\u201d, Application No. 61\/880,780, filed Sep. 20, 2013, which application is herein incorporated by reference.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","Embodiments of the invention are generally related to cloud computing, and providing of services within such environments, and are particularly related to a system and method for providing a job manager for use with a cloud environment.","A cloud computing environment enables responsibilities which previously may have been provided by an organization's own information technology department, to be delivered as service layers within a cloud environment, for use by consumers that are either internal (i.e., private) or external (i.e., public) to the organization. In some cloud environments, a user can issue commands and perform operations to manage the environment. However, if the environment is operating in a clustered manner, then it may take a significant amount of time to process an administrative task over the entire cluster, for example, deploying a large application, or starting many service instances which are associated with the cluster.","In accordance with an embodiment, described herein is a system and method for providing a job manager for use with a cloud computing environment. In accordance with an embodiment, the system include a job manager that manages the execution of jobs within the cloud environment including their job states. A job manager service provides an application program interface which receives administrative commands to be processed within the cloud environment as jobs. The job manager updates a job registry, including registering instances of the administrative commands together with unique job identifiers, and returning the job identifiers so that a user can retrieve command process status, and the result of the job can be stored in the job registry. For example, the job manager can perform housekeeping tasks, such as purging jobs according to a retention policy, performing any necessary cleanup, and performing security checks to ensure tasks are authorized.","In accordance with an embodiment, a cloud computing environment enables responsibilities which previously may have been provided by an organization's own information technology department, to be delivered as service layers within a cloud environment, for use by consumers that are either internal (i.e., private) or external (i.e., public) to the organization. Described herein are a variety of hardware and\/or software components and features, which can be used in delivering an infrastructure, platform, and\/or applications to support cloud computing.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 1","FIG. 1"],"b":["10","20","60","70","15"]},"In accordance with an embodiment, each of the IaaS, PaaS, and\/or SaaS layers can generally include a variety of components. For example, in accordance with an embodiment, the IaaS layer can include a shared database hardware (e.g., an Exadata machine), and\/or shared application server hardware (e.g., an Exalogic machine); while the PaaS layer can include one or more PaaS services, such as a database service, application server service, and\/or WebCenter service; and the SaaS layer can include various SaaS services, such as enterprise applications (e.g., Oracle Fusion SaaS), and\/or ISV or custom applications. The cloud environment can also include a shared enablement and managing infrastructure , which provides enablement and management tools that support the various service layers, for example, identity management, virtual assembly builder, system provisioning, tenant management, or other components.","In accordance with an embodiment, the cloud environment can include a PaaS platform component  (referred to herein in some embodiments as a PaaS platform, or CloudLogic), which enables the provisioning of enterprise software applications within the environment. For example, the PaaS platform can be provided as an installable software suite that provides a self-service provisioning experience for enterprise applications such as Fusion Middleware (FMW).","As shown in , in accordance with an embodiment, the PaaS platform can include one or more service definition package (SDP) , service management engine (SME) , virtual assembly (VA) , PaaS administration server , service domain  including one or more service applications (apps)  for use by one or more cloud accounts or tenants , and\/or elasticity manager  components.","The example shown in  is provided as an illustration of an exemplary cloud environment and PaaS platform. In accordance with other embodiments, different and\/or other types or arrangements of components can be included.","In accordance with an embodiment, the following terms are used herein.","PaaS Platform Component (PaaS Platform, Platform, CloudLogic): In accordance with an embodiment, a PaaS platform component is an installable software suite that provides a self-service provisioning experience for enterprise applications, such as FMW or other enterprise applications.\n\nSite: In accordance with an embodiment, a site is the entity created and configured by the Platform Administrator from a PaaS platform installation, which tenants and Platform Administrators interact with to perform the various operations in the platform. In accordance with an embodiment, a site can be implemented as a WebLogic domain.\n\nTenant: In accordance with an embodiment, a tenant (referred to herein in some embodiments as an account) is an entity that is associated with users that consume the platform as a service, and establishes an administrative scope that administrators use to access PaaS services. For example, a tenant can be created for an organization, department, or group. Roles such as Tenant Administrator can be associated with a tenant; and quotas can be assigned to a tenant. A tenant can create one or more environments, and have one or more sub-tenants. Consumed resources, such as services with their virtual machines, databases, DNS entries, load balancer and other configurations, can be associated with a tenant.\n\nSub-tenant: In accordance with an embodiment, a sub-tenant is an entity that exists under a tenant. A sub-tenant has a quota assigned from the overall tenant's quota. For example, a tenant can have one or more sub-tenants, and the Tenant Administrator can assign a quota from the overall tenant quota to each sub-tenant. A sub-tenant can create one or more environments.\n\nService Definition Package: In accordance with an embodiment, a service definition package (SDP) is a package that contains the information necessary for a particular type of service to be offered by the PaaS platform. For example, each type of FMW service can provide its own SDP. An SDP can contain custom code that is installed into the cloud platform, and a virtual assembly that contains the topology and configuration of a set of virtual appliances that will comprise a running instance of the service, upon being deployed onto a set of virtual machines (VMs).\n\nService Management Engine: In accordance with an embodiment, a service management engine (SME) provides a generic means to plug any service type into the system. For example, an SME takes care of the service-specific provisioning, lifecycle, management, and monitoring support for a service type or provider type.\n\nService Type: In accordance with an embodiment, a service type is a representation of software functionality that can be instantiated within the PaaS platform site for a tenant. A service type is created based on an SDP, with additional configuration information supplied by the Platform Administrator. Some of this configuration information may supply values that are specific to an installation of the PaaS platform product or the enterprise in which it is running; while some configuration information may reflect the Platform Administrator's choices of options supported by the SDP. Multiple service types can be created from a single SDP, by making different configuration choices.\n\nEnvironment: In accordance with an embodiment, an environment is a collection of services and their associated providers that are managed together as a group. An environment can be created for the purpose of running an application or providing some higher level service. Environments provide the ability to operate on the collection of services as a whole, with operations such as start, stop, backup, and destroy. An environment provides the functions of an association group, and a management group.\n\nService: In accordance with an embodiment, a service is an instantiation of a service type. An environment can be associated with multiple services; and within a particular tenant there can be one or more environments with multiple services for a single service type. Typically, a service provides both a service administration interface, and an end-user interface. A service can be associated with identity, database, or other service features that are required by the service; and with a service runtime that runs on one or more VMs.\n\nProvider Type: In accordance with an embodiment, a provider type is a special form of service type that supports providers instead of services. Provider types are created by the Platform Administrator in the same way as service types. As with service types, a provider type is created based on an SDP, with additional configuration information supplied by the Platform Administrator. Some of this configuration information may supply values that are specific to this installation of the PaaS platform product or the enterprise in which it is running; while some configuration information may reflect the Platform Administrator's choices of options supported by the SDP. Multiple provider types can be created from a single SDP, by making different configuration choices.\n\nProvider: In accordance with an embodiment, a provider is a specialization of a service. Unlike services, which are created by explicit action of a Tenant Administrator, providers are created on-demand to satisfy the dependencies of services. A provider is an instantiation of a provider type, and represents the use of the resource managed by the provider type by a particular instance of a service type. Services can be associated with multiple providers. When creating a service, an orchestration engine matches the requirements of a service type with the capabilities of the configured provider types, and then requests the service type to create an instance of a service, and the provider types to create instances of the providers for use by this instance of the service. The orchestration engine then associates the service with the providers.\n\nAssociation Resource: In accordance with an embodiment, an association resource (sometimes referred to as a provider resource) enables a service to keep track of configuration information for a particular association. For example, if a Java Service is associated with two different database providers, it may need to create a connection pool for each database. The association resource enables the Java Service to keep track of which connection pool is associated with which database, so that, if the orchestration engine needs to change one of the associations, the Java Service will know which connection pool to change.\n\nRuntime: In accordance with an embodiment, a runtime is a representation of the installed and operational software that provides the functionality of a service or a provider. Runtimes are managed by the custom code included in an SDP, in some instances using facilities provided by the PaaS platform, such as its virtualization and provisioning support. Runtimes can be layered, with each layer being shared (multi-tenant), or not shared (dedicated). For example, with a Java Service, the runtime layers may include an application server, a Java virtual machine (JVM), a guest operating system (OS), and a host operating system. When unqualified, the expression \u201cservice runtime\u201d generally refers to the top-most layer. For example, a multi-tenant service runtime is a runtime that is shared by multiple services; while a dedicated service runtime is a runtime that is not shared among multiple services.\n\nService Resource Type: In accordance with an embodiment, a service resource type is a special form of service type that supports service resources instead of services. Service resource types are created by the Platform Administrator in the same way as service types. As with service types, a service resource type is created based on an SDP, with additional configuration information supplied by the Platform Administrator. Multiple service resource types can be created from a single SDP, by making different configuration choices.\n\nService Resource: In accordance with an embodiment, a service resource is a specialization of a service. Unlike services, which are created by explicit action of a Tenant Administrator, and providers which are created on-demand to satisfy the dependencies of services, service resources are associated with services to satisfy the dependencies of artifacts\/applications deployed to services. A service resource can be associated, or disassociated, with a service after the service has been created. A service resource dependency of a service is optional and may be configured by the Platform or Tenant Administrator based on the needs of the artifacts\/applications that would be deployed to the service. For example, a service may indicate support for multiple kinds of service resource dependencies; and the Platform or Tenant Administrator may associate multiple service resources for a dependency. A service resource is an instantiation of a service resource type, and represents the use of the infrastructure managed by the service resource type, by a particular instance of a service type. A Service can be associated with one or more service resources. The association of a service to a service resource can happen at any time in the lifecycle of the service, once the service and service resource have been created.\n\nQuota: In accordance with an embodiment, a quota provides a mechanism to limit consumption of a resource, by establishing an upper bound on the resource usage. Examples of quota-controlled resources include CPU, disk, and the number of VMs in use. PaaS layer quotas can also be supported, for example the number of services that can be provisioned. Quotas can be assigned to tenants, and a Tenant Administrator can allocate their quota to projects or groups which they manage.\n\nNamespaces: In accordance with an embodiment, the PaaS platform can use a naming hierarchy, such as a Nimbula-style naming hierarchy and multipart naming scheme. There can be reserved namespaces for SDPs, service-types, provider-types, service-resource-types, service-resources, environments, and services. Namespaces can be defined and reserved at the global level, and per tenant.\n\nPlatform Administrator\/System Administrator (Role): In accordance with an embodiment, a Platform or System Administrator is responsible for installing, configuring, managing, and maintaining the PaaS platform infrastructure and environment, including the resources that are made available to applications running in the environment. The Platform or System Administrator is also responsible for downloading and installing SDPs to support additional service types, setting up or configuring virtualization technology for the platform to use, and installing and configuring providers.\n\nCloud Account Administrator (Role): In accordance with an embodiment, a Cloud Account Administrator is responsible for the provisioning of new services, management of generic service properties such as their Quality of Service (QoS) settings and their associations, and the locking and termination of services. A Cloud Account Administrator can assign Service Administrators for each service.\n\nTenant Administrator (Role): In accordance with an embodiment, a Tenant Administrator is responsible for creating sub-tenants and assigning Tenant Administrator to the sub-tenant groups, and for the provisioning of new services, management of generic service properties, and the locking and termination of services. A Tenant Administrator can assign Service Administrators for each service.\n\nService Administrator (Role): In accordance with an embodiment, a Service Administrator is responsible for administering and managing a specific service after it has been provisioned. A Service Administrator interacts with the service's administration interface to perform administration and management operations.\n\nService Runtime Administrator (Role): In accordance with an embodiment, a Service Runtime Administrator is responsible for configuring and managing service runtimes.\n\nApplication Deployer (Role): In accordance with an embodiment, an Application Deployer deploys an application to the provisioned service, and is responsible for installing, configuring, and running the application. Once the application is running, it can be made available to an End User.\n\nEnd User (Role): In accordance with an embodiment, an End User is the user of the applications that are deployed to the service. The End User interacts with the user interface provided by the application running in the service. If the service itself provides an interface for users to consume the functionality that it exposes, then the End User can use that service's interface.\n",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 2","FIG. 2"],"b":["108","120","121","122","124"]},"In accordance with an embodiment, the PaaS administration server can be implemented as a WebLogic (WLS) server application, together with, e.g., Glassfish modules embedded therein to provide cloud platform functionality. A service domain, including a service app and service console , can be provided for housing enterprise applications, such as FMW applications, that will ultimately service user requests. In accordance with an embodiment, the service domain components may be instantiated multiple times as part of provisioning requests.","In accordance with an embodiment, provider server types that will be used by the PaaS administration server and the service domain, examples of which include LDAP , database , and Web tier  or load-balancer  providers, can be provided in pools that are not provisioned by the administration server, but are external services registered with the cloud environment. In accordance with an embodiment, the PaaS platform can make use of a load-balancer provider to forward all incoming, e.g., Web requests, that are directed to the services. For example, each service can be associated with a virtual host name that will be registered with the load-balancer provider during service provisioning.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3","FIG. 3"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 4","FIG. 4"],"b":["141","140","142","143","144"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5","FIG. 5"],"b":["150","151","152"]},"In accordance with an embodiment, some service types may support both dedicated and multitenant uses, based on their particular configuration. Other service types may support either only dedicated use, or only multitenant use. Service types that are able to support multiple tenants on the same runtime can provision their runtimes in a multitenant manner, during the instantiation process, based on the configuration of the service type. A single instantiated service runtime that has been marked as multitenant-capable will be reused for a finite number of additional service provisioning requests, as determined by the service type and based on its configuration. Generally, it is left to the service application to support a particular tenancy mode; service applications that are not multitenant will only be able to support a single account for each service instance. Once a service has been instantiated from its VM assembly, end users  can interact with the system and the instantiated services, in the same manner as they would interact with an on-premise version of that service.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 6","FIG. 6"],"b":["160","170","162","164","166","173","180","183","184","182","174","181"]},"In accordance with an embodiment, users can either be managed within an identity store  managed by the PaaS platform, or alternatively can be provided from an external, e.g., corporate LDAP, or other means of user identification; and can access the cloud account manager through an administration interface . Account and configuration data can also be stored on a file system or other means of storage that is accessible from nodes of a CPAS cluster.","Service Definition Package (SDP)",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 7","FIG. 7"],"b":["192","196","193","197","194","198","195","199"]},"For example, in accordance with an exemplary embodiment, each SDP can include an assembly, reference, package, archive, or template, which can be used to install a service on a particular virtualization provider (e.g., OVAB); an assembly bundled within the SDP or a reference to an assembly (e.g., an EC2-specific reference); a service management engine (SME) plugin for the service type, which enables platform functionality such as elasticity metric gatherers, or alerts to be used with the service; a plugin for use with a VAB deployer (e.g., OVAB Deployer) during its assembly rehydration process; and other dependency and configuration information, such as scalability limits or whether the service is a multitenant or dedicated service.","In accordance with an embodiment, installing an SDP will install, e.g., the OVAB assembly into the OVAB repository; appropriate SME plugins will be registered with the cloud platform; and metric gatherers, alerts and actions will be installed in the PaaS platform. After a System Administrator installs the SDP, a Cloud Account Administrator can then use a cloud account administration interface to request for a service of that type.","In accordance with an embodiment, when an SDP is installed into a PaaS platform domain, it is consumed by an SDP Manager , which is responsible for obtaining a list of SDPs available to be installed the local system, downloading an SDP if necessary, installing parts of the SDP into the right places, maintaining a list of those SDPs that have been installed, and, if necessary, uninstalling an SDP by uninstalling all of its parts from the places they were previously installed.","In accordance with an embodiment, the SDP manager can interface with other system components by installing an SME plugin to the CPAS, which can then take responsibility for replicating the SME plugin to other CPAS instances in the cluster, installing the VAB assembly ,  into the VAB deployer, interfacing with other tools such as Enterprise Manager to provide a customized console interface for the service if the service provides one, and installing configuration data for the service into the CPAS. Subsequently, during realization  of a service, the service  can be realized as an instance of those service types defined by the SDP and installed as assemblies in the VAB repository.","Service Management Engine (SME)",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 8"},"In accordance with an embodiment, each service type supported in the PaaS platform domain maps to a specific service SME. A service SME handles all service-related activities, such as creation, monitoring, management, patching, upgrade, and deletion for that service. In accordance with an embodiment, the contract that is implemented by an SME is referred to as a Service Management Interface (SMI).","Referring to the example shown in , when OVAB is used as a virtualization provider, interaction with the OVAB Deployer can be handled by a virtualization API (e.g., an OVAB client API). In accordance with an embodiment, the orchestration process can then proceed as follows: a Cloud Account Administrator can discover, e.g., SOA service types ,  that are available in the PaaS platform domain, and initiate creation of an, e.g., SOA service. The orchestration engine iterates through the available service SMEs in the system, and determines which service SMEs can handle this service type . In this example, the orchestration engine can discover an appropriate SOA SME to handle creation of the SOA service. The orchestration engine can then call into the SME to get all provider dependencies for that SME . For example, the SME may return database and load-balancer provider dependencies. The orchestration engine can then call a get-user or similar configurable properties function for the SME, and expose those properties in a user interface, so that the Cloud Account Administrator can edit the properties if desired. User-provided inputs can be supplied to the SME, for example to update an OVAB deployment plan. The orchestration engine then performs any pre-provisioning association between the SME and the provider SMEs upon which it depends. For example, the orchestration engine can perform pre-provisioning association between the SOA SME and a database provider SME, which results in the creation of schema and tables required by the SOA service, in addition to populating the deployment plan with the database provider configuration. When any pre-provisioning association is complete, the orchestration engine can then call into the SME  to provision the service.","At this point, the deployment plan is generally complete except for network configurations. In accordance with an embodiment, the deployment plan together with an assembly ID can be pushed, e.g., to the OVAB API, which takes care of filling the deployment plan with the remaining network configurations. Then, the orchestration engine can call, e.g., a Web service API of the OVAB Deployer, to provision the OVAB assembly. Once the assembly is provisioned, the virtual machine information can be retrieved and passed back to the SME, which in turn passes the information back to the orchestration engine. The orchestration engine can then perform any post-provisioning association between the SME and the provider SMEs on which it depends. For example, post-provisioning association between the SOA SME and a load-balancer provider SME may result in the creation of a virtual server to handle and route requests for this SOA service.","Orchestration Engine (OE)",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 9"},"In accordance with an embodiment, the orchestration engine, as part of creating a service, ensures that dependencies of the service, such as its provider dependencies, are satisfied, by selecting appropriate providers, and coordinating association between the providers and service. The act of association can be performed during pre-provisioning and\/or post provisioning-phases. The act of installing and configuring an SME can be performed by the SDP manager as part of registering a pre-packaged service type or a customized service type. The orchestration engine helps expose the deployment plan configuration, which can be configured by the Cloud Account Administrator, including recognizing phases and tasks that match the requirements of the platform for its service creation action, and other life-cycle related activities.","In accordance with an embodiment, the orchestration engine also acts as a gateway for service management, monitoring, scaling actions that could be initiated by other containers in the PaaS platform domain, or by an administrator. For example, the elasticity engine, described in further detail below, can communicate with the orchestration engine to manage, monitor, and scale services based on a service's QoS configuration. The orchestration engine can also play a role in service maintenance actions, such as patching and upgrade, which may require disassociating or re-associating services in a phased manner.","In accordance with an embodiment, services created by a cloud account administrator are visible and accessible only to that particular cloud account (tenant), and are isolated from other cloud accounts in the PaaS platform domain. Such isolation can be provided by the orchestration engine with the help of a cloud account management module.","In accordance with an embodiment, SMEs can be registered with the orchestration engine such that multiple SMEs for a given \u201cfamily\u201d of service (e.g., \u201cdatabase\u201d) can be present in the system. A default SME can also be configured for a particular service family on a per-cloud account basis.","As shown in , in accordance with an embodiment, the orchestration and service management components can interface with the virtualization layer through a virtualization service , plugin , and virtualization API  that abstracts supported virtualization operations. In accordance with an embodiment that uses OVAB, this API can be an OVAB Deployer interface, which enables OVAB Deployer to perform the tasks of assembly creation. In accordance with an embodiment, the orchestration engine\/SME can upload and deploys assemblies through the OVAB virtualization API, in addition to managing their lifecycle.","To support developer or demonstration scenarios, in accordance with an embodiment, the system can also implement solutions that run on native OS processes (i.e., with no virtualization). This capability can be implemented by providing a \u201cphysical plugin\u201d, which implements a portion of the virtualization API.","Elasticity Manager (EM)",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 10","FIG. 10"],"b":["260","262","264","265","270","272"]},"In accordance with an embodiment, a metric gatherer is an object that collects and maintains metric data about a service periodically. For example, a metric gatherer may periodically collect heap statistics such as used or committed memory; or metrics regarding CPU usage. Generally, the metric gatherers provide information about the state of some resource usage. Metrics can also be provided by external monitoring tools, for example by a Java bean component.","In accordance with an embodiment, an alert object periodically checks the health of a service in an environment, by analyzing metric data gathered by one or more metric gatherers over a period of time. For example, an alert may examine CPU usage for a previous several minutes to determine if the environment is under stress. After the alert determines the state of the service or environment, it can execute an action, such as sending an email, logging a message, sending an event, or scaling-up or scaling-down a service. In accordance with an embodiment, an alert can take multiple actions.","In accordance with an embodiment, the elasticity manager can include a unified Expression Language (EL) engine , which allows alerts and metric gatherers to be specified as EL expressions. In accordance with an embodiment, the elasticity manager allows external EL Resolver objects  to be registered, which enables other types of objects, such as MBeans or POJOs, to be used in an expression.","Update and Patching of SDPs","In accordance with an embodiment, services can be periodically maintained to ensure that they are up-to-date with, e.g., bug fixes, security updates and configuration changes. To help ensure homogeneous environments, services should be updated in a timely manner, with the same set of patches and configuration updates. In accordance with an embodiment, an update is defined to be a change which has to be made to the system; examples of which include application of a security patch, upgrade of a component, or changing of a configuration value. Depending on the type of update, some updates may require a service or system downtime, while other updates may not require a downtime; and each of these scenarios can be taken into account.","User Messaging Service","In accordance with an embodiment, the system can include a user messaging service for use with a cloud environment. The user messaging service allows a cloud account user to indicate a preference that, while operations are being performed within the cloud environment, such as the provisioning of a particular service, status notifications that are intended for that user, such as completion of an operation or operational alerts, should be communicated to that user via one or more preferred channels, for example by email, instant messaging, social media, or another communication medium.","For example, in accordance with an embodiment, the system can utilize a user messaging service such as, for example, Oracle User Messaging Service (UMS), which is provided as a component of Oracle Java Runtime Files (JRF), and which in turn includes a set of libraries and applications that can be used by environments such as Fusion Middleware or other software products. In accordance with other embodiments, other types of user messaging services can be used.","In accordance with an embodiment, the user messaging service integrates a plurality of messaging capabilities that can be used to send notifications to users. For example, the pluggable architecture of UMS allows different drivers to be integrated into UMS, to provide email, XMPP, SMS, and\/or instant messaging capabilities.","In accordance with an embodiment, the user messaging service is associated with","A user messaging server, which orchestrates message flow between applications and users, including routing outbound messages from client applications to appropriate drivers, and routing inbound messages to the correct client applications;","User messaging drivers, which connect the user messaging service to various messaging gateways, adapting content to protocols as necessary; and","User messaging clients, which implement the business logic of sending and receiving messages.","In accordance with an embodiment, a user communication preferences component such as, for example, Oracle User Communication Preferences (UCP), allows a user who has access to multiple channels to control how, when, and where they should receive messages, including defining filters or delivery preferences that specify which channel a particular message should be delivered to, and under which circumstances.","In accordance with an embodiment, the user communication preferences component can provide a user interface and an API, to provide access by a user to manage that user's channels and delivery preferences, so that the user messaging service can then acquire the user's delivery preferences and send messages accordingly.","For example, as described above, in accordance with an embodiment, the user messaging service and user communications preference can be provided by UMS and UCP respectively.","By sending messages through, e.g., UMS, an application will indirectly use the UCP service. In accordance with other embodiments, other types of user messaging services and user communication preferences components can be used.","In accordance with an embodiment, a PaaS platform component, such as a CloudLogic platform or other cloud environment as described above, can integrate with a user messaging service, such as UMS, to provide messaging capabilities within the cloud environment.","For example, in an environment such as CloudLogic, where operations can be long-running and complex, platform administrators (padmins) and cloud account administrators (cadmins) may wish to be notified when important events occur.","For example, when a service is being provisioned within the cloud environment, if it is likely to take a long time for the provisioning to complete, then, rather than poll to see when the service is provisioned, a cloud account or other user can choose to be notified that the provisioning has completed.","In accordance with an embodiment, the notification of, e.g., the completion of an action, can be provided by the preferred channel for that account or user. Similarly, if a platform-related alert reaches a critical state, a cloud account user can choose to be notified of the alert by their preferred channel.","Notifications from a PaaS or CloudLogic platform, or other cloud environment, can be similarly sent to various users of the platform or environment, using the user messaging service.","In accordance with an embodiment, as referred to herein, a notification can be any mechanism that informs of a particular event. A notifiable is an event that must be conveyed to interested parties, e.g., users. A filter is a message delivery preference rule that controls how, when, and where a user receives messages. A channel generally refers to one of the addresses with which that channel can communicate.","In accordance with an embodiment, as further referred to herein, a business term is a named attribute for a message, such as a subject. Business terms can be extracted from messages or supplied by applications, and can be used to compare with a specified value in a filter condition, to select the filter. A condition is a combination of a business term, an operator and a specified value. A fact about a message can be used to compare against the value to evaluate the truth of the condition. An action is the action to be taken if the specified conditions in a filter are true, for example to not send a message, or to send a message to a first available channel, or to send a message to all selected channels.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 11"},"In accordance with an embodiment, the system can include a UMS driver-agnostic way of sending notifications, and a UMS driver-specific configuration details as to who will configure this and where it will be stored. Command framework integration, and integration with, e.g., the elasticity manager, is also important to be able to send notifications for commands, and for UMS and hence UCP for alerts and actions to be able to send notifications.","As shown in , in accordance with an embodiment, a user messaging (e.g., a UMS) server  hosts a user messaging service . In accordance with an embodiment, the user messaging service recognizes user communication preferences (UCP) , which determine how communications should be communicated to different users.","In accordance with an embodiment, a plurality of communication filters  can be used to filter which, and how, messages should be communicated.","For example, in accordance with an embodiment, the filters can use a combination of business terms , conditions , and actions , as described above, to control the filtering and communication of messages.","In accordance with an embodiment, users can be associated with user channel settings . The user messaging service can also support a plurality of plugins , , , that can be used to communicate with different communication channels , for example email , XMPP , or SMS channels respectively.","Within the PaaS platform, or other cloud environment, such as a CloudLogic environment, a notifier , for example a UMS client library, can be used to communicate notifications to the user messaging service.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 12"},"As shown in , in accordance with an embodiment, a user can specify user communication preferences , which will be associated with that user. This user-specified information can then be provided to configure  the notifier at the PaaS platform or cloud environment.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 13"},"As shown in , as notifiable events  occur within the cloud environment, the notifiable events are communicated , via the notifier, to the user messaging service.","In accordance with an embodiment, the user messaging service can then, depending on the user channel settings, utilize an appropriate plugin and communication channel , , to provide user notifications  to users, according to the user-specified communication preferences.","Notifiers","In accordance with an embodiment, the notifier is responsible for loading the notification preferences from a User Communication Preferences (UCP) API for a user, abstracting the notification process, sending notifications, and checking on the status of a notification.","CPAS Configuration","In accordance with an embodiment, the cloud platform administration service (CPAS) must be configured for the communication technologies that are desired to be supported.","For example, in accordance with an embodiment the user messaging service can have an SMTP server available for sending email, and a Twitter account available for sending tweets. Such configuration can be specified, and modified as necessary, for example for SMS, XMPP, and Twitter:",{"@attributes":{"id":"p-0108","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"driverProperties = SmppDriverProperties( )"},{"entry":"driverProperties.SenderAddresses = \u201cSMS:1234\u201d"},{"entry":"driverProperties.SmsAccountId = \u201c1234\u201d"},{"entry":"driverProperties.RangeSetNull = \u201ctrue\u201d"},{"entry":"driverProperties.SmsServerHost = \u201c127.0.0.1\u201d"},{"entry":"driverProperties.TransmitterSystemId = \u201csmppclient1\u201d"},{"entry":"driverProperties.ReceiverSystemId = \u201csmppclient1\u201d"},{"entry":"driverProperties.TransmitterSystemType = \u201cLogica\u201d"},{"entry":"driverProperties.ReceiverSystemType = \u201cLogica\u201d"},{"entry":"driverProperties.TransmitterSystemPassword = \u201cpassword\u201d"},{"entry":"driverProperties.ReceiverSystemPassword = \u201cpassword\u201d"},{"entry":"driverProperties.ServerTransmitterPort = \u201c2775\u201d"},{"entry":"driverProperties.ServerReceiverPort = \u201c2775\u201d"},{"entry":"driverProperties.ExtraErrorCode = \u201c \u201d"},{"entry":"driverProperties.LocalAddress = \u201c \u201d"},{"entry":"configUserMessagingDriver(baseDriver=\u201csmpp\u201d, appName=\u201csmpp\u201d,"},{"entry":"driverProperties=driverProperties)"},{"entry":"*XMPP"},{"entry":"driverProperties = XmppDriverProperties( )"},{"entry":"driverProperties.IMServerHost = driverConfigXmppServer"},{"entry":"driverProperties.IMServerUsername = hostName"},{"entry":"driverProperties.IMServerPassword = \u201cwelcome1\u201d"},{"entry":"configUserMessagingDriver(baseDriver=\u201cxmpp\u201d, appName=\u201cxmpp\u201d,"},{"entry":"driverProperties=driverProperties, clusterName)"},{"entry":"*Twitter"},{"entry":"wls:\/base_domain\/serverConfig> dprops = TwitterDriverProperties( )"},{"entry":"wls:\/base_domain\/serverConfig> dprops.ConsumerKey =\u2018hej\u2019"},{"entry":"wls:\/base_domain\/serverConfig> dprops.ConsumerSecret=\u2018hejigen\u2019"},{"entry":"wls:\/base_domain\/serverConfig> dprops.AccessToken=\u2018blaha\u2019"},{"entry":"wls:\/base_domain\/serverConfig> dprops.AccessTokenSecret="},{"entry":"\u2018blahahahahaha\u2019"},{"entry":"wls:\/base_domain\/serverConfig> dprops.AuthenticationMode=\u2018OAuth\u2019"},{"entry":"wls:\/base_domain\/serverConfig> configUserMessagingDriver"},{"entry":"(baseDriver=\u2018twitter\u2019, appName=\u2018twitter\u2019,driverProperties=dprops)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In accordance with an embodiment, User Communication Preferences (UCP) allows a user who has access to multiple channels to control how, when, and where they receive messages. For example, users can define filters, or delivery preferences, that specify which channel a message should be delivered to, and under what circumstances.","In accordance with an embodiment, information about a user's channels and filters can be stored in a database supported for use with, e.g., Oracle Fusion Middleware. In accordance with an embodiment, since preferences are stored in a database, this information can be shared across all instances of User Communication Preferences within a domain. Generally, UCP does not provide services for message delivery, rather it provides a user interface and APIs to access and manage a user's channels and delivery preferences.","In accordance with an embodiment, when a message is addressed to a user, the user messaging service (UMS) acquires the user's delivery preferences from a UCP service, and sends the message according to the user's preferences.","For an application developer, User Communication Preferences provides increased flexibility. By sending messages through UMS, an application is indirectly using UCP service. Applications can also directly access UCP services by calling UCP APIs, to access and manage a user's preferences, and by integrating with UCP using a task flow library.","Command Line Interface (CLI) and Per-User Configuration","In accordance with an embodiment, a per-user configuration can be specified, which can indicate the preferences for the notification. A user can specify the default channel for communication. Additionally a user can specify filters and business rules for different channels.","In accordance with an embodiment, all preferences are based per user. For example, in the examples illustrated below the \u201c--channel\u201d parameters provided for the user must match the group of allowed values chosen from: EMAIL; TWITTER; SMS; XMPP. In accordance with an embodiment, this will create a new preference if it does not exist, or else will update the original one using the User Communication Preferences API:",{"@attributes":{"id":"p-0115","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"padmin\/cadmin set-notification-perference --user <user> --channel"]},{"entry":[{},"<channel>"]},{"entry":[{},"\u2003\u2003--setdefault[=<setdefault(default:true)>] <default:true>"]},{"entry":[{},"\u2003\u2003-- value <value> nameOfPreference"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0116","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"padmin\/cadmin set-notification-preference --user johndoe --channel"]},{"entry":[{},"EMAIL"]},{"entry":[{},"\u2003\u2003--value johndoe@oracle.com WorkEmail"]},{"entry":[{},"padmin\/cadmin set-notification-preference --user johndoe --channel"]},{"entry":[{},"TWITTER"]},{"entry":[{},"\u2003\u2003--value johndoe MyTwitter"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{},{},{},{},{},{},{},{}]},{"@attributes":{"id":"p-0117","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Channel","Value","Default"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WorkEmail","EMAIL","john.doe@oracle.com","true"]},{"entry":[{},"WorkPhone","SMS","408-888-9999","false"]},{"entry":[{},"MyTwitter","TWITTER","johndoe ","false"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"In accordance with an embodiment, a messaging filter defines rules on how to handle incoming messages addressed to a user. For example, messaging filters enable users to build filters that specify the type of messages they want to receive, and also the channel through which to receive these messages. In accordance with an embodiment, a filter is composed of two primary sections, a condition (If) section, and an action (Then) section.","For each incoming message, the filters are evaluated to determine the appropriate filter that must be selected for handling the message. The condition section determines the circumstances under which a filter is selected; while the action section specifies how the message is handled if the filter is selected.","An example of how a user can create filters and add multiple conditions to the filter is illustrated below. For example, to create a filter that will be selected for both conditions \u201cSubject contains create-service\u201d and \u201cStatus contains Success\u201d, the filter can be selected to MATCH_ALL so that both the conditions are matched:",{"@attributes":{"id":"p-0121","num":"0120"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"padmin\/cadmin create-notification-filter --match="]},{"entry":[{},"<MATCH_ANY|MATCH_ALL>"]},{"entry":[{},"\u2003\u2003--action= <PARALLEL|SERIAL|NO_ACTION> --description"]},{"entry":[{},"\u2003\u2003<desc> filtername"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0122","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"padmin\/cadmin create-notification-filter --match=MATCH_ANY"]},{"entry":[{},"\u2003\u2003--action= PARALLEL --description \u201csuccess filter\u201d myfilter"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In accordance with an embodiment, the following parameters can be used to specify what action needs to be taken for a filter: PARALLEL: Send to all selected channels simultaneously from the notification preferences; SERIAL: Send to first available channel in the notification preference; NO_ACTION: Do not send message.","In accordance with an embodiment, a command line interface (CLI) can be used to list notification filters, for example:","padmin\/cadmin list-notification-filters","For example:","padmin\/cadmin list-notification-filters --user johndoe","In accordance with an embodiment, this is the CLI to delete a notification filter:","padmin\/cadmin delete-notification-filter <filter-name>","For example:","padmin cadmin delete-notification-filter myfilter","In accordance with an embodiment, this is the CLI to create a notification condition. A notification condition can be a condition for instance \u201cSubject contains create-service\u201d:",{"@attributes":{"id":"p-0125","num":"0124"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"padmin\/cadmin create-notification-condition -business-term <business"},{"entry":"term>"},{"entry":"\u2003\u2003--operand <operand> --operation <operation> --filter <filtername>"},{"entry":"condition_name"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0126","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"padmin\/cadmin create-notification-condition --business-term=Status"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"--operand = Contains --operation=Sucess --filter myfilter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"statusCondition"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{},{}]},{"@attributes":{"id":"p-0127","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"padmin\/cadmin list-notification-conditions \\--filtername=myfilter"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"BUSINESS",{},{}]},{"entry":["CONDITION","FILTER","TERM","OPERATION","OPERAND"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["statusCondition","myfilter","Status","Contains","Success"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{},{},{}]},"In accordance with an embodiment, commands which need notifications to be turned on, can be referred to as notifiable jobs. Any command which needs to send a notification can be annotated with a @Notifiable annotation. An administrative command context (AdminCommandContext) can then return a notifier (Notifier) which can be used to notify the events. In accordance with an embodiment, this is what the annotation looks like:","public @interface Notifiable","In accordance with an embodiment, by annotating a command with @Notifiable, the command framework will take care of creating a notification event (NotificationEvent) from the action report (ActionReport) of the command; getting the user preferences for this user; and sending the notification based on the user preferences.",{"@attributes":{"id":"p-0130","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"@Notifiable"]},{"entry":[{},"public class FakeCommand implements AdminCommand"]},{"entry":[{},"{"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In accordance with an embodiment, a command which is annotated with @Notifiable can invoke a notifyEvent( ) method of the Notifier, to send any events to the user:",{"@attributes":{"id":"p-0132","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"@Inject Notifier notifier;"]},{"entry":[{},"@Override"]},{"entry":[{},"public void execute(AdminCommandContext context) {"]},{"entry":[{},"..."]},{"entry":[{},"notifier.notifyEvent(new"]},{"entry":[{},"NotifiableEvent.Builder<String>( ).name(\u201cNotification"]},{"entry":[{},"for create-service"]},{"entry":[{},"command\u201d).data(\u201cFinished creating the service\u201d).build( ));"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In accordance with an embodiment, notifications require the JRF and UMS API to be available, and will not work in the case of a standalone CPAS. An example NotifiableEvent class and API is provided below:",{"@attributes":{"id":"p-0134","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/**"},{"entry":"* This is a event class for all notifications."},{"entry":"* A <code>NotifiableEvent<\/code> can be triggered during the following"},{"entry":"cases"},{"entry":"* 1. Commands which are annotated with <code>@Notifiable<\/code> can"},{"entry":"* automatically send notification once the command is completed*"},{"entry":"* 2. When an alert are triggered"},{"entry":"* 3. Changes to service lifecycle"},{"entry":"* The <code>NotifiableEvent<\/code> can be sent via the UMS API"},{"entry":"* to the channel registered by the user. Additionally there can be"},{"entry":"* listeners which can subscribe to the events"},{"entry":"*\/"},{"entry":"public class NotifiableEvent<T> {"},{"entry":"\/**"},{"entry":"* The name of the event"},{"entry":"*\/"},{"entry":"private String eventName;"},{"entry":"\/**"},{"entry":"* The account associated with the event"},{"entry":"*\/"},{"entry":"private String accountName;"},{"entry":"\/**"},{"entry":"* The serviceName associated with the event"},{"entry":"*\/"},{"entry":"private String serviceName;"},{"entry":"\/**"},{"entry":"* The environment associated with the event"},{"entry":"*\/"},{"entry":"private String environmentName;"},{"entry":"\/**"},{"entry":"* The user associated with the event"},{"entry":"*\/"},{"entry":"private String subject;"},{"entry":"\/**"},{"entry":"* The timestamp for the event"},{"entry":"*\/"},{"entry":"private long timestamp;"},{"entry":"\/**"},{"entry":"* Additional information about the event."},{"entry":"* This can be an ActionReport which can be added to the event"},{"entry":"* or a Metric Gatherer which contains data about the alerts"},{"entry":"* See <code>MessageFormatter<\/code>to provide implementations"},{"entry":"* of serializing this data"},{"entry":"*\/"},{"entry":"private T data;"},{"entry":"public static class Builder<T> {"},{"entry":"private String eventName;"},{"entry":"private String tenantName;"},{"entry":"private String serviceName;"},{"entry":"private String environmentName;"},{"entry":"private String subject;"},{"entry":"private T data;"},{"entry":"private long timestamp;"},{"entry":"..."},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In accordance with an embodiment, notifiable events (Notifiable Events) can be of various types, for example resource\/provider lifecycle events; sensor events; user defined events; and service lifecycle events. Exemplary events included service created, service deleted, service started, service stopped, service modified, service scale up started, service scaled up service scale up failed, service scaled down, service scale down stated, service scale down failed, service maintenance started, service maintenance ended service locked, and service unlocked.","In accordance with an embodiment, a --notify qualifier can be used to enable the notification for commands which are not annotated with @Notifiable. This will add the notification feature for some command which has not been annotated with @Notifiable by default.","padmin some-command --user johndoe --notify","For example, the above CLI will add notification support to the command, and send notifications based on user \u201cjohndoe's\u201d preference.","Media Format Definitions","In accordance with an embodiment, the system can provide a way for a command implementor to define different message formats for different requirements, e.g., email vs Twitter (which has a 140 character limitation), for example:",{"@attributes":{"id":"p-0138","num":"0137"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"@Contract"]},{"entry":[{},"public interface MessageFormatter {"]},{"entry":[{},"\/**"]},{"entry":[{},"* This method identifies if NotifiableEvent can be handled"]},{"entry":[{},"* by this MessageFormatter"]},{"entry":[{},"*"]},{"entry":[{},"*\/"]},{"entry":[{},"public boolean handles( NotifiableEvent c);"]},{"entry":[{},"\/**"]},{"entry":[{},"* This method will customize a long message for a particular"]},{"entry":[{},"* event in the format required for the Notification Type."]},{"entry":[{},"* @param e The type of event this formatter can handle"]},{"entry":[{},"* @return an Object which can be used by the MessageProvider to"]},{"entry":[{},"* send the message using UMS"]},{"entry":[{},"*\/"]},{"entry":[{},"public Object formatLongMessage(NotifiableEvent e);"]},{"entry":[{},"\/**"]},{"entry":[{},"* This method will customize a short message for a particular"]},{"entry":[{},"* event in the format required for the Notification Type."]},{"entry":[{},"* @param e The type of event this formatter can handle"]},{"entry":[{},"* @return an Object which can be used by the MessageProvider to"]},{"entry":[{},"* send the message using UMS"]},{"entry":[{},"*\/"]},{"entry":[{},"public Object formatShortMessage(NotifiableEvent e);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In accordance with an embodiment, if the implementation of a message formatter (MessageFormatter) can handle the NotifiableEvent based on the data, it will be asked to compose a specific long and short message for that type of data and event. For example, the long messages can be used for, e.g., Email and IM; while the short messages can be used for, e.g., Twitter and SMS channels. There can be different implementations for this class, for example:","ActionReportMessageFormatter: In accordance with an embodiment, this is a MessageFormatter that will handle NotifiableEvents which have an ActionReport associated with it, and can format a long message regarding the status of a command, and a short message which will contain only the significant details from the ActionReport.","MetricGatherIMessageFormatter: In accordance with an embodiment, this is a specialized MetricGatherFormatter, which will handle NotifiableEvents which have a MetricGatherer and a MetricConfiguration associated with it, and can be used to format an email message regarding the state of a Metric and a short message containing some relevant information for a metric. Users can plug in their implementation for a MessageFormatter, which will implement the handles method to identify the type of notification, and then provide an implementation for the best way to format the event.","Interaction with Elasticity Manager","In accordance with an embodiment that provides information to an elasticity manager, a user can create sensors and add actions to sensors, for example:",{"@attributes":{"id":"p-0143","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"cadmin create-sensor --tenant acme --service my-java-service"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"--alert-type ServiceMonitorAlert"]},{"entry":[{},"-- properties ServiceMonitorName=jvm_heap_service_monitor"]},{"entry":[{},"HeapServiceMonitorAlert"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0144","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"cadmin create-sensor-action --account acme --service my-java-service"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"--action-name=notify HeapSMCriticalNotifyAction"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0145","num":"0144"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cadmin add-action-to-sensor-state --account acme --service"]},{"entry":[{},"my-java-service"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"--state CRITICAL --alert-name HeapServiceMonitorAlert"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HeapSMCriticalNotifyAction"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In accordance with an embodiment, when an alarm state is reached and the Notifier action is executed, a NotifiableEvent containing the ActionContext will be generated. The ActionContext should have details of the subject, from which the Notifier can get the user's preferences. From the ActionContext of the NotifierAction, it is also possible to get the ServiceMonitor associated with the action based on EL expressions, and get details from the ServiceMonitor on what triggered the alert.","In accordance with an embodiment, an example NotifierAction can be:",{"@attributes":{"id":"p-0148","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"@Service(name=\u201cnotify\u201d)"},{"entry":"public class NotifierAction extends AbstractAction {"},{"entry":"@Inject"},{"entry":"Notifier notifier;"},{"entry":"@Override"},{"entry":"public void execute(ActionContext context) {"},{"entry":"String account = (String) context.getContextData( ).get(\u201caccount\u201d);"},{"entry":"String envName = (String) context.getContextData( ).get(\u201cenvName\u201d);"},{"entry":"String serviceName = (String)"},{"entry":"context.getContextData( ).get(\u201cserviceName\u201d);"},{"entry":"notifier.notifyEvent(new"},{"entry":"NotifiableEvent.Builder<String>( ).name(context.getActionName( ))"},{"entry":".accountName(account)"},{"entry":".serviceName(serviceName)"},{"entry":".environmentName(envName)"},{"entry":".data(context).build( ));"},{"entry":"}}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In accordance with an embodiment, emails can be customized by specifying templates to control the content. Templates can be provided per account, for example by using a folder relative to the tenants folder which can specify the directory of the templates. The template can be an HTML file with CSS for images and headers. Templates can be added per tenant by the administrator.","Below is an example of how the CLI can be used to add template files. The template can control the images and headers, and the data can be presented by the message formatters. Just as tenant admins can support adding templates, there can similarly be support to add templates for padmin related commands. Before the messages are composed for email, the Notifier service can check if there is any template file provided, and if so use that:","cadmin\/padmin load-notification-template --name <name> template-file","In accordance with an embodiment, if a user is a padmin and cadmin then the cadmin's template will be used. Only one type of template will be allowed per tenant, which the load-notification-template CLI can validate. In accordance with an embodiment, if any other template exists for the tenant, then it will overwrite it with the latest one specified. This command will list the notification templates for the user:","cadmin\/padmin list-notification-templates","for example:",{"@attributes":{"id":"p-0152","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"TEMPLATE_NAME","DATE_CREATED"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"acme","20013-07-20-12:12:30"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"In accordance with an embodiment, Notification Listeners can be added to listen for specific events. For example, an EM Cloud Control team may like to be notified by a REST Endpoint when a Service Lifecycle event occurs or alerts happen. In accordance with an embodiment, to provide support for this use case, NotificationListeners can be registered for specific events, and then the events can be published to the subscribers. Example implementations of the subscriber can be a REST endpoint, or a JMS queue. For example, in the case of EM Cloud Control, a REST endpoint can be deployed on the server where the EM Cloud Control resides. The Notifier will then send event-related information to the REST endpoint:","In accordance with an embodiment, this will configure an event listener specified by the name which will listen for events at the url specified by URL.","padmin configure-event-listener --url URL [name]","In accordance with an embodiment, this will delete the event listener specified by the name:","padmin delete-event-listener name","User Messaging Service Process",{"@attributes":{"id":"p-0156","num":"0155"},"figref":"FIG. 14"},"As shown in , at step , a cloud environment that supports provisioning of enterprise applications as services is provided at one or more computers.","At step , information is received, at a notifier component, describing notifiable events that occur within the cloud environment during the provisioning or management of the services.","At step , the notifiable event information is communicated to a user messaging service at a user messaging server.","At step , the user messaging service is configured, according to one or more user communication preferences, to communicate to users, user notifications describing the notifiable events, via one or more channels, according to the preferences associated with the users.","Job Manager","In accordance with an embodiment, the system can include a job manager (Job Manager) for use with a cloud environment. For example, a cloud account user may use commands to perform operations within the cloud environment, such as the provisioning of a particular service. In accordance with an embodiment, commands can be associated with jobs. A job manager can then perform housekeeping tasks, such as purging jobs according to a retention policy, and performing any necessary cleanup. In accordance with an embodiment, command line and other interfaces can be provided that enable a user to list jobs started by users, and to perform security checks to ensure tasks are authorized.","In accordance with an embodiment, a job can be considered an entity that refers to an administration command. For example, any administration command (administrative command) annotated with @ManagedJob or @Progress annotation, or started by the client using --detach option, can be associated with a job, which is then managed by the job manager.","In accordance with an embodiment, the job manager's responsibilities include generating ids for the jobs; cleaning up for jobs which are done; serving as a registry for jobs; providing security validation for which users are authorized to access already running commands; storing the results for a specific configurable period of time; providing APIs for persisting jobs; triggering who will take over orphan jobs in case the cluster shape changes; and providing a thread pool for executing commands.",{"@attributes":{"id":"p-0164","num":"0163"},"figref":"FIG. 15"},"As shown in , in accordance with an embodiment, a job manager  can include a job registry . A job manager service , together with a job manager service API , provides access to the job manager.","In accordance with an embodiment, the job manager can be used to provision or manage services ,  to a plurality of clusters within the cloud environment, including a first cluster A , and a second cluster B .","In accordance with an embodiment, administrative command or job status can be stored in a command\/job status database , for use during processing of the jobs. For commands that take longer to execute, the system must store information related to progress status, and results. Additionally, a retention policy can be employed to save the results after the command is executed so that they can be retrieved later. For example, a housekeeping task can purge the jobs according to the retention policy, for example using a policy that is time based so in specified intervals the purging tasks will operate in to take care of the cleanup.","CLIs can also be provide to list the jobs started by a user, and perform security checks to ensure who is authorized for the various tasks.",{"@attributes":{"id":"p-0169","num":"0168"},"figref":"FIG. 16"},"As shown in , in accordance with an embodiment, when an administrative command  is received at the job manager service, the service can assign  job ids  to those administrative commands or related tasks.",{"@attributes":{"id":"p-0171","num":"0170"},"figref":"FIG. 17"},"As shown in , in accordance with an embodiment, the job manager can control, in combination with the cloud platform administration service, the processing of, e.g., administrative commands, as jobs ,  to provision the services at the clusters, or to otherwise perform actions on the platform or cloud environment.","In accordance with an embodiment, a job status information  can be stored in the command\/job status database, for use during processing of the jobs, and to support additional functions, such as administrative command progress status, and detachable administrative commands.","Job Registry","In accordance with an embodiment, a job manager service (Job Manager Service) is responsible for generating unique, atomic, human readable ids for jobs which are executed. The job ids can be similar to unix process ids, for example ranging from 1 to a max value. When an id is requested, the Job Manager will check if the id is not in use, or else allocate the next one. When the max ids are reached, the Job Manager will start from 1 and find the next non-allocated id to issue.","In accordance with an embodiment, a housekeeping task can clear the jobs from the Job Manager when the retention limits time has elapsed, and free the allocated ids.","Job States","In accordance with an embodiment, a command can be in one of the states EXECUTING\u2014the job is currently executing; or COMPLETED\u2014the job has completed execution.","A completed job can also have an exit code, which will identify if the administrative or other command has succeeded, failed or succeded with warnings, for example SUCCESS\u2014the command is successfully completed; FAILURE\u2014the command is completed and execution failed; or WARNING\u2014the command is completed and there was a warning","When a command is first started by the client, it is in an EXECUTING state. If the command has finished execution of the command then its state is changed to COMPLETED state, and the exit code is set to SUCCESS, FAILURE or WARNING. The time the command finished execution is stored for later housekeeping.","In accordance with an embodiment, a command action report can be persisted to a file. The Job Manager will purge the jobs, job ids, action reports after a defined period (retention_period) has elapsed from the time the command completed.","Job Manager Configuration","In accordance with an embodiment, CLIs can be defined for use with the job manager. The job manager can be configured as a configuration element at the domain level, for example using:",{"@attributes":{"id":"p-0181","num":"0180"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"configuremanagedjobs"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"--jobretentionperiod"]},{"entry":[{},"--cleanupinitialdelay"]},{"entry":[{},"--cleanuppollinterval"]},{"entry":[{},"--persist"]},{"entry":[{},"--inmemoryretentionperiod"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In accordance with an embodiment, the time periods can be specified in Hh|Mm|Ss for hours, minutes, or seconds, for example:",{"@attributes":{"id":"p-0183","num":"0182"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"asadmin configuremanagedjobs"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"--jobretentionperiod=36h"]},{"entry":[{},"--cleanupinitialdelay=2m"]},{"entry":[{},"--cleanuppollinterval=10m"]},{"entry":[{},"--inmemoryretentionperiod=1h"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In accordance with an embodiment, the Job Manager is configured to retain results once the command is finished for a specific duration of time. After the duration of time has elapsed for the job and associated results, the progress statuses should be removed by the Job Manager Service.","Security","In accordance with an embodiment, security can be configured that allows the administrator to control whether jobs are accessible by just the owner, or by other members of the owner's account, as well as the sys-admin. The default is to allow cloud account admins for the same account to view each others' jobs, and to allow system admins to view system admin jobs and account jobs.","Persistence","In accordance with an embodiment, the Job Manager can provide APIs to persist its contents to a file based storage, so that if the server restarts the jobs related information is not lost. Additionally if there are other jobs which were executed successfully before the server crashes, the system can retrieve information about those jobs.","CPAS Commands","In accordance with an embodiment, for every job for an account in a \/cloud scope there can be an entry in a CAM store jobs.xml file. All the jobs for all users in that account are stored in the same file. All CPAS commands can take a \u2018user\u2019 parameter that represents the user executing the command. All of the commands operating on account specific data can also take a parameter that specifies which \u2018account\u2019 to target.","Most of the time, the \u2018user\u2019 will be the account admin for the target account, and may be only associated with one account. If the \u2018user\u2019 is associated with more than one account and \u2018account\u2019 is not explicitly specified, then the command will terminate with an error and can be executed explicitly specifying an \u2018account\u2019 parameter. Thus, for a given cadmin long running command, the system can find the account the user is associated with, and persist the job in that corresponding jobs.xml.","Asadmin Commands","In accordance with an embodiment, there can be one jobs.xml for the asadmin commands (in default scope) for all users in admin realm, with a location in path relative to domain1\/config, and including information such as, for example, a Job Id Command name; time of start execution; time of end of execution; results (Messages from Action report); exit code (Success or failure); User; and Account.","In accordance with an embodiment, information can be removed from memory for old jobs after a certain period once it is persisted.","It is likely that users will look for status update on recent jobs. For example, the system can choose to purge from memory, and to persist, if a job is old (default: more than 1 hour has passed since completion), and no one has requested for progress status in a while (default: more than 1 hour). This can be configured by in-memory-retention-period. When the server restarts, the Job Manager can populate this information from the account.xml files and jobs.xml file for cadmin and asadmin commands respectively.",{"@attributes":{"id":"p-0192","num":"0191"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<xsd:schema attributeFormDefault=\u201cunqualified\u201d"},{"entry":"elementFormDefault=\u201cqualified\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"version=\u201c1.0\u201d xmlns:xsd=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d>"]},{"entry":[{},"<xsd:element name=\u201cjobs\u201d type=\u201cjobsType\u201d \/>"]},{"entry":[{},"<xsd:complexType name=\u201cjobsType\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsd:sequence>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsd:element maxOccurs=\u201cunbounded\u201d name=\u201cjob\u201d"]},{"entry":[{},"type=\u201cjobType\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/>"]},{"entry":[{},"<\/xsd:sequence>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsd:complexType>"]},{"entry":[{},"<xsd:complexType name=\u201cjobType\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsd:sequence>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsd:element name=\u201cid\u201d type=\u201cxsd:string\u201d \/>"]},{"entry":[{},"<xsd:element name=\u201cname\u201d type=\u201cxsd:string\u201d\/>"]},{"entry":[{},"<xsd:element name=\u201ctimestartexecution\u201d"]},{"entry":[{},"type=\u201cxsd:dateTime\u201d\/>"]},{"entry":[{},"<xsd:element name=\u201ctimeendexecution\u201d"]},{"entry":[{},"type=\u201cxsd:dateTime\u201d\/>"]},{"entry":[{},"<xsd:element name=\u201cexitcode\u201d"]},{"entry":[{},"type=\u201cexitcodetype\u201d\/>"]},{"entry":[{},"<xsd:element name=\u201csubject\u201d type=\u201cxsd:string\u201d\/>"]},{"entry":[{},"<xsd:element name=\u201cresults\u201d type=\u201cxsd:string\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsd:sequence>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsd:complexType>"]},{"entry":[{},"<xsd:simpleType name=\u201cexitcodetype\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsd:enumeration value=\u201cSUCCESS\u201d\/>"]},{"entry":[{},"<xsd:enumeration value=\u201cFAILURE\u201d\/>"]},{"entry":[{},"<xsd:enumeration value=\u201cWARNING\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsd:simpleType>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/xsd:schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In accordance with an embodiment, the Job Manager can load the information from the jobs.xml files on demand at server restart.","Additional CLIs","In accordance with an embodiment, a list-jobs command can be an asadmin or cadmin command. In accordance with an embodiment, the following snippets below shows how the sample output will look like for cadmin command list-jobs:",{"@attributes":{"id":"p-0195","num":"0194"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"cadmin listjobs -account john"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JOB",{},{},{},"TIME OF"]},{"entry":["ID","COMMAND","STATE","EXIT CODE","COMPLETION"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["1","createservice","COMPLETED","SUCCESS","20120815"]},{"entry":[{},{},{},{},"16:16:16 PDT"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":"Command listjobs executed successfully."}]}}]}},"br":{}},{"@attributes":{"id":"p-0196","num":"0195"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"asdmin listjobs"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JOB",{},{},{},"TIME OF"]},{"entry":["ID","COMMAND","STATE","EXIT CODE","COMPLETION"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["1","loadsdp","COMPLETED","SUCCESS","20120815"]},{"entry":[{},{},{},{},"16:16:16 PDT"]},{"entry":["2","samplecom-","COMPLETED","FAILURE","20120815"]},{"entry":[{},"mand",{},{},"18:26:30 PDT"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":"Command listjobs executed successfully."}]}}]}},"br":{}},{"@attributes":{"id":"p-0197","num":"0196"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"asadmin listjobs -terse 1"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JOB",{},{},{},"TIME OF"]},{"entry":["ID","COMMAND","STATE","EXIT CODE","COMPLETION"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["1","loadsdp","COMPLETED","SUCCESS","20120815"]},{"entry":[{},{},{},{},"16:16:16 PDT"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"In accordance with an embodiment, if both --terse and --long is specified together, then the system will use the long output which is the default for list-jobs. The following snippet shows how the sample output will look like for list-jobs with job id:",{"@attributes":{"id":"p-0199","num":"0198"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"asadmin listjobs 1"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JOB",{},{},{},"TIME OF"]},{"entry":["ID","COMMAND","STATE","EXIT CODE","COMPLETION"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["1","loadsdp","COMPLETED","SUCCESS","20120815"]},{"entry":[{},{},{},{},"16:16:16 PDT"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":"Command listjobs executed successfully."}]}}]}},"br":{}},{"@attributes":{"id":"p-0200","num":"0199"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"asadmin listjobs -terse 1"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JOB",{},{},{},"TIME OF"]},{"entry":["ID","COMMAND","STATE","EXIT CODE","COMPLETION"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["1","loadsdp","COMPLETED","SUCCESS","20120815"]},{"entry":[{},{},{},{},"16:16:16 PDT"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0201","num":"0200"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin -echo listjobs"]},{"entry":[{},"asadmin -host --localhost port 4848 --user admin --interactive=true"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"--echo=true --terse=false listjobs"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JOB",{},{},{},"TIME OF"]},{"entry":["ID","COMMAND","STATE","EXIT CODE","COMPLETION"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["123","loadsdp","COMPLETED","SUCCESS","20120815"]},{"entry":[{},{},{},{},"16:16:16 PDT"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":"Command listjobs executed successfully."}]}}]}},"br":{}},"In accordance with an embodiment, the Job Manager enables management of long running executed commands on a JVM instance.","For example, when a long running command is executed, an AdminCommandInstance context identifier can be registered, along with the job id, in the Job Manager. This id can be used in future to fetch command instance information, such as actual progress status or resulting payload, in the case that the command was finished and is still in a retention period.","Job Manager Process",{"@attributes":{"id":"p-0204","num":"0203"},"figref":"FIG. 18"},"As shown in , at step , a cloud environment that supports provisioning of enterprise applications as services is provided at one or more computers.","At step , a job manager is provided that manages the execution of jobs within the cloud environment, including their job states.","At step , administrative commands are received, at a job manager service application program interface, to be processed within the cloud environment as jobs, wherein each instance of the administrative commands is associated with a unique job identifier.","At step , information associated with the jobs is stored in a job registry.","At step , the job manager updates the job registry, including registering instances of the administrative commands together with unique job identifiers, and returns the job identifiers so that a user can retrieve command process status, and the result of the jobs can be stored in the job registry.","Fault Tolerant Job Management","In accordance with an embodiment, the job manager can support fault tolerant job processing including associating the jobs with checkpoints, recognizing a failover command for the jobs, and associating the jobs with work units of the administrative commands, and storing a state for each job upon processing each work unit of the command.","For example, in accordance with an embodiment, commands can be associated with jobs. A job manager can support fault tolerant execution of jobs in a clustered manner, including transaction support, and support for checkpoints. In accordance with an embodiment, a mechanism can be provided especially for long-running commands, to deal with several kind of failures.","Failover support can be divided into three layers, wherein each layer provides some level of support or automation for failover process:","Checkpoints\u2014which provides an API for store and retrieve command instance as a state;","FailoverAdminCommand\u2014which provides an abstract command implementation which covers state store and load process and separates execute and revert business logic; and","WorkUnitsAdminCommand\u2014which provides an infrastructure for defining list of work units where each unit is represented by separated object and hold implementation of discrete part of command's logic. The infrastructure provides state storing after each work unit. In this case, the business logic of each command is fully separated from state store and load process.",{"@attributes":{"id":"p-0216","num":"0215"},"figref":"FIG. 19"},"As shown in , in accordance with an embodiment, the job manager can include a job fault tolerance logic , which maintains job information , including information as jobs are being processed to provision services , at one or more clusters , , or to otherwise interact with the platform or cloud environment.",{"@attributes":{"id":"p-0218","num":"0217"},"figref":"FIG. 20"},"As shown in , in accordance with an embodiment, the information associated with the jobs  can include checkpoints  and work units . The job manager can write information, including job status, to the command\/job status information database, for use in the event of a job failure.",{"@attributes":{"id":"p-0220","num":"0219"},"figref":"FIG. 21"},"As shown in , in the event of a failure or failover of a particular job , the job manager can create a new job , using the previously-stored job information, including the checkpoints and work units.","In accordance with an embodiment, commands from all of the fault tolerance layers can use a variety of functionalities or services, such as:","User message\u2014which sends message to the user through server sent events (SSE). This message will be immediately printed to the CLI user on the new line. If there is progress status support, it will continue on the next line. This message will be stored in a job record (JobRecord) and can be fetched using an attach command for detached commands;","Continue on startup service\u2014which will try to execute all jobs with a stored checkpoint which were terminated by domain process termination. It covers issue with crashed process instance. Each command execution can switch on\/off this functionality for each command instance; and","Continue and revert commands\u2014which provides a CLI user interface for not-running commands with stored checkpoint. Functionalities can be defined on a domain instance, rather than server instances, which makes it suitable in platforms and cloud environments such as CloudLogic environments which may not have server instances.","Checkpoint Layer (1st Layer)","In accordance with an embodiment, each checkpoint describes a saved Job with several attributes such a command instance or admin command context (AdminCommandContext). In accordance with an embodiment, the JobManagerService can be used for this functionality. A checkpoint file can be used for checkpoint data, to avoid read\/write conflicts (lock waiting) on jobs file, including one file for each instance.","In accordance with an embodiment, to support clustered usage, checkpoint information can also be supported as an \u201cobject\u201d or \u201crecord\u201d in any suitable information system or shared data in cluster solution, including, e.g., a distributed cache or database. The Job Record must be stored when the first version of checkpoint is stored. This record is connected with necessary lifecycle functions, like cleaning after retention period.","In accordance with an embodiment, use of the Job and JobRecord can include a variety of job states, as required by a particular implementation. For example, in accordance with an embodiment, one state can represent the case where the command actually running, but has a stored checkpoint. Another state can represent the case where the command is finished, or actually failed, but can continue after some user activity. If a Job is in such a state, then its CHECKPOINT will not be deleted by admin framework at the end of activity; otherwise it will be deleted. Another state can represent the case where the command is actually reverting (asked for revert).","In accordance with an embodiment, a checkpoint is supported only for @PerLookup commands\u2014otherwise the command will be considered as failed.","In accordance with an embodiment, the checkpoint can also store payload data, which can be large\u2014it can take care to store only once per change of this data. The payload can be stored separately (in separated file) from other checkpoint data.","Workflow Example","1. User executes command on cli: asadmin some-command.","2. CLI knows from CommandModel that the command is @ManagedJob\u2014Use SSE to execute.","3. CLI executes remote command on domain using SSE.","4. Command is @ManagedJob, so Job instance is created: Job.state==PREPARED.","5. CommandRunner executes command: Job.state==RUNNING.","6. Command periodically store checkpoint: Job.state==RUNNING-RETRYABLE.","7. Command finish\u2014OK (or common FAIL): Job.state==COMPLETED.","8. Checkpoint data file is removed.","9. CLI receive state change message and prints ActionReport.","Command Detects Fixable Infrastructure Issue Example","1. User executes command on cli: asadmin some.","2. CLI knows from CommandModel that the command is @ManagedJob\u2014Use SSE to execute.","3. CLI executes remote command on domain using SSE.","4. Command is @ManagedJob, so Job instance is created: Job.state==PREPARED.","5. CommandRunner executes command: Job.state==RUNNING.","6. Command periodically store checkpoint: Job.state==RUNNING-RETRYABLE.","7. Command discover fixable infrastructural issue.","8. Command insert description of the issue into ActionReport.","9. Command updates Job.state==FAILED-RETRYABLE.","10. CLI receive state change message and prints ActionReport followed by instruction how to continue or revert (drop checkpoint) this job: use \u201casadmin continue 123\u201d to continue this job or \u201casadmin revert 123\u201d to drop this job.","API Usage Example",{"@attributes":{"id":"p-0231","num":"0230"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"@Service(name = \u201csome\u201d)"},{"entry":"@PerLookup"},{"entry":"@ManagedJob"},{"entry":"public class SomeCommand implements AdminCommand, Serializable {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private boolean continueTag = false;"]},{"entry":[{},"private String somedata;"]},{"entry":[{},"@Inject"]},{"entry":[{},"private transient JobManager jobManager;"]},{"entry":[{},"@Override"]},{"entry":[{},"public void execute(AdminCommandContext context) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (continueTag) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (jobManager.get(context.getJobId( )).getState( ) =="]},{"entry":[{},"AdminCommandState.State.REVERTING) {"]},{"entry":[{},"revert(context);"]},{"entry":[{},"return;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/It is continue do some skip"]},{"entry":[{},"} else {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"continueTag = true;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"try {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/..."]},{"entry":[{},"somedata = \u201cSOMETHING\u201d;"]},{"entry":[{},"jobManager.storeCheckpoint(this);"]},{"entry":[{},"\/\/..."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} catch (ConnectDBException ex) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"context.getActionReport( ).setMessage("]},{"entry":[{},"\u201cCan not use mandatory DB connection. Try to restart DB"]},{"entry":[{},"and continue this command.\u201d);"]},{"entry":[{},"context.getActionReport( ).setActionExitCode(ActionReport.ExitCode."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FAILURE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},"\/\/ This state will not be removed after job finish as FAILURE"]},{"entry":[{},"jobManager.storeFinalCheckpoint(this);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private void revert(AdminCommandContext context) {"]},{"entry":[{},"\/\/..."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In accordance with an embodiment, a 2nd fault tolerance layer can be provided by an abstract class which implements the AdminCommand interface:",{"@attributes":{"id":"p-0233","num":"0232"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"abstract execute(AdminCommandContext, boolean continueExecution)"},{"entry":"throws"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"NeedRevertException, CanBeFixedException, RetryException -"]},{"entry":[{},"Where"]},{"entry":[{},"continueExecution is true for re-executing."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"abstract revert(AdminCommandContext)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In accordance with an embodiment, the class provides implemented methods protected final void storeCheckpoint( ); provides support for command from command invocation; and provides support for \u201cinstance isolation\u201d. An implementation can choose if there must not be any saved checkpoint for other instances of the same command.","API Usage Example",{"@attributes":{"id":"p-0235","num":"0234"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"@Service(name = \u201csomeother\u201d)"},{"entry":"@PerLookup"},{"entry":"public class SomeOtherCommand extends FailoverAdminCommand"},{"entry":"implements"},{"entry":"Serializable {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"enum Step {"]},{"entry":[{},"FIRST, SECOND, THIRD;"]},{"entry":[{},"}"]},{"entry":[{},"private Step lastStep;"]},{"entry":[{},"private String firstData;"]},{"entry":[{},"@Override"]},{"entry":[{},"public void execute(AdminCommandContext context, boolean"]},{"entry":[{},"continueExec)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"throws NeedRevertException, CanBeFixedException,"]},{"entry":[{},"RetryException {"]},{"entry":[{},"if (continueExec) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ It is continue do some skip"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"try {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/..."]},{"entry":[{},"\/\/ Command is responsible to store enough data in own"]},{"entry":[{},"fields"]},{"entry":[{},"\/\/ to be able to determine how to continue"]},{"entry":[{},"firstData = \u201cSOMETHING\u201d;"]},{"entry":[{},"lastStep = Step.FIRST;"]},{"entry":[{},"storeCheckpoint( );"]},{"entry":[{},"\/\/..."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} catch (ConnectDBException ex) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"context.getActionReport( ).setMessage("]},{"entry":[{},"\u201cCan not use mandatory DB connection. Try to restart DB and"]},{"entry":[{},"continue"]},{"entry":[{},"this command.\u201d);"]},{"entry":[{},"throw new CanBeFixedException(ex);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}}"]},{"entry":[{},"@Override"]},{"entry":[{},"public void revert(AdminCommandContext context) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/Revert logic"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In accordance with an embodiment, while the 3rd layer will support for chain of work units, if automated checkpointing and other features are found too restrictive, the 2nd layer can be used for custom work unit chain implementation, which helps organize the business logic of the command, but the developer can still choose variety of chain driving details:",{"@attributes":{"id":"p-0237","num":"0236"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public class WUAdminCommand extends FailoverAdminCommand {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface WorkUnit {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void execute( ) throws WorkUnitException;"]},{"entry":[{},"public void revert( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Deque<WorkUnit> revertStack = new ArrayDeque<WorkUnit>( );"]},{"entry":[{},"protected <T extends WorkUnit> T exec(T aWorkUnit) throws"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"WorkUnitException {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"revertStack.add(aWorkUnit);"]},{"entry":[{},"aWorkUnit.execute( );"]},{"entry":[{},"return aWorkUnit;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"@Override"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public void execute(AdminCommandContext context, boolean"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"continueExec) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/Choose sequence of command here base on dynamic algorithm"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"@Override"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public void revert(AdminCommandContext context, boolean"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"continueExec) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/Rewert can be done as simple as is in this example or reflecting"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"some"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ inner logic of the command. Skipping of unrevertable work"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"units."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Retry some groups of work units. ..."]},{"entry":[{},"for (WorkUnit workUnit : revertStack) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"workUnit.revert( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In accordance with an embodiment, a 3rd fault tolerance layer provides a list of classes implementing work units (WorkUnit), each of which executes one-by-one and stores checkpoint after each execution. This can be changed using an extension list which is also used to define command model (parameters) for CLI, a combination of all params in WorkUnits.","In accordance with an embodiment, WorkUnits can contains @Param annotated parameters, which can be injected. If any WorkUnit in list implements @ProgressStatus, then it will be supported by the whole command, and will be automatically implemented based on WorkUnit count and its progress. Both continue and revert execution will start from the last failed work unit.","API Usage Example\u2014Simple Example",{"@attributes":{"id":"p-0240","num":"0239"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public class OneWorkUnit implements WorkUnit<ComplexCommand> {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class TwoWorkUnit implements"]},{"entry":[{},"WorkUnit<ComplexCommand> {"]},{"entry":[{},"@Param(optional = true, defaultValue = \u201cvalue\u201d)"]},{"entry":[{},"private String some;"]},{"entry":[{},"public void execute(ComplexCommand sharedData,"]},{"entry":[{},"AdminCommandContext"]},{"entry":[{},"context, boolean reexecuted) {"]},{"entry":[{},"\/\/..."]},{"entry":[{},"sharedData.setSomethingUsable(usable);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"@Service(name = \u201cthree\u201d)"},{"entry":"@PerLookup"},{"entry":"public class ThreeCommand extends FailoverAdminCommand implements"},{"entry":"WorkUnit<ComplexCommand> {"},{"entry":"\/\/..."},{"entry":"}"},{"entry":"@Service(name = \u201ccomplex\u201d)"},{"entry":"@PerLookup"},{"entry":"public class ComplexCommand extends WorkUnitsAdminCommand {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private static final List<Class<? extends WorkUnit>>"]},{"entry":[{},"WORK_UNITS;"]},{"entry":[{},"static {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"List<Class<? extends WorkUnit>> wus = new"]},{"entry":[{},"ArrayList<Class<?"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Extends"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WorkUnit>>(3);"]},{"entry":[{},"wus.add(OneWorkUnit.class);"]},{"entry":[{},"wus.add(TwoWorkUnit.class);"]},{"entry":[{},"wus.add(ThreeCommand.class);"]},{"entry":[{},"WORK_UNITS = Collections.unmodifiableList(wus);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"@Override"]},{"entry":[{},"protected List<Class<? extends WorkUnit>> getWorkUnits( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return WORK_UNITS;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0241","num":"0240"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public class OneWorkUnit implements WorkUnit<ComplexCommand> {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/..."]},{"entry":[{},"public void execute(ComplexCommand sharedData,"]},{"entry":[{},"AdminCommandContext"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"context,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003boolean reexecuted) {"]},{"entry":[{},"\/\/..."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"sharedData.setNext(TwoWorkUnit.class);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"public class TwoWorkUnit implements WorkUnit<ComplexCommand> {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"@Param(optional = true, defaultValue = \u201cvalue\u201d)"]},{"entry":[{},"private String some;"]},{"entry":[{},"public void execute(ComplexCommand sharedData,"]},{"entry":[{},"AdminCommandContext"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"context,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"boolean reexecuted) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/..."]},{"entry":[{},"if (something) {"]},{"entry":[{},"sharedData.setNext(ThreeCommand.class);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"sharedData.setNext(null); \/\/End of job"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}}"]},{"entry":[{},"\/\/..."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"public class ThreeCommand implements WorkUnit<ComplexCommand>"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"@Service(name = \u201ccomplex\u201d)"},{"entry":"@PerLookup"},{"entry":"public class ComplexCommand extends WorkUnitsAdminCommand {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/We will provide dynamic order of work units but list off all"]},{"entry":[{},"\/\/ alternatives is still provided to be used for command parameter"]},{"entry":[{},"model"]},{"entry":[{},"\/\/ generation for CLI work units can define parameters"]},{"entry":[{},"private static final List<Class<? extends FailoverAdminCommand>>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"WORK_UNITS;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"static {"]},{"entry":[{},"List<Class<? extends WorkUnit>> wus ="]},{"entry":[{},"new ArrayList<Class<? extends FailoverAdminCommand>>(3);"]},{"entry":[{},"wus.add(OneWorkUnit.class);"]},{"entry":[{},"wus.add(TwoWorkUnit.class);"]},{"entry":[{},"wus.add(ThreeCommand.class);"]},{"entry":[{},"WORK_UNITS = Collections.unmodifiableList(wus);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"private Class<? extends WorkUnit> next = OneWorkUnit.class;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void setNext(Class<? extends WorkUnit> next) {"]},{"entry":[{},"this.next = next;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"@Override"]},{"entry":[{},"protected List<Class<? extends WorkUnit>> getWorkUnits( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return WORK_UNITS;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"@Override"]},{"entry":[{},"protected Class<? extends WorkUnit>"]},{"entry":[{},"getNextWorkUnitClass(List<WorkUnit>"]},{"entry":[{},"finishedWorkUnits) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return next;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In accordance with an embodiment, a job-related user message can be a simple string which is printed to the CLI user terminal during command execution. A @ManagedJob can be stored in JobRecord and printed before Action Report message when attach is used.","Usage Example",{"@attributes":{"id":"p-0243","num":"0242"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class SomeOtherCommand extends FailoverAdminCommand {"},{"entry":"\u2003public void revert (AdminCommandContext context, State state) {"},{"entry":"\u2003\/\/..."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"sendMessage(strings.getString(\u201csomeother.reverting\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}}"},{"entry":"class SomeCommand implement AdminCommand {"},{"entry":"\u2003public void execute(AdminCommandContext context) {"},{"entry":"\u2003\/\/..."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"context.getEventBroker( ).getUtils( ).sendMessage(strings.getString"]},{"entry":[{},"(\u201csome.reverting\u201d);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In accordance with an embodiment, recovery of long running commands after server crashes can be supported, making it possible to switch on\/off for server startup. This feature restarts only those commands which actually are running when a domain crashes. The feature can also respect job hierarchy, so that no commands executed from commands will be automatically re-executed. Execution will start after the server is up and running.","Workflow Example","1. User executes command on cli: asadmin some.","2. CLI knows from CommandModel that the command is @ManagedJob\u2014Use SSE to execute.","3. CLI executes remote command on domain using SSE.","4. Command is @ManagedJob, so Job instance is created: Job.state==PREPARED.","5. CommandRunner executes command: Job.state==RUNNING.","6. Command periodically store checkpoint: Job.state==RUNNING-RETRYABLE.","7. Domain freeze and user decide to kill it.","8. CLI discovers that http connection drops before final state change message comes","9. CLI knows from previews state change message that job was in RUNNING-RETRYABLE state and inform user: _Server connection is lost. If it is network issue then command probably continues in execution and you can check it using \u201casadmin attach 123\u201d command. If domain is because domain is down your command will continue after domain will be back in operational state.\n\n10. User first try \u201casadmin attach 123\u201d but it shows that server is probably down.\n\n11. User starts the server.\n\n12. Server automatically continue in running command from the last checkpoint.\n\n13. It freeze again\u2014user must kill it.\n\n14. User starts the server using switch to NOT continue in running jobs.\n\n15. User lists jobs (asadmin list-jobs) and decide which one was source of the crash (if any).\n\n16. User call rever on this job \u201casadmin rever 123\u201d. Or fix the reason (external system) and continue in that job \u201casadmin continue 123\u201d.\n\nContinue and Revert Commands\n","In accordance with an embodiment, the system can support the use of continue and revert commands which \u201cexecutes\u201d job (command) from a last checkpoint.","In accordance with an embodiment, a revert command can be used just once. If it fails, then all checkpoint data of the command are removed.","Commands must implement a revert method to revert all changed entities into their original state. A return code on CLI and message can be similar to the attach command pattern. If a command is connected, then its return code is used as CLI return code. Messages from connected commands are printed first, while any message from continue\/revert command is printed next.","Workflow Example","1. User decide to revert: asadmin revert 123.","2. Revert command is executed.","3. It loads data from checkpoint using JobManager.","4. Change Job state from CHECKPOINT-FAILD to CHECKPOINT-REVERT (revert is only for ONE try. If fail then fail).","5. Execute command.","6. Remove checkpoint data (file).","7. Return Action Report to the user continue is similar but can ends again in CHECKPOINT-FAILD state.","AdminCommandContext","In accordance with an embodiment, a string getJobId( ) can be added to AdminCommandContext. The value will be null for non-managed commands.","Job and JobManager","In accordance with an embodiment, job related entities and interfaces can include a New Job. State enumeration valuescan include RUNNING-RETRYABLE\u2014command has saved checkpoint and running; FAILED-RETRYABLE\u2014command failed but it is possible to re-execute it (or revert); and REVERTING\u2014command is running in revert mode. Any checkpoint will be removed after any result.","In accordance with an embodiment, a command can change Job.state to CHECKPOINT-FAILED value before exits, which can cause a checkpoint to be left persisted. A Job.state can also be transferred to client using SSE, and the client can provide information how to re-execute or revert.","Job Hierarchy","In accordance with an embodiment, a Job hierarchy supports command to command invocation cases.","For example, when a command invokes other commands, it is possible to provide a parent jobId to CommandInvocation. The ChildJob lifecycle (retention period, . . . ) is fully driven by parent job; will not be on any list (attach command result, . . . ); and its checkpoint will not be directly re-executed by a server startup job or by a continue or revert command.","Checkpoint","In accordance with an embodiment, a checkpoint contains all mandatory data for command resurrection.","Payload","In accordance with an embodiment, a payload covers large data (files) in AdminCommandFramework. There can be two payload instances, for incoming and outgoing data, both of which have a few special behaviors, including containing data as a streams, or containing data as a file. The incoming payload is never changed by command logic, and the outgoing is changed only sporadically. Payloads can be stored separately from the checkpoint and updated only when is changed. In accordance with an embodiment, a zip format can be used for storing.","File Format","In accordance with an embodiment, each Job can store its payload in a separated file in the same directory with its job.xml file. For example, filename: <jobid>.checkpoint; filenames for payloads: <jobid>.inpayload and <jobid>.outpayload. The files can be removed as soon as Job record will be removed from the job.xml file.","Resurrection","In accordance with an embodiment, when a command is loaded from a stored state, it will be represented as a deserialized command instance.","FailoverAdminCommand","In accordance with an embodiment, a failoveradmincommand can be based on job hierarchy support. A getCommandInvocation( ) method provides a CommandInvocation which is ready for \u201csub-Job\u201d execution, and will be executed as @ManagedJob. Continue(jobId) and revert(jobId) methods can execute a child job in relevant state with last checkpoint.","Command Instance Isolation","In accordance with an embodiment, a saved command instance can be executed when exist checkpoint for other \u201csame\u201d command. Command implementation can choose its isolation level, for example:","COMMAND_NAME: Do not execute current command instance if exists checkpoint for command of the same name","COMMAND_PARAMETERS\u2014Do not execute current command instance if exists checkpoint for command of the same name and with equals parameters (ParameterMap)","NONE\u2014Command will execute.","In case of a command isolation conflict, information can be written to an Action Report as a FAILED Action Report message, and\/or the user can be asked to continue or revert the conflicted job (jobId).","Workunits Support","In accordance with an embodiment, the command must be implemented as WorkUnitAdminCommand and provide list of WorkUnits, which can be used to create command logic.","In accordance with an embodiment, by default, this list is accepted as a chain and executed one by one. In accordance with an embodiment, before and after each execution a checkpoint is taken. The default revert is provided as a backward revert of each already executed work unit. If a command is re-executed, it starts from the last unfinished (or failed) work unit.","In accordance with an embodiment, a List of WorkUnits can be provided as a list of class. Instantiation is done by framework and @Params are injected. If WorkUnit is @Service, then HK2 is used to instantiate it.","In accordance with an embodiment, the List of WorkUnits is also used to define overall command model. A set of params are based on @Param declaration in WorkUnits.","In accordance with an embodiment, ProgressStatus is also driven by list of WorkUnits. If any work unit is annotated @ProgressStatus then whole command supports @ProgressStatus.","In accordance with an embodiment, by default each WorkUnit has weight 1 and can be also changed. If some of WorkUnits does not support progress status it is also compute with weight 1. Name of actual WorkUnit will be printed only if this name is part of @ProgressStatus annotation.","In accordance with an embodiment, an execute and revert WorkUnit method contains WorkUnitAdminCommand as a parameter. It can be used to get\/set shared data based on a current command logic. Selecting of execution order can be customized using nextWorkUnitClass( ) method and its instantiation using nextWorkUnit( ) method. This also works for revert, and can be used for very complex workflow definition. Easy workflow customization can be done directly from WorkUnits.","In accordance with an embodiment, WorkUnits can be also implemented as specialized AdminCommands. This pattern can be used to provide fine grain tool for solving special situations for the CLI user.","CommandModelProvider","In accordance with an embodiment, a provider can be used to compile all models of work units. Parameters with same name are consider to be same; if it has a different type then a RuntimeException is thrown.","@ManagedJob","In accordance with an embodiment, this annotation will be applied to command also when command implements or extends @ManagedJob interface or class. FailoverAdminCommands will also be annotated @ManagedJob. A Job instance with ID will be created and SSE will be used for its remote execution.","Utility Class for AdminCommandEventBroker","In accordance with an embodiment, this class can be used to cover common events used in AdminCommandEventBroker, for example user messages.","Continue and Revert Commands","In accordance with an embodiment, commands for continue and revert job with checkpoint can be provided.","Continue on Startup Service","In accordance with an embodiment, the job service re-executes commands with checkpoint which was running when server crashed. This will not block server startup state while server is probably operational during such period. Messages and Action Report result will be logged into the server.log file.","Public Interfaces","In accordance with an embodiment, different public interfaces can be provided, for example FailoverAdminCommand: Basic support class for potential failing commands; WorkUnitsAdminCommand: More complex support for potential failing commands; and Utility class in admin event broker for user messages.","Fault Tolerant Job Management Process",{"@attributes":{"id":"p-0278","num":"0277"},"figref":"FIG. 22"},"As shown in , at step , a cloud environment that supports provisioning of enterprise applications as services is provided at one or more computers.","At step , a job manager is provided that manages the execution of jobs within the cloud environment, including their job states.","At step , administrative commands are received, at a job manager service application program interface, to be processed within the cloud environment as jobs, wherein each instance of the administrative commands is associated with a unique job identifier.","At step , a fault tolerant job processing logic is provided at the job manager, including associating the jobs with checkpoints, recognizing failover commands for the jobs, associating the jobs with units of a work command, and storing a state for each job upon processing each unit of a work command.","Administrative Command Progress Status","In accordance with an embodiment, the system can include a means for providing administration command progress status in a cloud environment. In accordance with an embodiment, a command line interface allows a user to issue a command to be processed within the cloud environment as a job. During progress of a job associated with an annotated command, a status associated with the progress of the job is determined and provided to the command line interface. For example, the system can provide job progress status during these operations, to reassure the user that the operation is proceeding normally.","For example, in accordance with an embodiment, if the user has defined a large cluster it may take a significant amount of time to process admin task over the entire cluster, including, for example, starting the instances which are associated with the cluster.","Similarly, deploying a large application can take a significant amount of time. Providing on-going progress updates during these operations reassures the user that the operation is proceeding normally.",{"@attributes":{"id":"p-0286","num":"0285"},"figref":"FIG. 23"},"As shown in , in accordance with an embodiment, an administration interface is provided , which supports the use of a command line interface . The administrative interface allows administrative commands to be processed as jobs  within the cloud environment.","In accordance with an embodiment, the progress status of an Admin Command is considered as its state, and its change (progress) is considered an event. This means that the progress API has an analogy with walking, wherein making progress is equivalent to doing steps.","Calculated percentage of the trip is possible when the system can determine or otherwise knows the amount of finished steps, and the amount of remaining steps. Any trip can be finished before reaching a planned destination, for example due to unforeseen incident. The usual trip is simple but there are also more complicated cases. Progress must be calculated for whole trip of, e.g., all \u201cwalkers\u201d, but the provided API for each walker must be simple to use.","In accordance with an embodiment, progress status is composite, providing simple event support for Admin Framework developers as well as for Admin Command developers.","In accordance with an embodiment, the progress status can use Server Send Events (SSE) technology, to transfer relevant events to a remote client.",{"@attributes":{"id":"p-0292","num":"0291"},"figref":"FIG. 24"},"As shown in , a user can issue commands , including administrative commands , which are communicate by the administration interface  to the job manager service, to be executed as jobs , .","Information about the job status can be stored as command\/job progress information  in the command\/job status information database.",{"@attributes":{"id":"p-0295","num":"0294"},"figref":"FIG. 25"},"As shown in , as the commands are processed, the job manager can provide job status information , to the command line interface where it can be displayed as command progress information , or otherwise provided  to the user.","CLI User Perspective","In accordance with an embodiment, the user can use a CLI (asadmin or cadmin) in usual way. If the user does not use a --terse option, and if the executed command is designed for providing progress status, then progress status messages will be printed to the stdout until command will be finished. Then the system will display the last progress status message replaced by the command result.","In accordance with an embodiment, progress status messaged include a description of the percentage of finished work (if possible to calculate) or by increasing number of steps. This output can be followed by progress message if provided, for example: {{PORTION [[message_context_chain:] message]}}, wherein PORTION includes the number of steps or percentage (xxx %) of finished progress or number of steps of finished logic; a message_context_chain: a colon separated list of ProgressStatus components names defines source\/context of the message; a message: and\/or a last progress message.",{"@attributes":{"id":"p-0299","num":"0298"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"% cadmin deploy foo.war"]},{"entry":[{},"13% extracting war file contents."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In accordance with an embodiment, messages will replace each other using a carriage return (CR) on beginning, and spaces at the end of message if shorter then previous one. When a command is finished, the last message will be replaced with white spaces and then again replaced by the command result.","Admin Command Developer Perspective","In accordance with an embodiment, progress status API has two parts: @Progress annotation and instance of ProgressStatus class.","@Progress Annotation","In accordance with an embodiment, each AdminCommand instance which supports progress status must be annotated with @Progress annotation, which has two optional parameters:","totalStepCount: in which case progress is represented by amount of steps. As soon as the system knows an expected total steps count it can print progress in percentage format. The value can be also provided (or updated) using an API, but it is recommended to provide it in annotation if possible to ensure best user experience.","name: in which the default value is null. Name can be used when a progress message is printed to identify from where was message send. For example, a progress message can help a user to be oriented in what kind of command logic is currently done (parsing, loading, copying, . . . ). Messages are an optional part when progress status API is used.","ProgressStatus","In accordance with an embodiment, an instance of ProgressStatus API can be accessed from the CommandContext. If the AdminCommand is not annotated with @Progress annotation then a ProgressStatus API will throw exception when is used.",{"@attributes":{"id":"p-0306","num":"0305"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ The expected number of steps for this command is 8."},{"entry":"@Progress(totalStepCount=8)"},{"entry":"public class ExampleCommand implements AdminCommand {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void execute(AdminCommandContext context) {"]},{"entry":[{},"ProgressStatus ps = context.getProgressStatus( );"]},{"entry":[{},"ActionReport report = context.getActionReport( );"]},{"entry":[{},"\/\/ Generate an initial progress messages but don't"]},{"entry":[{},"\/\/ advance the progress (e.g. stay at 0%)"]},{"entry":[{},"ps.progress(\u201cverifying war file.\u201d);"]},{"entry":[{},"\/\/ Do command work"]},{"entry":[{},"\/\/ Generate a new progress message and advance one step."]},{"entry":[{},"ps.progress(\u201cextracting war file contents.\u201d, 1);"]},{"entry":[{},"\/\/ Do command work"]},{"entry":[{},"ps.progress(\u201cdeploying application.\u201d, 1);"]},{"entry":[{},"\/\/ Do command work"]},{"entry":[{},"\/\/ Reuse the last progress message and advance the progress one step."]},{"entry":[{},"ps.progress(1);"]},{"entry":[{},"\/\/ Do command work"]},{"entry":[{},"\/\/ Generate a new progress message and advance two steps,"]},{"entry":[{},"ps.progress(\u201cverifying application.\u201d, 2);"]},{"entry":[{},"\/\/ Do command work"]},{"entry":[{},"ps.progress(\u201cupdating domain configuration.\u201d, 2);"]},{"entry":[{},"\/\/ Do command work"]},{"entry":[{},"\/\/ Generate the final progress message. Advance the progress to the"]},{"entry":[{},"\/\/ totalStepCount (8) == 100%"]},{"entry":[{},"ps.complete(\u201cApplication has been deployed.\u201d);"]},{"entry":[{},"report.setActionExitCode (ActionReport.ExitCode.SUCCESS);"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"public void execute(AdminCommandContext context) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ProgressStatus ps = context.getProgressStatus( );"]},{"entry":[{},"\/\/ First somehow compute, how many \u201csteps\u201d take this command to"]},{"entry":[{},"its end."]},{"entry":[{},"\/\/ For example based on file count or just some fixed count."]},{"entry":[{},"\/\/ If we can not guess expected count of steps, we will not call this"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"method"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ and progress portion (percentage) will be computed as unknown"]},{"entry":[{},"\/\/ until finished or set the value."]},{"entry":[{},"\/\/ When progress reach totalStepCount this progressStatus"]},{"entry":[{},"isCompleted."]},{"entry":[{},"ps.setTotalStepCount(42);"]},{"entry":[{},"..."]},{"entry":[{},"ps.progress(1); \/\/One step"]},{"entry":[{},"..."]},{"entry":[{},"for (File f : files) {"]},{"entry":[{},"ps.progress(\u201cCopy: \u201d + f.getName( ), 1); \/\/Step with status message."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"ps.progress(\u201cInput verified\u201d, 3); \/\/Go faster"]},{"entry":[{},"..."]},{"entry":[{},"ps.progress(\u201cAbout to do some staff\u201d); \/\/Just new message no exact"]},{"entry":[{},"progress"]},{"entry":[{},"ProgressStatus subStatus = ps.createChild("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cSome complex staff\u201d, \/\/ optional named child can be shown on"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"user info"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"5 \/\/ covering progress how many our progress steps will be"]},{"entry":[{},"\u201cwalked\u201d"]},{"entry":[{},"\/\/ when substatus will be completed"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ it is usual status."]},{"entry":[{},"\/\/ Called implementation can set its totalStepsCount and do progress"]},{"entry":[{},"doSomeComplexStaff(subStatus);"]},{"entry":[{},"\/\/ Now, we realize that our expected totalStepCount was to small and"]},{"entry":[{},"we"]},{"entry":[{},"\/\/ have to add some more. If we do it directly, it can be shown to"]},{"entry":[{},"\/\/ user as a antiprogress. For example from 82% to 78% it is strange."]},{"entry":[{},"\/\/ But we have other possibility. We can use child progress as follows"]},{"entry":[{},"ps = ps.createChild(null \/* anonymous child no"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"visible name for user*\/,"]},{"entry":[{},"ps.getRemainingStepCount \/* unfinished steps *\/);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ And here it is new"]},{"entry":[{},"count of steps without antiprogress"]},{"entry":[{},"ps.setTotalStepCount(100);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"ReST Client Developer Perspective","In accordance with an embodiment, progress status can be provided on a ReST interface only if AdminCommand implementation supports it, and the ReST client will open SSE connection. The client has to execute command on public ReST management API with header Accept: text\/event-stream. A similar approach is used also on management private\/command ReST interface.","SSE Events","In accordance with an embodiment, progress status can be provided in the form of SSE Events, as well as result (ActionReport), and other possible custom events. Data of events are in JSON format. In accordance with an embodiment, important events can include: ProgressStatus\/state\u2014Current state of ProgressStatus instance. ProgressStatus\/change\u2014Event in progress status. Some value was changed. AdminCommandInstance\/stateChanged\u2014Admin framework change state of executed command. In last change to state \u201cCOMPLETED\u201d it will contain a result in the form of ActionReport.","SSE Example",{"@attributes":{"id":"p-0309","num":"0308"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"event: ProgressStatus\/state"},{"entry":"data: {\u201cprogress-status\u201d:{\u201cname\u201d:\u201cprogress-simple\u201d,\u201cid\u201d:\u201c1\u201d,"},{"entry":"\u201ctotal-step-count\u201d:10,\u201ccurrent-step-count\u201d:0,\u201ccomplete\u201d:false}}"},{"entry":"event: ProgressStatus\/change"},{"entry":"data: {\u201cprogress-statusevent\u201d:{\u201cchanged\u201d:[\u201cTOTAL_STEPS\u201d],\u201cprogress-status\u201d:"},{"entry":"{\u201cname\u201d:\u201cprogress-simple\u201d,\u201cid\u201d:\u201c1\u201d,\u201ctotalstepcount\u201d:0,\u201ccurrent-step-count\u201d:"},{"entry":"0,\u201ccomplete\u201d:false}}}"},{"entry":"event: ProgressStatus\/change"},{"entry":"data: {\u201cprogress-statusevent\u201d:{\u201cchanged\u201d:[\u201cSTEPS\u201d],\u201cmessage\u201d:\u201cWorking on"},{"entry":"main part...\u201d,\u201cprogress-status\u201d:{\u201cname\u201d:\u201cprogress-simple,\u201cid\u201d:\u201c1\u201d,\u201ctotal-step-"},{"entry":"count\u201d:"},{"entry":"10,\u201ccurrent-step-count\u201d:1,\u201ccomplete\u201d:false}}}"},{"entry":"event: AdminCommandInstance\/stateChanged"},{"entry":"data: {\u201cstate\u201d:\u201cCOMPLETED\u201d,\u201cid\u201d:\u201c1\u201d,\u201cempty-payload\u201d:true,\u201caction-report\u201d:"},{"entry":"{\u201ccommand\u201d:\u201cprogress-simple AdminCommand\u201d,\u201cexit_code\u201d:\u201cSUCCESS\u201d}}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In accordance with an embodiment, if a JAX-RS 2.0 client is used than it is recommended to use Providers from Nucleus admin-util module for converting events into object representation. Other Java clients can use these providers directly from own code. A ProgressStatusClient located in a same module can be used to reconstruct ProgressStatus from these events.","ActionReport (Result of Command) in SSE Communication","In accordance with an embodiment, because SSE provides data in form of Events, an action report (result from the command) is provided also in event. It is part of AdminCommandInstance\/stateChanged event. This event generally inform about change of command state in perspective of admin framework. In accordance with an embodiment, attributes can include:","state\u2014if the state is COMPLETED then ActionReport is provided.","id\u2014ID of the command instance in JobManager. Can be used in combination with some commands to retrieve related data from job manager.","empty-payload\u2014if the command result contains outbound payload (there are files to download) this attribute is set to false. Because it is not effective to transfer large data using SSE this attribute is provided. If there are some payload then client can retrieve it using _get-payload command in combination with ID. (Note that _get_payload command is ready for be used just ones per command execution.","action-report\u2014the ActionReport Server will close SSE connection after COMPLETED event is send.","Java Client Developer Perspective","In accordance with an embodiment, Java clients can use RemoteRestAdminCommand to execute any command. This implementation automatically recognizes commands which supports event sending (including ProgressStatus), and uses SSE for the execution. A user of RemoteRestAdminCommand can register a listener in it before execution to listen on any SSE event.","Event-Based Integration with Admin Commands","In accordance with an embodiment, an API can be provided for local event based integration with command instance. It can be used for several use cases like Realize call back from admin command to admin command framework or to admin command invoker (any business logic which starts admin command); or to realize communication between concurrently running command instances on a same, for example: SSE Connection from remote client was closed\/New observer (listener) attached\/Another instance of same command executed.","Class Role","In accordance with an embodiment, an AdminCommandEventBroker provides a Central point of basic event integration, including providing an API for registering AdminCommandEventListers and for event firing. Each command instance has its own instance of AdminCommandEventBroker. An AdminCommandEventListener can be registered in AdminCommandEventBroker to listen for particular events. All events which names are valid within given regular expression are forwarded to the listener instance.","Events","In accordance with an embodiment, an event is a pair of name and data. Name can be a not-null String value which is used primary for event identification and listeners are connected to events by regular expression of this names. Data can be any Object or null.","In accordance with an embodiment, event names can be constructed hierarchically based on its semantics from most general to most specific sub-name. It can help to connect listener to as specific events as needed. More exactly it can help to create proper and shorter regular expression, for example something\/start or something\/end. Special event names with name prefixed by local\/are not transferred to the client using SSE (see Server Sent Events (SSE) on remote command execution).","@ManagedJob","In accordance with an embodiment, any admin command annotated with @ManagedJob OR with annotation which is annotated with @ManagedJob OR started by the client using --detach option is a command which is managed by the Job Manager. Such commands are processed with several added features: the commands will have job ids generated; the commands will be registered with the JobManager and their lifecycle managed by the Job Manager; the results, payload for these commands can be persisted to disk; and the CLI will use SSE for remote execution.","Server Sent Events (SSE) on Remote Command Execution","In accordance with an embodiment, remote execution can support SSE events when the client uses a standard Accept: text\/event-stream header. The command will be executed in thread from dedicated pool (managed by JobManager), as a managed command. The response will not be closed, but will be connected to AdminCommandEventBroker and all events with data will be possible to marshal. The response is closed by server side when command is finished and ActionReport is transferred. A Client can close it in any time without any effect to the running command instance.","Payload.Outbound and _Get-Payload Remote Command","In accordance with an embodiment, a command's result can contain files (Payload.Outbound). These files are not transferred using SSE but info of existing payload is part of AdminCommandState together with ActionReport and id. Client can ask for payload with follow-up request using _get-payload command. Hidden _get-payload command is based on Job Manager Service. The Payload.Outbound will not be saved on disk and will be removed after first download, which helps to keep memory footprint and performance impact as light as possible.","RemoteRestAdminCommand with Listeners","In accordance with an embodiment, a RemoteRestAdminCommand represents an API for remote command execution. A User can tag command to be executed using SSE (automatic for commands annotated with @ManagedJob). All events from SSE connection fires event here with original name and SseInboundEvent instance as data.","CLI and Managed Commands","In accordance with an embodiment, user executes command (example: asadmin deploy foo.ear)","The CLI checks CommandModel to determine if it is managed command\u2014If not, nothing is changed and the command is executed as it does today.","The CLI calls ReST interface on the server with the Accept: text\/event-stream header to execute command.","The CLI listen for command state events: this will contain id of command instance as soon as command is executed and ActionReport together with attribute if there is any Payload.Outbound (files) in result when ends.","The CLI forwards particular events to registered listeners.","On the server, the command is executed in a separate thread and SSE response is connected as a listener to the AdminCommandEventBroker instance.","The CLI will close connection after ActionReport is received. State event containing Action Report also contains attribute to determine if there is any Payload.Outbound (files to transfer) in result. If there is Payload.Outbound in result, CLI will try to download it using hidden _get-payload command.","Progress Status","In accordance with an embodiment, progress status can be represented by a state composite object. The components of this composite will represent branches of command replication, command sub-logic (any business logic with separate life cycle), commands executed from command and complementary commands.","A current progress represents portion of finished work, not necessarily a portion of time. Current progress is represented primarily by steps: if the total number of steps to complete the command is not declared by the command implementation then the progress status will be represented as an increasing number (of steps). If\/when the command establishes the total step count the progress status can be represented to the user as a percentage.","Progress also hold message with current state. This message is an optional parameter within each progress change. Each progress status component can be also named. A source\/context of each message can be identified to the user by a chain of these names. If admin command is finished but progress status is not completed it will be completed by admin framework. Command progress state changes are events in AdminCommandEventBroker and are transferred using SSE to client.","Local Commands","In accordance with an embodiment, local commands (CLICommand) execution is not affected by progress status solution. However CLICommands can use client ProgressStatus API to print own progress status in same format.","Compute Percentage",{"@attributes":{"id":"p-0336","num":"0335"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"float computeCompletePortion( ) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (isComplete( )) {"]},{"entry":[{},"return 1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"float realSteps = computeCompleteSteps( );"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (realSteps < 0) {"]},{"entry":[{},"return 1;"]},{"entry":[{},"}"]},{"entry":[{},"if (realSteps == 0) {"]},{"entry":[{},"return 0;"]},{"entry":[{},"}"]},{"entry":[{},"if (totalStepCount < 0) {"]},{"entry":[{},"return 1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} else if (totalStepCount > 0) {"]},{"entry":[{},"return realSteps \/ ((float) totalStepCount);"]},{"entry":[{},"} else {"]},{"entry":[{},"return 1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"float computeCompleteSteps( ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (isComplete( )) {"]},{"entry":[{},"return totalStepCount;"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"float realStepCount = currentStepCount;"]},{"entry":[{},"for (ChildProgressStatus child : children) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"float","childPortion","="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"child.progressStatus.computeCompletePortion( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (childPortion < 0) {"]},{"entry":[{},"return 1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"realStepCount += ((float) child.getAllocatedSteps( )) *"]},{"entry":[{},"childPortion;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return realStepCount;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In accordance with an embodiment, AdminCommands executed on DAS can be replicated to the cluster('s) servers. The source of replication can be either CommandRunner or AdminCommand implementation. In both cases the progress on remote servers will be replicated back to CommandProgress as child objects of the composite. Remote AdminCommands are executed from DAS to servers using RemoteAdminCommand which is also used from CLI to DAS. Client logic can be shared.",{"@attributes":{"id":"p-0338","num":"0337"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"10%: deploy: Some message"]},{"entry":[{},"40%: deploy: instance1: Some message"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"In accordance with an embodiment, the platform or cloud environments admin framework has the feature to define Supplementary Commands. It is possible to define AdminCommand which will be executed before or after or after replication of another standard command. Any command logic can be enhanced by this method. Semantics of this enhanced method is that added logic is part of original command. Progress status will reflect it by using the following rules:","If supplementary command supports ProgressStatus but original command not then ProgressStatus NOT supported.","If original command supports ProgressStatus but supplementary command not then ProgressStatus is supported and portion of steps \u201cdedicated\u201d to supplementary command is 0.","If ProgressStatus is supported in original command and in some supplementary command, then its percentage form can be printed after all commands in the chain will define totalStepCount. However, it is recommended to define it directly in annotation of supplementary command.","All commands in chain (original and supplementary) will have their own standard ProgressStatus instance. Admin framework will connect them to correct composite.","CLI Output Example",{"@attributes":{"id":"p-0344","num":"0343"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"10%: prepareSomething: Some message"]},{"entry":[{},"20%: something: Other message"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0345","num":"0344"},"figref":"FIG. 26"},"As shown in , at step , a cloud environment that supports provisioning of enterprise applications as services is provided at one or more computers.","At step , a job manager is provided that manages the execution of jobs within the cloud environment, including their job states.","At step , administrative commands are received, at a job manager service application program interface, to be processed within the cloud environment as jobs, wherein each instance of the administrative commands is associated with a unique job identifier.","At step , a command line interface is provided that allows a user to issue a command to be processed within the cloud environment as a job.","At step , during progress of a job associated with an annotated command, the system can determine a status associated with the progress of the job, and provide the command progress status to the command line interface.","Detachable Administration Commands","In accordance with an embodiment, the system can include a means for supporting detachable administration commands in a cloud environment. A user can issue commands and perform operations to manage the environment, which can be executed by a job manager. The system allows administration commands to be detachable, so that several independent parallel commands can be executed together from one console or one script, and so users can check result or wait for result of some task.","In accordance with an embodiment, CLI functionality can be provided for executing AdminCommands in detached mode. It means that CLI will exit immediately after command is executed on DAS and also provides mechanism how check status of executed command or its result.","For example, in accordance with an embodiment, some commands can take significant time to complete especially on large clusters. To address this, a detachable command feature can be used by users to execute several independent parallel commands together from one console or one script. Then users can check result or wait for result of some task. This provides a better user experience, and reduces overall time for a user's complicated tasks.",{"@attributes":{"id":"p-0354","num":"0353"},"figref":"FIG. 27"},"As shown in , in accordance with an embodiment, a user can use the administration interface and command line interface to issue  one or more administrative commands , , which are communicated  via the job manager service API to the job manager service to be processed as jobs .","In accordance with an embodiment, each administrative command can be associated with a job id , for example job id A  and job id B .",{"@attributes":{"id":"p-0357","num":"0356"},"figref":"FIG. 28"},"As shown in , in accordance with an embodiment, the user can then detach their command line interface from the administrative command, which continue to run as jobs within the platform or cloud environment.",{"@attributes":{"id":"p-0359","num":"0358"},"figref":"FIG. 29"},"As shown in , in accordance with an embodiment, at a later point in time, a user can attach  their command line interface an existing command instance, and issue administrative command  by including a particular job id .","In accordance with an embodiment, the information is communicated  to the job manager, which locates the corresponding job, and attaches it  to the user's command line interface, for viewing or other use by the user.","In accordance with an embodiment, functionality is based on event integration support including Server Sent Events (SSE) support:","Any AdminCommand can be executed remotely using SSE.","Any AdminCommand which is executed using SSE is on server side processed as managed command.","Managed commands are registered in JobManager and can be identified by id.ID is part of state event which is transferred using SSE (as well as other events).","JobManager covers security\u2014for example, only a user who executed a command can retrieve its AdminCommand Instance.","JobManager covers livecycle of AdminCommandInstance including ActionReport and result Payload, and defines its retention period.","Detach Mode Workflow from CLI","In accordance with an embodiment, the CLI allows a user to execute command in the background (example: .\/asadmin.sh --detach deploy foo.ear).","CLI register event listener for state events in RemoteAdminCommand.","CLI tags command as managed in RemoteAdminCommand to trigger SSE and execute command.","RemoteAdminCommand calls ReST interface on DAS with Accept: text\/event-stream header.","In accordance with an embodiment, command is executed in a separate thread, and the response SSE listens to events. Execution of managed command also registers AdminCommandInstance in JobManagerService (id is created) and change state to executed. (fires state event).","CLI's listener receives state event containing id and close connection.","CLI prints ID and exits (example: Command is executed with id 1234, use (asadmin attach 1234) to watch progress status or result)","Attach Command","asadmin attach XXX","In accordance with an embodiment, the command to attach is a local CLICommand which calls remote hidden _attach _attach; the command is defined as managed and will forward all events from AdminCommandInstance retrieved from JobManager.","Attach Command and Commands which Retrieve File Payloads","In accordance with an embodiment, the deploy command has a retrieve option to get client stubs. Generally the system does not support obtaining file payloads when a user tries to attach to the deploy command with --retrieve or when a user tries to attach to get-client-stubs. If someone attaches to a long running deploy command with --retrieve, the attach command can show progress status, but attach will not get the payload. In accordance with an embodiment, other commands called get-client-stubs can be used to retrieve the payload which the user can run.","Local Commands","In accordance with an embodiment, the described detach functionality will have no effect on existing CLI Commands. But any existing CLI Command can check for presence of a --detach asadmin switch and provide some support for it. If --detach is used with a CLICommand, and the CLICommand does not declare the detach @Param, it will generate an error.","CLICommand: Attach","In accordance with an embodiment, the attach command provides information about current status of particular command in progress. If the command is finished and its result is still registered, it returns a result payload.","In accordance with an embodiment, switches can include:","Exit code: If attach works, the exit code will be same as finished command. If not possible to attach or command does not finish exit code will be between 250-255","--detach switch: executes any remote command in background mode. It means use SSE connection and quits immediately after command instance id is received in status event.","--terse and progress status: Progress status will not be printed in case of --terse execution.","The attach command can be asadmin or cadmin command. The following snippet shows how the sample output will look for a running command which supports progress status:",{"@attributes":{"id":"p-0383","num":"0382"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin sample-command"]},{"entry":[{},"64%: Uploading bits..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0384","num":"0383"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin sample-command"]},{"entry":[{},"Finished execution of sample-command"]},{"entry":[{},"Command sample-command executed successfully."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0385","num":"0384"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin --detach sample-command"]},{"entry":[{},"Job Id: 20"]},{"entry":[{},"Command sample-command detached successfully."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0386","num":"0385"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin --detach --echo sample-command"]},{"entry":[{},"asadmin --host localhost --port 4848 --user admin interactive=true"]},{"entry":[{},"--echo=true"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"--terse=false sample-command"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Job Id: 21"]},{"entry":[{},"Command sample-command detached successfully."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0387","num":"0386"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin attach 20"]},{"entry":[{},"Finished execution of sample-command"]},{"entry":[{},"Command attach executed successfully."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0388","num":"0387"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin attach 123"]},{"entry":[{},"64%: Uploading bits..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0389","num":"0388"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin attach --long 20"]},{"entry":[{},"Job:sample-command"]},{"entry":[{},"State: COMPLETED"]},{"entry":[{},"ExitCode: SUCCESS"]},{"entry":[{},"Message: Finished execution of sample-command"]},{"entry":[{},"Command attach executed successfully."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0390","num":"0389"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin attach --long 21"]},{"entry":[{},"Job: sample-command"]},{"entry":[{},"State: COMPLETED"]},{"entry":[{},"ExitCode: WARNING"]},{"entry":[{},"Message: Finished execution of sample-command"]},{"entry":[{},"Command attach executed successfully."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0391","num":"0390"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin attach --terse 20"]},{"entry":[{},"Finished execution of sample-command."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0392","num":"0391"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin attach --echo 123"]},{"entry":[{},"asadmin --host localhost --port 4848 --user admin --interactive=true"]},{"entry":[{},"--echo=true"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"--terse=false attach 123"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Job:sample-command"]},{"entry":[{},"State: COMPLETED"]},{"entry":[{},"ExitCode: SUCCESS"]},{"entry":[{},"Command attach executed successfully."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0393","num":"0392"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"asadmin --echo attach 123"},{"entry":"asadmin --host localhost --port 4848 --user admin --interactive= true"},{"entry":"--echo=true"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"--terse=false attach 123"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"64%: Starting"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0394","num":"0393"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asadmin --interactive attach"]},{"entry":[{},"Enter the value for the jobID operand> 16"]},{"entry":[{},"96%: Completing.."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0395","num":"0394"},"figref":"FIG. 30"},"As shown in , at step , a cloud environment that supports provisioning of enterprise applications as services is provided at one or more computers.","At step , administrative commands are received, at a job manager service application program interface, to be processed within the cloud environment as jobs, wherein each instance of the administrative commands is associated with a unique job identifier.","At step , a command line interface is provided that allows a user to issue a command to be processed within the cloud environment as a job.","At step , a command is received to detach the command line interface from the job being processed.","At step , during progress of the job being processes, the system can subsequently receive a command to reattach the command line interface to the job being processed, including an indication the job's unique job identifier, and provide access to the job at the command line interface.","The present invention may be conveniently implemented using one or more conventional general purpose or specialized digital computer, computing device, machine, or microprocessor, including one or more processors, memory and\/or computer readable storage media programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art.","In some embodiments, the present invention includes a computer program product which is a non-transitory storage medium or computer readable medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include, but is not limited to, any type of disk including floppy disks, optical discs, DVD, CD-ROMs, microdrive, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data.","The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 30"}]},"DETDESC":[{},{}]}
