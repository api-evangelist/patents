---
title: Determining three-dimensional shape characteristics in a two-dimensional image
abstract: A method, system, and computer-readable storage medium are disclosed for generating a three-dimensional (3D) shape based on a two-dimensional (2D) image. In one embodiment, an image comprising a 2D representation of a 3D object is received. Characteristics of one or more light sources affecting the image may be determined. A 3D mesh approximating a shape of the 3D object may be generated based on a first downsampled version of the image. A candidate image may be rendered based on the 3D mesh and the characteristics of the light sources. The 3D mesh may be output if a difference between the image and the candidate image is smaller than a threshold error value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08289318&OS=08289318&RS=08289318
owner: Adobe Systems Incorporated
number: 08289318
owner_city: San Jose
owner_country: US
publication_date: 20090212
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY INFORMATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["This application claims benefit of priority of U.S. Provisional Application Ser. No. 61\/093,174 entitled \u201cDetermining Shape Characteristics in a Two-Dimensional Image\u201d filed Aug. 29, 2008, the content of which is incorporated by reference herein in its entirety.","1. Field of the Invention","The present invention is directed to computer systems; and more particularly, it is directed to the processing of digital images using computer systems.","2. Description of the Related Art","Digital image editing is the process of creating and\/or modifying digital images using a computer system. Using specialized software programs, users may manipulate and transform images in a variety of ways. These digital image editors may include programs of differing complexity such as limited-purpose programs associated with acquisition devices (e.g., digital cameras and scanners with bundled or built-in programs for managing brightness and contrast); limited editors suitable for relatively simple operations such as rotating and cropping images; and professional-grade programs with large and complex feature sets.","Digital images may include raster graphics, vector graphics, or a combination thereof. Raster graphics data (also referred to herein as bitmaps) may be stored and manipulated as a grid of individual picture elements called pixels. A bitmap may be characterized by its width and height in pixels and also by the number of bits per pixel. Commonly, a color bitmap defined in the RGB (red, green blue) color space may comprise between one and eight bits per pixel for each of the red, green, and blue channels. An alpha channel may be used to store additional data such as per-pixel transparency values. Vector graphics data may be stored and manipulated as one or more geometric objects built with geometric primitives. The geometric primitives (e.g., points, lines, paths, polygons, B\u00e9zier curves, and text characters) may be based upon mathematical equations to represent parts of vector graphics data in digital images. The geometric objects may typically be located in two-dimensional (2D) or three-dimensional (3D) space. A three-dimensional object may be represented in two-dimensional space for the purposes of displaying or editing the object.","Digital images such as photography, paintings, and moving pictures may include objects affected by one or more light sources. The light sources may affect the visual imagery of objects in an image even though the light sources are absent in the image itself. For example, a light bulb located beside a photographer may affect the visual imagery of the objects in an image obtained by the photographer. In computer vision and graphics, estimation of the lighting environment of an image may be desirable for many applications. For example, determining the location and relative intensity of one or more light sources may be useful in recreating the lighting environment to obtain a second image or to ensure a consistent lighting environment when re-shooting a motion picture scene.","Various embodiments of systems, methods, and computer-readable storage media for approximating the three-dimensional (3D) shape of an object from a single two-dimensional (2D) image are disclosed. In one embodiment, an image comprising a 2D representation of a 3D object may be received (e.g., by a digital image editing program executing on a computer system). Characteristics of one or more light sources affecting the image may be determined. For example, the characteristics may comprise the intensity, direction, and\/or color of each of the one or more light sources.","A 3D mesh approximating a shape of the 3D object may be generated based on a downsampled version of the image. A candidate image may be rendered based on the 3D mesh and the characteristics of the light sources. The difference between the original image and the candidate image may be determined on a pixel-by-pixel basis. The 3D mesh may be output if the difference between the original image and the candidate image is smaller than a threshold error value.","On the other hand, if it is determined that the difference is not smaller than the threshold error value, then another iteration may take place. In the second iteration, a refined 3D mesh may be generated based on a larger-resolution downsampled version of the image, and an additional candidate image may be rendered based on the refined 3D mesh and the characteristics of the one or more light sources. The refined three-dimensional mesh may be output if a difference between the image and the additional candidate image is smaller than the threshold error value.","While the invention is susceptible to various modifications and alternative forms, specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the invention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","In the following detailed description, numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.","Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification, the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here, and is generally, considered to be a self-consistent sequence of operations or similar signal processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a specific apparatus, such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification, therefore, a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals, typically represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the special purpose computer or similar special purpose electronic computing device.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1A","b":["100","100","100","110","110","100","120","120","110","110","110","100"]},"The digital image editing program  may comprise instructions to implement image analysis functionality . As will be described in greater detail below, the image analysis functionality  may comprise one or more operations to identify characteristics of a light source of an image . A light source of an image  may comprise a light source that affects the image  (e.g., one or more pixels in the image ). In one embodiment, the image analysis functionality  may comprise a light detection engine . As will described in more detail below, the light detection engine  may be adapted to perform operations to determine image lighting characteristics. In one embodiment, the light detection engine  may be implemented as a separate application that is executable separate from the image editor . In one embodiment, the light detection engine  may be implemented as an application that is executable concurrently with the image editor .","The editing operations  and image analysis functionality  may comprise program instructions that may be executed in association with the image editor . In various embodiments, the program instructions that implement the editing operations  and the image analysis functionality  may be coded as an intrinsic part of the image editor  or as a plug-in module or other extension to the image editor . The image editor  and its constituent elements and data may be stored in a memory  of a computer system  as illustrated in .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1B","FIG. 1C","FIG. 1B","FIG. 1B","FIG. 1B"],"b":["800","800","900","800","800","800","800"]},"The GPU  may include a host interface  configured to communicate with a data source  (e.g., a communications bus and\/or processor(s)  of a host computer system ). For example, the data source  may provide image input data  and\/or executable program code to the GPU . In some embodiments, the host interface  may permit the movement of data in both directions between the GPU  and the data source . The GPU  may also include a display interface  for providing output data to a data target . The data target  may comprise an imaging device  (as illustrated in ) such as a display or printer. For example, if data target  comprises a display device , the GPU  (along with other graphics components and\/or interfaces ) may \u201cdrive\u201d the display  by providing graphics data at a particular rate from a screen buffer (e.g., the buffer ).","In one embodiment, the GPU  may include internal memory . The GPU memory , also referred to herein as \u201cvideo memory\u201d or \u201cVRAM,\u201d may comprise random-access memory (RAM) which is accessible to other GPU components. As will be described in greater detail below, the GPU memory  may be used in some embodiments to store various types of data and instructions such as input data, output data, intermediate data, program instructions for performing various tasks, etc. In one embodiment, the GPU  may also be configured to access a memory  of a host computer system  (as illustrated in ) via the host interface .","In one embodiment, the GPU  may include GPU program code  that is executable by the GPU  to perform aspects of techniques discussed herein. Elements of the image input  may be rasterized to pixels during a rendering process including execution of the GPU program code  on the GPU . Elements of the GPU program code  may be provided to the GPU  by a host computer system (e.g., the data source ) and\/or may be native to the GPU . The GPU program code  may comprise a vertex shader  and\/or a pixel shader . A vertex shader  comprises program instructions that are executable by the GPU  to determine properties (e.g., position) of a particular vertex. A vertex shader  may expect input such as uniform variables (e.g., constant values for each invocation of the vertex shader) and vertex attributes (e.g., per-vertex data). A pixel shader  comprises program instructions that are executable by the GPU  to determine properties (e.g., color) of a particular pixel. A pixel shader  may also be referred to as a fragment shader. A pixel shader  may expect input such as uniform variables (e.g., constant values for each invocation of the pixel shader) and pixel attributes (e.g., per-pixel data). In generating the image output , the vertex shader  and\/or the pixel shader  may be executed at various points in the graphics pipeline.","The GPU memory  may comprise one or more buffers . Each buffer  may comprise a two-dimensional array of pixel data (e.g., color values) and\/or pixel metadata (e.g., depth values, stencil values, etc.). For example, the GPU memory  may comprise an image buffer  that stores intermediate or final pixel values generated in the rendering process. In one embodiment, the image buffer  may comprise a single-sampling buffer wherein each pixel in the buffer is represented by a single set of color and alpha values (e.g., one color value for a red channel, one color value for a green channel, one color value for a blue channel, and appropriate values for a one or more alpha channels). In one embodiment, the image buffer  may comprise a multi-sampling buffer usable for anti-aliasing.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 1C","b":["900","900","910","900","910","920"]},"In one embodiment, a specialized graphics card or other graphics component  may be coupled to the processor(s) . The graphics component  may include a graphics processing unit (GPU) . Additionally, the computer system  may include one or more imaging devices . The one or more imaging devices  may include various types of raster-based imaging devices such as monitors and printers. In one embodiment, one or more display devices  may be coupled to the graphics component  for display of data provided by the graphics component .","In one embodiment, program instructions  that may be executable by the processor(s)  to implement aspects of the techniques described herein may be partly or fully resident within the memory  at the computer system  at any point in time. The memory  may be implemented using any appropriate medium such as any of various types of ROM or RAM (e.g., DRAM, SDRAM, RDRAM, SRAM, etc.), or combinations thereof. The program instructions may also be stored on a storage device  accessible from the processor(s) . Any of a variety of storage devices  may be used to store the program instructions  in different embodiments, including any desired type of persistent and\/or volatile storage devices, such as individual disks, disk arrays, optical devices (e.g., CD-ROMs, CD-RW drives, DVD-ROMs, DVD-RW drives), flash memory devices, various types of RAM, holographic storage, etc. The storage  may be coupled to the processor(s)  through one or more storage or I\/O interfaces. In some embodiments, the program instructions  may be provided to the computer system  via any suitable computer-readable storage medium including the memory  and storage devices  described above. In one embodiment, the program instructions  may be executed by the host computer system  to send image input  to the GPU .","The computer system  may also include one or more additional I\/O interfaces, such as interfaces for one or more user input devices . In addition, the computer system  may include one or more network interfaces  providing access to a network. It should be noted that one or more components of the computer system  may be located remotely and accessed via the network. The program instructions may be implemented in various embodiments using any desired programming language, scripting language, or combination of programming languages and\/or scripting languages, e.g., C, C++, C#, Java\u2122, Perl, etc. The computer system  may also include numerous elements not shown in , as illustrated by the ellipsis.","In one embodiment, characteristics associated with one or more light sources affecting an image may be determined in a non-invasive manner. Characteristics associated with the one or more light sources may include a direction or location of each light source relative to objects in the image and a relative intensity of each light source to each other. Information regarding the characteristics may be provided to a user. The lighting characteristics obtained from the image may be used in various applications. For example, the characteristics may be used to reproduce the characteristics in a lighting environment to reproduce the image, to produce another image using similar light characteristics, and\/or to insert synthetic objects in the image by matching the lighting characteristics. Other applications may include shape from shading for multiple light sources, image classification, and relighting.","In one embodiment, lighting characteristics associated with one or more light sources are inferred from an image. A silhouette boundary may be selected, manually or automatically, to define an area of the image in which lighting characteristics are inferred. Areas within the silhouette boundary may be filtered to separate high frequency variations of luminance due to image diffuse reflectivity or albedo from low frequency variations of luminance due to shading. Albedo is a measure without a unit that is indicative of the diffuse reflectivity of a surface or body of an image object. The illumination intensity variations of the silhouette pixels may be analyzed to determine a pixel or pixels with the highest luminance. Each of the pixels identified with the highest luminance may be associated with a light source. A zenith coordinate (e.g., slant angle) associated with each light source may be determined. An azimuth coordinate (e.g., tilt angle) may be determined for each light source based, at least in part, on the slant angle. In a three-dimensional coordinate system, a zenith coordinate or slant angle may be defined as the angle between the z-axis and a slant angle direction vector. A slant angle direction vector may be a vector derived from a normal light source direction vector. An azimuth coordinate or tilt angle may be defined as the angle between the positive x-axis and the slant angle direction vector.","Ambient light may be determined by analyzing silhouette pixels. Ambient light may comprise the light in an image that is not necessarily associated with a particular light source. Information regarding the presence of each light source, the coordinates of each light sources, the relative intensity of each light source, and the ambient light may be provided to a user.","In various embodiments, various methods may be used to detect characteristics associated with one or more light sources affecting an image.  illustrates one embodiment of a method for determining light source characteristics. For purposes of illustration only, the elements of this method are described with reference to the system depicted in , coordinate system diagram in , flow chart depicted in , and images depicted in .","As shown in , the light detection engine  receives an image. The image may be received from an input device. For example, a user may use a scanner to obtain an electronic representation of a photograph or painting and store the image in memory. The user may also obtain an image via a digital image capture apparatus, such as a camera, and store an electronic version of the image in memory. The user may also download an image that is stored at a remote location via a network connection from the internet or an intranet. In some embodiments, the image editor  may provide a function with which the user can cause an image stored in memory to be selected and sent to the light detection engine  for analysis.","As shown in , the light detection engine  receives a selection of a silhouette boundary. The silhouette boundary may be a boundary defining the shape or portion of an object in an image. In some embodiments, the silhouette boundary may be selected manually by the user. For example, the user can use a mouse or another type of input device to select points along the boundary of an object in the image. In other embodiments, the light detection engine  automatically analyzes pixels in the image and determines the presence of objects and selects the boundary of those objects. The object boundaries may be automatically identified as silhouette boundaries or provided to the user via an imaging device such that the user can manually identify the object boundaries as silhouette boundaries or modify the boundaries as desired.","As shown in , the light detection engine  filters the image to decrease the image's albedo or diffuse reflectivity. In some embodiments, the albedo or diffuse reflectivity of the image may be removed. Changes in albedo and surface indentations may falsely indicate light source effects, even when, for example, light sources have not affected those areas. Luminance intensity changes, albedo changes, and surface indentations occur at different frequency levels. Images may be filtered based on the frequency levels to remove these effects. In some embodiments, the light detection engine  uses a bilateral filtering method to remove the albedo. The filtering methods may be used to extract high frequency detail and low frequency detail associated with the image. The high frequency detail may include information associated with the texture and albedo of each image pixel. The low frequency detail may include information associated with the luminance changes for each image pixel, but may not include the albedo of each image pixel. The high frequency detail may be removed.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIGS. 5A-C","FIG. 5A","FIG. 5B","FIG. 5B","FIG. 5C","FIG. 5C"],"b":["400","402","400","400","404","406","408"]},"In one embodiment, the image may be filtered using a bilateral filtering method by tuning the image's Gaussian kernels (e.g., space and intensity level) to meet the following equation:",{"@attributes":{"id":"p-0054","num":"0053"},"maths":[{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":"newL","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["x","y"],"mo":","}}},"mo":"=","mfrac":{"mrow":[{"munder":{"mo":"\u2211","mi":"u"},"mo":"\u2062","mrow":{"munder":{"mo":"\u2211","mi":"v"},"mo":"\u2062","mrow":{"mrow":[{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["x","u","y","v"],"mo":[",",",",","]}}},{"msub":{"mi":["L","x"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mi":["x","u"],"mo":"-"},{"mi":["y","v"],"mo":"-"}],"mo":","}}}],"mo":"\u00b7"}}},{"munder":{"mo":"\u2211","mi":"u"},"mo":"\u2062","mrow":{"munder":{"mo":"\u2211","mi":"v"},"mo":"\u2062","mrow":{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["x","u","y","v"],"mo":[",",",",","]}}}}}]}}}},{"@attributes":{"id":"MATH-US-00001-2","num":"00001.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["x","u","y","v"],"mo":[",",",",","]}}},{"mrow":[{"msub":{"mi":["G","spatial"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msqrt":{"mrow":{"msup":[{"mrow":{"mo":["(",")"],"mrow":{"mi":["x","u"],"mo":"-"}},"mn":"2"},{"mrow":{"mo":["(",")"],"mrow":{"mi":["y","v"],"mo":"-"}},"mn":"2"}],"mo":"+"}},"mo":",","msub":{"mi":["\u03c3","spatial"]}}}},{"msub":{"mi":["G","L"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"mrow":[{"msub":{"mi":["L","x"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mi":["x","u"],"mo":"-"},{"mi":["y","v"],"mo":"-"}],"mo":","}}},{"msub":{"mi":["L","x"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["x","y"],"mo":","}}}],"mo":"-"},"mo":",","msub":{"mi":["\u03c3","L"]}}}}],"mo":"\u00d7"}],"mo":"="}}}],"br":{},"sub":["spatial ","L ","spatial ","L ","spatial","L"]},"The bilateral filter kernel, b, may include two Gaussian filter kernels, Gand Gwith kernel widths of \u03c3and \u03c3, to provide user control over the recovered object shape. For example, small details may be increasingly suppressed, while overall round shape may be emphasized with increasing values of the kernel b. Once the bilateral filter is applied, the low frequency variations, as shown in , may be used to analyze areas affected by light sources. In one embodiment, the bilateral filter is applied in the logarithmic domain for better behavior. A rounding function may be applied to the low frequency image version to emphasize the roundness of the overall shape.","Using filtered images indicating luminance changes, areas affected by light sources may be detected more easily. In addition, silhouette boundaries may be more accurately defined using filtered images. In one embodiment, the image may be filtered before the light detection engine  receives the selection of the silhouette boundary, as shown in . In another embodiment, the image may be analyzed without filtering to remove albedo.","As shown in , the light detection engine  estimates the presence of one or more light source by identifying at least one local maxima pixel around the silhouette boundary. The local maxima pixel may be around the silhouette boundary if it is within the area defined by the silhouette boundary, located substantially close to the silhouette boundary, or located on or along the silhouette boundary. A local maxima pixel may be a pixel having a zero luminance gradient and a positive second derivative. The light detection engine  may obtain the luminance value for each pixel around the silhouette boundary and identify those pixels having the highest luminance values. In some embodiments, the light detection engine  identifies the pixel having the highest luminance values (local maxima pixels) by observing zero crossing of luminance gradient, with a positive second derivative, such that areas affected by different light sources can be identified. For example, pixels around the silhouette boundary may include multiple pixels having locally high luminance values, but located away from each other. Such silhouette boundary areas may be identified by analyzing the luminance value of each pixel and identifying local maxima pixels. Each local maxima pixel detected indicates the presence of a light source affecting the objects within the image. In some embodiments, the number of light sources may be estimated in an iterative fashion. In other embodiments, images affected by one light source may be received and the local maxima pixel associated with the light source identified.","As shown in , the light detection engine  estimates the slant angle and intensity for each light source. In some embodiments, the relative intensities of the light sources may be estimated in an iterative fashion. The slant angle may be determined to identify a location for each light source. Each light source is located at a position relative to the image objects. A normal direction of the light from the light source may be determined using the intensity of the pixels affected by the light source and the geometry of the silhouette boundary. The surface normal on the silhouette boundary may be assumed to be in the image plane, and the light detection engine  may estimate the slant angle of the individual light sources using pixel luminance intensity variations within the localized area and the silhouette normal. The silhouette normal may be a slant angle direction vector. For example, the surface normal vector for each pixel in the localized area may be perpendicular to the boundary surface at the pixel. The size of the localized area may be set using a pre-set radius or group of pixels. The luminance and surface normal vector may be used to determine the light source direction at each pixel. A voting process may be used to determine the slant angle direction vector based on the light source direction determined for each pixel.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 3","b":["250","252","252","252","108","250","108","254","254","250","252","254","254","254"]},"The following equation may be used to determine the slant angle direction vector and the intensity of the light source:",{"@attributes":{"id":"p-0061","num":"0060"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mfrac":{"mrow":{"munderover":{"mo":"\u2211","mrow":[{"mi":"i","mo":"=","mn":"1"},{"mi":["i","n"],"mo":"="}]},"mo":"\u2062","mrow":{"mrow":[{"mover":{"mi":"N","mo":"->"},"mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":["p","i"]}}},{"mi":"B","mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":["p","i"]}}}],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062"],"mi":["R","G"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}]}},"mi":"n"},"mo":"=","mrow":{"mover":{"mi":"L","mo":"->"},"mo":"\u00b7","mi":"I"}}}},"br":{},"sub":["i","i "]},"In one embodiment, the light detection engine  may use vectors from pixels other than the local maxima pixel. For example, the light detection engine  may determine the pixel having the highest luminance, RGB(p), and set its light direction as the first light source direction. A secondary light source direction may be obtained for each pixel in the silhouette boundary of the localized area. If any of the secondary light directions are less than ninety degrees relative to the light source direction of the pixel having the highest luminance, those secondary light source directions may be added to the light direction of the pixel having the highest luminance and multiplied by the luminance of those associated pixels. The existence of a second light source may be indicated if any of the secondary light source directions are greater than ninety degrees. Those light source directions are included in the estimation of the second light source and not the first. In some embodiments, two or more pixels may have the same light source direction. A mean luminance may be determined for those pixels and only one secondary light source direction may be added to determine the light direction. If two or more pixels indicate the same light direction, a mean luminance may be determined for those pixels and only one normal light source direction vector.","Using the slant angle direction vector, the slant (zenith) angle of the light source may be determined by measuring the angle between the slant angle direction vector and a z-axis. This process may be repeated for each light source detected.","As shown in , the light detection engine  estimates the tilt (azimuth) angle of the light source using the slant angle direction vector and light source intensity. The tilt angle can be measured from a positive x-axis to the slant angle direction vector. The light detection engine  can analyze the variation of the intensity of pixels along the surface of the object and the slant angle direction vector to determine the tilt angle.","Returning to , the light detection engine  may analyze the variation of the intensity of pixels along the slant angle direction vector  to determine the tilt angle. For example, the light detection engine  may start at the point  and travel along the slant angle direction vector  away from the light source  and towards the center of the silhouette boundary. As explained in more detailed below, the intensity gradient of pixels along with slant angle direction vector  may be measured and a tilt angle  may be determined based on the intensity gradient. For example, if the intensity gradient is increasing, the tilt angle  may be the angle of the slant angle direction vector . If the intensity gradient is decreasing, the pixel along the slant angle direction vector  having the lowest intensity (not shown) may be identified, and a lowest intensity tilt angle for the pixel may be measured. In one embodiment, ninety degrees may be added to the lowest intensity tilt angle to determine the tilt angle for the light source.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 4","b":["212","302","108","108"]},"As shown in , the light detection engine  may determine if the gradient is increasing or decreasing. If the change in intensity, as each pixel is measured in order from the silhouette boundary along the slant angle direction vector towards the inside of the silhouette, is greater than 0, then the gradient is increasing and indicates that a light source was in front of the object. If the change in intensity, as each pixel is measured from the silhouette boundary along the slant angle direction vector towards the inside of the silhouette, is less than 0, then the gradient is decreasing and indicates that the light source was behind the object.","If the gradient is increasing, the light detection engine  may determine the pixel having the highest intensity, as shown in . As shown in , the tilt angle of the pixel having the highest intensity may be determined by measuring the tilt angle of a vector from the light source through the pixel having the highest intensity. The tilt angle of the pixel having the highest intensity is the same as the tilt angle of the light source.","As shown in , if the gradient is decreasing, the light detection engine  may determine the pixel having the lowest intensity. As shown in , the tilt angle of the pixel having the lowest intensity may be determined. As shown in , the tilt angle of the light source may be determined by adding ninety degrees to the lowest intensity pixel tilt angle.","The method may be repeated for each detected light source. Returning now to , once the tilt angle of each light source is determined, the light detection engine  may determine the relative intensity of each light source, as shown in . The relative intensity of each light source may be determined by comparing the intensities of each light source to each other and assigning a relative intensity value based on those intensities to each light source. The relative intensity value may be a number on scale with which the relative intensity of each light source can be compared. In some embodiments, the relative intensity value of the local maxima pixel associated with each light source may be used to compare the intensities of each light source. In other embodiments, a mean average of all pixels within the pre-set radius or group of pixels associated with each light source may be determined and used to compare the intensities of each light source.","As shown in , the light detection engine  may determine the ambient light intensity of the image. The light detection engine  may identify the pixel having the lowest intensity. The pixel may be within the silhouette boundary or, in some images, outside the silhouette boundary. The intensity of the pixel having the lowest intensity may be identified as the ambient light intensity of the image.","As shown in , the light detection engine  may output characteristics associated with the image. The characteristics may include the intensity of the ambient light, the identification of each light source detected, the slant angle and tilt angle of each light source, and\/or the relative intensity of each light source. The light detection engine  may output the characteristics by providing them to an imaging device or other target. For example, the characteristics may be displayed on the graphical user interface (GUI) or sent via a network connection to a location on the network. In one embodiment, the characteristics are associated with the image and stored in memory.","An example of determining characteristics associated with a light source using an image according to one embodiment of inventive concepts disclosed herein is described below with reference to .  shows an image  that includes an apple  as an object. The image  is received, along with a silhouette boundary . The silhouette boundary  generally defines the boundary of the pixels associated with the apple . The silhouette boundary  includes pixels affected by three light sources.  show filtered images with albedo decreased or removed, in which pixels affected by each light source are shown in white color.  illustrates pixels  located on the front of the apple  affected by a first light source.  illustrates pixels  located approximately forty-five degrees relative to the x-axis of the image affected by a second light source.  illustrates pixels  located at the top of the apple  and slightly to the left of center. Each of these sets of pixels , ,  define three different groups of pixels, each of which includes a local maxima pixel having the highest luminance intensity within that group.","The local maxima pixel for each group of pixels may be identified, and the presence of each light source may be determined. The relative intensity of each light source may be determined using the intensity of each local maxima pixel. The slant angle direction vector may be detected using the silhouette boundary geometry. For example, a first light source direction vector for the local maxima pixel in set of pixels  may be determined. Secondary light source direction vectors for other pixels within set of pixels  may be determined and added to the light source direction vector for the local maxima pixel to obtain the slant angle direction vector. The slant angle of each light source may be determined using the slant angle direction vector.","The tilt angle for each light source may be determined using the slant angles by determining the intensity gradient of pixels starting from the silhouette boundary and following a line defined by the slant angle direction vector. For set of pixels , the light source is in front of the apple  and the intensity gradient increases. Thus, the tilt angle of the pixel having the maximum intensity may be the tilt angle of the light source. For both set of pixels  and , the intensity gradient decreases, indicating a light source that is behind the apple . The pixel within each set of pixels ,  having the lowest intensity may be determined, along with the tilt angle for each of those pixels. The tilt angle for each light source associated with set of pixels ,  may be determined by adding ninety degrees to the each pixel's tilt angle.  is a graphical representation of the apple  and the relative location of each light source , , .","The ambient light intensity may be determined from the image  in . The pixel within the silhouette boundary  having the lowest intensity may be identified. This pixel may be located in the shadowed area on the far left side of apple . The intensity of that pixel may be the ambient light intensity for the image .","After all the characteristics are determined, they may be provided to a user via a graphical user interface (GUI). The user may then use the characteristics to recreate the lighting environment in order to obtain a second image of the apple  using the same lighting characteristics or to create synthetic objects and include them in image  using the lighting characteristics.","In one embodiment, the systems and methods for determining light source characteristics as discussed above may be augmented as follows. In one embodiment, characteristics of overlapping light sources may be determined. For example, the characteristics of lights overlapping by more than 90 degrees in the screen plane may be determined in addition to the characteristics of lights overlapping by 90 degrees or less. References herein to overlapping light sources may include overlapping lights emitted by those light sources. In one embodiment, color characteristics of each light source may be determined. The color may be determined in addition to other characteristics including direction and intensity.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 7","b":["601","602","603","601","602","603","601","602","603","601","602","603"]},"In various embodiments, aspects of the systems and methods discussed above with respect to  may be performed again for estimating characteristics of light sources overlapping by more than 90 degrees and\/or for estimating color characteristics of light sources. In one embodiment, intensity levels may be estimated more accurately by using the following techniques instead of the zenith coordinate (e.g., slant angle) estimation techniques discussed above with respect to . A contour including a plurality of connected points may be estimated by computing the normals of the points. The gradient at the points may be analyzed to eliminate high-frequency albedo variations. As discussed above, albedo is a measure without a unit that is indicative of the diffuse reflectivity of a surface or body of an image object. The high-frequency albedo variations may correspond to a change of material or texture. The albedo variation may be stored to tag the corresponding pixels as a patch having similar albedo.","Based on the determined \u201cground truth\u201d albedo values, rendering may be attempted for a similar image by using a constant color contour as a starting object. Lights with different intensities and colors may be added such that the overall error is minimized pixel-by-pixel.  is a flowchart illustrating a method for determining characteristics of light sources according to one embodiment. As shown in , the brightest point or cluster of points of the contour (i.e., the global maximum) may be selected. As shown in , the normal of the points or cluster may be set as a candidate light direction. The process may then attempt to determine whether the point is a single light or two overlapping lights yielding a global maximum. A singular point may be found, and the light corresponding to the point may be split into two overlapping light sources as shown in . To avoid noise issues and accelerate the process, the error from the light and the ground truth image may be used instead of using tangents or local gradients to detect them. It may be expected that the points are near the maximum (positive) error. The overall error may be checked, pixel by pixel, as shown in . If the error has improved, as determined in , then it may be determined that two lights are involved. However, if the error has not improved, as determined in , then the original maximum may be recovered, as shown in .","As shown in , the next most likely local maximum in luminance values may be found, and the procedure may continue by checking the error as shown in . In one embodiment, the operations shown in  through  may be repeated (e.g., iteratively) for the current local maximum until the overall error does not improve. In one embodiment, the operations shown in  through  may be repeated (e.g., iteratively) for the current local maximum until the overall error is at an acceptable level (e.g., in comparison to a predefined threshold). To select the next pixel, a function may be applied to all the pixels that will yield the unlikeliness of a pixel in the contour to be explained by the previous configuration of lights.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIGS. 9A","FIG. 9A","FIG. 9B","FIG. 8","FIG. 9C","FIG. 8","FIG. 9D"],"b":["9","9","9","611","612","613","702","613","614","615","706","616"]},"In one embodiment, the color and intensity of a light source may be determined as follows. In one embodiment, an approach based on the subjective nature of human color perception may be used to infer the colors of the lights. One feature of human color perception is the color constancy effect. Color constancy may ensure that the perceived color of objects remains relatively constant under varying illumination conditions. Due to the color constancy effect, humans may perceive the relationship between lights in an image but may not be able to determine the real color of any given light. By employing these principles to infer the color characteristics of lights in an image, the white-balance problem may be substantially avoided in one embodiment.","In one embodiment, it may be determined which of three possible scenarios represents the image: (1) ambient light and direct light, (2) two or more overlapping direct lights, and (3) non-overlapping direct lights. As discussed below, a different approach may then be applied for each of the three scenarios. In all of the scenarios, the relative colors and intensities between the light sources may be determined.","If the first scenario is determined to represent the image, then the following approach may be taken in one embodiment. Given two points in the same albedo patch under the influence of only one light source, any inconsistency in the radiance equation may be assigned to the presence of an ambient light source that is assumed to be white according to the color constancy effect. In this manner, both the intensity (relative to albedo) of the light source and its color (e.g., represented as RGB) may be determined.","If two or more lights are present and overlapping (i.e., the second scenario represents the image), an albedo patch under the influence of both may be determined. In the same manner, the relationship between both sources may be inferred. If two or more lights are not overlapping (i.e., the third scenario represents the image), then for each light, the process may look for two patches with different albedo under its influence and solve the radiance equation to disambiguate the color and intensity of the light. If the albedo is constant, then the color of the light may be chosen as white to avoid the disambiguation process. In one embodiment, the user may choose between two color values.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 10","b":["722","100","900"]},"As shown in , the intensity of each of the plurality of light sources in the image may be determined. As shown in , the direction of each of the plurality of light sources in the image may be determined. The intensities and directions of the light sources may be determined according to the systems and methods discussed above. For example, candidate light sources may be applied to the image until an error is minimized, wherein each of the candidate light sources comprises a respective intensity and direction. In one embodiment, the color of each light source may also be determined.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 11","b":["732","100","900","734","736"]},"As shown in , the color of each of the plurality of light sources in the image may be determined. In one embodiment, different techniques may be used to determined the color based on whether the light sources are ambient or direct and\/or based on whether the light sources are overlapping or non-overlapping. The colors of the light sources may be determined according to the systems and methods discussed above. In one embodiment, the intensity and direction of each light source may also be determined.","In one embodiment, the image analysis functionality  may include functionality to infer the three-dimensional (3D) shape of an object from a single two-dimensional (2D) image. The inference of the three-dimensional (3D) shape of an object from a single two-dimensional (2D) image may be performed using a shape-from-shading (SFS) technique. Determining the 3D shape may be advantageous in further editing and creative processes such as editing materials, changing the 2D or 3D shape, relighting, casting shadows, focus-defocus, etc.","In one embodiment, a render engine may be used in the reconstruction pipeline to boost and assure the convergence of the shape-from-shading method. In one embodiment, a smooth approximation may be obtained. The approximation may be close to the solution and perceptually plausible and therefore sufficient for most image-based editing tools. In one embodiment, the SFS technique may work under a variety of different environment conditions such as different textures, multiple light sources, specularities, etc.","In one embodiment, the SFS technique may be applied where the object to reconstruct is globally convex from the camera point of view. In one embodiment, if there is no information in the shadowed areas (i.e., the areas are pure black), the areas will be linearly filled. A Poisson solver may be used to infer a smooth solution for the areas lacking information.","The SFS technique may operate on an image (e.g., an RGB image), a lighting environment, and a 3D mesh (e.g., a set of connected vertices in 3D space). As discussed above, the lighting environment may be determined as a discretization of the lighting environment into a set of directional light sources inferred by analyzing the original image. The 3D mesh may originally comprise a basic shape (e.g., a plane) which, after iterative subdivision and vertex positioning, may approximate the original image when rendered with the same lighting environment.","In one embodiment, the SFS technique may use a multilevel approach that begins with a downsampled version of the image (e.g., downsampled to 2\u00d72 pixels) and a simple mesh (e.g., a mesh having four faces).  illustrates an example set of downsampled images according to one embodiment. For purposes of illustration, the size of pixels in the images , , , ,  may vary from image to image. As shown in the example, an input image may be downsampled from 128\u00d7128 (image ) to 64\u00d764 (image ) to 32\u00d732 (image ) to 16\u00d716 (image ) to 8\u00d78 (image ). A possible solution may be rendered and then compared with a goal image defined by one of the downsampled images (e.g., the smallest image ). Vertices in the mesh may be moved until the error is below a certain level. The mesh may be subdivided in a coarse-to-fine fashion and compared to images of progressively higher resolution.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 13","b":["742","744","746"]},"As shown in , the vertices may be moved in the camera-axis (Z) in a range limited by their parent vertexes (the extremes of the split edge in the previous iteration). In this manner, the range of possible movements may be limited such that the convergence may be boosted. The movement steps may be non-linear such that the solution is approached more quickly. In one embodiment, the vertexes may not be moved again at subsequent resolution iterations. The movement of a vertex may be stopped when a minimum tolerance level of error or a maximum number of iterations per pixel is reached. As the object is considered globally convex, movements that leave the vertex in a negative coordinate of Z (i.e., further away than the plane containing the silhouette of the object, parallel to the screen plane) may be ignored.","As shown in , the geometry corresponding to the image may be rendered (e.g., using a raytracer engine) and the gradient of the solution may be stored. As shown in , the error in the gradient of the luminance may be checked pixel-by-pixel. In one embodiment, the movement of vertices in the Z axis (as shown in ) may continue until error-stopping criteria are fulfilled (as shown in ).","As shown in , the original geometry may be subdivided. In one embodiment, subdivision may yield 2faces with each iteration. In one embodiment, the process may begin with a pyramid of 4 faces that are respectively aligned with the 4 pixels of the downsampled image. As shown in , a higher level of resolution may be selected for the image for the next iteration of the movement comparison (as shown in ).","In one embodiment, fine detail may be added for future editing (e.g., relighting) of the reconstructed image. The fine detail may be added by modulating the final normal map\/depth map by local SFS (e.g., by using the high frequency layer extracted in the pre-filtering of the image).","In one embodiment, additional convergence speed-up may be achieved at movement iterations through the use of constraint propagation. If a vertex yields an error under a tolerance level before the maximum number of iterations is reached, its neighbors in the next iteration may use this additional information to converge faster to the solution.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 14","FIG. 14","FIG. 13","FIGS. 2-11"],"b":["762","100","900","764"]},"As shown in , a 3D mesh approximating a shape of the 3D object may be generated based on a downsampled version of the image. As shown in , a candidate image may be rendered based on the 3D mesh and the characteristics of the light sources. As shown in , the 3D mesh may be output if a difference between the image and the candidate image is smaller than a threshold error value.","On the other hand, if it is determined that the difference between the image and the candidate image is not smaller than the threshold error value, then another iteration may take place. In the second iteration, a refined 3D mesh may be generated based on a larger-resolution downsampled version of the image, and an additional candidate image may be rendered based on the refined 3D mesh and the characteristics of the one or more light sources. The refined three-dimensional mesh may be output if a difference between the image and the additional candidate image is smaller than the threshold error value.","In various embodiments, the elements shown in the flow diagrams discussed herein may be performed in a different order than the illustrated order. In the flow diagrams discussed herein, any of the operations described in the elements may be performed programmatically (i.e., by a computer according to a computer program). In the flow diagrams discussed herein, any of the operations described in the elements may be performed automatically (i.e., without user intervention).","Although the embodiments above have been described in detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 5B","FIG. 5A"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5C","FIG. 5A"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 6A-E"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 9A-9D"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
