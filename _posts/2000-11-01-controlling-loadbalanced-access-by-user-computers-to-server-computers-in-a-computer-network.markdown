---
title: Controlling load-balanced access by user computers to server computers in a computer network
abstract: An operating method on the basis of a data processing program is designed to control load-balanced access by a user computer to a server computer in a computer network. The load-balanced access takes place based on an inquiry by the user computer to all server computers regarding their load, and according to an assignment to the server computer with the lowest load.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06950849&OS=06950849&RS=06950849
owner: HOB GmbH & Co. KG
number: 06950849
owner_city: Cadolzburg
owner_country: DE
publication_date: 20001101
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to a data processing program based operating method for computer networks for controlling load-balanced access by a user computer to a server computer in a computer network with multiple user and server computers.","2. Background Art","A general problem with computer networks that incorporate multiple user and server computers consists of assigning to the individual user computers in the most optimized manner a server computer that has sufficient capacities, i.e., the lowest possible load. In the state of the art, this problem has, until now, essentially been solved in such a way that one of the servers registers the calls coming from the network of user computers for programs installed on all servers, and performs an allocation between a certain server computer and the user computer. The criterion for these allocations is the desire to balance the load of all connected server computers as evenly as possible.","However, the server computer that has been given prominence in the hierarchy over the remaining server computers, which assumes the access control and is commonly referred to as the load-balancing server, has the problem that load-balanced access by the individual user computers to certain server computers is no longer possible if this computer fails.","Against the background of the described problem, the invention is based on the aim of revealing an operating method for computer networks that ensures load-balanced access by a user computer to one of multiple server computers without the need for a privileged load-balancing server.","This aim is met by an operating method comprising the following steps:\n\n","Recognizably, access is thus equal to all server computers and each of them determines its own load. Information regarding this load is processed by a user computer seeking access, after which the user computer itself selects \u201cits\u201d server computer with the lowest load.","Recognizably, there is no longer a load-balancing server, the failure of which could impede the load-balanced access. The optimally balanced load of the server computers that are connected to the network is thus ensured in a significantly more fail-safe manner.","Preferred embodiments of the inventive operating method, the specific characteristics and advantages of which will become apparent from the following description, in which the invention is explained in greater detail based on the appended drawings.","An operating method according to the invention is implemented on the various computers in the computer network  shown in  on the basis of a corresponding data processing program. The program is installed, in the usual manner, with its corresponding program components on the user computers U through U on one hand, and on the server computers S\u2013S on the other hand. It is commonly started on the server as a service. Alternately, it may also be started from the \u201ccommand prompt\u201d, from the console. When the program is called up, the number of a UDP (=USER DATAGRAM PROTOCOL) port may be transmitted. If no port number is transmitted, a default port, e.g., default port 4095, is used. Based on the program, all server computers now continually determine the load on their central processing units. This CPU load is determined on the basis of the amount of time that has elapsed since the last time the respective central processing unit was called, and a corresponding load-specific data value is determined. When multiple central processing units exist in a server computer, the average of all active processors is formed. The inventive program then stores these determined values in a defined number of 20 entries of elapsed amounts of time in a table, from which a data value is determined that is specific for the CPU load.","In this condition all server computers S through S wait for datagrams arriving from the user computers U through U, while the load-specific data value is continually updated.","If access is now to take place by a user computer U from the total number of user computers U through U to initiate a program session on the server computer S through S with the lowest load, a circular datagram is transmitted by the user computer U to all server computers S through S in the network . The datagram contains a header identifying the datagram as an instruction to call up the CPU load of the respective server computer S through S over the network . Instead of a circular datagram, individual datagrams may also be sent to predefined server computers S through S, which can be implemented based on the program configuration. The circular datagram is symbolized in  by the arrows .","Based on the circular datagram , all server computers S through S return reply datagrams . through . (see arrows in ), in which a load-specific data value is transmitted over the network  to the user computer  via the UDP port 4095. This data value may be standardized to a range of 0 to 10,000, for example, with the value 10,000 corresponding to a 100% load. The reply datagrams . to . from the individual server computers S through S contain additional information regarding available connection ports, by which an exchange of data can take place between the user computer U and the respective server computer S through S according to the defined data exchange protocols. For example, the data exchange protocol RDP is available at all server computers S through S. The server computers S and S additionally offer the ICA protocol. Lastly, data encryption is implemented on the server computers S through S. The information relating to this is contained in the reply datagrams . through ., as indicated in .","The user computer U now analyzes the datagrams . through . to determine which server computer has the lowest load under certain framework conditions, such as the desired data exchange protocol. If, for example, a connection is to be made via ICA, as a matter of principle only the server computers S and S are suitable. Of these two, the server computer S has a lower load with a CPU load of 2000, compared to the server computer S with a CPU load of 3000. The inventive operating method will, therefore, establish a connection between the user computer U and the server computer S, as indicated at . in .","However, if a connection between computers is to be made via the RDP protocol, all server computers are available. Accordingly, the server computer S will be selected for the connection . since, with a CPU load of 500, it has the lowest load of all server computers S through S.","To summarize, access will be initiated via the inventive access method to the server computer S or S that has the lowest CPU load while providing the desired data exchange protocol.","An alternate implementation of the inventive access method is symbolized in . To avoid unnecessary explanations, only the differences from the above-described method will be pointed out in this context. A circular datagram  is transmitted to the server computers S through S over the computer network  from the user computer U seeking access to the server computer with the lowest load, which, in addition to the abovementioned header to call up the CPU load, also contains identification parameters representative for this computer, namely a user identification number \u201cuserID\u201d and, optionally, also an associated domain name. If the received datagram  contains a userID, a determination is made with the aid of a corresponding API (application programming interface) in the server computer S through S, whether program sessions with this user identification number are currently running. If a domain name is transmitted in addition to the user identification number, an additional check is performed when the user identification number matches, to determine whether the domain name matches.","On the server computers S through S it is now registered, in the usual manner, which program sessions are currently running in which condition. Distinctions are made, in this context, between the conditions \u201cdisconnected\u201d, \u201cconnected and active\u201d and \u201cother\u201d. The latter condition has no specific program-related definition.","If a circular datagram  with user ID and domain name is now transmitted, the server computers each send reply datagrams . through . which contain, in addition to the load-specific data value for the CPU load and the available transfer protocols, also a listing of the number of program sessions currently running for this user ID and domain name. For example, no program sessions of the user computer U are running on the server computers S, S, S, which is manifested by the information \u201cSessions: 0\/0\/0\u201d.","On the server computer S, two program sessions are disconnected and none are active, which is illustrated by the information \u201cSessions:2\/0\/0\u201d. The server computer S reports \u201cSessions: 1\/1\/0\u201d, which means one disconnected and one connected, active program session.","The user computer U now analyzes the incoming reply datagrams . through . in such a way that it registers the respective CPU loads and the fact whether a disconnected program session exists on a server computer. In  this has been indicated by the table 7. In the process, the determination is made that a disconnected program session exists on the server computer S with the highest load of 50% of all server computers S through S. The user computer U accordingly re-establishes this disconnected RDP program session with a corresponding connection  to the server computer S (see )."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0017"},"figref":"FIGS. 1 through 3"},{"@attributes":{"id":"p-0013","num":"0018"},"figref":"FIGS. 4 through 7"}]},"DETDESC":[{},{}]}
