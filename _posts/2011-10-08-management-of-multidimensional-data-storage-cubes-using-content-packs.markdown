---
title: Management of multidimensional data storage cubes using content packs
abstract: Some embodiments provide a system for managing multidimensional data storage (MDDS) cubes. The system includes a content pack manager for processing a content pack that specifies (1) a set of multidimensional data storage (MDDS) cube definitions for a set of MDDS cubes, (2) a set of data sources that includes data for each of the MDDS cubes in the set of MDDS cubes, and (3) a content map that includes a set of relationships between data for the set of MDDS cubes and the set of data sources. The system includes an MDDS cube manager for provisioning, based on the content pack, the set of MDDS cubes to a set of MDDS clients for viewing the set of MDDS cubes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08965836&OS=08965836&RS=08965836
owner: Bay Dynamics
number: 08965836
owner_city: San Francisco
owner_country: US
publication_date: 20111008
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["In the field of Business Intelligence and Information Technology (IT) management consulting, online analytical processing (OLAP) solutions are one type of solution that may be provided to customers. Today, many challenges exist in implementing OLAP based solutions at customer sites. For instance, highly skilled and experienced individuals are needed to install, configure, maintain, and customize the underlying OLAP technology to achieve the desired business benefit. The cost and availability of the human resources are limiting factors in the success of OLAP implementations in the enterprise. Even when organizations are initially successful in finding the right individuals to perform the initial installation of the OLAP technology, the market demand for such individuals often leaves the organizations unable to recover in the event that such individuals leave the organization.",{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1","b":["100","105","115","120","125","105","125","120","105","125","105","105"]},"The interface layer  serves as a layer to (1) define a set of data in the data storage  for an OLAP cube  and (2) define the manner in which the set of data is organized for the OLAP cube . In other words, the interface layer  serves as a layer that links sets of data in the data storage  to the corresponding OLAP cubes . As shown in , the interface layer  of the OLAP system  includes custom defined interfaces . Specifically, a custom defined interface  exists in the interface layer  for each of the OLAP cubes . Each time an OLAP cube is installed in the OLAP system , highly skilled installer(s) (e.g., database system develop, database administrator, etc.) must manually create, configure, and define a custom defined interface  in order to install and deploy the OLAP cube in the OLAP system .","Typically, a custom defined interface  specifies one or more data sources for an OLAP cube , specifies the data from the data sources for the OLAP cube , and specifies the manner in which the data is organized. Highly skilled installer(s) configure the custom defined interface  to link the data source and the data in the data source to the OLAP cube. For instance, OLAP cube 1 is defined by data in the data storage . The definition of the OLAP cube 1 may require certain data (e.g., tables) be present in the data storage . Additionally, the definition of the OLAP cube 1 may require the data to be organized according to a particular schema (e.g., tables) in the data storage . As such, the highly skilled installer(s) must manually connect to the data storage  and specify data from the data source for the OLAP cube 1 according to the schema that the data is organized in the data storage . In this manner, the installer creates the custom defined interface 1 for the OLAP cube 1 to interface with the data in the data storage . To install the OLAP cubes 2-N, the installer performs similar techniques to create the custom defined interfaces 2-N for the OLAP cubes 2-N to interface with the data in the data storage .","Another challenge with OLAP systems is the deep technical knowledge that is required to create valuable OLAP cubes, and to design cubes that are compelling and easy to understand by their end users. Since OLAP cubes are very difficult to understand by end users, OLAP cubes are typically designed by database programmers who transpose database schemas into OLAP cubes. Today, there is a rather small community of people with the capability to build well-architected, business context specific OLAP cubes.","Some embodiments of the invention provide a system for managing different multidimensional data storage (MDDS) cubes and provisioning the MDDS cubes for MDDS clients to consume the cubes' data. In some embodiments, an MDDS cube is a multidimensional data structure that facilitates quick viewing of data from a set of data sources. The system of some embodiments receives definitions of different MDDS cubes, and based on the definitions, performs an automated process that (1) analyzes the system's available resources (such as the data storages and data in the data storages), and (2) based on the identified system resources, identifies MDDS cubes that can be installed from several MDDS cubes that are candidates for installation. The MDDS cubes of some embodiments are online analytical processing (OLAP) cubes.","The MDDS system of some embodiments manages MDDS cubes by employing predefined packages called content packs. In some embodiments, a content pack is a package of files and\/or folders having a predefined format. The content pack of some embodiments includes entity definitions (e.g., MDDS cube definitions, dimension definitions, DSV definitions, and\/or presentation object definitions) and other types of data (e.g., data source metadata, predefined data source commands). For instance, each content pack in some embodiments includes (1) a set of cube definitions for a set of cubes and (2) cube metadata associated with the set of cubes. A cube definition of some embodiments specifies data (e.g., measures) for a cube, data attributes (e.g., dimensions) for categorizing the data along a set of dimensions, and a set of data sources that contains the data and the data attributes.","The content pack of some embodiments may also specify relationships between the entities defined by the entity definitions. For example, for a particular cube definition, the cube metadata of some embodiments specifies a list of relationships (e.g., data dependencies) between the data, the data attributes, and the data sources of the particular MDDS cube definition. In some embodiments, the cube metadata may specify relationships that are expressed in terms of single dependencies. A single dependency of some embodiments is a relationship that specifies (1) two definition components and (2) a dependency between the two definition components. As an example, a relationship that specifies that definition component A is dependent on definition component B is single dependency.","In some embodiments, the MDDS system generates a dependency map that links all the single dependencies specified for the cube definitions in a particular content pack in order to form a single list of dependencies for the particular content pack. The MDDS system of some embodiments may also generate a combined dependency map (also referred to as a unified content map) that combines the dependencies from the dependency maps of several content packs. As such, the combined dependency map provides a single dependency map that includes the dependencies specified for each of the MDDS cube definitions across all the content packs. This allows the MDDS system to manage MDDS cubes that are defined by data that spans different data storage instances (e.g., different instances of the same databases) of the same storage product of the same vendor, or different data storages of different products (e.g., different types of databases) from the same or different vendors.","Based on the combined dependency map, the MDDS system can identify the cubes that are available for installation and the cubes that are not available for installation from the set of cubes that are candidates for installation. For example, to determine whether a particular cube is available, the MDDS system examines the combined dependency map and an MDDS cube definition of the particular cube to identify the dependencies for the particular cube defined by the MDDS cube definition. The MDDS system then determines whether the identified dependencies (e.g., data and\/or data sources) exist and, based on this determination, determines whether the MDDS cube is available for installation.","In some embodiments, the MDDS system manages multiple data sources for multiple MDDS cubes. One technique for managing multiple data sources for multiple MDDS cubes involves providing a layer of abstraction between the multiple data sources and the MDDS system so that, from the perspective of the rest of the MDDS system, the MDDS system appears to have one single data source when in fact the single data source has multiple data sources underlying the single data source. Under this technique, the MDDS cubes in the MDDS system derive their data from the multiple data sources through the unified data source.","This single data source is referred to below as a unified data source. In some embodiments, the unified data source is a collection of data source objects that presents a single source of data to the MDDS system. A data source object, in some embodiments, is a representation of data in a data source. To provision a unified data source, the MDDS system of some embodiments identifies each data source in the MDDS system and creates data source objects that represent the data in the data source. The MDDS system then provisions the unified data source to include the created data source objects.","When changes occur to any of the unified data source's underlying data sources, the MDDS system propagates those changes to the unified data source. For instance, when a data source is added to the MDDS system, the MDDS system creates data source objects that represent data in the data source that was added and reprovisions the unified data source to include the created data source objects. On the other hand, when one of the data sources is removed from the unified data source, the MDDS system identifies the data source objects that represent data in the data source that was removed and reprovisions the unified data source to not include the identified data source objects.","As noted above, an MDDS cube, in some embodiments, derives its data from a unified data source. In this manner, a MDDS client may consume data from the unified data source through the MDDS cube. Thus, the MDDS cube is a data source client that uses the unified data source of such embodiments as a data source. Alternatively or conjunctively, the unified data source of some embodiments may be used to provide data to other types of data source clients. Examples of such other data source clients include an MDDB cube, a web-browser client, a data processing application, any type of entity that performs SQL statements against a data source (e.g., SQL reporting application and\/or services) to retrieve data, or any type of data interchange system.","To implement a unified data source that provides data to any number of different types of data source clients, the MDDS system of some embodiments provides a layer of abstraction between multiple data sources and the MDDS system by utilizing source linkers to link data sources to data source objects in the unified data source. In some cases, the source linkers link remote data sources to the data source objects in the unified data source. To manage the source linkers, the MDDS system of some embodiments creates a source linker for each data source in the MDDS system. Thus, the MDDS system creates a source linker for a new data source when the new data source is added to the MDDS system and it removes the source linker of the data source when the data source is removed from the MDDS system.","In addition to managing and provisioning a cube that is defined from data derived from one data source, the MDDS system of some embodiments manages and provisions MDDS cubes that are defined by data derived from different data sources. Such MDDS cubes are referred to as federated MDDS cubes. Different data sources may be different data storage instances (e.g., different instances of relational databases) of the same or different products from the same or different product vendors. A storage product may be any type of product that has data to which MDDS tools may be applied (e.g., for business intelligence purposes).","In addition to content packs that include federated MDDS cubes, some MDDS systems manage content packs that include federated presentation objects. A presentation object is a predefined representation of a perspective of one or more MDDS cubes. The presentation object of some such embodiments includes a set of charts, graphs, reports, and\/or tables, which are generated based on the perspective of the set of MDDS cubes that define the presentation object. In some embodiments, a federated presentation object is a predefined representation of a perspective of MDDS cubes that are defined in different content packs.","The preceding Summary is intended to serve as a brief introduction to some embodiments of the invention. It is not meant to be an introduction or overview of all inventive subject matter disclosed in this document. The Detailed Description that follows and the Drawings that are referred to in the Detailed Description will further describe the embodiments described in the Summary as well as other embodiments. Accordingly, to understand all the embodiments described by this document, a full review of the Summary, Detailed Description and the Drawings is needed. Moreover, the claimed subject matters are not to be limited by the illustrative details in the Summary, Detailed Description and the Drawing, but rather are to be defined by the appended claims, because the claimed subject matters can be embodied in other specific forms without departing from the spirit of the subject matters.","In the following description, numerous details, examples and embodiments are set forth for purpose of explanation. However, one of ordinary skill in the art will realize that the invention is not limited to the embodiments set forth and that the invention may be practiced without some of the specific details and examples discussed.","Some embodiments of the invention provide an MDDS system for managing different MDDS cubes and provisioning these cubes for MDDS clients to access the data in these cubes. In some embodiments, an MDDS cube is a multidimensional data structure that facilitates quick viewing of data from a set of data sources. The system of some embodiments receives definitions of different MDDS cubes, and based on the definitions, performs an automated process that (1) analyzes the system's available resources (such as the data storages and data in the data storages), and (2) based on the identified system resources, identifies MDDS cubes that can be installed from several MDDS cubes that are candidates for installation. In some embodiments, the system installs MDDS cubes that the system has determined can be installed, and then processes the MDDS cube in order to populate and provision the cube to MDDS clients for consumption. The system in some embodiments installs an installable MDDS cube automatically upon determining that an MDDS cube can be installed or upon receiving input from a user to install the MDDS cube.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 2","b":["200","200","205","210","215","220","225","240","230","235"]},"The N data storages  store data that can be retrieved and viewed by a user through one or more MDDS cubes that are installed in the system. These N data storages  are provided by M different storage vendors in some embodiments, where N and M are integer values that can differ. In some embodiments, a data storage  is any type of data storage that stores data to which MDDS tools may be applied (e.g., for business intelligence purposes).","Each of the data storages  may be implemented differently in different embodiments. In the example illustrated in , the data storages  include different instances of one data storage of one product from one vendor, and include different instances of different data storages of different products from one vendor or different vendors. Examples of different storage products include Microsoft System Center Configuration Manager\u00ae, Microsoft System Center Operations Manager\u00ae, Microsoft Forefront Endpoint Protection\u00ae, Symantec Management Platform\u00ae, Symantec Endpoint Protection\u00ae, or any type of product that has data to which MDDS tools may be applied (e.g., for business intelligence purposes). In other embodiments, the system  of  is just used with the same storage product and\/or different storage products of just one vendor.","In the example illustrated in this figure, each of the products for each of the vendors 1-M generates and\/or collects data, and then stores the products' data in one of the data storages 1-N. For instance, a product for vendor 1 generates and\/or collects data and stores such data in data storage 1, another product for vendor 1 generates and\/or collects data and stores such data in data storage 2, a product for vendor 2 generates and\/or collects data and stores such data in data storage 3, a product for vendor 3 generates and\/or collects data and stores such data in data storage 4, etc.","Each data storage  may be implemented in any number of different ways. For instance, a data storage  of some embodiments may be implemented as a database (e.g., a relational database, a hierarchical database, a flat file database, or any other type of database for storing data). Alternatively, a data storage  may be implemented as a file (e.g., an XML file, an spreadsheet file, a comma-separated values (CSV) file, a text file, etc.), or as any other type of object that serves as a source of data. Each data storage  in some embodiments is implemented by a single storage unit (e.g., a hard drive) or by several storage units (e.g., hard drives).","As mentioned above, each data storage stores data that can be viewed through one or more installed MDDS cubes. The system  installs the MDDS cubes by using the MDDS cube definitions. Each MDDS cube definition  describes a multidimensional data structure for a corresponding MDDS cube (not shown). For example, in some embodiments, an MDDS cube definition  specifies data (e.g., measures) for an MDDS cube, data attributes (e.g., dimensions) for categorizing the data along a set of dimensions, and a set of data sources that contains the data and the data attributes.","In , an MDDS cube definition may specify data for an MDDS cube (not shown), and such data is contained in one of the data storages 1-N. For example, the MDDS cube 1 definition specifies an MDDS cube that contains data from data storage 1, the MDDS cube 2 definition specifies an MDDS cube that contains data from data storage 2, the MDDS cube 3 definition specifies an MDDS cube that contains data from data storage 3, etc. In addition, an MDDS definition of some embodiments further specifies the manner in which the data in the set of data sources is organized (e.g., database schema).","As mentioned above, the system  can manage and install different MDDS cubes defined by the same or different authors for different products offered by the same or different vendors. In some embodiments, an author may be a company specializing in MDDS cube design, an MDDS cube designer, a database administrator, or any entity that develops MDDS cubes. For instance, an author may define different MDDS cubes for different vendors. As shown in , author C has defined an MDDS cube definition for the MDDS cube 3 for vendor 1 and an MDDS cube definition for the MDDS cube 6 for vendor 3 As another example, an author may define different MDDS cubes for different products from the same vendor. In , author B has defined MDDS cube definitions for the MDDS cube 5 and MDDS cube 7 for different products (not shown in ) for the same vendor M. As illustrated, the system  manages MDDS cubes that are defined by any author for any product from any vendor.","Before installing a cube, the cube availability detector  of some embodiments analyzes MDDS cube definitions  to determine which MDDS cubes are available and which MDDS cubes are not available. For a particular MDDS cube, the cube availability detector  in some embodiments determines that the particular MDDS cube is available when this detector determines that it can access the data and data attributes that define the MDDS cube from the set data storages  to install and deploy the MDDS cube for consumption by MDDS clients. The detector in some embodiments determines that it can access such data and data attributes when it determines that the following three conditions are met: (1) a set of data storages  (i.e., a set of data sources) specified in an MDDS cube definition  for the MDDS cube exists, (2) data specified in the MDDS cube definition  for the MDDS cube is stored in the set of data storages , and (3) the data attributes for the data are stored in the set of data storages . In some embodiments, the detector determines that the set of data storages  specified in an MDDS cube definition  for the MDDS cube exists when this detector can establish connections to, or can access data from, the set of data storages .","Alternatively, the cube availability detector  of some embodiments determines that a particular MDDS cube is not available when any of the three conditions mentioned above are not met. Also, in some embodiments, the cube availability detector  determines that a particular MDDS cube is not available when this detector  determines that the data for the MDDS cube is not organized in the set of data sources according to a schema specified for the MDDS cube. In addition, the cube availability detector  of some embodiments determines that an MDDS cube is not available when the cube availability detector  cannot access the data or the data attributes that define the MDDS cube.","The cube installer  installs MDDS cubes that are determined to be available (e.g., by the cube availability detector ) and not yet installed. For a particular MDDS cube that is available, the cube installer  of some embodiments installs an instance of the particular MDDS cube based on the corresponding MDDS cube definition for the particular MDDS cube. To install the particular MDDS cube, the cube installer  creates a data structure according to the MDDS cube definition of the particular MDDS cube. The installing of the particular MDDS cube may also be referred to as creating an instance of the particular MDDS cube.","In some embodiments, the cube installer  stores the instance of the particular MDDS cube in the MDDS cube storage . In some such embodiments, the MDDS cube is stored in the MDDS cube storage  in a multidimensional database while, in other such embodiments, the MDDS cube is stored in the MDDS cube storage  in a relational database. In some embodiments, the MDDS cube is stored in the MDDS cube storage  in a hybrid database that includes a multidimensional database and a relational database (e.g., some data may be stored in the multidimensional database and some data may be stored in the relational database).","After a particular MDDS cube is installed, the particular MDDS cube may be processed. The cube installer  of some embodiments processes the particular MDDS cube by aggregating the data and data attributes specified by the MDDS cube definition from the set of data sources (e.g., by querying the data and the data attributes from the set of data sources) specified by the MDDS cube definition and populating the data structure of the particular MDDS cube with the aggregated data and data attributes. After the particular MDDS cube has been processed, the particular MDDS cube is ready for consumption by an MDDS client. For this example, the installed MDDS cubes  illustrated in  are MDDS cubes that the cube installer  has installed and processed. Thus, installed MDDS cubes  may be consumed by MDDS clients.","In some embodiments, the cube installer  installs an MDDS cube based on input from a user. In some instances, the MDDS system  receives input (e.g., through a graphical user interface (\u201cGUI\u201d), a command line interface, or any other type of interface for receiving input) from a user to install and deploy an MDDS cube that the cube availability detector  has determined as available.","The cube viewer  of some embodiments is an MDDS viewing tool that allows MDDS clients to consume the installed MDDS cubes . For instance, in some embodiments, the cube viewer  is an interface of the MDDS system  through which MDDS clients consume MDDS cubes. The cube viewer  provides a list of installed and consumable MDDS cubes to an MDDS client upon connection to the cube viewer  in some embodiments. The cube viewer  may receive requests to consume a particular installed MDDS cube . In response to the requests, the cube viewer  may access the particular installed MDDS cube  and transmit a portion of or all of the data and\/or data attributes of the MDDS cube to the MDDS client.","Different embodiments of the cube viewer  provide different techniques for the MDDS clients  to consume MDDS cubes. For instance, the cube viewer  in some embodiments allows the MDDS clients  to consume MDDS cubes through a multidimensional expressions (MDX) query language while other embodiments of the cube viewer  allow the MDDS clients  to consume MDDS cubes through an object linking and embedding, database (OLE DB) for OLAP application programming interface (API). Still, in other embodiments, the cube viewer  allows the MDDS clients  to consume MDDS cubes through an extended markup language for analysis (XMLA). In some embodiments, the cube viewer  provides a combination of the previously mentioned techniques and\/or any other technique for consuming MDDS cubes.","In some embodiments, an MDDS client  is any application that is configured to consume MDDS cubes. An MDDS client  of some embodiments consumes an MDDS cube by accessing the MDDS cube's data or retrieving data from the MDDS cube (e.g., by using an MDX query language, an OLE DB API, XMLA, etc.). Different embodiments of the MDDS clients  may consume an MDDS cube differently. For example, an MDDS client  of some embodiments consumes an MDDS cube by displaying a portion of or all of the MDDS cube's data and data attributes. In some embodiments, an MDDS client  consumes an MDDS cube by processing the MDDS cube's data. Other embodiments of an MDDS client  consume an MDDS cube by storing a portion of or all of the MDDS cube's data and data attributes. An MDDS client  of other embodiments may consume an MDDS cube in other ways as well.","Different embodiments of the MDDS clients  are implemented differently. In some instances, an MDDS client  is implemented as a standalone application while, in other instances, an MDDS client  is implemented as an application that is part of another application. In addition, an MDDS client  of some embodiments is implemented as a thick client (e.g., a component that is included in the MDDS system ) while an MDDS client  of other embodiments is implemented as a thin client (e.g., a third party web browser).","One example operation of the MDDS system  that is based on an MDDS cube definition  of an MDDS cube will now be described for some embodiments of the invention. The cube availability detector  initially analyzes the MDDS cube definition  to identify data for the MDDS cube, data attributes that categorizing the data along a set of dimensions, and a set of data sources that contains the data and the data attributes.","The cube availability detector  determines that the MDDS cube is available when the set of data sources exists and the data and data attributes are stored in the set of data sources. In some embodiments, the cube availability detector  determines that the set of data sources exists when the cube availability detector  establishes a connection to each data source in the set of data sources and accesses data in the data sources. On the other hand, the cube availability detector  determines that the MDDS cube is not available when the cube availability detector  cannot establish a connection to one of the data sources in the set of data sources exists, or cannot access the data or the data attributes (e.g., some or all of the data and\/or data attributes is not stored in the set of data sources).","When the cube availability detector  determines that the MDDS cube is available, the cube installer  installs the MDDS cube. To install the MDDS cube, the cube installer  utilizes the MDDS cube definition to generate an instance of the MDDS cube. The cube installer  of some embodiments stores the instance of the MDDS cube in the MDDS cube storage . In some embodiments, the cube installer  automatically installs the MDDS cube upon the cube availability detector  determining that the MDDS cube is available while, in other embodiments, the cube installer  installs the MDDS cube upon the MDDS system  receiving input (e.g., through a graphical user interface (\u201cGUI\u201d), a command line interface, or any other type of interface for receiving input) from a user.","Once the MDDS cube is installed, the cube installer  may process the instance of the MDDS cube to aggregate the data and data attributes that define the MDDS cube and populate the data structure of the MDDS cube with the aggregated data and the data attributes so that the cube may be consumed by one of the MDDS clients . The cube viewer  provides the MDDS clients  one or more ways to consume the instance of the MDDS cube (e.g., through an MDX query language, an OLE DB API, and\/or XMLA). When the cube viewer  receives a request to consume the MDDS cube, the cube viewer  accesses the instance of the cube (which may be stored in the MDDS cube storage  in some embodiments) and, based on the MDDS client 's request, sends a portion of or all of the data and\/or data attributes of the MDDS cube. In some embodiments, the cube viewer  provides the MDDS client  with a list of the installed MDDS cubes  for consumption.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 3","FIG. 2","FIG. 3"],"b":["210","300","300","300"]},"Since the data storage 1 is not available in this example, the MDDS system  has determined that the MDDS cubes defined by the MDDS cube definitions  that specify data from the data storage 1 cannot be installed. For this example, the MDDS cube definition for the MDDS cube 1 defined by author A specifies data from the data storage 1. As shown in , the MDDS cube 1 is indicated as not available with an \u201cX\u201d through the corresponding installed MDDS cube 1.","On the other hand, the data storages 2-N are still available. As such, the MDDS system  has determined, in this example, that the MDDS cubes 2-6 are available. Furthermore, the MDDS cubes 2-6 that the MDDS system  has determined as available in this example are installed and available for MDDS clients  to consume.","In some embodiments, the MDDS system provides different ways for MDDS clients to consume MDDS cubes managed by the MDDS system.  conceptually illustrates the MDDS system  of some embodiments. The MDDS system  is similar the MDDS system  except that in place of the cube viewer , the MDDS system  has a web services module  that provides MDDS cube data to several MDDS clients  through a network . In some embodiments, the network  may be a local area network (LAN), a wireless local area network (WLAN), a wide area network (WAN), the Internet, a network of networks, or any other type of network.","The web services module  serves the same function as the cube viewer  described above by reference to . However, the web services module  implements such functions through a set of web services that are provided to the MDDS clients  over the network  (i.e., the set of web services are interfaces through which the MDDS clients  consume MDDS cubes managed by the MDDS system ). For instance, the set of web services provided by the web services module  may include (1) a service for receiving requests from the MDDS client  to consume installed MDDS cubes  (which are not shown in ), (2) a service for providing a list of installed and consumable MDDS cubes to the MDDS clients , (3) a service for transmitting MDDS cube definitions to the MDDS clients , (4) a service for transmitting a portion of or all of the data and\/or data attributes of MDDS cubes to the MDDS clients  (as shown by MDDS cubes ), etc. Similar to the cube viewer , the web services module  provides an MDX query language, an OLE DB API, XMLA, or a combination of these techniques and\/or any other technique for the MDDS clients  to consume MDDS cubes.","Different embodiments implement the MDDS client differently. In some embodiments, the MDDS client is a stand-alone application, is integrated into another application, or is implemented through a plug-in component (e.g., for a web browser). The MDDS client of some embodiments might be implemented as part of an operating system. Furthermore, in some embodiments, the MDDS client is distributed according to a server-based model. In a thin client solution, some or all of the logic and\/or processing is performed on a server while a user interacts with a client application via a separate client machine connected to the server. An example of the thin client would be a low-end computer terminal whose sole function is to provide a graphical user interface to the end-user. On the other hand, for a thick client solution, some or all of the logic and\/or processing (e.g., for viewing MDDS cubes) is performed by on the client machine.","Different embodiments use different MDDS clients.  illustrates an example of one MDDS client  that is used in some embodiments. As shown, the MDDS client  includes a web services interface , a cube data fetcher , a cube cache manager , a cube cache , and a cube view rendering engine (CVRE) .","The cube data fetcher  receives a cube definition through the web services interface . The cube definition includes a metadata (e.g., dimensions, measures) that specifies a configuration of a multidimensional cube. In some embodiments, the cube data fetcher  receives the cube definition based on a request from the CVRE . For example, based on user input, the CVRE  of some embodiments directs the cube data fetcher  to retrieve the cube definition from a data source (not shown) in the MDDS system . In some embodiments, the cube definition is retrieved from a data storage that stores the definition's corresponding multidimensional cube.","Once the cube definition is received, the cube data fetcher  sends the cube definition to the CVRE  or stores the cube definition so that it will be available for the CVRE . The cube data fetcher  also creates a cube axes configuration based on the received cube definition. In some embodiments, the cube data fetcher  creates the cube axes configuration based on a user interfacing with a display that is generated by the CVRE . For example, the CVRE  of some embodiments displays a set of selectable user interface items for entities (e.g., dimension attributes, measures) associated with the multidimensional cube. The user can then select one or more of these items to create the cube axes configuration.","The cube data fetcher  formulates one or more multidimensional database queries using the cube axes configuration. In addition, the cube data fetcher  sends the cube axes configuration to the CVRE  or stores the cube definition so that it will be available for the CVRE . In some embodiments, the CVRE  uses the cube axes configuration to display a representation of the cube axes configuration. This allows an end-user to see which entities (e.g., dimensions, measures) are included in the cube axes configuration. In some embodiments, the cube axes configuration is presented on a display such that the user can also see the relationship between entities in the cube axes configuration. Several examples of creating and displaying such a cube axes configuration are described in further detail in the concurrently filed U.S. patent application Ser. No. 13\/269,559, entitled \u201cSearching and Browsing a Multidimensional Data Storage\u201d. This application is hereby incorporated by reference.","Based on the cube axes configuration, the client  generates a query to retrieve cube data from the MDDS that stores a particular cube. For instance, in some embodiments, the cube data fetcher  might determine that a subset of cube data is required to display a particular cube view (e.g., a view requested by a user). The cube data fetcher  might determine that a data result set for a set of entities (e.g., dimensions, measures) defined in the cube axes configuration is required to display the cube view. To make this determination, the cube data fetcher  of some embodiments interfaces with the cube cache manager . For example, the cube data fetcher  may send, based on the cube axes configuration, one or more requests to the cube cache manager  in order to determine what cube data needs to be downloaded.","Based on a request from the cube data fetcher , the cube cache manager  determines whether a particular set of cube data (e.g., for a set of entities in the cube axes configuration) is available in the cube cache . The cube cache manager  of some embodiments makes this determination by accessing or the cube cache . In some embodiments, the cube cache  is a storage area (e.g., memory space, disk storage space) that stores cube data. In some embodiments, the cube cache  has a particular storage structure or format (e.g., an XML file). Several examples of the cube cache of some embodiments are described in further detail in the concurrently filed U.S. patent application Ser. No. 13\/269,559, entitled \u201cSearching and Browsing a Multidimensional Data Storage\u201d.","After accessing the cube cache , the cube cache manager  provides input to the cube data fetcher . This input allows the cube data fetcher  to determine whether to execute a query against the multidimensional database for a particular set of data. Once a determination is made on what cube data is not present in the cache and needs to be downloaded, the cube data fetcher  generates a query. Specifically, the query is constructed for data that is not currently stored in the cube cache . For example, the cube data fetcher  may formulate a query that requests a data result set for several of the entities included in the cube axes configuration but not all of the entities. The cube data fetcher  retrieves cube data based on the queries. In some embodiments, the cube data fetcher  may generate and send several queries to retrieve the desired cube data from the multidimensional database.","The cube data fetcher  queries the multidimensional database through a network connection over the network  and receives cube data that satisfies the queries in return. The cube data fetcher  then parses the query result to extract cube data from the query result set. It then forwards the received cube data to the cube cache manager , which in turn stores the cube data into the cube cache . The storing of the extracted cube data in the cube cache  allows the cube cache manager  to access and retrieve the cube data from the cube cache  at a later time.","The cube data fetcher  of some embodiments also extracts metadata from the query result set and updates the cube axes configuration. This allows the axes configuration to be up to date to process subsequent interactions with the presented cube view(s). Several examples of a cube axes configuration being dynamically populated with metadata based on a result set are described in concurrently filed U.S. patent application Ser. No. 13\/269,559, entitled \u201cSearching and Browsing a Multidimensional Data Storage\u201d.","The CVRE  receives cube data from the cube cache manager  or from the cube cache . In some cases, the cube data includes other data stored in the cube cache  in addition to the cube data just received from the cube data fetcher . From the received or retrieved cube data, the CVRE  then generates a display of one or more cube views. In some embodiments, the CVRE generates a cube view by not only using the cube data, but also by using the axes configuration data and the cube definition data.","CVRE  of some embodiments displays the cube view as an interactive matrix. A user of the MDDS client  can interact with this matrix to quickly extrapolate a particular view of the underlying cube. In conjunction with, or instead of the interactive matrix, the CVRE  of some embodiments generates other items such as charts (e.g., pie charts, bar charts), graphs, tables, lists, etc. Additional details and explanation of MDDS clients and their generation of cube views are described in the concurrently filed U.S. patent application Ser. No. 13\/269,559, entitled \u201cSearching and Browsing a Multidimensional Data Storage\u201d.","The figures described above illustrate MDDS systems that can manage MDDS cubes defined by different authors for different products offered by different vendors. In some embodiments, the MDDS system utilizes different mechanisms to manage the cubes. For instance, the MDDS system of some such embodiments manages MDDS cubes by employing predefined packages called content packs that each includes MDDS cube definitions and metadata associated with the MDDS cube definitions.  conceptually illustrates an example of such an MDDS system . The MDDS system  is similar to the MDDS system  except the MDDS cube definitions  are grouped in terms of content packs . In addition, the MDDS system  further includes a metadata processor  and a metadata storage .","The content packs  facilitate the MDDS system  in managing the MDDS cubes. In the example illustrated in , each content pack  includes several MDDS cube definitions  that are defined for products (e.g., same products or different products) of one vendor. However, the system  of some embodiments also manages content packs that include MDDS cubes defined for the different products of different vendors. As shown, each content pack  includes a set of MDDS cube definitions  and MDDS cube metadata . In some embodiments, the content packs  are each implemented as a set of files (e.g., a Microsoft .NET\u00ae assembly, a ZIP file, etc.).","The MDDS cube metadata  in each content pack  describes the MDDS cube definitions  included in the content pack . As noted above, an MDDS cube definition  of some embodiments specifies data (e.g., measures) for an MDDS cube, data attributes (e.g., dimensions) for categorizing the data along a set of dimensions, and a set of data sources that contains the data and the data attributes. Some embodiments implement each of the MDDS cube metadata  of each content pack  as file (e.g., an extended markup language (XML) file).","In addition to the metadata mentioned above, the MDDS cube metadata  of some embodiments further specifies (e.g., in a content map) a list of relationships (e.g., data dependencies) among the data, data attributes, and data sources of a particular MDDS cube definition . For example, the MDDS cube metadata  may specify relationships that are expressed in terms of single dependencies. A single dependency of some embodiments is a relationship that specifies (1) two definition components and (2) a dependency between the two definition components. As an example, a relationship that specifies that definition component A and dependent on definition component B is single dependency. Additional examples of single dependencies include (1) a relationship that specifies a portion of the specified data for an MDDS cube is dependent on a data source in the set of data sources and (2) a relationship that specifies a data attribute is dependent on and a data source in the set of data sources.","Alternatively, or in conjunction with single dependencies, the MDDS cube metadata  of some embodiments may specify relationships that are expressed in terms of multiple dependencies. A multiple dependency of some such embodiments is a relationship that specifies (1) multiple definition components (e.g., more than 2) and (2) multiple dependencies between the multiple definition components. A relationship, for example, that specifies definition component X is dependent on definition component Y, which is in turn dependent on definition component Z, is a multiple dependency. The list of relationships described above is referred to below as a content map.","The metadata processor  manages and processes the MDDS cube metadata  included in the content packs . For example, the metadata processor  stores the MDDS cube metadata  included in the content packs  in the metadata storage . In some embodiments, the metadata processor  stores the MDDS cube metadata  included in a particular content pack  in the metadata storage  when the MDDS system  receives the particular content pack .","The metadata processor  of some embodiments accesses the MDDS metadata stored in the metadata storage  to generate a dependency map that links all the single dependencies specified for the MDDS cube definitions included in a particular content pack  to form a single list of dependencies for the particular content pack . In other words, the dependency map does not include more than one representation of a particular MDDS definition component. For example, if an MDDS cube definition  specifies that (1) a dimension A is dependent on a data storage X and (2) a dimension B is dependent on the data storage X, the dependency map includes one representation of the data storage X, dimension A, and dimension B, and links between the representation of the data storage X and the representations of dimension A and dimension B.","Alternatively, or in conjunction with generating dependency maps for MDDS cube definitions included in a particular content pack , the metadata processor  of some embodiments generates a combined dependency map (also referred to as a unified content map) that combines the dependencies from the dependency maps of each of the content packs . As such, the combined dependency map provides a single dependency map that includes the dependencies specified for each of the MDDS cube definitions across all the content packs . This allows the MDDS system  to manage MDDS cubes that are defined with data that spans different data storages of different products from the same or different vendors. In some embodiments, the metadata processor  stores generated dependency maps in the metadata storage .","In some embodiments, the cube availability detector  determines which MDDS cubes are available and which MDDS cubes are not available based on a combined dependency map. For example, to determine whether a particular MDDS cube is available, the cube availability detector  examines the combined dependency map and an MDDS cube definition of the MDDS cube to identify the dependencies for the MDDS cube defined. The cube availability detector  then determines whether the identified dependencies exist and, based on such determination, determines whether the MDDS cube is available or not.","The metadata storage  stores the MDDS cube metadata  that the metadata storage  receives from the metadata processor . In addition, the metadata storage  of some embodiments may store dependency maps that the metadata storage  receives from the metadata processor . The metadata storage  of some embodiments is implemented as a relational database. In some such embodiments, the metadata storage  is only used by the metadata processor  while, in other such embodiments, the metadata storage  is part of another storage that is used by the MDDS system  and\/or other components in the MDDS system .","In the example illustrated in , the content packs include MDDS cube definitions of MDDS cubes for a single data storage. The content packs in some embodiments, however, may be defined to include MDDS cube definitions of MDDS cubes for more than one data storage. Moreover, while  shows content packs that include MDDS cube definitions and MDDS cube metadata, the content packs of some embodiments may include additional and\/or different things, as described below.","In conjunction with provisioning MDDS cubes for MDDS clients to dynamically interact with the MDDS cubes (e.g., by performing slicing, dicing, drilling up, drill down, or pivoting operations on the MDDS cubes), the MDDS system of some embodiments provisions static presentations of MDDS cubes. Presentation objects are one type of static presentations of MDDS cubes. As noted above, a presentation object of some embodiments is a predefined representation of a perspective of one or more MDDS cubes. The presentation object of some such embodiments includes a set of charts, graphs, reports, and\/or tables, which are generated based on the perspective of the set of MDDS cubes that define the presentation object. As such, in some such embodiments, a presentation object definition specifies a set of MDDS cubes and a representation of a perspective of the MDDS cubes. In addition, the presentation object definition may further specify a set of charts, graphs, reports, and\/or tables that are generated based on the perspective of the MDDS cubes.",{"@attributes":{"id":"p-0122","num":"0121"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["700","700","600","700","705","710","715","615","620","235"]},"The presentation object manager  manages presentation objects in the MDDS system . For instance, the presentation object manager , in some embodiments, determines the statuses (e.g., not available, available, and available and installed) of presentation objects in the MDDS system . In some embodiments, the presentation object manager  also installs, uninstalls, and generates presentation objects as well as provisions presentation objects to the presentation object clients  for consumption of the presentation objects. For some or all of the tasks, the presentation object manager  uses a presentation object server that generates, manages, stores, and provisions the presentation objects.","In some embodiments, the presentation object manager  also stores the presentation objects and information associated with the presentation objects (e.g., presentation object definitions, presentation object server information, etc.) in the presentation object storage . The presentation object storage  of some embodiments is implemented as a relational database. In some such embodiments, the presentation object storage  is only used by the presentation object manager  while, in other such embodiments, the presentation object storage  is part of another storage (e.g., the metadata storage ) that is used by the MDDS system  and\/or other components in the MDDS system .","In some embodiments, the presentation object clients  may be any type of entity that is configured to consume presentation objects (e.g., charts, graphs, reports, and tables). Examples of presentation object clients include business intelligence applications that render reports, dashboards, and scorecards, word processing applications, spreadsheet applications, presentation preparation application, applications that interpret report definition language (RDL), etc.","The above section describes examples and embodiments of MDDS cubes and MDDS systems. In several embodiments described below, the MDDS cubes and MDDS systems are multidimensional database (MDDB) cubes and MDDB systems. However, one or ordinary skill in the art will recognize that the system of other embodiments handles non-database storages and cubes and hence are and MDDS systems.","Furthermore, in the discussion below, the MDDB cubes are implemented as OLAP cubes in some embodiments. However, in different embodiments, the MDDS cubes are implemented as different types of MDDS cubes other than OLAP cubes. Also, many of the systems described above and below are MDDS\/MDDB systems for MDDS\/MDDB cubes, one of ordinary skill in the art will realize that these systems can be implemented for OLAP cubes. Moreover, many instances above and below of this application refer to an MDDS\/MDDB cube as just a cube. Similarly, an MDDS\/MDDB system may be referred to as simply a system. In addition, when an entity (e.g., MDDS\/MDDB cubes and presentation objects) is described in this application as available, the entity is available for installation. In some cases, this includes available entities that are already installed.","Several more detailed embodiments are described below. Section I describes details of the content pack of some embodiments. Section II then describes details of the MDDB system of some embodiments. Section III describes details of the MDDB system of some embodiments that manages MDDB cubes through the use of content packs according to some embodiments of the invention followed by Section IV, which describes details of federated MDDB cubes according to some embodiments of the invention. Finally, Section V describes an electronic system with which some embodiments of the invention are implemented.","I. Example MDDB System","The following section describes various aspects of the MDDB system of some embodiments. However, many sections and figures in this application involve MDDB cubes so this section will first describe MDDB cubes. Similar to an MDDS cube of some embodiments discussed above, an MDDS cube of some embodiments is a multidimensional data structure that facilitates quick viewing of data from a set of data sources.",{"@attributes":{"id":"p-0130","num":"0129"},"figref":["FIG. 8","FIG. 8"],"b":["805","820","825"]},"As mentioned above, an MDDB cube of some embodiments may be defined by an MDDB cube definition that specifies data for the MDDB cube, data attributes for categorizing the data along a set of dimensions, and a set of data sources that contains the data and the data attributes. For some of these embodiments, an MDDB cube may be defined by a set of measures and a set of dimensions. In some embodiments, a measure is a numeric value and a dimension is metadata for categorizing a set of measures along the dimension. For example, a set of measures for an MDDB cube may represent sales data (e.g., quantity sold and profits) and a set of dimensions for the MDDB cube may represent products, locations, and time. Different embodiments may define MDDB cubes to have any number of different measures and any number of different dimensions.","In the first representation of the example MDDB cube, the schema  illustrates the relationship between the measures  and the dimensions  of the example MDDB cube. In some embodiments, the schema  is referred to as a star schema. As shown, dimension 1 is associated with the measures  and includes hierarchies a-i. Dimension 2 is associated with the measures  and includes hierarchies a-k. Dimension 3 is associated with the measures  and includes hierarchies a-j. In some embodiments, the measures  and the dimensions  are derived from tables in a relational database (e.g., a fact table for the measures  and a set of dimension tables for the dimensions ).","A hierarchy of a dimension specifies a set of hierarchical parent-child relationships for filtering a set of measures through varying levels of granularity along the dimension. For example, a time dimension may include a hierarchy that specifies a month, quarter, and year relationship. Another example of a time dimension hierarchy specifies a week, day, and hour relationship. By filtering the measures with varying levels of granularity with the hierarchies, the dimension can be viewed with varying levels of granularity along the dimension. Further, different embodiments may define dimensions with any number of different hierarchies to categorize the measures.","While the first representation conceptually illustrates a schema of the example MDDB cube, the second representation of the example MDDB cube shows the cube , which represents the example MDDB cube defined by the schema , and a conceptual illustration of the dimensions  of the example MDDB cube. As illustrated in , each dimension of the cube  corresponds to a dimension  defined in the schema . The example MDDB cube may be viewed along any number of the dimensions  of the cube . Also, for a particular dimension , the example MDDB cube may be viewed according to the hierarchies specified for the particular dimension . As such, the dimensions  allow the measures  of the example MDDB cube to be filtered and viewed in a variety of different ways.","Another cube  is shown in the third representation of the example MDDB cube. The cube , which represents the example MDDB cube defined by the schema , conceptual depicts the measures  of the example MDDB cube. In particular, the cube  shows the relationships between the measures  and dimensions  of the example MDDB cube. As illustrated, the cube  is divided into sections along each dimension  (not shown) of the cube . Each of the resulting unit cubes includes all of the measures , as indicated by a detailed enlargement of a portion the cube  (which represents a portion of the example MDDB cube).","While the example MDDB cube illustrated in  is defined as having three dimensions, one of ordinary skill in the art will recognize that MDDB cubes may be defined by any number of dimensions. The example MDDB cube discussed in  is depicted as having three dimensions for purposes of explanation and clarity.",{"@attributes":{"id":"p-0137","num":"0136"},"figref":"FIG. 9","b":["905","905","910","915","920","925","905","910","915"]},"The DSV  of some embodiments is an object that provides a logical view of data in the data source . The logical view of the DSV  includes a set of data source objects (e.g., tables, views, stored procedures, and queries) that provide data from the data source . Thus, from the perspective of the MDDB cube  and the set of dimensions , the DSV  provides a single view of data even though the DSV  might include any number of tables, views, stored procedures, and\/or queries that derives data from the data source . As shown in , the set of dimensions  are derived from the DSV . Specifically, the data that defines the set of dimensions  is provided by the DSV . In some embodiments, the data that defines the set of measures  is also provided by the DSV . In other words, the set of dimensions  and the set of measures  are dependent on the DSV  for data.","Data source  stores data from which the DSV  derives its data. That is, the DSV  depends on the data source  for the data. The data source  may be implemented differently in different embodiments. For example, the data source  may be implemented as a database (e.g., a relational database, a hierarchical database, a flat file database, or any other type of database for storing data). The data source  may also be implemented as a file (e.g., an XML file, an spreadsheet file, a comma-separated values (CSV) file, a text file, etc.). The data source  may also be implemented as any other type of object that is a source of data.","A. Multiple Data Sources","Many of the figures described above illustrate an MDDB system that manages multiple data sources for multiple MDDB cubes. The following section describes one technique employed by the MDDB system of some embodiments to manage multiple data sources for multiple MDDB cubes. This technique involves providing a layer of abstraction between the multiple data sources and the MDDB system. In this way, from the perspective of the MDDB system, it appears that a single data source exists when, in fact, there are multiple data sources underlying the single data source.",{"@attributes":{"id":"p-0142","num":"0141"},"figref":["FIG. 10","FIG. 2","FIG. 10"],"b":["1000","1010","1000","200","1000","1005","1010"]},"In some embodiments, the unified data source  is a collection of data source objects that presents a single source of data to the MDDB system . A data source object, in some embodiments, is a representation of data in a data source (e.g., a data storage ). Examples of data source objects include tables, views, database functions, stored procedures, and queries. A view of some embodiments includes a stored query that is accessible as a virtual table composed of the result of the query. Thus, the view of some such embodiments may represent a subset of data stored in a table of a data source. A database function, in some embodiments, is a built-in function provided by a data source that may be performed on the data source. On the other hand, a database function in some embodiments is a user-defined function for performing functions (e.g., querying, updating, or deleting data) on a set of data sources. A database function is executed when data represented by the database function is requested, in some embodiments. The unified data source  of some embodiments may also include other data source objects.","The unified data source  of some embodiments may be implemented as a database. For instance, the unified data source  may be implemented as a relational database (e.g., Microsoft SQL Server\u00ae, MySQL\u00ae, IBM DB2\u00ae, Oracle Database\u00ae, etc.) or another type of database. The unified data source  may be implemented as a combination of different types of databases, or as any other type of object that serves as a source of data.","The data source manager  manages the data sources (i.e., the data storages ) of the MDDB system . To manage the data sources of the MDDB system , the data source manager  may establish connections to each of the data sources in order to verify that the data source is valid (e.g., the data source did not fail, is not offline, etc.). In some embodiments, the data source manager  maintains connections to each of the data sources.","Furthermore, the data source manager  handles the provisioning of the unified data source , which provides the layer of abstraction between the data sources and the MDDB system. For instance, the data source manager  identifies each of the data sources in the MDDB system  and creates data source objects that represent the data in the data source. The data source manager  then provisions the unified data source  to include the created data source objects.","In some embodiments, the data source manager  may handle requests for data in the unified data source . For example, when a request for data in the unified data source  is represented by a database function, the data source manager  performs the database function on the set of data sources that corresponds to the database function. For data in the unified data source  that is represented by stored procedures and queries, the data source manager  may handle them in a similar fashion.","When changes occur to any underlying data source of the unified data source , the data source manager  propagates those changes to the unified data source . For instance, when a data source is added to the MDDB system , the data source manager  creates data source objects that represent data in the data source that was added and reprovisions the unified data source  to include the created data source objects. On the other hand, when one of the data sources is removed from the unified data source , the data source manager  identifies the data source objects that represent data in the removed data source and reprovisions the unified data source  to not include the identified data source objects.","The operation of the MDDB system  will now be described. In particular, the following describes the operation of the data source manager  when the unified data source  is accessed (e.g., by the cube availability detector  or the cube installer ).","The cube availability detector  may access the unified data source  to determine whether or not a particular MDDB cube is available. The cube installer  may also access the unified data source  to install MDDB cubes. In either case, the unified data source  may receive a request for data in the unified data source . The data source manager  then processes the request.","The requested data may include data that is stored in the unified data source  and data that is represented by data source objects (e.g., views, database functions, stored procedures, and queries) in the unified data source . For requested data that is stored (e.g. in a table) in the unified data source , the data source manager  provides the requested data to the requestor. For requested data that is represented by data source objects in the unified data source , the data source manager  performs the appropriate action (e.g., performs a view query, executes a database function, performs a stored procedure, etc.) on the data sources that correspond to the data source objects.",{"@attributes":{"id":"p-0152","num":"0151"},"figref":["FIG. 11","FIG. 10","FIG. 11"],"b":["1100","1105","1005","1105","1100","1105","1130","1125","1105","1130","1125","1130","1125"]},"The unified data source  is similar to the unified data source  previously described above by reference to . That is, the unified data source  of some embodiments is a collection of data source objects that presents a single source of data (e.g., a unified data source). In some embodiments, the unified data source  also includes other data source objects like tables, stored procedures, and queries, for example. In addition, the unified data source  may be implemented as a database. For instance, the unified data source  may be implemented as a relational database (e.g., Microsoft SQL Server\u00ae, MySQL\u00ae, IBM DB2\u00ae, Oracle Database\u00ae, etc.). The unified data source  may also be implemented as another type of database or as any other type of object that serves as a source of data.","Each of the data sources  stores data that is represented by data source objects and\/or data that is stored in the unified data source . Each of the data sources  may be implemented in any number of different ways. For instance, a data source  may be implemented as a database (e.g., a relational database, a hierarchical database, a flat file database, or any other type of database for storing data). The data source  may also be implemented as a file (e.g., an XML file, an spreadsheet file, a comma-separated values (CSV) file, a text file, etc.). In addition, the data source  may be implemented as a combination of databases and files, or as any other type of object that serves as a source of data. Additionally, the data sources  may be different data storages, in some embodiments. For example, the data sources  may include different instances of one data storage of one product from one vendor and\/or include different instances of different data storages of different products from one vendor or different vendors.","As shown in , the data source manager  includes a unified data source manager , a data source object manager , and a data source connection manager . The data source connection manager  handles the management of the data sources . In some embodiments, the data source connection manager  establishes connections to each of the data sources  in order to verify that the data source is valid. In some embodiments, the data source connection manager  maintains connections to the data sources . In addition, the data source connection manager  detects changes to the data sources . For instance, the data source connection manager  detects when a data source  is removed (e.g., the data source  fails). Also, the data source connection manager  detects when a new data source  is added.","The data source object manager  is responsible for managing data source objects (also referred to as data access objects or database objects) for the unified data source . In some embodiments, a data source object is a representation of data in a data source . Examples of data source objects include tables, views, database functions, stored procedures, and queries. For a particular data source , the data source object manager  of some embodiments identifies a set of data source objects associated with the particular data source . The data source object manager  then notifies the unified data source manager  about the identified data source objects so the unified data source manager  can provision the unified data source  to include the identified data source objects. In some of these embodiments, the data source object manager  identifies the set of data source objects associated with the particular data source  based on data source objects specified in a predefined list (e.g., a structured query language (SQL) script) that is associated with the particular data source .","When changes occur to the data sources , the data source object manager  makes corresponding changes to the data source objects for the unified data source . For instance, when the data source object manager  receives notification from the data source connection manager  that a new data source  is added, the data source object manager  identifies data source objects associated with the new data source . The data source object manager  then notifies the unified data source manager  about these data source objects. In this way, the unified data source manager  can, in turn, reprovision the unified data source  to include the identified data source objects. In contrast, when the data source object manager  receives notification from the data source connection manager  that a data source  is removed, the data source object manager  identifies data source objects associated with the removed data source  and notifies the unified data source manager  about these data source objects. In response to the notification, the unified data source manager  reprovisions the unified data source  to not include the identified data source objects.","The unified data source manager  manages the unified data source . For instance, the unified data source manager  provisions and maintains the unified data source . In some embodiments, the unified data source manager  receives notifications regarding data source objects from the data source object manager . Based on a notification, the unified data source manager  makes corresponding adjustments to the unified data source . For example, when the unified data source manager  receives a notification from the data source object manager  to remove a set of data source objects, the unified data source manager  (1) identifies the set of data source objects in the unified data source  and (2) reprovisions the unified data source  to not include the identified set of data source objects. On the other hand, when the unified data source manager  receives a notification from the data source object manager  to add a set of data source objects, the unified data source manager  (1) generates the set of data source objects and (2) reprovisions the unified data source  to include the set of data source objects.","In some embodiments, the unified data source manager  is responsible for handling requests from clients for data in the unified data source . For instance, when the data source manager  receives a request for data in the unified data source , the data source manager  processes the data source object (e.g., performs a view query, executes a database function, performs a stored procedure, etc.) in order to provide the requested data.","The following describes the operation of the data source manager  by reference to . In particular,  conceptually illustrates a process  of some embodiments for provisioning the unified data source . The process  starts by identifying (at ) a data source . In some embodiments, the data source connection manager  identifies the data source . In some embodiments, the process  identifies the data source  by establishing a connection to the data source  in order to verify that the data source  is valid.","Next, the process  identifies (at ) a set of data source objects based on the identified data source . In some embodiments, the data source object manager  identifies the set of data source objects. The process  of some embodiments identifies the set of data source objects based on data source objects specified in a predefined list (e.g., an SQL script) that is associated with the data source .","The process  then provisions (at ) the unified data source  to include the set of data source objects. The unified data source manager  performs the provisioning of the unified data source  in some embodiments. To provision the unified data source , the process  in some embodiments generates the set of data source objects and then provisions the unified data source  to include the generated set of data source objects.","Next, the process  determines (at ) whether any data source  is left to process. When the process  determines that a data source  is left to process, the process  returns to  to continue processing any remaining data sources . When the process  determines that no data source  is left to process, the process  ends.","While the process illustrated in  shows a particular order of operations for provisioning a unified data source, one of ordinary skill in the art will recognize that the operations do not necessarily have to be performed in the illustrated order. For instance, the process of some embodiments may perform the provisioning of the unified data source after all the data sources have been processed.","As described above by reference to , some embodiments define a DSV of an MDDB cube to derive data from a single data source. The following figure illustrates a DSV of an MDDB cube that is defined to also derive data from a single unified data source that abstracts multiple underlying data sources from (DSVs of) the MDDB cubes.  conceptually illustrates data relationships of several MDDB cubes according to some embodiments of the invention. Specifically, this figure conceptually illustrates MDDB cubes defined by data in a unified data source.","As shown,  includes MDDB cubes , dimensions , DSVs , a unified data source , and data sources . As noted above, an MDDB cube may be defined by a set of measures and a set of dimensions. For this example, each of the MDDB cubes  is defined by a set of measures (not shown) and a set of dimensions . Additionally, the data sources  may be different data storages, in some embodiments. For instance, the data sources  may include different instances of one data storage of one product from one vendor and\/or include different instances of different data storages of different products from one vendor or different vendors.","Each of the DSVs  in this example is an object that provides a logical view of data in the unified data source . The logical view of the DSV  includes a set of data source objects (e.g., tables, views, database functions, stored procedures, and queries) that provide data from the unified data source . As shown in , each set of dimensions  are derived from a corresponding DSV . Specifically, the data that defines each set of dimensions  is provided by a corresponding DSV . In some embodiments, the data that defines the set of measures (not shown) is also provided by a corresponding DSV  (not shown). In other words, each set of dimensions  and each set of measures (not shown) are dependent on a corresponding DSV  for data.","In some embodiments, the unified data source  is similar to the unified data source  described above by reference to . For this example, the unified data source  of some embodiments is a collection of data source objects that presents a single source of data to MDDB cubes . In addition, the unified data source  provides a layer of abstraction between the data sources  and the MDDB cubes . This layer of abstraction hides the multiple data sources  that underlie the unified data source . Therefore, from the perspective of the MDDB cubes , the MDDB cubes  derive data from a single data source. In this example, each DSV  derives its data from the unified data source . In other words, the DSVs  each depends on the unified data source  for their data.","B. Data Object Management","A number of figures discussed above describe a unified data source that can provide data from multiple data sources to MDDB cubes through a layer of abstraction between the multiple data sources and the MDDB cubes. However, in some embodiments, the unified data source may be used to provide data to more than just MDDB cubes. The unified data source of some embodiments may provide data to any number of different data consuming clients.",{"@attributes":{"id":"p-0171","num":"0170"},"figref":["FIG. 14","FIGS. 10","FIG. 14"],"b":["1405","1405","11","13","1405","1410","1415","1420","1425","1430"]},"In some embodiments, each of the data sources  may be implemented in any number of different ways. For instance, a data source  may be implemented as a database (e.g., a relational database, a hierarchical database, a flat file database, or any other type of database for storing data). Also, the data source  may be implemented as a file (e.g., an XML file, an spreadsheet file, a comma-separated values (CSV) file, a text file, etc.). The data source  may also be implemented as a combination of databases and\/or files, or as any other type of object that serves as a source of data. Additionally, the data sources  may be different data storages, in some embodiments. For instance, the data sources  may include different instances of one data storage of one product from one vendor and\/or include different instances of different data storages of different products from one vendor or different vendors.","In some embodiments, each data source object in the sets of data source objects  is a representation of data in a data source . Examples of data source objects include tables, views, database functions, stored procedures, and queries. In some embodiments, a table is a set of data elements (e.g., values) organized in terms of vertical columns and horizontal rows. A view of some embodiments includes a stored query that is accessible as a virtual table composed of the result of the query. Thus, the view may represent a subset of data stored in a table of a data source. A database function of some embodiments is a built-in function provided by a data source for execution on the data source. In some embodiments, a database function is a user-defined function for performing functions (e.g., querying, updating, deleting data) on a set of data sources. A database function is executed when data represented by the database function is requested, in some embodiments. The unified data source  of some embodiments may include other data source objects as well. Examples of such data source objects include tables, stored procedures, and queries.","The unified data source  of some embodiments is similar to the unified data source . In these embodiments, the unified data source  is a collection of data source objects that presents a single source of data to the data source clients . As shown, the unified data source  includes a collection of data source objects (i.e., the sets of the data source objects ). The unified data source  of some embodiments is a collection of views and\/or functions that presents a single source of data to the data source clients .","The data source manager  is, in some embodiments, similar to the data source manager . However, the data source manager  also manages the source linkers . For each data source , the data source manager  creates a corresponding source linker . When a new data source  is added, the data source manager  creates a corresponding source linker  for the new data source . When one of the data sources  is removed, the data source manager  removes the corresponding source linker .","The source linkers  of some embodiments link data sources to the data source objects  in the unified data source . In some such embodiments, the source linkers  link remote data sources to the data source objects  in the unified data source . The source linkers  are implemented as Microsoft\u00ae SQL Server Linked Server objects, in some embodiments.","In some embodiments, the source linkers  facilitate the distribution of multiple queries, updates, and commands across multiple data sources  so that multiple queries can be performed simultaneously. For example, one of the data source objects  in the unified data source  may be defined as a database function that includes a query for data from data source 2 and a query for data from data source 3. When this data source object  is accessed, the source linkers  allow for the concurrent querying of data from data source 2 and data source 3.","Furthermore, the source linkers  of some embodiments allows for a single query, update, and\/or command to be performed across several data sources. For instance, one of the data source objects  in the unified data source  may be defined as a view that includes a single query that queries data from data source 2 and data source 3.","In some embodiments, the data source clients  access data from the data sources  through the unified data source . Each of the data source clients  may be implemented differently. For example, a data source client  may be implemented as an MDDB cube, a web-browser client, a data processing application, or any other type of data consuming entity. As another example, the data source clients  may be implemented as any type of entity that performs SQL statements against a data source (e.g., SQL reporting application and\/or services) to retrieve data. In some embodiments, the data source clients  are implemented as any type of data interchange system.","While the data source manager  and the unified data source  are shown as separate components in , in some embodiments, the data source manager  and the unified data source  are part of a single application (e.g., a relational database management system). In other embodiments, the data source manager  and the unified data source  are implemented as separate applications. Moreover, in some embodiments, the data source manager  and the unified data source  are implemented on a single computing device while, in other embodiments, the data source manager  and the unified data source  are implemented on separate computing devices.",{"@attributes":{"id":"p-0181","num":"0180"},"figref":["FIG. 15","FIG. 15","FIG. 16","FIG. 16","FIG. 14","FIG. 16","FIG. 16"],"b":["1500","1415","1405","1500","1415","1405","1405","1415","1430","1410","1420","1430","1405"]},"The process begins by receiving (at ) a request from a data source client. As shown in , the unified data source  receives (at ) a request from the data source client . In some embodiments, the data source client  sends the request in terms of a set of SQL queries. The data source client  of some embodiments may also send the request in terms of any type of format that the unified data source  interprets.","Next, the process  identifies (at ) a set of data source objects in the unified data source based on the request. In some embodiments, the request specifies the set of data source objects. In such cases, the process  identifies the set of data source objects specified by the request. For the example illustrated in , the request specifies the data source object . Thus, the data source manager  identifies the data source object  when the unified data source  receives the request from the data source client .","The process  then retrieves (at ) data from a set of data sources based on the data source objects. As noted above, a data source object, in some embodiments, is a representation of data in a set of data sources. Examples of a data source object include a view, a database function, a stored procedure, and a query. A view of some embodiments, as previously described above, includes a stored query that is accessible as a virtual table composed of the result of the query. As such, the view of some such embodiments represents a subset of data stored in a table of a data source. Also, a database function of some embodiments is a built-in function provided by a data source for execution on the data source. In some embodiments, a database function is a user-defined function for performing functions (e.g., querying, updating, deleting data) on a set of data sources. A database function is executed when data represented by the database function is requested, in some embodiments. The unified data source  of some embodiments may also include other data source objects as well.","Referring to , the data source object  in this example represents data in the data source N. Additionally for this example, the data source object  is a view. As such, the data source object  includes a stored query that is accessed as a virtual table composed of the result of the query. Thus, the data source manager  identifies the stored query of the data source object  and sends (at ) the query to the data source N in order to retrieve data from the data source N. As shown in , the data source manager  sends the query to the data source N through the source linker  (at ), which links the data source N to the data source object . When the data source N receives the query, the data source N (or a data source manager that manages the data source N) executes the query and returns (at ) the query results to the data source object  through the source linker  (at ).","Returning to , the process  finally provides (at ) the requested data to the data source client. In some cases, the data requested by the data source client does not include all the data that the set of data source objects represents in the set of data sources, but rather, includes a subset of that data. In other words, the data requested by the data source client includes a portion of the data that the set of data source objects represents in the set of data sources.","Referring to , the data source manager  returns the requested data to the data source client  when the data source manager  receives the query results of the data source object 's query from the data source N. In some embodiments, the data source manager  identifies the requested data in the query results. For example, in cases where the request is in terms of an SQL query, the data source manager  performs the SQL query on the query results that the data source manager  receives from the data source N.","II. Content Packs","As discussed above, the MDDB system of some embodiments manages MDDB cubes by employing predefined packages (also referred to as content packs). A content pack includes MDDB cube definitions and metadata associated with the MDDB cube definitions. In some embodiments, the metadata associated with the MDDB cube definitions specify data relationships (e.g., data dependencies) between the components (e.g., measures, dimensions, DSVs, etc.) used to define the MDDB cubes.","In some embodiments, a content pack further includes definitions of other entities. For instance, the content pack of some such embodiments includes a set of dimension definitions, a set of DSV definitions, and\/or a set of presentation object definitions.","A dimension definition of some embodiments specifies metadata for categorizing a set of measures along the dimension. In some embodiments, a dimension specifies a set of hierarchies, which each specifies a set of hierarchical parent-child relationships for filtering a set of measures through varying levels of granularity along the dimension.","The DSV definition of some embodiments specifies an object that provides a logical view of data in a set of data sources (e.g., a unified data source). The logical view may include data source objects (e.g., tables, views, stored procedures, and\/or queries) that provide data from the data sources.","In some embodiments, a presentation object definition specifies a set of MDDB cubes and a representation of a perspective of the MDDB cubes. In addition, the presentation object definition further specify a set of charts, graphs, reports, and\/or tables that are generated based on the perspective of the MDDB cubes, in some embodiments.","In addition to the entity definitions discussed above, the content pack of some embodiments includes other types of data. For instance, the content pack may include data source metadata and a set of predefined data source commands. The content pack may also include a content map. In some embodiments, the entity definitions may be referred to as the content of the content pack. As such, the content map specifies relationships between the content, in some embodiments. That is, the content map specifies relationships (e.g., data dependencies) between the entities defined by the entity definitions. Furthermore, the content map may be implemented as a file (e.g., an XML file).",{"@attributes":{"id":"p-0194","num":"0193"},"figref":"FIG. 17","b":["1700","1700","1700","1700","1700"]},"The process  begins by defining (at ) a set of data source objects. As noted above, in some embodiments, a data source object is a representation of data in a data source (e.g., a table, view, database function, stored procedure, query, etc.). In some embodiments, defining the set of data source objects includes defining a data source for each data source object in the set of data source objects. In some instances, the same data source may be defined for more than one data source object while, in other instances, different data sources may be defined for each of the data source objects.","Next, the process  defines (at ) a set of DSVs. As previously described above, a DSV of some embodiments is an object that provides a logical view of data in a data source (e.g., a unified data source). The logical view of the DSV of some such embodiments may include tables, views, stored procedures, and\/or queries that provide data from the data source. In some embodiments, a single DSV is used to define data (e.g., a set of measures and a set of dimensions) for an MDDB cube. In other words, some of these embodiments prevent more than one DSV from being used to define an MDDB cube. In some embodiments, the process  defines each DSV in the set of DSVs by specifying (e.g., in a content map) a set of data source objects in the defined set of data source objects (from which the DSV derives data for the DSV's logical view of data). That is, the DSV is specified as dependent on the specified data source objects for the DSV's data.","The process  then defines (at ) a set of dimensions. As mentioned above, in some embodiments, a dimension is metadata for categorizing a set of measures along a dimension. The process  of some embodiments defines each dimension in the set of dimensions by specifying (e.g., in a content map) a DSV from the defined set of DSVs for the dimension (from which the dimension derives data for the dimension). In other words, the dimension is specified as dependent on the specified DSV for the dimension's data.","Next, the process  defines (at ) a set of MDDB cubes. As noted above, an MDDB cube of some embodiments is defined by a set of measures and a set of dimensions. In some embodiments, the process  defines each MDDB cube by specifying a set of measures for the MDDB cube. In some such embodiments, the process  specifies a set of measures by specifying (e.g., in a content map) a DSV from the defined set of DSVs for the set of measures. In other words, the set of measures is specified as dependent on the DSV for the set of measures' data.","In some embodiments, the process  further defines each MDDB cube by specifying (e.g., in a content map) a subset of the defined set of dimensions for the MDDB cube. That is, the MDDB cube is specified as dependent on the specified dimensions for the MDDB cube's data.","After defining a set of MDDB cubes, the process  defines (at ) a set of presentation objects. In some embodiments, the process  defines each presentation object by specifying (e.g., in a content map) a defined MDDB cube for the presentation object. Thus, the presentation object is specified as dependent on the specified MDDB cube for the presentation object's data.","Finally, the process  generates (at ) a content pack based on the defined set of presentation objects, the defined set of MDDB cubes, the defined set of dimensions, the defined set of DSVs, and the defined set of data source objects. The process  generates the content pack by packaging the entity definitions and other data mentioned above (e.g., a content map) into a single file (e.g., a ZIP file, a Microsoft .NET\u00ae assembly, etc.).","Although the process in  illustrates creating a content pack with several entity definitions, the process of some embodiments may define additional and\/or other items for the content pack. For example, some of these embodiments of the process may define data source metadata, data source commands, etc.","As described above, the content pack of some embodiments may include various entity definitions, data source metadata, a set of predefined data source commands, and a content map. Some embodiments may create a data structure to represent the items in a content pack.",{"@attributes":{"id":"p-0204","num":"0203"},"figref":["FIG. 18","FIG. 17"],"b":["1800","1800","1805","1810","1815","1820","1825","1830","1835","1840","1800"]},"The content pack ID  is a unique identifier (e.g., a filename, a number value, etc.) for identifying the content pack. Thus, the content pack ID  allows one content pack to be differentiated from other content packs. In addition, the content pack ID  may be used to reference other data in the content pack.","The content map  of some embodiments includes a list of relationships between content in the content pack. For instance, the content map may specify dependencies between the entities defined by the entity definitions in the content pack. As shown, the content map  includes sets of dependencies -. In some embodiments, the content map  is implemented as a file (e.g., an XML file).","The set of dependencies  includes 1-h pairs of data fields that each includes a DSV ID that is specified as dependent on a set of data source object IDs. The DSV ID is an identifier for identifying a DSV. In some embodiments, the DSV ID identifies a DSV that is defined by a DSV definition . Each of the data source objects in the set of data source object IDs is an identifier for identifying a data source object. The data source object ID of some embodiments identifies a data source object defined by a data source object created based on the set of data source commands .","The set of dependencies  includes 1-i pairs of data fields that each includes a dimension ID that is specified as dependent on a DSV ID. The dimension ID is an identifier for identifying a dimension. In some embodiments, the dimension ID identifies a dimension defined by a dimension definition . As mentioned above, the DSV ID is an identifier for identifying a DSV that is, in some embodiments, defined by a DSV definition .","The set of dependencies  includes 1-j pairs of data fields that each includes an MDDB cube ID that is specified as dependent on a set of DSV and dimension IDs. In some embodiments, the MDDB cube ID is specified as dependent on a single DSV ID and a set of dimension IDs. The MDDB cube ID is an identifier for identifying an MDDB cube. The MDDB cube ID of some embodiments identifies an MDDB cube defined by an MDDB cube definition . The DSV ID, as noted above, is an identifier for identifying a DSV that is defined by a DSV definition , in some embodiments. Additionally, as mentioned above, the dimension ID of some embodiments is an identifier for identifying a dimension that is defined by a dimension definition .","The set of dependencies  includes 1-k pairs of data fields that each includes a presentation object ID that is specified as dependent on a set of MDDB cube IDs. The presentation object ID is an identifier for identifying a presentation object. In some embodiments, the presentation object ID identifies a presentation object defined by a presentation object definition . As mentioned above, the MDDB cube ID of some embodiments is an identifier for identifying an MDDB cube defined by an MDDB cube definition .","The data source metadata  includes data source configuration information, in some embodiments. For instance, the data source metadata  may include information that specifies options for data sources (e.g., an option for specifying that a single data source may be added or that multiple data sources may be added). Other types of data source configuration information may be included in the data source metadata  of some embodiments.","In some embodiments, the data source metadata  includes information related to the configuration of a UI for managing data sources. For example, the data source metadata  may include strings for display in the UI (e.g., a title, instructions for using the UI, etc.). In addition, the data source metadata  may include options that specify that a field be displayed or hidden from display in the UI. Additional and different information is included in different embodiments of the data source metadata . In some embodiments, the data source metadata  is implemented as a file (e.g., an XML file).","Each DSV definition in the set of DSV definitions  is a definition of a DSV. As mentioned above, in some embodiments, a DSV is an object that provides a logical view of data in a data source. The set of DSV definitions  of some such embodiments are objects that, collectively, provide a logical view of data in a unified data source. The logical view of data may include tables, views, stored procedures, and\/or queries that provide data from the data source. In some embodiments, each DSV definition in the set of DSV definitions  may specify a set of data source objects that are created based on the set of data source commands . Furthermore, the set of DSV definitions  in some embodiments is implemented as a set of files (e.g., a set of XMLA files).","Each dimension definition in the set of dimension definitions  is a definition of a dimension. As described above, in some embodiments, a dimension is metadata for categorizing a set of measures along a dimension. Some embodiments use a particular dimension to define one or more MDDB cubes. In addition, each dimension definition in the set of dimension definitions  may specify a DSV defined by a DSV definition in the DSV definitions . In some embodiments, the set of dimension definitions  is implemented as a set of files (e.g., a set of XMLA files).","Each MDDB cube definition in the set of MDDB cube definitions  is a definition of an MDDB cube. As discussed above, an MDDB cube of some embodiments is defined by a set of measures and a set of dimensions. In some embodiments, each MDDB cube definition in the set of MDDB cube definitions  may specify a set of dimensions defined by dimension definitions in the set of dimension definitions . The set of MDDB cube definitions  is, in some embodiments, implemented as a set of files (e.g., a set of XMLA files).","Each presentation object definition in the set of presentation object definitions  is a definition of a presentation object. As noted above, in some embodiments, a presentation object is a predefined representation of a perspective of a set of MDDB cubes. In some such embodiments, the presentation object includes a set of charts, graphs, reports, and\/or tables, which are generated based on the perspective of the set of MDDB cubes that define the presentation object. In some embodiments, each presentation object in the set of presentation objects  specifies a set of MDDB cubes defined by MDDB cube definitions in the set of MDDB cube definitions . The set of presentation object definitions  of some embodiments are implemented as a set of files (e.g., a set of report definition language (RDL) files).","The set of data source commands  includes commands that may be performed on a set of data sources. In some embodiments, the set of data source commands  includes a set of data source commands for creating data source objects in a data source (e.g., a unified data source). In some such embodiments, the set of data source commands  also includes commands for deleting data source objects from a data source (e.g., a unified data source). In some embodiments, the set of data source commands for creating data source objects in a data source are included in a first SQL script and the set of data source commands for deleting data source objects from the data source are included in a second SQL script.",{"@attributes":{"id":"p-0218","num":"0217"},"figref":["FIG. 18","FIG. 18"]},{"@attributes":{"id":"p-0219","num":"0218"},"figref":["FIG. 19","FIG. 19"],"b":["1905","1910","1915","1920","1925","1930"]},"In this example, the unified data source  is a collection of data source objects  that presents a single source of data to the DSV . Each data source object in the set of data source objects  is a representation of data in a data source (not shown). The content map in this example includes a dependency (e.g., a dependency in the set of dependencies ) that specifies a DSV ID that identifies the DSV  as dependent on a set of data source object IDs that identify the set of data source objects .","As shown in , the set of dimensions , which are metadata for categorizing a set of measures (not shown) along the set of dimensions , are derived from the DSV . The content map in this example includes a set of dependencies (e.g., the set of dependencies ) that each specifies a dimension ID that identifies a dimension in the set of dimension  as dependent on a DSV ID that identifies the DSV .","The MDDB cube  is defined by a set of measures (not shown) and the set of dimensions . For this example, the set of measures is derived from the DSV . As such, the content map in this example includes a dependency (e.g., a dependency in the set of dependencies ) that specifies an MDDB cube ID that identifies the MDDB cube  as dependent on a DSV ID that identifies the DSV . Moreover, the content map also includes a set of dependencies (e.g., the set of dependencies ) that each specifies the MDDB cube ID that identifies the MDDB cube  as dependent on a dimension ID that identifies a dimension in the set of dimension .","As shown, the presentation object  is derived from the MDDB cube . Thus, the content map in this example includes a dependency (e.g., a dependency in the set of dependencies ) that specifies a presentation object ID that identifies the presentation object  as dependent on the MDDB cube ID that identifies the MDDB cube .",{"@attributes":{"id":"p-0224","num":"0223"},"figref":"FIG. 19"},"III. Exemplary Content Pack and MDDB System","Section II described a variety of details related to content packs. The following section describes numerous details of an MDDB system of some embodiments that utilizes content packs to manage MDDB cubes. In some embodiments, an installation process is performed to configure such an MDDB system. The following description discusses an example of such a process as well as example GUIs for configuring the MDDB system.","A. System Configuration",{"@attributes":{"id":"p-0227","num":"0226"},"figref":"FIG. 20","b":["2000","2000"]},"The process  will be described by reference to , which conceptually illustrate example GUIs for configuring a content pack and MDDB system. Specifically,  illustrates a GUI  for configuring a logic server,  illustrates a GUI  for configuring an MDDB cube server,  illustrates a GUI  for configuring a presentation object server, and  illustrates a GUI  for configuring a scheduling server.","The process  begins by configuring (at ) a logic server. In some embodiments, the logic server is configured based on configuration data. Examples of such configuration data may include a server host name, a port number, a secure sockets layer (SSL) port number, and\/or any other data for identifying the logic server. The process  of some embodiments provides an interface (e.g., a GUI, a command line interface, or any other interface for receiving input) for receiving configuration data to configure the logic server. As part of the configuration of the logic server, the process  of some embodiments provisions a web server (e.g., Microsoft Internet Information Services (IIS)\u00ae) and a database (e.g., an SQL database) for hosting a unified data source. In some such embodiments, the process  provisions the web server and the database by initiating a setup program that provisions the web server and the database.","As mentioned above, the process  of some embodiments may be performed by a predefined installation program executing on a set of computing devices in order to set up a content pack and MDDB system. In some such embodiments, the logic server is hosted on the set of computing devices on which the predefined installation program is executed while, in other such embodiments, the logic server is hosted on a set of computing devices that is different than the set of computing devices on which the predefined installation program is executed (e.g., remote installation).","In some embodiments, the logic server is responsible for implementing the logic of the content pack and MDDB system. The logic server of some embodiments implements such logic through a set of web services hosted on the web server. In some of these embodiments, the logic server configures and communicates with other servers (e.g., an MDDB cube server, a presentation object server, a scheduling server, etc.) in the content pack and MDDB system through the set of web services.","After the logic server is configured, the process  of some embodiments configures the rest of the content pack and MDDB system through the logic server. In some of these embodiments, the logic server provides an interface for configuring the rest of the content pack and MDDB system.  illustrates an example of such an interface. Specifically,  illustrates a GUI  that the logic server provides for modifying the configured logic server when a connection is established to the logic server. As shown, the GUI  includes a selection panel , user interface (UI) text input items -, and selectable UI items -.","The selection panel  includes selectable UI items -. The selectable UI item  is for navigating to the GUI . Thus, when GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the GUI . Similarly, the selectable UI items - are each for navigating to a GUI that corresponds to the selectable UI item when the GUI  receives a selection of the selectable UI item.","The UI text input item  (e.g., the Server host name text input field) is for receiving input that modifies the host name of the logic server. In this example, the host name \u201csvdcdev002\u201d has been input (e.g., through a series of keystrokes) into the UI text input item . The UI text input item  (e.g., the Port text input field) is for receiving input that modifies a port number through which the logic server is hosted. In this example, a port number 80 has been input (e.g., through a series of keystrokes) into the UI text input item .","The UI text input item  (e.g., the SSL Port text input field) is for receiving input that modifies an SSL port number through which the logic server is hosted. In this example, a port number  has been has been input (e.g., through a series of keystrokes) into the UI text input item . The selectable UI item  (e.g., the Enable SSL check box) is for enabling and disabling SSL. As shown, selectable UI item  is disabled and the UI text input item  is grayed out to prevent the UI text input item  from receiving input. When the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  enables the UI text input item  by removing the graying out of the UI text input item  in order for the UI text input item  to receive input. In some embodiments, the process  disables the UI text input item  when the GUI  receives a selection of the selectable UI item .","The selectable UI item  (e.g., the Test Connection button) is for invoking a test that attempts to establish a connection to a logic server based on the input received in the UI text input items - and the selectable UI item . The selectable UI item  (e.g., the Save button) is for saving the input received in the UI text input items - and the selectable UI item . When the GUI  receives a selection of the selectable UI item  (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen), the process  stores (e.g., in an SQL database) the configuration data received through the GUI  for the logic server and configures the logic server based on the configuration data received through the GUI . In some embodiments, the process  configures the logic server by configuring a data storage (e.g., an SQL database) for the content pack and MDDB system.","Returning back to , the process  then configures (at ) an MDDB cube server. Similar to the logic server, the MDDB cube server of some embodiments is configured based on configuration data. Examples of such configuration data may include a server host name, a database identifier, a set of server credentials, and\/or any other data for configuring the MDDB cube server.","The process  of some embodiments provides the GUI  illustrated in  in order to receive configuration data for configuring the MDDB cube server. In particular,  illustrates the GUI  at four stages - of receiving configuration data for the MDDB cube server.","The first stage  illustrates that a user has entered input (e.g., through a series of keystrokes) into a UI text input item  (e.g., the Analysis Server Host Name text input field) that is for receiving input that specifies the host name of the MDDB cube server. The first stage  also illustrates selectable UI items  and .","The selectable UI item  (e.g., the Next button) is for navigating to the second stage  of the GUI . When the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the second stage  of the GUI . The selectable UI item  (e.g. the Cancel button) is for terminating the GUI . In some embodiments, the process  provides a GUI (not shown) that includes the selection panel  when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item .","The second stage  shows the GUI  after the user has selected the selectable UI item  in the first stage . As shown, the GUI  includes the selectable UI items  and . The GUI  also includes selectable UI items  and  and UI text input items  and .","The UI text input item  (e.g., the Create name database text input field) is for receiving input that specifies a database identifier for an MDDB cube database that is going to be created. The UI text input item  (e.g., the Use existing database drop-down list) is for receiving input that specifies a database identifier of an existing MDDB cube database.","The selectable UI item  (e.g., the set of radio buttons) is for selecting between an option to create a new MDDB cube database and an option to use an existing MDDB cube database. The GUI  allows the UI text input item  to receive input when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the top portion of the selectable UI item . For this example, such a selection has been made, as indicated by the highlighting of the radio button next to the Create new database option of the selectable UI item . However, the GUI  allows the UI text input item  to receive input when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the bottom portion of the selectable UI item . The second stage  shows that the user has entered \u201cIT Analytics\u201d (e.g., through a series of keystrokes) into the UI text input item  to specify a name identifier for an MDDB cube server that is going to be created.","The selectable UI item  is for navigating back to the first stage  of the GUI . When the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the first stage  of the GUI . In this stage , the selectable UI item  is for navigating to the third stage  of the GUI . Thus, when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the third stage  of the GUI .","The MDDB cube server of some embodiments includes a multidimensional database for managing, storing, and provisioning MDDB cubes. Many different MDDB cube servers that are provided by different vendors may be utilized. Examples of MDDB cube servers include Essbase\u00ae, icCube\u00ae, Microsoft Analysis Services\u00ae, Mondrian OLAP Server\u00ae, Oracle Database OLAP Option\u00ae, etc.","The third stage  illustrates the GUI  after the user has selected the selectable UI item  in the second stage . In this stage , the GUI  includes the selectable UI items -. The GUI  further includes UI text input items  and .","The UI text input item  (e.g., the Domain\\UserName text input field) is for receiving input that specifies a domain and username of a set of server credentials for a database of the MDDB cube server. The UI text input item  (e.g., the Password text input field) is for receiving input that specifies a password of the set of server credentials for the database of the MDDB cube server. The third stage  illustrates that the user has entered \u201cbaydynamics\\devadmin\u201d (e.g., through a series of keystrokes) into the UI text input item  to specify a domain and username for a set of server credentials for a database of the MDDB cube server. In addition, this stage  shows that the user has entered a series of characters (e.g., through a series of keystrokes), which are hidden by asterisks, into the UI text input item  to specify a password for the set of server credentials for the database of the MDDB cube server.","At the third stage , the selectable UI item  is for navigating back to the second stage  of the GUI  and the selectable UI item  is for navigating to the fourth stage  of the GUI . As such, when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the second stage  of the GUI . Furthermore, when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the fourth stage  of the GUI .","The fourth stage  shows the GUI  after the user has selected the selectable UI item  in the third stage . As shown, this stage  of the GUI  includes the selectable UI items -. The GUI  at this stage  further includes selectable UI item  and UI text input items  and .","The UI text input item  (e.g., the User name text input field) is for receiving input that specifies a username for a set of server credentials for a data source (e.g., a data mart). The UI text input item  (e.g., the Password text input field) is for receiving input that specifies a password of the set of server credentials for the data source.","The selectable UI item  (e.g., the set of radio buttons) is for selecting between types of authentication options (Windows authentication and SQL Server authentication in this example) for the data source. One type of authentication option (Windows authentication in this example) is selected when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the top portion of the selectable UI item . Another type of authentication option (SQL Server authentication in this example) is selected when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the bottom portion of the selectable UI item . For this example, such a selection has been made, as indicated by the highlighting of the radio button next to the Use SQL Server authentication option of the selectable UI item .","The fourth stage  shows that the user has entered \u201csa\u201d (e.g., through a series of keystrokes) into the UI text input item  to specify a user name for a set of server credentials for a data source. This stage  also shows that the user has entered a series of characters (e.g., through a series of keystrokes), which are hidden by asterisks, into the UI text input item  to specify a password for the set of server credentials for the data source.","In the fourth stage , the selectable UI item  is for navigating back to the third stage  of the GUI . Thus, when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the third stage  of the GUI .","At this stage , the selectable UI item  is for completing the receipt of configuration data for the MDDB cube server. When the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  stores (e.g., in an SQL database) the configuration data received through the GUI  for the MDDB cube server and configures the MDDB cube server based on the configuration data received through the GUI . In some embodiments, the process  configures the MDDB cube server by verifying that the MDDB cube server configuration data is valid (e.g., by attempting to establish a connection to the MDDB cube server using the configuration data received through the GUI ).","Returning back to , the process  configures (at ) a presentation object server. The presentation object server of some embodiments is configured based on configuration data. Examples of such configuration data may include a server host name, a port number, a secure sockets layer (SSL) port number, a set of server credentials, and\/or any other data for configuring the presentation object server.","In some embodiments, the presentation object server is hosted on the same set of computing devices that hosts the MDDB cube server while, in other embodiments, the presentation object server is hosted on a set of computing devices separate from the set of computing devices used to host the MDDB cube server.","The process  in some embodiments provides a GUI (not shown) similar to the GUI  illustrated in  except that the GUI is for receiving configuration data for configuring the presentation object server. Thus, such a GUI includes a selection panel , a first user interface (UI) text input (e.g., the Server host name text input field) for receiving input that specifies the host name of the presentation object server, a second UI text input item (e.g., the Port text input field) for receiving input that specifies a port number or an SSL port number through which the presentation object server is hosted, a first selectable UI item (e.g., a Test Connection button) for invoking a test that attempts to establish a connection to a presentation object server based on the input received in the first and second UI text input items, and a second selectable UI item (e.g., the Save button) for saving the input received in the first and second UI text input items. The process  of some embodiments automatically configures the presentation object server based on configuration data for configuring other servers (e.g., the logic server or the MDDB cube server).","Additionally, the process  in some embodiments provides the GUI  illustrated in  after receiving configuration data for configuring the presentation object server. In particular,  illustrates the GUI  at two stages  and  after receiving configuration data for the presentation object server.","The first stage  illustrates that the GUI  includes the selection panel  and a selectable UI item  (e.g., the Change Reporting Server Settings button) for navigating to the second stage  of the GUI  to edit configuration data for configuring the presentation object server when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item . This stage  also shows the GUI  displaying the uniform resource locator (URL) of the current presentation object server as well as the authentication type configured for the current presentation object server.","The second stage  shows the GUI  after the user has selected the selectable UI item  in the first stage . As shown, the GUI  includes UI text input items  and  and selectable UI items , , and .","The UI text input item  (e.g., the Domain\\UserName text input field) is for receiving input that specifies a domain and username of a set of server credentials for the presentation object server. The UI text input item  (e.g., the Password text input field) is for receiving input that specifies a password of the set of server credentials for the presentation object server. The second stage  illustrates that the user has entered \u201cbaydynamics\\devadmin\u201d (e.g., through a series of keystrokes) into the UI text input item  to specify a domain and username for a set of server credentials for the presentation object server. Also, this stage  shows that the user has entered a series of characters (e.g., through a series of keystrokes), which are hidden by asterisks, into the UI text input item  to specify a password for the set of server credentials for the presentation object server.","The selectable UI item  (e.g., the set of radio buttons) is for selecting between types of server credential options (Windows authentication and Credentials stored securely in the presentation object server in this example) for the presentation object server. One type of server credential option (Windows authentication in this example) is selected when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the top portion of the selectable UI item . Another type of server credential option (Credentials stored securely in the presentation object server in this example) is selected when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the bottom portion of the selectable UI item . For this example, such a selection has been made, as indicated by the highlighting of the radio button next to the Credentials stored securely in the presentation object server option of the selectable UI item .","In some embodiments, the selectable UI item  (e.g., the Next button) is for completing the editing of configuration data for the presentation object server. When the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  stores (e.g., in an SQL database) the configuration data received through the GUI  for the presentation object server and configures the presentation object server based on the configuration data received through the GUI . In some embodiments, the process  configures the presentation object server by verifying that the presentation object server configuration data is valid (e.g., by attempting to establish a connection to the presentation object server using the configuration data received through the GUI ).","The selectable UI item  (e.g. the Cancel button) is for terminating the GUI . In some embodiments, the process  provides a GUI (not shown) that includes the selection panel  when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item .","The presentation object server of some embodiments handles the generation and management (e.g., storing and provisioning) of presentation objects. A presentation object, in some embodiments, is a predefined representation of a perspective of a set of MDDB cubes. In other words, the presentation object of such embodiments consumes a portion of or all of a set of MDDB cubes. The presentation object of some embodiments can include a set of charts, graphs, reports, and\/or tables. The charts, graphs, reports, and\/or tables of the presentation object are generated based on the perspective of the set of MDDB cubes that define the presentation object.","Returning back to , the process  configures (at ) a scheduling server and then the process  ends. In some embodiments, the scheduling server is configured based on configuration data. Examples of such configuration data may include a server host name, a set of credentials, or any other data for configuring the scheduling server.","In some embodiments, the process  provides the GUI  illustrated in  in order to receive configuration data for configuring the scheduling server. In particular,  illustrates the GUI  at two stages  and  of receiving configuration data for the scheduling server.","The first stage  illustrates that a user has entered input (e.g., through a series of keystrokes) into a UI text input item  (e.g., the SQL Server Agent Host text input field) that is for receiving input that specifies the host name of the scheduling server. The first stage  also illustrates selectable UI items  and .","The selectable UI item  (e.g., the Next button) is for navigating to the second stage  of the GUI . When the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the second stage  of the GUI . The selectable UI item  (e.g. the Cancel button) is for terminating the GUI . In some embodiments, the process  provides a GUI (not shown) that includes the selection panel  when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item .","The second stage  shows the GUI  after the user has selected the selectable UI item  in the first stage . As shown in this stage , the GUI  includes the selectable UI items  and . The GUI  further includes selectable UI item  and UI text input items  and .","The UI text input item  (e.g., the Domain\\UserName text input field) is for receiving input that specifies a domain and username of a set of server credentials for the scheduling server. The UI text input item  (e.g., the Password text input field) is for receiving input that specifies a password of the set of server credentials for the scheduling server. As shown, the second stage  illustrates that the user has entered \u201cbaydynamics\\devadmin\u201d (e.g., through a series of keystrokes) into the UI text input item  to specify a domain and username for a set of server credentials for a database of the MDDB cube server. Additionally, this stage  shows that the user has entered a series of characters (e.g., through a series of keystrokes), which are hidden by asterisks, into the UI text input item  to specify a password for the set of server credentials for the scheduling server.","The selectable UI item  is for navigating back to the first stage  of the GUI . When the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the first stage  of the GUI .","In the second stage , the selectable UI item  (e.g., the Next button) is for completing the receipt of configuration data for the scheduling server. When the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  stores (e.g., in an SQL database) the configuration data received through the GUI  for the scheduling server and configures the scheduling server based on the configuration data received through the GUI . In some embodiments, the process  configures the presentation object server by verifying that the presentation object server configuration data is valid (e.g., by attempting to establish a connection to the presentation object server using the configuration data received through the GUI ).","The scheduling server of some embodiments manages the processing of MDDB cubes. For instance, the scheduling server processes a set of specified MDDB cubes according to a defined schedule (e.g., a frequency at which to process MDDB cubes, a time at which to process MDDB cubes), in some embodiments.","B. Software Architecture","As described above, the logic server of some embodiments handles the implementation of the logic of the content pack and MDDB system. The logic server of some embodiments is implemented by a web server (e.g., Microsoft Internet Information Services (IIS)\u00ae). In some of these embodiments, the logic server communicates with other servers (e.g., an MDDB cube server, a presentation object server, a scheduling server, etc.) in the content pack and MDDB system through a set of web services provided by the logic server.",{"@attributes":{"id":"p-0277","num":"0276"},"figref":["FIG. 25","FIG. 20"],"b":["2500","2000","2500","2505","2510","2515","2520","2525","2530","2535"]},"In some embodiments, the configuration manager  serves as a communication gateway between users of the MDDB logic server and the MDDB logic server. For instance, the configuration manager  is responsible for managing requests and commands that the configuration manager  receives through UIs (e.g., a GUI, command line interfaces, or any other type of interface for receiving input). In response, the configuration manager  forwards the requests and commands to one or more modules in the MDDB logic server (e.g., the presentation object manager , the content pack manager , the MDDB cube manager , the data source manager , and the server storage ) to fulfill the requests and perform the commands. In some embodiments, the configuration manager  accesses the server storage  in order to manage the requests and commands.","The content pack manager  of some embodiments manages content packs for the MDDB system. For instance, the content pack manager  receives content packs, as shown in , and processes the received content packs. In some embodiments, these content packs may have a data structure similar to the one described above by reference to . In such instances, the content pack manager  accesses the data structures in order to process the content packs.","Moreover, the content pack manager  receives requests (e.g., from the presentation object manager  and the MDDB cube manager ) for a single content map that combines the relationships specified in the content map of each content pack in the MDDB system. In some embodiments, the single content map is referred to as a unified content map. When the content pack manager  receives such requests, the content pack manager  generates a unified content map based on the content packs and sends the unified content map to the requestor. In some embodiments, the content pack manager  also accesses a unified data source (e.g., hosted by the server storage  and managed by the data source manager ) for data (e.g., to generate a unified content map) in order to manage the content packs for the MDDB system.","The MDDB cube manager  of some embodiments manages MDDB cubes for the MDDB system. For instance, the MDDB cube manager  is responsible for handling requests received from the configuration manager  that are related to MDDB cubes. The MDDB cube manager  may receive requests to install and uninstall MDDB cubes. In response, the MDDB cube manager  may install the requested MDDB cubes on an MDDB cube server, which hosts MDDB cubes, and\/or may uninstall the requested MDDB cubes from the MDDB cube server.","The MDDB cube manager  of some embodiments sends requests to the content pack manager  for a unified content map in order for the MDDB cube manager  to determine the statuses (e.g., not available, available, and available and installed) of each MDDB cube. To manage MDDB cubes, the MDDB cube manager , in some embodiments, accesses a unified data source (e.g., hosted by the server storage  and managed by the data source manager ) for data (e.g., to install and uninstall MDDB cubes).","In some embodiments, the presentation object manager  manages presentation objects for the MDDB system. For example, the presentation object manager  handles requests received from the configuration manager  that are related to presentation objects. Examples of some requests include requests to install and uninstall presentation objects. In response to such requests, the presentation object manager  may install the requested presentation objects on a presentation object server, which hosts presentation objects, and\/or may uninstall the requested presentation objects from the presentation object server.","The presentation object manager  of some embodiments sends request to the content pack manager  for a unified content map in order for the presentation object manager  to determine the statuses of presentation objects. To manage the presentation objects, the presentation object manager , in some embodiments, accesses a unified data source (e.g., hosted by the server storage  and managed by the data source manager ) for data (e.g., to install and uninstall presentation objects). In some embodiments, the presentation object manager  implements the presentation object manager , which is described above by reference to .","The data source manager  is responsible for managing the data sources . In some embodiments, the data source manager  is implemented as one of the data source managers previously described above (e.g., the data source manager described above by reference to  or ). Thus, the data source manager  may establish connections to each of the data sources  in order to verify that the data source is valid. Once a connection is established to a data source, in some embodiments, the data source manager  maintains the connection to the data source.","Additionally, the data source manager  is responsible for the provisioning of a unified data source (e.g., hosted by the server storage ), which provides a layer of abstraction between the data sources  and the MDDB system. When changes occur to the data sources  (e.g., a data source  is removed or a new data source is added), the data source manager  propagates such changes to the unified data source.","In some embodiments, the server storage  includes a relational database for hosting a unified data source for the MDDB system. Also, the server storage  may store information for managing MDDB cubes and\/or presentation objects. Examples of such information include content packs, metadata associated with the content packs, metadata related to UIs for allowing a user to interact with the MDDB system, and MDDB system configuration data. In some embodiments, the server storage  hosts connections to the data sources  that are managed by the data source manager . In some embodiments, the data source manager  and the server storage  are implemented as part of a relational database management system.","The data sources  of some embodiments are similar to the data sources , which are described above by reference to . That is, each of the data sources  stores data that is represented by data source objects and\/or stored in a unified data source (e.g., by the server storage ). In addition, each of the data sources  may be implemented in any number of different ways. For instance, a data source  may be implemented as a database (e.g., a relational database, a hierarchical database, a flat file database, or any other type of database for storing data). Also, the data source  may be implemented as a file (e.g., an XML file, an spreadsheet file, a comma-separated values (CSV) file, a text file, etc.). In addition, the data source  may be implemented as a combination of databases and\/or files, or as any other type of object that serves as a source of data. Additionally, the data sources  may be different data storages, in some embodiments. For instance, the data sources  may include different instances of one data storage of one product from one vendor and\/or include different instances of different data storages of different products from one vendor or different vendors.","While many of the features have been described as being performed by one module (e.g., the content pack manager  or the data source manager ), one of ordinary skill in the art would recognize that the features might be split up among multiple modules. Similarly, the features described as being performed by several different modules might be performed by a single module in some embodiments (e.g., the presentation object manager  might be part of the MDDB cube manager ).","C. Adding and Removing Data Sources","Some of the figures described above discuss a data source manager of some embodiments that provisions a unified data source in order to provide a layer of abstraction between multiple data sources and an MDDB system. As mentioned above, a unified data source of some embodiments is a collection of data source objects that represent data in the multiple data sources. Moreover, adding data sources to the MDDB system and removing data sources from the MDDB system may cause the data source manager of some such embodiments to perform corresponding adjustments to data source objects in the unified data source.",{"@attributes":{"id":"p-0292","num":"0291"},"figref":["FIG. 26","FIGS. 10","FIG. 26","FIG. 27","FIG. 27"],"b":["2600","11","14","25","2600","2700","2700","2705","2725"]},"The process  begins by receiving (at ) a request to add a data source to an MDDB system. In some embodiments, the request is received from a user of an MDDB system through a UI.  illustrates an example of such a UI that the process  provides in some embodiments. As shown, the first stage  of the GUI  includes the selection panel  and several selectable UI items. In some embodiments, the first stage  of the GUI  is provided when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item  included in the selection panel .","The selectable UI item  (e.g., the Add Connection button) is for initiating a data source addition operation. When the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  receives the request to add the data source to the MDDB system.","Next, the process  identifies (at ) a content pack associated with the data source that is requested to be added to the MDDB system. In some embodiments, the process  identifies the content pack by accessing a content pack ID field of a content pack data structure described above by reference to .","The process  of some embodiments provides the second stage  of the GUI  after the process  identifies the content pack associated with the request. As illustrated in , the second stage  shows the GUI  after a user has selected (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) the selectable UI item . As shown, this stage  of the GUI  displays instructions for configuring a data source to add to the MDDB system.","The GUI  at the second stage  includes selectable UI items  and . In this stage , the selectable UI item  is for navigating to the third stage  of the GUI . Therefore, when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the third stage  of the GUI . In this example, the selectable UI item  is for terminating the GUI . In some embodiments, the process  provides a GUI (not shown) that includes the selection panel  when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item .","The third stage  illustrates the GUI  after the user has selected the selectable UI item  in the second stage . In this stage , the GUI  includes the selectable UI items  and . The GUI  further includes UI text input items - and selectable UI items  and .","The UI text input item  (e.g., the Server name text input field) is for receiving input that specifies the server name of the data source that is to be added to the MDDB system. In this example, the server name \u201cvmdcsccm001\u201d has been input (e.g., through a series of keystrokes) into the UI text input item . The UI text input item  (e.g., the Database name text input field) is for receiving input that specifies a name for the data source that is to be added to the MDDB system. In this example, a data source name of \u201cSMS_BDP\u201d has been input (e.g., through a series of keystrokes) into the UI text input item .","The UI text input item  (e.g., the User name text input field) is for receiving input that specifies a username for a set of credentials for the data source that is to be added to the MDDB system. The UI text input item  (e.g., the Password text input field) is for receiving input that specifies a password of the set of credentials for the data source.","The selectable UI item  (e.g., the set of radio buttons) is for selecting between types of authentication options (Windows authentication and SQL Server authentication in this example) for the data source. One type of authentication option (Windows authentication in this example) is selected when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the top portion of the selectable UI item . Another type of authentication option (SQL Server authentication in this example) is selected when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the bottom portion of the selectable UI item . For this example, such a selection has been made, as indicated by the highlighting of the radio button next to the Use SQL Server authentication option of the selectable UI item .","The selectable UI item  is for navigating back to the second stage  of the GUI . When the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the second stage  of the GUI . At the third stage , the selectable UI item  is for navigating to the fourth stage  of the GUI . As such, when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the fourth stage  of the GUI .","The fourth stage  of the GUI  illustrates that the user has selected the selectable UI item  in the third stage . At this stage , the GUI  includes a selectable UI item  (e.g., a Time Zone drop-down list) for receiving input that specifies a time zone for the data source that is to be added to the MDDB system.","At the fourth stage , the selectable UI item  is for navigating back to the third stage  of the GUI . As such, when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  provides the third stage  of the GUI .","Also at this stage , the selectable UI item  is for completing the data source addition operation. Therefore, when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item , the process  of some embodiments receives the request to add the data source based on the information provided through the GUI  at the third stage  and the fourth stage .","Several stages of the GUI  (e.g., stages , , and ) illustrated in  display strings (e.g., text) in the GUI . In some embodiments, these strings displayed in the GUI  are provided from a data source metadata field of a content pack data structure as described above by reference to .","Returning back to , the process  then adds (at ) the data source to the MDDB system. The process  of some embodiments adds the data source by establishing a connection to the data source based on the information provided through the UI (e.g., the third stage  and the fourth stage  of the GUI ) in order to verify that the data source is valid. In some embodiments, the process  stores the connection and\/or the connection information in a data storage (e.g., in the server storage ).","Based on the content pack, the process  then identifies (at ) a set of data source objects associated with the data source. In some embodiments, the process  identify the data source objects by accessing a set of data source commands (e.g., a set of data source commands for creating data source objects in a data source) specified in a field of the content pack data structure, which is described above by reference to .","Finally, the process  provisions (at ) the unified data source to include the identified set of data source objects. In some embodiments, the process  provisions the unified data source by (1) removing any data source objects in the unified data source that are associated with the identified content pack and then (2) provisioning the remaining data source objects in the unified data source with the identified set of data source objects. This ensures that the unified data source does not include duplicates of a data source object. In some embodiments, the process  provisions the unified data source by executing a set of data source commands (e.g., a set of data source commands for creating data source objects in a data source) specified in a field of the content pack data structure, which is described above by reference to . As shown, the fifth stage  of  illustrates the GUI  after the process  of some embodiments is completed.","In addition to adding a data source to an MDDB system, some embodiments allow a data source to be removed from the MDDB system.  conceptually illustrates a process  of some embodiments for removing data source objects from a unified data source. In some embodiments, a data source manager (e.g., such as any of the data source managers described above by reference to , , , and ) performs the process  when a data source is removed from an MDDB system.","The process  starts by receiving (at ) a request to remove a data source from an MDDB system. Referring to , the fifth stage  of the GUI  includes a selectable UI item  (e.g., the Remove Connection button) for initiating a data source removal operation. In some embodiments, the process  receives the request to remove the data source from the MDDB system when the GUI  receives a selection (e.g., through a cursor control operation such as clicking a mouse button, tapping a trackpad, or touching a touchscreen) of the selectable UI item .","Next, the process  identifies (at ) a content pack associated with the data source that is requested to be removed from the MDDB system. In some embodiments, the process  identifies the content pack by accessing a content pack ID field of a content pack data structure described above by reference to .","The process  then removes (at ) the data source from the MDDB system. The process , in some embodiments, removes the data source from the MDDB system by destroying a connection that has been established to the data source. In some such embodiments, the process  destroys the connection by removing the connection and\/or the connection information from a data storage (e.g., in the server storage ).","Based on the content pack, the process  then identifies (at ), in the unified data source, a set of data source objects associated with the removed data source. In some embodiments, the process  identifies the data source objects by accessing a set of data source commands (e.g., a set of data source commands for deleting data source objects from a data source) specified in a field of the content pack data structure, as described above by reference to .","Finally, the process  provisions (at ) the unified data source with the set of data source objects removed from the unified data source (i.e., the set of data source objects is not included in the provisioned unified data source). In some embodiments, the process  provisions the unified data source by executing a set of data source commands (e.g., a set of data source commands for deleting data source objects from a data source) specified in a field of the content pack data structure, as described above by reference to .","D. Content Pack Manager","As noted above, the content pack manager of some embodiments handles the management of content packs for an MDDB system. The following section will discuss details of such a content pack manager.  conceptually illustrates a software architecture of a content pack manager  of some embodiments. The content pack manager  of some embodiments is employed to implement the content pack manager , which is described above by reference to . As shown, the content pack manager  includes a content pack processor , a content map manager , a content manager , and a content pack storage .","The content pack processor  receives and processes content packs. In some embodiments, the content pack processor  receives a content pack when the content pack is installed in the MDDB system. To install the content pack in the MDDB system, some embodiments store the content pack in the content pack storage  as a binary object. Some embodiments may install the content pack by storing the content pack in a set of system directories utilized by the MDDB system. In some embodiments, the content pack manager  installs the content pack while, in other embodiments, another component in the MDDB system (e.g., the configuration manager ) installs the content pack. In some cases, the content pack may be installed in response to a request received (e.g., through a GUI, a command line interface, or any other type of interface for receiving input) from a user of the MDDB system.","As such, the content pack processor  of some embodiments monitors the MDDB system for newly-installed content packs. When the content pack processor  of some such embodiments detects a newly-installed content pack, the content pack processor  processes the content pack by (1) identifying the content (e.g., DSV definitions, dimension definitions, MDDB cube definitions, presentation object definitions, etc.) and associated information (e.g., data source metadata, content map, data source commands, etc.) and (2) sending the content and associated information to the content manager  for storage in the content pack storage . In some of these embodiments, the content pack processor  accesses the data structures of the content packs, such as the one described above by reference to , in order to process the content packs.","In addition, the content pack processor  of some embodiments may receive requests to uninstall content packs. When the content pack processor  uninstalls a requested content pack, the content pack processor  may uninstall (e.g., remove) some or all of the entities defined by the content pack. In some cases, other entities may depend on entities defined by a content pack that is requested to be uninstalled. In some embodiments, the content pack processor  delays the uninstallation of the content pack until the other entities are uninstalled while, in other embodiments, the content pack processor  uninstalls the other entities as part of uninstalling the content pack.","In some embodiments, the content map manager  manages content maps that are included in the content packs. As noted above, a content map of some embodiments specifies relationships (e.g., data dependencies) between the entities defined by the entity definitions included in the content pack. In some embodiments, the content map manager  receives requests for a unified content map and, in response to the requests, generates a unified content map for the requestors of the unified content map. A unified content map, as mentioned above, is a single content map that combines the relationships specified in the content map of each content pack in the MDDB system. To generate a unified content map, the content map manager  may retrieve the content map of each content pack in the MDDB system from the content manager , which retrieves the content maps from the content pack storage .","The content manager  receives the contents of content packs from the content pack processor  to store in the content pack storage . In addition, the content manager  receives requests for content from content packs (e.g., DSV definitions, dimension definitions, MDDB cube definitions, presentation object definitions, etc.). For example, the content manager  may receive requests for DSV definitions, dimension definitions, and MDDB cube definitions from an MDDB cube manager (e.g., the MDDB cube manager ) in order for the MDDB cube manager to manage the MDDB cubes (e.g., determine statuses of MDDB cubes, install MDDB cubes, and uninstall MDDB cubes, etc.). Similarly, the content manager  of some embodiments also receives requests for presentation object definitions and MDDB cube definitions from a presentation object manager (e.g., the presentation object manager ) in order for the presentation object manager to install and uninstall presentation objects. In some embodiments, the content manager  accesses the data structures of the content packs, such as the one described above by reference to , in order to manager the content of the content packs.","Furthermore, the content manager  of some embodiments sends other types of data in response to other types of requests. For instance, the content manager  may send definitions of data sources associated with a content pack. As such, the content manager  may receive requests for content maps from the content map manager  in order for the content map manager  to generate unified content maps.","The content pack storage  stores data from content packs (e.g., entity definitions, data source metadata, content map, data source commands) that the content pack storage  receives from the content manager . For instance, the content pack storage  of some embodiments stores the data structures (such as the one described above by reference to ) of the content packs. As shown, the content pack processor  and the content manager  access data stored in the content pack storage . In some embodiments, the content map manager  also directly accesses (not shown) data stored in the content pack storage  while, in other embodiments, the content map manager  accesses data stored in the content pack storage  through the content manager .","Different embodiments of the content pack storage  are implemented in different ways. For instance, the content pack storage  may be implemented as a database (e.g., a relational database, a hierarchical database, a flat file database, or any other type of database for storing data). The content pack storage  may also be implemented as a file (e.g., an XML file, an spreadsheet file, a comma-separated values (CSV) file, a text file, etc.). In addition, the content pack storage  may be implemented as a combination of databases and\/or files, or may be implemented as any other type of object that serves as a source of data. The content pack storage , in some cases, may be implemented as part of another data storage (e.g., the server storage ).",{"@attributes":{"id":"p-0326","num":"0325"},"figref":"FIG. 30","b":["2910","2910","2910","2920","2915","2910","2920"]},"As discussed above, an MDDB cube of some embodiments is defined by a set of measures and a set of dimensions. In this example, an MDDB cube 1 in the content map 1 depends on DSV 1 (from which the set of measures is derive), dimension 1, and dimension 2. The dimension 1 and the dimension 2 depend on DSV 1. A DSV of some embodiments, as described above, is an object that provides a logical view of data in a unified data source, which is a collection of data source objects in some embodiments. In other words, such a DSV is dependent on a set of data source objects that are included in a unified data source. For this example, the DSV 1 depends on data source object 1 and data source object 2, which are included in a unified data source. The content map 2 specifies an MDDB cube 2, which is dependent on DSV 2 and the dimension 2. The DSV 2 depends on data source object 3 and data source object 4.","When the content map manager  receives the content maps 1 and 2, the content map manager  processes the content maps 1 and 2 to generate a unified content map. Specially, the content map manager  merges the relationships specified in the content maps 1 and 2 into a single content map that combines the relationships specified in the content maps 1 and 2. To generate the unified content map, the content map manager  of some embodiments analyzes the content maps 1 and 2 to identify common entities in the content maps 1 and 2. The content map manager  then reconciles the dependencies that include the identified common entities to eliminate any duplicates in the unified content map. In this example, the dimension 2 is a common entity in the content map 1 and the content map 2. In the content map 1, the MDDB cube 1 is dependent on the dimension 2 while, in the content map 2, the MDDB cube 2 is dependent on the dimension 2. As illustrated in , a single instance of the dimension 2 is included in the unified content map with both the MDDB cube 1 and the MDDB cube 2 specified as dependent on the single instance of the dimension 2.","The content maps in  are conceptual representations of content maps that are illustrated for purposes of explanation and clarity. While the content maps illustrated in  are implemented as single chains of dependencies, the content maps of some embodiments are implemented as lists of single dependencies (e.g., a relationship that specifies two entity definitions and a dependency between the two entity definitions), such as the content map described above by reference to .",{"@attributes":{"id":"p-0330","num":"0329"},"figref":"FIG. 31","b":["3100","3100","3100"]},"In some embodiments, the content map manager , which is described above by reference to , performs the process  when the content map manager  receives a request for a unified content map. In some such embodiments, the content map manager  performs the process  on two content maps to generate a unified content map and then performs the process  for each remaining content map that has not been processed in order to merge the content map of each content pack into a single content map.","The process  starts by identifying (at ) a content map item (e.g., a DSV ID, a dimension ID, an MDDB cube ID, or a presentation object ID) in the content map. In some embodiments, the process  identifies the content map item by examining a data structure (e.g., the data structure of the content map described above by reference to ) that represents the content map.","Next, the process  identifies (at ) a dependency of the content map item. In some cases, the content map may specify one dependency for the content map item while, in other cases, the content map may specify multiple dependencies for the content map item. The process  of some embodiments identifies the dependency of the content map item by examining the data structure that represents the content map.","The process  then determines (at ) whether the dependency is included in the unified content map. The process  of some embodiments determines whether the dependency is included in the unified content map by examining a data structure (e.g., a data structure that is similar to the one of the content map described above by reference to ) that represents the unified content map. When the process  determines that the dependency is included in the unified content map, the process  proceeds to operation . However, when the process  determines that the dependency is not included in the unified content map, the process  proceeds to operation .","At , the process  adds the dependency to the unified content map. The process  of some embodiments adds the dependency to the unified content map by adding a field to a data structure (e.g., a data structure that is similar to the one for the content map described above by reference to ) that represents the unified content map.","Next, the process  determines (at ) whether any dependency is left to process. When the process  determines that there is a dependency left to process, the process  returns to operation  to continue processing any remaining dependencies of the content map item. When the process  determines that there is no dependency left to process, the process  proceeds to operation .","The process  then adds (at ) the content map item to the unified content map. In some embodiments, the process  adds the content map item to the unified content map by (1) adding a field to a data structure (e.g., a data structure that is similar to the one for the content map described above by reference to ) that represents the unified content map and (2) specifying in the data structure that the content map item is dependent on each of the identified dependencies of the content map item in the content map.","Finally, the process  determines (at ) whether any content map item in the content map is left to process. When the process  determines that there is a content map item in the content map left to process, the process  returns to operation  to continue processing any remaining content map items in the content map. When the process  determines that there is no content map item in the content map left to process, the process  ends.","E. MDDB Cube Manager","As discussed above, the MDDB cube manager of some embodiments handles the management of MDDB cubes in an MDDB system. This section will discuss details of such an MDDB cube manager.  conceptually illustrates a software architecture of an MDDB cube manager  of some embodiments. The MDDB cube manager , in some embodiments, is utilized to implement the MDDB cube manager , which is described above by reference to . As illustrated, the MDDB cube manager  includes an Cube availability detector  and an MDDB cube provisioner .","The cube availability detector  of some embodiments determines the statuses (e.g., not available, available, and available and installed) of MDDB cubes in the MDDB system. As noted above, in some embodiments, an MDDB cube is available when the cube availability detector  determines that data specified for the MDDB cube exists (e.g., a connection can be established to a set of data sources containing the data specified for the MDDB cube).","The cube availability detector  of some embodiments determines the status of an MDDB cube based on a unified content map (e.g., the unified content map described above by reference to ,  or ). As such, the MDDB cube manager  of some such embodiments sends requests (e.g., to the content pack manager ) for a unified content map and receives the unified content map in response to such requests.","In some embodiments, the cube availability detector  determines the statuses of the MDDB cube based on an MDDB cube definition for the MDDB cube. The cube availability detector  of some such embodiments accesses the MDDB cube definition for the MDDB cube by examining a data structure that includes the MDDB cube definition (e.g., the data structure described above by reference to ), which may be stored in a data storage (e.g., the server storage ). In some embodiments, the cube availability detector  retrieves the MDDB cube definition for the MDDB cube from a content pack manager (e.g., the content pack manager ).","Moreover, the cube availability detector  determines the statuses of the MDDB cube by accessing a unified data source (e.g., hosted by the server storage  and managed by the data source manager ) to determine whether data specified by the MDDB cube definition for the MDDB cube exists in the unified data source.","The MDDB cube provisioner  is responsible for handling the provisioning and deprovisioning of MDDB cubes. The MDDB cube provisioner , in some embodiments, provisions MDDB cubes on an MDDB cube server and deprovisions MDDB cubes from the MDDB cube server. As noted above, an MDDB cube server of some embodiments manages, stores, and provisions MDDB cubes. In some such embodiments, the MDDB cube provisioner  instructs the MDDB cube server to manage, store, and provision MDDB cubes.","As shown in , the MDDB cube provisioner  includes an MDDB cube uninstaller  and a cube installer . The cube installer  is responsible for installing MDDB cubes in the MDDB system. For instance, when the MDDB cube manager  receives a request to install an MDDB cube, the cube installer  installs the requested MDDB cube on an MDDB cube server. In some embodiments, the cube installer  automatically installs the MDDB cube on the MDDB cube server when the MDDB cube is determined to be available by the cube availability detector .","In some embodiments, the cube installer  installs an MDDB cube based on an MDDB cube definition for the MDDB cube and a unified content map. Based on the MDDB cube definition for the MDDB cube and the unified content map, the cube installer  may identify and install entities (e.g., DSVs and dimensions) on which the MDDB cube depends but that are not yet installed.","To retrieve the MDDB cube definition, the cube installer  accesses a data structure that includes the MDDB cube definition (e.g., the data structure described above by reference to ), which may be stored in a data storage (e.g., the server storage ). The cube installer  of some embodiments retrieves the MDDB cube definition for the MDDB cube from a content pack manager (e.g., the content pack manager ). The cube installer  may retrieve a unified content map from a content pack manager (e.g., the content pack manager ) in some embodiments.","The MDDB cube uninstaller  is responsible for uninstalling (e.g., removing, deprovisioning, etc.) MDDB cubes from the MDDB system. When the MDDB cube manager  receives a request to uninstall an MDDB cube, the MDDB cube uninstaller  uninstalls the requested MDDB cube from the MDDB cube server. In addition, the MDDB cube uninstaller  of some embodiments uninstalls entities (e.g., DSVs and dimensions) on which the uninstalled MDDB cube depended.",{"@attributes":{"id":"p-0350","num":"0349"},"figref":["FIG. 33","FIG. 2","FIG. 32"],"b":["3300","3300","3300","3300","3300"]},"The process  begins by identifying (at ) an MDDB cube. The process  of some embodiments identifies the MDDB cube by (1) examining a data structure that represents a content pack (e.g., the content pack data structure described above by reference to ) and (2) identifying an MDDB cube definition of the MDDB cube.","Next, the process  determines (at ) whether the MDDB cube is installed in the MDDB system. The process  determines whether the MDDB cube is installed by accessing an MDDB cube server (e.g., through the MDDB cube provisioner ) to retrieve a list of installed MDDB cubes on the MDDB server. The MDDB cube is installed in the MDDB system if the MDDB cube is included in the list. Otherwise, the MDDB cube is not installed in the MDDB system. When the process  determines that the MDDB cube is installed, the process  identifies (at ) the MDDB cube as installed and then proceeds to operation .","When the process  determines that the MDDB cube is not installed, the process  determines (at ) whether the MDDB cube is available for installation. To determine whether the MDDB cube is available for installation, the process  of some embodiments performs the process described below by reference to . When the process  determines that the MDDB cube is not available for installation, the process identifies (at ) the MDDB cube as not available and then proceeds to operation . When the process  determines that the MDDB cube is available for installation, the process identifies (at ) the MDDB cube as available and then proceeds to operation .","Finally, the process  determines (at ) whether any MDDB cube is left to process. When the process  determines that there is an MDDB cube left to process, the process  returns to operation  to continue processing any remaining MDDB cubes.",{"@attributes":{"id":"p-0355","num":"0354"},"figref":["FIG. 34","FIG. 33","FIG. 2","FIG. 32"],"b":["3400","3400","3400","3400","210","3205","3400"]},"The process starts by identifying (at ) an MDDB cube. In some embodiments, the process  identifies the MDDB cube by (1) examining a data structure that represents a content pack (e.g., the content pack data structure described above by reference to ) and (2) identifying an MDDB cube definition of the MDDB cube.","After identifying the MDDB cube, the process  identifies (at ) a set of dimensions associated with the identified MDDB cube. In some embodiments, the MDDB cube is defined by a set of measures and a set of dimensions. In these embodiments, the process  identifies the set of dimensions that define the MDDB cube as the set of dimensions that are associated with the MDDB cube. The process  of some embodiments identifies the set of dimensions by examining a data structure of a content map (e.g., the content map described above by reference to ). In some embodiments, the process  identifies the set of dimensions by accessing a unified content map (e.g., the unified content map described above by reference to , , or ).","Next, the process  identifies (at ) a set of DSVs associated with the identified set of dimensions and a set of DSVs associated with the MDDB cube. As mentioned above, the MDDB cube of some embodiments is defined by a set of measures and a set of dimensions. The MDDB cube may be associated with a single DSV from which the set of measures that defines the MDDB cube is derived for the MDDB cube. In some cases, an identified dimension (i.e., a dimension that defines the MDDB cube) is derived from the DSV that is associated with the MDDB cube from which the set of measures is derived for the MDDB cube. However, in other cases, an identified dimension is derived from a DSV that is different from the DSV that is associated with the MDDB cube from which the set of measures is derived for the MDDB cube. In other words, the set of DSVs associated with the identified set of dimensions may include DSVs that are different from the set of DSVs that is associated with the MDDB cube. In some embodiments, the process  identifies the set of DSVs associated with the MDDB cube and the set of DSVs associated with the identified set of dimensions by examining the unified content map.","The process  then identifies (at ) a set of data source objects that are associated with an identified DSV. As described above, a DSV of some embodiments is an object that provides a logical view of data in a unified data source. A unified data source, as described above, is a collection of data source objects in some embodiments. Therefore, a DSV is dependent on the set of data source objects that are included in a unified data source. The process  of some embodiments identifies the set of data source objects that are associated with an identified DSV by examining the unified content map.","The process  then determines (at ) whether the identified set of data source objects are available. In some embodiments, the process  determines that the set of data source objects are available by accessing the unified data source. If the set of data source objects are included in the collection of data source objects of the unified data source, then the process  determines that the set of data source objects are available. Otherwise, the process  determines that the set of data source objects is not available. When the process  determines that the set of data source objects is not available, the process  determines (at ) that the MDDB cube is not available. Then the process  ends.","When the process  determines that the set of data source objects are available, the process  determines (at ) whether any DSV is left to process. When the process  determines that there is no DSV left to process, the process  determines (at ) that the MDDB cube is available and then the process  ends. Otherwise, the process  returns to operation  to continue processing any remaining identified DSVs.","The following figures conceptually illustrate examples of available and not available MDDB cubes, in terms of data relationships.  conceptually illustrates an example of an MDDB cube  that is determined to be available in terms of data relationships that are used to define the MDDB cube . In particular,  illustrates the determination of the MDDB cube as available in three stages - of an MDDB cube data relationship diagram.",{"@attributes":{"id":"p-0363","num":"0362"},"figref":"FIG. 35","b":["3520","3530","3535","3540","3520","3525","3530","3530","3520","3525","3535","3530","3540","3535","3530"]},"The first stage  of the MDDB cube data relationship diagram shows that the set of data source objects  in the unified data source  is available, as indicated by the bold outlines and checkmarks for each data source object in the set of data source objects . The DSV  is available, as shown in the first stage , because the DSV  is derived from the set of data source objects  and all of the data source objects in the set of data source objects  are available. In addition, the set of dimensions  is available because the set of dimensions  is derived from the DSV .","The second stage  of the MDDB cube data relationship diagram illustrates that the DSV  and the set of dimensions  are available. The availability of these items is indicated, as in the first stage  of , by bold outlines and checkmarks for the items. The MDDB cube  is available because the MDDB cube  is derived from the DSV  and the set of dimensions , which are both available. The third stage  of the MDDB cube data relationship diagram shows that the MDDB cube  is available, as indicated by a bolding of the MDDB cube .","In contrast to ,  conceptually illustrates an example of the MDDB cube  that is determined to be not available. Specifically,  illustrates the determination of the availability of the MDDB cube  in three stages - of an MDDB cube data relationship diagram.  illustrates the same components (i.e., the unified data source , the set of data source objects , the DSV , the set of dimensions , and the MDDB cube ) as those illustrated in .","The first stage  of the MDDB cube data relationship diagram is similar to the first stage  of the MDDB cube data relationship diagram illustrated in  except that one of the data source objects  that is available in the first stage  is not available in the first stage . As shown, the third data source object  from the top in the unified data source  is not available, as indicated by dashed lines of data source object  and an \u201cX\u201d mark next to the unavailable data source object . In this case, the DSV  is not available because the DSV  is derived from the set of data source objects  and one of the data source objects  is not available. As shown, the set of dimensions  is derived from the DSV . Since the DSV  is not available, the set of dimensions  is also not available.","The second stage  of the MDDB cube data relationship diagram illustrates that the DSV  is not available, as indicated by dashed lines of the DSV  and an \u201cX\u201d mark next to the DSV . Furthermore, the second stage  shows that the set of dimensions  is not available, as indicated by dashed lines of the set of dimensions  and an \u201cX\u201d mark next to each dimension in the set of dimensions . The MDDB cube  is derived from the DSV  and the set of dimensions , which are not available. Therefore, the MDDB cube  is not available. The third stage  of the MDDB cube data relationship diagram shows that the MDDB cube  is not available, as indicated by dashed lines of the MDDB cube .","As described above, the cube installer of some embodiments handles the installation of MDDB cubes. During the installation of an MDDB cube, the cube installer may install entities (e.g., DSVs and dimensions) upon which the MDDB cube depends, but that are not yet installed. The following figures (i.e., ) illustrate a process that includes such entity installation operations.",{"@attributes":{"id":"p-0370","num":"0369"},"figref":["FIGS. 37A-B","FIG. 32"],"b":["3700","3700","3220","3700"]},"The process  begins by receiving (at ) a request to install an MDDB cube. In some embodiments, the request to install the MDDB cube is received from a user of the MDDB system through a UI (e.g., a GUI, a command line interface, or any other type of interface for receiving input).","Next, the process  identifies (at ) a set of dimensions associated with the MDDB cube. The MDDB cube of some embodiments is defined by a set of measures and a set of dimensions. In such embodiments, the set of dimensions that define the MDDB cube are the identified set of dimensions that are associated with the MDDB cube. In some embodiments, the process  identifies the set of dimensions by examining a data structure of a content map (e.g., the content map described above by reference to ) while, in other embodiments, the process  identifies the set of dimensions by accessing a unified content map (e.g., the unified content map described above by reference to , , or ).","The process  then identifies (at ) a set of DSVs associated with the identified set of dimensions and a set of DSVs associated with the MDDB cube. As noted above, the MDDB cube of some embodiments is defined by a set of measures and a set of dimensions. In some instances, the MDDB cube may be associated with a single DSV. For example, the set of measures that defines the MDDB cube may be derived from the single DSV. Furthermore, an identified dimension (i.e., a dimension that defines the MDDB cube) also may be derived from the same single DSV that is associated with the MDDB cube. However, in other cases, an identified dimension is derived from a DSV that is different from the DSV that is associated with the MDDB cube from which the set of measures is derived for the MDDB cube. In other words, the set of DSVs associated with the identified set of dimensions may include DSVs that are different from the set of DSVs associated with the MDDB cube. The process  of some embodiments identifies the set of DSVs associated with the MDDB cube and the set of DSVs associated with the identified set of dimensions by examining the unified content map.","After identifying the sets of DSVs, the process  determines (at ) whether a DSV in the sets of identified DSVs is installed. In some embodiments, the process  determines whether the DSV is installed by accessing an MDDB cube server that manages, stores, and provisions MDDB cubes. The DSV is installed on the MDDB cube server when an instance of the DSV exists in the MDDB cube server (e.g., by creating, based on a DSV definition of the DSV, a data structure in the MDDB cube server that represents the DSV), in some such embodiments.","When the process  determines that the DSV is installed, the process  proceeds to operation . Otherwise, the process  installs (at ) the DSV and then proceeds to operation . The process  of some embodiments installs the DSV on the MDDB cube server by creating, based on a DSV definition of the DSV, a data structure in the MDDB cube server that represents the DSV.","At , the process  determines whether any DSV is left to review for installation. When the process  determines that there is a DSV left to review for installation, the process  returns to operation  to continue reviewing any remaining DSVs. When the process  determines that there is no DSV left to review for installation, the process  proceeds to operation  (as shown in ).","Next, the process  determines (at ) whether a dimension in the identified set of dimensions is installed. The process  of some embodiments determines whether the dimension is installed by accessing the MDDB cube server. The dimension is installed on the MDDB cube server when an instance of the dimension exists in the MDDB cube server (e.g., a data structure that represents the dimension has been created on the MDDB cube server), in some such embodiments.","When the process  determines that the dimension is installed, the process  proceeds to operation . When the process  determines that the dimension is not installed, the process  installs (at ) the dimension and then proceeds to operation . The process  of some embodiments installs the dimension on the MDDB cube server by creating, based on a dimension definition of the dimension, a data structure in the MDDB cube server that represents the dimension.","At , the process  determines whether any dimension in the identified set of dimensions is left to review for installation. When the process  determines that there is a dimension left to review for installation, the process  returns to operation  to continue reviewing any remaining dimensions in the identified set of dimensions. When the process  determines that there is no dimension left to review for installation, the process  installs (at ) the MDDB cube and then ends. In some embodiments, the process  installs the MDDB cube on the MDDB cube server by creating, based on an MDDB cube definition of the MDDB cube, a data structure in the MDDB cube server that represents the MDDB cube.","As described above, the process illustrated in  installs an MDDB cube in response to a request to install the MDDB cube. However, some embodiments include a feature for automatically installing (e.g., upon a cube availability detector determining that MDDB cubes in the MDDB system are available but not already installed) every MDDB cube that is available but not yet installed. In such embodiments, a process similar to the process described above by reference to  is performed. For example, the request to install an MDDB cube may be a request to install every MDDB cube that is available but not yet installed. In that case, the process repeats operations - for each MDDB cube that is available but not yet installed.","Moreover, the cube installer also handles the uninstallation of MDDB cubes, in some embodiments. When uninstalling an MDDB cube, the cube installer of some such embodiments uninstalls entities (e.g., DSVs and dimensions) upon which the MDDB cube depends and that are not used by other entities (e.g., other MDDB cubes). The following figures (i.e., ) illustrate a process that includes such entity uninstallation operations.",{"@attributes":{"id":"p-0382","num":"0381"},"figref":["FIGS. 38A-B","FIG. 32"],"b":["3800","3220","3800"]},{"@attributes":{"id":"p-0383","num":"0382"},"figref":["FIGS. 38A-B","FIGS. 39-41","FIG. 39"],"b":["3905","3920","3935","3935"]},{"@attributes":{"id":"p-0384","num":"0383"},"figref":"FIG. 39","b":["3925","3930","3935","3930","3930","3925","3935","3930","3935","3925"]},{"@attributes":{"id":"p-0385","num":"0384"},"figref":["FIGS. 40 and 41","FIGS. 40 and 41"],"b":["4005","4020","4040","4040","4025","4030","4035","4040","4050","4035","4035","4030","4040","4035","4040","4025","4045","4035","4045","4025","4050","4035","4050","4030"]},"The first stage  of  illustrates the MDDB cube data relationship diagram before the process  is performed. In this example, the DSV , the set of dimensions , and the MDDB cube  are installed. In addition, the first stage  of  illustrates the MDDB cube data relationship diagram before the process  is performed. For this example, the DSVs  and , the set of dimensions , and the MDDB cubes - are installed.","The process  starts by receiving (at ) a request to uninstall an MDDB cube. In some embodiments, the request to uninstall the MDDB cube is received from a user of the MDDB system through a UI (e.g., a GUI, a command line interface, or any other type of interface for receiving input).","Next, the process  uninstalls (at ) the MDDB cube. In some embodiments, the process  uninstalls the MDDB cube from an MDDB cube server that manages, stores, and provisions MDDB cubes. The process  of some embodiments uninstalls the MDDB cube by determining whether the MDDB cube is installed. When the process  determines that the MDDB cube is installed, the process  uninstalls the MDDB cube. Otherwise, the process  proceeds to operation .","The second stage of  each shows a particular MDDB that is uninstalled. In this example, these second stages illustrate the corresponding MDDB cube data relationship diagram after operation  has been performed by the process . Referring to , the second stage  of the MDDB cube data relationship diagram shows that the MDDB cube  is uninstalled, as indicated by dashed lines of the MDDB cube  and an \u201cX\u201d mark placed over the MDDB cube . Referring to , the second stage  of the MDDB cube data relationship diagram shows that the MDDB cube  is uninstalled, as indicated by dashed lines of the MDDB cube  and an \u201cX\u201d mark placed over the MDDB cube .","When the process  uninstalls the MDDB cube, the process  of some embodiments also determines whether any presentation objects are dependent on the MDDB cube. In some of these embodiments, the process  determines whether any presentation objects are dependent on the MDDB cube by accessing a unified content map (e.g., the unified content map described above by reference to , , or ). When the process  determines that there are presentation objects that are dependent on the MDDB, the process  uninstalls these dependent presentation objects.","The process  then identifies (at ) a set of dimensions that are associated with the MDDB cube. In some embodiments, the MDDB cube is defined by a set of measures and a set of dimensions. In these embodiments, the set of dimensions that define the MDDB cube are the identified set of dimensions that are associated with the MDDB cube. The process  of some embodiments identifies the set of dimensions by examining a data structure of a content map (e.g., the content map described above by reference to ) while, in other embodiments, the process  identifies the set of dimensions by examining the unified content map.","After identifying the set of dimensions, the process  determines (at ) whether a dimension in the identified set of dimensions is in use. The process  of some embodiments determines whether the dimension is in use by examining the unified content map. In some embodiments, the process  determines that the dimension is in use when another entity (e.g., an MDDB cube) is dependent on the dimension and such entity is installed in the MDDB system (e.g., installed on the MDDB cube server). When the process  determines that the dimension is in use, the process  proceeds to operation . When the process  determines that the dimension is not in use, the process  uninstalls (at ) the dimension. In some embodiments, the process  uninstalls the dimension from the MDDB cube server. After uninstalling the dimension, the process  proceeds to operation .","At , the process  determines whether any dimension in the set of identified dimensions is left to review for uninstallation. When the process  determines that there is a dimension left to review for uninstallation, the process  returns to operation  to continue reviewing any remaining dimensions in the identified set of dimensions. Otherwise, the process  proceeds to operation  (as shown in ).","The third stage of  each shows the corresponding MDDB cube data relationship diagram after operations - have been performed by the process . Referring to , the third stage  of the MDDB cube data relationship diagram illustrates an example of uninstalling dimensions when the MDDB cube that depends on the dimensions is uninstalled. As illustrated in this stage , each dimension in the set of dimensions  is uninstalled, as indicated by dashed lines of the set of dimension  and an \u201cX\u201d mark placed over each dimension in the set of dimensions . In this example, each dimension of the set of dimensions  is uninstalled because none of the dimensions are in use (e.g., no MDDB cubes depend on a dimension in the set of dimensions ).","Referring to , the third stage  of the MDDB cube data relationship diagram illustrates an example of dimensions on which an MDDB cube depends that are in use, and thus, are not uninstalled. This stage  shows that the dimension on which the MDDB cube  depends (i.e., dimension f) is still installed. This is highlighted by a bolding of dimension f. In this example, the dimension f (as well as dimension d and dimension e) is still in use by the MDDB cube , which is derived from the set of dimensions . Furthermore, the dimension d is still in use by the MDDB cube  since the MDDB cube , which is still installed, is derived from the dimension d.","The process  then identifies (at ) a set of DSVs associated with the identified set of dimensions and a set of DSVs associated with the MDDB cube. As noted above, the MDDB cube of some embodiments is defined by a set of measures and a set of dimensions. The MDDB cube may be associated with a single DSV from which the set of measures that defines the MDDB cube is derived for the MDDB cube. In some instances, an identified dimension (i.e., a dimension that defines the MDDB cube) is derived from the same DSV that is associated with the MDDB cube from which the set of measures is derived. However, in other cases, an identified dimension is derived from a DSV that is different from the DSV that is associated with the MDDB cube from which the set of measures is derived. In other words, the set of DSVs associated with the identified set of dimensions may include DSVs that are different from the set of DSVs that is associated with the MDDB cube. The process  of some embodiments identifies the set of DSVs associated with the MDDB cube and the set of DSVs associated with the identified set of dimensions by examining the unified content map.","Next, the process  determines (at ) whether a DSV in the identified sets of DSVs is in use. In some embodiments, the process  determines whether the DSV is in use by examining the unified content map. The process  of some embodiments determines that the DSV is in use when another entity (e.g., a dimension or an MDDB cube) that is dependent on the DSV is installed in the MDDB system (e.g., installed on the MDDB cube server). When the process  determines that the DSV is in use, the process  proceeds to operation . When the process  determines that the DSV is not in use, the process  uninstalls (at ) the DSV. In some embodiments, the process  uninstalls the DSV from the MDDB cube server. After uninstalling the DSV, the process  proceeds to operation .","Finally, the process  determines (at ) whether any DSV in the identified sets of DSVs is left to review for uninstallation. When the process  determines that there is a DSV left to review for uninstallation, the process  returns to operation  to continue reviewing any remaining DSV in the identified sets of DSVs. When the process  determines that there is no DSV left to review for uninstallation, the process  ends.","The fourth stage of  each shows the corresponding MDDB cube data relationship diagram after the process  has ended. Referring to , the fourth stage  of the MDDB cube data relationship diagram illustrates an example of uninstalling a DSV when an MDDB cube that depends on the DSV is uninstalled. In the fourth stage , the DSV  is uninstalled, as indicated by dashed lines of the DSV  and an \u201cX\u201d mark placed over the DSV , because the DSV  is not in use (e.g. no MDDB cubes and dimensions depend on the DSV ) in this example.","Referring to , the fourth stage  of the MDDB cube data relationship diagram illustrates an example of a DSV on which an MDDB cube depends that is in use, and, therefore, not uninstalled. The fourth stage  shows that the DSV  on which the MDDB cube  depends is still installed. This stage  also shows that DSV  is still installed. This is highlighted by a bolding of the DSVs  and . For this example, the DSV  is still in use by the MDDB cube  because the MDDB cube  is still installed and is derived from DSV . Moreover, the DSV  is still in use by the MDDB cube  because the MDDB cube  is still installed and is derived from DSV .","After MDDB cubes are installed, the MDDB cubes of some embodiments are processed (e.g., by aggregating data for the MDDB cubes) in order to provision the MDDB cubes for MDDB clients to consume.  conceptually illustrates a process  of some embodiments for processing an MDDB cube. In some embodiments, the process  is performed by an MDDB cube server that manages, stores, and provisions MDDB cubes. In some cases, the process  is performed by an MDDB cube provisioner (e.g., the MDDB cube provisioner or the cube installer as described above by reference to ).","The process  starts by identifying (at ) an MDDB cube. In some embodiments, the process  is performed in response to a request to process the MDDB cube (e.g., a request from a scheduling server that manages the processing of MDDB cubes). In such cases, the identified MDDB cube is the MDDB cube that is requested to be processed. In some embodiments, the process  identifies the MDDB cube by accessing a unified content map (e.g., the unified content map described above by reference to , , or ).","Next, the process  identifies (at ) a set of dimensions that are associated with the MDDB cube. As mentioned above, the MDDB cube of some embodiments is defined by a set of measures and a set of dimensions. In such embodiments, the set of dimensions that define the MDDB cube are the identified set of dimensions that are associated with the MDDB cube. The process  of some embodiments identifies the set of dimensions by examining the unified content map.","The process  then processes (at ) the identified set of dimensions. As noted above, a dimension of some embodiments is metadata that is derived from a DSV. To process the identified set of dimensions, the process  aggregates data specified by dimension definitions of the set of dimensions derived from a DSV. In some embodiments, the DSV is derived from a unified data source (e.g., the unified data source described above by reference to , , or ). To process the identified set of dimensions in some such embodiments, the process  aggregates data specified by each dimension in the identified set of dimensions from the unified data source through the DSV. The process  may aggregate the data specified by the identified dimension by (1) querying, through the unified data source, a set of data sources abstracted by the unified data source, (2) receiving query results for data specified by the dimension, and (3) storing the queried data in a data structure that represents the dimension.","After the identified set of dimensions is processed, the process  processes (at ) the MDDB cube. As noted above, the MDDB cube of some embodiments is defined by a set of measures and a set of dimensions. In some such embodiments, the set of measures are derived from a DSV. In order to process the MDDB cube, in some embodiments, the process  aggregates data specified by an MDDB cube definition for the MDDB cube. The data is aggregated from the DSV from which the set of measures are derived. In some embodiments, the DSV is derived from the unified data source. To process the MDDB cube in some such embodiments, the process  aggregates data specified by an MDDB cube definition for the MDDB cube from the unified data source through the DSV. The process  may aggregate the data specified by the MDDB cube definition for the MDDB cube by (1) querying, through the unified data source, a set of data sources abstracted by the unified data source, (2) receiving query results for data specified by the MDDB cube definition, and (3) storing the queried data in a data structure that represents the MDDB cube.","F. Presentation Object Manager","As described above, the presentation object manager of some embodiments handles the management of presentation objects in an MDDB system. This section will discuss details of such a presentation object manager.  conceptually illustrates a software architecture of a presentation object manager  of some embodiments. The presentation object manager  of some embodiments is used to implement any of the presentation object managers described above (e.g., the presentation object managers  and  that are described above by reference to , respectively). As illustrated, the presentation object manager  includes a presentation object availability detector  and a presentation object provisioner .","The presentation object availability detector  of some embodiments determines the statuses (e.g., not available, available, and available and installed) of presentation objects in the MDDB system. In some embodiments, a presentation object is available when the presentation object availability detector  determines that data specified for the presentation object exists (e.g., the MDDB cubes from which the presentation object derives its data is installed).","The presentation object availability detector  determines the statuses of a presentation object based on a unified content map (e.g., the unified content map described above by reference to ,  or ), in some embodiments. As such, the presentation object manager  of some such embodiments sends requests (e.g., to the content pack manager ) for a unified content map and receives the unified content map in response to such requests.","In some embodiments, the presentation object availability detector  determines the statuses of the presentation object based on a presentation object definition for the presentation object. The presentation object availability detector  of some such embodiments accesses the presentation object definition for the presentation object by examining a data structure that includes the presentation object definition (e.g., the data structure described above by reference to ). The presentation object definition may be stored in a data storage (e.g., the server storage ). In some embodiments, the presentation object availability detector  retrieves the presentation object definition for the presentation object from a content pack manager (e.g., the content pack manager ).","Furthermore, the presentation object availability detector  determines the statuses of the presentation object by accessing a unified data source (e.g., hosted by the server storage  and managed by the data source manager ). For instance, the presentation object availability detector  may access the unified data source to determine whether a set of MDDB cubes specified by the presentation object definition for the presentation object exists in the unified data source.","To determine whether a presentation object is available, the presentation object availability detector  determines whether the set of MDDB cubes that define the presentation object is installed. In some embodiments, the presentation object availability detector  requests an MDDB cube manager (e.g., the MDDB cube manager described above by reference to  or ) to determine whether the set of MDDB cubes that defines the presentation object is installed.","When a presentation object is determined as available, the presentation object availability detector  may determine that the presentation object is installed by accessing a presentation object server that generates, manages, stores, and provisions presentation objects. In some embodiments, a presentation object is installed when an instance of the presentation object exists in the presentation object server (e.g., a data structure that represents the presentation object exists in the presentation object server).","The presentation object provisioner  is responsible for handling the provisioning and deprovisioning of presentation objects. In some embodiments, the presentation object provisioner  handles the provisioning and deprovisioning of presentation objects on a presentation object server. As noted above, a presentation object server of some embodiments generates, manages, stores, and provisions presentation objects. In some such embodiments, the presentation object provisioner  instructs the presentation object server to generate, manage, store, and provision presentation objects.","As shown in , the presentation object provisioner  includes a presentation object uninstaller  and a presentation object installer . The presentation object installer  is responsible for installing presentation objects in the MDDB system. For instance, when the presentation object manager  receives a request to install a presentation object, the presentation object installer  installs the requested presentation object on a presentation object server. In some embodiments, the presentation object installer  automatically installs the presentation object on the presentation object server when the presentation object is determined to be available by the presentation object availability detector . The presentation object uninstaller  is responsible for uninstalling (e.g., removing, deprovisioning, etc.) presentation objects from the MDDB system. When the presentation object manager  receives a request to uninstall a presentation object, the presentation object uninstaller  uninstalls the requested presentation object from the presentation object server.",{"@attributes":{"id":"p-0416","num":"0415"},"figref":["FIG. 44","FIG. 2","FIG. 43"],"b":["4400","4400","4400","4400","4400"]},"The process  begins by identifying (at ) a presentation object. The process  of some embodiments identifies the presentation object by (1) examining a data structure that represents a content pack (e.g., the content pack data structure described above by reference to ) and (2) identifying a presentation object definition of the presentation object.","Next, the process  determines (at ) whether the presentation object is installed in the MDDB system. The process  determines whether the presentation object is installed by accessing a presentation object server (e.g., through the presentation object provisioner ) to retrieve a list of installed presentation objects on the MDDB server. The presentation object is determined as installed in the MDDB system if the presentation object is included in the list. Otherwise, the presentation object is determined as not installed in the MDDB system. When the process  determines that the presentation object is installed, the process  identifies (at ) the presentation object as installed and then proceeds to operation .","When the process  determines that the presentation object is not installed, the process  determines (at ) whether the presentation object is available for installation. To determine whether the presentation object is available for installation, the process  of some embodiments performs the process described below by reference to . When the process  determines that the presentation object is not available for installation, the process identifies (at ) the presentation object as not available and then proceeds to operation . When the process  determines that the presentation object is available for installation, the process identifies (at ) the presentation object as available and then proceeds to operation .","Finally, the process  determines (at ) whether any presentation object is left to review for installation. When the process  determines that there is a presentation object left to review for installation, the process  returns to operation  to continue reviewing any remaining presentation objects. For instance, for requests for the statuses of presentation objects in the MDDB system, the process  continues processing the remaining presentation objects in the MDDB system. For requests for the statuses of presentation objects specified in a content pack, the process  continues processing the remaining presentation objects in the content pack. When the process  determines that there is no presentation object left to review for installation, the process  ends.",{"@attributes":{"id":"p-0421","num":"0420"},"figref":["FIG. 45","FIG. 44","FIG. 2","FIG. 43"],"b":["4500","4500","4500","4500","4305","4500"]},"The process starts by identifying (at ) a presentation object. In some embodiments, the process  identifies the presentation object by examining a data structure that represents a content pack (e.g., the content pack data structure described above by reference to ) and identifying a presentation object definition of the presentation object.","Next, the process  identifies (at ) a set of MDDB cubes associated with the identified presentation object. The presentation object of some embodiments is a predefined representation of a perspective of a set of MDDB cubes. In these embodiments, the process  identifies the set of MDDB cubes that defines the presentation object as the set of MDDB cubes that are associated with the presentation object. The process  of some embodiments identifies the set of MDDB cubes by examining a data structure of a content map (e.g., the content map described above by reference to ). In other embodiments, the process  identifies the set of dimensions by accessing a unified content map (e.g., the unified content map described above by reference to , , or ).","Next, the process  determines (at ) whether an MDDB cube in the set of MDDB cubes is installed. In some embodiments, the process  determines whether the MDDB cube is installed by requesting the status of the MDDB cube (e.g., requesting from the cube availability detector ). When the process  determines that the MDDB cube is not installed, the process  determines (at ) that the presentation object is not available and then the process  ends.","When the process  determines that the MDDB cube is installed, the process  determines (at ) whether any MDDB cube in the identified set of MDDB cubes is left to review. When the process  determines that there is no MDDB cube left to review, the process  determines (at ) that the presentation object is available and then the process  ends. Otherwise, the process  returns to operation  to continue reviewing any remaining MDDB cubes in the identified set of MDDB cubes.","After a presentation object is determined as available, the presentation object may be installed. In some embodiments, the presentation object is installed in response to a request (e.g., from a user of the MDDB system) to install the presentation object. The presentation object may also be installed as part of a process for automatically installing presentation objects that are available but not yet installed.","As mentioned above, the presentation object of some embodiments is a predefined representation of a perspective of a set of MDDB cubes. Some such embodiments of the presentation object includes a set of charts, graphs, reports, and\/or tables, which are generated based on the perspective of the set of MDDB cubes that define the presentation object. As such, some embodiments install the presentation object by generating the set of charts, graphs, reports, and\/or tables specified for the presentation object. In embodiments that employ a presentation object server to generate, manage, store, and provision presentation objects, the presentation object is installed on the presentation object server.","Furthermore, once a presentation object is installed, the presentation object of some embodiments may be uninstalled. In embodiments that utilize a presentation object server to generate, manage, store, and provision presentation objects, the presentation object is uninstalled from the presentation object server.","G. Configuration Manager","In some embodiments, the configuration manager serves as a communication gateway between the MDDB system and a user of the MDDB system. For instance, the configuration manager handles requests from the user of the MDDB system and forwards the requests to an appropriate component of the MDDB system to perform operations to process the requests. The following section will discuss details of such a configuration manager.",{"@attributes":{"id":"p-0431","num":"0430"},"figref":["FIG. 46","FIG. 25"],"b":["4600","4600","2510","4600","4605","4610","4615","4615","2530"]},"In some embodiments, the configuration manager  is responsible for scheduling operations. For instance, after the MDDB system is configured (e.g., by the process described above by reference to ), the configuration manager  may automatically request the statuses of MDDB cubes and\/or presentation objects in the MDDB system and instruct the MDDB cube manager and\/or the presentation object manager to install every MDDB cube and\/or presentation object that is available but not yet installed.","In some embodiments, the UI communication module  provides an interface through which a user of the MDDB system may communicate with the MDDB system. For instance, the UI communication module  may provide a GUI (e.g., the same or similar GUI illustrated in ) for receiving input from a user. Examples of input include requests and commands to install MDDB cubes, uninstall MDDB cubes, schedule MDDB cube processing, install presentation objects, uninstall presentation objects, add data sources, remove data sources, etc. The UI communication module  may provide other types of interfaces for receiving input from the user (e.g., a command line interface). Regardless of the manner in which the UI communication module  receives input, the UI communication module  sends the input to the request handler  for processing. In some embodiments, the UI communication module  accesses the configuration storage  to facilitate communication with the user of the MDDB system.","The request handler  of some embodiments handles the requests and commands that the UI communication module  receives from the user of the MDDB system. Specifically, the request handler  forwards the requests and commands to a component of MDDB system. For example, in some embodiments, the request handler  forwards requests to install presentation objects and requests to uninstall presentation objects to a presentation object manager (e.g., the presentation object manager ). As another example, the request handler  forwards requests to install MDDB cubes and requests to uninstall MDDB cubes to an MDDB cube manager (e.g., the MDDB cube manager ).","In some embodiments, the request handler  forwards requests to install content packs and requests to uninstall content packs to a content pack manager (e.g., the content pack manager ). Furthermore, the request handler  of some embodiments forwards requests to add data sources and requests to remove data sources to a data source manager (e.g., the data source manager ). The request handler  may also handle additional and\/or different types of requests and commands. In some embodiments, the request handler  accesses the configuration storage  in order to manage the requests and commands.","IV. Federated MDDB Cubes","As described above, an MDDB cube may be defined by a set of measures and a set of dimensions. In many cases, the set of measures is derived from data in a data source and the set of dimensions is derived from data in the same data source. That is, the MDDB cube is defined by data derived from a single data source. , which is described above, illustrates an example of an MDDB cube that is defined by data derived from a single data source.","Some embodiments of the invention provide an MDDB system that manages and provisions MDDB cubes that are defined by data derived from several different data sources. Such MDDB cubes may be referred to as federated MDDB cubes. Different data sources may be different data storage instances (e.g., different instances of relational databases) of the same or different products from the same or different product vendors. In some cases, a federated MDDB cube that derives data from different data sources of different products is defined to derive data from different instances of different products from the same vendor. In other cases, a federated MDDB cube that derives data from different data sources of different products is defined to derive data from different instances of different products from different vendors. Examples of products include Microsoft System Center Configuration Manager\u00ae, Microsoft System Center Operations Manager\u00ae, Microsoft Forefront Endpoint Protection\u00ae, Symantec Management Platform\u00ae, Symantec Endpoint Protection\u00ae, or any type of product that has data to which MDDB tools may be applied (e.g., for business intelligence purposes).",{"@attributes":{"id":"p-0438","num":"0437"},"figref":"FIG. 47","b":["4700","4700","4700","4700"]},"The process  starts by defining (at ) a first DSV based on a first data source. In some embodiments, the process  defines the first DSV to derive data from the first data source. As noted above, a DSV is a logical view of data in a set of data sources, in some embodiments. The logical view includes, in such embodiments, a set of data source objects (e.g., tables, views, database functions, stored procedures, and queries) that provide data from the set of data sources. Thus, in these embodiments, the first DSV derives data from the first data source through a first set of data source objects.","Next, the process  defines (at ) a set of dimensions based on the first DSV. In some embodiments, the process  defines the set of dimension to derive data from first DSV. That is, each dimension in the set of dimensions derives data from the first data source through the first DSV.","The process  then defines (at ) a second DSV based on a second data source. The process  of some embodiments defines the second DSV to derive data from the second data source. As noted above, a DSV is a logical view of data in a set of data sources, in some embodiments. The logical view includes, in such embodiments, a set of data source objects (e.g., tables, views, database functions, stored procedures, and queries) that provide data from the set of data sources. As such, the second DSV of such embodiments derives data from the second data source through a second set of data source objects.","In many cases, the first data source and the second data source are different instances of data storages. For instance, the first and second data sources may be different instances of a first data storage and a second data storage, respectively, in some embodiments. The first and second data sources may be different instances of a first data storage of a first product and a second data storage of a second product, respectively.","Finally, the process  defines (at ) an MDDB cube based on the set of dimensions and the second DSV. In some embodiments, the process  defines the MDDB cube to derive data from the set of dimensions (which derives data from the first DSV) and the second DSV. As such, the MDDB cube derives data from the first and second data sources through the set of dimensions and the second DSV, respectively.","In some cases, the first DSV and the (first) set of dimensions are used to define a first MDDB cube, and the second DSV and another (second) set of dimensions that is derived from the second DSV are used to define a second MDDB cube. Thus, the first MDDB cube is defined by data from a first data source and the second MDDB cube is defined by data from a second data source.","Moreover, a third MDDB cube, which is a federated MDDB cube, is defined (e.g., by the process  described above) by data from both the first and second data sources. In such cases, the third MDDB cube is defined by entities (e.g., the set of dimensions) used to define the first MDDB cube as well as entities (e.g., the second DSV) used to define the second MDDB cube. The following figure illustrates an example of three MDDB cubes defined in such a manner.",{"@attributes":{"id":"p-0446","num":"0445"},"figref":"FIG. 48","b":["4840","4805","4810","4805","4810","4815","4820","4825","4830","4835","4845"]},"In this example, the DSV  provides a logical view of data in the data source  and the set of dimensions  are derived from the DSV . Thus, the data that defines the set of dimensions  is provided by the data source  through the DSV . Similarly, the DSV  provides a logical view of data in the data source  and the set of dimensions  are derived from the DSV . Therefore, the data that defines the set of dimensions  is provided by the data source  through the DSV .","For this example, the MDDB cube  is defined by a set of measures (not shown) and two dimensions (i.e., dimension b and dimension c) in the set of dimensions . Since the set of dimensions  are derived from the data source , the MDDB cube  is defined by data from the data source . Also, in this example, the data that defines the set of measures for the MDDB cube  is provided by the data source  through the DSV . Thus, the MDDB cube  is also defined by data from the data source . As such, the MDDB cube  is a federated MDDB cube because the MDDB cube  is defined by data from two different data sources (i.e., the data source  and the data source ).","The descriptions of various figures above involve MDDB systems that employ content packs to manage MDDB cubes. The MDDB systems of some such embodiments may manage federated MDDB cubes as well. The following figures illustrate various details of federated MDDB cubes implemented for such systems. Specifically, these figures illustrate (1) data relationships of federated MDDB cubes implemented with content packs, (2) an example of a federated MDDB cube that is determined to be available, and (3) an example of a federated MDDB cube that is determined to be not available.",{"@attributes":{"id":"p-0450","num":"0449"},"figref":["FIG. 49","FIG. 49","FIG. 27","FIG. 17"],"b":["4900","4905","4900","4905","4910","4925","4930","4935","4940","4945","4955"]},"In this example, the unified data source  is a collection of data source objects, which includes a set of data source objects  and a set of data source objects , that presents a single source of data to the DSV  and the DSV . As noted above, a data source object is a representation of data in a data source, in some embodiments. As shown, the set of data source objects  are representations of data in the data source  and the set of data source objects  are representations of data in the data source . Therefore, the DSV , which is a logical view of data in the unified data source , is derived from the set of data source objects , and the DSV , which is a logical view of data in the unified data source , is derived from the set of data source objects .","The set of dimensions , each of which is metadata for categorizing a set of measures (not shown) along the set of dimensions , are derived from the DSV . Also, the set of dimensions , each of which is metadata for categorizing a set of measures (not shown) along the set of dimensions , are derived from the DSV .","The MDDB cube  is defined by a set of measures (not shown) and the set of dimensions . For this example, the set of measures for the MDDB cube  is derived from the DSV . Also, the MDDB cube  is defined by a set of measures (not shown) and the set of dimensions . In this example, the set of measures for the MDDB cube  is derived from the DSV .","The MDDB cube  is defined by a set of measures (not shown) and two dimensions (i.e., dimension b and dimension c) in the set of dimensions . Since the set of dimensions  are derived from the DSV , which derives data from the data source  through the set of data source objects  in the unified data source , the MDDB cube  is defined by data from the data source . In this example, the set of measures for the MDDB cube  is derived from the DSV , which derives data from the data source  through the set of data source objects  in the unified data source . As such, the MDDB cube  is defined by data from the data source . Accordingly, the MDDB cube  is a federated MDDB cube, because the MDDB cube  is defined by data from two different data sources (i.e., the data source  and the data source ).",{"@attributes":{"id":"p-0455","num":"0454"},"figref":"FIG. 49","b":["4925","4935","4945","4925","4935","4945","4915","4910","4925","4915","4935","4925","4945","4925","4935"]},"Furthermore,  conceptually shows that the content pack 2 includes, as indicated by a dashed line rectangle, the DSV , the set of dimensions , and the MDDB cube . Therefore, the content pack 2 in this example includes a DSV definition of the DSV , a set of dimension definitions of the set of dimensions , and an MDDB cube definition of the MDDB cube . In this example, the content pack 2 also includes data source commands for creating the set of data source objects  in the unified data source . For this example, the content pack 2 includes a content map that specifies that the DSV  depends on the set of data source objects , each of the dimensions in the set of dimensions  depends on the DSV , and the MDDB cube  depends on both the DSV  and the set of dimensions .","For the content pack 3 shown in , the content pack 3 includes, as indicated by a bold dashed line rectangle, the MDDB cube . However, as mentioned above, the MDDB cube  is defined by dimension b and dimension c in the set of dimensions , which are derived from the DSV , and a set of measures that is derived from the DSV . Since the DSVs  and  and the sets of dimensions  and  are defined in content packs 1 and 2, the content pack 3 in this example only includes an MDDB cube definition of the MDDB cube  and a content map that specifies that the MDDB cube  depends on the DSV  and the dimensions b and c in the set of dimensions .","As explained above, the MDDB system of some embodiments includes a cube availability detection feature for determining whether an MDDB cube is available or not. The following figures illustrate an example of a federated MDDB cube that is available and an example of a federated MDDB cube that is not available.",{"@attributes":{"id":"p-0459","num":"0458"},"figref":["FIGS. 50-52","FIGS. 50-52"],"b":["5060","5060","5005","5015","5070","5075","5020","5035","5040","5045","5050","5055","5065"]},"In this example, the unified data source  is a collection of data source objects, which includes sets of data source objects  and , that presents a single source of data to the DSVs  and . As noted above, a data source object is a representation of data in a data source, in some embodiments. As shown, the set of data source objects  are representations of data in the data source  and the set of data source objects  are representations of data in the data source . Thus, the DSV , which is a logical view of data in the unified data source , is derived from the set of data source objects . Likewise, the DSV , which is a logical view of data in the unified data source , is derived from the set of data source objects . The set of dimensions , each of which is metadata for categorizing a set of measures (not shown) along the set of dimensions , are derived from the DSV . Similarly, the set of dimensions , each of which is metadata for categorizing a set of measures (not shown) along the set of dimensions , are derived from the DSV .","The MDDB cube  is defined by a set of measures (not shown) and the set of dimensions . For this example, the set of measures for the MDDB cube  is derived from the DSV . The MDDB cube  is defined by the set of dimensions  and a set of measures (not shown), which is derived from the DSV  in this example. Further, the MDDB cube  is defined by two of the dimensions (i.e., dimension b and dimension c) in the set of dimensions , and a set of measures (not shown), which is derived from the DSV  in this example.","As shown in , the first stage  of the MDDB cube data relationship diagram shows that the data sources  and  are available. This is indicated by a bolding of the data sources  and . The sets of data source objects  and  in the unified data source  are also available because, in this example, the sets of data source objects  and  are representations of data in the respective data sources  and . This is indicated by a bolding of each of the sets of data source objects  and  in the unified data source  and checkmarks next to each of the sets of data source objects  and .","The DSVs  and  are available because the DSVs  and  are derived from the sets of data source objects  and , each of which is available. In addition, the set of dimensions  is derived from the DSV , and the set of dimensions  is derived from the DSV . Thus, the sets of dimensions  and  are available.","As illustrated in , the second stage  of the MDDB cube data relationship diagram illustrates that the DSVs  and  are available and that the sets of dimensions  and  are available. Since the MDDB cube  derives data from the DSV  and the dimensions b and c in the set of dimensions , this stage  indicates the DSV  and the dimensions b and c in the set of dimensions  as available by bolding these items and placing checkmarks next to the items. As the DSV  and the dimensions b and c in the set of dimensions  are available, the MDDB cube , which is derived from the DSV  and the dimensions b and c in the set of dimensions , is available. In , the third stage  of the MDDB cube data relationship diagram shows that the MDDB cube  is available, as indicated by a bolding of the MDDB cube .","On the other hand,  conceptually illustrate an example of a federated MDDB cube  that is determined to be not available. In particular,  illustrate the determination of the MDDB cube  as not available in three stages - of an MDDB cube data relationship diagram.  illustrate the same components (i.e., the data sources  and , the unified data source , the sets of data source objects  and , the DSVs  and , the sets of dimensions  and , and the MDDB cubes -) as those illustrated in .","As shown in , the first stage  of the MDDB cube data relationship diagram is similar to the first stage  of the MDDB cube data relationship diagram illustrated in  except that, at this stage , the set of data source objects  is not available because the data source , in which the set of data source objects  represents data, is not available. The data source  and the set of data source objects  are indicated as not available by dashed lines of the data source  and the set of data source objects  and \u201cX\u201d marks next to the data source  and the set of data source objects .","Since the set of data source objects  is not available and the DSV  is derived from the set of data source objects , the DSV  is not available. As shown, the set of dimensions  is derived from the DSV . Since the DSV  is not available, the set of dimensions  is also not available.","As illustrated in , the second stage  of the MDDB cube data relationship diagram illustrates that the DSV  is not available, as indicated by dashed lines of the DSV  and an \u201cX\u201d mark next to the DSV . In addition, the second stage  shows that the set of dimensions  is not available, as indicated by dashed lines of the set of dimensions  and an \u201cX\u201d mark next to each dimension in the set of dimensions . As the DSV  is not available, the MDDB cube , which is derived from the DSV , is not available. In , the third stage  of the MDDB cube data relationship diagram shows that the MDDB cube  is not available, as indicated by dashed lines of the MDDB cube .","In addition to content packs that include federated MDDB cubes, some MDDB systems manage content packs that include federated presentation objects. As described above, a presentation object is a predefined representation of a perspective of a set of MDDB cubes. The presentation object of some such embodiments includes a set of charts, graphs, reports, and\/or tables, which are generated based on the perspective of the set of MDDB cubes that define the presentation object. In some embodiments, a federated presentation object is a predefined representation of a perspective of MDDB cubes that are defined in different content packs. The following figure illustrates an example of such a federated presentation object.",{"@attributes":{"id":"p-0470","num":"0469"},"figref":["FIG. 56","FIG. 56"],"b":["5640","5605","5610","5615","5620","5625","5630","5635","5640"]},"For this example, the DSVs  and  are logical views of data in a unified data source (not shown), which is a collection of data source objects. As such, the DSVs  and  are derived from data source objects in the unified data source. In addition, the set of dimensions , each of which is metadata for categorizing a set of measures (not shown) along the set of dimensions , are derived from the DSV . Also, the set of dimensions , each of which is metadata for categorizing a set of measures (not shown) along the set of dimensions , are derived from the DSV .","The MDDB cube  is defined by a set of measures (not shown) and the set of dimensions . For this example, the set of measures for the MDDB cube  is derived from the DSV . Also, the MDDB cube  is defined by a set of measures (not shown) and the set of dimensions . In this example, the set of measures for the MDDB cube  is derived from the DSV . Additionally, the presentation object  is derived from the MDDB cube  and the presentation object  is derived from the MDDB cubes  and .",{"@attributes":{"id":"p-0473","num":"0472"},"figref":"FIG. 56","b":["5605","5615","5625","5635","5605","5615","5625","5635","5615","5605","5625","5605","5615","5635","5625"]},"Furthermore,  conceptually shows that content pack  includes, as indicated by a dashed line rectangle, the DSV , the set of dimensions , the MDDB cube , and the presentation object . Therefore, the content pack 2 in this example includes a DSV definition of the DSV , a set of dimension definitions of the set of dimensions , an MDDB cube definition of the MDDB cube , and a presentation object definition of the presentation object . For this example, the content pack 2 includes a content map that specifies that (1) each of the dimensions in the set of dimensions  depends on the DSV , (2) the MDDB cube  depends on the DSV  and the set of dimensions , and (3) the presentation object  depends on the MDDB cubes  and .","Many of the figures described above illustrate MDDB cubes, federated MDDB cubes, presentation objects, federated presentation objects, content packs, content maps, unified content maps, data sources, unified data sources, data source objects, etc., However, one of ordinary skill in the art will understand that these items are merely examples of such items and that these items may be defined in any number of different ways.","V. Electronic System","Many of the above-described features and applications are implemented as software processes that are specified as a set of instructions recorded on a computer readable storage medium (also referred to as computer readable medium). When these instructions are executed by one or more computational or processing unit(s) (e.g., one or more processors, cores of processors, or other processing units), they cause the processing unit(s) to perform the actions indicated in the instructions. Examples of computer readable media include, but are not limited to, CD-ROMs, flash drives, random access memory (RAM) chips, hard drives, erasable programmable read only memories (EPROMs), electrically erasable programmable read-only memories (EEPROMs), etc. The computer readable media does not include carrier waves and electronic signals passing wirelessly or over wired connections.","In this specification, the term \u201csoftware\u201d is meant to include firmware residing in read-only memory or applications stored in magnetic storage which can be read into memory for processing by a processor. Also, in some embodiments, multiple software inventions can be implemented as sub-parts of a larger program while remaining distinct software inventions. In some embodiments, multiple software inventions can also be implemented as separate programs. Finally, any combination of separate programs that together implement a software invention described here is within the scope of the invention. In some embodiments, the software programs, when installed to operate on one or more electronic systems, define one or more specific machine implementations that execute and perform the operations of the software programs.",{"@attributes":{"id":"p-0478","num":"0477"},"figref":"FIG. 57","b":["5700","5700","5700","5705","5710","5715","5720","5725","5730","5735","5740","5745"]},"The bus  collectively represents all system, peripheral, and chipset buses that communicatively connect the numerous internal devices of the electronic system . For instance, the bus  communicatively connects the processing unit(s)  with the read-only memory , the GPU , the system memory , and the permanent storage device .","From these various memory units, the processing unit(s)  retrieves instructions to execute and data to process in order to execute the processes of the invention. The processing unit(s) may be a single processor or a multi-core processor in different embodiments. Some instructions are passed to and executed by the GPU . The GPU  can offload various computations or complement the image processing provided by the processing unit(s) .","The read-only-memory (ROM)  stores static data and instructions that are needed by the processing unit(s)  and other modules of the electronic system. The permanent storage device , on the other hand, is a read-and-write memory device. This device is a non-volatile memory unit that stores instructions and data even when the electronic system  is off. Some embodiments of the invention use a mass-storage device (such as a magnetic or optical disk and its corresponding disk drive) as the permanent storage device .","Other embodiments use a removable storage device (such as a floppy disk, flash memory device, etc., and its corresponding disk drive) as the permanent storage device. Like the permanent storage device , the system memory  is a read-and-write memory device. However, unlike storage device , the system memory  is a volatile read-and-write memory, such as random access memory. The system memory  stores some of the instructions and data that the processor needs at runtime. In some embodiments, the invention's processes are stored in the system memory , the permanent storage device , and\/or the read-only memory . For example, the various memory units include instructions for processing multimedia clips in accordance with some embodiments. From these various memory units, the processing unit(s)  retrieves instructions to execute and data to process in order to execute the processes of some embodiments.","The bus  also connects to the input and output devices  and . The input devices  enable the user to communicate information to and select commands in the electronic system. The input devices  include alphanumeric keyboards and pointing devices (also called \u201ccursor control devices\u201d), cameras (e.g., webcams), microphones or similar devices for receiving voice commands, etc. The output devices  display images generated by the electronic system or otherwise output data. The output devices  include printers and display devices, such as cathode ray tubes (CRT) or liquid crystal displays (LCD), as well as speakers or similar audio output devices. Some embodiments include devices such as a touchscreen that function as both input and output devices.","Finally, as shown in , bus  also couples electronic system  to a network  through a network adapter (not shown). In this manner, the computer can be a part of a network of computers (such as a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), an intranet, or a network of networks, such as the Internet). Any or all components of electronic system  may be used in conjunction with the invention.","Some embodiments include electronic components, such as microprocessors, storage and memory that store computer program instructions in a machine-readable or computer-readable medium (alternatively referred to as computer-readable storage media, machine-readable media, or machine-readable storage media). Some examples of such computer-readable media include RAM, ROM, read-only compact discs (CD-ROM), recordable compact discs (CD-R), rewritable compact discs (CD-RW), read-only digital versatile discs (e.g., DVD-ROM, dual-layer DVD-ROM), a variety of recordable\/rewritable DVDs (e.g., DVD-RAM, DVD-RW, DVD+RW, etc.), flash memory (e.g., SD cards, mini-SD cards, micro-SD cards, etc.), magnetic and\/or solid state hard drives, read-only and recordable Blu-Ray\u00ae discs, ultra density optical discs, any other optical or magnetic media, and floppy disks. The computer-readable media may store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations. Examples of computer programs or computer code include machine code, such as is produced by a compiler, and files including higher-level code that are executed by a computer, an electronic component, or a microprocessor using an interpreter.","While the above discussion primarily refers to microprocessor or multi-core processors that execute software, some embodiments are performed by one or more integrated circuits, such as application specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs). In some embodiments, such integrated circuits execute instructions that are stored on the circuit itself. In addition, some embodiments execute software stored in programmable logic devices (PLDs), ROM, or RAM devices.","As used in this specification and any claims of this application, the terms \u201ccomputer\u201d, \u201cserver\u201d, \u201cprocessor\u201d, and \u201cmemory\u201d all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification, the terms \u201cdisplay\u201d or \u201cdisplaying\u201d means displaying on an electronic device. As used in this specification and any claims of this application, the terms \u201ccomputer readable medium,\u201d \u201ccomputer readable media,\u201d and \u201cmachine readable medium\u201d are entirely restricted to tangible, physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals, wired download signals, and any other ephemeral signals.","While the invention has been described with reference to numerous specific details, one of ordinary skill in the art will recognize that the invention can be embodied in other specific forms without departing from the spirit of the invention. In addition, a number of the figures (including , , , , , , , , , , , , , , and ) conceptually illustrate processes. The specific operations of these processes may not be performed in the exact order shown and described. The specific operations may not be performed in one continuous series of operations, and different specific operations may be performed in different embodiments. Furthermore, the process could be implemented using several sub-processes, or as part of a larger macro process. Thus, one of ordinary skill in the art would understand that the invention is not to be limited by the foregoing illustrative details, but rather is to be defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features of the invention are set forth in the appended claims. However, for purposes of explanation, several embodiments of the invention are set forth in the following figures.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 21-24"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIGS. 37A-B"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIGS. 38A-B"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIGS. 39-41"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 45"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 46"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 47"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIGS. 50-52"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIGS. 53-55"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 57"}]},"DETDESC":[{},{}]}
