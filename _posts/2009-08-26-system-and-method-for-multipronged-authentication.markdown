---
title: System and method for multipronged authentication
abstract: Various embodiments of a system and method for multipronged authentication are described. Embodiments may include a client system that implements a runtime component configured to consume content. The client system may be configured to implement a digital rights management component configured to perform one or more cryptographic operations and also authenticate the runtime component. The client system may receive encrypted content from a remote computer system and receive a given authentication component from a remote computer system; that authentication component may be configured to authenticate the runtime component. The client system may, based on authentication of the runtime component by both the digital rights management component and the given authentication component, decrypt at least a portion of the encrypted content. In this way, the client system may ensure that decryption of the encrypted content may occur only if multiple components authenticate the runtime component, according to some embodiments.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09027143&OS=09027143&RS=09027143
owner: Adobe Systems Incorporated
number: 09027143
owner_city: San Jose
owner_country: US
publication_date: 20090826
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS","INTRODUCTION","Additional Embodiments"],"p":["1. Field of the Invention","The present invention is directed to computer systems and other electronic devices. More particularly, it is directed to authenticating one or more elements of such systems.","2. Description of the Related Art","In prior years it would not be uncommon for an individual to obtain content (e.g., literary works, periodicals, music, and movies) from a retail location in the form of a physical medium. For example, an individual might travel to a local bookstore and purchase written works in the form of a book, newspaper, or magazine. In another example, an individual might purchase music stored on a Compact Disc (CD) or a motion picture stored on a Digital Video Disc (DVD). In recent years the ubiquity of the Internet and the World Wide Web has paved the way for alternative methods of obtaining content. For example, a user might log on to a music retailer's website and download a digital version of a music album. In other example, a user might log on to a movie subscription provider's website to download or stream a motion picture to view on a personal computer. In the case of books, a user might log on to a bookseller's website and download an electronic book (\u201ce-book\u201d) for view on a computer system, such as a desktop computer or a handheld e-book reader.","The Internet and World Wide Web serve as a backbone for numerous file sharing mechanisms. Examples of such mechanisms include electronic mail (\u201cemail\u201d) and more advanced file distribution software, such as peer-to-peer (\u201cP2P\u201d) file sharing applications. In many cases, such file sharing mechanisms are often utilized to distribute electronic content to individuals that are not authorized to access such content. Such distribution is likely due in part to the relative ease and anonymity of sharing files through such mechanisms. To combat unauthorized consumption of content, some content owners have adopted an approach to protecting their content known as digital rights management (\u201cDRM\u201d), which may include various techniques for limiting access of electronic content to authorized entities and\/or controlling the manner in which such entities access electronic content.","Various embodiments of a system and method for multipronged authentication are described. Embodiments may include a client system configured to implement a runtime component in memory of the client system. The runtime component may be configured to consume content (e.g., video-, audio- or text-based content). The client system may also be configured to implement a digital rights management component in memory of the clients system. The digital rights management component may be configured to perform one or more cryptographic operations, such as encryption or decryption. The digital rights management component may also be configured to authenticate the runtime component. The client system may be configured to receive encrypted content from a remote computer system (e.g., encrypted versions of video, audio, text, etc.). The client system may also be configured to receive a particular authentication component from a remote computer system. The particular authentication component may also be configured to authenticate the runtime component. The client system may be configured to, based on authentication of the runtime component by both the digital rights management component and the particular authentication component, decrypt at least a portion of the encrypted content. In this way, the client system may be configured to ensure that decryption of the encrypted content may occur only if multiple components (e.g., the digital rights management component and the received authentication component) authenticate the runtime component, according to some embodiments. The client system may also be configured to consume (e.g., present, play, display, render, etc.) at least some of the decrypted content on the client system.","Embodiments may also include a server system configured to provide encrypted content to a remote computer system that includes a runtime component configured to consume content (e.g., video-, audio- or text-based content). The remote computer system may also include a digital rights management component configured to perform one or more cryptographic operations including decrypting at least a portion of the encrypted content in response to authenticating the runtime component. The server system may also be configured to provide a particular authentication component to the remote computer system. The particular authentication component may be configured to, in response to authenticating the runtime component, cause at least a portion of the encrypted content to be decrypted. In various embodiments, the encrypted content provided to the remote computer system by the server system may be encrypted such that the entirety of the encrypted content cannot be decrypted on the remote computer system without the remote computer system using both the digital rights management component and the authentication component to authenticate the runtime component. In this way, the server system may be configured to ensure that decryption of the encrypted content may occur only if multiple components (e.g., the digital rights management component and the received authentication component) authenticate the runtime component, according to some embodiments.","While the system and method for multipronged authentication is described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that the system and method for multipronged authentication is not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed. Rather, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the system and method for multipronged authentication as defined by the appended claims. Any headings used herein are for organizational purposes only and are not meant to limit the scope of the description or the claims. As used herein, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words \u201cinclude\u201d, \u201cincluding\u201d, and \u201cincludes\u201d mean including, but not limited to. In various portions of the description presented herein, the terms \u201cvalidate\u201d, \u201cverify\u201d, \u201cvalidation\u201d, \u201cverification\u201d, \u201cvalidating\u201d, and \u201cverifying\u201d may be used interchangeably.","Various embodiments of a system and method for multipronged authentication are described. In the following detailed description, numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.","Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification, the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here, and is generally, considered to be a self-consistent sequence of operations or similar signal processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a specific apparatus, such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification, therefore, a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals, typically represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the special purpose computer or similar special purpose electronic computing device.","Note that the description presented herein may include one or more references to a one-way function or a cryptographic hash function, either of which may be referred to herein as simply a hash function. Generally speaking, a cryptographic hash function may operate on a block of data in order to return a fixed-size bit string (e.g., the hash value, or simply \u201chash\u201d) such that an accidental or intentional change to the block of data will change the hash value (although variations thereof may be utilized in various embodiments). In some cases, the aforesaid block of data may be referred to as a \u201cmessage\u201d and the corresponding hash value may be referred to as the \u201cmessage digest.\u201d In various embodiments, a hash function may include any function or set of operations operating as described above. Examples of hash functions include, but are not limited to, the Secure Hash Algorithm (SHA) (e.g., SHA-1, SHA-0, SHA-224, SHA-256, SHA-384, SHA-512, and other SHA variations), the RACE Integrity Primitives Evaluation Message Digest (RIPEMD) (e.g., RIPEMD-128, RIPEMD-160, RIPEMD-256, RIPEMD-320, and other RIPEMD variations), the Message Digest algorithm (MD) (e.g., MD-3, MD-4, MD-5, and other MD variations), the Tiger and Tiger2 hash functions (e.g., Tiger-128, Tiger-160, Tiger-192, Tiger2-128, Tiger2-160, Tiger2-192, and other Tiger variations), the Very Efficient Substitution Transposition (VEST) (e.g., VEST-4, VEST-8, VEST-16, VEST-32, and other VEST variations), the WHIRLPOOL hash function, some other hash function whether presently known or developed in the future, and\/or some combination or variation of any of the aforesaid hash functions. In various embodiments, the DRM component and\/or the authentication components described herein may be configured to utilize one or more cryptographic hash functions to perform cryptographic operations.","Various embodiments include various encryption and\/or decryption keys, any of which may be generated via a key derivation function (KDF). Some key derivation functions may include one or more iterations or instances of hash functions and\/or other cryptographic operations in order to generate an encryption or decryption key. Examples of key derivation functions may include but are not limited to any key derivation functions specified by Public Key Cryptography Standards (PKCS) (e.g., PKCS-5) or Adobe\u00ae Password Security. In various embodiments, KDFs may be utilized by any of the various components described herein to generate encryption keys for symmetric encryption.","Various portions of this detailed description may refer to \u201cclient(s)\u201d and \u201cserver(s)\u201d or similar terminology. For instance, various embodiments may include (among other elements) a client system or client device (or simply a \u201cclient\u201d) and\/or one or more server systems (or simply \u201cservers\u201d). It should be understood that the terms \u201cclient\u201d and \u201cserver\u201d do not impose any limitation on the operation, configuration, or implementation of such elements. It should be understood that these terms are used only as convenient nomenclature. Indeed, various embodiments are in no way limited by the principles of a conventional client-server architecture. For instance, any of the \u201cclients\u201d or \u201cservers\u201d described herein may be configured to communicate according to a variety of communication protocols or system architectures, such as a peer-to-peer (P2P) architecture or some other architecture, whether such architecture is presently known or developed in the future.","In various instances, this detailed description may refer to content (which may also be referred to as \u201cdigital content,\u201d \u201ccontent item(s),\u201d \u201ccontent data,\u201d \u201ccontent information\u201d or simply \u201cdata\u201d or \u201cinformation\u201d). In some embodiments, content may include any information or data that may be licensed to one or more individuals (or other entities, such as business or group). In various embodiments, content may include electronic representations of video, audio, text and\/or graphics, which may include but is not limited to electronic representations of videos, movies, or other multimedia, which may include but is not limited to data files adhering to Adobe\u00ae Flash\u00ae Video (.FLV or .F4V) format or some other video file format whether such format is presently known or developed in the future.","In various embodiments, content may include electronic representations of music, spoken words, or other audio, which may include but is not limited to data files adhering to the MPEG-1 Audio Layer 3 (.MP3) format, Adobe\u00ae Sound Document (.ASND) format or some other format configured to store electronic audio whether such format is presently known or developed in the future. In some cases, content may include data files adhering to the following formats: Portable Document Format (.PDF), Electronic Publication (.EPUB) format created by the International Digital Publishing Forum (IDPF), JPEG (.JPG) format, Portable Network Graphics (.PNG) format, Adobe\u00ae Photoshop\u00ae (.PSD) format or some other format for electronically storing text, graphics and\/or other information whether such format is presently known or developed in the future. In some embodiments, content may include any combination of the above-described examples.","In various instances, this detailed disclosure may refer to consuming content or to the consumption of content, which may include accessing content, rendering content, displaying content, playing content, and generating, storing or accessing an unencrypted version of content, among other things. In some cases, consuming content may include generating a human-perceptible version of the content (e.g., displaying video on a display, generating audio through a transducer or speaker, etc) from a stored representation of content within memory of a computer system. In some cases, the particular term utilized to convey the consumption of content may be dependent on the context in which it is used. For example, consuming video may also be referred to as viewing or playing the video. In another example, consuming audio may also be referred to as listening to or playing the audio.","In various instances, this detailed description may refer to a device configured to perform content consumption. In various embodiments, such a device may include but is not limited to a computing system (e.g., a desktop or laptop computer), a digital audio or multimedia player (e.g., an MP3 player), a personal digital assistant (PDA), a mobile phone, a smartphone, an e-book reader, a digital photo frame, a netbook, camera, set top box, a video game console, or any other electronic device or system configured to access, view, read, write, and\/or manipulate any of the content data described herein. Any of such devices may be implemented via a computer system similar to the computer system described with respect to .","Note that in various instances the description presented herein may refer to a given entity performing some action. It should be understood that this language may in some cases mean that a system (e.g., a computer system) owned and\/or controlled by the given entity is actually performing the action.","Note that in various instances the description presented herein may refer to a public key being associated with a private key or a public key corresponding to private key. It should be understood that such statements may mean that such a public key forms a public key\u2014private key pair with such a private key. Additionally, in some cases, a public key\u2014private key pair may be referred to as simply a \u201ckey pair.\u201d Note that in various embodiments, public key\u2014private key pairs may be generated via one or more iterations of cryptographic hash functions and\/or one or more iterations of key generation functions. For symmetric encryption, references to a decryption key corresponding to an encryption key may mean that the decryption key is the same as the encryption key. For asymmetric encryption, references to a decryption key corresponding to an encryption key may mean that the decryption key is a private key and the encryption key is the public key that forms a public key\u2014private key pair with the decryption key. References to encryption may include asymmetric encryption, symmetric encryption, another type of encryption, or some combination thereof.","Various portions of the system and method for multipronged authentication may be implemented on one or more client and server systems, such as client system  and server system(s)  of . Client system  may include a runtime component  configured to consume content. Examples of content consumption include the playing of a video or audio file on the client system or any other example of content consumption described above. In some embodiments, the runtime component may be configured to provide a user interface that includes various controls for the consumption of content. For instance, the runtime component may be configured to provide controls for playing, pausing, fast forwarding, rewinding or otherwise controlling content. In various embodiments, runtime component  may be configured to consume content by decoding the content according to one or more audio or video codecs (e.g., H.264 or VP6). Examples of a runtime component  include but are not limited to Adobe\u00ae Flash\u00ae Player and Adobe\u00ae AIR\u2122.","Client system  also includes a digital rights management component, which is illustrated as DRM component . In the illustrated embodiment, DRM component  may be configured to perform one or more cryptographic operations, including but not limited to those related to the consumption of content via runtime component . In various embodiments, the cryptographic operations performed by the DRM component may include but are not limited to content license acquisition, content key acquisition, and content decryption. In embodiments where runtime component  and DRM component  are implemented as computer-executable instructions (e.g., executable software modules), the size of the data representing DRM component  may in some cases be smaller than that of runtime component ; such a configuration may in some cases facilitate the process of updating or replacing the DRM component if necessary.","In various embodiments, as described in more detail below with respect to , DRM component  may be configured to perform an authentication process in order to authenticate runtime component . Authenticating the runtime component may include determining that the runtime component is a valid runtime component as specified by one or more criteria, which are described in more detail below with respect to . In various embodiments, the DRM component may be configured to, in response to authenticating runtime component , decrypt one or more portions of content and provide such content to runtime component . For instance, subsequent to the authentication of the runtime component, the DRM component may consider the runtime component to be a trusted element that is eligible to receive decrypted content. If authentication of the runtime component fails, the DRM component may consider the runtime component to be an untrusted element that is not eligible to receive decrypted content. An example of DRM component  includes but is not limited to Adobe\u00ae DRM Client for Flash\u00ae Player.","In various embodiments, the above-described techniques combined with those described below may in many cases thwart an attacker's ability to spoof the runtime component. In one example of such an attack, an attacker might create a malicious application that imitates a legitimate runtime component in order to trick the DRM component into decrypting encrypted content and providing the decrypted content to the malicious application. If such an attack were successful, the attacker might use the malicious application to bypass DRM usage rules placed on the content. For instance, one type of usage rule might prohibit transferring content to another computer system. The malicious application might be configured to ignore such restrictions on content distribution and allow the unencrypted content to be transferred to other computer systems (e.g., computer systems of a peer-to-peer file sharing network).","To thwart such an attack (or similar attacks), various embodiments may utilize a multipronged authentication of the runtime component. One aspect of such embodiments may include the authentication of the runtime component by the DRM component as described above (and as described in more detail below). Another aspect of such embodiments may include the authentication of the runtime component by one or more authentication components that are received by the client system from a remote computer system. In various embodiments, such an authentication component may be received at runtime (e.g., while runtime component  or DRM component  are executing). One example of such an authentication component is illustrated as authentication component , which is described in more detail below. In some embodiments, authentication components may be represented by data or information that may be interpreted and\/or executed by the runtime component described herein (e.g., authentication components may be expressed in executable instructions or bytecode). In some embodiments, authentication components may be software or hardware modules that do not require a runtime component in order to operate.","Authentication component  may be acquired by client system  according to a variety of techniques in various embodiments. In some embodiments, runtime component  may obtain encrypted content  and a corresponding authentication component  as part of the same content stream . In some embodiments, element  may represent a data file that includes both the encrypted content  and a corresponding authentication component . In various embodiments, content streams and\/or data files may adhere to the SWF file format, instances of which may be consumed or interpreted by Adobe\u00ae Flash\u00ae Player and\/or Adobe\u00ae AIR\u2122. In some embodiments, encrypted content  may include a network address specifying where the corresponding authentication component may be retrieved from. For instance, metadata of the encrypted content may specify such a network address. Examples of such a network address include but are not limited to a Uniform Resource Locator (URL), Uniform Resource Identifier (URI), or some other network-based address specifying a network location of an authentication component. In various embodiments, the runtime component may determine the aforesaid network address from the content and request and\/or retrieve the authentication component located at such network address. The operation of authentication component  is described in more detail below with respect to .","In various embodiments, one or more server system(s)  may be configured to implement content distributor , authentication component distributor  and license server . For instance, in some embodiments each of the aforesaid components may be implemented on the same server system. In other embodiments, each of the aforesaid components may be implemented on a different server system. In various embodiments, content distributor  may be configured to provide encrypted content, such as encrypted content , to one or more client systems, such as client system . In various embodiments, authentication component distributor  may be configured to distribute authentication components, such as authentication component , to client systems, such as client system . In various embodiments, license server  may be configured to provide a content license, such as content license , to one or more client systems, such as client system .","In various embodiments, DRM component  may utilize content license  to decrypt a portion of encrypted content  and\/or enforce one or more usage rules. For instance, in some embodiments, content license  may include a decryption key for decrypting one or more portions of encrypted content . DRM component  may be configured to utilize that decryption key to decrypt such portions of encrypted content . In various embodiments, DRM component  may be configured to enforce usage rules on the access of encrypted content . In general, usage rules may include any restrictions on the use or access of the content including but not limited to restricting the access of content to a particular time period, and restricting the actions (e.g., view, copy, save, distribute, etc.) that can be performed with respect to the content. In other embodiments, DRM component may pass such usage rules to runtime component  (or runtime component  may access such usage rules directly) to enable the runtime component to enforce the usage rules on the content.","Multipronged Authentication of the Runtime Component","As described above, to thwart malicious activities including but not limited to spoofing attacks on the runtime component, various embodiments may utilize a multipronged authentication of the runtime component. In some embodiments, the multipronged authentication may include decrypting the encrypted content and\/or consuming such content only after both DRM component  and authentication component  authenticate runtime component  (e.g., only after determining that runtime component  is trusted). By utilizing the multipronged authentication described herein, client system  may in some cases be configured to quickly and efficiently overcome a security breach. In one example, if an attacker were to somehow successfully spoof runtime component  to both the DRM component and authentication component , client system  may in various embodiments update the authentication component with a new authentication component that has not been compromised.","To support the multipronged authentication described herein, the encrypted content  that is provided to the client system by content distributor  may be encrypted in such a way that the entirety of the content (e.g., the whole video file, or the whole audio file, etc.) cannot be decrypted by only using one of the DRM component and the authentication component. In other words, in some embodiments, the manner in which the encrypted content is encrypted requires decryption of the content by both the authentication component  and the DRM component . In one example, the encrypted content  that is provided to the client system by content distributor  may include multiple distinct portions of content (e.g., distinct groups of one or more blocks). In various embodiments, one portion of the content may be decrypted with a first key and a second portion of the content may be decrypted with a second key. In one non-limiting example, every hundredth block of the encrypted content may be encrypted with a different encryption key that is different than the encryption key used to encrypt all of the other blocks of the encrypted content. In various embodiments, DRM component  may receive one or more decryption keys (e.g., one or more keys from content license ) for decrypting one or more portions of encrypted content , and authentication component  may receive one or more other decryption keys for decrypting one or more other portions of encrypted content . For instance, in the context of the aforesaid non-limiting example, authentication component may receive one or more decryption keys for decrypting every hundredth block of encrypted content , and DRM component  may receive one or more decryption keys for decrypting the remaining blocks of the encrypted content.","In various embodiments, authentication component  may be configured to decrypt one or more portions of the encrypted content if and only if the authentication component authenticates the runtime component (described in more detail below). Likewise, in various embodiments, DRM component  may be configured to decrypt one or more portions of the encrypted content if and only if the DRM component  authenticates the runtime component. By encrypting the content as described above and utilizing multiple authentication elements as described above, the client system in various embodiments may be configured such that the entirety of encrypted content  will be decrypted if and only if both authentication component  and DRM component  authenticate runtime component .","In various embodiments, runtime component  may be configured to receive encrypted content . Runtime component  may submit at least a portion of encrypted content  to DRM component , as illustrated by encrypted content . In various embodiments, this submission may be a request to decrypt the submitted content. Runtime component  may also submit at least a portion of the encrypted content to authentication component . This submission may also be a request to decrypt the submitted content. In various embodiments, each of DRM component  and authentication component  may be configured to enforce a requirement that runtime component  be authenticated prior to decrypting the respective content submitted by the runtime component. In various embodiments, the authentication component and the DRM component may perform different authentication processes in order to determine whether the runtime component is to be authenticated, as described in more detail below.","As a precursor to the description of the distinct authentication processes performed by the authentication component and the DRM component, application programming interface(s) (APIs)  are described. As illustrated, runtime component  may include one or more APIs , each of which may in some embodiments define the manner in which an element may request services from libraries (subroutines, classes, functions, etc.) provided by the runtime component. In various embodiments, each API of runtime component  may be configured to respond to requests or calls in or requests to the API. Examples of APIs include but are not limited to cryptographic APIs, windowing APIs, and networking APIs. Examples of APIs  may include but are not limited to Adobe\u00ae ActionScript\u00ae 1.0 APIs, Adobe\u00ae ActionScript\u00ae 2.0 APIs, and Adobe\u00ae ActionScript\u00ae 3.0 APIs. In various embodiments, for at least some requests (or calls) sent to APIs , one or more expected responses may be determined by the authentication component  and\/or DRM component . As described in more detail below with respect to authentication processes, authentication component  and DRM component  may be configured to use knowledge of such expected responses in order to determine whether runtime component  is a valid runtime component.","DRM component  may be configured to decrypt encrypted content  to generate decrypted content . For instance, DRM component may obtain a decryption key from content license  and decrypt a portion of encrypted content  with such key. In various embodiments, DRM component  may perform such decryption in response to authenticating runtime component  (e.g., in response to determining that runtime component  is valid or authentic). If the runtime component  is determined to be not authentic (e.g., invalid, untrusted, etc.), the DRM component may not provide decrypted content  to the runtime component. In various embodiments, the DRM component may determine, for each of one or more API requests, an expected response to that API request. To perform authentication process , DRM component  may submit each of the one or more API requests to the respective API of runtime component , as demonstrated in the illustrated embodiment. As part of authentication process , DRM component  may be configured to receive one or more responses to those requests. As part of authentication process , DRM component  may in various embodiments determine whether the one or more API response match the one or more expected responses described above. In response to determining that each of the one or more API responses matches each of the respective expected responses, DRM component  may determine that runtime component  is authenticated (e.g., valid or trusted). In response to determining that one or more of the API responses do not match the respective expected responses, DRM component  may determine that runtime component  is not authenticated (e.g., not valid, unauthentic, untrusted, etc.).","In some embodiments, as an alternative to the API check described above (or in addition to the API check), DRM component may determine whether the runtime component  holds a particular cryptographic key. In one example, the DRM component may engage the runtime component in a handshaking protocol to determine whether the particular cryptographic key is held by the runtime component. In response to determining that the particular cryptographic key is held by the runtime component, DRM component  may determine that runtime component  is authenticated. In response to determining that the particular cryptographic key is not held by the runtime component, DRM component  may determine that runtime component  is not authenticated.","Authentication component  may be configured to decrypt encrypted content  to generate decrypted content . For instance, authentication component may include a decryption key for decrypting a particular portion of encrypted content . In various embodiments, authentication component  may perform such decryption in response to authenticating runtime component  (e.g., in response to determining that runtime component  is valid or authentic). (Note that in some embodiments the authentication component may, if and only if the runtime component is authenticated by the authentication component, pass a decryption key to the runtime component, and the runtime component may perform the decryption.) If the runtime component  is determined to be not authentic (e.g., invalid, untrusted, etc.), the authentication component may not provide decrypted content  to the runtime component. In various embodiments, the authentication component may determine, for each of one or more API requests, an expected response to that API request. To perform authentication process , authentication component  may submit each of the one or more API requests to the respective API of runtime component , as demonstrated in the illustrated embodiment. As part of authentication process , authentication component  may be configured to receive one or more responses to those requests. As part of authentication process , authentication component  may in various embodiments determine whether the one or more API response match the one or more expected responses described above. In response to determining that each of the one or more API responses matches each of the respective expected responses, authentication component  may determine that runtime component  is authenticated (e.g., valid or trusted). In response to determining that one or more of the API responses do not match the respective expected responses, authentication component  may determine that runtime component  is not authenticated (e.g., not valid, unauthentic, untrusted, etc.).","In some embodiments, as an alternative to the API check described above (or in addition to the API check), authentication component  may determine whether the runtime component  holds a particular cryptographic key. In one example, the authentication component may engage the runtime component in a handshaking protocol to determine whether the particular cryptographic key is held by the runtime component. In response to determining that the particular cryptographic key is held by the runtime component, authentication component  may determine that runtime component  is authenticated. In response to determining that the particular cryptographic key is not held by the runtime component, authentication component may determine that runtime component  is not authenticated.","In various embodiments, authentication process  and authentication process  may operate on different portions of API(s) . In this way, if a malicious application were to spoof the portion of API(s)  checked by DRM component  but not the portion of API(s)  checked by authentication component , the malicious application would be prohibited from receiving decrypted content . Likewise, if a malicious application were to spoof the portion of API(s)  checked by authentication component  but not the portion of API(s)  checked by DRM component , the malicious application would be prohibited from receiving decrypted content . In one particular example, DRM component  may limit the API-based authentication described to a particular API, such as a cryptographic API of runtime component . In this example, authentication component  may perform the API-based authentication on a different portion of API(s) . For instance, authentication component might query a windowing API and a networking API. Other examples are of course possible and contemplated. In general, the portion of API(s)  that are tested by authentication  (in accordance with authentication process  described above) may be different than the portion of API(s)  that are tested by DRM component  (in accordance with authentication process  described above).","If both authentication processes  and  are successful (e.g., if both DRM component  and authentication component  authenticate the runtime component), runtime component may receive decrypted content  and decrypted content , which combined may represent an unencrypted version of encrypted content . Such unencrypted version of encrypted content  is illustrated as decrypted content  in the illustrated embodiment. For instance, decrypted content  may be video content, audio content or any other content described herein. The runtime component may provide such decrypted content to an input\/output component  in various embodiments. For instance, at content consumption time, the consumed content (e.g., a playing video) may be sent to input\/output component  (which may be represented by element  of ) for consumption on a peripheral device (e.g., a display). In general, the generation and\/or output of decrypted content  may include any of the content consumption techniques described above (e.g., playing, displaying, rendering, etc.).","As one alternative to the example provided above, at least some of encrypted content  may include multiple layers of encryption. For instance, in one non-limiting example, every hundredth block of encrypted content may be encrypted with a first encryption key and then encrypted again with a second encryption key. In this example, all of the remaining blocks of the encrypted content may be encrypted with the first decryption key but not the second encryption key. In this example, authentication component  may include a decryption key corresponding to the aforesaid second encryption key and the DRM component  may receive a decryption key (e.g., from the content license) that corresponds to the aforesaid first decryption key. Accordingly, in this example, if authentication component decrypts every hundredth block using the decryption key held by authentication component, the result will be blocks that are still encrypted with the aforesaid first encryption key (due to the layered encryption described above). In such cases, runtime component  may be configured to pass such blocks to the DRM component so that they may be fully decrypted (since in this example the DRM component holds the appropriate decryption key that corresponds to the aforesaid first encryption key).","Multiple Authentication Components","In various embodiments, multiple authentication components may be utilized to decrypt encrypted content (e.g., a stream of encrypted content, such as a video stream). In such embodiments, distinct portions of the content stream may be encrypted with different encryption keys such that multiple authentication components (each with different decryption keys that correspond to respective ones of the aforesaid encryption keys) are required to decrypt the entire content stream.  illustrates one embodiment of a content stream  that includes an example of such content. In the illustrated embodiment, different portions of the encrypted content are encrypted with different encryption keys. Each of encrypted content , ,  and  may be encrypted with different encryption keys.","Also note that for clarity of description of this section, it will be assumed that the runtime component is authentic and that each of the authentication components have or will successfully authenticate the runtime component (of course in other cases the runtime component may be invalid and the authentication components may be configured to prevent the decryption of one or more portions of content) thereby enabling decryption of one or more portions of content stream . Also note that each of the illustrated authentication components may be configured in a manner similar to that of authentication component  described above.","In the illustrated example, authentication component  may be the initial authentication component received by client system . (Content\/data to the left of the content stream may be encountered by the client before content\/data on the right of the content stream.) In various embodiments, a DRM component on the client system (e.g., DRM component ) may obtain the decryption key (e.g., from content license ) for encrypted content  as well as decrypt such content with the decryption key. In various embodiments, authentication component  may hold key , which may be the decryption key that corresponds to the encryption key used to encrypt encrypted content . Authentication component  may be configured to use decryption key  to decrypt encrypted content  (or pass such key to the runtime component such that the runtime component may use decryption key  to decrypt the content).","In some embodiments, once the client system encounters encrypted content , authentication component  may not be able to decrypt such content (e.g., since it currently does not have possession of the appropriate encryption key). To enable the client system to decrypt encrypted content , a new authentication component  may be received. In the illustrated embodiments, decryption key  may be the decryption key that corresponds to the encryption key used to encrypt encrypted content . To enable client system to decrypt encrypted content , authentication component  may be configured to decrypt such content using decryption key , pass decryption key  to the runtime component such that the runtime component is enabled to decrypt such content, pass decryption key  to the DRM component such that the DRM component is enabled to decrypt such content, or pass the decryption key  to authentication component  such that authentication component  is enabled to decrypt the content. Techniques similar to those described above may be utilized to decrypt encrypted content  with authentication component  and decryption key  (note that decryption key  may correspond to the encryption key used to encrypt encrypted content ). In some embodiments, subsequent authentication components of the content stream are encrypted and must be decrypted by an existing authentication component when received at the client system. In some embodiments, one or more of the authentication components of the illustrated content stream  may require that the client system provide user credentials (e.g., a username, password, and\/or digital certificate) in order to decrypt and\/or consume the content via the runtime component.","In some embodiments (not illustrated), the manner in which the content is encrypted may require overlap in the decryption of two or more authentication components. For instance, a particular portion of the content stream may be encrypted with both two encryptions, one which corresponds to decryption key  and another that corresponds to decryption key . In this example, use of both authentication component  and authentication component  may be required to decrypt that particular portion of content. For instance, each authentication component may decrypt the particular portion of content using its respective decryption key, one authentication component could pass its key to the other authentication component to enable decryption, or both authentication components could pass their respective keys to the runtime component to enable the runtime component to decrypt the particular portion of content. In various embodiments, the utilization of different keys as illustrated in  may bolster the security of the overall content stream. For instance, if an attacker were to crack the decryption key for one of the authentication components, such security compromise would be limited to content associated with that key. In this example, content associated with keys that have not been compromised would be secure.","Also note that each authentication component may in various embodiments be configured to test a different portion of API(s) . Such diversity among the different authentication components may strengthen the security of the content stream. For instance, if an attacker were to compromise one of the illustrated authentication components (e.g., by spoofing the runtime component), that security compromise would be limited to that particular authentication component in various embodiments. More specifically, even were a malicious application to spoof the APIs probed by one authentication component, such security compromise would not extend to a second authentication components that probes different APIs. For instance, if the spoofing application failed the API-based authentication of the second authentication component, that authentication component may prevent the decryption of a portion of the content stream (e.g., by not performing that decryption or by withholding the decryption key from other components).","In various embodiments, the use of multiple different authentication components, the diversity of the decryption keys used by the authentication components and\/or the diversity of APIs that are tested by the authentication components may improve the overall security of the content stream. For example, such techniques may make the overall content stream a moving target for an attacker by isolating security compromises to only a portion of the overall content stream.","In some embodiments, authentication component distributor  may be configured to enhance the diversity described above. For instance, as described above, encrypted content may specify a network location (e.g., URL) from which an authentication component  may be obtained. Such network location may be controlled by distributor . For instance, distributor  may be configured to change the particular authentication component associated with that network location. In one example, for any given client request for the network location, the distributor  may be configured to select an authentication component from a repository of different authentication components (e.g., authentication components that test different portions of API(s) ) and provide the selected authentication component to the client system in response to that request. In some embodiments, the selection of the authentication component from the repository may be a random or pseudo-random process. To further improve the diversity of the authentication components utilized in various embodiments, the quantity of authentication components within the repository may be very large relative to the quantity of authentication components required to decrypt a content stream.","Obfuscation","In various embodiments, any of the components, elements and\/or data described herein may be obfuscated, such as by modifying the data that represents such items with an obfuscation tool. In various embodiments, such an obfuscation tool may be configured to obfuscate data, bytecode, and\/or machine code (or other executable instructions). In one example, any of the authentication components or decryption keys described herein may be obfuscated prior to using such elements in the above-described implementations. Obfuscating the aforesaid items may enhance the overall security of various embodiments by, e.g., concealing the purpose of executable code in order to deter reverse engineering. In various embodiments, the security techniques described herein may cause different portions of data (e.g., content or encryption keys) to be distributed across multiple memory buffers (e.g., only a portion of such data may be available in memory at any given time) such that a memory inspection or debugging session will not result in a security compromise of those portions of data.","Example Methods","The system and method for multipronged authentication may include various methods, some of which are described below with respect to . In various embodiments, the methods illustrated may be performed by the computer system of , which is described below.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 4A","b":["100","400","102","104","162","100"]},"As illustrated by block , the method may include receiving a particular authentication component from a remote computer system. An example of such an authentication component may include but is not limited to any of the authentication components described above, such as authentication component  or authentication components ,  and . One example of the receipt of an authentication component from a remote computer system is illustrated by the receipt of authentication component  from server system(s)  described above. In some embodiments, the method may include receiving the encrypted content and the authentication component together, such as in the same file or content stream.","As illustrated by block , the method may include authenticating the runtime component with (i.e., by utilizing) the digital rights management component and, in response to that authentication, decrypting at least a portion of the encrypted content with the digital rights management component. In various embodiment of the method, if the runtime component is determined to be not authentic (e.g., invalid, such as a malicious application), the method may include prohibiting the decryption of at least a portion of the encrypted content with the DRM component. One example of the aforesaid decryption is described above with respect to DRM component  decrypting encrypted content  (which may be at least a portion of encrypted content ). For instance, in various embodiments, the method may include using a DRM component to access a decryption key from a content license and using that decryption key to decrypt at least a portion of the encrypted content in order to generate decrypted content. In various embodiments, the runtime component may include one or more APIs (e.g., API(s) ), and the method may include utilizing the API-based authentication techniques described above to determine that the runtime component is authentic (or not authentic, in some cases). In some cases, runtime component may include a cryptographic key, and authenticating the runtime component in these cases may include the DRM component verifying that cryptographic key.","As illustrated by block , the method may also include authenticating the runtime component with the particular authentication component and, in response to that authentication, using the authentication component to decrypt at least a portion of the encrypted content. In various embodiment of the method, if the runtime component is determined to be not authentic (e.g., invalid, such as a malicious application), the method may include prohibiting the decryption of at least a portion of the encrypted content with the authentication component. One example of the aforesaid decryption is described above with respect to authentication component  decrypting encrypted content  (which may be at least a portion of encrypted content ). In various embodiments, the runtime component may include one or more APIs (e.g., API(s) ), and the method may include utilizing the API-based authentication techniques of the authentication component described above in order to determine that the runtime component is authentic (or not authentic, in some cases). In some cases, runtime component may include a cryptographic key, and authenticating the runtime component in these cases may include the authentication component verifying that cryptographic key.","In various embodiments, using the authentication component to decrypt at least a portion of the encrypted content in accordance with block  may include the authentication component decrypting at least a portion of the encrypted content with decryption logic of the authentication component. For instance, any of the authentication components described herein may be configured to perform any of a variety of decryption process (e.g., symmetric decryption, asymmetric decryption, or some other decryption process or combination thereof) and use such decryption processes to decrypt encrypted content (in response to determining that the runtime component is authentic). In various other embodiments, the runtime component may include similar decryption logic and using the authentication component to decrypt at least a portion of the decrypted content may include causing the authentication component to provide a decryption key to the runtime component such that the runtime component is enabled to decrypt at least a portion of the encrypted content (e.g., since that decryption key may correspond to the encryption key used to encrypt the content).","Note that in various embodiments of the method, the portion of the runtime component authenticated by the DRM component and the portion of the runtime component authenticated by the authentication component. For instance, the method may include using one component to perform API-based authentication (described above) on one set of APIs and using the other component to perform API-based authentication on another set of APIs. In some cases, the method may include using one component to evaluate functions or libraries of the APIs different than those evaluated by the other component.","As illustrated by block , the method may also include consuming at least a portion of the decrypted content (e.g., content decrypted by the DRM component, content for which decryption was caused by the authentication component, or some combination thereof) on the particular computer system. For instance, the method may include rendering or playing some the decrypted content or using any other technique for content consumption as described above. In various embodiments, consuming the content may include providing unencrypted content to an external or peripheral device (e.g., a computer display) for consumption on that device.","In various embodiments, the method may also include receiving multiple different authentication components, such as described above with respect to . For instance, in various embodiments, different portions of the content stream may be encrypted with different encryption keys; each of such portions may be decrypted with a respect authentication component that holds the respective decryption key.","While the flowchart of  illustrates an example method that includes decryption of content by both the digital rights management component and the authentication component, various embodiments may not necessarily adhere to such decryption techniques. For instance,  illustrates one example of a method where the decryption of content may be performed by the digital rights management component, by the runtime component, by the authentication component, or some combination thereof. In various embodiments,  may be performed by client system  described above.","As illustrated by block , the method may include providing a runtime component configured to consume content on a computer system. For instance, providing such a runtime component may include providing a runtime component similar to or the same as runtime component  described above. As illustrated by block , the method may also include providing a digital rights management component configured to perform one or more cryptographic operations on the computer system. For instance, providing such a digital rights management component may include providing a digital rights management component similar to or the same as DRM component  described above. As illustrated by blocks  and , the method may also include receiving encrypted content and receiving a particular authentication component, such as described above with respect to blocks  and  of .","The method may also include using the digital rights management component to authenticate the runtime component (block ) and using the particular authentication component to authentication the runtime component (block ). For instance, either of such authentication may include using the API-based authentications described above and\/or using the verification of a cryptographic key held by the runtime component as described above.","As illustrated by block , the method may include, based on the authentication of the runtime component by both the digital rights management component and the particular authentication component, decrypting at least a portion of the encrypted content. In various embodiments, performing such decryption may be performed by the digital rights management component, by the runtime component, by the authentication component, or some combination thereof, as described in more detail below.","In some embodiments, decrypting at least a portion of the encrypted content may include the digital rights management component and the particular authentication component decrypting respective portions of the encrypted content, such as described above with respect to . In some embodiments, decrypting at least a portion of the encrypted content may include the digital rights management component and the particular authentication component decrypting at least some of the same portions of content, such as described above in embodiments where encrypted content  includes multiple layers of encryption. In some embodiments, the runtime component may receive a decryption key from the authentication component and\/or the digital rights management component, and decrypting at least a portion of the decrypted content may include the runtime component decrypting that portion of content with such key(s). In some embodiments, the digital rights management component may receive a decryption key from the authentication component (e.g., subsequent to the authentication component successfully authenticating the runtime component), and decrypting at least a portion of the decrypted content may include the digital rights management component decrypting the content with such key.","Note that in various embodiments, irrespective of which decryption techniques is utilized, decryption of all of the content may be based upon both the authentication component and the digital rights management component authenticating the runtime component (e.g., such as described above with respect to authentication processes  and ). In some cases, if only one of the digital rights management component and the authentication component authenticate the runtime component, that component may in some cases be utilized to decrypt a portion of (but not the entirety of) the encrypted content. However, at least some of the encrypted content would not be able to be decrypted in this particular scenario. For example, if the digital rights management component authenticated the runtime component and the authentication component did not authenticate the runtime component, the digital rights management component might decrypt a portion of the content for which it holds key. However, in such a scenario, the runtime component may perform one or more techniques to prevent the decryption of at least some of the content. For instance, in embodiments where the authentication component is responsible for decrypting content with its own decryption logic, the authentication component may refrain from performing such decryption. In embodiments where the authentication component is responsible for passing a key to another component (e.g., the digital right management component or the runtime component) to enable that component to decrypt the content, the authentication component may withhold such key from that component in order to prevent decryption of at least some of the content.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5","b":["150","500","102","104","150","162","100"]},"As illustrated by block , the method may also include providing a particular authentication component (any of the authentication components described herein) to the remote computer system. In various embodiments, the particular authentication component that is provided may be configured to, in response to authenticating the runtime component, cause at least a portion of the encrypted content to be decrypted. In various embodiments, to cause at least a portion of the encrypted content to be decrypted may include the authentication component decrypting at least a portion of the encrypted content with decryption logic of the authentication component. In various other embodiments, the runtime component may include similar decryption logic and the authentication component may cause content to be decrypted by providing a decryption key to the runtime component such that the runtime component is enabled to decrypt at least a portion of the encrypted content (e.g., since that decryption key may correspond to the encryption key used to encrypt the content).","In various embodiment of the method, the particular encrypted content that is provided may be encrypted such that the entirety of the particular encrypted content cannot be decrypted on the remote computer system without the remote computer system using both the digital rights management component and the authentication component to authenticate the runtime component. For instance, as described above in reference to multiple examples, some portions of the content may be encrypted with an encryption key that corresponds to a decryption key accessible to the DRM component (e.g., a decryption key the DRM component obtains from a content license) and other portions of the content may be encrypted with an encryption key that corresponds to a decryption key held by the authentication component. An example of content generate according to these techniques is illustrated by the content of content stream  described above. Additionally, various techniques by which the authentication component may prevent decryption of at least some of the encrypted content (e.g., if at least one of the DRM component and the authentication component do not authenticate the runtime component) are described above with respect to .","As described above, different portions of the encrypted content may be encrypted with different encryption keys. In various embodiments, the method may also include providing such keys to the remote computer system. For instance, the method may include providing the DRM component with a content decryption key for decryption some portion of the content. In some cases, providing such key may include providing the key as part of content license for the content. In various embodiments, the method may include providing another decryption to the remote computer system such that the authentication component of the remote computer system may decrypt portions of the encrypted content. In various embodiments, the method may also include providing additional authentication components as well as corresponding decryption keys that may be utilized by such components to decrypt portions of the encrypted content. In one example providing content encrypted with different keys as well as providing authentication components with respective decryption keys to decrypt the content may be implemented by providing a content stream that includes such elements, such as a content stream similar to content stream .","Also note that while embodiments described herein largely refer to multipronged authentication of a runtime component, various embodiments may utilize similar techniques for multipronged authentication in order to authenticate other elements. In one example, a web browser (and\/or associated plug-ins) may operate in a mode with restricted privileges. While operating in such a mode, the web browser may be prevented from performing certain operations (e.g., privileged operations, such as performing a system call). To perform such operations, the web browser may be required to call a process with higher privileges. In this example, the process with higher privileges may utilize the multipronged authentication techniques described herein in order to authenticate the web browser. Other examples are possible and contemplated in various embodiments.","Example Computer System","Various embodiments of a system and method for multipronged authentication, as described herein, may be executed on one or more computer systems, which may interact with various other devices. One such computer system is computer system  illustrated by , which may in various embodiments implement any of the elements or functionality illustrated in . In various embodiments, computer system  may be configured to implement client system  described above. In some embodiments, computer system  may be configured to implement one or more of server system(s)  described above. Computer system  may be configured to implement runtime component , DRM component , and\/or authentication component , each of which may be stored in memory as processor-executable executable program instructions  (e.g., program instructions executable by processor(s) ) in various embodiments. In the illustrated embodiment, computer system  includes one or more processors  coupled to a system memory  via an input\/output (I\/O) interface . Computer system  further includes a network interface  coupled to I\/O interface , and one or more input\/output devices , such as cursor control device , keyboard , and display(s) . In some cases, it is contemplated that embodiments may be implemented using a single instance of computer system , while in other embodiments multiple such systems, or multiple nodes making up computer system , may be configured to host different portions or instances of various embodiments. For example, in one embodiment some elements may be implemented via one or more nodes of computer system  that are distinct from those nodes implementing other elements. In another example, multiple nodes may implement computer system  in a distributed manner.","In various embodiments, computer system  may be a uniprocessor system including one processor , or a multiprocessor system including several processors  (e.g., two, four, eight, or another suitable number). Processors  may be any suitable processor capable of executing instructions. For example, in various embodiments processors  may be general-purpose or embedded processors implementing any of a variety of instruction set architectures (ISAs), such as the x96, PowerPC, SPARC, or MIPS ISAs, or any other suitable ISA. In multiprocessor systems, each of processors  may commonly, but not necessarily, implement the same ISA.","System memory  may be configured to store program instructions  and\/or data  accessible by processor . In various embodiments, data  may include encrypted content , content license , and decrypted content . In various embodiments, system memory  may be implemented using any suitable memory technology, such as static random access memory (SRAM), synchronous dynamic RAM (SDRAM), nonvolatile\/Flash-type memory, or any other type of memory. In the illustrated embodiment, program instructions and data implementing any of the elements of the DRM framework described above may be stored within system memory . In other embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media or on similar media separate from system memory  or computer system .","In one embodiment, I\/O interface  may be configured to coordinate I\/O traffic between processor , system memory , and any peripheral devices in the device, including network interface  or other peripheral interfaces, such as input\/output devices . In some embodiments, I\/O interface  may perform any necessary protocol, timing or other data transformations to convert data signals from one component (e.g., system memory ) into a format suitable for use by another component (e.g., processor ). In some embodiments, I\/O interface  may include support for devices attached through various types of peripheral buses, such as a variant of the Peripheral Component Interconnect (PCI) bus standard or the Universal Serial Bus (USB) standard, for example. In some embodiments, the function of I\/O interface  may be split into two or more separate components, such as a north bridge and a south bridge, for example. Also, in some embodiments some or all of the functionality of I\/O interface , such as an interface to system memory , may be incorporated directly into processor .","Network interface  may be configured to allow data to be exchanged between computer system  and other devices attached to a network (e.g., network ), such as one or more server system(s) , or between nodes of computer system . In various embodiments, network  may include one or more networks including but not limited to Local Area Networks (LANs) (e.g., an Ethernet or corporate network), Wide Area Networks (WANs) (e.g., the Internet), wireless data networks, some other electronic data network, or some combination thereof. In various embodiments, network interface  may support communication via wired or wireless general data networks, such as any suitable type of Ethernet network, for example; via telecommunications\/telephony networks such as analog voice networks or digital fiber communications networks; via storage area networks such as Fibre Channel SANs, or via any other suitable type of network and\/or protocol.","Input\/output devices  may, in some embodiments, include one or more display terminals, keyboards, keypads, touchpads, scanning devices, voice or optical recognition devices, or any other devices suitable for entering or accessing data by one or more computer systems . Multiple input\/output devices  may be present in computer system  or may be distributed on various nodes of computer system . In some embodiments, similar input\/output devices may be separate from computer system  and may interact with one or more nodes of computer system  through a wired or wireless connection, such as over network interface .","In some embodiments, the illustrated computer system may implement any of the methods described above, such as the method illustrated by , B, and . In other embodiments, different elements and data may be included.","Those skilled in the art will appreciate that computer system  is merely illustrative and is not intended to limit the scope of embodiments. In particular, the computer system and devices may include any combination of hardware or software that can perform the indicated functions of various embodiments, including computers, network devices, Internet appliances, PDAs, wireless phones, pagers, etc. Computer system  may also be connected to other devices that are not illustrated, or instead may operate as a stand-alone system. In addition, the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly, in some embodiments, the functionality of some of the illustrated components may not be provided and\/or other additional functionality may be available.","Those skilled in the art will also appreciate that, while various items are illustrated as being stored in memory or on storage while being used, these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively, in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter-computer communication. Some or all of the system components or data structures may also be stored (e.g., as instructions or structured data) on a computer-accessible medium or a portable article to be read by an appropriate drive, various examples of which are described above. In some embodiments, instructions stored on a computer-accessible medium separate from computer system  may be transmitted to computer system  via transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as a network and\/or a wireless link. Various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a computer-accessible medium. Accordingly, the embodiments described herein may be practiced with other computer system configurations.","Various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a computer-accessible medium. Generally speaking, a computer-accessible medium may include a storage medium or memory medium such as magnetic or optical media, e.g., disk or DVD\/CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR, RDRAM, SRAM, etc.), ROM, etc. In some embodiments, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link.","The methods described herein may be implemented in software, hardware, or a combination thereof, in different embodiments. In addition, the order of methods may be changed, and various elements may be added, reordered, combined, omitted, modified, etc. All examples described herein are presented in a non-limiting manner. Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. Realizations in accordance with embodiments have been described in the context of particular embodiments. These embodiments are meant to be illustrative and not limiting. Many variations, modifications, additions, and improvements are possible. Accordingly, plural instances may be provided for components described herein as a single instance. Boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of claims that follow. Finally, structures and functionality presented as discrete components in the example configurations may be implemented as a combined structure or component. These and other variations, modifications, additions, and improvements may fall within the scope of embodiments as defined in the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 4A-B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
