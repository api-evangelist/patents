---
title: Printing system software architecture
abstract: Techniques, systems, and computer program products that facilitate image printing. A technique may include receiving an image to be printed, using a first software component to selectively pre-process the image depending on a format of the image, and using a second software component to generate image queues from the pre-processed image. In that technique, each image queue includes at least one portion of image data associated with an association of print elements that corresponds to a configuration of print elements at a printing device. The technique may be implemented in a scalable system, by having multiple first software components and multiple second software components, where each of the first and/or second components can reside on a separate computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07911625&OS=07911625&RS=07911625
owner: FUJIFILM Dimatrix, Inc.
number: 07911625
owner_city: Lebanon
owner_country: US
publication_date: 20041015
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates to systems, computer program products, and techniques for printing an image.","When an image such as a picture or a page of text is printed, image data is generally translated, by software, into a format understandable by a printing device (i.e., a printer) and relayed to a print buffer associated with the printing device. The print buffer receives the translated image data and stores at least a portion of the image data for subsequent printing by the printing device.","Many printing devices include multiple discrete print elements (e.g., nozzles for inkjet printers). The print elements can be deployed to print selected components of the image. For example, selected print elements can be deployed to print at selected locations on a workpiece. As another example, in color printing, selected print elements can be deployed to print selected colors. Image data from the print buffer can be used by control electronics to coordinate the printing of images by deployed print elements.","The print elements in a printing device can be arranged in groups called print modules (e.g., a physical group of inkjet nozzles). The print elements in a module can be grouped according to the deployment of the constituent elements. For example, print elements that print at a selected array of positions can be grouped in a print module. As another example, print elements that print a selected color (at a selected array of positions) can be grouped in a print module.","Described herein are methods and apparatus, including computer program products, that facilitate image printing.","In one general aspect, the techniques feature a computer-implemented method of facilitating image printing. That method includes transferring an image to be printed to a first software component, using the first software component to selectively pre-process the image depending on a format of the image, and using a second software component to generate image queues from the pre-processed image. In that method, each image queue includes at least one portion of image data associated with an association of print elements that correspond to a configuration of print elements at a printing device.","Implementations may include one or more of the following features. A portion of image data may be an image data buffer storing a sufficient amount of image data to cause a print element association to leave a single impression on a workpiece. A portion of image data may be an image data buffer storing image data sufficient to cause a print element association to leave impressions on one or more workpieces. The print elements may include inkjet nozzles. Transferring the image may include receiving the image from a storage device.","The first and second software components may be accessible via an application programming interface. The first and second software components may be software services. The method may further include sending an indication of an image to print and an indication of the second software component from an application that includes a user interface to the first software component. The user interface may be a third component that is a separate application from the first and second software components and resides on a machine separate from the machine where the first and second software components reside. Using a second software component to generate image queues may include generating image queues such that each image queue is located in a predefined memory location for access by a data pump. The memory location may be partitioned memory that is inaccessible by memory management of an operating system. Using a second software component to generate image queues ay include generating image queues according to generic routines and a table generated based on printing parameters. In that case, the method may further include generating the table based on printing parameters.","The first software component may include an image control component. The second software component may include an image queue generating component. Using a second software component to generate image queues may include parallel processing image data to generate image queues from the transferred image. The method may further include transferring an Xth image to be printed to an Nth software component, using the Nth software component to selectively pre-process the Xth image depending on a format of the image, and using an Mth software component to generate Xth image queues corresponding to the Xth transferred image where each image queue includes at least one portion of image data associated with an association of print elements that correspond to the configuration of print elements at the printing device.","In another aspect, a system for controlling image printing includes a data repository configured to store images, a memory area configured to store one or more image queues corresponding to an image being printed, and a computer system operable to perform tasks. The computer system is operable to perform tasks that include transferring from the data repository an image to be printed to a first software component, using the first software component to determine a format of an image and to selectively pre-process the image depending on the determined format, and using a second software component to generate in the memory area image queues corresponding to the image. Each image queue includes at least one portion of image data associated with an association of print elements that correspond to a configuration of print elements at a printing device.","Implementations may include one or more of the following features. The print elements may include inkjet nozzles. The first and second software components may be accessible via an application programming interface. The first and second software components may be software services and the computer system may be further operable to send an indication of an image to print and an indication of the second software component from an application that includes a user interface to the first software component. The user interface may be a third component that is a separate application from the first and second software components and resides on a machine separate from the machine where the first and second software components reside. The memory area may be partitioned memory that is inaccessible by memory management of an operating system.","The first software component may include an image control component. The second software component may include an image queue generating component. Using a second software component to generate image queues may include parallel processing image data to generate the image queues from the transferred image. The computer system may be further operable to transfer an Xth image to be printed to an Nth software component, use the Nth software component to selectively pre-process the Xth image depending on a format of the image, and use an Mth software component to generate Xth image queues corresponding to the Xth transferred image, where each image queue includes at least one portion of image data associated with an association of print elements that correspond to the configuration of print elements at the printing device.","In another aspect, a software-implemented system includes one or more first software components configured to receive an image to be printed, determine a format of the received image, and selectively pre-process the received image depending on the determined format; and one or more second software components configured to generate image queues corresponding to a pre-processed image such that each image queue includes at least one portion of image data associated with an association of print elements that correspond to a configuration of print elements at a printing device.","Implementations may include one or more of the following features. The first software components configured to receive an image may further include the first software components being configured to receive an indication of another software component to transfer a pre-processed image; and the first software component may be further configured to transfer the pre-processed image to the second software components. The software implemented system may further include a user interface component configured to interact with a user and send an indication of an image to be printed to the first software components. The first and second software components may be services and the user interface component is an application. Each of the first software components may reside on a separate computer system, and each of the second software components may reside on a separate computer system.","The described systems, computer program products, and techniques of facilitating printing of an image can be implemented to realize one or more of the following advantages.","Images may be divided into image queues that correspond to print element associations (i.e., a configuration of associated printing elements that collectively form a print head). By splitting an image into multiple image queues, such that there is one image queue for each print element association, each print element association can print a portion of an image. Because images are divided into portions for each print element association, multiple images can be printed at the same time by placing portions of image data from different images in different image queues. For example, two images can be printed close to each other on two different surfaces at a printing device that has eight print element associations if the first four print element associations receive image data from four image queues containing image data from a first image, and if a second set of four print element associations receive image data from another set of four image queues that contain image data from a second image.","The control architecture that processes images and generates the image queues may be two-tiered, including a high-level driver (referred to as an image control component) and a low-level driver (referred to as an image queue generating component). In that architecture, a high level driver may perform all pre-processing of data (e.g., converting file formats) and a low-level driver may generate image queues. By having a two-tiered approach that splits these tasks, the architecture may be scaled to include any number of high-level or low-level drivers.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.","Like reference symbols in the various drawings indicate like elements.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","100","105","110","105","115","120","125","130","135","140","145","110","105","115","120","125","130","135","140","145","150","110","105","115","120","125","130","135","140","145","115","120","125","130","135","140","145","100","115","120","125","130","135","140","145"]},"Printer housing  houses a workpiece detector . Workpiece detector  can detect the position of one or more workpieces , , , , , , . For example, workpiece detector  can be a laser\/photodetector assembly that detects the passage of edges of workpieces , , , , , ,  across a certain point on face .","Located remotely from the printer housing  are control electronics . The control electronics  interface with the printer housing  by a cable  (e.g., an optical cable) and minimal electronics . Control electronics  control the performance of print operations by system . Control electronics  can include one or more data processing devices that perform operations in accordance with the logic of a set of machine-readable instructions. Control electronics  may be, for example, a personal computing system that runs image processing software and software for controlling printing at the printer housing .","Located within the control electronics  is a print image buffer . Print image buffer  is one or more data storage devices that store image data for printing by print elements. For example, print image buffer  can be a collection of random access memory (RAM) devices. Print image buffer  can be accessed by control electronics  to store and retrieve image data.","The control electronics  interface with the printer housing  via the cable  and minimal electronics . The control electronics  can send data across the cable , and the minimal electronics  can receive that data for printing at the printer housing . The control electronics  may have special circuitry (e.g., a data pump, as described in more detail in reference to , that can receive and\/or retrieve image data from print image buffers, store the image data, and enable print elements at a printing device to receive image data in time to deposit ink on the corresponding image locations on workpieces as they are moving along a conveyor) for generating data to send to the printer housing . The minimal electronics  may be, for example, a field-programmable gate array that includes a microprocessor, transceiver, and minimal memory. The minimal electronics  may be connected to the printer housing  such that the minimal electronics  can be disconnected easily should the printer housing  and\/or hardware in the printer housing  be changed. For example, if the printer housing  is replaced with a newer printer housing containing newer printing modules, the minimal electronics  can be disconnected from the older printer housing  and connected to the newer printer housing.","The printing of an image is divided between the control electronics  and the minimal electronics  such that the control electronics performs image processing and controls printing, whereas the minimal electronics  receives data received via the cable  and uses that data to cause firing of print elements at the printer housing . Thus, for example, image data may be converted to jetmap image data, which may include dividing the image data into multiple image queues of image buffers as part of the process of converting to jetmap image data (as described in more detail later); delays may be inserted into image data (e.g., inserting delays corresponding to a deployment of print element associations); and image data may be sent (e.g., encoding data packets of image data and sending by a receiver) at an appropriate time by the control electronics ; whereas, the minimal electronics  may merely receive the image data (e.g., decode image data packets sent across the cable ) and relay the image data such that the image data is printed on a workpiece (e.g., cause firing of inkjet nozzles according to the image data). The control electronics  may synchronize printing of an image at the printer housing . Following the previous example, the control electronics  may synchronize the printing of an image by receiving an indication of a leading edge of a workpiece and sending image data across the cable  to cause the printing of an image at the printer housing .","The control electronics  can send image data to the printer housing  at high data rates to enable \u201cjust-in-time\u201d printing of images on the workpieces as the workpieces move along the workpiece conveyor . In one implementation of just-in-time printing, transmission of image data to the printer housing  can serve as a trigger that causes the image data in a packet to be printed \u201csubstantially immediately\u201d as the data arrives at the printer housing . In this implementation, the image data may not be stored on a storage component on the printer housing prior to printing the image data, but can be printed as the data arrives at the printer housing. Just-in-time printing may also refer to printing image data substantially at an instant at which the image data arrives at the printer housing.","In another implementation of just-in-time printing, data received at the printer housing is stored in one or more latches, and new or subsequent data that is being received at the printer housing can serve as a trigger to print the latched data. In this implementation, the data received at the printer housing is stored in a latch until the subsequent data arrives at the printer housing, and the subsequent data arriving at the printer housing can serve as a trigger to print the data that has been latched. The data, subsequent data, and latched data may be received and\/or stored at the printer housing in the form of an image data packet. In one case, the subsequent data arriving at the printer housing is the next subsequent data. Alternatively, the subsequent data arriving at the printer housing is subsequent data other than the next subsequent data, such as subsequent data arriving after the next subsequent data. Because the image data is being printed at such a high-data rate, the data printed from latched data can also refer to data being printed \u201csubstantially immediately\u201d as the data is arriving at the printer housing.","Because the printer housing  has minimal electronics  and a reduced amount of memory, the printer housing  may be implemented, at a lower cost. The type of memory used on the printer housing  may also be implemented at a lower cost. In one implementation, the type of memory implemented on the printer housing  is part of a field-programmable gate array (FPGA) integrated circuit (IC) that may be part of the minimal electronics . The costs and engineering design efforts to implement the printer housing  may also be reduced due to little or no buffering of high speed image data at the printer housing . The system  may offer scalable transmission of high bandwidth, synchronous, just-in-time image data to the printer housing  in a number of configurations, including, for example, a configuration with multiple FGPAs at the printer housing , each of which may implement the minimal electronics  and interface with one or more data pumps using one or more cables.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIGS. 2 and 3","FIG. 2","FIG. 3"],"b":["110","110","110"]},"Housing  includes a collection of print modules , , , , , , , ,  on face . Print modules , , , , , , , ,  each include one or more print elements. For example, print modules , , , , , , , ,  can each include a linear array of inkjet nozzles.","Print modules ,  are arranged laterally along a column . Print module  is arranged along a column . Print modules ,  are arranged laterally along a column . Print module  is arranged along a column . Print modules ,  are arranged laterally along a column . Print module  is arranged along a column . This arrangement of print modules , , , , , , , ,  along columns , , , ,  spans an effective print area  on face . Effective print area  has a longitudinal width W that spans from the print elements in print modules ,  to the print elements in print module .","Print modules , , , , , , , ,  can be deployed in print element associations to print selected components of an image. For example, print modules , ,  can be deployed in a first print element association to print a first color across the entire lateral expanse of a substrate moving across face , print modules , ,  can be deployed in a second print element association to print a second color across the entire lateral expanse, and print modules , ,  can be deployed in a third print element association to print a third color across the entire lateral expanse.","As another example, the group of print modules , , , , , , , ,  can be deployed in print element associations based on the columnar position of the constituent print elements in the modules. For example, a first print element association can include modules ,  deployed so that their constituent print elements are arranged in a single column. A second print element association can include only print module . Modules ,  can form a third association. Associations four, five, and six include modules ,  and , and , respectively. Forming associations of print elements in this columnar manner allows the printing of back-to-back dissimilar images with variable but small or nonexistent non-printed area between finished image areas, relative to longitudinal width W, without need for complex real-time adjustments in image data.","As another example, the group of print modules , , , , , , , ,  can be deployed in print element associations based on the lateral position of the constituent print elements in the modules. For example, a first print element association can include modules , ,  deployed so that their constituent print elements are shifted in lateral position relative to the print elements in modules , ,  and to the print elements in modules , , . A second print element association can include print modules , ,  deployed so that their constituent print elements are shifted in lateral position relative to the print elements in modules , ,  and to the print elements in modules , , . Modules , ,  can form a third association. The relative shifts in position can be smaller than the lateral spacing of the print elements in the modules to, in net effect, decrease the lateral spacing between print elements on housing  and thereby effectively increase the resolution at which an image can be printed.","As another example, groups of print modules can be deployed in print element associations based on the lateral expanses covered by the print modules. For example, a first print element association can include modules , , , , ,  deployed to cover the laterally outer expanses of a workpiece. A second print element association can include print modules , ,  deployed to cover the laterally central expanses of a workpiece.","As another example, groups of print elements can be deployed in print element associations based on a combination of these and other factors. For example, groups of print elements can be deployed in a print element association based on their printing the color cyan on an outer extent of a workpiece. As another example, groups of print modules can be deployed in a print element association based on their constituent print elements printing at certain lateral positions on the laterally outer expanses of a workpiece.","Each print element association can have a dedicated memory location in print image buffer  (shown in ) in that the association prints image data that once resided in the memory location. For example, when print image buffer  is a collection of queues of individual buffers, each print element association can have an individual, dedicated queue of buffers.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 4","b":["110","205","215","225","205","405","215","410","225","415"]},"Print elements  are shifted relative to the lateral position of print elements  by a shift distance S. Print elements  are shifted relative to the lateral position of print elements  by shift distance S. Print elements  are shifted relative to the lateral position of print elements  by shift distance S. Shift distance S is smaller than distance L, and the net effect of the relative lateral shifts between print elements , print elements , and print elements  is to decrease the overall lateral spacing between print elements on face  of housing .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 5","b":["500","100","120","125","130","135","140","235","150","110","500","500","120","125","130","135","140"]},"Workpieces , , , ,  each have a longitudinal width W. Workpiece width W is smaller than width W of effective print area . A leading edge of workpiece  is separated from a trailing edge of workpiece  by separation distance SEP. A leading edge of workpiece  is separated from a trailing edge of workpiece  by separation distance SEP. A leading edge of workpiece  is separated from a trailing edge of workpiece  by separation distance SEP. A leading edge of workpiece  is separated from a trailing edge of workpiece  by separation distance SEP. The separation distance SEP may be smaller than width W of effective print area . The separation distance SEP may be zero. As such, both workpiece  and workpiece  may be positioned in effective print area  simultaneously and be printed on at the same time.","System  has partially printed image  on both workpiece  and workpiece . Such serial printing of image  on two or more different workpieces using a single effective print area speeds the throughput of workpieces in system .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 6","b":["650","655","660","650","655","660","100","650","655","660","160","105","155","160","100","650","160","655","660","650","655","660"]},"The system performing the process  receives image data at . The image data can be a stand-alone collection of data regarding an individual image. For example, the image data can be a graphic image format (gif) file, a joint photographic experts group (jpeg) file, PostScript, Printer Command Language (PCL), or other image data collection.","The system can then translate and divide the received image data according to a deployment of associated print elements at . The image data can be translated before it is divided, divided before it is translated, or translated and divided as part of the same process. The translation of image data can include, for example, a conversion of image data into a format understandable by a printing device, such as bitmap raster data, and a further conversion of the bitmap raster data into jetmap data. Converting bitmap raster image data into jetmap data involves taking an input bitmap, which is arranged in an order corresponding to a geographic order used by the bitmap image format, and rearranging the bitmap raster image data to correspond to physical locations of the print elements. It may also involve dividing the image data as part of the process of converting the bitmap raster image data to jetmap data (i.e., the jetmap data is divided into image buffers corresponding print element associations). As an example, the process at  may include converting jpeg formatted image data to bitmap formatted image data, and then converting the bitmap formatted image data into jetmap image data as image buffers corresponding to print element associations. In an alternative implementation, image data may be converted directly to jetmap data without first converting to an intermediary format.","The division of image data according to the deployment of associated print elements can include the identification of portions of the image data that are to be printed by an association of print elements based on the deployment of the association.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 7","b":["700","700","705","710","715","705","710","715"]},"When the image data representing image  is divided (indicated by arrows ), three individual collections of data representing images , ,  are formed. Image  includes cyan line  and is thus printable by an association of print elements deployed to print cyan. Image  includes yellow line  and is thus printable by an association of print elements deployed to print yellow. Image  includes magenta line  and is thus printable by an association of print elements deployed to print magenta. Thus, the image data representing images , ,  are the result of a division of data representing image  according to the deployment of associations of print elements to print different colors.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 8","FIG. 4"],"b":["800","405","410","415","110"]},"Image portion  includes collections of pixel rows , , . Pixel rows , ,  each include a longitudinal row of pixels. Pixel rows  are laterally shifted relative to the position of pixel rows  by a shift distance S. Pixel rows  are laterally shifted relative to the position of pixel rows  by shift distance S. Pixel rows  are laterally shifted relative to the position of pixel rows  by shift distance S. Shift distance S (and hence the lateral resolution of the printed imaged) is determined by the overall lateral spacing between print elements.","When a workpiece is moved longitudinally across an array of print elements, each pixel row , ,  can be printed by an individual print element. For example, when image portion  is printed using the implementation of housing  shown in , a single print element  can print a single pixel row , a single print element  can print a single pixel row , and a single print element  can print a single pixel row .","When the image data representing image portion  is divided (indicated by arrows ), three individual collections of data representing image portions , ,  are formed. Image portion  includes pixel rows  and is thus printable by a first array of print elements separated by a lateral distance L. Image portion  includes pixel rows  and is thus printable by a second array of print elements separated by a lateral distance L. Image portion  includes pixel rows  and is thus printable by a third array of print elements separated by a lateral distance L. The print elements in these arrays are shifted in lateral position relative to one another. Thus, the image data representing image portions , ,  are the result of a division of data representing image portion  according to the deployment of associations of print elements to print at different lateral positions.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 9","b":["900","900","905","900"]},"When the image data representing image  is divided (indicated by arrows ), two individual collections of data representing images ,  are formed. Image  includes two outer line portions  and is thus printable by an association of print elements deployed toward the outside of a workpiece. For example, outer line portions  may be printable by an association that includes print modules , , by an association that includes print modules , , or by an association that includes print modules ,  ().","Image  includes a central line portion  and is thus printable by an association of print elements deployed toward the center of a workpiece. For example, central line portion  may be printable by an association that includes print module , by an association that includes print module , or by an association that includes print module  (). Thus, the image data representing images ,  are the result of a division of data representing image  according to the deployment of associations of print elements to print different lateral expanses.","Returning to , the system performing process  allocates the image data portions that result from a division to respective image queues at . In other words, the allocation results in each buffer of image data being allocated to a respective queue. In general, each buffer of image data corresponds to an association of print elements at a printing device. Similarly, a set of buffers corresponds to a set of image data to be printed by the print element associations. The buffers of image data, which were generated at , are queued in queues, with each queue corresponding to a print element association. For example, if there are eight image queues, each image queue corresponding to a print element association, then a set of buffers of image data that correspond to the first print element association may be allocated to the first image queue, a set of buffers of image data that correspond to the second print element association may be allocated to the second image queue, and so on. The memory locations where the image queues and the buffers are located can be dedicated to the storage of image data for printing by a specific print element association. For example, the memory locations may be blocked off from memory management by an operating system and the memory locations may be accessible by a data pump using direct memory access. The queues for the buffers of image data may be first in first out queues (i.e., FIFO queues).","At , the system performing process  determines whether the system should update the locations indicating where the print image buffers (i.e., buffers of image data) are located. For example, the system might update locations at one or more data pumps. In that example, the data pumps can store a location indicating where print buffers are located at each of the image queues so the data pumps are able to access each of the memory devices where the buffers are located and retrieve image data. If, at , the system determines that the locations should be updated, the locations are updated with references to the buffers at . Otherwise, image data is received at  and the process continues. Also, the process continues at  if updated locations are not needed at . In some implementations, the process of  may stop, for example, if there are no more images to receive (e.g., no more images to print), or if the image queues are full.","A determination is made as to whether printing should start or continue at . If not, the process continues at . If so, at , image data may be retrieved from buffers in the image queues. For example, a data pump may retrieve buffers of image data. In that example, the data pump is able to identify the proper buffers because the locations of the buffers may be updated at the data pump at . A sufficient amount of image data for one impression of an association of print elements may be retrieved. Thus, image data may be retrieved from each of the image queues. In alternative implementations, portions of image data representing a portion of a single impression may be retrieved. Similarly, portions of image data representing several impressions may be retrieved. In those implementations, a queue, such as a FIFO queue, may store image data (e.g., sets of buffers of image data).","At , positional delays are added to selected portions of image data. The delays are upfront delays that align image data with the associations of print elements to which respective portions of image data correspond. Thus, the extent of the upfront delay can be determined based on the deployment of the print element association to which image data corresponds. For example, a minimal positional delay or no delay at all may be inserted into image data that corresponds to a print element association near the entry of workpieces across an effective print area, whereas a larger positional delay may be inserted into image data that corresponds to a print element association near the exit of workpieces across an effective print area. Because the positional delays correspond to the position of print element associations (or rather, the separation distance between print element associations), the positional delays may differ depending on a type of print head assembly that contains the print element associations. In any case, the positional delays may be a fixed delay(s) for a particular print head assembly and the delays may be measured in an amount corresponding to an amount of print lines.","Inserting an upfront delay into image data can be performed in a number of different ways. For example, an appropriate amount of null \u201cplaceholder\u201d data can be inserted before and after the image data portions that result from a division of image data. As another example, the upfront delay can be introduced into a data communication path between a memory location and print elements. For example, a data pump may be aligned such that the data pump can insert different upfront delays for different portions of image data at different memory locations. Inage data with delays may be sent to a printing device at . In alternative implementations, image data with delays may be added to a queue (e.g., a first in first out queue) prior to sending the data to a printing device. The process at  may continue at the process of  after image data is sent at . In some implementations, the process at  may stop after image data is sent at  for various reasons. For example, if all image data packets have been sent by a data pump, the data pump may determine at  that the system should no longer be printing (i.e., determine not to start or continue printing). In some implementations, empty data image packets may be sent, effectively causing no ink to be deposited on a workpiece.","The system can identify the entry of a leading edge of a workpiece to an effective print area of a print system at . The entry of the leading edge can be identified using a workpiece detector (such as workpiece detector  ()). The further progress of the workpiece across the effective print area can be followed by sensing the speed of the workpiece, e.g., by measuring the speed of a workpiece conveyor (such as workpiece conveyor  ()) using a rolling encoder.","When the workpiece is appropriately positioned, the print system performing process  can commence printing of the workpiece at . The printing of the workpiece can include relaying image data that has been divided according to the deployment of the print element association. The image data can be relayed from a memory location to the appropriate print element association. The relaying can be driven by a central data processing device, such as a central data processing device in control electronics . The relaying can be done on a firing-by-firing basis. In the processes shown in the flowcharts of , a signal may be sent to the system performing the process of  (e.g., a data pump) to start printing, causing a relaying of image data to a printing device.","As the workpiece moves across the effective print area, different print elements can be triggered by the same trigger signal to fire at the same instant. Alternatively, different print elements can be staggered to fire at different instants. Regardless of when the actual firing of individual elements occurs, the elements in the effective print area are printing on the initial workpiece at the same time.","In a print system where the effective print area has a longitudinal width that is greater than the separation distance to the next workpiece, one or more workpieces may be positioned beneath the effective print area at the same time. As such, more than one workpiece may be available for serial printing. One example of this situation is illustrated in , where the separation distance SEP between workpieces is smaller than width W of effective print area , and, both workpiece  and workpiece  are positioned beneath effective print area  and available to be printed in series.","In such a print system, the system performing process  can also identify the entry of the leading edge of a next workpiece at . The entry of the leading edge can be identified using a workpiece detector (such as workpiece detector  ()). The progress of both an initial workpiece and the next workpiece across the effective print area can be followed by sensing the speed of the workpieces, e.g., by measuring the speed of a workpiece conveyor (such as workpiece conveyor  ()).","Printing on both workpieces can continue as the initial workpiece and the next workpiece continue to progress across the effective print area. When the effective print area has a longitudinal width that is greater than the sum of the width of a next workpiece and twice the separation distance between workpieces, an initial workpiece, the next workpiece, and yet another workpiece may be positioned beneath the effective print area at the same time. As such, three workpieces may be available for printing in series. In this case, the system performing process  can identify the leading edge of another \u201cnext workpiece\u201d at  before stopping printing on an initial workpiece. Otherwise, the system can stop printing on the initial workpiece before identifying the leading edge of another \u201cnext workpiece\u201d at .","In some implementations, image data may be divided based on associations of print modules. In some implementations, print element associations may be split across a single print module. For example, if each print module in a print system includes two rows of print elements, image data may be divided by the rows of print elements. Thus, a space between workpieces may be reduced to zero.","In some implementations, the system(s) performing processes shown in  can calculate the positional delay required between print element associations (rather than having a fixed delay). The memory locations can be dedicated to specific print element associations. For example, individual buffers can store image data for printing by individual print element associations. The system performing processes shown in  can control a data pump or other hardware device to extract data from memory locations at the appropriate point in time to properly place image data on a workpiece on which the image data is to be printed.","Although the processes of  are shown as being composed of a certain number and type of processes, additional and\/or different processes can be used instead. For example, in the process of , rather than continually determining whether to continue or start printing at , the system performing the process of  may start printing when started and stop printing when the system decides to stop printing, only to start printing when called on again. Similarly, the processes need not be performed in the order depicted, or by the components that were discussed to have performed certain processes.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 10","b":["1000","1000","1005","1010","1055","1060"]},"Workpiece conveyor  conveys workpieces , , ,  in a direction D across an effective print area  of printer housing . Workpiece conveyor  includes an encoder  that senses the speed of workpieces , , , . Encoder  also generates a signal that encodes the sensed speed and relays the signal to control electronics . Workpiece detector  is an optical sensor that detects the position of one or more workpieces , , , , and generates trigger signals (such as trigger signals  and ) based upon that detection.","Printer housing  includes a collection of print modules arranged laterally along a series of columns , , , , , , , . This arrangement of print modules spans an effective print area . Each group of print modules deployed along each of columns , , , , , , ,  constitutes a print element association. As examples, print modules , ,  constitute a print element association along column , and print modules ,  constitute a print element association along column .","Control electronics  controls the performance of print operations by system . Control electronics  includes a collection of print image buffers . Control electronics  can access the print image buffers in collection  to store and retrieve image data. In the configuration shown in , there are eight print image buffers in collection , and each print image buffer is dedicated to a print element association arranged along one of columns , , , , , , , . For example, print image buffers , , ,  may correspond to the print element associations arranged along columns , , , , respectively. In particular, each print element association prints image data only from the associated print image buffer.","Control electronics  also includes a data pump . A \u201cdata pump\u201d refers to a functional component, e.g., implemented in hardware, software, programmable logic or a combination thereof, that processes data and transmits it to one or more printing devices for printing. In one implementation, the data pump can refer to a direct memory access (DMA) device. The data pump  is positioned along the data communication path between the print element associations and their dedicated print image buffers in collection . The data pump  can receive and store image data from each print image buffer in collection . The data pump  is programmable by control electronics  to delay the communication of information from the print image buffers in collection  to the print element associations.","In operation, control electronics  can divide image data according to the deployment of print element associations in effective print area . Control electronics  can also allocate the divided image data to an appropriate print image buffer in collection .","As workpiece  is conveyed by workpiece conveyor  to enter effective print area , workpiece detector  detects the leading edge of workpiece  and generates trigger signal . Based on receipt of trigger signal , control electronics  can program data pumps  with positional delays , , , , , , , . Delay  delays the communication of image data from a first print image buffer in collection  to the print element association arranged along column . Delay  delays the communication of image data from a second print image buffer in collection  to the print element association arranged along column . Delays , , , , ,  delay the communication of image data from respective print image buffers in collection  to the print element associations arranged along columns , , , , , .","As workpiece  is conveyed by workpiece conveyor  across effective print area , the print element associations arranged along columns , , , , , , ,  successively print. In particular, as workpiece  is advanced one scan line across effective print area , the data pump  dumps image data to the appropriate receiver electronics at the print element associations arranged along columns , , , , , , ,  (i.e., the data pump  causes the image data to be transmitted to the printing device). The dumped image data identifies print elements that are to fire for the instantaneous position of workpiece  in effective print area  (the identification of print elements may be implicit; e.g., an ordering of image data in a data packet in a format corresponding to an order of print elements and\/or print element associations at a printing device). Data for successive firings can be loaded from print image buffers in collection  to the data pump  during firings.","While workpiece  is still being printed, workpiece  can be conveyed by workpiece conveyor  to enter effective print area . Workpiece detector  detects the leading edge of workpiece  and generates trigger signal . Based on receipt of trigger signal , control electronics  may cause the data pump  to insert delays , , , , , , , . Delay  delays the communication of image data from a first print image buffer in collection  to the print element association arranged along column . Delay  delays the communication of image data from a second print image buffer in collection  to the print element association arranged along column . Delays , , , , ,  delay the communication of image data from respective print image buffers in collection  to the print element associations arranged along columns , , , , , . Alternatively, delays may already be inserted into image data and the trigger signal may cause the sending of image data by the data pump .","As workpiece  is conveyed by workpiece conveyor  into effective print area , the print element associations arranged along columns , , , , , , ,  print upon workpieces , . In particular, as workpieces ,  are advanced one scan line, the data pump  dumps image data to the appropriate receiver electronics for the print element and workpieces ,  are printed at the same time.","Image data for each workpiece may differ. For example, if two workpieces were to have two different images printed upon them, different image data representing different images would be used to print on each workpiece. In that example, two sets of image data may be gathered at a data pump. A first set of image data may correspond to a first image (e.g., a print line of an image of a frog) and a second set of image data may correspond to a second image (e.g., three print lines of an image of an apple). Gathering the image data may include taking image data from image queues and\/or generating a data packet that includes the first and second sets of image data. The gathered image data may be provided to the print element associations by sending a data packet to the printing device that includes the print element associations (e.g., a data packet including the print line of the image of the frog and the three print lines of the image of the apple). When the two workpieces are printed at substantially the same time, a first portion of the print buffers (e.g., print buffer ) may store the first set of image data corresponding to the first image (e.g., the print line of the image of the frog) and a second portion of the print buffers (e.g., print buffers , , ) may store the second set of image data corresponding to the second image (e.g., the three print lines of the image of the apple). A first set of print elements corresponding to the first set of print buffers (e.g., the print elements in the association of print elements along column ) can print the first image (e.g., the print line of the image of the frog) and a second set of print elements corresponding to the second set of buffers (e.g., the print elements in the associations of print elements along columns , , ) can print the second image (e.g., the three print lines of the image of the apple). As such, different print elements print two images at substantially a same time (e.g., print elements along the columns , , ,  may fire at substantially a same time).","Or, the image data for each workspace may represent the same image. For example, the same image may be continually printed on multiple workpieces. In that example, if two workpieces are printed at substantially a same time, different portions of the same image may reside in different sets of print buffers such that different print elements print different portions of the same image.","Although not shown, in addition to using different sets of print elements to print different portions of image data on different workpieces, a same workpiece may be printed on with different sets of image data.","Control Architecture for Printing an Image","A control architecture for printing an image may be implemented in software, hardware, or a combination of the two. The control architecture can receive image data and cause an image to be printed.  is a diagram of a printing system that includes a control architecture implemented in software. The printing system includes a software architecture ; one or more databases  to store files for printing; and a memory area  to store image queues.","The software architecture  includes one or more image control components , one or more image queue generating components , and a user interface . The image control components  can receive images from the databases  (e.g., by having the image retrieved and returned to the image control components ) and convert the images into a format that is interpretable by the image queue generating components . For example, images in the databases might be in the Portable Document Format (hereinafter \u201cPDF\u201d; PDF specification available from Adobe Systems Inc., San Jose, Calif.), Joint Photographic Experts Group (hereinafter \u201cJPEG\u201d; JPEG specification available from the International Organization for Standardization, Geneva, Switzerland), Graphics Interchange Format (hereinafter \u201cGIF\u201d; GIF specification available from CompuServe, Inc., Columbus, Ohio) Device Independent Bitmap (hereinafter \u201cbitmap\u201d; BMP specification available from Microsoft, Corp., Redmond, Wash.) formats, and the image queue generating components  may only be able to read image data in a bitmap image format. In that example, the image control components  may translate images received from the databases  to the bitmap image data format, if an image is not already in that format.","An image received by one of the image control components  can be transferred to the user interface  and\/or one of the image queue generating components . The transfer of images from the image control components  to the image queue generating components  can be managed by the user interface  via an application programming interface (hereinafter \u201cAPI\u201d). For example, a user may request to view an image via the user interface  and the user interface  may use an API call to cause the image control component  to retrieve the requested image, convert the image to another format, and present that image to a user via the user interface . Then, the user may choose to print that image via an interaction with the user interface . Then, the user interface  may make one or more API calls and cause a connection to be made between the image control component  and the image queue generating component . That connection may be, for example, a socket connection (i.e., a connection between processes). In that connection, the converted image can be transferred from the image control component  to the image queue generating component . Managing a connection may include, for example, sending an identification of an image and an identification of the queue generating component  to the image control component .","The image queue generating components  generate image queues  from one or more images. Generating the image queues may include dividing an image into portions (e.g., a portion corresponding to an amount of image data necessary for a single impression by a print element association), which may be part of a process of generating jetmap image data; generating buffers of image data that include one or more portions, which may also be part of the process of generating jetmap image data; associating each buffer of image data with one of the image queues , and filling the image queues  with associated buffers of image data. One technique for dividing images may involve dividing an image into portions corresponding to print element associations at a printing device and filling each image queue with a portion of the image. For example, if each print element association at a printing device prints a portion of image data, also referred to as a \u201cdivision\u201d (e.g., a portion of a scan line of an image), and the print element associations are located next to each other (e.g., if they are consecutively located across a lateral effective print area, such as in ), an image may be divided such that a repeating sequence of image data associated with print element associations corresponds to the image queues. Following that example, if there are four image queues, each of which corresponds to a print element association at a printing device, the image can be divided into four portions, where each portion is defined by a repeating sequence of portions of image data. Thus, the first portion of image data would correspond to the first image queue, the second portion of image data would correspond to the second image queue, the third portion of image data would correspond to the third image queue, the fourth portion of image data would correspond to the fourth image queue, the fifth portion of image data would correspond to the first image queue, the sixth portion of image data would correspond to the second image queue, and so on.","Dividing images and generating image queues may involve generating a buffer of image data for each print module in a print element association, combining buffers associated with a same print element association, and generating image queues that include combined buffers associated with an image queue. For example, in , twenty print modules are at the printing device. An image may be divided such that each buffer has image data corresponding to a print module. Then, buffers corresponding to print modules in a same print element association, such as the print modules , ,  in a print element association including the print modules in column , may be combined such that a combined buffer is associated with a print element association (e.g., a buffer associated with all of the print elements along column ). Then, combined buffers associated with a same print element association may be put in an image queue, such that image queues are generated and each image queue has combined buffers corresponding to a same print element association.","Dividing an image and filling the image queues  may take into account various printing parameters and may be table driven. The printing parameters may include physical attributes of a printing device, such as a definition of the ordering of print elements and\/or modules at a printing device, spacing of print elements and\/or modules, and a native resolution of the printing device; and dynamic parameters for printing, such as print resolution, gray scale (i.e., number of bits used for each pixel), print direction (e.g., for scanning a print head laterally), and head orientation (e.g., if a print head assembly is rotated 180 degrees). As a table-driven process, the printing parameters may be used to generate a table that can be used to configure generation of image buffers and\/or image queues. The table can include bit patterns and shift patterns that can be used when extracting data in accordance with a layout of print elements at a printing device. Generic processing routines for general classes of print element layouts can be used, in conjunction with a generated table, to properly extract data from an image to produce image data that can be used to generate image queues. For example, a table may be generated based on parameters corresponding to a printing device. Generic processing routines corresponding to a layout of print elements at the printing device can then be used in conjunction with the table to generate a set of buffers of image data, where each buffer corresponds to a print element association at the printing device. Then, the image queues may be filled with buffers of image data that correspond to the print element associations, such that buffers of image data that correspond to a same print element association are queued in the same image queue (e.g., all buffers corresponding to a first print element association may be in a first image queue, all buffers corresponding to a second print element association may be in a second image queue, and so on). The image queues  may be filled efficiently via parallel processing, which may manipulate bytes of an image in parallel. By using a table driven approach, highly optimized queue generation routines (e.g., routines including the generic routines described above) can be used across different types of printing devices, including families of products, with little or no modification to the optimized routines.","The number of image queues  may be the same as the number of printing elements at a printing device, and each of the image queues  may be associated with a print element association. The image queues , which include buffers of image data, may include the print image buffers  of . Thus, the print image buffers  may be generated by software for retrieval by hardware, transmission to a printing device, and printing at a printing device.","The user interface  provides an interface for user interaction with the software architecture . From the user interface , a user can select one or more images to print, from any of a number of images that may be stored in the databases , and request that the image is printed. In addition, a user can control the printing device from the user interface . Controlling the printing device may include commanding the printing device to perform operations, such as requesting the printing device to print darker or lighter, or querying the printing device for status, such as the amount of ink available at the printing device. To perform these operations, the user interface  manages the image control components  and the image queue generating components .","Because the components ,  may be used via an API (as described earlier), a custom user interface can be generated for the software architecture . Because the image control components  and the image queue generating components  are modular and may have an API, the software architecture  may be easily scaled to a larger or smaller size, including any of a number of image control components  and any of a number of image queue generating components , each of which may manage any amount of tasks. Providing a scalable architecture in this manner may allow a user to optimize the software architecture  depending on a variety of factors, such as the type of printing device; performance of the image control components  and the image generating components ; and type and number of databases that are used. For example, image control components  may perform pre-processing on images.","The user interface , the image control components , and the image queue generating components  may communicate via socket connections, such as network sockets, or another suitable mechanism. Thus, any or all of the software components may reside on the same, or separate computers, and the architecture can be easily scaled. For example, a first computer may run the user interface , each server in a first cluster of servers may include an image control component, and each server in a second cluster of servers may include an image queue generating component. By allowing software components to reside on different computer systems, the resources required for printing images at high speed may be distributed across many computer systems, thus being able to match printing requirements of a print application. For example, one printing device may require resources that a single computer system is unable to provide if high-speed printing was desired, thus, multiple computer systems could distribute a workload and meet the resource requirements. In addition, multiple user interfaces, such as the user interface , may be used to interface with image control components  and . As examples, multiple users can view images and cause images to be printed at a printing device via multiple instances of a same user interface, or, different types of user interfaces providing different functions, such as a monitoring user interface and a printing configuration user interface, may run concurrently and interact with the same image control components and image queue generating components.","Because the image control components  are modular and may be interfaced via an API that returns an image in a format that is interpretable by any of the image queue generating component , each of the image control components  may be customized for a different type of database , or file system where files are stored, to provide a uniform interface for accessing images. For example, a single image queue generating component may interface with a first image control component that is customized for interfacing with images stored on a UNIX system (specification available from The Open Group, San Francisco, Calif.) and a second image control component that is customized for interfacing with images stored on a Microsoft Windows system (available from Microsoft Corporation, Redmond, Wash.). In that example, the image queue generating component need not be customized to handle the various file systems and the image queue generating component can nevertheless have a uniform view of images that may be received by the image control components .","The databases  can store files, such as files , for printing. The files represent images and\/or text, and can be in any of a number of formats. In addition, the files may exist in any of a number of file systems, such as a Microsoft Windows or UNIX file system. As an alternative to storing images in databases, the images may simply be stored in a directory tree, or in accordance with any other suitable technique.","The memory area  can store image queues. The memory area  may be a part of random access memory in a computer system that is partitioned from use by an operating system on which the software architecture  runs. By partitioning the memory area  from the operating system, the operating system does not manage that portion of memory. Thus, image queues in the memory area  are likely to stay in contiguous memory. As a contiguous area of memory, the memory area  can be used for direct memory access from hardware devices. For example, data pumps (i.e., a hardware architecture for assembling data packets to send to a print head assembly) may access the memory area  to directly retrieve image data from the image queues. In that example, having a contiguous area of memory may facilitate the lining up of image queues in the memory area  for direct access from the data pumps, thus removing a level of complexity (i.e., determining a location in physical memory where items in the image queues exist) and thus improving the efficiency of the printing system.","Because the software architecture  can operate independently of other devices, such as a data pump, the software architecture  can continually cause image queues to be generated until the memory area  is full. By allowing the software architecture  to continue generating image queues , no other components, such as a data pump, need wait for other components in the printing system. All image pre-processing and processing, including image queue generation, can be performed in memory. By performing all operations in memory (outside of accessing images stored on a storage device, network, and the like), the entire process may avoid bottlenecks that may occur due to latencies in accessing a storage device, and the like.","In some implementations, the image control and image queue generating components ,  may be software services that run slightly above an operating system and start automatically, and the user interface component  may be an application. As such, these services can be available to all users accessing a computing system and are not started on a per user basis like an application, similar to the behavior of networking or printing services. Because the user interface component is an application, the user interface component can be started by a user and is closed if a user logs off. Because the components may be accessible via sockets, one or more applications can interact with the services via sockets.","In alternative implementations the system illustrated in  may include fewer, additional, and\/or different components. For example, a single software module may perform the operations of the image queue generating components  and the image control components . As another example, rather than accessing the image control components  and the image queue generating components  through the user interface , the software architecture  may include only the image control components  and the image queue generating components  and the software architecture may be accessed by another program for printing an image. For example, that software architecture may be accessed by an image-editing tool for printing an image from the image-editing tool. Thus, that software architecture can be a driver for printing from any other software. Also, each of the components of the software architecture may perform fewer, additional, and\/or different operations. For example, images may be converted to a format for printing by the image queue generating components  and the image control components  need not necessarily perform any conversion of images to different image formats.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIG. 12","FIG. 10","FIG. 10","FIG. 11"],"b":"1060"},"At , an indication of an image to be printed is received. This indication is received at the printing software in the computer system. For example, a name of a file to be printed may be selected for printing, and that name may serve as an indication of a file to be printed.","At , an indication of an image to retrieve is received at the computer system. For example, a user interface component may check to see if one or more images are available for printing. If so, the user interface component may send to an image control component a list of images that are to be printed, an image queue generating component where pre-processed image data should be transferred, and\/or how the pre-processed image data should be transferred to another software component. Then, the image control component may open a connection with an image queue generating component and send pre-processed image data to the image queue generating component. In that example, because the image control component receives a list of images to be printed before a connection is opened with an image queue generating component, the image control component can continually generate image data from one or more images prior to opening a connection. In that manner, the image control component can pre-process and queue a lot of image data and when a connection is made with an image queue generating component, all of the image data may be transferred at a high data rate as both components may reside in memory. Because image data can be pre-processed and image queue generating components can operate independently of the image control components, work can overlap such that one or more control components can pre-process image data and one image queue generating component (or fewer if there are multiple image control components) can generate image queues. As another example, the printing software may send an indication of an image to be printed and a user interface component of the printing software may make an API call to an image control component retrieve the image.","At , the image is retrieved. The image control component that received the indication of an image retrieves the image. The image may be retrieved from a database or simply from a file system. The image may be located on a storage device that is a part of the computer system that includes the printing software, or somewhere else. For example, images may be stored across various network-accessible computer systems, and the image may be from one of those computer systems.","At , the image is converted to a generic format. Converting the image causes the image to be transformed (or changed) from its native format to a format that is suitable for the image queue generating component. In other implementations, additional and\/or other types of pre-processing (i.e., processing the image before it is relayed to an image queue generating component) may be performed. For example, an image may be resized, color transformations may be applied to the image, and the like.","At , one or more image queues are generated. The image queues may be generated by one or more image queue generating components. Each image queue represents a portion of the image (i.e., a portion of image data) and there is one image queue corresponding to each print element association. For example, each print element association of a printing device may print a single portion (or division) of image data and there may be 8 print element associations at the printing device. In that example, the image may be divided and the image queues may be filled such that a first image queue has a first portion of the image, a second image queue has a second portion of the image, and so on, until the ninth portion of the image, when the process repeats with the first image queue having a ninth portion of the image, the second image queue having a tenth portion of the image, and so on. In some implementations, generating the portions of image data for image queues may involve generating buffers for each print module in a printing devices, combining buffers to generate combined buffers corresponding to print element associations, and filling image queues with combined buffers that are associated with a same print element association (as described earlier). Thus, in those implementations, each print element association has a queue of buffers waiting to be printed. Because image data may be split into various portions, each corresponding to a different print element association, different images can be printed at the same time (as described in reference to ). For example, a first set of buffers may include image data representing part of one image and a second set of image buffers may include image data representing part of another image. As another example, a queue of buffers may contain buffers representing multiple images such that when image data representing a first image is drawn from the image queue, the image queue may have buffers representing another image while buffers representing the previous image are still in other image queues. Dividing the image into image buffers may be part of a process of converting the image data to jetmap image data, as the image data is converted to a format that corresponds to the geography of print element associations at a printing device as the image is divided.","At , a data packet is generated. The data packet is generated at a data pump and includes at least one portion of image data from each image queue, which altogether is sufficient to cause all print element associations at a printing device to print once (e.g., a single firing of inkjet heads at an inkjet printer). In alternative implementations, other amounts of data may be included in the data packet. For example, less image data may be included in a data packet. Also, a data packet need not include image data from each image queue. As examples, one data packet may include image data from one or two image queues in a system that includes eight image queues.","At , the data packet is transmitted to a printing device. The data may be transmitted in accordance with communications protocols such as the Fibre Channel Protocol (specification available from American National Standards Institution, New York, N.Y. and significantly described in ANSI X3.230-1994), or another suitable protocol. For example, a lightweight protocol may be used because such a protocol may eliminate unnecessary resources consumed while transmitting image in accordance with a heavier protocol. A lightweight protocol may, for example, include the lower two levels of the Fibre Channel Protocol and a modified, lightweight version of the third level of the Fibre Channel Protocol that includes the minimal amount of the protocol necessary for transmitting image data to a printing device.","At , one or more portions of an image, corresponding to a print element association, are printed at a printing device. For example, the processes at  may include a single firing of inkjet heads at an inkjet printer. The image data used to print the portions of the image are from a data packet that is transmitted to the printing device.","The disclosed subject matter and all of the functional operations described herein can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structural means disclosed in this specification and structural equivalents thereof, or in combinations of them. The disclosed subject matter can be implemented as one or more computer program products, i.e., one or more computer programs tangibly embodied in an information carrier, e.g., in a machine-readable storage device or in a propagated signal, for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. A computer program (also known as a program, software, software application, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, subroutine, or other unit suitable for use in a computing environment.","One type of programming language, known as an object oriented programming language, may use classes to define data structures. A class defines the members of an object. Each object is an instance of a class. Members of a class may include methods, variables, and references. Methods, also known as procedures, functions, and the like, include a series of statements that are compiled and\/or executed by a processor and\/or virtual machine. Methods may generate a return value, also known as output. Methods can use mechanisms and techniques other than return values to produce output, including mechanisms that cause information to be written to a file, displayed on a display device, or sent over a network. Methods are invoked by a function call. A function call specifies the method name and may provide arguments that a called method can manipulate. Constructors are a special type of method that initializes an object and\/or generates an instance of an object. Variables, also known as parameters, attributes, and the like, can be assigned a value. Variables may be constant, such that the assigned value need not change during the execution of a program, or dynamic, such that the assigned value may change during the execution of a program. Variables can be of any data type, including character, integer, float, packed integer, and user-defined class. Variables can also be in the form of a reference-type variable, known as a pointer. A reference need not be a variable, and can be used to reference a variable. In other programming languages, or types of programming languages, programming constructs other than a class may represent data structures.","A computer program does not necessarily correspond to a file. A program can be stored in a portion of a file that holds other programs or data, in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","The processes and logic flows described herein, including the method steps of the disclosed subject matter, can be performed by one or more programmable processors executing one or more computer programs to perform functions of the disclosed subject matter by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus of the disclosed subject matter can be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in special purpose logic circuitry.","To provide for interaction with a user, the disclosed subject matter can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.","The disclosed subject matter can be implemented in a computing system that includes a back-end component (e.g., a data server), a middleware component (e.g., an application server), or a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the disclosed subject matter), or any combination of such back-end, middleware, and front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), e.g., the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made. For example, although the process described in  is composed of a certain number and kind of processes, alternative implementations may include additional and\/or different processes. Accordingly, other implementations are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIGS. 2 and 3","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 7","b":["8","9"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
