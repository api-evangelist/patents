---
title: Detecting security vulnerabilities relating to cryptographically-sensitive information carriers when testing computer software
abstract: A system for detecting security vulnerabilities in computer software, including a cryptographic API identifier configured to identify a cryptographic API among the instructions of a computer software application, a path-to-source tracer configured to trace an information flow path among the instructions between the cryptographic API and a source that directly or indirectly provides data that are input to the cryptographic API, where a cryptographically-sensitive information carrier lies along the information flow path, a path-to-sink tracer configured to trace an information flow path among the instructions from the cryptographically-sensitive information carrier to a sink, and a security vulnerability identifier configured to provide a notification that the information flow path between the cryptographically-sensitive information carrier and the sink represents security vulnerability if the information flow path between the cryptographically-sensitive information carrier and the sink does not pass through a cryptographic API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08397300&OS=08397300&RS=08397300
owner: International Business Machines Corporation
number: 08397300
owner_city: Armonk
owner_country: US
publication_date: 20090922
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The invention relates to computer software testing in general, and more particularly to detecting security vulnerabilities relating to cryptographically-sensitive information carriers when testing computer software.","Static analyzers are well known tools that provide information about computer software while applying only static considerations (i.e., without executing a computer software application). In one type of static analysis, information flows are traced within a computer software application from sources, being application programming interfaces (APIs) that introduce input into an application from external sources, such as user input, to sinks, being security-sensitive operations, such as operations that output information to users. Such flows are often identified by static analyzers as security risks that may require further analysis by a software developer and possibly corrective action. However, many such information flows may encounter one or more points within the application that validate or otherwise process data related to the information flow with the express purpose of eliminating the information flow as a security risk. One example of this relates to encrypting input received from external sources, such as user passwords or credit card numbers. It would be advantageous to automatically identify information flows that undergo such processing so as to reduce the need for further analysis by a software developer.","The invention in embodiments thereof discloses novel systems and methods for detecting security vulnerabilities relating to cryptographically-sensitive information carriers when testing computer software.","In one aspect of the invention a system is provided for detecting security vulnerabilities in computer software, the system including a cryptographic API identifier configured to identify at least one cryptographic API among the instructions of a computer software application, a path-to-source tracer configured to trace at least one information flow path among the instructions between the cryptographic API and at least one source that directly or indirectly provides data that are input to the cryptographic API, where at least one cryptographically-sensitive information carrier lies along the information flow path, a path-to-sink tracer configured to trace at least one information flow path among the instructions from the cryptographically-sensitive information carrier to at least one sink, and a security vulnerability identifier configured to provide a notification that the information flow path between the cryptographically-sensitive information carrier and the sink represents security vulnerability if the information flow path between the cryptographically-sensitive information carrier and the sink does not pass through a cryptographic API.","In another aspect of the invention the cryptographic API identifier is configured to identify the cryptographic APIs by matching any of the instructions against a predefined set of cryptographic APIs.","In another aspect of the invention a method is provided for detecting security vulnerabilities in computer software, the method including identifying at least one cryptographic API among the instructions of a computer software application, tracing at least one information flow path among the instructions between the cryptographic API and at least one source that directly or indirectly provides data that are input to the cryptographic API, where at least one cryptographically-sensitive information carrier lies along the information flow path, tracing at least one information flow path among the instructions from the cryptographically-sensitive information carrier to at least one sink, and providing a notification that the information flow path between the cryptographically-sensitive information carrier and the sink represents security vulnerability if the information flow path between the cryptographically-sensitive information carrier and the sink does not pass through a cryptographic API.","In another aspect of the invention the identifying step includes identifying the cryptographic APIs by matching any of the instructions against a predefined set of cryptographic APIs.","In another aspect of the invention a computer program product is provided for detecting security vulnerabilities in computer software, the computer program product including a computer readable medium, and computer program instructions operative to identify at least one cryptographic API among the instructions of a computer software application, trace at least one information flow path among the instructions between the cryptographic API and at least one source that directly or indirectly provides data that are input to the cryptographic API, where at least one cryptographically-sensitive information carrier lies along the information flow path, trace at least one information flow path among the instructions from the cryptographically-sensitive information carrier to at least one sink, and provide a notification that the information flow path between the cryptographically-sensitive information carrier and the sink represents security vulnerability if the information flow path between the cryptographically-sensitive information carrier and the sink does not pass through a cryptographic API, where the program instructions are stored on the computer readable medium.","The invention is now described within the context of one or more embodiments, although the description is intended to be illustrative of the invention as a whole, and is not to be construed as limiting the invention to the embodiments shown. It is appreciated that various modifications may occur to those skilled in the art that, while not specifically shown herein, are nevertheless within the true spirit and scope of the invention.","As will be appreciated by one skilled in the art, the invention may be embodied as a system, method or computer program product. Accordingly, the invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.","Any combination of one or more computer usable or computer readable medium(s) may be utilized. The computer-usable or computer-readable medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc.","Computer program code for carrying out operations of the invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The invention is described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","Reference is now made to  which is a simplified conceptual illustration of a system for detecting security vulnerabilities relating to cryptographically-sensitive information carriers when testing computer software, constructed and operative in accordance with an embodiment of the invention. In the system of , a static analyzer  is provided for statically analyzing the instructions of a computer software application, such as where the instructions are in the form of source code or bytecode. Static analyzer  is configured to identify sources and sinks within the application using conventional techniques, and\/or sources and sinks may be manually identified and made known to static analyzer . Static analyzer  preferably includes a cryptographic API identifier  that is configured to identify any cryptographic APIs within the application, such as by matching application instructions against a predefined set  of cryptographic APIs. Static analyzer  also preferably includes a path-to-source tracer  that uses techniques such as backward slicing to trace among the instructions one or more information flow paths between the cryptographic APIs identified by cryptographic API identifier  and any sources that directly or indirectly provide data that are input to the identified cryptographic APIs. The information carriers that lie along the information flow paths identified by path-to-source tracer  are now referred to as cryptographically-sensitive information carriers and include data variables, pointers to data, or any other data representations. Static analyzer  also preferably includes a path-to-sink tracer  that uses techniques such as forward slicing to trace among the instructions information flow paths between the cryptographically-sensitive information carriers and any sinks. A security vulnerability identifier  determines whether or not any information flow path between a cryptographically-sensitive information carrier and a sink passes through a cryptographic API as identified by cryptographic API identifier , and preferably provides a notification, such as via a display of a computer , that a security vulnerability may exist regarding any information flow path between a cryptographically-sensitive information carrier and a sink that does not pass through a cryptographic API.","Reference is now made to , which is a simplified flowchart illustration of an exemplary method of operation of the system of , operative in accordance with an embodiment of the invention. In the method of , static analysis is performed to identify cryptographic APIs among the instructions of a computer software application. Information flow paths are traced among the instructions between cryptographic APIs and any sources that directly or indirectly provide data that are input to the identified cryptographic APIs. Information flow paths are then traced among the instructions between the information carriers that lie along the information flow paths identified in the previous step, these information carriers now referred to as cryptographically-sensitive information carriers, and any sinks. If an information flow path between a cryptographically-sensitive information carrier and a sink does not pass through a cryptographic API, a notification is provided indicating a security vulnerability associated with the information flow path.","It will be appreciated that any aspect of the invention described hereinabove may be implemented as a computer program product embodied in a computer-readable medium, such as in the form of computer program instructions stored on magnetic, optical, or other physical storage media or embedded within computer hardware, and may be executed by or otherwise accessible to computer  ().","The system and method of  may be understood within the context of the following exemplary scenario. Given the following application instructions to be analyzed",{"@attributes":{"id":"p-0025","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String s = getString(\u201cpassword\u201d);"]},{"entry":[{},"String s1 = s;"]},{"entry":[{},"s = EncryptionUtils.encrypt(s);"]},{"entry":[{},"print(s);"]},{"entry":[{},"print(s1);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"By applying the system and method of ,\n\n","Referring now to , block diagram  illustrates an exemplary hardware implementation of a computing system in accordance with which one or more components\/methodologies of the invention (e.g., components\/methodologies described in the context of ) may be implemented, according to an embodiment of the invention.","As shown, the techniques for controlling access to at least one resource may be implemented in accordance with a processor , a memory , I\/O devices , and a network interface , coupled via a computer bus  or alternate connection arrangement.","It is to be appreciated that the term \u201cprocessor\u201d as used herein is intended to include any processing device, such as, for example, one that includes a CPU (central processing unit) and\/or other processing circuitry. It is also to be understood that the term \u201cprocessor\u201d may refer to more than one processing device and that various elements associated with a processing device may be shared by other processing devices.","The term \u201cmemory\u201d as used herein is intended to include memory associated with a processor or CPU, such as, for example, RAM, ROM, a fixed memory device (e.g., hard drive), a removable memory device (e.g., diskette), flash memory, etc. Such memory may be considered a computer readable storage medium.","In addition, the phrase \u201cinput\/output devices\u201d or \u201cI\/O devices\u201d as used herein is intended to include, for example, one or more input devices (e.g., keyboard, mouse, scanner, etc.) for entering data to the processing unit, and\/or one or more output devices (e.g., speaker, display, printer, etc.) for presenting results associated with the processing unit.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","While the methods and apparatus herein may or may not have been described with reference to specific computer hardware or software, it is appreciated that the methods and apparatus described herein may be readily implemented in computer hardware or software using conventional techniques.","While the invention has been described with reference to one or more specific embodiments, the description is intended to be illustrative of the invention as a whole and is not to be construed as limiting the invention to the embodiments shown. It is appreciated that various modifications may occur to those skilled in the art that, while not specifically shown herein, are nevertheless within the true spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be understood and appreciated more fully from the following detailed description taken in conjunction with the appended drawings in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
