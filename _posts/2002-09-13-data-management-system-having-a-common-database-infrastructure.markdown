---
title: Data management system having a common database infrastructure
abstract: A data management system for use in accessing a plurality of diverse and distributed data sources over a computer network. Within the system, data from the data sources is represented by common data objects that encapsulate the actual data along with the methods and properties needed for use of the data. The system includes a common data model, a plurality of service managers, and a data services coordinator that coordinates operation of the service managers in utilizing the common data model to instantiate the common data objects that represent the data being accessed. The service managers include at least one data access manager for creation of the common data objects and a plurality of ancillary service managers that each provide one or more data service functions such as, for example, meta-data management, data management, data versioning, data transport, data update notification, data security, data presentation, and data translation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07395255&OS=07395255&RS=07395255
owner: General Motors Corporation
number: 07395255
owner_city: Detroit
owner_country: US
publication_date: 20020913
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This invention relates to data management systems used in connection with diverse and distributed databases and to the interfacing of such databases to engineering and other business applications.","The engineering of an automotive vehicle involves the development, test, and integration of a variety of complex vehicle systems. Quite often, entire divisions of automotive companies and their larger suppliers are devoted to a single one of these vehicle systems. Powertrain, suspension, and chassis are three such examples; steering is another. Today, engineering of the vehicle and the integration of these systems is heavily reliant on the use of computers, with computer-aided engineering, design, analysis, manufacture, and test programs becoming more and more widely used. These computer-aided tools all use data, some of which may come from databases, and produce data, some of which may be used by subsequent computer-based tools to further the overall engineering process. As the quantity and diversity of data in this engineering environment continues to increase, and as the ability of these tools to utilize that engineering data continues to increase, the complexity involved in managing the data also increases, both in terms of accessing the data and converting the data structures (and formats) that are usable by any particular computer-based tool. This is especially true where the source data comes not simply from relational databases, but from other data sources such as spreadsheets, documents of all types, legacy databases, and proprietary files produced by computer-based tools and automated test equipment. Such data is not only diverse in its structure, but is often highly distributed over various networks that may only be connected together via a global public network such as the Internet or a VPN implemented across the Internet.","The problem is further complicated by the need to accommodate the different platforms available to the end users in running a particular engineering application. For example, particular computer-based engineering packages may be deployed both directly on user workstations and separately via a web interface. This requires the ability to deliver the same types of data through different user interfaces.","The invention provides a data management system for accessing a plurality of data sources. The system is implemented over a computer network and includes a common data model, a plurality of service managers, and a data services coordinator that coordinates operation of at least some of the service managers in utilizing the common data model to instantiate a common data object that is then used to supply the requested data. For this purpose, the common data model includes a data class having a plurality of attributes defining properties of the data class. The service managers include at least a data access manager and an ancillary service manager, wherein the data access manager is operable to access the common data model and to access data from one or more of the data sources for use in instantiating the common data object containing the accessed data. The ancillary service manager is operable to provide a data service function such as, for example, meta-data management, data management, data versioning, data transport, data update notification, data security, data presentation, and data translation. Preferably, interface modules, also referred to as plug-ins, are used to interface particular data source types to the data access manager. These plug-ins can also be used in connection with other of the various service managers to handle the different types of formats involved in sharing and transporting the data.","The common data model can include subclasses of the data class directed to particular data types, each having their own sets of attributes as are necessary to properly represent the data originating from or being written to the data sources. Each time a data access request is made, the system determines the appropriate common data object needed and creates an instance of that object which persists until no longer needed. This creation and consumption of the common data objects as a part of data access (whether for reading or writing purposes) allows for data federation in a manner that provides data format and location transparency to diverse, distributed databases. It also enables the system to compose different data views from data obtained from different data sources, even if the data models for the different data are not the same.","The data management system described herein and shown in the attached drawings provides a common data infrastructure that permits integration of various computer-based engineering tools in a manner that provides data source and location transparency. Reusable services and components simplify the integration of both new and old engineering tools into the system, and the use of a common data model permits the computer-based tools to be interfaced with the system using adapters that need only be designed for integration with the common data model. Particular data formats and structures can then be obtained using the reusable services and components.","Referring now to , there is shown an overview of the hierarchical structure of a data management system (DMS)  constructed in accordance with the invention. The DMS  is organized architecturally into a three tiered system involving an upper level client tier , a middle services tier , and a lowest level data tier . The client tier  includes three basic developer and end user tools; namely, a web interface such as a standard web browser , a set of general and special purpose application programs , and a set of database factory tools . The services tier  includes a set of common data services (CDS)  responsible for carrying out data requests involving accessing and supplying data that is either requested or supplied by the various user applications and, as will be discussed below, the common data services  processes the data by instantiating common data objects (CDOs) based on a common data model and then utilizing the CDOs to carry out the particular data request. As indicated in , the common data services includes a data services coordinator (DSC) , the common data objects  themselves, and a number of services managers  which are separated into both data access managers  and ancillary service managers . Also included in the services tier  is an application programming interface (API)  (that can be implemented as a part of the data services coordinator ), and a web-services interface  that provides web-enabled access to the data via the API  and CDS . The data tier  includes data sources , the common data model , one or more source data models , and database factory parts or components  that are accessible by the database factory tools  for use in integrating new applications or data sources into the system .","In general, an end user will utilize either the web browser  or the application tools  themselves to carry out the desired engineering tasks, and all data flows to and from the user will go through the CDS  with common data objects  being created and consumed as necessary to carry out the particular engineering task involved. Not shown in the figure, the user can also access a third party computer-aided tools via the browser  in the event a web interface to the application tools is available. For data lookups, comparisons, charting, and the like that does not require specialized tools, the browser  can be used to carry out the particular task. An example of this use of the browser is depicted in  and is discussed further below.","The data management system (DMS)  is implemented over a computer network of interconnected computers, which can be a local area network, a wide area network, a global public network such as the Internet, or a virtual private network (VPN) implemented over a larger network such as the Internet. DMS  is particularly advantageous when used in conjunction with latter two of these networks using diverse and distributed databases since it provides commonality among all data from whatever source and provides transparency of data location. This data location transparency means that the user application need not know where the database is; rather, only the common data services  needs this information since it handles all of the data management through the use of the CDOs . The common data services  are each implemented as one or more computer programs executed on at least one computer on the network. More specifically, the common data services are implemented using an EJB (enterprise javabeans) architecture, although other server-side component management system architectures could be used as well. Some of the common data services will be carried out as separate processes on a shared computer, whereas others may be implemented on a computer dedicated to the particular task. Alternatively, some or all of the common data services can be distributed across multiple computers, if necessary or desirable.","Browser  access to data is handled through a set of web services  which includes such things as an HTTP\/HTTPS (Hypertext Transport Protocol) server that provides a web interface through the use of applets, servlets, asp pages, and the like. These can be implemented using Netscape\u2122 Enterprise, Microsoft\u2122 Internet Information Server (IIS), or Apache\u2122 servers. The web services  interface with the common data services  via API . The implementation and use of API  and the various web services  is well within the level of skill in the art and will not be further elaborated upon here. The common data services  lie at the heart of the DMS , with all data accesses flowing through this centralized servicing function. The data services coordinator (DSC)  is the main EJB server entry point into the system and is used to coordinate the activities of the service managers so that a data request receives all of the necessary and appropriate servicing. This servicing includes the functions provided by the data access managers  which are responsible for obtaining needed data from the data sources  and instantiating the CDOs using that data. This servicing also includes the data service functions provided by some or all of the ancillary service managers , including in particular data security (authentication and authorization) and data presentation. The data sources themselves can include a variety of different sources of information, including relational databases, documents and document archives, spreadsheets, image files, as well as other multi-database management systems such as iMAN\u2122. Three such examples are shown in , including an iMAN\u2122 database , a loads database , and a tire database , the latter two of which comprise relational databases.","Referring now to , this generalized architecture of  is shown in greater detail to more fully depict the structure of DMS . As described above, web browser access into the system  is by way of a web server  running servlets  and\/or other processes for handling data requests and display. Data requests are passed through to the data services coordinator (DSC)  which provides management of the overall processing, including data security services, accesses to the source data, creation of appropriate CDOs , any data transformations required, and finally presentation back to the user. Data handling through the system  is accomplished using XML (Extensible Markup Language) with the data being converted into and out of that format as necessary when it passes through the system between the data sources and end user. Generally, CDS  is made up of a group of service managers  each responsible for a certain data task, including the two categories of such tasks shown in FIG. \u2014data access and ancillary services. The service managers  include two data access managers\u2014a view manager  and a data source adapter manager \u2014and several ancillary services managers\u2014an audit manager , security manager , portal manager , GUI manager , loader manager , transport manager , and translation manager . These service managers  are interfaced, or extended, through the use of plug-ins  which are interface modules designed to interface the communications structure (e.g., command set) of its associated service manager with the various services connected to it. The plug-ins  are used to interface with the view manager , data source adapter manager , GUI (Graphical User Interface) manager , loader manager , transport manager , and translation manager .","The audit manager  provides data versioning services that permits maintenance of relationships between old and new data, and can be used to provide check-in and check-out capabilities through data sources that provide the service (e.g., the iMAN\u2122 data source  or others such as Domino\u2122). This also enables the system to provide update notifications concerning changes in data, and these notifications can be supplied using, for example, a subscription service. Audit manager  additionally provides event logging and can be used to provide recordkeeping and reporting services concerning the data management and user accesses, and this information can be used for such things as cost allocation among different enterprise cost centers. This service manager  is interfaced with each of the other managers identified by the connection {circle around (B)}.","Security manager  provides authentication and authorization for particular data requests received by the system and interfaces with each of the other managers identified by the connection {circle around (A)}. For a smaller, simpler computer network, this security can be implemented in connection with the authentication services provided by the workstation or network operating system, such as is used by WindowsNT\u2122 based computers and networks. For larger organizations, this security can utilize the enterprise security schema and can be integrated with supplier collaboration and product data security schemas through, for example, LDAP and WebSeal\u2122 protocols. If desired, authorization and authentication services can be implemented via application specific plug-ins  (not shown). For example, authentication can be provided via a plug-in used to interface the system to a CORBA or J2EE application server (such as BEA WebLogic\u2122 or iPlanet\u2122). Authorization can also be provided as a separate plug-in that provides web user to database user mappings.","Portal manager  supplements operation of the GUI manager  by providing information for customizing the user interface generated by GUI manager . As indicated in , GUI manager  utilizes display attributes contained in one or more properties files  along with XML style sheets (XSL)  used to produce the web-based presentation of data displayed on the browser . The properties files  and\/or style sheets  can be specific to particular CDOs or data formats, or to particular databases and\/or end user applications. GUI manager  is interfaced with the data services coordinator (DSC)  via one or more GUI plug-ins  designed to work with the API  contained within DSC . Other GUI plug-ins  can be used, such as ones that provide: forms handling to create HTML (Hypertext Markup Language) forms supporting data entry; file uploading to provide an interface for uploading documents from a browser; graphing capability to convert the data to and from XML; meta-data handling to provide XML meta-data in HTML; parameterized functionality to permit instantiation of CDOs that utilize input parameters; repository functionality to provide the ability to view database schema and meta-data; static HTML access to HTML files; XML content transformations using XSL style sheets.","Loader manager  uses plug-ins  that may be database-specific to schedule and batch load data. The web services  communicate not only with the DSC  to process user data requests, but also with a scheduler  that works with the loader manager  to provide scheduling of tasks such as batch processing. Once a scheduled task is initiated, the loader manager  interfaces through an appropriate plug-in  to the view manager  to initiate the creation and use of the CDOs  needed to carry out the task, with any data format translation being handled by the translation manager  via a plug-in  appropriate for the data format involved (e.g., ASCII or .xls spreadsheet). An exemplary tire plug-in  is depicted in  such as might be utilized in conjunction with the tire database . Instantiation of CDOs and translation of data according to the schedule set by the scheduler  is controlled via the DSC  and is carried out using the data access managers; that is, using the view manager  and source data adapter manager .","Transport manager  is responsible for moving data between computer systems using standard Internet protocols such as FTP and HTTP. It utilizes plug-ins  to support each of these different communication protocols. Thus, although for example, data may ultimately come from one of the data sources  shown in  (e.g., the tire database ), it may involve the use of transport manager  to carry out the data transfer using the protocol supported at the computer system where the database is actually stored.","Translation manager  provides data transformations from one format to the other to facilitate the exchange of data between engineering applications. In particular, this translation manager  converts data from whatever format into a standardized data descriptor using, for example, XML. Thus, it utilizes plug-ins  that provide this translation between XML and, for example, ASCII, .xls spreadsheets, and database file formats. Translation capabilities other than format translations can also be provided by these plug-ins such as, for example, Fourier transforms and other such mathematical transforms for use with mathematical data.","The above-described service managers - are ancillary service managers in that they each perform one or more data service functions that are ancillary to the data access and CDO creation handled by the data access service managers , . The service functions identified above for these service managers can be implemented in one more ways that will be known to those skilled in the art.","The data access managers of  include the view manager  and data source adapter manager . View manager  responds to data requests by an end user application  or via the browser  and determines what data from which data source  is being requested. Then, using the common data model (CDM) , it instantiates the common data objects (CDOs)  used to represent the requested data within the system. CDM  can be implemented using object oriented programming as one or more data classes having a plurality of attributes that define the properties of the data class. These properties includes such things as the data structures, types, lengths, and values. In addition to the properties of the data it represents, each data class can have one or more methods for handling the attributes defined by the class. Each data class can also have subclasses directed to particular species of the more generic data class, and will typically have the general characteristics of encapsulation, inheritance, and polymorphism. The CDOs  are instances of a class or subclass defined by CDM  and are created and consumed by the system in response to particular data requests. That is, a data request coming from an end user application  or browser  is used by the view manager to create a CDO  which is then processed as needed or desired and returned for display via the settings provided by GUI manager . Once this has been completed, the CDO is deleted. Such data requests will typically be to obtain and return data from a data source , although they may instead be made for the purpose of writing new data to a data source. The view manager  utilizes one or more properties files  along with style sheet instructions  to create the desired view (CDOs) needed for a particular data request.","Referring now briefly to , an example of the use of view manager  is shown. By encapsulating all data moving through the system as CDOs, the system can be integrated with different types of data sources, including legacy systems, new database applications, as well as ones accessible through a separate data management system such as iMAN\u2122. In the example of , the view manager, acting through the CDM , creates three CDOs  that represent three different views of enterprise data from the data sources . Each of the three CDOs have been created and consumed as a result of three different end user data requests. View A results in a collection of CDOs that collectively map to the entire CDM  involving all of the different types of data held by the different data sources. View B maps to several data sources, and View C maps to a single data source. As will be appreciated, the data locations are therefore transparent to the end user and diverse (heterogeneous) data sources are thereby federated into a common model to permit access by any end user application or browser. Using the overall coordination control provided by DSC , multiple CDOs  can be created and consumed concurrently.","With continued reference to , data source adapter manager  can be one of several such adapter managers used to handle data extraction from a particular type of data source. In the example shown, the adapter manager  is used for relational database data access and interfaces with the view manager  via a relational database plug-in . Other such plug-ins and data source adapter managers can be included for other data source types, such as a document archive, 3-D modeling files, etc. View manager plug-ins can also be used to provide: file functionality for creation and processing of XML used to wrap files; repository functionality for creation and processing of XML content of schema and meta-data; and XML data service for creation and processing of XML content to and from the data sources . Adapter manager  itself includes one or more driver properties files  and source properties files . The driver properties file  defines the properties of the output format used by the adapter manager  to interface with the view manager  via the RDB plug-in . The source properties files  likewise include the data source-specific properties of the source data accessed by the adapter manager. This data extraction by the adapter manager  from the various data sources  is also by way of plug-ins \u2014in this case, relational database management system plug-ins that are data source-specific.","DMS  includes both a development environment and a runtime environment. As shown in , the development environment utilizes the database factory tools  to develop the definitional and presentation attributes used for a new data source , as well as the data definitions or models  needed to support that data source. The data models are then added to the common data model . The database factory tools  primarily consist of reusable templates that include a library of the database factory parts  and a set of previously defined projects . The database factory parts  can include the definitional information needed by the common data model  to enable the creation of CDOs encapsulating the data along with the various properties and methods needed for use of that data. The database factory parts  can also include XSL instructions  for the data view and XSL definitions  used in presenting the data via the web browser . These reusable templates or component parts need not be used in every case. Rather, in some instances, new data definitions and\/or XSL definitions will need to be newly developed. Thus, for new projects (i.e., for new data sources and\/or new application tools being integrated into the system ), the development environment involves creating the necessary data definitions  that can be added to the data model , generating the XSL instructions  utilized by the view manager , and developing, the XSL presentation sheets  used by the GUI manager , with the developer utilizing the reusable templates where possible and creating any remaining needed data and XSL definitions. Once these have been developed, they are deployed by updating the common data model  and incorporating the XSL definitions into the CDS  for use in the runtime environment. Where needed, the development environment can also include the development of new plug-ins and properties files as needed for use of the new data source and\/or applications tools.","Referring now to  a hierarchical view of the common data services  is shown along with the CDS components  used by those services. These components essentially comprise the data required for operation of the database management system  (as opposed to the engineering data from the data sources ), and it will be understood that depending upon the actual implementation of the DMS  not all of these components may be required. These components  include reusable components that can be maintained as a part of the database factory library . Some components, such as the business logic components and perhaps the queries and stored procedures, may be substantially database-independent, whereas others, such as the source data models and source properties files used by the adapter managers will typically be database-specific. CAx in the figure denotes computer aided engineering data that the CDS has access to.","As shown, there are various parallel paths (the vertical lines) that may be utilized for data access. For higher level functions involving the data, various application services included within the common data services  may be utilized, including the application of business logic, queries, or specific presentation formats to the data. Most access is conducted through the use of CDOs using the common data model , although as shown in some instances data access might be more direct, using only the security manager  and lower level data services (data directory and models). Furthermore, direct access by specific application tools to their databases may be provided, with the CDOs being used for other applications and browser access.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6","b":["10","140","20","42","20","140","10","26","26","30"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 7","FIG. 8","FIG. 8"],"b":["26","150","152","10","26","76","38","90","26","34","152","22","26","38"]},"The data access methodology described above and used by DMS  is depicted in . In particular, data access begins with a request (1) for data. Under control of the data services coordinator , the view manager  determines what data view (2) (i.e., CDO) is required using the data definitions from the common data model . It then instantiates one or more CDOs (3) using the requested data obtained from one or more of the data sources . The data is then represented using XML (4) and returned to the user for display (5).","Exemplary browser screen displays are depicted in . Browser access to data via DMS  can be implemented using a typical website paradigm requiring login through the browser that utilizes the security manager services to authorize access. Protocols such as secure socket layers can be used to protect and authenticate accesses to the system once the user has been authorized, and browsers such as Internet Explorer\u2122 or Netscape Communicator\u2122 include the capability to support such protective communication protocols. The screen displays depicted in these figures each represent a frame contained within the client window of the browser. Additional frames can be used such as a left vertical menu that enables navigation through various levels in the website hierarchy.  depicts a forms interface  which can be used for queries of the tire database  shown in . This form can be a reusable GUI component that provides an interface to one of a number of CDS component queries shown in , and the form itself is made up of reusable components (fill-in text fields, drop-down boxes, tables, submit buttons) contained with the database factory library. The query results shown in  are returned as HTML and presented in a table format using, for example, business logic to sort them by tire size. The returned data includes finite element model drawings which may be located in an entirely different database than the other data presented in the table so that it will be appreciated that the data location is entirely transparent to the user. Clicking on any of the FEM links will access that image data and present it on a subsequent screen.","Similarly, the detailed test data files identified by the different Test Ids are also available through this same browser interface, even though they may be stored in a proprietary format of the particular software tools used to record that test data. The test data for the identified test can be viewed, as shown by the display of , thereby allowing the user to dig down into the actual test data and results. The returned data can also be plotted as shown in , which is accomplished by selecting one of the graph icons in . For this, the system uses the graph GUI plug-in of  to generate the display of this data. In this way, the plotting of data is always available regardless of the origins of that data.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 14","FIG. 15"],"b":["10","28","10","28"]},"It will thus be apparent that there has been provided in accordance with the present invention a data management system which achieves the aims and advantages specified herein. It will of course be understood that the foregoing description is of a preferred exemplary embodiment of the invention and that the invention is not limited to the specific embodiment shown. Various changes and modifications will become apparent to those skilled in the art and all such variations and modifications are intended to come within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A preferred exemplary embodiment of the invention will hereinafter be described in conjunction with the appended drawings, wherein like designations denote like elements, and wherein:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 7 and 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 10-13"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 14","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
