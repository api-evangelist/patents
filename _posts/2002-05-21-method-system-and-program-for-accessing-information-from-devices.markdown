---
title: Method, system, and program for accessing information from devices
abstract: Provided are a computer implemented method, system, and program for enabling access to information from a device. A device program is generated to access device property information from the device. Each device property indicates a state of the device and the device program includes device specific commands to query the device for information on the device properties and device independent statements common to device programs for other devices to buffer the queried property information to return to requesting clients. The device program is stored in a computer readable medium.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07111304&OS=07111304&RS=07111304
owner: Sun Microsystems, Inc.
number: 07111304
owner_city: Santa Clara
owner_country: US
publication_date: 20020521
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE DESCRIBED IMPLEMENTATIONS","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Using Page Buffers for Device Property Values","Additional Implementation Details"],"p":["1. Field of the Invention","The present invention relates to a method, system, and program to provide property value information for a device.","2. Description of the Related Art","The Web-Based Enterprise Management (WBEM) framework is a set of management and Internet standard technologies developed to provide a common set of protocols to enable the management of enterprise computing environments. The WBEM standard includes the Common Information Model (CIM), which provides a conceptual framework for interchanging information between management systems and applications. The CIM schema provides a set of object oriented classes with properties that are used to organize and access the information about the managed environment in a common format. The WBEM\/CIM schema allows one to use a web browser to access a CIM compliant server to access information from a device using the CIM framework. One can construct a generalized management application using the CIM framework and components without needing to know or incorporate device specific or proprietary commands of the device being managed.","The elements that may be managed and accessed using the WBEM\/CIM framework include systems, applications, networks, and devices (e.g., storage systems, printers, etc). Extension schemas are provided to extend the CIM to technology-specific areas, such as storage devices. To comply with the CIM architecture, a product must implement the CIM core and common schema classes to enable CIM clients to use standard CIM methods to access information about the product. This requires the product vendor to develop product (e.g., application, device, system, etc.) specific code that implements the CIM classes to provide access to the product information.","The CIM model provides a core model that captures notions applicable to all areas of information management. A common model provides access to information common to particular management areas, but independent of a particular technology. Extension schemas represent technology specific implementations of the model that provide access to information specific to a particular product. Vendors must, thus, provide an instance of the model to enable access to the product information and configuration settings as specified in the CIM specification. Further details of the CIM model are described in publications from the Distributed Management Task Force (DMTF), including \u201cCommon Information Model (CIM) Specification\u201d, Version 2.2, (Jul. 14, 1999) and \u201cUnderstanding the Application Management Model\u201d, Version 1.0 (May 17, 1998), which publications are incorporated herein by reference in their entirety.","The CIM indication schema provides classes used to communicate occurrences of events in the managed environment. An event is typically assumed to be a change in the state of the device environment or a record of the behavior of some component of the environment. Examples of events include the starting or stopping of a service, addition of resources to a monitored device, the occurrence of a pervasive incident, state change requiring immediate attention, such as being low on disk space, etc. The occurrence of an event is represented by an instance of the CIM Indication class. Clients can subscribe to indications caused by changes in the state of CIM objects to receive notification and alerts when certain states or information changes in a managed object. Subscription refers to the classes and methods that clients use to subscribe to and receive indications. Details of the classes of the CIM indication schema are described in the DMTF publication \u201cCommon Information Model (CIM) Indications\u201d, Version 2.5 (Dec. 14, 2000), which publication is incorporated herein by reference in its entirety.","As with the CIM model, vendors wanting to provide information on their products through the CIM indication schema, must implement the classes specified in the CIM model and CIM indications. This requires each vendor to write device specific code that in response to calls from methods defined in the CIM specification performs device specific operations to provide the requested indications and other information, and provide access to the device as defined in the CIM specification. This process of writing the device specific code to implement the classes of the CIM model and CIM indication is a substantially time consuming and expensive process.","Moreover, when network devices implement the WBEM\/CIM framework, they may receive numerous requests for information from applications and browsers requesting information or performing management operations with respect to the managed device. Such devices, as storage systems, etc., are often not designed to function as a web server. Thus, devices that participate in the WBEM\/CIM environment may experience a substantial increase in processing burdens due to the need to function as a web server and respond to information requests and control operations from external devices.","For these reasons, there is a need in the art to provide improved techniques to enable vendors to integrate their products into the CIM environment and provide property value information from the devices.","Provided are a computer implemented method, system, and program for accessing information on a plurality of different devices in a network. A device program is instantiated for the devices, wherein each device program includes methods that are common in all device programs for different devices. Methods in a page program are called to access, wherein methods in the page program include device specific commands to query the device for information on device properties, and wherein each property indicates a unit of information on the device. Statements in one device program are executed to query the device for information on device properties and information on device properties received in response to the query is added to at least one page in a computer readable medium. The pages include property information for different devices queried using device specific commands in the device programs.","In further implementations, a request for information on device properties for one target device is received and the page including the requested device properties for the target device is accessed. Information on the requested device properties from the accessed page is retrieved and returned.","Further implementations include a properties class for each device including device specific commands to obtain information needed to access the device over a network. The page program comprises a page class of methods to access information from the device.","In yet further implementations, the different devices may be from different vendors.","Further provided are a method, system, and program for enabling access to information from a device. A device program is generated to access device property information from the device. Each device property indicates a state of the device and the device program includes device specific commands to query the device for information on the device properties and device independent statements common to device programs for other devices to buffer the queried property information to return to requesting clients. The device program is stored in a computer readable medium.","The described implementations provide techniques to access information from different devices using a program architecture that utilizes certain device program methods that are common for device programs for different devices and certain page program commands that are specific to the device.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["2","4","4","6","6","4","4","2","8","2","4","4","4","4","10","10","10","10","10","10","4","4","2","4","4","10","10","10","10","10","10","2","4","4"],"i":["a ","b ","a ","b","a ","b ","a ","b","a ","b ","a","b ","n ","a","b ","n ","a","b","a ","b ","a","b ","n","a","b ","n ","a","b. "]},"The CIM providers , . . . provide information about a specific type of device and , where a type of device comprises a specific model of a device, such as a Sun Microsystems' SunStorEdge T3 Array storage array, Sun Enterprise server,** etc. Multiple providers , . . . may be utilized to provide access to different types of information and controls for a device, or to provide information for specific components of a device, e.g., the hard disk drives, controller, network card, etc. within a storage server. In providing access to different types of information or controls, each CIM provider , . . . may implement one of the following CIM provider interfaces in a manner known in the art: an instance provider interface that provides utility methods (create, delete, modify, query, etc.) to support instances of specific CIM classes; a method provider interface that lists methods that a provider supports; a property provider interface that supports retrieval and modification of CIM properties (i.e. get and set methods to modify name\/value pair of a CIM instance); and an association provider interface that provides information on the relationship between classes and instances. **Sun Microsystems, StorEdge, Jini, and Sun Enterprise are trademarks of Sun Microsystems, Inc.","To interface with the devices , , the CIM provider , . . . instantiates instances of classes implemented by device specific modules and and calls methods from such classes to access data from the devices and . In the described implementations, the device specific modules and implement classes, referred to herein as the Device Communication (DevComm) classes, in device specific code that utilize device specific Application Programming Interfaces (APIs) and to access information from the managed resource and ","Although only one device specific module , is shown for each device , , each device may have multiple device specific modules to enable communication with specific components within the device, such that there is a separate device specific module for each logical, software or hardware component with which a CIM provider , . . . may communicate. A separate set of CIM providers , . . . may be provided for each device specific module , . For instance, one CIM provider may be provided to communicate with a device specific module for one disk, controller, network adaptor, backup program, file manager, etc., within a storage server.","The network  may comprise any network system known in the art, such as a Local Area Network (LAN), Storage Area Network (SAN), Wide Area Network (WAN), the Internet, an Intranet, etc. The devices and may comprise a software application, such as database program, utility program, operating system, etc., or a hardware device, such as a storage device, printer, network appliance, Internet appliance, or any other device known in the art capable of being electronically queried for information. To access information on the devices and , the CIM clients and would issue information requests conforming to the CIM specification and CIM indication classes to the CIMOM . The CIM clients and and CIM providers , . . . may be implemented on different computing devices or execute on the same computing device. The computing device in which the CIM clients , and provider  are implemented may comprise any type of computing device known in the art, such as a server, workstation, desktop computer, portable computer, hand held computer, telephony device, etc. In certain implementations, the CIM providers , . . . and CIMOM  are implemented on a separate server class computer in order to handle information requests from various CIM clients , over the network .","In the described implementations, each vendor of a device and wanting to participate in the CIM architecture would have to write code implementing the device communication (DevComm) classes. The vendors would have to provide code to allow their system to implement the functionality of the device communication (DevComm) classes. The vendors may code device specific APIs , , which include methods having device specific commands to query the devices and for information. In other words, the device specific modules , provide the mapping or translation of the device communication (DevComm) classes and the device specific APIs , ",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["20","6","6","22","6","6","24","26","6","6","6","6","24","26","14","14","6","6","24","26","22","28","30","28"],"i":["a","b","a","b","a","b ","a","b","a","b","a","b"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3","b":["6","6","6","10","10","10","2","50","52","6","6","6","10","10","10","20","54","54","52","54","10","10","10","52","6","6","6"],"i":["a","b ","n","a","b ","n ","a","b ","n","a","b ","n ","a","b ","n ","a","b ","n. "]},"The DevComm instance  calls methods of the page class  to create pages , . . . having information on the devices , . . . in an accessible memory or storage device. One or more pages , . . . may be maintained for each device , . . . . Each page , . . . includes a plurality of property\/value pairs . . . , where the properties indicate an environmental, operational or other state of the device , . . . and the value provides the particular value for that property determined the last time the device , . . . was queried for information. In certain implementations, the property\/value pairs . . . are implemented in a searchable hash table. Further, as shown in , the pages , . . . may be maintained in the instance of the DevComm object  for one device , . . . ","The CIM Provider , . . . would further instantiate a PropertyChangeListener class  to include in the DevComm Factory . The DevComm factory  would call methods of the instantiated PropertyChangeListener class  to manage a listener\/property list , that indicates users that have registered to receive notification of changes to specific property values . . . in one of the pages , . . . . The DevComm Factory  notifies the requesting CIM Provider , . . . of changes to properties. The PropertyChangeListener class  provides a propertyChange( ) method to detect a change to one property value . . . in one of the pages , . . . . In certain implementations, the methods of the PropertyChangeListener class  are used to provide status change information for all instances of a particular device type , , e.g., provides status change information for any device, e.g., storage server, storage array, etc., or component therein. The propertyChange( ) method would thus read all pages , . . . providing information for instances of a particular device to see if the properties for device instances have changed for a device type. If so, the propertyChange( ) method notifies the DevComm( ) instance  of each device instance for which a change was detected. Each notified DevComm( ) instance  then notifies the DevComm Factory instance  about the changes and the DevComm Factory  calls the PropertyChangeListener  to report the change to the subscribed CIM client , ","As discussed, the DevComm Factory , in response to requests from the CIM providers , . . . , instantiates instances of the DevComm class  to enable CIM providers , . . . to access information from the devices , . . . . Further, the page  and configuration  classes include device specific APIs , . . . to obtain information on property values included in the pages , . . . and to perform configuration operations with respect to the device , . . . ","The CIM clients , are aware of CIM providers , . . . for a specific type of device, and the CIM provider , . . . maps the CIM client , requests to the DevComm class instance  implemented for a particular instance of a device type, e.g., a particular T3 storage server. As discussed, each CIM provider , . . . provides information and access to configuration settings for all instances of a particular device type, e.g., all accessible T3 storage servers in the system. Each time a CIM Provider , . . . is called for a particular instance of a device, e.g., a particular identified system, a DCProperties class  () is instantiated. DCProperties provides methods that the CIM provider , . . . uses to communicate requests to the DevComm Factory instance . The DevComm Factory class  provides methods to construct a DevComm( ) instance  for a device or component of the device, or returns a handle for an existing device or device component. Thus, one DevComm( ) class instance  is provided for each instance of a device or device component to enable communication with that device , or device component. The DevComm( ) class calls methods of the page class  to refresh and access device property information in the page data , . . . ","The DCProperties class  may implement the following methods. Credentials or authentication may be required to access the methods of the DCProperties or any other class described herein:\n\n","The DevComm class  may implement the following methods:\n\n","In addition, device , . . . vendors may implement extensions to the DevComm class  to include such methods as:\n\n","The page( ) instances , . . . are created with the following parameters that determine how refresh operations are performed:\n\n","The page class  implements methods to refresh the property\/value pairs . . . in the pages , . . . by interacting with the device , . . . , including:\n\n","The DevCommFactory class  provides the following methods the DevComm Factory  invokes to manage DevComm( ) instances . The DevComm Factory class  may manage DevComm( ) instances  for many different devices:\n\n","Most of the above described methods in the DevComm  and DevComm Factory  classes do not require any device specific code and concern interaction of the CIM processes. Such device independent methods can be implemented using standard commands that may be used by all vendors, thereby relieving vendors of the need to write code for such device independent methods. With the described implementations, the vendor need only code a limited number of device specific methods to participate in the architecture, such as the page class , the configuration class , and the DCProperties class . For instance, the DCProperties  class includes methods that determine information needed to communicate with the target device , , such as access path, user name, type, etc, and the getProperty( ) method in the page class  that queries the device for property value information. In this way, with the described implementations, the vendor coding burdens are limited because the vendor need only implement device specific methods for a few classes using device specific APIs. The vendor may use common methods for those device independent methods in the DCProperties , DevComm , and page  classes, such that the vendor implementations implement the device specific APIs , . . . ",{"@attributes":{"id":"p-0046","num":"0079"},"figref":["FIGS. 4 and 5","FIG. 4"],"b":["10","10","10","54","42","12","12","12","6","6","6","4","4","4","4","6","6","100","10","10","10","10","10","2","10","10","10","10","10","10","102","20","50","50","52","10","10","10","104","54","50","52","50"],"i":["a","b ","n ","a","b ","n ","a","b ","n ","a","b","a","b ","a","b . . . n","a","b ","n ","a","b . . . n ","a","b ","n","a","b ","n ","a","b ","n "]},"If (at block ) there is a DevComm( ) instance , . . . for the target device , . . . , then the DevComm Factory instance  determines (at block ) the handle to the DevComm( ) instance for the requested device and returns the handle to the calling CIM Provider , . . . . After receiving the handle to the DevComm( ) instance , . . . to use, the CIM Provider , . . . calls (at block ) the getProperty( ) method to access the requested property value(s) from the page , . . . including the requested property value . . . . The accessed property value is returned (at block ) to the requesting CIM client , ","If (at block ) there is no active DevComm( ) class instantiated for the targeted device , . . . , then the DevComm Factory instance  creates (at block ) a DevComm( ) instance for the requested device. The DevComm instance  then calls (at block ) the getPages( ) method from the page class  to create pages to include property values for the device and refresh the pages. From block , control proceeds to block  to access the requested data from the page , . . . .",{"@attributes":{"id":"p-0049","num":"0082"},"figref":["FIG. 5","FIG. 4"],"b":["52","24","42","42","42","150","52","6","6","6","52","152","154","156","156","158","160","14","14","6","6","6","166","44","44","6","6","6","168","44","44","42","42","42"],"i":["a","b ","n","a","b ","n ","a","b ","a","b ","n ","a ","n ","a","b ","n","a ","n ","a","b ","n. "]},"The described implementations allow a device vendor to participate in the WBEM framework and only have to code a limited number of methods of a DevComm class  that provides an interface to device specific APIs to perform device specific operations. The DevComm( ) class may be used by CIM providers to access device specific operations and obtain device specific information. The remainder of the methods that are used to provide clients information on the devices are standard across all devices, i.e., device independent. In this way, the vendor coding burdens are limited to coding a few methods to provide property value information to pages. Further, the device specific data is maintained on pages that are accessed using device independent methods to provide a common interface to such device specific information buffered on the pages. The vendor need only provide device specific code for methods that query the device for property value information to add to the buffered pages.","In further implementations, the DevComm classes described herein may be implemented in a proxy provider, which is a CIM provider implementation external to the device being managed. The CIMOM may use proxy providers to maintain access to numerous managed elements. Further, the proxy providers or CIM Providers that implement the DevComm classes behave similarly across devices because the DevComm classes provide a uniform view of device properties to the providers. With DevComm, the control operations are specific, but the data queries and property change subscriptions are uniform across devices.","Further, the described implementations protect managed devices from being overloaded with information requests from CIM clients because the access requests to the managed devices are consistently made to update the properties in the pages maintained for the device. Because the CIM client requests are satisfied from the pages and not going to the device directly, the CIM client requests per se do not place any burden on the managed devices. Instead, the requests made directly to the device are limited to the page refresh operations, which occur at regular intervals and place only limited burdens on the device.","In certain above described implementations, property\/value pairs . . . are grouped in pages , . . . as shown in .  illustrates an implementation of a page , such as one of pages , . . . in , including two buffers  and , one denoted as buffer  and the other as buffer . Each buffer  and  may be implemented as a hash table. Each buffer  and  maintains fields for the same property\/value pairs . . . and \u2032 . . . \u2032. For each page , a currentRead pointer  points to the buffer  or  which is currently being used to service requests for property\/value information from CIM providers , . . . . A currentDAQ pointer  points to the buffer  or  which receives refreshed data from a monitored device . A readable variable  indicates which buffer  () or  () is being used to service read requests from CIM clients , () and a acquired variable  indicates which buffer  or  is being used to buffer new property\/value information provided directly from the monitored device .",{"@attributes":{"id":"p-0054","num":"0087"},"figref":["FIG. 6","FIG. 3","FIG. 5"],"b":["220","52","24","242","208","206","1","202","24","26","6","6","6","24","44","44","24","42","42","42","6","6","6","14","14"],"i":["a","b ","n ","a ","n ","a","b ","n ","a","b ","n ","a","b. "]},{"@attributes":{"id":"p-0055","num":"0088"},"figref":["FIG. 7","FIG. 7","FIG. 5"],"b":["220","222","200","202","242","204","300","242","220","242","222","302","210","200","202","212","210","0","200","212","1","202","204","304","210","206","212","220","306","208","220","308","244","244","206","1","202","220","244","244","242","220","204","222","242"],"i":["a","n","a","n"]},"At block , a call is made to a getProperty or getProperties( ) method in the Page( ) class  from a CIM provider to access property values for a device. The Page class  getProperty method is executed to access (at block ) the requested property from the buffer  or  addressed by the currentRead pointer  and return (at block ) the requested property value(s) to the calling CIM provider, which in turn forwards the data to the requesting client.",{"@attributes":{"id":"p-0057","num":"0090"},"figref":"FIG. 8","b":["220","222","208","350","222","220","352","208","244","244","242","220","354","200","202","206","208","356","204"],"i":["a ","n "]},"For each property in the page , a loop is performed at blocks  to . At block , methods of the Page class , such as the diff( ) method discussed above, are called (at block ) to compare each property value in the refreshed buffer, addressed by the currentDAQ pointer , and the previous property value, addressed by the currentRead pointer . If (at block ) the values differ, then a fireChangeEvent( ) method in the DevComm class  is called (at block ) to propagate to registered listeners, as indicated in the listener\/property list  (), the refreshed and current property values that do not match. Control returns to block  to process the next property value in the page . After comparing all the property values . . . in the buffer  or  addressed by the currentDAQ pointer , methods from the Page class  are called to set (at block ) the readable variable  from the current buffer identifier to the identifier of the other buffer and set the acquired variable  from the current buffer value to the value of the other buffer, i.e., switch the buffers that the currentRead  and currentDAQ  pointers reference. The currentRead pointer  is then set (at block ) to address the buffer  or  identified in the updated readable variable  and the currentDAQ pointer  is set to address the buffer  or  identified in the updated acquired variable . The synchronized lock on the page methods is then removed (at block ) to allow requesting CIM Providers to call Page class  methods to access device property values . . . from the read buffer  or  addressed by the currentRead pointer .","The described implementations thus provide techniques for implementing a page of property values accessed from the device. With the described implementations, requestors may access device property information from the page without having to burden the actual device with the requests. Further, the described implementations allow for refreshing of the device property values and still allow concurrent access to the property values. This is accomplished through the use of a double buffer, where each buffer includes fields for every property value for the page, and wherein one buffer is available for read access and the other for updating with newly accessed device data. With this arrangement, the access to the data from the read buffer is permitted while the other buffer is being refreshed with new device data. Further, the switch to make the buffer with the current downloaded data the read buffer is accomplished seamlessly by merely switching the buffer the pointers address to indicate which buffer to use as the read access buffer and which one to use as the update buffer. In this way, in certain implementations, access delays may be limited to the time required to switch the buffers the pointers address.","The above described method, apparatus or article of manufacture for providing access to information on device properties using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d as used herein refers to code or logic implemented in hardware logic (e.g., an integrated circuit chip, Programmable Gate Array (PGA), Application Specific Integrated Circuit (ASIC), etc.) or a computer readable medium (e.g., magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.). Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments of the configuration discovery tool are implemented may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art.","The above described implementations were described with respect to the CIM architecture to allow CIM clients access to device specific information. The described implementations may be applied to component architectures other than CIM, where an interchange protocol is provided to enable clients to access information from different vendor devices.","In the described implementations, the property value information for the devices was maintained in pages in the memory buffer . The term \u201cpage\u201d as used herein refers to any addressable data structure or region of memory that stores property values for one device.","In the described implementations, each page includes property values for one device. In additional implementations, each page may include property values for different devices.","In the described implementation one read buffer and refresh buffer were provided for each page of property values. Alternatively, one or more read buffers and one or more refresh buffers may be provided for each page. Further, each page may have a different number of read and refresh buffers, as opposed to an equal number of read and refresh buffers as shown in .","The above described implementations organized the program code into an object oriented class structure. In alternative implementations, the program operations described herein may be implemented in methods in class architectures other than those described herein. Further, the program operations may be implemented in non-object oriented programming code.","The logic of , , , and  describes specific operations occurring in a particular order. In alternative implementations, certain of the logic operations may be performed in a different order, modified or removed. Morever, steps may be added to the above described logic and still conform to the described implementations. Further, operations described herein may occur sequentially or certain operations may be processed in parallel. Yet further, the described operations may be performed by a single processing unit or by distributed processing units.",{"@attributes":{"id":"p-0067","num":"0100"},"figref":["FIG. 9","FIGS. 1\u20138"],"b":["2","4","4","400","402","404","406","406","406","404","402","408"],"i":["a ","b"]},"The foregoing description of various implementations of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 4 and 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 7 and 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
