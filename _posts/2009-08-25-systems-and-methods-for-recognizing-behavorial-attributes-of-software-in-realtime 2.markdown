---
title: Systems and methods for recognizing behavorial attributes of software in real-time
abstract: A computer-implemented method for recognizing behavioral attributes of software in real-time is described. An executable file is executed. One or more runtime events associated with a behavior of the executable file are traced. The one or more traced runtime events are translated to a high level language. A recognizable pattern of the translated traced runtime events is produced. The pattern is a unique behavioral set of the translated traced runtime events.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542535&OS=09542535&RS=09542535
owner: Symantec Corporation
number: 09542535
owner_city: Mountain View
owner_country: US
publication_date: 20090825
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY","PREFERRED EMBODIMENTS"],"p":["This application is related and claims priority to U.S. Application No. 61\/091,552 filed 25 Aug. 2008 and titled BEHAVIORAL RECOGNITION OF SOFTWARE IN REAL-TIME.","The present invention generally relates to methods, systems and\/or software for providing monitoring or security services to computer systems, and more particularly to a method of and system for recognizing behavior of software in real-time.","Currently, a massive number of unknown executable software and machine code files are created and released around the world every day. Each individual executable file, application, program, piece or package of software, or the like, whether malicious or non-malicious, may be recognized by behavioral based security software if that security software is to be efficient and effective.","Each minor change in compiled software may modify the software's static fingerprint, whether the software is malicious or non-malicious. As the general use of computer systems increases exponentially, new and modified software is being released and installed on computer systems around the world at an accelerating rate.","Methods of obfuscating the static and dynamic makeup of software are continually being created and implemented for various reasons. Methods to evade security solutions based on scanners and emulators are also being implemented. These changes, as well as the accelerating rate of software installation, impose additional burdens for security software solutions to be able to recognize unknown software.","These burdens are causing unacceptable delays in accurate identification of unknown software by security software. This status quo can also cause inaccurate identification of software, resulting in both false positives and false negatives by current security software, such as for example scanners, anomaly detection, and behavioral based security software. As a result, there is a need for a method, system, computer program product, software application, article and\/or computer readable medium of instructions recognizing behavioral attributes of software in real-time.","A server-implemented method for recognizing behavioral attributes of software in real-time is described. An executable file is executed. One or more runtime events associated with the behavior of the executable file are traced. The one or more traced runtime events are translated to a high level language. A recognizable pattern of the translated traced events is produced. The pattern is a unique behavioral set of the translated traced events.","In one embodiment, the recognizable pattern may be distributed to one or more client terminals. The recognizable pattern may be distributed to the one or more client terminals via a web server.","In one configuration, the one or more runtime events are traced using Application Programming Interface (API) calls. In an additional configuration, the one or more runtime events are traced using subroutine calls.","In one example, the high level language describes absolute memory locations of the one or more traced runtime events. In one embodiment, runtime events to translate to the high level language may be manually identified. In another embodiment, runtime events to translate to the high level language may be automatically identified.","A client-implemented method for recognizing behavioral attributes of software in real-time is also described. One or more recognizable patterns are received from a server. The one or more patterns are associated with runtime events of an executable file. An unidentified executable file is executed. Runtime events associated with the unidentified executable file are monitored. The monitored runtime events are associated with a recognizable pattern received from the server. The unidentified executable file is identified based on the recognizable pattern associated with the monitored runtime events.","In one embodiment, kernel based components may be implemented to monitor the runtime events of the unidentified executable file. The unidentified executable file may be identified as a malicious executable file. In another embodiment, the unidentified executable file may be identified as a non-malicious executable file.","A server system configured to recognize behavioral attributes of software in real-time is also described. The system includes a processor and memory in electronic communication with the processor. The server is configured to execute an executable file, and trace one or more runtime events associated with the behavior of the executable file. The server is also configured to translate the one or more traced runtime events to a high level language, and produce a recognizable pattern of the translated traced events. The pattern is a unique behavioral set of the translated traced events.","In a specific, but non-limiting example, the process of recognizable pattern creation and recognition involves different steps being performed at a server side and a client side. These example steps include:\n\n","In a specific non-limiting example, tracing is performed by using API calls, subroutine calls, loaded modules, parameter values, and\/or in-memory data.","Attempts have been made to provide effective security software, as generally discussed below. These attempts have experienced problems in being able to properly recognize unknown software, whether malicious or non-malicious.","Scanner Based Identification\u2014Static, Heuristic and Emulation","Static signature solutions may maintain a database of signatures of known malicious and non-malicious software. These stored signatures may include descriptions of file names, file sizes, checksums, more generic string and data sequences, and some amount of code sequences. While the use of checksums or hashes are relatively fast and most commonly implemented, this approach has proven incapable of keeping pace with the massive quantity of released new or updated software. Emulators may attempt to execute a binary file within the emulator's own isolated virtual environment and thereby identify code and data within the binary file.","1. User Behavioral Profiling and Anomaly Detection","User behavioral profiling and anomaly detection systems observe and learn a user's normal behavior over a specified period of time. After that time interval has elapsed, and the user performs actions that are unusual or unknown for that user, the security software disallows those actions as being out of the ordinary.","2. Software Based Anomaly Detection","Software centric anomaly detection systems observe and learn software actions on a computer system over a specified period of time. Any and all of these actions are then permitted to proceed after the time interval has elapsed.","3. Primitive Behavior Blocking","Behavior blockers may maintain simple rules preventing a user from performing very rudimentary tasks, such as adding an unknown program to a start up location. For example, users may be prompted by the Vista\u00ae operating system for a selected set of configuration changes for any software. Any significant amount of intelligence is lacking from this determination and the user is barraged with a bewildering array of popup dialogs.","4. Advanced Behavior Blocking","Advanced behavioral detection often amounts to a decision left up to a user. While some intelligence is built into such software products, the detection is not deterministic and leaves much of the work up to the user. Recognition is often not \u201cfine grained\u201d enough in these software products to provide accurate recognition of binaries, resulting in false positives and false negatives, and is often supplemented by simple whitelists and blacklists.","In known security systems it is an interesting problem to recognize the behavior of a legitimate toolbar component as consistently repeating the same outbound connections that often may be mistaken for malicious activity on their own, and the toolbar's auto-run modifications as non-malicious activity for that family of executables, while the toolbar's modification of system executables may be recognized as malicious for that binary when infected.","For terms as used herein, the following example definitions are provided for clarity:","Tracing: recording runtime activity by a process thread and its loaded modules via runtime hooks, debuggers, and other monitoring techniques;","False positive: an incorrect recognition by a security solution of non-malicious run-time behavior or the executable code exhibiting the behavior as malicious;","False negative: an incorrect recognition by a security solution of malicious run-time behavior or the executable code exhibiting the behavior as non-malicious;","Blacklist: a simple and specific list of programs known to be malicious, often containing md5 hashes or other checksums;","Whitelist: a simple and specific list of executables known to be non-malicious, often containing md5 hashes or other checksums;","Behavior-based malicious software recognition: recognizing malicious software by observing unusual or harmful activities performed by those programs at runtime.","In a networked information or data communications system, a user may have access to one or more terminals which are capable of requesting and\/or receiving information or data from local or remote information sources. In such a communications system, a terminal may be a type of computer, computer system, processing system, computerised device, personal computer (PC), mobile, cellular or satellite telephone, mobile data terminal, portable computer, Personal Digital Assistant (PDA), pager, thin client, or any other similar type of digital electronic device. The capability of such a terminal to request and\/or receive information or data may be provided by software, hardware and\/or firmware. A terminal may include or be associated with other devices, for example a local data storage device such as a hard disk drive or solid state drive.","An information source may include a server, or any type of terminal, that may be associated with one or more storage devices that are able to store information or data, for example in one or more databases residing on a storage device. The exchange of information (i.e., the request and\/or receipt of information or data) between a terminal and an information source, or other terminal(s), is facilitated by a communication means. The communication means may be realized by physical cables, for example a metallic cable such as a telephone line, semi-conducting cables, electromagnetic signals, for example radio-frequency signals or infra-red signals, optical fibre cables, satellite links or any other such medium or combination thereof connected to a network infrastructure.","The network infrastructure may include devices such as a telephone switch, base station, bridge, router, or any other such specialised network component, which facilitates the connection between a terminal and an information source. Collectively, an interconnected group of terminals, communication means, infrastructure and information sources may be referred to as a network. The network itself may take a variety of forms. For example, it may be a computer network, telecommunications network, data communications network, Local Area Network (LAN), Wide Area Network (WAN), wireless network, Internetwork, the Internet and developments thereof, transient or temporary networks, combinations of the above or any other type of network providing for communication between computerised, electronic or digital devices. More than one distinct network may be provided, for example a private and a public network. A network as referenced in this specification may include any type of terminal or other similar type of electronic device, or part thereof, which is rendered such that it is capable of communicating with at least one other terminal.","The following modes, given by way of example only, are described in order to provide a more precise understanding of the subject matter of a preferred embodiment or embodiments. In the figures, incorporated to illustrate features of an example embodiment, like reference numerals are used to identify like parts throughout the figures.","5. Processing System and Network","A particular embodiment may be realized using a processing system, an example of which is shown in . In particular, the processing system  may include at least one processor , or processing unit or plurality of processors, memory , at least one input device  and at least one output device , coupled together via a bus or group of buses . In certain embodiments, input device  and output device  may be the same device. An interface  may also be provided for coupling the processing system  to one or more peripheral devices, for example interface  may be a PCI card or PC card. At least one storage device , which houses at least one database , may also be provided. The memory  may be any form of memory device, for example, volatile or non-volatile memory, solid state storage devices, magnetic devices, or the like. The processor  may include more than one distinct processing device, for example to handle different functions within the processing system .","Input device  may receive input data  and may include, for example, a keyboard, a pointer device such as a pen-like device or a mouse, audio receiving device for voice controlled activation such as a microphone, data receiver or antenna such as a modem or wireless data adaptor, data acquisition card, or the like. Input data  may come from different sources, for example keyboard instructions in conjunction with data received via a network. Output device  may produce or generate output data  and may include, for example, a display device or monitor in which case output data  is visual, a printer in which case output data  is printed, a port for example a USB port, a peripheral component adaptor, a data transmitter or antenna such as a modem or wireless network adaptor, or the like. Output data  may be distinct and derived from different output devices, for example a visual display on a monitor in conjunction with data transmitted to a network. A user may view data output, or an interpretation of the data output, on, for example, a monitor or using a printer. The storage device  may be any form of data or information storage means, for example, volatile or non-volatile memory, solid state storage devices, magnetic devices, or the like.","In use, the processing system  may be adapted to allow data or information to be stored in and\/or retrieved from, via wired or wireless communication means, the at least one database  and\/or the memory . The interface  may allow wired and\/or wireless communication between the processing unit  and peripheral components that may serve a specialized purpose. The processor  may receive instructions as input data  via input device  and may display processed results or other output to a user by utilizing output device . More than one input device  and\/or output device  may be provided. The processing system  may be any form of terminal, server, specialised hardware, or the like.","The processing system  may be a part of a networked communications system , as shown in . Processing system  may connect to network , for example the Internet or a WAN. Input data  and output data  may be communicated to other devices via network . Other terminals, for example, thin client , further processing systems  and , notebook computer , mainframe computer , PDA , pen-based computer , server , or the like, may be connected to network . A large variety of other types of terminals or configurations may be utilized. The transfer of information and\/or data over network  may be achieved using wired communications means  or wireless communications means . Server  may facilitate the transfer of data between network  and one or more databases . Server  and one or more databases  provide an example of an information source.","Other networks may communicate with network . For example, telecommunications network  may facilitate the transfer of data between network  and mobile or cellular telephone  or a PDA-type device , by utilizing wireless communication means  and receiving\/transmitting station . Satellite communications network  may communicate with satellite signal receiver , which may receive data signals from satellite , which in turn is in remote communication with satellite signal transmitter . Terminals, for example further processing system , notebook computer  or satellite telephone , may communicate with network . A local network , which for example may be a private network, LAN, etc., may also be connected to network . For example, network  may be connected with Ethernet  which connects terminals , server  which controls the transfer of data to and\/or from database , and printer . Various other types of networks may be utilized.","The processing system  may be adapted to communicate with other terminals, for example further processing systems , , by sending and receiving data, , , to and from the network , thereby facilitating possible communication with other components of the networked communications system .","For example, the networks , ,  may form part of, or be connected to, the Internet, in which case, the terminals , , , for example, may be web servers, Internet terminals or the like. The networks , , ,  may be or form part of other communication networks, such as LAN, WAN, Ethernet, token ring, FDDI ring, star, etc., networks, or mobile telephone networks, such as GSM, CDMA or 3G, etc., networks, and may be wholly or partially wired, including for example optical fibre, or wireless networks, depending on a particular implementation.","6. Overview","In one form a system is provided that may include a server-side terminal and a client-side terminal implementing kernel-based process monitoring combined with user level operating system Application Protocol Interface (API) hooks. The user mode components and kernel mode components may monitor processes running in a client terminal (e.g. user processing system ), programmatically examining and auditing software based on runtime events for the purpose of behavioral profile recognition.","In one embodiment, the runtime events may be system and application function calls, temporary and persistent in-memory and on-disk data, abstracted data types and changes to various system characteristics. The events and their sets of occurrence may be translated via a language to describe a behavioral based pattern (i.e., a recognizable pattern) for recognition purposes. This set of events may be distributed to terminals in a network and then interpreted at unknown software runtime to aid in precise real-time behavioral based recognition of known malicious and\/or non-malicious software.","On the server-side terminal, events may be recorded for executable code at runtime for examination and translation via tracing. Process and system events may be traced using injected recording software components and kernel based components. These events may be made up of, for example, recorded system API and subroutine calls, the loaded module making the call, the parameter values passed to these calls, and in-memory and on-disk data. The relationships of these events to each other may be recorded, examined and interpreted.","Events may be manually, automatically and\/or semi-automatically selected and then described using a language. The language may describe absolute memory locations, memory offsets and locations relative to abstract data types like the thread stack, API and subroutine calls and parameter values, and the persistence of values across API calls such as handles to files and network ports. Some of the data described by the language may not be detected by the tracing process and may need to be manually identified, for example but not limited to, using debugging and other monitoring techniques.","On the client-side terminal, events may be monitored for recognition at runtime of unknown software, i.e., unknown or unrecognized at the client terminal at that point in time, using injected user mode components and kernel based components. Based on the collections of events as described by the language, the software activity may be compared against previously obtained recognizable patterns.","In one embodiment, the present method may not be concerned solely with identifying malicious or suspicious actions. The present method may recognize a set of inter-related events associated with an individual piece or package of software or any type of executable file.","The present method of precise real-time behavioral recognition may determine the identity of both malicious and non-malicious software based on the set of inter-related events. Events in this sense may include a more complex and lower level inter-relational set.","Furthermore, the present method of precise real-time behavioral recognition does not use statistical methods for identification purposes. Recognition may be based on the set of inter-related events, and events may not be required to be weighted, rated or scored. In addition, the events may not necessarily be sequential. A set of inter-related events, the events' specific attributes, and inter-relationships may be described by a language and then recognized at run-time. The set as a whole is what is important. In one embodiment, calculations and formulas are not required.","Conceptually, the present method of behavioral recognition is \u201cmany to one\u201d, while current methods of attempting to behaviorally detect malicious activity are \u201cone to many\u201d. The present method of precise real-time behavioral recognition deals with the identification of a set of behaviors and an inter-related set of dynamic characteristics during software execution on a terminal to recognize an individual executable file or piece or package of software.","For example, the present method of behavioral recognition may be used to recognize that a particular internet connection, in light of multiple other in-memory and execution characteristics, is a part of the family of a legitimate Google\u00ae toolbar's ongoing and unknown releases, or on the other hand, is a part of the family of Spyware Gamer's ongoing and unknown releases. Not only is the set recognized, but the corresponding software exhibiting the behavior may be precisely identified as well.","Referring to , there is illustrated a method  of behavioral recognition for software. At step , code, software, an executable file, or the like, may be executed or ran at a terminal. In one embodiment, the terminal may be a server. At step , process and system events may be traced, for example by using the elements of step , including API calls, subroutine calls, loaded modules, parameter values, in-memory data, or the like. At step , a language may be used to translate the traced events and the sets of inter-related events. At step , a recognizable pattern may be produced so that the software, when subsequently executed on another terminal, such as a client terminal, may be recognizable.","Example Events and Sets of Events","Interesting process and system events may include, but are not limited to: File creation, file mapping, file copy, file modification, file read, registry value modification, registry key deletion or creation, code execution from non-loaded-module location, network connection, process creation, process enumeration, thread creation, remote thread creation, memory write, module load, windows hook set, service manager interaction, heap allocation, and\/or memory range protection modification.","The sequence of events may be unimportant, however, identifying a set of events may be significant. For example, a password stealing worm may maintain an unusual set of events that uniquely identify its behavior and runtime memory characteristics. This stealer may enumerate the temporary directory, create a dynamic link library (dll) file there, load the dll file into its own process, find out the name of its own executable image loaded in its process, identify the system directory, copy that on-disk name to the system directory, drop another dll in the system directory, identify itself again, set a registry run key, and then inject position independent code into explorer.exe. That set of events may be recognized at runtime.","Tracing\u2014Injected Software Recording Components","Tracing may be performed by, but is not limited to, injected position independent code within any or all processes, or by a loaded dynamic link library, that places user mode hooks on subroutines of interest. These hooks and their callback code may record system activity. The injection or library load may occur during process creation and startup. Either of these methods may appropriately hook API's and subroutines of interest. This tracing code may identify the process it is tracing by a process identifier (PID), the loaded module within the process that is responsible for a call of interest, the virtual memory location of the call, the identity of the call, call parameters and associated data for the call, and the return result.","In addition to API traces, the user mode components may identify arbitrary in-memory and on-disk data at runtime for matching. This data may be located via relative position to structures like the current thread stack, at absolute virtual addresses, or on-disk.","Tracing\u2014Kernel Based Recording Components","Tracing at the kernel level may include callback routines implemented within device drivers and inline function hooks for file I\/O, registry, process, and network events. The drivers may examine an IRP as it is passed up the stack, holding on to the IRP until analysis is completed. The events identified by these functions may be recorded and notification details may be passed back to the recognition engine in user-mode.","Language and Translation of Events into Recognition Pattern","A high level language may be used to describe these recognizable runtime patterns of events that include both relational variables and the software's actions. One possible format may include a set of relational variables and a set of events.","Events may include tags describing an abstract action, which may be a user mode function call or set of calls, or a filtered kernel mode IRP event. The action may have a subject that it is acting upon, describing the nature of the action. For example, setting a registry value may be represented with a label for the type of action and the object that is being acted on:","WRITE:REGISTRY","The abstract notion of an action may be supplemented with one or more parameter values. These values may specify the data associated with the event. For example, setting a registry key value, where the key string includes \u201cControl Panel\\Settings\\Time\u201d may be specified:","WRITE:REGISTRY PARAM:CONTAINS \u201cControl Panel\\ Settings\\Time\u201d","The pattern may include exact data for the value being written, ambiguous data, or the data may be gathered from a previous action. In this format, the value being set may be gathered from a previous query:","WRITE:REGISTRY PARAM:CONTAINS \u201cControl Panel\\Settings\\Time\u201d DATA:CONTAINS % volume_serial_number %","Recognizable Patterns","Two non-limiting examples of malicious patterns may include relational variables and a set of actions containing those variables. For example, the malware labelled \u201cVundo\u201d may perform the following actions:","Creates the \u201cTime\u201d value in the registry key \u201cControl Panel\\ Settings\u201d,","Queries the \u201cC:\\\u201d volume for the serial number, sets the data belonging to the \u201cTime\u201d value to the serial number,","Creates a \u201cGUID\u201d subkey under the registry key \u201cCLSID\u201d, Registers the \u201cGUID\u201d as a execution hook under the registry key \u201cShellExecuteHooks\u201d.",{"@attributes":{"id":"p-0079","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Recognizable Pattern 1:"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<relational data>"},{"entry":"%time_value%"},{"entry":"%volume_serial_number%"},{"entry":"%GUID%"},{"entry":"<\/relational data>"},{"entry":"<actions>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CREATE:","PARAM:CONTAINS ","DATA:CONTAINS "]},{"entry":["REGISTRY","\u2033Control Panel\\Settings\u2033","\u2033Time\u2033"]},{"entry":["QUERY:FILE","PARAM:IS \u2033C:\\\u2033","DATA:RECORD"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["%volume_serial_number%",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["WRITE:","PARAM:CONTAINS ","DATA:CONTAINS"]},{"entry":["REGISTR","\u2033Control Panel\\",{}]},{"entry":[{},"Settings\\Time\u2033",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["%volume_serial_number%",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CREATE:","PARAM:CONTAINS ","DATA:RECORD "]},{"entry":["REGISTRY","\u2033CLSID\u2033","%GUID%"]},{"entry":["WRITE:","PARAM:CONTAINS ","DATA:CONTAINS "]},{"entry":["REGISTRY","\u2033ShellExecuteHooks\u2033","%GUID%"]},{"entry":"<\/actions>"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In another example, a software package may perform the following uniquely recognizable actions:","Accesses the running process \u201cexplorer.exe\u201d by way of its process identifier,","Checks if the \u201cPhysical Address Extension\u201d processor feature is enabled,","Creates a file mapping supported by the windows \u201cpage file\u201d,","Acquires a pointer to the \u201cNtMapViewOfSection\u201d function,","Makes the file mapping available in memory and writes x86 executable code into the memory,","Makes this file mapping based memory available in the \u201cexplorer.exe\u201d,","Creates a thread in the \u201cexplorer.exe\u201d process to begin execution on this newly mapped memory.",{"@attributes":{"id":"p-0088","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"336pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Recognizable Pattern 2:"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"336pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<relational data>"},{"entry":"%explorer_handle%"},{"entry":"%filemap_handle%"},{"entry":"<\/relational data>"},{"entry":"<actions>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OPEN:PROCESS","PARAM:CONTAINS \u2033explorer.exe\u2033","DATA:RECORD %explorer_handle%"]},{"entry":["QUERY:OS","PARAM:","DATA:IS \u2033Physical Address Extensions\u2033"]},{"entry":["CREATE:FILEMAP","PARAM:IS \u2033PAGE_FILE\u2033","DATA:RECORD %filemap_handle%"]},{"entry":["QUERY:OS","PARAM:","DATA:CONTAINS \u2033NtMapViewOfSection\u2033"]},{"entry":["OPEN:FILEMAP","PARAM:","DATA:IS %filemap_handle%"]},{"entry":["WRITE:MEMORY","PARAM:IS %filemap_handle%","DATA:CONTAINS"]},{"entry":["\u2033EXECUTABLE_CODE\u2033",{},{}]},{"entry":["WRITE:REGISTRY","PARAM:CONTAINS \u2033ShellExecuteHooks\u2033","DATA:CONTAINS %GUID%"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["OPEN:PROCESS","PARAM:IS %explorer_handle% IS %filemap_handle%\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 DATA:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CREATE:THREAD","PARAM:IS %explorer_handle%","DATA: CONTAINS"]},{"entry":["FILEMAP_MEMORY",{},{}]},{"entry":"<\/actions>"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and\/or component described and\/or illustrated herein may be implemented, individually and\/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.","The process parameters and sequence of steps described and\/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and\/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and\/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.","Furthermore, while various embodiments have been described and\/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.","The foregoing description, for purpose of explanation, has been described with reference to specific embodiments. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present systems and methods and their practical applications, to thereby enable others skilled in the art to best utilize the present systems and methods and various embodiments with various modifications as may be suited to the particular use contemplated.","Unless otherwise noted, the terms \u201ca\u201d or \u201can,\u201d as used in the specification and claims, are to be construed as meaning \u201cat least one of.\u201d In addition, for ease of use, the words \u201cincluding\u201d and \u201chaving,\u201d as used in the specification and claims, are interchangeable with and have the same meaning as the word \u201ccomprising.\u201d"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF FIGURES","p":["Example embodiments should become apparent from the following description, which is given by way of example only, of at least one preferred but non-limiting embodiment, described in connection with the accompanying figures.",{"@attributes":{"id":"p-0018","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0026"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
