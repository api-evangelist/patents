---
title: Standard operating procedure automation in database administration
abstract: A plurality of modules and/or engines to manage the operation and health of a plurality of data center assets through the use of standard operating procedures (SOPs). Modules of the present invention are configured to assist IT Administrators to create, and thereafter store in an accessible memory resource, a plurality of SOPs. These SOPs define procedures to address various data center asset informational states. An asset's state information is monitored, collected and analyzed to determine, based either on a predetermined rule set or on manual input from an authorized IT Administrator, whether one or more SOPs will be applied to a particular data center asset. These SOPs can be combined and/or executed on the asset either automatically or manually.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08738753&OS=08738753&RS=08738753
owner: Hewlett-Packard Development Company, L.P.
number: 08738753
owner_city: Houston
owner_country: US
publication_date: 20090316
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is a continuation of application Ser. No. 11\/953,563, filed Dec. 10, 2007, which is a continuation in part and claims the benefit of U.S. application Ser. No. 11\/770,454, filed Jun. 28, 2007, which claims the benefit of U.S. Provisional Application No. 60\/806,226 filed Jun. 29, 2006, all of which applications are herein specifically incorporated in their entireties by this reference.","1. Field of the Invention","Embodiments of the present invention relate, in general, to management of data center assets, and particularly to establishing standard operating procedures to automate the administration of these data center assets.","2. Relevant Background","Many commercial applications, including financial management systems, payroll applications, customer relationship management systems, web services, enterprise resource planning systems and commercial database applications such as Oracle, DB2, MySQL and SQL Server all operate on physical servers, interconnected via a network and collectively comprise what is termed a data center. Operating systems, networks, network management systems, storage systems, storage management systems and software applications are hereafter referred to as \u201cdata center assets\u201d. Enterprises worldwide spend billions of dollars annually in managing and administering such data centers. Data center administration is the process of establishing applications, servers, and networks, and ensuring their integrity, recoverability, security, availability, reliability, scalability and performance. Information Technology (\u201cIT\u201d) Administrators (which may encompass such roles as \u201cDatabase Administrators (DBAs) who handle database application specific tasks, Network Administrators who handle network connectivity tasks, Storage Administrators who handle storage subsystem tasks and Systems Administrators who handle general operating system administration and others) collectively manage the data center environment. They identify user requirements, set up physical servers, install operating systems and applications on these servers, periodically upgrade operating system and application software and monitor the overall performance of all data center assets. Because they also may design and implement system security, IT Administrators often plan and coordinate security measures as well. With the volume of sensitive, mission critical data generated being managed by these servers and applications, data integrity, backup systems, and security have become increasingly important aspects of the job of IT Administrators. While certain tools are used to assist in the completion of some of these tasks, the bulk of the work today is done manually.","The average data center environment involves one or more IT Administrators (usually in specific DBA or system administrator roles). Regardless of the role played, an IT Administrator uses specific software tools and scripts to assist with the setup, monitoring and maintenance of the data center assets. The larger the environment, the higher the number of IT Administrators and tools and scripts in use. These tools primarily assist with monitoring a specific asset (e.g., a server, database or application) and\/or provide a graphical user interface to assist in performing a given task without the IT Administrator having to remember the underlying computer command syntax. While this is useful, the majority of the work has to be manually determined, performed and managed by the IT Administrator. This is because the work is typically driven by user requests, environmental changes, change control requests, configuration management requests, release management requests and so on\u2014many of which require human intervention to communicate with external users and the various types of IT Administrators such as Systems Administrators, Storage Administrators, Network Administrations and Application Support personnel. Furthermore, IT Administrators are often separated by geography and time zones. As such, their work habits differ resulting in a lack of standardized work procedures and inconsistent results. It is common to find a team of three IT Administrators having three different approaches and\/or methods to work on the same task in their given environment. This causes significant differences in quality of work and allows human errors to alter the reliability of the product.","As with most processes involving human interaction, some IT Administrators tend to be better than others. Often these presumably senior IT Administrators are busy with tasks such as low-level and mundane caring and nurturing of the server or database environments and, therefore, do not have sufficient time to engage with business users to better understand where a business is going so as to architect and tune the data center environment accordingly to scale with the business. Many critical proactive tasks such as capacity planning, physical modeling, application\/database optimization, operating system\/database optimization and other areas of proactive performance management are simply not accomplished due to constraints on the IT Administrator's time.","The tools by which IT Administrators practice their trade vary widely. As indicated earlier, generally these tools can be classified into two broad categories. The first category is that of monitoring and alerting tools. Based on pre-established criteria, these tools monitor the performance of a particular data center asset, and, upon meeting or exceeding a pre-defined threshold, an alert is sent to the administrator. The administrator can then assess the alert and, when necessary, alter the asset either immediately or per a pre-established maintenance window. In the situation in which a data center asset needs modification, the second class of tools is introduced. This second class of tools is known in the art as an ad-hoc task performance tool. Once alerted to a problem, an IT Administrator uses a variety of ad-hoc task performance tools to manipulate the asset. Unfortunately, there is no standard approach as to what modifications should be made or the process by which to make these modifications. The steps taken by the administrator are purely a function of the experience and creativity of that individual. Therefore, the same problem identified by a monitoring tool alerting two separate IT Administrators may result in two completely different and perhaps incompatible solutions creating an even wider data center failure.","IT Administrators, especially Database Administrators, Network Administrators and application-specific experts are some of the most expensive resources in a typical Information Technology organization. Enterprises typically strive to have each administrator adhere to a standard of work based on best practices as defined by the senior-most administrator within his or her area of expertise (e.g., each DBA would adhere to a standard set of best practices as defined by the senior DBA). Yet these best practices are only as good as the tenure of the defining senior-most administrator and the willingness and\/or capability of a junior administrator to adhere to these standards. The ability for administrators to understand the state of the data center assets they manage at all times and acknowledge any deviations in performance of those assets remains a challenge, especially for junior administrators. Achieving consistent and reliable data center management remains a challenge for as the value of such administrative resources increases, so too does the mobility of the work force. Enterprises continue to search for a means to standardize and, when possible, automate the work of the entire administrative team thus freeing the members of the team to take on the more proactive, value added tasks.","Briefly stated, embodiments of the present invention involve data center administration and more specifically systems and methods for capturing best practices of data center administrators in the form of standard operating procedures (\u201cSOPs\u201d) and applying these SOPs in an automatic manner to a wide variety of data center assets. One embodiment of the present invention comprises a plurality of modules and\/or engines that manage the operation and health of a database. According to one embodiment of the present invention, one such module is configured to assist senior IT Administrators to create, and thereafter store in an accessible memory resource, a plurality of SOPs. In anther embodiment of the present invention this memory resource may be a central repository. These SOPs define procedures to address various data center asset's informational states. While many of the SOPs are specific to a particular type of data center asset, others are compatible with multiple forms of assets. Each of the SOPs identified as being compatible with a particular type of asset is compatible with each other SOP configured for that asset type (e.g., a specific database type such as Oracle or a specific web server type such as Microsoft IIS). These SOPs can be combined either automatically or manually and applied to data center assets to provide consistent and reliable operations.","Another aspect of the present invention includes a module to monitor asset informational states and associated environmental policies. The present invention includes the capability to monitor the state of an asset and to collect information about that state. The information is then conveyed back to central repository wherein it is stored and\/or analyzed to determine the health of the asset, identify any deviations, and execute one or more SOPs to correct the deviation in conformance with certain policies associated with that asset's environment. According to another aspect of the present invention, alerts or notifications are generated based on a rule set when the informational state of an asset reaches or exceeds pre-defined thresholds or deviations from a pre-established baseline. The alert can trigger an automatic response by the system of the present invention by executing one or more SOPs in the associated asset(s) and\/or be presented to an IT Administrator for manual intervention.","According to another aspect of the present invention the system can receive from an IT Administrator or other authorized user a tasking request that identifies one or more SOPs directed at accomplishing a particular modification of one or more data center assets. These tasks can include, but are not limited to, installation of operating system software or other application software on server machines, operating system or application software updates (patches), updating of ticketing or other task-tracking systems within the environment, adjusting of various performance parameters within the operating system or other application software, asset data backup and restoration, storage configuration adjustment, management of asset memory resources, and data migrations. SOPs addressing these and other issues can be retrieved from a storage resource and, if necessary, linked with other compatible SOPs so as to accomplish a desired modification to a particular data center asset. Once selected and retrieved, the SOPs are, according to one aspect of the present invention, conveyed to the appropriate data center asset and executed so as to achieve the desired modifications.","The features and advantages described in this disclosure and in the following detailed description are not all-inclusive, and particularly, many additional features and advantages will be apparent to one of ordinary skill in the relevant art in view of the drawings, specification, and claims hereof. Moreover, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and may not have been selected to delineate or circumscribe the inventive subject matter; reference to the claims is necessary to determine such inventive subject matter. Lastly, embodiments of the present invention are shown by way of example including how one specific data center asset, a database environment as managed by database administrators (DBAs rather than the more general IT Administrators), is implemented within the invention. However, a database environment is like any other data center asset in its implementation by the invention and, indeed, one could substitute any other data center asset (e.g., a web server as managed by a web server administrator) and this example would still hold true.","The Figures depict embodiments of the present invention as applied to a specific data center asset, a database environment managed by DBAs, and are for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed to a variety of other data center assets (as itemized previously) without departing from the principles of the invention described herein.","Specific embodiments of the present invention are hereafter described in detail with reference to the accompanying Figures. Like elements in the various Figures are identified by like reference numerals for consistency. Although the invention has been described and illustrated with a certain degree of particularity and has specifically been related to a database environment managed by DBAs (one of many types of data center assets), it is understood that the present disclosure has been made only by way of example, and that numerous changes in the combination and arrangement of parts as well as application to other data center assets can be resorted to by those skilled in the art without departing from the spirit and scope of the invention.","A system for database administration, according to one embodiment of the present invention, is shown in . Interposed between a server  housing a plurality of databases  and one or more database administrator interfaces  is a SOP module  which, in this embodiment, is housed within a database administration server . Communicatively coupled to the database administration server  and thus in communication with the SOP module  are one or more memory resources  housing, among other things, a plurality of SOPs and task recipes.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 1"],"b":["100","100","210","220","230","240","245","220","270","260","250","210","220"]},"As mentioned, collection engine  includes a monitoring module , an analysis module , and a reporting module . Each database operates on a specific platform and in many cases a unique operating system. Yet each database environment possesses state information reflecting its ability to carryout its assigned database role. This information includes data regarding the database itself as well as information regarding the operating system and platform on which the database exists\/operates. The monitoring module , according to one embodiment of the present invention, identifies various state information and associates it with each specific database. Once identified, the monitor module  periodically collects state information regarding that database as well as any deltas ongoing in the database environment. The state information collected by the monitoring module  is stored in the memory resource  forming one or more separate repositories of information. One skilled in the relevant art will recognize that the memory resource  need not be a single memory medium. Indeed the memory resource  may comprise multiple storage mediums distributed throughout a distributed network such as in a storage area network or may reside in dedicated volumes of a storage medium at a single location.","Another aspect of the collection engine  is the analysis of the collected database state information so as to ascertain the health of the database and the database's ability to carry out its tasked operations. The analysis module  employs a plurality of mathematical models including linear regression, queuing theory, simulations (using various simulation techniques known in the art), fuzzy logic and the like. Each of these techniques used separately or in conjunction with one another (along with others known by one skilled in the relevant art of data analysis) aids the analysis module  in determining whether the database is performing optimally.","According to one embodiment of the present invention, the collection engine , via the products of the monitoring module  and the analysis module , creates an alert when it recognizes that the database fails to meet one or more pre-established criteria. The alert can be thereafter communicated to a DBA via the DBA interface  and\/or be a trigger by which to initiate an automatic response. Indeed according to one embodiment of the present invention an alert issued by the collection engine  generates a tasking request automatically to address and heal the underlying cause of the alert. In such a manner the SOP module  provides an automatic means by which to identify database problems and fix them based on predetermined rules using predetermined scripts of specific SOPs.","Another aspect of the present invention includes rule sets used by the analysis module  to identify those aspects of the collected information forming the basis of an alert as well as what corresponding action to undertake once a condition has been identified. Rule sets are created and stored in the memory resource  along with the SOPs and the task recipes and are accessed by the analysis module  to identify symptoms of database problems. Identified symptoms are diagnosed and a plan of action is formulated to resolve the problem. As with SOPs, the rule sets can be fashioned to be universally applied to all databases or specific to a particular database environment. As with SOPs, rule sets can be modified by DBAs possessing proper privileges.","The collection engine  can, in another embodiment of the present invention, automatically gather environmental meta-data rather than hard-coded environmental properties. Indeed the collection engine  can collect information from the operating system on which the databases  operate as well as other applications on the database server . In this manner the collection engine  can capture the environment on which the database operates. This captured data can be further analyzed and\/or reported. For example, in a DBClone call syntax, the source and target server and database names are passed as parameters. Other properties and environmental attributes regarding the source and target databases (such as database size, DBMS Vendor (Oracle, IBM DB2, MS SQL Server, etc.), software installation directory areas such as ORACLE_HOME values, data-file locations & sizes, etc.) are all maintained and retrieved from the memory resource . Such properties are referred to as meta-data. Automatically collecting and using such meta-data from the repository avoids human errors.","The reporting module  interacts with the monitoring module  and the analysis module  to prepare and present reports on the database environment. This, according to one embodiment of the present invention, can include database state information as well as metadata and other information about the database server . Furthermore, the reporting module  can, in another embodiment of the present invention, operate independent of the management engine  to provide the DBA with information regarding the environment of the database(s) . For example the monitoring module  can facilitate the collection of operating system information about the database server  to provide the DBA, or similar personnel, with reports regarding the environment in which the databases operate. These reports can be formatted and presented to the DBA in several configurations to facilitate database administration.","Beyond collecting and analyzing existing state information regarding each of the plurality of databases  that the SOP module  administers, the present invention also collects information regarding the status of ongoing and past execution of SOPs. According to one embodiment of the present invention the management engine  communicates with the collection engine  the issuance of SOPs to a particular database. Thereafter the collection engine  can monitor and collect data regarding the execution of those issued SOPs. Furthermore, the monitor module  directs database state information regarding the execution of a requested task to the memory resource  for storage and later analysis. The analysis module  thereafter can conduct an analysis of the database state information with respect to the tasked SOPs to determine whether the SOPs were effective. Reports in various formats conveying the results of such an analysis as generated by the reporting module  can be presented to a DBA via the DBA interface . Audits and compliance information regarding database performance can also be generated and reported via the report module . In another embodiment of the present invention, the collection of database state information reflective of the execution of a tasked SOP can be conveyed to and displayed by the DBA interface in real-time. This real-time presentation of the effectiveness of a particular SOP provides the DBA with useful feedback and assists in the DBA's determination of issuing (or cancelling) additional task requests.","The collection engine  works in conjunction with the management engine  to administer a plurality of databases. One aspect of the management engine  is the SOP creation module . According to one exemplary embodiment of the present invention SOPs are created by senior DBAs and stored within the memory resource  using the SOP creation module. The memory resource  is a separate data repository apart from the databases being administered. Each database environment typically includes a set of procedures that are followed on a day-to-day basis to configure and maintain each database. The SOP creation module  captures these procedures, as known by experienced and senior DBAs, and stores them in the memory resource . According to one embodiment of the present invention a template can be used to aid in the creation of a plurality of SOPs for a variety of database environments and for a variety of tasks. A plurality of best practice SOPs addressing a variety of situations for a variety of database types and environments are created and stored by the SOP creation module. Once created and stored, the memory resource  represents a repository of database administration knowledge. Overtime, modification of the existing SOPs combine the knowledge of multiple DBAs to arrive at effective and consistent database administration tools. According to another aspect of the present invention, existing SOPs can only be modified by certain DBAs. A security module (not shown) is coupled to the creation module  so as to limit editorial access to the existing SOPs. In that manner the quality of the SOPs can be maintained and controlled.","Database environments include databases managed using Oracle, DB2, MySQL and SQL Server technology. Each SOP is created, according to one embodiment of the present invention, so as to be compatible with each other SOP. In such a configuration SOPs can be linked together to accomplish various assigned tasks. In other embodiments SOPs are grouped based on a particular database environment so as to be compatible within that environment. This includes the policies that are prevalent for a particular database environment. Thus SOPs exist addressing multiple tasks for multiple database environments.","Another aspect of the SOP creation module , and according to one embodiment of the present invention, is the creation of a task recipe. A task recipe is a user friendly description of the functionality of each SOP and each task recipe, according to one embodiment of the present invention, is stored in the memory resource  associated with one or more SOPs. SOPs are often written in such a manner that fails to easily convey the outcome of executing such a SOP. This is because each SOP must be cognizant of the database environment in which it will be executed and with each other SOPs with which is must be compatible. While the meaning of such an SOP may be forthcoming to the senior DBA that created it, to a junior and unfamiliar DBA the value of such a SOP may be fleeting. The task recipe can be displayed and\/or selected by a DBA via the DBA interface  to facilitate database administration. Thus a task recipe provides DBAs with all levels of experience an easily read and understood interpretation of the SOPs value.","Each task recipe corresponds to one or more SOPs and each SOP may be associated with one or more task recipe. As will be described more fully in the sections that follow, SOPs can be generally classified as either a task-based SOP or a healing-based SOP. Task based SOPs specify how and under what circumstances certain repetitive, time-consuming and\/or man-power intensive database administration tasks are to be performed. Healing SOPs are designed to resolve an identified or prospective problem with a database. These problems are identified by the database monitoring  and analysis  modules.","The management engine also includes a scheduling module  and a control module . The scheduling module  acts to manage retrieval of particular SOPs from the memory resource  based on a task request. Task request can be received by the SOP module  by several means. As previously discussed, the issuance of an alert by the collection engine  can generate an automatic task response to resolve the alert. In another embodiment of the present invention, a user may manually issue a task request. Task requests can include, but are not limited to, database backups, database refreshes, database cloning, running database health-checks, managing database memory resource space, database coalescing, rebuilding fragmented database segments, analyzing database optimizer statistics, performing database root cause analysis, database patching, database upgrades, database migrations, and database server migrations. Each one of these, and other database tasks as would be known or contemplated by one skilled in the art, can be accomplished by one or more SOP.","The present invention, via the scheduling module , associates each task request with a task recipe and thereafter one or more appropriate SOP. For example, assume a junior DBA attempts to manage a particular database's memory resource space. Using the DBA interface  the junior DBA conveys a task request to the scheduling module  of the management engine . Based on the information provided by the DBA through the DBA interface , the scheduling module  determines what task recipes need be accomplished to meet the issued task request. In some cases a single recipe is necessary while in others a plurality of recipes may be involved.","A task recipe identifies for each particular database environment one or more SOP. Thus a task request for database memory management may be associated with several task recipes. Each task recipe may be in turn associated with several SOPs. These task recipes and SOPs may, in some instances, require execution in particular order. The scheduling module  undertakes this task for the DBA. Once the task request is received, the scheduling module  identifies which, if any, task recipes are involved, and based on the target database environment and policies, retrieves the appropriate SOPs from the memory resource . The scheduling module  can, when necessary, link SOPs\/task recipes so as to accomplish a tasking request. In an alternative embodiment of the present invention, task recipes themselves are displayed to the DBA via the DBA interface . DBAs can choose from the listed task recipes for a particular database environment and in that manner, form a task request of manually linked SOPs.","Once the appropriate SOPs are retrieved, the scheduling module  ascertains the database's availability. As will be appreciated by one skilled in the art, the execution of some SOPs may impact the database's ability to perform its primary function. Thus the scheduling module , knowing the SOPs that are being directed toward a particular database, and knowing the extent of the impact the SOP may have on the database, schedules the implementation of the SOPs on the target database with the control module . Once scheduled, control of the execution of the SOPs on the target database is handled by the control module . In one embodiment of the present invention, the scheduling module  schedules the execution of task requests during one or more specific time intervals. For example, a database maintenance request may be scheduled to be executed during times when the database is idle. Alternatively, a tasking request may be reoccurring periodically so as to maintain the database in an optimal condition. According to another embodiment of the present invention, the scheduling module  may present to the control module  one or more SOPs to be executed on a database within a particular time window such as a time of known minimal operational impact. In such an instance the control module  is free to manage the execution of the SOP so long as it does so within the established criteria.","The scheduling module  can, in another embodiment of the present invention, manage operational conflicts with tasking requests. As a plurality of tasking requests are issued and targeted at one or more databases within a specific environment, a conflict may exist with respect to the execution of the SOPs. Also the operational impact executing a plurality of SOPs on a plurality of databases simultaneously may be unacceptable. Based on pre-established criteria for each database environment as contained in the database environment policies, the scheduling module  can prioritize and manage the execution of each SOP. Another aspect of the present invention is to provide each tasking request with a priority level. This priority level aids the scheduling module  in identifying the importance of an execution order and how it will impact operational constraints of a particular database. For example, a high priority tasking request may, based on database environment policies, be sufficient to remove the database from operational status while the appropriate SOPs are executed while a low priority tasking may be queued until the database is undergoing scheduled maintenance during a period of low activity.","The execution of the retrieved SOPs on the database is controlled by the control module . The control module  oversees the execution of the SOP on the module and establishes the necessary communicational links between the database administration server  and each database  as required. Once the SOPs are retrieved and scheduled, the control module  executes the SOP at the target database . In addition and according to one embodiment of the present invention, the control module  enables a DBA, via the DBA interface , to monitor the execution of the SOP on the database in real-time. As the execution is ongoing and state information is relayed back to the DBA interface , the DBA can make qualitative assessment as to the progress and effectiveness of the tasked SOPs. The SOP can also manually intervene (assuming the DBA possesses adequate privileges) in the execution of the SOP and, when necessary, modify the SOP in real-time.","According to another aspect of the present invention, the control module  automatically executes SOPs based on generated alerts or scheduled maintenance. Rather than receiving tasking responses from a DBA, the control module  receives alerts and corresponding tasking requests generated from the analysis module . Once received, the control module  acts as the authorizing entity based on pre-determined criteria and automatically executes the appropriate SOPs. In this manner, DBA interaction with day-to-day maintenance and other routine functions can be eliminated.","Prior to executing an SOP and according to another embodiment of the present invention, the control module  of the management engine  will check the current user's (DBAs) credentials and ensure that (s)he is authorized to execute an SOP for the specified platform. An underlying security table holds information on which users (DBAs) are allowed to view, create\/modify SOPs, documents, or corresponding automation routines for a particular database. When a user wants to perform an action in the SOP Module  (view an SOP, create\/edit an SOP or automation routine or run an SOP, etc), the user's username\/password is checked. When this is accurate, privileges are retrieved and verified. When this person has the authority to read or write SOPs for that database (s)he is allowed to view or modify SOPs and related objects. Should the privileges allow, the user may be authorized to execute SOPs for a particular database and\/or to run an SOP for that database.","The DBA interface  acts as a gateway for DBAs to create, manage and interact with the SOP module . The DBA interface  also can act as a means by which to present to a DBA reports regarding database state information and other related data as generated by the report module . According to one embodiment of the present invention, the DBA interface  may be a personal computer, personal data accessory (hand held device) or similar apparatus coupled to a network capable of communicating with the database administration server  and there-through the plurality of databases . Although not required, the invention can be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer or server including the DBA interface  and the database administration server . Thus one or more modules associated with the SOP module  may reside on and be executed by the DBA interface . Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers and the like. The present invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices yet remain separate from the database environment.","An exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer or the like acting as the DBA interface . Such a computer includes a processing unit, a system memory, and a system bus that couples various system components including the system memory to the processing unit. The system bus may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM) and random access memory (RAM). The DBA interface  may further include a hard disk drive for reading from and writing to a hard disk, a magnetic disk drive for reading from or writing to a removable magnetic disk, and an optical disk drive for reading from or writing to a removable optical disk such as a CD-ROM, Solid State Drives or other optical media. The hard disk drive, magnetic disk drive, and optical disk drive are connected to the system bus by a hard disk drive interface, a magnetic disk drive interface, and an optical drive interface, respectively. The drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer. Although the exemplary environment described herein employs a hard disk, a removable magnetic disk and a removable optical disk, it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, Solid State Drives, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary operating environment.","A number of program modules including those of the SOP module , collection engine  and the management engine  may be stored on a hard disk, magnetic disk, optical disk, ROM or RAM. A DBA may enter commands and information into the DBA interface  through input devices such as a keyboard and pointing device. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor or other type of display device is also connected to the system bus via an interface, such as a video adapter. In addition to the monitor, personal computers like the DBA interface  typically include other peripheral output devices, such as speakers, printers, mobile phones, and other hand held devices.","The DBA interface  may operate in a networked environment using logical connections to one or more remote computers, such as the database administration server . The database administration server , or any other remote computer affiliated with the database administration system  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer. The DBA interface  and database administration server  further include logical connections so as to be able to communicate via a local area network (LAN) and (in necessary) a wide area network (WAN). Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet.","When used in a LAN networking environment, the DBA interface  is connected to the local network through a network interface or adapter. When used in a WAN networking environment, the DBA interface  typically includes a modem or other means for establishing communications over the wide area network, such as the Internet. The modem, which may be internal or external, is connected to the system bus via the serial port interface. In a networked environment, program modules depicted relative to a personal computer, or portions thereof, may be stored in the remote memory storage device.","As suggested, the DBA interface  may also serve as a network gateway. As a gateway the DBA interface  may also be directly coupled to one or more devices using a communications link. Although not shown in , the DBA interface  may also be coupled to a storage device (such as the memory resource ).","Those skilled in the art will appreciate that the DBA interface  may be located a great geographic distance from the plurality of databases , the database administration server  or the memory resource , and similarly, each of these devices may be located a substantial distance from each other. For example, the database administration server  may be located in California, while the DBA interface  may be located in Texas, and one or more of the databases  may be located in New York.","In preferred embodiments, the present invention is implemented in software. Software programming code which embodies the present invention is typically accessed by the microprocessor (e.g. of the DBA interface  and\/or database administration server ) from long-term storage media of some type, such as a CD-ROM drive, Solid State Drive, or hard drive. All SOPs are coded within the DBA interface  in an open, industry-standard scripting language (such as Python, Perl or JavaScript.) Korn Shell (ksh) can also be used since it is available on most UNIX and Linux platforms and a specific flavor of ksh is also available for Windows environments. Alternatively, batch (.bat or .cmd) scripts or JavaScript can be written for Windows. Or Perl or Python can be used universally for all database environments. The present invention enables automation routines to be created in simple scripting languages that DBAs will understand and follow, thereby allowing them to customize any SOPs prior to their utilization. Any SOP automation scripts that require confidential data such as certain file-locations to be embedded within them can be written in a compiled language such as C to avoid such information from being exposed (as in a script).","The software programming code may be embodied on any of a variety of known media for use with a data processing system, such as a diskette, hard drive, flash drive, or CD\/DVD-ROM. The code may be distributed on such media, or may be distributed from the memory or storage of one computer system over a network of some type to other computer systems for use by such other systems. Alternatively, the programming code may be embodied in memory, and accessed by a microprocessor. The techniques and methods for embodying software programming code in memory, on physical media, and\/or distributing software code via networks are well known and will not be further discussed herein.","A user of the present invention (e.g. a DBA) may connect his computer to a server using a wireline connection, or a wireless connection. (Alternatively, the present invention may be used in a stand-alone mode without having a network connection.) Wireline connections are those that use physical media such as cables and telephone lines, whereas wireless connections use media such as satellite links, radio frequency waves, and infrared waves. Many connection techniques can be used with these various media, such as: using the computer's modem to establish a connection over a telephone line; using a LAN card such as Token Ring or Ethernet; using a cellular modem to establish a wireless connection; etc. The user's computer (i.e. DBA interface ) may be any type of computer processor, including laptop, handheld or mobile computers; vehicle-mounted devices; desktop computers; mainframe computers; etc., having processing capabilities (and communication capabilities, when the device is network-connected). The remote server, similarly, can be one of any number of different types of computers which have processing and communication capabilities. These techniques are well known in the art, and the hardware devices and software which enable their use are readily available.","When implemented in software, the present invention may be implemented as one or more computer software programs and preferably implemented using an object-oriented programming language. The model which is used for describing the aspects of software installation packages is preferably designed using object-oriented modeling techniques of an object-oriented paradigm. In preferred embodiments, the objects which are based on this model, and which are created to describe the installation aspects of a particular installation package, may be specified using a number of approaches, including structured markup language documents (such as XML documents); object descriptors of an object modeling notation; or Object REXX or objects in an object scripting language having similar characteristics.","An implementation of the present invention may be executed in a Web environment, where software installation packages are downloaded using a protocol such as the HyperText Transfer Protocol (HTTP) from a Web server to one or more target computers which are connected through the Internet. Alternatively, an implementation of the present invention may be executed in other non-Web networking environments (using the Internet, a corporate intranet or extranet, or any other network) where software packages are distributed for installation using techniques such as Remote Method Invocation (\u201cRMI\u201d) or Common Object Request Broker Architecture (\u201cCORBA\u201d). Configurations for the environment include a client\/server network, as well as a multi-tier environment. Or, as stated above, the present invention may be used in a stand-alone environment, such as by an installer who wishes to install a software package from a locally-available installation media rather than across a network connection. Furthermore, it may happen, although not recommended, that the client and server of a particular installation both reside in the same physical device, in which case a network connection is not required. (Thus, a potential target system being interrogated may be the local device on which an implementation of the present invention is implemented.)","As previously discussed, tasking requests can be generally categorized as task-based request or a healing request. Task-based SOPs or Auto-Tasks are SOPs that specify how and under what circumstances certain repetitive, time-consuming and\/or manpower-intensive DBA tasks are to be performed. Task-based requests include, but are not limited to doing a backup, cloning a database, database health checks, database coalescing, rebuilding fragmented or invalid database segments, data pruning and database memory space allocation.","Backing up a database is one the most common and routine tasks of a DBA. According to one embodiment of the present invention, the SOP module  would initiate the appropriate backup mode (say, Oracle RMAN, hot backup script, cold backup, data export, etc.), alerting the on-call DBA should the backup SOP fail to initiate or hang up during execution. The backup also parses the backup log to ensure backup was successful. When the backup fails due to a pre-determined condition, such as full disk-space, this condition can be identified to the control module  and a follow-on automated SOP can be triggered to free up space. Environment-specific pre- and post-tasks can be added to further customize the SOP routine prior to implementation.","Database cloning includes refreshing the environment with an appropriate backup (previous night or a specific earlier date), confirming the refresh was successful, renaming files or moving files to other locations when required, etc. This SOP can also be customized to perform certain environment\/application specific pre- and post-refresh tasks.","Task-based SOPs also include running a release in the database by extracting the right code module and version, scheduling it to run during a pre-determined release window and reporting on the results. When the execution was not successful, a follow-on SOP can be run to rollback the release.","Healing actions are formed based on correcting an identified database problem. These SOPs can be automatically triggered in response to a problem alert or manual DBA action. When a SOP fails, then a follow-on SOP can be triggered or as a last resort, human DBAs are alerted in a pre-approved escalation format. In most problem cases healing action SOPs resolve problems without human intervention. Regardless of whether the problem is successfully resolved by the healing action or not, a trouble-ticket is created and saved either within the memory resource  for later access, and\/or redirected to a pre-configured customer trouble-ticketing system. This information is provided to relevant DBA personnel conveying that such a problem occurred, the results of any resolution attempts, and a time-stamp for the problem and resolution.","As previously discussed with respect to the monitor module  and the analysis module , healing actions can be triggered in response to certain events being monitored. Each of these events is defined in one or more rule sets. A rule set comprises one or more individual rules. Like SOPs and task recipes, rule sets are created by senior DBAs and stored in the memory resource .","Healing actions include but are not limited to starting or restarting a database, resolving locking conflicts, resolving space and segment errors, and excessive user response times or excess queues.","According to one embodiment of the present invention an SOP would define how the DBA should react when he\/she finds that a database is down. For instance, during certain times of the day or week, a cold backup could be in progress and hence the database could be down (non-operational). The tasked SOP in this case, would define, based on a service level agreement, when the database is expected to be up versus down and what processes need to be started up at the database (like the listener, the Names\/LDAP server, etc.) and what sequence needs to be followed in starting up these processes. Such procedures may vary from site to site or application to application and as such, they need to be documented in the form of an SOP and followed by all DBAs working at that site. Based on such an SOP, the healing action would attempt to restart the database and any associated processes.","Similarly and according to other embodiments of the present invention, healing action SOPs work to resolve locking conflicts (deadlocks or blocked locks, etc.), space (or lack thereof) errors and segment errors. Another aspect of healing tasks is to resolve excessive response or access time. When user response time or transaction queues begin to exceed a certain threshold a healing task may be initiated to resolve such a problem. Situations such as nightly data load process aborts due to too many data errors in the incoming data stream (such as duplicate records or orphaned records) or the nightly data load process running longer than it normally does and thus running into the next job window (such as a pre-scheduled backup causing both jobs to now run slowly and into business hours) are examples of timing issues that can be resolved by healing task SOPs.","According to one embodiment of the present invention an application programming interface (API) can be invoked within the SOP Module  or by other third party application in the enterprise (such as Kintana, AutoSys, cron, etc.) via standard API syntax. For example, when executing an SOP, the SOP name is referred to (as the API name) and appropriate parameters are passed with the call. Any SOP API call can request a valid username\/password, unless the calling username is part of a pre-authorized operating system group (on UNIX and Windows only). In such a case, no password would be expected, but a username still is required for validation and privilege verification.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIGS. 3 and 4"},"Accordingly, blocks of the flowchart illustrations support combinations of means for performing the specified functions and combinations of steps for performing the specified functions. It will also be understood that each block of the flowchart illustrations, and combinations of blocks in the flowchart illustrations, can be implemented by special purpose hardware-based computer systems which perform the specified functions or steps, or combinations of special purpose hardware and computer instructions.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 3","b":["305","310","320"]},"According to one embodiment of the present invention the creation and storage of SOPs is ongoing, in that as more expertise is gained and\/or other database environments are considered, new and improved SOPs are added to the repository. In this manner DBAs accessing the repository to create tasking requests or tasking response can choose from a plurality of SOPs offering a multitude of best practices.","While the SOP repository grows, the state information of each database under the care of the SOP module , is monitored . State information from each database is periodically collected  and stored at the memory resource . This collected state information is, according to one embodiment of the present invention, analyzed using various mathematical techniques as disclosed herein, and based on rule sets established by DBAs. Each rule set determines which parameters of database state information or deltas in such information, trigger a response from the SOP module. As the state information is being analyzed a query  is placed based on the rule set to determine whether an alert should be generated. When the response to the query is negative, the collection engine  continues to monitor, collect and analyze database state information.","When the response to the query  is affirmative the management engine  responds by issuing an alert. Based on at least one of the rule sets the control module  and the scheduling module  of the management engine ascertains  whether an automated tasking response is associated with the generated alert. When the answer is negative and no automated response is available, a message is sent  to the DBA alerting the DBA that a situation has arisen for which no automated response is available, and thus ending the process .","However, when a tasking response is associated with the alert, a tasking is initiated  within the management engine  to address the problem. SOPs associated with the response are retrieved  from the memory resource  and thereafter executed  on the target database. During and subsequent to the execution of the SOPs the method returns to monitoring collection and analysis state information so as to ascertain the effectiveness of the response. Assuming the response was effective to alleviate the problem, the next collection and analysis of state information should act to remove the issued alert, thus indicating a successful response.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 4","b":["310","410"]},"Once created, the SOPs are stored  in a memory resource  creating a SOP\/task recipe repository. The memory resource  is configured and located (networked) in such a manner that it is accessible from multiple DBA interfaces . In such a way the repository serves as a centralized source of knowledge from which a DBA can consistently and efficiently administer a plurality of databases .","According to one embodiment of the present invention, a DBA, using the DBA interface , initiates a tasking request with respect to the one or more databases . Upon receiving  the tasking request, the SOP module  attempts to parse the request and associate  each part with one or more task recipe. Thereafter SOPs identified  with each task recipe are retrieved  from the memory resource . The management engine  thereafter can prioritize and schedule the SOPs based on the targeted database environmental policies and the requested task. SOPs can be linked together and\/or managed separately by the SOP module \/initiating DBA.","Once retrieved and scheduled, the SOPs are executed  at the database. Again the collection engine  monitors  database state information. Information regarding the database is collected  and analyzed  to ascertain whether the executed SOPs fulfilled the tasking request . When the analysis reveals that the execution has been successful and that the tasking request has been meet, the process ends .","When the query  reveals that the execution of the scheduled SOPs has not addressed the tasking request, a message is generated and communicated to the requesting DBA thus providing notification  of the failure. The process, thereafter, ends . According to another embodiment of the present invention, an additional query is interposed before termination  of the process, asking whether state information of the database as a result of the failed tasking request presents a situation that can be addressed by an automated tasking response. If so, an automatic tasking response is generated and executed so as to place the database in the desired configuration.","Indeed manually requested and managed tasking requests by a DBA can work in concert with automated tasking responses. As will be appreciated by one skilled in the relevant art, the monitoring, collection, and analysis functionality of the SOP module  as well as the SOP module's ability to automatically and manually respond to tasking requests, being generated by a DBA or by the SOP module itself, facilitates a very robust and flexible means by which to administer a plurality of diverse databases.","Although the invention has been described and illustrated with a certain degree of particularity, it is understood that the present disclosure has been made only by way of example, and that numerous changes in the combination and arrangement of parts can be resorted to by those skilled in the art without departing from the spirit and scope of the invention.","Likewise, the particular naming and division of the modules, managers, functions, systems, engines, layers, features, attributes, methodologies and other aspects are not mandatory or significant, and the mechanisms that implement the invention or its features may have different names, divisions and\/or formats. Furthermore, as will be apparent to one of ordinary skill in the relevant art, the modules, managers, functions, systems, engines, layers, features, attributes, methodologies and other aspects of the invention can be implemented as software, hardware, firmware or any combination of the three. Of course, wherever a component of the present invention is implemented as software, the component can be implemented as a script, as a standalone program, as part of a larger program, as a plurality of separate scripts and\/or programs, as a statically or dynamically linked library, as a kernel loadable module, as a device driver, and\/or in every and any other way known now or in the future to those of skill in the art of computer programming. Additionally, the present invention is in no way limited to implementation in any specific programming language, or for any specific operating system or environment. Accordingly, the disclosure of the present invention is intended to be illustrative, but not limiting, of the scope of the invention, which is set forth in the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The aforementioned and other features and objects of the present invention and the manner of attaining them will become more apparent, and the invention itself will be best understood, by reference to the following description of an example embodiment taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
