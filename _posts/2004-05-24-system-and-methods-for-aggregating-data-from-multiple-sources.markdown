---
title: System and methods for aggregating data from multiple sources
abstract: Computer systems often strive to retrieve and process data from multiple sources. Integration and processing of data from multiple data sources tends to increase processing demands and decrease throughput due to the additional deployment of computational resources for handling multiple sources. An executable entity, such as a bean, which accesses each data source by the location of the data objects, and retrieves data objects corresponding to rows of data, is operable to access a plurality of data sources independently of the storage medium (i.e. DBMS), or format, and aggregate multiple objects from each of the data sources into a set of compound objects, in which each compound object includes associated fields from the accessed objects of the individual data sources. The attributes of the rows (objects) from different data sources are matched according to a common attribute in each object, and the resulting compound object is aggregated into a compound object set, which represents each of objects from each of the data sources joined according to the common attribute.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07386565&OS=07386565&RS=07386565
owner: Sun Microsystems, Inc.
number: 07386565
owner_city: Santa Clara
owner_country: US
publication_date: 20040524
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Conventional computer systems typically manipulate large amounts of data. Accordingly, modern managed information environments typically employ data storage and retrieval applications, such as relational database managers, as a vehicle for managing, indexing, and storing data. Such data storage and retrieval applications are commercially available from a variety of vendors, thus providing a broad range of storage and retrieval options. Each vendor of storage and retrieval applications, however, typically employs a proprietary storage format which is incompatible with the storage formats of other vendors.","For example, Oracle\u00ae Corporation, of Redwood Shoals, Calif., markets a relational database management system (RDBMS) having a particular format. Further, IBM Corporation of Armonk, N.Y., markets Informix\u00ae, an alternate database management system (DBMS) product having a different proprietary format. Often, large quantities of data are stored according to one format or another. Further, other user applications often employ a dedicated storage and retrieval format. Often, a widespread dissemination of a particular application affords a similar status to the file formats of such an application. For example, the .doc format employed by Microsoft\u00ae Word has attained widespread use as a common format by which to transfer information.","Conventional computer systems are often required to retrieve and process data from multiple sources. With the multitude of modern applications commercially available, such conventional systems typically strive for the ability to incorporate data from multiple sources and\/or vendors. For example, a corporate merger may require integration of a particular corporate database defined according to one database vendor, to be integrated with another corporate database defined by a separate database vendor. Accommodating a multiplicity of data storage formats, however, tends to increase cost and decrease performance due to increased software and processing to accommodate multiple formats.","Configurations of the invention are based, in part, on the observation that conventional integration and processing of data from multiple data sources tends to increase processing demands and decrease throughput due to the additional deployment of conventional computational resources for handling the data from multiple sources. In a conventional information processing environment, dissimilar data sources often require different software processes or threads corresponding to each of the data sources. For example, in a Java 2 Enterprise Edition (J2EE) server, executable entities called beans represent data and methods. Conventional executable entities operate on a particular application, such as a particular DBMS. Accordingly, multiple data sources trigger deployment of additional executable entities to handle each of the data sources.","Further, in a relational database, data is often stored in a tabular form of columns and rows. Data is then retrieved as objects, typically representing a row, in which each column corresponds to an attribute in the row. Accordingly, a large dataset having a large number of rows results in a correspondingly large number of executable entities, or beans.","The additional executable entities (beans) become compounded with multiple data sources. Since conventional executable entities can operate on only a single data source, separate executable entities are employed for each row from each data source. Typically, a master bean operates for each data source, and references the other executable entities corresponding to the rows. Since a master bean, and a number of corresponding \u201crow\u201d beans are employed for each data set, complex operations involving multiple data sources tend to rapidly expand the number of beans employed.","Accordingly, the presently disclosed system substantially overcomes the above described shortcomings presented in accessing multiple data sources by defining an executable entity operable to access a plurality of data sources independently of the storage medium (i.e. DBMS), or format, and further operable to aggregate multiple objects from each of the data sources into a set of compound objects, each compound object including associated fields from the accessed objects of the individual data sources. The executable entity accesses each data source by identifying the location of the data objects, and then retrieves data objects corresponding to rows of data. The attributes of the rows from different data sources are matched according to a common attribute in each object, and the resulting compound object is aggregated into a compound object set. The resulting compound object set represents each of the objects from each of the data sources joined according to the common attribute, which defines the association between the objects of different data sources.","In the particular exemplary configuration disclosed herein, the server is a J2EE server and the executable entities are beans. Alternate arrangements of servers and executable entities may be employed in alternate configurations. The exemplary data sources are relational databases, such as an Oracle\u00ae and an Informix\u00ae database, each accessible by the same executable entity (bean) in accordance with the principles of the invention. The executable entity is operable to identify the location of the data sources and corresponding objects independent of the medium, or implementation, (e.g. relational database) by which the objects are stored. The executable entity retrieves the objects as normalized entities, or row sets, from each of the databases, and generates a compound object according to associations, or joins, between matching attributes which are common to both normalized entries.","In further detail the method of accessing a plurality of data sources by the system disclosed herein includes identifying a plurality of data sources (e.g. relational databases) having related data, in which the data sources each include data objects (e.g. rows) of normalized data according to an implementation mechanism, and enumerating, in each of the identified data sources, a common attribute, or match field, operable to define an association between objects of each of the data sources to objects of other identified data sources. The executable entity (bean) representing the aggregated data set identifies, for each of the data sources, an access method, the access method independent of the implementation mechanism, or DBMS, storing the data objects in the data source. The executable entity correlates, via the common attribute, the objects of the identified data sources according to the defined associations, such as matching values in the common attribute, and generates a compound object indicative of each of the data objects associated via the defined associations by the common attribute.","The executable entity identifies a location of each of the data sources, in which the location is independent of the implementation mechanism (DBMS) storing the objects, and identifies, based on the location, a common attribute within each of the data sources, in which the common attribute is operable as a match column for each of the identified data sources. The executable entity then accesses, via the access method and the location, each of the identified data sources to traverse the objects in each of the data sources. The executable entity identifies associated traversed objects according to the associations, and matches the common attributes of the traversed objects in each of the data sources to generate a compound object, in which the generated compound object is indicative of attributes of objects from each of the plurality of data sources. In the exemplary configuration below, in which the data sources are tables in relational databases, the generated compound object represents a join of the relational tables.","In particular configuration, the data sources are represented, via the executable entity, as a plurality of normalized data entries indicative of an object in the data source, in which each of the normalized data entries have at least one common attribute.","The disclosed system is further operable to build the executable entity indicative of the identified data sources and corresponding associations by identifying a normalized entry corresponding to a data source, and adding additional normalized entries, to be associated with the executable entity, from the identified data sources. Accordingly, the system defines aggregation instructions in the executable entity for matching corresponding fields based on the common attribute, generating a compound object indicative of a plurality of fields in each of the objects having the corresponding fields, and adding (i.e. aggregating) the generated compound object to the executable object, therefore resulting in the set of compound objects. The system, therefore, further includes defining instructions in the executable entity for identifying the location, and correlating the objects of the identified data sources, and instantiating the executable entity corresponding to the correlated objects, in which the correlated objects are collectively indicative of each of the identified data sources and defined associations.","In alternate configurations, operable in conjunction with the exemplary arrangement disclosed herein, the executable entity stores a plurality of generated compound objects in an external data set, in which the external data set corresponds to correlated data sources indicative of joining the plurality of data sources. Further, the executable entity avoids the instantiation of an additional executable entity corresponding to each normalized data entry represented from the data source, and further avoids instantiating a master bean corresponding to a plurality of instantiated executable entities, each indicative of a row, collectively representing the data source. Further, the exemplary implementation mechanism storing the data in the data source may include a flat file, relational DB, markup language, XML file, or other suitable persistent storage mechanism.","Alternate configurations of the invention include a multiprogramming or multiprocessing computerized device such as a workstation, handheld or laptop computer or dedicated computing device or the like configured with software and\/or circuitry (e.g., a processor as summarized above) to process any or all of the method operations disclosed herein as embodiments of the invention. Still other embodiments of the invention include software programs such as a Java Virtual Machine and\/or an operating system that can operate alone or in conjunction with each other with a multiprocessing computerized device to perform the method embodiment steps and operations summarized above and disclosed in detail below. One such embodiment comprises a computer program product that has a computer-readable medium including computer program logic encoded thereon that, when performed in a multiprocessing computerized device having a coupling of a memory and a processor, programs the processor to perform the operations disclosed herein as embodiments of the invention to carry out data access requests. Such arrangements of the invention are typically provided as software, code and\/or other data (e.g., data structures) arranged or encoded on a computer readable medium such as an optical medium (e.g., CD-ROM), floppy or hard disk or other medium such as firmware or microcode in one or more ROM or RAM or PROM chips or as an Application Specific Integrated Circuit (ASIC). The software or firmware or other such configurations can be installed onto the computerized device (e.g., during operating system for execution environment installation) to cause the computerized device to perform the techniques explained herein as embodiments of the invention.","It is to be understood that the system of the invention can be embodied strictly as a software program, as software and hardware, or as hardware alone. Example embodiments of the invention may be implemented within computer systems, processors, and computer program products and\/or software applications such as operating system's and execution environments such as the Java Virtual Machine manufactured by Sun Microsystems Inc. of Palo Alto, Calif., USA.","In a conventional information processing environment, dissimilar data sources often require different software processes or threads corresponding to each of the data sources. For example, in a Java 2 Enterprise Edition (J2EE) server, executable entities called beans represent data and methods. Conventional executable entities operate on a particular application, such as a particular DBMS. Accordingly, multiple data sources trigger deployment of additional executable entities to handle each of the data sources.","Embodiments of the invention provide mechanisms and techniques that provide an executable entity, or bean, operable to access a plurality of data sources independently of the storage medium (i.e. DBMS), or format, and to aggregate multiple objects from each of the data sources into a set of compound objects, each compound object including associated fields from the accessed objects of the individual data sources. The executable entity accesses each data source by the location of the data objects, and retrieves data objects corresponding to rows of data. The attributes of the rows (object) from different data sources are matched according to a common attribute in each object, and the resulting compound object aggregated into a compound object set. The resulting compound object set represents each of the objects from each of the data sources joined according to the common attribute, which defines an association between the objects of different data sources.","In the particular exemplary configuration disclosed herein, the server is a J2EE server and the executable entities are beans. Alternate arrangements of servers and executable entities may be employed in alternate configurations. The exemplary data sources are relational databases, such as an Oracle\u00ae and an Informix\u00ae database, each accessible by the same executable entity (bean) in accordance with the principles of the invention. The executable entity is operable to identify the location of the data sources and corresponding objects independent of the relational database by which the objects are stored. The executable entity retrieves the objects as normalized entities, or row sets, from each of the databases, and generates a compound object according to associations, or joins, between matching attributes which are common to both normalized entries.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 1","FIG. 1"],"b":["120","100","110","120","1","120","2","130","130","132","134","120","1","120","2","120","134","112","130","110","132","120","120","122","120","1","120","2","120","122","132","110","120"]},"In the exemplary configuration shown, the server is a J2EE (Java 2 Enterprise Edition) server, marketed commercially by Sun Microsystems Inc. of Palo Alto, Calif., USA. Such servers are operable to include a plurality of the executable entities  known as beans. A variety of beans, each employing different properties, are available. For example, a so-called \u201cEntity Bean\u201d represents a business object in a persistent storage mechanism, such as a data source. A conventional entity bean relies on a relational database for such persistent storage. Further, persistence may be either bean managed persistence (BMP) or container managed persistence (CMP). While conventional CMP beans employ self contained relational database mechanisms, and therefore are difficult to modify, the BMP beans generally are available to include data source specific operations, such as getting and setting. Since a conventional BMP bean, however, represents a single row in such a relational DB table, accessing multiple data sources may be problematic.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 1","FIGS. 1 and 2"],"b":["120","122","200","122","120","122"]},"The executable entity  enumerates, in each of the identified data sources , a common attribute operable to define an association between objects of each of the data sources to objects of other identified data sources, as disclosed at step . In a relational database table, the common attribute may be an attribute, or column, common to objects from both data sources . In such a scenario, the association may be a matching value between columns.","The executable entity  identifies, for each of the data sources, an access method, in which the access method is independent of the implementation mechanism storing the data objects  in the data source , as depicted at step . The access method allows the executable entity to access the objects  by location, rather than via the DBMS of the data source. In this manner, the executable entity  may avoid certain calls to the DBMS, such as explicit connect requests, which may encumber operations accessing more than a single data source .","The executable entity  correlates, via the common attribute, the objects of the identified data sources  according to the defined associations, as shown at step , such as by retrieving objects  from both data sources  having a matching common attribute. The executable entity  then generates a compound object indicative of each of the data objects associated via the defined associations by the common attribute, as depicted at step . Such a compound object includes, for example, attributes of both objects including the matching common attribute, an operation commonly known as a join operation. For example, one object may be indicative of an employee and department ID, and another object indicative of department ID and department description. The compound object includes the employee, department ID, and department description.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["120","132","120","1","120","2","132","136","120","120","1","120","2","140","150","140","1","150","1","132","122","140","150","128","1","128","2","128","1","128","2","136","138","160","160","1","160","160"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIGS. 4-6","FIG. 3","FIGS. 3-6"],"b":["132","120","132","130","120","1","120","2","120"]},"The server  identifies a plurality of data sources  having related data, in which the data sources  each include data objects  of normalized data  according to an implementation mechanism, such as a DBMS. The data sources - and - are shown as exemplary. Additional or other data sources -N may be employed in alternate configurations, such as XML files, flat files, or other types and formats of data.","The server  enumerates, in each of the identified data sources , , a common attribute - . . . - operable to define the association  between objects  of each of the data sources ,  to objects  of other identified data sources. The common attribute -, - is typically employed as a match value against the objects  of the other data sources. Accordingly, the data sources  employ a set of objects , representing rows - . . . -N and - . . . -N which bears a similarity, or relation, to a set of objects  in other data sources .","The server  identifies, for each of the data sources , an access method, in which the access is method independent of the implementation mechanism, or DBMS, storing the data objects in the data source, as depicted at step . Identifying the access method includes defining aggregation instructions  in the executable entity  for identifying the location of the objects , and for correlating the objects  of the identified data sources, as depicted at step . In the exemplary arrangement disclosed, the executable entity, as described above, is a bean operable to access objects in each of the plurality of data sources . The instructions  identify a location of each of the data sources , in which the location is independent of the implementation mechanism storing the objects , as shown at step .","In a typical relational database implementation mechanism, accessing the objects  includes a database connect operation to the DBMS or other method implemented via the DBMS. Often, such DBMS methods may be exclusive of access methods of other DBMSs. Identification of the location of the objects  in the data source mitigates the need for an explicit DB connect or other DBMS specific method or operation. In each of the identified data sources , the executable entity  identifies a common attribute, -,-, in which the common attribute is operable as a match column for each of the identified data sources , as depicted at step . The common attribute, in a particular configuration, defines a join field, operable to implement a join between data, such as tables, from each of the data sources . Employing the identified common attribute -,- in each of the data sources, the executable entity  correlates, via the common attribute, the objects  of the identified data sources  according to the defined associations , as shown at step .","The correlation identifies associated objects  according to the association , typically a match operation. Therefore, correlating further includes, accessing, via the access method and the location, each of the identified data sources, as depicted at step . Accordingly, in the exemplary relational database data sources , the correlation identifies pairs of objects -, - from each data source having a matching value in the common attribute, such as B in the example shown.","Performing the correlation further includes traversing the objects  in each of the data sources , as depicted at step . Traversing may be in a linear or sequential manner, or may be according to an index, hash, or other selective mapping operation. The executable entity  identifies associated traversed objects  according to the associations, as depicted at step , and identifies normalized entries -, - corresponding to a data source -,-, respectively, as shown at step . In the exemplary arrangement, the associated traversed objects  are database rows - and - having matching common attributes -, -, and the normalized entry is the attributes of the row having the matching common attribute value B in the respective object  from each data source .","Matching the common attributes of the traversed objects  in each of the data sources therefore generate a compound object , in which, the generated compound object is indicative of attributes of objects  from each of the plurality of data sources -, -, as depicted at step . The compound object  therefore is an aggregation, or join, of each constituent object  including all attributes in both objects, or rows -,-, as a single row -. Accordingly, the executable entity  further includes instructions for matching corresponding fields -, - based on the common attribute, as shown at step . The result, therefore, in the exemplary arrangement, is a compound object - indicative of a plurality of fields in each of the objects -,- having the corresponding fields, in which the compound object - includes attributes (fields) of each of the data objects  associated via the defined associations  by the common attribute, as disclosed at step .","The generated compound object - is added to the executable entity  in an iterative manner to aggregate each of the additional normalized entries  (i.e. joined objects) from each data source  to correspond to the executable entity , as depicted at step . In the exemplary arrangement disclosed, the aggregation of the compound objects - results in a compound object set  represented by the executable entity . The result is an instantiated executable entity  corresponding to the correlated objects -,-, in which the correlated objects are collectively indicative of (i.e. retrieved from) each of the identified data sources -, - and defined associations .","The instantiation or execution of the executable object  therefore generates the set of compound objects , as depicted at step . Further, the disclosed executable entity  avoids instantiating an executable entity corresponding to each normalized data entry  represented from the data source , as depicted at step , and further avoids instantiating a master bean corresponding to the plurality of instantiated executable entities collectively representing the data sources -N, as shown at step .","In alternate configuration, the executable entity  may further store a plurality of generated compound objects  in an external data set, in which the external data set corresponds to correlated data sources indicative of joining the plurality of data sources, as shown at step . In particular arrangements, the implementation mechanism storing the data in the data source may be a flat file, relational DB, markup language, XML file, or other representation capable of representing normalized object in a data source, as disclosed at step .","In the particular exemplary arrangement disclosed, the association  is a join between relational database tables, in which the join is operable to aggregate attributes of objects  from different data sources  based on matching the common attribute -, - in each of the joined objects, as depicted at step . The exemplary implementation mechanism disclosed is a relational database management system (DBMS) operable on a plurality of database tables, each of the tables having rows and columns, and further operable for associations with others of the plurality of database tables according to a predetermined query language, such as SQL, as is known to those of skill in the art.","Those skilled in the art should readily appreciate that the programs and methods for accessing a plurality of data sources in an object based environment as defined herein are deliverable to a processing device in many forms, including but not limited to a) information permanently stored on non-writeable storage media such as ROM devices, b) information alterably stored on writeable storage media such as floppy disks, magnetic tapes, CDs, RAM devices, and other magnetic and optical media, or c) information conveyed to a computer. The operations and methods may be implemented in a software executable object or as a set of instructions. Alternatively, the operations and methods disclosed herein may be embodied in whole or in part using hardware components, such as Application Specific Integrated Circuits (ASICs), state machines, controllers or other hardware components or devices, or a combination of hardware, software, and firmware components.","While the system and method for accessing a plurality of data sources has been particularly shown and described with references to embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims. Accordingly, the present invention is not intended to be limited except by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of embodiments of the invention, as illustrated in the accompanying drawings and figures in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, with emphasis instead being placed upon illustrating the embodiments, principles and concepts of the invention.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIGS. 4-6","FIG. 3"]}]},"DETDESC":[{},{}]}
