---
title: Multi-tenant-cloud-aggregation and application-support system
abstract: The present application is directed to a distributed system that provides multi-cloud aggregation and that includes a cloud-connector server, cloud-connector nodes, and one or more service-provider nodes that cooperate to provide services that are distributed across multiple clouds. A service-provider node obtains tenant-associated information from a virtual data center in which the service-provider node is installed and provides the tenant-associated information to the cloud-connector server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348652&OS=09348652&RS=09348652
owner: VMware, Inc.
number: 09348652
owner_city: Palo Alto
owner_country: US
publication_date: 20120702
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present patent application is directed to virtual-machine-based computing and cloud computing and, in particular, to multiple-cloud-computing-facility aggregations interconnected by a cloud-connector-server and multiple cloud-connector nodes.","The development and evolution of modern computing has, in many ways, been facilitated by the power of logical abstraction. Early computers were manually programmed by slow and tedious input of machine instructions into the computers' memories. Over time, assembly-language programs and assemblers were developed in order to provide a level of abstraction, namely assembly-language programs, above the machine-instruction hardware-interface level, to allow programmers to more rapidly and accurately develop programs. Assembly-language-based operations are more easily encoded by human programmers than machine-instruction-based operations, and assemblers provided additional features, including assembly directives, routine calls, and a logical framework for program development. The development of operating systems provided yet another type of abstraction that provided programmers with logical, easy-to-understand system-call interfaces to computer-hardware functionality. As operating systems developed, additional internal levels of abstraction were created within operating systems, including virtual memory, implemented by operating-system paging of memory pages between electronic memory and mass-storage devices, which provided easy-to-use, linear memory-address spaces much larger than could be provided by the hardware memory of computer systems. Additional levels of abstractions were created in the programming-language domain, with compilers developed for a wide variety of compiled languages that greatly advanced the ease of programming and the number and capabilities of programming tools with respect those provided by assemblers and assembly languages. Higher-level scripting languages and special-purpose interpreted languages provided even higher levels of abstraction and greater ease of application development in particular areas. Similarly, block-based and sector-based interfaces to mass-storage devices have been abstracted through many levels of abstraction to modern database management systems, which provide for high-available and fault-tolerant storage of structured data that can be analyzed, interpreted, and manipulated through powerful high-level query languages.","In many ways, a modern computer system can be thought of as many different levels of abstractions along many different, often interdependent, dimensions. More recently, powerful new levels of abstraction have been developed with respect to virtual machines, which provide virtual execution environments for application programs and operating systems. Virtual-machine technology essentially abstracts the hardware resources and interfaces of a computer system on behalf of multiple virtual machines, each comprising one or more application programs and an operating system. Even more recently, the emergence of cloud computing services can provide abstract interfaces to enormous collections of geographically dispersed data centers, allowing computational service providers to develop and deploy complex Internet-based services that execute on tens or hundreds of physical servers through abstract cloud-computing interfaces.","While levels of abstraction within computational facilities are generally intended to be well organized and are often hierarchically structured, with dependencies and interconnections generally constrained to adjacent levels in the various hierarchies, practically, there are often many interdependencies that span multiple hierarchical levels and that pose difficult design and implementation issues. As levels of abstraction continue to be added to produce new and useful computational interfaces, such as cloud-computing-services interfaces, designers, developers, and users of computational tools continue to seek implementation methods and strategies to efficiently and logically support additional levels of abstraction.","The present application is directed to a distributed system that provides multi-cloud aggregation and that includes a cloud-connector server, cloud-connector nodes, and one or more service-provider nodes that cooperate to provide services that are distributed across multiple clouds. A service-provider node obtains tenant-associated information from a virtual data center in which the service-provider node is installed and provides the tenant-associated information to the cloud-connector server.","As discussed above, modern computing can be considered to be a collection of many different levels of abstraction above the computing-hardware level that includes physical computer systems, data-storage systems and devices, and communications networks. The present application is related to a multi-cloud-aggregation level of abstraction that provides homogenous-cloud and heterogeneous-cloud distributed management services, each cloud generally an abstraction of a large number of virtual resource pools comprising processing, storage, and network resources, each of which, in turn, can be considered to be a collection of abstractions above underlying physical hardware devices.","The term \u201cabstraction\u201d is not, in any way, intended to mean or suggest an abstract idea or concept. Computational abstractions are tangible, physical interfaces that are implemented, ultimately, using physical computer hardware, data-storage devices, and communications systems. Instead, the team \u201cabstraction\u201d refers, in the current discussion, to a logical level of functionality encapsulated within one or more concrete, tangible, physically-implemented computer systems with defined interfaces through which electronically-encoded data is exchanged, process execution launched, and electronic services are provided. Interfaces may include graphical and textual data displayed on physical display devices as well as computer programs and routines that control physical computer processors to carry out various tasks and operations and that are invoked through electronically implemented application programming interfaces (\u201cAPIs\u201d) and other electronically implemented interfaces. There is a tendency among those unfamiliar with modern technology and science to misinterpret the terms \u201cabstract\u201d and \u201cabstraction\u201d when used to describe certain aspects of modern computing. For example, one frequently encounters allegations that because a computational system is described in terms of abstractions, functional layers, and interfaces, that it is somehow different from a physical machine or device. Such allegations are unfounded. One only needs to disconnect a computer system or group of computer systems from their respective power supplies to appreciate the physical, machine nature of complex computer technologies. One also frequently encounters statements made by those unfamiliar with modern technology and science that characterize a computational technology as being \u201conly software,\u201d and thus not a machine or device. Software is essentially a sequence of encoded symbols, such as a printout of a computer program or digitally encoded computer instructions sequentially stored in a file on an optical disk or within an electromechanical mass-storage device. Software alone can do nothing. It is only when encoded computer instructions are loaded into an electronic memory within a computer system and executed on a physical processor that so-called \u201csoftware implemented\u201d functionality is provided. The digitally encoded computer instructions are an essential control component of processor-controlled machines and devices, no less essential than a cam-shaft control system in an internal-combustion engine. Multi-cloud aggregations, cloud-computing services, virtual-machine containers and virtual machines, communications interfaces, and many of the other topics discussed below are tangible, physical components of physical, electro-optical-mechanical computer systems.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["102","105","108","110","112","110","114","116","118","120","122","127","127","128"]},"Of course, there are many different types of computer-system architectures that differ from one another in the number of different memories, including different types of hierarchical cache memories, the number of processors and the connectivity of the processors with other system components, the number of internal communications busses and serial links, and in many other ways. However, computer systems generally execute stored programs by fetching instructions from memory and executing the instructions in one or more processors. Computer systems include general-purpose computer systems, such as personal computers (\u201cPCs\u201d), various types of servers and workstations, and higher-end mainframe computers, but may also include a plethora of various types of special-purpose computing devices, including data-storage systems, communications routers, network nodes, tablet computers, and mobile telephones.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 2"],"b":["202","205","210","212","214","216"]},"Until recently, computational services were generally provided by computer systems and data centers purchased, configured, managed, and maintained by service-provider organizations. For example, an e-commerce retailer generally purchased, configured, managed, and maintained a data center including numerous web servers, back-end computer systems, and data-storage systems for serving web pages to remote customers, receiving orders through the web-page interface, processing the orders, tracking completed orders, and other myriad different tasks associated with an e-commerce enterprise.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3","FIG. 3"],"b":["302","304","306","308","310","312","314","304","312","316"]},"Cloud-computing facilities are intended to provide computational bandwidth and data-storage services much as utility companies provide electrical power and water to consumers. Cloud computing provides enormous advantages to small organizations without the resources to purchase, manage, and maintain in-house data centers. Such organizations can dynamically add and delete virtual computer systems from their virtual data centers within public clouds in order to track computational-bandwidth and data-storage needs, rather than purchasing sufficient computer systems within a physical data center to handle peak computational-bandwidth and data-storage demands. Moreover, small organizations can completely avoid the overhead of maintaining and managing physical computer systems, including hiring and periodically retraining information-technology specialists and continuously paying for operating-system and database-management-system upgrades. Furthermore, cloud-computing interfaces allow for easy and straightforward configuration of virtual computing facilities, flexibility in the types of applications and operating systems that can be configured, and other functionalities that are useful even for owners and administrators of private cloud-computing facilities used by a single organization.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 4","FIG. 1"],"b":["400","402","404","406","402","408","410","410","412","414","404","402","416","418","420","422","424","426","428","430","432","436","442","444","446","448","436"]},"While the execution environments provided by operating systems have proved to be an enormously successful level of abstraction within computer systems, the operating-system-provided level of abstraction is nonetheless associated with difficulties and challenges for developers and users of application programs and other higher-level computational entities. One difficulty arises from the fact that there are many different operating systems that run within various different types of computer hardware. In many cases, popular application programs and computational systems are developed to run on only a subset of the available operating systems, and can therefore be executed within only a subset of the various different types of computer systems on which the operating systems are designed to run. Often, even when an application program or other computational system is ported to additional operating systems, the application program or other computational system can nonetheless run more efficiently on the operating systems for which the application program or other computational system was originally targeted. Another difficulty arises from the increasingly distributed nature of computer systems. Although distributed operating systems are the subject of considerable research and development efforts, many of the popular operating systems are designed primarily for execution on a single computer system. In many cases, it is difficult to move application programs, in real time, between the different computer systems of a distributed computer system for high-availability, fault-tolerance, and load-balancing purposes. The problems are even greater in heterogeneous distributed computer systems which include different types of hardware and devices running different types of operating systems. Operating systems continue to evolve, as a result of which certain older application programs and other computational entities may be incompatible with more recent versions of operating systems for which they are targeted, creating compatibility issues that are particularly difficult to manage in large distributed systems.","For all of these reasons, a higher level of abstraction, referred to as the \u201cvirtual machine,\u201d has been developed and evolved to further abstract computer hardware in order to address many difficulties and challenges associated with traditional computing systems, including the compatibility issues discussed above.  illustrates one type of virtual machine and virtual-machine execution environment.  uses the same illustration conventions as used in . In particular, the computer system  in  includes the same hardware layer  as the hardware layer  shown in . However, rather than providing an operating system layer directly above the hardware layer, as in , the virtualized computing environment illustrated in  features a virtualization layer  that interfaces through a virtualization-layer\/hardware-layer interface , equivalent to interface  in , to the hardware. The virtualization layer provides a hardware-like interface  to a number of virtual machines, such as virtual machine , executing above the virtualization layer in a virtual-machine layer . Each virtual machine includes one or more application programs or other higher-level computational entities packaged together with an operating system, such as application  and operating system  packaged together within virtual machine . Each virtual machine is thus equivalent to the operating-system layer  and application-program layer  in the general-purpose computer system shown in . Each operating system within a virtual machine interfaces to the virtualization-layer interface  rather than to the actual hardware interface . The virtualization layer partitions hardware resources into abstract virtual-hardware layers to which each operating system within a virtual machine interfaces. The operating systems within the virtual machines, in general, are unaware of the virtualization layer and operate as if they were directly accessing a true hardware interface. The virtualization layer ensures that each of the virtual machines currently executing within the virtual environment receive a fair allocation of underlying hardware resources and that all virtual machines receive sufficient resources to progress in execution. The virtualization-layer interface  may differ for different operating systems. For example, the virtualization layer is generally able to provide virtual hardware interfaces for a variety of different types of computer hardware. This allows, as one example, a virtual machine that includes an operating system designed for a particular computer architecture to run on hardware of a different architecture. The number of virtual machines need not be equal to the number of physical processors or even a multiple of the number of processors. The virtualization layer includes a virtual-machine-monitor module  that virtualizes physical processors in the hardware layer to create virtual processors on which each of the virtual machines executes. For execution efficiency, the virtualization layer attempts to allow virtual machines to directly execute non-privileged instructions and to directly access non-privileged registers and memory. However, when the operating system within a virtual machine accesses virtual privileged instructions, virtual privileged registers, and virtual privileged memory through the virtualization-layer interface , the accesses result in execution of virtualization-layer code to simulate or emulate the privileged resources. The virtualization layer additionally includes a kernel module  that manages memory, communications, and data-storage machine resources on behalf of executing virtual machines. The kernel, for example, maintains shadow page tables on each virtual machine so that hardware-level virtual-memory facilities can be used to process memory accesses. The kernel additionally includes routines that implement virtual communications and data-storage devices as well as device drivers that directly control the operation of underlying hardware communications and data-storage devices. Similarly, the kernel virtualizes various other types of I\/O devices, including keyboards, optical-disk drives, and other such devices. The virtualization layer essentially schedules execution of virtual machines much like an operating system schedules execution of application programs, so that the virtual machines each execute within a complete and fully functional virtual hardware layer.","A virtual machine is encapsulated within a data package for transmission, distribution, and loading into a virtual-execution environment. One public standard for virtual-machine encapsulation is referred to as the \u201copen virtualization format\u201d (\u201cOVF\u201d). The OVF standard specifies a format for digitally encoding a virtual machine within one or more data files.  illustrates an OVF package. An OVF package  includes an OVF descriptor , an OVF manifest , an OVF certificate , one or more disk-image files -, and one or more resource files -. The OVF package can be encoded and stored as a single file or as a set of files. The OVF descriptor  is an XML document  that includes a hierarchical set of elements, each demarcated by a beginning tag and an ending tag. The outermost, or highest-level, element is the envelope element, demarcated by tags  and . The next-level element includes a reference element  that includes references to all files that are part of the OVF package, a disk section  that contains meta information about all of the virtual disks included in the OVF package, a networks section  that includes meta information about all of the logical networks included in the OVF package, and a collection of virtual-machine configurations  which further includes hardware descriptions of each virtual machine . There are many additional hierarchical levels and elements within a typical OVF descriptor. The OVF descriptor is thus a self-describing, XML file that describes the contents of an OVF package. The OVF manifest  is a list of cryptographic-hash-function-generated digests  of the entire OVF package and of the various components of the OVF package. The OVF certificate  is an authentication certificate  that includes a digest of the manifest and that is cryptographically signed. Disk image files, such as disk image file , are digital encodings of the contents of virtual disks and resource files  are digitally encoded content, such as operating-system images. A virtual machine or a collection of virtual machines can thus be digitally encoded as one or more files within an OVF package that can be transmitted, distributed, and loaded using well-known tools for transmitting, distributing, and loading files. A virtual appliance is a software service that is delivered as a complete software stack installed within one or more virtual machines that is encoded within an OVF package.","The advent of virtual machines and virtual environments has alleviated many of the difficulties and challenges associated with traditional general-purpose computing. Machine and operating-system dependencies can be significantly reduced or entirely eliminated by packaging applications and operating systems together as virtual machines and virtual appliances that execute within virtual environments provided by virtualization layers running on many different types of computer hardware. A next level of abstraction, referred to as virtual data centers or virtual infrastructure, provide a data-center interface to virtual data centers computationally constructed within physical data centers.  illustrates virtual data centers provided as an abstraction of underlying physical-data-center hardware components. In , a physical data center  is shown below a virtual-interface plane . The physical data center consists of a virtual-data-center management server  and any of various different computers, such as PCs , on which a virtual-data-center management interface may be displayed to system administrators and other users. The physical data center additionally includes generally large numbers of server computers, such as server computer , that are coupled together by local area networks, such as local area network  that directly interconnects server computer  and - and a mass-storage array . The physical data center shown in  includes three local area networks , , and  that each directly interconnects a bank of eight servers and a mass-storage array. The individual server computers, such as server computer , each includes a virtualization layer and runs multiple virtual machines. Different physical data centers may include many different types of computers, networks, data-storage systems and devices connected according to many different types of connection topologies. The virtual-data-center abstraction layer , a logical abstraction layer shown by a plane in , abstracts the physical data center to a virtual data center comprising one or more resource pools, such as resource pools -, one or more virtual data stores, such as virtual data stores -, and one or more virtual networks. In certain implementations, the resource pools abstract banks of physical servers directly interconnected by a local area network.","The virtual-data-center management interface allows provisioning and launching of virtual machines with respect to resource pools, virtual data stores, and virtual networks, so that virtual-data-center administrators need not be concerned with the identities of physical-data-center components used to execute particular virtual machines. Furthermore, the virtual-data-center management server includes functionality to migrate running virtual machines from one physical server to another in order to optimally or near optimally manage resource allocation, provide fault tolerance, and high availability by migrating virtual machines to most effectively utilize underlying physical hardware resources, to replace virtual machines disabled by physical hardware problems and failures, and to ensure that multiple virtual machines supporting a high-availability virtual appliance are executing on multiple physical computer systems so that the services provided by the virtual appliance are continuously accessible, even when one of the multiple virtual appliances becomes compute bound, data-access bound, suspends execution, or fails. Thus, the virtual data center layer of abstraction provides a virtual-data-center abstraction of physical data centers to simplify provisioning, launching, and maintenance of virtual machines and virtual appliances as well as to provide high-level, distributed functionalities that involve pooling the resources of individual physical servers and migrating virtual machines among physical servers to achieve load balancing, fault tolerance, and high availability.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 8","FIG. 8","FIG. 7"],"b":["802","804","802","806","808","810","810","812","814","816","818","708","818","824","825","826"]},"The distributed services  include a distributed-resource scheduler that assigns virtual machines to execute within particular physical servers and that migrates virtual machines in order to most effectively make use of computational bandwidths, data-storage capacities, and network capacities of the physical data center. The distributed services further include a high-availability service that replicates and migrates virtual machines in order to ensure that virtual machines continue to execute despite problems and failures experienced by physical hardware components. The distributed services also include a live-virtual-machine migration service that temporarily halts execution of a virtual machine, encapsulates the virtual machine in an OVF package, transmits the OVF package to a different physical server, and restarts the virtual machine on the different physical server from a virtual-machine state recorded when execution of the virtual machine was halted. The distributed services also include a distributed backup service that provides centralized virtual-machine backup and restore.","The core services provided by the VDC management server include host configuration, virtual-machine configuration, virtual-machine provisioning, generation of virtual-data-center alarms and events, ongoing event logging and statistics collection, a task scheduler, and a resource-management module. Each physical server - also includes a host-agent virtual machine - through which the virtualization layer can be accessed via a virtual-infrastructure application programming interface (\u201cAPI\u201d). This interface allows a remote administrator or user to manage an individual server through the infrastructure API. The virtual-data-center agents - access virtualization-layer server information through the host agents. The virtual-data-center agents are primarily responsible for offloading certain of the virtual-data-center management-server functions specific to a particular physical server to that physical server. The virtual-data-center agents relay and enforce resource allocations made by the VDC management server, relay virtual-machine provisioning and configuration-change commands to host agents, monitor and collect performance statistics, alarms, and events communicated to the virtual-data-center agents by the local host agents through the interface API, and to carry out other, similar virtual-data-management tasks.","The virtual-data-center abstraction provides a convenient and efficient level of abstraction for exposing the computational resources of a cloud-computing facility to cloud-computing-infrastructure users. A cloud-director management server exposes virtual resources of a cloud-computing facility to cloud-computing-infrastructure users. In addition, the cloud director introduces a multi-tenancy layer of abstraction, which partitions VDCs into tenant-associated VDCs that can each be allocated to a particular individual tenant or tenant organization, both referred to as a \u201ctenant.\u201d A given tenant can be provided one or more tenant-associated VDCs by a cloud director managing the multi-tenancy layer of abstraction within a cloud-computing facility. The cloud services interface ( in ) exposes a virtual-data-center management interface that abstracts the physical data center.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 9","FIG. 9"],"b":["902","904","906","908","910","912","910","916","919","920","922","924","926","930","932","934","936"]},"Considering , the VDC-server and cloud-director layers of abstraction can be seen, as discussed above, to facilitate employment of the virtual-data-center concept within private and public clouds. However, this level of abstraction does not fully facilitate aggregation of single-tenant and multi-tenant virtual data centers into heterogeneous or homogeneous aggregations of cloud-computing facilities. The present application is directed to providing an additional layer of abstraction to facilitate aggregation of cloud-computing facilities.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 10","FIG. 10"],"b":["1002","1008","1002","1010","1012","1003","1008","1003","1006","1004","1007","1008","1005","1014","1002","1016","1010","1014","1018","1023","1026"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 11","FIG. 10","FIG. 11","FIG. 11","FIG. 11"],"b":["1102","1104","1106","1108","1108","1108","1112","1114","1116","1118","1120","1122","1124","1102"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 12","b":["1200","1202","1204","1206","1202","1204","1208","1210","1212","1214","1216","1219","1220","1222","1224","1226","1230","1232","1234","1236","1230","1232"],"sup":"rd"},"The VCC node, packaged inside an OVF container, is available to the cloud-director servers and VDC management servers for deployment as a virtual-appliance. The VCC node is deployed as a virtual appliance, containing one virtual machine in this case, and is launched within the cloud-director servers and VDC management servers in the same fashion as any other virtual machine is installed and launched in those servers. When the VCC node starts up, a cloud administrator accesses an administrative interface offered as one of the VCC node's web services. This administrative interface, along with a similar administrative interface provided as a web service by the VCC server running within a VDC management server\/cloud-director, allows an administrator of the cloud or organization in which the VCC node is being installed to configure and register the VCC node.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 13","b":["1302","1304","1306","1308","1310","1312","1314","1316","1318","1320","1322"]},"Once a VCC node has been installed, launched, configured, and registered within an organization cloud or a cloud managed by a VDC management server, the VCC node essentially waits to receive requests for login and for services through the VCC-node API-call interface and, upon receiving such requests, fulfills them. Those requests that involve multiple VCC nodes are fulfilled by coordinating the requests with the other VCC nodes. The VCC nodes act as a delegated, distributed set of remote servers within remote clouds on behalf of the VCC server controller that manages the VCC nodes.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIGS. 14-16","FIG. 14","FIG. 14","FIGS. 15-19","FIG. 1402","FIG. 14","FIG. 14","FIG. 14"],"b":["1404","1406","1408","1410","1412","1414","1416","1418","1416","1416","1420","1422","1424","1426","1428"]},{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 15","FIG. 14"],"b":["1424","1502","1504","1506","1508","1510","1512","1506","1514"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 16","FIG. 14","FIG. 16","FIG. 15"],"b":["1424","1602","1614","1502","1514","1428","1616","1618","1620","1622"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIGS. 17-19","b":["1702","1704","1706","1708","1710","1712","1715","1716","1718","1720","1722"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 18","FIG. 17"],"b":["1720","1802","1804","1806","1809","1810","1812","1814","1816","1818","1820","1822"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 19","FIG. 17","FIG. 18","FIG. 18","FIG. 17"],"b":["1722","1902","1910","1802","1810","1912","1914","1916","1918","1920","1922","1822","1924","1924","1720"]},"As discussed above, the combination of a VCC server and VCC nodes installed within VDC management servers, cloud directors, and third-party clouds provides the VCC server with the ability to access VCC nodes managed by the VCC server in remote clouds, including web services provided by the remote VCC nodes, and allows the VCC server to transfer files and other data from one cloud to another through VCC nodes within the clouds. In a first-level abstraction, the VCC server and VCC nodes managed by the VCC server provide secure communications between the VCC server and remote clouds and a REST-protocol-based API call interface to VCC nodes residing within remote clouds. This first level of abstraction associated with VCC servers and VCC nodes is the basis for a broader, aggregate-cloud-management-level of abstraction to which the current application is directed.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 20","FIG. 20","FIG. 20"],"b":["2002","2004","2006","2004","2008","2013","2009","2012","2016","2017","2018","2019","2009","2012","2008","2010","2011","2013","2020","2028","2020","2028","2030","2032","2033","2002"]},"When the VCC server is appropriately configured with a cloud-aggregation management application, the VCC server can provide a cloud-aggregation management interface  that allows an administrator to monitor and manage an entire cloud aggregation comprising many different remote virtual data centers running within many different remote cloud-computing facilities. The cloud-aggregation management interface  can display a wide variety of different types of information, including various types of status for remote VCC nodes and virtual data centers or other entities within which they reside. Management applications running within the remote clouds and accessed by the VCC nodes may allow the VCC server to provide detailed reporting, logging, and information displays with regard to fine-granularity usage of physical resources within remote clouds by the virtual data centers. In this fashion, the management interface may provide detailed reporting of physical cloud-computing facilities by each organization virtual data center within a remote cloud-computing facility that includes, or is managed by, a cloud director. In many ways, the VCC server and VCC nodes managed by the VCC server play a role, and create a level of abstraction, similar to the role played, and level of abstraction provided by, VDC management servers and cloud directors within physical data centers. The cloud-aggregation management interface  may also allow an administrator to display and access individual management interfaces provided by cloud directors, VDC management servers, and third-party cloud-computing management entities within remote cloud-computing facilities. Thus, the VCC server and associated VCC nodes together provide the secure communications facilities and applications that allow an aggregation of virtual data centers and third-party cloud-computing facilities to be centrally managed through a single, high-level, cloud-aggregation management interface .",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 21","FIGS. 13-19"]},"Another operation is carried out by the VCC server to periodically post configuration updates  to remote VCC nodes. These configuration updates may include changes to configuration parameters specified by an administrator through the cloud-aggregation management interface, may include configuration-parameter changes resulting from automated VCC-server management and monitoring functionality, and\/or may include new versions of the VCC-node virtual appliances to be installed and launched in place of, or in addition to, the currently executing VCC-node virtual appliances.","The VCC server may also direct a VCC node to publish a catalog  of virtual appliances, operating-system executables, and virtual-appliance templates for access by other VCC nodes within remote clouds. For example, the VCC node in cloud  may publish a catalog that can be accessed by the VCC node within the organization virtual data center . Publishing of catalogs allows templates, virtual applications, and other information to be shared among clouds of the cloud aggregation.","The VCC server can direct a remote VCC node  to run or interface to a management application within the remote cloud in which the VCC node resides on behalf of the VCC server. For example, the VCC server may direct remote VCC nodes to run or interface to an accounting and billing application to allow clients of the cloud aggregation to be billed for the physical computing resources within multiple remote clouds that they use over periods of time. Other types of management applications may also be accessed through VCC nodes by the VCC server. The VCC server, in response to directives input through the cloud-aggregation management interface, may also transfer  virtual applications encoded within OVF files from one VCC node to another. Thus, virtual applications can be migrated among remote clouds by direct transfer operations in addition to publishing within catalogs.","Management of cloud aggregations by VCC-server-executed cloud-aggregation management tools can be further extended, based on the low-level operations discussed above with reference to  and the higher-level operations discussed above with reference to , to provide useful and powerful distributed operations between remote virtual data centers within different remote physical cloud-computing facilities.  illustrates a number of higher-level distributed operations carried out cooperatively by the VCC server and one or more VCC nodes. For example, the VCC server may provide a virtual-data-center backup facility to allow an entire virtual data center , or components within the virtual data center, to be backed up to a second, different, remote virtual data center . The VCC server may also arrange for high-bandwidth secure-communications links  to be established between two different remote cloud-computing facilities  and . The VCC server may also arrange for a full or partial failover of one remote virtual data center  to another  in order to extend high-availability computing to the level of remote virtual data centers and remote cloud-computing facilities.","The VCC server and remote VCC nodes managed by the VCC server, along with cloud-aggregation management applications and various different management applications and management interfaces provided within remote cloud-computing facilities, together form a cloud aggregation that can be centrally managed through the cloud-aggregation management interface and that can employ cloud-computing facilities distributed across the face of the earth. Entire virtual data centers can be configured and launched from the cloud-aggregation management interface, and high-level distributed functionalities, such as virtual-data-center backup and high-availability of virtual-data-center-based computing can be implemented and managed through the level of abstraction created by the VCC server and remote VCC nodes managed by the VCC server.","While the VCC server and remote VCC nodes managed by the VCC server provide for collection and processing of detailed information regarding resource utilization within cloud-computing facilities at the granularity of tenant-associated VDCs, many currently available management tools and applications were developed without knowledge of tenant-associated VDCs provided by the cloud-director-based multi-tenant-VDC abstraction level. The current application is directed to methods and systems that allow tenant specific information to be provided to such applications, as well as for provision of global VDC information to be collected and provided to tenant-associated-VDC-aware applications that would otherwise be able to access only tenant-specific information.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 23","FIG. 23"],"b":["2302","2304","2306","2306","2308","2302"]},"Cloud providers and users of cloud-computing services may wish to employ many types of existing applications, from management applications to billing applications, that are unaware of the director-based multi-tenant-VDC abstraction level, and thus incapable of providing information and services based on tenant-associated VDCs. As one example of the methods and systems to which the current application is directed, and as shown in , cloud providers can deploy service-provider nodes (\u201cSP nodes\u201d) within multi-tenant-VDCs that can interface to VCC nodes and, through VCC nodes, to the VCC server in order to furnish tenant-specific information back to the application\/user-interface. The SP node in a multi-tenant VDC is aware of tenant-associated VDCs and can, as one example, filter information obtained by VCC nodes to extract tenant-specific information that can be returned to the application\/user-interface. In other cases, the SP nodes, along with the VCC nodes and VCC server, can provide global information to the application\/user-interface by modeling multi-tenant VDCs as a virtual single-tenant VDCs, and coalescing the virtual single-tenant VDCs for specific tenants into a single, cumulative single-tenant VDC. Many other types of information processing and presentation may be carried out by the SP nodes, VCC nodes, and VCC server to provide tenant-specific information to applications unaware of the cloud-director-based multi-tenant-VDC abstraction.","The SP node deployed in each of the VDC-based clouds has visibility across the cloud in which the SP node is deployed, and can therefore determine which tenants are assigned to, or using, the VMs in the cloud infrastructure. In other words, an SP node contains a mapping between tenant\/organizations and VMs. The VCC node that is running on behalf of the tenant on the shared cloud infrastructure can provide information to the application about which VMs are in use for that tenant by accessing the mapping information maintained by the SP node. This way, even though an application has no visibility regarding the tenants running on a shared cloud infrastructure, the application can nonetheless be deployed to manage the shared cloud infrastructure and provide tenant specific information through the VCC application to the end user by extracting single tenant specific information from SP nodes and collecting tenant-specific data for the VMs that are in use by that tenant.","Returning to the cloud-aggregation management interface ( in ), the implementation of information acquisition by the VCC server through remote VCC nodes in order to provide current status information for tenant-associated VDCs and remote cloud-computing facilities is next further considered. In the cloud-aggregation management-interface display shown in  (), status information and additional information are made available for access both for the entire remote clouds, such as remote cloud  ( in ) as well as for the tenant-associated VDCs within the remote clouds, such as tenant-associated VDCs ( and  in ) within remote cloud . However, as discussed above, VCC nodes are associated with each tenant-associated VDC. In certain cases, the VCC server may wish to obtain information related to a remote, cloud-director-managed cloud-computing facility at the cloud level, rather than information about a particular tenant-associated VDC. While this information may potentially be accessed by a VCC node associated with an tenant-associated VDC within the remote-cloud computing facility through an adapter to the cloud-director management interface, there may be security mechanisms, implementation techniques, and other factors that prevent or complicate extraction of cloud-level information through the cloud-director management interface a VCC node associated with an tenant-associated VDC within the cloud. A converse difficulty may arise when the VCC server accesses the services of a management application, executing within a remote cloud ( in ), that is unaware of the cloud-director-based multi-tenant-VDC abstraction level, as discussed above. A management application may not have been implemented to take into consideration the fact that multiple tenant-associated VDCs may run within the context of a remote cloud-computing facility managed by a cloud director. In other words, the management application has been implemented either for general third-party cloud-computing facilities or for virtual data centers managed by a VDC management server. In this case, a VCC server may wish to obtain detailed management information with respect to the different tenant-associated VDCs running within a remote cloud-computing facility, but the management application may have no way to gather such organization-VDC-specific information.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 24","FIG. 24","FIG. 11","FIG. 24","FIG. 24","FIG. 12"],"b":["2404","2406","2404","2410","2430","2450","2410","2412","2412","2414","2416","1218","1219","1224","1226","2418"]},"In the alternative implementation , the VCC nodes - are each associated with a particular tenant-associated VDC, as in the original implementation . However, in alternative implementation , an additional SP node  is installed, configured, and registered by the service provider administrator. The SP node, a virtual appliance with an architecture like that of a VCC node, described above with reference to , is aware of both the organization-VDC level within the remote cloud-computing facility as well as the overall, higher-level cloud-computing facility managed by the cloud director. A SP node may execute, or be associated with, management applications without tenant-associated-VDC-level knowledge in order to provide tenant-associated-VDC-level results from the management application back to the VCC server. The SP node also provides web services that allow the VCC server to directly acquire higher-level remote-computing-facility information from the cloud director without the VCC server needing to obtain the information through a VCC node associated intimately with a particular tenant-associated VDC. The SP node, communicates with tenant specific VCC nodes within the cloud-computing facility. In other words, the SP node is a special node that provides tenant-specific mapping of VDC resources to virtual-infrastructure resources and that is queried by VCC node. Thus, through VCC node's interaction with SP node, the VCC server can access management applications and other applications unaware of the tenant-associated-VDC level as well as directly access cloud-computing-facility information through the cloud-director management interface pertaining to the cloud-computing facility at a level above that of individual tenant-associated VDCs.","By either providing a multi-tenant VCC node that includes SP-node functionality or by providing a separate SP node within cloud-director servers, the current application discloses a method for extending VCC-server communications to a cloud level as well as to the tenant-associated VDC level for those remote cloud-computing facilities managed by a cloud director. The SP node or multi-tenant VCC nodes provide finer-granularity mapping of functionality to cloud-director-managed entities.","Although the present invention has been described in terms of particular embodiments, it is not intended that the invention be limited to these embodiments. Modifications within the spirit of the invention will be apparent to those skilled in the art. For example, VCC-server and VCC-node functionality may be implemented in virtual appliances using many different programming languages, modular organizations, control structures, data structures, and by varying other such implementation parameters. VCC nodes may be implemented to adapt to, and interface to, a variety of different types of other virtual appliances and functionalities within the cloud-computing facility in which the VCC node resides. The ability of the VCC server to access web services in remote cloud-computing facilities through VCC nodes provides the ability for the VCC server to access any number of different types of functionalities through various different API-call interfaces provided by a variety of different types of web services. Although the current application has mentioned a number of specific examples, many additional examples can be implemented and configured to extend the functionality of the VCC server and cloud-aggregation management applications and interfaces provided by the VCC server.","It is appreciated that the previous description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the present disclosure. Various modifications to these embodiments will be readily apparent to those skilled in the art, and the generic principles defined herein may be applied to other embodiments without departing from the spirit or scope of the disclosure. Thus, the present disclosure is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 14-16"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 17-19"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 24"}]},"DETDESC":[{},{}]}
