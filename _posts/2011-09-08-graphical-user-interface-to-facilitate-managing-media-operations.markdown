---
title: Graphical user interface to facilitate managing media operations
abstract: A system can comprise a memory for storing machine readable instructions and a processing unit for accessing the memory and executing the machine readable instructions. The machine readable instructions can comprise an automation client to facilitate managing media operations. The automation client can comprise a graphical user interface (GUI) generator to provide a GUI. The GUI can concurrently provide a plurality of modes of operation for a plurality of playlists in a graphical framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021355&OS=09021355&RS=09021355
owner: Imagine Communications Corp.
number: 09021355
owner_city: Frisco
owner_country: US
publication_date: 20110908
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates to media operations. More particularly, this disclosure relates to a graphical user interface to facilitate managing media operations.","A playlist can be implemented as a list of media events (e.g., media assets), such as video and\/or audio clips, still and\/or animated graphics, character graphic (CG) overlays, transition effects, and related data elements. The media events can include, for example, pre-recorded television programs, live television programs or the like. The media events can be played in a sequential or shuffled order. For example, some elements (e.g., secondary events) can be executed concurrently with a primary sequence (e.g., primary events). In the broadcast industry, a broadcast user can be tasked with several playlist tasks concurrently, such as monitoring, management, and intervention of multiple playlists concurrently. However, existing technologies tend to make the management of multiple playlists difficult or cumbersome.","One aspect relates to a system that includes a memory for storing machine readable instructions and a processing unit for accessing the memory and executing the machine readable instructions. The machine readable instructions can include an automation client to facilitate managing media operations, the automation client comprising a graphical user interface (GUI) generator to provide a GUI that includes a plurality of interactive playlists derived from abstracted media data. The plurality of playlists can be presented concurrently in a graphical framework within which each of the plurality of playlists is programmed to operate in a selected mode of operation in response to a user input.","Another aspect relates to a computer readable medium having machine readable instructions that includes a graphical user interface (GUI) generator. The GUI generator can provide a GUI to facilitate managing media events. The GUI generator instantiates a playlist object to provide a plurality of playlists for media channels based on media data provided by an automation system. The GUI includes a dashboard, corresponding to a graphical framework, in which a first plurality of interactive playlists for a plurality of respective channels are concurrently displayed without obstruction, the GUI also comprising a second graphical framework comprising a timeline view of at least one second playlist for at least one media channel.","Yet another aspect relates to a method that includes abstracting media data received from an automation server and generating a graphical user interface (GUI) based on the abstracted media data. The abstracted media data can be used to instantiate a playlist object to concurrently provide a plurality of playlists within a graphical framework of the GUI, a given playlist of the plurality of playlists is programmed to switch, in response to a user input, from a first mode of operation to a second mode of operation, different from the first, without obstructing other playlists in the graphical framework.","This disclosure relates to a graphical user interface (GUI) to facilitate managing media operations. The GUI can be provided to a user via an interactive device (e.g., a computer or workstation) to enable the user to mange media operations. In one example, the interface can allow the user to graphically concurrently manage a plurality of playlists, which can be presented in multiple modes of operation. Moreover, the GUI can switch between modes of operation for one or more (e.g., each) of the plurality of playlists in response to a user input. The different modes of operation for each such playlist can occupy the same graphical framework in the interface as to not obstruct the graphical framework for other playlists.","The real time automation, consisting of one or more servers, can communicate with a middle tier service to provide an abstraction, which in turn provides the abstraction to multiple clients. Such an approach makes the overall system more consistent, allows lighter weight clients, and provides abstracted interfaces to outside systems. This also allows non-real time behaviors to be implemented in the middle tier rather than in the automation server, including access to various data sources, such as enhanced metadata and related elements that are not part of the real time automation server's scope.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["2","2","4","6","8","2"]},"The network  could be implemented, for example, as a network  that employs TCP\/IP, IPv6, or the like, such as the Internet or a private local area network. The client computer  could be implemented, for example, as a desktop computer, a laptop computer, a tablet computer or the like. The system  can include a memory  for storing machine-readable instructions. In one example, the clients can store little or no local data. For instance, the clients can be dynamically linked to the abstraction service and the automation server.","The memory  could be implemented, for example, as volatile memory (e.g., random access memory), non-volatile memory (a hard disk, flash memory or the like) or a combination thereof. The system  can also include a processing unit  to access the memory  and to execute the machine-readable instructions. The processing unit  can be implemented, for example, as including one or more processor cores. The system  can be coupled to the network  via a network interface . The network interface  could be implemented, for example, as a network interface card. The automation server  could be implemented, for example, in a manner similar to the client computer  (e.g., including a processing unit and memory).","The automation server  can be programmed to control distribution of media assets to a plurality of subscribers. In one example, the automation server  can be implemented to execute a media schedule for one or more channels, such as to issue real time commands to broadcast devices for executing events (e.g., play command to a playout device, a switch command to a switch or the like). Moreover, the automation server  can store playlist data and related scheduling information to control devices for any number of channels, such as can be part of a broadcast media system.","The automation server  can implement a dynamic (e.g., real time) application programming interface (API) to utilize an abstraction service . For example, the automation server  can be programmed to employ the API to maintain a dynamic network connection to the abstraction service , which provides at least a substantial portion of abstraction that can be provided to the automation client. The abstraction service  can employ rules and access other related data and forms of media that can be abstracted and provided to the client  (e.g., in real time) based on the data passed by the automation server  to the abstraction service  via the API. Various other applications may also implement similar APIs to access the methods and functions implemented by the abstraction service . The automation server  and abstraction service  might also be implemented on redundant platforms to provide high availability.","The client computer  can also communicate with the abstraction service  via the network , which can be bi-directional communication. The automation client  implemented on the client computer  can receive abstracted data from the abstraction service , for example, in real time. Thus, the abstraction service  can provide the underlying data that is displayed via an automation client . Additionally, user inputs (e.g., receive via the user input device ) similarly can be passed from the automation client  to the abstraction service  and then to the automation server  to modify the corresponding data and related automation controls.","The automation client  can manage the playlists for each of the plurality of channels, such as can include viewing, editing or other manipulation of media assets for each respective channel. Additionally, the automation client  can also attend to related tasks, such as media preparation, automated and manual workflow management, and diagnostics and troubleshooting. That is, the GUI can be programmed to allow not only playlist management, such as based on the abstracted data from the automation server, but also to conveniently, in a common GUI space, perform related functions.","By way of example, the data abstraction service  can parse the schedule data and extract metadata and\/or data fields from the schedule data, which can be referred to as extracted data. The extracted data can be abstracted by the data abstraction service  and can be combined with other data and media into abstracted data. The abstraction service  can provide this abstracted data to the automation client  in real time. The data abstraction service  can execute, for example, on an intermediate layer in the system  that resides between the automation server  and the automation client . The abstraction service  and the automation client  can be co-located a common site or be distributed.","The client computer  can include an input device  (e.g., a mouse, keyboard, a touch screen, a combination thereof or the like) that receives user input. The client computer  can also include a display  (e.g., a monitor) that provides user output (e.g., graphics and text). In one example, the memory  of the client computer  can include the automation client  that can be employed to manage the media operations. There can be any number of automation clients  implemented in the system . Based on the abstracted data, the automation client  can provide a GUI  that is programmed for efficient management of multiple automation playlists within a single user interface graphical framework, which graphical framework can be referred to as a frame.","To manage the media operations, the automation client  can receive the abstracted data from the abstraction service . The abstracted data can include abstracted playlist data, extended metadata, low resolution video or the like. The abstraction service  can control the format and types of information and data sent to the automation client  based on predefined rights for the automation client . For example, during initial operation, the automation client  registers with or logs into the abstraction service  via the network, which results in the flow of abstracted data to the automation client  (e.g., in real time).","The schedule data can include data characterizing a playlist for each of the plurality of channels provided to the subscribers via one or more media delivery systems. Moreover, in some examples the schedule data can include video files employable as output for the plurality of channels. The video files could be implemented, for example, as Moving Pictures Expert Group (MPEG) files, raw video files or the like.","A GUI generator  of the automation client  can employ the abstracted data to generate a GUI  for a user of the client computer . The GUI generator  can operate, for example, on a presentation layer of the automation client . The GUI  can provide a plurality of interactive views to that characterizes the abstracted data. The automation client  can also include a playlist object  programmed to provide playlist functionality. The GUI generator  can instantiate the playlist object  based on the abstracted data for a given channel to provide a corresponding playlist interface. Thus, depending on application requirements, the GUI generator  can provide a corresponding instance of the playlist object  for each channel. Each instance of the playlist object  can operate as a GUI independently of other playlist instances based on the abstracted data for its respective channel and in response to user input (e.g., via the input device ).","As disclosed herein, each instance of the playlist object can switch between multiple different modes (e.g., a view mode and an edit mode) without obstructing other objects. Moreover, such modes and related views allow both monitoring and control in a smaller amount of screen real estate (GUI space) than many existing systems, which allows for a larger number of channels to be effectively be managed concurrently within a given GUI . Additionally or alternatively, one or more channels can be more effectively managed while a user simultaneously performs other related tasks through other objects provided within the same GUI .","For example, the GUI  can include a dashboard  that contains the playlists for display in a common graphical framework. There can be any number of playlists presented within the graphical framework provided by the dashboard. The design of the dashboard  can be specifically programmed to allow the effective management of each channel in a significantly smaller area than traditional views, allowing a larger number of lists to be managed. The dashboard  (e.g., via operating in a view mode) can enable the user to view and edit media assets and scheduling information for each playlist for a relatively short period of time. As one example, the view mode can be implemented within the GUI  to provide only the current and next primary events, each including a mini-timeline GUI element showing the associated secondary events, and one or more next errors, if any, for that channel. Such a mode of operation, for instance, allows the operator to monitor the playout of an automated channel where it is assumed that intervention is an exception. Switching to an edit\/list view in response to a user input can allow the entire list, including future and past events, to be accessed for management. Such events can be accessed and managed via the GUI ; although, only a certain portion of the list and a certain portion of the event metadata may be rendered visible to the user.","Edits to the playlist can adjust media ingress parameters for a given channel. Moreover, the dashboard  can provide abstracted graphical representations (e.g., graphical elements with no or minimal text) based on the certain metadata or combinations in the schedule data. By employment of the dashboard, the user can switch between modes of a given playlist instance to view or edit a given playlist in the same graphical framework without obstructing other playlists. That is, each playlist can switch between different modes of operation to provide different interactive functionality that is represented to the user within the same graphical framework of the dashboard. Moreover, in some examples, the dashboard  can bring errors and potential conflicts to a user's attention. The errors can be identified in a time-prioritized manner, such can be user-defined or operate on default prioritization for errors. Thus, the identification of errors in this manner can automatically identify potential conflicts or malfunctions, in a time prioritized manner, as to limit the need for the user to search for issues. Thus, the GUI  can allow users to maintain a \u201cmanage by exception\u201d process. This, in turn, can allow the user to potentially perform additional tasks while still effectively monitoring multiple channels.","As another example, the GUI  can provide a list view that allows a user to view and edit detailed information about a plurality of events in a given playlist. In some examples, the list can allow the user to view and correct errors. In yet another example, the GUI  can provide a timeline view that allows the user to view a playlist for each of a plurality of channels over a relatively long period of time (e.g., about 3-8 hours) relative to the scheduling information for each playlist. For example, the timeline view can include an inherent conflict in that, when the view is set to show a large span of time, detail, particularly for short durations or intervals, may be lost, while a view that shows a great deal of detail may not show longer term perspective. Combining the dashboard view, which continually provides a high degree of detail, which can be dynamically updated to the current and upcoming event for each list, with a larger, multi-channel timeline that can be used to show larger context, overcomes this limitation.","The timeline view can also provide abstracted graphical representations of metadata in the schedule data. In some examples, the GUI  can provide multiple views concurrently. For instance, in some instances, the GUI  can provide a dashboard container with multiple playlists, as disclosed herein, and another GUI container that includes the list view and\/or the timeline view. In other examples, the GUI can provide multiple GUI containers with the same view, such as two frames, each with a list view. The dashboard view, even with a high degree of abstraction, can provide only a subset of the total list and fields. For example, the list view can be tied to multiple dashboard views such that multiple dashboards can be employed in a given GUI to monitor multiple channels simultaneously, with any one list at a time selected for more detailed examination or control in the list view, all within a single GUI.","Through interaction with the user and the GUI, changes (e.g., updates to a playlist) to the abstracted data can be made at the GUI generator  and returned to the data abstraction service  via a corresponding API. For instance, the data abstraction service  can convert the changes to the abstracted data into a format readable by the automation server , which data can be referred to as updated data. The updated data can be provided to the automation server , such that the automation server  can provide media to the plurality of subscribers based on the updated data. The update data can also be propagated to other related applications in the system .","The system  enables the user to efficiently view and edit the playlists for each of the plurality of channels provided to the plurality of subscribers. Moreover, in time critical operations, the user need not change views and\/or obscure portions of the GUI to edit playlists. Further, by employment of the pictorial representations, the user can process information more efficiently, and with a greater degree of accuracy, since fatigue associated with reading large amounts of text data can be reduced.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["50","26","52","50","52","54","1","9","54","52","52","56","58","52"]},"Each of the playlists  are programmed to operate in multiple modes corresponding to different aspects of managing (e.g., adding, removing, editing and monitoring) playlist data. In the example of , playlists  and - are illustrated as being in a view mode, while PLAYLIST  is illustrated as being in an edit mode. Further as illustrated, each of the playlists  occupies a separate graphical context within the dashboard , the frame for which can remain unmodified in response to changing between respective playlist modes. For example, in response to a user input to switch a given playlist from one mode to another mode, the content and function of the given playlist can change accordingly without obstructing any of the other playlists in the dashboard .","By way of further example, in , PLAYLIST  (in edit mode) includes a selected event . The event can be selected, for example, in response to a user input activating the selected event (e.g., clicking on the selected event) and\/or the PLAYLIST .","The GUI can also include information frame  programmed to provide detailed information about the selected event . For instance, the detailed information can include a playlist identifier that identifies a playlist associated with the selected event . Additionally, the detailed information can include a duration time (labeled in  as \u201cDURATION\u201d) for the playlists associated with the selected event . Further, the detailed information can include a next event identifier (labeled in  as \u201cNEXT EVENT\u201d) that identifies an event (e.g., a video clip) following an on-air media event (e.g., an event currently being played). Further still, the detailed information can also include a total number of errors present in the playlist (labeled in  as \u201cTOTAL ERRORS\u201d). In addition to the specific data and types of data that might be shown in the \u2018information frame, part of the architecture of the system, with the middle abstraction service (e.g., service  of ) providing an abstraction of, for example, not only the real time automation server, but also additional data (e.g., extended metadata, low resolution video, images, or the like) accessed via the abstraction service.","The detailed information can also include specific information about the selected event . The specific information can include, for example, a start time (in a given day) for the selected event (labeled in  as \u201cTIME OF DAY\u201d). The specific information can also include a title of the event (labeled in  as \u201cTITLE\u201d). The title of the event can be, for example, a file name of a video clip associated with the selected event . The specific information can further include an event identification number (labeled in  as \u201cID\u201d) that can be employed as a unique identification code for the selected event . The specific information can still further include a segment number for the selected event  (labeled in  as \u201cSEGMENT\u201d). The segment number can correspond to a series number of the selected event . For instance, in some examples, a television program may have multiple segments that are separated by commercials. The segment number of the selected event  can identify a position of the selected event  position relative to other segments.","The specific information can also include an assigned device identifier (labeled in  as \u201cASSIGNED DEVICE\u201d) that can identify a device (e.g., a database and\/or a directory) that stores the video clip corresponding to the selected event . The specific information yet further includes an error status (labeled in  as \u201cSTATUS\u201d). The error status can indicate a particular error associated with the selected media event  for a given channel. The error status can include an icon that can draw attention to the error status and employ corresponding color coding. Moreover, the error status can also include a description of the status. In the present example, such a description is labeled as \u201cTRANSCODE FAILED,\u201d which can indicate that a transcoding between video formats has failed. Such a failure could occur, for example, due to lost packets, and\/or data corruption (e.g., due to a hardware and\/or software malfunction). With a dashboard view, the indication of upcoming errors can further make use of this \u2018information frame\u2019 to provide more detailed information about the error. The operator can directly access the error, with detailed information, such as can be provided directly from the view mode without any other disruption to their view.","In some examples, the specific information can include an effect type represented as an icon, as well as a transition speed. The effect type can represent a transition event that occurs before the selected event  is played. The transition speed can indicate, for example, the speed at which the video clip associated with the selected event  will transition relative to a previous event. The transition speed and the effect type can also be represented as GUI elements, such as one or more icons or a corresponding composite icon.","The video player  can be included in the GUI  for playing video clips, such as the video clips associated with one or more of the playlists -. The current and next video can also be presented in the respective playlists . Additionally, the GUI  can include a clock  that can give a current time. Moreover, the GUI  can include a list view icon  that can change\/add a frame that depicts a list view as well as a timeline view icon  that can change\/add a frame that depicts a timeline view. In some examples, the GUI  can include a dashboard icon  that can be activated to add a second frame with a second dashboard. In other examples, the GUI  can include a grayed out dashboard icon , since in the present example, the dashboard  is already shown. The GUI  can still further include an error view icon  that can depict a list of errors detected for one or more channels corresponding to the playlists .","The GUI  can include a plurality of page tabs  that can provide the user with a mechanism to customize multiple pages of the GUI . In this manner, in one instance, Page  could depict the dashboard , while Page  could depict a second dashboard, a list view, a timeline view, a combination thereof or the like. In some examples, the page tabs can be renamed to provide a descriptive indicator for the user. Thus, it will be appreciated that the dashboard  allows the user to view and\/or edit one or more playlists  concurrently without obscuring portions of the other playlists. Moreover, each of the playlists - can be switched from view or edit mode to the other of view or edit mode without resizing the dashboard or popping up another frame.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 3","FIG. 2"],"b":["100","1","3","9","100","102","102"]},"As a further example, each event  can have a status (labeled in  as \u201cSTATUS\u201d). The status can be indicated by an icon in the status column for each media event. For instance, the status can indicate if a particular event  is playing, has already played, is to be played in the future, has an error associated with the event  or the like. The playlist  can also include a title (labeled in  as \u201cTITLE\u201d) for each event . The title of the event  can identify, for example, a name of a media program (e.g. a television program) and\/or a file name of a video clip. The playlist  can further include an identifier for each event  (labeled in  as \u201cID\u201d). The playlist  can further include a time indicator (labeled in  as \u201cDURATION\/REMAINING\u201d) that can characterize a duration of an event , as well as an amount of time remaining for the event .","In some examples, each event  can be color-coded such as to indicate a different condition for a given event . For instance, one color could indicate that a given event  is currently being played. Another color could indicate that another given event  is associated with an event  being played (e.g., the another event  is an additional segment of the same media program). Another color could indicate that a given event  is a relatively short independent event  (e.g., a television commercial or announcement). Yet another color could indicate an error. In other examples, different colors could be employed in similar or different manners.","In the example of , a first event  (labeled in  as \u201cPROG. \u201d) can include expanded information that can provide more detailed information about the first event . In this example, the expanded information can include a video image  for the first event . The video image  can be a pictorial image representing the nature of the event . In some examples, the video image  could be a logo associated with the event , a picture of a person associated with the event , the live video feed, or the like. In one example, the playlist GUI  can include a \u201cPLAY\u201d GUI element (e.g., a button) that would allow the user to view and\/or listen to a clip associated with the first event  in response to a user input activating the GUI element.","Additionally, the playlist  can include a time bar  that can depict the status of a timeframe of the playlist  for a relatively short period of time. For example, an upper bar in the example of  is scaled to the duration of the current primary event. The length of the bar relative to the total width can indicate the progress of the event. The time bar  can include a primary time bar  that characterizes a duration of the first event  (e.g., a primary event). In the following example of , there are two such sets of time bars for each dashboard, one for the currently executing event and one for the next sequential primary event. Additionally, the time bar  can include one or more secondary time bars  that can characterize the duration of secondary events relative to the time line for the first event  (e.g., the primary event). A secondary event can correspond to an event that is to be played out concurrently with the primary media event. For example, the secondary events can include video clips and\/or graphical images that overlay the first event  or audio content that is broadcast with the primary media event. Such secondary events may include television station logos, emergency weather updates, news updates or the like.","The playlist  can also include an error row . The error row  can include GUI elements (e.g., arrows) that are actuatable by the user to scroll through a list of error messages. The error row can be implemented to eliminate, or at least reduce, the need for the operator to actively search through the lists to identify errors. For instance, by constantly showing any errors for each list (e.g., in a time prioritized manner), the operator is alerted to issues that may require the operator's intervention. If no errors are indicated, or any errors indicated have a known resolution (e.g., a pending media transfer, or the errors are sufficiently far in the future), the operator can perform other actions within the GUI, and simply continue monitoring the automated execution of the lists.","The playlist  can also include a playlist editor GUI element (e.g., an icon)  that can be activated in response to a user input. Upon actuation of the playlist editor , for example, the playlist  can be switched from a view mode to an edit mode without obstructing other playlist GUIs in the dashboard, such as disclosed herein. Additionally, the playlist  can include a \u2018maximize and jump\u2019 GUI element  that can be activated in response to a user input. Upon activation of the \u2018maximize and jump\u2019 GUI element , a corresponding detailed list view mode of the playlist  (e.g., PLAYLIST ) can be displayed. In a case where multiple dashboards are used simultaneously, a single detailed list view can be shared among all of the lists, with one list at a time selected for display via the associated dashboard. This allows the GUI arrangement to remain constant. Furthermore, if the detailed view is not required, the same screen area that might otherwise be utilized by the detailed list view might be used for other GUI objects, such as those related to other related, but not list specific tasks\u2014without affecting the dashboard views.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 4","FIG. 2","FIG. 4","FIG. 3","FIGS. 3 and 4"],"b":["150","1","3","9","150"]},"In the example of , the playlist  includes expanded information for a given channels, including time bars for the current and next primary event as well as a video images for each of the events. Thus, in addition to the detailed playlist timeline information for program , the playlist  includes a video image  and a time bar  for a second media event, namely PROG. . The playlist illustrated in  thus enables a user to preview an image and\/or a video for the second event prior to the second event in the given playlist being played out.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 5","FIG. 2","FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 2"],"b":["200","2","200","202","202","202","202","202","202","202"]},"The playlist  can include a done events GUI element (e.g., an icon)  that can be associated with a number  characterizing a number of events to have been completed in the playlist . Upon actuation of the done events GUI element , completed events can be shown or hidden to\/from the user. The playlist  can also include an actuatable on air focus GUI element (e.g., an icon) . Upon actuation of the on air focus GUI element , the playlist  can jump to an on air event (e.g., an event currently being played) and can made to do so automatically at the start of each subsequent event. The playlist  can further include an actuatable error GUI element (e.g., an icon)  and an associated number  that characterizes a number of detected errors. Upon actuation of the error GUI element , a list of the detected errors can be presented to the user. It is noted that by employment of the error GUI element , the user need not search for and\/or identify errors that have occurred or will occur in the future. In this manner, efficiency of managing media operations can be increased.","The playlist  can include a scrollbar that can allow the user to view and\/or edit different portions of the playlist . Such a scrollbar can be implemented for view adjustments in both the view mode and the edit mode, for example. Moreover, the playlist  can include a playlist view GUI element (e.g., an icon)  that can be actuatable by the user. Upon actuation of the playlist view GUI element , the playlist  can be replaced with the playlist in view mode, such as disclosed with respect to .",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 6","FIG. 2","FIG. 2","FIG. 6","FIG. 2","FIG. 6","FIG. 6","FIG. 6","FIGS. 2 and 8"],"b":["250","50","50","250","250","252","1","254","2","250","256","1","2","252","254"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 7","FIG. 6"],"b":["300","1","2","302"]},"The list view can include a number (labeled in  \u201cNUMBER\u201d) that identifies an ordered sequence number of each event. The list view can also include a starting time (labeled in  as \u201cTIME\u201d) of a given event. Moreover, an on air event (event number ) can be identified with a GUI element, such as a play icon. As an example, the on air event can include a time indicator , such as can depict a duration and time remaining of the on air event. The list view can also include a duration of each event (labeled in  as \u201cDURATION\u201d). The list view can also include a status (labeled in  as \u201cSTATUS\u201d) for each event. The status can be represented, for example with an icon. The list view can include a segment number (labeled in  as \u201cSEGMENT\u201d) and transition speed (labeled in  as \u201cTRANSITION SPEED\u201d) for each event. The list view can still further include a device identifier (labeled in  as \u201cDEVICE\u201d) for each event. The device identifier can indicate, for example, a database or directory that stores a clip corresponding to a given event.","The list view can include an effect type (labeled in  as \u201cEFFECT\u201d) for each event. The effect type can describe, for example, a transition event that occurs before playing of a given event. The effect type can be represented, for example with an icon. In one example, the effect type could be a \u201ccut\u201d effect type that can indicate that a system broadcasting events will switch directly from a previous event to a next event without modifying either the previous or next event. In another example, the effect type could be a \u201cfade-fade\u201d effect type that could indicate that the system will fade out of the previous event and fade into the next event. In yet another example, the effect type could be a \u201ccut-fade\u201d effect type that could indicate that the system can cut directly from the previous event and fade to the next event. In still another example, the effect type could be a \u201cfade-cut\u201d that can indicate that the system will fade out from the previous event, and cut directly into the next event. In still yet another example, the effect type could be a \u201ccrossfade\u201d effect type (sometimes referred to as \u201cmix\u201d or \u201cdissolve\u201d) effect type, wherein the system gradually dissolves into the next event from the previous event, such that the previous event and the next event are mixed together during a transition. In yet another example, the effect type could be a \u201cwipe\u201d that could indicate that the next event occupies an increasing portion of a television screen until the next event displaces the previous event.","Further, the list view can include a behavior type for each event (labeled in  as \u201cTYPE\u201d) that describes a behavior and\/or a modification of a given event. The type of an event can be represented, for example, by an icon, such as can be a composite representing a combination of behaviors. In one example, the type of event can be a \u201cstandard\u201d behavior type that can indicate that a system broadcasting the events will start a next event immediately following a previous event and run the next event for the next event's fixed duration-sequential playout. In another example, the behavior type can be a \u201chard start\u201d behavior type that can indicate the next event has a fixed, predefined start time rather than having the start time dynamically calculated based on a start time and duration of the previous event. In another example, the behavior type can be a \u201cmanual start\u201d behavior type that can indicate that the next event starts only when triggered (e.g., by an operator or an external system). In yet another example, the behavior type can be an \u201cupcount\u201d behavior type that can indicate that the given event has an indeterminate duration (e.g., a live event). In still yet another example, the behavior type can be a \u201cdeadroll\u201d behavior type that can indicate that the next event starts at a specific time, without interrupting a sequential playout of events on a playlist before the next event.","As a further example, the behavior type can be a \u201cvideo switch\u201d behavior type that can switch video from the previous event to the next event while maintaining the audio of the previous event. In a similar manner, the behavior type could be an \u201caudio switch\u201d behavior type that can switch the audio from the previous event to the next event while maintaining the video of the previous event. In yet another example, the behavior type could be a \u201ctime to next\u201d (also referred to as a \u201cnext\u201d) behavior type that can provide a timer to a next event. In still another example, the behavior type can be a \u201crecord\u201d behavior type that can perform a recording of a given event. In still yet another example, the behavior type could be an \u201cexception\u201d behavior type that can be used to identify and control exceptions to a compiling process. It is noted that in some examples, a given event may have multiple behavior types.","Some types of events, such as secondary events, can have certain behaviors, including an \u201coffset start time\u201d behavior type that can indicate that a given secondary event has a specified start time after a primary event with which the given secondary event is associated. In another example, the secondary event can have an \u201cequality\u201d behavior type that can indicate that the given secondary event runs until an end time of the associated primary event. In yet another example, the given secondary event can have a \u201cbacktimed\u201d behavior type that can indicate that the given secondary event has a start time prior to the associated primary event. Similarly, the given secondary event can have an \u201cend timed\u201d behavior type that can have a start time that is timed back from an end of the primary event.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 8","FIG. 2","FIG. 2","FIG. 8","FIG. 2","FIG. 8","FIG. 2","FIG. 8"],"b":["350","50","50","350","350","352","52","350","354","352","354"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 9","FIG. 8"],"b":["400","354","400","402","402","404","402","404","406"]},"In the example illustrated of , three channel labels  are illustrated for three different channels, demonstrated as channels ,  and , but it is to be understood that in other examples, more or less channel labels could be included. Each channel label  can include a channel image , which could be implemented, for example, as a pictorial representation of a channel (e.g., a logo associated with the channel). Each channel label  can also include a total playlist time that can characterize, for example a total time needed to play remaining playlist for a given channel. Each channel label  can also include a running time that can characterize, for example, an amount of time that the current event has been playing for a given channel. The total time and the running time can be identified, for example, with icons. Each channel label  can also include secondary event indicators, such as can be represented as arrows , which can be directed towards secondary events for a given channel. The channel frame can further include an error count (labeled in  as \u201cTOTAL ERRORS\u201d). The error count can provide the total number of detected errors for each of the channels -.","The timeline view  can also include a playlist timeline for each of the plurality of channels identified by the channel labels . The playlist timeline can be marked with a current time  and\/or an offset time . Moreover, the playlist timeline can include a current time bar  that can identify, for example, the current position in a playlist for each of the plurality of channels identified by the channel labels . In such a situation, the current time bar  can cross on-air events for each of the plurality of channels. For purposes of simplification of explanation, details for a playlist timeline are described with respect to channel , but it is to be understood that the playlist timelines for other channels (e.g., channels  and ) could be implemented in a manner similar to channel .","The playlist timeline of channel  includes a primary event timeline  and for example two secondary event timelines . The primary event timeline  can include a series of primary events, namely, events - (labeled in  as \u201cPROG. -\u201d). Event one  can represent, a segment of a media program (e.g. a television program), a commercial or other short media event, a live event, or any other sequential media event. Event one  can include a program image that can include a representative image (e.g., generated from abstracted metadata) for event one . In some examples, event one  can be color coded to indicate a condition of event one . Event one  can include a title (labeled in  as \u201cTITLE \u201d) that can identify the title of the associated program and\/or the filename for an associated clip. Event one  can also include an effect type icon that can characterize a transitioning of event one . Event one  can further include a transition speed icon that characterizes a transition speed of event one . Event one  can still further include a play icon that indicates that event one  is currently being played. Event one  also includes a behavior type icon that characterizes a behavior type of event one . Moreover, event one  can include an event identifier (labeled in  as \u201c\u201d) that can provide identification code for event one . Still further, event one  can include a duration clock that can provide a duration of event one . It is to be understood that other events can include less or more information.","The playlist timeline  can also include one or more secondary event timeline, such as a first secondary event timeline and a second secondary event timeline . Each of the secondary event timelines  can characterize secondary events that can be time correlated and played out concurrently with content represented by the primary timeline . Thus, each event in the secondary event timelines  can be implemented in a manner similar to event one  in the primary timeline.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 10","FIG. 2","FIG. 2","FIG. 10","FIG. 10","FIG. 7","FIG. 2","FIG. 10"],"b":["450","50","50","450","450","452","300","450","454","52","454","456","452","454"]},{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 11","FIG. 6","FIG. 6","FIG. 11","FIG. 10","FIG. 7","FIG. 9","FIG. 11","FIG. 10"],"b":["500","250","250","500","502","300","500","504","400","502","504","500"]},"In view of the foregoing structural and functional features described above, example methods will be better appreciated with reference to . While, for purposes of simplicity of explanation, the example methods of  are shown and described as executing serially, it is to be understood and appreciated that the present examples are not limited by the illustrated order, as some actions could in other examples occur in different orders and\/or concurrently from that shown and described herein. Moreover, it is not necessary that all described actions be performed to implement a method.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 12","FIG. 1","FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["600","26","4","610","11","6","620","11","625","620"]},"At , a GUI generator can generate a GUI based on the abstracted data. For example, the GUI generator can instantiate playlist objects for each of a plurality of channels to provide corresponding GUIs to facilitate managing playlist data for the respective channels concurrently. The GUI can be implemented, for example, in a manner shown and described with respect to . By employment of the method , a user can interact with the GUI to efficiently manage media operations for a plurality of channels.","What have been described above are examples. It is, of course, not possible to describe every conceivable combination of components or methods, but one of ordinary skill in the art will recognize that many further combinations and permutations are possible. Accordingly, the invention is intended to embrace all such alterations, modifications, and variations that fall within the scope of this application, including the appended claims. Additionally, where the disclosure or claims recite \u201ca,\u201d \u201can,\u201d \u201ca first,\u201d or \u201canother\u201d element, or the equivalent thereof, it should be interpreted to include one or more than one such element, neither requiring nor excluding two or more such elements. As used herein, the term \u201cincludes\u201d means includes but not limited to, and the term \u201cincluding\u201d means including but not limited to. The term \u201cbased on\u201d means based at least in part on."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
