---
title: Method and an apparatus to provide access to operational data in a storage server via multiple data management protocols
abstract: A method and an apparatus to manage data in a networked storage server have been disclosed. In one embodiment, the method includes providing a single logical layer between a number of logical subsystems in a storage server and a number of data management agents in the storage server, wherein the data management agents are operable to service requests from a number of client machines following different data management protocols, and exporting a set of application programming interfaces (APIs) from the single logical layer to interface with the data management agents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08239543&OS=08239543&RS=08239543
owner: NetApp, Inc.
number: 08239543
owner_city: Sunnyvale
owner_country: US
publication_date: 20040322
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to networked data storage systems, and more particularly, to providing access to operational data within a network storage server via multiple data management protocols.","A networked data storage system may include one or more network storage servers or storage appliances. A network storage appliance may provide services related to the organization of data on storage devices, such as disks. Some of these network storage servers are commonly referred to as filers or file servers. An example of such a storage server is any of the Filer products made by Network Appliance, Inc. in Sunnyvale, Calif. The storage appliance may be implemented with a special-purpose computer or a general-purpose computer. Depending on the application, various networked data storage systems may include different numbers of storage servers.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1A","b":["1000","1020","1010","1020","1021","1022","1020","1023","1023"]},"In the following discussion, the terms \u201clogical subsystem\u201d and \u201csubsystem\u201d are used interchangeably to refer to the same concept. Furthermore, the terms \u201cdata management agent\u201d and \u201cagent\u201d are used interchangeably in the following description. The data management agents  are responsible for performing operations to support interfacing with client machines via a specific data management protocol such as Simple Network Management Protocol (SNMP). The performance data may be used by the client machines to monitor and\/or manage the storage server.","Currently, to access the operational data of each of the subsystems , each of the agents  has to directly access the counters residing in the subsystems. However, these direct accesses may result in various inconsistencies and inaccuracies as the agents  may see different views of the same data. Furthermore every time the format of the data changes, each of the agents  may have to change its corresponding data access interfaces accordingly, because each agent typically has its own interface to access the subsystems .","The present invention includes a method and an apparatus to provide access to operational data within a network storage server via multiple data management protocols. In one embodiment, the method includes providing a single logical layer between a number of logical subsystems in a storage server and a number of data management agents in the storage server, wherein each agent is operable to service requests from a number of client machines following a predetermined data management protocol, and exporting a set of application programming interfaces (APIs) from the single logical layer to interface with the data management agents.","In a specific embodiment, the set of APIs includes one or more APIs to enable the data management agents to access operational data relevant to the subsystems.","Other features of the present invention will be apparent from the accompanying drawings and from the detailed description that follows.","A method to provide access to operational data in a networked data storage system via multiple data management protocols is described. In the following description, numerous specific details are set forth. However, it is understood that embodiments of the invention may be practiced without these specific details. In other instances, well-known components, structures, and techniques have not been shown in detail in order not to obscure the understanding of this description.","Some portions of the following detailed description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the tools used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be kept in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to an apparatus for performing the operations described herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.","The processes and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the operations described. The required structure for a variety of these systems will be evident from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium includes read only memory (\u201cROM\u201d); random access memory (\u201cRAM\u201d); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.); etc.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1B","b":["100","110","150","130","110","140","110","150","150","130"]},"Note that any or all of the components of system  and associated hardware may be used in various embodiments of the present invention. However, it can be appreciated that other configurations of the networked data storage system may include some or all of the devices disclosed above.","In one embodiment, the system  includes a storage area network (SAN) to transmit read\/write requests at the block level of the storage server . A block is the basic unit used to store data in the SAN. In an alternate embodiment, the system  is a network-attached storage (NAS) system that transmits data at the file level. In the NAS system, complete files are retrieved instead of segments on a disk. The NAS system uses file access protocols to retrieve data, such as, for example, Network File System (NFS), or Common Internet File System (CIFS). The SAN and the NAS systems may be implemented in a single server or in separate servers.","The storage server  may include a number of subsystems, each providing one or more predetermined functions to enable the operation of the storage server. Each subsystem may include operational data contained in one or more counters residing in the memory of the storage server. The storage server  further includes a number of data management agents, some of which interface with the client machines  to allow the client machines  to access the operational data in the subsystems of the storage server . The storage server  further includes a single logical layer, which may also be referred to as a counter manager, to manage the transactions between the data management agents and the subsystems. The \u201csingle logical layer\u201d as used herein refers to a dedicated module or logic for providing counter management on behalf of the data management agents. Using application programming interfaces (APIs) exported by the counter manager, the agents may access the data of the subsystems on behalf of the client machines . More detail of various embodiments of the storage server  is discussed below.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["200","222","224","226","228","230","200","226","200","226","226","228","224","222"]},"In one embodiment, the processor  reads instructions from the memory  and executes the instructions. The memory  may include any of various types of memory devices, such as, for example, random access memory (RAM), read-only memory (ROM), flash memory, one or more mass storage devices (e.g., disks), etc. In one embodiment, the memory  stores instructions of an operating system . The processor  may retrieve the instruction from the memory  to run the operating system. The processor  responds to requests from client machines, the network management station, or other storage servers and organizes data on the storage devices (e.g., disks) coupled to the storage server . The storage server  interfaces with the storage devices via the storage adaptor .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3","b":["300","310","320","330","323","320","330","310","330","310","305","300","305"]},"Each of the subsystems  may include counters, which maintain operational data pertaining to various components of the storage server  or the storage devices (not shown) managed by the storage server . For example, the subsystem  may include a number of counters maintaining operational data pertaining to the central processing unit (CPU) within the storage server . Another example is the subsystem , which includes counters to maintain operational data related to FCP transactions performed by the storage server . Another subsystem  may include counters to maintain operational data pertaining to all the disks in the system (such as the storage devices  in ) managed by the storage server . Furthermore, the storage server may include a subsystem  which contains counters to maintain operational data pertaining to a RAID protected set of storage devices. In one embodiment, a logical grouping of counters residing in separate subsystems may be defined across one or more subsystems. For instance, referring to , the logical subsystem A  is defined across other subsystems, such as the subsystems , , , and , to include some of the counters in each of the subsystems , , , and .","The counter manager  provides a logical layer between the data management agents  and the subsystems  to manage the transactions between the agents  and the subsystems . On one side, the counter manager  exports a number of application programming interfaces (APIs) to interface with the agents. Using the APIs, the agents  access data from the counters  of the subsystems  via the counter manager . On the other side, the counter manager  provides an API which allows each of the subsystems  to register with the counter manager , in order to make the counter manager  aware of the counters available from that subsystem. In one embodiment, whenever a new subsystem is created, the new subsystem may register with the counter manager . The counter manager  may collect and store state information of the subsystems  in the memory of the storage server. The state information may include the identification codes of the subsystems , the number of instances of each of the subsystems , the names of the subsystems , the list of counters in each of the subsystems , and a pointer to a function for accessing the counters of each of the subsystems .","In one embodiment, the counter manager  manages and maintains the state information of the subsystems . The counter manager  may update the state information whenever the subsystems  have changed. Furthermore, the counter manager  may send the state information to the data management agents  in response to requests from the agents .","The counter manager  allows the counters  to be logically organized. Furthermore, by providing the APIs for the agents  to access data in the counters , the counter manager  may provide a consistent and accurate view of the data to the agents . Furthermore, when the format of the data changes, the APIs provided by the counter manager  may be changed to accommodate the change in the data format, and thus, the agents  may not have to change their corresponding data access interfaces. Hence, the use of the counter manager  greatly simplifies the addition of new counters in the storage server .","Referring back to , the agents  may use the state information from the counter manager  to determine whether or not to access the data of a predetermined subsystem. More detail of the use of the state information is discussed below with reference to .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"},"The system  includes a number of client machines  and a storage server . The storage server  includes a number of data management agents , a counter manager , and a number of subsystems . Some of the agents  interface with the client machines . One of the client machines  may send a request  to one of the agents . The client machine  may request the state information of one or more of the subsystems  from the counter manager . Alternatively, the client machine may request data from the counters  within one or more of the subsystems .","Using the APIs exported by the counter manager , the agents  may get a list of all active subsystems in the storage server, decide on which subsystems to monitor, get a list of all active instances of a predetermined subsystem, get the number of instances of one subsystem, etc. These transactions are represented by the arrow  in . In one embodiment, the APIs exported by the counter manager  include cm_get_object_list, cm_get_object_info, cm_get_num_instances, cm_get_instance_list, cm_get_object_data, etc. One should appreciate that these APIs are merely described for the purpose of illustration. Other embodiments may include some or all of these APIs to interface with the agents .","In response to a request for the state information of the subsystems , the counter manager  may retrieve the requested state information as illustrated by the arrow  and send the requested state information to the requesting agent as illustrated by the arrow .","If the agent requests data from the counters of a predetermined subsystem, the agent may allocate space in the storage server for temporarily storing the data. The counter manager  may check whether the allocated space is enough to hold the requested data. If there is enough allocated space for the requested data, the counter manager  calls the registered update function using the corresponding update function pointer stored by the counter manager  as illustrated by the arrow . The registered update function then copies the requested data into the allocated space and notifies the client as illustrated by the arrow  in .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5"},"In one embodiment, the process illustrated in  involves transactions between a client machine  and a storage server . The storage server  includes at least one agent  to interface with the client machine , a counter manager , and one or more subsystems . The counter manager  exports a number of APIs to interface with the agent . Examples of the APIs may include cm_get_object_list, cm_get_object_info, cm_get_num_instance, cm_get_object_data, etc.","Initially, the client machine  sends a request  for a list of the subsystems in the storage server  coupled to the client machine . In response to the request , an agent within the storage server uses the API, cm_get_object_list , to cause the counter manager to access the memory of the storage server to look up the list of subsystems in the storage server. The counter manager sends the list of subsystems to the agent at . The agent may translate the list into a form specific to the protocol used by the agent to communicate with the client, and may send the list to the requesting client machine at . The list may include subsystems A, B, C, etc.","The client machine  may send a request  for the state information of one of the subsystems in the storage server , such as subsystem B. In response to the request for the state information, the agent  calls cm_get_object_info  to cause the counter manager to access the memory of the storage server  (such as the memory  in ) in order to look up the state information of subsystem B. The counter manager  retrieves the state information of subsystem B and sends the state information to the agent  at . The agent  translates the state information and sends the translated state information to the client machine  at . The state information may include the size, the type, and the description of each performance counter in subsystem B.","The client machine  may send a request  for the data held in the counters relevant to subsystem B. In response to the request , the agent  may call cm_get_num_instance  to find the number of instances of subsystem B. In response to cm_get_num_instance , the counter manager  accesses the memory of the storage server  to look up the number of instances of subsystem B from the state information stored by the counter manager . The counter manager  then sends the number to the agent  at . Based on the number of instances of subsystem B, the agent  allocates space in the storage server memory for copying the data from subsystem B. Then the agent  calls cm_get_object_data  to cause the counter manager  to access the memory of the storage server  to find the pointer to an update function of subsystem B. Then the counter manager  calls the update function  using the pointer to copy the data from the counters of subsystem B to the allocated space at . The agent  translates the data copied to the allocated space at  and then sends the translated data to the client machine  at .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 6"},"Processing logic provides a single logical layer between a number of data management agents and a number of subsystems in a storage server (processing block ). This single logical layer may, for example, include a counter manager, such as the counter manager  or . Processing logic registers the subsystems with the counter manager (processing block ). Processing logic may collect state information of the subsystems and store the state information in a memory of the storage server (such as the memory  in ). The state information may include the identification codes of the subsystems, the number of instances of each of the subsystems, the names of the subsystems, the list of counters in each of the subsystems, and a pointer to a function for accessing each of the subsystems. Processing logic waits for a data request from one of the agents (processing block ). The requesting agent may allocate space in the memory of the storage server for temporarily holding the requested data.","When processing logic receives a data request  from an agent, processing logic determines whether the allocated space is enough to hold the requested data (processing block ). If not, then processing logic returns an error (processing block ). Otherwise, processing logic calls an update function to copy the requested data into the space allocated by the agent (processing block ). Processing logic may use the pointer to the update function to call the update function. Then processing logic notifies the agent (processing block ). Processing logic may then return to processing block  to wait for another request from one of the agents.","The foregoing discussion merely describes some exemplary embodiments of the present invention. One skilled in the art will readily recognize from such discussion, the accompanying drawings and the claims that various modifications can be made without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
