---
title: Load balancing in multi-server virtual workplace environments
abstract: Virtual workplace server software may perform load balancing functionality in a multi-server desktop virtualization system. One or more virtualization servers may receive and maintain common state information for the desktop virtualization system, and may independently execute one or more load balancing functions based on the common state information. Each server may independently analyze the common state information and determine whether it will execute a load balancing function based on the analysis, thereby allowing the servers to coordinate actions using distributed load balancing algorithms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08850429&OS=08850429&RS=08850429
owner: Citrix Systems, Inc.
number: 08850429
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20111005
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application is a non-provisional of U.S. Patent Application No. 61\/390,127, entitled \u201cA Shared-Nothing Highly Available and Scalable Distributed Virtual Desktop System and Method,\u201d filed Oct. 5, 2010, the contents of which are incorporated herein by reference in their entirety for all purposes.","Traditionally, personal computers include combinations of operating systems, applications, and user settings, which are each managed individually by owners or administrators on an ongoing basis. However, many organizations are now using desktop virtualization to provide a more flexible option to address the varying needs of their users. In desktop virtualization, a user's computing environment (e.g., operating system, applications, and\/or user settings) may be separated from the user's physical computing device (e.g., smartphone, laptop, desktop computer). Using client-server technology, a \u201cvirtualized desktop\u201d may be stored in and administered by a remote server, rather than in the local storage of the client computing device.","There are several different types of desktop virtualization systems. As an example, Virtual Desktop Infrastructure (VDI) refers to the process of running a user desktop inside a virtual machine that resides on a server. VDI and other server-based desktop virtualization systems may provide personalized desktops for each user, while allowing for centralized management and security. Servers in such systems may include storage for virtual desktop images and system configuration information, as well as software components to provide the virtual desktops and allow users to interconnect to them. For example, desktop virtualization servers may include one or more virtual machine managers (e.g., hypervisors) to allow multiple different operating systems, tasks, and\/or software configurations to exist on the same physical machine. For instance, a VDI server may include a hypervisor to create and maintain multiple virtual machines, software to manage the hypervisor(s), a connection broker, and software to provision and manage the virtual desktops.","Desktop virtualization systems may be implemented using a single virtualization server or a combination of servers interconnected as a server grid. Multi-server desktop virtualization systems often include additional computing devices and\/or shared storage to provide a common system management portal and to maintain global state information. Such systems often use the external shared storage, along with database and enterprise server software within the virtualization servers, to manage the system.","In light of the foregoing background, the following presents a simplified summary of the present disclosure in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview, and is not intended to identify key or critical elements or to delineate the scope of the claims. The following summary merely presents various described aspects in a simplified form as a prelude to the more detailed description provided below.","According to certain aspects, a server executing desktop virtualization software may perform load balancing functionality in a multi-server desktop virtualization system. A virtualization server may receive and maintain common state information for the desktop virtualization system, and may execute one or more load balancing functions and algorithms based on the common state information. For example, the server may analyze the state information to determine a load balancing action and one or more target servers to perform the action. Then, the server may determine if it itself is one of the target servers, and if so, it may perform the load balancing action. According to additional aspects, the same or similar desktop virtualization software may be executed at multiple servers in the system, each locally maintaining common system state information. Thus, each server may independently determine and execute a course of action based on the common system state, thereby allowing the servers to coordinate actions using distributed load balancing algorithms.","According to other aspects, the distributed load balancing algorithms performed at the servers in a multi-server desktop virtualization system may include, for example, static load balancing, dynamic load balancing, and connection load balancing. Using these load balancing techniques, the servers in the desktop virtualization system may independently execute functions to manage the distribution of stored virtual machine base images, allocated virtual machines, and hosted virtual desktops among the servers in the system. According to additional aspects, the load balancing techniques and functions described herein may be performed by desktop virtualization software, rather than solely by the operating system, enterprise server software and\/or other specialized software within the virtualization servers.","In the following description of the various embodiments, reference is made to the accompanying drawings, which form a part hereof, and in which is shown by way of illustration various embodiments in which aspects described herein may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope and spirit of the present disclosure.","As will be appreciated by one of skill in the art upon reading the following disclosure, various aspects described herein may be embodied as a method, a data processing system, or a computer program product. Accordingly, those aspects may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment combining software and hardware aspects. Furthermore, such aspects may take the form of a computer program product stored by one or more computer-readable storage media having computer-readable program code, or instructions, embodied in or on the storage media. Any suitable computer readable storage media may be utilized, including hard disks, CD-ROMs, optical storage devices, magnetic storage devices, and\/or any combination thereof. In addition, various signals representing data or events as described herein may be transferred between a source and a destination in the form of electromagnetic waves traveling through signal-conducting media such as metal wires, optical fibers, and\/or wireless transmission media (e.g., air and\/or space).",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["101","100","101","101","103","105","107","109","115"]},"I\/O module  may include a mouse, keypad, touch screen, scanner, optical reader, and\/or stylus (or other input device(s)) through which a user of generic computing device  may provide input, and may also include one or more of a speaker for providing audio output and a video display device for providing textual, audiovisual, and\/or graphical output. Software may be stored within memory  and\/or other storage to provide instructions to processor  for enabling generic computing device  to perform various functions. For example, memory  may store software used by the generic computing device , such as an operating system , application programs , and an associated database . Alternatively, some or all of the computer executable instructions for generic computing device  may be embodied in hardware or firmware (not shown).","The generic computing device  may operate in a networked environment supporting connections to one or more remote computers, such as terminals . The terminals  may be personal computers or servers that include many or all of the elements described above with respect to the generic computing device . The network connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. When used in a LAN networking environment, the generic computing device  may be connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the generic computing device  may include a modem  or other network interface for establishing communications over the WAN , such as computer network  (e.g., the Internet). It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computers may be used.","Generic computing device  and\/or terminals  may also be mobile terminals (e.g., mobile phones, smartphones, PDAs, notebooks, etc.) including various other components, such as a battery, speaker, and antennas (not shown).","The disclosure is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and\/or configurations that may be suitable for use with the disclosure include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","Referring to , a diagram is shown illustrating a high-level architecture of an illustrative desktop virtualization system. In this example, the desktop virtualization system may be single-server or multi-server system, including at least one server  (e.g., a VDI server) configured to provide virtual desktops to one or more client access devices . As used herein, a desktop refers to a graphical environment or space in which one or more applications may be hosted and\/or executed. A desktop may include a graphical shell providing a user interface for an instance of an operating system in which local and\/or remote applications can be integrated. Applications, as used herein, are programs that execute after an instance of an operating system (and, optionally, also the desktop) has been loaded. Each instance of the operating system may be physical (e.g., one operating system per device) or virtual (e.g., many instances of an OS running on a single device). Each application may be executed on a local device, or executed on a remotely located device (e.g., remoted).","In this example, the server  includes a processor  and memory , and also may include one or more of the features of the general computing device  discussed above. The server  also includes a hypervisor  capable of creating and managing virtual machines  on the server . The hypervisor  is a software layer that may execute directly on the hardware of the server , or may execute within the operating system of the server . Although only one hypervisor  is shown in this example, servers in desktop virtualization systems may include multiple different hypervisors , each supporting its own set of virtual machines .","The server  in this example further includes virtual workplace software . The virtual workplace software  may include one or more software components having the functionality to control the hypervisor , create and manage virtual machines , and to enable authorized access to the virtual machines  by end users at client access devices . As shown in this example, the virtual workplace software  may execute on the hypervisor  within server . For example, the virtual workplace software  may run as a virtual machine on the hypervisor  that it manages. In other examples, virtual workplace software  may execute as an application on a separate machine different from the server , and may communicate with the hypervisor  via a network protocol.","Each virtual machine  created and\/or managed by the virtual workplace software  may support one or more virtual desktops for users at client devices . As described in more detail below, clients  may connect to a virtual machine  over a network (e.g., the Internet ) to initiate a virtual desktop for a user at the client device  (e.g., thin client, laptop, tablet, mobile device, etc.). For example, users may use web browser software to access a web-based console provided by the virtual workplace software . In other examples, a graphical user interference client application may be installed on the client devices  which is designed to connect to and communicate with the virtual workplace software . When a user at client device  attempts to access the virtual workplace software  to initiate a virtual desktop session, or to perform any of the management or administrative functions of the desktop virtualization system, the virtual workplace software  may authenticate the user to confirm that the user has the proper authority to perform the functions requested by the user. After the user has been authenticated, the virtual workplace software  may select a virtual machine  for the user's virtual desktop session and provide the user with the Internet Protocol (IP) address of the selected virtual machine  and\/or may connect the user's access device  to the remote desktop protocol client running on the virtual machine .","The virtual workplace software  also may provide a graphical user interface through which administrators can manage the desktop virtualization system and\/or an application programming interface (API) that may be accessed by other programs to perform management functions for the desktop virtualization system.","The virtual workplace software  may control the hypervisor  to create the virtual machines  running the virtual desktops for clients . Each virtual machine  may be created from a virtual machine template that identifies one or more virtual machine characteristics, for example, the operating system the virtual machine  may run, a set of applications the virtual machine  may contain, amounts of the CPU and RAM resources of the server  that the virtual machine  is permitted to consume, and other such characteristics that may be required to create and run virtual machines . Base images corresponding to templates may be stored in the memory  of servers , including a collection of files needed to implement a virtual machine of the template type. A virtual machine base image may include, for example, the operating system files and preinstalled programs for virtual desktops using that template. The collection of files in a base image may be relatively large (e.g., several gigabytes in size), and thus there may be significant costs for storing and transferring base images between system servers . Authorized administrators may create different types of virtual machine templates via the virtual workplace software . Administrators also may specify valid and\/or invalid users, and assign users and groups of users to different templates using the virtual workplace software .","Referring now to , a functional component diagram is shown for an example virtual workplace software component . In this example, the virtual workplace software  may be one or more software components configured to provide out-of-the-box support for desktop virtualization systems. Thus, the virtual workplace software component(s)  may perform a wide variety of desktop virtualization functions, for example, managing the hypervisor, creating and terminating virtual machines, and setting-up connections between the virtual machines and users.","In this example, the virtual workplace software  includes an actualization engine  configured to communicate with the hypervisor  and memory\/storage system  of the server . The actualization engine  may use an API published by the hypervisor to create, start, clone, modify, shutdown, and delete virtual machines . The actualization engine  may also provide the media access control (MAC) addresses, virtual networks, storage and other resources required by the virtual machines . Additionally, the actualization engine  may provide one or more APIs, which may be used by the state engine  or other components, to allow these components to manage the data storage of the desktop virtualization system (e.g., request and modify various storage sizes, remaining capacities, etc.), and to write and retrieve data from the storage system . Through these APIs and\/or additional programming techniques, the actualization engine  may provide a layer of abstraction to the hypervisor , allowing the virtual workplace software  to run successfully on different types of hypervisors .","The virtual workplace software  in this example includes a state engine . The state engine  may store a comprehensive view of the state of the desktop virtualization on the server , for example, data corresponding to all virtual machines  and their states, a list of the virtual machine templates (or base images) stored on the server , along with the associated users and groups for each template, and policy and configuration information required to manage the templates, users, and virtual desktops. The state engine may also maintain current virtual desktop session information such as a list of the users\/clients  that are currently logged in, the virtual machines  the each user is logged into, how long each user has been logged in, and other state information needed to manage user sessions and to recover from session failures. The data maintained by the state engine  may persist across a reboot of the virtual workplace software  and\/or server , and the state engine may use an API provided by the actuator  to persist its state information to the storage system .","A policy engine  also may be included in the virtual workplace software . The policy engine (or director) component , may include the software logic for orchestrating multi-step activities or asynchronous activities performed by the desktop virtualization system. For example, the policy engine  may coordinate and control the creating and\/or deleting of multiple virtual machines . The policy engine  also may control creation, deletion, and re-generation of virtual machines  from their virtual machine base images.","In this example, the virtual workplace software  includes a desktop service  configured to communicate with a desktop agent software component  running on each virtual machine . The desktop service  may send\/receive messages from each of its associated desktop agents , and then leverage the policy engine , state engine , and actuation engine  to manage virtual machines , virtual machine templates, and user associations, etc. The desktop service  may also provide a connection broker that accepts login credentials from users at client devices  (e.g., via a web server or other client-server configuration), and then creates and\/or assigns virtual machines  to authorized users, and provides management consoles to authorized administrators.","A desktop agent software component , which may execute on some or all of the virtual machines  in the virtualization system, may monitor the health and status of its virtual machine  and provide the relevant information to the virtual workplace software . For example, each desktop agent  may send a periodic message to the desktop service  to confirm that the virtual machine  is still operating. The desktop agent  also may send a message to the desktop service  whenever a user logs in or out of its virtual machine , including the name of the user.","Additionally, in this example, the virtual workplace software  includes a federation engine  configured to communicate with one or more additional servers  in a multi-server desktop virtualization system. As described below, servers  in a multi-server desktop virtualization system may communicate with one another to transfer state information, virtual machine base images, and client connection requests between servers. For example, each server  in a multi-server system may periodically transfer state information to the other servers in the system describing which virtual machines' base images it is currently storing, what virtual machine images it currently has allocated, and its current capacities (e.g., number of virtual desktops hosting, number of virtual machine images, available memory and processing power, etc.). Thus, the federation engine  may be used by the state engine  to send and receive state updates to other servers  in order to maintain global state information for the system.","Referring now to , a high-level architecture diagram is shown for an illustrative multi-server desktop virtualization system. In this example, the system includes a set of at least three desktop virtualization servers . The servers  may be configured similarly with identical hardware - and\/or an identical hypervisor . In other examples, the servers  may include a variety of different hardware\/software configurations. The various servers  may communicate and coordinate operation with one another as a server grid to provide the back-end functionality of the desktop virtualization system. The servers  may be closely located, for example, in a commonly managed server cluster, and may communicate over a LAN or other high-speed communication network . In other examples, one or more of the servers  may be remotely located, and the communication network  may include a WAN (e.g., the Internet) and\/or other remote networks.","In this example, the federation engines  of the multiple servers  may communicate with one another through the same network  used to communicate with the client access devices . In other examples, the servers  may use different networks and\/or combinations of networks to communicate with other servers  and client devices .","The virtual workplace software  in each server may communicate via its respective federation engine  to maintain a global (or system-wide) common information state. That is, each server  may receive and store data in its memory  corresponding to state of one or more other servers  in the system, for example, the list of virtual machine base images stored in the other servers , the virtual machine images currently allocated in the other servers , and the current capacities of the other servers .","Each virtual workplace software  may execute the same (or similar) set of algorithms on their locally stored common state information, so that each server  may independently determine and execute a course of action based on the global system state, thereby allowing the servers to the coordinate actions with distributed algorithms. For example, a distributed static load balancing algorithm may be run by the virtual workplace software  of each server  to determine which virtual machine base images should be stored on which servers , and to implement the distribution by transferring base images between servers as needed. Thus, by replicating virtual machine base images from the memory  of one server  to the memory of one or more other servers, virtual machines  running on different servers may behave as though they are running on the same base image. Additionally, a distributed dynamic load balancing algorithm may be run by each server's virtual workplace software  to determine a desired distribution of virtual machine images  on the servers . A distributed connection load balancing algorithm may be run by each server's virtual workplace software  to route connections from client devices  to virtual machines  at selected servers .","By storing the global common state information for the desktop virtualization system locally at each server , each server may provide administrators with a single coherent view and\/or management functions for the system (e.g., a management console), so that authorized administrators can seamlessly manage the system (e.g., users, virtual machines, base images, etc.) without needing to retrieve additional state information from each server  in the system.","Having described in  various examples of desktop virtualization systems, and certain software and functionality that may be included in servers  of such systems, the following paragraphs provide additional examples of various methods and systems relating to load balancing in a multi-server virtual workplace environment (e.g., multi-server desktop virtualization system). In , various methods and systems are described for performing load balancing using virtual workplace software  (e.g., desktop virtualization software) in a server . For example, the virtual workplace software  may perform static load balancing to distribute virtual machine base images among the servers  in the system (see, e.g., ), dynamic load balancing to distribute allocations of virtual machines among the servers  (see, e.g., ), and\/or connection load balancing to distribute the hosting of virtual desktops for client devices  among the servers  (see, e.g., ).","Thus, the virtual workplace software  of a server  may perform each of the static, dynamic, and connection load balancing functions while other servers  perform the same (or similar) functions, so that system-wide load balancing decisions are determined and implementing locally. However, it should be understood that not every desktop virtualization server  in a system must execute all of the same load balancing functions in all cases. For example, certain load balancing functions may be executed by a subset of servers  in a desktop virtualization system, while other load balancing functions are executed by other servers.","Referring now to , a flow diagram is shown illustrating a method of performing static and\/or dynamic load balancing on a server in a desktop virtualization system. In step , new or updated state information may be received via a management console at a server  in a multi-server desktop virtualization system. A management console may be any interface enabling an authorized user to perform a management or administrative task on the server , or access or update the common state information of the desktop virtualization system. For example, the virtual workplace software  of a server  may provide a web-based management console that can be remotely accessed by users via web browser software. In other examples, a graphical user interference (GUI) of a standalone client application, installed locally on the server  or on client devices , may allow users to connect to and communicate with the virtual workplace software  to perform management functions or access\/update the state information of the desktop virtualization system.","The virtual workplace server  may receive a login request, for example, from a client access device . The login request may include the user's authentication credentials (e.g., username and password), so that the virtual workplace server  may authenticate the login request to determine the user's identity and confirm that the user is an authorized administrator within the desktop virtualization system. For example, the virtual workplace server  may provide a secure and\/or encrypted web page with a login window within a web-based application, or may use other secure authentication techniques, to request and receive the user's authentication credentials. The virtual workplace server  also may retrieve a set of user permissions and\/or security credentials associated with user, for example, a user account or user profile, access control lists (ACL) for the user and\/or user groups associated with the user, or other security\/permissions information, to determine if the user is an authorized administrator.","After logging in to the management console at the virtual workplace server , an authorized administrator may be provided with a user interface of the management console to allow the administrator to perform the various management\/administrative functions for the desktop virtualization system. Through a management console, administrators may be permitted to manage virtual machine templates (e.g., create new templates, edit or remove existing templates on the system), manage virtual machine allocations and images (e.g., specify the number of servers that should support various templates, specify the number of virtual machines to be allocated for various templates, etc.), manage users (e.g., create and remove users, edit user permissions and groups, authorize users to initiate virtual desktop sessions for various virtual machine templates, etc.), and perform other system management and administrative tasks.","In step , the server  may transmit the updated state information to one or more other servers in the desktop virtualization system. For example, if an administrator has recently created a new virtual machine template via a management console in step , then in step  the server  may send a message to the other servers including a definition of the new virtual machine template. Similarly, if an administrator has recently changed the desired allocation of virtual machines for a template (e.g., requested more or less virtual machines on the system), or change a user's permissions (e.g., authorized or de-authorized users from accessing virtual desktops of a template), then the server  may inform the other servers  of the updated virtual machine allocations or changed user permissions.","Referring now to step , new or updated state information also may be received from another server  in the system. For example, if an administrator has recently performs management functions (as described above in step ) via a management console provided by another system server , the other server may transmit the updated state information to the local server . Thus, the updated state information received in step  may include similar state information described above in steps -.","The state information received in step  may be an update of one or more pieces of system information, or may be a complete set of the global state information for the desktop virtualization system. For example, if the server  is a newly added server to the system, or is reconnecting after being offline a period of time, then the server  may request and receive a data transfer containing the complete global state information for the system.","In step , the updated state information received via the management console (step ) or received from another server (step ) may be stored locally by the server , for example, in a global state information data structure in the memory  of the server.","In step , the server  analyzes the updated state information in comparison to the previous state information and\/or one or more additional factors, and in step , the server  determines whether or not to perform a load balancing function based on the analysis in step . For example, a static load balancing function may change the distribution of virtual machine templates (i.e., the storing of virtual machine base images) on the various servers  in the system, and a dynamic load balancing function may change the distribution of virtual machines on the various servers  in the system. By performing static and dynamic load balancing, a desired distribution of base images and virtual machines among the system servers may potentially allow for improved hosting of virtual desktops for client devices and more efficient operation of the desktop virtualization system.","When determining a desired distribution of base images and\/or virtual machines among the system servers , the load balancing algorithms may consider various factors, such as the number of the servers in the system, the capacity (e.g., available memory and\/or available processing power) of the servers in the system, the number of virtual machine templates supported by the system, the size of their corresponding base images, the number of virtual machines of each base image to be supported by the system, the numbers of virtual machines of each base image currently allocated at each server, and the numbers of users authorized to initiate virtual desktop sessions for each virtual machine template, among other factors. Therefore, if it is determined in step  that the received updated state information includes a change to any of these factors, then in step  a static and\/or dynamic load balancing function may be performed (:Yes). However, if it is determined in step  that the received updated state information is unrelated to these factors, the in step  the server  might not perform a static and\/or dynamic load balancing function (:No). As an example, if the updated state information received in step  indicates that a server has been removed from the system, then the analysis in step  may lead to a determination that one or more load balancing functions may be performed (:Yes) in order to redistribute the base images and virtual machines that were allocated on the removed server. In contrast, if the updated state information received in step  indicates that only a property of a template has been changed, then the analysis in step  may lead to a determination that load balancing functions need not be performed (:No).","In certain embodiments, the analysis of the updated state information in step  and the determination of whether or not to perform a load balancing function in step  may involve comparisons of the updated state information to predetermined thresholds. For example, if an administrator indicates via a management console that the system should allocate one additional virtual machine for a certain template, then the determination in step  may be that no static load balancing function needs to be performed because the one additional virtual machine may be allocated on a server  already storing the base image for the template. However, if updated state information is received that fifty additional virtual machines should be allocated for a certain template, then the determination in step  may be that a static load balancing function should be performed in order to transfer the base image for the template to one or more additional servers to share the resources needed to allocate the new virtual machines. As another example, if a single new user is added to the system and given permissions to instantiate virtual desktop sessions for a certain template, then the determination in step  may be that a dynamic load balancing function need not be performed because the existing virtual machine allocations can support the single additional user. However, if many new users are given permissions to instantiate virtual desktop sessions for the template, then the determination in step  may be that a dynamic load balancing function may be performed in order to allocate a number of additional virtual machines for the template within the system.","In step , if a determination is made to perform one or more static or dynamic load balancing functions (:Yes), then the server  may invoke the determined functions to execute one or more load balancing algorithms. Examples of static, dynamic, and connection load balancing functions and algorithms are described below with respect to , , and , respectively. As discussed above, the same (or similar) analysis in step  may be performed independently by the virtual workplace software  of each server  in the system. Moreover, because each server  may locally maintain identical (or similar) global state information for the system, then each server may reach the same determination in step  regarding which static and dynamic load balancing functions\/algorithms to invoke. Thus, by invoking the same set of load balancing functions, the servers  within the desktop virtualization system may independently determine and execute a coordinated course of action for load balancing within the global system state.","Referring now to , a flow diagram is shown illustrating a method of performing static load balancing in a multi-server desktop virtualization system. Static load balancing refers to managing the distribution and storage of different virtual machine base images on the various servers  in the system. During static load balancing, different virtual machine base images may be transferred to and from various servers  in the system. Specifically, the algorithm shown in  may determine whether a specific base image should be added to the current server . As discussed above, the algorithm in this example, along with other load balancing functions, may be independently executed by multiple desktop virtualization servers  in order to coordinate load balancing across the system.","In step , for a virtual machine base image in the desktop virtualization system, the server  may determine whether the base image is stored on a single server or on multiple servers in the system. In this example, the system may implement a policy in which every virtual machine base image should be stored on at least two servers  in the system to provide redundancy and protect against a server failure. Therefore, if the base image is stored only on a single server  (:Yes), then a determination is made that an additional base image should be added to at least one server  in the system, and the process proceeds to step  to identify the server(s)  on which to add the base image.","In this example, if the base image is already stored on multiple servers in the desktop virtualization system (:No), then the server  analyzes the global state information relating to the base image in step . For example, the server  may retrieve and analyze locally stored common state information for the system, such as the number of servers in the system currently storing the base image and the capacities of those servers, the number and capacities of servers in the system not storing the base image, and the number of virtual machines to be allocated across the system using the base image.","From the analysis in step , the server  may determine in step  whether or not the base image should be added to one or more additional servers in the system. For example, if the number of virtual machines to be allocated for the base image has recently increased by more than a predetermined threshold, or if an existing server storing the base image has recently been taken off line, then the server  may determine that the base image should be transferred to at least one additional server in the system (:Yes). In contrast, if the number of virtual machines to be allocated using the base image has not been increased by more than a predetermined threshold, or if the existing servers storing the base image have ample capacity to support additional virtual machines, then the server  may determine that the base image should not be transferred to any additional servers at this time (:No).","In step , after determining that the base image should be transferred to at least one additional server (:Yes), the server  performs a ranking algorithm to identify the target server(s) on which the base image should be added. To perform this determination, the server  may identify the subset of system servers that do not currently contain the base image, and then rank the subset based on their current and\/or expected future capacities (e.g., memory and processing power). Other factors may be considered as well, for example, the varying costs of transferring the base image to different servers, and\/or the physical location of the servers in comparison to the client devices  that are likely to initiate virtual desktop sessions on the virtual machines  of the base image.","In step , using the list of one or more target servers identified in step , the server  determines whether or not the base image should be added to its own local memory . That is, the server  may review the list of target servers to determine if it is on the list. If so (:Yes), the server  may transfer the base image to its local memory  in step , for example, by locating another server in the system that contains the base image and requesting a transfer of the base image from the other server. If the server  is not on the target server list identified in step  (:No), then the server  need not transfer the base image into its local memory .","As discussed above, the algorithm in this example may be executed independently by multiple servers  in the desktop virtualization system. Each server  may perform the same (or similar) analysis on the same (or similar) global state information, and thus may identify the same list of one or more target servers in step . Therefore, when each server independently performs the determination in step  of whether or not the base image should be added to its local memory , the determination will be affirmative when executed by a target server , and negative when executed by a non-target server . As a result, the independently executed algorithm will coordinate the static load balancing across the system, by causing only the identified target servers to request and store the base image.","In certain examples, the algorithm shown in  may be executed once to determine that a base image should be added to a set of multiple servers . In other examples, the algorithm of  may be executed iteratively, identifying a single server  in each iteration, until an iteration of the algorithm determines that no additional servers  should add the base image. Additionally, although the algorithm in  only describes adding a virtual machine base image to one or more servers  in a desktop virtualization system, corresponding functions and algorithms may be used to remove base images from servers, and to redistribute the system by moving base images from one server to another.","Referring now to , an illustrative diagram is shown for transferring a virtual machine base image between two servers  in a multi-server desktop virtualization system. In this example, virtualization server may request a base image  from virtualization server after executing the algorithm in  and determining the base image  should be stored by server . As discussed above, the base image  may include, for example, the operating system files and preinstalled programs for virtual desktops using that base image. After receiving a request from the virtual workplace software on virtualization server for the base image , the virtual workplace software on virtualization server may transfer the entire collection of files for the base image from its local memory to the memory of the requesting server . The virtualization server may also reconstruct one or more ancillary descriptor files and\/or may customize the files of the base image so the base image will operate correctly on the recipient server ","In certain embodiments, if permitted by the underlying hypervisors , the base image may be transferred from the memory of the first server directly to the memory of the second server . In other examples, if a hypervisor does not permit a direct transfer of the base image files from between the servers' disks, then the virtual workplace software may stage the transfer (as shown in ) by first exporting the collection of base image files to a file system writable by the software , and then importing the base image files, with customization, onto the memory of the destination server ","Referring now to , another illustrative diagram is shown for transferring a virtual machine base image between two servers  in a multi-server desktop virtualization system. In this example, an image difference is used to mitigate the expensive transfer of larger base images. The image difference is a file, that when applied to the current base image , results in the new base image . The image difference may work similarly on multiple servers -. Thus the virtual workplace software  on the target server may construct a new image from the old base image using the different received from the first server ","Further, in this example, the base image difference between the base image and the new image may be a difference disk generated by the hypervisor  to store the written disk portions of a base image as distinguished from the read-only mass found in the base image . The hypervisor  may permit this capability and may offer mechanisms to flatten the difference into the old base image to generate a new base image . In other examples, the difference may be computed by a binary difference and patching application, and flattened at the destination server using a similar application.","Referring now to , a flow diagram is shown illustrating a method of performing dynamic load balancing in a multi-server desktop virtualization system. Dynamic load balancing refers to the process of managing the distribution of virtual machines (or virtual machine images) on the various servers  in the system. During dynamic load balancing, virtual machine images may be created for templates using base images on the various servers  in the system. Specifically, the function shown in  performs an algorithm determining whether a virtual machine image  corresponding to specific template\/base image should be added to the current server . As discussed above, the algorithm in this example, along with other load balancing functions, may be independently executed by multiple desktop virtualization servers  in order to coordinate load balancing across the system.","In step , a server  in a desktop virtualization system compares the number of virtual machines  that are currently allocated in the system for a specified template to a determination of the desired number of virtual desktops for that template that should be supported by the system. The current number of allocated virtual machines  for the template may be retrieved by the server  from the global state information stored locally in the server's memory . The desired number of virtual desktops  to be supported for a specific template may be set by an administrator via a management console, or may be calculated based on the numbers and types of users authorized to initiate virtual desktop sessions for that template. Such calculations may be based on additional factors, such as the past usage data of virtual machines  of the template and estimates of future usage (e.g., estimated numbers of sessions, length of sessions, etc.) of virtual desktop sessions for the template.","From the analysis and comparison in step , the server  may determine in step  whether or not one or more new virtual machines  for the template should be allocated within the system. For example, if an administrator has recently increased the number of desired virtual machines to be allocated for a current template, and if the system servers have the capacity to support the desired virtual machines , then the server  may determine that the additional number of virtual machines should be allocated in the system (:Yes). In contrast, if the number of users authorized to initiate virtual desktop sessions for the template has not been increased by more than a predetermined threshold, and\/or if the current allocation of virtual machines  for the template are sufficient to support the estimated number of virtual desktop sessions, then the server  may determine that the no additional virtual machines  should be allocated for the template at this time (:No).","In step , after determining that one or more additional virtual machines  should be allocated in the system (:Yes), the server  performs a ranking algorithm to identify the target server(s) that should allocate the additional virtual machines . To perform this determination, the server  may identify the subset of system servers that currently contain the base image for the virtual machine template, and then rank the subset based on their current and\/or expected future capacities (e.g., memory and processing power). Other factors may be considered as well, for example, the physical location of the various servers  in comparison to the client devices  that are likely to initiate virtual desktops sessions for the template.","In step , using the list of one or more target servers identified in step , the server  determines whether or not it should allocate one or more of the new virtual machines  for the system. That is, the server  may review the list of target servers to determine if it is on the list. If so (:Yes), the server  may allocate a new virtual machine  in step , using the base image of the template stored in its local memory . If the server  is not on the target server list identified in step  (:No), then the server  need not allocate a new virtual machine .","As discussed above, the algorithm in this example may be executed independently by multiple servers  in the desktop virtualization system. Each server  may perform the same (or similar) analysis on the same (or similar) global state information, and thus may identify the same list of one or more target servers in step . Therefore, when each server independently performs the determination in step  of whether or not it should allocate new virtual machines  for the template, the determination will be affirmative when executed by a target server , and negative when executed by a non-target server . As a result, the independently executed algorithm will coordinate the dynamic load balancing across the system, by causing only the identified target servers to allocate new virtual machines  for the template.","In certain examples, the algorithm shown in  may be executed once to determine a set of target servers  on which to allocate new virtual machines  and\/or the number of virtual machines  that each target server should allocate. For instance, multiple target servers may be identified in the analysis and\/or ranking in step , and the algorithm may determine that a first target server should allocate more virtual machines than a second target server (e.g., based on the server capacities, etc.). In other examples, the algorithm of  may be executed iteratively, instructing a single target server  to allocate a single virtual machine in each iteration, so that previous virtual machine allocations may be accounted for in subsequent iterations of the algorithm. Additionally, although the algorithm in  only describes allocating a new virtual machine to one or more servers  in a desktop virtualization system, corresponding functions\/algorithms may be used to de-allocate (i.e., destroy) virtual machines from servers, and to distribute virtual machine allocations among the system servers.","Referring now to , a flow diagram is shown illustrating a method of performing connection load balancing in a multi-server desktop virtualization system. Connection load balancing refers to the process of managing the distribution of virtual desktop sessions on the various servers  in the system.","In step , a server  receives a virtual desktop login request from a client device . For example, users may use web browser software to access a web-based login console provided by the virtual workplace software . In other examples, a client application may be installed on the client devices  designed to connect to and communicate with the virtual workplace software . When a user at client device  attempts to access the virtual workplace software  to initiate a virtual desktop session, the virtual workplace software  may authenticate the user's credentials (e.g., username and password), so that the server  may determine the user's identity and confirm that the user is authorized to initiate virtual desktop sessions for one or more virtual machine templates on the system.","If the user is authorized to initiate virtual desktop sessions for more than one template (e.g., PC-based or MAC-based virtual desktops, different virtual desktops with business applications for different specific user roles, etc.), then the server  may first determine a template for the requested virtual desktop session before selecting the virtual machine  and server  to host the desktop. In some examples, specific virtual machine templates may be associated with certain types of logins, for instance, designated uniform resource locators (URLs) or standalone client applications. In other examples, a user may first login to the server  and then request a virtual desktop template (e.g., PC or MAC desktop).","In step , after the user is authenticated for a virtual desktop based on a specific template, the server  may identify and rank potential target servers to host the virtual desktop session. To identify and rank potential target servers, the server  may retrieve the global state information from its local storage  and assemble a list of the servers in the system that currently store the base image for the template of the requested virtual desktop. Then, the server  may perform a ranking algorithm to generate a preferred ordered list of target servers for hosting the virtual desktop. To rank the potential target servers in the system, the server  may retrieve and analyze the current and\/or expected future capacities (e.g., memory and processing power) of each server in the list. Other factors may be considered as well, for example, the number of available (i.e., unreserved) virtual machines at the server, and\/or the physical or geographic location of the server in comparison to the virtual desktop client device .","In step , the server  begins an iterative function on the ordered list of potential target servers for hosting the virtual desktop. For the first potential target server, the requesting server  will attempt to reserve a virtual machine for the template at the target server in step . To reserve a virtual machine , the requesting server  may send a request and receive a response via the virtual workplace software  of the both servers. If a virtual machine  at the first potential target server is successfully reserved (:Yes), then the requesting server  may end the iterative function and return the virtual machine connection information (e.g., an IP address for the target server) to the requesting client device  in step . However, if the attempt to reserve a virtual server  at the target server is unsuccessful, for example, if the target server does not respond to the request, or responds that it has no available virtual machines (:No), then the requesting server  may continue its iterative function at step  with the next potential target server in the list. Additionally, if a target server is unresponsive during the attempted communication in step , the requesting server  may update the global state information for the system to mark the target server as unavailable.","Referring now to , a diagram is shown illustrating storage of base images and the allocation of virtual machines using the base images, on an example desktop virtualization system containing multiple servers. In this example, the desktop virtualization system contains servers -, each of which contains two base images in its memory  and a corresponding set of virtual machines for each base image. The distribution of base images and allocation of virtual machines shown in this example desktop virtualization system may be the result of executing a series of static and dynamic load balancing algorithms, such as those described above in .","As shown in , static and dynamic load balancing functions may result in an asymmetric distribution of base images across the servers -in the desktop virtualization system, and each base image might only be stored on a subset of the servers. In this example, base image  is stored on six servers in the grid, and there are sixteen virtual machine images based on base image  distributed among the system servers. Base image  is stored on four servers and has twelve corresponding virtual machine images in the system, and so on.","Thus, as illustrated in this example, aspects of the present disclosure may allow for a scalable and distributed virtual desktop system to be implemented either with or without an external shared storage and\/or external management. In this example, the functionality to manage the desktop virtualization system, and to perform dynamic, static, and connection load balancing may be included within the virtual workplace software  running on top of the hypervisor  and\/or operating system of each server  in the system.","Further, aspects of the present disclosure may allow for dynamic scalability of the desktop virtualization system. For example, a new server  may be brought into the server grid of an existing system by first installing the virtual workplace software  and configuring the connection between the virtual workplace software  and the hypervisor . An administrator may then identify the location of any other server in the grid to the new server , or vice versa. After a new server  has been identified as a member of the system to an existing server, the virtual workplace software  of the two servers may automatically join the new server  into the server grid by authenticating the new server , updating and joining the new server's state with the global state information for the rest of the system, and transferring any needed base images to the new server . Each of these functions may be performed by the virtual workplace software , rather than by the operating system or enterprise server software within the servers . Moreover, these functions may be performed automatically, without involvement from the administrator.","In certain examples, if a server  detects that another server in the system is not responding to communications, the nonresponsive server may be marked as missing in the global state information, and may thereafter be excluded from hosting virtual desktop sessions for client devices . In this case, the load balancing functions in the remaining servers  in the system may transfer base images and\/or generate virtual machines to account for the nonresponsive server. At a later time, if the nonresponsive server  becomes responsive and is once again available to the system, this server may be joined back into the server grid automatically and may resume sharing in the system's hosting of virtual desktops.","Various aspects described herein may be embodied as a method, an apparatus, or as one or more computer-readable media storing computer-executable instructions. Accordingly, those aspects may take the form of an entirely hardware embodiment, an entirely software embodiment, or an embodiment combining software and hardware aspects. Any and\/or all of the method steps described herein may be embodied in computer-executable instructions. In addition, various signals representing data or events as described herein may be transferred between a source and a destination in the form of light and\/or electromagnetic waves traveling through signal-conducting media such as metal wires, optical fibers, and\/or wireless transmission media (e.g., air and\/or space).","Aspects of the disclosure have been described in terms of illustrative embodiments thereof. Numerous other embodiments, modifications, and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure. For example, one of ordinary skill in the art will appreciate that the steps illustrated in the illustrative figures may be performed in other than the recited order, and that one or more steps illustrated may be optional in accordance with aspects of the disclosure. Modifications may be made by those skilled in the art, particularly in light of the foregoing teachings. For example, each of the elements of the aforementioned embodiments may be utilized alone or in combination or sub-combination with elements of the other embodiments. It will also be appreciated and understood that modifications may be made without departing from the spirit and scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Having thus described aspects of the disclosure in general terms, reference will now be made to the accompanying drawings, which are not necessarily drawn to scale, and wherein:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
