---
title: Damage containment by translation
abstract: Interface elements of a logic module are translated by renaming, adding dummy elements, and/or associating traps with dummy elements. Trusted parties are made aware of renamed interface elements and thereby allowed to properly communicate with logic module. Untrusted parties are kept unaware of the interface translation, with attempts to guess correct interface elements likely to fail, instead resulting in communication attempts with dummy elements and subsequent trapping of the untrusted parties.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07464408&OS=07464408&RS=07464408
owner: Solidcore Systems, Inc.
number: 07464408
owner_city: Cupertino
owner_country: US
publication_date: 20030829
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field","Invention relates to containment of damages to computing resources, and in particular to containment of damages originating from untrusted or malicious logic modules such as viruses.","2. Related Art","An improperly guarded provider module, such as a software module providing a service or a resource, can be taken over by an untrusted user module, such as a virus. Such an untrusted user module may cause considerable damage by using system resources, by accessing and\/or corrupting the provider module's data, by copying itself to other machines, and so on. Hence, it is desirable to contain the untrusted user module and limit its destruction to the extent possible.","An ideal solution would ensure a logic module's immunity to such attacks. However, as logic modules become increasingly complex, such immunity is increasingly difficult to accomplish. Furthermore, it is impossible to fully audit third party modules (such as software applications and shared libraries) and verify that they are immune to attacks from untrusted parties. Every new module and every change in existing modules must be similarly inspected, with the risk of allowing attacks in case such an inspection is not thoroughly exhaustive. Such an inspection process, even if possible, will consume large amounts of resources and time and typically will not be performed except in a highly secure environment.","A second option is to operate a provider module in a sandbox and provide no more resources than the provider module needs, thereby confining threats to the provided resources. However, such resources may still be critical and are vulnerable to considerable damages.","Accordingly, there is a need for stronger means of damage containment.","Interface elements of a provider module are translated by renaming, by adding dummy elements, and\/or by associating traps with dummy elements. Trusted user modules are made aware of renamed interface elements and are thereby allowed to properly communicate with the provider module. Untrusted user modules are kept unaware of the interface translation and their attempts to guess the correct interface elements are likely to fail, instead resulting in communication attempts with dummy elements and the subsequent trapping of the untrusted user modules. Where possible, a large number of dummy elements are introduced in order to significantly increase the probability of trapping untrusted user modules.","The following set of definitions serves as a glossary of terms used in the detailed description:\n\n",{"@attributes":{"id":"p-0023","num":"0064"},"figref":["FIG. 1","FIG. 1"],"b":["101","102","102","106","106"],"sub":["1","2 ","3"]},"In one embodiment, provider  comprises an operating system (OS), and provider interface  comprises a set of system calls provided by the OS for accessing system resources and for operating on such resources, wherein interface elements  comprise individual system call identifiers (names) (such as system call numbers serving as indices into a vector of system calls, or other identifiers indicating system calls). In order to prevent an untrusted user module from accessing system resources, the untrusted user module is prevented from making system calls, as follows.","First, existing system call names are translated (renamed), wherein the new names are kept secret from untrusted user modules.  is a diagram illustrating a provider interface  after a renaming of the interface elements , according to an embodiment of the present invention. Provider interface  results from renaming the interface elements  of the original provider interface , changing the original names ID, IDand IDto the new names newID, newIDand newID. The new names are randomly generated and assigned, and\/or are assigned using a mathematical function such as a hash function (wherein the original names are hashed to a set of new names), and\/or by adding an offset to the original names (for example by adding or appending a constant number or string to the numbers or strings representing the original names), or by any other method for renaming a set of original names to a set of new names.","Second, one or more dummy interface elements  are added to the provider interface , as shown in  according to an embodiment of the present invention. As a result, an untrusted user module attempting to access a valid interface element  simply by guessing the name of such a valid interface element  will likely guess incorrectly and instead point to a dummy interface element . The larger the proportion of dummy interface elements  to valid interface elements , the larger the likelihood that such an untrusted user module, unaware of the particular renaming of the provider module interface , will point to a dummy interface element  (as a result of false guessing) instead of pointing to an intended valid interface element . For example, dummy interface elements  may be added to a set of system calls of an operating system simply by changing individual system call numbers to different values and leaving \u201choles\u201d in between such system call numbers, wherein the holes come to represent sets of dummy interface elements .","Third, \u201ctraps\u201d  are associated with one or more of the dummy interface elements , resulting in a provider interface  as shown in according to an embodiment of the present invention. A trap  is a mechanism that triggers the disabling or termination of a user module if the user module attempts to access a dummy interface element  endowed with such a trap . An attempt to access a dummy element  which is not endowed with a trap  is ignored. For example, if an untrusted user module, such as a malicious software application or a software application taken over by a virus, attempts to guess a system call (i.e. a valid interface element ) but instead points to a dummy interface  endowed with a trap , the application can be terminated and\/or disabled by the OS and\/or the system administrator alerted of the intrusion.","It is contemplated that the above three provider interface translation steps need not necessarily be performed in said order, but may be performed independently or in combination, and in different sequence.","The translation of a provider interface  can be thought of as adding a \u201cwrapper\u201d to the provider, as shown in - and -. As shown in -, an untranslated provider interface  exposes the interface elements  provider . - shows the translated provider interface  as a wrapper around the untranslated interface . The valid elements  of the wrapper interface  are properly mapped to the elements  of the untranslated interface , while the dummy elements  of the wrapper interface  either trap accessors or do not work at all.","Among the benefits of disallowing an untrusted user module, such as a software application, to make system calls are the following:\n\n","Translation of a provider interface  into a new provider interface  necessitates that trusted user modules accessing and\/or interacting with the translated provider interface  be made aware of the translation, while untrusted user modules be kept unaware of the translation.","For example, in the system call translation described above, while preventing untrusted user modules from making systems calls, trusted user modules are made aware of the proper names of valid system calls. Therefore, a trusted user module is translated in accordance with the particular translation of the set of system calls. For example, an executable code representing a trusted user module is translated such that system calls within the executable code referencing old system call names are replaced with system calls in the executable code referencing the new system call names according to the particular translation of the set of system calls applied to the OS. Such translation of a trusted user module ensures proper operation of the trusted user module within the environment of the translated provider interface (i.e. the translated set of system calls).","It is an advantageous aspect of the present invention that deciphering a translation of one provider interface does not provide any advantage in deciphering a different translation of another provider interface, as long as the translations are different, even if the provider modules are otherwise similar or even identical. For example, in the system call translation described above, the system call translation can be unique to each individual copy of the OS, such that breaking the translation on one copy of an OS does not provide any advantage in breaking a different translation on a different copy of the OS.",{"@attributes":{"id":"p-0034","num":"0079"},"figref":"FIG. 5","b":["120","121","122","122","106","102","106","105","120","123","106","106","122","123","101","105","120","101","120"]},{"@attributes":{"id":"p-0035","num":"0080"},"figref":"FIG. 6","i":"a ","b":["101","102","109","111","109","101","102","111"]},{"@attributes":{"id":"p-0036","num":"0081"},"figref":["FIG. 6","FIG. 5"],"i":["b ","a"],"b":["101","105","110","111","111","105","110","109","101","105"]},"It is useful to store (on a disk or other computer-readable media) a copy of the untranslated provider  (for example OS code) as well as a copy of the untranslated user modules, in case a patch is to be applied to the provider  after the provider interface has undergone the above described translation. In such a case, the patch is applied to the untranslated provider , and the interface  of the patched provider  is translated as described above. Trusted user modules are also translated, in accordance with said translation of the interface of the patched provider .","Other alternative embodiments of the present invention are contemplated as described below.","In one embodiment of the present invention, provider  comprises a shared software library, and provider interface  comprises a set of exported functions of the shared library. Optionally, the shared library operates on top of a translated set of OS system calls, thereby representing a user of the provider OS, and therefore is translated according to the translated set of OS system calls. The shared library interface  is translated, resulting in a shared library interface  comprising renamed exported functions and dummy shared library functions added to trap untrusted callers. In this embodiment, in order to translate a software user module operating on top of the translated set of OS system calls as well as linking with the shared library, the software user module is (1) translated according to the translation of the set of OS system calls as well as (2) translated according to the translation of the shared library interface. Alternatively, if the software user module accesses the shared library but does not make any direct OS system calls, the translation of the software user module need not take into account the translation of the OS, and the software user module can be translated according to the shared library interface translation only. In general, in system comprising a set of one or more translated provider interfaces (such as a protected shared library) as well as a set of one or more untranslated provider interfaces (such as an unprotected shared library), a software user module may selectively access one or more providers as long as the software user module is translated according to the translated provider interfaces which the software user module intends to access.","In one embodiment, provider  comprises a hardware processor, provider interface  comprises an instruction set of the processor, and translated provider interface  comprises a translated instruction set, either (1) with added dummy instructions for trapping untrusted parties, or (2) without any dummy instructions. A program G (for example an OS) comprising instructions for execution on the hardware processor is translated accordingly in order to properly execute using the translated instruction set. In a first embodiment, the hardware processor comprises a table for storing the translation between the old instruction set and the new instruction set. The hardware processor decodes fetched translated instructions back to native (i.e. untranslated) instructions for execution according to the translation table. Employing such a translation table allows for dynamically changing the translation on a given hardware processor, as well as allowing different translations on different processors. In a second embodiment, the decoding of the fetched translated instructions is delegated outside of the hardware processor, for example to a memory element, allowing the hardware processor to operate without being altered to accommodate for the translation and decoding. In this embodiment, the memory element distinguishes between fetched instructions (which are then decoded to the hardware processor's native instructions) and fetched data (which need not be decoded). The memory element comprises a translation table for translation of fetched instructions.","In one embodiment, provider  comprises a web server, and provider interface  comprises a set of one or more URLs (Unique Resource Locators) served by the web server. The translated provider interface  comprises a translation of the original served URLs, for example via a one-to-one mapping (i.e. translation) of the original URLs to a set of random strings, wherein the translation is given for example by a URL translation table or a URL hashing function. The web server serves the translated URLs to a browser and decodes requested URLs internally according to the particular translation used. In the case of (untranslated) URLs containing one or more parameters entered at the browser, the web server translates the pathname portion and\/or the parameter names (if any) of the URLs. This embodiment protects against untrusted (or malicious) rewriting of a URL at the browser side, a common attack with a goal of using knowledge gleaned from the URL syntax to access and\/or corrupt data at the web server side.","In one embodiment, provider  comprises a file system, and provider interface  comprises a set of file names according to the file system. The set of files of the file system is divided into a set of protected files and a set of unprotected files, and the translated provider interface  comprises translated file names (for example according to a file name translation table) for the set of protected files, and original (untranslated) names for the set of unprotected files. Such a file system operates in conjunction with a translated set of OS system calls, and a library function is provided by the OS to (trusted) software user modules for translating a file name. Executables (or other software user modules) running on an OS with such a file system provide a list of translated file names for all the protected files which will be accessed by the executable, which can be accomplished at compile-time and\/or link-time using said library function. Upon a file access request by an executable at run time, the OS decodes the file name and determines whether it is a protected file. If the file is unprotected, access is granted. If the file is protected, the OS determines whether the file name appears in the list of files accessed by the executable. If the file name appears in the list, access is granted, otherwise access is denied. Trusted legacy executables which do not provide said list of translated file names can be disassembled to determine names of accessed files, and then stored in the form of a new executable providing said list of translated file names. This legacy transformation is a resource intensive process but can be accomplished in order to secure a system.","In one embodiment, provider  comprises a file system, and provider interface  comprises a set of default extensions according to the file system. The translated provider interface  comprises a translation of the set of default extensions to a new set of extensions. As an example, extensions such as .exe and .bat are translated to .abc and .xyz. A translated extension is decoded by the file system (or the OS) upon file access to ensure proper handling. The translation is inaccessible to untrusted user modules, thereby preventing untrusted user modules from fabricating a file with an extension known to cause the file to behave in a certain way, such as causing a file to be executed, or causing a target application to process the file resulting in data corruption or compromised system security.","In one embodiment, provider  comprises a computer system, provider interface  comprises a set of communication port identifiers (such as port numbers) of the computer system, and provider interface  comprises a translated set of communication port identifiers with added dummy identifiers for trapping untrusted user modules. The computer system advertises the port translation to trusted computer systems communicating with it. Optionally, a trusted notification user module residing on the computer system notifies one or more other trusted notification user modules residing on other computer systems as to the most recent translation. Such a trusted notification user module guides trusted software user modules in communicating with the secured computer system. For example, a mail reader application requests connection to (untranslated) port  of a secured mail server computer system, the notification user module translates the request to port  of the secured mail server computer system, according to the most recent port translation (translating  to ), and relays the connection request to port  of the secured mail server computer system. It is an advantageous aspect of this embodiment that an untrusted user module is discouraged from attempting to improperly communicate with the secured computer system.","In one embodiment, provider  comprises a communication network, provider interface  comprises a set of protocols for the communication network, and translated provider interface  comprises a set of protocols for the communication network, wherein the set of protocol identifiers are translated, and dummy types are added to trap untrusted user modules. For example, the communication network may be a set of nodes communicating via TCP (Transmission Control Protocol) or UDP (User Datagram Protocol) over IP (Internet Protocol) over a MAC (media access control) layer such as Ethernet. In a network packet (for example an Ethernet packet), the identifier in the \u201ctype\u201d field indicates the protocol governing the packet datagram (such as indicating the IP protocol), and within the packet datagram, the identifier within the \u201cprotocol type\u201d field indicates the protocol governing the packet datagram (such as indicating the TCP protocol or the UDP protocol). In this example, translated provider interface  comprises translated identifiers for the described \u201cprotocol type\u201d fields (for example as indicated by a protocol type translation table), and trusted user modules as well as trusted drivers on routers, switches and\/or network interface cards are made aware of the translation, enabling decoding of the intended protocols and resulting in proper handling and\/or routing of the packets according to the intended protocols. It is an advantageous aspect of this embodiment that untrusted user modules remain unaware of the protocol translation and hence are unable to communicate over the communication network.","In one embodiment, provider  comprises a database, provider interface  comprises a set of SQL keywords and\/or commands served by the database, and translated provider interface  comprises a set of translated SQL keywords and\/or commands served by the database. The database (or a software wrapper around the database) translates the keywords and\/or commands to random strings (for example according to a database keyword translation table) and notifies trusted user modules of the translation The database (or software wrapper around the database) decodes keywords and\/or command received from user modules back to native (untranslated) keywords, according to the translations used, allowing proper processing of the keywords and\/or database commands received from trusted user modules while preventing untrusted user modules from successfully injecting a database command (such as a query or an update) into a database query. In an alternative embodiment, provider interface  comprises a set of keywords and\/or command in another interpreted language, such as Perl, Python, Java or PHP.",{"@attributes":{"id":"p-0047","num":"0092"},"figref":"FIG. 7","i":"a ","b":["701","702","701","702"]},{"@attributes":{"id":"p-0048","num":"0093"},"figref":"FIG. 7","i":"b ","b":["102","101","710","102","101","102","101","102","711","105","106","102","108","101","102","105","101"]},{"@attributes":{"id":"p-0049","num":"0094"},"figref":"FIG. 7","i":"c ","b":["720","101","105","105","721","101","105","101","105"]},"Foregoing described embodiments of the invention are provided as illustrations and descriptions. They are not intended to limit the invention to precise form described. In particular, it is contemplated that functional implementation of invention described herein may be implemented equivalently in hardware, software, firmware, and\/or other available functional components or building blocks, and that networks may be wired, wireless, or a combination of wired and wireless. Other variations and embodiments are possible in light of above teachings, and it is thus intended that the scope of invention not be limited by this Detailed Description, but rather by Claims following."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4","i":"a "},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4","i":"b","b":"1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4","i":"b","b":"2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6","i":"a "},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6","i":"b "},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7","i":"a "},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7","i":"b "},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7","i":"c "}]},"DETDESC":[{},{}]}
