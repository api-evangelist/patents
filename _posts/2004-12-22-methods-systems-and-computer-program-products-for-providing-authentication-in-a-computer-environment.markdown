---
title: Methods, systems, and computer program products for providing authentication in a computer environment
abstract: Exemplary embodiments relate to methods, systems, and computer program products for providing authentication in a computer environment. The method includes receiving a request for a web service from a client. The request is received at a J2EE based application server hosting one or more applications. The request includes a Kerberos security token and a Kerberos service ticket. Each application has its own Kerberos identity. It is verified that the client has access to the web service using the Kerberos security token and Kerberos service ticket as input to the verifying. The client is provided a connection to the web service if the verifying results in a determination that the client has access to the web service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07461400&OS=07461400&RS=07461400
owner: AT&T Intellectual Property, I,L.P.
number: 07461400
owner_city: Wilmington
owner_country: US
publication_date: 20041222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["Exemplary embodiments relate generally to providing authentication in a computer environment, and more particularly, to methods, systems and computer program products for providing Kerberos authentication in a computer environment.","Using the Internet to transmit data requires security in order to prevent unauthorized use of data and\/or applications. Because tools to \u201csniff\u201d passwords off the network are in common use by system crackers, applications that send unencrypted passwords over the network are vulnerable to security breaches. Other client\/server applications rely on the client program to be \u201chonest\u201d about the identity of the user who is using it. Still other applications rely on the client to restrict its activities to those that it is allowed to do, with no enforcement by the server.","Some sites attempt to use firewalls to solve network security problems. This approach assumes that the \u201cbad guys\u201d are on the outside, which may not always be the case. Firewalls also have the disadvantage in that they restrict how users can utilize the Internet. These restrictions may not be realistic and\/or acceptable to users of the system.","Network security may also be addressed by using a tool such as Kerberos. Kerberos is a network authentication protocol developed at Massachusetts Institute Technology (MIT) to allow users and services to authenticate themselves to each other. Kerberos is designed to provide strong authentication for client\/server applications by using secret-key cryptology. A free implementation of Kerberos is available from MIT. Kerberos is also available as a professionally supported product from several different vendors. The Kerberos protocol uses cryptography so that a client can prove its identity to a server (and vice versa) across an insecure network connection. After a client and server have used Kerberos to prove their identity, they can encrypt and\/or digitally sign all of their communications to assure privacy and data integrity as they interact.","WebLogic Server (WLS) from BEA System, Incorporated includes an application infrastructure for developing, integrating, securing and managing distributed service-oriented applications. WLS is a standards based application server providing a foundation on which an enterprise can build its client\/server applications. It may be utilized to support application development and application deployment including integrating enterprise systems and databases, delivering services and collaborating over the Internet.","In many cases clients are authenticated to Kerberos during client start up and Kerberos authentication is utilized to provide security between the client and services invoked by the client. WLS, as currently implemented, does not support an interface to Kerberos and therefore Kerberos cannot be utilized to provide security between the client and WLS. The ability to utilize Kerberos to provide security between a client and WLS would be desirable.","Exemplary embodiments relate to methods, systems, and computer program products for providing authentication in a computer environment. Methods include a request for a web service from a client. The request is received at a J2EE based application server hosting one or more applications. The request includes a Kerberos security token and a Kerberos service ticket. Each application has its own Kerberos identity. It is verified that the client has access to the web service using the Kerberos security token and Kerberos service ticket as input to the verifying. The client is provided a connection to the web service if the verifying results in a determination that the client has access to the web service.","Systems for providing authentication in a computer environment include a J2EE based application server hosting one or more applications. The J2EE based application server includes an input for receiving a request for a web service from a client. The request includes a Kerberos security token and a Kerberos service ticket. Each application has its own Kerberos identity. The system also includes instructions for verifying that the client has access to the web service using the Kerberos security token and Kerberos service ticket as input to the verifying. The client is provided a connection to the web service if it is determined that the client has access to the web service.","Computer program products for providing authentication in a computer environment include a storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for facilitating a method. The method includes a request for a web service from a client. The request is received at a J2EE based application server hosting one or more applications. The request includes a Kerberos security token and a Kerberos service ticket. Each application has its own Kerberos identity. It is verified that the client has access to the web service using the Kerberos security token and Kerberos service ticket as input to the verifying. The client is provided a connection to the web service if the verifying results in a determination that the client has access to the web service.","Other systems, methods, and\/or computer program products according to exemplary embodiments will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such additional systems, methods, and\/or computer program products be included within this description, be within the scope of the present invention, and be protected by the accompanying claims. A user device for providing metadata includes an input for receiving a notification that an item in a repository has been modified. The user device also includes an output for communicating the notification to a user via the user device.","In accordance with exemplary embodiments, a Kerberos plug-in component is added to a BEA WLS application server in order to provide Kerberos authentication for web services. By utilizing the Kerberos plug-in component, Kerberbos authentication may be utilized to provide security between a client and a web service located within the WLS. In exemplary embodiments, the Kerberos authentication mechanism is based on Java generic security service-application programming interface (GSS-API), BEA WLS security APIs (security service provider interface \u201cSSPI\u201d), Java 2 Enterprise Edition (J2EE) enterprise Java beans (EJBs) and the Java API for XML-remote procedure call (JAX-RPC).","As used herein, the term Kerberos principal refers to the identity of a user to a Kerberos realm (e.g., \u201cmybilling@mykerberos.realm\u201d). A Kerberos key distribution center (KDC) refers to a Kerberos server responsible for issuing Kerberos tickets. A ticket granting ticket as used herein refers to a Kerberos ticket that allows a requestor to obtain tickets for services. A service ticket is a Kerberos ticket issued to a specific user for a specific service for a limited period of time (e.g., eight hours) that allows the service to authenticate a user. In addition, Java authentication and authorization service (JAAS) is the Java security API that the BEA WLS security framework is based on.","In JAAS, a subject is a class that represents the identity of a user or computing service (e.g., a person and a web application). In JAAS, a principal is a class that represents the identity of a user or computing service to a specific authentication technology. A subject may have one or more principles. For example, a user may have both (and probably different) Unix login names and Windows login names. GSS-API is an API specification RFC 1964, RFC 2743, defined by the Internet engineering task force (IETF), that provides a high level interface to different underlying security mechanisms. JGSS is an API specification for a Java implementation of the GSS-API RFC 2853. Both the Sun and IBM implementations of JGSS provide support for the Kerberos V5 security mechanism. SSPI is a BEA proprietary API that allows third party developers to write security modules and plug them into BEA WLS. An identify asserter is a security module in SSPI that accepts a security token as input, verifies the authenticity of the token, and if successful derives the token owner's identity from it.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["102","104","104","102","104","106","102","102","102","102","104","102","102"]},"The network  may be any type of known network including, but not limited to, a wide area network (WAN), a local area network (LAN), a global network (e.g. Internet), a virtual private network (VPN), and an intranet. The network  may be implemented using a wireless network or any kind of physical network implementation. A user system  may be coupled to the host system through multiple networks (e.g., intranet and Internet) so that not all user systems  are coupled to the host system  through the same network. One or more of the user systems  and the host system  may be connected to the network  in a wireless fashion.","The storage device  may be implemented using a variety of devices for storing electronic information. It is understood that the storage device  may be implemented using memory contained in the host system  or the user system  or it may be a separate physical device. The storage device  is logically addressable as a consolidated data source across a distributed environment that includes a network . Information stored in the storage device  may be retrieved and manipulated via the host system . The storage device  includes data such as the Kerberos KDC data and data storage for the web service applications. The storage device  may also include other kinds of data such as information concerning the updating and creation of the Kerberos service tickets and security tokens. In exemplary embodiments, the host system  operates as a database server and coordinates access to application data including data stored on storage device .","The host system  depicted in  may be implemented using one or more servers operating in response to a computer program stored in a storage medium accessible by the server. The host system  may operate as a network server (e.g., a web server) to communicate with the user system . The host system  handles sending and receiving information to and from the user system  and can perform associated tasks. The host system  may also include a firewall to prevent unauthorized access to the host system  and enforce any limitations on authorized access. For instance, an administrator may have access to the entire system and have authority to modify portions of the system. A firewall may be implemented using conventional hardware and\/or software.","The host system  may also operate as an application server. The host system  executes one or more computer programs to implement web services (e.g., WLS). Processing may be shared by the user system  and the host system  by providing an application (e.g., java applet) to the user system . Alternatively, the user system  may include a stand-alone software application for performing a portion or all of the processing described herein. As previously described, it is understood that separate servers may be utilized to implement the network server functions and the application server functions. Alternatively, the network server, the firewall, and the application server may be implemented by a single server executing computer programs to perform the requisite functions.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 3","FIG. 3","FIG. 3"],"b":["302","324","304","310","312","306","302","306","104","304","102"]},"At block  in , the WLS  is initialized and authenticated to Kerberos. When the WLS  starts up it initializes each of the registered IdentityAsserters and calls their initialize methods. In the case of the Kerberos identify asserter in the \u201cKrb5IdentityAsserter\u201d box  in , the initialize method calls the JGSS API method createCredentials. CreateCredentials is called using the Kerberos principal and secret key supplied in the servers keytab file. The createCredentials method causes a request to be made to the Kerberos KDC  authenticating the server. The Kerberos Identity Asserter may support multiple Kerberos identifiers allowing each web service to be secured individually. For example, if the WLS application server hosted both a billing web service and a purchasing web service each could have their own Kerberos identity, the billing webservice known to Kerberos as mybilling@mykerberos.realm and the purchasing webservice known as mypurchasing@mykerberos.realm. Client applications now have to obtain a session ticket for the particular service they wanted to use. For example a client wanting to use the billing service must send a session ticket for the mybilling@mykerberos.realm with each request. Exemplary JGSS code to accomplish this is as follows:",{"@attributes":{"id":"p-0026","num":"0025"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ The initialize method here has logging and exception handling"},{"entry":"\/\/ removed for clarity."},{"entry":"public void initialize(ProviderMBean mbean, SecurityServices"},{"entry":"services) {"},{"entry":"\/\/Initializes the GSSManager"},{"entry":"manager = GSSManager.getInstance( );"},{"entry":"Krb5IdentityAsserterMBean myMBean = (Krb5IdentityAsserterMBean)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"mbean;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"description = myMBean.getDescription( ) + \u2033\\n\u2033 +"},{"entry":"myMBean.getVersion( );"},{"entry":"\/\/ The following lines retrieve parameters from the"},{"entry":"\/\/ KerberosIdentityAsserter configuration."},{"entry":"\/\/ Retrieve the list of Kerberos principals that the Identity Asserter will"},{"entry":"\/\/ authenticate with, each servicePrincipal is a string for example"},{"entry":"\/\/ \u201cmypurchasing@mykerberos.realm\u201d, \u201cmybilling @mykerberos.realm\u201d"},{"entry":"String[] servicePrincipals = myMBean.getServicePrincipals( );"},{"entry":"if (servicePrincipals == null \u2225 servicePrincipals.length == 0) {"},{"entry":"String error ="},{"entry":"\u2033Krb5IdentityAsserter kerberos service principal list must be set\u2033;"},{"entry":"log.error(\u2033Error: \u2033 + error);"},{"entry":"throw new java.lang.SecurityException(error);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Retrieve the name of the krb5 config file and set java system"},{"entry":"property."},{"entry":"\/\/ The krb5.conf file contains Kerberos configuration information"},{"entry":"such as"},{"entry":"\/\/ the IP Address of the kdc, etc"},{"entry":"System.setProperty(\u2033java.security.krb5.conf\u2033,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"myMBean.getKrb5ConfigFile( ));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Retrieve the name of the JAAS config file and set the java system"},{"entry":"\/\/ property. The JAAS config file contains login parameters for the"},{"entry":"\/\/ Kerberos login module, in the case of the Kerberos identity"},{"entry":"asserter it"},{"entry":"\/\/ will contain a section for each Kerberos principal, identifying the"},{"entry":"\/\/ principal name, the login module and the parameters to the login"},{"entry":"\/\/ module. For example"},{"entry":"\/\/ mypurchasing$mykerberos.realm {"},{"entry":"\/\/ \u2003com.sun.security.auth.module.Krb5LoginModule required"},{"entry":"\/\/ \u2003storeKey=true principal=\u2033mypurchasing@mykerberos.realm\u2033"},{"entry":"\/\/ \u2003\u2002useKeyTab = true keyTab=\u2033billing.keytab\u2033;"},{"entry":"\/\/ };"},{"entry":"System.setProperty(\u2033java.security.auth.login.config\u2033,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"myMBean.getJAASConfigFile( ));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"System.setProperty(\u2033sun.security.krb5.debug\u2033,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"myMBean.isDebug( ).toString( ));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ The Kerberos Identity Asserter needs to keep track of each Kerberos"},{"entry":"\/\/ principal and its associated credentials, so it creates a HashMap. Each"},{"entry":"\/\/ entry in the hash map will be a GSSCredential identified \u2018keyed\u2019 by"},{"entry":"\/\/ the Kerberos principal name it belongs to."},{"entry":"credentialMap = new HashMap(servicePrincipals.length);"},{"entry":"\/\/ The Kerberos identity asserter now tries to \u2018login\u2019 each service"},{"entry":"\/\/ principal to Kerberos using the parameters specified in the"},{"entry":"jaas.conf and"},{"entry":"\/\/ krb5.conf, if successful the an entry is created in Hashmap containing"},{"entry":"\/\/ the GSSCredentials"},{"entry":"try {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for (int i = 0; i < servicePrincipals.length; i++) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/@ symbol is not permitted in a jaas.conf file as a login context name"},{"entry":"LoginContext lc = new LoginContext(servicePrincipals[i].replace(\u2032@\u2032,"},{"entry":"\u2032$\u2032));"},{"entry":"\/\/ authenticate the Subject"},{"entry":"lc.login( );"},{"entry":"\/\/ get the authenticated Subject"},{"entry":"Subject subject = lc.getSubject( );"},{"entry":"PrivilegedExceptionAction action = new"},{"entry":"AquireGSSCredentialForServiceAction(servicePrincipals[i]);"},{"entry":"GSSCredential credential ="},{"entry":"\u2003(GSSCredential) subject.doAs(subject,action);"},{"entry":"credentialMap.put(servicePrincipals[i], credential);"},{"entry":"}"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"catch (java.security.PrivilegedActionException pe) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"catch (LoginException le) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"catch (Exception e) {"},{"entry":"}"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ The AquireGSSCredentialForServiceAction class actually does the"},{"entry":"\/\/ login to kerberos"},{"entry":"class AquireGSSCredentialForServiceAction"},{"entry":"implements java.security.PrivilegedExceptionAction {"},{"entry":"private final String servicePrincipal;"},{"entry":"public AquireGSSCredentialForServiceAction(String servicePrincipal) {"},{"entry":"this.servicePrincipal = servicePrincipal;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public Object run( ) throws GSSException {"},{"entry":"Oid krb5Mechanism = new Oid(\u20331.2.840.113554.1.2.2\u2033);"},{"entry":"GSSName serverName = manager.createName(servicePrincipal, null);"},{"entry":"GSSCredential credential = manager.createCredential(serverName,"},{"entry":"GSSCredential.INDEFINITE_LIFETIME,"},{"entry":"krb5Mechanism,"},{"entry":"GSSCredential.ACCEPT_ONLY);"},{"entry":"return credential;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"When the processing in block  is completed, WLS is ready to accept a request from a client, as described in block . At block  in , the client  starts up and requests access to an application on the WLS . At the Java web service client  on the client , a client application starts up and sets the service principal property to the Kerberos principal of the server that it wants to use. Then, the client  registers the Krb5ClientSecurityHandler  on the web service client  on the service endpoint and calls the method on the web services as usual. Exemplary code follows:",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HashMap handlerConfig = new HashMap( );"]},{"entry":[{},"HandlerConfig.put(\u201cservicePrincipal\u201d,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cmybilling@mykerberos.realm\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HandlerRegistry registry = service.getHandlerRegistry( );"]},{"entry":[{},"List handlerList = new ArrayList ( );"]},{"entry":[{},"handlerList.add(new HandlerInfo"]},{"entry":[{},"(com.abc.security.ws.KrbClientSecurityHandler.class,"]},{"entry":[{},"handlerConfig, null));"]},{"entry":[{},"registry.setHandlerChain(portName, handlerList)"]},{"entry":[{},". . ."]},{"entry":[{},"Port.echo(\u201chello\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"At block  in , the client  creates a Kerberos security token and service ticket and transmits them to the WLS . To perform the processing in block , the Krb5ClientSecurity Handler  in the client  intercepts the outbound simple object access protocol (SOAP) request from the Java web service client . SOAP is an industry standard specification that defines a message format and rules for passing the messages that is utilized by the Java web service client . The Krb5ClientSecurityHandler  has a communication link to the KDC . The Krb5ClientSecurityHandler  creates a GSS wrapped security token by creating a GSS context and calling the context.initSecContext. The byte array returned from initSecContext is a Kerberos service ticket (Keberos application request or KRB_AP-REQ) enclosed in a GSS frame. An example follows:",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"GSSContext context = manager.createContext(serverName,"},{"entry":"krb5Mechanism, null, GSSContext.DEFAULT_LIFETIME);"},{"entry":"\/* set desired context properties *\/"},{"entry":"context.requestMutualAuth(false) ; \/\/ SWITCH OFF"},{"entry":"byte[] inToken = new byte [0];"},{"entry":"byte[] outToken = context.initSecContext(inToken, 0, inToken.length);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The security token cannot be sent in its initial form because it contains binary characters that cannot be represented in extended markup language (XML). So, the security token is converted to the multi-purpose Internet mail extension (MIME) type base64 binary encoding. The token is then added to the SOAP message header. The SOAP request, including the service ticket and the security token is then sent over the network  using hypertext transfer protocol (HTTP) to the web service  in the WLS . Exemplary embodiments of the present invention are not limited to using HTTP, any method known in the art may be utilized to transmit the service ticket and security token including, for example, issuing a SOAP request over JMS.","Referring back to , at block , the WLS receives the security token and service ticket. If it is determined, at block , that there is a Kerberos token in a SOAP header, then block  is performed. At block , WLS  authenticates the session and user using Kerberos. To perform the processing in blocks  through , the Krb5ServerSecurityHandler  intercepts the message from the client . A Kerberized web service has a Kerberos principal and credentials associated with it that are used during the authentication process to authenticate client requests. A Kerberos principal is associated with the particular web service by specifying the principal name in Weblogics web-services.xml deployment descriptor as a parameter to the Krb5ServerSecurityHandler . The following example shows the first few lines of a web-services.xml file.",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d encoding=\u201cus-ascii\u201d ?>"},{"entry":"<web-services>"},{"entry":"<handler-chains>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<handler-chain name=\u201cmyChain\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<handler class name=\u201ccom.bls.security.ws.Krb5ServerSecurityHandler\u201d>"},{"entry":"<init-params>"},{"entry":"<init-param name=\u201cServicePrincipal\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"value=\u201c mybilling@mykerberos.realm \u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/init-params>"},{"entry":"<\/handler>"},{"entry":"<\/handler-chain>"},{"entry":"<\/handler-chains>"},{"entry":"etc.."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"When the Krb5ServerSecurityHandler  is initialized, the init method is called at which time the service principal is read from the web-services.xml file by calling handlerInfo.getHandlerConfigo.get(\u201cservicePrincipal\u201d). The following example code shows retrieving servicePrincipal from the web-services.xml.",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public void init(HandlerInfo handlerInfo) throws SOAPFaultException {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"this.handlerInfo = handlerInfo;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"servicePrincipal = (String)this.handlerInfo.getHandlerConfig( ).get("}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cServicePrincipal\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"When an operation on the web service is invoked, the request is intercepted by the Krb5ServerSecurityHandler . The handleRequest method is invoked on the Krb5ServerSecurityHandler which attempts to extract the Kerberos service ticket from the SOAP header. If a session ticket is not present a security exception is raised and control returned to the client. If a session ticket is present, the assertidentity method with parameters servicePrincipal and the session ticket is invoked on the Krb5AuthEJB . The Krb5AuthEJB's ejb-jar.xml deployment descriptor enables the EJB to run as a privileged user, specifically a WLS a user with administration authority. This allows the EJB to call the privileged Weblogic security framework method assertldentity. Following is an excerpt from EJB-xml showing how to enable bean to run as privileged user.",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ejb-jar>"]},{"entry":[{},"<enterprise-beans>"]},{"entry":[{},"<session>"]},{"entry":[{},"<ejb-name>AuthenticatorEJB<\/ejb-name>"]},{"entry":[{},"<home>com.bls.security.AuthenticatorHome<\/home>"]},{"entry":[{},"<remote>com.bls.security.Authenticator<\/remote>"]},{"entry":[{},"<ejb-class>com.bls.security.AuthenticatorEJB<\/ejb-class>"]},{"entry":[{},"<session-type>Stateless<\/session-type>"]},{"entry":[{},"<transaction-type>Container<\/transaction-type>"]},{"entry":[{},"<security-identity>"]},{"entry":[{},"<run-as>"]},{"entry":[{},"<role-name>priv<\/role-name>"]},{"entry":[{},"<\/run-as>"]},{"entry":[{},"<\/security-identity>"]},{"entry":[{},"<\/session>"]},{"entry":[{},"<\/enterprise-beans>"]},{"entry":[{},"<assembly-descriptor>"]},{"entry":[{},"<security-role>"]},{"entry":[{},"<role-name>priv<\/role-name>"]},{"entry":[{},"<\/security-role>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Following is an excerpt from weblogic-ejb-jar.xml mapping role defined in ejb-jar.xml to a specific user with administrator rights in WLS.",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<weblogic-ejb-jar>"]},{"entry":[{},"<weblogic-enterprise-bean>"]},{"entry":[{},"<ejb-name>AuthenticatorEJB<\/ejb-name>"]},{"entry":[{},"<stateless-session-descriptor>"]},{"entry":[{},"<\/stateless-session-descriptor>"]},{"entry":[{},"<enable-call-by-reference>True<\/enable-call-by-reference>"]},{"entry":[{},"<jndi-name>ejb.AuthenticatorEJBRemoteHome<\/jndi-name>"]},{"entry":[{},"<\/weblogic-enterprise-bean>"]},{"entry":[{},"<security-role-assignment>"]},{"entry":[{},"<role-name>priv<\/role-name>"]},{"entry":[{},"<principal-name>weblogic<\/principal-name>"]},{"entry":[{},"<\/security-role-assignment>"]},{"entry":[{},"<\/weblogic-ejb-jar>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The assertldentity method in the Krb5SecurityHandler delegates the call to the Krb5AuthEJB.",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"private Subject assertIdentity(String servicePrincipal, byte[] token,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"NonCatalogLogger log) throws"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"javax.security.auth.login.LoginException, java.rmi.RemoteException {"},{"entry":"Object obj[] = new Object[2];"},{"entry":"obj[0] = servicePrincipal;"},{"entry":"obj[1] = token;"},{"entry":"Subject subject = authenticator.assertIdentity(TOKEN_TYPE, obj);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"return subject;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"If the call to the to KrbV5AuthEJB assertIdentity method was successful, i.e. the user is authenticated, the method will return a JAAS Subject, otherwise javax.security.auth.login.LoginException is thrown, which causes an error to be returned to the client. The Krb5ServerSecurityHandler  sets the JAAS subject in the message context. This may be accomplished with the following sample code:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WLMessageContext context = (WLMessageContext) mc;"]},{"entry":[{},"context.setProperty"]},{"entry":[{},"(\u201c_BEA_PRIVATE_AUTHETICATED_SUBJECT_PROP\u201d,"]},{"entry":[{},"subject)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The deployment descriptors for the Krb5AuthEJB  cause the EJB to run as a Weblogic user with administrator rights when a method is invoked on it. This allows the EJB to execute the privileged method weblogic.security.services.Authentication.assertIdentity( ). The following code fragment shows an example of the implementation of the assertldentity method on the Krb5AuthEJB.",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public Subject assertIdentity(String tokenType, Object [] tokenValue)"},{"entry":"throws"},{"entry":"javax.security.auth.login.LoginException {"},{"entry":"Subject subject ="},{"entry":"weblogic.security.services.Authentication.assertIdentity(tokenType,token"},{"entry":"Value);"},{"entry":"return subject;"},{"entry":"}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The call weblogic.security.services.Authentication.assertIdentity causes WLS  to search for an IdentityAsserter registered to handle the specified token type i.e. \u201ckerberosV5ST\u201d; in this case it will find the Krb5IdentityAsserter . The WLS security framework then forwards the request to the assertidentity( ) method on the specific identityAsserter. If successful, the weblogic security framework creates a JAAS subject and using callback methods in the identity asserter adds the JAAS principal containing the source name of the Kerberos service ticket. The JAAS Subject is returned in the response.","The Krb5IdentityAsserter  assertldentity method is passed two parameters: security token type and an Object array containing two elements, a servicePrincipal and the security token value. The security token type is a string containing the value \u201cKerberosV5ST.\u201d The servicePrincipal is a string representing the name of Kerberos principal the web service was registered with, for example, \u201cmybilling@mykerberos.realm\u201d the security token value is the security token passed from the client. The assertidentity method finds the GSS Credenitial for the service principal by searching the credential HashMap. An example code fragment follows.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Find services credentials to use to authenticate this request"]},{"entry":[{},"GSSCredential credential = (GSSCredential)"]},{"entry":[{},"credentialMap.get(servicePrincipal);"]},{"entry":[{},"A new GSS context is created with the credential."]},{"entry":[{},"GSSContext context = manager.createContext(credential);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Then, the GSS acceptSecContext( ) is called to validate the security token. Sample code is as follows.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/accept verifies the token is legit, otherwise throws a GSSException"},{"entry":"byte[] outToken = context.acceptSecContext(tokenBytes, 0,"},{"entry":"tokenBytes.length);"},{"entry":"\/\/extract the username from the token"},{"entry":"String username = context.getSrcName( ).toString( );"},{"entry":"log.debug(\u201ckerberosPrincipal (getSrcName( )) = + userName);"},{"entry":"context.dispose( );"},{"entry":"return new Krb5CallbackHandlerImpl(userName)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"If it is determined, at block , that the session ticket is valid, block  is performed. At block  in , WLS  invokes the requested application. In an exemplary embodiment of the present invention, the weblogic.security.Security.getCurrentSubject( ) is called to get the identity of the user invoking the operation.","Exemplary embodiments of the present invention are not limited specifically to WLS ., but may also be implemented using WLS , . Further, the code samples contained herein are examples only, and as will be appreciated by those of ordinary skill in the art, there are many alternative code sequences that may be utilized to produce the same results.","In addition, exemplary embodiments of the present invention are not limited to web services. There is only one web service specific component, Krb5ServerSecurityHandler , which is responsible for extracting the security token from the SOAP header and forwarding it into the security framework for authentication. To expand the invention to other technologies, additional handlers may be written. For example, to secure servlets with Kerberos, a Krb5ServletFilter may be written, it function would be the same as the Krb5ServerSecurityHandler extract security token and forward to security framework. Another alternative use of exemplary embodiments of the present invention would be to authenticate Java message service (JMS) messages. The backend security components, i.e. the Krb5AuthEJB  and Krb5IdentityAsserter  remain unchanged.","The example described herein shows how authenticate requests issued from a Java client. Microsoft recently released Web Services Enhancement Pack 2.0 SP2 which provides a mechanism for attaching Kerberos session tickets to web service requests issued from the NET platform. A Krb5WSE2ServerSecurityHandler may be written to allow the Kerberos security token to be extracted and authenticated from the SOAP header issued from NET client requests.","Exemplary embodiments of the present invention utilize the Kerberos ticket to authenticate the client and not to provide message integrity or privacy. The GSS-API provides methods for message integrity and privacy (getMic\/verifyMic and wrap\/unwrap). Exemplary embodiments of the present invention may include providing message integrity and privacy by using the API's provided with the GSS-API, both from the client to the server and the server to the client.","As described above, providing Kerberos authentication in a WLS environment can allow a single security scheme, Kerberos, to be utilized by a client. This can prevent the client user from having to remember different passwords and logon processes for different applications.","As described above, embodiments may be in the form of computer-implemented processes and apparatuses for practicing those processes. In exemplary embodiments, the invention is embodied in computer program code executed by one or more network elements. Embodiments include computer program code containing instructions embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other computer-readable storage medium, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing the invention. Embodiments include computer program code, for example, whether stored in a storage medium, loaded into and\/or executed by a computer, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing the invention. When implemented on a general-purpose microprocessor, the computer program code segments configure the microprocessor t\u00b0 create specific logic circuits.","While the invention has been described with reference to exemplary embodiments, it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition, many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore, it is intended that the invention not be limited to the particular embodiments disclosed for carrying out this invention, but that the invention will include all embodiments falling within the scope of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings wherein like elements are numbered alike in the several FIGURES:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
