---
title: Data transfer device and method
abstract: The data transfer device for transferring data between a system bus and a local memory having a frame buffer region and a general region includes an interface section and a data processor. The interface section generates a transfer parameter for accessing one of the frame buffer region and the general region based on control data for controlling data transfer sent from the system bus and outputs the generated transfer parameter, in addition to transferring data to/from the system bus. The data processor generates an address of data to be transferred in the local memory according to the transfer parameter, and transfers data to/from the local memory using the generated address, in addition to transferring data to/from the interface section.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06927776&OS=06927776&RS=06927776
owner: Matsushita Electric Industrial Co., Ltd.
number: 06927776
owner_city: Osaka
owner_country: JP
publication_date: 20020517
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to a data transfer device for transferring data between a system bus and a local memory.",{"@attributes":{"id":"p-0003","num":"0002"},"figref":["FIG. 29","FIG. 29"],"b":["90","20","21","22","1","21","91","94","21","22","95","22","81"]},"The host CPU  and the interface section  execute data processing using byte addresses. The drawing processor  and the display processor  execute pixel processing using X, Y coordinates. A SDRAM interface  has functions of generating addresses for the general region  and addresses for the frame buffer region . More specifically, the SDRAM interface  generates addresses basically in the order of byte addresses of the local memory  for the general region , and generates addresses in the order of raster scanning for the frame buffer region .","In the conventional data transfer device described above, therefore, the host CPU  transfers drawing commands to the general region  and leaves the entire drawing processing to the drawing processor . With recent improvement in the performance of the host CPU , however, it has become possible for the host CPU  to perform drawing processing in parallel with the drawing processing by the drawing processor , to improve the drawing performance and the drawing functions. In this parallel drawing, the host CPU  executes a program, performs drawing processing by defining an array corresponding to an X, Y coordinate system, and transfers pixel data obtained as a result of the processing to the frame buffer region .","During the data transfer to the frame buffer region , the host CPU  temporarily retains the generated pixel data in a first region of a main memory , and then transfers the data to a second region thereof, before transferring the data to the interface section . In the transfer of the data to the second region of the main memory , the host CPU  must generate an address for a position in the local memory  at which the pixel data is to be stored from the coordinates of the pixel data by executing a program or using a device driver and the like.","In the conventional data transfer device, therefore, the host CPU  must perform address conversion for data using the main memory  when it intends to transfer the data to the frame buffer region . This is a burden to the host CPU , and thus significantly deteriorates the system performance if the CPU performance has no room to spare. In addition, the number of cycles required for the address generation, which is performed between the host CPU  and the main memory  via a system bus, is several thousands of times as large as the number of cycles required for data transfer between the LSI  and the local memory  in some cases. This causes a problem of reducing the transfer rate.","An object of the present invention is providing a data transfer device capable of speeding up data transfer to\/from a local memory involving address generation and thus improving the performance of the entire system.","The data transfer device of the present invention is a data transfer device for transferring data between a local memory and a system bus, the local memory having a frame buffer region for storing pixels at addresses associated with coordinates of the pixels and a general region occupying the remaining area of the local memory, the data transfer device including: an interface section for generating a transfer parameter for accessing one of the frame buffer region and the general region based on control data for controlling data transfer sent from the system bus and outputting the generated transfer parameter, in addition to transferring data to\/from the system bus; and a data processor for generating an address of data to be transferred in the local memory according to the transfer parameter and transferring data to\/from the local memory using the generated address, in addition to transferring data to\/from the interface section.","With the above configuration, the CPU connected to the system bus or the like is no more required to generate transfer parameters by software. Therefore, high-speed data transfer is attained between the system bus and the frame buffer region of the local memory. In addition, the CPU or the like can easily access the frame buffer region.","The interface section preferably includes: a data buffer for storing data received from one of the system bus and the data processor, and outputting the data to the other; a control register for storing the control data; and a transfer parameter generator for generating the transfer parameter based on the control data stored in the control register and outputting the generated transfer parameter, the transfer parameter generator also controlling the data buffer.","With the above configuration, both in access to the general region and access to the frame buffer region, the transfer parameter generator generates a transfer parameter to enable DMA transfer of data between the system bus and the local memory. This improves the data transfer efficiency.","Preferably, the interface section further includes: an address information register for storing an address designating a position in the general region; and an address comparator for comparing the address stored in the address information register with an address designating an access destination sent from the system bus, and outputting the comparison result, wherein the transfer parameter generator generates a parameter for accessing the general region as the transfer parameter when the comparison result indicates that the address designating the access destination is an address in the general region, and outputs the generated parameter.","With the above configuration, the way of generation of a transfer parameter can be switched according to the address of the access destination. Therefore, the consistency of the format of data transferred can be maintained even when no sequentiality is kept between the timing of data transfer between the system bus and the general region and the timing of data transfer between the system bus and the frame buffer region.","Preferably, the address comparator compares a bit sequence having a predetermined length from the most significant bit of the address stored in the address information register with a bit sequence having the same length from the most significant bit of the address designating the access destination, and the transfer parameter generator regards the address designating the access destination as an address in the general region when the comparison result from the address comparator indicates that the compared two bit sequences match with each other.","With the above configuration, address comparison is facilitated.","Preferably, the length of the bit sequence for comparison is set in the address information register via the system bus, and the address comparator performs the comparison according to the length of the bit sequence set in the address information register.","With the above configuration, the size of the region used as the general region can be easily changed.","Preferably, the interface section comprises: a plurality of system data buffers for storing data transferred to\/from the system bus; a plurality of system data buffer controllers provided for the respective system data buffers for controlling data input\/output into\/from the corresponding system data buffers; a plurality of control registers provided for the respective system data buffers for storing the control data for data stored in the corresponding system data buffers; a data transfer monitoring controller for selecting one of the plurality of system data buffers according to the states of the system data buffers, instructing the system data buffer controller for the selected system data buffer to use the system data buffer for data transfer, and outputting data indicating the selected system data buffer; a data buffer for receiving data from one of the selected system data buffer and the data processor, storing the received data, and outputting the stored data to the other; and a transfer parameter generator for generating the transfer parameter based on control data stored in the control register corresponding to the selected system data buffer and outputting the generated transfer parameter, and also controlling the data buffer.","With the above configuration, data transfer using a plurality of channels is possible, which can provide an effect resembling that attained by using a plurality of data transfer routes. In particular, since control information for data transfer can be set for each channel, it is possible to transfer data in different formats for different channels.","Hereinafter, preferred embodiments of the present invention will be described with reference to the accompanying drawings. Note that one word consists of 32 bits in the following embodiments.","Embodiment 1",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 1","FIG. 1"],"b":["10","9","3","20","1","3","2","3","10","11","12","13","14"]},"The local memory  may be a synchronous dynamic random access memory (SDRAM), for example. If so, the data processor  is a SDRAM interface. The local memory  includes a general region  and a frame buffer region , which are allocated on an address map by the host CPU . The general region , which corresponds to the area of the local memory  other than the frame buffer region , stores drawing commands and the like for the host CPU . The frame buffer region  stores image data, and the addressing thereof is different from that of the system bus . To state more specifically, in the frame buffer region , the two-dimensional coordinates representing a position of a pixel and the address at which the pixel is stored are associated with each other in a certain correspondence. For example, when two pixels are positioned side by side in succession on a two-dimensional coordinate system, the addresses in the frame buffer region  associated with these pixels are not necessarily positioned in succession.","Although not shown, the interface section  includes a controller for performing handshake with the host CPU . In response to a request for write or read access from the host CPU , the controller outputs a wait signal and the like according to whether or not data exists in the data buffer .","An example of data transfer between the host CPU  and the general region  of the local memory  will be described. During write access, or during data transfer to the general region , the host CPU  first retains a generated drawing command in the main memory  temporarily. The host CPU  then establishes write access to an address allocated in the general region  via the system bus  for transfer of the drawing command temporarily retained in the main memory .","The data buffer  receives the data from the main memory  via the system bus  and stores the data therein. The address decoder  receives the address sent from the host CPU  via the system bus , and decodes the address. The address decoder  determines whether the destination of transfer of the data stored in the data buffer  is the control register  or the local memory , and outputs the determination result to the transfer parameter generator .","If the destination of the data transfer is the control register , the control register  stores the data from the data buffer  as control data for controlling data transfer. If the destination of the data transfer is the local memory , the transfer parameter generator  generates transfer parameters for access to the general region  based on the control data from the control register , and outputs the transfer parameters to the data processor . The transfer parameter generator  also controls the data buffer  to output the data stored in the data buffer  to the data processor . The data processor  transfers the data from the data buffer  to the general region  using the transfer parameters.","During read access, the address of data to be read output from the host CPU  is sent to the address decoder  via the system bus . The address decoder  decodes the address, determines whether the source of the data transfer is the control register  or the local memory , and outputs the determination result to the transfer parameter generator .","In the case of data transfer from the local memory , the transfer parameter generator  generates transfer parameters for access to the general region  and outputs the transfer parameters to the data processor , based on control data from the control register . The data processor  reads the data from the general region  using the transfer parameters and sends the data to the data buffer . The transfer parameter generator  controls the data buffer  to store the data sent from the data processor  and output the data to the host CPU  via the system bus .","Next, data transfer between the host CPU  and the frame buffer region  of the local memory  will be described. The host CPU  executes processing for generating a drawing object desired to be displayed on a screen of a monitor (not shown) using the main memory . The drawing object is represented as a group of pixel data having X, Y coordinates. The host CPU  temporarily retains the generated pixel data in the main memory .","The host CPU  sets information indicating that the access is to the frame buffer region  and information indicating the frame number, the number of bits required for representing one pixel and the like, which are sent to the control register  via the system bus  and stored therein as control data. The transfer parameter generator  does not operate when the access destination is the control register .","Thus, the information for accessing to the frame buffer region  is preset in the control register . Thereafter, the transfer parameter generator  generates transfer parameters for accessing to the frame buffer region  using the control data stored in the control register , and outputs the transfer parameters to the data processor .","The host CPU  then starts data transfer from the main memory  to the frame buffer region . For both write access and read access, the data input\/output between the data buffer  and the data processor  and the control sequence by the transfer parameter generator  are the same as those for the transfer between the general region  and the main memory  described above, except that the access is to the frame buffer region .","In any of the above cases, during data transfer between the data processor  and the local memory , the data processor  determines the address to be accessed in the local memory  according to the transfer parameters.","As described above, the transfer parameter generator  generates the transfer parameters according to the information stored in the control register , and in this way, the host CPU  can transfer data to and from either of the general region  and the frame buffer region .","How to store data in the general region  of the local memory  will be described.","The data processor , which stores data in the general region  in the order of addresses in the SDRAM, adopts address mapping taking advantage of a feature of SDRAM data accessing. In the following description, a region in one bank accessible with a same row address is called a page.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 2","FIG. 3A"],"b":["0","1","0","1"],"sup":["N ","N"]},"Overhead sometimes occurs when a certain word in the SDRAM is accessed and subsequently another word is accessed.  is a timing chart of the operation of the SDRAM in the case that after access to a word, another word in the same bank at the same row address is accessed. Assume that the burst length is set at 8. To state specifically,  illustrates the case that after access to a word in bank \u201c\u201d at row address \u201c0\u201d and column address \u201c0\u201d, a word at column address \u201c8\u201d in the same bank at the same row address is accessed. In this case, no overhead occurs, and thus continuous access to other column addresses is possible.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 5","FIG. 5"],"b":"0"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 6","FIG. 6"],"b":["0","1","1","0"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 3B","FIG. 5","FIG. 3B"],"b":["9","9","20","21"]},"In the format described above, the bit designating the bank is less significant than the bits designating the row address. Therefore, when the least significant bit of the integrated address composed of the row address, the bank and the column address is sequentially increased, the different banks are alternately accessed. This enables access in the order of addresses in the SDRAM without occurrence of overhead even if the number of words to be transferred is enormous. Although the case of two banks was described, substantially the same effect is obtained when the number of banks is  or more.","Next, how to store data in the frame buffer region  of the local memory  will be described. The host CPU  executes drawing and determines values representing pixels of a graphics image and the X, Y coordinates of the values.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 7","b":["22","20"]},"The X, Y coordinates on the screen are mapped to addresses in the frame buffer region  as shown in FIG. . The width of the screen mapped to the frame buffer region  represented in units of 32 bits (Tw) is the number of pages in the horizontal direction N, which is set to be an odd number. In the example in , N=13. In , the hatched pages belong to bank \u201c0\u201d while non-hatched pages belong to bank \u201c\u201d. Thus, a rectangle in a certain page in one bank is immediately adjacent to a rectangle in a page belonging to a different bank. The number of pages in the horizontal direction Nmay be an even number.","For 16 bits\/pixel data, a rectangle of 32 (horizontal)\u00d716 (vertical) pixels is stored in one page. For 24 bits\/pixel, a rectangle of 32 (horizontal)\u00d78 (vertical) pixels is stored in one page.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 8","FIG. 8","FIG. 7"],"b":["7","1","2","3","3"]},"Any adjacent rectangles are stored in pages belonging to different banks. Therefore, in drawing of polygon P in , for example, no overhead occurs even during accessing for filling-in of the polygon by increasing the X coordinate. In this way, a drawing processor (not shown) can transfer a large number of words in succession without occurrence of overhead by accessing the local memory  during execution of drawing of a line, filling-in of a polygon and the like. This improves the drawing performance.","Hereinafter, data transfer from the host CPU  to the frame buffer region  of the local memory  will be described in a concretive manner. In the following description, assume that the frame buffer region  can store data corresponding to 12 screens, and areas each storing data corresponding to one screen are called frame memories FM to FM.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIGS. 9A","b":["9","22","1","1","22","1"]},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 9A","b":"1"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIGS. 9C and 9D","FIG. 9C","FIG. 9D"],"b":["9","1","1"],"sub":"10"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIGS. 10A","b":["10","22","1","1"]},"Specifically,  illustrates the relationship between the coordinates X and Y adopted by the host CPU  and the word-unit coordinates XB and YB.  illustrates a format of a byte address for 16 bits\/pixel data.  illustrate the positions of two pixels stored in one word for 16 bits\/pixel data.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIGS. 11A","b":["11","22","1","1"]},"Specifically,  illustrates the relationship between the coordinates X and Y adopted by the host CPU  and the word-unit coordinates XB and YB.  illustrates a format of a byte address for 24 bits\/pixel data.  illustrates the position of one pixel stored in one word for 24 bits\/pixel data.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIGS. 12A","FIG. 10B"],"b":["12","12","9","11"]},"When transferring an image to the frame buffer region , the host CPU  sets a rectangular region including the image, and determines the pixel at the upper-left corner of the rectangular region as the pixel to be first transferred.","Assume that scanning is made for the rectangular region with the pixel to be first transferred as the start point in the following manner. That is, the coordinate X is sequentially increased from the smallest coordinate X (from the leftmost of the rectangular region) while the coordinate Y is fixed. Once the scanning reaches the rightmost pixel of the rectangular region, the coordinate Y is increased by one, and the above scanning of pixels is repeated from left to right. In this scanning, the host CPU  calculates the number of words to be transferred from the number of pixels required to be scanned until scanning of all the pixels of the image to be transferred is completed.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 13","FIG. 13"],"b":["13","13","11","1","13"]},"(a) a destination head address,","(b) the number of words to be transferred,","(c) a DMA start flag, and","(d) format information at its addresses \u201c0\u201d to \u201c3\u201d, respectively, as control data for direct memory access (DMA) transfer.","As the destination head address (DMA start address), the destination head address in the local memory  is stored in the case of data transfer to the general region . In the case of data transfer to the frame buffer region , the coordinates of a pixel to be first transferred are stored in the form of the byte address shown in , B or B.","When the data destination is the general region , the transfer parameter generator  outputs the destination head address and the number of words to be transferred stored in the control register  to the data processor  as transfer parameters. When the data destination is the frame buffer region , the transfer parameter generator  performs address conversion for the destination head address and calculates the number of words to be transferred by referring to the format information, to prepare transfer parameters, and outputs the transfer parameters to the data processor .","The DMA start flag is set for start of DMA transfer. Once the host CPU  sets the DMA start flag, a controller (not shown) of the interface section  starts DMA transfer between the main memory  and the local memory .",{"@attributes":{"id":"p-0099","num":"0098"},"figref":["FIG. 14","FIG. 14"],"b":["13","13"]},"The field FRAME_NO indicates the frame number to be accessed. The bit width of this field is 4 bits, for example, and the value and the frame number have the following relationship, for example.",{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0000: FM 0","0001: FM 1"]},{"entry":[{},"0010: FM 2","0011: FM 3"]},{"entry":[{},"0100: FM 4","0101: FM 5"]},{"entry":[{},"0110: FM 6","0111: FM 7"]},{"entry":[{},"1000: FM 8","1001: FM 9"]},{"entry":[{},"1010: FM 10","1011: FM 11"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The field X_WIDTH indicates the width of the field XB of the byte address used when the host CPU  accesses the local memory . The bit width of this field is 4 bits, for example, and the value and the width of the field XB have the following relationship, for example.",{"@attributes":{"id":"p-0103","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0000: 11 bits","0001: 10 bits"]},{"entry":[{},"0010: 9 bits","0011: 8 bits"]},{"entry":[{},"0100: 7 bits","0101: 6 bits"]},{"entry":[{},"0110: 5 bits"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The width of the field YB is obtained by reducing the width of the field XB from 32 bits.","The field RASTER_ON indicates which region of the local memory  the host CPU  accesses, the general region  or the frame buffer region . The bit width of this field is one bit, for example, and the value and the destination of data has the following relationship, for example.","0: access to the general region ","1: access to the frame buffer region ","The field PIXEL_TYPE indicates the number of bits per pixel (pixel type). The bit width of this field is 2 bits, for example, and the value and the number of bits per pixel has the following relationship, for example.","00: 24 bits\/pixel","01: 16 bits\/pixel","10: 8 bits\/pixel",{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIGS. 15A","b":["15","15","14"]},"The transfer parameter generator  refers to the control register , converts a byte address to coordinates when the field RASTER_ON in  is \u201c1\u201d indicating that the host CPU  accesses the frame buffer region , to prepare transfer parameters, and outputs the prepared transfer parameters to the data processor .","To state specifically, as shown in  to C, the transfer parameter generator  multiplies the value of the bits of the field XB of the byte address by four for 8 bits\/pixel data and by two for 16 bits\/pixel data, to obtain the coordinate X. For 24 bits\/pixel data, the transfer parameter generator  uses the value of the bits of the field XB of the byte address as the coordinate X. In any of the above cases, the field YB is not changed and used as the coordinate Y as it is.","In addition, the transfer parameter generator  converts the number of words to be transferred to the number of pixels to be transferred. To state specifically, the transfer parameter generator  determines the number of pixels to be transferred for 8 bits\/pixel data, 16 bits\/pixel data and 24 bits\/pixel data by multiplying the number of words to be transferred by four, two and one, respectively. The transfer parameter generator  outputs the coordinates X, Y and the number of pixels to be transferred obtained as described above to the data processor  as transfer parameters.",{"@attributes":{"id":"p-0116","num":"0115"},"figref":["FIG. 16","FIG. 16"],"b":["14","1","12","31","14","41","41","41","41","42"]},"A read\/write signal RWS, indicating read or write to be performed with the local memory , is input into the latch  from the host CPU  via the system bus . The latch  latches the signal to be output to the transfer parameter generator .","When control data is set in the control register , the transfer parameter generator  generates transfer parameters based on the value of the read\/write signal RWS stored in the address decoder  and the control data stored in the control register , and stores the transfer parameters in the registers A to S.","The register A stores transfer parameters for the general region . That is, the register A stores the value RW of the read\/write signal RWS, the row address RA of the destination head address DAD (upper bits of the address DAD), AT (=RASTER_ON)=0 indicating the general region , and the column address CA of the destination head address DAD (lower bits of the address DAD), as the transfer parameters.","The registers B to S store transfer parameters for the frame buffer region . For example, the register B stores transfer parameters for an image to be transferred having a horizontal width of 513 to 1024 pixels in the case of 24 bits\/pixel. In other words, the register B stores the value RW of the read\/write signal RWS, the Y coordinate YB of a pixel to be first transferred, AT=1 indicating the frame buffer region , the frame memory number FM (=FRAME_NO), and the X coordinate XB of the pixel to be first transferred, as the transfer parameters. The Y coordinate YB and the X coordinate XB are obtained by converting the destination head address DAD as discussed with reference to  to C.","The registers C and D store transfer parameters for images to be transferred having a horizontal width of 513 to 1024 pixels in the cases of 16 bits\/pixel and 8 bits\/pixel, respectively. In other words, the registers C and D store XB\u00d72 and XB\u00d74, respectively, as the X coordinate. The remaining parameters are the same as those in the register B.","Likewise, the registers E, F and G store transfer parameters for images to be transferred having a horizontal width of 257 to 512 pixels. In the example shown in  to C, there are defined six different ranges of horizontal widths of an image to be transferred for three different numbers of bits per pixel. Therefore, 6\u00d73 sets of transfer parameters for access to the frame buffer region  are respectively stored in the registers B to S.","The selector  selects one of the outputs of the registers A to S according to the values of the fields X_WIDTH, RASTER_ON and PIXEL_TYPE of the format information stored in the control register , and outputs the result to the data processor . Although not shown in , the transfer parameter generator  outputs the number of words to be transferred to the data processor  when the field RASTER_ON of the format information is \u201c0\u201d, and outputs the number of pixels to be transferred when it is \u201c1\u201d, as a transfer parameter.","Thus, in the transfer parameter generator  shown in , since the transfer parameters have been calculated in advance, transfer parameters selected by the selector  can be promptly output to the data processor . Alternatively, the transfer parameter generator  may calculate and output only necessary transfer parameters.",{"@attributes":{"id":"p-0125","num":"0124"},"figref":["FIGS. 17A","FIGS. 17A and 17B","FIG. 17A","FIG. 17B","FIGS. 17C and 17D","FIG. 17C","FIG. 17D","FIGS. 17A"],"b":["17","9","21","22","14","17"]},{"@attributes":{"id":"p-0126","num":"0125"},"figref":["FIG. 18","FIGS. 17A","FIG. 14"],"b":["17","21","22","20","20"]},"When the destination of data is the general region , the column address and the row address of the destination head address DAD are set in fields X and Y, respectively, as the DMA start address, and field Length includes the number of words to be DMA-transferred.","When the destination of data is the frame buffer region , the value of the field FRAME_NO in  is set in field FM, to set the frame memory of the destination of data. In fields X and Y, the coordinates of the pixel to be first transferred, obtained from the destination head address in the control register , are set as the DMA start address. In field Length, the number of pixels to be DMA-transferred, obtained from the number of words to be transferred in the control register , is set.","The transfer parameters are desirably stored in the format shown in  for the register A of the transfer parameter generator  shown in , and in the format shown in  for the registers B to S. By adopting these formats, the data processor  can store the output of the transfer parameter generator  in the DMA transfer register as it is.","Alternatively, the transfer parameter generator  may not be provided with the registers A to S, but may sort the read\/write signal RWS output from the address decoder  and signals indicating the control data stored in the control register , or input these signals into a given logic circuit, so that the bit sequence of the resultant signals represents the transfer parameters. In this case, bit sequences corresponding to the registers A to S must be prepared in the format shown in  or C and be ready for simultaneous supply to the selector .",{"@attributes":{"id":"p-0131","num":"0130"},"figref":["FIG. 19","FIG. 19"],"b":["9","0","19","9","0","11"]},{"@attributes":{"id":"p-0132","num":"0131"},"figref":"FIG. 20","b":["19","1","11"]},"Field Fadd includes the base address of the frame memory FM, which is a row address at which the pixel at the origin of the coordinate system of the frame memory FM is stored. Field Fcolor includes the number of bits per pixel. Field FXfm includes the number of pages Nin the horizontal direction discussed with reference to , as the size of the screen in the horizontal direction stored in the frame memory. This value is obtained by dividing the number of pixels in the horizontal direction of the screen actually displayed by 32, for example, rounding up the resultant value to obtain an integer, and adding one to the resultant integer if the integer is an even number, to obtain an odd number.","The host CPU  presets values for the fields Fadd, Fcolor and FXfm of the frame memory register via a system address bus (not shown).",{"@attributes":{"id":"p-0135","num":"0134"},"figref":["FIGS. 21A","FIG. 21A"],"b":["21","22"]},{"@attributes":{"id":"p-0136","num":"0135"},"figref":["FIG. 21B","FIG. 21B","FIG. 7"],"b":["22","20"],"sub":["X","Y"]},{"@attributes":{"id":"p-0137","num":"0136"},"figref":["FIG. 21C","FIG. 21D"],"sub":["X ","Y"],"b":["22","22"]},{"@attributes":{"id":"p-0138","num":"0137"},"figref":["FIGS. 22A","FIG. 22A","FIG. 22B"],"b":["22","22","22","20"]},{"@attributes":{"id":"p-0139","num":"0138"},"figref":["FIG. 22C","FIG. 22D","FIG. 22D","FIGS. 21C and 21D"],"sub":["X ","Y"],"b":["22","22","22"]},{"@attributes":{"id":"p-0140","num":"0139"},"figref":["FIGS. 23A","FIG. 23A","FIG. 23B"],"b":["23","22","22","20"]},{"@attributes":{"id":"p-0141","num":"0140"},"figref":["FIG. 23C","FIG. 23D","FIG. 23D","FIGS. 21C and 21D"],"sub":["X ","Y"],"b":["22","22","23"]},"The data processor  refers to the DMA transfer registers in  and the frame memory register (see , for example) corresponding to the frame memory designated in the field FM of the DMA transfer register in FIG. C. The data processor  then calculates the bank, the row address and the column address from the expressions in any of , D and D, adds the base address (for example, the value of the field Fadd) of the frame memory register to the row address, to determine the address of the data transfer destination.","The data processor  determines a rectangular region set by the host CPU  to include an image to be transferred to the frame buffer region , from the horizontal width of the rectangular region and the coordinates of the pixel to be first transferred. The data processor  transfers data of pixels in the rectangular region to the frame buffer region  in units of a word by increasing the coordinate X sequentially starting from the coordinate X of the pixel to be first transferred (from the left end of the rectangular region) with the coordinate Y of the pixel being fixed. Once data of the pixel at the right end of the rectangular region has been transferred, the coordinate Y is increased by one, and the sequential transfer of data of pixels from the left end to the right end is repeated until the preset number of words has been transferred.","Specific examples of parameters will be described. Assume that the pixel type is 8 bits\/pixel, the horizontal width of a rectangular region preset to include an image to be transferred to the frame buffer region  is 64 pixels, and the host CPU  executes drawing at coordinates (X, Y)=(32, 1). Note that the suffix \u201cb\u201d to a value denotes that the value is in binary representation.","Since the word-unit coordinates (XB, YB) of the above transfer data are (8, 1), the host CPU  sets the fields of a byte address as shown in  for this transfer data as follows.","YB: 00 0000 0001b","XB: 1000b","Assume also that the data transfer destination is the frame memory FM. The width of the field XB is 6 bits with reference to FIG. A and the like. Since write into the frame buffer region  is performed and the pixel type is 8 bits\/pixel, the host CPU  sets the following for the fields of the format information in FIG. .","FRAME_NO: 0000b","X_WIDTH: 0101b","RESTER_ON: 1b","PIXEL_TYPE: 10b","The transfer parameter generator  converts the byte address to coordinates as described with reference to , to generate","Y: 00 0000 0001b","X: 000 0010 0000b","Length: 0000 0000 0000 0100b","as transfer parameters and outputs the transfer parameters to the data processor .","The data processor  sets","0000 0000 0000 0001 1000 0000 0010 0000b","for the 32-bit DMA transfer register (see ) for designating the head address of the data destination. In this setting, since data is written into the frame memory FM of the frame buffer region , RW=0, AT=1, and FM=0000. Also, the data processor  sets","0000 0000 0000 0100b","for the 16-bit DMA transfer register (see ) for designating the number of pixels to be transferred based on the value of the field Length.","Based on the values in the above DMA transfer registers, the data processor  calculates the row address, the column address and the bank from the expressions in FIG. D. The data processor  then adds the preset base address (0008, for example) of the frame memory FM to the calculated row address, to determine the destination head address in the local memory . That is, the following are determined.","Row address: 0008","Column address: 08","Bank: 1","Substantially the same procedure is followed when data of a number of pixels is transferred, for example, when 20 words (80 pixels) are transferred with a pixel at coordinates (X, Y)=(32, 1) as the pixel to be first transferred. In this case, the transfer parameter generator  sets Length=101 0000b, and the data processor  sets 0000 0000 0101 0000b for the 16-bit DMA transfer register.","The above description is also applicable to the pixel types of 16 bits\/pixel and 24 bits\/pixel, although the description for these types is omitted here.","The data transfer from the host CPU  to the frame buffer region  of the local memory  was described. Reverse data transfer from the frame buffer region  to the host CPU  is also possible in a manner similar to that described above.","As described above, in the data transfer device of , the transfer parameter generator  generates transfer parameters. Therefore, the data transfer rate is high compared with implementation by software by the host CPU . In addition, the host CPU  can write operation results into the frame buffer region  and read data from the frame buffer region .","A first-in, first-out (FIFO) buffer may be used as the data buffer .","In the above description, 256 words (1024 pixels for 8 bits\/pixel data) are stored in one page, and the page changes every 32 pixels in the X direction. Alternatively, values other than those described in this embodiment may be adopted for the capacity of each page and the relationship between the coordinates on a screen and the address in the local memory  at which a pixel at the coordinates is stored.","Embodiment 2",{"@attributes":{"id":"p-0171","num":"0170"},"figref":["FIG. 24","FIG. 24","FIG. 1. A","FIG. 24"],"b":["110","10","4","3"]},"The interface section  includes a data buffer , an address decoder , control registers A, B and C, a transfer parameter generator , system data buffers A, B and C, system data buffer controllers A, B and C, and a data transfer monitoring controller .","Once being activated by the host CPU , the system data buffer controller A works as a bus master for the system bus  to control data transfer from a main memory  to the system data buffer A via the system bus . Likewise, once being activated by the host CPU , the system data buffer controllers B and C work as a bus master for the system bus  to control data transfer from the main memory  to the system data buffers B and C, respectively, via the system bus .","Thus, the system data buffers A, B and C respectively correspond to the system data buffer controllers A, B and C. The control registers A, B and C, which respectively correspond to the system data buffers A, B and C, store control data for data transfer involving the corresponding system data buffers. Since the control data can be set for each channel, data in different formats can be transferred for different channels.","The address decoder  decodes a received address, determines which is the transfer destination of data stored in the data buffer , any of the control registers A, B and C or the local memory , and outputs the determination result to the transfer parameter generator . When the destination is any of the control registers A, B and C, the address decoder  transfers the data in the data buffer  to the control register in question according to the determination result. The control registers A, B and C, which respectively correspond to the system data buffers A, B and C, output information for access to the local memory , set individually, to the transfer parameter generator .","The data transfer monitoring controller  makes contact with the system data buffer controllers A, B and C, to examine which one of the system data buffers A, B and C currently stores data. The data transfer monitoring controller  selects a system data buffer to be used for data transfer among the system data buffers A, B and C, and notifies the transfer parameter generator  of the selection result. According to the notification from the data transfer monitoring controller , the transfer parameter generator  selects control data output from one of the control registers A, B and C corresponding to the selected system data buffer, generates transfer parameters, and outputs the transfer parameters to a data processor (SDRAM interface) .","The selected system data buffer A, B or C outputs stored data to the data processor  via the data buffer . The data processor  writes data into the local memory  according to the transfer parameters.","The data transfer monitoring controller  also monitors whether or not data in any of the system data buffers A, B and C has been written into the local memory . In addition, the data transfer monitoring controller  protects the system data buffers A, B and C from having data written therein from the host CPU  and the main memory  when pre-transferred data is stored in the system data buffers.","Hereinafter, write of data into the local memory  via the system data buffer A will be described. First, the host CPU  activates the system data buffer controller A. The system data buffer controller A requests the bus arbitrator  to permit use of the system bus , and upon receipt of permission of bus access, transfers data from the main memory  to the system data buffer A.","The system data buffer controller A controls transfer of the data from the system data buffer A to the data buffer . The data transfer monitoring controller  notifies the transfer parameter generator  that control data stored in the control register A should be referred to.","The subsequent operation is substantially the same as that of the data transfer device of , and thus description thereof is omitted. The above description also applies to the system data buffers B and C. The host CPU  can transfer data using any of the system data buffers A, B and C which happens to be vacant. Thus, the host CPU  can start new data transfer with any of the system data buffers A, B and C even during data transfer by the data processor  and the like.","From the standpoint of the host CPU , the above operation is as if access to the local memory  is available via a plurality of channels. The host CPU  can instruct both read from and write into the local memory  in parallel. Thus, the data transfer device of  can improve the efficiency of data transfer without increasing the hardware scale so greatly, providing an effect resembling the effect attained by a device provided with 3-channel data transfer routes.","The data transfer from the host CPU  to the frame buffer region  of the local memory  was described. Reverse data transfer from the frame buffer region  to the host CPU  is also possible.","The data transfer device of this embodiment includes three control registers, three system data buffers and three system data buffer controllers to attain 3-channel data transfer. However, the number of channels is not limited to three.","In the above embodiments, the local memory  is a SDRAM. However, it may be a memory of any other type. In the case of using a memory of another type, the data processor  may be replaced with an interface suitable for the memory used.","Embodiment 3","In the data transfer device described in Embodiment 1, the host CPU  may set format information in the control register  for data transfer between the system bus  and the frame buffer region , and after this setting, the host CPU  may intend to transfer data between the system bus  and the general region . In such a case, the host CPU  must change the setting in the control register . In consideration of this, it is necessary to keep sequentiality between the timing of data transfer between the system bus  and the general region  and the timing of data transfer between the system bus  and the frame buffer region .","However, in a system permitting operation of a plurality of applications on the operating system (OS) basis, the above sequentiality is not necessarily ensured. Therefore, if data transfer to the general region  is performed after setting of format information in the control register  for data transfer to the frame buffer region , for example, the interface section  may deal with the data transfer to the general region  as data transfer to the frame buffer region . This damages the consistency of the data format.","The above problem will be described in detail.  illustrates a system permitting operation of a plurality of applications on an OS. In , a data transfer device  corresponds to a data transfer device including the data processor  and the interface section  in , and a local memory  corresponds to the local memory  in FIG. . The data transfer device  and the local memory  constitute hardware . The data transfer device  operates as an interface between an OS  and the local memory .","Applications ,  and  operate in parallel with one another on the OS . The OS  issues a request for data transfer to one of device drivers ,  and  selected based on which destination in the hardware  data transfer from any of the applications ,  and  is directed to, the control register of the data transfer device , the general region of the local memory , or the frame buffer region of the local memory . Upon receipt of data transfer permission from the selected device driver, the OS  issues data transfer permission to the relevant application ,  or .","In the system described above, it is not necessarily guaranteed that the order of issuance of requests to the device drivers ,  and  matches with the order of actual data transfer performed after receipt of use permissions from the device drivers ,  and .",{"@attributes":{"id":"p-0191","num":"0190"},"figref":["FIG. 26","FIG. 26","FIG. 1"],"b":["281","9","10","282","20","1","281","282","280"]},"The master devices ,  and  individually transfer data to the slave device . In this system, the order of data transfer from the master devices ,  and  to the slave device  is not necessarily guaranteed.","In view of the above, this embodiment provides a data transfer device capable of guaranteeing consistency of the data format in systems as those in , in which no sequentiality is kept between the timing of setting for the control register  in FIG.  and the timing of data transfer to the general region  and the frame buffer region . To state specifically, when the access destination output from the host CPU  via the system bus , that is, the data transfer destination or the data transfer source, is an address in a predetermined region of the local memory , this access is forcibly regarded as access to the general region  (hereinafter, referred to as forced general region access).",{"@attributes":{"id":"p-0194","num":"0193"},"figref":["FIG. 27","FIG. 27"],"b":["210","9","210","211","212","213","214","11","12","13","14","10","210","215","21","216"]},"The operations of the data buffer , the address decoder , the control register  and the transfer parameter generator  are the same as those of the data buffer , the address decoder , the control register  and the transfer parameter generator  in , except for the following point.",{"@attributes":{"id":"p-0196","num":"0195"},"figref":["FIG. 28","FIG. 28"],"b":["215","21","215","3","211","1"]},"In , the field BASE_ADDRESS indicates a sequence of some bits from the most significant bit of a bit sequence representing a certain address in the general region  (the lowest address of the region, for example), which is set by the host CPU . The bit width of this field is 9 bits, for example.","The field MODE_SWITCH indicates whether or not forced general region access is performed, that is, whether or not a forced general region access mode is valid. The bit width of this field is one bit, for example, and the value and the forced general region access mode have the following relationship, for example.","0: the forced general region access mode is invalid","1: the forced general region access mode is valid","The field CP_SIZE indicates how many bits from the most significant bit inclusive are used for comparison between the address sent from the host CPU  via the system bus  and the address information set in the field BASE_ADDRESS by the address comparator . The bit width of this field is 3 bits, for example, and the value of this field and the number of bits used for comparison have the following relationship, for example.",{"@attributes":{"id":"p-0202","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"000: 9 bits","001: 8 bits"]},{"entry":[{},"010: 7 bits","011: 6 bits"]},{"entry":[{},"100: 5 bits","101: 4 bits"]},{"entry":[{},"110: 3 bits","111: 2 bits"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The address comparator  compares the value set in the field BASE_ADDRESS of the address information stored in the address information register  with the address sent via the system bus  based on the setting in the field CP_SIZE, and outputs the comparison result to the transfer parameter generator . Therefore, the position and size of the predetermined region of the local memory  within which the address comparator  judges the comparison as matching are determined by the values of the fields BASE_ADDRESS and CP_SIZE.","The transfer parameter generator  regards the frame buffer region  as the access destination in either of the following cases (e1) or (e2), and regards the general region  as the access destination in the other cases. Therefore, the general region  can be defined by the values of the fields BASE_ADDRESS and CP_SIZE.","(e1) The field RASTER_ON of the control register  is \u201c1\u201d and the field MODE_SWITCH of the address information register  is \u201c0\u201d.","(e2) The field RASTER_ON of the control register  is \u201c1\u201d, the field MODE_SWITCH of the address information register  is \u201c1\u201d, and the comparison result by the address comparator  is non-matching.","An example of the operation of the data transfer device of  will be described. Assume that both data transfer to\/from the general region  and data transfer to\/from the frame buffer region  are available, and the field RASTER_ON of the control register  is set at \u201c1\u201d. Also assume that the field MODE_SWITCH of the address information register  is set at \u201c1\u201d indicating that the forced general region access mode is valid.","During write access, the data buffer  stores data received via the system bus . The address decoder  decodes an address received via the system bus , determines whether the transfer destination of the data stored in the data buffer  is the control register  or the local memory , and outputs the determination result to the transfer parameter generator .","When the data transfer destination is the control register , the control register  stores the data sent from the data buffer  as control data. When the data transfer destination is the local memory , the address comparator  compares the address output from the host CPU  with the value set in the field BASE_ADDRESS of the address information register .","If the comparison result indicates matching between the two values, the transfer parameter generator  regards the general region  as the data transfer destination. In other words, the general region  is forcefully accessed as the data transfer destination. The transfer parameter generator  outputs only the destination head address and the number of words to be transferred among the control data shown in  stored in the control register , to the data processor  as transfer parameters, without address conversion.","If the comparison result indicates non-matching between the two values, the transfer parameter generator  regards the frame buffer region  as the data transfer destination. In this case, the transfer parameter generator  converts the byte address to coordinates according to the format information of the control data shown in  stored in the control register , to generate transfer parameters, and outputs the generated transfer parameters to the data processor . In either of the above cases, the data processor  transfers the data sent from the data buffer  to the local memory  according to the transfer parameters.","During read access, an address of data to be read is sent to the address decoder  via the system bus . The address decoder  decodes the address to determine which is the data transfer source, the control register , the address information register  or the local memory , and outputs the determination result to the transfer parameter generator  and the address comparator .","When the data transfer source is the local memory , the address comparator  compares the address sent from the host CPU  via the system bus  with the address information set in the address information register .","If the comparison result indicates matching between the two values, the transfer parameter generator  regards the general region  as the data transfer source. In other words, the general region  is forcefully accessed as the data transfer source. The transfer parameter generator  outputs the destination head address and the number of words to be transferred among the control data shown in  stored in the control register  to the data processor  as transfer parameters, without address conversion.","If the comparison result indicates non-matching between the two values, the transfer parameter generator  regards the frame buffer region  as the data transfer source. In this case, the transfer parameter generator  converts the byte address to coordinates according to the format information of the control data shown in  stored in the control register , to generate transfer parameters, and outputs the generated transfer parameters to the data processor . In either of the above cases, the data processor  reads data in the local memory  according to the transfer parameters and outputs the data to the data buffer . The transfer parameter generator  controls the data buffer  to store the data output from the data processor  and output the data to the host CPU  via the system bus .","Thus, in this embodiment, the way of generation of transfer parameters is switched according to the address of the access destination. Therefore, it is possible to provide a data transfer device capable of maintaining consistency of the data format even when no sequentiality is kept between the timing of data transfer between the system bus and the general region and the timing of data transfer between the system bus and the frame buffer region.","As described above, according to the present invention, it is possible to provide a data transfer device capable of speeding up data transfer to\/from a local memory involving address generation. Since the load of the CPU and the like as a system bus master is reduced, speedup of the operation of the entire system is possible.","While the present invention has been described in a preferred embodiment, it will be apparent to those skilled in the art that the disclosed invention may be modified in numerous ways and may assume many embodiments other than that specifically set out and described above. Accordingly, it is intended by the appended claims to cover all modifications of the invention which fall within the true spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3A","FIG. 3B"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8","b":"7"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 9A","FIG. 9B","FIGS. 9C and 9D"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 10A","FIG. 10B","FIGS. 10C and 10D"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 11A","FIG. 11B","FIG. 11C"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 12A","FIG. 12B","FIG. 12C"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 15A","FIG. 15B","FIG. 15C"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 17A","FIG. 17B","FIG. 17C","FIG. 17D"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 18","FIGS. 17A"],"b":"17"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 20","b":"19"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 21A","FIG. 21B","FIG. 21C","FIG. 21D"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 22A","FIG. 22B","FIG. 22C","FIG. 22D"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 23A","FIG. 23B","FIG. 23C","FIG. 23D"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 29"}]},"DETDESC":[{},{}]}
