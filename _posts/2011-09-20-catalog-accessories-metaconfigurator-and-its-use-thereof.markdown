---
title: Catalog accessories meta-configurator, and its use thereof
abstract: A computer program product for standardizing the appearance of related accessories installed on a base product. The base product and related accessories can be visualized from a plurality of view-angles on a configurator application. An accessory is loaded onto the base product by an image transformation tool that manipulates the accessory to fit onto the base product. The transformed accessory is saved as a t-matrix profile for each view-angle of the base product, and the t-matrix profiles are associated with an accessory classification, which includes additional accessories that similarly fit the base product. The visualization data associated with the base product can then be updated with the t-matrix profiles. A customer GUI is provided for viewing the accessories fitted onto the base product where the transformations can automatically transform other accessories in the same accessory classification on the base product. In an embodiment, the base product is a vehicle.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566714&OS=08566714&RS=08566714
owner: Insignia Group, L.C.
number: 08566714
owner_city: Rock Hill
owner_country: US
publication_date: 20110920
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","1. Problem(S) and Solution(S)","2. Overview of META","3. Process Flows","4. Screenshots\/Examples","EXAMPLE 1","EXAMPLE 2","EXAMPLE 3","EXAMPLE 4","EXAMPLE 5","EXAMPLE 6","5. Implementation Of Meta"],"p":["This application claims priority to U.S. Provisional Application No. 61\/384,372, entitled \u201cCATALOG ACCESSORIES META-CONFIGURATOR,\u201d filed Sep. 20, 2010, the contents of which are hereby incorporated by reference into this disclosure.","This invention relates to online selection, visualization, and sale of vehicle accessories. More specifically, it relates to the development and management of visual assets within a relational database to create an experiential online buying experience.","1. Visualizing Vehicles on the Internet","Visualizing products online, particularly vehicles and accessories on vehicles, is not new. A challenge is keeping up with the number and variety of possible vehicles and accessories, or parts or products, in the marketplace. For example, in 2008, General Motors alone offered 128 distinct vehicle models. Each one came in several colors. A configurator may show each of those vehicles from as many as eight (8) angles. That's well over 2300 unique views of a vehicle, and each one probably offers 15-20 configurable OE (Original Equipment, e.g., Ford) accessories. Managing the visualization of tens of thousands of parts on thousands of vehicle make, model, color, and view-angle combinations is a monumental task.","Accordingly, what is needed is a method for the rapid and organized production and deployment of vehicle configurators.","2. Conventional Techniques","Configurators can be found in the prior art. Generally, the functionality of the original configurators was relegated to self-contained run-time executables. Then the final published configurator file became an interactive ADOBE FLASH .swf file.","Lines of action script were hard-coded in the FLASH source file, and they essentially instructed that when a particular button is clicked, the file is to look for a movie clip named \u201cX\u201d and place it at these coordinates. There was vehicle-to-accessory logic beyond the simple action script of clicking one accessory to see it on the vehicle. All verification of specific fitment of an accessory to a vehicle was done as part of the hard-coding process and not based on any code-based logic. Conflict logic was based entirely on FLASH's inability to place two movie clips sharing the same instance name on the stage at the same time. This method of development and delivery was not scalable to the volume of vehicle-to-accessory information contained in the accessories catalog database.","In the prior art, development iterations began by attempting to bind configurator interaction to the actual accessories catalog database. To accomplish this and in addition to all accessories information already in the database, such as product name, application fitment, color, brand, pricing, description, product image, etc., additional data criteria were added: vehicle asset type (image, mask, or decal) and view.","The labels given to the three image types\/assets in the vehicle asset type were Image, mask, and decal. Unpainted portions of the vehicle retained their color, while painted areas were set to a desaturated gray. Combining an Image and a mask resulted in a desaturated .png file with a fully transparent background. Combining a decal with an Image and a mask still retained an entirely desaturated .png file with a fully transparent background, as depicted by .","When the assets were layered on top of one another, a hexadecimal RGB value was fed into the desaturated mask layer and changed the color of the vehicle. Highlights and shadows remained sharp due to the decal layer, and the other elements of the vehicle (tires, glass, headlights, chrome, etc.) were unaffected as they were viewed through holes in both the mask layer and the decal layer.","Once a designer had a set of accessory image assets created and a portfolio of part images to place, the designer could build a source file in ADOBE PHOTOSHOP. Here, the designer could scale, rotate, skew, and place the part image so it would look realistic on the vehicle image, as depicted in . Once the designer placed the part image onto the vehicle, the designer could record the data points for the exact x\/y positioning, scale, and\/or angle of rotation, among other measurements, for that part on this view angle on this vehicle from the layered source file.","Next, via tedious hand-coded structured query language (SQL), a configurator could be built and deployed using t-matrices to place and position accessories on vehicles. This process was profoundly time-intensive driven by the database of available accessories. Consequently, if a part was discontinued and disappeared from the database, it also disappeared from the configurator.","Although the process had evolved to a point where the database communicated with the configurator, the labor-intensive production process (duplicating part assets, translating placement work to t-matrices, hand-coding SQL based on those translations) made rapid and organized deployments unfeasible. Thus, the solution to alleviate this labor-intensive production process was to develop \u201cMETA,\u201d a tool for the rapid development of vehicle-to-accessory visual configurators.","While certain aspects of conventional technologies have been discussed to facilitate disclosure of the invention, Applicants in no way disclaim these technical aspects, and it is contemplated that the claimed invention may encompass one or more of the conventional technical aspects discussed herein.","The present invention may address one or more of the problems and deficiencies of the prior art discussed above. However, it is contemplated that the invention may prove useful in addressing other problems and deficiencies in a number of technical areas. Therefore, the claimed invention should not necessarily be construed as limited to addressing any of the particular problems or deficiencies discussed herein.","In this specification, where a document, act or item of knowledge is referred to or discussed, this reference or discussion is not an admission that the document, act or item of knowledge or any combination thereof was at the priority date, publicly available, known to the public, part of common general knowledge, or otherwise constitutes prior art under the applicable statutory provisions; or is known to be relevant to an attempt to solve any problem with which this specification is concerned.","Certain embodiments of the current invention describe a computer program product including software executable instructions stored in a computer readable medium for performing a method by running a software program on a computer and including issuing instructions from the computer software program. In one embodiment, this method comprises providing a configurator that accesses an extensible structured document, wherein the extensible structured document contains language for a default product, whereby a designer can alter language for a class of accessories, and language for a punt product, whereby a designer can create a punt for a base object; creating at least one hotspot for the base object, corresponding to at least one accessory on the base object, wherein the at least one accessory may have a default t-matrix within the at least one hotspot; stacking the at least one hotspot on the base object with its x, y and z values, wherein the at least one hotspot may have multiple layers on the base object; coding the at least one hotspot to contain a vMask or default image used to display factory-installed accessories, and an instance used to hold at least one symbol, whereby the designer can alter the at least one accessory, in turn transforming all accessories within the at least one hotspot without further modification; applying applicable exclusion rules; sending language for the at least one accessory to the configurator, such that images associated with the at least one accessory can be retrieved and loaded into its corresponding at least one hotspot; and altering the at least one hotspot on the base object, wherein the alteration can apply to the corresponding at least one accessory.","In a further embodiment, the base product is a vehicle. In another embodiment, the instructions for the extensible structured document contain language for allProducts.","In another embodiment, the instructions further comprise generating an SQL database and executing the SQL database, including mounting a shared image asset library and a staging server; collecting the layer, image, and t-matrix information from the shared image asset library; converting the layer, image, and t-matrix information into stored procedure calls; and uploading the stored procedure calls onto the staging server. In a further embodiment, the information populating the SQL database comprises the view type and layer type of the accessories.","In another embodiment, the computer program product includes instructions for updating the instance affected by a symbol when a symbol class is altered in the extensible structured document. In another embodiment, the computer program product includes instructions for graphically adjusting a t-matrix of the instance. In another embodiment, the computer program product includes instructions for adding images to the configurator through use of a specific naming standard. In another embodiment, the computer program product includes instructions for adding images to the configurator through selection of an associated accessory and applying the associate accessory to a space on the base object.","In one embodiment, the computer program product may be written in ADOBE ACTIONSCRIPT. The configurator may be created by ADOBE FLASH. The computer program product may be executed through ADOBE AIR. The computer program product may be executed through local network file-servers. In an embodiment, XML may be used as a communication medium between the configurator and the computer program product.","In a separate embodiment, a computer program product is disclosed including software executable instructions stored in a computer readable medium for performing a method by running a software program on a computer, using the results of providing a configurator that accesses an extensible structured document, wherein the extensible structured document contains language for a default product, whereby a designer can alter language for a class of accessories, and language for a punt product, whereby a designer can create a punt for a base object; creating at least one hotspot for the base object, corresponding to at least one accessory on the base object, wherein the at least one accessory may have a default t-matrix within the at least one hotspot; stacking the at least one hotspot on the base object with its x, y and z values, wherein the at least one hotspot may have multiple layers on the base object; coding the at least one hotspot to contain a vMask or default image used to display factory-installed accessories, and an instance used to hold at least one symbol, whereby the designer can alter the at least one accessory, in turn transforming all accessories within the at least one hotspot without further modification; applying applicable exclusion rules; sending language for the at least one accessory to the configurator, such that images associated with the at least one accessory can be retrieved and loaded into its corresponding at least one hotspot; and altering the at least one hotspot on the base object, wherein the alteration can apply to the corresponding at least one accessory.","In a separate embodiment, the invention discloses a method for the production and operation of configurators, comprising the steps of providing a configurator on a computer medium; opening a base object; importing images of the base object and at least one hotspot with at least one corresponding accessory associated with the base object; placing the at least one hotspot on the base object; altering the at least one hotspot, whereby an alteration to the at least one hotspot corresponds to an alteration to the at least one corresponding accessory; saving the configurator, wherein images of the base object and the at least one hotspot are copied to a virtual private network; and sending information regarding the images of the base object and the at least one hotspot to the database via stored procedure calls.","These and other features of the invention will be more readily understood upon consideration of the attached drawings and the presently-preferred and other embodiments of the invention.","In the following detailed description of the preferred embodiments, reference is made to the accompanying drawings, which form a part thereof, and within which are shown by way of illustration specific embodiments by which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the invention.","As used herein, the terms \u201caccessory\u201d, \u201cpart\u201d and \u201cproduct\u201d may be used interchangeably to refer to any supplementary component or object that may be utilized within a vehicle. An accessory may have a variety of characteristics, any of which may affect its placement and look, for example angle and color.","The term \u201caccessory image assets\u201d as used herein refers to a range of visualizations of a selected accessory. Examples are depicted in , but may include 000, 045, 090, 135, 180, 225, 270 and 315 with corresponding angles of the accessories shown. The range gives taxonomy for accessory assets as seen from at least eight different points of view.","The term \u201callProducts\u201d is used herein to refer to a product XML containing every possible hotspot, and the parts available in each hotspot on a vehicle.","The term \u201cbase object\u201d is used herein to refer to any area or object with hotspots that define properties with images and angles, and its identifying information thereof. For example, a base object can be a vehicle and its identifying information could be its year, make, model, sub-model, etc.","The term \u201cconfigurator\u201d is used herein to refer to the area of the web application where a user can \u2018configure\u2019 a vehicle, or preview what it might look like with certain accessories installed.","The term \u201cdecal\u201d as used herein refers to shadows and highlights of a vehicle.","The term \u201cdefault product XML\u201d as used herein refers to a product XML containing product information that is held the same across all vehicles.","The term \u201cexclusion rules\u201d as used herein refers to instructions that applying when certain parts are unable to be installed if certain other parts are on the vehicle. A part can be removed from the vehicle by removing from within the configurator, removing from outside the configurator, triggering HTML form post-back, or removing from the shopping cart","The term \u201chotspot\u201d is used herein to refer to a geometrical location on a base object at an angle where an accessory can be applied. Hotspots may utilize the part classification system, such that when an accessory is placed on a base object's hotspot, all accessories\u2014that are in the catalog, that are classified as this particular accessory and that fit this specific vehicle\u2014may appear on the configurator.","The term \u201cImage\u201d as used herein refers to a .png file, or equivalent, displaying the entire vehicle.","The term \u201cinstance\u201d is used herein to refer to a visual representation of a symbol.","The term \u201cmask\u201d as used herein is any part of a vehicle that would be painted. This includes the body, hood, mirror caps, bumper, etc. However any plastic, chrome, glass, etc. that does not receive paint may not be considered a mask.","The term \u201cmedia\u201d as used herein refers to the association with a symbol that can be an image, a mask, or a decal. Media is the data for a single image,","The term \u201cpart-configurator-view\u201d as used herein refers to the asset for each angle that a part might be visualized on a vehicle.","The term \u201cpunt\u201d as used herein refers to drilling down to a single accessory within a class and making edits to that one part.","The term \u201cpunt product XML\u201d is used herein to refer to a product XML containing information specific to a vehicle.","The term \u201cshape\u201d as used herein refers to each layer that a hotspot may contain.","The term \u201cstaging server\u201d is used herein to refer to a temporary stage to assemble, test or review new or revised base object-accessory combinations and views prior to making them live.","The term \u201csymbol\u201d is used herein to refer to hotspots that are not placed on the vehicle and are stored in the library.","The term \u201csymbol class\u201d as used here in refers to a list of XML nodes containing either references to another symbol or media.","As used herein, the terms \u201ctransformation matrix\u201d or \u201ct-matrix\u201d may be used interchangeably to refer to the designer's collected data points, discussed supra, translated into a string of numbers. A default t-matrix refers to the data points common to accessories within a hotspot.","The term \u201cvehicle asset type\u201d as used herein refers to a family of three assets layered on top of one another to allow for color changes. Before the development of a vehicle asset type, changing the color of a vehicle in the system required a separate image to be uploaded for each and every color. For example, if a user changed the 2007 Chevy Tahoe from red to silver, the movie clip containing \u201c2007_Chev_Tahoe_LS_RED.jpg\u201d was removed from the stage and replaced with the movie clip containing 2007_Chev_Tahoe_LS_SILVER.jpg.\u201d With a vehicle asset type, the system is able to use three layered images for each view and support an infinite number of colors with less load time.","The term \u201cviews\u201d as used herein refers a range of visualizations of a selected vehicle. The range is depicted in , and includes 000, 045, 090, 135, 180, 225, 270 and 315 with corresponding angles of the vehicle shown. The range gives taxonomy for vehicle assets as seen from at least eight different points of view.","The term \u201cvMask\u201d is used herein to refer to a vector image representing \u2018windows\u2019 in barriers, such that products can be viewed through the barriers in order to simulate product occlusion.","Certain embodiments of the present invention are capable of building and maintaining automotive accessories catalogs for multiple foreign and domestic vehicle manufacturers. Accessories sales systems are currently in use by nearly one thousand dealerships nation-wide. A significant aspect of the accessories system is the vehicle accessory configurator, depicted in .","While configurators are found in the prior art, the rapid and accurate production of data-driven automotive configurators has long been a problem. A challenge is keeping up with the number and variety of possible vehicles and accessories, or parts or products, in the marketplace. The challenge faced is not showing customers accessories as they will appear on vehicles, but producing the data-driven assets to show customers thousands of accessories as they will appear on hundreds of vehicles in an organized and timely fashion. Due to these challenges, functionality of the original configurators was relegated to self-contained run-time executables, shown in .","Accordingly, what is needed is a method for the rapid and organized production and deployment of vehicle configurators. To solve this problem, certain embodiments of this invention have been conceived of and diligently reduced to practice and are referred to under the brand METACONFIGURATOR or META.","Certain embodiments of this invention can support a large number of brands efficiently. For each brand, there may be a large number of unique sub-models. For each sub-model, the system may have data covering the past ten (10) years or more. For each of those vehicles, there could be fifteen (15) configurable parts. These are conservative estimates of an ever-changing data set, and yet they represent at least 60,000 possible year-make-model-submodel-accessory combinations. Furthermore, new vehicles may be added or removed and new parts may be added, discontinued, recalled, superseded, or removed at any point. Moreover, part of the value and scalability of META is that certain embodiments allow a designer to transform an entire class of accessories within one hotspot at one time.","In the same way the configurator is a visualization tool for building an accessory shopping cart, one embodiment of META, as depicted by , is a visualization tool for building configurators. In this embodiment, a designer can make needed adjustments to position, rotation, scale, etc. and then simply save it to generate the SQL, build a deployment folder, and post the saved changes to a staging server for review. META can be used in any \u201clike\u201d areas with hotspots that define properties with images and angles. Examples of META applications include, but are not limited to, automobiles, houses, kitchens, and boats. In one embodiment, META is used with the visualization and alteration of vehicles and associated accessories.","Using user interface cues from the platform, META leverages behaviors and functionality already familiar to a designer. Accessory images may be scaled, skewed, and rotated using the same corner schema of the previously-used platform. Items in asset libraries within META use the same layer \u201cstacking\u201d as the designer sees in PHOTOSHOP, FLASH, or AFTER EFFECTS. Accessory categories or parts listed above others appear further forward on the z-axis.","A. Configurator Display","Certain embodiments of the invention may be launched when a user selects a base object in the accessories catalog. There are several paths to the same product list\/accessory configurator page in the web application, including, but not limited to, logging into the application with a \u201cfavorite vehicle,\u201d selecting an accessory that fits a corresponding base object, or selecting a base object from a list, as depicted in . From the web application's landing page, a user may select a vehicle's year, make, model, and sub-model. Once the base object has been selected, the following product list\/configurator page(s) is driven by the App ID.","Configurator data about a base object may be organized in the database as a set of the base object's views represented in relational tables. A base object's view is depicted in  and can be further broken down into a number of hotspots.","When a customer selects a base object in the catalog, as depicted in , a query is made to determine if this vehicle has base object views. If it does, the definition of those views and their hotspots is compiled into an extensible structured document, for example Extensible Markup Language (XML) or equivalent set of rules for encoding documents in machine-readable form. The XML may be organized in any way, for example hierarchically by views, hotspots, and geometry, as depicted in . The configurator can accept the XML either as a stream returned by a URL on the catalog servers or as payload in the initial launch of the configurator. Transmitting the XML as payload may reduce the overall launching time of the configurator because the latency of the additional server-query is avoided.","In order to display a vehicle, the configurator may load associated accessory views; transform accessories via scaling, skewing, translation and rotation; manage image depth; and communicate with the server. To load accessory views, actual images of the vehicle may be taken at set angles and split into images, masks, and decals. This may include vMasks, as depicted by . The images may be organized and loaded into the configurator. For example, the organization may comprise a hierarchical structure with locations for the collection of vehicle views, individual views, default products that are loaded on the vehicle, custom products that may be loaded on the vehicle, and vMasks providing occlusion information.","Certain embodiments of the present invention allow use of a single accessory across multiple base objects, while still using the same accessory image. Information of the accessory may be saved in the XML, as depicted by , and may be parsed by the configurator in order to adjust the images accordingly. The information comprising the adjusted imaged may be saved in t-matrix attributes in the XML.","Certain embodiments of the present invention also allow the possibility of changing the color of an image, while avoiding the need to use different images for each color in which a base object or accessory might be offered. The art teaches that colorable images are grayscale and are associated with an integer value from 0-255 that represents its average brightness. A completely black image has a value of 0, while a completely white image has a value of 255. Each desired color is associated with a hex RGB value. In one embodiment, pure white would have a value of #FFFFFF, while pure black would have a value of #000000. The colors of the grayscale image are subsequently shifted according to these two values. If the target color is #FFFFFF (R:255, G:255, B:255), and the average grayscale value for the image is 128, all the pixels in the image can be shifted +127, +127, +127. If the target color is #000000, all the pixels would need to be shifted \u2212128, \u2212128, \u2212128.","In order for images to be occluded correctly, the XML may track how to stack the hotspots correctly. This is recorded by the \u201cz\u201d attribute of the model XML. Hotspots that are above the main vehicle (referred to by the term \u201cmodel\u201d) hotspot have a value above \u201c0\u201d with each successive layer's z attribute increasing by 1. Hotspots below the model hotspot have a value below \u201c0\u201d with each successive layer's z attribute decreasing by \u22121. The model hotspot itself has a value of \u201c0\u201d. Any platform that accomplishes these requirements can be used to render this XML data. In one embodiment, an ADOBE FLASH platform is used.","In one embodiment, the configurator has an interface capable of accepting calls to pass in as an XML string to add a product, remove all products, and remove a single product. The interface may include any suitable prototype-based scripting language, for example JAVASCRIPT, server-side processing, SPROUTCORE, etc. Because the model XML is a product of the HTML page onto which the configurator is rendered, the XML is available to the configurator as soon as it is loaded. The configurator immediately begins iterating through the hierarchy, creating the MOVIECLIP classes associated with each XML node type. For most products there is a 1:1 correspondence between the attributes of each XML node and the properties associated with each subclass. When a t-matrix is achieved, it may be converted into a source file and applied to the platform. This is the default t-matrix that will be applied to any product that is loaded in this hotspot. As images are reached, they are loaded into the pre-loader, which allows the user to visualize the progress of how many of the images have been loaded.","B. Configurator Manipulation","From the user's perspective, the experience of shopping for accessories takes place largely in one of three areas: 1) browsing a product list, 2) drilling into product detail screens, and 3) manipulating the configurator as a visualization tool. Manipulating the configurator comprises changing a vehicle's color, rotating the vehicle, and adding or removing select accessories to or from the vehicle. When details about a particular accessory are visible (either in the product list or in the product details views), the user has an option to add that accessory to his\/her online cart. For select accessories that have configurable assets, adding that accessory or detail becomes unique. This is particularly useful in the product list view as the configurator may show the user whether an accessory does or does not have configurable assets, as depicted in .","In certain embodiments, gathering data for parts to be displayed in the configurator mirrors the process for vehicles, described supra. Similar to a vehicle, configurator data about an accessory may be organized by view-angle. That is, one or more image assets may be defined for each angle that a part might be visualized on a vehicle. A part that belongs to a part class associated with a hotspot is queried for part-configurator-views. If any are found, they are collected in preparation for transmission to the configurator.","XML may be constructed from the part-configurator-view data of the part in question. This XML can be organized in any functional way, for example hierarchically by view-angle and asset-type. Actual image files are referred to by URL and are resolved by the configurator making web requests of the browser.","Similar to a vehicle, the configurator can accept the XML, containing the part-configurator-view data, either as a stream returned by a URL on the catalog servers or as payload in the initial launch of the configurator. To avoid the latency of the configurator querying the URL to retrieve the XML as a stream, the XML may be packaged into a string and passed to the configurator via a call made by any suitable prototype-based scripting language, such as JAVASCRIPT. By responding to the JAVASCRIPT-initiated function call, the configurator accepts the XML just as if it had come from a URL, thus avoiding delay caused by a configurator querying the URL for the XML.","The product XML used to load part images onto the configurator may be passed into the configurator with the model XML either (1) via a JAVASCRIPT, or equivalent, call or (2) via FLASHVARS, hard coding, or query string. The former may be used when the user selects a part to install on the vehicle, and the latter may be used when the user navigates away from the vehicle and then returns to it, in order to restore the previous state of the vehicle customization.","Once the product data has been sent to the configurator, the associated images may be retrieved and loaded into the appropriate hotspot. Generally, the parts and the hotspot can be linked by a product type attribute. For example, a fuel door hotspot would have a type of \u201cFuelDoor.\u201d However, a single part may be associated with more than one hotspot. For example, a \u201cVentVisor\u201d hotspot may have a \u201cFront\u201d hotspot located at one depth and position, and a \u201cRear\u201d hotspot located at another depth and position. The configurator can assemble large parts that have sections that are partially behind and partially in front of the vehicle. Each part image can also be split into a mask, decal, and image in order to allow coloring. A parameter for a t-matrix is also contemplated to allow for typically small adjustments between products. If the product has a color applied to it, a color property will be associated with it.","A situation may is contemplated where a specific part has a default location in a vehicle, and that part needs to be removed so a new part can be installed. For example, the vehicle may come, by default, with factory wheels, so the factory wheels need to be removed prior to adding another set of wheels. These parts are stored as separate images of only that single part. In one embodiment, no t-matrix is applied to this image, so it is placed on the vehicle by including the appropriate amount of space. As each part image is parsed, the part image is transferred to the pre-loader, which can track and notify the user about the progress of image data loading. In one embodiment, once all of the image data has been loaded, all of the images can appear on the vehicle simultaneously.","Another situation is contemplated where certain parts are unable to be installed if certain other parts are on the vehicle. In one embodiment, each hotspot may include a part but may exclude other parts from being placed in that hotspot or in another hotspot. However, rules for product installation between hotspots also exist. For example, installing a product in a ToolBox hotspot may exclude products from being installed in a BedRack or BedRails hotspot. This relationship may be expressed in the format \u201c<EXC lhHotspot=\u2018ToolBox\u2019 rhHotspots=\u2018BedRack, BedRails\u2019\/>\u201d. The term \u201cEXC\u201d denotes an exclusion relationship. The term \u201clhHotspot\u201d denotes the type of hotspot being installed. The term \u201crhHotspot\u201d denotes the names of the hotspots being excluded. When an exclusion rule is activated, a product removal event is triggered.","Certain embodiments contemplate the removal of a part from the vehicle by removing from within the configurator, removing from outside the configurator, triggering HTML form post-back, or removing from the shopping cart. In one embodiment, a customer may click on a part on the vehicle to be removed. Product removal may be triggered from inside the configurator either when the user clicks on a product to remove it or when mutual exclusion rules apply. Removal of a part from within the configurator involves making a call to a JAVASCRIPT function, triggering the server-side code. In conventional configurators, the user must wait for a call from the server in to remove the part. Certain embodiments of the current invention call for the configurator removing the part immediately, rather than waiting for a call from the server. An advantage of these embodiments is the elimination of undue delays resulting from conventional configurators. Removal of a part generally involves a single part, but a similar method may be used when mutual exclusion rules and multiple parts need to be removed.","In another embodiment, parts may be removed from outside the configurator via a JAVASCRIPT, or equivalent, call. Once a call is received, the removal is handled by a similar function that manages part removal for product removal from within the configurator.","In another embodiment, parts are removed by triggering a form post-back. Each part may be assigned a unique numerical identifier (ID). When the configurator removes a part from the vehicle for any reason, for example through user action or if mutual exclusion rules apply, the ID of the part to be removed may be communicated back to the catalog server. This may be accomplished via JAVASCRIPT and a form post-back. The configurator calls a pre-defined JAVASCRIPT function with a single list or a comma-separated list of the part ID that has been removed from the vehicle. This list may be converted to a string and stored in a hidden form-variable on the page. The page is then posted back to the server for processing. When the form gets posted back to the server, the hidden form-variable is examined for a list of part ID's that have been removed from the configurator. The customer's shopping cart is checked for these parts, and if located, is removed and the cart display updated.","In another embodiment, a user may remove a part directly from his\/her shopping cart. In this situation, the removal may be communicated to the configurator rendered on the client. To remove a part from the shopping cart, the part must have been added to the cart for the vehicle displayed in the configurator, the part must have part-configurator-views, meaning the part was placed onto the vehicle prior to removal, and the customer must indicate deletion of the part from the shopping cart, for example by clicking a button.","A JAVASCRIPT call may also be made to remove parts a configurator is displaying. The part ID may be needed, so a JAVASCRIPT call can be written to the form that will call the configurator with the part ID to be removed. More than one part may be removed automatically if the part the customer removed has related parts that must also be removed or if mutual exclusion rules apply. The form may then be sent back to the client for display. As the resulting user interface is rendering (e.g., cart is updating), a JAVASCRIPT call may be made to the configurator with the ID of the part(s) to be removed.","The process for removing all of the images of a product is the reverse of the process for loading the images. The configurator applies any exclusion rules, removing the parts that a particular hotspot excludes. The configurator may then search through each view, looking for that hotspot, and search through the list of shapes (e.g., Front and Rear) for that hotspot, deleting image information and clearing out information, such as color and anchor tag. Finally, if a default image for this hotspot exists, that image may be re-loaded and the color applied.","C. Configurator Production","A configurator asset production may have three assets: mask, image, decal. For example,  depicts a mask that may be coded 10Ram1500CrewCabSLT000_M.png.  depicts an image that may be coded 10Ram1500CrewCabSLT000_I.png.  depicts a decal that may be coded 10Ram1500CrewCabSLT000_D.png. Though an accessory can be shown from any of eight (8) views, only five (5) assets may be needed. Based on the vehicle view diagram depicted in , any accessory image placed on a 000 view can be mirrored to work on a 180 view. The same may be true for the 045 and 135 views, and the 315 and 225 views. Therefore, many configurable accessories may have assets for 000, 045, 090, 270, and 315. The other angles may use mirrored transformations. Some accessories may need even less than five assets, dependent on whether they can be seen in certain views. For example, wheels cannot be seen from either the front (090) or the rear (270) view. Therefore, wheels may only require three (3) image assets (000, 045, and 315).","In one embodiment, prior to launching META, the designer may mount a shared image asset library and a staging server. The shared image asset library contains the configurator source image assets. This library is also where a deployment package generated by META will be saved. The staging server is created when the designer saves work from META. Each time the designer saves work from META, necessary assets are saved to this staging server, and the SQL generated by META can be executed. The designer may place and transform vehicle assets and hotspots within the accessories application. Adjustments can be made in META and a new save can post the adjustments to the staging server, so the SQL generated by META can be executed.","Once the shared image asset library and staging server are mounted and META is launched, META may request an App ID, as depicted by , or any identifier of reaching the base object. Once the identifier is entered, META polls the mounted staging server and displays the configurator for the selected vehicle. However, unlike the conventional configurator .swf, in META all elements of the configurator (assets, hotspots, transformations, etc.) may be edited.","In one embodiment, the designer can start in the shared image asset library and see all hotspots available for that base object, as depicted in the first tab of the left side of  (the \u201cLibrary\u201d tab). Each view angle is represented by a folder. By expanding a folder, the designer can see an organized list of all hotspots for that view. From this expanded menu, the designer can drag and drop the symbol for any hotspot (even from an alternate view angle) and drop it onto the vehicle image. Once a hotspot has been dropped onto a vehicle, that hotspot may be rotated, scaled, skewed, etc. using the transformation tool bar, shown in .","As depicted in the second tab on the left side of  (the \u201cLayers\u201d tab), the designer also may adjust the z-order of the layered assets. For example, if an accessory image needs to be positioned behind the vehicle, the designer may select that layer and move it into a position below the model layer. If the designer needs to adjust assets within the model layer, he\/she may select that layer and adjust the decal, mask, or image assets and stack them to build the vehicle. The designer also may drill into a single layer or hotspot. This embodiment allows the designer to transform an entire class of accessories within one hotspot at one time. However, if the designer does not need to transform an entire class of accessories within one hotspot but needs to create a punt, the designer can do so through the third tab on the left side of  (the \u201cProducts\u201d tab). Once the designer has made all the additions and edits needed, he\/she can save it, for example by clicking the save icon within the transformation toolbar, shown in . Saving the adjustments and punts generates the necessary SQL, executes it on the staging server, and saves it to a deployment package along with any needed image assets for deployment.","Certain embodiments of META were designed to allow designers to create data-driven configurators without having to know about the underlying XML schemas involved. The interface is intentionally designed to be superficially similar to software on the market, such as ADOBE FLASH, such that designers can pull assets from a library and place them onto a stage which displays the current visual state of the vehicle. The back-end of META can communicate with an SQL database. The method of operating META comprises opening the desired vehicle; importing images of the vehicle and parts that can be installed on the vehicle; placing the parts on the vehicle; scaling, skewing, and rotating to look realistic and saving the configurator, which may entail copying the images to the correct location on the virtual private network (VPN); and sending the placement information to the database via stored procedure calls.","The product XML can split into a default product XML and a punt product XML. In addition, the product XML may also contain an \u201callProducts\u201d product XML. Each hotspot may correspond to a class of accessories in the database, but only a limited number of these classes have hotspots since not all classes have parts that are visible in the configurator.","Data may be stored in the shared asset image library. The designer can pull data from the library in order to place parts on the vehicle. The designer may see only the hotspots that can be placed. When a class in the library needs to pull a symbol from the library, it can pass in the name of the symbol, and the library class can return the instance of that particular symbol.","The image XML data for each product is stored in an instance of a symbol class. There is only a single instance of a symbol, which connects to any instance that uses the symbol, so instances are kept synchronized. To synchronize the instances, the symbol class may extend to any organized data set capable of synchronization, for example the ADOBE FLEX XMLLISTCOLLECTION. This data set can keep track of changes that are made to the XML. It can store and spawn events when a change is made to a symbol class. These events can trigger updates in any instances which use the affected symbol.","While a symbol stores its data in XML, an instance subclasses the class for displaying nested graphical data. This subclassed class can be ADOBE FLASH Sprite class, or equivalent display list node that can display graphics. Whenever the subclassed class receives an event from its associated symbol, the instance updates the associated property. For example, when a t-matrix is changed, the instance converts the t-matrix string into ADOBE FLASH MATRIX data type and updates its value with the new matrix value. An instance may be draggable or static.","For non-colorable parts, the Image is the only media necessary. The mask and decal allow the image to be colored. The mask is a grayscale bitmap limited to the colorable part of the product. The decal contains the highlight and shadow information. When the assets are layered on top of one another, a hexadecimal RGB value can be fed into the desaturated mask layer and change the color of the vehicle. Highlights and shadows remain sharp due to the decal layer, and the other elements of the vehicle (tires, glass, headlights, chrome, etc.) are unaffected as they are viewed through holes in both the mask layer and the decal layer.","To allow the designer to transform images of accessories so that they can fit on a variety of vehicles, in one embodiment META utilizes SENOCULAR Transform Tool, but any image transformational tool may be used. This tool is used to graphically adjust the t-matrices of instances, which in turn triggers the associated symbols to be updated, such that any change made via the transformational tool can notify other instances that use the same symbol. Any tool that accomplishes a similar result may be used.","Designers may add new images to the configurator and have them show up in the correct hotspot, associated with the correct product. This may be accomplished by two means. The first is through the use of a specific naming standard which, when followed, provide the information necessary to add the image file. For example, if the image name is \u201c19172622000_Front_Mask.png\u201d, its corresponding part number might be 19172622. By using the \u201callProducts\u201d XML file, it may be determined that this product is a part of the VentVisor class and that it is installed in angle \u201c000\u201d in the layer VentVisor>Front. Also, it can be determined that this image is a mask image. If the image name does not specify the anchor tag, the anchor tag may have a default, for example a value of 128, which can be adjusted by the designer.","The second means of adding new images to the configurator and having them show up in the correct hotspot is for the designer to select the product he\/she wants to add from the list of all possible products and subsequently drag and drop the images onto spaces for the image, mask, and decal.","Certain embodiments of the present invention resolve the problem associated with the instance-symbol combination, the problem being that all of the XML nodes must be of the same type. These embodiments contemplate that the view and layer types contain and subclass a collection of types. The view type may contain both the background image, which typically is the shadow of the vehicle or location in which the vehicle is placed, and the collection of layers to be displayed. The layer type may contain the vMask or the default image used to display factory-installed accessories, and the instance used for holding the collection of product symbols. This instance may be placed and transformed, and the vMask and\/or default image can be set elsewhere.","Once the data from the types are added, the data can be loaded into META. The top level of the XML documents may contain the information about the vehicle, as depicted in . Each vehicle is assigned a catalog ID, which corresponds to brand, and an App ID, which corresponds to the specific vehicle. When the designer initially loads the tool, he\/she selects the correct brand, and input the appropriate App ID. These IDs are inserted into a URL, and a request is made to the server. When the server returns the data, it can be processed, for example by ADOBE FLEX XML DOM.","The XML documents may split up at the top level. Typically the top level is the exterior of the vehicle, but it is also contemplated that the interior of the vehicle could be configured and previewed.","The next level down in the XML may contain the \u201cview\u201d nodes. Each view has an \u201cangle\u201d attribute that roughly corresponds to the angle from which the photo of the vehicle was taken. For the accessories, there is limited flexibility in terms of how much variation there can be between the angle and elevation at which the photo of the product was initially taken, and the angle and elevation of the vehicle at which the product would look convincing. However, it is often possible to flip the image and use the product on vehicle angles that are more or less a mirror image of the product image's original photograph. In META, a view consists of a photo of the vehicle taken from that angle, all of the hotspots that have been installed on that vehicle, and the parts that are available with images for each hotspot. In terms of data, each view has a collection of layers that are ordered by depth. This collection corresponds to how the layers will be stacked when the vehicle is displayed in the configurator.","At the next level down, the XML is divided by hotspot. Each hotspot is essentially an accessory class, but a single hotspot can have images in multiple layers. One method of handling single hotspots corresponding to multiple layers is by combining the hotspot name with the shape name in the menu for the Library. For example, a DoorHandles class with a Front entry and a Rear entry may be combined to make a \u201cDoorHandles>Front\u201d layer, and a \u201cDoorHandles>Rear\u201d layer. The shape may contain media image information about the default image that should show up at this particular hotspot location. The shape may also contain a path to a vector mask image.","The next level down of the XML may contain actual parts. When the database returns the product XML, it includes products that have image assets available for it. Initially, this image information may be stored in media XML nodes inside the product symbols. When a hotspot is placed on the vehicle, the associated images can be loaded and displayed.","The next level of the XML may contain the media nodes. These nodes may be of a type selected from image, mask, or decal. Each type has a path to the actual image. As the designer adds, changes, and removes images, the changes take place at the associated XML node.","When the vehicle is loaded and all the images are displayed, the designer may begin editing the vehicle. A designer's main areas of interest can be shown, for example the \u201cLibrary\u201d, \u201cLayers\u201d, and \u201cProducts\u201d tabs depicted in . The Library tab contains a list of all layers available to place on the vehicle. After each layer is placed, it may be marked for the designer's notification. If the designer adds a new part in a hotspot that has not been placed yet, that hotspot can show up in the Library as a place-able layer.","When a layer has been dragged out of the Library and dropped onto the stage, it can appear in the Layers tab. Functionally, this action means that a new shape XML node has been added to the symbol corresponding to the current view. The order of these nodes may determine the stacking of the layers on the stage. By dragging a layer and dropping it at a different location in the list, the designer may change the order. More specifically, the designer can remove the node and re-insert it at the place in the list where the designer dropped it. Each layer can also have its visibility and editability toggled, for example by toggling ADOBE FLASH's built-in \u201cvisible\u201d and \u201cmouseEnabled\u201d properties. When the image transformation tool is used with this tab, it can change the t-matrix for the shape that is associated with the selected layer.","The third tab is the \u201cProducts\u201d tab. Within this tab, the designer may add, swap out, transform, and remove part images. In the image's properties, the designer can replace the images being used for that product. Replacing an image modifies the path that is stored in the corresponding media XML node. Alternatively, the user may select the \u201cAdd product\u201d option where he\/she may select the part and part class to which he\/she wants to add part images.","After the configurator has been created, the designer can save it. Saving the configurator notifies META to begin the process of collecting information about the current state of the configurator in order to output that information as a series of stored procedure calls. First, the information necessary for the model XML is gathered. The model XML data may be cleared out and re-saved each time to simplify the process. It is a matter of looping through the layers of the configurator; collecting the layer, image, and t-matrix information; and converting the information into stored procedure calls.","The process for gathering the information to save the product data involves keeping track of what products have been changed while the designer is editing the configurator, and transforming those changes into stored procedure calls. The changes are kept to a minimum to avoid disrupting other vehicles that use the same product images. If the t-matrix has changed, other information about the part is preserved.","Once the list of stored procedure calls is compiled, it can be uploaded to the staging server in the form of a text file where it may be run. The list is also saved in a deployment folder, so that after the changes have been tested, they can be deployed to a live production server. The images may be copied to both the test server and the deployment folder via a VPN connection.","In one embodiment, META can be written in ACTIONSCRIPT 2.0, and is meant to be compatible with the latest FLASH Player, thereby increasing compatibility with older systems. The configurator tool is created using the latest Macromedia FLASH, and later, the latest ADOBE FLASH CS-series product. FLASH can be selected for its ability to nest graphics, its vector and bitmap image display capabilities, and its advanced image modification capabilities, mainly coloring and transforming images, and ability to use vector graphics to mask other vector or bitmap graphics.","In one embodiment, META may be written in ACTIONSCRIPT 3.0. It can be created using the FLEX BUILDER development platform, with the latest FLEX SDK. Flex can be selected given the prevalence of other ADOBE software (PHOTOSHOP, ILLUSTRATOR) in the graphics pipeline and the fact that the Configurator tool can be created using FLASH. FLEX and FLASH share the same basic class hierarchy for its graphics classes. The graphics capabilities of later FLASH versions mostly build on previous versions, making it more straightforward to create an interactive GUI in FLEX, allowing designers see how the configurator they create will appear in the earlier FLASH Players.","META can be used with the latest version of ADOBE AIR. ADOBE AIR can be selected for its ability to work with local files. AIR allows designers to drag image files from their desktop onto the stage where those files can be displayed and copied to the proper location on the VPN.","In one embodiment, local network file-servers may be used for retrieving and storing image assets for both vehicles and part images. These assets can be organized in a hierarchical folder structure designed to make locating and naming a more intuitive process. Local database servers are frequently deployed with snapshots of the production database for up-to-date access to accurate part and vehicle fitment data, while at the same time localizing changes to a safe sandbox environment. Base object and fitment data can be read into META via XML responses to representational state transfer (REST) queries, while resulting updates can be posted as SQL commands to be executed directly on the database server.","The collection of database updates in SQL and image assets stored on the file server constitute a deployment kit to be tested. Similar processes can be utilized to deploy database updates and image assets to test servers for production for the final deployment.","All communication can be done in the XML. Both the configurator and META tools may use REST standards for retrieving data from the server. META may use stored procedure calls listed in a basic text format when sending data to the server to be saved.",{"@attributes":{"id":"p-0136","num":"0135"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0137","num":"0136"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0138","num":"0137"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0139","num":"0138"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0140","num":"0139"},"figref":["FIGS. 19A","FIG. 19A"],"b":["19","19","500","502","504","502","506","508","508","510","512"]},{"@attributes":{"id":"p-0141","num":"0140"},"figref":"FIG. 19B","b":["520","522","524","526","527","528","524","530","532","532","534","536"]},{"@attributes":{"id":"p-0142","num":"0141"},"figref":["FIG. 19C","FIG. 19A"],"b":["550","552","554","556","558","554"]},"A disk controller  interfaces one or more optional disk drives to the system bus . These disk drives may be external or internal floppy disk drives such as , external or internal CD-ROM, CD-R, CD-RW or DVD drives such as , or external or internal hard drives . As indicated previously, these various disk drives and disk controllers are optional devices.","Each of the element managers, real-time data buffer, conveyors, file input processor, database index shared access memory loader, reference data buffer and data managers may include a software application stored in one or more of the disk drives connected to the disk controller , the ROM  and\/or the RAM . Preferably, the processor  may access each component as required.","A display interface  may permit information from the bus  to be displayed on a display  in audio, graphic, or alphanumeric format. Communication with external devices may optionally occur using various communication ports .","In addition to the standard computer-type components, the hardware may also include data input devices, such as a keyboard , or other input device , such as a microphone, remote control, pointer, mouse and\/or joystick.","As additional examples, for example, the systems and methods may include data signals conveyed via networks (e.g., local area network, wide area network, internet, combinations thereof, etc.), fiber optic medium, carrier waves, wireless networks, etc. for communication with one or more data processing devices. The data signals can carry any or all of the data disclosed herein that is provided to or from a device.","Additionally, the methods and systems described herein may be implemented on many different types of processing devices by program code comprising program instructions that are executable by the device processing subsystem. The software program instructions may include source code, object code, machine code, or any other stored data that is operable to cause a processing system to perform the methods and operations described herein. Other implementations may also be used, however, such as firmware or even appropriately designed hardware configured to carry out the methods and systems described herein.","The systems' and methods' data (e.g., associations, mappings, data input, data output, intermediate data results, final data results, etc.) may be stored and implemented in one or more different types of computer-implemented data stores, such as different types of storage devices and programming constructs (e.g., RAM, ROM, FLASH memory, flat files, databases, programming data structures, programming variables, IF-THEN (or similar type) statement constructs, etc.). It is noted that data structures describe formats for use in organizing and storing data in databases, programs, memory, or other computer-readable media for use by a computer program.","The computer components, software modules, functions, data stores and data structures described herein may be connected directly or indirectly to each other in order to allow the flow of data needed for their operations. It is also noted that a module or processor includes but is not limited to a unit of code that performs a software operation, and can be implemented for example as a subroutine unit of code, or as a software function unit of code, or as an object (as in an object-oriented paradigm), or as an applet, or in a computer script language, or as another type of computer code. The software components and\/or functionality may be located on a single computer or distributed across multiple computers depending upon the situation at hand.","It should be understood that as used in the description herein and throughout the claims that follow, the meaning of \u201ca,\u201d \u201can,\u201d and \u201cthe\u201d includes plural reference unless the context clearly dictates otherwise. Also, as used in the description herein and throughout the claims that follow, the meaning of \u201cin\u201d includes \u201cin\u201d and \u201con\u201d unless the context clearly dictates otherwise. Finally, as used in the description herein and throughout the claims that follow, the meanings of \u201cand\u201d and \u201cor\u201d include both the conjunctive and disjunctive and may be used interchangeably unless the context expressly dictates otherwise; the phrase \u201cexclusive or\u201d may be used to indicate situation where only the disjunctive meaning may apply.","It will be seen that the advantages set forth above and those made apparent from the foregoing description are efficiently attained, and since certain changes may be made in the above construction without departing from the scope of the invention, it is intended that all matters contained in the foregoing description or shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.","It is also to be understood that the following claims are intended to cover all of the generic and specific features of the invention herein disclosed, and all statements of the scope of the invention that, as a matter of language, might be said to fall therebetween."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a fuller understanding of the invention, reference should be made to the following detailed description, taken in connection with the accompanying drawings, in which:",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 19A"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 19B"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 19C"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 22"}]},"DETDESC":[{},{}]}
