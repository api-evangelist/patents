---
title: API to enforce internationalization
abstract: A method for enforcing internationalization uses pre-logging subroutines, i.e., helper methods, to determine whether a high priority debug log message is localized, and reject a string message that is not localized in a user's native language. A localized message may be constructed by passing message keys and parameters to a translation subroutine, which is implemented by a localized messaged factory. As a result, only a localized message may be passed to the helper methods, and the localized message is typically translated into a text string in the user's native language before being passed to a raw logging interface to be logged, thus automatically enforcing internationalization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06938259&OS=06938259&RS=06938259
owner: Hewlett-Packard Development Company, L.P.
number: 06938259
owner_city: Houston
owner_country: US
publication_date: 20011002
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This patent application is related to U.S. patent application, Ser. No.09\/968,552, entitled \u201cAPI to Increase Debug Log Performance,\u201d and filed on the same day herewith.","The technical field relates to computer software systems, and, in particular, to using an application programming interface to enforce internationalization.","Software products must be flexible to adapt to the needs of users, and software products developed in one country must be modified and translated to be used by users in other countries. Internationalization is the process of removing language dependencies from software applications, whereas localization is the process of reinserting a specific set of values for the language attributes removed during internationalization.","A logging system is a portion of a larger software application that includes a client program and a logging interface that writes messages, such as errors or warnings, to a log. The logging interface, which accepts strings directly from a programming code, is hereinafter referred to as a raw logging interface. Since a user of a system may be from any country, speaking languages other than English, the messages that are intended for the user (e.g. errors, warnings) mostly need to be displayed in the users' native language, such as French, German, or Chinese. The messages intended only for the development or support of the application may be displayed in the developers language (e.g. English).","Prior logging systems typically expose a raw logging interface to the developers, and rely on developers to properly and completely internationalize log messages. Similarly, traditional application programming interfaces (APIs) depend on the developers to localize the log messages and pass resulting strings to the logging system. If the developers fail in this task, un-localized messages may be logged and passed to the users, hindering localization. These failures can be exceedingly difficult to find and repair during the development process.","A method for enforcing internationalization includes receiving a message, which includes keys and parameters, from a client program, and passing the keys and parameters to a translation subroutine, which translates the message into a localized message. The method further includes calling a pre-logging subroutine, i.e., helper method, capable of determining whether the message is localized. The pre-logging subroutine typically rejects a non-localized message.","Since each pre-logging subroutine will reject a non-localized message that is logged at a level intended for a user, only localized messages in the user's native language may be passed to the raw logging interface at these levels to be logged, thus automatically enforcing internationalization.","A method for enforcing internationalization uses pre-logging subroutines, i.e., helper methods, to determine whether a high priority debug log message is localized, and reject a string message that is not localized in a user's native language. A localized message may be constructed by passing message keys and parameters to a translation subroutine, which is implemented by a localized messaged factory. As a result, only a localized message may be passed to the helper methods, and the localized message is typically translated into a text string in the user's native language before being passed to a raw logging interface to be logged, thus automatically enforcing internationalization.","By convention, an original raw logging interface is never called directly by development programmers in a programming code. Because calls to the deprecated raw logging interface can be easily found by any program capable of searching through source files for strings matching these calls, failure to convert to a new logging interface can be trivial to find and repair during the development. In addition, a user can be certain that no old calls remain. Thereafter, any attempt to call the new API with an non-localized message, where a localized message is required, will result in a compilation error.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["110","140","150","191","192","110","191","192","140","191","192","150","110","131","132"]},"The helper methods  for operational logging serve as a public interface accessible by users working on a client program . The helper methods  typically process operational log messages  intended for helping the users to operate the client program , such as warning information concerning a potential problem or an error indicating the failure of a certain function. Since the user may be from any country, speaking languages other than English, sending a message of this type in English is not particularly helpful. Accordingly, such messages  need to be displayed in the users' native language, such as French, German, or Chinese. However, the helper methods  for debug logging typically process debug log messages  that consume more time and memory resources. Intended for the developers, these type of messages  may be received in the developer's native language, which is typically English. The helper methods  for debug logging are described in detail in the related U.S. patent application, entitled \u201cAPI to Increase Debug Log Performance,\u201d filed on the same day herewith, which is incorporated herein by reference.","Method signatures of the helper methods  for the operational log messages  typically require a localized message  as input and reject a non-localized string message . Method signatures of the helper methods  for the debug log messages  typically accept either a localized message  or a non-localized message , which is typically a simple text string. A method signature is a formal definition of calls to a method (or subroutine) that includes the name of the method and the number and types of parameters that may be passed to the method. In modern (and particularly object oriented) computer languages, the method signature is used to select which version of a method will be called when multiple versions (i.e., methods with the same method name but different parameters) of a method exist. The localized messages , , i.e., messages in a user or developer's native language, are typically constructed by translation subroutines after receiving message keys and parameters ,  from the client program . The translation subroutines may be implemented by localized message factories , .","To construct an operational log message , the client program  typically passes keys and parameters  to be included in a message  to the localized message factory , which translates the message  to a localized message . The translation may be accomplished by selecting a version of a message catalog particular to the user's native language, using locale information from an environment variable. An original version of the message catalog may be developed by development engineers, by creating a message template in the developer's native language, for example, English. Subsequent versions of the message catalog may be produced by localization engineers, by translating the message template in the developer's native language to a message template in the user's native language. The message template typically contains placeholders for any parameters to be included in the message . Once the message template in the user's native language is retrieved, the localized message  may be produced by capturing the message keys and parameters  in an instance of an object that is of a particular localized message class. Then, the helper method  may be called to log the operational log message  that is user readable.","Since the helper methods  for operational logging only accept localized messages  and reject string messages , i.e., non-localized messages, the helper methods  may prevent logging of operational log messages  that are not localized in the users' native language. In other words, only a localized message  in the users' native language may be passed from the helper methods  to the raw logging interface  to be logged, thus automatically enforcing internationalization.","Methods for localizing a message or providing multiple language capability for computer applications are described, for example, in U.S. Pat. No. 6,205,418, issued on Mar. 20, 2001 to Li et al., entitled \u201cSystem and Method for Providing Multiple Language Capability in Computer-Based Applications,\u201d which is incorporated herein by reference. Li et al. disclose a system and method capable of dynamically changing language selections for text-based information that is visually presented to a user of a target application. The target application includes commands, labels, status and error messages, help screens, and the like. Users can either select a pre-programmed standard language, customize any of the standard languages to create a modified version of the standard language, or create a new language.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["191","191","161","191","210","110","161","171","191","181","220","161"]},"After the localized messages  is created, the client program  typically calls the helper methods  for operational logging capable of determining whether the message  is localized, step . If the message  is not localized, step , the message  may be rejected by the helper methods , step . Accordingly, only the localized message  in the user's native language may be logged, step , automatically enforcing internationalization.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3","b":["300","300","318","300","302","312","314","316","310","308"]},"The memory  may include random access memory (RAM) or similar types of memory. The secondary storage device  may include a hard disk drive, floppy disk drive, CD-ROM drive, or other types of non-volatile data storage, and may correspond with various databases or other resources. The processor  may execute information stored in the memory , the secondary storage , or received from the Internet or other network . The input device  may include any device for entering data into the computer , such as a keyboard, keypad, cursor-control device, touch-screen (possibly with a stylus), or microphone. The display device  may include any type of device for presenting visual image, such as, for example, a computer monitor, flat-screen display, or display panel. The output device  may include any type of device for presenting data in hard copy format, such as a printer, and other types of output devices including speakers or any device for providing data in audio form. The computer  can possibly include multiple input devices, output devices, and display devices.","Although the computer  is depicted with various components, one skilled in the art will appreciate that the computer  can contain additional or different components. In addition, although aspects of an implementation consistent with the present invention are described as being stored in memory, one skilled in the art will appreciate that these aspects can also be stored on or read from other types of computer program products or computer-readable media, such as secondary storage devices, including hard disks, floppy disks, or CD-ROM; a carrier wave from the Internet or other network; or other forms of RAM or ROM. The computer-readable media may include instructions for controlling the computer  to perform a particular method.","While the method and apparatus for enforcing internationalization have been described in connection with an exemplary embodiment, those skilled in the art will understand that many modifications in light of these teachings are possible, and this application is intended to cover any variations thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The preferred embodiments of a method for enforcing internationalization will be described in detail with reference to the following figures, in which like numerals refer to like elements, and wherein:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3","b":"2"}]},"DETDESC":[{},{}]}
