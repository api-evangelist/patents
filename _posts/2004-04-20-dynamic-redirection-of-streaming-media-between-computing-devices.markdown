---
title: Dynamic redirection of streaming media between computing devices
abstract: Dynamic redirection of streaming media between computing devices is described. In an implementation, a method listening at an application programming interface for a notification indicating that a change is to be made in a topology of streaming media software components. When the notification is received, a media engine that is capable of reconfiguring the topology in accordance with the indicated change is notified. At least one of the topology or the reconfigured topology have one of the streaming media software components located on a comprising device and another one of the streaming media software components located on another computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07669206&OS=07669206&RS=07669206
owner: Microsoft Corporation
number: 07669206
owner_city: Redmond
owner_country: US
publication_date: 20040420
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Overview","CONCLUSION"],"p":["The present invention generally relates to streaming media, and more particularly relates to dynamic redirection of streaming media between computing devices.","Users of computing devices, such as desktop personal computers (PCs), set-top boxes, personal digital assistants (PDAs), and so on, have access to an ever increasing amount of media from an ever increasing variety of sources. For example, a user may interact with a desktop PC that executes a plurality of applications to provide media for output, such as home videos, songs, slideshow presentations, and so on. The user may also utilize a set-top box to receive traditional television programming that is broadcast to the set-top box over a broadcast network. Additionally, the set-top box may be configured as a digital video recorder (DVR) such that the user may store the broadcast media in memory on the set-top box for later playback. Further, the user may interact with a wireless phone that executes a plurality of applications such that the user may read and send email, play video games, view spreadsheets, and so forth.","Streaming media provides increased functionality to a user such that the user may quickly receive the media. Without streaming, if the entire amount of the media was needed to be received from a source device before it was output by a client device, the user may experience a delay in rendering the media at the client device. By streaming the media, the delay encountered by the user may be lessened. Thus, media streaming may be used to provide \u201creal-time\u201d rendering of data.","To stream media, media is transmitted from a source device in a streaming or continuous fashion, generally using data packets, for rendering at a client device as the data arrives, as opposed to media that is not rendered until an entire file which includes the media is available at the client device. Streaming may be used for a variety of types of media, such as video media, audio media, multimedia, and the like. A stream of video media provides a sequence of \u201cmoving images\u201d that are transmitted and displayed when the images arrive. Likewise, a stream of audio provides sound data that is played as the audio media arrives. A stream of multimedia may include both audio and video media.","Because the user may have access to a wide variety of computing devices on which to experience rendered streaming media, the user may wish to change from interacting with streaming media on one computing device to another computing device. For instance, the user may watch a television program that is stored on a digital video recorder (DVR) in a living room. The television program is output by the DVR for rendering by a display device in the living room such that the user may view and listen to the television program. During the output of the television program, however, the user may wish to view and listen to the television program utilizing another television located in the user's kitchen. Traditional methods utilized to accomplish this task required the user to select hardware and software components for transferring the television program and required the user to manually navigate to the point in interest in the output of the television program. Thus, the user could not dynamically redirect the streaming media from one computing device to another computing device.","Accordingly, there is a continuing need for dynamic redirection of streaming media between computing devices.","Dynamic redirection of streaming media between computing devices is described. For example, media may be streamed from a source device to a rendering device locally on a server. During the streaming, a user may move to another client that is communicatively coupled to the server over a network. The streaming media may be redirected in response to the change by the user such that the user does not experience an interruption in the streaming of the media.","In an implementation, a method includes listening at an application programming interface for a notification indicating that a change is to be made in a topology of streaming media software components. When the notification is received, a media engine that is capable of reconfiguring the topology in accordance with the indicated change is notified. At least one of the topology or the reconfigured topology have one of the streaming media software components located on a computing device and another one of the streaming media software components located on another computing device.","In an additional implementation, a method includes listening at an application programming interface for a notification indicating that a change is to be made to a first topology of software components. The first topology of software components is capable of streaming media and has an execution state relative to the streaming media. The first topology is reconfigured in accordance with the indicated change to form a second topology. The second topology is initialized to have an execution state that matches the execution state of the first topology. At least one of the first or the second topology have software components that are distributed on a plurality of computing devices.","The same numbers are used throughout the disclosure and figures to reference like components and features.","Dynamic redirection of streaming media is described. Streaming media may be provided using a topology of software components that may be configured for local rendering of the media on a single computing device. The topology may also be configured for the streaming of the media utilizing a plurality of computing devices. For example, software components may be provided in a distributed topology that includes a server and a client. The distributed topology may be thought of as a software framework or plan for streaming data from the source device to the client over the network using the referenced software components. The distributed topology of software components may be utilized by a wide variety of applications, operating systems, and so on, to cause media to be streamed over a network without having to \u201cknow\u201d the details (such as locations of the source and destination, format conversions, etc.) of how the media was streamed.","A terminal services (TS) application, for instance, may be utilized to allow a user of a personal computer (PC) (which in this instance is the \u201cclient\u201d) to remotely access a desktop of another PC and execute applications on the second PC (which in this instance is the \u201cserver\u201d) as if the user were physically located at the server. To render media using a TS application that utilizes the distributed topology inside a terminal services session, the distributed topology streams the media from the server to the client and renders the media on the client.","Because streaming media may be provided in a variety of local and remote scenarios, it is desirable to enable the user to change from one scenario to another. For example, a scenario may be encountered in which the user disconnects the TS session from the client without shutting down the media application that was being executed on the server. In this instance, the server no longer has a connection to the client and therefore cannot continue to stream media over the network to the client. Therefore, the distributed topology may be reconfigured to a local topology to render the streaming media locally on the server instead of streaming the media to the client over the network. A variety of other scenarios may also be encountered in which streaming media is redirected. For example, a media player application may render media on the server. During the rendering, the user connects to the server via a TS application from the client and in response to the connection the streaming media is redirected from the server to the client. In other words, the streaming media is redirected from a local scenario that involves the execution of a topology of local software components on the server to a remote scenario that involves the execution of a distributed topology of software components that are distributed across a plurality of computing devices.","In another example, the user is located at a client which renders media from the server inside a terminal services session. During the rendering, the user moves to another client and connects to the same server, thereby canceling the prior TS connection between the server and the previous client. In this scenario, the streaming media is redirected from the previous client to the other client, e.g. from using a first distributed topology of software components to a second distributed topology of software components. In a further example, a user is located at a server that renders media locally on the server. During the rendering, the user may add a TS shadow client, so that both the local user as well as another user using the TS shadow client can simultaneously view the desktop of the server and the media being rendered from the server. Therefore, in this example the local topology is reconfigured as a distributed topology that supports both local and remote rendering of the streaming media. Additional examples of redirection in remote and\/or local topologies may be found in relation to . In the following discussion, an exemplary environment is described in relation to  which is then followed by a discussion of exemplary procedures in relation to  which may be implemented using the exemplary environment.","Exemplary Environment",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","102","102","102","102"]},"The computing device  may obtain a variety of media from a variety of media sources. For example, the computing device  may locally store a plurality of media (), where \u201ck\u201d can be any integer from one to \u201cK\u201d. The plurality of media () may include an assortment of audio and video content having various formats, such as WMV, WMA, MPEG 1, MPEG 2, MP3, and so on. Further, the media ()-(K) may be obtained from a variety of sources, such as from an input device, from execution of an application, and so on.","The computing device , for instance, may include a plurality of applications (), where \u201cn\u201d can be any integer from one to \u201cN\u201d. One or more of the plurality of applications () may be executed to provide media, such as documents, spreadsheets, video, audio, and so on. Additionally, one or more of the plurality of applications () may be configured to provide media interaction, such as encoding, editing, and\/or playback of the media ().","The computing device  may also include a plurality of input devices (), . . . , (), . . . , (M). One or more of the plurality of input devices ()-(M) may be configured to provide media for input to the computing device . Input device (), for instance, is illustrated as a microphone that is configured to provide an input of audio data, such as a voice of the user, a song at a concert, and so on. The plurality of input devices ()-(M) may also be configured for interaction by a user to provide inputs that control execution of the plurality of applications (). For example, input device () may be utilized to input voice commands from the user, such as to initiate execution of a particular one of the plurality of applications (), control execution of the plurality of applications (), and so forth. In another example, input device () is illustrated as a keyboard that is configured to provide inputs to control the computing device , such as to adjust the settings of the computing device .","Further, the computing device  may include a plurality of output devices (), . . . , (), . . . , (J). The output devices ()-(J) may be configured to render media () for output to the user. For instance, output device () is illustrated as a speaker for rendering audio data. Output device () is illustrated as a display device, such as a television, that is configured to render audio and\/or video data. Thus, one or more of the plurality of media () may be provided by the input devices ()-(M) and stored locally by the computing device . Although the plurality of input and output devices ()-(M), ()-(J) are illustrated separately, one or more of the input and output devices ()-(M), ()-(J) may be combined into a single device, such as a television having buttons for input, a display device, and a speaker.","The computing device  may also be configured to communicate over a network  to obtain media that is available remotely over the network . The network  is illustrated as the Internet, and may include a variety of other networks, such as an intranet, a wired or wireless telephone network, a broadcast network, and other wide area networks. A remote computing device  is communicatively coupled to the network  such that the remote computing device  may provide media to the computing device . For example, the remote computing device  may include one or more applications and a video camera  that provides media, such as home movies. The remote computing device  may also include an output device to output media, such as the display device  as illustrated. The media obtained by the computing device  from the remote computing device  over the network  may be stored locally with the media (). In other words, media () may include locally stored copies of media obtained from the remote computing device  over the network . In the following discussion, the terms \u201cserver\u201d and \u201cclient\u201d may be utilized to reference a computing device that provides media and a computing device that renders media, respectively. Thus, the terms \u201cserver\u201d and \u201cclient\u201d do not necessarily denote the amount of hardware, software, and\/or network resources of the respective computing devices, but rather are utilized to reference the flow of the streaming media.","As shown in , the computing device  may obtain and store a plurality of media () that may be provided both locally (e.g., through execution of the plurality of applications () and\/or use of the plurality of input device ()-(M)), and remotely from the remote computing device  (e.g., through execution of application and\/or use of input devices). Although the plurality of media () has been described as stored on the computing device , the media () may also be provided in \u201creal-time\u201d. For example, audio data may be streamed from the input device (), which is illustrated as a microphone, without storing the audio data.","The computing device  also includes a distribution manager  and a sink provider . The distribution manager , when executed on the computing device , is responsible for setting up connections between software components that are utilized to stream data from the computing device  to the remote computing device . The sink provider , when executed on the computing device , provides information for constructing software components that render the media stream, further discussion of which may be found in relation to . Additionally, the sink provider  may \u201clisten\u201d for notifications of changes that are to be made to the software components, such as to redirect a stream of media from a first computing device to another computing device, and so on. Further discussion of the distribution of software components to stream media in a distributed environment may be found in relation to . Further discussion of the redirection of a stream of media in a distributed environment may be found starting in relation to .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","202","204","206","206","104","1","104","106","1","106","108","1","108","110","1","100"],"i":["g","g"]},"The application , which may be the same as or different from applications ()-(N) of , interacts with a media engine  to control the media ()-(K). In at least some embodiments, the media engine  serves as a central focal point of the application  that desires to somehow participate in a presentation. A presentation, as used in this document, refers to or describes the handling of media. In the illustrated and described embodiment, a presentation is used to describe the format of the data on which the media engine  is to perform an operation. Thus, a presentation can result in visually and\/or audibly presenting media, such as a multimedia presentation in which both audio and accompanying video is presented to user within a window rendered on a display device, such as output device () of  that is illustrated as a display device that may be associated with a desktop PC. A presentation can also result in writing media content to a computer-readable medium such as a disk file. Thus, a presentation is not limited to scenarios in which multimedia content is rendered on a computer. In some embodiments, operations such as decoding, encoding and various transforms (such as transitions, effects and the like), can take place as a result of a presentation.","In an embodiment, the media foundation  exposes one or more application program interfaces that can be called by the application  to interact with the media (). For example, the media foundation  may be thought of as existing at an \u201cinfrastructure\u201d level of software that is executed on the computing device  of . In other words, the media foundation  is a software layer used by the application  to interact with the media (). The media foundation  may be utilized to control a number of aspects of the media (), such as output, rendering, storage, and so on. Thus, the media foundation  may be utilized such that each application  does not have to implement separate code for each type of media () that may be used in the system . In this way, the media foundation  provides a set of reusable software components to do media specific tasks.","In an implementation, the media foundation  may be included as a part of an operating system to provide playback of the media () such that applications that interact with the operating system may control playback of the media () without \u201cknowing\u201d the particular details of the media formats. In another implementation, the media foundation  may be utilized by the operating system such that the operating system may also control playback of the media () without \u201cknowing\u201d the particular details of the media formats. Thus, the media foundation  may act as an infrastructure layer between the media () and the application , operating system, and so on.","The media foundation  may utilize several components among which include the distribution manager , a media source , a media processor , a media session , the media engine , a source resolver , one or more transforms , one or more media sinks , , a destination representation , and so on. One advantage of various illustrated and described embodiments is that the system  is a pluggable model in the sense that a variety of different kinds of components can be utilized in connection with the systems described herein.","Also included as a part of system  is the destination representation , which corresponds to the sink provider  of . In at least one embodiment, the destination representation  is a software object that defines where a presentation is to be presented (e.g. a window, disk file, and the like) and what happens to the presentation. That is, the destination representation  may provide information used to create the one or more of the media sinks ,  into which data flows. Therefore, the terms destination representation  and sink provider  may be utilized in different instances in the following discussion to reflect the functionality of representing the destination for the media stream and providing information to create a media sink, respectively.","The destination representation  may abstract a destination for streaming media that is located on another computing device, e.g. remote computing device  of , or on the same computing device. Although the destination representation  is illustrated separately from the media foundation  to depict that the application  may communicate directly with the destination representation  (i.e., the destination representation may be exposed to the application ), the destination representation  may be considered a software component of the media foundation .","The media source  is utilized to abstract a provider of media. The media source , for instance, may be configured to read a particular type of media from a particular source. For example, one type of media source might capture video from the outside world (a camera), and another might capture audio (a microphone). Alternately or additionally, the media source  may read a compressed data stream from disk and separate the data stream into its compressed video and compressed audio components. Yet another media source  might obtain data from the network  of . Thus, the media source  may be utilized to provide a consistent interface to acquire media.","The media source  provides one or more media presentation  objects (media presentation). The media presentation  abstracts a description of a related set of media streams. For example, the media presentation  may provide a paired audio and video stream for a movie. Additionally, the media presentation  may describe the configuration of the media source  at a given point in time. The media presentation , for instance, may contain information about the media source  including descriptions of the available streams of the media source  and their media types, e.g. audio, video, MPEG, and so on.","The media source  may also provide a media stream  object (media stream) which may represent a single stream from the media source  which can be accessed by the application , i.e. exposed to the application . The media stream  thus allows the application  to retrieve samples of the media (). In an implementation, the media stream  is configured to provide a single media type. A media source can provide more than one media stream. For example, a file can provide both audio and video data. The media source for this file may therefore provide two streams, one for audio and the other for video. In the media foundation , the media source  is defined as a software component which outputs samples for a presentation.","The media processor  manages data flow in a topology . The topology  defines how data flows through various components for a given presentation. A \u201cfull\u201d topology includes each of the components, e.g. software modules, used to manipulate the data such that the data flows with the correct format conversions between different components. When a topology is created, the user and\/or application  might choose to create it partially. This partial topology is not sufficient, by itself, to provide a final presentation. Therefore, a component called the topology loader  may take the partial topology and convert it into a full topology by adding the appropriate data conversion transforms between the components in the partial topology.","In the topology , for example, data generally originates at the media source , flows through one or more transforms , and proceeds into one or more media sinks , . Transforms  can include any suitable data handling components that are typically used in presentations. Such components can include those that uncompress compressed data and\/or operate on data in some way, such as by imparting an effect to the data, as will be appreciated by the skilled artisan. For example, for video data, transforms can include those that affect brightness, color conversion, and resizing. For audio data, transforms can include those that affect reverberation and re-sampling. Additionally, decoding and encoding can be considered as transforms.","Media sinks ,  are typically associated with a particular type of media content. Thus, audio content might have an associated audio sink such as an audio renderer. Likewise, video content might have an associated video sink such as a video renderer. Additional media sinks can send data to such things as computer-readable media, e.g. a disk file and the like, stream the data over the network, such as broadcasting a radio program, and so on.","The media session  is a component which may schedule multiple presentations. Therefore, the media processor  may be used to drive a given presentation, and the media session  utilized to schedule multiple presentations. The media session , for instance, may change topologies that are rendered by the media processor . For example, the media session  may change from a first topology that is rendered on the media processor  to a second topology such that there is no gap between the renderings of samples from the consecutive presentations that are described by the respective topologies. Thus, the media session  may provide a seamless user experience as the playback of the media moves from one presentation to another.","The source resolver  component may be utilized to create a media source  from URLs and\/or byte stream objects. The source resolver  may provide both synchronous and asynchronous ways of creating the media source  without requiring prior knowledge about the form of data produced by the specified resource.","In at least one embodiment, the media foundation  is utilized to abstract away the specific details of the existence of and interactions between various components of the media foundation . That is, in some embodiments, the components that are seen to reside inside the media foundation  are not visible, in a programmatic sense, to the application . This permits the media foundation  to execute so-called \u201cblack box\u201d sessions. For example, the media engine  can interact with the media session  by providing the media session certain data, such as information associated with the media (e.g. a URL) and the destination representation , and can forward the application's  commands (e.g. open, start, stop and the like) to the media session . The media session  then takes the provided information and creates an appropriate presentation using the appropriate destination. Thus, the media foundation  may expose a plurality of software components that provide media functionality over an application programming interface for use by the application .","To create the topology , the destination representation  is created for the presentation. As previously described, the destination representation  represents the destination for the media stream and may be utilized to create media sinks to sink the media stream. The destination representation  may be created in a variety of ways, such as passed by the application  to the media engine , created by the media engine  itself, and so forth. An open call is then received at the media engine  from the application  to open one or more media for streaming.","If needed, the media engine  resolves the media source . Source resolution is the process by which the media engine  causes the appropriate media source  (e.g., one that can read the particular type of data that is to be read) to be created. The application , for instance, may provide a URL that is utilized by the media engine  to create a media source . In another example, the application  creates the media source  and provides it to the media engine . Next, the media session  is created using the media source . Multiple media sessions  may be created in the event there are multiple media sources .","If a topology  has not been specified by the application , for instance, then the media engine  performs a partial topology resolution using either the destination representation  provided by the application , or if no destination was provided, using an implementation of the destination representation  designed for playback through default outputs. A full topology is then resolved from the partial topology by specifying software components that, when executed, provide the media stream.","If the application  has specified a topology, then the topology  for the presentation is activated and a \u201cmedia opened\u201d event is sent by the media engine  to the application . The \u201cmedia opened\u201d event notifies the application  that it can now control the progress of the presentation by, for example, calling methods on the media engine .","The topology  may be provided in a variety of different environments, such as in a local environment provided by a single computing device and in a distributed environment provided by a plurality of computing devices. The distribution manager  is utilized to set up connections between the software components utilized to communicate the media between the computing devices, further discussion of which may be found in relation to the following figure.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 3","FIG. 2"],"b":["300","208"]},"In the Terminal Services (TS) case, the user is typically physically sitting at the console of a TS client, while running the application from a TS server machine. Media that is to be played in this example is sourced from the TS server, but is sent over a network to the TS client for rendering.","In accordance with the described embodiment, the media engine is configured to send compressed data over the network, in distributed scenarios, and the work of decompression and rendering is conducted entirely on the machine where rendering is to take place, in other words at the TS client itself. This allows high-quality content to be played remotely over any particular network connection. It also ensures that the media content presented to the user goes through the same components (e.g., decoders, renderers, and so on), as is does in the regular local playback scenario.","An exemplary scenario in which remote presentations can be rendered is shown in . The system  includes a server  and one or more clients an exemplary one of which is shown at . Server  and client  are communicatively linked via a network  as indicated. The network  can include any suitable network such as, for example, the Internet. In this particular described embodiment, some of the components are the same as or similar to components discussed above. Accordingly, for the sake of brevity, some of the components are not described again.","In this example, an application  on the server  creates a destination representation  as previously described. The application , for instance, may call OpenURL on a media engine  on the server  and provide the destination representation . The media engine  creates a partial topology, as previously described, and asks the destination representation  for media sinks. The destination representation  then queries Terminal Services and finds out that the presentation is to take place in connection with a distributed scenario. Information is returned that indicates that the media sinks ,  are to be located on a remote machine, in this instance across the network  on the client .","The media engine  gives the partial topology to a distribution manager  to determine whether distribution is needed, and if so, to distribute the topology between the local and remote machines. For each media stream that is to be remoted, the distribution manager  performs a number of tasks. First, the distribution manager  creates network transmitters ,  on the local topology which will send the compressed media samples over the network  to the client  where the samples will be rendered. As noted, a network transmitter ,  may be created for each stream as shown in . It is to be appreciated that the network transmitters ,  are also media sinks. Thus, local software components on the server  may treat the transmitters as regular sinks and will not need to do anything special with regard to being in a distributed scenario.","Next, the distribution manager  causes network receivers to be placed on the remote topology on the client . Exemplary network receivers are shown at ,  respectively. The network receivers ,  receive the compressed media samples from the local transmitters ,  on the server , and send them downstream for rendering by the media sinks , . It is to be appreciated and understood that the network receivers ,  may be treated as media sources such that the software components on the client  treats the network receivers ,  as regular media sources without needing to know that the pipeline is running in a distributed scenario. Thus, for each remote computing device involved, e.g. the client , the distribution manager  creates a media engine  on the remote machine and gives it the network receivers ,  that the media engine  utilizes to pull data that is to be rendered. At this point, the distributed topology is set up, and all machines are ready to start presenting media.","The application  on the server  can then call start on the media engine . The media engine  then starts its local media pipeline, e.g. software components of the topology located on the server , and calls start on the distribution manager  which, in turn, calls start on each of the media engines (e.g., media engines , ) on both the sever  and client . This causes the media engine  on the client  to start its own media pipeline(s). Once all media pipelines are running, media is streamed from the media source on the server  through the network transmitters ,  and receivers ,  to the eventual audio and video renderers on the client . Thus, the application  does not have to behave differently between the distributed and local scenarios. The same can be said of the media source.","Exemplary Procedures","The following discussion describes redirection of streaming media that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware, firmware, or software, or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 4","b":["400","402","404","406","408","406","408","410","412","412"]},"In the illustrated implementation of , the distributed topology includes a media engine  that is executed on the server  and a media engine  that is executed on the client . The media engine  on the server  is utilized to create and\/or control the software components of the topology that are on the server , such as a media source , a transform , a transmitter , and so on. Likewise, the media engine  located on the client  may be utilized to control the software components that are located on the client , such as a receiver , a transform , and a media sink . The media engine  located on the server  may communicate with the media engine  located on the client  to control the overall topology.","As previously described, the transmitter  may be viewed by other software components that are located on the server  as a media sink such that the other software components are not \u201caware\u201d that the media  is being streamed over the network . Similarly, the receiver  may be viewed by other software components located on the client  as a media source such that the other software components are not aware that the media  was streamed over the network  to the client . Thus, the transmitter  and receiver  may provide network capabilities to local software components that would not otherwise support the network capabilities.","At block , when the indication is received by the sink provider , the sink provider  communicates an event  to the media engine  that indicates that a change is to be made in the topology. A variety of changes may be made to the topology, such as to change from a distributed topology to a local topology, to include an additional media sink, to remove an existing media sink, to render the topology on a different computing device, and so on. Further discussion and exemplary changes to the topology may be found in relation to .","In the illustrated implementation of , the change is to redirect the streaming media  from the client  to another client  that is communicatively coupled to the server  over the network . Therefore, at block , the media engine  resolves a new distributed topology of software components that are capable of streaming the media  from the server  to the other client . The distribution manager , when executed on the server , sets up connections between software components that are utilized to stream data from the server  to the other client . The distribution manager , for instance, may be executed to setup a remote media engine  on the other client , which may then be utilized to create the transform , media sink , and so on, to resolve the distributed topology as previously described in relation to . Therefore, the distribution manager , although illustrated separately, may be thought of as a part of the media engine  that is utilized to resolve and control a distributed topology of software components.","The distribution manager  may also be executed to initialize the reconfigured topology to have an execution state that matches the execution state of the topology at block  of when the indication was received. The execution state is relative to the streaming of the media  that was performed by the software components. A variety of characteristics may be utilized to describe the execution state relative to the streaming of the media , such as a pause, a stop, fast forward, rewind, slow motion, position in the streaming of the media (e.g., at point \u201cX\u201d in a media stream having a duration \u201cy\u201d when output), and so on.","The distribution manager , for instance, may monitor the state of the software components during execution. When the topology is reconfigured, the distribution manger  may then be utilized to initialize the remote media engine  to an execution state that matches the monitored execution state at block . For example, the distribution manger  may cause the remote media engine  to be in a \u201cstarted\u201d execution state (i.e., ready to handle the streaming media) because the topology was reconfigured while media was being streamed. Therefore, the reconfigured topology may continue the streaming of the media  so that the interruption to the user's viewing experience is minimized. Further discussion of initialization of a reconfigured topology may be found in relation to the following implementation.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 5","FIG. 2"],"b":["500","502","204"]},"The sink provider, for instance, can specify not only the media sink(s) that samples from a particular media stream should be sent to, but also on which machine (i.e., client) the media sink(s) are located. For example, the sink provider may be aware of terminal service (TS) sessions as previously described in relation to . When a client is connected to a server via a TS session, the sink provider executing on the server may specify that media should be streamed directly to media sinks on the client.","At block , the partial topology is resolved to a full topology that is capable of streaming media. For example, as previously described in relation to , software components, such as transforms, transmitters, receivers, and so on, may be provided by the media engine such that media may be streamed and rendered. The media steams may be provided locally on a single computing device or distributed across a plurality of computing devices. For instance, at block  the distribution manager examines the machine names for software components (e.g., the media sink described by the sink provider and the media source) to determine if the topology is to be distributed across a plurality of computing devices. At block , transmitter\/receiver pairs are created that, when executed, are capable of streaming media across a network. Once the partial topology is resolved (i.e., a full topology is created), media is streamed from the server to the client (block ).","At block , the sink provider registers for notifications that indicate that a change is to be made to the topology. For instance, the sink provider may register with an operating system to receive notifications which indicate a change in where media is to be streamed, and so on. Therefore, at decision block , the sink provider determines whether a notification has been received from the operating system which indicates that a change is to be made to the topology. The sink provider may also be aware of TS session changes, so when a client connects to a server via a TS or disconnects from a TS, the sink provider is aware of the change.","The sink provider may be notified of the change in a variety of ways. For example, the sink provider may be notified of TS session changes via a notification manager. The notification manager is a software component that any other software component of the media foundation can use to be notified of TS session changes as the changes happen. The notification manager listens to TS session change events from a number of named events that are defined in a registry, which TS will signal whenever there is a change in the current session.","If a notification has been received from the TS application, the operating system, and so on (block ), the sink provider indicates the change by firing a \u201cdestination changed\u201d event to the media engine (block ). In response to the event, the media engine queries each sink provider for updated information regarding its respective media sinks (block ), and the topology is reconfigured accordingly (block ). The destination changed event can also be used to handle cases where the user shifts from one TS client to another, when a user is added or removed from a list of users connected to a TS session from a client (local or remote), and so on, further discussion of which may be found in relation to . For example, although a change in destination was described in relation to , a variety of changes to the topology may be encountered, such as a change in a media source, a change to transforms, and so on.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 6","b":["600","602","604","606","608","602","604","602","604","608","608","602","604","610","602","612","604","610","602","614","616","604","618","620","622"]},"If the user at the client  terminates the TS session, the streaming media may be redirected for local rendering on the server . For instance, the sink provider  may receive a notification that the TS session has been terminated and that the streaming media is to be rendered locally. In response to the notification, the sink provider  communicates a \u201cdestination changed\u201d event to the media engine . The media engine , in response to the event, queries the sink provider  to learn the new destination for the streaming media, which in this case is local on the server . Therefore, the sink provider  provides the media engine  with the information needed to construct the media sink  locally on the server . Additionally, the distribution manager  may be utilized to initiate the new local topology to the execution state of the previous distributed topology such that the streaming media may be output as before.","In another example, the distribution manager  may also monitor a local topology such that a distributed topology reconfigured form the local topology may be initiated to have an execution state the matches the execution state of the local topology. For instance, the distribution manager  may be aware of the execution state of the local topology even when media is not being remoted (e.g., the media is being streamed locally for playback using the media engine , the media source  and a media sink ). This information allows the distribution manager  to initialize the remote media engine (e.g., media engine ) to the matching execution state once it is created. For instance, if a user is streaming media locally for playback at the server  and during playback switches to a TS connection, the distribution manager  will not only create the media engine  on the client , but also tell the media engine  that it needs to be in a \u201cstarted\u201d execution state because the previous topology was streaming media when the session change took place.","In a further example, the user may switch from the client  to another client  that is communicatively coupled to the server  over the network . The user, for instance, may utilize the client  that communicates with the server  in a TS session as described in the previous example. The user may then move to the other client  and initiate a new TS session with the media application  and supply a new destination representation for the streaming media through the media application  (e.g., by supplying data to the sink provider that specifies the new destination for the streaming media). The sink provider sends a \u201cdestination changed\u201d event to the media engine  which causes the media engine  to query the sink provider to determine which change is to be made to the topology. In this example, the change is to redirect the streaming data to the other client . Therefore, the media engine , through the distribution manager , creates the media engine  on the client . The media engine  creates software components that are local to the other client  and that enable the other client  to render the streaming media, such as by creating a receiver , a transform , a media sink , and so on. As before, the distribution manager  may also be utilized to initiate the new distributed topology that includes the client  to have an execution state that matches the execution state of the previous distributed topology.","Although the previous examples described the redirection of streaming media from one destination to another destination, other software components of the topology may also be added\/changed to handle streaming media, such as to add\/remove transforms, add\/remove media sources, and so on.","The systems and architecture described herein allow for dynamic changes in sourcing, handing, and\/or rendering of media between local and remote machines. Additionally, dynamic changes may be made in the rendering of some media stream types (e.g. audio) from one machine to another while leaving the rendering of other media stream types (e.g. video) unchanged. Finally, the systems and architecture allow dynamic adding and removing of machines, such as to allow users on multiple machines (local and remote) to view the same media at the same time.","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
