---
title: Method and system for simulation of mixed-language circuit designs
abstract: A method for simulation of mixed-language circuit designs is disclosed. In one embodiment, an object-oriented language module is natively instantiated within a hardware description language based design. In another embodiment, a hardware description language module is natively instantiated within an object-oriented language based design. A system for simulation of mixed-language circuit designs is also disclosed. In one embodiment, a simulator is configured to natively manipulate an object-oriented language module within a hardware description language based design. In another embodiment, a simulator is configured to natively manipulate a hardware description language module within an object-oriented language based design.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07424703&OS=07424703&RS=07424703
owner: Cadence Design Systems, Inc.
number: 07424703
owner_city: San Jose
owner_country: US
publication_date: 20030401
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND AND SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention is related to simulation of circuit designs. More particularly, the present invention is directed to a method and system for simulation of mixed-language circuit designs.","Circuits have become so complex that it is no longer possible to simply design and build a circuit and expect it to work correctly the first time. Designers use various types of programming languages, such as hardware description languages (e.g., Verilog and VHDL) and object-oriented languages (e.g., C\/C++\/SystemC and Java), to model new circuit designs by hierarchically defining functional components of a circuit.","The model is then simulated on a computer to see if the design will work as intended. Any problems can be corrected in the model, and the correction verified in simulation. Simulation dynamically verifies a design by monitoring behaviors of the model with respect to simulation test benches.","Designs are often described using the concept of modules. For example, a functional component in a circuit may be described using one or more modules. A module is a syntactic construct in Verilog that is used to define a block. However, the term module is also used loosely by those skilled in the art to designate analogous constructs in other programming languages even though different concepts may be implied. For example, the VHDL equivalent of a module is an architecture and the C++ equivalent of a module is a class. Since a module is generally parameterized, it may be instantiated one or more times in a circuit design. In addition, modules may instantiate other modules.","Each type of programming language has its strengths and weaknesses when used to model an electronic circuit. For example, hardware description languages are excellent solutions for designs that are bound at the register-transfer level and have no software content. In addition, there are many tools available for hardware description language designs and a large number of circuit blocks available for re-use.","However, hardware description languages are not well-suited for testbench generation and testing. Additionally, hardware description languages are not designed with the intent of writing system models. Thus, hardware description languages are not a good fit for hardware\/software co-design or for modeling an entire system that is composed of both hardware and software.","Object-oriented languages, on the other hand, have greater expressive power, e.g., classes, inheritance, etc., and are not aimed only at hardware implementation. A system-on-chip (SoC) design may require a number of \u201cviews\u201d, such as a functional view, an architectural view, a verification view, a software implementation view, and a hardware implementation view. Object-oriented languages work for all of these views and are already being used for architectural definitions. Moreover, as the complexity and size of circuit designs increase, designers will likely move towards describing their designs at higher and higher levels of abstraction in order to enable faster simulation and hardware\/software co-description and co-simulation.","Unfortunately, due to the fact that the use of object-oriented languages in modeling of circuit designs is still in its early stages, tool support for object-oriented language designs is weak. Additionally, more circuit designers are familiar with hardware description languages than with object-oriented languages.","Given the advantages and disadvantages of each type of programming language and the current trend of re-using design blocks created in earlier circuit designs to increase design speed and efficiency, circuit designs may comprise components written in both hardware description and object-oriented languages. Thus, there is a need for a method and system that would allow hardware description languages and object-oriented languages to be seamlessly integrated in one design.","Currently, connectivity between hardware description languages and object-oriented languages is provided via a basic application programming interface (API), in which standard call interfaces are used by programmers to allow a hardware description language based design to interact with an object-oriented language component. One drawback of this approach is that a designer is required to specifically know and recognize the proper API calls that must be made to implement connectivity. Other drawbacks of the API approach include: simulation speed limitations, difficulty in debugging, and no allowance for free mixing and replacement of object-oriented language and hardware description language design blocks.","In addition, the API approach does not provide seamless integration of hardware description language (HDL) and object-oriented language (OOL) in one design. Specifically, designers in a hardware description language modeling environment would not have the same level of access to OOL modules as HDL modules. For example, a designer would not be able to browse the source code for the object-oriented language block, step through it, or set break-points in it. An object-oriented module in an HDL modeling environment is essentially a black box, i.e., a designer is not able to look into the box. The same is true the other way around, i.e., an HDL module in an object-oriented language modeling environment would be unobservable from the outside.","The present invention provides a method and system for simulation of mixed-language circuit designs. In one embodiment, a simulator is configured to natively manipulate an object-oriented language module within a hardware description language based design. In another embodiment, a simulator is configured to natively manipulate a hardware description language module within an object-oriented language based design. In a further embodiment, an object-oriented language module is natively instantiated within a hardware description language based design. In a still further embodiment, a hardware description language module is natively instantiated within an object-oriented language based design.","Further details of aspects, objects, and advantages of the invention are described below in the detailed description, drawings, and claims. Both the foregoing general description and the following detailed description are exemplary and explanatory, and are not intended to be limiting as to the scope of the invention.","More and more designers are using both hardware description and object-oriented languages to model their designs in order to utilize the strengths of each type of programming language. As a result, there is a need for a method and system that would allow hardware description languages and object-oriented languages to be seamlessly integrated in one design.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["102","104","106"]},"module B;\n\n","endmodule","module Top;","B b; (* this is the instantiation of an instance of module B (named b) in module Top *)","endmodule","In , a process flow of another embodiment of a method for simulation of mixed-language circuit designs is shown. A hardware description language module is developed (). An object-oriented language based design is created (). The hardware description language module is natively instantiated within the object-oriented language based design ().","Referring to , a method of simulating mixed-language circuit designs according to one embodiment of the invention is illustrated. An object-oriented language module is developed (). A hardware description language based design is created (). The object-oriented language module is instantiated within the hardware description language based design using hardware description language syntax (). The following is an example of a VHDL module instantiating a SystemC module.","-- SystemC module","class model : public sc_module {","public:\n\n","};","-- VHDL shell for SystemC module","architecture SystemC of model is","-- The following line indicates that the body of this architecture is described elsewhere as","-- a SystemC module","attribute foreign of SystemC : architecture is \u201cSystemC\u201d;","begin","end;","-- VHDL module instantiating SystemC module using VHDL shell","entity top is end;","architecture T of top is\n\n","begin\n\n","end;","entity model is\n\n","end;",{"@attributes":{"id":"p-0053","num":"0071"},"figref":"FIG. 4","b":["402","404","406"]},"\/* Verilog module *\/","module vchild(in, out);\n\n","endmodule","\/* SystemC shell module for Verilog module *\/","class vchild : public ncsc foreign module {","public:\n\n","}","\/* SystemC module instantiates Verilog module using SystemC shell *\/","class sctop : public sc_module {","public:\n\n","protected:\n\n","};","In , one method for simulation of mixed-language circuit designs is shown. In the embodiment, an object-oriented language module is developed (). A hardware description language based design is created (). The object-oriented language module is natively instantiated within the hardware description language based design (). Design information is collected from source code for the object-oriented language module (). The collected design information may be used for shell generation or source browsing. Source browsing is the ability to hierarchically navigate a design in an editor. For example, source browsing may include double-clicking on a module name in the editor to go to the definition of that module or hovering a cursor over the name of a port to find out the current value of that port.","A hardware description language shell is generated for the object-oriented language module based on the collected design information (). A shell is a wrapper surrounding a module instantiated within another module that is written in the programming language of the parent module. It is a dummy module that provides an interface between the parent block and the child block. For example, a shell may define input and output ports of a child module. The shell is essentially a placeholder for the child block that is not described in the same programming language as the parent block. Thus, the object-oriented language block appears to be just another hardware description language block.","Source code for the object-oriented language module is compiled into object form (). The compiled source code for the object-oriented language module is then linked into a simulator and an elaborator (). Linking is a technique for including the object-oriented language module in the simulator and the elaborator so that it can be called during simulation and elaboration.","The object-oriented language module may be statically linked into the simulator and\/or elaborator by linking the compiled source code for the object-oriented language module with the simulation and\/or elaboration executables to generate new executable(s) that contain the statically linked object-oriented language module. Alternatively, the object-oriented language module may be dynamically linked into the simulator and\/or elaborator by building a shared library from the compiled source code for the object-oriented language module, which can then be loaded by the simulator and\/or elaborator during simulation and\/or elaboration. The shared library may contain one or more object files. Dynamic linking is faster than static linking. In addition, simulation and\/or elaboration executables need not be rebuilt to contain the object-oriented language module. However, static linking may be more reliable for debugging on certain platforms.","Source code for the hardware description language based design is compiled (). Compiling the source code for the hardware description language based design produces an intermediate representation of the hardware description language based design. The design is elaborated into a snapshot, i.e., an instantiated design hierarchy, using the intermediate representation of the hardware description language based design (). Elaboration of a design may result in the building of a design hierarchy based on the instantiation and configuration information in the design, the establishment of signal connectivity, and the computation of initial values for all of the objects in the design.","In one embodiment, the intermediate representation of the hardware description language based design is traversed during elaboration. When a module instance is a hardware description language module, the normal hardware description language elaboration proceeds. Conversely, when a module instance is a hardware description language shell for an object-oriented language module, a constructor is called for the object-oriented language module to connect signals from the hardware description language module to signals of the object-oriented language module. A constructor represents functions that constructs an object of a particular class. After module connectivity is established, a separate traversal of the intermediate representation of the hardware description language based design is made to assign initial values to all of the signals, i.e., wires, in the hardware description language based design.",{"@attributes":{"id":"p-0072","num":"0108"},"figref":["FIG. 6","FIG. 6","FIG. 6"],"b":["600","1","602","1","604","1","606","2","608","1","606","1","614","1","616","1","604","2","608","1","604","1","612","2","608","2","620","610","1","612","618","2","620","618","620","1","604","1","612","2","608","2","620"]},"module top;\n\n","end module","module A;\n\n","endmodule","module B;\n\n","endmodule","module C;\n\n","endmodule","module E;","endmodule","module F;","endmodule","module D;\n\n","endmodule","The snapshot is simulated (). In one embodiment, a simulator is invoked to simulate the design by loading the snapshot generated as well as other objects that are referenced by the snapshot. In addition, the simulator may also load source files, script files, and other data files as needed.","Referring to , another method for simulation of mixed-language circuit designs is illustrated. A hardware description language module is developed (). An object-oriented language based design is created (). The hardware description language module is natively instantiated within the object-oriented language based design (). Design information is collected from source code for the hardware description language module (). An object-oriented language shell is generated for the hardware description language module based on the collected design information (). Source code for the hardware description language module is compiled (). Source code for the object-oriented language based design is compiled (). The compiled source code for the object-oriented language based design is linked into a simulator and an elaborator (). The design is elaborated into a snapshot () and the snapshot is simulated ().",{"@attributes":{"id":"p-0089","num":"0133"},"figref":"FIG. 8","b":["800","808","810","812","814","822","824","828"]},"In , simulator  is configured to natively manipulate an object-oriented language module within a hardware description language based design. Tool  is configured to collect design information  from source code  for the object-oriented language module. For example, tool  may parse source code  in order to collect design information . Generator  is configured to generate a hardware description language shell  based on the collected design information . Object-oriented language compiler  is configured to compile source code  for the object-oriented language module into object form. In one embodiment, tool  is also configured to invoke object-oriented language compiler  to compile object-oriented language source code .","Linker  is configured to link compiled object-oriented language source code  into simulator . Linker  may also be configured to link compiled object-oriented language source code  into elaborator . In one embodiment, object-oriented language compiler  is configured to invoke linker  to link compiled object-oriented language source code  into simulator  and\/or elaborator .","Compiled object-oriented language source code  may be dynamically or statically linked into simulator  and elaborator . With dynamic linking, linker  may build a shared library from compiled object-oriented language source code . The shared library can then be loaded by simulator  and\/or elaborator  during simulation and\/or elaboration. For static linking, simulator  executables may be rebuilt by linker  to link compiled object-oriented language source code  into simulator . In addition, elaborator  executables may also be rebuilt by linker  to statically link compiled object-oriented language source code  into elaborator .","Hardware description language compiler  is configured to compile source code  for the hardware description language based design. Hardware description language compiler  may analyze hardware description language source code , perform syntactic checking on hardware description language design units (e.g., modules, macromodules, or user defined primitives (UDPs)) in source code , and generate an intermediate representation for each hardware description language design unit.","Elaborator  is configured to elaborate the design into a snapshot . A design hierarchy may be constructed by elaborator  based on the instantiation and configuration information in the design. Elaborator  may also establish signal connectivity and compute initial values for all objects in the design. Snapshot  contains simulation data at simulation time zero and is the input for simulator . Simulator  is configured to simulate snapshot .","Referring to , a system  for simulation of mixed-language circuit designs is depicted. System  comprises a hardware description language compiler , an object-oriented language compiler , a generator , an elaborator , a linker , and a simulator . Simulator  is configured to natively manipulate a hardware description language module within an object-oriented language based design.","Hardware description language compiler  is configured to compile source code  for the hardware description language module. Hardware description language compiler  is also configured to collect design information from hardware description language source code . In another embodiment, a separate tool may be used to collect design information  from hardware description language source code  instead. Generator  is configured to generate an object-oriented language shell  based on the collected design information .","Object-oriented language compiler  is configured to compile source code  for the object-oriented language based design into object form. Linker  is configured to link compiled object-oriented language source code  into simulator . In one embodiment, linker  is also configured to link compiled object-oriented language source code  into elaborator . Elaborator  is configured to elaborate the design into a snapshot . Simulator  is configured to simulate snapshot .","System Architecture Overview",{"@attributes":{"id":"p-0098","num":"0142"},"figref":"FIG. 10","b":["1000","1000","1002","1004","1006","1008","1010","1012","1014","1016","1018"]},"According to one embodiment of the invention, computer system  performs specific operations by processor  executing one or more sequences of one or more instructions contained in system memory . Such instructions may be read into system memory  from another computer readable medium, such as static storage device  or disk drive . In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention.","The term \u201ccomputer readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as disk drive . Volatile media includes dynamic memory, such as system memory . Transmission media includes coaxial cables, copper wire, and fiber optics, including wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.","Common forms of computer readable media includes, for example, floppy disk, flexible disk, hard disk, magnetic tape, any other magnetic medium, CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, RAM, PROM, EPROM, FLASH-EPROM, any other memory chip or cartridge, carrier wave, or any other medium from which a computer can read.","In an embodiment of the invention, execution of the sequences of instructions to practice the invention is performed by a single computer system . According to other embodiments of the invention, two or more computer systems  coupled by communication link  (e.g., LAN, PTSN, or wireless network) may perform the sequence of instructions required to practice the invention in coordination with one another.","Computer system  may transmit and receive messages, data, and instructions, including program, i.e., application code, through communication link  and communication interface . Received program code may be executed by processor  as it is received, and\/or stored in disk drive , or other non-volatile storage for later execution.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. For example, the above-described process flows are described with reference to a particular ordering of process actions. However, the ordering of many of the described process actions may be changed without affecting the scope or operation of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings are included to provide a further understanding of the invention and, together with the Detailed Description, serve to explain the principles of the invention.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
