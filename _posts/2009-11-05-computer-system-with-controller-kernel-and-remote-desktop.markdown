---
title: Computer system with controller kernel and remote desktop
abstract: Remote desktop software for use with guest operating systems that run on a controller kernel. Also, remote desktop software that can be used to remotely view and/or manipulate multiple containerized guest operating systems that run on a single computer. The multiple, containerized operating systems preferably run on a controller kernel. Alternatively, the multiple containerized operating system may be controlled to run on the single computer by other software, such as a hypervisor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08370856&OS=08370856&RS=08370856
owner: FH Innovations, Ltd
number: 08370856
owner_city: Markham, Ontario
owner_country: CA
publication_date: 20091105
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","DEFINITIONS"],"p":["The present application claims priority to U.S. provisional patent application No. 61\/111,608, filed on 5 Nov. 2008; all of the foregoing patent-related document(s) are hereby incorporated by reference herein in their respective entirety(ies).","1. Field of the Invention","The present invention relates to a computer system and more particularly to a computer system including a computer set (see DEFINITIONS section) that provides operating system type capabilities for multiple terminals (see DEFINITIONS section).","2. Description of the Related Art","In some conventional computer systems, multiple operating systems run on a single set of processing hardware of a single computer. For example, in some conventional computer systems, a piece of software called a \u201chypervisor\u201d controls the running of multiple operating systems, which operating systems are sometimes called \u201cvirtual machines.\u201d In some conventional hypervisor-and-virtual-machine computer systems, the virtual machines are \u201ccontainerized\u201d in that each virtual machine runs substantially independently of the other virtual machine(s) that are run by the common hypervisor. The hypervisor effects its control of the virtual machines by \u201cvirtualizing,\u201d or, in other words, emulating the actual, physical resources of the hardware upon which the hypervisor runs. By virtualizing the actual resources, the hypervisor can actually communicate with various resources of the computer (see DEFINITIONS section), on behalf of each containerized virtual machine, in series, which is to say, in some sort of time division multiplexed manner. At the same time, because the hypervisor communicates with the various, containerized virtual machines through code emulating virtualized hardware, each virtualized machines has no way of detecting the sharing of computer resources. Because of this, the virtualized machine operating systems do not need to be equipped to deal with the fact that they are sharing computer resources. This means that standard, pre-existing operating systems, such as WINDOWS operating systems or LINUX operating systems, may be used for each virtual machine operating system. (\u201cWINDOWS\u201d is used as a trademark of the Microsoft Corporation and may be subject to commonlaw and\/or trademark-registration-based trademark rights in various jurisdictions throughout the world.)","Because hypervisors virtualize computer resources, they tend to require a lot of code and processing power in order to fully and accurately emulate the specific resources that they emulate. Furthermore, a given piece of hypervisor software must include code to emulate all of the resources of the computer system upon which it runs. If the hypervisor includes virtualization code for resources that its computer system does not have, then that is an inefficiency because those code portions cannot be allowed to be used by the virtual machines running on the hypervisor. Of more concern is the fact that the hypervisor might be missing code to run certain resources. In fact, if there is too bad of a mismatch between the resources that the hypervisor has code portions to emulate, and the actual resources of the computer system upon which it runs, then the computer system will be inoperable. In this sense, hypervisors tend to be either inefficient (that is, lots of extra code portions), or else inflexible and unrobust (that is, unable to accommodate a wide variety of computer systems having different combinations of resources).","The named inventor of the present application has developed a different kind of computer system for running multiple operating systems and\/or multiple, containerized operating systems on a single computer. According to this system, the multiple operating systems communicate more directly with the actual resources of the computer system under the control of a module (for example, a piece of software) called a \u201ccontroller kernel.\u201d The concept of the controller kernel and various preferred embodiments of the computer systems utilizing such a controller kernel are more fully described in the following patent application documents: (i) Ser. No. 12\/234,131 (filed Sep. 19, 2008 and published as publication number 2009-0083829 A1 on Mar. 26, 2009); (ii) Ser. No. 12\/234,158 (filed Sep. 19, 2008 and published as publication number 2009-0083630 A1 on Mar. 26, 2009); (iii) Ser. No. 12\/234,223 (filed Sep. 19, 2008 and published as publication number 2009-0083450 A1 on Mar. 26, 2009); and (iv) U.S. provisional patent application No. 60\/973,923, filed on Sep. 20, 2007 (collectively, \u201cController Kernel Background Documents\u201d). The Controller Kernel Background Documents are hereby incorporated by reference in their respective entireties to the fullest extent allowed by law.","Some conventional computer systems include remote desktop software. As explained in the Wikipedia: \u201cIn computing, the term remote desktop refers to a software or an OS feature allowing graphical applications to be run remotely on a server, while being displayed locally. Remote desktop applications have varying features. Some allow attaching to an existing user's session (i.e. a running desktop) and \u2018remote controlling\u2019 it in front of the user's eyes. Taking over a desktop remotely is a form of remote administration. It can also be explained as remote control of a computer by using another device connected via the internet or another network. This is widely used by many computer manufacturers (DELL, HP etc.) and large businesses' help desk for technical troubleshooting of their customers. Windows XP, Vista, and Server 2003\/2008 include Remote Desktop Services; Apple includes Screen Sharing with Mac OS X but sells its Apple Remote Desktop separately. Various professional third-party, open source and freeware remote desktop applications exist which are cross-platform and work various versions of Windows, Mac, and UNIX\/Linux\/BSD. The quality, speed and functions of any remote desktop protocol are based on the system layer where the graphical desktop is redirected. Software such as PC Anywhere, VNC and others use the top software layer to extract and compress the graphic interface images for transmission. Other products such as Microsoft RDP, Graphon GO-Global and others use a kernel driver level to construct the remote desktop for transmission.\u201d (See, http:\/\/en.wikipedia.org\/wiki\/Remote_desktop_software version as of 27 Oct. 2009.)","Some remote desktop protocols include: (i) Virtual Network Computing (VNC), a cross-platform protocol; (ii) Remote Desktop Protocol (RDP), a Windows-specific protocol featuring audio and remote printing; (iii) Remote Frame Buffer Protocol (RFB), a frame buffer level cross-platform protocol that VNC is based on; (iv) Apple Remote Desktop Protocol (ARD), the original protocol for Apple Remote Desktop on Mac OS X machines; (v) NX technology (NX), a cross-platform protocol including audio and remote printing; (vi) Independent Computing Architecture (ICA), a proprietary protocol designed by Citrix Systems; (vii) X Window System (X11), a well-established cross-platform protocol mainly used for displaying local applications, but which can also be used remotely; (viii) Rapid X Protocol (RXP), the Graphon GO-Global protocol to communicate between the host and the client; (viii) Appliance Link Protocol (ALP), a Sun Microsystems-specific protocol featuring audio, remote printing, remote USB and accelerated video. However, it is believed that none of these remote desktop protocols are sent from or received by a controller kernel, and more specifically, none of them are sent from or received by a controller kernel having an interrupt loop. It is further believed that none of them encapsulate (or tunnel) frame buffers in their native form (see DEFINITIONS section) for the purposes of remote desktop software functionality.","Description Of The Related Art Section Disclaimer: To the extent that specific publications are discussed above in this Description of the Related Art Section, these discussions should not be taken as an admission that the discussed publications (for example, published patents) are prior art for patent law purposes. For example, some or all of the discussed publications may not be sufficiently early in time, may not reflect subject matter developed early enough in time and\/or may not be sufficiently enabling so as to amount to prior art for patent law purposes. To the extent that specific publications are discussed above in this Description of the Related Art Section, they are all hereby incorporated by reference into this document in their respective entirety(ies).","One aspect of the present invention is directed to remote desktop software (see DEFINITIONS section) for use with guest operating systems that run on a controller kernel (see DEFINITIONS section). For example, remote desktop software according to this aspect of the present invention may run on a computer belonging to an Information Technology (\u201cI.T.\u201d) employee who then uses it to view and\/or manipulate the desktop of a remote computer that has: (i) a controller kernel; (ii) a guest operating system; (iii) remote desktop software programmed to communicate over a computer network with the remote desktop software on the I.T. employee's computer; and (iv) a frame buffer module included in the controller kernel. The frame buffer module sends and receives frame buffers corresponding to remote desktop information, with the frame buffers being in their native form (see DEFINITIONS section). Preferably, the frame buffer module includes an encapsulation sub-module for wrapping the native form frame buffers in a protocol suitable for direct communication in a tunneling fashion over a communication network, such as the TCP-IP protocol. Preferably, the frame buffer module further includes a de-encapsulation sub-module for unwrapping the native form frame buffers from a protocol suitable for receipt in a tunneling form from a communication network, such as the TCP-IP protocol.","The remote desktop software on the remote computer may or may not be identical to that installed on the I.T. employee's machine. For example, if the software is identical, then there may be a system of password protection put into place so that each user (that is, the I.T. employee and the remote computer user) only gets access to suitable respective functionality. For example, the password protection may be set so that the I.T. employee, when logged into the remote desktop software, can observe other desktops (such as, the desktop of the remote computer), but the remote computer user cannot observe anybody else's desktop. As still a further alternative, a user may have privileges to view certain desktops, but not others.","Another aspect of the present invention is directed to remote desktop software (see DEFINITIONS section) that can be used to remotely view and\/or manipulate multiple containerized guest operating systems that run on a single computer. According to this aspect, the multiple, containerized operating systems preferably run on a controller kernel. Alternatively, the multiple containerized operating system may be controlled to run on the single computer by other software, such as a hypervisor.","Various embodiments of the present invention may exhibit one or more of the following objects, features and\/or advantages:","(i) allows remote viewing and\/or manipulation of guest operating systems that run on a controller kernel;","(ii) allows remote viewing and\/or manipulation of guest operating systems for I.T. purposes;","(iii) facilitates I.T. pushdown;","(iv) allows remote viewing and\/or manipulation of guest operating systems for educational purposes;","(v) allows remote viewing and\/or manipulation of guest operating systems that are used in conjunction with thin clients (see DEFINITIONS section) and\/or dumb terminals (see DEFINITIONS section);","(vi) communication of remote desktop related frame buffers in their native form results in more efficient remote desktop related communication between and\/or within computers; and\/or","(vii) communicating native form frame buffers by tunneling over a communication network is more efficient than tunneling other forms of remote desktop software related communications.","According to a first aspect of the present invention, a computer system includes a computer resources set, a controller kernel and a first guest operating system. The computer resources set comprises a computer processing resources set. The controller kernel is stored and programmed to run on the computer processing resources set The first guest operating system is programmed and stored to run under the control of the controller kernel. The computer resources set defines a native form for instructions that the computer resources set receives from and sends to operating systems. The controller kernel comprises an instruction communication module. The instruction communication module is programmed so that the instructions communicated through the controller kernel between the first guest operating system and the computer resources set remain in the native form. The controller kernel comprises a frame buffer module that is programmed: (i) to capture selected output frame buffers that include remote desktop information in order to send the output frame buffers out over a communication network; and (ii) to receive selected input frame buffers from the communication network and output the received input frame buffers to the instruction communication module.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 1 to 6","b":["100","100"]},"As shown in , system  includes: WAN\/LAN communication network ; student computer ; IT department computer ; teacher server computer ; principal computer ; teacher computer I ; teacher computer II ; student terminal I ; student terminal II ; student terminal III ; and student terminal IV . As shown in , student computer ; IT department computer ; teacher server computer ; principal computer ; teacher computer I ; teacher computer II ; and student terminal IV can communicate with each other through network . As shown in , student terminal I ; student terminal II ; student terminal III  are connected directly to student computer. As will be discussed below, student computer  provides the operating systems and substantially all of the computer processing functionality for the student terminals, which are in the form of dumb terminals. Student terminal IV  is connected through student computer  only through the communication network because the student computer is located in the school building, and student terminal IV is allocated to a student who learns remotely from home due to a medical condition. Teacher computer I  and teacher computer II  are each in the form of a thin client. As will be discussed below, teacher server computer  provides the operating systems and most of the computer processing functionality for the thin client teacher computers.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["100","100","102","112","114","115","116","102","121","122","124","126","128","129","130","132","134","136","122","131"],"i":"a "},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2","b":["124","126","128","130","102"]},"As shown in , GOS I, GOS II and GOS IV have respective remote desktop hardware according to the present invention running on them. This means that operations of these GOSs can be remotely viewed and\/or manipulated despite the fact that there are multiple containerized operating systems and despite the fact that the guest operating systems are running on and controlled by a controller kernel. This allows students I, II and IV to be: (i) assisted in their I.T. issues by the I.T. employee; (ii) monitored and controlled in computer operations by the principal (who has view and manipulate access); and (iii) monitored by their teachers (who have view only access). GOS III, which is allocated to student III, does not yet have remote desktop software installed on his GOS III yet because he is a new student and his computer set-up is still in the process of being assembled. Although remote desktop software sets ,  and  run on their respective operating systems, the software could be programmed integrally into the GOS itself.","The remote desktop hardware , ,  works in conjunction with frame buffer module  which resides in controller kernel. Preferably, it is written in POSIX, just like the rest of the controller kernel. Even more preferably it is written in LINUX. Preferably the frame buffer module takes native form frame buffer data from and feeds native form frame buffer data to an interrupt loop (not shown) that is implemented as a primary feature of the controller kernel. As will be further discussed below in connection with , the role of the frame buffer module is to capture, encapsulate and send over a communication network remote desktop functionality related frame buffers as they are being sent through the controller kernel, and also to receive, de-encapsulate and supply to the controller kernel remote desktop functionality related frame buffers that are received through the communication network from remote machines.","In operation, the controller kernel: (i) passes GOS-to-computer-resource instructions from each GOS , ,,  to computer resources ; (ii) passes computer-resource-to-GOS instructions to each GOS , ,,  from computer resources ; and (iii) sends any and all appropriate signals to the GOSs and\/or the computer resources as needed to avoid conflicts and\/or delay based errors (such as time out errors). Communication to student terminals I, II and III is local and may be effected by any appropriate local data communication scheme, wired and\/or wireless, now known or to be developed in the future. For example, USB cables may be used to connect the various resources of terminals I, II and III to computer processing resources . As shown in , student terminal IV is remote from student computer , and all data must be communicated therebetween through network .","Although four (4) GOSs are shown in , there may be fewer or more GOSs running on a single computer and single controller kernel. The GOSs may be all the same (for example, Windows Vista), or they all be different. The controller kernel may give each of the GOSs similar access to computer processing resources , or it may give some GOSs better access than others. For example, idle loop(s) may be designed to give GOS IV relatively more access to computer processing resources  because this is a remote dumb terminal, and is therefore more resource intensive to run than a local remote terminal, such as those run by GOSs I, II and III. The computer processing resources are preferably primarily in the form of a set of processing hardware including a single processor, but may include hardware, software and\/or firmware in any combination now known or to be developed in the future.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 3"],"b":["103","150","152","154","156","158","100","158","132","134","136","152","154","152","154","150","156","158"]},"It is noted that IT department computer  has no frame buffer module (like frame buffer module ) because it has no controller kernel. Instead, remote desktop related communications that are to be sent and\/or received for use in the various remote desktop software ,  of IT department computer  must be encapsulated (to be sent by tunneling) or de-encapsulated (received from tunneling) in the remote desktop software ,  itself. However, because the remote desktop software runs on an operating system and through an API, this generally means that the remote desktop communications will be processed in a less efficient manner (like remote desktop communications are processed in prior art remote desktop software). In other words, the increased involvement of high level (that is running on top of an operating system) applications bogs down the remote desktop related communications to some degree. The way in which the remote desktop software running on the operating system (as opposed to the frame buffer module included in the controller kernel) handles the encapsulation and\/or de-encapsulation of remote desktop related communications will be further discussed below in connection with .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 4","FIG. 1","FIG. 1","FIG. 1"],"b":["104","160","162","164","166","168","169","108","110","102","104","162","164","166"]},"Hypervisor  includes a virtual frame buffer  for capturing and encapsulating and\/or de-encapsulating and directing to remote desktop software remote desktop software related communications. However, the use of the hypervisor in helping to effect remote desktop related communications is generally considered to be less efficient than using a controller kernel and a frame buffer module, like frame buffer module , residing within a controller kernel.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["106","170","172","174","176","174","156","103","176","158","103","174","176"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 6","b":["108","180","182","184","108","108","164","104","108","103","16","104"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 7","b":["158","156","201","158","201","202","204","206","208","210","212","214","216","218","220","222","224","226","228","230","232"]},"The \u201creceive end\u201d modules deal with processing that occurs when the remote desktop software receives a desktop display from a remote machine. It is noted that even though the remote desktop software is receiving a display in this situation, it may also be sending other data to the remote machine, such as mouse clicks or keyboard strokes. The \u201csend end\u201d modules deal with processing that occurs when the remote desktop software sends a desktop display to a remote machine. It is noted that even though the remote desktop software is sending a display in this situation, it may also be receiving other data from the remote machine, such as mouse clicks or keyboard strokes.","Remote desktop software  communicates with other computers by tunneling using the TCP-IP and\/or HTTP protocol. Preferably the remote desktop software  causes the operating system upon which it resides to send and\/or receive native form frame buffers that correspond to the remote desktop related communications. As will be discussed below in connection with , these native form frame buffers are preferably taken from and\/or supplied to the controller kernel by a frame buffer module which makes up a part of the controller kernel.","As a (generally less-efficient) alternative to the use of a frame buffer module residing in a controller kernel, as mentioned in the previous paragraph, when remote desktop software is going to send any sort of data out to remote desktop software on a remote machine, it may alternatively use HTTP encapsulation module  to encapsulate the data in an HTTP and\/or TCP\/IP protocol wrapper, so that the data may be tunneled to the remote machine through communication network  (see ). Alternatively or additionally, other protocols may be used for tunneling of the remote desktop related data. Also as a (generally less-efficient) alternative to a frame buffer module in the controller kernel, HTTP de-encapsulation module receives data from remote desktop software running on remote machine(s) via receive end remote computer interface module  or send end remote computer interface module . The data unit by which data is encapsulated and communicated between remotely-located remote desktop software sets is preferably a frame buffer. It is noted that HTTP encapsulation and HTTP de-encapsulation modules ,  are optional. However, if they are omitted from the remote desktop software, then the remote desktop software must be used with a controller kernel that includes a frame buffer module.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 8","b":["131","301","302","303","304"]},"The frame buffer de-encapsulation sub-module receives, from the communication network, network protocol (for example, TCP\/IP protocol) communications by tunneling style communication from the remote desktop software of remote machines. The frame buffer de-encapsulation sub-module de-encapsulates the received network protocol communications to generate native form frame buffers corresponding to remote desktop related data. the frame buffer incoming capture sub-module sends these native form, remote desktop related frame buffers to the controller kernel for communication to a GOS and its remote desktop software. Alternatively, the frame buffer de-encapsulation sub-module may be omitted and the frame buffers may be directly received in native form, so long as the communication network is structured and\/or programmed to make such native form data communications.","Any and all published documents mentioned herein shall be considered to be incorporated by reference, in their respective entireties, herein to the fullest extent of the patent law. The following definitions are provided for claim construction purposes:","Present invention: means at least some embodiments of the present invention; references to various feature(s) of the \u201cpresent invention\u201d throughout this document do not mean that all claimed embodiments or methods include the referenced feature(s).","Embodiment: a machine, manufacture, system, method, process and\/or composition that may (not must) meet the embodiment of a present, past or future patent claim based on this patent document; for example, an \u201cembodiment\u201d might not be covered by any claims filed with this patent document, but described as an \u201cembodiment\u201d to show the scope of the invention and indicate that it might (or might not) covered in a later arising claim (for example, an amended claim, a continuation application claim, a divisional application claim, a reissue application claim, a re-examination proceeding claim, an interference count); also, an embodiment that is indeed covered by claims filed with this patent document might cease to be covered by claim amendments made during prosecution.","First, second, third, etc. (\u201cordinals\u201d): Unless otherwise noted, ordinals only serve to distinguish or identify (e.g., various members of a group); the mere use of ordinals shall not be taken to necessarily imply order (for example, time order, space order).","Electrically Connected: means either directly electrically connected, or indirectly electrically connected, such that intervening elements are present; in an indirect electrical connection, the intervening elements may include inductors and\/or transformers.","Data communication: any sort of data communication scheme now known or to be developed in the future, including wireless communication, wired communication and communication routes that have wireless and wired portions; data communication is not necessarily limited to: (i) direct data communication; (ii) indirect data communication; and\/or (iii) data communication where the format, packetization status, medium, encryption status and\/or protocol remains constant over the entire course of the data communication.","Receive\/provide\/send\/input\/output: unless otherwise explicitly specified, these words should not be taken to imply: (i) any particular degree of directness with respect to the relationship between their objects and subjects; and\/or (ii) absence of intermediate components, actions and\/or things interposed between their objects and subjects.","Module\/Sub-Module: any set of hardware, firmware and\/or software that operatively works to do some kind of function, without regard to whether the module is: (i) in a single local proximity; (ii) distributed over a wide area; (ii) in a single proximity within a larger piece of software code; (iii) located within a single piece of software code; (iv) located in a single storage device, memory or medium; (v) mechanically connected; (vi) electrically connected; and\/or (vii) connected in data communication.","Computer set: One or more computers located at one or more locations; a computer set may include, for example, a server computer, a communication network and a \u201cdumb terminal\u201d (see DEFINITIONS section.","Terminals: sometimes called workstations, these have sufficient user input and output devices so that a user can work at the terminal as if the user is working at a computer, regardless of how much computer processing capability exists within the terminal itself; terminals include, but are not limited to, dumb terminals and thin clients.","Dumb terminals: A terminal with substantially no computer processing capability; however, it is noted that a terminal including a standard LCD monitor and a standard modern computer keyboard would be considered as a dumb terminal even if either or both of these devices turned out to have some processing power to perform their respective functions as a display device and a user input device.","Thin client: A terminal with some computer processing power, but much less than a typical personal computer; for example, a thin client might have a processor for the purposes of, and only sufficient to, de-encapsulating and encapsulating data received from a network in a network protocol and data transmitted to the network in network protocol.","Resources of the computer: May includes, but is not necessarily limited to internal read only memory, read only removable memory, random access internal memory, cache memory, processing hardware, network communications hardware and\/or any kind of peripheral devices now known or to be developed in the future.","Remote desktop software: Any software, OS feature or module within a controller kernel that allows graphical applications to be run through a communication network on a \u201csender\u201d computer while being displayed on a \u201creceiver\u201d computer that communicates with the sender computer through the communication network.","Remote desktop information: information of the type typically communicated over a communication network between remote desktop software.","Controller kernel: Includes, but is not necessarily limited to POSIX kernels that include an idle loop for routing native form instructions in a controlled manner","Native form: a form of instructions that can be operatively received by and\/or is output from processing hardware directly and without any sort of translation or modification to form by software running on the hardware; generally speaking, different processing hardware types are characterized by different native forms.","To the extent that the definitions provided above are consistent with ordinary, plain, and accustomed meanings (as generally shown by documents such as dictionaries and\/or technical lexicons), the above definitions shall be considered supplemental in nature. To the extent that the definitions provided above are inconsistent with ordinary, plain, and accustomed meanings (as generally shown by documents such as dictionaries and\/or technical lexicons), the above definitions shall control.","Unless otherwise explicitly provided in the claim language, steps in method steps or process claims need only be performed in the same time order as the order the steps are recited in the claim only to the extent that impossibility or extreme feasibility problems dictate that the recited step order be used. This broad interpretation with respect to step order is to be used regardless of whether the alternative time ordering(s) of the claimed steps is particularly mentioned or discussed in this document\u2014in other words, any step order discussed in the above specification shall be considered as required by a method claim only if the step order is explicitly set forth in the words of the method claim itself. Also, if some time ordering is explicitly set forth in a method claim, the time ordering claim language shall not be taken as an implicit limitation on whether claimed steps are immediately consecutive in time, or as an implicit limitation against intervening steps."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be more fully understood and appreciated by reading the following Detailed Description in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
