---
title: Systems and methods for providing dynamic quality of service for a distributed system
abstract: Methods and systems consistent with certain aspects related to the present invention provide a dynamic service delivery system based on a capability to provide services through a distributed system using qualitative and quantitative Quality of Service (QoS) attributes. In accordance with one aspect of the invention, a method for providing a service that includes collecting capability information reflecting a current operating condition of a compute resource and determining a platform capability and a measurable capability value for a depletion-oriented characteristic of the compute resource based on the collected capability information. Based on at least one of the platform capability and the measurable capability value; a capability value for the compute resource is determined and this value is provided to a provision manager that determines whether the compute resource is worthy of being an available resource in the distributed system based on the capability value. Additionally, the provision manager may determine which of a plurality of services provided by compute resources is more capable of handling a service request based on service capability values corresponding to platform capabilities and/or the depletion-oriented characteristics of each of the compute resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07660887&OS=07660887&RS=07660887
owner: Sun Microsystems, Inc.
number: 07660887
owner_city: Santa Clara
owner_country: US
publication_date: 20030319
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Introduction","The Jini\u2122 Environment","Overview of Rio Architecture","Jini\u2122 Service Beans","Cybernode Processing","Enhanced Event Handling","Dynamic Service Provisioning"],"p":["This application claims the benefit of U.S. Provisional Patent Application No. 60\/378,957, filed May 10, 2002, the disclosure of which is expressly incorporated herein by reference in its entirety. Further, this application is a continuation-in-part of U.S. patent application Ser. No. 09\/947,528, filed Sep. 7, 2001, now abandoned, the disclosure of which is also incorporated herein by reference in its entirety.","This invention relates to providing services in a distributed system and, more particularly, to methods and systems for dynamically provisioning quality of service for a distributed system.","Distributed systems today enable a device connected to a communications network to take advantage of services available on other devices located throughout the network. Each device in a distributed system may have its own internal data types, its own address alignment rules, and its own operating system. To enable such heterogeneous devices to communicate and interact successfully, developers of distributed systems can employ a remote procedure call (RPC) communication mechanism.","RPC mechanisms provide communication between processes (e.g., programs, applets, etc.) running on the same device or different devices. In a simple case, one process, i.e., a client, sends a message to another process, i.e., a server. The server processes the message and, in some cases, returns a response to the client. In many systems, the client and server do not have to be synchronized. That is, the client may transmit the message and then begin a new activity, or the server may buffer the incoming message until the server is ready to process the message.","The Java\u2122 programming language is an object-oriented programming language that may be used to implement such a distributed system. The Java\u2122 language is compiled into a platform-independent format, using a bytecode instruction set, which can be executed on any platform supporting the Java\u2122 virtual machine (JVM). The JVM may be implemented on any type of platform, greatly increasing the ease with which heterogeneous machines can be federated into a distributed system.","The Jini\u2122 architecture has been developed using the Java\u2122 programming language to enable devices in a distributed to share services using remote method invocation (RMI). Traditional Jini\u2122 systems use RMI to enable a client device to request and receive a service provided by a server device on a remote machine. While conventional Jini\u2122 systems provide a basic architecture for providing services in a distributed system, they do not provide tools specifically directed to providing complex services. Current systems do not address provisioning a service, such as application software, to make it available to the distributed system in the first place. Furthermore, conventional systems do not consider the quality of service requirements of a specific service before provisioning the service to make it available in the distributed system.","Methods and systems consistent with certain aspects related to the present invention provide a dynamic service delivery system based on a capability to provide services through a distributed system using qualitative and quantitative Quality of Service (QoS) attributes.","In one aspect of the invention, a method for providing a service that includes collecting capability information reflecting a current operating condition of a compute resource and determining a measurable capability value for a depletion-oriented characteristic of the compute resource based on the collected capability information. Further, a platform capability for the compute resource may also be determined. Based on at least one of the platform capability and the measurable capability value; a capability value for the compute resource is determined. This value is provided to a provision manager that determines whether the compute resource is worthy of being an available resource in the distributed system based on the capability value.","In another aspect of the invention, a method is provided for provisioning a service that includes collecting a resource capability object from a compute resource, determining whether the compute resource meets a QoS capability threshold based on the resource capability object, and registering the compute resource as an available resource in the distributed system based on the determination.","In yet another aspect of the invention, a method is provided for provisioning a service in a distributed system including a cybernode running on a compute resource that provides the service. In this aspect of the invention, the method may include monitoring a depletion-oriented characteristic of the compute resource and determining that a QoS capability of the compute resource does not meet a corresponding QoS threshold. A threshold event may be provided to an SLA manager that includes an indication of the QoS capability based on the determination. An action may also be performed based on the threshold event.","Additional features of the invention will be set forth in part in the description which follows, and in part will be obvious from the description, or may be learned by practice of the invention.","The following description of embodiments of this invention refers to the accompanying drawings. Where appropriate, the same reference numbers in different drawings refer to the same or similar elements.","Systems consistent with the present invention enable a distributed system to measure the suitability of each of a plurality of heterogeneous resources to provision a service based on quantifiable and qualitative attributes of the respective resources. A service may be associated with a complex service that is provisioned over a distributed network. A complex service may be broken down into a collection of simpler services. For example, automobiles today incorporate complex computer systems to provide in-vehicle navigation, entertainment, and diagnostics. These systems are usually federated into a distributed system that may include wireless connections to a satellite, the Internet, etc. Any one of an automobile's systems can be viewed as a complex service that can in turn be viewed as a collection of simpler services.","A car's overall diagnostic system, for example, may be broken down into diagnostic monitoring of fluids, such as oil pressure and brake fluid, and diagnostic monitoring of the electrical system, such as lights and fuses. The diagnostic monitoring of fluids could then be further divided into a process that monitors oil pressure, another process that monitors brake fluid, etc. Furthermore, additional diagnostic areas, such as drive train or engine, may be added over the life of the car.","Systems consistent with the present invention provide the tools to deconstruct a complex service into service elements, provision service elements that are needed to make up the complex service, and monitor the service elements to ensure that the complex service is supported. One embodiment of the present invention can be implemented using the Rio architecture created by Sun Microsystems and described in greater detail below. Rio uses tools provided by the Jini\u2122 architecture, such as discovery and event handling, to provision and monitor complex services in a distributed system.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","104","106","108","102","104","106","108","100","100"]},"The computers and devices of distributed system  provide services to one another. A \u201cservice\u201d is a resource, data, or functionality that can be accessed by a user, program, device, or another service. Typical services include devices, such as printers, displays, and disks; software, such as programs or utilities; and information managers, such as databases and file systems. These services may appear programmatically as objects of the Java\u2122 programming environment and may include other objects, software components written in different programming languages, or hardware devices. As such, a service typically has an interface defining the operations that can be requested of that service.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["102","100","104","106","102","202","204","206","208","210","202","212","214","216","216","218","220","204","222"]},"Memory  can be, for example, a random access memory. Secondary storage device  can be, for example, a CD-ROM. CPU  can support any platform compatible with JVM . Input device  can be, for example, a keyboard or mouse. Output device  can be, for example, a printer.","JVM  acts like an abstract computing machine, receiving instructions from programs in the form of bytecodes and interpreting these bytecodes by dynamically converting them into a form for execution, such as object code, and executing them. RMI  facilitates remote method invocation by allowing objects executing on one computer or device to invoke methods of an object on another computer or device. Lookup Service  and Discovery Server  are described in great detail below. Java\u2122 space  is an object repository used by programs within distributed system  to store objects. Programs use Java space  to store objects persistently as well as to make them accessible to other devices within distributed system .","The Jini\u2122 environment enables users to build and maintain a network of services running on computers and devices. Jini\u2122 is an architectural framework provided by Sun Microsystems that provides an infrastructure for creating a flexible distributed system. In particular, the Jini\u2122 architecture enables users to build and maintain a network of services on computers and\/or devices. The Jini\u2122 architecture includes Lookup Service  and Discovery Server  that enable services on the network to find other services and establish communications directly with those services.","Lookup Service  defines the services that are available in distributed system . Lookup Service  contains one object for each service within the system, and each object contains various methods that facilitate access to the corresponding service. Discovery Server  detects when a new device is added to distributed system  during a process known as boot and join, or discovery. When a new device is detected, Discovery Server  passes a reference to the new device to Lookup Service . The new device may then register its services with Lookup Service , making the device's services available to others in distributed system . One skilled in the art will appreciate that exemplary distributed system  may contain many Lookup Services and Discovery Servers.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3","b":["302","304","306","302","304","306","102","104","106"]},"As described above, service provider  discovers and joins lookup service , making the services provided by service provider  available to other computers and devices in the distributed system. When service consumer  requires a service, it discovers lookup service  and sends a lookup request specifying the needed service to lookup service . In response, lookup service  returns a proxy that corresponds to service provider  to service consumer . The proxy enables service consumer  to establish contact directly with service provider . Service provider  is then able to provide the service to service consumer  as needed. An implementation of the lookup service is explained in \u201cThe Jini\u2122 Lookup Service Specification,\u201d contained in Arnold et al., , Addison-Wesley, 1999, pp. 217-231.","Distributed systems that use the Jini\u2122 architecture often communicate via an event handling process that allows an object running on one Java\u2122 virtual machine (i.e., an event consumer or event listener) to register interest in an event that occurs in an object running on another Java\u2122 virtual machine (i.e., an event generator or event producer). An event can be, for example, a change in the state of the event producer. When the event occurs, the event consumer is notified. This notification can be provided by, for example, the event producer.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":["402","404","406","408","410"],"i":"The Jini\u2122 Specification"},"The Rio architecture enhances the basic Jini\u2122 architecture to provision and monitor complex services by considering a complex service as a collection of service elements. To provide the complex service, the Rio architecture instantiates and monitors a service instance corresponding to each service element. A service element might correspond to, for example, an application service or an infrastructure service. In general, an application service is developed to solve a specific application problem, such as word processing or spreadsheet management. An infrastructure service, such as the Jini\u2122 lookup service, provides the building blocks on which application services can be used. One implementation of the Jini lookup service is described in U.S. Pat. No. 6,185,611, for \u201cDynamic Lookup Service in a Distributed System.\u201d","Consistent with the present invention, a complex service can be represented by an operational string.  depicts a exemplary operational string  that includes one or more service elements  and another operational string . Operational string  in turn includes additional service elements . For example, operational string  might represent the diagnostic monitoring of an automobile. Service element 1 might be diagnostic monitoring of the car's electrical system and service element 2 might be diagnostic monitoring of the car's fluids. Operational string B might be a process to coordinate alerts when one of the monitored systems has a problem. Service element 3 might then be a user interface available to the driver, service element 4 might be a database storing thresholds at which alerts are issued, etc. In an embodiment of the present invention, an operation string can be expressed as an XML document. It will be clear to one of skill in the art that an operational string can contain any number of service elements and operational strings.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 6","b":["506","602","604","602","506","604","506"]},"A Jini\u2122 Service Bean (JSB) is a Java TM object that provides a service in a distributed system. As such, a JSB implements one or more remote methods that together constitute the service provided by the JSB. A JSB is defined by an interface that declares each of the JSB's remote methods using Jini\u2122 Remote Method Invocation (RMI) conventions. In addition to its remote methods, a JSB may include a proxy and a user interface consistent with the Jini\u2122 architecture.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 7","b":["702","704","706","702","704","706","702","706","702","708","706","706","708","702","710","706","702","706","102","702","106"]},"A JSB is created and receives fundamental life-cycle support from an infrastructure service called a \u201ccybernode.\u201d A cybernode runs on a compute resource, such as a computer or device and represents the capabilities of the compute resource that has instantiated the cybernode. In one embodiment of the present invention, a cybernode runs as a Java\u2122 virtual machine, such as JVM , on a computer, such as computer . Consistent with the present invention, a compute resource may run any number of cybernodes at a time and a cybernode may support any number of JSBs.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 8","b":["801","802","804","801","806","808","808","801"]},"Service instantiator object  is used by cybernode  to register its availability to support JSBs and to receive requests to instantiate JSBs. For example, using the Jini\u2122 event handling process, service instantiator object  can register interest in receiving service provision events from a service provisioner, discussed below. A service provision event is typically a request to create a JSB. The registration process might include declaring QoS capabilities  to the service provisioner. These capabilities can be used by the service provisioner to determine what compute resource, and therefore what cybernode, should instantiate a particular JSB, as described in greater detail below. In some instances, when a compute resource is initiated, its capabilities are declared to the cybernode  running on the compute resource and stored as QoS capabilities .","Service bean instantiator object  is used by cybernode  to create JSBs  when service instantiator object  receives a service provision event. Using JSB attributes contained in the service provision event, cybernode  instantiates the JSB, and ensures that the JSB and its corresponding service remain available over the network. Service bean instantiator object  can be used by cybernode  to download JSB class files from a code server as needed.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 9","b":["902","801","906","908","801","801","902","906","801","902","906","906","902","801"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 10","b":["801","902","906","1002","801","906","801","1004","801","906","1006","801","908","1008","908","801","1010"]},"As described above, JSBs and cybernodes comprise the basic tools to provide a service corresponding to a service element in an operational string consistent with the present invention. A service provisioner for managing the operational string itself will now be described.","Systems consistent with the present invention may expand upon traditional Jini\u2122 event handling by employing flexible dispatch mechanisms selected by an event producer. When more than one event consumer has registered interest in an event, the event producer can use any policy it chooses for determining the order in which it notifies the event consumers. The notification policy can be, for example, round robin notification, in which the event consumers are notified in the order in which they registered interest in an event, beginning with the first event consumer that registered interest. For the next event notification, the round robin notification will begin with the second event consumer in the list and proceed in the same manner. Alternatively, an event producer could select a random order for notification, or it could reverse the order of notification with each event.","A service provisioner is an infrastructure service that provides the capability to deploy and monitor operational strings. As described above, an operational string is a collection of service elements that together constitute a complex service in a distributed system. To manage an operational string, a service provisioner determines whether a service instance corresponding to each service element in the operational string is running on the network. The service provisioner dynamically provisions an instance of any service element not represented on the network. The service provisioner also monitors the service instance corresponding to each service element in the operational string to ensure that the complex service represented by the operational string is provided correctly.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 11","b":["906","1102","1102","1102","406","1104"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 12","b":["906","1202","502","504","906","906","902","1204","1206","906","1208","1210"]},"If an instance of the next service is not running on the network (step ), then service provisioner  determines a target cybernode that matches the next service (step ). The process of matching a service instance to a cybernode is discussed below. Service provisioner  fires a service provision event to the target cybernode requesting creation of a JSB to perform the next service (step ). In one embodiment, the service provision event includes service bean attributes object  from service element . Service provisioner  then uses a lookup service to discover the newly instantiated JSB (step ) and starts a monitor corresponding to that JSB (step ).","As described above, once a service instance is running, service provisioner  monitors it and directs its recovery if the service instance fails for any reason. For example, if a monitor detects that a service instance has failed, service provisioner  may issue a new service provision event to create a new JSB to provide the corresponding service. In one embodiment of the present invention, service provisioner  can monitor services that are provided by objects other than JSBs. The service provisioner therefore provides the ability to deal with damaged or failed resources while supporting a complex service.","Service provisioner  also ensures quality of service by distributing a service provision request to the compute resource best matched to the requirements of the service element. A service, such as a software component, has requirements, such as hardware requirements, response time, throughput, etc. In one embodiment of the present invention, a software component provides a specification of its requirements as part of its configuration. These requirements are embodied in service provision management object  of the corresponding service element. A compute resource may be, for example, a computer or a device, with capabilities such as CPU speed, disk space, connectivity capability, bandwidth, etc.","In one implementation consistent with the present invention, the matching of software component to compute resource follows the semantics of the Class.isAssignableFrom(Class cls) method, a known method in the Java\u2122 programming language that determines if the class or interface represented by the class object (\u201ccls\u201d) is either the same as, or is a superclass or superinstance of, the class or interface represented by the specified \u201cClass\u201d parameter. If the class or interface represented by QoS class object of the software component is either the same as, or is a superclass or superinterface of, the class or interface represented by the class parameter of the QoS class object of the compute resource, then a cybernode resident on the compute resource is invoked to instantiate a JSB for the software component. Consistent with the present invention, additional analysis of the compute resource may be performed before the \u201cmatch\u201d is complete. For example, further analysis may be conducted to determine the compute resource's capability to process an increased load or adhere to service level agreements required by the software component.","Service provisioner  may ensure quality of service by distributing service provision requests to compute resources that are best matched to the requirements of a service element. Methods, systems and articles of manufacture consistent with certain features related to the present invention enable a provision manager to monitor and measure compute resource capabilities in a heterogeneous system to efficiently provision services. Further, aspects of the present invention allow a cybernode to monitor the capabilities of its corresponding compute resource to ensure Service Level Agreements (SLAs) are maintained. An SLA is a construct developed by a user (e.g., administrator) that defines a level of service for a corresponding compute resource.","In one aspect of the invention, a compute resource will monitor and maintain its defined service level agreement in accordance with a QoS framework consistent with certain features related to the present invention. For example, a user may define a service level agreement that reflects service level requirements of a user. For instance, a user may request that a compute resource operates with a processing module including at least six CPUs or within a particular type of processing architecture. Further, the SLA may stipulate that a CPU usage rate and a memory usage rate for the compute resource is not to exceed a predetermined threshold value, such as 80% and 40%, respectively. In one aspect of the invention, the SLA may also define a universal measurable resource cost value that a provision manager may use to assess the resource capabilities of the corresponding compute resource. The provision manager may receive resource cost values associated with a plurality of compute resources to determine an overall resource capability of a heterogeneous distributed system. Because a heterogeneous system may operate using resources having different types of hardware and software configurations (e.g., different processing platforms, operating systems, etc.), the capabilities of each resource may be difficult to manage and\/or assess. Accordingly, certain aspects of the invention provide a framework that generates a homogeneous resource cost value for each heterogeneous resource included in a distributed system. A provision manager may use the cost value to determine resource capabilities for each resource and provision one or more services in the distributed system according to the determination.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 13","b":["1300","1300","1305","1310","1320","1330"]},"Each compute resource  may be a device, such as a computer , that includes hardware and software based resources. Each compute resource  may based on similar or different platforms, such as different processing architectures and\/or operating systems. Further, each compute resource may run a cybernode  that is a lightweight dynamic container that represents the capabilities of the corresponding compute resource the cybernode runs on. Further, a cybernode  provides SLA management services and discovers and enlists with service provisioner  through lookup service . For example, cybernode  may interact with service provisioner  in manner similar to that described above with respect to .","Each compute resource  may have the capability to determine the type of services or support the resource may provide to a requesting entity, such as a software application. This capability considers one or more factors, such as qualitative and quantitative factors. A qualitative factor may be associated with a capability corresponding to one or more mechanisms operating with, or within, a compute resource. One exemplary qualitative factor may be a platform capability, such as a network capability (TCP, 802.11, Bluetooth, etc.), hardware and\/or software capability (e.g., drivers, databases, etc.), etc. The platform capability of a compute resource may thus depend on the type of platform the resource is running (e.g., operating system), the types and number of support mechanisms (e.g., memory management devices\/software, the number of processors running in the resource, etc. An exemplary quantitative factor may be a measurable capability that indicates a measurable depletion-oriented platform characteristic, such as CPU utilization, CPU capability, memory usage (e.g., disk space usage 0 to 100%), network bandwidth usage, and operating system resources that have an upper threshold count, such as synchronization primitives, threads, processes (e.g., light-weight processes) etc. Thus, the measurable capability of a compute resource at any point in time may depend on the availability of such depletion-oriented characteristics at that point in time. These exemplary capabilities may be used by a user and\/or a process to define a SLA associated with a corresponding compute resource.","Service provisioner  is a computing module (e.g., software and\/or computer device) that manages the provisioning of services to one or more requesting entities (e.g., a process operating on a remote computing device included in system ). In one aspect of the invention, service provisioner  may collect a set of resource capability objects that each map to a specific compute resource  available in system . Based on the collected resource capability objects, service provisioner  may create a collection of resource capabilities based on platform capabilities and a homogeneous resource cost value for each compute resource. The resource cost value may be included in the resource capability object and represents an overall resource capability associated with a corresponding compute resource. For example, resource cost values may be provided as a quantifiable data value ranging from a minimum and maximum data value, such as 0 to 100% (e.g., 0 to 1.0). Accordingly, service provisioner  may determine that a compute resource having a resource cost value of 0.7 may have a higher \u201cgoodness\u201d value than a compute resource with a resource cost value of 0.4. This \u201cgoodness\u201d value is a representation of a capability of a compute resource to provision a service in system  and may be independent of the type of platform the compute resource is operating. Service provisioner  may use one or more of these \u201cgoodness values\u201d to identify those compute resources  best suited to provision a service based on, for example, minimum platform capabilities for a desired service and the resource cost values. Accordingly, service provisioner  determines the compute resources  included in system  that should be made available to one or more requesting entities.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 14","FIG. 14","FIGS. 15"],"b":["1400","1300","17","19"]},"As shown in , system  includes a cybernode , service provisioner , and lookup service , that may be similar to elements of the same designation in . Additionally, system  includes operational string  and Rules and Policy Enforcement module (RPE) . Operational string  may be similar to operational string  or  () and represents a service (e.g., a complex service) that may be provisioned by service provisioner . RPE  may represent a computing module or a set of instructions that, when executed by a processor, perform as a computing module, that maintains and enforces rules and\/or policies associated with threshold events for one or more SLAs. RPE  may operate within the same framework as a compute resource or may be available over a network. As exemplified in , RPE  is operating within a compute resource framework  that is shared by cybernode . Framework  may be a collection of processes, objects, and other executable and non-executable forms of information that perform functions consistent with certain aspects of the present invention.","Cybernode  may implement a QoS framework  that creates and maintains a compute resource object  that contains zero or more platform capability objects  and zero or more measurable capability objects . Platform capability object  provides data reflecting the qualitative capabilities of the compute resource  running cybernode  (e.g., network capabilities, platform software, etc.). Measurable capability object  provides data reflecting a quantitative capability of the compute resource . In one aspect of the invention, each measurable capability object  contains a measurable monitor object  that periodically collects capability information from operating system resources and capabilities  and\/or physical platform . Based on this collected information, measurable capability object  may determine a resource cost value representing an overall capability, or \u201cgoodness\u201d value, associated with the compute resource. In one aspect of the invention, compute resource object  may periodically produce a resource capability object  that contains the platform and measurable capability objects  and , and the resource cost value for the compute resource . Resource capability object  provides information on the suitability of the compute resource to provision a service through system .","Cybernode  may also instantiate SLA manager  when compute resource  instantiates a service, such as a service associated with operational string . SLA manager  is a computing entity (e.g., object) that manages the SLA associated with the compute resource the corresponding cybernode  is located. In accordance with one aspect of the invention, SLA manager  may receive a threshold event  from measurable capability object  and provide an SLA threshold event  to RPE module . Each of the objects (-) and SLA manager  may be stored as program code in a memory device included in a compute resource (e.g., ).",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 15","FIG. 16"],"b":["1440","1510","1610","1610","1620","1630","1620","1630","1640","1610","1640"]},"Returning to , once the SLA is defined, measurable monitor object  may periodically (e.g., every minute, every hour, every day, etc.) collect capability information from operating system resources and capabilities module  and physical platform  associated with the compute resource running cybernode  (step ). The capability information may include data reflecting current state information associated with one or more hardware and\/or software components operating within module  and platform . For example, capability information may include data reflecting the current memory used in a one or more memory devices, the current usage rate of a processing module or controller, traffic information for one or more busses or communication links used by module  and\/or platform , etc. Cybernode  may dynamically adjust the period by which measurable monitor object  collects the capability information. Measurable capability object  may receive the collected capability information from measurable monitor object  and determine a measurable capability value associated with the depletion-oriented platform characteristics associated with the compute resource (step ). For example, measurable monitor object , at any point in time, may collect information from OS resource  and physical platform  that reflect CPU utilization and memory usage. Based on this collected information, measurable capability object  may determine a CPU utilization value and a memory usage value for the compute resource.","Compute resource object  may collect the measurable capability data from measurable capability object  and platform capability data (e.g., qualitative capabilities) from platform capability object  to determine a resource capability value reflecting an overall capability for the compute resource to provision a service (step ). Compute resource object  may determine the resource capability value based on the performance of the compute resource in association with any criteria defined in the SLA corresponding to that compute resource. For example, consider a compute resource that is operating at a 79% CPU utilization rate and a 38% memory usage rate when the resource's SLA defines the CPU and memory usage threshold rates at 80% and 40%, respectively. Compute resource object  may determine that the resource capability value for the exemplary compute resource at that point in time reflects a lower \u201cgoodness\u201d value (e.g., universal representation of the cost of operating the compute resource) than a capability value for the same compute resource at a previous point in time that was operating at a 20% CPU and 20% memory usage rate. Thus, in the previous example, compute resource object may determine that the resource capability value for the first operating conditions is 0.6 (e.g., 60% cost value for the operating compute resource) while the resource capability value for the second operating conditions is 0.3 (e.g., 30% cost value). One skilled in the art will appreciate that the resource capability value may be configured in different formats using different types of values (e.g., integers, percentages, etc.) For example, a resource capability value of 0.7 may reflect a better \u201cgoodness\u201d value than that of a lower capability value (e.g., 0.4).","Periodically (e.g., hourly, daily, etc.), compute resource object  may generate a resource capability object  that contains the platform and measurable capability objects  and , and the resource capability value determined by compute resource  (step ). Resource capability object  provides information on the suitability of the compute resource running cybernode  to provision a service. Once created, cybernode  may periodically provide or make available, resource capability object  to service provisioner  (step ).","In accordance with one aspect of the invention, one or more cybernodes  may make a resource capability object  available to service provisioner . Based on the information included in a received capability object, service provisioner  may assess whether the corresponding compute resource that provided the object is worthy of being represented in system  as an available resource. For example, a compute resource that meets certain minimum performance and\/or platform requirements may be a worthy (e.g., designated as a resource that meets these requirements) resource for providing a service to a requesting entity. A compute resource that is worthy of being an available resource  is a flowchart of an exemplary compute resource registration process that may be performed service provisioner  to make such an assessment. As shown, service provisioner  may periodically receive or retrieve a resource capability object  from cybernode  (step ). For example, service provisioner  may periodically (e.g., hourly, daily, etc.) request a resource capability object  from cybernode , or alternatively, cybernode  may periodically send resource capability object  to service provisioner .","Once a resource capability object  is received, service provisioner  may determine the platform capabilities of the compute resource associated with the received capability object  (step ). To determine these capabilities, service provisioner  may access the platform capability information provided by platform capability object  and included in the resource capability object . Manager  may also determine whether the platform capabilities of the compute resource meets a predetermined threshold of requirements (step ). Service provisioner  may make this determination based on one or more rules associated with the performance requirements of system . For example, manager  may require that a compute resource support certain capabilities (e.g., network capabilities, such as TCP) or includes certain services or software, such as particular databases, hardware devices with particular specifications, etc. One skilled in the art will appreciate that the types of criteria that service provisioner  may implement to determined whether a compute resource meets a certain platform requirement may vary without departing from the scope of the invention. Accordingly, if the compute resource does not meet the platform capability requirements specified by service provisioner , the compute resource will be denied registration (step ) (i.e., the provision manager  will not present the compute resource as an available resource in system ).","On the other hand, if the platform capability requirements are met (step ; YES), service provisioner  may determine whether a performance cost associated with the compute resource meets a predetermined threshold (step ). In one aspect of the invention, service provisioner  may determine the performance cost based on the resource capability value determined by measurable capability object . For example, service provisioner  may determine that a compute resource with a resource capability value below a certain threshold value (e.g., 0.8) may not have enough available depletion-oriented resources to provide efficient services to a requesting entity. That is, the corresponding compute resource may be currently using too much CPU processes or memory, etc. such that the compute resource would not be able to provide a service to a requesting entity in an efficient manner. Accordingly, service provisioner  may extract the resource capability value from the resource capability object provided by compute resource object  and compare it to the threshold value. If the resource capability value is below the threshold value, service provisioner  may deny registration (step ). Alternatively, if the resource capability value is above the threshold (step ; YES), service provisioner  may determine that the corresponding compute resource is worthy of being presented as an available resource in system  (step ).","In one aspect of the invention, once a compute resource is registered as an available resource, service provisioner  may add an entry for the compute resource to a data structure (e.g., file, array, etc.) including a list of other registered compute resources. The entry may include data reflecting an identification of the compute resource, a resource capability value and platform capability information associated with the compute resource. The list may be sorted according to the platform capabilities and\/or resource capability values included in each entry (e.g., from highest to lowest cost values). Service provisioner  may use this list to process service requests from a requesting entity.  shows a flowchart of an exemplary service request process that may be performed by service provisioner  consistent with aspects related to the present invention.","As shown in , service provisioner  may receive a service request from a requesting entity, such as a client computer requesting access to a particular application, object, method, service, etc. (step ). Based on the request, manager  may determine the most efficient or applicable compute resource to provide the requested service to the requesting entity (step ). Once determined, service provisioner  may provide the service to the requesting entity (step ). Service provisioner  may be configured to determine the most appropriate service (and corresponding compute resource) to handle the request based on a cost value associated with the service. Accordingly, the same type of process, code, algorithm, etc. that is used by service provisioner  to determine whether a compute resource is worthy of being an available resource may be used to select the most appropriate service to process the request. In one aspect of the invention, service provisioner  may compute a cost value for each service that is instantiated in system  based on platform capabilities and measurable capabilities associated with the compute resource that is providing the corresponding service. Service provisioner  may compare the cost values of each service to determine the most capable service (and compute resource) to handle the service request.","For example, consider an exemplary scenario where there are ten services of a certain type instantiated throughout the compute resources of system . Further, suppose that a first user has sent a large processing task to one of the services of the certain type that causes the corresponding compute resource providing that one service to use 99% of its CPU processing capabilities. When a second user wants to locate a service of the same type as the first service to perform a less complicated task than the first user's task, service provisioner  is configured to ensure that the second task is not sent to the first service and its corresponding compute resource because the first service is already over burdened (e.g., CPU usage is high). Accordingly, service provisioner  may be configured to determine a cost value associated with each instantiated foo service in the exemplary scenario based on the current depletion-oriented capability of the compute resource that is running the service. Manager  may use the service cost value to identify and provide a viable service (and corresponding compute resource) to handle the second user's task.","When a cybernode and its corresponding compute resource instantiates a service, an SLA manager  is instantiated as part of the service. SLA manager  may be configured to monitor the capabilities of cybernode  to ensure it maintains the minimum capabilities defined in an SLA associated with cybernode .  shows a flowchart of an exemplary QoS capability monitoring process that may be performed by cybernode  consistent with certain aspects related to the present invention. Initially, when SLA manager  is instantiated with a service, it registers with QOS framework  through measurable capability object  (step ). The registration allows measurable capability object  to recognize SLA manager  as a receiver for threshold events that may be produced by measurable capability object .","During runtime, cybernode  may periodically update its measurable and platform capabilities based on changes caused by performing the instantiated service or services (step ). For example, measurable monitor object  may periodically (e.g., every 5 minutes, hourly, daily, etc.) check the state of any quantitative capabilities (CPU usage, memory usage, etc.) from OS resources and capabilities . Further, platform capability object  may periodically determine whether a specific mechanism associated with compute resource  has changed, such as a database or driver experiencing a fault, etc. Based on the periodic monitoring, compute resource object  may invoke a method on service provisioner  that allows cybernode  to update its corresponding resource capability object  managed by service provisioner . Additionally, or alternatively, compute resource object  may periodically update the resource capability object  maintained by cybernode .","In addition to updating capability object , cybernode  may allow measurable capability object  to provide threshold events to SLA manager  based on the updated capabilities determined in step . In one aspect of the invention, measurable capability object  provides a threshold event  to SLA manager  based on monitored criteria. For example, measurable capability object  may determine whether a cybernode service configuration count has exceeded its threshold (step ). A service configuration count reflects a number of tasks, processes, and any other type of requesting entity that is currently using the instantiated service provided by cybernode . For example, cybernode  may define a maximum threshold of 500 service configurations. Accordingly, if the service provided by cybernode  is currently handling 500 configurations and receives another service request, measurable capability object  may provide a threshold event  to SLA manager  that identifies the type of threshold violation (e.g., service configuration count exceeded).","Accordingly, if measurable capability object  determines that a configuration count threshold has been exceeded (step ; YES), a threshold event is triggered (step ). On the other hand, if the threshold has not been exceeded (step ; NO), measurable capability object  may determine whether one or more measurable capabilities defined in the SLA for cybernode  exceeds its defined threshold value (step ). For example, if measurable capability object  determines that the CPU usage rate for compute resource  defined in SLA  exceeds 80%, a corresponding threshold event  may be triggered. Further, if the exemplary memory usage rate for compute resource  exceeds the exemplary threshold defined in SLA , a corresponding threshold event may be triggered. If more than one measurable capability defined in an SLA has exceeded its threshold, measurable capability object  may generate a single threshold event  that includes information associated with these exceeded capabilities.","In accordance with another aspect of the invention, measurable capability object  may be configured to provide a threshold event when it updates its capabilities in step . In this case, the threshold event  may include the current updated measurable and platform capabilities for compute resource . SLA manager  may then perform monitoring functions similar to those associated with steps  and  to determine whether the service configuration count and\/or an SLA capability has been exceeded by compute resource .","In the event one or more measurable capabilities defined in the SLA has not been exceeded (e.g., compute resource is running below the CPU and memory utilization rates defined in SLA ), cybernode  may allow the compute resource to continue providing the service. Thus, the monitoring process continues at step . If, however, one or more of the measurable capabilities have been exceeded (step ; YES), a threshold event may be triggered by measurable capability object  and provided to SLA manager  (step ). Based on the threshold event, SLA manager  may send a corresponding SLA threshold event  to RCE module  through framework  (step ). In accordance with one aspect of the invention, SLA threshold event includes information associated with the type of threshold exceeded (e.g., service configuration count, type of measurable capability exceeded, etc.).","RCE module  receives SLA threshold event , and based on the information included therein, RCE module  determines one or more actions that are to be performed to handle the corresponding threshold violation(s) (step ). The action(s) may be performed by RCE module  and\/or service provisioner . An action may include, but is not limited to, moving the service running on compute resource  to another cybernode in system  and\/or providing an indication of the threshold event to a user via one or more communication mediums (e.g., pager, e-mail, automated voice response for telephone systems, displaying a message on a display device, etc.). Further, an action may include causing the compute resource to end its registration with service provisioner  as an available resource on system .","For example, when cybernode  provides a resource capability object  to service provisioner  and is subsequently registered as an available resource in system , cybernode  may be granted a lease to receive events from provisioner . A lease may be a mechanism that binds access to, and\/or the use of, a service, resource, provided by an entity for period of time. Thus, in the above exemplary case, the granted lease allows cybernode  to receive, or consume, events from provisioner  for a period of time. The period of time, known as a lease period, may be based on temporal value (e.g., 10 seconds), or one or more conditions. Accordingly, as an available resource, cybernode  is an event consumer that may receive service events from provision manager  to handle one or more requests from a requesting entity. When compute resource  is no longer capable of providing efficient services based on the capabilities defined in its SLA (e.g., SLA threshold event for an exceeded CPU usage rate), enforcement module  may cancel the lease held by cybernode .","Alternatively, cybernode  may be configured to cancel its own lease without the aid of enforcement module . Thus, when its lease is canceled, cybernode  may not be considered as an available resource in system  and allows compute resource  to continue to monitor its measurable and platform capabilities until the platform capability and\/or its resource capability value meets an acceptable level based on changes in one or more of the SLA capabilities defined in the SLA for cybernode . Accordingly, if compute resource  determines that its capabilities meet the SLA requirements, it may create another resource capability object  (or update a previously generated resource capability object) and provide the resource capability object to service provisioner  to (re-)register as an available resource on system .","As described, systems, methods, and articles of manufacture consistent with certain aspects related to the present invention enable a cybernode to register a compute resource with a provision manager based on dynamically changing QoS capabilities. The cybernode may provide a resource capability object that includes a cost value that reflects the ability for the cybernode to provision a service. The provision manager may collect a plurality of cost values for corresponding other cybernodes and provision services to a requesting entity based on the cost values of each cybernode and\/or services that are currently instantiated by the cybernodes. Accordingly, a cost value is provided by each cybernode that is used by the provision manager to enable it to assess the capabilities of the cybernodes and provision a service that has the best opportunity to provide the most efficient resources. Because the cost value is in a universal format, the provision manager may easily assess the capabilities of heterogeneous compute resources to efficiently provision the service.","Further, certain aspects of the present invention allow a cybernode to dynamically monitor its own QoS capabilities and remove itself as an available resource when it determines at any point in time that its compute resource cannot provide a service efficiently. The cybernode may continue to monitor its QoS capabilities and re-register with provision manager when it meets certain QoS capability requirements defines in a SLA.","The foregoing description of implementations of the invention has been presented for purposes of illustration and description. It is not exhaustive and does not limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practicing of the invention. Additional modifications and variations of the invention may be, for example, the described implementation includes software but the present invention may be implemented as a combination of hardware and software or in hardware alone. The invention may be implemented with both object-oriented and non-object-oriented programming systems. For instance, system  may be configured perform QoS dynamic provisioning services in a web services environment. For example, system  may include a web controller that uses a lookup service to notify the controller when any service is instantiate that uses a Web Application aRchive (WAR) description. When the web controller receive such a notification, it may go to a Universal Resource Indicator (URI) included in the WAR descriptor to obtain the WAR and its associated resources and install it into a web container. From the web container, the WAR and associated resources may be made available as a resource in system  through service provisioner .","Additionally, the processes described above with respect to FIGS.  and - are not limited to the sequences illustrated in these figures. One skilled in the art will appreciate that variations to the sequence of steps included in these processes may vary without departing from the scope of the invention. Further, additional steps may be included in these processes to provide the dynamic QoS provisioning features consistent with aspects of the invention. For example, the exemplary QoS capability monitoring process shown in  may include additional step(s) for determining whether the platform capabilities associated with the compute resource meet the threshold platform capabilities defined in the QoS definition (e.g., element  of ). Cybernode  maybe configured to trigger a threshold event when one or more of the platform capabilities of the compute resource does not meet the platform threshold capabilities, which subsequently may resulting RCE module  performing an appropriate action (e.g., canceling the lease held by the cybernode , notifying a user, moving the server provided by the compute resource, etc.).","Furthermore, one skilled in the art would recognize the ability to implement the present invention in many different situations. For example, the present invention can be applied to the telecommunications industry. A complex service, such as a telecommunications customer support system, may be represented as a collection of service elements such as customer service phone lines, routers to route calls to the appropriate customer service entity, and billing for customer services provided. The present invention could also be applied to the defense industry. A complex system, such as a battleship's communications system when planning an attack, may be represented as a collection of service elements including external communications, weapons control, and vessel control.","Additionally, although aspects of the present invention are described as being stored in memory, one skilled in the art will appreciate that these aspects can also be stored on other types of computer-readable media, such as secondary storage devices, like hard disks, floppy disks, or CD-ROM; a carrier wave from the Internet or other propagation medium; or other forms of RAM or ROM. The scope of the invention is defined by the claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention, as claimed. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate several embodiments of the invention and together with the description, serve to explain the principles of the invention. In the drawings:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
