---
title: Bidirectional update of client-server objects
abstract: Methods and apparatus, including computer program products, for updating data. In one aspect, a system that has a server operating on a structure of server data objects and a client operating on a structure of client data objects, the data objects and the structure of the server data objects and the structure of the client data objects being managed through an implementation of a predefined application programming interface that implements at least two types of data object update commands, the data object update commands being operable to perform bidirectional updates between the server data objects and the client data objects. The two types of data object update commands are: an object level update type that is operable to update one or more specified data objects; and a sub-structure level update type that is operable to update a sub-structure of the data objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07574456&OS=07574456&RS=07574456
owner: SAP AG
number: 07574456
owner_city: Walldorf
owner_country: DE
publication_date: 20041216
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to data processing by digital computer, and more particularly to bidirectional update of data objects in a client-server system.","A client-server system typically divides processing and data storage between two separate but linked applications\u2014a client application and a server application. The client application running on the client system present a user interface to the user, enables the user to request data from the server, and presents the requested data to the user. The server application receives data requests from multiple users interacting with multiple client applications. The server application processes the data requests received from multiple clients, and retrieves the requested data. The client-server system can include one or more clients, and the server can be implemented as a centralized server or as one or more distributed servers.","Different types of client-server systems result from different approaches to dividing the processing and data storage between the client and the server. In one type of client-server system, the client application only provides the user interface to the user and all the processing and data storage required for responding to user requested operations is provided by the server application. In this type of client application, the client typically does not store any data required by the client application and all data requests from the client application are transmitted to the server. In an alternative type of client-server application, the client application provides data storage and processing required to respond to the user requested operations, in addition to providing the user interface. In this type of client-server application, data required by the client application is stored at the client and the client can respond to data requests without having to request data from the server.","In general, in one aspect, the invention features a system that has a server operating on a structure of server data objects and a client operating on a structure of client data objects, the data objects and the structure of the server data objects and the structure of the client data objects being managed through an implementation of a predefined application programming interface that implements at least two types of data object update commands, the data object update commands being operable to perform bidirectional updates between the server data objects and the client data objects. The two types of data object update commands are: an object level update type that is operable to update one or more specified data objects; and a sub-structure level update type that is operable to update a sub-structure of the data objects.","The invention can be implemented to include one or more of the following advantageous features. The system also includes a server protocol controller operable to receive one or more modifications to the structure of server data objects in response to a server operation, the server protocol controller transmitting to the client an update command of either the object level update type or the sub-structure level update type to update the structure of client data objects with the modifications to the structure of server data objects, the server protocol controller determining whether to transmit the object level update type or the sub-structure level update type command based on predefined criteria at the server.","The system also includes a client protocol controller operable to receive one or more modifications to the structure of client data objects in response to a server operation, the client protocol controller transmitting to the server an update command of either the object level update type or the sub-structure level update type to update the structure of server data objects with the modifications to the structure of client data objects, the client protocol controller determining whether to transmit the object level update type or the sub-structure level update type command based on predefined criteria at the client.","The client and server implement a data object model, the data object model defining a data structure for representing structure of the server data objects and the structure of the client data objects, the data object model further defining an interface for operating on the data objects and the structure of the server data objects and the structure of the client data objects.","The data objects represent user interface elements, and the data object model is a user interface object model. The data objects represent data types, and the object model is a data type object model. The data object model is an XML document object model.","In general, in another aspect, the invention features a computer program product, tangibly embodied in an information carrier, with instructions operable to receive one or more modifications to a structure of server data objects and to transmit a data object update command to a client, the data object update command being operable to update a structure of client data objects with the modifications to the structure of server data objects, the data objects and the structure of client data objects being managed through an implementation of a predefined application programming interface that implements at least two types of data object update commands, the data object update commands being operable to update the client data objects with the server data objects, wherein the two types of data object update commands are: an object level update type that is operable to update one or more specified data objects, and a sub-structure level update type that is operable to update a sub-structure of the data objects.","In general, in another aspect, the invention features a computer program product, tangibly embodied in an information carrier, the computer program product comprising instructions operable to cause data processing apparatus to receive one or more modifications to a structure of client data objects and transmit a data object update command to a server, the data object update command being operable to update a structure of server data objects with the modifications to the structure of client data objects, the data objects and the structure of server data objects being managed through an implementation of a predefined application programming interface that implements at least two types of data object update commands, the data object update commands being operable to update the server data objects with the client data objects.","In general, in another aspect, the invention features a method including the actions of receiving one or more modifications to a structure of server data objects; and transmitting a data object update command to a client, the data object update command being operable to update a structure of client data objects with the modifications to the structure of server data objects, the data objects and the structure of client data objects being managed through an implementation of a predefined application programming interface that implements at least two types of data object update commands, the data object update commands being operable to update the client data objects with the server data objects.","In general, in another aspect, the invention features a method including the actions of receiving one or more modifications to a structure of client data objects; and transmitting a data object update command to a server, the data object update command being operable to update a structure of server data objects with the modifications to the structure of client data objects, the data objects and the structure of server data objects being managed through an implementation of a predefined application programming interface that implements at least two types of data object update commands, the data object update commands being operable to update the server data objects with the client data objects.","The invention can be implemented to realize one or more of the following advantages. Updates between the client data objects and the server data objects are performed automatically by the protocol commands. The client application and server application are not required to implement operations for performing updates between the client data objects and the server data objects. The client and server can optimize the performance of the client-server system by selecting the type of protocol command used to perform the update operations, i.e., the object level update type command or the sub-structure level update type command. One implementation of the invention provides all of the above advantages.","Details of one or more implementations of the invention are set forth in the accompanying drawings and in the description below. Further features, aspects, and advantages of the invention will become apparent from the description, the drawings, and the claims.","Like reference numbers and designations in the various drawings indicate like elements.","The systems and techniques described here can be implemented in client-server system  illustrated in  that includes a server  and a client . The server  operates on a hierarchical structure of server data objects , and the client  operates on a hierarchical structure of client data objects . Initially, the structure of client data objects  is a copy of the structure of server data objects . The server  and the client  implement a communication protocol for performing bidirectional updates between the client data objects  and the server data objects . The communication protocol specifies protocol commands that can be used to update the structure of server data objects  with modifications made to the structure of client data objects , and to update the structure of client data objects  with modifications made to the structure of server data objects. The communication protocol is implemented at the server  by a server protocol controller , and at the client  by a client protocol controller . The server can include a protocol controller queue  that is used to queue protocol commands that are to be transmitted from the server to the client. Similarly, the client can include a protocol controller queue  that is used to queue protocol commands to be transmitter from the client to the server.","The communication protocol specifies two types of data object update commands for performing bidirectional updates between the structure of server data objects  and the structure of client data objects \u2014an object level update command, and a sub-structure level update command. An object level update command is used to update one or more specified data objects. A sub-structure level update command is used to update a sub-structure of the structure of data objects. The sub-structure level update commands include commands to replace the sub-structure of data objects with a modified sub-structure of data objects, delete a sub-structure of data objects, and merge two or more sub-structures of data objects.","If the server data objects  are modified as a result of operations performed at the server, the server generates the protocol commands to be transmitted to the client in order to update the client data objects . The server protocol controller  transmits the generated protocol commands to the client. The server selects the type of protocol command to be generated, i.e., an object level update command or a sub-structure level update command, based on predefined criteria. The predefined criteria evaluated by the server can include the bandwidth required to transmit the protocol commands, and the number of operations that must be performed at the client to process the transmitted protocol commands, and the number of operations that must be performed at the server to produce the type of protocol command.","Similarly, if the client data objects  are modified as a result of operations performed at the client, the client generates the protocol commands to be transmitted to the server in order to update the server data objects . The client protocol controller  transmits the generated protocol commands to the server. The client selects the type of protocol command to be generated, i.e., an object level update command or a sub-structure level update command, based on predefined criteria. The predefined criteria evaluated by the client can include the bandwidth required to transmit the protocol commands, the number of operations that must be performed at the server to process the transmitted protocol commands, and the number of operations that must be performed at the client to produce the type of protocol commands.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1B","b":["100","115","120","175","120","185","120","175","185","120","175","115","175","170","115","180","115","170","180","115","170","120","170"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["200","205","210","215","220"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3","b":["300","305","310","315"]},"In one implementation, the data objects are user interface (UI) elements structured as a UI tree that specifies relationships between the UI elements. In an alternative implementation, the data objects represent different data types, and their hierarchical arrangement specifies the relationship between the data types, one or more values for each data type, and one or more attributes for each data type. The interface functions provided by the DOM implementations at the client and the server can include interface function that are used to manage individual data objects, e.g., values or attributes of individual data objects. The interface provided by the DOM implementations can also include interface functions that are used to manage the hierarchical structure, e.g., replace an entire sub-structure with a specified sub-structure, delete an entire sub-structure from the hierarchical structure, and merge two or more sub-structures in the hierarchical structure.","The invention and all of the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structural means disclosed in this specification and structural equivalents thereof, or in combinations of them. The invention can be implemented as one or more computer program products, i.e., one or more computer programs tangibly embodied in an information carrier, e.g., in a machine-readable storage device or in a propagated signal, for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. A computer program (also known as a program, software, software application, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file. A program can be stored in a portion of a file that holds other programs or data, in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","The processes and logic flows described in this specification, including the method steps of the invention, can be performed by one or more programmable processors executing one or more computer programs to perform functions of the invention by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus of the invention can be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.","The invention can be implemented in a computing system that includes a back-end component (e.g., a data server), a middleware component (e.g., an application server), or a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the invention), or any combination of such back-end, middleware, and front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), e.g., the Internet.","The client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","The invention has been described in terms of particular embodiments, but other embodiments can be implemented and are within the scope of the following claims. For example, the operations of the invention can be performed in a different order and still achieve desirable results. Other embodiments are within the scope of the following claims"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
