---
title: Method and apparatus for providing end-to-end privacy for distributed computations
abstract: An approach is provided for providing end-to-end privacy in multi-level distributed computations. A distributed computation privacy platform determines one or more privacy policies associated with at least one level of a computational environment. The distributed computation privacy platform also determines one or more computation closures associated with the at least one level of the computational environment. The distributed computation privacy platform further processes and/or facilitates a processing of the one or more privacy policies and the one or more computation closures to cause, at least in part, an enforcement of the one or more privacy policies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08661500&OS=08661500&RS=08661500
owner: Nokia Corporation
number: 08661500
owner_city: Espoo
owner_country: FI
publication_date: 20110520
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","Some Example Embodiments","DESCRIPTION OF SOME EMBODIMENTS"],"p":["Mobile devices with various methods of connectivity are now for many people becoming the primary gateway to the internet and also a major storage point for personal information. This is in addition to the normal range of personal computers and furthermore sensor devices plus internet based providers. Combining these devices together and lately the applications and the information stored by those applications is a major challenge of interoperability. This can be achieved through numerous, individual and personal information spaces in which persons, groups of persons, etc. can place, share, interact and manipulate (or program devices to automatically perform the planning, interaction and manipulation of) webs of information with their own locally agreed semantics without necessarily conforming to an unobtainable, global whole.","Furthermore, in addition to information, the information spaces may be combined with webs of shared and interactive computations or computation spaces so that the devices having connectivity to the computation spaces can have the information in the information space manipulated within the computation space environment and the results delivered to the device, rather than the whole process being performed locally in the device. It is noted that such computation spaces may consist of connectivity between devices, from devices to network infrastructure, to distributed information spaces so that computations can be executed where enough computational elements are available. These combined information spaces and computation spaces often referred to as computation clouds, are extensions of the \u2018Giant Global Graph\u2019 in which one can apply semantics and reasoning at a local level.","In one example, clouds are working spaces respectively embedded with distributed information and computation infrastructures spanned around computers, information appliances, processing devices and sensors that allow people to work efficiently through access to information and computations from computers or other devices. An information space or a computation space can be rendered by the computation devices physically presented as heterogeneous networks (wired and wireless). On the other hand, different levels of proactive, reactive or a mixture of computational elements may be available to the device in various other components of various architectural levels (e.g. device level, infrastructure level, etc.), wherein different distributed components may have different capabilities and support different processes. In various example circumstances, to enhance the information processing power of a device and reduce the processing cost, one might consider minimizing or at least significantly improving exchange of data, information and computations among the distributed components within a computational environment by providing multi-level distributed computations, such that the data can be migrated to the closest possible computation level with minimized or improved cost.","However, despite the fact that information and computation presented by the respective levels of computation environment can be distributed with different granularity, still there are challenges in certain example implementations to achieve scalable high context information processing within such heterogeneous environments. For example, in various implementations, due to distributed nature of the environment, (e.g., devices, infrastructures, and clouds), data, information, and computation elements (e.g., computation closures) are being exchanged among distributed devices within heterogeneous network environments wherein information with various levels of granularity and various structures is provided by and transmitted among various independent sources (e.g. owners). In such environments, achieving the end-to-end privacy of exchanged information and computation closures, development time and runtime authentication and contextual validation is an important issue.","Therefore, there is a need for an approach for providing end-to-end privacy in multi-level distributed computations.","According to one embodiment, a method comprises determining one or more privacy policies associated with at least one level of a computational environment. The method also comprises determining one or more computation closures associated with the at least one level of the computational environment. The method further comprises processing and\/or facilitating a processing of the one or more privacy policies and the one or more computation closures to determine whether to cause, at least in part, an enforcement of the one or more privacy policies.","According to another embodiment, an apparatus comprises at least one processor, and at least one memory including computer program code, the at least one memory and the computer program code configured to, with the at least one processor, cause, at least in part, the apparatus to determine one or more privacy policies associated with at least one level of a computational environment. The apparatus is also caused to determine one or more computation closures associated with the at least one level of the computational environment. The apparatus is further caused to process and\/or facilitate a processing of the one or more privacy policies and the one or more computation closures to determine whether to cause, at least in part, an enforcement of the one or more privacy policies.","According to another embodiment, a computer-readable storage medium carries one or more sequences of one or more instructions which, when executed by one or more processors, cause, at least in part, an apparatus to determine one or more privacy policies associated with at least one level of a computational environment. The apparatus is also caused to determine one or more computation closures associated with the at least one level of the computational environment. The apparatus is further caused to process and\/or facilitate a processing of the one or more privacy policies and the one or more computation closures to determine whether to cause, at least in part, an enforcement of the one or more privacy policies.","According to another embodiment, an apparatus comprises means for determining one or more privacy policies associated with at least one level of a computational environment. The apparatus also comprises means for determining one or more computation closures associated with the at least one level of the computational environment. The apparatus further comprises means for processing and\/or facilitating a processing of the one or more privacy policies and the one or more computation closures to determine whether to cause, at least in part, an enforcement of the one or more privacy policies.","In addition, for various example embodiments of the invention, the following is applicable: a method comprising facilitating a processing of and\/or processing (1) data and\/or (2) information and\/or (3) at least one signal, the (1) data and\/or (2) information and\/or (3) at least one signal based, at least in part, on (or derived at least in part from) any one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","For various example embodiments of the invention, the following is also applicable: a method comprising facilitating access to at least one interface configured to allow access to at least one service, the at least one service configured to perform any one or any combination of network or service provider methods (or processes) disclosed in this application.","For various example embodiments of the invention, the following is also applicable: a method comprising facilitating creating and\/or facilitating modifying (1) at least one device user interface element and\/or (2) at least one device user interface functionality, the (1) at least one device user interface element and\/or (2) at least one device user interface functionality based, at least in part, on data and\/or information resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention, and\/or at least one signal resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","For various example embodiments of the invention, the following is also applicable: a method comprising creating and\/or modifying (1) at least one device user interface element and\/or (2) at least one device user interface functionality, the (1) at least one device user interface element and\/or (2) at least one device user interface functionality based at least in part on data and\/or information resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention, and\/or at least one signal resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","In various example embodiments, the methods (or processes) can be accomplished on the service provider side or on the mobile device side or in any shared way between service provider and mobile device with actions being performed on both sides.","For various example embodiments, the following is applicable: An apparatus comprising means for performing the method of any of originally filed claims -, -, and -.","Still other aspects, features, and advantages of the invention are readily apparent from the following detailed description, simply by illustrating a number of particular embodiments and implementations, including the best mode contemplated for carrying out the invention. The invention is also capable of other and different embodiments, and its several details can be modified in various obvious respects, all without departing from the spirit and scope of the invention. Accordingly, the drawings and description are to be regarded as illustrative in nature, and not as restrictive.","Examples of a method, apparatus, and computer program for providing end-to-end privacy in multi-level distributed computations are disclosed. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention. It is apparent, however, to one skilled in the art that the embodiments of the invention may be practiced without these specific details or with an equivalent arrangement. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the embodiments of the invention.","As used herein, the term \u201ccomputation closure\u201d identifies a particular computation procedure together with relations and communications among various processes including passing arguments, sharing process results, selecting results provided from computation of alternative inputs, flow of data and process results, etc. The computation closures (e.g., a granular reflective set of instructions, data, and\/or related execution context or state) provide the capability of slicing of computations for processes and transmitting the computation slices between devices, infrastructures and information sources.","As used herein, the term \u201ccloud\u201d refers to an aggregated set of information and computation closures from different sources. This multi-sourcing is very flexible since it accounts and relies on the observation that the same piece of information or computation can come from different sources. In one embodiment, information and computations within the cloud are represented using Semantic Web standards such as Resource Description Framework (RDF), RDF Schema (RDFS), OWL (Web Ontology Language), FOAF (Friend of a Friend ontology), rule sets in RuleML (Rule Markup Language), etc. Furthermore, as used herein, RDF refers to a family of World Wide Web Consortium (W3C) specifications originally designed as a metadata data model. It has come to be used as a general method for conceptual description or modeling of information and computations that is implemented in web resources; using a variety of syntax formats. Although various embodiments are described with respect to clouds, it is contemplated that the approach described herein may be used with other structures and conceptual description methods used to create distributed models of information and computations.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1"},"The basic concept of cloud computing technology provides access to distributed computations for various devices within the scope of the cloud, in such a way that the distributed nature of the computations is hidden from users and it appears to a user as if all the computations are performed on the same device. The cloud computing also enables a user to have control over computation distribution by transferring computations between devices that the user has access to. For example, a user may want to transfer computations among work devices, home devices, and portable devices, other private and public devices, etc. Alternatively, a user, a manufacturer, a system administrator, etc. may set up the elements of a computational architecture or environment in a way that computation transfer among various elements and\/or levels of the environment is automatically activated based on predefined and periodically measured factors. In this case, all or parts of computation transfer may run in the background either throughout the end-to-end distribution path from device level to cloud level, or only in some levels (e.g. device level). The computation distributions that take place in the background may be hidden from the device users. Alternatively, the users may receive messages indicating that distribution is running on the background. Current technologies enable a user of a mobile device to manipulate contexts such as data and information via the elements of a user interface of their user equipment. However, distribution of computations and processes related to or acting on the data and information within the cloud is typically controlled by the system. In other words, a cloud in general does not provide a user (e.g., an owner of a collection of information distributed over the information space) with the ability to control distribution of related computations and processes of, for instance, applications acting on the information. For example, a contact management application that processes contact information distributed within one or more clouds generally executes on a single device (e.g., with all processes and computations of the application also executing on the same device) to operate on the distributed information. In some cases (e.g., when computations are complex, the data set is large, etc.), providing a means to also distribute the related computations in addition to the information is advantageous.","This goal is achieved by introduction of the capability to construct, distribute, and aggregate computations as well as their related data. More specifically, to enable a user of a cloud (e.g., a mobile device user, an application developer, etc.) who connects to the cloud via one or more devices, to distribute computations among the one or more user devices or other devices with access to the cloud, each computation is deconstructed to its basic or primitive processes or computation closures. Once a computation is divided into its primitive computation closures, the processes within or represented by each closure may be executed in a distributed fashion and the processing results can be collected and aggregated into the result of the execution of the initial overall computation.","In one embodiment, a computational architecture or environment consists of a plurality of architectural levels, including a device level, and infrastructure level, and a cloud computing level. A device from the device level has connectivity to the cloud computing level via one or more infrastructure levels, wherein each infrastructure level may consist of layers and components such as backbones, routers, base stations, etc. Typically, the computation closures associated with a process related to a device from device level are defined, constructed, and executed within the cloud computing level which may have various levels of distribution as well. However, the components of the infrastructure levels may be equipped with various resources (e.g., processing environments, storage spaces, etc.) that can be utilized for the execution of computation closures associated with a process. Since the infrastructure level functions as an interface between the device level and the cloud computing level, if the computation closures can be executed in the infrastructure level, there will be no need for the computation closures to be migrated to the cloud computing level that may very well require excessive use of resources. Therefore, execution of computation closures associated with a process related to a device at the infrastructure level can provide services to device users in a more efficient manner. However, components of a multi-level architectural environment composed of device level, infrastructure level and cloud level each may differ in configuration, communication capability, policies applied in terms of ownership, privacy and security of distributed computations, etc.","In one embodiment, the closures may be signed with signatures that are generated by means of isomorphic transformations thus represent domain independent fragments that could be interpreted in some cases as at least meaningful information sets. Furthermore, distribution, access and execution of computation closures among components and levels of a multi-level architectural environment may require compatibility among privacy policies and rules imposed by various components and levels of environment.","In one embodiment, a multi-level computation environment includes policies for privacy execution and validation in device, infrastructure and cloud levels of the computational environment. The policies may consist of privacy policy enforcement, privacy execution domain at device, infrastructure, and cloud levels, wherein each domain may provide its own privacy policy. It is noted that privacy policy for signed flows of computational closure (e.g. functional flows) at device, infrastructure, and cloud levels may have overlapping capabilities which affect overall results. For example, some devices may have power limitations and this limitation may be reflected in the privacy policy rules and information sharing for that device.","In one embodiment, privacy policies provide different degrees of what and how various rule enforcements are applied on information and computations. Additionally, privacy policies may be based on probabilistic logic, first order logic, logics of higher orders, etc. For example, in a probabilistic policy computations and their associated closures may affect privacy or for a policy based on first order logic there may exist direct links to the closures where privacy rules can be applied.","In one embodiment, a computation closure privacy policy may consist of policy rules, and mechanisms for applying the rules accordingly. The policy application mechanisms may be grouped into three main categories as encryption, filtering, and anonymization. Furthermore, the computational closures are used based on privacy policy enforcement and signing of closure mechanisms. The total solution creates a balance between security, privacy and energy limitation settings and threshold to each multi-level computation environment setting consisting of device level, infrastructure level and cloud level.","In various embodiments, any fault in privacy rules, policies or mechanisms may lead to malfunctioning of one or more privacy policies. In such situations, the decomposition of privacy policies may not be manageable or resolvable.","In one embodiment, different components of each architectural level support different types of closures with different levels and\/or types of privacy defined, enforced, or a combination thereof. Each component (e.g. infrastructure component, node) may have a number of previously created privacy enforced entities, closures, links, and distribution paths for the distribution and execution of the computation closures such as connectors between closures, multiple branches, interaction points, rules, etc., that can significantly affect the efficiency of distribution and execution of computations and end-to-end privacy of the computations in multi-level environments.","In one embodiment, the computations can be transferred and\/or expanded from one component to another or from an architectural level to another (e.g. from infrastructure to cloud). Components and levels of multi-level computation environment may be equipped with privacy policies in order to verify privacy policies enforced by other components to ensure computation privacy. For example, computations signed as highly private may be regarded as inaccessible. However, various privacy policies may be based on different rules, verification methods, encoding and decoding mechanisms, etc.","In another embodiment, complex or compound computational closures (also referred to as superclosures) that may represent various computations and are formed based on combination of one or more primitive computation closures, may be associated with complex or compound privacy policies formed based on combination of one or more policies of their primitive computation closures (also referred to as root elements). In this embodiment, for example, failure or malfunctioning of a superclosure may be caused by the failure or malfunctioning of its compound privacy policy which in turn may be caused by failure or malfunctioning of one or more of its root element policies. In order to find the defected root elements the compound policy may have to be decomposed. However, current multi-level environments do not have privacy rules or policies that can hide the computational closure flow ownership. There are no mechanisms for decomposing the right privacy policy rule applied to certain functional flow and there are no mechanisms for computational closure privacy policies to enforce the method of the encryption.","Therefore, there is a challenge to achieve computation privacy within a heterogeneous environment of multi-level environments, wherein computations with various levels of granularity and various structures are provided, signed and transmitted among various independent sources.","To address this problem, a system  of  introduces the capability to provide end-to-end privacy in multi-level distributed computations. A computational environment consists of different levels of proactive computational elements available for various levels of the computational environment such as device level, infrastructure level, and cloud computing level. Since these computational elements provide various levels of functionality for each of the levels of the environment, providing different levels of distribution of the computational closures within the computational environment enables the execution of the computational closures after the least required level of distribution. However, a very important functionality for execution of computational closures is to detect, identify, and determine computation privacy and to ensure privacy of computational closures, by creating compatibility among various types and levels of existing privacy measures at each part of the multi-level computational environment.","In one embodiment, a cloud may include a superset of closure elements (e.g. closure primitives) and a superset (also referred to as a lattice) of privacy policy root elements while the infrastructure or device level components may have subsets of, and therefore the cloud may be capable of supporting computational closures and their privacy more effectively compared to the infrastructure or device levels.","In one embodiment, device setup at various architectural levels such as privacy settings, security settings, quality of service (QOS) settings, class of service (COS) settings, priority settings etc., may affect direction and method of computational closure distribution, as different setups may lead to different situations and different available distribution paths and requirements. Additionally, computation closures' privacy can be affected by other features of architectural levels such as security enforcement strategies, etc. On the other hand, ensuring privacy enforced distribution between different architectural levels and components can be achieved by different levels of computation distribution.","In one embodiment, certain amount of computation functionality can be transferred from device level to infrastructure level or further to cloud level depending on the available capabilities and requirements at each level. For example, for computations associated with a public device that is used commonly by multiple users, a strict privacy enforcement measure may not be necessary, while private and confidential computations may require more advanced measures (e.g. policy enforcements).","In another embodiment, when an infrastructure node has a limited privacy support capability, the computations may be transferred to a next nearest node with higher privacy capabilities where computation can continue, and redistributed to the cloud level if there is no infrastructure node with sufficient privacy support capability. It is noted that various factors such as different device setups, limitations, configurations, any changes that occur in the setups, limitations and configurations during the runtime, etc. may change the direction of computation closure distribution, as privacy support capabilities may change in accordance with the changing factors. Additionally, a threshold value for the lowest acceptable level of privacy can be associated with the computations. In such case, if neither of the levels of the environment has sufficient capability for the execution of the computations, one or more functions can be activated to for example, terminate the computation, issue a request for higher privacy capabilities, issue an error message to the owner of the computation, replace the computation with similar computations with lower privacy requirement, etc.","In one embodiment, operations can be performed to determine and compare privacy of computation closure processes between devices and infrastructures and between infrastructures and clouds. It can also be determined where it is more cost effective to transfer computation closures to, what the acceptable range of privacy for one or a group of computation closures is (taking into account other capabilities relevant for the computation such as security levels and rules, energy issues like battery vs. main power plug connection, etc). Furthermore, each policy can be associated with a privacy level so that proper policies can be assigned to computations based on their privacy requirements.","In one embodiment, in a multi-level computation environment associated with a specific privacy mechanism, functional flows or groups of distributed computational closures may be signed by unique compound policies composed of the policies of their constituting closure primitives and the compound policies are connected to the privacy mechanism.","As shown in , the system  comprises sets -of user equipments (UEs) -having connectivity to a distributed computation privacy platform  via a communication network . By way of example, the communication network  of system  includes one or more networks such as a data network (not shown), a wireless network (not shown), a telephony network (not shown), or any combination thereof. It is contemplated that the data network may be any local area network (LAN), metropolitan area network (MAN), wide area network (WAN), a public data network (e.g., the Internet), short range wireless network, or any other suitable packet-switched network, such as a commercially owned, proprietary packet-switched network, e.g., a proprietary cable or fiber-optic network, and the like, or any combination thereof. In addition, the wireless network may be, for example, a cellular network and may employ various technologies including enhanced data rates for global evolution (EDGE), general packet radio service (GPRS), global system for mobile communications (GSM), Internet protocol multimedia subsystem (IMS), universal mobile telecommunications system (UMTS), etc., as well as any other suitable wireless medium, e.g., worldwide interoperability for microwave access (WiMAX), Long Term Evolution (LTE) networks, code division multiple access (CDMA), wideband code division multiple access (WCDMA), wireless fidelity (WiFi), wireless LAN (WLAN), Bluetooth\u00ae, Internet Protocol (IP) data casting, satellite, mobile ad-hoc network (MANET), and the like, or any combination thereof.","The UEs -are any type of mobile terminal, fixed terminal, or portable terminal including a mobile handset, station, unit, device, multimedia computer, multimedia tablet, Internet node, communicator, desktop computer, laptop computer, notebook computer, netbook computer, tablet computer, personal communication system (PCS) device, personal navigation device, personal digital assistants (PDAs), audio\/video player, digital camera\/camcorder, positioning device, television receiver, radio broadcast receiver, electronic book device, game device, or any combination thereof, including the accessories and peripherals of these devices, or any combination thereof. It is also contemplated that the UE -can support any type of interface to the user (such as \u201cwearable\u201d circuitry, etc.).","In one embodiment, the UEs -are respectively equipped with one or more user interfaces (UI) -. Each UI -may consist of several UI elements (not shown) at any time, depending on the service that is being used. UI elements may be icons representing user contexts such as information (e.g., music information, contact information, video information, etc.), functions (e.g., setup, search, etc.) and\/or processes (e.g., download, play, edit, save, etc.). These contexts may require certain sets of media dependent computational closures, which may affect the service, for example the bit error rate, etc. Additionally, each UI element may be bound to a context\/process by granular distribution. In one embodiment, granular distribution enables processes to be implicitly or explicitly migrated between devices, computation clouds, and other infrastructure. Additionally, a UE -may be a mobile device with embedded Radio Frequency (RF) tag system of device to device connections such that computational operations and content can be locally transmitted among devices.","In one embodiment, process distribution can be initiated for example by means of unicast (e.g., to just another device) or multicast (e.g., to multiple other devices). For example one UE may communicate with many infrastructures (or many components of many infrastructures), while many nodes of infrastructures may communicate with multiple clouds. Additionally, process distribution may be triggered via gesture recognition, wherein the user preselects a particular set of UI elements and makes a gesture to simulate \u201cpouring\u201d the selected UE elements from one device to another. In other embodiments, process distribution may be initiated automatically without direct user involvement and based on default setup by the manufacturer of the UE -, previous setup by the user of the UE, default setup in an application activated on or associated with a UE -, or a combination thereof.","As seen in , a user of UEs -may own, use, or otherwise have access to various pieces of information and computations distributed over one or more computation clouds -in information stores -and computation stores -where each of the one or more computation spaces -include multiple sets of one or more computation closures. In one embodiment, the user may be an application developer that uses a UE -to connect to the infrastructure and the cloud not only for accessing the services provided for end users but also for activities such as developing, distributing, processing, and aggregating various computations.","In one embodiment, the communication network  consists of one or more infrastructures -wherein each infrastructure is a designed communication system including multiple components -. The components -include backbones, routers, switches, wireless access points, access methods, protocols, etc. used for communication within the communication network  or between communication network  and other networks.","In one embodiment, the distributed computation privacy platform  controls the distribution of computations associated with UEs -to other components or levels of the computational environment including the infrastructure level -within the environment of the communication network , and the cloud level -, based on privacy policies and privacy enforcement associated with different architectural levels and privacy requirements of computations.","In one embodiment, privacy verification of computation distribution may be initiated by the user, or based on a background activity for example by triggering a sequence of computation closures which in turn support distribution process. Prior to computation distribution the capabilities, including the privacy capabilities of components performing the computations, are evaluated. If capabilities of an architectural level are not satisfactory or changes in capabilities are found, the evaluation process will continue until proper capabilities become available. The privacy capabilities may be found in the same or other levels of the computational environment and the computation closure execution will be performed at the level where available capabilities are found.","In another embodiment, network components -may provide different levels of functionality. For example, some components -may provide static computational closures while others may provide dynamic computational closures. As used herein, static computational closures are closures with predetermined configurations, which in return may require a predefined level of privacy for execution, while dynamic computational closures are closures that may function differently based on dynamic factors such as time, traffic load, type or amount of available privacy, etc. In one embodiment, a dynamic computation closure may adjust itself based on the dynamic factors by modifying parameters such as the level of available privacy. For example, a dynamic computation closure may downgrade itself in order to be handled with a lower level of privacy. In other embodiments, critical computation closures may be assigned lower and upper acceptable privacy thresholds wherein available privacy within that range is acceptable.","In one embodiment the level and type of available privacy at a component of the infrastructure -may or may not be aligned with the required privacy by computation closures of UE -through a one to one mapping. This means that the component may need to locate (or request) other components with higher levels of privacy capabilities from current or next layer or level of the computational environment and forward the computations to located components. The component may also have the capability to adjust its privacy settings and adapt its privacy capability to the computation requirements. In other words, if the privacy availability between a process and its processing environment is not directly aligned, the processing environment may expand its capabilities (for dynamic closures) or locate other components (for static closures) or a combination thereof. In one embodiment, if neither the direct alignment succeeds nor alternate environment is found, the setup may be aligned with lower privacy requirements. The requirements may be lowered, for example by dropping part of the computational closures, substituting complex computations with more primitive computations that may produce less accurate, but accurate enough for user's needs, results. Additionally, the satisfaction threshold may be lowered (with service provider and user's agreement) so that a lower level of computation privacy can be considered as satisfactory.","In one embodiment, a user of UEs -may select certain dynamic computation flows to be used as default computation flow under certain conditions, for example in determined times, for specifically determined computation privacy levels, etc. In this embodiment, the distributed computation privacy platform  may associate specific levels of priority to the selected computation flows such that, if available, the selected computation flows have priority over other available computations. The selected computation flows and the assigned priorities can determine levels of satisfaction threshold for the user of UEs -","In one embodiment, the computational closures available in multiple levels of device level -, infrastructure level -, and cloud level -and their associated policies are either aligned, meaning that all the computational closures and policies are available in every level, or a super-set of all computational closures and policies is available at cloud level while each lower level has access to a sub-set of the computational closures and policies from its higher level, for example infrastructure level computational closures and policies may be a sub-set of the closures and policies of cloud level and device level closures and policies a sub-set of the infrastructure level closures and policies. Additionally, levels of the computational environment may have sets of functionally equivalent computational closures in the sense that they perform the same process and produce the same results with different levels of accuracy in return for different levels of privacy requirement. For example, a set of computations providing a map including some restricted areas with high privacy requirements, may provide the map and exclude the information associated with the restricted area, if a processing environment with sufficient privacy capability cannot be found.","In one embodiment, existence of computations with high priority in a functional flow may affect other computations, such as computations with low priorities, in the functional flow or in other functional flows. In one embodiment, one or more parameters can be associated with each, or a group of, computation closures, wherein the closure priorities can be modified by updating those parameters. For example, parameters such as \u201cused\u201d, \u201cunused\u201d, \u201cavailable\u201d, \u201cunavailable\u201d, \u201cdisabled\u201d, \u201cenabled\u201d, \u201cturbo\u201d, etc. can be assigned to closures for determining closure priorities. For example, a group of computation closures that have been disabled can be enabled through a system update, a security key, etc. in order to provide a required level of privacy.","In one embodiment, a compound privacy policy and its associated superclosures may be decomposed and matched into the computation flow (flow of computation distribution). In other embodiments, the components and levels of environment can compile, execute and submit their compound privacy policies and superclosures to the cloud so that cloud can maintain a lattice of all the available policies, compound policies, closures and superclosures throughout the multi-level computation environment. The lattice of the cloud is a superset of all the policies, compound policies, closures and superclosures that other levels of the environment such as UEs -(components of device level) and infrastructures -have access to. The levels of a computational environment executing at least one of the one or more computation closures, at least one functional flow, or a combination thereof, have access to root elements associated with those closures and functional flows.","In one embodiment, no differentiation is distinguished between authentication of computations in development time and run time of the end-to-end computation. The distributed computation privacy platform  provides early validation (at component level before the distribution) and contextual validation, wherein closure capabilities (e.g. energy consumption, security elements, privacy rules, etc.) can be represented as data. Additionally, the distributed computation privacy platform  may determine if certain root elements have been changed so that all policies using that element can be isolated and marked as invalid.","By way of example, the UEs -, and the distributed computation privacy platform  communicate with each other and other components of the communication network  using well known, new or still developing protocols. In this context, a protocol includes a set of rules defining how the network nodes within the communication network  interact with each other based on information sent over the communication links. The protocols are effective at different layers of operation within each node, from generating and receiving physical signals of various types, to selecting a link for transferring those signals, to the format of information indicated by those signals, to identifying which software application executing on a computer system sends or receives the information. The conceptually different layers of protocols for exchanging information over a network are described in the Open Systems Interconnection (OSI) Reference Model.","Communications between the network nodes are typically effected by exchanging discrete packets of data. Each packet typically comprises (1) header information associated with a particular protocol, and (2) payload information that follows the header information and contains information that may be processed independently of that particular protocol. In some protocols, the packet includes (3) trailer information following the payload and indicating the end of the payload information. The header includes information such as the source of the packet, its destination, the length of the payload, and other properties used by the protocol. Often, the data in the payload for the particular protocol includes a header and payload for a different protocol associated with a different, higher layer of the OSI Reference Model. The header for a particular protocol typically indicates a type for the next protocol contained in its payload. The higher layer protocol is said to be encapsulated in the lower layer protocol. The headers included in a packet traversing multiple heterogeneous networks, such as the Internet, typically include a physical (layer 1) header, a data-link (layer 2) header, an internetwork (layer 3) header and a transport (layer 4) header, and various application (layer 5, layer 6 and layer 7) headers as defined by the OSI Reference Model.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 2","b":["201","203","205","207"]},{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 2","FIG. 3","FIG. 3","FIG. 12"],"b":["300","103","300","107","103","107","107","107","103"],"i":["a","a ","a"]},"In one embodiment, as shown in step  of flowchart  in , the policy enforcement module  determines one or more privacy policies associated with at least one level of a computational environment within the system . The levels of a computational environment include, at least in part, a device level -, an infrastructure level -, and a cloud computation level -. Each level of the environment may have its own privacy policies imposed by manufacturers, device owners, system administrators, management policy agreements, etc. The privacy policy associated with each level of the computational environment or associated with each component of a level of the computational environment may be locally stored in local storage units of UEs -(not shown), of network infrastructures -and their components such as routers, base stations, etc. (not shown), of computation clouds -, for example in information stores -or other storage units (not shown) or in distributed locations within the environment of communication network .","In one embodiment, per step  of , the policy enforcement module  determines one or more computation closures associated with the at least one level of the computational environment. As previously discussed with regards to , in a multi-level distributed computation environment, the processes within or represented by each computation closure may be executed in a distributed fashion by different levels of the environment and the processing results can be collected and aggregated into the result of the execution of the initial overall computation. In step  of , the policy enforcement module  determines the computation closures that are going to be executed by each level of the environment.","In one embodiment, per step  of , the policy enforcement module  determines that at least one capability of at least one of the one or more computation closures is for causing or for determining whether to cause, at least in part, the enforcement of the one or more privacy policies. In a distributed environment with multiple levels of execution components, multiple privacy policies for each level and multiple computation closures to be executed by various levels, having at least one computation closure that provides information associated with the enforcement of privacy policies can ensure that privacy policies are enforced wherever necessary. In one embodiment, where at least one computation closure capable of causing the enforcement of the one or more privacy policies does not exist, the policy enforcement module  may pre-create at least one computation closure with the desired capability for privacy policy enforcement and add the pre-created closures to the set of computation closures on which the privacy policies are going to be enforced.","In one embodiment, per step  of , the closure combining module  determines one or more parameters for capabilities of components (nodes) of the computational environment, functional flows, cost functions, rules, etc. These parameters enable the combination of computation closures into groups with similar characteristics which similar or same privacy policies apply to. For example, in some embodiments, certain amount of computation functionality (functional flows) can be transferred from certain devices to certain infrastructure level components or further to specific clouds depending on the available capabilities at each level and requirements of each closure. For example, for computations associated with a public device that is used commonly by multiple users, a strict privacy measure may not be necessary, while private and confidential computations may require more advanced privacy measures. In one embodiment, the one or more capabilities of the components of the levels of computational environment may include, at least in part, one or more energy consumption capabilities, one or more security enforcement capabilities, one or more privacy enforcement capabilities, one or more available resources (such as for example, connection quality, bandwidth, available memory, processing power, etc.), or a combination thereof. Furthermore, parameters such as cost functions identifying computation cost at each computational level, component, etc., rules associated with each level, component, etc. or a combination thereof can be considered while combining the closures. These parameters enable providing more cost efficient combined closure groups and provide insights for distributing the closures to components of the environment in a way to avoid conflicts between the rules of the execution environments and the rules applied on the closures that are being executed.","In one embodiment, per step  of , the closure combining module  causes, at least in part, a combination of the at least one of the one or more computation closures with one or more other computation closures based, at least in part, on the one or more determined parameters. As previously stated, combining the closures into groups with common policy requirements enables the enforcement of shared privacy policies on closures of each group instead of enforcing the privacy policies on every closures individually.","In one embodiment, per step  of , the policy enforcement module  determines one or more other privacy policies associated with at least one other level of the computational environment. As previously described, in a distributed computation environment with different levels of environment and different components, each component or level of the environment may have its own set of privacy policies which need to be combined in order for the distribution of computations among the components and level to be possible. For example, for a set of computation closures associated with a process to be distributed from a UE -at device level to one or more components of the infrastructure level -or to cloud level -, at least the privacy policies of the point of origin of the closures and the destination point of the closures need to be determined and combined.","In one embodiment, per step  of , the mechanism determination module  processes the one or more privacy policies, the one or more computation closures, or a combination thereof to determine one or more mechanisms for the enforcement of the one or more privacy policies. The mechanisms may include, at least in part, one or more encryption mechanisms, one or more filtering mechanisms, one or more anonymization mechanisms, or a combination thereof, wherein encryption method has a direct link to security capabilities of computation closures. Filtering process may exclude one or more computation closures from the set of computation closures that is going to be executed, in order to produce a new set that its privacy requirements would match with the privacy capabilities of the execution environment. The anonymization process may make the computation closures untraceable, for example by removing the sensitive information that may also reveal closure ownerships. It is noted that various privacy policies belong to one or a combination of these main mechanisms. In one embodiment, the mechanism determination module  determines the one or more mechanisms based, at least in part, on the at least one level of the computational environment. It is noted that various levels of the environment may have different rules that require enforcement of specific mechanisms.","In one embodiment, per step  of , the policy enforcement module  processes the one or more determined privacy policies, and the one or more determined computation closures, to cause, at least in part, an enforcement of the one or more privacy policies on the computation closures. The policy enforcement module  uses the determined capabilities of computation closures, determined capabilities of levels of environment, determined parameters, determined mechanisms, etc. for policy enforcement process. In this process, the policy enforcement module  may create a mapping between the policies associated with each level of the computational environment and the computation closures that are going to be executed on the respective levels. The policy enforcement may be performed by incorporating policy related information into the data structures representing each computation closure, by associating common policies to sets of closures with shared policies, by generating specific policy data formats and creating links between the policy data and the closure data, or a combination thereof. Privacy policy enforcement enables certain applications with selected\/different technologies to be executed based on the application needs, for example whether closure encryption is allowed, whether filtering is allowed and does filtering leads to information loss or lossless filtering is possible, etc. There may be different degrees as to how much policy enforcement is required and\/or allowed.","Furthermore, in various embodiments the policy enforcement module , the closure combining module  and the mechanism determination module  may store the intermediate or final results from their processes in storage , access the data or the results provided by other modules and components from storage , or a combination thereof.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 4","FIG. 3","FIG. 4"],"b":["101","107","107","107","107","401","107","403","401","403","401","403","103","107","107","401","403","103","201","117","117","111","111","117","117","117","401","403","401","119","119","117","405","403","119","119","117","407","117","111","111","411","413","401","107","119","119","117","111","111","107","107"],"i":["a","b","c","a ","b ","a ","b ","a","c ","a","n ","a","b","c ","a ","c ","a ","b ","d ","a ","a ","a","n ","a","a ","c ","a ","a","n ","a ","b. "]},"In one embodiment, the distributed computation privacy platform  may periodically receive updated information about new privacy policies and available privacy enforcing components and paths, privacy statuses and updated privacy parameters from devices, the infrastructures and the clouds. Additionally, the distributed computation privacy platform  may periodically request updates from the device, infrastructures and\/or clouds about the availability status of privacy enforcing components and paths.","As previously discussed, the capabilities and privacy policies availability of either point of the distribution (e.g. UE or component ) may change. For example, if a case of privacy breach is detected, the components of the distributed computation privacy platform  determine the changes and adjust the policies, capabilities, parameters accordingly for the distributed computation privacy platform  to troubleshoot and detect cause of the breach and prevent the event from happening again. It is noted that storage  may be used for the storage of local data associated with the components of the infrastructures -such as component capabilities, requirements, etc.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIGS. 5A-5B","FIG. 5A","FIG. 5A"],"b":["501","501","503","503","505","505","503","503"],"i":["a","d","a","c ","a","d"]},"In one embodiment, connectors may contain information about parameters such as privacy requirement and\/or capabilities, functional flows, distribution maps, links between closures and architectural levels, etc. Arrows connecting closures to connectors and connectors to next closures show the functional flow adopted based on the parameters. As seen in , the closures have been distributed from component  to component  via communication between connector and connector . The computation branch of component  includes closures -communicating via connectors and , while branches  and  communicate via connectors and . Similarly, a third branch  has been formed of closures -being executed at component  and connected by connectors and , while the branch communicates with other branches via connector ","In one embodiment, the initial branch  may be in a UE -, the second branch  in a component of the infrastructure -, and the third branch in another component of the same infrastructure, a different infrastructure, in a cloud, or a combination thereof.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 5B","FIG. 5B"],"b":["531","531","533","533","535","535","533","533","571","547","559"],"i":["a","d","a","c ","a","d "]},"In one embodiment, connectors may contain information about parameters such as capabilities including privacy requirements and availability, a cost function, functional flow specifications, distribution maps, links between closures and architectural levels, etc. Arrows connecting closures to connectors and connectors to next closures show the functional flow adopted based on the parameters. For example, star signs -, -, and -, represent privacy policy rules imposed on the closures and the signs -represent the policy rules imposed on superclosures (e.g., combined closures provided by the closure combining module ) by the user of UEs -, default by the manufacturer of UEs -, by the infrastructures -, by the clouds -, or a combination thereof, and associated with each closure -, -, and -respectively. Additionally, blocks -, -, and -represent processed privacy policies associated with one or more closures, and blocks -represent combination of privacy policies for one or more superclosures. In the example of , the privacy policy shows the policy for closure based on the privacy rules . In one embodiment, if privacy policy is in accordance with rules , the imposed policies are validated and the closure can be distributed, however if policies contradict any rule of rules , the closure will be identified as non-distributable by the distributed computation privacy platform .","In one embodiment, the block represents a combined policies composed by the policy enforcement module  from a set of policies -and block represents combined privacy rules of component  of the multi-level computation environment. In this embodiment, if the distributed computation privacy platform  detects a contradiction between the combined policies and the combined rules , the closure distribution may be terminated. Subsequently, the distributed computation privacy platform  may alarm the component  of privacy breach, investigate the issue and find the faulty component, suggest solutions to overcome the problem or a combination thereof.","In one embodiment, a closure or a group of closures may lack access to privacy policy rules for the verification of their imposed privacy. For example, in  the closure is assigned with policy with no privacy rules. In this embodiment as seen by arrow , the distributed computation component that is executing branch  bypasses closure without executing the computation . Alternately, the component may request for privacy rules for closure from the distributed computation privacy platform .","In one embodiment, a repository of predefined or previously used privacy rules can be maintained so that any computations with missing privacy rules can be compared against the repository and a suitable rule can be assigned to them from the repository content, for example based on the similarities that may exist between the computations with missing privacy rules with other computations with privacy rules in the repository. The rule assignment can be for a temporary period until the exact rule for the computations is found, requested, borrowed, generated, extended from other alike computations within the same functional flow, from neighboring computation closures, etc.","The final results from closure execution of the three branches , , and  are aggregated by result aggregator  and forwarded to the requesting device.","In one embodiment, on each level of the environment one or more of computation closures -, -, or -may be pre-created closures created by the distributed computation privacy platform , wherein the pre-created closure includes information about enforcement of the one or more privacy rules -, -, and -respectively on the closures and as a result produce imposed privacy policies -, -, and -. The pre-created closures may also produce combined privacy policies , or combined privacy rules , , etc.","In the embodiment of , the privacy mechanisms and rules can be different for each domain or each level of the computation infrastructure. The privacy rules may also overlap and allow the privacy execution domain to be extended to one or all levels of the infrastructure. In other words, every computation closure and every branch or functional flow of computation closures may enable and utilize different privacy mechanisms and rules.","Additionally, different privacy mechanisms (e.g. encryption, filtering, anonymization) can be used in combination with computation closures capabilities (e.g., energy consumption, security, privacy and connection quality). The policy enforcement module  can take into account different capabilities with or without different privacy policy mechanisms. The policy enforcement module  enables execution of applications with selected\/different technologies based on application requirements, such as for example, whether encryption is allowed, whether filtering with data loss is allowed or not, etc. The distributed computation privacy platform  can be calibrated to provide different degrees of privacy enforcement based on capabilities and requirements of the entities involved.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIG. 6","FIG. 6"],"b":["601","603","605","107","605","601","603","601","119","117","603","119","117","601","603","119","119","103","119","119","117","601","603","601","603","119","119"],"i":["a","a ","a","c ","a ","a ","c","a ","c ","a ","a ","c. "]},"In one embodiment, upon the completion of the execution the result is returned to the original device . However, the path via which the results are being sent to UE should be once again verified by the distributed computation privacy platform  to comply with the privacy requirements of both closures  and  and also with any additional privacy rules that may apply to the results. The returned results may then, together with closure , be transferred for execution to a component of the infrastructure level . If the infrastructure levels lack any privacy capabilities, or non-privacy capabilities (e.g. processing power, etc.) the closures may be executed at the cloud level -. The final execution results are also returned to to be presented to the user, utilized by running applications, etc. The area within shape  shows the computation flow of closures , , and  according to the privacy policy rules (utilized for determining the distribution path)","In one embodiment, the infrastructure components , and will not be able to decrypt the closures , , and  since the closures are protected by privacy policy rules. The closures and their execution results can only be decrypted by the entity allowed by the privacy policies (e.g. UE ). However, the components of the execution environment can manipulate (e.g. execute) the encrypted copy of the closures without decrypting them and return the results to the requesting device ","In one embodiment, various mechanisms of the privacy policy enforcement are utilized by the distributed computation privacy platform . The main mechanism categories include encryption, filtering, and anonymization. Each mechanism has a set of capabilities and is defined for closures (e.g. attached to device(s) and their channels). The capabilities of devices, components and architectural levels can be identified as various parameters such as for example, energy consumption, security level, privacy level, connection quality, etc. Furthermore, each closure may have different capabilities and requirements and the closures can be associated with defined capabilities and requirements in form of signatures (e.g. policy assigning signatures) or supersignatures (combined policy assignment).","In one embodiment, closure capabilities or various types can be combined with each other, for example a closure signature may identify both privacy and energy consumption for the closure, another signature may identify a combination of privacy, energy, and security capabilities, etc.","In one embodiment, a policy may enforce a method of \u201clossless\u201d encryption, where the amount of information has to remain the same (e.g., the closure may not lose any information as a result of encryption).","In one embodiment, different privacy mechanisms may be allowed at different levels of the computation environment. For example, the device level  may recognize only encryption and the infrastructure level -may allow only filtering, while the cloud level -may allow all mechanisms encryption, filtering and anonymization.","In one embodiment, closure capabilities may overlap with defined mechanisms. For example, a UE may have a low battery power. Therefore, the UE may not be a suitable choice for information sharing by other devices at the time of low battery power in order to not violating privacy, losing parameters, losing closure values, etc. (e.g. the UE with low battery power may not be capable of applying decryptions).","In one embodiment, different privacy mechanisms can be used with computation closures capabilities. The policy enforcement module  can take into account different capabilities with or without different privacy policy mechanisms. The encryption, filtering, anonymization mechanisms can be combined with computational closure capability parameters such as energy, security, privacy, and connection quality).","In one embodiment, privacy policies as described are linked with functional flow elements (capabilities) through capabilities metrics, energy and security. Additionally, privacy can be applied to many systems, providing probabilistic and logical approach with computation closures. Different privacy mechanisms can be used with computation closure capabilities. Furthermore, privacy policy enforcement can take into account different capabilities with or without different privacy policy mechanisms.",{"@attributes":{"id":"p-0108","num":"0107"},"figref":["FIGS. 7A-7B","FIG. 7A"],"b":["117","111","107","107","117","119","707","107","107","705","705","709","119","707","119","117","705","705","107","107","7","107","107","713","713","111","715","715","713","713","717","717","117"],"i":["a ","b ","a ","a ","b ","a ","b","a ","a ","a ","b ","a ","b ","a ","b ","a ","b ","a","e ","a","b "]},"In one embodiment, the backend device may be equipped with a closure recycling and marshaling component  that monitors and manages any access to the computation closures store . In other embodiments the closure recycling and marshaling (i.e. standardization for uniform use) may be a function of the distributed computation privacy platform .","In one embodiment, the computation closures within environments , and the computation closures store  may be composed based on anonymous function objects and automatically created by a compiling system using methods for generating anonymous function objects such as lambda expressions.",{"@attributes":{"id":"p-0111","num":"0110"},"figref":["FIG. 7B","FIG. 7A","FIG. 1","FIG. 2","FIG. 3"],"b":["713","713","713","723","107","107","723","103","723","749","723","749","741"]},"In another embodiment, the computation closure environment  has a developer experience module  that provides various tools for a developer for manipulating services offered by the UE . The tools may include standardized and\/or abstract data types and services allowing the developers to chain processes together across development platforms. In one embodiment, the developer experience module  provides cross platform support for abstract data types and services under the supervision of a distributed computation privacy platform  as discussed in . The agent Agent2 retrieves the computation closures required by the developer experience module  from the computation closures store  and stores the newly generated computation closures by the developer experience module  into the computation closures store  for distribution purposes per arrow .","In yet another embodiment, the computation closure environment  has a scalable computing module  that provides an abstract wrapper (i.e. monadic wrapper) for the migrating closures . This abstraction provides computation compatibility between the closures  and the UE . The abstract wrapper may provide scheduling, memory management, system calls and other services for various processes associated with the closures . These services are provided under the supervision of the distributed computation privacy platform  as discussed in . The agent Agent3 retrieves the computation closures required by the scalable computing module  from the computation closures store  and stores the newly generated computation closures by the scalable computing module  into the computation closures store  for distribution purposes per arrow . In one embodiment, the backend environment  may access the computation closures store  and exchange\/migrate one or more computer closures  between the computation closures store  and the backend computation closures store .",{"@attributes":{"id":"p-0114","num":"0113"},"figref":["FIG. 8","FIG. 4"],"b":["800","801","801","801","801","800","803","803","805","801","801","803","803","800"],"i":["a","d","a","d","a","d","a","d ","a","d "]},"In one embodiment, distribution of process  includes distribution of closures -, combinators -and the process states  as independent elements into, for instance, an infrastructure environment . The independent closures -from infrastructure environment  may be distributed into different components -where they may be executed.",{"@attributes":{"id":"p-0116","num":"0115"},"figref":["FIG. 9","FIG. 9"],"b":["107","107","903","903","905","1","2","107","907","1","909","1","913","911"],"i":["a ","a ","a"]},"It is assumed, in this example, that component of an infrastructure level (not shown) is selected by the distributed computation privacy platform  as a destination for closure distribution from UE , based on the availability of sufficient privacy. The extracted computation closure, closure_ is migrated to component following the assignment of a distribution path (similar to path  in , and is executed on component ","In one embodiment, the component receives the computation closure closure_ and extracts it from the computation closure store  using the Get command . The extracted closure_ is projected into a closure with the user device context and the object  is produced. The block  represents the reconstruction of the closure into the initial context by a component in charge of the execution. The aggregated context may then be executed in the run-time environment  of component by Agent3.","In another embodiment, the UE and component may exchange places and the distribution is performed from the component to UE or both devices may be UEs. In this embodiment the decomposition and aggregation processes are similar to the above example.",{"@attributes":{"id":"p-0120","num":"0119"},"figref":["FIG. 10","FIG. 10"],"b":["1001","107","119","117"],"i":["a ","a "]},"In one embodiment, the UE may include RDF store , which holds computation closures for processes associated with the UE . Similarly the backend device may includes a RDF store , which holds computation closures associated with processes related to device , UEs -, or any other devices having connectivity to device or cloud .","In other embodiments, the Uniform Resource Identifiers (URIs)  in UE and  in backend device may be used to identify names or resources accessible to their respective devices via the communication network . Additionally, UE and backend device may have rule sets and that include privacy rules imposed on device similar to rules -of . It is noted that the rule base of UE may be a subset of the rule base of the backend device , wherein the rules is a subset of a superset of rules managed by a cloud . Furthermore, the legacy codes associated with each device may be stored in legacy code memory areas and on UE and and on backend device ","In one embodiment, UE may be provided with a non-volatile memory space  as a closure store. The closure store  may include a set of closure primitives shown as geometric objects, similar to primitives of sets  or  of . Similarly, the backend device may be provided with a non-volatile memory space  as a closure store. The closure store  may also include a set of closure primitives shown as geometric objects. In one embodiment, the closure store  is a subset of closure store  determined, at least in part, based on one or more criteria such as time of access, frequency of access, a priority classification, privacy settings, etc. The geometric shapes of closure stores  and  have been each divided into two groups of solidly filled geometric shapes (representing signed closures) and unfilled geometric shapes (representing unsigned closures). Since non-volatile memories are costly and require extensive resources (e.g. power consumption) compared with volatile memories (such as , , , and ), the capacity of non-volatile memory on a UE -is limited. However, a backend device , serving high numbers of users, may be equipped with larger volumes of non-volatile memory spaces. Because of the limited capacity of non-volatile memory spaces on UEs -, and also because differing levels of privacy setup on various devices, only a subset of the closure store  is stored locally at the closure store  for local use by the UE . In order to minimize the number of times a UE  needs to retrieve one or more primitives from closure store  of device , the subset  is determined based on one or more criteria. In one embodiment, the closure store  may be determined as a set of the most frequently accessed closure primitives of closure store  by UE . In another embodiment, the closure store  may be determined as a set of the most recently accessed closure primitives of closure store  by UE . In other embodiments, various combined conditions and criteria may be used for determining subset  from set  as the content of closure store for UE . Furthermore, the closure stores  and  may be periodically synchronized. The synchronization of closure stores ensures that any changes (addition, deletion, modification, etc.) in closure primitives and in root elements of the signature lattice of closure store  are reflected in the closure store .","In one embodiment, for execution of a closure set  (a subset of closure store ) associated with a process on UE , the set  can be migrated under the supervision of the distributed computation privacy platform  and after verification of the privacy of closures and capabilities of the destination component, to the backend device which is a component of the infrastructure  (the distribution path shown as arrow ). The distributed computation privacy platform  may then inform the processing components of the UE , the backend device or a combination thereof (the processing components are not shown), that the privacy of closure primitives has been approved and the closures are ready for execution. Alternatively, the distributed computation privacy platform  may determine that the closures are not approved from point of view of the privacy and terminate their distribution and execution.","In one embodiment, any changes on the closure store  of the backend device (e.g., addition, deletion, modification, etc.) may first enter the URIs  via the communication network . The changes may then be applied from URIs  on closure store  shown by arrows -. Similarly, the closure store  is updated based on the content of the closure store  and the updates are shared with other authorized components within UE (e.g. with URIs  as shown by arrows -).","In one embodiment, the commonly accessible memory address space  is formed from the RDF stores  and  and the closure stores  and . The commonly accessible memory address space  can be accessed as a continuous memory space by each of the devices and ","The processes described herein for providing end-to-end privacy in multi-level distributed computations may be advantageously implemented via software, hardware, firmware or a combination of software and\/or firmware and\/or hardware. For example, the processes described herein, may be advantageously implemented via processor(s), Digital Signal Processing (DSP) chip, an Application Specific Integrated Circuit (ASIC), Field Programmable Gate Arrays (FPGAs), etc. Such exemplary hardware for performing the described functions is detailed below.",{"@attributes":{"id":"p-0128","num":"0127"},"figref":["FIG. 11","FIG. 11"],"b":["1100","1100","1100","1100","1110","1100","1100"]},"A bus  includes one or more parallel conductors of information so that information is transferred quickly among devices coupled to the bus . One or more processors  for processing information are coupled with the bus .","A processor (or multiple processors)  performs a set of operations on information as specified by computer program code related to providing end-to-end privacy in multi-level distributed computations. The computer program code is a set of instructions or statements providing instructions for the operation of the processor and\/or the computer system to perform specified functions. The code, for example, may be written in a computer programming language that is compiled into a native instruction set of the processor. The code may also be written directly using the native instruction set (e.g., machine language). The set of operations include bringing information in from the bus  and placing information on the bus . The set of operations also typically include comparing two or more units of information, shifting positions of units of information, and combining two or more units of information, such as by addition or multiplication or logical operations like OR, exclusive OR (XOR), and AND. Each operation of the set of operations that can be performed by the processor is represented to the processor by information called instructions, such as an operation code of one or more digits. A sequence of operations to be executed by the processor , such as a sequence of operation codes, constitute processor instructions, also called computer system instructions or, simply, computer instructions. Processors may be implemented as mechanical, electrical, magnetic, optical, chemical or quantum components, among others, alone or in combination.","Computer system  also includes a memory  coupled to bus . The memory , such as a random access memory (RAM) or any other dynamic storage device, stores information including processor instructions for providing end-to-end privacy in multi-level distributed computations. Dynamic memory allows information stored therein to be changed by the computer system . RAM allows a unit of information stored at a location called a memory address to be stored and retrieved independently of information at neighboring addresses. The memory  is also used by the processor  to store temporary values during execution of processor instructions. The computer system  also includes a read only memory (ROM)  or any other static storage device coupled to the bus  for storing static information, including instructions, that is not changed by the computer system . Some memory is composed of volatile storage that loses the information stored thereon when power is lost. Also coupled to bus  is a non-volatile (persistent) storage device , such as a magnetic disk, optical disk or flash card, for storing information, including instructions, that persists even when the computer system  is turned off or otherwise loses power.","Information, including instructions for providing end-to-end privacy in multi-level distributed computations, is provided to the bus  for use by the processor from an external input device , such as a keyboard containing alphanumeric keys operated by a human user, or a sensor. A sensor detects conditions in its vicinity and transforms those detections into physical expression compatible with the measurable phenomenon used to represent information in computer system . Other external devices coupled to bus , used primarily for interacting with humans, include a display device , such as a cathode ray tube (CRT), a liquid crystal display (LCD), a light emitting diode (LED) display, an organic LED (OLED) display, a plasma screen, or a printer for presenting text or images, and a pointing device , such as a mouse, a trackball, cursor direction keys, or a motion sensor, for controlling a position of a small cursor image presented on the display  and issuing commands associated with graphical elements presented on the display . In some embodiments, for example, in embodiments in which the computer system  performs all functions automatically without human input, one or more of external input device , display device  and pointing device  is omitted.","In the illustrated embodiment, special purpose hardware, such as an application specific integrated circuit (ASIC) , is coupled to bus . The special purpose hardware is configured to perform operations not performed by processor  quickly enough for special purposes. Examples of ASICs include graphics accelerator cards for generating images for display , cryptographic boards for encrypting and decrypting messages sent over a network, speech recognition, and interfaces to special external devices, such as robotic arms and medical scanning equipment that repeatedly perform some complex sequence of operations that are more efficiently implemented in hardware.","Computer system  also includes one or more instances of a communications interface  coupled to bus . Communication interface  provides a one-way or two-way communication coupling to a variety of external devices that operate with their own processors, such as printers, scanners and external disks. In general the coupling is with a network link  that is connected to a local network  to which a variety of external devices with their own processors are connected. For example, communication interface  may be a parallel port or a serial port or a universal serial bus (USB) port on a personal computer. In some embodiments, communications interface  is an integrated services digital network (ISDN) card or a digital subscriber line (DSL) card or a telephone modem that provides an information communication connection to a corresponding type of telephone line. In some embodiments, a communication interface  is a cable modem that converts signals on bus  into signals for a communication connection over a coaxial cable or into optical signals for a communication connection over a fiber optic cable. As another example, communications interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN, such as Ethernet. Wireless links may also be implemented. For wireless links, the communications interface  sends or receives or both sends and receives electrical, acoustic or electromagnetic signals, including infrared and optical signals, that carry information streams, such as digital data. For example, in wireless handheld devices, such as mobile telephones like cell phones, the communications interface  includes a radio band electromagnetic transmitter and receiver called a radio transceiver. In certain embodiments, the communications interface  enables connection to the communication network  for providing end-to-end privacy in multi-level distributed computations to the UEs -","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing information to processor , including instructions for execution. Such a medium may take many forms, including, but not limited to computer-readable storage medium (e.g., non-volatile media, volatile media), and transmission media. Non-transitory media, such as non-volatile media, include, for example, optical or magnetic disks, such as storage device . Volatile media include, for example, dynamic memory . Transmission media include, for example, twisted pair cables, coaxial cables, copper wire, fiber optic cables, and carrier waves that travel through space without wires or cables, such as acoustic waves and electromagnetic waves, including radio, optical and infrared waves. Signals include man-made transient variations in amplitude, frequency, phase, polarization or other physical properties transmitted through the transmission media. Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, any other magnetic medium, a CD-ROM, CDRW, DVD, any other optical medium, punch cards, paper tape, optical mark sheets, any other physical medium with patterns of holes or other optically recognizable indicia, a RAM, a PROM, an EPROM, a FLASH-EPROM, an EEPROM, a flash memory, PCM (Phase Change Memory), any other NVM (Non Volatile Memory), any other memory chip or cartridge, a carrier wave, or any other medium from which a computer can read. The term computer-readable storage medium is used herein to refer to any computer-readable medium except transmission media.","Logic encoded in one or more tangible media includes one or both of processor instructions on a computer-readable storage media and special purpose hardware, such as ASIC .","Network link  typically provides information communication using transmission media through one or more networks to other devices that use or process the information. For example, network link  may provide a connection through local network  to a host computer  or to equipment  operated by an Internet Service Provider (ISP). ISP equipment  in turn provides data communication services through the public, world-wide packet-switching communication network of networks now commonly referred to as the Internet .","A computer called a server host  connected to the Internet hosts a process that provides a service in response to information received over the Internet. For example, server host  hosts a process that provides information representing video data for presentation at display . It is contemplated that the components of system  can be deployed in various configurations within other computer systems, e.g., host  and server .","At least some embodiments of the invention are related to the use of computer system  for implementing some or all of the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more processor instructions contained in memory . Such instructions, also called computer instructions, software and program code, may be read into memory  from another computer-readable medium such as storage device  or network link . Execution of the sequences of instructions contained in memory  causes processor  to perform one or more of the method steps described herein. In alternative embodiments, hardware, such as ASIC , may be used in place of or in combination with software to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware and software, unless otherwise explicitly stated herein.","The signals transmitted over network link  and other networks through communications interface , carry information to and from computer system . Computer system  can send and receive information, including program code, through the networks ,  among others, through network link  and communications interface . In an example using the Internet , a server host  transmits program code for a particular application, requested by a message sent from computer , through Internet , ISP equipment , local network  and communications interface . The received code may be executed by processor  as it is received, or may be stored in memory  or in storage device  or any other non-volatile storage for later execution, or both. In this manner, computer system  may obtain application program code in the form of signals on a carrier wave.","Various forms of computer readable media may be involved in carrying one or more sequence of instructions or data or both to processor  for execution. For example, instructions and data may initially be carried on a magnetic disk of a remote computer such as host . The remote computer loads the instructions and data into its dynamic memory and sends the instructions and data over a telephone line using a modem. A modem local to the computer system  receives the instructions and data on a telephone line and uses an infra-red transmitter to convert the instructions and data to a signal on an infra-red carrier wave serving as the network link . An infrared detector serving as communications interface  receives the instructions and data carried in the infrared signal and places information representing the instructions and data onto bus . Bus  carries the information to memory  from which processor  retrieves and executes the instructions using some of the data sent with the instructions. The instructions and data received in memory  may optionally be stored on storage device , either before or after execution by the processor .",{"@attributes":{"id":"p-0142","num":"0141"},"figref":["FIG. 12","FIG. 11"],"b":["1200","1200","1200","1200","1200","1200"]},"In one embodiment, the chip set or chip  includes a communication mechanism such as a bus  for passing information among the components of the chip set . A processor  has connectivity to the bus  to execute instructions and process information stored in, for example, a memory . The processor  may include one or more processing cores with each core configured to perform independently. A multi-core processor enables multiprocessing within a single physical package. Examples of a multi-core processor include two, four, eight, or greater numbers of processing cores. Alternatively or in addition, the processor  may include one or more microprocessors configured in tandem via the bus  to enable independent execution of instructions, pipelining, and multithreading. The processor  may also be accompanied with one or more specialized components to perform certain processing functions and tasks such as one or more digital signal processors (DSP) , or one or more application-specific integrated circuits (ASIC) . A DSP  typically is configured to process real-world signals (e.g., sound) in real time independently of the processor . Similarly, an ASIC  can be configured to performed specialized functions not easily performed by a more general purpose processor. Other specialized components to aid in performing the inventive functions described herein may include one or more field programmable gate arrays (FPGA) (not shown), one or more controllers (not shown), or one or more other special-purpose computer chips.","In one embodiment, the chip set or chip  includes merely one or more processors and some software and\/or firmware supporting and\/or relating to and\/or for the one or more processors.","The processor  and accompanying components have connectivity to the memory  via the bus . The memory  includes both dynamic memory (e.g., RAM, magnetic disk, writable optical disk, etc.) and static memory (e.g., ROM, CD-ROM, etc.) for storing executable instructions that when executed perform the inventive steps described herein to provide end-to-end privacy in multi-level distributed computations. The memory  also stores the data associated with or generated by the execution of the inventive steps.",{"@attributes":{"id":"p-0146","num":"0145"},"figref":["FIG. 13","FIG. 1"],"b":"1301"},"Pertinent internal components of the telephone include a Main Control Unit (MCU) , a Digital Signal Processor (DSP) , and a receiver\/transmitter unit including a microphone gain control unit and a speaker gain control unit. A main display unit  provides a display to the user in support of various applications and mobile terminal functions that perform or support the steps of providing end-to-end privacy in multi-level distributed computations. The display  includes display circuitry configured to display at least a portion of a user interface of the mobile terminal (e.g., mobile telephone). Additionally, the display  and display circuitry are configured to facilitate user control of at least some functions of the mobile terminal. An audio function circuitry  includes a microphone  and microphone amplifier that amplifies the speech signal output from the microphone . The amplified speech signal output from the microphone  is fed to a coder\/decoder (CODEC) .","A radio section  amplifies power and converts frequency in order to communicate with a base station, which is included in a mobile communication system, via antenna . The power amplifier (PA)  and the transmitter\/modulation circuitry are operationally responsive to the MCU , with an output from the PA  coupled to the duplexer  or circulator or antenna switch, as known in the art. The PA  also couples to a battery interface and power control unit .","In use, a user of mobile terminal  speaks into the microphone  and his or her voice along with any detected background noise is converted into an analog voltage. The analog voltage is then converted into a digital signal through the Analog to Digital Converter (ADC) . The control unit  routes the digital signal into the DSP  for processing therein, such as speech encoding, channel encoding, encrypting, and interleaving. In one embodiment, the processed voice signals are encoded, by units not separately shown, using a cellular transmission protocol such as enhanced data rates for global evolution (EDGE), general packet radio service (GPRS), global system for mobile communications (GSM), Internet protocol multimedia subsystem (IMS), universal mobile telecommunications system (UMTS), etc., as well as any other suitable wireless medium, e.g., microwave access (WiMAX), Long Term Evolution (LTE) networks, code division multiple access (CDMA), wideband code division multiple access (WCDMA), wireless fidelity (WiFi), satellite, and the like, or any combination thereof.","The encoded signals are then routed to an equalizer  for compensation of any frequency-dependent impairments that occur during transmission though the air such as phase and amplitude distortion. After equalizing the bit stream, the modulator  combines the signal with a RF signal generated in the RF interface . The modulator  generates a sine wave by way of frequency or phase modulation. In order to prepare the signal for transmission, an up-converter  combines the sine wave output from the modulator  with another sine wave generated by a synthesizer  to achieve the desired frequency of transmission. The signal is then sent through a PA  to increase the signal to an appropriate power level. In practical systems, the PA  acts as a variable gain amplifier whose gain is controlled by the DSP  from information received from a network base station. The signal is then filtered within the duplexer  and optionally sent to an antenna coupler  to match impedances to provide maximum power transfer. Finally, the signal is transmitted via antenna  to a local base station. An automatic gain control (AGC) can be supplied to control the gain of the final stages of the receiver. The signals may be forwarded from there to a remote telephone which may be another cellular telephone, any other mobile phone or a land-line connected to a Public Switched Telephone Network (PSTN), or other telephony networks.","Voice signals transmitted to the mobile terminal  are received via antenna  and immediately amplified by a low noise amplifier (LNA) . A down-converter  lowers the carrier frequency while the demodulator  strips away the RF leaving only a digital bit stream. The signal then goes through the equalizer  and is processed by the DSP . A Digital to Analog Converter (DAC)  converts the signal and the resulting output is transmitted to the user through the speaker , all under control of a Main Control Unit (MCU)  which can be implemented as a Central Processing Unit (CPU) (not shown).","The MCU  receives various signals including input signals from the keyboard . The keyboard  and\/or the MCU  in combination with other user input components (e.g., the microphone ) comprise a user interface circuitry for managing user input. The MCU  runs a user interface software to facilitate user control of at least some functions of the mobile terminal  to provide end-to-end privacy in multi-level distributed computations. The MCU  also delivers a display command and a switch command to the display  and to the speech output switching controller, respectively. Further, the MCU  exchanges information with the DSP  and can access an optionally incorporated SIM card  and a memory . In addition, the MCU  executes various control functions required of the terminal. The DSP  may, depending upon the implementation, perform any of a variety of conventional digital processing functions on the voice signals. Additionally, DSP  determines the background noise level of the local environment from the signals detected by microphone  and sets the gain of microphone  to a level selected to compensate for the natural tendency of the user of the mobile terminal .","The CODEC  includes the ADC  and DAC . The memory  stores various data including call incoming tone data and is capable of storing other data including music data received via, e.g., the global Internet. The software module could reside in RAM memory, flash memory, registers, or any other form of writable storage medium known in the art. The memory device  may be, but not limited to, a single memory, CD, DVD, ROM, RAM, EEPROM, optical storage, magnetic disk storage, flash memory storage, or any other non-volatile storage medium capable of storing digital data.","An optionally incorporated SIM card  carries, for instance, important information, such as the cellular phone number, the carrier supplying service, subscription details, and security information. The SIM card  serves primarily to identify the mobile terminal  on a radio network. The card  also contains a memory for storing a personal telephone number registry, text messages, and user specific mobile terminal settings.","While the invention has been described in connection with a number of embodiments and implementations, the invention is not so limited but covers various obvious modifications and equivalent arrangements, which fall within the purview of the appended claims. Although features of the invention are expressed in certain combinations among the claims, it is contemplated that these features can be arranged in any combination and order."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The embodiments of the invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 5A-5B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 7A-7B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
