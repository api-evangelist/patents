---
title: Fuzzy full text search
abstract: A method and system for fuzzy full text search is disclosed. The system includes an inverted index where tokens are organized in a Next Valid Character (NVC) tree. Each path through the tree defines a token. The document lists for the tokens are stored at leaf nodes. When performing a fuzzy full text search, the system uses an edit distance greater than zero. After receiving search tokens, the system traverses the NVC tree to generate document error lists. The system then compares the error lists to identify relevant document identifiers and provides a result set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262486&OS=09262486&RS=09262486
owner: HERE Global B.V.
number: 09262486
owner_city: Veldhoven
owner_country: NL
publication_date: 20111208
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["REFERENCE TO RELATED APPLICATIONS","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present patent application is related to co-pending patent application Ser. No. 13\/314,412, entitled \u201cOPTIMALLY RANKED NEAREST NEIGHBOR FUZZY FULL TEXT SEARCH,\u201d filed on Dec. 8, 2011.","The present invention relates generally to full text search, and more particularly, relates to fuzzy full text search.","Full text search (FTS) systems search for relevant documents based on key words entered by a system user. The user enters a set of terms, referred to as tokens, and the FTS system finds documents containing all of the terms in the set. In order to support queries efficiently, the FTS system typically uses inverted indexes. For example, Lucene (described at http:\/\/lucene.apache.org\/) and SQLite's FTS module (described at http:\/\/www.sqlite.org\/cvstrac\/wiki?p=FtsUsage) are both FTS systems that use inverted indexes.","An inverted index assigns a set of document identifiers to each token. The document identifiers are associated with documents that include the token at least once. Upon receiving a search request, the FTS system selects the set of document identifiers for each token in the request and then compares the document sets to each other. If a document identifier is contained in all document sets, the FTS system provides the document identifier in a result set of all identifiers contained in all document sets.","From a logical point of view, the inverted index can be regarded as a relation InvertedIndex(Term, DocID) with a combined index on Term and DocId. If a user of the FTS system enters the token \u201cNeuschwanstein,\u201d the inverted index allows the FTS system to efficiently execute queries such as the following query.","SELECT DocID FROM InvertedIndex WHERE Term=\u2018Neuschwanstein\u2019 However, if the user misspells \u201cNeuschwanstein,\u201d SQLite's FTS system will not find any relevant documents. That is because SQLite's FTS system does not support fault-tolerant (or fuzzy) searching.","Lucene's FTS system does support fuzzy search. However, Lucene performs a fuzzy search in two steps. First, Lucene searches for tokens stored in the database that are similar to the query tokens. To determine if tokens are similar, Lucene computes an edit distance (also referred to as a Levenshtein Distance) from the query tokens to the tokens stored in the database. Second, Lucene uses the similar tokens it finds as new query tokens to retrieve relevant documents. This two-step process may result in severe performance problems.","A method and system for performing a fuzzy full text search is described. The system uses an inverted token Next Valid Character (NVC) tree. Each path through the tree defines a token. Document sets for the tokens are stored in leaf nodes. The system traverses the tree in a single pass to identify relevant document sets. The system intersects the document sets to generate a result set.","The system uses the same index structure, the inverted token NVC tree, for both full text search and fuzzy full text search. For full text search, an error value of zero is used, while for fuzzy full text search an error value greater than zero is used.","These as well as other aspects and advantages will become apparent to those of ordinary skill in the art by reading the following detailed description, with reference where appropriate to the accompanying drawings. Further, it is understood that this summary is merely an example and is not intended to limit the scope of the invention as claimed.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","100","100"]},"The computing platform  includes a fuzzy Full Text Search (FTS) system . The computing platform  may also include other sub-systems. For example, if the computing platform  is a navigation system, the computing platform  may also include a positioning system, a user interface, a geographic database, and software that facilitates destination entry, route calculation, route guidance, map display, and other navigation functions and features.","The fuzzy FTS system  may be a combination of hardware and software components. For example, the fuzzy FTS system  includes a processor  and memory  for storing a document list , an index , query processing , and possibly other information. In other examples, the fuzzy FTS system  may be a software system and use a processor and memory associated with the computing platform .","The computing platform  receives search tokens  entered by a user of the platform  and provides the search tokens  to the fuzzy FTS system . For example, a user of a navigation system may enter search terms associated with an address to identify a destination. As a result of the query processing , the fuzzy FTS system  provides a result set  as an output. The navigation system may use this result set to provide a list of relevant destinations to the user.","The document list  is a list of document identifiers and tokens located within documents associated with the identifiers. The term \u201cdocument\u201d in this context means any kind of electronic data record or file that contains text. In the example of a navigation system, relevant documents may be a segment record, a node record, a point of interest record, or any other record stored in a geographic database.","The document list  includes a document identifier column and a token column. The document identifier column includes data representing document identifiers. Document identifiers may be any combination of letters, numbers, and other characters. The document identifiers reference documents that may be stored in the memory . Alternatively, the documents may be stored elsewhere on the computing platform  or on another system.","The token column includes terms located in the document associated with a document identifier. Each term in the token column may be used as a search token.","The document list  may be stored in memory  as a sequence of document identifiers. As another example, the document list  may be stored in memory  as a bit vector. The length of the bit vector is equal to the number of documents identified in the document identifier column. If a term is located in a certain document, the bit vector includes a 1-Bit and if the term is not located in that document, the bit vector includes a 0-Bit (or vice versa). If the document list  is stored as a bit vector, the intersection of document lists may be performed by intersecting the bit vectors.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["200","200","202","204","202","5"]},"The document list  may be used by a navigation system or an on-line mapping application during destination search. Other document lists may include terms relevant for other types of computing platforms and\/or applications. For example, the token column may include data regarding books, music, web pages, files, and so on.","Returning to , the index  is an inverted token Next Valid Character (NVC) tree.  depicts an index  where tokens are organized in a NVC tree using the document list  depicted in .","The node  in the tree  is the root node, which is also referred to as the starting node. Branches extend from the root node  to additional nodes. The root node  is the parent node to the next layer of nodes (i.e., nodes , , , B, CITY, G, K, N, O, S, USA, VOL), which are referred to as children nodes. In some cases, the children nodes are parent nodes to other nodes. For example, the B node is the parent node to the ACH, ERLIN, and OSCH nodes.","After following the paths from the root node through the branches and other nodes, the paths end at leaf nodes. Leaf nodes are nodes without children and are sometimes referred to as end nodes. At each leaf node is a set of document identifiers. In this example, the leaf nodes refer to the document identifiers in . A path from the root node  to a leaf node defines a token. In this example, each token is a token from the address column  of the document list .","For example, assume that a user enters the search terms OTTO, VOLGER, and GERMANY into the computing platform . Using the index , the path from the root node  to a leaf node for the token OTTO results in a leaf node associated with document identifier . Similarly, VOLGER results in a leaf node associated with document identifier  and GERMANY results in a leaf node associated with document identifiers , , and . The query processing  intersects the lists of document identifiers and provides document identifier  as the result set .","Returning to , the index  may be stored in memory  in a file or as a set of files. Alternatively, the index  may be stored in memory  as a relation containing a binary large object (BLOB). A BLOB is a collection of binary data stored as a single entity in a database management system. As both files and BLOBs can become large, the index  may be split into several smaller files or BLOBs. The files are stored in a file system, while the BLOBs are stored in one or more relational tables.","The index  may also be stored in a relation, such as NVC(FatherNode integer, SonNode integer, SonData BLOB). In this example, the father and son node values are integer values describing the NVC tree structure. The SonData values are the prefixes stored in the NVC tree. If a node is a leaf node, the SonNode value is null (or 0 if null values are not allowed in a column belonging to the primary key). If a node is a leaf node, SonData value is the document list. An example NVC relation for the index  is shown as follows.",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["FatherNode","SonNode","SonData"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","2","\u201c1\u201d"]},{"entry":["1","3","\u201c39\u201d\u2002"]},{"entry":["1","4","\u201c4\u201d"]},{"entry":["1","5","\u201cB\u201d"]},{"entry":[". . .",". . .",". . ."]},{"entry":["1","12\u2002","\u201cVOL\u201d"]},{"entry":["2","13\u2002","\u201c0\u201d"]},{"entry":["2","NULL","1"]},{"entry":[". . .",". . .",". . ."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The query processing  may be embodied as program instructions stored on a non-transitory computer-readable medium, which when executed by the processor  cause the processor  to carry out functions as described further herein. The program instructions may be written in a suitable computer programming language, such as C, C++, Java, or any other suitable program language now known or later developed.","The query processing  performs a fuzzy search for relevant document identifiers based on the entered search tokens. A fuzzy search is a fault tolerant search that allows misspelled search tokens to be used to find relevant document identifiers despite the error. Before the query processing  can perform a fuzzy search, the query processing  needs to know how much error is acceptable to the fuzzy FTS system .","The error is the distance between tokens in a document and query tokens entered by a user. The error is determined based on an edit distance, which is also referred to as Levenshtein distance. The Levenshtein distance between two tokens is defined as the minimum number of edit operations needed to transform one token into the other. The allowable edit operations are insertion, deletion, or substitution of a single character.","For example, the Levenshtein distance between \u201ckitten\u201d and \u201csitting\u201d is three since it takes the following three edits to change \u201ckitten\u201d into \u201csitting\u201d and there is no way to make the transformation with fewer than three edits.","kitten\u2192sitten (substitution of \u2018k\u2019 by \u2018s\u2019)","sitten\u2192sitten (substitution of \u2018e\u2019 by \u2018i\u2019)","sittin\u2192sitting (insert \u2018g\u2019 at the end).","The user of the computing platform  or other entity (e.g., designer, developer, or owner of the computing platform  or the fuzzy FTS system ) may set a threshold value that determines how much error is acceptable. The edit value may be stored in memory , for example, as part of the query processing . The query processing  operates more efficiently with a lower threshold value than with a larger threshold value. With an error value of zero, the query processing  performs a non-fuzzy full text search, such as the full text search performed by SQLite.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4","b":["400","104","114"]},"At block , the fuzzy FTS system  receives one or more search terms. For example, a user enters the terms OTTO and VOLKER into the computing platform .","At block , the query processing  explores paths in the index . The query processing  starts at the root node and follows the branches to the children nodes of the root node. Then the query processing  determines whether the children nodes are relevant to the entered search terms. If not, branches from these children do not need to be further explored (referred to as pruning). If the children nodes are relevant to the entered search terms, the query processing  continues exploring the index  by following the branches to the next layer of nodes. This process continues until all paths are either pruned or end at a leaf node.","At block , the query processing  computes document error lists. The document error lists include the document identifier and the number of edits needed to reach the leaf node associated with the document identifier. For example, the query processing computes the document error list of [({1}, 0), ({2}, 1)] for the search token OTTO and the document error list of [({3}, 0), ({1}, 1)] for the search term VOLKER.","The error list for OTTO identifies that zero errors were detected while exploring the path from the root node , to the O node, to the TTO node, and to the leaf node associated with document identifier . The error list for OTTO also identifies that one error was detected while exploring the path from the root node , to the O node, to the TO node, and to the leaf node associated with document identifier . The error list for VOLKER identifies that zero errors were detected while exploring the path from the root node , to the VOL node, to the KER node, and to the leaf node associated with document identifier . The error list for VOLKER also identifies that one error was detected while exploring the path from the root node , to the VOL node, to the GER node, and to the leaf node associated with document identifier .","At block , the query processing  compares the error lists. The query processing  may compare the first item in the error list associated with the first search token with each item in the error list associated with the next search token. Then, the query processing  compares the next item in the error list associated with the first search token with the error list associated with the next search token. This process continues until each item in the error lists have been compared to the other items in the error lists.","Using the error lists described with respect to block , the query processing  compares the pair ({1}, 0) for the search term OTTO with the pairs [({3}, 0), ({1}, 1)] for the search term VOLKER. Document identifier  is in both the OTTO pair and one of the VOLKER pairs and the overall error is  from the VOLKER pair. Thus, document identifier  is added to the result set as described with respect to block .","Next, the query processing  compares the OTTO pair ({2}, 1) with the VOLKER pair ({3}, 0) and no further match is detected. Note that the query processing  does not have to compare the OTTO pair ({2}, 1) to the VOLKER pair ({1}, 1) as the overall error is two, which exceeds the threshold value used in this example.","At block , the query processing  adds document identifiers to the result set. The result set includes the document identifiers that are associated with data tokens that are within a pre-defined edit distance with at least one of the search tokens. As described with respect to block , document identifier  is added to the result set. Document identifier  is associated with both the tokens OTTO and VOLGER, which was within an edit distance of one from the entered search terms of OTTO and VOLKER.","At block , the fuzzy FTS system  provides the result set to another entity to retrieve the documents associated with the document identifiers in the result set. Alternatively, the fuzzy FTS system  may also have the programming to retrieve the documents and provide the documents. The documents may be stored on the computing platform  or another system.","In a navigation system example, the query processing  may provide document identifier  to a map display application, which then retrieves data from a geographic database associated with the navigation system. The map display application may then display a map that identifies a location associated with the address \u201cNAVTEQ, OTTO-VOLGER-STRASSE 1, SULZBACH, GERMANY\u201d on the user interface of the navigation system. The geographic database may be located in the navigation system or be part of another system, such as a server. In the server example, the navigation system includes a communication system that allows it to request and receive documents from the server using document identifiers.","The query processing  may be encapsulated in a virtual table in a similar manner as SQLite's FTS search module. In this example, the query syntax is extended by the allowed error threshold \u03b5. To create a virtual table for the addresses depicted in , the following command may be used.\n\n","With the virtual table, the query processing  may perform a fuzzy full text search query based on the following command.\n\n","As described previously, the error threshold may be applied to a single token. For example, the query processing  may perform a fuzzy full text search query based on the following command.\n\n","For the OTTO token, the query processing  prunes all paths in the tree  that do not exactly match OTTO. For VOLKER the query processing  allows an error of 1. The query processing  then generates a result set as described with reference to .","As also described previously, the error threshold may be applied to a group of tokens. For example, the query processing  may perform a fuzzy full text search query based on the following command.\n\n","It is also possible to use tokens twice in a query. For example, the following query uses GERMANY twice, limits the error to two for the token pair OTTO, GERMANY, and limits the error to one for the token pair VOLKER, GERMANY.\n\n","Next, the query processing  intersects the document sets with each other for terms that occur in brackets and, thereafter, the resulting document sets are intersected. Note that the foregoing query is semantically equivalent to the following query.\n\n","Another search variation is using token prefixes. Instead of entering the complete search terms, the user of the computing platform  may enter just the beginning portions of the search terms. For example, instead of entering OTTO and GERMANY, the user can enter OT and G. The query processing  may perform a fuzzy full text search query based on the following command.\n\n","The fuzzy FTS system  and the method  allow for a single pass fault-tolerant search. Moreover, the fuzzy FTS system  and the method  allows for a single index structure to be used in both non-fuzzy FTS and fuzzy FTS. The fuzzy FTS system  and the method  can be used in many different types of computing platforms for searching many types of documents.","It is intended that the foregoing detailed description be regarded as illustrative rather than limiting and that it is understood that the following claims including all equivalents are intended to define the scope of the invention. The claims should not be read as limited to the described order or elements unless stated to that effect. Therefore, all embodiments that come within the scope and spirit of the following claims and equivalents thereto are claimed as the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Presently preferred embodiments are described below in conjunction with the appended drawing figures, wherein like reference numerals refer to like elements in the various figures, and wherein:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4","FIG. 1"]}]},"DETDESC":[{},{}]}
