---
title: Addressing the name space mismatch between content servers and content caching systems
abstract: Techniques are disclosed for addressing the name space mismatch between content caching systems (which use Uniform Resource Locators, or “URLs”) and content servers (which use file and path names). A file name-to-URL mapping is created for use by content caching systems, and data in protocol response messages (and optionally in protocol request messages) is augmented to transmit information for use in creating this mapping, enabling a content caching system to automatically and dynamically populate its file name-to-URL mapping. By having the file name available, the caching system can now respond to content management messages which identify the cached content by only the content's associated file name. Techniques for encoding the message extensions include: use of new directives on existing cache-control headers in Hypertext Transfer Protocol (“HTTP”) messages; addition of new headers in HTTP messages; and use of meta-data in markup languages such as Hypertext Markup Language (“HTML”) or Extensible Markup Language (“XML”) format.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06985936&OS=06985936&RS=06985936
owner: International Business Machines Corporation
number: 06985936
owner_city: Armonk
owner_country: US
publication_date: 20010927
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["Patent application Ser. No. 09\/969,294 filed Sep. 28, 2001 entitled \u201cApparatus and Method for Offloading Application Components to Edge Servers\u201d; patent application Ser. No. 09\/960,451 filed Sep. 21, 2001 entitled \u201cMethod and Apparatus for Minimizing Inconsistency Between Data Sources in a Web Content Distribution System\u201d; and patent application Ser. No. 09\/960,448 filed Sep. 21, 2001 entitled \u201cMethod and Apparatus for Caching Subscribed and Non-subscribed Content in a Network Data Processing System\u201d are all commonly owned applications related to the present invention.","1. Field of the Invention","The present invention relates to distributed computing networks, and deals more particularly with techniques for addressing the name space mismatch between content servers, which typically store content using file names, and content caching systems, which typically store content using Uniform Resource Locators.","2. Description of the Related Art","The popularity of distributed computing networks and network computing has increased tremendously in recent years, due in large part to growing business and consumer use of the public Internet and the subset thereof known as the \u201cWorld Wide Web\u201d (or simply \u201cWeb\u201d). Other types of distributed computing networks, such as corporate intranets and extranets, are also increasingly popular. As solutions providers focus on delivering improved Web-based computing, many of the solutions which are developed are adaptable to other distributed computing environments. Thus, references herein to the Internet and Web are for purposes of illustration and not of limitation.","Millions of people use the Internet on a daily basis, whether for their personal enjoyment or for business purposes or both. As consumers of electronic information and business services, people now have easy access to sources on a global level. Similarly, an enterprise's web-enabled applications may use information and services of other enterprises around the globe. When a human user is the content requester, delays in returning responses may have a very negative impact on user satisfaction, even causing the users to switch to alternative sources. Delivering requested content quickly and efficiently is critical to the success of an enterprise's web presence.","An additional concern in a distributed computing environment is the processing load on the computing resources. If a bottleneck occurs, overall system throughput may be seriously degraded. To address this situation, the content supplier may have to purchase additional servers, which increases the cost of doing business.","One technique which has been developed to address these problems is the use of content caching systems, which are sometimes referred to as \u201cweb caches\u201d, \u201ccache servers\u201d, or \u201ccontent caches\u201d. The goal of a caching system is to store or \u201ccache\u201d content at a location (or at multiple locations) in the computing network from which the content can be returned to the requester more quickly, and which also relieves the processing burden on the back-end systems by serving some requests without routing them to the back-end. Two basic approaches to caching systems are commonly in use. These are called (1) proxies, also known as \u201cforward proxies\u201d and (2) surrogates, also know as \u201creverse proxies\u201d. Each of these will now be described.","A forward proxy configuration is shown in . Forward proxies function in what is known as a \u201cclient pull\u201d approach to content retrieval. That is, the forward proxy functions on behalf of the client (for example, an end user's browser or other user agent) to either deliver content to the client directly from the proxy's accessible cache storage, if the requested content is already in the cache, or to request that content from a content server otherwise.  shows a client  requesting  some content, where this request  travels through the Internet  and reaches a forward proxy . In , it is assumed that the requested content is not yet available from proxy 's cache storage . Therefore, proxy  sends  its own request for that content to a content server . (For purposes of illustration but not of limitation, a content server is also referred to herein as a \u201cweb server\u201d). It may happen that proxy  also functions as a load balancing host or network dispatcher, whereby it selects a content server  from among several content servers , ,  that are available for servicing a particular request. The WebSphere\u00ae Edge Server which is available from the International Business Machines Corporation (\u201cIBM\u201d) is an example of a solution providing both load balancing and proxy caching. (\u201cWebSphere\u201d is a registered trademark of IBM.) A separate load balancing host might be placed in the network path between proxy  and content servers , ,  as an alternative. This has not been illustrated in the figures, as the load balancing function is not necessary to an understanding of the present invention.","Returning to the description of the content request scenario, content server  obtains the requested content and returns  that content to the proxy . To obtain the requested content, a particular content server may invoke the services of an Application Server (such as a WebSphere\u00ae application server which is available from IBM), where this application server may be co-located with the content server  in a single hardware box or may be located at a different device (not shown). The Web server may also or alternatively invoke the services of a back-end enterprise data server (such as an IBM OS\/390\u00ae server running the DB\/2 or CICS\u00ae products from IBM), which may in turn access one or more databases or other data repositories. These additional devices have not been illustrated in the figure. (\u201cOS\/390\u201d and \u201cCICS\u201d are registered trademarks of IBM.)","After proxy  receives the content from the content server , proxy  returns  this content to its requesting client . In addition, proxy  may store  a locally-accessible copy of the content in a data store  which is used as cache storage. (There may be cases in which content is marked as \u201cnot cachable\u201d, and in these cases, the store operation  does not occur.) The benefit of using this forward proxy and its data store  is illustrated in .",{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 1B","FIG. 1A"],"b":["101","100","115","150","150","110","115","115","120","130","115","155","160","101","115","130","130"]},"As a forward proxy continues to retrieve content for various requests from content servers, it will populate its cache storage with that content. Assuming that the system has sufficient storage to accumulate a proper \u201cworking set\u201d of popular content, the ratio of requests which can be served from cache should grow after the initial populating process, such that fewer requests are routed to the back-end.","A surrogate configuration is shown in . Surrogates function in a \u201cserver push\u201d approach to content retrieval. That is, a content server pushes content to a surrogate based upon determinations made on the back-end of the network. For example, a content creator might know that certain content is likely to be heavily used, and can configure a content server to push that content proactively to the surrogate, without waiting for clients to request it. Then when requests do arrive from clients, the requests can be served directly from the cache storage without making a request of the back-end resources and waiting for a response. In addition, a content creator using a content management system (\u201cCMS\u201d) to create new content or to revise existing content can cause the CMS to notify the content server of the presence of this content, and the content server may push the content to the surrogate in response.  shows a CMS  pushing content  to content servers , , . A selected one of these content servers  is depicted as notifying  the surrogate  of the new content, which the surrogate then stores  in its cache . The benefit of using this surrogate and its data store  is illustrated in .",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 2B","FIG. 2A","FIG. 1B"],"b":["100","200","230","230","110","200","200","235","240","100","200","130","100"]},"In some cases, the functions of a proxy and surrogate are combined to operate in a single network-accessible device. IBM's WebSphere Edge Server is a caching solution that can be configured to function as either a forward proxy or a surrogate, or both. Hereinafter, the term \u201ccaching system\u201d is intended to refer to both forward proxies and surrogates.","Content management systems use a content distribution protocol to publish notifications to content servers, and use a protocol such as Hypertext Transfer Protocol (\u201cHTTP\u201d) or File Transfer Protocol (\u201cFTP\u201d) to move content from an authoring machine to a staging server (or to a production server). Typically, a notification as described herein comprises a content distribution protocol message which is sent from the CMS to one or more content servers, notifying them of new content or changes to previously-distributed content. A CMS knows the file system path with which that content is stored (e.g. at a staging server). This external, file-oriented identifier is the only identifier by which a CMS typically identifies content: the CMS does not typically know the Uniform Resource Locator, or \u201cURL\u201d, by which the content will be requested from user agents (referred to equivalently herein as client browsers). This is because of a name space mismatch between the identifiers used at content servers and those used at content caching systems.","Content caching systems use a name space view based on URLs. Content servers and staging servers, on the other hand, store their content using a traditional directory structure (i.e. file path and file name) view wherein the file names relate to physical locations on storage devices. Content servers translate from an incoming URL to a local path and file name (referred to hereinafter simply as a file name for ease of reference) through the use of rewrite rules. The content server retrieves the content from its physical location using the translated file name, and returns that content to the requesting client as a response to the client's request for a particular URL. Because caching systems are positioned in the network path between the requesting client and the content server, they know only the URL for the content, and do not know the associated file name used to store that content at the content server. This is referred to herein as the name space mismatch.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3","b":["360","350","320","320","310","130","300","320","310","330","340","310","130","370","340","300","120"]},"Or, if content is to be invalidated (i.e. deleted), the CMS  issues an appropriate invalidation message notifying the content server to remove the content from its storage. Caching system  cannot process this message, and therefore cannot remove the invalidated cached content from its cache storage.","This prior art approach does not allow caching systems to use notification messages sent by a CMS, and thus the efficiency of the caching system and of the CMS's content distribution operations is impacted. More serious problems may result from the inability of the caching system to respond to content update and invalidation notifications: the caching system may continue to serve content that should have been replaced or removed.","An object of the present invention is to provide techniques to resolve the name space mismatch between content servers and content caching systems.","Yet another object of the present invention is to improve the efficiency of content caching systems.","Still another object of the present invention is to enable content management systems to interoperate effectively with content caching systems.","A further object of the present invention is to enable content management systems to use a consistent interface for communicating with content servers and content caching systems.","Other objects and advantages of the present invention will be set forth in part in the description and in the drawings which follow and, in part, will be obvious from the description or may be learned by practice of the invention.","To achieve the foregoing objects, and in accordance with the purpose of the invention as broadly described herein, the present invention provides methods, systems, and computer program products for addressing the name space mismatch between content servers and content caching systems. A file name-to-URL mapping is created for use by content caching systems, and data in protocol response messages (and optionally in protocol request messages) is augmented to transmit information for use in creating this mapping. Several alternative techniques for providing the augmented message information are disclosed. These include, but are not limited to: use of new directives on existing cache-control headers in HTTP messages; addition of new headers in HTTP messages; and use of meta-data in markup languages such as Hypertext Markup Language (\u201cHTML\u201d) or Extensible Markup Language (\u201cXML\u201d) format.","The present invention may also be used advantageously in methods of doing business, for example by providing content caching systems and\/or services wherein the caching system efficiency and\/or integrity is improved by taking advantage of notification events from content management systems by using the techniques disclosed herein. Providers of such systems and\/or services may offer these advantages to their customers for a competitive edge in the marketplace.","The present invention will now be described with reference to the following drawings, in which like reference numbers denote the same element throughout.","The present invention provides techniques for resolving the name space mismatch between URL-based content caching systems and file name-based content servers. As will be discussed in more detail below, a file name-to-URL mapping is created for use by content caching systems, and data in protocol response messages (and optionally in protocol request messages) is augmented to transmit information for use in creating this mapping.","The disclosed techniques enable content management systems to propagate update notifications and invalidation notifications not only to content servers which use file-based naming conventions, but also to content caching systems which use URL-based naming. These notifications may use a common interface format, whether they are destined for a content server which traditionally understands file-oriented names or for a content caching system which traditionally does not.","In preferred embodiments, implementations of the present invention may operate as plug-ins or filters in the network path of the content caching systems and content servers. Use of plug-ins is a technique which is generally known in the art for adding functionality to an existing device without modifying the device itself. (Use of plug-ins for the purposes disclosed herein is not known in the art, however.) Alternatively, the implementation of such systems and\/or servers may be directly modified to include the techniques disclosed herein. Implementations of the present invention are discussed herein with reference to logic that may operate in either scenario.","The approach used by the present invention has a number of advantages. As one example, the cost and complexity of deploying a CMS is reduced through use of a consistent interface for communicating with content servers and with caching systems. As another example, a CMS may perhaps scale more easily when it operates in this manner. In addition, the content served from the content cache may be more reliable because the caching system can respond to update and invalidation notifications from a CMS.","Content servers of the prior art use URL-to-file name mappings which may be stored, for example, in data structures such as lookup tables. A simple example of such a table is shown in . When a content server receives a notification from a CMS that a file has been updated, a content distribution client (or analogous functionality) at the content server typically acquires the file by making a request to a staging server and then installing the file in the content server's file system. This was illustrated with reference to . (It should be noted that references herein to retrieving content from a staging server are for purposes of illustration and not of limitation. Alternatively, content may be requested from different sources, such as from a production server. In addition, in some scenarios, more than one source for content may be involved, such as multiple staging servers.) It may happen that more than one URL refers to a single file. The URL-to-file name mapping rules at a content server will therefore cause a stored file to be served out if any of a certain set of URLs is requested. With reference to the example in , several sample mappings are provided for purposes of illustration. As shown therein, the sample URLs , , and  are all mapped to the same file name and thus the content stored at file space address \u201cd:\\legalfiles\\copyright\\main.html\u201d (see elements , , ) will be served upon receiving a request for any of these URLs. The URL rewriting rules which are in effect provide for this result. (in the example, the various URLs are designed to represent different ways of requesting information about copyrights and trademarks.) However, one URL may only be mapped to or associated with one file name. See, for example, elements  and , which illustrate that in response to receiving a request for URL , which has the form \u201cftp:\/\/abc.def.com\/wyz\u201d, the content of a file \u201cc:\\myWebFiles\\aaa.jpg\u201d will be served using these mappings.","Suppose that the content of file \u201cd:\\mainfiles\\homepage.htm\u201d , which in this example mapping denotes a markup language file used in rendering a home page for IBM, is changed using the CMS. The CMS will issue an update notification to the content servers using this file name, and the updated content can then be retrieved and used to replace the existing content in the file systems of those servers. The CMS will be unable, however, to successfully notify prior art caching systems to update (or, similarly, to invalidate) their cached content, because prior art caching systems know this same content only by its corresponding URL \u201chttp:\/\/www.ibm.com\u201d . (That is, the URL  is used for retrieving the markup language file, assuming that the URL itself is used as a key for the cache storage. In some caching system implementations, transformations may be performed on an incoming URL to obtain the cache lookup key. This alternative lookup approach does not materially impact the discussion of the present invention, and it will therefore be assumed hereinafter that the URL is used as the lookup key without being transformed. The manner in which a transformed URL may be used instead will be obvious to one of ordinary skill in the art.)","The present invention solves the name space mismatch problem of the prior art by dynamically and automatically learning the file name-to-URL mapping for content cached by a caching system. When an update notification or invalidation notification message arrives from a CMS and uses a file name, the caching system will now be able to consult its stored mapping to determine which URL or URLs are associated with that file name. The caching system can then retrieve the replacement content (in the case of an update notification) using the associated URL(s), and replace the content in cache storage. Subsequent requests for the URL(s) associated with the replaced content are then automatically served using the revised content. Similarly, in the vase of an invalidation notification, the caching system will know which of its URLs should have their content invalidated even though that content has been identified by file name.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5","FIG. 5"],"b":["500","510","590","510"]},"Cache miss processing according to the present invention enables the caching system to automatically and dynamically learn the information used to populate its file name-to-URL mapping. A simplified example  of a data structure which may be used to store this mapping is shown in . As can be seen, the file name-to-URL mapping created by the caching system takes the reverse form of the content server's URL-to-file name mapping (illustrated in ). As was discussed with reference to table , sample table  shows that one file name, such as \u201cc:\\myWebFiles\\aaa.txt\u201d (appearing in elements , , and ), may in some cases map to more than one URL (see elements ,, ). Elements  and  illustrate an entry having a one-to-one mapping between the file name and URL.","Note that while the data structure  is depicted as a table, this is for purposes of illustration and not of limitation. Other techniques for storing the mappings may be used, such as linked lists and so forth. Such alternative techniques will be well known to those of skill in the art.","Returning now to the discussion of , preferred embodiments of the cache miss processing at the caching system insert a content distribution flag (i.e. value) into a content request (Block ) prior to sending this request to a content server (Block ). The purpose of this content distribution flag is to notify the receiving content server that this content caching system is \u201ccontent distribution aware\u201d\u2014that is, if informed of the file name associated with returned content, this caching system can make use of that information. In these preferred embodiments, the content distribution flag may be represented using headers or meta-data syntax, as will be described with reference to . In alternative embodiments, this content distribution flag may be omitted, and content servers according to the present invention may be adapted to always transmit the file name with returned content. Those caching systems which do not understand this information may then discard it. It may be assumed for purposes of the following discussion that a \u201ctrue\u201d or \u201cyes\u201d value is specified in the header or meta-data syntax created in Block .","Several alternative syntax formats may be used for the content distribution flag of the present invention. In one approach, an HTTP GET request message (or, alternatively, a message which is semantically similar to HTTP GET in another protocol) is augmented with an HTTP header and value providing this information. In other approaches, meta-data information is included in the request message to indicate this information. The HTTP specification is entitled \u201cHypertext Transfer Protocol\u2014HTTP\/1.1\u201d (June 1999), and is published as Request For Comments (\u201cRFC\u201d) 2616 from the Internet Engineering Task Force (\u201cIETF\u201d). References hereinafter to HTTP GET are to be considered as representative of messages in other protocols (such as the Wireless Session Protocol, or \u201cWSP\u201d).",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIGS. 7A through 7E"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 7A","FIG. 7B through 7D","FIG. 7E"]},"Use of the HTTP header syntax, as illustrated in , augments an HTTP GET request such as \u201cGET http:\/\/www.ibm.com\/abc.html HTTP\/1.1\u201d . In this example , the content distribution flag header has the syntax \u201cCDistAware:\u201d and a value of \u201cYes\u201d (see element ). The particular header syntax, and the manner in which values are expressed, may vary from one implementation to another. (, C, and E, for example, treat the value as a Boolean, and indicate a \u201cTRUE\u201d value with the integer value \u201c1\u201d.) The request header  shown in  indicates the following information: (1) this is a request for the content corresponding to URL \u201chttp:\/\/www.ibm.com\/abc.html\u201d, and this message is encoded using HTTP 1.1 (see element ); (2) the content type, in this example, is \u201ctext\/html\u201d (see element ); and (3) this requester is content-distribution aware (see element ).","Meta-data using markup languages, such as HTML and XML, may be used as alternatives to the format shown in . For HTML, one example of an alternative format uses the \u201cHTTP-EQUIV\u201d attribute on a \u201cMETA\u201d tag, as shown at  in . In this example, the syntax \u201cCDistAware\u201d has been used as the value of the HTTP-EQUIV attribute to name the content distribution flag, and a value of \u201c1\u201d is provided as the corresponding value of the flag, thereby conveying information which is analogous to element  in . A META element (such as element  in ) may be used to identify properties of a document. An HTTP-EQUIV attribute on a META tag may be used in markup language documents to explicitly specify equivalent information that an HTTP server should convey in the HTTP response message with which the document is transmitted. Information on the META tag can be found in RFC 2518 from the IETF, which is entitled \u201cHTTP Extensions for Distributed Authoring\u2014WEBDAV\u201d (February 1999). In addition, a discussion of this syntax construct may be found in a Web-published article titled \u201cHTML's META-tag: HTTP-EQUIV\u201d, A. Richmond (date unknown), located on the Internet at http:\/\/wdvl.com\/Authoring\/HTML\/Head\/Meta\/HTTP.html.","Another example of an alternative format for use with HTML documents is the META tag with a \u201cNAME\u201d attribute, rather than an HTTP-EQUIV attribute. This alternative is illustrated in  at element . The NAME attribute on a META tag or element identifies a property name, and the VALUE attribute then specifies a value for that named property. For more information on use of the NAME attribute, refer to RFC 2518 or to http:\/\/wdvl.com\/Authoring\/HTML\/Head\/Meta on the Internet.","A third example of an alternative format for use with HTML documents uses specially-denoted comments within the body of an HTTP GET request message, as illustrated at  in . As shown therein, this example uses a keyword \u201cCDistAware\u201d followed by a colon, followed by a text string value.","With XML documents, a namespace is preferably used to introduce a tag set for conveying content distribution information, and may be designed to resemble the HTML markup if desired. An example of this approach is shown at  in , where a tag value \u201cCDIST\u201d denotes that this document element corresponds to a content distribution tag set which has been defined to include the META, HTTP-EQUIV, and CONTENT keywords which are specified on example tag .","Returning again to the discussion of , after the content request has been transmitted in Block , some relatively short amount of time may pass, after which the content is returned in a response message from the content server (Block ). Logic underlying the processing performed in preferred embodiments at a content server to create that response message is depicted in , which will now be described. As shown therein, a content request is received from the caching system (Block ). The content is obtained (Block ) and a response message is formatted (Block ) for returning that content to the requester. In preferred embodiments, a test is made at Block  to see whether the request message contained an indication that the requester is content distribution aware. (Refer to the discussion of , above, for more information on the augmented request messages.) When this test has a positive result, content distribution information is added to the response header at Block , as discussed in more detail below with reference to ; otherwise, the processing of Block  is bypassed. As discussed earlier with reference to Block  of , alternative embodiments may presume that the caching system is content distribution aware, in which case the test in Block  may be omitted and the processing of Block  is performed in all cases. Following the processing of Block , and when Block  is not performed, Block  sends the HTTP GET response to the requesting caching system, and the processing of  ends.","The content distribution information added to the response message in Block  may be expressed in several alternative ways. The information comprises an identification of the file from which this content was obtained, and may use the file name itself. Returning this information to the caching system enables the caching system to populate its file name-to-URL mapping (which was described with reference to ). It may happen, however, that an implementation of the present invention chooses not to expose the name of the file (for example, for security purposes). In such cases, a substitute version of that file name may be used. Preferably, the substitute file name is created by encrypting or otherwise encoding the actual file name. (Hereinafter, references to the file name when discussing the content distribution information added by the content server are intended to include other forms of content identification such as encrypted or encoded file names.)","Public key cryptography or private (shared) key cryptography may be used for creating an encrypted file name as a substitute for the actual file name. In a public key system, the content server uses a public key to encrypt the actual file name, and transmits that encrypted file name to the caching system. The public key may be that of the CMS, or of the content server, or perhaps of the caching system, depending on whether a decryption operation is needed. Decryption is described below. The caching system then stores the encrypted file name in its mapping information. When the CMS sends a notification to the caching system pertaining to a particular file name, the CMS uses the same public key to encrypt that file name. The caching system then uses the encrypted value received from the CMS as a key to index into its mapping information to extract the associated URL\u2014that is, as a file name value  used to extract an associated URL value . In this manner, the substitute for the file name can be sent to caching systems without publicly exposing information about the actual file structure used by a content server. In a private key system, on the other hand, the content server must use a secret key value which is shared with the CMS to perform the encryption of the file name being sent to the caching system, and the CMS then uses this same shared key to encrypt file names being sent on notifications to the caching system.","Note that in preferred embodiments, when a caching system receives an update notification from a CMS, that update proceeds as if a cache miss has occurred. That is, the caching system's mapping information is consulted to determine the URL of the content to be updated, based upon the file name from the notification message. This URL is then used to create a content request which is sent to a content server. Therefore, if the content server remembers the encrypted file name-to-actual file name mapping, then a decryption of the file name received from the caching system is not necessary: a simple lookup can be used. In alternative embodiments, if the content server does not retain information regarding the encrypted file names, then a decryption process is needed. This requires that encryption is performed using the content server's public key, when using public key encryption, so that the content server can decrypt the received file name using its private key. Or, when shared key cryptography is used, the content server decrypts the file name using the key it shares with the CMS. (Techniques for performing this decryption will be obvious to those of skill in the art.)","Several alternative examples of the syntax used to specify the file name information at Block  an shown in . The choice of syntax format for the response messages preferably mirrors the format used by a content caching system on the request messages to convey that it is content distribution aware; alternatively, a different syntax format may be used by the parties for request messages and response messages, without deviating from the scope of the present invention.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIGS. 9A and 9B","FIG. 9C through 9E","FIG. 9F"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIGS. 9A and 9B","FIG. 9A","FIG. 9B"],"b":["910","912","914","916","914","916"],"sub":["\u2014","\u2014","\u2014"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 9C","FIGS. 9A and 9B","FIG. 9D","FIG. 9E"],"b":["920","930","940"],"sub":"\u2014"},"Finally, an XML syntax example is illustrated in . As discussed with reference to , a namespace is preferably used to introduce a tag set for conveying content distribution information, including file name values in response messages. An example of this approach is shown at  in , where the XML syntax has been designed to resemble the HTTP-EQUIV meta-data syntax of .","In some situations, a single file may be available from more than one content server, and thus it may be necessary to identify that file as to the domain from which it was received. For example, if a file \u201cABC\u201d is available from content server \u201cPQR\u201d as well as from content server \u201cXYZ\u201d, then the caching system may track whether a file to be changed in response to an update notification is the file from PQR or the file from XYZ. To address these cases, an optional aspect of the present invention augments the file name-to-URL mapping with an indication of the source domain, and this domain information is preferably specified on the response message sent by the content server during the processing of . It will be obvious to one of ordinary skill in the art how the syntax illustrated in  may be changed to add this additional information. For example, with reference to , an additional cache-control header may be added, or a multi-valued cache-control header may be used which includes the domain as well as the file name. With reference to , as another example, an additional <META> tag may be included to convey the domain information.","Continuing again with the discussion of , after the caching system receives the requested content from the content server at Block , Block  checks to see if the response message includes a file name specified (for example) as a header or meta-data. If there is no file name information, then processing continues at Block ; otherwise, Block  extracts the file name value. The manner in which this information is extracted depends on how it was formatted, as will be obvious. Refer to the discussion of , above, for a detailed discussion of that formatting.","The extracted file name is used to populate the caching system's mapping information (Block ). The caching system is aware of the URL for which this content was returned, according to prior art techniques, and thus uses this URL value along with the file name information provided according the present invention to create a file name-to-URL entry in the mapping (see table  of ).","The content is cached (Block ) using its URL, and is also returned (Block ) to the requesting client. In preferred embodiments, content distribution headers and\/or meta-data values are forwarded along with this response message. Thus, if the requesting client is another caching system, this information may be used to populate the file name-to-URL mapping of that caching system as well. After the content is returned, the processing of  ends.","It should be noted that the order of operations depicted in  may be altered, as desired (for example, to further reduce the response time to the requesting client). For example, the processing depicted at Block  might be moved to immediately follow Block  to return a response to the client immediately upon receiving the requested content. Similarly, the processing of Block  might be moved to precede the processing of Blocks  through  in order to make the newly-received content available for serving from cache to subsequent requesters sooner. Furthermore, it should be noted that response messages specifying that their content is not cachable have not been addressed by the logic flow in . (Such processing is known in the art, and the manner in which these considerations may be added to the logic in FIG. \u2014for example, to bypass creation of a mapping entry for non-cachable content\u2014will be obvious to one of ordinary skill in the art.)","As has been demonstrated, the present invention enables a caching system to automatically and dynamically populate a mapping of file names to URLs for the content cached by that system. The manner in which this mapping enables the content caching system to respond to an update notification is illustrated in . When a notification of updated content subsequently arrives from a CMS (Block ), and this notification specifies the name of the file, the file name can be extracted (Block ) and used to consult the caching system's mapping to determine the URL corresponding to that file name (Block ). Upon obtaining the URL, the caching system, in its role as a content proxy, can send a content request to the content server using that URL to obtain the updated content for the URL (Block ). This processing proceeds according to the processing for a cache miss, as has been described with reference to  (beginning at Block  of ).","To handle a content invalidation notification sent to a caching system from a CMS, a caching system according to the present invention also uses the file name in this notification to consult its stored mapping. Processing of an invalidation notification by the content caching system is illustrated in . After an invalidation notification arrives (Block ), the file name is extracted (Block ) and used to locate the corresponding URL from the mapping (Block ). This URL is then used for invoking an invalidation message of the cache control application programming interface (\u201cAPI\u201d) (Block ) to invalidate the cached content. Because the mapping created as disclosed herein enables determining the corresponding URL, URL-based cache invalidation messages of prior art APIs can be used for this purpose without change.","It should be noted that if a particular file name is associated with more than one URL in the caching system's file name-to-URL mapping, then content requests for each of the URLs are preferably sent to the content server when processing an update notification, and the invalidation API is preferably invoked for each URL when processing an invalidation notification. If a domain name value is specified, then the update or invalidation may be limited to the content pertaining to that domain name.","In both the update notification and invalidation notification scenarios, it may happen that no stored mapping is found for the file name specified in the notification. In these cases, the notification message may be ignored. As an alternative, error handling may be invoked if desired.","Note that when invalidation notification messages use encrypted file names, a corresponding decryption process is not necessary in order to invoke the cache invalidation API. The encrypted file name is simply used to access the caching system's mapping, and the retrieved URL can be used unchanged when invoking the API.","The disclosed techniques may also be used to implement improved methods of doing business. For example, content caching systems may be provided wherein the content can now be managed in an improved manner using the techniques disclosed herein, as the caching system can now respond to update and invalidation notification messages sent by a CMS. Content caching services may be offered which make use of the present invention, thereby enabling users of such systems to benefit from the increased system efficiency and\/or integrity.","To the best of the inventors' knowledge and belief, an integrated content caching and content management system from InfoLibria provides for caching systems to respond to CMS notifications. However, it is believed that the approach taken therein is to expose the caching system's URL to the CMS, and then to use this URL when sending notifications to caching systems. One drawback of such an approach occurs if a URL changes: the change must be propagated to, and coordinated with, the CMS, or the system will effectively break with regard to that content. The technique of the present invention does not have this dependency, and its dynamic learning approach is therefore more flexible and more reliable. Another drawback of such an approach is that a CMS must use two different interfaces for communicating notification messages: a URL-based interface for sending notifications to caching systems, and a file-based interface for sending notifications to content servers. This increases the cost and complexity of deploying a CMS, and may limit the scalability of the CMS as well.","As will be appreciated by one of skill in the art, embodiments of the present invention may be provided as methods, systems, or computer program products. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment combining software and hardware aspects. Furthermore, the present invention may take the form of a computer program product which is embodied on one or more computer-usable storage media (including, but not limited to, disk storage, CD-ROM, optical storage, and so forth) having computer-usable program code embodied therein.","The present invention has been described with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, embedded processor or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the flowchart and\/or block diagram block or blocks.","While the preferred embodiments of the present invention have been described, additional variations and modifications in those embodiments may occur to those skilled in the art once they learn of the basic inventive concepts. In particular, the disclosed techniques may be adapted to resolve a name space mismatch between forms of content identification other than file names and URLs, and markup languages other than HTML and XML may be used for expressing content distribution information. Furthermore, while preferred embodiments presume that update and invalidation notifications originate from a CMS, the invention operates equivalently when such notifications originate from another source or sources. Therefore, it is intended that the appended claims shall be construed to include the preferred embodiments and all such variations and modifications as fall within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIGS. 5","b":["8","10","11"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIGS. 7A\u20137E"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIGS. 9A\u20139F"}]},"DETDESC":[{},{}]}
