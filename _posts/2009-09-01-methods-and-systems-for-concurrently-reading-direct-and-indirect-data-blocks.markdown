---
title: Methods and systems for concurrently reading direct and indirect data blocks
abstract: Methods and systems for concurrently reading direct and indirect data blocks of a data object stored in a network storage server system. In one embodiment, upon receiving a request to read a data object, the storage server identifies a location of an indirect data-block of the data object and a total number of direct data-blocks associated with the data object. Using this information, the storage server concurrently reads, using a single read operation, both the indirect data-block and a specific number of data blocks that are contiguous with the location of the indirect data-block. The specific number is commensurate with the total number of direct-data blocks associated with the data object. In one embodiment, the storage server verifies whether the data object is represented using a contiguous-mode layout scheme before performing the concurrent single-read operation to read the data object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08171064&OS=08171064&RS=08171064
owner: NetApp, Inc.
number: 08171064
owner_city: Sunnyvale
owner_country: US
publication_date: 20090901
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["At least one embodiment of the present invention pertains to network storage systems, and more particularly, to methods and systems for concurrently reading direct and indirect data-blocks of a data object.","Network based storage, or simply \u201cnetwork storage\u201d, is a common approach to backing up data, making large amounts of data accessible to multiple users, and other purposes. In a network storage environment, a storage server makes data available to client (host) systems by presenting or exporting to the clients one or more logical containers of data (or simply, \u201cdata objects\u201d). There are various forms of network storage, including network attached storage (NAS) and storage area network (SAN). In a NAS context, a storage server services file-level requests from clients, whereas in a SAN context a storage server services block-level requests. Some storage servers are capable of servicing both file-level requests and block-level requests.","There are several trends that are relevant to network storage technology. The first is that the amount of data being stored within a typical enterprise is approximately doubling from year to year. Second, the number of clients that the storage server can serve simultaneously has also been steadily increasing. As a result of the increase in stored data and the increase in the number of clients accessing the stored data, a vast majority of the storage server's computing resources is allocated to servicing, for example, read and write requests received from the clients.","In traditional storage systems, the storage server stores data pertaining to each data object (e.g., a file) in the form of multiple \u201cdirect\u201d data-blocks that contain the actual user data of the data object. The storage server typically uses a hierarchical structure (e.g., a buffer tree) that uses multiple levels of data-blocks to represent each data object. For example, \u201cindirect\u201d data-blocks in a buffer tree associated with a data object typically include pointers for locating direct data-blocks of the data object at a lower level of the buffer tree.","As a result of the multiple levels of hierarchy, a traditional storage server commonly uses multiple read operations (i.e., multiple I\/O operations) to read a data object. For example, when a data object is represented using two levels of hierarchy (i.e., a first level containing indirect data-blocks and a second level that contains direct data-blocks), the storage server uses two read operations: a first read operation to read the indirect data-blocks (to identify the location of the direct-data blocks), and a second read operation to read the second level direct data-blocks. These multiple read operations for reading a data object significantly consume processing resources of the storage server, which can significantly impact performance, especially in a system that has a heavy read workload.","Introduce herein are methods and systems for concurrently reading direct and indirect data blocks of a data object stored in a network storage server system. In one embodiment, upon receiving a request to read a data object, the storage server identifies a location of an indirect data-block of the data object and a total number of direct data-blocks associated with the data object. Using this information, the storage server concurrently reads, using a single read operation, both the indirect data-block and a specific number of direct data blocks that are contiguous with the location of the indirect data-block. The specific number is commensurate with the total number of direct-data blocks associated with the data object. In one embodiment, the storage server verifies whether the data object is represented using a contiguous-mode layout scheme before performing the concurrent single-read operation to read the data object. Accordingly, the storage server reduces the overall number of read operations required to read certain data objects (e.g., data objects that are represented using a contiguous-mode layout scheme), thereby improving the operating efficiency of the storage server.","References in this specification to \u201can embodiment\u201d, \u201cone embodiment\u201d, or the like, mean that the particular feature, structure or characteristic being described is included in at least one embodiment of the present invention. Occurrences of such phrases in this specification do not necessarily all refer to the same embodiment.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 1 and 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1"],"b":["104","1","104","2","102","106","104","1","104","2","102","102","108","110","112","105","212"]},"The storage server (or servers)  may be, for example, one of the FAS-xxx family of storage server products available from NetApp, Inc. The client systems .-. are connected to the storage server  via the computer network , which can be a packet-switched network, for example, a local area network (LAN) or wide area network (WAN). Further, the storage server  is connected to the disks  via a switching fabric , which can be a fiber distributed data interface (FDDI) network, for example. It is noted that, within the network data storage environment, any other suitable numbers of storage servers and\/or mass storage devices, and\/or any other suitable network technologies, may be employed.","The storage server  can make some or all of the storage space on the disk(s)  available to the client systems .-. in a conventional manner. For example, each of the disks  can be implemented as an individual disk, multiple disks (e.g., a RAID group) or any other suitable mass storage device(s). The storage server  can communicate with the client systems .-. according to well-known protocols, such as the Network File System (NFS) protocol or the Common Internet File System (CIFS) protocol, to make data stored on the disks  available to users and\/or application programs. The storage server  can present or export data stored on the disk  as volumes to each of the client systems .-.. A \u201cvolume\u201d is an abstraction of physical storage, combining one or more physical mass storage devices (e.g., disks) or parts thereof into a single logical storage object (the volume), and which is managed as a single administrative unit, such as a single file system. A \u201cfile system\u201d is a structured (e.g., hierarchical) set of stored data objects. A \u201cdata object,\u201d as indicated herein, refers to logical containers of data (e.g., volumes, logical unit numbers (LUNs), directories, files). Note that a \u201cfile system\u201d does not have to include or be based on \u201cfiles\u201d per se as its units of data storage.","Various functions and configuration settings of the storage server  and the mass storage subsystem  can be controlled from a management station  coupled to the network . Among many other operations, a data object migration operation can be initiated from the management station .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["200","204","204","1","204","202","206","204","202","202","208","208","1","208","210","212","212","1","212","212"]},"Each of the nodes  is configured to include several modules, including an N-module , a D-module , and an M-host  (each of which may be implemented by using a separate software module) and an instance of, for example, a replicated database (RDB) . Specifically, node . includes an N-module ., a D-module ., and an M-host .; node .N includes an N-module .N, a D-module .N, and an M-host .N; and so forth. The N-modules .-.M include functionality that enables nodes .-.N, respectively, to connect to one or more of the client systems  over the network , while the D-modules .-.N provide access to the data stored on the disks .-.N, respectively. The M-hosts  provide management functions for the clustered storage server system . Accordingly, each of the server nodes  in the clustered storage server arrangement provides the functionality of a storage server.","The RDB  is a database that is replicated throughout the cluster, i.e., each node  includes an instance of the RDB . The various instances of the RDB  are updated regularly to bring them into synchronization with each other. The RDB  provides cluster-wide storage of various information used by all of the nodes , including a volume location database (VLDB) (not shown). The VLDB is a database that indicates the location within the cluster of each volume in the cluster (i.e., the owning D-module  for each volume) and is used by the N-modules  to identify the appropriate D-module  for any given volume to which access is requested.","The nodes  are interconnected by a cluster switching fabric , which can be embodied as a Gigabit Ethernet switch, for example. The N-modules  and D-modules  cooperate to provide a highly-scalable, distributed storage system architecture of a clustered computing environment implementing exemplary embodiments of the present invention. Note that while there is shown an equal number of N-modules and D-modules in , there may be differing numbers of N-modules and\/or D-modules in accordance with various embodiments of the technique described here. For example, there need not be a one-to-one correspondence between the N-modules and D-modules. As such, the description of a node  comprising one N-module and one D-module should be understood to be illustrative only.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3","b":["208","301","301","320","340","370","380","390","370","208","208","270","214","216"]},"The storage controller  can be embodied as a single- or multi-processor storage system executing a storage operating system  that preferably implements a high-level module, such as a storage manager, to logically organize the information as a hierarchical structure of named directories, files and special types of files called virtual disks (hereinafter generally \u201cblocks\u201d) on the disks. Illustratively, one processor  can execute the functions of the N-module  on the node  while another processor  executes the functions of the D-module .","The memory  illustratively comprises storage locations that are addressable by the processors and adapters , ,  for storing software program code and data structures associated with the present invention. The processor  and adapters may, in turn, comprise processing elements and\/or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system , portions of which is typically resident in memory and executed by the processors(s) , functionally organizes the storage controller  by (among other things) configuring the processor(s)  to invoke storage operations in support of the storage service provided by the node . It will be apparent to those skilled in the art that other processing and memory implementations, including various computer readable storage media, may be used for storing and executing program instructions pertaining to the technique introduced here.","The network adapter  includes a plurality of ports to couple the storage controller  to one or more clients  over point-to-point links, wide area networks, virtual private networks implemented over a public network (Internet) or a shared local area network. The network adapter  thus can include the mechanical, electrical and signaling circuitry needed to connect the storage controller  to the network . Illustratively, the network  can be embodied as an Ethernet network or a Fibre Channel (FC) network. Each client  can communicate with the node  over the network  by exchanging discrete frames or packets of data according to pre-defined protocols, such as TCP\/IP.","The storage adapter  cooperates with the storage operating system  to access information requested by the clients . The information may be stored on any type of attached array of writable storage media, such as magnetic disk or tape, optical disk (e.g., CD-ROM or DVD), flash memory, solid-state disk (SSD), electronic random access memory (RAM), micro-electro mechanical and\/or any other similar media adapted to store information, including data and parity information. However, as illustratively described herein, the information is stored on disks . The storage adapter  includes a plurality of ports having input\/output (I\/O) interface circuitry that couples to the disks over an I\/O interconnect arrangement, such as a conventional high-performance, Fibre Channel (FC) link topology.","Storage of information on disks  can be implemented as one or more storage volumes that include a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number (VBN) space on the volume(s). The disks  can be organized as a RAID group. One or more RAID groups together form an aggregate. An aggregate can contain one or more volumes\/file systems.","The storage operating system  facilitates clients' access to data stored on the disks . In certain embodiments, the storage operating system  implements a write-anywhere file system that cooperates with one or more virtualization modules to \u201cvirtualize\u201d the storage space provided by disks . In certain embodiments, a storage manager  () logically organizes the information as a hierarchical structure of named directories and files on the disks . Each \u201con-disk\u201d file may be implemented as set of disk blocks (or, data blocks) configured to store information, such as data, whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module(s) allow the storage manager  to further logically organize information as a hierarchical structure of blocks on the disks that are exported as named logical unit numbers (LUNs).","In the illustrative embodiment, the storage operating system  is a version of the Data ONTAP\u00ae operating system available from NetApp, Inc. and the storage manager  implements the Write Anywhere File Layout (WAFL\u00ae) file system. However, other general or special purpose operating systems are capable of being enhanced or created for use in accordance with the principles described herein.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4","b":["330","330","410","410","214","410","412","206","410","410","440"],"i":"a "},"In addition, the storage operating system  includes a set of layers organized to form a backend server  that provides data paths for accessing information stored on the disks  of the node . The backend server  in combination with underlying processing hardware also forms the D-module . To that end, the backend server  includes a storage manager module  that manages any number of volumes , a RAID system module  and a storage driver system module . At least one of the volumes  includes at least one qtree  and at least one standard directory .","The storage manager  primarily manages a file system (or multiple file systems) and serves client-initiated read and write requests. The RAID system  manages the storage and retrieval of information to and from the volumes\/disks in accordance with a RAID redundancy protocol, such as RAID-4, RAID-5, or RAID-DP, while the disk driver system  implements a disk access protocol such as SCSI protocol or FCP.","The backend server  also includes a CF interface module to implement intra-cluster communication  with N-modules and\/or other D-modules. The CF interface modules and can cooperate to provide a single file system image across all D-modules  in the cluster. Thus, any network port of an N-module  that receives a client request can access any data container within the single file system image located on any D-module  of the cluster.","The CF interface modules  implement the CF protocol to communicate file system commands among the modules of cluster over the cluster switching fabric  (). Such communication can be effected by a D-module exposing a CF application programming interface (API) to which an N-module (or another D-module) issues calls. To that end, a CF interface module  can be organized as a CF encoder\/decoder. The CF encoder of, e.g., CF interface on N-module  can encapsulate a CF message as (i) a local procedure call (LPC) when communicating a file system command to a D-module  residing on the same node or (ii) a remote procedure call (RPC) when communicating the command to a D-module residing on a remote node of the cluster. In either case, the CF decoder of CF interface on D-module  de-encapsulates the CF message and processes the file system command.","In operation of a node , a request from a client  is forwarded as a packet over the network  and onto the node , where it is received at the network adapter  (). A network driver of layer  processes the packet and, if appropriate, passes it on to a network protocol and file access layer for additional processing prior to forwarding to the storage manager . At that point, the storage manager  generates operations to load (retrieve) the requested data from disk  if it is not resident in memory . If the information is not in memory , the storage manager  indexes into a metadata file to access an appropriate entry and retrieve a logical VBN. The storage manager  then passes a message structure including the logical VBN to the RAID system ; the logical VBN is mapped to a disk identifier and disk block (or data block) number (DBN) and sent to an appropriate driver (e.g., SCSI) of the disk driver system . The disk driver accesses the DBN from the specified disk  and loads the requested data block(s) in memory for processing by the node. Upon completion of the request, the node (and operating system) returns a reply to the client  over the network .","The data request\/response \u201cpath\u201d through the storage operating system  as described above can be implemented in general-purpose programmable hardware executing the storage operating system  as software or firmware. Alternatively, it can be implemented at least partially in specially designed hardware. That is, in an alternate embodiment of the invention, some or all of the storage operating system  is implemented as logic circuitry embodied within a field programmable gate array (FPGA) or an application specific integrated circuit (ASIC), for example.","The N-module  and D-module  each can be implemented as processing hardware configured by separately-scheduled processes of storage operating system ; however, in an alternate embodiment, the modules may be implemented as processing hardware configured by code within a single operating system process. Communication between an N-module  and a D-module  is thus illustratively effected through the use of message passing between the modules although, in the case of remote communication between an N-module and D-module of different nodes, such message passing occurs over the cluster switching fabric . A known message-passing mechanism provided by the storage operating system to transfer information between modules (processes) is the Inter Process Communication (IPC) mechanism. The protocol used with the IPC mechanism is illustratively a generic file and\/or block-based \u201cagnostic\u201d CF protocol that comprises a collection of methods\/functions constituting a CF API.","It is useful now to consider how data can be structured and organized by the storage server system . Reference is now made to  in this regard. In certain embodiments, a data object (e.g., a file) is represented in a storage server system  in the form of a hierarchical structure called a \u201cbuffer tree\u201d. A buffer tree is a hierarchical structure which is used to store data pertaining to a data object as well as metadata about the data object, including pointers for use in locating the data blocks for the data object. A buffer tree includes one or more levels of indirect data-blocks (called \u201cL1 blocks\u201d, \u201cL2 blocks\u201d, etc.), each of which contains one or more pointers to lower-level indirect blocks and\/or to the direct data-blocks (called \u201cL0 blocks\u201d) of the data object. In other words, the indirect data-blocks provide a reference to the physical location (or physical address) of each of the direct data-blocks. All of the data in the data object is stored only at the lowest level (L0) data-blocks (i.e., the direct data-blocks) of a storage container.","The root of a buffer tree is the \u201cinode\u201d of the data object. An inode is a metadata container that is used to store metadata about the file, such as ownership, access permissions, file size, file type, and pointers to the highest level of indirect blocks for the data object. Each data object has its own inode. The inode is stored in a separate inode file, which may itself be structured as a buffer tree.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 5","b":["509","505","511","511","513","511","513"]},"For each volume managed by the storage server , the inodes of the data objects in that volume are stored in a separate inode file, such as inode file  in  which stores inode . A separate inode file is maintained for each volume. The location of the inode file for each volume is stored in a Volume Information (\u201cVolumeInfo\u201d) block associated with that volume, such as VolumeInfo block  in .","The above description provided a general illustration of a storage server system that may be used for implementing the techniques described herein. The following sections provide a description of methods and systems by which read operations may be optimized in a storage server system.","In some instances, depending on the storage size of the data object, the direct data-blocks corresponding to the data object may not be stored contiguously (i.e., the direct data-blocks may be scattered in different locations of the storage container). In such instances, the storage server  relies on the information available through the indirect data-block(s) to identify the direct data-blocks that are scattered in different locations of the storage container. Consider, for example, a digital document that is of a size that requires storage using 5000 direct data-blocks. Owing to the large number of direct data-blocks, the storage server may allocate 100 blocks of the digital document in one location of the storage container, allocate another 100 blocks in a different (non-contiguous) location of the storage server, and so on. Also, because of such effects as disk defragmentation, the storage container may have a few \u201cempty\u201d data-blocks scattered in different locations. As part of disk usage optimization, the storage server may allocate the data-blocks of the digital document to the first available 5000 data-blocks that may be scattered at different locations of the storage container.","In such instances, when a request to read a data object is received, the storage server  uses a first read operation to read one or more indirect data-blocks associated with the data object. As indicated above, each indirect data-block provides references to the location of the underlying direct data-blocks. The storage server  identifies the location of the direct data-blocks using the first read operation. The storage server  then uses a second read operation to read the direct data-blocks that were identified using the first read operation. Accordingly, in such instances, the storage server  uses two read (I\/O) operations to read the data object.","However, in some instances, the file system arranges the direct-data blocks sequentially, especially when the overall storage size of the data object is less than a specific value. One known example of such a file system allows the direct data-blocks to be arranged sequentially when the storage size of the data object is less than or equal to 256 KB. Furthermore, in such instances, the file system places an indirect data-block of the data object contiguously with the sequentially arranged direct data-blocks (that is referenced by the indirect data-block) of the data object.","As will be explained in detail below, a data object conforming to such a layout scheme can be read using just a single read operation (i.e., by reading both the indirect data block and the direct data blocks of the data object concurrently in a single read operation). This type of a concurrent single-read operation is particularly beneficial in a network storage system that has a substantial number of \u201csmall\u201d data objects (i.e., data objects that have a storage size less than or equal to the size required for conformity with the above indicated layout scheme), where the read time for reading such data objects is approximately halved, thereby decreasing output latency and increasing operating efficiency of the network storage system. In other embodiments, the techniques indicates herein do not have to be limited to a data object conforming to a contiguous-mode layout scheme or to a data object that is lesser than a certain size.","Consider the example of a storage container used by Internet-hosted photo sharing application. Such a storage container would have a large number of \u201csmall\u201d sized photos. Typically, a photo is written once, but may be read by users several times (i.e., the photo gets read every time someone accesses a photo through the photo sharing application). By using the \u201cconcurrent single-read operation\u201d technique described herein, the read time to read the photos is approximately halved (because each read is done using a single read operation instead of using two separate read operations), thereby allowing the photos to be retrieved at a faster rate, and improving the overall performance of the storage system for read workloads.","It is noted that the technique described herein may be extended to any file system implementation that uses a \u201ccontiguous-mode layout scheme\u201d for data objects. A \u201ccontiguous-mode layout scheme,\u201d as indicated herein, refers to a physical storage layout of a data object where the direct data-blocks of the data object are arranged sequentially and are contiguous with an indirect data-block of the data object.","Now refer to , which illustrates a contiguous-mode layout scheme of a data object. In the illustrated example, it is assumed that the storage size of the data object is such that the data object can be implemented using the contiguous-mode layout scheme (e.g., a storage size of less than or equal to 256 KB). As indicated above, the root of the buffer tree representing the data object is an inode . The inode  provides a reference to identify a location of an indirect data-block  associated with the data object. The indirect data-block contains references to direct data-blocks (e.g., A) associated with the data object.","As illustrated in , the direct data-blocks associated with the data object are arranged sequentially. That is, the nine direct data-blocks (.A-.) are stored in consecutive physical addresses of the storage container. For example, direct data-block .A is stored in physical volume block number (PVBN) \u201c2001\u201d of the storage container, direct data-block .B (now shown in ) is stored in PVBN \u201c2002\u201d of the storage container, and so on. Additionally, the contiguous-mode layout scheme allows for an indirect data-block associated with the data object to be placed contiguously with either the tail-end or the head-end of the sequentially arranged direct data-blocks. In the example illustrated in , the indirect data-block  is placed at the tail end of the sequentially arranged direct data-blocks (i.e., at PVBN \u201c2010\u201d).","The following description describes techniques for using a concurrent single-read operation to read a data object, implemented in a network storage server system  such as described above. In at least one embodiment, the storage server  takes advantage of the contiguous-mode layout scheme of the data object to perform the concurrent single-read operation.","Refer now to , which is a flow diagram showing an example of a concurrent single-read operation of a data object. At , the storage server  receives a request to read a data object stored in a storage container. In one example, the storage server  may receive such a request from a storage client . As indicated above, the data object is stored (i.e., represented) in the storage container in the form of multiple direct data-blocks and at least one indirect data block. In the example of , it is assumed that the storage size of the data object is less than or equal to a value that allows a layout of the data object to conform to the contiguous-mode layout scheme (e.g., less than or equal to 256 KB).","At , the storage server  identifies a location of an indirect data-block associated with the data object. In some instances, the storage server  uses an inode associated with the data object to identify the location of the indirect data block. Additionally, at , the storage server  identifies the total number (i.e., a count value) of direct data blocks that are associated with the data object. Again, in some instances, the storage server  uses information stored in the inode of the data object to identify the total number. Subsequently, at , the storage server  utilizes the identified information (i.e., location of the indirect data-block, total number of direct data-blocks) to concurrently read, in a single read-operation, both the indirect data-block and the multiple direct data-blocks.","In one embodiment, the storage server  performs the concurrent single-read operation by concurrently reading both the indirect data-block (at the location identified using the inode) and a specific number of data-blocks that are contiguous with the identified indirect data-block. The specific number is commensurate with the total number of direct data-blocks (that was previously identified using the inode). Using this technique, the storage server  only needs to identify the location of the indirect data-block, but does not have to specifically identify the location of the direct data-blocks (which would require a separate read operation). Instead, the storage server  simply reads a specific number of data blocks that are immediately contiguous with the identified indirect data-object, and therefore avoids the need of a second read operation.","The process explained in  refers to a generic process used by the storage server  to perform the concurrent single-read operation. In some instances, the storage server  performs such a read operation only after verifying whether the data object conforms to a contiguous-mode layout scheme. There are at least two techniques by which the storage server  verifies that the data object confirms to the contiguous mode layout scheme, which are explained in detail below with reference to .","Refer now to , which is a flow diagram illustrating a process for performing a concurrent single-read operation on a data object that conforms to the contiguous-mode layout scheme. At , the storage server  receives a request to read a data object. At , the storage server  reads an inode associated with the data object. In some instances, as illustrated in the example of , the concurrent single-read operation is performed on a data object only after verifying that the data object conforms to the contiguous-mode layout scheme. Accordingly, in one embodiment, the storage server  stores a flag (e.g., a logic bit) in association with the data object to indicate whether the data object conforms to the contiguous-mode layout scheme. The storage server  sets the flag at a first logic state (e.g., logic high) when the data object conforms to the contiguous-mode layout scheme, or at a second logic state (e.g., logic low) when the data object does not conform to the contiguous-mode layout scheme. In one embodiment, the storage server  includes such a flag within the inode of the data object.","Returning to , before reading the data object, the storage server  verifies whether the data object conforms to the contiguous-mode layout scheme by reading a contiguous-mode flag stored in the inode of the data object, as indicated in . If the contiguous-mode flag is set to true (i.e., if the data object conforms to the contiguous-mode layout scheme at ), the process proceeds to , where the storage server  identifies a location of an indirect data-block associated with the data object and the total number of direct data-blocks associated with the data object. Using this information, the storage server  performs a concurrent single-read operation to read both the indirect data-block and the direct data-blocks that are located contiguous with the indirect data-block, as indicated in .","However, if (at ) the storage server  determines that the continuous-mode flag is not set to true (i.e., the data object does not conform to the contiguous-mode layout scheme), the process branches to , where the storage server  performs a traditional dual read operation (i.e., uses a first read operation to read the indirect block(s) and then performs a second read operation to read the direct data-blocks referenced by the indirect data-block).",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 9","b":["902","202","904","202","202","906","202","908","202","202","910","906","912","202"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 10","b":["202","202","1000","1000","1000","1000","310","202"]},"In the illustrated example, the concurrent-read processing unit  includes a receive module , a verification module , and a data read module . The receive module  receives a request from, for example, a storage client, to read a data object. The receive module  can be implemented within the N-module  of the storage server . The verification module  is configured to determine whether the data object conforms to the contiguous-mode layout scheme. In one embodiment, the verification module  analyzes a contiguous-mode flag included in the inode of the data object to determine whether the data object conforms to the contiguous-mode layout scheme. The verification module  can be implemented within the D-module  of the storage-server.","The storage server  uses the data read module  to read the data object form the storage container subsequent to verifying that the data object conforms to the contiguous-mode layout scheme. The data read module  can be implemented within the D-module  of the storage server. The data read module  includes a location identifier  that reads the inode of the data object to identify a location of an indirect data-block of the data object. The data read module  also includes a concurrent single-read module  that is configured to read, using a concurrent single-read operation, both the identified indirect data-block and the multiple direct data-blocks that are located contiguous with the indirect data-block.","It is noted that in some instances, the direct data-blocks may not conform to the contiguous-mode layout scheme even if the size of the data object is under the predetermined limit (e.g., less than 256 KB). In such instances, if the verification module  determines that the data object does not conform to the contiguous-mode layout scheme, the server system  proceeds to normal dual-read processing of the data object (i.e., the server system  reads the references included in the indirect data-block using a first read operation, and uses a second read operation to read the direct data-blocks).","The techniques introduced above can be implemented by programmable circuitry programmed or configured by software and\/or firmware, or entirely by special-purpose circuitry, or in a combination of such forms. Such special-purpose circuitry (if any) can be in the form of, for example, one or more application-specific integrated circuits (ASICs), programmable logic devices (PLDs), field-programmable gate arrays (FPGAs), etc.","Software or firmware for implementing the techniques introduced here may be stored on a machine-readable storage medium and may be executed by one or more general-purpose or special-purpose programmable microprocessors. A \u201cmachine-readable medium\u201d, as the term is used herein, includes any mechanism that can store information in a form accessible by a machine (a machine may be, for example, a computer, network device, cellular phone, personal digital assistant (PDA), manufacturing tool, any device with one or more processors, etc.). For example, a machine-accessible medium includes recordable\/non-recordable media (e.g., read-only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; etc.), etc.","The term \u201clogic\u201d, as used herein, can include, for example, special-purpose hardwired circuitry, software and\/or firmware in conjunction with programmable circuitry, or a combination thereof.","Although the present invention has been described with reference to specific exemplary embodiments, it will be recognized that the invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly, the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["One or more embodiments of the present invention are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
