---
title: Computer product, server, and snapshot collection method
abstract: A non-transitory, computer-readable medium storing a program that causes a computer that controls data storage apparatuses respectively storing plural data, and a storing apparatus storing metadata that includes for each of the data, attribute information and storage location information, the process includes receiving a snapshot collection request for a given data group having specified attribute information; determining with respect to the data storage apparatuses and when the collection request is received, whether any of the data of the given data group is stored therein, based on the attribute information and the storage location information; and generating, with respect to each of the data storage apparatuses storing data of the given data group, a snapshot of the plural data stored therein, by controlling the data storage apparatus and further generating a snapshot of the metadata by controlling the storing apparatus.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843439&OS=08843439&RS=08843439
owner: Fujitsu Limited
number: 08843439
owner_city: Kawasaki
owner_country: JP
publication_date: 20110922
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD","BACKGROUND","SUMMARY","DESCRIPTION OF EMBODIMENTS"],"p":["This application is based upon and claims the benefit of priority of the prior Japanese Patent Application No. 2010-290557, filed on Dec. 27, 2010, the entire contents of which are incorporated herein by reference.","The embodiment discussed herein is related to a server and snapshot collection.","Conventionally, the amount of data handled within a particular group, such as a business, university, municipality, etc., continues to increase. Adverse effects of increases in data volume at a business, for example, include an excessive amount of file servers, independent use of information by departments, and large increases in storage facility and administration costs.","Recently, as a measure against increases in data volume, storage consolidation technology is promising. One such embodiment is, for example, a file server that can be shared by multiple clients and is used at a data center. Here, a client is a user of an information technology (IT) system. Furthermore, since a client is called a tenant, a file server that can be shared may be called a multi-tenant file server.","A multi-tenant file server assumes utilization by an enormous number of tenants. Naturally, the number of users belonging to each tenant is enormous. Therefore, in a system using a multi-tenant file server, a huge storage capacity, high response performance, and throughput are demanded. As an example of configuration of a system that satisfies these conditions, a system uses data servers each having a different function, such as a system consisting of multiple data servers and a meta server.","A data server is a file server that controls the input\/output (I\/O) process of each file handled by each tenant. A meta server is a file server that manages metadata, which expresses the file identifying information (file name, file type, storage location information, etc.). A file server group having a file server function configured by multiple data servers and a meta server is called a cluster file server. If configuration is like a cluster file server, where data servers and the meta server are independent, the I\/O processing load for each file can be distributed among the multiple data servers.","In a system that uses a cluster file server, system administration that reduces TCO is expected. For example, each of the data servers and the meta server as well are shared by multiple tenants, facilitating cost reductions by increasing the utilization efficiency of computing resources.","In the operation of a cluster file server, as a data protection, periodic backup processing is required. Technology adopted for implementing the backup processing is often a snapshot function, but disk images collected by the snapshot function cannot be utilized unless the images are in a consistent state.","Here, if a snapshot is collected, each file server performs a quiesce operation. In the quiesce operation, at each file server, new accesses are queued until either the write-backs of the dirty cache to disk, or the snapshot collection is completed. By performing the quiesce operation, each file server can preserve the consistency of the disk image collected as a snapshot. (For examples of conventional arts, refer to Japanese Laid-Open Patent Publication Nos. H11-120056, 2006-146904, 2004-38929, and 2009-53955.)","However, as described, with the multi-tenant servers, to accommodate an enormous number of users, the number of data servers and the cache capacity provided thereto also becomes huge. In other words, the amount of data that is to be subject to backup processing at each file server is also huge.","Further, when a snapshot is collected, all of the cache data held by all of the data servers is simply written back to a disk. Therefore, a problem arises in that at each file server, an enormous amount of overhead occurs related to the collection of a series of snapshots, including the quiesce operation.","Additionally, depending on the data type and system operation, among the tenants using the file servers, there may be some tenants who do not require snapshot collection. For tenants who do not require snapshot collection, periodic snapshot collection is meaningless. Furthermore, write-backs of the cache data to disk during the quiesce operation pose a problem of interfering with performance for tenants that do not require snapshot collection.","According to an aspect of an embodiment, a computer-readable medium stores therein a snapshot collection program that causes a computer to execute a process. The computer is able to control plural data storage apparatuses respectively storing therein plural data, and a storing apparatus storing therein metadata that includes for each of the data, attribute information and storage location information indicating in which data storage apparatus the respective data is stored. The process includes receiving a snapshot collection request for a given data group having specified attribute information; determining with respect to each of the data storage apparatuses and when the collection request is received, whether any of the data of the given data group is stored therein, based on the attribute information and the storage location information of the metadata; and generating, with respect to each of the data storage apparatuses that has been determined to be storing data of the given data group, a snapshot of the plural data stored in the data storage apparatus, by controlling the data storage apparatus and further generating a snapshot of the metadata by controlling the storing apparatus.","The object and advantages of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the claims.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are not restrictive of the invention, as claimed.","Preferred embodiments of the present invention will be explained with reference to the accompanying drawings. In the embodiments, with respect to files that are in the storage of a storage group and specified by attributes, if an attribute of a tenant, etc. is specified, rather than generating a snapshot for each file, storage that includes the specified file are narrowed down from the storage group and a snapshot is generated and collected for each storage that includes the specified file.","In other words, even if storage that includes the file specified by attribute includes a file that is not specified by the attribute, a snapshot that also includes the unspecified file is generated collectively for the storage as a unit. Consequently, a reduction of the overhead occurring when each attribute specified file is searched for and a snapshot is generated for each file, can be facilitated.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1A","b":["110","101","101"]},"For example, the metadata  includes for each file, file identifying information, storage location information, and attribute information indicating the group. File identifying information is information for discriminating each file from other files and is configured by a file name, a file ID formed by particular character string or number, for example.","Location information is information indicating in which file server, each file is stored. The location information is configured by identification information indicating the file server to which a file is stored or is configured by address information indicating a path for accessing memory in a data volume  in which the file is actually stored, for example.","As described, in the metadata , file attribute information (e.g., group ID indicating the group, etc.) is correlated to enable identification of a file that matches a search condition, without the meta server  directly accessing the file. In the present embodiment, exclusive of the meta server , the other file servers are data storage apparatuses of the meta server  and respectively function as data servers - to - that store various types of files.","Each file server (the meta server  and the data servers - to -) includes storage for storing files. Files that are acquired from an external device or that are newly created are stored in the corresponding storage of the file servers.","For simplicity in the description, the storage of the meta server , storing the metadata is referred to as meta volume . Further, the storage of the data servers - to -, storing various types of files is referred to as data volumes - to -.","There is no particular limit to the number of file servers. Although for simplicity in , three data servers - to - are used in the description, N data servers - to -N can be used. Further, if N data servers - to -N are used, N data volumes - to -N storing the files are used. In other words,  depicts an example, where N=3.","The data servers - to -N are each used by users belonging to a group. For example, in the example depicted in , a user belonging to group A and a user belonging to group B can use the data servers - to - and can store to the files in the data volumes - to -, refer to\/update the files stored in the data volumes - to -, etc.","A group is attribute information that indicates a group of users that use common files. In the example of , group A and group B are set as an example. Therefore, a file having attribute information set as group A is used by a user belonging to group A and a file having attribute information set as group B is used by a user belonging to group B.","For example, a user belonging to group A operates a client apparatus to use, among the files stored in the data volume , a file group having attribute information indicating group A. A file newly created by a user belonging to group A is stored to the data volume  and has attribute information indicating group A. Similarly, a user belonging to group B operates a client apparatus to use files having attribute information indicating group B. A file newly created by a user belonging to group B is stored to the data volume  and has attribute information indicating group B.","Further, a group can be appropriately set according to purpose. For example, as described for the conventional technology, provided the group is a unit expressing a set of users that use an IT system, such as tenants that represent clients, a business, a university, a municipality, etc., the group is not particularly limited (in an example described hereinafter, tenant is used in an example of group setting).","If a user belonging to any of the groups newly stores a file to any of the data servers - to -, refers to a file already stored, etc., the meta server  may be used depending on the state of storage to the cache of the data server - to - storing the file to be accessed. For example, when a user attempts to access a file that is not cached to a data server  (any one of - to -), the data server  requests the meta server  for cache authorization. On the other hand, when the user attempts to access a file cached to a data server  (any one of - to -), the user issues to the data server , an access instruction concerning the cached file since the file has been cached. Metadata  that includes storage location information indicating the storage destination of files is stored in the meta volume  controlled by the meta server .","Therefore, by referring to the metadata , the meta server  can identify the data volume  storing the file requested by the user. Upon identifying the data volume  storing the file, the meta server  issues an instruction to access the file requested by the user, via the data server  that controls the identified data volume .","Further, when an instruction to create a new file is received from the user, the meta server  refers to the metadata  and determines the data volume  that is to store the new file. Subsequently, upon storing the new file to the data volume  via the corresponding the data server , the meta server  correlates and adds to the metadata , identification information identifying the new file (e.g., file name), attribute information (group A or group B), and storage location information indicating the storage destination (e.g., data server -, etc.).","When a snapshot collection request targeting a specified group is received, the meta server  begins snapshot collection. The group is specified by the user who has requested the snapshot collection or by a higher system. Upon receiving the snapshot collection request targeting a specified group, the meta server  identifies the data volume  that is to be subject to the snapshot creation performed in units of volumes. The meta server  performs the snapshot collection by creating, in units of volumes, a snapshot of the identified data volume .","As an example, a case will described where, as depicted in , files of group A and files of group B are stored in the data volume . If the meta server  receives a snapshot collection request targeting group A, the meta server  performs the snapshot collection on the data volumes - and -, among the data volumes - to -.","Although the data volume - stores files having group B attribute information, rather than determining for each file, whether to create a snapshot, the meta server  causes a snapshot to be created in units of volumes, i.e., causes a snapshot of the data volume - to be created, and collects the snapshot. Similarly, if the meta server  receives a snapshot collection request targeting group B, the meta server  causes a snapshot to be created in units of volumes, i.e., causes a snapshot to be created of the data volume -, which stores files having attribute information for group A and files having attribute information for group B and further causes a snapshot of the data volume - to be created, which only stores files having attribute information for group B, and collects the snapshots.","As a result, if a data volume stores files having attribute information of the specified group, the meta server  performs the snapshot creation with respect to the data volume even if the data volume also stores files having attribute information of other groups.","Further, the meta server  excludes from the snapshot creation, data volumes that store only files having attribute information of other groups. Therefore, since it is not necessary to determine for each file stored in the data volumes , whether a snapshot is to be created for the file, snapshot collection having low overhead can be realized.","In describing the process of the meta server  sequentially, when a snapshot collection request targeting group A is received, first the meta server  refers to the metadata  and from among the data servers - to -, identifies the data servers - and - that control the data volumes - and - that store the files having attribute information of group A.","The metadata  depicted in  simplistically depicts the attribute information and storage destination information that are included in the metadata stored in the meta volume  and that indicate the group that uses the respective files. The meta server  refers to the metadata  and is thereby able to identify among the data servers - to -, the data servers - and - that store files having attribute information of group A.","Subsequently, the meta server  outputs a snapshot collection request to the identified data servers - and -. The data servers - and - having received the snapshot collection request, perform the quiesce operation on the files having attribute information of group A, among all of the files. The quiesce operation is a preprocess to preserve the consistency of the snapshots. In the quiesce operation, for example, access to the files having attribute information of group A is suspended and a process of reflecting the updated contents, among the cache data, to the disk is performed.","Typically, when snapshot collection is performed in units of volumes, it is necessary to perform the quiesce operation on all of the files stored in the data volume , a large contributing factor of overhead. Since the meta server  narrows down the files to those having attribute information of group A to perform the quiesce operation, even if snapshot collection is performed with respect to a data volume further storing files having attribute information of a different group, compared to conventional snapshot collection, overhead can be expected to decrease since the files subject to the quiesce operation are limited to those for which the quiesce operation is necessary.","Subsequently, the data servers - and - respectively control the data volumes - and - and snapshots - and - are created of all of the files stored in the data volumes - and -. The meta server  also performs the quiesce operation on the files having attribute information of group A in the metadata  and thereafter, controls the meta volume  and creates a snapshot .","Typically, the snapshots  and  are created in the storage. Therefore, in the example depicted in , the snapshot  is created in the meta volume  and the snapshots  are created in the data volumes .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 1B","FIG. 1A"],"b":"122"},"Further, in the metadata  stored in the meta volume , the storage location information and attribute information of various files having attribute information of a group other than group A are stored. Therefore, the snapshot  of the meta volume  also includes the storage location information and attribute information of files having attribute information of a group other than group A.","If the meta server  receives a snapshot collection request targeting group A, the meta server  performs the quiesce operation on the files having attribute information of group A. Therefore, among the files included in the snapshots , the files having attribute information of group A are corrected for consistency, whereby consistency is guaranteed.","However, the meta server  does not perform the quiesce operation on files having attribute information of a group other than group A (e.g., files having attribute information of group B). Therefore, among the files included in the snapshots , the files having attribute information of a group other than group A are not guaranteed for consistency and thus, the meta server  collects snapshots  that have inconsistencies.","Here, the meta server  controls the access range of the files included in the collected snapshots  and . For example, even if snapshot collection in units of volumes is performed on a data volume that stores files of both group A and group B, the meta server  performs an access control such that the user can access only the files having attribute information of group A. Therefore, the meta server  can provide the snapshots  and  that appear as though collection is narrowed to only the files having attribute information of group A.","For example, in , since only groups A and B are set as attribute information, from the metadata  depicted in the snapshot , the meta server  deletes information indicating the storage destination of files having attribute information of group B. Therefore, the snapshot  is provided as a snapshot appearing to be of only the metadata  that indicates storage location information related to group A. Furthermore, concerning the files depicted in the snapshots , the meta server  allows access to the files having attribute information of group A and prohibits access to the files having attribute information of group B. Therefore, even the snapshot - having files of group A and files of group B, is provided as a snapshot appearing to be only of files of group A.","By establishing an access range for the collected snapshots  and , the meta server  limits the files for which the user can give access instructions, to the files having attribute information of group A. Therefore, among the files included in the collected snapshots  and , errant access to files having attribute information of a group other than group A (e.g., group B) can be prevented.","Since the meta server  prohibits access to files having attribute information of another group, when a snapshot is collected, even if files having attribute data of a different group is included in a data volume , a snapshot of all of the files is created and collected without consideration of the types of files stored in the data volume. In other words, when performing snapshot collection, the meta server  can eliminate processing for determining file attribute information and other such processing that increases overhead.","As described, in the present embodiment, the meta server  refers to the metadata  and is thereby able to identify what type of attribute information has been set for the files stored in the data volumes - to -. Therefore, without directly accessing the data volumes - to -, the meta server  can determine whether files having attribute information of the specified group is stored therein and can identify the data volumes (the data volumes - and -) that are to be subject to the snapshot collection.","Subsequently, after performing the quiesce operation limited to the files having the attribute information of the specified group among the files stored in the identified data volumes - and -, the meta server  creates, in units of volumes, the snapshots - and - of the data volume .","To prevent the errant use of files other than the files for which the snapshot collection request was received, the meta server  limits the files for which the user can issue an access instruction to the files forming the collected snapshot.","In this manner, the snapshot collection by the meta server  minimizes the processing necessary in performing the snapshot collection, e.g., the narrowing down of the data volumes - and - and the limited quiesce operation. Therefore, by implementing the present embodiment, compared to conventional technology, the processing volume when the snapshot is collected is reduced and overhead can be suppressed.","Hereinafter, a configuration and process details for implementing the snapshot collection according to the present embodiment will be described.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 2","FIG. 1A","FIG. 2"],"b":["110","120","1","120"]},"The meta server  and the data servers - to -N are not limited to a configuration of direct connection as depicted in . The meta server  and the data servers - to -N may be respectively connected via a network . Similarly, a configuration where the meta volume  to which the meta server  stores the metadata  and the data volumes - to -N to which the data servers - to -N store various types of files are connected to the network  suffices.","The meta server  includes cache memory to increase the speed of access to the metadata  stored in the meta volume . Among the data included in the metadata , the meta server  can store as cache data to the cache memory, data having a high access frequency. The meta server  further has a file control table for controlling correspondence relations between the cache data stored in the cache memory and the metadata .","Similarly, the data servers - to -N respectively include cache memory to increase the speed of access to the files stored in the data volumes . Among the files, the data servers - to -N can store as cache data to the cache memory, files having high access frequency. The data servers - to -N further have a file control table for controlling correspondence relations between the cache data and the files.","If the contents of the cache data of the meta server  and the data servers  are updated and the snapshot collection is thus performed, inconsistency arises with the contents of the actual data stored in the meta volume  and the data volumes  (e.g., the metadata , the files used by the users (i.e., tenants), etc.). Hence, the meta server  has to perform synchronization processing of reflecting to the actual data, the updated contents of the cache data stored in the cache memory, when the snapshot is collected.","Typically, synchronization processing is performed periodically or when a given trigger occurs. In other words, when the snapshot collection request is received, there is a possibility that synchronization processing has not been completed for all of the cache data. Therefore, the meta server  has to complete the synchronization processing before collecting the snapshots  and .","Typical synchronization processing is executed with respect to all locations where the contents of the cache data are updated and inconsistency with the actual data arises. However, configuration may be such that the meta server  limits the synchronization processing to the files having attribute information of the group specified by the snapshot collection request. A procedure of the processing executed by the meta server  and the data servers  when a snapshot is collected will be described with reference to .",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 3","FIG. 3"],"b":["110","120","301","302","303","304","305","306","307","308","309","310","311","300"]},"The CPU  governs overall control of the design support apparatus. In addition to a boot program, the ROM  stores therein programs such as a snapshot collecting program for implementing the snapshot collection according to the present embodiment. The contents of the processing by the snapshot collecting program when functioning as the meta server  and when functioning as a data server  differ, nonetheless, detailed description will be given with reference to .","The RAM  is used as a work area of the CPU . The magnetic disk drive , under the control of the CPU , controls the reading and writing of data with respect to the magnetic disk . The magnetic disk  stores therein data written under control of the magnetic disk drive .","The optical disk drive , under the control of the CPU , controls the reading and writing of data with respect to the optical disk . The optical disk  stores therein data written under control of the optical disk drive , the data being read by a computer. The file server may use the magnetic disk  and the optical disk  in place of the storage unit.","The display  displays, for example, data such as text, images, functional information, etc., in addition to a cursor, icons, and\/or tool boxes. A cathode ray tube (CRT), a thin-film-transistor (TFT) liquid crystal display, a plasma display, etc., may be employed as the display .","The I\/F  is connected to a network  such as a local area network (LAN), a wide area network (WAN), and the Internet through a communication line and is connected to other apparatuses through the network . The I\/F  administers an internal interface with the network  and controls the input\/output of data from\/to external apparatuses. For example, a modem or a LAN adaptor may be employed as the I\/F .","The keyboard  includes, for example, keys for inputting letters, numerals, and various instructions and performs the input of data. Alternatively, a touch-panel-type input pad or numeric keypad, etc. may be adopted. The mouse  is used to move the cursor, select a region, or move and change the size of windows. A track ball or a joy stick may be adopted provided each respectively has a function similar to a pointing device.","The configuration described by  is one example and is a preferable configuration for the sake of convenience. Therefore, preparation of all of the hardware depicted in  is not always necessary. Furthermore, depending on whether the file server is functioning as the meta server  or as a data server , the details of the required minimum processing differs. Therefore, it suffices for each file server to have the minimum hardware required for implementing the processing desired by the user of the file server, including the CPU , the ROM , and the RAM .",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 4A","FIG. 4A"],"b":["110","122","121","112","111","101"]},"By executing of each of the processes depicted in , the meta server  can create, in units of volumes, the snapshot  of the metadata  stored in the meta volume . At the same time, the meta server  can create, in units of volumes, the snapshots - and - of the data volumes - and - that store the target files and are narrowed down from among the data volumes - to -N.","As depicted in , the meta server  determines whether a snapshot collection request has been received from the user (or a higher system) (step S). As described with reference to , attribute information that indicates the group (e.g., group A, group B) targeted for the snapshot collection is specified in the snapshot collection request.","The meta server  remains on standby until a snapshot collection request is received (step S: NO). Upon receiving a snapshot collection request (step S: YES), the meta server  suspends new updating accesses to target files, among accesses made to the data volumes - to -N (step S).","For example, if group A is specified in the snapshot collection request, after the process at step S, the meta server  refers to the metadata  and determines whether a new access thereto is requesting update processing of a target file. If the meta server  determines that the new access is requesting update processing of a target file having attribute information of group A, the meta server  does not execute, but rather suspends the requested update processing. For the steps hereinafter as well, description is given assuming that the snapshot collection request specifies group A. Therefore, a target file means a file having attribute information of group A.","The meta server  begins processing to collect the snapshots - and - of the targeted data volumes - and -. First, the meta server  refers to the metadata , identifies the data servers - and - controlling the storage of the target files, and outputs a cache synchronization instruction (step S).","The meta server  identifies from the metadata , the target files having attribute information of group A and from the storage location information of the identified target files, further identifies the storage destinations thereof, i.e., the data volumes - and -. Therefore, at step S, among the data servers - to -, the meta server  outputs the cache synchronization instruction to the data servers - and -, which control the data volumes - and - storing the target files.","Next, the meta server  determines whether success responses concerning the cache synchronizations have been received from the data servers - and - (step S). At the data servers - and -, cache synchronization is performed with respect to the data volumes - and -. The data servers - and - output success responses to the meta server  upon completion of the synchronization.","As described with respect to step S, by receiving success responses from the data servers - and - to which the cache synchronization instructions were output, the meta server  can determine whether preparation enabling collection of the snapshots - and -, which have been made consistent with respect to the data volumes - and -, has been completed. The details of the processing related to the cache synchronization executed by the data servers - and - will be described with reference to .","The meta server  remains on standby until success responses are received from the data servers - and - (step S: NO). Upon receiving the success responses from the data servers - and - (step S: YES), the meta server  determines whether the target files are stored in the data volumes - and - controlled by the data servers - and - and a snapshot collection instruction has yet to be issued (step S). If the target files are stored therein and a snapshot collection instruction has yet to be issued, it means that the data volumes - and - have yet to be subjected to the snapshot collection processes at step S and at subsequent steps.","If the meta server , for example, determines that the target files are stored in the data volume - and -, and a snapshot collection instruction has yet to be issued (step S: YES), the meta server  outputs a snapshot collection instruction to the data volumes - and - (step S). If a snapshot collection instruction for the data volumes - and - has been issued (step S: NO), the meta server  omits the process at step S, and proceeds to step S.","After outputting a snapshot collection instruction to the data volumes - and -, the meta server  determines whether snapshot-collection success responses have been received from the data volumes - and - (step S). Here, if the meta server  receives a success response from the data volumes - and -, respectively, the meta server  determines that success responses have been received.","The meta server  remains on standby until snapshot collection success responses are received (step S: NO). Upon receiving the success responses (step S: YES), the meta server  determines that snapshot collection with respect to the data volumes - and - has been completed and transitions to snapshot collection with respect to the meta volume .","First, the meta server  outputs to the meta volume , a synchronization instruction to eliminate inconsistencies from the target files in the metadata  (step S). At step S, for example, if the meta server  stores dirty cache (cache having contents that have been updated) related to the target files, the meta server  synchronizes the dirty cache with the metadata  stored in the meta volume .","Next, the meta server  outputs a snapshot collection instruction to the meta volume  (step S). After outputting the snapshot collection instruction to the meta volume , the meta server  determines whether a snapshot-collection success response has been received from the meta volume  (step S).","The meta server  remains on standby until a snapshot-collection success response is received (step S: NO). Upon receiving the success response (step S: YES), the meta server  determines that snapshot collection with respect to the meta volume  has been completed. The meta server  releases the suspension of new updating accesses implemented at step S (step S), ending the processing.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIG. 4B","FIG. 4B","FIG. 4A"],"b":["120","1","120","2","403"]},"As depicted in the flowchart in , first, the data servers - and - determine whether a cache synchronization instruction has been received from the meta server  (step S). The cache synchronization instruction from the meta server  is the cache synchronization instruction output from the meta server  at step S described in .","By the process at step S, the meta server  outputs a cache synchronization instruction to the data servers - and - controlling the data volumes - and - that store the target files. Therefore, at step S, since the data volumes - and - controlled by the data servers - and - that have received the cache synchronization instruction, store the target files, the data volumes - and - become the targets of the snapshot collection. Hereinafter, although processing by the data server - will be described, the data server - performs similar processing.","The data server - remains on standby until a cache synchronization instruction is received (step S: NO). Upon receiving a cache synchronization instruction (step S: YES), the data server - determines whether cache contents corresponding to the contents stored in a target file have been updated (step S).","If the data server - determines that the cache contents have been updated (step S: YES), the data server - reflects the updated cache contents to the target files stored in the data volume - (step S). Further, upon completing reflection of the updated contents to the target files set according to the synchronization instruction from the data server -, the data volume - outputs a reflection success response to the data server -.","Therefore, upon completing the process at step S, the data server - determines whether a reflection success response has been received from the data volume - (step S), and remains on standby until a reflection success response is received from data volume - (step S: NO). Upon receiving a reflection success response (step S: YES) and after discarding (purging) the cache for which a synchronization instruction was received, the data server - outputs a cache-synchronization success response to the meta server  (step S), ending the processing.","If the data server - determines that cache concerning a target file has not been update (step S: NO), the contents of the target files stored in the cache and the contents of the target files stored in the data volume - are synchronized. Hence, if the cache of a target file has not been updated, the data server - performs the process at step S, without performing the reflection processes at steps S and S.","By the output of the success response from the data server -, the meta server  is able to determine that creation of a snapshot of the data volume - is possible. Similarly, by the output of a success response by the data server -, the meta server  is able to determine that a snapshot of the data volume - is possible.","As described, in the present embodiment, even for a data volume, such as the data volume -, storing the target files as well as other files, the meta server  performs control to create a snapshot in units of volumes. In this manner, the meta server  uses the metadata  to be able to narrow down the data volumes - to -N, to the data volumes - and - storing the target files and requiring snapshot collection, by only a simple determination process having a low processing load.","By narrowing down the data volumes - to -N, to the data volumes - and -, the disk images created by a single snapshot collection request are reduced. Further, for data volumes such as the data volume - storing files having different attribute information, the meta server  limits the files subject to the quiesce operation, to the target files, whereby the volume of data cache to be written-back to the disk can be significantly reduced. Therefore, the overhead occurring with a series of snapshot collections can be reduced.","Furthermore, in the case of the present embodiment, since each received snapshot collection request pertains to a single group, snapshot collection of groups for which snapshot collection is not necessary and of data volumes such as the data volume - storing only files having attribute information of groups for which collection is not necessary, can be prevented. Therefore, meaningless processing (such as the creation of snapshots of unnecessary files) that occurs when snapshots of all of the data volumes - to -N is created without group discrimination, can be reduced. Interference in performance can also be reduced for tenants not requiring snapshot collection.","In , although an example was described where multiple file servers are separated as the meta server  and the data servers - to -N, if a function enabling independent control of the meta volume  and the data volumes - to -N, respectively, is provided, implementation may be by a single file server. When a snapshot is collected by a single file server, the cache synchronization at the meta server  and the cache synchronizations at the data volumes - to -N are executed as processes of the same apparatus.","For example, in , step S depicts a process where the meta server  outputs a synchronization instruction to the data servers - and -; and step S depicts a process where the meta server  receives a success response from the data servers - and -, respectively. In the case of a single file server, the processes at steps S and S are replaced by the communication of signals between functional units of the same apparatus.","Further, in , although the connection of the meta server  and the meta volume , and the connections of the data server - to -N and the data volumes - to -N are implemented via the same network , configuration is not limited hereto. For example, the meta volume  may be connected to the meta server  alone, and the data servers - to -N may be connected to the corresponding data volume - to -N alone. If the meta server  and the data volumes - to -N are not directly connected, snapshot collection requests from the meta server  to the data volumes - to -N are executed through the data servers - to -N.","For example, in , step S depicts a process where the meta server  outputs a snapshot collection request to the data volume -; and step S depicts a process where the meta server  receives a success response from the data volume -. Here, the process at step S is replaced by a process where the meta server  outputs a snapshot collection instruction to the data volume - through the data server -. Similarly, the process at step S is replaced by a process where the meta server  receives, through the data server -, a success response output from the data volume -.","The network , for example, may be a network, such as a LAN or a storage area network (SAN), adopted according to intended use, environment, etc.","The snapshot  created by the meta volume  is stored in the meta volume  and the snapshots - and - created by the data volumes - and - are stored in the respective data volumes , however, configuration may be such that storage specialized for snapshot storage for recovery, at an external device, is prepared and the snapshots  and - and - are stored thereto.",{"@attributes":{"id":"p-0117","num":"0116"},"figref":["FIG. 5","FIG. 5"]},"In the implementation example, multiple clients operating various types of OS are connected to client file systems of a cluster file system. Further, in the implementation example, the overall system depicted in  is referred to as a multi-tenant file server . A file server is assumed that integrates protocol servers of a network file system (NFS), which is a file-sharing system used by a Unix (registered trademark) system (as depicted in , a Unix-compliant Linux (registered trademark) system is often employed), and a common internet file system (CIFS), which is a file-sharing system used by a Windows (registered trademark) system.","The multi-tenant file server  includes an operation terminal server , a meta server , a common meta volume , data servers , and common data volumes . Apparatuses included in the multi-tenant file server  will be described in detail.","The operation terminal server  is a server having a function of outputting requests related to snapshots and of receiving success responses related to snapshot collection. For example, the operation terminal server  issues to the meta server , snapshot collection commands (SNAP request) and settings (RESTORE request) for referring to a collected snapshot. In the case of the multi-tenant file server , the operation terminal server  is operated by a manager client apparatus .","The meta server  is a server having a function of controlling access to the common meta volume , which is storage shared by multiple tenants. For example, the meta server  updates\/refers to various types of data configuring the metadata stored in the common meta volume . Further, the meta server  services metadata update\/reference requests from the data servers . By issuing tokens (data transmission privileges), the meta server  controls exclusion processing (allowing or prohibiting access to tenants operating clients) that is related to the access of the data servers  from the clients.","The common meta volume  is a server having a function of storing various types of data related to metadata. For example, the common meta volume  stores metadata (e.g., name information and attribute information of each file) for each file, area control data of the common data volumes , and update log data of the data above.","The common meta volume  can be accessed by the meta server  via a SAN . As can be seen with a large number of recent enterprise redundant arrays of inexpensive disks (RAID) systems, the common meta volume  has a snapshot function for the entire volume. Therefore, the common meta volume  can create a snapshot of the metadata (METASNAP) in response to an instruction from the meta server .","The data servers  are servers that have a function of controlling access to the common data volumes , which are storage shared by the tenants. For example, in conjunction with the meta server , the data servers  update\/refer to the metadata stored in the common meta volume . The data servers  further update\/refer to files in the common data volumes ; and in response to a file access request from a user application, access various types of files stored in the common data volumes .","The common data volumes  are storage that has a function of storing various types of data related to files. For example, the common data volumes  store file data (actual data of files).","The common data volumes  can be accessed by the data servers  and the meta server , via the SAN . As seen in a large number of recent enterprise RAID systems, the common data volumes  have a snapshot function for the entire volume.","In the system configuration depicted in , the meta server  implements a function that corresponds to the meta server  depicted in . The common meta volume  implements a function that corresponds to the meta volume  depicted in . The data servers  implement a function that corresponds to the data servers - to -N depicted in  and the common data volumes  implement a function that corresponds to the data volumes - to -N depicted in .","The snapshot collection processing concerning the meta server  and the data servers - to -N (refer to ) may be implemented by one file server and similarly, a portion of the functions of the apparatuses depicted in  can be consolidated to a single apparatus. For example, the operation terminal server , the meta server , and the data servers  may be consolidated into one apparatus; and the meta server  and the data servers  may consolidated into one apparatus.","In the multi-tenant file server , a user application operating on a client apparatus used by the tenants issues through a LAN to the data servers , an I\/O request concerning various types of file data. As for the type of protocol of the I\/O request, typically, when the client is operating under a Unix environment, NFS is often used, which is a network file system protocol standardized for an Unix environment. When a client is operating under a Windows environment, CIFS is often used, which is a Windows network file system protocol standardized for an Windows environment.","The data servers , which control the interface with a user application, have to preliminarily acquire an access token related to targeted data, in order to access the file data in the common data volumes . An access token can be acquired from the meta server . Since a known technology (for example, refer to Japanese Patent Nos. 3783992 and 3866448) is used for exclusion control of access using an access token between the common data volumes  and the data servers , description thereof is omitted herein.","In the system, which uses the multi-tenant file server  of the present implementation example, mutually unrelated client apparatuses are grouped into units of tenants (different business enterprises, different departments within a business enterprise, etc.). The multi-tenant file server  is shared by multiple users via user applications on the clients in each of the tenants. Further, the multi-tenant file server  can control access, by a tenant, to the files of another tenant (and vise versa).","The multi-tenant file server  can conceal the existence of file objects belonging to other tenants. Therefore, each of the clients can use the multi-tenant file server  as if the users belonging to the client exclusively possess the multi-tenant file server .",{"@attributes":{"id":"p-0133","num":"0132"},"figref":["FIG. 6","FIG. 6"],"b":["500","520","530"]},"Attribute information such as that depicted in  is cached together with other attribute information (e.g., file type, proprietor information), including that on the data server  side. As an alternative method of managing the correspondence relation between file data and tenants, configuration may be such that with the attribute information as it is, names spaces of the file data form separate subdirectories for each tenant.",{"@attributes":{"id":"p-0135","num":"0134"},"figref":["FIG. 7","FIG. 7"],"b":["500","700","700","520","700","520"]},"The volume configuration list  indicates by tenant IDs and snapshot IDs, tenants targeted for snapshot collection, snapshot versions, etc. Therefore, the meta server , by referring to the volume configuration list , can identify changes (e.g., data volume deletions or additions, etc.) in the targeted files at the time of snapshot collection.","For example, a record group  of the volume configuration list  has 0 set as the tenant ID and the snapshot ID. In other words, the record group  indicates the existing volume data.","A record group  of the volume configuration list  has 1 set as the tenant ID and the snapshot ID. In other words, the record group  indicates version 1 snapshot data used by the user application of tenant 1. In the user application of tenant 1, since the device path \/dev\/sdb data is not targeted for a snapshot, the data is not included in the record group  of the version 1 snapshot.","A record group  of the volume configuration list  has 2 set as the tenant ID and 1 set as the snapshot ID. In other words, the record group  indicates version 1 snapshot data used by the user application of tenant 2. The record group  indicates a state where after the snapshots indicated by the records of the record group  are collected, the device path \/dev\/sdd data is deleted.","A record group  of the volume configuration list  has 2 set as the tenant ID and the snapshot ID. In other words, the record group  indicates version 2 snapshot data used by the user application of tenant 2. The record group  indicates a state where after snapshots indicated by the records of the record group  are collected, the device path \/dev\/sdd data is newly added.","The multi-tenant file server , upon collecting a snapshot in response to a snapshot collection request, records in detail to the volume configuration list , the contents of the collection. Therefore, the multi-tenant file server  can identify from what type of data, a collected snapshot is formed.",{"@attributes":{"id":"p-0142","num":"0141"},"figref":["FIG. 8","FIG. 8"],"b":"530"},"<SNAP Request: Step S>","The operation terminal server  requests the meta server  for snapshot collection concerning a specified tenant (here, as an example, description will be given concerning tenant X). For example, the operation terminal server  issues a SNAP request message and transmits the SNAP request message to the meta server . Attribute information identifying tenant X is appended to the SNAP request. If the operation terminal server  is shared by multiple tenants, it is preferable for some type of security control to be performed preventing operations and management personnel of a given tenant to illicitly perform an operation of another tenant.","<Token Request: Step S>","Upon receiving the SNAP request transmitted at step S, the meta server  suspends updating-related token requests that are from the data servers  and concern the file data belonging to tenant X. The suspended state implemented at step S continues until the completion of step S described hereinafter.","By the process at step S, the data servers  are able to control updating access to files that do not belong to tenant X. Irrespective of an updating-related token request, if a file does not belong to tenant X and even if access occurs, snapshot collection is not affected. Therefore, at step S and thereafter, access to file data that does not belong to tenant X is normally permitted.","With respect to files belonging to tenant X as well, the meta server  can normally perform the processes at step S and thereafter to respond to a token request related to a reference-related token (e.g., a data reference token, an attribute reference token, etc.). Although configuration may be such that similar to the updating-related token requests, reference-related token requests are suspended, however, since the data snap of the data volume to be collected at step S, described hereinafter, is not related to the updating of file data belonging to tenant X, the result is the same as not suspending reference-related token requests.","Concerning update requests (e.g., directory generation requests, file attribute changing requests, etc.), normal processing can be performed up to the meta volume snapshot process at step S described hereinafter. However, accompanying the creation of new file data, to omit a new token request, a new file data token may be simultaneously requested. Even if such a request is made, the meta server  limits the response to the appending of a reference-related token.","<Token Gathering: Step S>","The meta server  searches the meta volume (or a volume cached to memory) for the file data at step S and belonging to tenant X. The meta server  gathers from the data servers , all of the retrieved updating-related tokens.","By the process at step S, the data server  is able to control updating access to the files data belonging to tenant X, similar to step S. Access to file data that does not belong to tenant X is normally permitted and therefore, tokens for file data that does not belong to tenant X are not particularly gathered.","<Write-Back: Step S>","According to the tokens gathered at step S, the data servers  perform write-back (write-back to the common data volumes ) of the file data that belongs to tenant X.","<Token Reflection: Step S>","Upon completion of the write-back at step S, the data server  reflects to the metadata of the common meta volume , the write-back contents by the token to the meta server .","<Data SNAP Request: Step S>","Upon completion of the process at step S, the meta server  instructs all of the common data volumes  storing file folders that belong to tenant X specified at step S to collect DATA SNAPs (data volume snapshots) .","Upon receiving responses to the DATA SNAP  collection instruction, the meta server  records the response results to the volume configuration list . The DATA SNAP request is not necessarily issued to all of the common data volumes  controlled by the data servers . Of course, a portion of the common data volumes  may not be storing file data belonging to tenant X.","Thus, before and after reception of the DATA SNAP request issued at step S, file data I\/O for tenants other than tenant X may continue to with respect to the common data volumes . However, the multi-tenant file server  performs appropriate exclusion control such that DATA SNAP  consistency is maintained.","<DATA SNAP Response: Step S>","The meta server  receives the DATA SNAPs  transmitted from the common data volumes  in response to the DATA SNAP request at step S.","<Write-Back: Step S>","According to the DATA SNAPs , which are responses at step S, the meta server  performs write-back (to the common meta volume ) of the metadata for the file data belonging to tenant X.","<META SNAP Request: Step S>","Once the meta server  suspends all I\/O process requests to the common meta volume , the meta server  instructs the common meta volume  to collect a META SNAP (snapshot of meta volume storing metadata) .","At step S, the meta server  further suspends update requests (e.g., MKDIR requests, CREATE requests, etc.) for objects unrelated to tenant X. This suspension is for obtaining META SNAP  consistency with respect to the common meta volume . The common meta volume  further includes data that is not necessarily separated according to tenant, such as super blocks. Therefore, there are cases where update requests for objects unrelated to tenant X have to be suspended to maintain consistency.","<META SNAP Response: Step S>","Upon receiving a response to the META SNAP request at step S, the meta server  records an entry in the volume configuration list . The meta server  resumes the I\/O processing that was suspended and transitions to the process at step S.","<SNAP Response: Step S>","Finally, the meta server  resumes the token request processing that was suspended by the process at step S. The meta server  informs the operation terminal server  (which issued the SNAP request at step S) of successful completion, ending the processing.","In the sequence described, the SNAP request is not necessarily a synchronized remote procedure call (RPC) and may be implemented by process completion CALLBACK to the operation terminal server  or by process completion polling by the operation terminal server .",{"@attributes":{"id":"p-0173","num":"0172"},"figref":["FIGS. 9 to 12","FIGS. 9 to 12","FIG. 8"]},"(1) Reception of Snapshot Collection Request","With reference to  reception of a snapshot collection request concerning tenant X will be described. In , the operation terminal server  receives a SNAP request concerning tenant X. As depicted in , among the data servers , tenant X accesses the data servers  \u201c1\u201d and \u201c2\u201d and uses various types of file data.","(2) Specification of Files Targeted for Snapshot Collection","With reference to , the specification of files targeted for snapshot collection related to tenant X will be described. As depicted in , in responding to the SNAP request concerning tenant X, the meta server  refers to the metadata stored in the common meta volume  and among the common data volumes , identifies the common data volumes  storing the target files set by the attribute information of tenant X. Therefore, the two common data volumes  corresponding to the data servers  \u201c1\u201d and \u201c2\u201d among the data servers  are identified as snapshot collection targets.","(3) Snapshot Generation","With reference to , the generation of a snapshot of a common data volume  storing the target files set by the attribute information of tenant X will be described. When the data servers  controlling the target files set by the attribute information of tenant X are identified, the data servers  \u201c1\u201d and \u201c2\u201d control the common data volumes  \u201c1\u201d and \u201c2\u201d storing the target files set by the attribute information of and generate the DATA SNAPs  of the common data volumes  storing the target files set by the attribute information of tenant X. Thereafter, the meta server  controls the common meta volume  and generates the META SNAP .","(4) Updating of Volume Configuration List","Finally, with reference to , updating of the volume configuration list  after the collection of snapshots concerning tenant X. As depicted in , the meta server  records to the volume configuration list , a record group  of the current snapshots (e.g., snapshot ID=3) concerning tenant X.",{"@attributes":{"id":"p-0182","num":"0181"},"figref":["FIG. 13","FIG. 13","FIG. 13"],"b":["500","510","520"]},"<RESTORE Request: Step S>","The operation terminal server  outputs a RESTORE request to the meta server . The RESTORE request is a signal instructing restoration of snapshots collected for tenant X by the processing depicted in . Attribute information that identifies tenant X and specifies the snapshots to be subject to the restoration processing, and volume identification information (V) of the restoration target are appended to the RESTORE request.","<Mount: Steps S, S>","The meta server  mounts the META SNAP  and the DATA SNAP  that are specified by the RESTORE request at step S and include the volume identification information (V) for tenant X. The meta server  further manages, in the volume configuration list , a list of the META SNAPs  that include the specified snapshots. The meta server  sends a response indicating an error if a tenant ID or a snapshot ID that is not subject to management, i.e., not a tenant registered in the volume configuration list , is provided.","<Updating: Step S>","In addition to the META SNAP  mounted at step S, if there is another data volume that is registered besides that of the DATA SNAP  mounted at step S, the meta server  treats the other data volume as being forcibly deleted (may be actually deleted or the address may be erased disabling access). The DATA SNAP  of the common data volume  is specialized for the storage of tenant X file data and thus, the consistency thereof is corrected by the process at step S.","<RESTORE Response: Step S>","The meta server  sends to the operation terminal server  that issued the RESTORE request at step S, a response indicating restoration. The meta server  further resumes accepting access requests concerning the snapshots (DATA SNAP  and META SNAP ) restored by the processes at step S to S. The acceptance of an access request is determined by the type of access and is further limited to the file data belonging to tenant X.","The limited access described allows discrepancy between the META SNAP  and the DATA SNAP  related to tenants other than tenant X for which snapshots are collected and controls requests concerning files that are affected by the discrepancies.","As described, according to the embodiment, snapshots of storage storing file data having specified attribute information can be created on a unit basis, whereby the collection of requested snapshots can be realized. Therefore, a narrowing down of storage to be subject to snapshot collection can be achieved by making a simple determination. Therefore, a disk image generated by one snapshot collection can be drastically reduced. Further, the amount of data cache for write-back to the disk for quiesce operation can also be drastically reduced. Therefore, the overhead occurring for the collection of a series of snapshots can be reduced.","In the embodiment, during snapshot collection, concerning storage for which the generation of a snapshot is not desired or storage that stores files for which snapshot generation is not necessary, the generation of a snapshot can be avoided. Therefore, the generation of unnecessary storage snapshots that arises when snapshot collection generates snapshots targeting all data, can be reduced. Interference in performance for tenants not requiring snapshot generation can be prevented.","In the embodiment, when a snapshot collection request is received, quiesce operation which is a contributing factor of overhead, is performed with respect to only files for which consistency must be maintained. Therefore, overhead is reduced and for files that do not require the collection of consistent snapshot, access control can be avoided, enabling normal operation to be provided.","In the embodiment, when access to a collected snapshot occurs, the access range can be controlled to allow access to only the files having attribute information of the specified group. In other words, among the files included in the snapshot, only the files having attribute information of the specified group are permitted to be accessed and access to other files is prohibited.","For a file for which access is prohibited, consistency is not guaranteed because suspension and synchronization are implemented by the quiesce operation before snapshot generation. Therefore, by limiting the access range of the snapshots, even if the user of the snapshots issues an access instruction concerning a file that errantly includes inconsistencies, reference of the errant file can be prevented.","The snapshot collection method described in the present embodiment may be implemented by executing a prepared program on a computer such as a personal computer and a workstation. The program is stored on a computer-readable medium such as a hard disk, a flexible disk, a CD-ROM, an MO, and a DVD, read out from the medium, and executed by the computer. The program may be distributed through a network such as the Internet. However, the computer-readable medium does not include a transitory medium such as a propagation signal.","All examples and conditional language recited herein are intended for pedagogical purposes to aid the reader in understanding the invention and the concepts contributed by the inventor to furthering the art, and are to be construed as being without limitation to such specifically recited examples and conditions, nor does the organization of such examples in the specification relate to a showing of the superiority and inferiority of the invention. Although the embodiment of the present invention has been described in detail, it should be understood that the various changes, substitutions, and alterations could be made hereto without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 9","b":["10","11","12"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
