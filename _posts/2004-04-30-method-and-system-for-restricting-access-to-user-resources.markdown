---
title: Method and system for restricting access to user resources
abstract: A user's set top box (STB), or other client, executes a shell and has an application program interface (API) by which certain features of the client can be controlled. The client is in communication with a walled garden proxy server (WGPS), which controls access to a walled garden. The walled garden contains links to one or more servers providing network-based services. The client sends a request to the WGPS to access a service provided by a site in the garden. To provide the service, the site sends the client a message containing code calling a function in the API. The WGPS traps the message from the site and looks up the site in a table to determine the access control list (ACL) for the site. The ACL is a bit-map that specifies which functions of the client's API can be invoked by code from the site. The WGPS includes the ACL in the header of the hypertext transport protocol (HTTP) message to the client. The shell receives the message and extracts the ACL. The shell uses the ACL to determine whether the code has permission to execute any called functions in the API. If the code lacks permission, the shell stops execution and sends a message to the site indicating that the site lacks permission. Otherwise, the shell allows the code to call the function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07406530&OS=07406530&RS=07406530
owner: At Home Corporation
number: 07406530
owner_city: San Mateo
owner_country: US
publication_date: 20040430
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Walled Garden Permissions Table","APPENDIX"],"p":["This application is: a continuation of Ser. No. 09\/427,778 , now U.S. Pat. No. 6,732,179 entitled METHOD AND SYSTEM FOR RESTRICTING ACCESS TO USER RESOURCES filed Oct. 26,1999 which is a continuation-in-part of Ser. No. 08\/811,586 , now U.S. Pat. No. 6,370,571 entitled SYSTEM AND METHOD FOR DELIVERING HIGH-PERFORMANCE ONLINE MULTIMEDIA SERVICES, filed on Mar. 5, 1997 by Milo S. Medin; and is related to U.S. Pat. No. 6,678,733, entitled METHOD AND SYSTEM FOR AUTHENTICATING AND AUTHORIZING USERS, filed on Oct. 26, 1999 by Ralph W. Brown, Robert Keller, and Milo S. Medin, the entire contents of each being hereby incorporated by reference herein.","1. Field of the Invention","This invention pertains in general to high-speed data networks and in particular to a system and method for restricting access by servers on the network to resources available on user computer systems.","2. Background of the Invention","Cable television service is usually sold as a subscription to one or more \u201ctiers\u201d of channels. Typically, a basic cable subscription allows access to a small tier of channels and is sold for a relatively low subscription fee. The subscriber can purchase additional tiers of cable channels for additional fees.","In most cable systems, the subscriber uses a \u201cset-top box\u201d (STB) to access the cable channels. The STB contains a microprocessor and other hardware for tuning and descrambling channels in the tiers to which the subscriber has access. The STB may also enable other services, such as pay-per-view or digital music reception in return for additional fees.","In recent years, the STB has incorporated a cable modem that enables access to Internet- and World Wide Web- (\u201cthe web\u201d) based resources via the cable infrastructure. A cable modem typically has at least one assigned Internet Protocol (IP) address and is managed by an Internet Service Provider (ISP). The ISP inserts and extracts Internet traffic to and from the cable infrastructure and distributes it to the cable modem having the given IP address or the Internet, as appropriate.","U.S. patent application Ser. No. U.S. Pat. No. 6,678,733 discloses a walled garden accessible to STB users who are customers of the ISP. Application servers within the walled garden provide services to the users, including, for example, access to electronic content, access to electronic commerce services, and any other functionality that can be provided electronically via a network. The users can subscribe to one or more of the services in the walled garden either individually or as part of a tier. U.S. patent application Ser. No. U.S. Pat. No. 6,678,733 discloses a way to restrict users to only those services in the walled garden to which the users are entitled to access.","The walled garden application servers may desire or need to access features of the users' STBs in order to provide certain services. For example, an application server may need to generate text or controls on a user's television display, change the channel to which the STB is tuned, print a receipt on a printer coupled to the STB, or complete a fee transaction using an electronic wallet stored in the STB.","The ISP would prefer to limit the features on the users' STBs to which the application servers have access, typically to generate revenue and enhance security. For example, the ISP may desire to charge a fee for letting an application server change the channel to which the user's STB is tuned or conduct an electronic commerce transaction using the electronic wallet. Likewise, the ISP would like to limit the abilities of the application server to ensure that a misbehaving or compromised application server cannot act maliciously toward a user's STB.","Accordingly, there is a need for a way to restrict the features of a user's STB that can be accessed and utilized by an application server within the walled garden. Preferably, the solution to this need will restrict the features at a fine grain, thereby allowing an application server to access only those features which are necessary to provide the service sought by the user.","The above needs are met by a method and system that passes an access control list (ACL) to the set top box (STB), or other form of client, indicating which functions in the client can be called by a walled garden site. A client is coupled to a television set, computer system, or other device having a display. The client preferably contains a central processing unit, a memory, a television tuner, and a cable modem. The client also preferably contains a video subsystem for generating images on the display and an input for accepting commands from the user.","The client preferably executes software supporting standard web browsing functionality. In one embodiment, the client executes the Windows CE operating system. Programs executing on the operating system include a hypertext markup language (HTML) rendering engine, a JAVA virtual machine for executing JAVA programs, and other controls supporting web browsing functionality. A shell program also preferably executes on the operating system and generates a user interface on the display. The shell program controls access to sets of application program interfaces (APIs) for providing functionality at the client. For example, the APIs include functions allowing a program to change the channel, access an electronic program guide held by the client, instantiate user interface (UI) elements, and access an electronic walled held by the client.","The cable modem is preferably coupled to a coaxial cable and supports bi-directional broadband communications using the Internet protocol (IP). The coaxial cable is typically aggregated with other cables into a fiber-optic cable. The fiber-optic cable, in turn, is coupled to a cable modem termination server (CMTS) at a headend. The CMTS contains hardware for terminating the IP data channel, including IP switches, routers, and high-availability servers.","The CMTS allows the client to access a private network containing a walled garden proxy server (WGPS) via the hypertext transport protocol (HTTP). The WGPS controls access to a walled garden of network-based services. The services available in the walled garden may include, for example, access to electronic content, access to electronic commerce services, and any other functionality that can be provided electronically via a network. These services are provided by one or more walled garden servers coupled to a walled garden network. The walled garden servers may include servers directly coupled to the walled garden network, servers having direct connections to remote application databases, servers coupled to the walled garden network via a virtual private network, and servers having only a frontend on the walled garden network. Each site on a walled garden server is identified by a plot number.","A site held on a server within the walled garden may respond to a user by sending a message containing a JAVASCRIPT program to the client. The program can invoke one or more of the functions in the APIs. The WGPS traps messages from the site and determines the ACL for the site. The ACL is preferably a bit-map that specifies which STB API functions may be called by the site. The WGPS passes the ACL to the client as a header to the message from the site. In addition, the WGPS examines the header received from the site to protect against ACL masquerading or spoofing by the site.","The shell executing on the client extracts the ACL from the header when it receives the message. The shell uses the bit-map to determine which API functions can be invoked by the walled garden site. If the JAVASCRIPT program tries to invoke a function for which it lacks permission, the client halts execution of the program and sends a message back to the site indicating that the invocation failed because the site lacks permission. Otherwise, the client allows the JAVASCRIPT program invoke the function and returns the result to the site. Thus, the walled garden site can use the APIs to provide services to the user.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","110","111","112","110","110","112","112","110","111","112"]},"Typically, the client  is an STB and is purchased or leased by a person or household who also subscribes to the cable TV and data communication services. The person or persons who performs this task is often referred to as the \u201csubscriber.\u201d Because multiple people may use a single client , the person using the client in this description is referred to as a \u201cuser.\u201d The STB  or other device that the user uses to access data communication services is generically referred to as a \u201cclient.\u201d The distinction between actions performed by the user and client are often blurred, especially when the client performs an action, such as fetching a web page, on behalf of a user. Accordingly, the terms \u201cuser\u201d and \u201cclient\u201d are often interchangeable in this description.","The client  preferably includes at least one tuner for tuning a TV signal and a cable modem for receiving and transmitting data. In addition, the client  is preferably coupled to a coaxial cable  carrying analog and\/or digital TV signals and providing two-way data communication between the client  and the rest of the network using the Internet protocol (IP). In alternative embodiments, data communication between the client  and the rest of the network may be provided by other forms of communication technologies, including analog modem, digital subscriber line (DSL), and wireless technologies. These alternative technologies may or may not carry TV or other video signals with the data.","In the embodiment where the client  is coupled to a coaxial cable, the coaxial cable  is aggregated with other cables at a node , typically from geographically proximate locations, into a fiber-optic cable . The fiber-optic cable , in turn, is aggregated with other fiber-optic cables at a headend .","The headend  integrates signals from multiple sources into the fiber-optic cable . In one embodiment, the headend  receives analog A and digital B television signals via analog A and digital B satellite downlinks, respectively. In addition, the headend  includes a cable modem termination server (CMTS)  for terminating the IP data channel, including IP switches, routers, and high-availability servers.","The CMTS  is preferably coupled to a private network  maintained by an Internet service provider (ISP) or other organization. In a preferred embodiment of the present invention, the private network  includes the high-speed network architecture described in U.S. patent application Ser. No. 08\/811,586, entitled SYSTEM AND METHOD FOR DELIVERING HIGH-PERFORMANCE ONLINE MULTIMEDIA SERVICES, filed on Mar. 5, 1997 by Milo S. Medin, which is hereby incorporated by reference herein. In general, the private network  provides network access to the users by managing a cable modem contained within the client . A widely accepted standard for cable modems is the Multimedia Cable Network System (MCNS) Data-Over-Cable Service Interface Specifications (DOCSIS). The private network  also provides connectivity to servers providing services to the clients, such as caching, account and billing management, electronic commerce, information databases, and any other functionality that can be achieved via a network. Typically, the resources on the private network  can be accessed by only subscribers of the ISP.","In the illustrated embodiment, the private network  is in communication with the Internet  via a network link . For security purposes, a preferred embodiment of the present invention restricts the ability of the client  to download software from the Internet . However, other embodiments may provide the client  with full access to the Internet  or restrict the client to only the resources available in the private network .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["112","112","112","112","210","210","210","212","214","216","218","214","210","216","218"]},"The bus  also couples the CPU  with a graphics and video subsystem  which generates text and video images on the TV . In addition to providing conventional TV images, the graphics and video subsystem  preferably generates a user interface (UI) by which the user can access the features and services provided by the client . The graphics and video subsystem  may also support advanced features such as 3-D graphics, video decoding, and video digitizing.","TV and cable modem tuners ,  are also preferably coupled to the bus . The TV tuner  is preferably a frequency-agile tuner dedicated to analog and digital broadcast services. The cable modem tuner  is preferably a frequency-agile tuner dedicated to cable modem services. Although not shown in , the client  may also include other tuners for handling an out-of-band data channel and a return signal path. The tuners ,  receive the signal from the coaxial cable .","An infrared (IR) transceiver  is also preferably coupled to the bus . The transceiver  can communicate with a wireless remote control or keyboard, thereby allowing a user to access the features of the client  either directly or via on-screen menus. The client  also preferably includes a secure microprocessor  for supporting secure transactions as described below. The secure microprocessor  holds a unique identification value for the client  called the \u201cBox ID,\u201d a private\/public key pair, and other information that can be used to authorize and authenticate messages to and from the client . In alternative embodiments, the client  may also include an audio accelerator for performing audio processing, an input\/output (I\/O) controller for communicating with external devices such as storage devices and hard copy output devices, and\/or a network adapter for communicating with a local-area network.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIG. 2"],"b":["112","310","112","312","314","310","314","314","112","112","314","312","310","316","314","310","313","316","310"]},"A JAVA virtual machine (JVM)  and hypertext markup language (HTML) rendering engine  preferably execute on the OS . The JVM  functions as a virtual machine and provides an execution space for JAVA programs . The JAVA programs  may be stored locally on the client  or downloaded from the private network  or the Internet . In addition, the JAVA programs  may utilize JAVA classes dedicated to supporting the TV and media functions available on the client . Similarly, the HTML rendering engine  supports traditional web browsing functionality. A user can use the web browser controls  to navigate through hypertext documents as is well known in the art.","In a preferred embodiment of the present invention, a shell program  executes at the highest level. The shell program  may be implemented using, for example, native code, JAVA, JAVSCRIPT, ActiveX controls, HTML, and\/or dynamic link libraries (DLLs). The shell program  is the controlling application and provides the user interface (UI) on the TV  and application support for channel navigation, an electronic program guide, storing user preferences, email, and walled garden  access.","Preferably, the shell program  contains a set of foundation layer APIs  that can be called by programs downloaded via the private network . In one embodiment, the functions in the APIs are accessed by JAVASCRIPT code downloaded to the client  via HTTP. All functions available through the APIs are subject to access control and a program making use of the APIs must be authorized to access the functions. If a program calls a function for which it is not authorized, the client  returns a FAIL_FUNCTION_NOT_AUTHORIZED error status message to the program. This status message indicates to the program that the server that supplied the program is not authorized to perform that function on the client .","Exemplary sets of APIs are described in the Appendix. As described therein, the APIs allow a program to change the television channel to which the client  is tuned, inquire about the details of a channel line-up, access an electronic program guide (EPG) stored by the client, instantiate UI elements on the television , retrieve information about viewer (i.e., user) accounts, access electronic wallet (E-wallet) functionality in the client to conduct electronic commerce transactions, set reminders for display on the television , and print pages on a printer (not shown) coupled to the client. Additional APIs may allow controlling scaling of the broadcast video picture on the television  and accessing settings stored by the client , including user preferences, bookmarks, parental controls, and diagnostics. Other APIs can easily be added to the shell  to provide functionality desired by the ISP, server, or users. Preferably, each function in the APIs is named, numbered, or otherwise uniquely identified. Likewise, groups of functions, related or otherwise, may also be named, numbered, or otherwise identified.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIG. 4"],"b":["112","128","130","126","410","410","126","410","412","414","416","418","412"]},"Preferably, the client  communicates with the servers on the network  using standard communications protocols including the IP, hypertext transport protocol (HTTP), and secure sockets layer (SSL). Communications between the client  and the various servers often takes the form of hypertext markup language (HTML) documents, extensible markup language (XML) documents, JAVASCRIPT programs, and data provided through forms. Servers and data on the network  are preferably identified with uniform resource locators (URLs).","Each user of the client  preferably has a unique identification. A user can log into the client  by inputting the user's identity and a personal identification number (PIN) or other form of password. This user information is preferably stored in a local database held in, for example, the non-volatile memory  or a storage device. The database has a record for each user of the client  and associates the record with the user's login information. The client  can provide the user's login information to other servers in the network  when necessary to authenticate the user. For security, the user records stored in the client  are opaque and cannot be viewed without the login information of the particular user. When a user logs into the client , the login preferably remains valid until the user explicitly logs out or the client  is turned off. If no user has logged into the client , one embodiment of the present invention uses a default user profile. The rights and privileges of the default user profile can be set by the ISP.","The WGPS  is the entry point for the walled garden . Although  illustrates only a single walled garden , an embodiment of the present invention can have multiple walled gardens controlled by a single WGPS or by multiple WGPS\u2032. Each walled garden may be controlled by a different multiple systems operator (MSO) (e.g., a different cable television company).","The illustrated walled garden  includes one or more servers which, in turn, hold one or more sites for providing network-based services to the users. The services may include, for example, access to electronic content such as channel guides, magazines, newspapers, stock prices, music, or video, access to electronic commerce services such as stock trading and buying and selling goods, access to a time-based or metered service, and any other functionality that can be provided electronically via a network. Preferably, the services are implemented using a combination of JAVA, XML, HTML, and\/or JAVASCRIPT. The servers may be maintained by the MSO, ISP, or by other organizations who have formed business relationships with the party managing the walled garden . In one embodiment, the services in the walled garden  are arranged into sets of tiers. Preferably, the user can subscribe to one or more of the services in the walled garden  either individually or as part of a tier.","The WGPS  has an associated database  for holding permissions available to the user and the walled garden sites. To access the walled garden , the client must present a \u201cticket\u201d to the WGPS  specifying the walled garden  and services to which the user has access. Alternatively, the ticket may specify only those services which the user does not have access. The database  identifies \u201cpoisoned\u201d tickets, i.e., those tickets that are no longer accepted and holds keys for decrypting encrypted tickets. The database also holds information identifying the MSO or MSOs who's customers have access to the walled garden  in order to ensure that the ticket is affiliated with the particular walled garden. The WGPS  uses the ticket and the information in the database  to authenticate the user and authorize the user to access the services in the walled garden .","The database  also identifies the rights of walled garden sites to access the APIs in the clients . Preferably, the database  stores a Walled Garden Permissions Table that specifies the API access rights of each server or site in the walled garden. In one embodiment of the present invention, the permissions table is as follows:",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"RL Prefix","User Agent","WG ACL","Affiliation"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"http:\/\/ . . .","DCT-5000","010111","0110"]},{"entry":[{},"http:\/\/ . . .","DCT-5000","010101","0100"]},{"entry":[{},"http:\/\/ . . .","DCT-5000","011101","0001"]},{"entry":[{},". . .",". . .",". . .",". . ."]},{"entry":[{},"http:\/\/ . . .","DCT-5000","110101","1000"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}}}},"The permissions table is preferably indexed by URL prefix. The URL Prefix field preferably holds a URL string long enough to uniquely identify the walled garden site having the associated permissions. For example, the URLs \u201chttp:\/\/disney.com\/company\/index.html\u201d and \u201chttp:\/\/disney.com\/company\/about\/index.html\u201d will both match a table entry with the URL prefix \u201chttp:\/\/disney.com\/company\/.\u201d This technique allows different permissions to be assigned to different subtrees of a site's content.","The User Agent field preferably holds a string identifying the type of browser used by the user. For example, the User Agent field may indicate that the user is using a DCT-5000 STB. Alternatively, the field may indicate that the user is using NETSCAPE NAVIGATOR, MICROSOFT INTERNET EXPLORER, or any other type of browser. Since different user agents may have different API sets and capabilities, sites in the walled garden may have separate permissions table entries for each type of user agent. The client  identifies the user agent when it sends a HTTP request to the WGPS .","The Walled Garden Access Control List (WG ACL) field preferably contains a bit-map, or ACL, indicating to which client APIs the walled garden sites having the given URL prefix can access. The mapping from bit position to API function is arbitrary and extensible. A value of zero preferably means the site does not have permission to invoke the corresponding API function or functions, and a value of one preferably means the site does have permission to invoke the corresponding API function or functions. The Affiliation field identifies the particular walled garden  or MSO to which the ACL pertains.","The exemplary walled garden  illustrated in  contains two walled garden application servers (WGAS's) A-B, a walled garden front end server (WGFS) , and a walled garden virtual private network (VPN) termination point  (WGVPNTP) interconnected by a walled garden network (WGN) . The WGN  is preferably a closed network and essentially performs as a local area network coupling the various types of walled garden servers with the WGPS . A WGAS  is preferably a web server or some other form of server that provides web-like functionality to a user. A WGAS A may contain all of the hardware and storage necessary to provide a service to a user. Alternatively, the WGAS B may be coupled to a remote application database  via a dedicated network connection . This latter embodiment may be preferred, for example, when the WGAS B acts as an interface to a large database of information and the entity managing the WGAS B does not wish to replicate the contents of the database within the walled garden .","The WGFS  provides a frontend interface for backend servers located elsewhere on the Internet  or otherwise in communication with WGFS . For example, a WGFS  may be used when a large organization wishing to have a presence in the walled garden  leases server space from the ISP or other entity managing the walled garden. The WGFS  provides an access point in the walled garden  through which the clients can access the backend servers.","The WGVPNTP  allows an organization to maintain a presence in the walled garden  using remote servers. The ISP or other entity managing the walled garden  establishes a VPN  over the Internet  connecting the WGVPNTP  with a remote WGAS . The remote WGAS  communicates through the WGVPNTP  to perform the same functions as a local WGAS .","Each unique service within the walled garden  is preferably identified by a unique \u201cplot number.\u201d The client  preferably identifies a specific walled garden service with the URL \u201chttp:\/\/wg\/<plot_number>\/ . . . \u201d The plot number is preferably used as an index into the ticket and identifies a value specifying whether the user has access to the service. A walled garden service is typically implemented on a single server. However, a single server can support multiple walled garden services. Accordingly, a server may be identified by more than one plot number, with each plot number mapping to a different site residing on the server. A single service can also reside on multiple servers, such as when load balancing is being employed. In this case, a single plot number may resolve to more than one server.","The GS  controls access to a policy server (PS) . The GS  preferably receives communications from the client  in the form of XML and\/or forms via HTTP over SSL and translates the communications into database transactions using protocols such as lightweight directory access protocol (LDAP), SQL, and open database connectivity (ODBC). The GS  passes the transactions to the PS  and the PS  accesses a database  of user authorization and authentication information in response. The database contains a list of users, walled gardens, and services in particular walled gardens  available to the users. The database  does not need to be centralized and, in one embodiment, is distributed on a regional basis. The GS  communicates with the PS  to authenticate a user's identity and issue the client a ticket specifying the walled gardens and services that the user can access. The GS  preferably encrypts the ticket using a secret key shared with the WGPS  in order to limit potential attacks on the ticket by the user. The user's client  stores the ticket and presents it to the WGPS  when seeking to access a walled garden .","The Internet server  is essentially the same as the WGPS , except that the Internet server  controls access to the Internet  at large rather than to the walled garden . In a preferred embodiment, the Internet server  has a database  for holding permissions indicating web sites that users can access and client API functions that the web sites can access. A client accesses the Internet  by presenting a ticket to the Internet server  specifying the Internet sites to which the user has access. In one embodiment, the ticket specifies the URLs using regular expression pattern matching. The database  also identifies poisoned tickets.","The keymaster  provides encryption keys to the GS , WGPS , and Internet Server : Preferably, the keymaster  has SSL links, or some other form of secure communication links, to the servers , , . The keymaster  generates pseudo-random encryption keys and securely passes the keys to the servers , , . The servers , ,  use the keys to encrypt and decrypt the tickets. In a preferred embodiment, the servers , ,  use symmetric encryption and use the same key to encrypt and decrypt tickets, although other encryption systems can be used. Each key is valid for a predetermined time period. The keymaster  issues a new key to the servers , ,  at the expiration of the previous key. Each key is preferably indexed so that the keys can be individually identified.","The entities illustrated in  are not necessarily physically separate or executing on dedicated computer systems. For example, the walled garden network and the network connecting the various servers may actually be a single network that is logically divided into separate networks. Moreover, the various servers, such as the WGPS , GS , and PS , may actually be integrated into the proxy server  or another computer system. Likewise, the various databases ,  may be implemented on a single database. Conversely, the functionality ascribed to a single network, server, or database in the description of  may actually be performed by multiple networks, servers, and\/or databases, respectively. Thus,  illustrates logical entities and logical interconnections between the entities according to a preferred embodiment of the present invention. However, alternative embodiments of the present invention may have different physical structures.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 5","FIG. 4"],"b":["500","414","428","502","504","504","506","508","510","512","514","516","518","512"]},"The at least one processor  may be any general-purpose processor such as an INTEL x86 compatible- or SUN MICROSYSTEMS SPARC compatible-central processing unit (CPU). The storage device  may be any device capable of holding large amounts of data, like a hard drive, compact disk read-only memory (CD-ROM), DVD, or some form of removable storage device. The memory  holds instructions and data used by the processor . The pointing device  may be a mouse, track ball, light pen, touch-sensitive display, or other type of pointing device and is used in combination with the keyboard  to input data into the computer system . The graphics adapter  displays images and other information on the display . The network adapter  couples the computer system  to a local or wide area network.","Program modules  for performing the functionality of the server, according to one embodiment of the present invention, are stored on the storage device , loaded into the memory , and executed by the processor . Alternatively, hardware or software modules may be stored elsewhere within the computer system . In one embodiment of the present invention, one or more of the illustrated servers are implemented using redundant hardware to create a high-availability computer system. As is known in the art, an advantage of a high-availability computer system is a reduced risk of system failure.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 6","FIG. 6","FIG. 7","FIG. 6"],"b":["112","414","416","442","414","416","442"]},"Initially, the user uses the UI on the client  to request  access to a service in the walled garden . For example, the client  may generate a UI on the TV . The user, using the UI and an input device such as an IR keyboard, requests access to the service through the web browsing software  executing on the client . Alternatively, the client  may be coupled to or integrated into a computer system and the user may use web browsing software to request access to a web site in the walled garden . As mentioned above, the request  from the client  to the WGPS  preferably takes the form of a URL such as \u201chttp:\/\/wg\/<plot_number>\/ . . . \u201d In one embodiment, the user visits a web page or portal that references, either directly or indirectly, all of the available walled garden services. When the user selects a link to a particular service, the web page directs the client  to the proper URL.","The WGPS  receives the request  and determines from the URL that the client is attempting to access a restricted service in the walled garden . Assume, however, that this request  is the first request from the client  to the WGPS . As a result, the client  did not include a ticket with the request . Therefore, the WGPS  denies  access to the walled garden  and sends a HTTP  response to challenge  the client  to supply the ticket in a subsequent request.","The client  receives the challenge . Preferably, the web browser then passes control to an authorization dynamic link library (DLL) executing on the client . The authorization DLL creates the appropriate UI to let the user authenticate himself or herself to the client .","The authorization DLL then establishes a SSL connection with the GS  and makes a request  for the ticket by sending the user authentication information, as well as the Box ID of the client , across the SSL connection. The GS  authenticates the user by validating  the authentication information against the information in the database .","If the validation  is successful, the GS  preferably constructs  the ticket. As shown in , the ticket  preferably includes the Box ID  of the client  requesting the ticket, a version number , an expiration date  (or duration when the ticket is valid), an affiliation , and a set of bits representing the access rights of the user . The version number  is preferably a control number used by the GS  to ensure that the WGPS  properly interprets the ticket . The expiration date  can be any time in the future or a time span when the ticket  is valid and may range, for example, from a few minutes to a few hours. The affiliation indicates the particular walled garden  or MSO to which the ticket  pertains. The set of bits representing the access rights of the user  are preferably organized such that certain bits correspond to certain servers, sites, or services within the walled garden . In one embodiment of the present invention, the bits representing the access rights  are run length encoded (RLE) to reduce the storage size of the field. Other information, such as the IP address of the client  and a timestamp may also be stored in the ticket .","As shown in , the keymaster  occasionally shares  a secret key with the GS  and the WGPS  via an SSL connection. Returning to , the GS  preferably uses a symmetric encryption technique to encrypt  the ticket , T, with the shared secret key to produce an encrypted ticket, T\u2032. In an alternative embodiment, the GS  encrypts only the portion of the ticket containing the bits representing the user access rights . The WGPS  uses the decryption key, which is preferably identical to the encryption key, to decrypt the ticket . In one embodiment of the present invention, this encryption is performed using the data encryption standard (DES). However, other embodiments of the present invention may use different encryption techniques, including techniques where the encryption and decryption keys differ.","The resulting encrypted ticket is passed  to the client . The client  preferably stores the encrypted ticket internally. Since the client  does not have access to the secret key shared by the keymaster , GS , and WGPS , the client cannot decrypt or alter the ticket.","If, for any reason, the GS  decides to invalidate or revoke a ticket, the GS  poisons the ticket by sending  an invalidity notice to the WGPS  as shown in . The WGPS  treats a request to access the walled garden  made by a client with a poisoned ticket as if no ticket had been included.","Returning to , the client  again sends a HTTP request to the WGPS  requesting access to a service in the walled garden . This time, however, the client  includes the encrypted ticket with the HTTP request in an \u201cAuthorization\u201d header. The WGPS  receives the ticket with the request and determines  whether the ticket grants the user access to the walled garden  and walled garden service. To make this determination, the WGPS  uses the timestamp to determine the secret key used to encrypt the ticket. Then, the WGPS  uses the secret key to decrypt the ticket. Next, the WGPS  compares the Box ID in the ticket with the Box ID of the requesting client to ensure that the ticket was received from the correct client . The WGPS  also checks the expiration date in the ticket to ensure that the ticket is still valid and compares the ticket with the information in its database  to ensure that the ticket has not been poisoned.","If the above tests are satisfied, then the WGPS  examines the affiliation  and the set of bits representing the access rights of the user  to determine whether the user has rights to the specified walled garden  service. To make the latter determination, the WGPS  extracts the plot number from the HTTP request and uses it as an index into the set of bits  in the ticket . Preferably, the value of the indexed bit specifies whether the user is authorized to access the walled garden  service or site having the given plot number. This embodiment is preferred because it minimizes the overhead utilized to determine whether the ticket allows access. Of course, alternative embodiments of the present invention may use different techniques to encode the user access rights in the ticket.","The WGPS  then either grants or denies  access to the user. If the WGPS  grants access, then it allows the user request  to reach the walled garden  service having the specified plot number. Accordingly, the specified URL from the walled garden server will be served to the client . In this case, the client  downloads and executes the JAVA, HTML, XML, and\/or JAVASCRIPT code providing the service as described below. Preferably, the downloaded code is not persistently stored in the client . If the WGPS  denies access, then it sends a HTTP status  response to the client  with an HTTP header indicating the reason for denying access. Typically, the client  will respond to this denial by requesting  a new ticket from the PS .",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 9","b":["910","414","112","910","912","112","326","112"]},"The message from the WGS  to the client  necessarily passes through the WGPS . Preferably, a proxy plug-in on the WGPS  traps all messages from WGS\u2032 to clients in order to attach an ACL to each message. When the WGPS  traps a message, it examines  the header provided by the WGS  for any potential security violations. For example, the WGPS  strips any improper headers off the message to protect against masquerading or spoofing by the WGS . Then, the WGPS  looks up  the corresponding entry in the Walled Garden Permissions Table stored in the database  and retrieves the ACL for the given service, affiliation, and user agent. The WGPS  inserts  the ACL into the message from the WGS  to the client  as an HTTP header. In one embodiment of the present invention, the ACL is inserted into a \u201cathmAPIAuth\u201d header, although other headers or transport mechanisms can be used as well.","In addition, the WGPS  can place information in the header that further limits the permissions contained in the ACL. For example, the WGPS  can restrict the WGS  to accessing channel guide data for the current time only, for the next hour, for the next day or week, etc. Similarly, the WGPS  can restrict the WGS  to accessing channel guide data for only a certain channel or network. The WGPS  preferably implements these additional limitations by placing additional fields in the HTTP header. After the headers are inserted, the WGPS  passes  the message to the client .","The shell  executing on the client  extracts the ACL, affiliations, and any other permissions from the headers and determines  whether the data grant the WGS  access to the API functions called by the attendant code. The shell  codifies the mapping from bit positions in the ACL to API functions and enforces the access control. If the ACL does not allow a called API function to be executed, then the shell  preferably returns  the FAIL_FUNCTION_NOT_AUTHORIZED message to the application or program that invoked the API function. Otherwise, the shell  returns  the result of the function invocation.","In summary, the present invention is an authentication and authorization method and system that lets individual users access one or more of the services within the walled garden . The client  authentication procedure allows individual users to be authenticated. In addition, the GS , PS , and associated database  can authorize a unique set of access rights for each user. The WGPS  ensures that only authenticated and authorized users are allowed to access servers within the walled garden . Moreover, the design of the system, including the ticket and shared secret key, provides an efficient implementation, thereby keeping a relatively light processing load on the GS  and PS .","In addition, the present invention enhances the services provided by the walled garden  by allowing WGS\u2032 to access the APIs of the clients. The Walled Garden Permissions table stored in the database  of the WGPS  allows the access rights of a WGS to be controlled with a fine degree of granularity with respect to functions, time, and channels\/networks.","By using the method and system described herein, a service provider or other entity can sell subscriptions or other forms of access rights to one or more services within the walled garden . For example, an ISP can sell subscriptions to tiers of services, much like subscriptions to tiers of television channels are sold. In addition, the ISP can sell the right to access the client  APIs to the operators of the WGS\u2032.","Channel Navigation","Channel Up","Syntax",{"@attributes":{"id":"p-0085","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":"[Status]=TV.ChannelUp( )\n\nParameters\n\nStatus\n"}},"The return status value from the ChannelUp method. The return status value will be one of the following:\n\n","The return status value will be one of the following:\n\n","A numeric value that specifies the channel number.","Status","The return status value will be one of the following:\n\n","A numeric value that returns the current channel number.","Status","The return status value from the TuneChannel method. The return status value will be one of the following:\n\n","A numeric value that specifies the channel number.","Network","A string value that returns the broadcast network name.","Station","A string value that returns the local station name.","Status","The return status value will be one of the following:\n\n","A string value that specifies the broadcast network name.","Channel","A numeric value that returns the channel number.","Station","A string value that returns the local station name.","Status","The return status value from the NetworkToChannel method. The return status value will be one of the following:\n\n","A numeric value that returns the minimum channel number.","MaxChannel","A numeric value that returns the maximum channel number.","Status","The return status value from the ChannelRange method. The return status value will be one of the following:\n\n","A numeric value that specifies the channel number for which schedule information is requested","RelativeTime","A numeric value that specifies the relative time in minutes from the current time for which schedule information is requested","ProgramName","A string value that returns the program name of the program that occurs on the specified channel at the specified relative time.","StartTime","A numeric value that returns the start time of the program that occurs on the specified channel at the specified relative time.","EndTime","A numeric value that returns the end time of the program that occurs on the specified channel at the specified relative time.","Status","The return status value will be one of the following:\n\n","The GetScheduleInfo method returns the program name, start time, end time, and rating of the program that is on the specified channel at the specified relative time.","Program Information","Syntax",{"@attributes":{"id":"p-0110","num":"0000"},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":"[Status]=EPG.GetProgramInfo (Channel, RelativeTime, ProgramDescription)\n\nParameters\n\nChannel\n"}},"A numeric value that specifies the channel number for which schedule information is requested","RelativeTime","A numeric value that specifies the relative time in minutes from the current time for which schedule information is requested","ProgramDescription","A string value that returns the detailed program description of the program that occurs on the specified channel at the specified relative time.","Status","The return status value from the GetProgramInfo method. The return status value will be one of the following:\n\n","The GetProgramInfo method returns the detailed program description of the program that is on the specified channel at the specified relative time.","Pay-Per-View Information","Syntax",{"@attributes":{"id":"p-0116","num":"0000"},"ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":"[Status]=EPG.GetPPVInfo (Channel, RelativeTime, IsPPV, Price)\n\nParameters\n\nChannel\n"}},"A numeric value that specifies the channel number for which schedule information is requested","RelativeTime","A numeric value that specifies the relative time in minutes from the current time for which schedule information is requested","IsPPV","A boolean value that indicates if specified program that occurs on the specified channel at the specified relative time is a PPV event. A value of TRUE indicates that it is a PPV event, a value of FALSE indicates that it is not a PPV event.","Price","A string value that returns the price of the PPV event that occurs on the specified channel at the specified relative time. A value of NULL is returned if the specified program is not a PPV event.","Status","The return status value from the GetScheduleInfo method. The return status value will be one of the following:\n\n","The GetPPVInfo method returns the PPV status and price of the program that is on the specified channel at the specified relative time.","Instantiation Of Standard UI Elements","The Channel Banner","Syntax",{"@attributes":{"id":"p-0123","num":"0000"},"ul":{"@attributes":{"id":"ul0024","list-style":"none"},"li":"[Status]=UI.DisplayChannelBanner( )\n\nParameters\n\nStatus\n"}},"The return status value will be one of the following:\n\n","A numeric value that specifies the number of menu entries contained in the MenuEntries array","MenuEntries","An array of string values that specify the text for each of menu entries to be displayed in the Extras Menu","EntrySelected","A numeric value that returns the index of menu entry selected by the viewer from the MenuEntries array","Status","The return status value from the DisplayExtrasMenu method. The return status value will be one of the following:\n\n","A numeric value that returns the number of viewer accounts that have been defined for the household.","Status","The return status value will be one of the following:\n\n","A numeric value that specifies which viewer name is being requested. This value must be in the range 1 to the value returned by GetNumberOfViewers inclusive.","ViewerName","A string value that returns the name for the specified viewer.","Status","The return status value from the GetViewerName method. The return status value will be one of the following:\n\n","The GetViewerName method returns the viewer name for the specified viewer.","Viewer Privileges","Syntax",{"@attributes":{"id":"p-0135","num":"0000"},"ul":{"@attributes":{"id":"ul0033","list-style":"none"},"li":"[Status]=GetViewerPrivileges (ViewerNumber, TVAccess, WebAccess, IPPVEnabled, EmailEnabled, WalletEnabled)\n\nParameters\n\nViewerNumber\n"}},"A numeric value that specifies which viewer name is being requested. This value must be in the range 1 to the value returned by GetNumberOfViewers inclusive.","TVAccess","A boolean value that returns whether the specified viewer's TV viewing access is restricted","WebAccess","A boolean value that returns whether the specified viewer's Web browsing access is restricted","Status","The return status value from the GetViewerPrivileges method. The return status value will be one of the following:\n\n","The GetViewerPrivileges method returns the viewer privileges for the specified viewer.","Viewer Parental Controls","Syntax",{"@attributes":{"id":"p-0141","num":"0000"},"ul":{"@attributes":{"id":"ul0036","list-style":"none"},"li":"[Status]=GetViewerParentalControls (ViewerNumber, TVRating, MovieRating, WebAccess, EmailAccess)\n\nParameters\n\nViewerNumber\n"}},"A numeric value that specifies which viewer name is being requested. This value must be in the range 1 to the value returned by GetNumberOfViewers inclusive.","TVRating","A string value that returns the specified viewer's TV rating parental control setting","MovieRating","A string value that returns the specified viewer's MPAA rating parental control setting","Status","The return status value from the GetViewerParentalControls method. The return status value will be one of the following:\n\n","The GetViewerParentalControls method returns the viewer parental control settings for the specified viewer.","Viewer Identification","Syntax",{"@attributes":{"id":"p-0147","num":"0000"},"ul":{"@attributes":{"id":"ul0039","list-style":"none"},"li":"[Status]=ViewerIdentification (Message, Viewer)\n\nParameters\n\nMessage\n"}},"A string value that specifies the message text displayed in the viewer identification dialog box.","Viewer","A string value that returns the viewer name entered by the viewer. The viewer name will be one of the viewer accounts associated with the household.","Status","The return status value from the ViewerIdentification method. The return status value will be one of the following:\n\n","The ViewerIdentification method displays a viewer identification dialog box with the specified text message. The viewer then can select the desired viewer from the list of available viewers associated with the household and enter the appropriate PIN for that viewer to identify himself. The ViewerIdentification method then returns the name of the viewer selected. The viewer can also press the EXIT key to terminate the viewer identification dialog box without selecting a viewer, or they can let the dialog box time-out, or enter an invalid PIN. These conditions are returned in the Status return value. In households where only a single viewer account has been created, the viewer does not have the option of selecting among multiple viewers, but must still enter a valid PIN. The viewer name returned when the correct PIN is entered is Default_Viewer.","E-Wallet and Buy-Sequence","E-Wallet Purchase","Syntax",{"@attributes":{"id":"p-0153","num":"0000"},"ul":{"@attributes":{"id":"ul0042","list-style":"none"},"li":"[Status]=EwalletPurchase (NumberOfPurchaseOptions, PurchaseOptions, SelectedOption, Buyer, Shipto)\n\nParameters\n\nNumberOfPurchaseOptions\n"}},"A numeric value that specifies the number of purchase options contained in the PurchaseOptions array.","PurchaseOptions","An array of string values that specifies the message text for each purchase option that is available in the E-wallet purchase transaction dialog box. The first entry in this array is the default option displayed.","SelectedOption","A numeric value that returns the index of purchase option selected by the viewer from the PurchaseOptions array.","Status","The return status value will be one of the following:\n\n","The EwalletPurchase method displays an E-Wallet purchase transaction dialog box with the specified array of purchase options. The viewer then can select the desired purchase option from the list of available purchase options. The EwalletPurchase method then returns the index of the viewer selected purchase option, the name of the viewer that is performing the purchase, and the name of the person to which the purchase will be shipped. The viewer can also press the EXIT key to terminate the E-Wallet purchase transaction dialog box without selecting a purchase option, or they can let the dialog box time-out, or enter an invalid PIN. These conditions are returned in the Status return value. In households where only a single viewer account has been created, the viewer does not have the option of selecting among multiple viewers who is performing the purchase, but must still enter a valid PIN. The viewer name returned when the correct PIN is entered is Default_Viewer.","Reminders","Set Reminder","Syntax",{"@attributes":{"id":"p-0159","num":"0000"},"ul":{"@attributes":{"id":"ul0045","list-style":"none"},"li":"[Status]=Rem.SetReminder (RelativeDay, TimeOfDay, ReminderMessage, ForUser, ReminderURL)\n\nParameters\n\nRelativeDay\n"}},"A numeric value that specifies the number of days in the future at which the reminder is to be triggered.","TimeOfDay","A numeric value that specifies the time of day on the day specified by RelativeDay at which the reminder is to be triggered.","ReminderMessage","A string value that specifies the message text displayed in the TV Notice dialog box.","ReminderURL","A string value that specifies the URL that is accessed when the viewer selects \u201cYes\u201d in the TV Notice dialog box.","ForUser","A string value that specifies the viewer name for whom the reminder is intended. The viewer name must be one of the viewer accounts associated with the household.","Status","The return status value from the SetReminder method. The return status value will be one of the following:\n\n","The SetReminder method sets a reminder for the specified viewer that displays the specified reminder message when the reminder is triggered. The specified URL is displayed if the viewer elects to act on the reminder when it occurs. The reminder is displayed as a TV Notice.","Display TV Notice","This method allows the content provider to simulate a reminder by directly displaying the TV Notice dialog box immediately, rather than setting a reminder and waiting for the reminder to be triggered.","Syntax",{"@attributes":{"id":"p-0167","num":"0000"},"ul":{"@attributes":{"id":"ul0048","list-style":"none"},"li":"[Status]=Rem.DisplayTVNotice (NoticeMessage, NoticeURL)\n\nParameters\n\nNoticeMessage\n"}},"A string value that specifies the message text displayed in the TV Notice dialog box.","NoticeURL","A string value that specifies the URL that is accessed when the viewer selects \u201cYes\u201d in the TV Notice dialog box.","Status","The return status value will be one of the following:\n\n","The return status value from the DisplayTVNotice method. The return status value will be one of the following:\n\n"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
