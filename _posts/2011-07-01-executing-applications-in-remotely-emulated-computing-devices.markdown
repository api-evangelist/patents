---
title: Executing applications in remotely emulated computing devices
abstract: Disclosed are various embodiments that facilitate execution of applications through remotely emulated computing devices. An application is executed in a hosted environment. A video signal of the application is encoded into a media stream, which is sent to a client computing device. In various embodiments, access to data that is locally available to the client computing device is facilitated. In various embodiments, data related to the operation of the application is recorded.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08572178&OS=08572178&RS=08572178
owner: Amazon Technologies, Inc.
number: 08572178
owner_city: Reno
owner_country: US
publication_date: 20110701
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["There are many specialized forms of computing devices such as, for example, smartphones, electronic book readers, tablet computers, video game consoles, and so on. Because of the physical differences among such devices, applications may differ from device to device. Even within a device category such as smartphones, different models of smartphones may have different display and input features. Developers may have difficulties testing applications for such devices. Actual use by end users is an ideal way to identify application defects, but it is difficult to distribute applications and application updates to end users.","The present disclosure relates to executing applications on emulated computing devices over a network. Customers may wish to purchase applications for various computing devices over a network. In order to make an informed purchasing decision, a customer may wish to try the application before buying it. However, the customer may be using a different client device from the computing device that is intended to run the application. For example, the customer may be using a desktop computer and searching for applications for a mobile device such as a smartphone. Various embodiments of the present disclosure enable customers to use applications running remotely on emulated computing devices. Furthermore, in some embodiments, the customers may be able to buy the applications through an associated user interface. Various techniques related to executing applications remotely are described in U.S. patent application entitled \u201cRemotely Emulating Computing Devices\u201d filed on May 24, 2011 and assigned application Ser. No. 13\/114,534, which is incorporated herein by reference in its entirety.","While using a remotely executed application, customers may wish to allow the application to access photos, documents, and\/or other data stored on their local machine. Various embodiments of the present disclosure facilitate access to locally accessible data of a client by remotely executed applications. Additionally, various embodiments of the present disclosure are configured to allow a developer to deploy an application for testing by multiple users. Feedback and\/or other operational data may be recorded for the developer. In the following discussion, a general description of the system and its components is provided, followed by a discussion of the operation of the same.","With reference to , shown is a networked environment  according to various embodiments. The networked environment  includes one or more computing devices  in data communication with one or more clients , one or more developer clients , and a networked storage system  by way of a network . The network  includes, for example, the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks.","The computing device  may comprise, for example, a server computer or any other system providing computing capability. Alternatively, a plurality of computing devices  may be employed that are arranged, for example, in one or more server banks or computer banks or other arrangements. For example, a plurality of computing devices  together may comprise a cloud computing resource, a grid computing resource, and\/or any other distributed computing arrangement. Such computing devices  may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience, the computing device  is referred to herein in the singular. Even though the computing device  is referred to in the singular, it is understood that a plurality of computing devices  may be employed in the various arrangements as described above.","Various applications and\/or other functionality may be executed in the computing device  according to various embodiments. Also, various data is stored in a data store  that is accessible to the computing device . The data store  may be representative of a plurality of data stores  as can be appreciated. The data stored in the data store , for example, is associated with the operation of the various applications and\/or functional entities described below.","The components executed on the computing device , for example, include a emulation server application , an electronic commerce application , a plurality of wrappers . . . N including a respective data access layer . . . N, a plurality of applications . . . N, a plurality of media encoders . . . N, and other applications, services, processes, systems, engines, or functionality not discussed in detail herein. The emulation server application  may correspond to a type of application session server. The emulation server application  is executed to launch instances of applications , which are executed within the wrappers . The emulation server application  is also executed to obtain application input data  from the clients  and provide the application input data  to the respective wrapper . In various embodiments, the application input data  may include data that is locally accessible to the client  (e.g., files, device data, etc.) which may be mirrored in the data store  for access by the application .","The emulation server application  is also executed to send application output data  that is captured from the application  to the clients . The emulation server application  may communicate with the client  over various protocols such as, for example, hypertext transfer protocol (HTTP), simple object access protocol (SOAP), representational state transfer (REST), real-time transport protocol (RTP), real time streaming protocol (RTSP), real time messaging protocol (RTMP), user datagram protocol (UDP), transmission control protocol (TCP), and\/or other protocols for communicating data over the network . The emulation server application  is configured to maintain state information  and input queues  associated with the executing applications .","In various embodiments, the emulation server application  may be configured to generate a user interface using one or more network pages. The network pages may include the streaming video and\/or audio generated by the emulated application . In various embodiments, images of virtual input devices may be rendered in conjunction with the streaming video and\/or audio. For example, a virtual keyboard for the emulated computing device may be included in the network page. Where the emulated computing device is a mobile computing device, an image of the mobile computing device may be included in the network page. The emulation server application  may facilitate interaction with the image of the mobile computing device in conjunction with the application . Where the emulated computing device corresponds to a mobile computing device with a screen, the video captured from the application  may be surrounded by the image of the mobile computing device, as if the video were shown on the screen of the mobile computing device. However, in other embodiments, the video may be shown full screen, without being surrounded by the image of the mobile computing device.","The electronic commerce application  is executed in order to facilitate the online purchase of items, such as downloaded applications, from a merchant over the network . The electronic commerce application  also performs various backend functions associated with the online presence of a merchant in order to facilitate the online purchase of items. For example, the electronic commerce application  may generate network pages or portions thereof that are provided to clients  for the purposes of selecting items for purchase, rental, download, lease, or other forms of consumption. In some embodiments, the electronic commerce application  is associated with a network site that includes an electronic marketplace in which multiple merchants participate.","The application  may correspond, for example, to a game or other types of applications. As non-limiting examples, the application  may correspond to a first-person shooter game, an action game, an adventure game, a party game, a role-playing game, a simulation game, a strategy game, a vehicle simulation game, and\/or other types of games. The application  may be originally designed for execution in a general-purpose computing device or in a specialized device such as, for example, a smartphone, a video game console, a handheld game device, an arcade game device, etc. The applications  may also correspond to mobile phone applications, computer-aided design (CAD) applications, computer-aided manufacturing (CAM) applications, photo manipulation applications, video editing applications, office productivity applications, operating systems and associated applications, emulators for operating systems, architectures, and capabilities not present on a consumer device, and other applications and combinations of applications.","The application  may expect to access one or more resources of the device on which it is executed. Such resources may correspond to display devices, input devices, or other devices. In some cases, the application  may request exclusive access to one or more of the resources, whereby no other applications may have access to the particular resources.","The wrapper  corresponds to an application that provides a hosted environment for execution of the application . In various embodiments, the wrapper  may be configured to provide a virtualized environment for the application  by virtualizing one or more of the resources that the application  expects to access. Such resources may include a keyboard, a mouse, a joystick, a video device, a sound device, a global positioning system (GPS) device, an accelerometer, a touchscreen, built-in buttons, a file system, a built-in battery, etc. In this way, the wrapper  is able to provide input commands and other data to the application  as if the wrapper  emulates a keyboard, a mouse, or another type of hardware device.","Further, the wrapper  is able to obtain a video signal and\/or audio signal generated by the application  as if the wrapper  emulates a display device, an audio device, or another type of output device. Although many of the examples discussed herein relate to emulated computing devices with a display, emulated computing devices may also include, for example, set-top boxes, audio players, and\/or other devices without an integrated display screen. The wrapper  is able to encode the video signal and\/or audio signal by way of one or more media encoders  into a media stream. To this end, the wrapper  may include various types of media encoders , such as, for example, Moving Pictures Experts Group (MPEG) encoders, H.264 encoders, Flash\u00ae video encoders, etc. Such media encoders  may be selected according to factors such as, for example, data reduction, encoding quality, latency, etc. In some embodiments, the wrappers  may communicate directly with the clients  to obtain the application input data  and to serve up the application output data .","Different types of wrappers  may be provided for different applications  or classes of applications . As non-limiting examples, different wrappers  may be provided for applications  using different application programming interfaces (APIs) such as OpenGL\u00ae, DirectX\u00ae, the Graphics Device Interface (GDI), and so on. Where the application  is configured for execution in a specialized device or another type of computing device, the wrapper  may include an emulation application that emulates the device. In some embodiments, the output of the application  may be captured by the wrapper  at a device level. For example, the application  may be executed in a physical game console, and the video output may be captured by way of a video graphics array (VGA) connection, a high-definition multimedia interface (HDMI) connection, a component video connection, a national television system committee (NTSC) television connection, and\/or other connections. In other embodiments, the output of the application  may be captured by the wrapper  by intercepting system calls, such as drawing calls under a graphics API or other system calls.","The data access layer  of the wrapper  may be used to facilitate access to data that is locally available to the client . Such data may include files such as photos, documents, spreadsheets, audio files, video files, and other types of files. Such data may also include data generated in a component of the client  such as GPS location data, accelerometer data, and\/or other data. The data may be stored in a data store of the client  or in the networked storage system .","The state information  that is maintained by the emulation server application  includes various data relating to application sessions that are currently active. For example, the state information  may track the users that are currently participating in the application session, status information associated with the users, security permissions associated with the application session (e.g., who can or cannot join), and so on. In some embodiments, some or all of the state information  may be discarded when an application session ends. The input queues  collect input commands from the application input data  for a given application . The input commands may be reordered to a correct sequence and delays may be inserted between commands to ensure that they are interpreted correctly when presented to the corresponding application .","The data stored in the data store  includes, for example, application code , application feedback , media encoders , wrappers , saved state data , user data  including mirrored files  and mirrored device data , device interfaces , seed data , developer data , and potentially other data. The application code  corresponds to a library of different applications that are available to be launched as applications . The application code  may correspond to executable code within the computing device . Alternatively, the application code  may correspond to code that is executable within another type of device but is not executable within the computing device . Such application code  may be referred to as \u201cbinaries,\u201d read-only memory images (ROMs), and other terms. Application code  may be executed as multiple instances of the applications  for multiple application sessions. In one embodiment, the application code  may include source code for applications . In some cases, the application code  may correspond to beta code, testing code, trial code, sample code, etc. that is less than a fully released production version.","The application feedback  may include operational data relating to the operation of the instances of the application . Such operational data may include debugging information, defect information, usage information, crash information, core dumps, and\/or other data that may be useful to developers, marketers, and so on. The application feedback  may also include responses to surveys by users of the applications . Such surveys may be presented to the user in conjunction with the user interface served up by the emulation server application .","The media encoders  correspond to the various types of media encoders  that may be employed in the computing device . Some media encoders  may correspond to specific formats, such as, for example, H.264, MPEG-4, MPEG-2, and\/or other formats. The wrappers  correspond to the executable code that implements the various types of wrappers . The wrappers  are executable in the computing device  and may be executed as multiple instances of the wrappers  for multiple application sessions.","The saved state data  corresponds to game states that have been saved by the applications . Because the applications  may be executed in a virtualized environment, the applications  may write state information to a virtual location, which is then mapped for storage in the data store  as the saved state data . The saved state data  may correspond to data saved normally by the application  or may correspond to a memory image of the application  that may be resumed at any time.","The user data  includes various data related to the users of the applications , such as, for example, types of computing devices associated with a user, security credentials, application preferences, billing information, a listing of other users that are permitted to join application sessions started by the user, and so on. In various embodiments, the user data  may also include copies of data that is locally accessible to the client . Such data may include mirrored files  and mirrored device data .","The mirrored files  may correspond to copies of images, videos, music, documents, etc. that are obtained from the client  or the networked storage system  on behalf of the client . The mirrored device data  corresponds to GPS location data, accelerometer data, etc. generated in a component of the client  and maintained in the computing device  so that the applications  may have access. In one embodiment, the mirrored files  and\/or the mirrored device data  may correspond to a temporary cache of the data. In one embodiment, the mirrored files  may correspond to a group of files stored in the client  (e.g., all files in a folder, all files on a drive, all files matching a filename mask, etc.), while in another embodiment, the mirrored files  may correspond to files that are accessed or predicted to be accessed by the application . In one embodiment, the mirrored files  may be explicitly designated by the user.","The device interfaces  correspond to images, animations, code, hypertext markup language (HTML), extensible markup language (XML), cascading style sheets (CSS), and\/or other data that may be used to generate a graphical representation of a virtualized computing device. It is noted that an application  that is executable on a particular computing device platform may be associated with a multitude of device interfaces . As a non-limiting example, the Android\u00ae platform for smartphones may be supported by a multitude of different models of smartphones. Some of the models may have mini-keyboards with a touchscreen, while others may have merely a touchscreen with no physical mini-keyboard. The models may have different controls and casings. Therefore, different device interfaces  may be provided for different models of Android\u00ae smartphones.","In some embodiments, multiple different device interfaces  may be used in conjunction with one wrapper . Where the emulated computing device does not include an integrated display, the device interface  may include a representation of an external display device showing video generated by the emulated computing device. Similarly, other non-integrated external devices that may connect to the emulated computing device (e.g., keyboards, mice, etc.) may be represented by the device interface .","The seed data  corresponds to a library of default data that may be accessed by the application . In some cases, the seed data  may be accessed in place of mirrored files  or mirrored device data , for example, when the mirrored files  or mirrored device data  are unavailable. In one embodiment, the seed data  for an application  may be provided by a developer of the application . In another embodiment, the seed data  may be generic data that may be used by many different applications . As a non-limiting example, the seed data  may include a default GPS location that is to be used when no GPS location is available from the client . As another non-limiting example, the seed data  may include a sample photo for use by a photo-editing application .","The developer data  may include various information related to developers of the applications . For example, a developer may have an account for uploading the application code , configuring surveys and data collection for the application feedback , uploading seed data , and\/or performing other tasks. The developer data  may include compilation instructions for source code of the application code  to be compiled into code that is executable within a particular wrapper .","The client  is representative of a plurality of client computing devices that may be coupled to the network . The clients  may be geographically diverse. The client  may comprise, for example, a processor-based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer, a laptop computer, personal digital assistants, cellular telephones, smartphones, set-top boxes, televisions that execute applications and can access the network , music players, web pads, tablet computer systems, game consoles, electronic book readers, or other devices with like capability.","The client  may include a display . The display  may comprise, for example, one or more devices such as cathode ray tubes (CRTs), liquid crystal display (LCD) screens, gas plasma-based flat panel displays, LCD projectors, or other types of display devices, etc. The client  may include one or more input devices . The input devices  may comprise, for example, devices such as keyboards, mice, joysticks, accelerometers, light guns, game controllers, touch pads, touch sticks, push buttons, optical sensors, microphones, webcams, and\/or any other devices that can provide user input. Additionally, various input devices  may incorporate haptic technologies in order to provide feedback to the user.","Various data may be stored in the client  as file data . The file data  may correspond to images, audio, video, documents, and\/or other types of files. The file data  may be stored in any data store that is locally accessible to the client . Such a data store may include, for example, hard drives, flash drives, memory sticks, floppy disks, compact discs, tape drives, network-attached storage, networked storage systems , and\/or other types of data stores.","The client  may be configured to execute various applications such as a client application  and\/or other applications. The client application  is executed to allow a user to launch, join, play, or otherwise interact with an application  executed in the computing device . To this end, the client application  is configured to capture input commands provided by the user through one or more of the input devices  and send this input over the network  to the computing device  as application input data . The application input data  may also incorporate file data  and other data (e.g., GPS data, audio data, etc.) generated in a component of the client  for use by the application . In various embodiments, the client application  corresponds to a browser application.","The client application  is also configured to obtain application output data  over the network  from the computing device  and render a screen  on the display . To this end, the client application  may include one or more video and audio players to play out a media stream generated by an application . In one embodiment, the client application  comprises a plug-in or other client-side code executed within a browser application. The client  may be configured to execute applications beyond the client application  such as, for example, browser applications, email applications, instant message applications, and\/or other applications. In some embodiments, multiple clients  may be employed for one or more users to interact with the application . As non-limiting examples, some clients  may be specialized in display output, while other clients  may be specialized in obtaining user input. It is noted that different clients  may be associated with different latency requirements which may affect a delay employed before providing input commands to the application .","The developer client  is representative of a plurality of client computing devices, operated by developers, which may be coupled to the network . The developer client  may comprise, for example, a processor-based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer, a laptop computer, personal digital assistants, cellular telephones, smartphones, set-top boxes, music players, web pads, tablet computer systems, game consoles, electronic book readers, or other devices with like capability. The developer client  may include a display comprising, for example, one or more devices such as cathode ray tubes (CRTs), liquid crystal display (LCD) screens, gas plasma-based flat panel displays, LCD projectors, or other types of display devices, etc.","The developer client  may be configured to execute various applications such as a browser and\/or other applications. The browser may be executed in a developer client , for example, to access and render network pages, such as web pages, or other network content served up by the computing device  and\/or other servers. The developer client  may be configured to execute other applications such as, for example, compilers, interpreters, software development applications, software debugging applications, email applications, instant message applications, and\/or other applications.","A networked storage system  may be employed to provide access to files stored in a cloud computing resource comprising a networked plurality of computing devices. In some embodiments, the networked storage system  may correspond to a virtual file system where the actual data objects of the files are stored in a separate data storage system. A metadata service may be used to associate metadata with the files, thereby facilitating searches of the files using the metadata. By storing files in such a networked storage system , users may access the files from any client  that has network  connectivity.","The networked storage system  maintains a file hierarchy of files and folders in networked or metadata-based file systems for users. To this end, the networked storage system  may support various file-related operations such as, for example, creating files, deleting files, modifying files, setting permissions for files, downloading files, and\/or other operations. The networked storage system  may be configured to maintain a record of file activity, e.g., uploading of files, downloading of files, deletion of files, etc. The networked storage system  may be configured to serve up data addressed by URL via HTTP. Each of the users of the networked storage system  may have a separate user account with security credentials to prevent unauthorized use.","Turning now to , shown is one example of a client  in the networked environment  (). The client  has a screen  () that is rendering a user interface  generated by a client application  (). In one embodiment, the user interface  corresponds to a network page rendered in a browser executed in the client . The user interface  may also be generated by a special-purpose application executed in the client .","The user interface  corresponds to a video portion of a media stream generated by the emulation server application  (). The media stream is associated with an application  () for photo-editing that is titled \u201cPicSee Pro.\u201d The client  may have various input buttons  which may generate various input commands that are sent to the emulation server application  as application input data  (). An audio portion of the media stream may be played out by the client application  in conjunction with the video portion of the media stream. Audio hardware controls  may be provided to control the audio playback from the client  and\/or emulated computing device, e.g., increasing or decreasing the volume of the audio. In other examples, other hardware controls may be provided, e.g., record, fast forward, rewind, stop, previous track, next track, screen brightness, selected display device, etc.","The user interface  in the example of  relates to selecting a photo to be edited by the application . A first group of options  allows a user to select default photos, for example, photos that are available to any user from the seed data  (). The data access layer  may make the seed data  appear as local data for the emulated computing device. A second group of options  allows a user to select photos from an account of the user in the networked storage system  (). Such photos, when selected, may be loaded automatically from the networked storage system  by the data access layer  with user account data obtained from the client  (e.g., security credentials and\/or other data). A third group of options  allows the user to select photos that are stored in the client  as file data  (). Such photos, when selected, may be loaded automatically by the data access layer  from the client  over the network  ().","Data that is loaded remotely, either from the networked storage system  or from the client , may be pre-loaded in advance or loaded on-demand by the data access layer . In one example, the data access layer  may employ a complete mirror of the data in the data store  (). In another example, only the data that is selected in the application  is loaded over the network . In yet another example, a user at the client  may explicitly designate to which locally accessible data the data access layer  is to have access. The user may grant or deny access for listings of files as well as the files themselves. This user selection may be performed as part of the user interface  generated by the application  or an auxiliary portion of the user interface  which is generated in part by the data access layer  or another application executed in the computing device .","Continuing on to , shown is another example of a user interface  rendered in a client application  () executed in a client  () in the networked environment  (). The user interface  shown in  corresponds to a network page generated by the electronic commerce application  () overlaid with a user interface  that is a lightbox. In other examples, the user interface  may be presented in a full-screen format or another format. Portions of the user interface  may be generated by the electronic commerce application , while other portions of the user interface  may be generated by the emulation server application  ().","The user interface  includes a device interface  that is a graphical representation of an emulated computing device (e.g., the client  shown in ), which is in this case a particular model of an Android\u00ae smartphone. In some examples, the device interface  may correspond to a generic version of the emulated computing device, e.g., a generic version of an Android\u00ae smartphone. Which model is used may be specified by the customer in the user interface  or the user interface . In addition, a preference for a model of the emulated computing device may be stored in the user data  ().","The device interface  is generated by the emulation server application  from the applicable device interface  (). The device interface  includes virtual versions of input buttons  and\/or other controls that are present in the actual device. Animations and\/or images may be used to translate the physical experience into a virtual experience. Within the device interface  is a screen  () showing the user interface  from , which corresponds to the video portion of a media stream captured by the wrapper  () from an application  () that corresponds to the selected application code  (). An audio portion of the media stream may be played out by the client application  in conjunction with the video portion of the media stream. Audio hardware controls  may be provided to control the audio playback from the emulated computing device, e.g., increasing or decreasing the volume of the audio. In other examples, other hardware controls may be provided, e.g., record, fast forward, rewind, stop, previous track, next track, screen brightness, selected display device, etc.","The user interface  may also include descriptive information  that may, for example, be an abbreviated version of a description in the underlying network page of the user interface . The descriptive information  may include title, publisher, price, narrative description, and\/or other information about the application code . In this non-limiting example, the user interface  includes a timer  because the time spent testing the application code  for possible purchase is limited. In other examples, the time for use of the application code  by the customer may be unlimited.","The user interface  may include an orientation control  to rotate the orientation of the screen . Activating such an orientation control  may cause a virtualized version of an accelerometer or other device to inform the application  that the orientation of the emulated computing device has been changed, e.g., from portrait to landscape and vice versa. The user interface  may also include one or more purchase components  for initiating a purchase of the application code  or adding the application code  to a shopping cart, wish list, gift registry, or other list of items as can be appreciated.","Next, with reference to , A, and B, a general description of the operation of the various components of the networked environment  is provided. To begin, a customer at a client  may, for example, browse a network site served up by the electronic commerce application . The customer may, for example, navigate a catalog taxonomy, execute a search query, select links, and\/or perform other navigational functions. The customer may arrive at a detail network page such as that shown in the user interface  of  or another similar network page that features an application code  for download. The customer may specify one or more preferred models of an emulated computing device for which the customer is seeking application code .","In addition to purchasing and\/or downloading the application code , the customer may be given an opportunity to use the application code  through a simulated interface. To this end, the customer at the client  sends a request to launch an application  to the emulation server application , for example, by activating an emulation request tool. The emulation server application  obtains the corresponding application code , media encoder , wrapper , and device interface  from the data store . The emulation server application  then launches the application  in the corresponding wrapper . The emulation server application  tracks the status of the application  within the state information . In some cases, the video output of the application  may be configured to be presented full-screen or not otherwise surrounded by a simulated interface on the screen  of the client , for example, as in .","The wrapper  provides a hosted environment for execution of the application . In some embodiments, the hosted environment may include a virtualized environment for the application  that virtualizes one or more resources of the computing device . Such resources may include exclusive resources, i.e., resources for which the application  requests exclusive access. For example, the application  may request full screen access from a video device, which is an exclusive resource because normally only one application can have full screen access.","Furthermore, the wrapper  may virtualize input devices such as, for example, keyboards, mice, GPS devices, accelerometers, etc. which may not actually be present in the computing device . The data generated by these components may be provided by the data access layer . The wrapper  may also provide access to a virtual file system to the application  in connection with the data access layer . In various embodiments, the wrapper  may correspond to a virtual machine and\/or the wrapper  may be executed within a virtual machine.","The user at the client  enters input commands for the application  by use of the input devices  of the client . As a non-limiting example, the user may depress a left mouse button. Accordingly, the client application  functions to encode the input command into a format that may be transmitted over the network  within the application input data . The emulation server application  receives the input command, adds it to the input queue  for the application , and ultimately passes it to the wrapper . The wrapper  then provides a left mouse button depression to the application  by way of a virtualized mouse.","It is noted that variable latency characteristics of the network  may cause some input commands to be misinterpreted by the application  if the input commands are provided to the application  as soon as they are received. As a non-limiting example, two single clicks of a mouse button may be misinterpreted as a double click if the first single click is delayed by the network  by a greater amount than the second single click. Similarly, mouse clicks and mouse drags may be misinterpreted if the relative temporal relationship between certain input commands is not preserved.","As another non-limiting example, suppose that the application  corresponds to a game application within the fighting game genre, e.g., Mortal Kombat, Street Fighter, etc. The user at the client  may perform a series of complicated moves through a rapid sequence of input commands. If the input commands are subject to variable latency over the network , the series of moves may be misinterpreted by the application , thereby resulting in the character controlled by the user not performing the intended moves. For instance, two buttons may need to be pressed within a certain period of time to perform a punch move successfully. If the second input command is delayed by the network , but the first input command is not, the move may be unsuccessful without any fault of the user. To remedy this, the emulation server application  may delay the first input command to preserve the relative temporal relationship between the first and second input commands. In so doing, the gesture, or command sequence, performed by the user is preserved for the application .","Although the additional delay used may be predetermined, it may also be calculated based on the difference between the time period between the commands when generated in the client  and the time period between when the commands are received by the emulation server application . The time period between the commands when generated in the client  may be determined by referring to timestamps in metadata associated with the commands. It is noted that the various fixed latencies in the system (e.g., video encoding delay, minimum network latency) might not adversely impact the functionality of the application .","Various techniques related to adding latency and accommodating latency are described in U.S. patent application entitled \u201cAdding Latency to Improve Perceived Performance\u201d filed on Oct. 29, 2010 and assigned application Ser. No. 12\/916,111, and in U.S. patent application entitled \u201cAccommodating Latency in a Service-Based Application\u201d filed on Sep. 17, 2010 and assigned application Ser. No. 12\/885,296, both of which are incorporated herein by reference in their entirety.","In some cases, the delay in providing the input command to the application  may depend at least in part on a video frame region that is associated with the input command. As a non-limiting example, with an application  that is a game, it may be important to delay an input command relating to game play to preserve the meaning of the input command. However, the game screen  may also include a chat window, and the input command may be text to be sent to another player in the game by way of the chat window. If the input command relates to the chat window, the wrapper  may be configured to provide the input command to the application  without additional delay. That is, it may be preferable to send the text to the other user as soon as possible. Accordingly, the delay may depend on whether the input command is related to the region of the screen  that is the chat window. Also, it is understood that an application  may have multiple modes, where one mode is associated with a delay in providing input commands while another is not.","It may also be important to ensure that the input command is synchronized with the video frame presented to the user on the screen  when the user generated the input command in the client . As a non-limiting example, because of the various latencies of the system, a fireball intended to be thrown by the character controlled by the user in a fighting game may be thrown later than intended. In some cases, this may not matter. For example, the user may merely want to throw the fireball, and a short delay in throwing the fireball may be perfectly acceptable to the user. However, for more precision, the application  may support an API that allows the wrapper  to associate a frame number or other temporal identifier with an input command. Therefore, the application  can know precisely when the input command was performed and react accordingly. The frame number or other temporal identifier may be sent to the emulation server application  by the client application  as metadata for the input command.","In some embodiments, different input commands may be presented to the application  from those that were generated by a client . As a non-limiting example, if a user sends a mouse down command and the client application  loses focus, the wrapper  may be configured to send a mouse down command followed by a mouse up command. In various embodiments, the input commands may be relayed to the wrapper  as soon as possible, or the input commands may be queued by the wrapper  in the input queue  and relayed to the application  sequentially from the queue according to another approach.","Meanwhile, the graphical output of the application  is captured by the wrapper  and encoded into a media stream. Additionally, the audio output of the application  may be captured and multiplexed into the media stream. The graphical output and\/or audio output of the application  may be captured by hardware devices of the computing device  in some embodiments. The media stream is transmitted by the emulation server application  to the client  over the network  as the application output data . The client application  obtains the application output data  and renders a screen  on the display  in a user interface . The screen  may be surrounded by a device interface  generated from the corresponding device interface  that facilitates input and output for the emulated computing device.","In some embodiments, a customer may start an application  at one client  and continue the application  at another client . Furthermore, multiple users at diverse locations may participate in an application . As a non-limiting example, an application  may have been developed to be executed in one device with multiple controllers. Accordingly, the wrapper  may be configured to map input commands from one client  to a first virtual controller and input commands from another client  to a second virtual controller. As another non-limiting example, an application  may have been developed to be executed in one device, where one side of the keyboard controls the first player and the other side of the keyboard controls the second player. Accordingly, the wrapper  may be configured to map input commands from one client  to keys on one side of a virtual keyboard and input commands from another client  to keys on another side of the virtual keyboard.","Various embodiments enable input generated through one type of input device  in a client  to be transformed by the wrapper  into input commands provided to the application  through an entirely different type of virtual input device. As a non-limiting example, input generated by an accelerometer in the client  may be translated by the wrapper  into input provided through a virtual mouse. Thus, completely different kinds of input devices  may be used in the application  that may not have been contemplated when the application  was implemented.","Where the input devices  incorporate haptic technologies and devices, force feedback may be provided to the input devices  within the application output data . As a non-limiting example, a simulated automobile steering wheel may be programmed by force feedback to give the user a feel of the road. As a user makes a turn or accelerates, the steering wheel may resist the turn or slip out of control. As another non-limiting example, the temperature of the input device  may be configured to change according to force feedback. In one embodiment, force feedback generated from the application input data  of one client  may be included in the application output data  sent to another client .","Because the client  is decoupled from the hardware requirements of the application , the application  may be used remotely through a diverse variety of clients  that are capable of streaming video with acceptable bandwidth and latency over a network . For example, a game application  may be played on a client  that is a smartphone. Thus, the client  need not include expensive graphics hardware to perform the complex three-dimensional rendering that may be necessary to execute the application . By contrast, the hardware of the computing device  may be upgraded as needed to meet the hardware requirements of the latest and most computationally intensive applications . In various embodiments, the video signal in the media stream sent by the emulation server application  may be scaled according to the bitrate and\/or other characteristics of the connection between the computing device  and the client  over the network .","Having thoroughly tested the application code  with an interface that resembles their own computing device, customers are well prepared to purchase the application code . At any time, the customer may choose to purchase, lease, and\/or download the application code  by selecting various purchase components , . Additionally, if a customer does not own the particular version of the emulated computing device, the customer may decide to purchase a physical version of the emulated computing device after interacting with the virtual version.","In some embodiments, the data access layer  may provide access, for the application , to data that is ordinarily only locally available to the client . Such data may be stored as file data  in a data store of the client  or in an account of the user in a networked storage system . Such data may include data generated by components of the client , including GPS devices, accelerometers, etc. The data may be accessed by the data access layer  from the client  on demand over the network , or, periodically, the data may be mirrored in the mirrored files  and mirrored device data . A library of seed data  may be available to provide data for use by applications  in addition to the data of the user or when the data of the user is unavailable.","As a non-limiting example, a user may be testing an application  that suggests restaurants according to the current location of the user. The application  may make a request for a location from a virtualized GPS device. The request for the location may be intercepted by the data access layer . If the user is using a client  with a GPS device, the data access layer  may request and obtain this location from the client  over the network. In one embodiment, the GPS location may be mirrored automatically from the client  in the mirrored device data . If the client  does not have a GPS device or if the user has not enabled access to the GPS device, the data access layer  may be configured to instead pull a default location from the seed data .","As another non-limiting example, a user may be using a photo editor application . When the user requests to open a photo for editing, a dialog may appear to select a file. The data access layer  may virtualize a local data store for the application  which provides access to the file data  on the client. Alternatively, the data access layer  may provide access to the mirrored files  which correspond to a cache or mirrored copy of at least a portion of the file data . The data access layer  may obtain data such as security credentials from the client  and then access the networked storage system  to obtain files of the users. Additionally, and if the files of the user are unavailable, the data access layer  may allow access to the seed data , which may include sample photos. Thus, a user may be able to test the photo editing functionality even when the local files are unavailable.","Various embodiments of the present disclosure may offer many features that are useful to developers of applications . By deploying applications  through the emulation server application , the developers may have the opportunity to test their applications  under a variety of emulated platforms by a multitude of different users. Performance of the application  may be evaluated for the different emulated devices.","A developer at a developer client  may upload a version of the application code  to the emulation server application  through a web-based interface, file transfer protocol (FTP), email, or other interface. The emulation server application  may be configured to obtain the application code  from the developer and deploy it for use in the computing device  as instances of applications . In addition, updates to the application code  may be similarly deployed and pushed out to users through the applications . This avoids having to wait for users to manually perform updates in the clients .","The emulation server application  in conjunction with the various wrappers  may be configured to collect operational data about the applications  for developers. The operational data may be stored in the application feedback  and later accessed by developer clients . The operational data may include usage analytics (e.g., a duration of use by a user of instances of the application , etc.), when the application  has crashed and debugging information, and feedback from the users. In one embodiment, the emulation server application  may be configured to present a survey to the user through the client application . The survey responses may be collected and stored in the application feedback . The emulation server application  may also be configured to identify potential customers to whom to promote a beta test of an application  for a developer.","Referring next to , shown is a flowchart that provides one example of the operation of a portion of the emulation server application  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the emulation server application  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","Beginning with box  in , the emulation server application  obtains application code  () from a developer client  () and deploys the application code  within the system. This may include compiling or processing the application code  for execution within multiple emulated platforms. In box , the emulation server application  may identify potential customers who may be interested in the application  () and may promote the application  to the potential customers. In one example, a developer may manually specify a set of users in the developer data  (). In another example, a developer may specify rules for automatically identifying users in the developer data . Potential customers may be identified automatically, for example, according to purchase history data, browse history data, review history data, and\/or other data. In one scenario, review history data is employed to identify users who are classified as good or thoughtful reviewers.","In box , the emulation server application  obtains a request from a client  () to begin an application emulation session for a particular application code . In box , the emulation server application  determines a preferred model of the emulated computing device either specified by the customer at the client  or otherwise associated with the customer. In box , the emulation server application  determines whether there is no preferred model indicated. If there is no preferred model indicated, or if a device interface  () for the preferred model is unavailable, the emulation server application  moves to box  and uses a generic model of the emulated computing device for executing the application code  and providing a device interface  (). The emulation server application  then continues to box . If a preferred model is indicated, the emulation server application  also continues to box  and uses the preferred model.","In box , the emulation server application  generates the user interface  (), which may include a customized device interface , and sends the corresponding data to the client . In box , the emulation server application  loads the application code  and executes an instance of an application  () within a wrapper  () that corresponds to the emulated computing device. In box , the emulation server application  captures the media stream from the wrapper , which may be encoded by the media encoder  () and\/or other encoders. The emulation server application  sends the media stream to the client  as application output data  () for rendering in the customized device interface . In some embodiments, the device interface  may be embedded into the video signal of the media stream.","In box , the emulation server application  obtains input commands from the client  in application input data  (). The emulation server application  provides the input commands to the application  executing in the wrapper . In box  of , the emulation server application  determines whether application  is requesting access to data. If the application  is not requesting access to data, the emulation server application  proceeds to box . Otherwise, if the application  is requesting access to data, the emulation server application  instead proceeds from box  to box . In box , the emulation server application  determines whether data that is locally available to the client  is used by the application . If such data is not to be used or is unavailable, the emulation server application  in box  accesses default data for the application  in the seed data  () and provides the default data to application  via the data access layer  (). The emulation server application  proceeds to box .","If the emulation server application  determines instead that locally available data from the client  is to be used and is available, the emulation server application  proceeds from box  to box  and accesses the data locally available to the client  and provides the data to the application  through the data access layer . Such data may be maintained in a local mirror or cache such as in mirrored files  () or in mirrored device data  (). Alternatively, such data may be obtained from the client  or from a networked storage system  () on behalf of the client . The emulation server application  continues to box .","In box , the emulation server application  records operational data relating to the application . Such data may be recorded in application feedback  (). Such data may be useful for usage analytics, marketing, and quality assurance purposes. In box , the emulation server application  determines whether the session is over. As a non-limiting example, the session may be associated with a timer  (), and the timer  may have expired. As another non-limiting example, the session may have been explicitly ended through user interaction at the client . As yet another non-limiting example, the session may have been implicitly ended through user inaction at the client .","If the session is not over, the emulation server application  returns to box  in  and continues to capture the media stream from the application . If the session is over, the emulation server application  proceeds to box  and ends the session and releases resources consumed by the session. In box , the emulation server application  determines whether a survey is to be collected from the client . If so, the emulation server application  moves to box  and collects and stores the survey response in the application feedback . The emulation server application  proceeds to box . If no survey is collected, the emulation server application  also moves to box .","In box , the emulation server application  provides the application feedback  to the developer at the developer client . Such data may be provided in the form of an email message, bulk data upload, network page, and\/or other formats. In box , the emulation server application  determines whether the application code  is to be updated. If the application code  is to be updated, the emulation server application  proceeds to box . In box , the emulation server application  obtains and deploys an updated version of the application code  from the developer client . Thereafter, the emulation server application  may return to box  of  and promote the update to current and\/or potential users. Any future instance of an application  will be configured to use the updated version of the application code , if applicable to the emulated computing device. If the emulation server application  instead determines that the application code  is not to be updated, the portion of the emulation server application  ends.","Moving on to , shown is a flowchart that provides one example of the operation of a portion of the electronic commerce application  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the electronic commerce application  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","Beginning with box , the electronic commerce application  obtains a request from a client  () for a detail network page regarding an application code  (). In box , the electronic commerce application  generates the network page and sends the network page to the client . In box , the electronic commerce application  obtains a request from the client  to launch an application emulation session. In box , the electronic commerce application  generates a user interface  () or a portion of the user interface  for the application emulation session in conjunction with the emulation server application  and sends the corresponding data to the client  for rendering on a display  ().","In box , the electronic commerce application  obtains a request to purchase the application code . In box , the electronic commerce application  begins an ordering process to complete the order for the application code  by the customer, which may involve various tasks in an order pipeline. Thereafter, the portion of the electronic commerce application  ends.","With reference to , shown is a schematic block diagram of the computing device  according to an embodiment of the present disclosure. The computing device  includes at least one processor circuit, for example, having a processor , a memory , and, optionally, one or more graphics devices , all of which are coupled to a local interface . To this end, the computing device  may comprise, for example, at least one server computer or like device. The local interface  may comprise, for example, a data bus with an accompanying address\/control bus or other bus structure as can be appreciated. The graphics devices  may correspond to high-performance graphics hardware, including one or more graphics processors . The graphics devices  are configured to render graphics corresponding to the applications  executed in the computing device .","Stored in the memory  are both data and several components that are executable by the processor . In particular, stored in the memory  and executable by the processor  are the emulation server application , the electronic commerce application , the wrappers , the data access layers  the applications , the media encoders , and potentially other applications. Also stored in the memory  may be a data store  and other data. In addition, an operating system may be stored in the memory  and executable by the processor .","It is understood that there may be other applications that are stored in the memory  and are executable by the processors  as can be appreciated. Where any component discussed herein is implemented in the form of software, any one of a number of programming languages may be employed such as, for example, C, C++, C#, Objective C, Java\u00ae, JavaScript\u00ae, Perl, PHP, Visual Basic\u00ae, Python\u00ae, Ruby, Delphi\u00ae, Flash\u00ae, or other programming languages.","A number of software components are stored in the memory  and are executable by the processor . In this respect, the term \u201cexecutable\u201d means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory  and run by the processor , source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory  and executed by the processor , or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory  to be executed by the processor , etc. An executable program may be stored in any portion or component of the memory  including, for example, random access memory (RAM), read-only memory (ROM), hard drive, solid-state drive, USB flash drive, memory card, optical disc such as compact disc (CD) or digital versatile disc (DVD), floppy disk, magnetic tape, or other memory components.","The memory  is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, solid-state drives, USB flash drives, memory cards accessed via a memory card reader, floppy disks accessed via an associated floppy disk drive, optical discs accessed via an optical disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","Also, the processor  may represent multiple processors  and the memory  may represent multiple memories  that operate in parallel processing circuits, respectively. In such a case, the local interface  may be an appropriate network  () that facilitates communication between any two of the multiple processors , between any processor  and any of the memories , or between any two of the memories , etc. The local interface  may comprise additional systems designed to coordinate this communication, including, for example, performing load balancing. The processor  may be of electrical or of some other available construction.","Although the emulation server application , electronic commerce application , the wrappers , the data access layers , the applications , the media encoders , the client application  (), and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The flowcharts of , B, and  show the functionality and operation of an implementation of portions of the electronic commerce application  and the emulation server application . If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor  in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the flowcharts of , B, and  show a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more blocks may be scrambled relative to the order shown. Also, two or more blocks shown in succession in , B, and  may be executed concurrently or with partial concurrence. Further, in some embodiments, one or more of the blocks shown in , B, and  may be skipped or omitted. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present disclosure.","Also, any logic or application described herein, including the emulation server application , the electronic commerce application , the wrappers , the data access layers , the applications , the media encoders , and the client application , that comprises software or code can be embodied in any non-transitory computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor  in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present disclosure, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer-readable medium can comprise any one of many physical media such as, for example, magnetic, optical, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, memory cards, solid-state drives, USB flash drives, or optical discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the present disclosure can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIGS. 2A and 2B","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIGS. 3A and 3B","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 5","FIG. 1"]}]},"DETDESC":[{},{}]}
