---
title: Thread monitoring using shared memory
abstract: A system and method to monitor worker threads within a Java virtual machine. At least one program is executed on the Java virtual machine to perform a task. A worker thread of the Java virtual machine is assigned to perform the task. Status information for the worker thread is generated and reported into memory external to the Java virtual machine to enable monitoring of the worker thread from external to the Java virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07689989&OS=07689989&RS=07689989
owner: SAP AG
number: 07689989
owner_city: Walldorf
owner_country: DE
publication_date: 20041228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND INFORMATION","SUMMARY OF INVENTION","DETAILED DESCRIPTION"],"p":["This disclosure relates generally to monitoring Java virtual machines, and in particular but not exclusively, relates to monitoring worker threads within Java virtual machines using shared memory.","Enterprise software has transformed the way diverse enterprises, large and small alike, transact and manage day-to-day operations. Businesses use enterprise software (e.g., web based application servers) to control production planning, purchasing and logistics, warehouse and inventory management, production, vendor management, customer service, finance, personnel management, and other basic business activities. As the enterprise software industry continues to mature, the various application and hardware resources enlisted to facilitate this diverse set of tasks are being amalgamated into robust, highly integrated solutions (e.g., SAP NetWeaver, SAP xAPPs, mySAP Business Suite, etc.).","To integrate diverse hardware and software resources, developers of enterprise software have leveraged cross platform engines capable of minimizing or even severing platform dependencies from the enterprise solution. The Java 2 Platform, Enterprise Edition\u2122 (\u201cJ2EE\u201d) (e.g., J2EE Specification, Version 1.4) is a Java based solution supported by the Java Virtual Machine (\u201cJVM\u201d) engine. J2EE simplifies application development and decreases the need for programming and programmer training by creating standardized and reusable modular components. The popularity of Java based solutions is evident as the Information Technology (\u201cIT\u201d) world has gravitated to the Java language.","As enterprise software is woven into the fabric of modern business, failure of an enterprise solution may no longer be a mere nuisance, but has the potential to wreak catastrophic havoc on a business. As such, robust, reliable software is evermore critical. The enterprise software industry is marching toward the ultimate goal of self-healing software capable of sustainable, uninterrupted operation, without human intervention. In pursuit of this goal, IT technicians can benefit from convenient tools capable of monitoring the health of their enterprise software. With appropriate monitoring tools, IT technicians can take appropriate action in a timely manner to ensure a healthful state of their software or to spot delinquent applications and prevent repeat offenders. Currently, JVMs do not provide adequate mechanisms to monitor their internal operation on a real-time basis.","A system and method to monitor worker threads within a Java virtual machine. At least one program is executed on the Java virtual machine to perform a task. A worker thread of the Java virtual machine is assigned to perform the task. The work thread stores place holder information associated with the task. Status information for the worker thread is generated and reported into memory external to the Java virtual machine to enable monitoring of the worker thread from external to the Java virtual machine.","In one embodiment, the worker thread is created with a class having a reporting method. The reporting method imparts reporting functionality to the worker thread capable of reporting the status information into the memory external to the Java virtual machine.","In one embodiment, the worker thread registers a reporting slot within the memory external to the Java virtual machine to store the status information for the worker thread.","In one embodiment, a plurality of reporting slots are registered within the memory external to the Java virtual machine to store status information for a corresponding plurality of worker threads within the Java virtual machine.","In one embodiment, subtasks are associated with the task and the status information is reported into the memory in response to each of the subtasks to provide subtask related information within the status information. In one embodiment, status information corresponding to subtasks within a selectable depth is reported, while status information corresponding to subtasks below the selectable depth is not reported.","In one embodiment, the status information for the worker thread is retrieved from the memory and transmitted to a monitoring console to display the status information.","Embodiments of the invention may include all or some of the above described features. The above features can be implemented using a computer program, a method, a system or apparatus, or any combination of computer programs, methods, or systems. These and other details of one or more embodiments of the invention are set forth in the accompanying drawings and in the description below.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","105","100","105","110","105","115","120","125","115","120","130"]},"Collectively, Java programs  may provide the logic for implementing various sub-layers (e.g., business layer, integration layer, presentation layer, etc.) of AS instance . In one embodiment, AS instance  is a web application server, such as Web AS by SAP, .NET by Microsoft, or the like. In one embodiment, AS instance  represents a Java 2 Platform, Enterprise Edition (\u201cJ2EE\u201d) instance for providing enterprise software functionality. It should be appreciated that various components of AS instance  have been excluded from  for the sake of clarity and so as not to obscure the invention. Although  illustrates three worker nodes  within AS instance , more or less worker nodes  may be established within AS instance .","During operation, work requests  may be received at AS instance  and assigned to any of worker nodes  for servicing. JVMs  within each worker node  may execute Java programs  containing logic for servicing the received work requests . Each work request  may require performing one or more tasks (e.g., retrieve a name and address from a database) which may also include one or more subtasks (e.g., fetch data from database, render data for output, clean memory). To perform multiple tasks in parallel, each JVM  may maintain a thread pool having a number of available worker threads to perform the tasks. While performing these tasks and subtasks, each of the worker threads is capable of reporting thread status information  into shared memory .","Once thread status information  is reported into shared memory , monitoring console  can query shared monitoring memory  to display thread status information  for review by an Information Technology (\u201cIT\u201d) technician. Monitoring console  may be located locally on the same hardware machine executing AS instance , or advantageously, executed on a remote machine couple to a network. Monitoring console  may further monitor an entire cluster of AS instances , all from a single remote machine. Using monitoring console , the IT technician can remotely monitor the status and operational health of worker threads within each JVM  in real-time to ensure AS instance  remains in a healthful state. Shared memory  working in concert with monitoring console , enables the IT technician to make informed decisions when taking preventative and\/or remedial action to effectively maintain and manage an enterprise system.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 2"],"b":["200","105","105","203","115","125","115","120","205","210","215","220"]},"Thread manager  creates and manages worker threads  and thread pool . Each worker thread  provides a \u201cthread of execution\u201d which may be assigned a task to perform. In general, worker threads  share a common address space and run in a quasi-parallel manner. The common address space is reserved by JVM  and may contain program text (e.g., Java programs ) and data, as well as other resources. Each worker thread  may include a program counter that keeps track of which instruction to execute next, registers that hold current working variables, and a call stack that contains the execution history (i.e., procedure call history) of the particular worker thread . Worker threads  enable each JVM  to achieve parallelism to perform multiple tasks in a quasi-parallel manner, while supporting sequential processes that make use of blocking system calls (e.g., disk input\/output access).","Thread manager  acts as a factory for worker threads  using an extended thread class, which contains reporting methods for reporting thread status information  into shared memory . In one embodiment, thread manager  is an entity (e.g., Java object) interpreted and executed by JVM . In one embodiment, worker threads  are Java objects running within JVM . When one of worker threads  is created, it is instantiated with the extended thread class, thereby inheriting the reporting methods and the ability to report thread status information  into shared memory . Once one of worker threads  is instantiated, it may be said that the worker thread is \u201cinstrumented\u201d with reporting functionality.","In one embodiment, these reporting methods perform reporting tasks that are interleaved with execution of work tasks. The reporting tasks update shared memory  with the current status of the particular worker thread . In one embodiment, the reporting tasks are event based. An event based reporting task updates shared memory  in response to a work event that has created new thread status information . Event based reporting tasks save time and processing cycles that may otherwise be wasted pulling each worker thread  for thread status information  that may or may not yet exist.","Upon creation\/instantiation, a new worker thread  is placed into thread pool  as an idle worker thread  available to be assigned a task (e.g., THREAD()). In one embodiment, thread manager  assigns new tasks to each worker thread  as work requests  arrive. Once assigned a task, the particular worker thread  is removed from the thread pool , signifying that it is currently busy and not available to perform other tasks. Thread manager  also controls whether or not to delete any of worker threads  (e.g., to shrink thread pool ). In response to deletion of one of worker threads , the designated worker thread  may clean shared memory  of any thread status information  corresponding to the designated worker thread  just prior to its deletion. Alternatively, thread manager  may clean shared memory  of the corresponding thread status information  after the designated worker thread  has been deleted.","In one embodiment, shared memory  includes reporting slots S-SN. Each reporting slot may be registered by a worker thread  and used by the particular worker thread  to store its thread status information . Upon deletion of a particular worker thread , its corresponding reporting slot may be cleaned and recycled for use by another worker thread .","Worker threads  (and in some embodiments thread manager  as well) access shared memory  via shared memory API . In one embodiment, shared memory API  abstracts access to shared memory  through use of function calls. Each worker thread  that wishes to report thread status information  into shared memory  makes a \u201ccall\u201d to one or more functions published internally to worker nodes  by shared memory APIs . Worker threads  then pass thread status information  to the called function. In turn, the called function copies thread status information  into an appropriate reporting slot S-SN.","In one embodiment, monitoring console  transmits status queries to network interface  to request thread status information , or a portion thereof. Monitoring console  can be implemented using the Microsoft Management Console (\u201cMMC\u201d), while network interface  may be implemented with a WebService based Start Service. In one embodiment, the status queries are conveyed to network interface  using a message based protocol, such as Simple Object Access Protocol (\u201cSOAP\u201d) employing extensible markup language (\u201cXML\u201d) syntax to send text commands over the HyperText Transport Protocol (\u201cHTTP\u201d). The status query may be transmitted to AS instance  automatically on a periodic basis, in response to a specified event, or in response to a screen refresh request by an IT technician.","Upon receipt, the status query is passed to a monitoring API . Monitoring API  accesses the requested portions of shared memory  via its own copy of shared memory API . Once monitoring API  retrieves the requested portions of thread status information  from shared memory , thread status information  is conveyed to monitoring console . In one embodiment, XML syntax is used to convey thread status information  to monitoring console .","Monitoring console  may further format the received thread status information  and render it to a screen for review by an IT technician. Monitoring console  may display thread status information  received from a number of AS instances  to monitor an entire cluster of AS instances . Monitoring console  may further optionally generate log files to maintain long-term status reports on each AS instance  being monitored.","In addition to issuing status requests, monitoring console  may negotiate a reporting contract with network interface  to serve up thread status information  on a regular or periodic basis, without need of status requests. As such, network interface  may be capable of pushing thread status information  to monitoring console , as well as, monitoring console  pulling thread status information  from network interface .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","205","135","105","135","115","135","305","215"]},"Once task  is assigned to worker thread , worker thread  is removed from thread pool  indicating that worker thread  is busy and not currently available. A first reporting task  by worker thread  may include updating one of the reporting slots S-SN within shared memory  with thread status information  indicating that worker thread  is \u201cprocessing.\u201d In one embodiment, as each subtask related to task  is performed, the reporting functionality updates the appropriate reporting slot S-SN of shared memory  with new thread status information . Reporting tasks may execute in an interleaving manner with the subtasks, as illustrated in .","Subtasks are often organized like a stack. In one embodiment, a selectable reporting depth  may be set to report only to a specified depth of this stack. Selectable reporting depth  acts as a threshold. Subtasks that occur below the threshold are not reported, while subtasks that occur above the threshold are reported. For example, SUBTASK() and SUBTASK() are illustrated as occurring above selectable reporting depth , while SUBTASK() and SUBTASK() are not. As such, reporting tasks  and  corresponding to SUBTASK() and reporting tasks  and  corresponding to SUBTASK() are performed. However, no reporting tasks are performed in response to SUBTASK() and SUBTASK(). A final reporting task  may also be performing to report into shared memory  that worker thread  has once again returned to thread pool  and is therefore idle.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 4"],"b":["400","140","125","400","140","205","210","205","140","400","140","125","205"]},"In one embodiment, all thread status information  corresponding to a single one of worker threads  is maintained within a data structure stored to one of reporting slots S-SN. Upon termination of one of worker threads , the corresponding reporting slot S-SN is cleaned, and the memory reclaimed for use by a later created worker thread or for other purposes. Accordingly, shared memory  provides a snapshot of the current status of all worker threads  in all worker nodes  of AS instance . This snapshot may be periodically (or on demand) transferred to monitoring console  via network interface . In one embodiment, if longer records are desired, thread status information  may be output into log files at AS instance  or by monitoring console .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["500","205","120","505","215","205","205","1","125","510","1","140","205","205","125","205","210","515","205"]},"If a work request  arrives at a worker node  (decision block ), then thread manager  assigns an available (i.e., idle) worker thread  from thread pool  to service a task associated with the received work request  (process block ). In one embodiment, Java programs  contain the logic necessary to service work requests . During execution, Java programs  may initiate one or more tasks and associated subtasks, which are then assigned to worker threads  in thread pool  to provide a thread of execution.","While the designated worker thread  performs the task and associated subtasks (process block ), the reporting functionality (e.g., reporting methods) included within each worker thread  performs reporting tasks to update shared memory  with new thread status information  (process block ). As discussed above, the reporting tasks may be performed in an interleaving manner with performance of the tasks and associated subtasks. Once a task and all of its associated subtasks are complete (decision block ), the designated worker thread  returns to thread pool  and updates shared memory  with its idle status once again (process block ).",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 6","b":["600","600","605","135","610","605","615","105","620","622","625","627","630"]},"AS instances  may be web application servers, such as Web AS by SAP, .NET by Microsoft, or the like. As discussed above, each AS instance  may include one or more worker nodes  to execute Java programs  and service work requests . It should be appreciated that various components of AS instances  have been excluded from  for the sake of clarity and so as not to obscure the invention. In one embodiment, worker nodes  may be compliant with the J2EE standard. In one embodiment, worker nodes  may be compliant with the .NET framework from Microsoft. Each AS instance  may even include worker nodes  compliant with both the J2EE standard and the NET framework.","Web dispatcher  implements a load-balancing mechanism distributing work requests  from client nodes  among server nodes  within cluster . For example, web dispatcher  may implement a round-robin load-balancing mechanism or the like. Web dispatcher  may be one of server nodes  having the task of dispatching work requests  among server nodes  of cluster  or a stand alone hardware node. Work requests  are processed by server nodes  and may subsequently be provided to database node . Database node  offers up the requested data to server nodes , which in turn process and format the results for display on client nodes . Each AS instance  may further include its own dispatcher mechanism to distribute work requests  assigned to it among its individual worker nodes .","Java programs  (see ) executed by worker nodes  within AS instances  may collectively provide the logic for implementing various sub-layers (e.g., business layer, integration layer, presentation layer, etc.) of AS instances . For example, Java programs  may be servlets providing server-side logic to generate graphical user interfaces (\u201cGUIs\u201d) on clients nodes  and may further include JavaServer Page (\u201cJSP\u201d) extensions for providing dynamic content within the GUI. Java programs  may further include business applications providing the business logic of an Enterprise JavaBean (\u201cEJB\u201d), and on client nodes  may be applets providing client side logic, and the like.","One of client nodes  may execute monitoring console  to provide remote monitoring of AS instances , and in particular, remote monitoring of each worker thread  within each of JVMs . If an IT technician notices that one of the worker threads  is stuck in an infinite loop, hung, consuming an unusually large amount of resources, or otherwise errant, the IT technician can take appropriate action including deleting the errant worker thread  or resetting the problematic JVM  executing the errant worker thread .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 7","b":["700","105","110","500","610","615","620","625","700","705","710","715","720","725","730","700"]},"The elements of processing system  are interconnected as follows. Processor(s)  is communicatively coupled to system memory , NV memory , DSU , and communication link , via chipset  to send and to receive instructions or data thereto\/therefrom. In one embodiment, NV memory  is a flash memory device. In other embodiments, NV memory  includes any one of read only memory (\u201cROM\u201d), programmable ROM, erasable programmable ROM, electrically erasable programmable ROM, or the like. In one embodiment, system memory  includes random access memory (\u201cRAM\u201d), such as dynamic RAM (\u201cDRAM\u201d), synchronous DRAM, (\u201cSDRAM\u201d), double data rate SDRAM (\u201cDDR SDRAM\u201d) static RAM (\u201cSRAM\u201d), and the like. DSU  represents any storage device for software data, applications, and\/or operating systems, but will most typically be a nonvolatile storage device. DSU  may optionally include one or more of an integrated drive electronic (\u201cIDE\u201d) hard disk, an enhanced IDE (\u201cEIDE\u201d) hard disk, a redundant array of independent disks (\u201cRAID\u201d), a small computer system interface (\u201cSCSI\u201d) hard disk, and the like. Although DSU  is illustrated as internal to processing system , DSU  may be externally coupled to processing system . Communication link  may couple processing system  to a network such that processing system  may communicate over the network with one or more other computers. Communication link  may include a modem, an Ethernet card, a Gigabit Ethernet card, Universal Serial Bus (\u201cUSB\u201d) port, a wireless network interface card, a fiber optic interface, or the like.","It should be appreciated that various other elements of processing system  have been excluded from  and this discussion for the purposes of clarity. For example, processing system  may further include a graphics card, additional DSUs, other persistent data storage devices (e.g., tape drive), and the like. Chipset  may also include a system bus and various other data buses for interconnecting subcomponents, such as a memory controller hub and an input\/output (\u201cI\/O\u201d) controller hub, as well as, include data buses (e.g., peripheral component interconnect bus) for connecting peripheral devices to chipset . Correspondingly, processing system  may operate without one or more of the elements illustrated. For example, processing system  need not include DSU .","Reference throughout this specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of the phrases \u201cin one embodiment\u201d or \u201cin an embodiment\u201d in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","Process  explained above is described in terms of computer software and hardware. The techniques described may constitute machine-executable instructions embodied within a machine (e.g., computer) readable medium, that when executed by a machine will cause the machine to perform the operations described. The machine readable medium may include any of a variety of combinations of machine-accessible physical hardware storage media including, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs) such as dynamic RAM (DRAM), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus. Additionally, process  may be embodied within hardware, such as an application specific integrated circuit (\u201cASIC\u201d) or the like. The order in which some or all of the process blocks appear in process  should not be deemed limiting. Rather, one of ordinary skill in the art having the benefit of the present disclosure will understand that some of the process blocks may be executed in a variety of orders not illustrated.","The above description of illustrated embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. In some examples above, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring certain aspects. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize.","These modifications can be made to the invention in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification and the claims. Rather, the scope of the invention is to be determined entirely by the following claims, which are to be construed in accordance with established doctrines of claim interpretation."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Non-limiting and non-exhaustive embodiments of the invention are described with reference to the following figures, wherein like reference numerals refer to like parts throughout the various views unless otherwise specified.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
