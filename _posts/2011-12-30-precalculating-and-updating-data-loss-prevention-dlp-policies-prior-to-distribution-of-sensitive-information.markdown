---
title: Pre-calculating and updating data loss prevention (DLP) policies prior to distribution of sensitive information
abstract: A method and apparatus submitting information to be protected before permitting an outbound data transfer with the information is described. A DLP agent, incorporating a DLP submission tool, receives information of an outbound data transfer by the client computing system. The DLP agent can temporarily block the outbound data transfer and send a request to update a DLP policy to protect the information before permitting the outbound data transfer. The DLP agent subsequently receives receiving an indication that the DLP policy is updated to protect the information. After receiving the indication, the DLP agent permits the outbound data transfer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08990882&OS=08990882&RS=08990882
owner: Symantec Corporation
number: 08990882
owner_city: Mountain View
owner_country: US
publication_date: 20111230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PRESENT INVENTION"],"p":["Embodiments of the invention relate to the field of processing data, and more particularly, to data loss prevention of sensitive information.","A modern organization typically maintains a data storage system to store and deliver sensitive information concerning various significant business aspects of the organization. Sensitive information may include data on customers (or patients), contracts, deliveries, supplies, employees, manufacturing, or the like. In addition, sensitive information may include intellectual property (IP) of an organization such as software code developed by employees of the organization, documents describing inventions conceived by employees of the organization, etc.","Organizations invest significant efforts in installing DLP components, especially on important machines where confidential data is getting generated, but they may not be able to protect each computer in the enterprise, due to reasons like large number of different platforms or operating systems (OS), machine outages, quick and dynamic provisioning of virtual machines, no clear and individual accounting for test and lab machines. DLP technologies apply configurable rules to identify objects, such as files, that contain sensitive data and should not be found outside of a particular enterprise or specific set of host computers or storage devices. Even when these technologies are deployed, it is possible for sensitive objects to \u2018leak\u2019. Occasionally, leakage is deliberate and malicious, but often it is accidental too. For example, in today's global marketplace environment, a user of a computing system transmits data, knowingly or unknowingly, to a growing number of entities outside a computer network of an organization or enterprise. Previously, the number of entities were very limited, and within a very safe environment. For example, each person in an enterprise would just have a single desktop computer, and a limited number of software applications installed on the computer with predictable behavior. More recently, communications between entities may be complex and difficult for a human to monitor.","Conventional DLP systems typically use three methods to detect sensitive information in unstructured data (such as documents): 1) described content matching (e.g. regular expressions, keyword dictionaries); 2) fingerprinting; and 3) machine-learning based content classification. These methods are effective when the information to be protected is exactly known, or can be described exactly using regular expressions and\/or keyword dictionaries. Similar content has been used for training the machine-learning based classifier. These methods lose their effectiveness the moment there is new information which is sensitive but is not known to the DLP system a-priori. For example, in a software development firm new design documents are created frequently, and most of the time the content to be protected is completely new to the DLP system, which then is not able to identify the protected content. These methods do not perform a blanket identification of such design documents so that they may be protected from data loss. Similarly, pay statements are generated for each employee every month but they are all unique and unknown to the DLP systems. Currently such information is protected using described content matching techniques (e.g. regular expressions, keyword dictionaries) but their effectiveness is limited and they have a high rate of false positives.","There are conventional DLP products that allow classification of email messages by assigning TAGS (such as updating SMTP headers etc). In these products, the sender typically classifies the email message by attaching some TAG before sending it to others. For example, a CEO wants to send an internal and confidential email message to employees of an organization, but the content of the email message cannot leave the organization. However, using the conventional DLP products, an employees may not be able to forward this email message to their private mail account because of email filters detecting the TAG, but the employee may be able to still print out the email message, copy and paste the content into a document, and send the document outside of the organization as an attachment to circumvent the email filters. Thus, the TAGS can be lost or circumvented.","A method and apparatus for submitting information to be protected before permitting an outbound data transfer with the information is described. In one exemplary embodiment of a method, a DLP agent executing on a client computing system receives information of an outbound data transfer by the client computing system. The DLP agent can temporarily block the outbound data transfer and send a request to update a DLP policy to protect the information before permitting the outbound data transfer. The DLP agent subsequently receives receiving an indication that the DLP policy is updated to protect the information. After receiving the indication, the DLP agent permits the outbound data transfer.","In one embodiment, the DLP agent receives a submission from an email client plug-in executing in connection with an email application executing on the client computing system. The submission may include an email message with the information and the request to update the DLP policy to protect the information before permitting the email message. In another embodiment, the DLP agent receives a submission from a browser plug-in executing in connection with a browser application executing on the client computing system. The submission request may include a web transfer with the information and the request to update the DLP policy to protect the information before permitting the web transfer. In another embodiment, the DLP agent receives a submission via a user interface provided by the DLP agent. The submission may include a designation that the information of the outbound data transfer be protected by the DLP policy. The DLP agent can then create the request to be sent to a DLP system to update the DLP policy to protect the information. In another embodiment, the DLP user interface can be a custom user interface or any plug-in provided for third-party integration. For example, the user interface may be a plug-in for Microsoft Outlook, and the plug-in integrates with the Outlook user interface. Alternatively, the plug-in may be used with an internet application.","In one embodiment, the request includes the information of the outbound data transfer to be protected, category information associated with the information to be protected, and expiration information associated with the information to be protected. In another embodiment, the request includes instructions to a mail server to temporarily block email messages from an email account that satisfy one or more conditions, and instructions to the DLP system to update the DLP policy to protect the information before permitting the email messages from being routed to their destinations.","In yet a further embodiment, the DLP agent may receive a second indication that the request is rejected by an approval process on a server computing system. In one embodiment, the approval process can be a manual approval process via a user interface. In another embodiment, the approval process can be an automated process that uses rules configured on the DLP submission tool (server side). Alternatively, the approval process may be done in other ways as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure.","In addition, a computer readable storage medium for identifying information as protected information is described. An exemplary computer readable storage medium provides instructions, which when executed on a processing system causes the processing system to perform a method such as the exemplary methods discussed above.","Further, systems and apparatus of a DLP submission tool are described. An exemplary apparatus may include a memory and a processor coupled to the memory. The processor is configured to execute the DLP submission tool to perform various operations, such as those described above.","A method and apparatus for submitting information to be protected before permitting an outbound data transfer with the information is described. In the following description, numerous details are set forth. It will be apparent, however, to one of ordinary skill in the art having the benefit of this disclosure, that embodiments of the present invention may be practiced without these specific details.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","122","100","102","106","103","102","106","102","106","106","108","122","122","106","108","122","102","106","106","102"]},"The DLP system  may communicate with DLP agents . Although the embodiments may be used in a DLP system using DLP agents , the embodiments may also be used in other DLP components as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure. For example, in one embodiment, the DLP submission tool  is run on the client computing system . In another embodiment, the DLP submission tool  is run on the server computing system . Alternatively, some of the functionality of the DLP submission tool  is performed on the client computing system , while other functionality of the DLP submission tool  is performed on the server computing system . It should also be noted that the DLP submission tool  can be implemented in other configurations, such as within the DLP system . Also, the embodiments described herein may be used in other applications that can be used for performing DLP submission tool operations as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure.","In one embodiment, the DLP agent  monitors outbound data transfers by the client computing system . The DLP system  may communicate with DLP agents  on the client computing systems  to perform operations to enforce a DLP policy as described herein. The DLP agent  is configured to detect a violation of a DLP policy in the outbound data transfers. If the DLP agent  detects the violation, the DLP agent  may prevent the data transfer and may report the violation to the DLP system . For example, the DLP agent  may create an incident record of the violation, and may send the incident record to the DLP system , for example. The DLP system  is configured to receive the incident record of the violation from the DLP agent . In these embodiments, the DLP agent  creates the incident records. However, in other embodiments, any other DLP component may be used to detect a violation and create an incident, and it is not limited to using DLP agents on an endpoint, as described herein. It should also be noted that other systems than DLP systems can use the DLP submission tool  as part of enforcing the DLP policies.","In addition to monitoring the outbound data transfers, the DLP agent  may perform various methods of receiving submissions for updating the DLP policies, such as described below with respect to . The DLP agent  and the DLP system  may utilize various DLP techniques to detect violations. In one embodiment, the DLP system  has a policy manager  that can be used to define and manage policies . The policy manager  can receive input from an administrator via a user interface to define the DLP policies  that are stored in the remote data storage . In another embodiment, the policy manager  can receive submissions from the DLP submission tools  on one or more client computing systems . The DLP system  may use various DLP techniques for the DLP policies. In one embodiment, the DLP system  uses indexed document matching (IDM). In another embodiment, the DLP system  uses exact data matching (EDM). In other embodiments, the DLP system  may use content matching (e.g., e.g. regular expressions, keyword dictionaries), fingerprinting, or the like. In other embodiments, the DLP system  uses data change map (DCM), vector machine learning (VML), or other types of DLP techniques as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure. Using the DLP submission tools , the DLP system  can identify information that should be protected that has not been previously identified in the DLP policy or without a priori knowledge of the information. This allows the DLP agent  to protect information that has not been added to DLP policies yet or information that is not specifically identified as being protected by the DLP policies. Operations of the DLP submission tool  are described below with respect to .","Although only one server computing system  is illustrated in , the DLP system  may be hosed on one or more machines, including one or more server computers, client computers, gateways or other computing devices. In yet another configuration, the DLP service may reside on a single server, or on different servers, coupled to other devices via a public network (e.g., the Internet) or a private network (e.g., LAN). In one embodiment, the DLP system  is part of an organization's system referred to herein as entity. In another embodiment, a service provider hosts the DLP system . The hosted service provider may also have multiple instances of the DLP system  on multiple networks that communicate with the service provider over a public or private network. It should be noted that various other network configurations can be used including, for example, hosted configurations, distributed configurations, centralized configurations, etc.","The depicted client computing system , which may operate as an endpoint machine in an enterprise network that uses the DLP system  to enforce one or more DLP policies, includes a DLP agent  that communicates with the DLP system . The client computing system  may include applications , external device interfaces , and network interfaces  that can be monitored by the DLP agent  as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure. Alternatively, the DLP agent  can monitor other aspects of the client computing system  to monitor outbound data transfers. The client computing system  may also include a local data store , which can be one or more centralized data repositories that store the violation information, DLP policy information, and the like. The local data store  may represent a single or multiple data structures (databases, repositories, files, etc.) residing on one or more mass storage devices, such as magnetic or optical storage based disks, tapes or hard drives. Although illustrated as being local to the client computing system , the local data store  may be remote from the client computing system  and the client computing system  can communicate with the local data store  over a public or private network.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2A","b":["120","122","206","210","208","206","203","203","102","203","203","102","203","103","102"]},"The detection system  is configured to determine whether the data transfers  violate a DLP policy. The detection system  may use any one or more of the three methods to detect sensitive information as described above, such as 1) described content matching (e.g. regular expressions, keyword dictionaries); 2) fingerprinting; and 3) machine-learning based content classification. However, there may instances where the information to be protected is not known exactly, or cannot be described exactly using regular expressions and\/or keyword dictionaries. For example, there may be instances where there is new information which is sensitive but is not known to the DLP system a-priori. For the example given above, the software development firm new design documents are created frequently, and most of the time the content to be protected is completely new to the DLP system , which then is not able to identify the protected content. In one embodiment, the detection system  is configured to use the DLP submission tool  (client side) to submit information in the outbound data transfer  to be protected by the DLP policies  before distribution of the outbound data transfer . The DLP submission tool  may be used in connection with specific outbound data transfers . For example, an email client plug-in may send an email message as the outbound data transfer  and also send a submission request  together. In another embodiment, the DLP submission tool  may be used without being specifically tied to any one outbound data transfer .","In some embodiments, the DLP submission tool  may receive information from the outbound data transfer , as well as a submission request . The DLP submission tool  may communicate with the DLP submission tool  (server side) or the DLP system  to update the DLP policies with the information in the outbound data transfer. In one embodiment, the DLP submission tool  (client side) send a request to the DLP system  to update the policy to protect the information, and the DLP system  creates and updates the policies. In another embodiment, the DLP submission tool  creates the DLP policy or addition to an existing policy and sends the updated DLP policy to the DLP system  to be enforced within the organization. In another embodiment, the DLP submission tool  receives input from a user via a user interface to designate which information is to be protected, conditions for the protection, category information, expiration information, or other information that can be used to update the DLP policy to protect the information in the outbound data transfer. In other embodiments, the request may also contain information such as criticality of the data, action to be taken on data leak detection (e.g., block, allow, warn, ask user to allow or block or any such configured action). When the DLP system  updates the DLP policy, the DLP system  can send an indication back to the DLP submission tool  to indicate that the policy is updated. The DLP submission tool  may instruct the detection system  to allow the outbound data transfer. This assumes that the outbound data transfer  does not already violate other DLP policies. The DLP submission tool  can be used to identify information to be protected by the DLP policy. Further operations of the DLP submission tool  are described below with respect to .","The detection system  may also be used to detect the DLP policies and may perform some remedial or notification operation to help enforce the DLP policies. In some embodiments, when the detection system  considers the data transfer as insecure (e.g., detects a violation of the DLP policy), the detection system  can pause the data transfer and alert a user or an administrator. For example, the detection system  can generate an alert for a user to approve or deny the data transfer. Similarly, the alert can be provided to an administrator to approve or deny the data transfer.","In one embodiment, when the detection system  detects the violation, the violation reporter  creates an incident record of the violation, and sends the incident record to the DLP system  and\/or stores the incident record in the local data store . The violation reporter  can send the incident records as they are generated or periodically. Similarly, the violation reporter  can send multiple incident records to the DLP system  in batches or sequentially. If a violation is detection, the violation reporter  may notify a system administrator (e.g., send an email or update a log file) about the policy violation incident, and may send information about the policy violation incident to the DLP service provider (e.g., DLP system ). The information sent to the DLP service provider may identify, for example, the DLP policy being violated, the type of data being transferred, the destination entity specified to receive the data transfer, or other information concerning the violation, an identifier of the user or the client computing system  that caused the violation, as well as other information that may be helpful in remedying or recording the incidents.","In another embodiment, the DLP agent  includes a policy manager  that can be used to define DLP policies and store them in the policy data store . The policy may also be used to monitor and detect for other types of DLP violations. For example, the policy may also specify sensitive data that should trigger a DLP policy if detected in the outbound data transfers . The policy manager  may create DLP policies based on user input, such as from the user of the client computing system  or an administrator of an organization providing the client computing system . Alternatively, the policy manager  may receive DLP policies from a DLP service provider (e.g., DLP system ) and store them in the policy data store . The DLP system  may be configured to receive the incident record of the violation from the violation reporter , and may be configured to perform some remedial or reporting operation as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure.","It should be noted that the DLP system  may include other components for monitoring outbound data transfers  and detecting violations of the DLP policy, as well as other types of policies. Details regarding these other components have not been included so as to not obscure the description of the present embodiments.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2B","b":["252","254","254","252","256","256","254","258"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3A","FIG. 1","FIG. 1","FIGS. 1 and 2A","FIG. 2B"],"b":["300","300","102","300","106","300","122","300","102","106","300","300"]},"Referring to , processing logic begins method  by receiving information of an outbound data transfer by the client computing system (block ). The processing logic temporarily blocks the outbound data transfer (block ), and sends a request to a DLP system to update a DLP policy to protect the information before permitting the outbound data transfer (block ). The processing logic determines if there is an indication that the DLP policy has been updated (block ). If at block  no indication is received, the processing logic waits until an indication is received. When at block  the indication is received, the processing logic permits the outbound data transfer (block ).","In yet a further embodiment, the processing logic receives a submission from an email client plug-in executing in connection with an email application. The submission includes an email message with the information and the request to update the DLP policy to protect the information before permitting the email message. In another embodiment, the processing logic receives a submission from a browser plug-in executing in connection with a browser application. The submission request includes a web transfer with the information and the request to update the DLP policy to protect the information before permitting the web transfer.","In another embodiment, the processing logic receives a submission via a user interface provided by the DLP agent. The submission may include a designation that the information of the outbound data transfer be protected by the DLP policy. The processing logic then creates the request to send to the DLP system.","In one embodiment, the request includes the information of the outbound data transfer to be protected, category information associated with the information to be protected, and expiration information associated with the information to be protected. Alternatively, the request may include more or less information as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure. In another embodiment, the request includes instructions to a mail server to temporarily block email messages from an email account that satisfy one or more conditions. The conditions may be senders, recipients, content, subject line, or other conditions that can trigger the submission operations as described herein. This may be used to all a user to send the message, but before the email message is routed to its destination, the information can be submitted to the DLP system to update the DLP policies as described herein. The request may also include instructions to the DLP system to update the DLP policy to protect the information before permitting the email messages from being routed to their destinations.","In yet another embodiment, the processing logic receives a second indication that the request is rejected by an approval process on the server computing system. In one embodiment, the processing logic permits the outbound data transfer upon receiving the second indication. For example, the request may be rejected because the outbound data transfer is determined to not include protected information. Alternatively, the second indication may be used to trigger other operations as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure.","In other embodiments, the processing logic can be configured to pre-calculate and update DLP policies prior to distribution of sensitive documents, such as web documents, web transfers, documents, attachments, web postings, or other outbound data transfers. The processing logic can be implemented in a plug-in to another application, such as an email client plug-in. For example, a CEO of a company can use the email plug-in to designate an email message as having information to be protected. When designating the email message as having information to be protected, the processing logic can submit a request that this information be updated in the DLP policies. For example, the DLP system may use DCM, EDM, IDM, VML, or any combination thereof, in the DLP policies. The processing logic submits the request with a submission of information. The DLP system can create a new policy or update an existing policy to protect the designated information. As described herein, conventional DLP products can perform content analysis but cannot guarantee classification of this recent information as being protected due to its recent creation, for example. The DLP technologies, such as DCM, EDM, IDM, and VML can help detect for protected information, but can only successfully detect the protected information when the DLP technologies have the information beforehand. The embodiments described herein allow one or more user to help in defining the comprehensive DLP policies by submitting information as it is created. For example, an organization may provide this ability to executive level employees to all them to designate the information as protected when it is being created.","In other embodiments, the processing logic can provide an interface to accept samples of protected information, such as confidential information. For end users, the processing logic can provide options to submit samples by various means. In one embodiment, the user interface can be integrated with mail clients. In this embodiment, the email message may be temporarily blocked until the plug-in receives an indication that the DLP policy has been updated with the information in the email massage. In another embodiment, an interface can be integrated with a mail server, and can be used for automatic handling of email message and documents based on the user inputs, such as the conditions described above. For example, once the DLP policy is updated, the email server can route the email messages to their respective destinations. In another embodiment, the processing logic updates the policies, with the submitted samples and updates the policies with enforcement points. For example, once the DLP policy has been updated, the DLP system can ensure that the update policies are provided to the DLP agents or other DLP products within an organization. In one embodiment, the IDM profiles may be updated with the submitted samples. Unlike email technologies that use tags to mark email messages as having protected information, the embodiments described herein update the DLP policies so that the information can be protected for all types of outbound transfers, not just email messages. As such, a person receiving the email message having the protected information could not cut and paste the information into a new message, or save into a document and transfer the document, and may be even be able to print the information or transfer to a USB drive because the DLP policies have been updated to protect the information. It should be noted that other workflows can be introduced if approval of the submissions are necessary. For example, once a user has submitted samples, the DLP system may allow an administrator to examine the samples and may accept the sample or may reject the sample. The administrator may reject the submission if it is a poor or false sample. Once the administrator has approved the submission, the submitted sample may be incorporated into one or more policies, such as VML, IDM, or DCM. The DLP system can also send notification to the submitted that it has been approved. In some cases, the notification can be sent to a mail client or other application to trigger one or more additional operations, such as allowing the outbound data transfer, or routing an email to its destination.","In one embodiment, the processing logic accepts sample documents or contents of an outbound data transfer from one or more users at one or more end points. In one embodiment, the user submits a sample with the following: the document, category information, and expiration information. The processing logic may return a key to the user at the end point. The key may be used for querying a status of a submission. For example, when queried, the processing logic may return a status that the submission is under evaluation, incorporated into the DLP policy, pending, granted, or the like. These operations may be implemented in application programming interfaces (APIs) to allow for 3party integration. For example, the APIs can be integrated into share-point servers, mail clients, windows explorer, a third-party application with plug-in support, or the like.","In another embodiment, the processing logic can be used as a sample submission portal that is a user interface based client that can internally implement the programmable interfaces. For example, these portals can be implemented on end points within an organization.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3B","FIG. 1","FIG. 1","FIGS. 1 and 2A","FIG. 2B","FIG. 2B"],"b":["350","350","102","300","106","300","122","300","102","106","300","300"]},"Referring to , processing logic begins method  by accepting a sample from an end user (block ). The processing logic determines if approval is required for the submitted sample (block ). If not, the processing logic updates the DLP policy with the new sample (block ), and notifies the end user that the sample has been accepted (block ), and the method  ends. However, if approval is required at block , the processing logic sends the submitted sample for approval (block ), and the processing logic determines if the sample is approved after evaluation (block ). If the sample is approved, the processing logic updates the DLP policy with the new sample (block ), and notifies the end user that the sample has been accepted (block ), and the method  ends. However, if the sample is not approved at block , the processing logic can notify the end user that the sample was rejected (block ), and the method  ends. Alternatively, other approval processes may be used as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIG. 3A"],"b":["400","300"]},"The exemplary computing system  includes a processor , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device , which communicate with each other via a bus .","Processor  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processor  may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processor  is configured to execute the processing logic for DLP submission tool  for performing the operations and steps discussed herein.","The computing system  may further include a network interface device . The computing system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The data storage device  may include a computer-readable medium  on which is stored one or more sets of instructions (e.g., DLP submission tool ) embodying any one or more of the methodologies or functions described herein. The DLP submission tool  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computing system , the main memory , and the processor  also constituting computer-readable media. The DLP submission tool  may further be transmitted or received over a network  via the network interface device .","While the computer-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201ccomputer-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201ccomputer-readable storage medium\u201d shall also be taken to include any medium that is capable of storing a set of instructions for execution by the machine and that causes the machine to perform any one or more of the methodologies of the present embodiments. The term \u201ccomputer-readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical media, magnetic media, or other types of mediums for storing the instructions. The term \u201ccomputer-readable transmission medium\u201d shall be taken to include any medium that is capable of transmitting a set of instructions for execution by the machine to cause the machine to perform any one or more of the methodologies of the present embodiments.","The DLP submission module , components, and other features described herein (for example in relation to ) can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS, FPGAs, DSPs, or similar devices. The DLP submission module  may implement operations of DLP submission tool as described herein with respect to . In addition, the DLP submission module  can be implemented as firmware or functional circuitry within hardware devices. Further, the DLP submission module  can be implemented in any combination hardware devices and software components.","In the above description, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention. Some portions of the description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201creceiving\u201d, \u201cstoring\u201d, \u201cmonitoring\u201d, \u201ccreating\u201d, \u201cgenerating\u201d, \u201csending\u201d, \u201cintercepting,\u201d \u201ccapturing,\u201d \u201cmapping\u201d, \u201cgenerating,\u201d or the like, refer to the actions and processes of a computing system, or similar electronic computing system that manipulates and transforms data represented as physical (e.g., electronic) quantities within the computing system's registers and memories into other data similarly represented as physical quantities within the computing system's memories or registers or other such information storage, transmission or display devices.","Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. As discussed above, such a computer program may be stored in a computer readable medium.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","It is to be understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention, which, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2A","b":["120","122"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
