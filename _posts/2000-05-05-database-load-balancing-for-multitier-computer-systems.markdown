---
title: Database load balancing for multi-tier computer systems
abstract: A load balancing method and system for a transaction computer system having multiple database servers for at least one database, wherein database servers cooperate to provide a unified view of the data in the database. The method includes the steps of establishing connections to said multiple database servers for communicating with said database servers; and assigning transactions to respective ones of said multiple database servers to balance respective loads of said multiple database servers. Assigning each new transaction includes the steps of determining possible assignments of that new transaction to one or more of said multiple database servers, each said possible assignment to one of said multiple database servers being based on a load balancing scheme to balance respective loads of said multiple database servers; and assigning that new transaction to one of said multiple database servers as a function of said possible assignments of that new transaction, to balance respective loads of said multiple database servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06950848&OS=06950848&RS=06950848
owner: 
number: 06950848
owner_city: 
owner_country: 
publication_date: 20000505
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to database systems, and in particular to load balancing for database systems.","Database systems are utilized in many aspects of data processing systems, including in networked computer systems such as the Internet and the World Wide Web (WWW) which have grown to a robust infrastructure for handling mission-critical business traffic. As the result, commerce on the Internet is growing exponentially with the increasing number of Web sites (servers) and Internet users using client workstations (client). To support this growth, Web sites (implemented on Web and database servers) must be able to set up and maintain a few million connections every second. Further, quick response time and continuous availability are mandatory requirements as Web sites compete to offer users the best on-line experience.","Conventional networked computer infrastructure for businesses (e.g., over the Internet and WWW), utilizes a multi-tier client-server architecture. Client-server architecture provides multiple clients with access to the same data via servers. In its most basic form, a two-tier model is a client-server model in which a client communicates with a server across a network to request remote services. For example, a retail user can point a browser on a personal computer to Web site of an online bookstore to request information about a book title. The request in turn is routed to a centralized Web server through the network, and the Web server in turn communicates with a database engine\/server to return the requested information to the retail user. The centralized server can communicate with a number of clients simultaneously.","In the two-tier architecture, one server is responsible for offering both Web and database contents. A two-tier architecture provides multiple clients with a uniform presentation layer that communicates with a centralized data storage layer. The presentation layer is generally the client and the data storage layer is the server. A disadvantage of the two-tier architecture is that it is not capable of adapting to changing environments and scaling with growing user and data volume and traffic. This is because each client carries the presentation logic and a part of business logic while the server carries the other part of business logic as well as the required resources such as the web and database servers.","The scalability and changing environment issues in a two-tier architecture have been addressed to a certain degree by extending the two tiers to three. A three-tier architecture isolates the data processing in a central location that can be easily changed without impacting the clients. In a three-tier architecture, the presentation logic resides in the first (client) tier, the business logic in the middle tier, and other resources such as database reside in the back-end third tier. The middle tier of a three-tier architecture (usually the application server) handles data processing and plays the role of the interface between the front-end tier (client) and the back-end tier (database).","The middle tier is the primary interface that directly interacts with the clients located in the first tier and hides all of the functional details of the back-end tier from the clients. In an example three-tier architecture, the middle tier comprises a Web server that interacts with the client web browsers, and the back-end tier comprises a database engine that interacts only with the Web server. However, a major disadvantage of such a system is that a relatively large number of clients in the first tier simultaneously requesting remote services can gradually create a bottleneck in the second and third tiers. This degrades system availability and performance.","To alleviate this problem, some there-tier architectures have created a multi-tier architecture that expands the middle tier layer into multi-layer architecture, wherein a single Web server is replaced with multiple Web servers to increase performance of the middle tier while keeping the functionality transparent from the first layer clients. Though the performance shortcomings of the middle layer tier are somewhat alleviated, the back-end database tier continues to suffer substantially from lack of load-balancing, lack of scalability and performance enhancements, thereby negatively impacting the availability and scalability of the entire multi-tier system.","There, is therefore, a need for an implementation-independent method for the back-end database tier that provides database load balancing. There is also a need for scalable computer system comprising networked client and server computers using load balancing that maximizes server efficiency, such as in database management servers. There is also a need for a method and system that can scale server capacity dynamically to match aggregate client demand while ensuring continuous service availability network computing systems.","The present invention alleviates the shortcomings of conventional systems. In one embodiment, the present invention provides implementation independent database load balancing for a scalable computer system comprising networked client and server computers, to maximize server efficiency. Dynamic load balancing optimizes the resource utilization to reduce server response times, such as in database management systems.","In one aspect the present invention provides a load balancing method and system for a transaction computer system having multiple database servers for at least one database. The method includes the steps of establishing connections to said multiple database servers for communicating with said database servers, the database servers having a unified view of the data in the database; and assigning transactions to respective ones of said multiple database servers to balance respective loads of said multiple database servers. Assigning each new transaction includes the steps of determining possible assignments of that new transaction to one or more of said multiple database servers, each said possible assignment to one of said multiple database servers being based on a load balancing scheme to balance respective loads of said multiple database servers; and assigning that new transaction to one of said multiple database servers as a function of said possible assignments of that new transaction, to balance respective loads of said multiple database servers.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1A","b":["10","12","14","1","2","3","4","16","18","20","22","16","12","20","16","14","12","20","14"]},"In the example three-tier architecture , each server  in the middle tier  comprises a Web server (e.g., WS, WS, WS) that interact with Web browsers running on clients . The database system  in the back-end tier  comprises multiple database management servers (e.g., DBMS, DBMS)  and on or more databases  (e.g., data repositories), wherein the database system  interacts with the Web servers . The middle tier  can further include a control module (CM)  for the web servers , wherein the clients  using browsers communicate with the control module  which forwards each client's request\/transaction to an appropriate web server . The control module  is functionality transparent to the clients , and as far as the clients  are concerned the control module  is a web server itself. Each of the web servers , communicates with the database system  to e.g. send a transaction such as a query from a client  to the database system , receive a result back from the database system , and forward the results back to the client . By example, a database server\/engine (DBMS)  can comprise software running on a computer to enable a user to create, maintain, and manage electronic databases. A database server acts as a broker between the physical database  storing data and the users (e.g., clients ) of the database .","As shown in , in one embodiment, a front-end tier client  comprises a browser  (e.g., Netscape\u2122 browser) running on an operating system  (e.g., Windows 98\u2122 operating system) on a hardware platform  (e.g., Intel\u2122 hardware platform computer system including CPU, memory, storage device, ROM, and communication interface). The browser  includes a Java Virtual Machine (JVM)  for running Applets . Each server  in the middle tier , and each database server  in the back-end tier , in  can comprise a complete server platform  shown in , wherein the server platform  includes server hardware  such as an Intel based computer system, operating system  such as Linux\u2122, Solaris, etc. for running application server software  such as Apache. The application server  can include JVM  and servlets  as an extension, or can be built from the ground up on servlets.","Referring back to , the database servers  have the same logical (unified) view of data in the database . In one example, the database servers  cooperate to create a unified view of data on shared or mirrored database(s) .","The computer system  further comprises a transparent back-end functional layer (FL) module  providing interface between the web-servers  and the multiple database servers . The FL module  is independent of the database server and database implementation, and only requires that the database servers  have a unified view of database data. As such, the FL module  can be utilized in conjunction with different database servers .","The FL module  dynamically distributes client transactions (requests) via the Web servers  across the multiple database servers  using connections to the database servers , while appearing as a single database server to the Web servers . The FL module  hence hides the implementation of database system  from the Web servers . As a result, the multiple database servers  appear as one database server to the web servers . In one embodiment, the FL module  includes a database load-balancing (LB) module  for assigning transactions to respective ones of the multiple database servers  to balance respective loads of the multiple database servers . The LB module  allows incoming transaction traffic to be distributed efficiently, providing greater economies of scale and fault tolerance.","In one embodiment, the LB module  monitors the state of the respective multiple database servers  and selectively routes transactions to the database servers  to optimize performance and availability. The LB module  ensures that transactions are routed to e.g. most available database servers (nodes) , providing predictable quality of service. The LB module  provides high performance and high scalability, and thereby eliminates the database back-end bottleneck for multi-tier computer systems such as utilized in business environments using Internet and WWW. Further, as described below, in one version the LB module  can include dual active\u2014active or active-passive load balancing models, thereby eliminating single point of failure on the LB module.","To perform database load balancing, in one embodiment, the LB module  comprises one or more load balancing schemes\/methods\/processes for assigning incoming transactions to said multiple database servers . The load balancing schemes can include e.g.: (1) Round Robin; (2) Ratio, wherein weighting factors are assigned to each database server; (3) Least Number of Connections (LNC), wherein a database server with the least number of connections is selected; (4) Fastest Response Time (FRT), wherein the database server with the fastest measured response time is selected; (5) Observed, a combination of LNC and FRT; and Predictive, wherein the database server with an observed improving performance is selected. Other load-balancing schemes are possible and can be utilized. The LB module  can utilize one of, or a weighted sum of two or more of, the above load balancing schemes with manually or adaptively adjustable weighting functions (factors) to assign incoming client requests from web servers  to the respective ones of the multiple database servers  to balance the load of the database servers .","The LB module  selects a database server  to assign a client  request (transaction) from a web server  thereto, and passes the request from the web server  to the selected database server . The LB module  then receives a result from the selected database server , and sends the result back to the web server  to pass on to the client . As such, preferably the database load-balancing module  is transparent to the web servers  and the clients .","In a conventional multi-tier environment based on WWW, a request for information residing in a database is generated from a client web browser. The client browser then sends a request to the web server residing in the middle tier. In one example, some requests ask for static content of a page and are handled directly by the web server. Other requests ask for dynamic content (e.g., video\/audio streaming) and are handled by programs (e.g., MP3) running remotely or locally in relation to the web server. A request can be in the form of an HTTP request asking for information stored in a database (e.g., about a book title). The web server translates the request into an SQL query, and sends the request to, and receives response from, the database server (e.g., dynamic content in e-commerce applications).","In one version, the web server located in the middle tier receives the request and handles the processing through the use of Common Gateway Interface (CGI) to create dynamic content. With CGI, the web server passes the request to the external data source, namely database server, in the back-end tier, and the web server receives the result from the database server and passes it to the client. There is a limit on the number of concurrent requests a database server can handle because the database server must create a new process every time the database server receives a new request. A CGI program also cannot interact with the web server and take advantage of its capabilities directly once it begins execution because it is running in a separate process.","According to the present invention, to alleviate the above problems, in one embodiment the LB module  comprises a process to service multiple requests by e.g. multi-threading and interprocess communication. Multi-threading is an extension of time sharing in computer systems that provide impression of performing several processes simultaneously by running each process for a short period of time, then saving its state and switching to the next process and so on. Threads extend the concept from switching among several processes (different programs) to switching between several different functions executing simultaneously within a single process. Multi-threading provides more efficient utilization of computer resources such as controlling and responding to GUIs, performing file I\/O, perform computation, all in the same process (program). Server part of a client\/server model can be efficiently implements in the form of a multi-threaded program (process). For example, instead of starting a new program (process) with each new client  request, the LB module  spawns a new thread within the same program to handle the request and hence achieves better resource management (descibed further in relation to ).","Further the LB module  utilizes at least one interface for connecting to, and communication with, the database servers . In one version, the LB module  is implemented to transparently communicate with the middle-tier web servers  and the back-end tier database servers . The LB module  is implemented as object-oriented software that can be easily plugged into web browsers  and be used for building web-based applications and Graphical User Interfaces (GUIs) along with built in database access methods, security, and networking support. The LB module software can execute on several different computer systems by layering libraries on top of any operating system, and provides a robust method of integrating incompatible computer systems within the framework of e.g. reusable component software, thin client-server software, network programming, secure browser-based software, threaded multimedia code, etc. For the server side, the LB module software uses servlet technology to make low level details of programming tasks such as raw sockets into a more productive application level, and provides a standard generic and portable mechanism for efficiently developing modular server side applications such as generating dynamic web content.","Java\u2122 technology by Sun Microsystems\u2122 and servlet application programming interface (API) provides an example implementation platform for the LB software, to transparently communicate with the middle-tier web servers  and the back-end tier database servers . The LB module  utilizes Java-based servlet technology to implement a process to service multiple requests using multi-threading in Java. Any technology component that can interact with functionality such as provided by Java-based servlet technology directly or indirectly is capable of utilizing the LB module  of the present invention. A database load balancing module  according to the present invention provides an independent layer between the middle and back-end tiers  and , respectively. Functionality such as provided by e.g. servlet chaining and interservlet communication are utilized to handle a client request through a sequence of servlets as discussed.","In one version, servlets include modules that extend request\/response-oriented servers, such as Java-enabled web servers. For example, a servlet can take data in an HTML order-entry form and apply business logic used to update an order database. Servlets can be embedded in many different servers because the servlet API (used to write servlets), assumes nothing about the server's environment or protocol. Servlets effectively replace Common Gateway Interface (CGI) scripts. Servlets also resolve server-side programming with platform-specific APIs (they are developed with the Java Servlet API, a standard Java extension).","Although servlets are most widely used within HTTP servers and can be used to handle HTTP client requests, servlets can be deployed in conjunction with any existing server including database servers. For example, servlets process data posted over HTTP requests using an HTML form, including business data. Servlets can also be used to solely create the infrastructure of an application server rather than as an extension to the existing server. A servlet can handle multiple requests concurrently, and can synchronize requests. Servlets can forward requests to other servers and servlets. Thus servlets can be used to balance load among several servers that mirror the same content or have a unified logical view of the same content. In addition servlets can partition a single logical service over several servers, according to task type or organizational boundaries, independent of the specific implementation of the technology.","Referring back to , each web server  translates an HTTP request sent from a client  web browser  in the front-end tier , to an SQL query (transaction\/request). The LB module  establishes connection with the database servers  for transaction communication between the web-servers  and database servers  such that the LB module  functions independent of the choice of database servers and databases. The database servers  have a unified data view of data the database . In one example, said connections between the LB module  and the database servers  are established using a database server connection interface such as e.g. the database connectivity API of Java technology (Java DataBase Connectivity\u2122 (JDBC) from Sun Microsystems). JDBC comprises a portable database connectivity tool that provides universal interface into SQL databases. The connection interface can hence be used among a number of different SQL database servers  (e.g., Oracle, Sybase, Informix, MS-SQL, MySQL, mSQL, etc.). The connection interface can be deployed to build applications that can be equally run on any different database. Any other database connectivity means that provides unified interface into the database servers  can be equally utilized. The SQL query is gradually processed by a back-end tier database servers  accessed via JDBC. The LB module  can interact with a variety of different database servers  that provide a unified view of database data. For example, a low cost freeware database management systems (DBMS) such as MySQL originally implemented by TcX or mSQL originally implemented by David Hughes can be utilized.","The communication protocol between the database LB module  and the web servers can comprise, for example, Remote Method Invocation (RMI), Remote Procedure Call (RPC), Common Object Request Broker Architecture (CORBA), or other remote communication methods. In Java-based environments, RMI is the communication scheme between web servers and the LB module .","As described below by way example in conjunction with , the communication model between the database LB module  and the database servers  utilize connection interfaces such as e.g., JDBC API and an optimized transaction processing method such as a servlet pool with multiple instances and direct connections to the database servers . Alternatively, the transaction processing method can utilize database pooling with a single servlet instance and multiple connections to the database servers.","Referring to , in one version, the database LB module  utilizes servlet chaining and interservlet communication to provide the database load-balancing and database connectivity. Interservlet communication model comprises an internal communication scheme among multiple servlets in which e.g. a first servlet passes the result locally to the second servlet. Servlet chaining and interservlet communication include a process in which a number of servlets cooperate to impact the content of a request from a requester in a specified sequence. Each servlet in a chain\/sequence processes and passes its output to the next servlet. The last servlet in the chain sends the result back to the requester which in turn can be another server. The servlets rely on an interservlet communication model (servlet collaboration) in which cooperating servlets share information through the use of systems properties list, a shared object, or inheritance. In one embodiment, the request (transaction) from a client  is sent to a web server  which forwards the request to the LB module  in sequence. The LB module  selects a database server using load-balancing schemes, and routes the request to the selected database server. Upon receiving a result from the selected database server , the LB module  sends the result back to the web server  which in turn forwards the result to the client .","The LB module  includes a chain of servlets comprising a database load balancing servlet (LB servlet)  and database connectivity servlet (DB servlet) , as well as remote communication models (e.g., RMI) with the web servers . The LB module  receives a request from a web server  via the use of RMI or some other communication scheme. The LB servlet  assigns an arriving request\/transaction to a database server  according to a load balancing scheme, or a weighted combination of two or more load-balancing schemes. Each load-balancing scheme identifies a potential\/candidate database server for assigning the arriving transaction thereto, based on the previous load history of the database server. The previous load history of the database server is determined as function of a number of previous assignment iterations. Weighting factors can be appropriately adjusted to have a maximum or minimum impact from a desired load-balancing scheme in final selection of a database server by the load-balancing servlet to process the request.","The selection result of the LB servlet  is then passed to the DB servlet  through a servlet chain. A servlet chain includes a sequence of servlets that cooperate to create content in a process. The arriving request is sent to the first servlet in the chain. The response from the last servlet in the chain is returned. In between, the output from each servlet is passed as input to the next servlet. Cooperating servlets may rely on three types of interservlet communication models: (1) servlet manipulation, wherein one servlet directly invokes the methods of the other servlet, (2) servlet reuse, wherein one servlet uses another's abilities for its own purposes, or (3) servlet collaboration, wherein cooperating servlets share information through the use of system properties, a shared object, or inheritance. Servlet collaboration is the most common interservlet communication model.","In one version, the DB servlet  includes a servlet pool  of servlet instance (connections)  to the database servers  using a connection interface . The DB servlet  establishes a connection (or uses an existing connection) to the selected database server , sends the request to the selected database server  for processing, receives the request result back from the selected database server , and sends the result back to the requesting web server . In one version, the interface connections comprise JDBC connections. As discussed, JDBC is a Java API and hence is considered a software connection. JDBC relies on low a level socket communication model to communicate with a database. The Java software package relies on Java Virtual Machine (JVM) as the compiler. Ports of JVM exist for different operating systems running on different hardware (e.g., Solaris operating system on Sparc Sun Microsystems hardware platform or Linux operating system on Pentium Intel hardware platform).","The architectural block diagram in  also provides a servlet interaction model in the LB module  for a Java implementation of the LB module  on a multi-tier architecture. Database systems can achieve redundancy and clustering in two ways: (1) relying on mirroring wherein different physical databases have the identical contents, and a synchronization mechanism is used to ensure the mirroring operation (e.g., Informix); and (2) relying on a shared storage among multiple DBMS', wherein mirroring is not utilized because multiple DBMS' rely on the same physical database (e.g., Oracle).","The architecture in  utilizes remote servlet communication and servlet chaining\/interservlet communication techniques. Each web server  is a stand-alone server that may or may not rely on a server-side utility such as Java servlets or CGI scripts. The LB module  comprises an independent server utilizing Java-based server-side utility in the form of a servlet chain. Each web server  remotely communicates with the LB module . As specified, the communication can utilize any communication protocol such as RPC, CORBA, or RMI. In , the employed communication tool is Remote Method Invocation (RMI). The web servers  translate an HTTP request (transaction) to an SQL query and send it to the LB module  via the remote communication protocol.","The LB servlet  receives the SQL request, and selects a database server according based on one or more load balancing schemes. The LB servlet  then passes the request along with the identification of the selected database server to the DB servlet . The DB servlet  uses the JDBC connection pool  to communicate with the selected database server, and sends the SQL query to the selected database server. The DB servlet  then receives a result back from the selected database server, and forwards the result to the requesting web server  (requester). The DB servlet  utilizes optimized transaction processing using a servlet pool  including a number of servlet instances  with direct connections to the database servers .","As shown in , alternatively the DB servlet  can include a servlet instance  attached to a connection pool  having a number of direct connections  to the database servers . The DB servlet  includes a set of connections  to the database servers  and selects a connection from that set to the selected database server. Another example replaces RMI with CORBA, the LB and DB servlets with multiple CGI processes, and the JDBC connections with native DBMS connections. The database servers  have unified views of the data in the database by e.g. either utilizing mirroring or shared DB disk farm. The DB servlet  in  only instantiates a single servlet object  that can use multiple instantiated connection objects  to different database servers  whereas the DB servlet  in  instantiates multiple servlet objects  each of them carrying a single connection to one of the database servers .","Referring to , in another embodiment, each LB module  includes one LB servlet  and one or more DB servlets  (i.e., a one-to-many relationship between one LB servlet and several DB servlets). The LB servlet  provides the load balancing function for each database implementation using a DB servlet  for that database implementation. All of the connections  in each DB servlet  connection pool  are exclusively used for a specific database implementation. As shown in  in another embodiment, the LB servlet  communicates with each DB servlet  that includes one or more connections  to one or more database servers . The DB servlet  that has connections to all of DB servers with the same implementation is dedicated to the corresponding LB servlet  and cannot be shared with another LB servlet of another LB module (this holds true even in the case of dual LB turnkey LB modules\/servers).","In , the database load balancing function according to the present invention applies to two or more database servers  with the same implementation. The LB module  operates with one or more sets of database servers  at the same time. For example, the LB module  can operate with a set of two MySQL database servers and another set of two Oracle database servers simultaneously, wherein the database load balancing function in each set of database servers is separate from the other set of database servers. As such, the transaction\/request load is balanced against the database servers belonging to the same set with same implementations and is independent from the other sets of database servers. The LB module  utilizes connections according to one or more interfaces  (e.g., JDBC) with each set of database servers, for communication with the database servers. The LB module  and the database servers in each set of database servers utilize the same connection interface (e.g., JDBC).","As such in , one LB servlet  works with multiple DB servlets  inside one LB module . The LB module  includes on LB servlet  and multiple DB servlets  each connected to a set of database servers . Each DB servlet  is connected to a number of database servers , and each set of database servers can have a different implementation. For example a first DB servlet  can work with MySQL database servers using JDBC, while a second DB servlet  can work with Oracle database servers using an interface  for connection. The same LB servlet  inside LB module  can manage different database load balancing tasks for different sets of DB servlets  database servers .","In one version, the load-balancing module  comprises servlets supported by e.g. an Apache\u2122 server, Sun Microsystem\u2122 Java Web Server, Netscape Enterprise server, Lotus's Domino Go Web Server, and IBM's WebSphere Server, and running on operating systems such as e.g. Linux, FreeBSD Unix platform, Sun Solaris, IBM AIX, HP HP-UX, SGI IRIX, etc. The choice of above operating systems and servers are optional and implementation specific. For example, another choice includes creating a specific load-balancing application server using merely servlet technology. The application server can run on Linux Operating System (OS) and Intel hardware platform.","The LB module  can be implemented for any server supporting functionality of Java servlets and running on any operating system. In the example implementation herein, the LB module  utilizes servlet chaining and interservlet communication techniques to handle a client request through a sequence of servlets. The LB module  functions independent of the choice of database servers  and databases , wherein the database servers  have a unified data view of data in the databases . Further, for example a user friendly Java-based Graphical User Interface (GUI) using e.g. the Swing API of Java of Sun Microsystems, Visual Basic or Visual C++ from Microsoft, or freeware Tk\/Tcl for Solaris, can be used to configure, setup, and manage the LB module. The GUI can also provide choice of load balancing schemes and weighting factors used by the LB module .","Referring to , an example data flow diagram shows example logical flow of data (e.g., requests\/transactions) through a multi-tier client-server computer system  of , implementing the present invention. A user points the browser  from a remote client  across a wide or metropolitan area to a web server  co-located with, or remotely located against, other components of the e-commerce model including database servers, database storage, and database load balancing units. In one example, a user at a client  uses a web browser  to establish a connection II with a web server , using an HTTP address to request information stored in a database about an item. The middle tier  includes two control modules (CM)  with a heartbeat interface III therebetween. The control modules  provide a dual web HTTP routing model. The two control modules  provide redundancy in the form of an active control module and a passive control module, wherein when an active control module fails, the passive control module becomes active for routing transactions to the web servers . The status of an active control module is monitored by the passive control module via the heartbeat interface III. The heartbeat interface III can comprise a simple dedicated 10baseT Ethernet interface sending frequent ping requests between the two control modules .","The active control module  routes the HTTP request to a selected one of e.g. two web servers , using one of the data paths IV and V. The selected web server  parses the HTTP request and translates it to a standard SQL request. The web server  then send sends the request to the LB module .","In conventional multi-tier models the web servers  are directly connected to a database server and send their database inquiries to that single database server. A major disadvantage of such a method is that it can easily create a bottleneck from the database server under heavy load. However, according to one embodiment of the present invention, a load balancing layer  balances the load against multiple database servers  to prevent bottlenecks. The load balancing layer  hides the remaining underlying layers from the web servers  which view the database load-balancing layer  as a database server.","In this version, the load balancing layer  includes two database LB modules  described above, wherein at any given time, one LB module  is active and the other LB module  is passive. Data paths VI and VII show connections between individual web servers  and the active database LB module . The active LB module  balances the load against the multiple database servers , and the passive LB module  becomes active as the result of failure of the active LB module . A heartbeat interface IIX between the two database LB modules is utilizes, wherein the status of the active database LB module  can be monitored using the heartbeat interface IIX. The heartbeat interface IIX can comprise e.g. a dedicated 10baseT Ethernet interface sending frequent ping requests between the two LB modules . Further, each load balancing module can include the combination of load balancing schemes and heartbeat interface.","The active database LB module  accepts an SQL request from one of the web servers , selects a database server  among the multiple database servers (e.g., using one or more load-balancing schemes), and sends the SQL request to the selected database server . Data paths IX and X show the connections between the database LB modules and the database servers . The SQL request is sent to databases , wherein the physical databases can comprise storage modules in the form of e.g. centralized back-end storage repository shared among the database servers or mirrored segments with a unified view among the database servers  (DBMS). . shows the unified view wherein databases  show mirroring. For a shared disk, the database server  are connected to one database  with shared disk farm. Data paths XI and XII show the connections among the database servers  and the databases  (storage modules). Once the SQL request is processed by a database  storing the requested item information, and a result is sent back to the client  traversing the reverse path and translation.","In one version, the database LB module  performs availability analysis to determine assignment (routing) of incoming request\/transaction traffic to balance respective loads of the database servers , and enhance availability of the multi-tier system . Factors that impact availability of a multi-tier system include:","(1) Server failure, wherein the server becomes unavailable due to a hardware or operating system failure.","(2) Software failure, wherein individual applications can hang or stop responding even though other applications are healthy.","(3) Content failure, wherein the server and application are working properly but are responding to requests with a response that does not contain the right content.","(4) Heavy traffic load, wherein servers have a well-defined response curve in relation to load and as traffic increases each server responds to requests promptly until the server reaches a point at which it stops responding to any request (i.e., the server is either on or it is off).","The method is equally applicable to three or more nodes. Each load-balancing scheme  in the LB module  performs a switching operation among a number of nodes (e.g., nodes A and B) to assign the current iteration load (request\/transaction) to the node with the best-predicted performance according to a load history based on load measurement in one or more previous iterations represented by f[A(n)] and f[B(n)], wherein f[A(n)] represents selection of node A in each of one or more previous iterations and n>0 specifies the number of previous iterations (load history). Similarly, f[B(n)] represents selection of node B in each of one or more previous iterations and n>0 specifies the number of previous iterations (load history). Using prior load histories for nodes A and B, a switching logic  including a load balancing scheme determines which of the two nodes A or B is selected for iteration k to be active by operating on a logical switch, wherein if node A is selected then A(k)=X(k) and B(k)=0, and if node B is selected, then A(k)=0, and B(k)=X(k).","The LB module  employs database load-balancing schemes  to create scalable back-end architecture. As discussed, in one version of the LB module  database load balancing schemes  therein can be selected from Round Robin, Ratio, LNC, Fastest Response Time (FRT), Observed (OBS), or Predictive (PRD). Other load-balancing schemes can be utilized and are contemplated by the present invention.","Round Robin (RR): Referring to the example flowchart of , the RR load balancing scheme treats all of the nodes the same way and assigns the load in a round robin fashion. In the current iteration k, the assignment to node A in iteration (k-1) is determined (step ), and the assignment to node B in iteration (k-1) is determined (step ). Then; the current request in iteration k is assigned to one of the nodes A and B that a request was not assigned to in iteration (k-1) based on the comparison result of the previous iteration (k-1) (step ). The RR scheme is mostly suitable for identical database servers and uniform distribution of SQL queries.","Ratio (RATIO): Referring to the example flowchart of , the RATIO load balancing scheme treats each node considering the performance of the individual node. The Ratio scheme assigns weights to each node and selects a node utilizing the network pipe size and other hardware components of each node. The Ratio scheme utilizes uniform distribution of SQL queries. In , node A has a network pipe twice as wide as that of node B, and the Ratio scheme assigns one request to node B for every two requests assigned to node A. In the current iteration k, the assignment to node A in iteration (k-) is determined (step ), and the assignment to node B in iteration (k-) is determined (step ). If the assignment in iteration (k-) was to node A, and the assignment in iteration (k-) was to node A (step ), then assignment in the current iteration is to node B. If assignment in iteration (k-) was to node B, then assignment in iteration k is to node A (step ). If assignment in iteration (k-) was not to node B, and assignment in iteration (k-) was to node B (step ), then assignment in iteration k is to node A. And, if assignment in iteration (k-) was to node A, but assignment in iteration (k-) was not to node A, the assignment in iteration k is node A (step ).","Least Number of Connections (LNC): Referring to the flowchart of , LNC database load-balancing scheme selects the node with the least number of active database connections. The LNC scheme compares the number of active connections in for node A in iteration (k-) to that of node B in iteration (k-) (step ), and chooses the node with least number of active connections, wherein NCA(k-) represents number of connection for node A in iteration (k-), and NCB(k-) represents number of connection for node B in iteration (k-). If NCA(k-) is less than NCB(k-) then, the LNC scheme then increments the number of active connections in iteration k, NCA(k) for node A (step ) and selects node A for potential assignment in iteration k (step ); otherwise, the LNC scheme increments the number of active connections in iteration k, NCB(k) for node B (step ) and selects node B for potential assignment in iteration k (step ). The LNC scheme performs well with uniform distribution of SQL queries and is suitable for heavy-load environments that can drive the database servers to the cut off state due to load level.","Fastest Response TIME (FRT): Referring to the flowchart in , the FRT database load balancing scheme selects the node with the fastest measured response time. The standard FRT scheme in  treats all of SQL queries the same regardless of the query size (suitable for uniform distribution of SQL queries). A normalized FRT scheme in  takes into account a normalized measure of the response time by considering the number of returned database records (works independently for both uniform and non-uniform distribution of SQL queries).","Referring to , the standard FRT scheme inputs the measured roundtrip time required for sending the request to the database server and receiving the result back, rt( ), used by each node for accomplishing the load-balancing assignment operation for the last assigned task in iteration (k-i) or (k-j), wherein rt(A) for current iteration k is set to t(A, k-i) and rt(B) for current iteration k is set to t(B, k-j). In this example, t(A,k-i) is the measured roundtrip response time of node A at iteration (k-i), and t(B,k-j) is the measured roundtrip response time of node B at iteration (k-j). This assumes that node A was selected last at iteration (k-i) and node B was selected last at iteration (k-j) (short representations are rt(A) and rt(B), respectively). The standard FRT scheme chooses the node with the lowest roundtrip time, and updates the roundtrip time of the chosen node according to the current query. For iteration k, the scheme compares the response times for the nodes A and B, rt(A) and rt(B), respectively (step ). If rt(A) is less than rt(B), then rt(A) is set to t(A,k) step () and node A is selected for potential assignment in iteration k (step ); otherwise, rt(B) is set to t(B,k) (step ) and node B is selected for potential assignment in iteration k (step ). In this example, t(A,k) is the measured roundtrip response time of node A at iteration k should it be selected, and t(B,k) is the measured roundtrip response time of node B at iteration k should it be selected.","Referring to , the normalized FRT scheme inputs the measured roundtrip time required for sending the request to the database server and receiving the result back, rt( ), used by each node for accomplishing the load-balancing assignment operation for the last assigned task in iteration (k-i) or (k-j), wherein rt(A) for current iteration k is set to t(A, k-i) and rt(B) for current iteration k is set to t(B, k-j). The normalized FRT scheme also accepts the query size, qs(.), wherein qs(A) is set to s(Auk-i) and qs(B) is set to s(B,k-j). In this example, s(A,k-i) is the query size of node A at iteration (k-i), and s(B,k-j) is the query size of node B at iteration (k-j). This assumes that node A was selected last at iteration (k-i) and node B was selected last at iteration (k-j) (short representations are qs(A) and qs(B), respectively). The scheme selects the node with the lowest roundtrip to query size ratio, and updates the roundtrip time and query size of the chosen node according to the current query. The normalized FRT scheme determines roundtrip time to query size ratio for each node (i.e. rt(A)\/qs(A) for node A and rt(B)\/qs(B) for node B), and compares the ratios (step ). If the ratio for node A is less than the ratio for node B, the scheme sets rt(A) to t(Auk) and qs(A) to s(Auk) for node A (step ), and selects node A for potential assignment in iteration k (step ). Otherwise, the scheme sets rt(B) to t(B,k) and qs(B) to s(B,k) for node B (step ), and selects node A for potential assignment in iteration k (step ). In this example, s(A,k) and s(B,k) are the query sizes of nodes A and B at iteration k, respectively, should they be selected.","Observed (OBS): The OBS database load balancing scheme utilizes an adjustable weighted combination of LNC and FRT schemes. The OBS scheme can be effectively used in heavy-load environments with non-uniform distribution of SQL queries.","Predictive (PRD): The PRD database load balancing scheme selects the node whose OBS performance is improving. The PRD scheme can also be effectively used in the heavy-load environments with non-uniform distribution of SQL queries. The PRD scheme is similar to combination of FRT and LNC, wherein the measuring factor is the rate of change of the measuring factors displayed in FIGS.  and A\u2013B.","For each of the above load balancing schemes, the selection of a node at each iteration can be maintained as load balancing history (e.g., in memory or on disk).  shows a functional\/data flow diagram of load-balancing data flow in the overall database load-balancing modules  in , illustrating decision-making steps for selecting between the two nodes A and B for one or more of each of the above load-balancing schemes  (e.g., RR, LNC, RATIO, OBS as weighted combination of LNC and FRT, PRD, etc.). The data flow shows the initialization of the iteration measure k and the status of each node A(k) and B(k) (step ). Thereafter the iteration measure k is incremented for each iteration (step ), for each node the LB module  receives (k-1) instance choice results from the load history of the node (i.e., candidate\/potential node for assignment of query in iteration (k-)) (step ), processes the results in different load balancing scheme\/steps e.g. RR , RATIO , LNC , FRT , PRD ; and makes the database server choice\/selection for iteration k. Said load balancing schemes can be performed sequentially or in parallel, and each of the iterations indicates a measurement factor of the selected node.","The FRT  scheme keeps track of a normalized speed of each node by measuring the time required for accomplishing each query\/request considering the size of the query. This works well for non-uniform distribution of database queries because the algorithm works independent of the query size. The information from iteration (k-) includes the previously selected node and its response time. This information replaces the older measurement for the same node and will be compared with the last response time of the other node next iteration. The OBS scheme utilizes an adjustable weighted combination of LNC and FRT schemes , . The PRD scheme  measures the improvement rate of OBS scheme and selects the node with the best improvement in consecutive iterations.","The data paths V, VI, VII, IIX, IX display the selection by each of the above load balancing schemes of a potential\/candidate node for assignment of a request in iteration k. Optionally, weighting functions\/factors Wrr, Wrt, Wlnc, Wfrt, and Wprd can be utilized in steps , , , , , respectively, to take advantage of the different load balancing schemes, respectively, according to their order of importance. Assigning a value zero for each of the weighting functions eliminates the corresponding load balancing scheme from a final node selection process. Different algorithms can be used to adjust the weighting functions dynamically according to the information related to the corresponding node.","Each weighting function has two outputs corresponding to the two nodes, wherein each weighting function only applies to the selected potential node. This assigns a weighting function with a zero value to the node not selected. The addition steps ,  (corresponding to nodes A and B), then, add the weighted sum of each node separately through the input paths X, XI, XII, XII, XIV and XV, XVI, XVII, XIIX, XIX, respectively. The results from the addition steps ,  are then compared (step ). In one example, if the value of the weights summation of the load balancing schemes specified by links XX and XXI is higher than that for node B, then node A is selected for assignment of the request\/query\/transaction in iteration k thereto (step ); otherwise node B is selected (step ).","(5) Network unavailable, wherein if the link between the server and the outside world becomes unavailable, the server becomes unreachable.","The above factors are addressed by e.g.: (1) proactive monitoring of the database servers; (2) proactive monitoring of software daemons running on the database servers; monitoring applications on the database servers to ensure that the content failure problem is resolved; (3) introducing a time out value to determine when a server becomes non-responsive due to heavy load, wherein if any of the database servers fail to provide a response within the specified time, another database server is utilized to respond to the content inquiry; and (4) if the database servers are geographically distributed, introducing a time out value can then determine database server unavailability, otherwise, all of the database servers located on the same segment of a network are impacted by network congestion the same way.","Accordingly, in one version the LB module  includes one or more load balancing schemes, providing database server load-balancing that can function with a number of different database servers providing unified view of database data, without dependence on any particular database server or database implementation. The LB module  provides both high availability and load balancing for the back-end database tier of the multi-tier scalable systems. High availability guarantees that end users always receive the quality of service desired.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 4","b":["80","24"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["k: The discrete measurement of time in iteration units, wherein each iteration corresponds to a new SQL request\/transaction","A(k): The status of node A in iteration k, indicating if node A has been selected to assign the new request thereto in iteration k, wherein node A is considered selected (active) for A(k)=1 and passive forA(k)=0","B(k): The status of node B in iteration k, indicating if node B has been selected to assign the new request thereto in iteration k, wherein node B is considered selected (active) for B(k)=1 and passive for B(k)=0","X(k): Symbolic notation indicating active status, i.e., X(k)=1 for all k"]}}}},"Optionally, the iteration count k is compared to a maximum number of iterations N (step ), and the LB module stops load balancing if k reaches the maximum number N, otherwise the above steps are repeated. If N is set to infinity the LB module operates continuously. Error checking mechanisms can be utilized to take the appropriate action in case one or more nodes are not operating properly. Although the diagram in  describes the scenario for two database server nodes, all of the load balancing schemes can cover any number of nodes and, hence can be easily generalized to a higher number of nodes. Further also more than one load balancing scheme is utilized above to select a node for assignment of request in iteration k, the present invention contemplates using only one load balancing scheme to select a final node for each request assignment in each iteration.","The functional\/data flow diagram in  shows example Java database connectivity model for a version of the LB module  utilizing JDBC API, functionally illustrating an enlarged data path in  from one of the LB modules  to one of the combinations of database server and database entities , , through the data paths IX or X, respectively, in . Though JDBC is utilized for this example, but other database connectivity interface models can equally be utilized. As described, JDBC is an SQL-level API that allows execution of SQL queries and retrieval of results, if any. The API is an abstraction of interfaces designed to perform actions against any database relying on dynamic run-time database access methods.",{"@attributes":{"id":"p-0093","num":"0096"},"figref":["FIG. 9","FIG. 9"],"b":["18","32","24","32","24","214","24"]},"(1) JDBC-ODBC drivers ,  which use bridge technology to connect a Java client to an ODBC database server . In this example, the Java client can comprise one of the middle-tier web servers  that sends a query to the database. Such drivers are implemented using native code, and are generally most appropriate when automatic installation and downloading of a Java technology application is not important;","(2) Native-API partly Java technology-enabled drivers which convert JDBC calls into calls on the client API for e.g. MySQL, Oracle, Sybase, Informix, DB2, or other DBMS. These drivers, as in the bridge drivers, require that some binary code be loaded on each client machine;","(3) Net-protocol fully Java technology-enabled drivers which translate JDBC API calls into DBMS-independent net protocols that are then translated to DBMS protocols by servers. These net servers can connect all of their Java technology-based clients to many different databases. The specific protocol used depends on the vendor. In general, these are the most flexible JDBC API alternatives;","(4) Native-protocol fully Java technology-enabled drivers which convert JDBC technology calls into the network protocol used by DBMSs directly. This allows a direct call from the client to the database server and is a practical solution for Intranet access.","As described, Java comprises a software package that relies on Java Virtual Machine (JVM) as the compiler. A JVM running on a pair of hardware and software platforms creates byte code from Java source code that can be interpreted at the run time by any other JVM running on any other pair of hardware and software platforms (e.g., ). Ports of JVM exist for different operating systems running on different hardware platforms. Examples are Solaris O.S. on Sparc Sun Microsystems hardware platform or Linux O.S. on Pentium Intel hardware platform. There are three types of Java programs: stand-alone programs known as applications, programs that run inside client web browsers known as applets, and programs that run inside a server known as servlets. While the LB module  according to the present a invention takes advantage of Java servlets for core functionality, the GUI management utility takes advantage of Java applets to remotely manage the LB module  from the client browsers .","The components in  within dashed lines labeled as Application , are located in the DB servlet of the LB module, and the driver manager  and the drivers ,  and  (e.g., Oracle driver, ODBC-JDBC bridge driver, MySQL driver) are available with standard Java distribution. The driver manager  includes a utility for loading the drivers , , , into the JVM. The JVM is not shown in  but it works within the context of Java application (i.e., there are three types of Java applications: stand alone, applet, and servlet) and acts to convert the Java code to byte code as described herein. Further, while establishing connections to the database serves , the driver manager  determines if each registered driver , , , recognizes an arrived URL. The URL refers to database connectivity URL within the context of Java.","The driver manager  then uses one of the drivers , ,  that recognizes the URL to create a connection with a database server . A JDBC URL identifies an individual database server  in a driver-specific manner. A general format of a JDBC URL includes \u201cjdbc:sunprotocol:subname\u201d, an example for ODBC-JDBC bridge driver includes \u201cjdbc:odbc:somedb\u201d, The URL specifies JDBC, ODBC and the name of database and is usually accompanied by the user name and password for database access. Thereafter, steps specified in queries\/requests, including reading data from database or writing data into database, can be performed.","The flowchart in  further shows the interaction between the Java application  (e.g., stand alone, applet, servlet, etc.), the JDBC driver (e.g., drivers , , ), and the DBMSs . Each database management system  (e.g., Oracle, Sybase, Informix, MS-SQL, MySQL, mSQL, etc.) is accessed via a specific JDBC driver ,  provided (e.g., JavaSoft for Open DataBase Connectivity (ODBC) supported databases, WebLogic for Oracle, Sybase, MS-SQL, Symantec for Oracle, Sybase, MS-SQL, MS-Access, SAS for SAS, Oracle, Informix, Ingres, etc.).","In the example of , the LB module  first loads a JDBC driver  into its own Java Virtual Machine (JVM). The JDBC driver  is for opening\/establishing a connection with a database server . The GUI, described above, can be utilized to choose the database type used in a specific multi-tier system . Thereafter, the Driver Manager  opens a connection to a specific database server  wherein the database server  is specified by a specially formatted Universal Resource Locator (URL). The Driver Manager  and all other modules in  are interface classes of JDBC API, wherein the interface is a general behavior description for a class (object orientation). A class implements an interface according to its own pattern to behave a desired way.","In the DB servlet  of the LB module , optimized transaction processing methods, instance pooling and connection pooling are utilized, as described. The pooling mechanisms database access request. While the RR scheme  relies on iteration (k-) to select a potential\/candidate database server for to assigning the current request in iteration k to, without keeping a history of the past activity, the other load-balancing schemes shown rely on a number of previous iterations and in some cases a nonlinear function of those iterations to select a potential database server to handle the current request in iteration k. The inputs include information about each of the nodes separately.","Each load-balancing scheme receives two sets of inputs corresponding to the two nodes A and B. For example, the data paths I and III display the inputs for the RR scheme . These are iteration (k-) samples which include a value one for the previously selected node or a value zero for the other node. The data paths II and IV show the inputs for the PRD scheme . The other schemes also have two sets of inputs corresponding to the two nodes (not shown in the flowchart for simplicity). Each of the load balancing schemes, then, processes the received input set and selects on the next iteration potential node accordingly.","To select a potential\/candidate node for a request in iteration k, the RR scheme  only uses the iteration (k-) node selection sample and selects the node not selected in iteration (k-). The Ratio scheme  assigns each request to a node considering a performance measurement factor. For example, if the network pipe of node A is three times wider than that of node B, the Ratio scheme  assigns one request to node B for every three requests assigned to node A and hence keeps a history of the last few iterations. The RR and Ratio schemes ,  are generally suitable for uniform distribution of SQL queries with comparable result set sizes. The LNC, FRT schemes ,  are used in combination in an OBS scheme, and can be used with uniform or non-uniform distribution of SQL queries and different result set sizes.","The LNC scheme  always keeps track of the number of active connections to each node and selects the node with the lower number of database server connections. This works well for non-uniform distribution of database queries\/requests\/transactions because the larger size queries remain active for a longer period of time. Hence, the information from iteration (k-) usually includes the selected node as well as the query size and optionally a performance keep a number of connections to each database server  and re-use them when necessary. This reduces the overhead of connection establishment and connection destruction greatly. The connections are created once and destroyed once.","Once the connection  is established, the Statement Block JDBC interface , or one of its more sophisticated versions (e.g., PreparedStatement  or CallableStatement ) in the database server , execute SQL queries. PreparedStatement  extends the ability of Statement block  to bind input parameters to an SQL call just before execution. CallableStatement  relies on pre-compiled stored procedures that run faster than standard SQL queries and can also be used to return output parameters. The ResultSet block interface  is a representation format for the returned result of the query, and includes the result metadata including the number of rows, columns, search options, the maximum number of characters per column, etc. The result of the query from the database server  is sent to the LB module  to pass on to the requesting Web server  onto the client requester .","In the example embodiment herein, the web servers  support Java servlets. An example of such web servers is the Apache server with optional JServ module running on Linux operating system. The choice of the Apache web server is optional and the present invention can be implemented with any server that supports Java servlets, or the functionality provided by Java servlets. The web server , then, sends a SQL query to the LB module, wherein the LB module appears as a database server to the web server  (i.e., details of the LB module functionality are hidden from the web server). The LB module used database connectivity interface such as JDBC API to communicate with a selected database server and request services per the SQL query. Though in this example web servers support Java servlets, that is not required. The web server  may or may not support Java servlets. As long as the web server  sends an SQL query, the LB module  can interact with the Web server .","In one aspect, the present invention is directed to a load balancing of multiple servers, independent of database engine implementation. A database load balancing model according to the present invention evenly distributes the database load for as long as the database supports a unified view of the physical data to a number of database management systems (database servers)  running on different servers. In one version of the LB module  utilizing JDBC, all database servers  that support JDBC type functionality can utilize the LB module . Using functionality such as provided by JDBC API of Java technology and widespread support of different database vendors, a single tool for connecting to most of database engines is provided. The range of databases includes e.g. commercial database engines such as Oracle, Informix, Sybase, MS-SQL as well as freeware engines such as MySQL, and mSQL.","In one version he LB module  performs application specific (e.g., data base length query) load balancing, requiring application specific knowledge. Load balancing for a general IP model is disadvantageous as proper load balancing decisions cannot be made due to of lack of ample application specific information. The lower layer network packets cannot be balanced against databases because a number of packets not known to the IP load balancing module comprise a single database query. Each database query in general has a different size that is only known with application specific knowledge.","Conventional dependence of a multi-tier system on a specific database vendor prevents database load balancing to be applied to any other identical multi-tier system that replaces the back-end database tier with a different vendor component. An advantage of the present invention is that the LB module  can be equally applied to any database engine supporting functionality such as provided by e.g. JDBC and providing unified data view among a number of database servers. In one embodiment, the load balancing module  generates a weighted sum of several load-balancing schemes with manually or adaptively adjustable weighting factors. Using Java allows servlet chaining and interservlet communication protocols to provide transparent dynamic database content in a path that traverses the database server , the database load-balancing module , the Java-enabled web server , and the Java-enabled client .","A load-balancing module\/method according to the present invention can be implemented in various embodiments, including for example: software embodiment, hardware embodiment, clustering embodiment, and turnkey embodiment (i.e. hardware\/software also known as \u201cthin server network appliance\u201d), as described below. Further, the present invention can be implemented in conjunction with caching servers.","An example software embodiment comprises load-balancing software implementing the load-balancing module\/method of the present invention, installed directly onto e.g. server  in  (e.g., including computer system, operating system, database software, etc.) or database server array. Important considerations for software-only embodiments includes hardware and operating system (OS) dependency. Software is installed and upgraded on each server in the network, and driver IP addresses are provided directly to the users.","An example hardware embodiment comprises a fast switching mechanism to perform load balancing in a 7-layer OSI model. The OSI model includes, from the bottom to the top, physical, datalink, network, transport, session, data representation, and application layers. The physical connection is in the layer 1 physical layer whereas the logical connection is in the layer 7 application layer. The layer 2 is the datalink layer and the layer 3 is the network layer. Said switching mechanism can perform load balancing at the Media Access Control (MAC) Layer (Layer 2) and Layer 3 in hardware. A central processor that executes background tasks such as routing, table and network management manages the switching.","An example clustering embodiment provides high scalability, high performance, and high cost characteristics. Clustering embodiment comprises processing on multiple servers and other host environments. A cluster model relies on multiple physical servers to act as one logical server. There are different clustering models. One model uses a peer-to-peer model in which each server keeps its own identity while having access to resources available in all other members of a cluster group (e.g., NCR life keeper). Another clustering model keeps the identity and the resources of each server of the cluster group separate, wherein a monitoring feature between the servers ensured that the resources of any failed server are transferred and managed by the other functioning servers of the group. Most of the models keep the failover operation transparent from the user point of view.","Referring to , an example of turnkey embodiment of a load balancing system according to the present invention comprises \u201cthin server network appliance\u201d software\/hardware module that enhance traffic performance. A thin server  appliance comprises a computer system configured to perform dedicated tasks efficiently. The computer system can include a hardware platform  and operating system  similar to those described in conjunction with server  in . The resources of the thin server appliance  are only used towards accomplishing the dedicates tasks. An example of such a task includes one or more said LB modules  or a special caching engine. Preferably, the thin server appliance  has relatively lower overhead of management within a specific application context compared to a general purpose server\/system. Turnkey load-balancing systems manage a specific server\/application, are plug-and-play and maintain an open and flexible architecture to grow over time.","Referring to , the LB module  in the thin server appliance  includes a collection of processes or programs. Specifically, in one version, the LB module includes the LB servlet\/process  and one or more DB servlets\/processes  (shown by e.g. in ). With each new client request, a new thread within the same LB servlet process  can spawn off to service the request and later communicate with another thread in DB servlet process . In one example, one LB servlet process  and one DB servlet process  handle incoming requests, each process by spawning off a new thread after receiving a new request. As such, a new arrived request (step ) can cause the LB process  to spawn off a new thread (step ) to select a database server and pass the request to the DB process  (step ). In one example, the DB process  establishes connections to database servers (step ) and awaits receiving a request and identification of a selected database server from a thread in the LB process  (step ), whereupon the DB process spawn a new thread therein to send the request to the selected database server using an existing or new connection to that database server (step ). After the request is processed by the database server, the thread in the DB process  received a response\/result back, and send the response to the thread in the LB process (step ). The thread in the DB process then ends (step ). The thread in the LB process, receiving the response form the DB process, passes the result back to the client (step ) and the thread terminates (step ).","Each thread is spawned\/created to perform a special task (e.g., to perform a load balancing scheme, provide response to a special client request, communicate with a database server, etc.) and ends when the task is performed. The process (e.g., LB Servlet, DB Servlet, etc.) that spawns off threads remains executing for as long as the thin server appliance  and LB module  appliance remains up and running.","As shown in , in one embodiment, in another aspect the present invention provides a load balancing system  including two redundant integrated load-balancers (LB modules)  between the database servers  and the clients , operating jointly as parallel and hot-spare load balancers. The LB modules  are shown as thin server appliances . A monitor\/interface (e.g., heartbeat interface) component  provides routing of the incoming requests to one of the two LB modules  that is functioning. Further, each load balancing module can include the combination of load balancing schemes and a heartbeat interface therein. In one version, the LB module comprises a software component while the heartbeat interface comprises a network interface that performs pinging. The heartbeat interface can be a component of the thin server appliance and is suitable for two thin server appliances that act in an active-passive model. This redundancy offers fail-safe, cost-effective operation and significantly minimizes maintenance. Database servers  can be upgraded and managed without any downtime or affect on the network (e.g., multi-tier system).","Database , comprises a data storage repository and the view of data belongs to the database servers . The unified view of data can be achieved by e.g. having multiple database servers  looking at the same shared data repository  as in shared farm disk method, or by having dedicated data repositories per database server  that are mirrored and synchronized. The databases  are shown as mirroring in solid lines, and optionally as shared disk farm in dashed lines. In the shared data repository technique data consistency must be maintain by e.g. ensuring that different database servers  do not overwrite each other's transaction at the same time. In the mirrored technique, it must be guaranteed all changes in one data repository are indicated in all other data repositories. The unified view of data is nevertheless achieved by cooperation between database servers  (a database implementation dependent issue because of the nature of cooperation, and most DB implementations such as Oracle, Sybase, Informix, MySQL, etc. support the unified view of data).","Interaction of database load balancing modules  with caching methods is now described. Caching allows exchanging expensive network bandwidth with inexpensive storage. A caching server in general comprises a thin server appliance that resides on a Point-Of-Presence (POP) in the traffic path of the WWW. A POP example includes the main gateway of a company. When a user inside the company points a client browser to access data located remotely across the Internet, the content is cached into the cache server on its way to the client browser so that next time the user tries to access the same content, the browser uses the information from the local cache thin server present at the gateway of the company rather than again obtaining the content over the Internet and possibly facing congestion or other un-predictable network problems. A layer-7 (OSI model) load-balancing method is complementary to a caching system rather than competitive. The load-balancing and caching methods can be combined to offer a higher performance more scalable operating environment.","There are differences between LB operation (module) and caching. The most important one is that the POP used for the caching engine is usually in front of the middle tier and co-located with the middle tier, whereas the LB operation (module) applies to the back-end. In one aspect, the present invention is preferably directed on a turn-key system.","Because many online businesses use various database engines, the load-balancing methods according to the present invention are advantageous for such online businesses. Further, the present invention can be implemented with any database model capable of creating a unified view among multiple database servers, and process and database connectivity functions such as provided by Java. As such, the present invention is not dependent on any particular database.","The present invention is further advantageous for mid range online businesses that have not predicted purchasing expensive enterprise edition database models while still in need of a strongly scalable load-balancing method. The present invention provides cost effectiveness for the overall multi-tier computer system as well as end-user satisfaction. The present invention further enables building a complete low cost back-end tier relying on freeware database engines (e.g. MySQL) or other database engines of choice.","As such, the present invention can be implemented as a low cost turnkey system, with e.g. standard Intel hardware platforms and freeware Linux\/JDK\/JSDK software platforms, as a database load-balancing layer for a number of database engines. The present invention in a turnkey server appliance embodiment (thin appliance) acts as an independent extra layer in a multi-tier environment, leading to reduced database management overhead.","The present invention further provides high availability for a multi-tier computer system by managing load balancing independent of the database engines (database servers). Hence, problems with database engines are isolated from the operation of the multi-tier system, that can be blocked if relying on a single database server. In that latter case, if the database server malfunctions, no alternative for obtaining the requested data is available. Using multiple database servers, the LB module can avoid sending requests to the malfunctioning database server. In one version, the LB module checks the status of all database servers it manages ongoingly through the use of pings. Further, by implementing the active-passive dual database load-balancing modules, the present invention does not introduce a single point of failure.",{"@attributes":{"id":"p-0127","num":"0130"},"figref":"FIG. 11","b":["300","300","301","301","301","302","304","302","301","306","302","306","304","306","304"]},"The computer system  further includes a read only memory (ROM)  or other static storage device coupled to the bus  for storing static information and instructions for the processor . A storage device , such as a magnetic disk or optical disk, is provided and coupled to the bus  for storing information and instructions. The bus  may contain, for example, thirty-two address lines for addressing the main memory  or video memory. The bus  can also include, for example, a 32-bit data bus for transferring data between and among the components, such as the CPU , the main memory  and the storage . Alternatively, multiplex data\/address lines may be used instead of separate data and address lines.","In one embodiment, the CPU  comprises a microprocessor manufactured by Motorola\u00ae such as 680x0 processor, or a microprocessor manufactured by Intel\u00ae, such as the 80X86, or Pentium\u00ae processor, or a SPARC\u00ae microprocessor from Sun Microsystems\u00ae. However, any other suitable microprocessor or microcomputer may be utilized, based on the processing requirements for the computer system . The main memory  can comprise dynamic random access memory (DRAM). And video memory (not shown) can comprise a dual-ported video random access memory.","The computer system  can be coupled via the bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to the bus  for communicating information and command selections to the processor . Another type or user input device comprises cursor control , such as a mousse, a trackball, or cursor direction keys for communicating direction information and command selections to the processor  and for controlling cursor movement on the display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y) that allows the device to specify positions in a plane.","A thin server appliance is usually accessed by a web browser remotely for the task of administration. The standard PC input\/output devices such as monitor and keyboard are only used for maintenance and support by the manufacturer and not the end user.","According to one embodiment of the invention, the steps of the LB module described above, is performed by a computer system  in response to the processor  executing one or more sequences of one or more instructions contained in the main memory . Such instructions may be read into the main memory  from another computer-readable medium, such as the storage device  or floppy disks.","Execution of the sequences of instructions contained in the main memory  causes the processor  to perform the LB module steps described herein. One or more processors in a multi-processing arrangement may also be employed to execute the sequences of instructions contained in the main memory . In alternative embodiments, hare-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The methods of the present invention (e.g., LB module) can be implement as computer instructions on a computer-readable-medium. The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participated in providing instructions to the processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as the storage device . Volatile media includes dynamic memory, such as the main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise the bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, an EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to the processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to the computer system  can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. Although in general a modem can be used, an e-business can rely on a type of T1 LAN for communication. Also the web server  is usually co-located with DB and LB servers on e-business site.","An infrared detector coupled to the bus  can receive the data carried in the infrared signal and place the data on the bus . The bus  carries the data to the main memory , from which the processor  retrieves and executes the instructions. The instructions received from the main memory  may optionally be stored on the storage device  either before or after execution by the processor .","The computer system  also includes a communication interface  coupled to bus the . The communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, the communication interface  may be an integrated services digital network (ISDN) card or a modern to provide a data communication connection to a corresponding type of telephone line, which can comprise part of the network link .","As another example, the communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, the communication interface  sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information. Further, the communication interface  can comprise a USB\/Tuner and the network link  may be an antenna or cable for connecting the computer system  to a cable provider, satellite provider or other terrestrial transmission system for receiving messages, data and program code from another source.","The network link  typically provides data communication through one or more networks to other data devices. For example, the network link  may provide a connection through the local network  to a host computer , to one or more client computers , or to data equipment operated by an Internet Service Provider (ISP) . The ISP  in turn provides data communication services through the \u2018Internet\u2019 .","The local network  and the Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on the network link  and through the communication interface , which carry the digital data to and from the computer system , are exemplary forms or carrier waves transporting the information. The computer system  can send\/receive messages\/data, including program code, through the network link  and the communication interface . The received code may be executed by the processor  as it is received, and\/or stored in the storage device , or other non-volatile storage for later execution. In this manner, the computer systems  can obtain application code in the form of a carrier wave.","The example versions of the invention described herein are implemented as logical operations in computing systems . The logical operations of the present invention can be implemented as a sequence of steps executing on the computing system , and as interconnected machine modules within the computing system . The implementation is a matter of choice and can depend on performance of the a computer system  and\/or network , implementing the invention. As such, the logical operations constituting said example versions of the invention are referred to for e.g. as operations, steps or modules.","The present invention has been described in considerable detail with reference to certain preferred versions thereof; however, other versions are possible. Therefore, the spirit and scope of the appended claims should not be limited to the description of the preferred versions contained herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features, aspects and advantages of the present invention will become understood with reference to the following description, appended claims and accompanying figures where:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 1B","FIG. 1A"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2A","FIG. 1A"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 2B","FIG. 1A"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2C","FIG. 1A"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2D","FIG. 1A"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3","FIG. 1A"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 5A","FIG. 2"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 5B","FIG. 2"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 6","FIG. 2"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 7A","FIG. 2"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 7B","FIG. 2"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 8","FIG. 2"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 10B","FIG. 1A"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
