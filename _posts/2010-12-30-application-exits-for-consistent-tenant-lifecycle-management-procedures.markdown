---
title: Application exits for consistent tenant lifecycle management procedures
abstract: The subject matter described herein relates to software routines called application exits that are provided at well defined phases of a tenant copy process. The tenant copy process enables copying of separated tenant data associated with a source tenant at multi-computing tenant system to a new created tenant at a destination location either at multi-computing tenant computing system or second multi-computing tenant computing system. The application exits perform predefined functions at the well defined phases such that the predefined functions enable operations including detachment of tenant data from the source tenant that needs to be copied or moved such that the detached tenant data is separated tenant data. When the source tenant is just being moved, instead of being copied, from a source location to a destination location, the source tenant is deleted once all the data associated with the source tenant has been moved to the destination location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009105&OS=09009105&RS=09009105
owner: SAP SE
number: 09009105
owner_city: Walldorf
owner_country: DE
publication_date: 20101230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The subject matter described herein relates to application exits at well-defined phases of a tenant copy procedure in a multi-tenant computing landscape.","In a multi-tenancy landscape, multiple tenants share a same runtime of a single multi-tenant computing system.  illustrates a multi-tenancy landscape . In a multi-tenancy landscape , a single instance of a software application running on a multi-tenant computing system (\u201cmulti-tenant computing system  ()\u201d) serves multiple tenants. An example of the software application is \u201cBusiness ByDesign (ByD)\u201d by SAP. The multi-tenant computing system may refer to a server hosting the software application. The tenants refer to systems at one of client organizations that access the software application and individual clients that access the software application. The tenants of the multi-tenancy landscape  share the same application. In the multi-tenancy landscape , each tenant works with a customized virtual application instance. Further, the multi-tenancy landscape  comprises other one or more multi-tenant computing systems (e.g. \u201cmulti-tenant computing system  ()\u201d), where each of the other one or more multi-tenant computing systems is capable of serving one or more tenants.","Often, there is a need to copy or move a tenant from multi-computing tenant computing system  to either a new location in multi-computing tenant computing system  or multi-computing tenant computing system . The noted copying or movement of a tenant requires complete copying or movement of tenant data associated with the tenant. Tenant data associated with all the tenants is stored in persistency levels including TREX, MaxDB LiveCache and Database.","For the copying or movement of tenant data associated with a tenant that needs to be moved, there exists a problem that the tenant data is not clearly separate from data associated with other tenants. For example, there exists client-independent data besides client-dependent data. For example, when different tenants register at a multi-tenant computing system to perform a function (e.g. receive some kind of incoming calls), the registry-entries of the different tenants are not clearly separable from each other. Further, since separation of tenant data is not known, copying or movement of client-independent data is also not conventionally known.","If the tenant data associated with each tenant of the multi-computing tenant system  is clearly separable from data associated with other tenants of the multi-computing tenant system , the tenant can be copied\/duplicated or moved efficiently using database or file operations. Accordingly, there exists a need to copy clearly separated tenant data associated with a tenant that needs to be copied or moved from a first multi-computing tenant computing system to either a new location in the first multi-computing tenant computing system or a second multi-computing tenant computing system.","The subject matter described herein relates to software routines called \u201capplication exits\u201d that are executed in a multi-tenancy computing platform and which are provided at well defined phases of a tenant copy process. The tenant copy process enables copying of separated tenant data associated with a source tenant at multi-computing tenant system to a new created tenant at a destination location either at multi-computing tenant computing system or second multi-computing tenant computing system. The application exits perform predefined functions at the well defined phases such that the predefined functions enable operations including detachment of tenant data from the source tenant that needs to be copied or moved such that the detached tenant data is separated tenant data. When the source tenant is just being moved, instead of being copied, from a source location to a destination location, the source tenant is deleted once all the data associated with the source tenant has been moved to the destination location.","In one aspect, a computer-implemented method includes executing an application in a first runtime environment of the multi-tenant computing system for at least one tenant, the application using tenant content associated with the at least one tenant. The method further includes copying the at least one tenant to a second runtime environment of the multi-tenant computing system according to a tenant copy procedure, and defining a set of application exits for the tenant copy procedure, the set of application exits enabling detachment of the at least one tenant from the application during the copying.","Articles are also described that comprise a tangibly embodied machine-readable medium operable to cause one or more machines (e.g., computers, etc.) to result in operations described herein. Similarly, computer systems are also described that may include a processor and a memory coupled to the processor. The memory may include one or more programs that cause the processor to perform one or more of the operations described herein.","The subject matter described herein provides many advantages. For example, application exits allow not only client-dependent data but also client-independent data to be copied or moved in a multi-tenancy landscape from a source tenant at multi-tenant computing system to a newly created target tenant at either multi-tenant computing system or multi-tenant computing system. Moreover, the execution of application exits at predefined phases enable the copying process, which includes tenant export and tenant import, to be more well defined and consistent as the application exits are executed consistently i.e. executed at well defined phases.","The details of one or more variations of the subject matter described herein are set forth in the accompanying drawings and the description below. Other features and advantages of the subject matter described herein will be apparent from the description and drawings, and from the claims.","When practical, similar reference numbers denote similar structures, features, or elements.","As shown in , one or more implementations of the current subject matter provide methods, systems, articles or manufacture, and the like that can, among other possible advantages, provide application exits at well defined phases in the copy procedure to copy in a well defined consistent manner a tenant from multi-tenant computing system  to another location in either multi-tenant computing system  or multi-tenant computing system . The provision of application exits allows clearly separated tenant data to be copied from a source tenant at one multi-tenant computing system to a target tenant at either the one multi-tenant computing system or another multi-tenant computing system.","In the description that follows, tenant data and persistencies in which the tenant data is stored are described. Further, a tenant copy environment is described, where the tenant copy environment includes a tenant export process and a tenant import process. The tenant export process and the tenant import process take place in different phases, which will be described later. Further, different types of processes or scenarios in the tenant copy process are explained. Then the application exits that are implemented in predetermined phases of the tenant export process and the tenant import process are described. The predetermined phases and corresponding application exits are listed as follows: before deletion of a tenant (Application Exit: BEFORE_TENANT_DELETION), after creation of an empty tenant (Application Exit: AFTER_TENANT_CREATION), before export of a tenant (Application Exit: EXPORT_CLIENTIND_DATA), after physical copy of a tenant (Application Exit: IMPORT_CLIENTIND_DATA), and after complete copy procedure (Application Exit: AFTER_TENANT_COPY). The noted application exits at these predetermined phases are described later in the specificaiton. The description of application exits includes the interfaces implemented. Next, the parameters of the application exits are explained. One of the parameters is specific to a data container that allows a copy of tenant-independent data that is not copied by conventional copy methods, which copy only tenant-dependent data.","The data associated with a tenant is also termed as tenant data or tenant application data. Specifically, the tenant data refers to data of a particular tenant that is associated with an application (e.g. Business ByDesign (ByD)). For ByD, tenant application data is associated with the following persistencies: TREX, MaxDB Live Cache, and Database.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["200","240","208","212","214","216","216","218","220","222","224","226","204","228","230","232","234","236","238","214","228","218","220","222"]},"To achieve an automated copying or moving of a tenant, separation of tenant application data for all the tenants needs to be ensured.","The database  stores tenant data in database tables that are distributed among several database files. Tenant data within a database table is separated from tenant data associated with other tenants by a tenant attribute.","The Live Cache offers an Application Programming Interface (API) to download and upload tenant data of tenants into the database table. In preferred implementations, the database  supports this logical data separation.","A search engine such as TREX is used for indexing data of business objects (e.g. tenants) to retrieve a faster data access. Data of a primary business object is stored within the database. The search engine and the database persistencies are synchronized. When tenants are moved or copied, the corresponding indices of the tenants are moved or indicated too. The indexing of the tenants allows the search engine to store tenant data for different tenants in separate independent files. Furthermore, the search engine offers a duplication API of tenant indices.","Lifecycle information about a tenant is stored within the tenant data model (TDM) , business landscape directory (BLD), and a service provider cockpit (SPC) (not shown). The TDM  stores all information about a tenant at a central place within a tenant. The information about the tenant includes a history of the tenant, add-ons of the tenant, state of the tenant, and namespaces of the tenant. The SPC can trigger an import of a tenant on a multi-tenant computing system, or an export on a multi-tenant computing system, as will be described later.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["300","300","302","118","120","304","118","314","306","308","310","312","314","322","314","316","318","320","118","120"]},"The tenant copy process is divided into a tenant export process and a tenant import process. The tenant export process occurs in the following phases: Preparation, Preprocessing, Export and Cleanup. The tenant import process occurs in the following phases: Preparation, Import, Postprocessing, Technical Configuration and finally Cleanup. The tenant export process and the tenant import process are described as follows.","Tenant Export Process",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4","b":["400","118"]},"Prerequisite Check: The prerequisite check is performed for both source multi-tenant computing system  and target multi-tenant computing system . The prerequisite check for source multi-tenant computing system  is denoted by , and the prerequisite check for target multi-tenant computing system  is denoted by . This phase on source multi-tenant computing system  is intended to calculate the source tenant size and to do further checks that must be performed to ensure that the export of a tenant can be started.","Preparation : In this phase, all activities that can be performed before stopping the system are executed upfront. The upfront execution of the activities decreases a customer's downtime, during tenant move, of source multi-tenant computing system .","Preprocessing : When the tenant copy process is finally triggered, this phase is executed first. At the beginning, the tenant is still running. But, before selecting and transferring tenant data of the tenant, it is ensured that the data is in a consistent state. To reach a consistent data view, the tenant data stored in volatile storages is flushed into a non-volatile storage with the capability to access the tenant data regarding its relations. Thus, the tenant is idled, the creation of new threads or processes triggered by the customers is restricted and all sessions are closed. On the other hand, coding is still executable. This state is called Admin mode or Admin state.","It is to be noted that data of tenants is stored separately, according to a client separation guideline, for each client in client dependent tables in the persistencies. However, some components do not follow the client separation guideline, and data for those components is not separated from each other. The non-separated data is stored in client independent tables. When the tenant reaches the Admin state, actions to collect data from client independent tables and to store the collected data in client dependent tables are started.","Afterwards, the tenant is started (i.e. switched to state running) and released again to a customer.","Export : In this phase the data of a tenant is selected and directly transferred into target multi-tenant computing system  or even exported as an intermediate result that is later imported by target multi-tenant computing system . Both approaches do not affect usage of the overall tenant copy application. It is to be noted that the source tenant export is type (or scenario) independent. In other words, the export tenant is a 1:1 copy of the source tenant regardless of later usage of the source tenant and\/or the exported tenant.","Clean-up : All temporary preparations that are necessary for the export, but are not a part of the final export result, are removed from source multi-tenant computing system  once the copy has finished. Such temporary preparations include the database snapshot and the temporary database.","Tenant Import Process",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5","b":["500","118"]},"Prerequisite Check : This phase on target multi-tenant computing system  is intended to calculate a free system size and to perform further checks, possibly retrieving the currently installed add-ons.","Preparation : The tenant is in a \u201cstopped\u201d state. Everything that is needed on target multi-tenant computing system  to start the data import is executed in this phase.","Import : Before importing the tenant data, the tenant is started in Admin mode. This is required to execute reports within the tenant but to avoid the processing of any imported tenant data. Then, the tenant is imported.","Postprocessing : After all original tenant data is in place on target multi-tenant computing system , the components that stored their client independent data into client dependent tables start the reverse operation. Another task performed during this phase is the regeneration of objects described through meta data.","Tenant Configuration : Now the target tenant is technically equivalent (except for the business configuration which will be done in the previous phase) to the source tenant. Therefore, typification must be done through the technical configuration.","At the end of this phase, the tenant is set to a running state and is released to the customer.","Cleanup : All redundant data used for the data transfer is removed in this phase.","The tenant copy\/move process comprises different use cases known as scenario types. A scenario type indicates a type of process. Accordingly, a scenario type is also known as a process type. The following are different scenario types for a tenant copy process:\n\n","Besides being applicable in copying of a tenant, the P2T scenario is applicable in at least one of a development, migration, and update or upgrade of a tenant. Tenant move is a scenario type when all tenants on source multi-tenant computing system  are being copied\/moved to target multi-tenant computing system .","Using the above-noted tenant export process and the tenant import process, the Tenant Life-cycle Management (TLM) copies or even moves a complete tenant within a multi-tenant computing system or cross systems (i.e. from a first multi-tenant computing system to a second multi-tenant computing system). The TLM is based on separation, according to a content separation guideline, of data within a database of one tenant from data within the database of other tenants, wherein the database stores separate tenant related information in client-dependent tables. However, some components may not be able to stick to the content separation guideline, and thus the data represented by those components is not separately stored in the client-dependent tables. Accordingly, there needs to be a different guideline or a way to separate the data that is not separately stored in client-dependent tables, and is stored in a client independent way (e.g. in client independent tables). Additionally, there is a further need to have a possibility of triggering components before and after the TLM process to do pre-tasks or post-tasks.","For separation of tenant application data stored in client-independent tables, programming code routines called application exits are provided. The application exit (software routine) lies outside the copy tool and is called by the copy tool during predefined phases of a tenant copy process. When a client is copied, the copy tool only considers client-dependent tables. The copy tool does not care about client-specific information stored in a client-independent way. Also, the copy tool does not care about adjusting data (e.g. system ID) after a copy. Accordingly, if a copy of client-dependent data is not sufficient to run an application on a copied tenant, one or more Application Exits have to be implemented to perform all specific things to make the application run again.","Additionally, the copy tool provides functionalities to delete a client (e.g. to support client move consisting of copy and deletion). During deletion of a client, the copy tool only cares about data which is stored in client-dependent tables. To be able to reuse a deleted client, it is important that all client-specific data is deleted. So, if an application stores client-specific data in a client-independent way, the application must also implement an application exit to make sure, that this data gets deleted correctly.","Application exits are code routines written for Tenant Lifecycle Management (TLM) operations and for System Lifecycle Managament operations. The application exits implement two interfaces viz. IF_LM_OPERATION and IF_TLM_OPERATION. The implemented interfaces contain methods, which will be clearer later. Each method represents one application exit.","IF_LM_OPERATION is used to implement application exits for System Lifecycle Management. The IF_LM_OPERATION contains methods to perform a cleanup before and after a copy. These methods are implemented if there is data that can be deleted before or after a copy. The methods are implemented without using CLIENT SPECIFIED, since the coding is executed in all relevant clients. By default, Open SQL statements use automatic tenant handling. Statements that access client-dependent application tables only use the content from a current client. However, to use content from another client, other than the current client, the another client needs to be specified using CLIENT SPECIFIED.","IF_TLM_OPERATION is used to implement application exits for Tenant Lifecycle Management. The IF_TLM_OPERATION includes methods contained in the IF_LM_OPERATION and additional methods relevant for only Tenant Lifecycle Management. For example, if an application has client-specific data stored in a client-independent way, it has to make its data temporarily client-dependent. This is only required for tenant copy. If a whole multi-tenant computing system is copied, this is not necessary since all data will be copied.","So, for implementation of application exits, the interface (IF_LM_OPERATION or IF_TLM_OPERATION) that needs to be used is decided first. Then, an ABAP object oriented class is created, wherein the object oriented class implements the decided interface.","Registration, as will be discussed below, of all the application exits is done by an entry within a \u201cCCCEXIT\u201d table, originally used for Client Copy transactions. A change to Client Copy logic regarding registration of the application exit can influence Tenant Copy application exits.","The Tenant Copy or Move process takes only care for the data stored in client-dependent tables. Thus, whenever a component stores tenant data (and multi-tenant computing system configuration data) stored outside client-dependent tables, an application exit needs to be implemented. Furthermore, if a component generates objects, based on one of metadata, customer specific configuration, namespaces etc., after a Tenant Copy\/Move process, application exits need to be implemented. Moreover, for substitution of multi-tenant computing system related information or tenant related information, an application exit needs to be implemented.","In the following description, the methods of IF_LM_OPERATION and IF_TLM_OPERATION are described.","Actions Relevant to Tenant Copy and System Copy","In case of a tenant copy or a multi-tenant computing system copy, the methods described below offer a possible implementation of application exits within specific tenant copy\/multi-tenant computing system copy phases for each method. The corresponding phase for each method is noted below as well. The methods (CLEANUP_BEFORE_COPY and CLEANUP_AFTER_COPY) described below are implemented by using the Interface IF_LM_OPERATION. Note that parameters associated with the methods described below are explained after a description of all methods.","CLEANUP_BEFORE_COPY","Before tenant data of a tenant is exported, the method CLEANUP_BEFORE_COPY removes unnecessary items that are not be exported but are stored within client-dependent tables.","This method is executed by the copy tool in the source tenant\/client. Before implementing this method, it needs to be ensured that the data that is to be removed is needed neither in the source tenant nor in the target tenant.","The corresponding Tenant Copy phase is: PREPROCESSING in source multi-tenant computing system .","The parameters used in CLEANUP_BEFORE_COPY are noted in the table below.",{"@attributes":{"id":"p-0070","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Parameter","Type","Typing Method","Associated Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IR_LOGGER","Importing","Type Ref to","IF_TLM_LOG"]},{"entry":["IV_WP_MAX","Importing","Type","TLM_WP_MAX"]},{"entry":["RV_RETURNCODE","Returning","Type","SYSUBRC"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"CLEANUP_AFTER_COPY","After the tenant data is completely copied and available within target multi-tenant computing system  and the tenant is released to the customer, the data created as intermediate results or redundant data that is not required anymore is removed\/cleaned-up.","This method is executed by the copy tool in the target tenant\/client. Before implementing this method, it needs to be ensured that the data that is to be removed is needed neither in the source tenant nor in the target tenant.","The corresponding Tenant Copy phase is: CLEANUP in target multi-tenant computing system .","The parameters used in CLEANUP_AFTER_COPY are noted in the table below.",{"@attributes":{"id":"p-0076","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Parameter","Type","Typing Method","Associated Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IR_LOGGER","Importing","Type Ref to","IF_TLM_LOG"]},{"entry":["IV_WP_MAX","Importing","Type","TLM_WP_MAX"]},{"entry":["RV_RETURNCODE","Returning","Type","SYSUBRC"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"Actions Relevant to Only Tenant Copy","In case of a Tenant Copy, the methods described below offer a possible implementation of application exits within specific Tenant Copy phases for each method. The corresponding phase when the application exit is implemented is mentioned below for each method. The methods (AFTER_TENANT_CREATION, BEFORE_TENANT_DELETION, EXPORT_CLIENTIND_DATA, IMPORT_CLIENTIND_DATA, and AFTER_TENANT_COPY) described below are implemented by using the Interface IF_TLM_OPERATION. Note that parameters associated with the methods described below are explained after a description of all methods.","AFTER_TENANT_CREATION","The method AFTER_TENANT_CREATION performs actions required after a new tenant is created. However, during a copy procedure, this method is not called.","This method is executed by the copy tool in the newly created tenant\/client.","The parameters used in AFTER_TENANT_CREATION are noted in the table below.",{"@attributes":{"id":"p-0083","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Parameter","Type","Typing Method","Associated Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IR_LOGGER","Importing","Type Ref to","IF_TLM_LOG"]},{"entry":["IV_WP_MAX","Importing","Type","TLM_WP_MAX"]},{"entry":["RV_RETURNCODE","Returning","Type","SYSUBRC"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"BEFORE_TENANT_DELETION","Before a tenant is deleted, this method is called. In case a client has stored some additional data, generated data after a tenant copy or tenant creation, or established system service items required to run a tenant, the noted data and items are deleted using the method BEFORE_TENANT_DELETION.","This method is executed by the copy tool in a tenant\/client that is to be deleted.","The parameters used in BEFORE_TENANT_DELETION are noted in the table below.",{"@attributes":{"id":"p-0088","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Parameter","Type","Typing Method","Associated Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IR_LOGGER","Importing","Type Ref to","IF_TLM_LOG"]},{"entry":["IV_WP_MAX","Importing","Type","TLM_WP_MAX"]},{"entry":["RV_RETURNCODE","Returning","Type","SYSUBRC"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"EXPORT_CLIENTIND_DATA","The method EXPORT_CLIENTIND_DATA is called before the tenant data is exported. Conventionally, the exported tenant data is the data stored in client dependent tables. In case the tenant data is not stored in client-dependent tables, it is possible to store this tenant data in a DATA CONTAINER. The method EXPORT_CLIENTIND_DATA ensures that the DATA CONTAINER is exported along with the export of data stored in client dependent tables. The method EXPORT_CLIENTIND_DATA further ensures that all multi-tenant computing system related information (required to run a tenant in source multi-tenant computing system ) that belongs to the tenant is copied too. Furthermore, tenant related configuration data that is used to configure the tenant in source multi-tenant computing system  is copied as well.","This method is executed by the copy tool in the source tenant\/client.","This method is called within Tenant Copy phase: PREPROCESSING in source tenant. It is to be noted that the Tenant Copy phase and the Tenant Copy Export phase are not the same.","The parameters used in EXPORT_CLIENTIND_DATA are noted in the table below.",{"@attributes":{"id":"p-0094","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},{},"Typing",{},{}]},{"entry":["Parameter","Type","Method","Associated Type","REMARK"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IR_LOGGER","Importing","Type Ref to","IF_TLM_LOG",{}]},{"entry":["IR_DATA_CONTAINER","Importing","Type Ref to","CL_TLM_DATA_CONTAINER","Tenant"]},{"entry":[{},{},{},{},"Data"]},{"entry":[{},{},{},{},"Container"]},{"entry":["IV_WP_MAX","Importing","Type","TLM_WP_MAX"]},{"entry":["RV_RETURNCODE","Returning","Type","SYSUBRC"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"IMPORT_CLIENTIND_DATA","After the import of the tenant data is done, the previously packed data (except the configuration data of the tenant) in DATA CONTAINER, as noted with respect to the method EXPORT_CLIENTIND_DATA, is unpacked in this method.","This method is executed by the copy tool in the target tenant\/client.","Compared to the EXPORT_CLIENTIND_DATA method, the IMPORT_CLIENTIND_DATA method uses an additional parameter PROCESS_TYPE. This additional parameter enables an implementation of a scenario dependent behavior. Furthermore, in this method, a substitution of multi-tenant computing system related information takes place.","The corresponding Tenant Copy phase is: POSTPROCESSING in target multi-tenant computing system. It is to be noted that the Tenant Copy phase is not the same as the Tenant Copy Import phase.","The parameters used in IMPORT_CLIENTIND_DATA are noted in the table below.",{"@attributes":{"id":"p-0101","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},{},"Typing",{},{}]},{"entry":["Parameter","Type","Method","Associated Type","REMARK"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IR_LOGGER","Importing","Type Ref to","IF_TLM_LOG",{}]},{"entry":["IR_DATA_CONTAINER","Importing","Type Ref to","CL_TLM_DATA_CONTAINER","Tenant Data"]},{"entry":[{},{},{},{},"Container"]},{"entry":["IV_PROCESS_TYPE","Importing","Type","TLMPROCESSTYPE","Uniquely"]},{"entry":[{},{},{},{},"identifies use"]},{"entry":[{},{},{},{},"case (process"]},{"entry":[{},{},{},{},"type or"]},{"entry":[{},{},{},{},"scenario)"]},{"entry":["IV_WP_MAX","Importing","Type","TLM_WP_MAX"]},{"entry":["IS_ADDTIONAL_PARAM","Importing","Type","IF_TLM_OPERATION=>TY_A"]},{"entry":["ETERS",{},{},"DDITIONAL_PARAMETERS"]},{"entry":["RV_RETURNCODE","Returning","Type","SYSUBRC"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"AFTER_TENANT_COPY","The method AFTER_TENANT_COPY is used to perform all necessary data adjustment (e.g. replacement of system ID or tenant ID) after the client has been copied.","The parameters used in AFTER_TENANT_COPY are noted in the table below.",{"@attributes":{"id":"p-0105","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},{},"Typing",{},{}]},{"entry":["Parameter","Type","Method","Associated Type","REMARK"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IR_LOGGER","Importing","Type Ref to","IF_TLM_LOG",{}]},{"entry":["IV_PROCESS_TYPE","Importing","Type","TLMPROCESSTYPE","Uniquely"]},{"entry":[{},{},{},{},"identifies use"]},{"entry":[{},{},{},{},"case (process"]},{"entry":[{},{},{},{},"type)"]},{"entry":["IV_WP_MAX","Importing","Type","TLM_WP_MAX"]},{"entry":["IS_ADDTIONAL_PA","Importing","Type","IF_TLM_OPERATION=>TY_A"]},{"entry":["RAMETERS",{},{},"DDITIONAL_PARAMETERS"]},{"entry":["RV_RETURNCODE","Returning","Type","SYSUBRC"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"Application Exit Interface Parameters","The following description explains the parameters associated with the above-noted methods.","Logging (IR_LOGGER)","IR_LOGGER is a reference to interface IF_TLM_LOG having one method ADD_MESSAGE. It is expected that a message, really existing in some message class, is passed. In this case one has to pass parameter IV_MSGID (name of message class), IV_MSGTY (message type), IV_MSGNO (message number) and IV_MSGV1 . . . IV_MSGV4 (message parameters). Other possibility is to supply some text in IV_MSGTEXT parameter. Messages posted by this method will appear in the detailed log of the Tenant LM.","Process Type (IV_PROCESS_TYPE)","IV_PROCESS_TYPE describes a use-case (process type or scenario) in which the application exit is executed.","For the usage of IV_PROCESS_TYPE an interface with constants is defined:\n\n","Since 1:1 copies are done, the application exits only need to know whether a copy is a LOCAL copy or a REMOTE copy.","When doing a remote copy, it can be assumed that the source multi-tenant computing system  and target multi-tenant computing system  have the same feature pack level, support pack level, and hot fix level. Further, all add-ons that were active for the source tenant in source multi-tenant computing system  shall be available on target multi-tenant computing system .","Data Container (IR_DATA_CONTAINER)","If a client application stores client-specific data in a client-independent way, the client-independent data needs to be made client-dependent so that the client-independent data can be copied by the copy tool. To obviate this problem of all data not being client-dependent data that can be copied and transferred as done conventionally, the copy tool provides a data container where the client data is stored. The advantage of having the data container is that database tables do not have to be created to store temporary data only for client copy. Each application exit can use the data container which will write all data into one database table. Using the data container is mandatory for all application exits that have to store temporary data.","If an application needs to convert data after copy from source to target client, it is expected that the application exit makes use of a data container provided by the client copy tool. The advantage is that an application does not create its own database tables to store temporary data only for client copy. But each application uses the same data container (e.g. a physical data base table).","The data container is implemented by class CL_TLM_DATA_CONTAINER. For each application exit, an instance to class CL_TLM_DATA_CONTAINER is created. The class name of the application exit is passed as actual parameter to the constructor. A Reference to the data container instance is passed as actual parameter to the methods IF_TLM_OPERATION\u02dcEXPORT_CLIENTIND_DATA and IF_TLM_OPERATION\u02dcIMPORT_CLIENTIND_DATA.","Within method IF_TLM_OPERATION\u02dcEXPORT_CLIENTIND_DATA the application exit has to convert their temporary data to type XSTRING (for example, by calling CALL TRANSFORMATION ID statement) and add it to the data container via method SET_DATA. Input parameter for method SET_DATA is the data string. The class name of the application exit is taken as part of the key for an entry of database table TENANT_DATA_CONT, which is the data container.","After the physical client copy within method IF_TLM_OPERATION\u02dcIMPORT_CLIENTIND_DATA the application exit has to pick their temporary data of type XSTRING from the data container via method GET_DATA. Output parameter of method GET_DATA is the data string. It can be converted back to the original data structures for example by calling CALL TRANSFORMATION ID statement.","After the client copy process is finished successfully all temporary data which was has been stored in the data container by the applications will be deleted by the client copy tool in a cleanup process.","Maximal Number of Work Processes","IV_WP_MAX parameter can be used to restrict number of processes running in parallel in an application exit in order not to overload the multi-tenant computing system.","Additional Parameters","IS_ADDTIONAL_PARAMETERS contains additional information which might be relevant to perform some data adjustment.\n\n","Return Code","Each application exit must return RV_RETURNCODE with the following possible values:\n\n","In case RV_RETURNCODE=1 or 2, application exit writes some message(s) to the log.","The following constants are defined:\n\n","Registration of an Application Exit","Each implemented method is to be registered by inserting a corresponding entry into table CCCEXIT. This is done using view V_CCCEXIT.","The Methods can be in principle called at different phases, but there are certain phases created exactly for the execution of these application exits. Accordingly, the following phases are recommended to be used for registration:\n\n","Example of proper registration in CCCEXIT table:",{"@attributes":{"id":"p-0134","num":"0160"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["CCPHASE","REPFBNAME","CCCOPYTYPE","CCPROGTYPE","CCPARID","CCPARVAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MD","CL_DELETE_ART","*","MD"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}}}},"General Behavior of an Application Exit","The application exit takes into account that several lifecycle management processes (for example, 001\u2212>100 and 002\u2212>200) can run in the same multi-tenant computing system at one time. Any intersection (for example, 001\u2212>100 and 001\u2212>200, 001\u2212>100 and 002\u2212>100, 001\u2212>100 and 100\u2212>200, 001\u2212>100 and 200\u2212>001) is prohibited.","It is to be noted that while using application exits, it needs to be noted whether the application exit is being implemented at the source tenant or the target tenant. If the information on whether the implementation is on source tenant or target tenant is not included, the stored data can be overwritten by the same application exit running in another LM process.","Known Application Exits","TABLE 9 illustrates application exits for a particular exemplary implementation.",{"@attributes":{"id":"p-0140","num":"0166"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},{},"EXECUTION",{}]},{"entry":["AREA","NAME OF EXIT CLASS","PHASE","DESCRIPTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LiveCache","\/LCAP\/CL_LC_TLM_HANDLER","Export data,","Export data: download"]},{"entry":[{},{},"Import data,","liveCache content to DB"]},{"entry":[{},{},"Before","table"]},{"entry":[{},{},"deletion","Import data: upload"]},{"entry":[{},{},{},"liveCache content from"]},{"entry":[{},{},{},"DB table"]},{"entry":[{},{},{},"Before deletion: delete"]},{"entry":[{},{},{},"liveCache content"]},{"entry":["Output","\/DOC\/CL_T_UPDATE_EMAIL_LDAP","After copy,","After copy: rebuild"]},{"entry":["Management",{},"Before","LDAP entries for MTA"]},{"entry":[{},{},"deletion","mail routing and"]},{"entry":[{},{},{},"adjust mail address"]},{"entry":[{},{},{},"Before deletion:"]},{"entry":[{},{},{},"delete LDAP entries for"]},{"entry":[{},{},{},"MTA mail routing"]},{"entry":["MDRI","CL_MDRI_CLIENT_COPY","Export data,","Export data: pack all"]},{"entry":["(framework",{},"Import data,","stopped batch jobs"]},{"entry":["for MDROs)",{},"Before","Import data: unpack"]},{"entry":[{},{},"deletion","and reschedule"]},{"entry":[{},{},{},"copied batch jobs"]},{"entry":[{},{},{},"Before deletion:"]},{"entry":[{},{},{},"delete all"]},{"entry":[{},{},{},"stopped\/planned tenant"]},{"entry":[{},{},{},"specific jobs"]},{"entry":["Job","CL_JOBD_TLM_HANDLER","After copy,","After copy: schedule"]},{"entry":["Repository",{},"Before","technical jobs from"]},{"entry":[{},{},"deletion","job repository"]},{"entry":[{},{},{},"depending on"]},{"entry":[{},{},{},"tenant +"]},{"entry":[{},{},{},"system settings"]},{"entry":[{},{},{},"Before"]},{"entry":[{},{},{},"deletion: deactivate"]},{"entry":[{},{},{},"all scheduled"]},{"entry":[{},{},{},"technical background jobs"]},{"entry":["ICF","CL_ICF_TENANT_COPY","Export data,","Export data: copy ICF"]},{"entry":[{},{},"Import data","data to data"]},{"entry":[{},{},{},"container and client"]},{"entry":[{},{},{},"independent"]},{"entry":[{},{},{},"secure"]},{"entry":[{},{},{},"store content to"]},{"entry":[{},{},{},"client-dependent part"]},{"entry":[{},{},{},"of secure store"]},{"entry":[{},{},{},"Import data: import"]},{"entry":[{},{},{},"ICF data and secure"]},{"entry":[{},{},{},"store content"]},{"entry":[{},{},{},"Note: Deletion of ICF"]},{"entry":[{},{},{},"data not covered by"]},{"entry":[{},{},{},"exit but separate step in"]},{"entry":[{},{},{},"TLM procedure"]},{"entry":["Web-Service","CL_SRT_TLM_HANDLER","After copy","Adapt logon client in"]},{"entry":["Runtime",{},{},"the RFC service"]},{"entry":[{},{},{},"destination of WS"]},{"entry":[{},{},{},"Runtime"]},{"entry":["bgRFC","CL_BGRFC_TLM_HANDLER","Export data,","Export data: store bgRFC"]},{"entry":[{},{},"Import data,","units of source"]},{"entry":[{},{},"After copy,","client in client-dependent"]},{"entry":[{},{},"Before","table"]},{"entry":[{},{},"deletion","Import data: restore"]},{"entry":[{},{},{},"bgRFC units in target"]},{"entry":[{},{},{},"client and adjust"]},{"entry":[{},{},{},"client and system ID"]},{"entry":[{},{},{},"After copy: adjust"]},{"entry":[{},{},{},"client number in"]},{"entry":[{},{},{},"some bgRFC tables"]},{"entry":[{},{},{},"Before deletion: delete"]},{"entry":[{},{},{},"bgRFC units"]},{"entry":["RFC","CL_AE_TENANT_COPY","After copy","Adjust logon client in"]},{"entry":[{},{},{},"all client-dependent RFC"]},{"entry":[{},{},{},"destinations"]},{"entry":["DMIS (Data","CL_DMC_TLM_HANDLER","After copy,","After copy: delete"]},{"entry":["Migration)",{},"Before","copied table entries"]},{"entry":[{},{},"deletion","referencing generated"]},{"entry":[{},{},{},"runtime objects"]},{"entry":[{},{},{},"Deletion: delete"]},{"entry":[{},{},{},"runtime objects which"]},{"entry":[{},{},{},"have been generated"]},{"entry":[{},{},{},"during data migration"]},{"entry":["Security","CL_STRUST_TLM_OPERATION","Export data,","Export data: extract"]},{"entry":[{},{},"Import data,","PSE files of source"]},{"entry":[{},{},"Before","tenant and store in"]},{"entry":[{},{},"deletion","data container"]},{"entry":[{},{},{},"Import data: import"]},{"entry":[{},{},{},"PSE files from data"]},{"entry":[{},{},{},"container to target"]},{"entry":[{},{},{},"tenant"]},{"entry":[{},{},{},"Before deletion:"]},{"entry":[{},{},{},"delete PSE files from file"]},{"entry":[{},{},{},"system"]},{"entry":["Tenant","CL_SYSTEM_MESSAGE","Before","Delete all client-specific"]},{"entry":["Infrastructure",{},"deletion","System messages"]},{"entry":["Tenant LM","CL_TLM_DELETE_TABS_AFTER_COPY","After copy","Generic exit to delete"]},{"entry":[{},{},{},"client-dependent"]},{"entry":[{},{},{},"tables which are not"]},{"entry":[{},{},{},"needed in target"]},{"entry":[{},{},{},"tenant. Currently"]},{"entry":[{},{},{},"known:"]},{"entry":[{},{},{},"a) FDT_CC_0000"]},{"entry":[{},{},{},"b) SDTSHD"]},{"entry":["FSI","CL_FSI_ADAPT_TENANT_COPY","Export data,","Export data: export"]},{"entry":[{},{},"Import data","content of"]},{"entry":[{},{},{},"SFSG_REPL_META_H"]},{"entry":[{},{},{},"to data container"]},{"entry":[{},{},{},"Import data: convert"]},{"entry":[{},{},{},"meta keys of table"]},{"entry":[{},{},{},"SFGS_REPL_STATUS"]},{"entry":[{},{},{},"based on mapping"]},{"entry":[{},{},{},"data taken from data"]},{"entry":[{},{},{},"container (only"]},{"entry":[{},{},{},"relevant for remote copy)"]},{"entry":["CST","CL_UPDATE_TASK_TLM","Before","Deletion of client"]},{"entry":[{},{},"deletion","specific update tasks"]},{"entry":[{},{},{},"which are still in queue"]},{"entry":["XRepository","CL_XREP_CORE_TLM_HANDLER","After copy","Regenerate UI loads"]},{"entry":[{},{},{},"(only relevant for remote"]},{"entry":[{},{},{},"copy)"]},{"entry":["Extensibility","\/EXT\/CL_CUS_GEN_TLM_HANDLER","After copy,","After copy: generate"]},{"entry":["(incl.",{},"Before","artifacts based on"]},{"entry":["Analytics)",{},"deletion","copied meta data and"]},{"entry":[{},{},{},"proper switches"]},{"entry":[{},{},{},"Before deletion:"]},{"entry":[{},{},{},"delete generation artifacts"]},{"entry":[{},{},{},"and switches"]},{"entry":["Oberon UI","CL_OBERON_RT_MD_CLIENT_CLEANUP","Before","Deletion of mapping"]},{"entry":[{},{},"deletion","of client specific"]},{"entry":[{},{},{},"mapping of UI"]},{"entry":[{},{},{},"file-path to raw cache key"]},{"entry":[{},{},{},"of UI meta data"]},{"entry":["BC Tools","CL_BCTD_DPM_AFTER_TENANT_COPY","After copy","Adjust client and"]},{"entry":[{},{},{},"system info in table"]},{"entry":[{},{},{},"BCTD_DPM_INFO"]},{"entry":["Spool Log","CL_MDRI_SPOOL_LOG_CLEANUP","Before","Delete spool logs"]},{"entry":[{},{},"Deletion"]},{"entry":["Partner","CL_PDI_TLM_HANDLER","After copy,","After copy: create"]},{"entry":["Development",{},"Before","switches for partner"]},{"entry":[{},{},"Deletion","add-ons"]},{"entry":[{},{},{},"Before deletion:"]},{"entry":[{},{},{},"delete\/deactivate"]},{"entry":[{},{},{},"switches for partner add-"]},{"entry":[{},{},{},"ons"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"Sample Implementation of an Application Exit","The class CL_TLM_CCEXIT_SAMPLE is a sample application exit class implementing the interface IF_TLM_OPERATION. It can be taken as an example for the applications which have to implement an exit.",{"@attributes":{"id":"p-0143","num":"0169"},"figref":"FIG. 6","b":["600","602","604","602","604","602","604"]},{"@attributes":{"id":"p-0144","num":"0170"},"figref":"FIG. 7","b":["700","702","704","706","702","704","706","702","704","706"]},"The method IF_TLM_OPERATION\u02dcEXPORT_CLIENTIND_DATA packs data into the data container.","An implementation of the method IF_TLM_OPERATION\u02dcEXPORT_CLIENTIND_DATA is shown below:",{"@attributes":{"id":"p-0147","num":"0173"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IF ir_data_container IS BOUND."]},{"entry":[{},"\u2003\u2003\u2003lv_xstring = sy-timlo."]},{"entry":[{},"\u2003\u2003\u2003CALL METHOD ir_data_container->set_data"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003EXPORTING"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003iv_container_data = lv_xstring"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003IMPORTING"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ev_returncode = lv_returncode."]},{"entry":[{},"\u2003\u2003\u2003IF lv_returncode <> 0."]},{"entry":[{},"* error filling Data Container"]},{"entry":[{},"* write some error message to log"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003ev_returncode ="]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003IF_TENANTLM_C=>RETURNCODE_ERROR."]},{"entry":[{},"\u2003\u2003\u2003ENDIF."]},{"entry":[{},"ENDIF."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0148","num":"0174"},"figref":"FIG. 8","b":["800","802","804","806","802","704","806","802","804","806"]},"The method IF_TLM_OPERATION\u02dcIMPORT_CLIENTIND_DATA unpacks the data that was packed into the data container by the method IF_TLM_OPERATION\u02dcEXPORT_CLIENTIND_DATA.","An implementation of the method IF_TLM_OPERATION\u02dcEXPORT_CLIENTIND_DATA is shown below:",{"@attributes":{"id":"p-0151","num":"0177"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"IF ir_data_container IS BOUND."},{"entry":"\u2003\u2003\u2003CLEAR:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003lv_xstring,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003lv_returncode."},{"entry":"\u2003\u2003\u2003CALL METHOD ir_data_container->get_data"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003IMPORTING"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ev_container_data = lv_xstring"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ev_returncode = lv_returncode."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003IF lv_returncode = 0 OR lv_returncode = 4."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003* 0 : data found in Data Container"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003* 4 : no data found in Data Container"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ev_returncode ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003IF_TENANTLM_C=>RETURNCODE_OK."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003ELSE."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003* error reading Data Container"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003* write some error message to log"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ev_returncode ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003IF_TENANTLM_C=>RETURNCODE_ERROR."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003ENDIF."},{"entry":"ENDIF."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The subject matter described herein can be embodied in systems, apparatus, methods, and\/or articles depending on the desired configuration. In particular, various implementations of the subject matter described herein can be realized in digital electronic circuitry, integrated circuitry, specially designed application specific integrated circuits (ASICs), computer hardware, firmware, software, and\/or combinations thereof These various implementations can include implementation in one or more computer programs that are executable and\/or interpretable on a programmable system including at least one programmable processor, which can be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.","These computer programs, which can also be referred to programs, software, software applications, applications, components, or code, include machine instructions for a programmable processor, and can be implemented in a high-level procedural and\/or object-oriented programming language, and\/or in assembly\/machine language. As used herein, the term \u201cmachine-readable medium\u201d refers to any computer program product, apparatus and\/or device, such as for example magnetic discs, optical disks, memory, and Programmable Logic Devices (PLDs), used to provide machine instructions and\/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term \u201cmachine-readable signal\u201d refers to any signal used to provide machine instructions and\/or data to a programmable processor. The machine-readable medium can store such machine instructions non-transitorily, such as for example as would a non-transient solid state memory or a magnetic hard drive or any equivalent storage medium. The machine-readable medium can alternatively or additionally store such machine instructions in a transient manner, such as for example as would a processor cache or other random access memory associated with one or more physical processor cores.","To provide for interaction with a user, the subject matter described herein can be implemented on a computer having a display device, such as for example a cathode ray tube (CRT) or a liquid crystal display (LCD) monitor for displaying information to the user and a keyboard and a pointing device, such as for example a mouse or a trackball, by which the user may provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well. For example, feedback provided to the user can be any form of sensory feedback, such as for example visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including, but not limited to, acoustic, speech, or tactile input. Other possible input devices include, but are not limited to, touch screens or other touch-sensitive devices such as single or multi-point resistive or capacitive trackpads, voice recognition hardware and software, optical scanners, optical pointers, digital image capture devices and associated interpretation software, and the like.","The subject matter described herein can be implemented in a computing system that includes a back-end component, such as for example one or more data servers, or that includes a middleware component, such as for example one or more application servers, or that includes a front-end component, such as for example one or more client computers having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described herein, or any combination of such back-end, middleware, or front-end components. A client and server are generally, but not exclusively, remote from each other and typically interact through a communication network, although the components of the system can be interconnected by any form or medium of digital data communication. Examples of communication networks include, but are not limited to, a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), and the Internet. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","The implementations set forth in the foregoing description do not represent all implementations consistent with the subject matter described herein. Instead, they are merely some examples consistent with aspects related to the described subject matter. Although a few variations have been described in detail above, other modifications or additions are possible. In particular, further features and\/or variations can be provided in addition to those set forth herein. For example, the implementations described above can be directed to various combinations and subcombinations of the disclosed features and\/or combinations and subcombinations of several further features disclosed above. In addition, the logic flows depicted in the accompanying figures and\/or described herein do not necessarily require the particular order shown, or sequential order, to achieve desirable results. Other implementations may be within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, show certain aspects of the subject matter disclosed herein and, together with the description, help explain some of the principles associated with the disclosed implementations. In the drawings,",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
