---
title: Pre-computed search results
abstract: Disclosed are various embodiments for pre-computing search results. A series of characters is captured as the characters are entered by a user into a search query form. The series forms a successive plurality of input strings. As each character in the series is entered into the search query form, a successive plurality of search query strings is generated. Each search query string corresponds to one of the input strings. As each search query string is generated, a request is sent to retrieve a search results document corresponding to the search query string. As a response to each request is received, at least a portion of the search results document is displayed if the response indicates success.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08438166&OS=08438166&RS=08438166
owner: Amazon Technologies, Inc.
number: 08438166
owner_city: Reno
owner_country: US
publication_date: 20110331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Online users interact with search engines to find information of interest, and to obtain more detail about the information of interest. A search engine returns summary information for search results that most closely match a user's search query. The user then selects a link associated with one of the search results to get more information about the search results.","The various embodiments described herein relate to systems and methods for pre-computing search results for a content database. A collection of search results documents is built that represents all possible search query strings of length 1 to N (e.g., \u201ca,\u201d \u201caa,\u201d \u201cab,\u201d \u201cac,\u201d etc.). Each of the search results documents represents the results from a different search query. Furthermore, the name of each search results document encodes the search query. Thus, on receiving a search query from a user, the matching search results document can be easily located and retrieved rather than generated on the fly. Because all possible queries have been indexed ahead of time, partial search queries as short as a single character can be supported. For example, upon typing the letter \u201ch\u201d into a search query form, the user can be presented with the items in the content database that start with \u201ch.\u201d The list presented to the user may be limited to a predetermined number, such as the ten most popular items. As the user types more characters, search results for these longer search query strings can be retrieved and presented to the user, replacing the search results produced by the shorter strings. The search results document collection can be distributed to a content distribution network so that retrieval of the search results document corresponding to the search query string can be handled by a computing device which is geographically proximal to the user, thus reducing latency even more. In the following discussion, a general description of the system and its components is provided, followed by a discussion of the operation of the same.","With reference to , shown is a networked environment  according to various embodiments. The networked environment  includes one or more computing devices  in data communication with one or more client devices  by way of a network . The computing device  is also in data communication with one or more computing devices  by way of the network . The network  includes, for example, the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks.","The computing device  may comprise, for example, a server computer or any other system providing computing capability. Alternatively, a plurality of computing devices  may be employed that are arranged, for example, in one or more server banks or computer banks or other arrangements. A plurality of computing devices  together may comprise, for example, a cloud computing resource, a grid computing resource, and\/or any other distributed computing arrangement. Such computing devices  may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience, the computing device  is referred to herein in the singular. Even though the computing device  is referred to in the singular, it is understood that a plurality of computing devices  may be employed in the various arrangements as described above.","Various applications and\/or other functionality may be executed in the computing device  according to various embodiments. Also, various data is stored in a data store  that is accessible to the computing device . The data store  may be representative of a plurality of data stores as can be appreciated. The data stored in the data store  includes data accessed by the components executing on the computing device , for example, a content database  and a collection  of search result documents , as well as potentially other data.","The components executed on the computing device  include, for example, a search retrieval application , a search results builder , and a network page server application . The components executed on the computing device  may also include other applications, services, processes, systems, engines, or functionality not discussed in detail herein. These components may communicate with each other using various mechanisms, including but not limited to any type of middleware framework. Examples of such frameworks include remote procedure calls, simple object access protocol (SOAP), representational state transfer (REST), Windows Communication Foundation, and other frameworks. Though shown as logically separate components, the functionality of these components can be combined and\/or distributed in various ways, as can be appreciated.","The content database  stores records, where each record includes one or more fields, also known as attributes. One or more of these fields is designated as a key. A search for a key having a particular value retrieves one or more records in the content database  where that key attribute matches the key value. The records can be sorted on one or more fields. In some embodiments, the content database  stores arbitrary key\/data pairs as byte arrays, and supports multiple data items for a single key. Some embodiments of the byte array database support various access methods, such as binary-plus-tree, hashing, fixed-length records, and\/or variable-length records. An example byte array database is implemented using Berkeley DB. In some embodiments, the content database  is implemented as a trie, also known as a prefix tree.","The search results builder  is executed to build a search results document collection  from the content database . The search results document collection  represents all possible search results using all possible strings as keys. All possible strings includes a complete set of strings, using the entire character set, ranging from size 1 to size N. That is, the search results document collection  includes a set of documents representing results for all single character keys (\u201ca,\u201d \u201cb,\u201d \u201cc,\u201d, etc.); another set of documents representing results for all combinations of 2-character keys (\u201caa,\u201d \u201cab,\u201d \u201cac,\u201d etc.); another set of documents representing results for all combinations of 3-characters keys (\u201caaa,\u201d \u201caab,\u201d \u201caac,\u201d etc.); and so on. The path and\/or name of each search result documents  reflects the key. That is, the search results document  representing records which match the key \u201cabc\u201d has a name which includes \u201cabc.\u201d","The search retrieval application  is executed to receive a search query string and, in response, to retrieve one of the previously generated documents in the search results document collection  built by the search results builder . The search results document  that is retrieved in response to the query is the one having a name that matches the search query. Because the search results builder  builds, a priori, a collection of static documents having names related to search queries, the process of searching by a search query string can be replaced by the process of retrieving a document having a name formed by the search query string. In this manner, the search retrieval application  responds to search queries not by performing a search in real time, but instead by locating a previously generated document that already contains the requested search results.","The network page server application  is executed to receive requests for network pages generated by a client device  and received over the network . The network page server application  is further executed to generate a network page corresponding to the network page request and to serve up the generated network page. The network pages fetched by the network page server application  may be dynamically generated or may be static. To this end, the network page server application  uses network page data , which may include any type of data related to the generation of network pages. Such data may include, for example, templates, executable code, interpreted code, hypertext markup language (HTML), extensible markup language (XML), images, video, text, graphics, and any other type of data that may be used in network pages. The network page server application  may comprise a hypertext transfer protocol (HTTP) server such as Apache\u00ae HTTP Server, Apache\u00ae Tomcat\u00ae, Microsoft\u00ae Internet Information Services (IIS), and\/or any other type of network page server application.","The components executed on the computing devices  include, for example, a content distribution manager , as well as other applications and\/or functionality. Each of the computing devices  includes a data store , which may be representative of a plurality of data stores as can be appreciated, that is accessible to the content distribution manager . The computing devices  may be distributed geographically so as to be relatively near various client devices .","The data stored in the data store  includes, for example, a replicated search document collection , as well as potentially other data. The replicated search document collection  is a copy of the search results document collection . The content distribution manager  is executed on one or more of the computing devices  to distribute the replicated search document collection  to each of the computing device . The computing devices  can be viewed as forming a content distribution network , in which client requests to retrieve a search document are directed to and handled by a computing device  that is located relatively near the client device  in order to reduce latency.","The client device  is representative of a plurality of client devices that may be coupled to the network . The client device  may comprise, for example, a processor-based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer, a laptop computer, a personal digital assistant, a cellular telephone, a set-top box, a music player, a video player, a media player, a web pad, a tablet computer system, a game console, or other devices with like capability.","The client device  may be configured to execute various applications such as a search client , a browser , and other applications. The browser  may be executed in a client device , for example, to access and render network pages, such as web pages, or other network content served up by the network page server application . For example, the browser  may be used to interact with the search retrieval application . The client device  may be configured to execute applications beyond browser  such as, for example, email applications, instant message applications, and\/or other applications.","Next, a general description of the operation of the various components of the networked environment  is provided. To begin, the search results builder  creates the search results document collection . The search results document collection  represents all possible search results, from the content database . The search results document collection  is created by executing all possible searches and creating a different document for each set of search results. Thus, the search results builder  performs a search using the search query \u201ca,\u201d which produces a corresponding document \u201ca\u201d that includes information about all entries in the content database  that start with \u201ca.\u201d Similarly, the search results builder  uses the search query string \u201cab\u201d to produce a document \u201cab\u201d that includes information about all entries that start with \u201cab.\u201d The search results builder  iterates in this manner until all search query strings up to a predetermined length have been generated and processed to produce search result documents  for all search query strings.","A search results document  includes at least summary information. For example, if the content database  is a movie database, the summary information may include fields such as title, actor(s), year of release, and an image. The search results builder  may periodically rebuild a new search results document collection .","Once the search results document collection  is built, a user interacts with the search client  to enter characters in a search string. As each character is entered by the user, the search client  builds a corresponding search query string and uses the search query string to retrieve a document from the search retrieval application . In this manner, rather than performing a search in real time, the search retrieval application  instead retrieves search results that were pre-computed by the search results builder  and stored in a single static document. If the search query string produces no search results at all (no match), then the search retrieval application  returns an error code.","When another character is entered, the search client  appends the new character to the old search query string and issues another search query to the search retrieval application , using the longer string. The search client  presents the incremental search results to the user as each document is retrieved. In some embodiments, the search query string takes the form of a Uniform Resource Locator (URL), and the retrieved document takes the form of a JavaScript Object Notation (JSON) file.","If the search produces no results, then the search retrieval application  returns an error code. Some embodiments of the search client  continue to display the previous set of results upon receiving the error code rather than displaying a results list with no items.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIGS. 2A-F","FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["148","106","100","200","200","200","200","200","200","200","200","200","151","106","100","200","200","106","148"],"i":["a","b","c","d","e","f","a","b","c ","a","f "]},"Referring to , the user interface screen includes a search term input field  and a search results list . As the user types into the search term input field , search results are displayed in the search results list . The user interface represents the view seen by the user before any text is entered into the search term input field , so the search results list  is empty.","Moving on to , shown is the user interface screen which is provided by the search client  when the user types the single character \u201ca\u201d into the search term input field . Entry of this first character causes the search client  to generate a search query string including the text provided by the user (\u201ca\u201d) and to send this search query string to the search retrieval application  (). In response, the search retrieval application  returns the document in the search results document collection  () which has a name that matches the search query.","In this example scenario, the content database  is a database of animals containing four entries for animals starting with the letter \u201ca.\u201d Thus, the retrieved search results document  includes information about these four entries, which is shown by the search client  in the search results list . An individual search result may include summary information describing the search result. An individual search result may include one or more links  which point to a network page that includes more detailed information on the search result. The search results may be ranked by popularity. Popularity may be measured, for example, by the number of detail page views for a particular search result.","Turning now to , shown is the user interface screen which is provided by the search client  when the user types in the additional character \u201cn\u201d into the search term input field . Entry of this second character causes the search client  to generate another search query string: \u201can.\u201d This search query string is formed by appending the new character (\u201cn\u201d) to the original text provided by the user (\u201ca\u201d). The search query string is sent to the search retrieval application . In response, the search retrieval application  returns the document in the search results document collection  which has a name that matches the search query (\u201can\u201d).","In this example scenario, the content database  is a database of animals containing two entries for animals starting with the letters \u201can.\u201d Thus, the retrieved search results document  includes information about these two entries, which is shown by the search client  in the search results list .","With reference now to , shown is another user interface screen which is provided by the search client  when the user types the next character \u201ct\u201d into the search term input field , following the characters \u201can\u201d which were typed earlier. Entry of the additional character causes the search client  to generate another search query string: \u201cant.\u201d This search query string is formed by appending the new character (\u201ct\u201d) to the text previously provided by the user (\u201can\u201d). This search query string is sent to the search retrieval application . In response, the search retrieval application  returns the document in the search results document collection  which has a name that matches the search query (\u201cant\u201d).","In this example scenario, the content database  is a database of animals containing two entries for animals starting with the letters \u201cant.\u201d Thus, the retrieved search results document  includes information about these two entries, which is shown by the search client  in the search results list . In this particular example, the additional letter \u201ct\u201d did not change the search results from those produced earlier for \u201can.\u201d","Moving on to , shown is the user interface screen which is provided by the search client  when the user types the next character \u201cl\u201d into the search term input field . Entry of this new character causes the search client  to generate another search query string: \u201canti.\u201d This search query string is formed by appending the new character (\u201cl\u201d) to the text previously provided by the user (\u201cant\u201d). The search query string is sent to the search retrieval application . In response, the search retrieval application  returns an error code, since no document in the search results document collection  has a name that matches the search query (\u201canti\u201d). The search results list  remains unchanged, and so displays the two animals from the earlier search (\u201cantelope\u201d) and (\u201canteater\u201d). Some embodiments of the search client  may highlight, in the search term input field , the character that produced no search results, which provides the user with a visual indication that the current search term may contain a misspelling.","Turning now to , shown is the user interface which is provided by the search client  after the user takes the following actions: the user deletes the \u201cl\u201d; the user enters \u201ce\u201d; and the user enters \u201cl.\u201d The user interface does not change as a result of the deletion of \u201cl,\u201d since the deletion results in the string \u201cant\u201d which was already searched. Nor does the user interface change as a result of the addition of \u201ce,\u201d since the search results document  retrieved using the search string \u201cante\u201d contains the same information as the search results document  retrieved using \u201cant.\u201d","However, the second occurrence of \u201cl,\u201d after \u201ce,\u201d does change the search results, as follows. Entry of the second \u201cl\u201d causes the search client  to generate another search query string: \u201cantel\u201d and send it to the search retrieval application . In response, the search retrieval application  returns the document in the search results document collection  which has a name that matches the search query (\u201cantel\u201d). In this example scenario, the content database  is a database of animals containing a single entry for animals starting with the letters \u201cantel.\u201d Thus, the retrieved search results document  includes information for this entry, which is shown by the search client  in the search results list .","With reference now to , shown is a flowchart that provides one example of the operation of a portion of the search retrieval application  () according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the search retrieval application  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","To begin, at box  the search retrieval application  receives a search query string from a search client  (). The search retrieval application  fulfills this search request from already existing search results document  () in search results document collection  (), as follows. Using a priori knowledge of the format for the search query string, at box  the search retrieval application  maps the search query string to the name of a search results document . The mapping may involve, for example, stripping off or a predetermined leading or trailing portion of the string. For example, the prefix \u201chttp:\/\/\u201d may be removed from the search query string \u201chttp:\/\/sg.media.com\/suggests\/aar,\u201d and the file extension \u201c.JSON\u201d added, to produce the document name \u201csg.media.com\/suggests\/aar.json.\u201d The mapping may also involve extracting a predefined portion of the search query string and inserting the extracted portion elsewhere in the document name. For example, a directory location (\u201ca\u201d) may be obtained from the first character of the filename portion of the search query string (\u201caar\u201d), and that directory location inserted to produce a fully qualified document name (\u201csg.media.com\/suggests\/a\/aar.json\u201d). In some embodiments, the name is not an exact match of the entire document name but is instead a match on part of the document name. For example, the fully qualified document name \u201c\u201ca\/amelie_p\u201d may match the search string \u201camelie_p.\u201d Thus, the search retrieval application  may ignore some predefined portion of the search query string when mapping to a search results document name.","Next, at box  the search retrieval application  retrieves the document having the name obtained at box . In some embodiments, the document is retrieved from the data store  () that is locally accessible to the computing device . However, as described above, in some embodiments the search results document collection  is replicated to a replicated search document collection  () within a content distribution network  (). In such embodiments, the search retrieval application  may cause the search request to be fulfilled from the corresponding document in the replicated search document collection  so as to reduce the response time.","At box , the search retrieval application  determines whether the retrieval at box  was successful. If a document was successfully retrieved at box , then the search retrieval application  continues at box , where the document is returned to the search client  in response to the request at box . If no document having the name obtained at box then the search retrieval application  continues at box , where an error code is returned to the search client  in response to the request at box . The mapping and retrieval described above thus operates to locate a search results document  that matches the search query string, or to notify the search client  that no match exists.","Moving on to , shown is a flowchart that provides one example of the operation of a portion of the search results builder  () according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the search results builder  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","To begin, at box  the search results builder  generates a complete set of all the strings from 1 character to N characters, using a specific character set. The character set may, for example, include alphabetic characters, numeric characters, symbol characters, and\/or combinations thereof. Thus, if the character set includes digits only and N is 3, the complete set of all digit strings from size 1 to 3 is: the 1-character strings \u201c0,\u201d \u201c1,\u201d \u201c2,\u201d . . . \u201c9\u201d; the 2-character strings \u201c00,\u201d \u201c01,\u201d . . . \u201c98,\u201d and \u201c99\u201d; and the 3-character strings \u201c000,\u201d \u201c001,\u201d . . . \u201c998,\u201d and \u201c999.\u201d In some embodiments, the string generation at box  is performed recursively.","The search results builder  then uses each of these strings in a search query of the content database  (). Box  begins an iteration loop by setting the iterator or current string to the first string in the complete set generated at box . Next, at box , the search results builder  queries the content database  for all records having a key beginning with the current string. In some embodiments, the query takes the form of a range query using a binary tree accessor with duplicate keys. Each query in box  produces a set of one or more records in the content database  that match the key.","At box , the search results builder  determines whether the record set returned by the query at box  includes any records. If the record set is empty, then processing continues at box . At box , the search results builder  chooses the next string in the complete set of strings for use in a query, which has the effect of pruning the search tree by abandoning the current path of descent through the tree. Since the query failed, all longer strings starting with the current string will fail also. That is, if the query for \u201cqux\u201d failed, it is axiomatic that the query for \u201cquxa\u201d will fail, as will the query for \u201cquxaa\u201d, and the query for \u201cquxb,\u201d and so on. Therefore, at box , the search results builder  skips over all strings starting with the current string when selecting the string for the next search query. Using the previous example, the string chosen at box  is \u201cquy.\u201d Having moved on to another string, the search results builder  then continues processing at box , where another query is performed, this time using the selected string.","If, however, the search results builder  determines at box  that the query returned one or more records, then processing continues at box . At box , the search results builder  determines whether the record(s) returned by the query is a duplicate of any other record. If a duplicate is found, processing continues at box , where the search results builder  chooses the next string in the complete set of strings for use in a query. The effect of this de-duplication technique is to reduce the size of the final search content database .","If at box  it is determined that the record is not a duplicate, processing continues at box . At box , the search results builder  ranks or sorts the record set by a particular field. Next, at box  the search results builder  creates a search results document  () including one or more fields from those records having a ranking above a predefined threshold. For example, if the content database  includes movies, then the fields may include title, actors, and year of release. A single search results document  includes the selected fields for multiple records returned by the query at box , limiting by the ranking threshold. Thus, if the query returned twenty movies having a key starting with \u201charry,\u201d and the ranking threshold is ten, then the single search results document  created at box  includes the title, actors, and year of release for the top ten movies having a key starting with \u201charry.\u201d The search results document  created by the content database  uses a structured data format. In some embodiments, the search results document  uses JavaScript Object Notation (JSON) format. In some embodiments, the search results document  uses the eXtensible Markup Language (XML) format.","Having created a search results document  from the search query results, at box , the search results builder  adds the search results document  to the search results document collection . The name and\/or path of the search results document  is related to the key which produced the search results. A predetermined leading portion, such as a directory path, and\/or a predetermined trailing portion, such as a file extension, may be added to the search query to produce the document name.","The search results builder  continues processing at box , where the search results builder  moves to the next or successive string in the complete set of strings generated at box . The next string is the string with the next character in the same position, or, if the current character is already the last in the series (e.g., \u201cz,\u201d or \u201c9\u201d), then the next string is the string with the first character in the next position (e.g. the string after \u201cab\u201d is \u201cab\u201d). When box  determines that no more strings remain, the process of  is complete.","The embodiment of  was discussed in terms of generating a complete set of strings and then issuing a succession of search queries by iterating through the strings. In another embodiment, search queries are instead issued as strings are generated, which reduces the amount of storage needed for the strings. In either embodiment, the process can be viewed as traversing a search tree and pruning the tree using one or more techniques such as those described above.","Turning now to , shown is a flowchart that provides one example of the operation of a portion of the search client  () according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the search client  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the client device  () according to one or more embodiments.","To begin, at box , the search client  obtains a character entered by a user into a search query form on a network page. Next, at box  the search client  forms a search query string by adding the new character to the end of the last search query string, taking into account any characters deleted by the user. The string formation at box  may also include canonicalization according to predefined rules. For example, leading spaces may be removed, case may be changed, special characters may be converted to ASCII, spaces may be converted to an underscore, etc.","At box , a search request is formed by prepending a uniform resource locator (URL) to the search query string. Formation of the search request may also include adding directory or path information obtained from the search query string. For example, the first letter of the search query string may be used as a directory. The search request formation at box  may also involve adding a country-code path, based on the configuration of browser  and\/or search client . For example, a configuration for French users may insert the country code string \u201cFR\u201d to produce \u201chttp:\/\/sg.media-imdb.com\/suggests\/FR\/a\/ameliejson.\u201d","At box , the search client  sends the search request generated at box  to the search retrieval application  (). Next, at box , the search client  receives a search results document  () in response to the search request. At box , the search client  generates a network page that includes information contained in the search results document . To this end, the search client  may parse the information in the search results document , extract particular fields, and include these fields on the network page. Next, at box  the search client  renders for display to a user the generated network page.","The process of  repeats as the user enters additional characters into the search query form. In this manner, as each character is entered, the search client  generates a succession of search query strings and sends the query strings to the search retrieval application . Then, as each search results document is received in response to a search query string, the search client  renders for display information in the search results document. The user thus sees search results that are updated each time a character is entered into the search query form. Because the search results are pre-computed as described above, the user perceives relatively little latency between typing a character and seeing search results.","In some embodiments, if at box , the search client  receives an error indication rather than a search results document , the search client  does not update the search results displayed to the user, and does not display an error indication to the user.Instead, the error indication from the search retrieval application  is treated as an indication that the search results for the last search query string are the same as the search results from the previous search query string. In other words, an error indication for the last search query string \u201cante\u201d indicates that the search results for the next-to-last-search query string \u201cant.\u201d In such a case, the search client  does not change the search results for the search query string which returned the error indication. Thus, the user continues to see results for \u201cant\u201d even after typing \u201cante,\u201d which conveys to the user that no new search results have been produced by typing in the additional character.","Referring now to , shown is a schematic block diagram of the computing device  according to an embodiment of the present disclosure. The computing device  includes at least one processor circuit, for example, having a processor  and a memory , both of which are coupled to a local interface . To this end, the computing device  may comprise, for example, at least one server computer or like device. The local interface  may comprise, for example, a data bus with an accompanying address\/control bus or other bus structure as can be appreciated.","Stored in the memory  are both data and several components that are executable by the processor . In particular, stored in the memory  and executable by the processor  are the search retrieval application , the search results builder , the network page server application , and potentially other applications. Also stored in the memory  may be a data store  and other data. In addition, an operating system may be stored in the memory  and executable by the processor . While not illustrated, the client device  also includes components like those shown in , whereby the search client  and the browser  are stored in a memory and executable by a processor.","It is understood that there may be other applications that are stored in the memory  and are executable by the processor  as can be appreciated. Where any component discussed herein is implemented in the form of software, any one of a number of programming languages may be employed such as, for example, C, C++, C#, Objective C, Java, JavaScript, Perl, PHP, Visual Basic, Python, Ruby, Delphi, Flash, or other programming languages.","A number of software components are stored in the memory  and are executable by the processor . In this respect, the term \u201cexecutable\u201d means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory  and run by the processor , source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory  and executed by the processor , or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory  to be executed by the processor , etc. An executable program may be stored in any portion or component of the memory  including, for example, random access memory (RAM), read-only memory (ROM), hard drive, solid-state drive, USB flash drive, memory card, optical disc such as compact disc (CD) or digital versatile disc (DVD), floppy disk, magnetic tape, or other memory components.","The memory  is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, solid-state drives, USB flash drives, memory cards accessed via a memory card reader, floppy disks accessed via an associated floppy disk drive, optical discs accessed via an optical disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","Also, the processor  may represent multiple processors and the memory  may represent multiple memories that operate in parallel processing circuits, respectively. In such a case, the local interface  may be an appropriate network  () that facilitates communication between any two of the multiple processors , between any processor  and any of the memories , or between any two of the memories , etc. The local interface  may comprise additional systems designed to coordinate this communication, including, for example, performing load balancing. The processor  may be of electrical or of some other available construction.","Although the search retrieval application , the search results builder , the search client , and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The flowcharts of , , and  show the functionality and operation of an implementation of portions of the applications described herein. If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor  in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the , , and  show a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more blocks may be scrambled relative to the order shown. Also, two or more blocks shown in succession in flowchart of , , and  may be executed concurrently or with partial concurrence. Further, in some embodiments, one or more of the blocks shown in , , and  may be skipped or omitted. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present disclosure.","Also, any logic or application described herein, including the search retrieval application , the search results builder , the search client , that comprises software or code can be embodied in any non-transitory computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor  in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present disclosure, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer-readable medium can comprise any one of many physical media such as, for example, magnetic, optical, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, memory cards, solid-state drives, USB flash drives, or optical discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the present disclosure can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIGS. 2A-2F","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 6","FIG. 1"]}]},"DETDESC":[{},{}]}
