---
title: Methods, devices and computer program products for confluence of multiple operating systems
abstract: Applications of multiple operating systems are provided with access to hardware resources within a mobile device. An application associated with a primary operating system is provided with access to at least some of the hardware resources via a driver running within a kernel of the primary operating system. An application associated with a secondary operating system is also provided with access to at least some of the hardware resources via the driver running within the kernel of the primary operating system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924986&OS=08924986&RS=08924986
owner: American Megatrends, Inc.
number: 08924986
owner_city: Norcross
owner_country: US
publication_date: 20110901
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure relates generally to computing systems, and more particularly, to providing multiple operating systems with hardware access on a mobile device.","A mobile operating system (OS), also known as a mobile OS, a mobile platform, or a handheld operating system, is the operating system that controls a mobile device or information appliance. A mobile OS is similar in principle to an operating system, such as Windows, Mac OS, or Linux that controls a desktop computer or laptop. However, a mobile OS is currently somewhat simpler and deals more with the wireless versions of broadband and local connectivity, mobile multimedia formats, and different input methods compared with a desktop\/laptop OS.","Typical examples of devices running a mobile operating system are smartphones, personal digital assistants (PDAs), tablet computers and information appliances, e.g., smart devices, which may also include embedded systems, or other mobile devices and wireless devices.","In today's world, having dual mobile operating systems in devices, such as laptops, has become more common as people want to have best of both worlds. Windows has been the primary operating systems for most of these laptops along with any linux based operating systems. Recently, with the increase in popularity of Android in smartphones, the trend is towards pushing Android as the secondary operating systems in notebooks and netbooks. Since Android has the advantage of a mature application market, along with developer support, there is an increasing push from the market to run Android in parallel with Windows. While there have been attempts to run multiple operating systems on personal communication devices, such attempts are cumbersome and suffer from poor performance.","It is with respect to these and other considerations that the disclosure presented herein has been made.","It should be appreciated that this Summary is provided to introduce a selection of concepts in a simplified form, the concepts being further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of this disclosure, nor is it intended to limit the scope of the disclosure.","According to one embodiment, a method provides multiple operating systems with access to hardware resources within a mobile device including a processor. The method includes running, via the processor, a kernel of a primary operating system and running a driver within the kernel of the primary operating system. The method further includes providing at least one application associated with the primary operating system with access to at least some of the hardware resources via the driver running within the kernel of the primary operating system and providing at least one application associated with a secondary operating system with access to at least some of the hardware resources via the driver running within the kernel of the primary operating system.","According to another embodiment, a computing system within a mobile device includes a memory configured to store applications, services, a primary operating system, a secondary operating system, and at least one device driver. The computing system further includes a processor coupled to the memory. The processor is configured to execute the applications and services, the first operating system, the secondary operating system, and the driver. The processor is configured to performs acts including running the driver within a kernel of the primary operating system, providing at least one application associated with the primary operating system with access to the memory and other hardware resources via the driver running within the kernel of the primary operating system, and providing at least one application associated with the secondary operating system with access to the memory and other hardware resources via the driver running within the kernel of the first operating system.","According to another embodiment, a computer program product within a mobile device includes a storage medium upon which instructions are recorded that, when executed by a processor, cause the processor to perform acts. The acts include running a kernel of a primary operating system, running a driver within the kernel of the primary operating system, and providing at least one application associated with the primary operating system with access to at least some of the hardware resources via the driver running within the kernel of the primary operating system. The acts further include providing at least one application associated with secondary operating system with access to at least some of the hardware resources via the driver running within the kernel of the primary operating system.","Detailed exemplary embodiments are disclosed herein. It must be understood that the embodiments described and illustrated are merely examples that may be embodied in various and alternative forms, and combinations thereof. As used herein, the word \u201cexemplary\u201d is used expansively to refer to embodiments that serve as examples or illustrations. The figures are not necessarily to scale and some features may be exaggerated or minimized to show details of particular components. Specific structural and functional details disclosed herein are not to be interpreted as limiting.","Computer operating systems are typically built upon a layered approach. One advantage of the layered operating structure is that each layer of code is given access only to the layer below it. This structure also allows the operating system to be debugged, starting at the lowest layer and adding one layer at a time until the whole system works correctly. Layering also makes it easier to enhance the operating system; one entire layer can be replaced without affecting other parts of the operating system.","Computer operating systems provide different levels of access to resources to different layers. A protection ring is one of two or more hierarchical levels or layers of privilege within the architecture of a computer system. This is generally hardware-enforced by some CPU architectures that provide different CPU modes at the hardware or microcode level. Rings are arranged in a hierarchy from most privileged (most trusted, usually numbered zero) to least privileged (least trusted, usually with the highest ring number). In most operating systems, Ring  is the level with the most privileges and interacts most directly with the physical hardware, such as the CPU and memory.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1","FIG. 1"],"b":["100","140","150","110","3","120","2","130","140","1","150","0"]},"The applications layer  includes various applications, which may be written in JAVA. These applications, include, e.g., a calendar, a contacts list, an email client, SMS program maps, a phone application, a web browser application, etc.","The application framework  is used by developers to access framework application programming interfaces (APIs) and manage the basic functions of the mobile device, such as resource allocation, switching between processes or programs, telephone applications, and keeping track of the mobile device's physical location. The application framework includes various managers, including an activity manager, a window manager, a content provider manager, a view system manager, a package manager, a telephony manager, a resource manager, a location manager, and a notification manager.","The library layer  includes libraries written, e.g., in C, C++, etc., and is used by various systems. The libraries instruct the mobile device how to handle different kinds of data and are exposed to Android developers via the application framework . Libraries may include, e.g., a surface manager, a media framework library, an SQLite library, an Open GL\/ES library, a Free Type library, a WebKit library, an SGL library, an SSL library, and an libc library.","The Android runtime layer , which includes a set of core libraries and a Dalvik Virtual Machine (DVM), is also located in the library layer . The runtime layer  includes the set of base libraries that are required for Java libraries. Every Android application gets its own instance of Dalvik virtual machine. Dalvik has been written so that a device can run multiple virtual machines efficiently with minimal memory.","The Linux kernel layer  includes Android memory management programs, security settings, power management software and several drivers for hardware, file system access, networking, and inter-process-communication. The kernel  also acts as an abstraction layer between the hardware  and the rest of the software stack.","The hardware layer  includes physical hardware including, e.g., a hard drive for storing data, a processor for executing applications, and a memory which may include an operating system which controls scheduling of tasks and access to system resources.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["200","220","210","3","0"]},"The user mode  has four primary responsibilities: special system support processes, services that are server processes, environment subsystems, and user applications. The special support processes include, e.g., the logon process and the session manager. The services that are server processes, include, e.g., the event Log and schedule services. The environment subsystems provide an operating system environment by exposing the native operating system services to user applications.","The user mode includes user applications, such as Win32 applications  as illustrated. The user applications may also include various other types of applications, e.g., Windows 3.1, MS-DOS, POSIX, OS\/2 applications, etc. The applications  may include applications similar to the applications shown in , e.g., various user applications, such as camera applications, a phone application, a browser application etc.","The user mode  also includes services, such as Win32 services . The services may also include other types of services, e.g., Windows 3.1, MS-DOS, POSIX, OS\/2 services, etc. The services  may be considered special types of applications that may be started automatically at system boot, e.g., event logging and scheduling. The services  provide application programming interfaces (APIs) that are specific to the Windows operating system.","Some applications and services in the user mode  form a client\/server relationship, in which the applications are the clients, and the services are the servers. One of the benefits of this type of architecture is that support for other types of applications can be provided by simply adding subsystems. Other applications communicate directly with the executive layer.","In the user mode, software is not able to access hardware directly. Access to hardware is provided to the user mode  via the kernel mode . In the kernel mode , software is able to access the hardware and system data, as well as access all other system resources.","The kernel mode  has the following components: executive , microkernel , kernel mode driver , and Windows hardware abstraction layer (HAL) .","The executive layer  contains executive services , executive components , and an object manager . The executive services  provide Application Programming Interfaces (APIs) for accessing the executive components . Both Win32 applications  and Win32 services  use the executive services  to access the I\/O manager, process manager, and other executive components.","The executive components  contain components that implement memory management, process and thread management, security, I\/O, interprocess communication, and other base operating system services. For the most part, these components interact with one another in a modular, layered fashion.","As shown in , the executive components  include an I\/O system manager that is responsible for dispatching all system I\/O requests, and a security reference monitor that is responsible for controlling which objects have permissions to which resources. Each object has an Access Control List (ACL) that is queried when the object makes a service request. Access to resources is allowed or disallowed according to the rights the module has in the ACL.","The executive components  also include a Local Procedure Call (LPC) manager that handles inter-process communications used to pass messages between processes, and a Virtual Memory Manager (VMM) that manages the virtual address space of each process, shares memory between processes, and protects each process's virtual memory. All I\/O devices, network ports, printers, drives, and so on are mapped to virtual files. These virtual files are referred to as file objects and are managed by the object manager  just like any other object.","The executive components  also include process manager that sees processes as objects. Its responsibility is to create and terminate processes and threads. It also suspends and resumes the execution of threads, and stores and retrieves information about processes and threads.","The executive components  also include a Pnp manager that handles plug and play and supports device detection and installation at boot time and a power manager that deals with power events and notifies affected drivers.","The executive components  further include a windows manager and a Graphic Device Interface (GDI) that provide the graphic user interface (GUI). The windows manager controls the placement and appearance of windows within a windowing system in a graphical user interface. The GDI handles tasks, such as drawing lines and curves, rendering fonts, and handling palettes.","Although not shown, the executive components  may also include additional components, e.g., a cache manager. The cache manager improves the performance of file-based I\/O by causing recently referenced disk data to reside in main memory for quick access. It also defers disk writing by holding the updates in memory for a short time before sending them to disk.","The object manager  handles calls from other executive subject systems, especially system calls. System calls pass through the object manager to gain access to Winnows resources. The object manager  creates, manages, and deletes executive objects. Executive objects are created in the executive layer  and are accessible to the executive and protected subsystems. They can be thought of as message packets that represent items such as processes, threads, semaphores, and other low-level objects.","The microkernel  sits between the executive layer  and the Windows HAL  and provides multiprocessor synchronization, thread and interrupt scheduling and dispatching, and trap handling and exception dispatching. During system startup, it extracts information from the registry, such as which device drivers to load and in what order.","The hardware abstraction layer  includes code associated with the Windows operating system that changes with the hardware that the operating system is being run on. Thus, it is compatible with multiple processor platforms. The hardware abstraction layer  manipulates the hardware  directly.","The hardware layer  includes physical hardware including, e.g., a hard drive for storing data, a processor for executing applications, and a memory which may include an operating system which controls scheduling of tasks and access to system resources.","The kernel mode device drivers  enable the kernel layer  to interact with the hardware layer . Each of the drivers has well defined system routine and interval routes that it exports to the rest of the operating system. The kernel mode drivers  send and receive load parameters and configuration data from the registry.","While the Android architecture and Windows architecture described above are useful for mobile devices for different reasons, there has been a push to have multiple operating systems on a single mobile device. Several attempts have been made to accomplish this.","One approach is to run an Android operating system as a second operating system on a mobile device that is running a Windows operating system. To use this approach, the user needs to shut down Windows to boot Android (and vice versa). This rebooting takes a few minutes, depending on the processor. This rebooting time is cumbersome for the user. Also, this approach requires that drivers be developed separately for Android and Windows, which adds to development costs (which are ultimately passed on to the consumer).","Another approach involves running Android using virtualization technology. While virtualization is a common approach, not all processors have virtualization capability built in. Also, this approaches results in low processor performance.","Yet another approach involves switching between operating systems using S3 technology. This approach has the drawback of having only one operating system running at a time. Also, this approach requires heavy memory usage and BIOS customizations. In addition, this approach requires that drivers be developed separately for Android and Windows.","Another approach involves Dalvik virtualization. This approach has the drawback that applications may not be 100% compatible. Also, this approach would require a lot of changes for every new Android release.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 3","FIG. 3","FIG. 2","FIG. 3","FIG. 3"],"b":"300"},"The architecture  includes software architecture having a user mode layer  and a kernel mode layer . The components in the user mode  may be considered to reside in Ring , the least privileged. The components in the kernel mode  may be considered to run in Ring , the most privileged.","In the user mode, software is not able to access hardware directly. The user mode  includes Window applications , Android Applications  and Windows services, e.g., Win32 services  Windows 3.1, MS-DOS, POSIX, OS\/2 services, etc. The Windows applications  may include various applications, e.g., a camera application, a browser application (e.g., Explorer), a phone application, Notepad, etc. The Windows applications  may include Win32 applications, Windows 3.1, MS-DOS, POSIX, OS\/2 applications, etc. The Android applications  may also include various applications, e.g., a camera application, a browser application, a phone application, etc.","The hardware layer  includes physical hardware including, e.g., a hard drive for storing data, a processor for executing applications, and a memory which may include code for running a Windows operating system to control scheduling of tasks and access to system resources, along with code for executing other software represented in .","Access to hardware is provided to the user mode  via the kernel mode . In the kernel mode , the software is able to access the hardware and system data, as well as access all other system resources.","The kernel mode device drivers  enable the kernel layer  to interact the hardware layer . Also, a driver  is provided for running the Android kernel. Thus, according to exemplary embodiments, the Android OS runs as a Windows driver in the kernel mode .","In the user mode , Windows applications  may access the kernel mode  directly via the Windows driver  or indirectly via the Win32 services , depending on the application. For example, modem application may directly access the modem via the Windows driver , while general Windows applications may access the keyboard using the Win32 services  to dispatch keyboard inputs. Requests for access from the Android applications  are communicated to the Windows services  via a confluence software bus . The Windows services  sends the request to a Windows driver  which accessing the hardware  through a HAL (not shown for simplicity of illustration). The requested hardware resources are then provided to the Android applications  via the driver , the Windows services , and the confluence software bus .","Android application requests that need to be fulfilled by the Android operating system are sent to ether Android kernel running as a windows driver  via the confluence software bus . The Android kernel  fulfills the request that needs to be handled by the Android OS and provides the fulfilled request to the Android applications  via the confluence software bus .","As an example of how the architecture shown in  may work, consider a camera application. If the camera application is accessed via Windows, the Windows camera application requests the camera driver included in the Windows drivers  for a picture. The camera driver access the actual camera in the hardware layer  and provides the picture to the requesting application. If the camera application is accessed via Android, the Android camera application requests the camera hardware layer for a picture, and the request is routed to the camera server services included in the Windows services  via the confluence software bus . A Windows camera server service included within the Windows services  requests the Windows camera driver for a picture. The camera driver accesses the actual camera and provides the pictures to the Windows camera services. The Windows camera service sends the picture to the Android camera application via the confluence software bus .","According to an exemplary embodiment, the architecture  may be included in a mobile device, such as a mobile phone. However, the architecture may also be included in other devices, e.g., a workstation, a telephone, a desktop computer, a laptop, a notebook computer, a server, a handheld computer, a media playing device, a gaming system, a mobile computing device, or any other type and\/or form of computing, telecommunications, or media device that is capable of communication",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIGS. 4 and 5"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 4","FIG. 4"],"b":["307","410","420","324","308","324","430","440","450"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 5","FIG. 5"],"b":["305","510","520","308","530","324","540","550","560","570"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 6","FIG. 3","FIG. 6"],"b":["600","600","600","610","620","620"]},"The computing device  also includes a physical hard drive . The processor  communicates with the memory  and the hard drive  via, e.g., an address\/data bus (not shown). The processor  can be any commercially available or custom microprocessor. The memory is  is representative of the overall hierarchy of memory devices containing the software and data used to implement the functionality of the device . The memory  can include, but is not limited to, the following types of devices: processor registers, processor cache, RAM, ROM, PROM, EPROM, EEPROM, flash memory, SRAMD, DRAM other volatile memory forms, and non-volatile, semi-permanent or permanent memory types; for example, tape-based media, optical media, solid state media, hard disks, combinations thereof, and the like.","As shown in , the memory  may include several categories of software and data used in the device , including applications , a database , an operating system (OS) , and input\/output (I\/O) device drivers . The memory  may also include services, which may consider a special category of applications . As will be appreciated by those skilled in the art, the OS  may include code for any operating system for use with a data processing system, e.g., a Windows OS, Android OS, etc.","The I\/O device drivers  may include various routines accessed through at least one of the OS  by the applications  and services  to communicate with devices, and certain memory components. According to an exemplary embodiment, one of the operating systems, e.g., the Windows OS is run in kernel mode, while another operating system, e.g., the Android OS, is run as driver within the kernel of the other operating system.","The applications  can be stored in the memory  and\/or in a firmware (not shown) as executable instructions, and can be executed by the processor . The applications  include various programs that implement the various features of the device . The database  represents the static and dynamic data used by the applications , the OS , the I\/O device drivers  and other software programs that may reside in the memory.","While the memory  is illustrated as residing proximate the processor , it should be understood that at least a portion of the memory  can be a remotely accessed storage system, for example, a server on a communication network, a remote hard disk drive, a removable storage medium, combinations thereof, and the like. Thus, any of the data, applications, and\/or software described above can be stored within the memory  and\/or accessed via network connections to other data processing systems (not shown) that may include a local area network (LAN), a metropolitan area network (MAN), or a wide area network (WAN), for example.","It should be understood that  and the description above are intended to provide a brief, general description of a suitable environment in which the various aspects of some embodiments of the present disclosure can be implemented. While the description refers to computer-readable instructions, the present disclosure also can be implemented in combination with other program modules and\/or as a combination of hardware and software in addition to, or instead of, computer readable instructions. The term \u201capplication,\u201d or variants thereof, is used expansively herein to include routines, program modules, programs, components, data structures, algorithms, and the like. Applications can be implemented on various system configurations, including single-processor or multiprocessor systems, minicomputers, mainframe computers, personal computers, hand-held computing devices, microprocessor-based, programmable consumer electronics, combinations thereof, and the like.","The law does not require and it is economically prohibitive to illustrate and teach every possible embodiment of the present claims. Hence, the above-described embodiments are merely exemplary illustrations of implementations set forth for a clear understanding of the principles of the invention. Variations, modifications, and combinations may be made to the above-described embodiments without departing from the scope of the claims. All such variations, modifications, and combinations are included herein by the scope of this disclosure and the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 6","FIG. 3"]}]},"DETDESC":[{},{}]}
