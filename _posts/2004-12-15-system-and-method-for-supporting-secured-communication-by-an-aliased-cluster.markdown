---
title: System and method for supporting secured communication by an aliased cluster
abstract: Cluster aliasing is implemented for a cluster of a plurality of computer-based members. The aliased cluster supports secured communication with a non-member node. The cluster aliasing provides an appearance to the non-member node of a common network address for the plurality of members. In supporting the secured communication, a first of the plurality of members is assigned to process secure inbound data directed to the common network address from the non-member node, and a second, different of the plurality of members is assigned to send secure outbound data from the common network address to the non-member node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08364948&OS=08364948&RS=08364948
owner: Hewlett-Packard Development Company, L.P.
number: 08364948
owner_city: Houston
owner_country: US
publication_date: 20041215
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","DESCRIPTION OF RELATED ART","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. Provisional Patent Application Ser. No. 60\/585,476 entitled \u201cSYSTEM AND METHOD FOR SUPPORTING SECURED COMMUNICATION BY AN ALIASED CLUSTER\u201d, filed Jul. 2, 2004, the disclosure of which is hereby incorporated herein by reference.","In general, a cluster is a group of processor-based nodes (e.g., servers and\/or other resources) that act like a single system. That is, clustering generally refers to communicatively connecting two or more computers together in such a way that they behave like a single computer. Clustering is used for parallel processing, load balancing, and\/or fault tolerance (or \u201chigh availability\u201d), as examples. Each node of a cluster may be referred to as a \u201cmember\u201d of that cluster.","Clustering may be implemented, for example, using the TruCluster\u2122 Server product available from Hewlett-Packard Company. Such TruCluster Server is described further in the manual for the TruCluster Server Version 5.1B dated September 2002 and titled \u201cTruCluster Server: Cluster Highly Available Applications.\u201d That manual describes generally how to make applications highly available on a Tru64 UNIX TruCluster Server Version 5.1B cluster and describes generally the application programming interface (API) libraries of the TruCluster Server product.","Because of the sensitivity of much of the information communicated over computer networks, various security mechanisms have been developed for use in authenticating the sender and recipient of information and ensuring that the information is not readable by any unintended recipients. For instance, communication protocol level security mechanisms, such as \u201cIPsec\u201d for the Internet Protocol (\u201cIP\u201d) communication protocol, have been developed. IPsec, short for IP security, is a set of protocols developed by the Internet Engineering Task Force (IETF) to support secure exchange of packets at the IP layer. IPsec has been deployed widely to implement Virtual Private Networks (VPNs). In general, IPsec offers IP-based encryption and packet level authentication.","In view of the above, IPsec is a protocol-level security mechanism that may be used to provide host and network level protection such as authenticating the remote host or gateway and protecting the traffic in route. Communication protocol level security, such as IPsec, has traditionally not been used for communication with a cluster that uses cluster aliasing due at least in part to conflicts between their respective operations. Accordingly, a desire exists for enabling secured communication with a cluster that uses cluster aliasing.","According to at least one embodiment, a method comprises implementing cluster aliasing for a cluster of a plurality of members. The method further comprises supporting, by the aliased cluster, secured communication with a non-member node.","According to at least one embodiment, a system comprises an aliased cluster having a plurality of processor-based devices as members. The aliased cluster supports communication protocol level secured communication with a non-member node.","According to at least one embodiment, a clustered computer system comprises means for performing cluster aliasing to provide an appearance of a common network address for a plurality of members of the cluster. The clustered computer system further comprises means for supporting IPsec secured communication between the aliased cluster and a node that is not a member of the cluster.","According to at least one embodiment, a method of supporting IPsec secured communication by an aliased cluster is provided. The method comprises assigning, for a given IPsec secured communication session with a node that is not a member of the cluster, a role of Inbound-Processor to a member of the aliased cluster, and assigning, for the given IPsec secured communication session, a role of Outbound-Processor to a member of the aliased cluster. The method further comprises publishing the identity of the member assigned the role of Inbound-Processor in a directory that is accessible by all members of the aliased cluster, and publishing the identity of the member assigned the role of Outbound-Processor in a directory that is accessible by all members of the aliased cluster.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["10","11","11","101","102","103","11","104","101","103","104","11","104","101","103","11","101","11","11"]},"In general, a cluster alias is a network address (e.g., an IP address) that makes some or all of the systems (members) in the cluster look like a single system to non-member nodes, rather than individual systems. That is, rather than providing a separate network address for each member of the cluster, cluster aliasing provides a common network address for all (or a selected portion) of the members of the cluster. As an example, a cluster having X number of members may be implemented and various applications may be distributed among its members (e.g., a first application implemented on a first member, a second application implemented on a second member, and so on). Cluster aliasing may be used to provide a common IP address, address \u201cZ,\u201d for the cluster, whereby non-member nodes can communicatively access any of the applications distributed among the cluster members via the cluster's IP address \u201cZ\u201d. Thus, the cluster provides the appearance that the members form a single system on which the various applications are available, and cluster aliasing provides a single IP address for the apparent single system of the cluster. Thus, rather than each cluster member that interfaces to the network having a separate IP address, cluster aliasing creates the illusion that all (or a selected portion) of the members share a single IP address. Of course, in certain implementations members of a cluster may also have individual IP addresses. When accessing address \u201cZ\u201d, unbeknownst to the remote node, the IP address \u201cZ\u201d actually accesses a cluster of nodes.","While shown as a separate element for ease of illustration in , cluster aliasing  may actually be a process distributed across members -. For instance, generally the cluster aliasing mechanism is part of the kernel network stack of each cluster member. When a packet enters or leaves a node, the network stack decides if the packet is cluster-related, and if the packet is cluster-related, the network stack transfers the packet to a cluster alias stack where any special cluster alias operations are performed. Such techniques for implementing an aliased cluster are well-known (e.g., as described further in the manual for the TruCluster Server Version 5.1B dated September 2002 and titled \u201cTruCluster Server: Cluster Highly Available Applications,\u201d see e.g. chapters 3 and 8 thereof), and are therefore not described in greater detail herein. Embodiments for supporting secured communication by an aliased cluster described further herein may be adapted for use with any aliasing technique now known or later developed, and are thus not limited in application to the aliasing technique of the TruCluster Server product.","One or more remote nodes (or \u201cnon-member nodes\u201d), such as node R  in , are capable of communicatively accessing cluster  via communication network  by accessing IP address \u201cZ\u201d. Node R  may, in certain situations, be referred to as a \u201cclient\u201d (with cluster  acting as a server in a client-server type environment), or Node R  may be referred to as a \u201cremote node\u201d (or \u201cnon-member node\u201d) because it is a node (or \u201cprocessor-based device\u201d such as a personal computer (PC), workstation, personal data assistant (PDA), cellular telephone, etc.) that is not included in cluster  but is capable of at least temporarily communicatively coupling to cluster  via communication network . Unless distinguishing descriptive terms accompany either term, the terms \u201cremote node\u201d and \u201cnon-member node\u201d are used interchangeably herein, and each refers to a processor-based device that is not included as a member of a cluster and is capable of at least temporarily communicatively communicating with such cluster. Further, such node (e.g., R ) may itself be a cluster (i.e., a plurality of clustered nodes) in certain implementations. Accordingly, the reference herein to a remote or non-member node is not intended to be exclusively a single node, but is instead intended to also encompass a cluster of nodes (e.g., an aliased cluster of nodes) that effectively form a remote or non-member \u201cnode\u201d.","In this example embodiment of , node R  communicates with cluster  via secured communication . More specifically, in this example embodiment, secured communication  utilizes IPsec for securing the information communicated between node R  and cluster . Thus, this example embodiment provides for IPsec secured communication  with aliased cluster .","Communication network  may be, for example, the Internet or other Wide Area Network (WAN), a local area network (LAN), a wireless network, public (or private) switched telephony network (PSTN), any combination of the above, or any other communication network now known or later developed within the networking arts which permits two or more processor-based devices to communicate with each other. Preferably, communication network  is a packet-switched network that supports communication of information via a suitable protocol, such as IP. Cluster  may be implemented using the TruCluster Server product available from Hewlett-Packard Company, which provides for cluster aliasing . Of course, other clustering techniques and\/or other techniques for providing cluster aliasing that provides the illusion to remote nodes that a common network address exists for all or a selected portion of the members of a cluster that are now known or later developed may be used for implementing cluster  and its cluster aliasing  in other embodiments. Also, while the IP protocol is used for communication between the remote node R  and cluster  in this example, which makes use of the IPsec security feature, other communication protocols and\/or communication protocol level security mechanisms that are now known or later developed may be used in other embodiments for communication between Node R  and cluster .","Communication protocol level security, such as IPsec, has previously not been used for communication with a cluster that uses cluster aliasing due at least in part to conflicts between their respective operations. That is, applying both cluster aliasing and IPsec to the same network traffic has traditionally been avoided. Although cluster aliasing creates the appearance that multiple members have the same IP address, each network connection made using an alias address has its transport-layer endpoint on only one member. IPsec, operating at the IP layer, also creates a form of connection called a Security Association (SA). The SA represents the endpoint of the secured communication (e.g., the endpoint of the encryption and\/or authentication). One difficulty with using IPsec with cluster aliasing is that multiple transport-layer connections may share the same SA, even though the SA and transport-layer connections might all exist on different members of the cluster. Certain embodiments described further herein accommodate these conflicting types of connections without introducing prohibitive processing overhead within the aliased cluster.","As an example of potential problems that may arise in using IPsec for secured communication with an aliased cluster not utilizing embodiments described herein, suppose that remote node R  establishes communication with alias IP address \u201cZ\u201d, as shown in the example of . Remote node R  is unaware that the communication is with a cluster because the cluster aliasing  provides the illusion that node R  is communicating with a single system having a single interface to communication network  at IP address \u201cZ\u201d. While cluster aliasing  provides a single IP address (\u201cZ\u201d) for cluster , initial communication from node R  is received by one of members -. Suppose, for example, such initial communication is received by Member A  and the initial security negotiation is performed between Member A  and node R . That is, the SA is established on Member A  (e.g., encryption keys for secured communication are exchanged between Member A  and node R , policies are negotiated and authentication is verified). Now suppose that once the security is negotiated, secured information is communicated using IPsec from node R  to IP address \u201cZ\u201d, and this secured information is received by Member B . In this case, Member B  did not negotiate the authentication and encryption keys with remote node R  and is thus unable to authenticate and decrypt the received information. That is, Member B  does not possess the SA for communicating with node R .","As a further example, suppose that after the security is negotiated between Member A  and node R , secured information is communicated using IPsec from node R  to IP address \u201cZ\u201d, and this secured information is received by Member A . Further suppose that Member A  authenticates and decrypts the information and determines that Member C  possesses the proper application for processing the information, and so Member A  passes the decrypted information to Member C  for processing, as is a common technique (e.g., for load balancing, etc.) in clusters. Member C  may then attempt to respond to node R , but because the security was not negotiated with Member C , Member C  does not possess the SA for securing the response. Accordingly, Member C  is unable to send the response secured to node R  because Member C  is unaware of the proper SA to be used for that communication.","The above issues are further exacerbated in that IPsec dynamically changes the encryption and authentication keys. That is, security negotiation continues to evolve to dynamically vary the keys during the communication session . Again, rather than addressing these and other issues involved with allowing IPsec secured communication with an aliased cluster, such use of IPsec secured communication with an aliased cluster has traditionally been avoided.","As described further below, embodiments are provided for enabling communication protocol level secured communication, such as IPsec, to be used in communicating with an aliased cluster. As further described below, certain embodiments maintain state information associated with the secured communication in a manner such that the state information is visible cluster-wide (e.g., to all members of the aliased cluster). For instance, in certain embodiments, Internet Key Exchange (\u201cIKE SA\u201d) and IPsec SA information (including inbound and outbound IPsec SAs) are stored to databases such that they are visible (accessible) by all members of the aliased cluster.","As further described, certain embodiments provide a technique that enables distributed processing by the cluster for IPsec communication. Thus, rather than communication that is secured by IPsec being handled by a single node with which security is negotiated, such secured communication may be handled in certain embodiments through distributed processing by a plurality of different members of the cluster. Certain embodiments divide different roles associated with the secured communication and enable the different roles to be distributed among different members of the aliased cluster. For instance, in certain embodiments, roles of Security Negotiator (e.g., IKE-Negotiator), Inbound-Processor, and Outbound-Processor are utilized. The role of Security Negotiator (e.g., IKE-Negotiator) is assigned to the member responsible for negotiating security with the non-member node, which may be, as in IPsec, an ongoing process throughout a communication session with the non-member node (e.g., the encryption\/decryption and authentication keys may dynamically change over time during the communication session). The role of Inbound-Processor is assigned to the member responsible for receiving and decrypting\/authenticating secured inbound communication from the non-member node. The role of Outbound-Processor is assigned to the member responsible for encrypting and sending outbound communication to the non-member node. In certain embodiments, the assignment of these roles may dynamically change from member to member to support the communication protocol level security (e.g., IPsec) in an efficient manner. Additionally, the cluster maintains the illusion to a non-member node that the aliased cluster has a single IP address, although various different members of the cluster may be used in handling of the IPsec communication in a distributed manner.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1"],"b":["21","11","104","22","201"]},"An example of one embodiment for supporting IPsec secured communication by an aliased cluster is described in further detail below in connection with  and . Various terms and\/or acronyms that may be used in describing this example embodiment are first described, as follows:","\u201cActive SA State\u201d refers to the Security Association state that is updated on a per-packet basis, such as the Authentication Header (\u201cAH\u201d) or Encapsulating Security Payload (\u201cESP\u201d) sequence number, and lifetime information. Although there may be multiple copies of an SA in the cluster, the copy that holds the active state is used to apply IPsec protection.","\u201cDirectory\u201d refers to one of several cluster-wide, synchronized, in-memory databases used to track the location of IPsec and IKE state (i.e., the member possessing such state) in the cluster.","\u201cEngine-IPM Message\u201d refers to a message in the communication protocol used between the IKE daemon (which is responsible for managing the IPsec security policy of the host and performing any of the IKE negotiations) and the kernel IPsec engine.","\u201cForwarding PT\u201d refers to a kernel Packet Transform data structure that has been marked to tunnel packets to another cluster member, rather than apply an IPsec transform. A Forwarding PT is associated with a \u201cshadow SA.\u201d","\u201cICS\u201d refers to an Internode Communications Subsystem. ICS provides kernel level communication among nodes of a cluster, in the form of messages and remote procedure calls.","\u201cICS-Tunneling\u201d refers to the process of transferring a network packet from the kernel on one cluster member to the kernel on another. As used in the below example embodiment, this term refers to a transfer that takes place as part of IPsec processing. Similar tunneling over ICS done by the original cluster alias code is referred to as \u201cbase cluster alias tunneling\u201d.","\u201cIDMP\u201d refers to an Inter-Daemon Message Protocol, which is a protocol that is the basis of communication among the IKE daemons in a cluster. It is carried over ICS in the below example embodiment.","\u201cIKE-Connection\u201d refers to the context associated with a Phase 1 and related Phase 2 SAs. IKE-Connections are defined in the IKE daemon. One is created when a cluster node sends or receives the first message of an IKE exchange. An IKE-Connection is deleted when the last SA (Phase 1 or Phase 2) created by the IKE-Connection is deleted. Each IKE-Connection is uniquely identified by the source and destination addresses of the message in the below example embodiment. Depending on how the SPD-connection is defined, there might be more than one IKE-Connection per SPD-connection.","\u201cIKE-Negotiator\u201d refers to the cluster member that carried out the IKE negotiation (Phase 1 and 2). In the below example embodiment, the IKE-Negotiator retains the state needed for IKE communication with the remote node, even if another cluster member assumes responsibility for inbound or outbound IPsec processing. For any given IKE-Connection, there exists a single IKE-Negotiator at any given time in the below example embodiment.","\u201cInbound-Processor\u201d refers to the cluster member responsible for performing IPsec packet transformations for the inbound packets of a Phase 2-Connection. The Inbound-Processor might also be the IKE-negotiator or the Outbound-Processor, but this can change dynamically in the below example embodiment. For any given Phase 2-Connection, there exists a single Inbound-Processor at any given time. However, there may be more than one Inbound-Processor per IKE-Connection.","\u201cIP Routing\u201d is used to identify the forwarding of IP packets done by the base IP stack under control of the routing table. All members of a cluster are enabled for routing in the below example embodiment. Under some circumstances, they may be required to forward packets to each other over the cluster interconnect. Cluster interconnect refers to a private communication link shared by all of the cluster nodes which is used for cluster maintenance and synchronization tasks. This is a different mechanism from ICS-Tunneling, which is used for cluster alias and IPsec processing in the below example embodiment.","\u201cIPM-ICS-Tunneling\u201d refers to a special case of ICS-Tunneling in which an IKE packet received via a socket in the IKE daemon is sent to the kernel to be tunneled to another cluster member.","\u201cIKE Daemon\u201d refers to the IPsec user space component, which includes the policy manager (IPM) and the IKE protocol handler.","\u201cIPsec Engine\u201d refers to the IPsec kernel component responsible for classifying and transforming packets.","\u201cIPM\u201d refers to the IPsec Policy Manager, which is the policy manager component of the IKE daemon.","\u201cNode-Birth\u201d refers to an event detected by the IKE daemon that indicates a new, peer IKE daemon is now participating in the distributed IPsec environment in certain implementations of the below example embodiment.","\u201cNode-Death\u201d refers to an event detected by the IKE daemon that indicates a peer IKE daemon has stopped participating in the distributed IPsec environment in certain implementations of the below example embodiment. The stop may be due to orderly shutdown, failure of the daemon or its cluster member.","\u201cOutbound-Processor\u201d refers to the cluster member responsible for performing IPsec packet transformations for the outbound packets of a Phase 2-Connection. The Outbound-Processor might also be the IKE-Negotiator or the Inbound-Processor for the connection, but this can change dynamically in the below example embodiment. For any given Phase 2-Connection, there exists a single Outbound-Processor at any given time. However, there may be more than one Outbound-Processor per IKE-Connection.","\u201cPhase 1\u201d refers to the initial phase of an IKE negotiation. This phase negotiates the secure, authenticated channel used for further IKE communication and exchanges the information needed to create keying material.","\u201cPhase 2\u201d refers to the second phase of an IKE negotiation. This phase negotiates the Security Associations used for protecting IP traffic.","\u201cPhase 2-Connection\u201d refers to the context associated with the result of a specific IKE Phase 2 negotiation. Associated with the Phase 2-Connection are the SA bundles for applying IPsec packet transformations to the inbound and outbound packets that match the connection. There may be more than one Phase 2-Connection for a given IKE-Connection.","\u201cSA\u201d refers to Security Association. An SA is the result of a Phase 1 or Phase 2 security negotiation in the below example embodiment.","\u201cSA bundle\u201d identifies all the SAs resulting from a single IKE Phase 2 negotiation, for both the inbound and outbound direction.","\u201cShadow SA\u201d refers to a copy of a Security Association that exists elsewhere in the cluster. In the below example embodiment, a shadow SA is identical to a real SA, except that it does not contain the active SA state, and is associated with a Forwarding PT, rather than one which applies an IPsec packet transform.","\u201cSPD\u201d refers to the Security Policy Database.","\u201cSPD-Connection\u201d refers to an IPsec security policy rule as contained in the Security Policy Database (SPD).","\u201cSPI\u201d refers to a Security Parameter Index, which is the protocol-visible identifier for an SA. In the below example embodiment, SPIs assigned by the cluster (i.e. SPIs for inbound packets) are unique cluster-wide so that an incoming IPsec protected packet can be dispatched to the appropriate Inbound-Processor. SPIs are generated in the IPsec policy manager, and used in the IPsec engine.","\u201cTrigger\u201d occurs when the IPsec engine determines that it needs to apply IPsec protection but does not have a suitable SA in the below example embodiment. The triggering packet is copied from the kernel to the policy manager, which initiates an IKE negotiation.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIGS. 3A-3C","FIG. 3A","FIGS. 3A-1","FIG. 3A","FIG. 3A"],"b":["3","2","11","101","102","103","101","102","103","11","104","13","12","11"],"sub":["A","A","A"]},"In the example scenario of , remote node R  initiates a Transmission Control Protocol (\u201cTCP\u201d) connection to the cluster alias address \u201cZ\u201d for cluster . As discussed above with , three cluster members A , B , and C  are members of the alias. The external network  sees the route to the cluster alias via member A  throughout this example of . That is, communication from remote node R  addressed to IP address \u201cZ\u201d is received by member A  throughout the example scenario of . Cluster  and node R  have compatible policies that utilize IPsec encryption in this example. Further, in this example, cluster  determines that the TCP service being accessed runs on member B .","In this example, remote node R  initiates communication with cluster alias IP address \u201cZ\u201d. More specifically, an application executing on remote node R  sends a data packet addressed to IP address \u201cZ\u201d. The outbound IPsec on remote node R  finds no SA that has been established for this communication. Therefore, node R  sends a first IKE message (referred to as \u201cIKE msg \u201d)  addressed to Z to begin IKE Phase 1. Of course, the specific operation of remote node R  may vary in other implementations, and thus the specific operation of node R  (e.g., in starting a new IKE exchange) is not limited to this example implementation. The IKE msg   is received by member A  in this example.","Member A  finds no local state for this exchange. Therefore, Member A  queries (labeled ) IKE directory  to determine if a negotiation for this communication with node R  exists (e.g., whether another member of cluster  has begun negotiating security for this communication). Member A  determines (labeled ) from IKE directory  that no such negotiation exists. Therefore, Member A  claims responsibility for the negotiation (i.e., becomes the IKE-Negotiator) and creates (labeled ) an entry  in IKE directory  that identifies that a negotiation for this communication exists between Member A  and node R  (i.e., the entry identifies that Member A  is the IKE-Negotiator for this security negotiation with node R ). The IKE daemon process on Member A  then processes the received IKE msg  , and responds with IKE msg   from LP address \u201cZ\u201d to node R .","Node R  receives IKE msg  , processes such IKE msg  , and responds with IKE msg   addressed to IP address \u201cZ\u201d. The IKE msg   is received by Member A  in this example. Member A  receives IKE msg   addressed to IP address \u201cZ\u201d and finds a local state for this exchange. That is, there is a non-synchronized local state that handles all the details of the IKE exchange. The IKE Directory  resolves which member has this local state based on certain unique IKE selectors. For this reason, the IKE Directory  is consulted before handling an IKE packet locally if this local state is not already present. Accordingly, in this example, IKE daemon on Member A  processes the received IKE msg   and responds with IKE msg   from IP address \u201cZ\u201d to node R .","The above process of exchanging IKE messages continues (labeled ) until IKE Phase 1 and IKE Phase 2 exchanges are completed. Of course, in some instances, an IKE message directed from node R  to IP address \u201cZ\u201d during this negotiation process may be received by a member of cluster  other than the IKE-Negotiator (Member A  in this example). Turning momentarily to , an example of such a scenario in which IKE msg   is sent to IP address \u201cZ\u201d and received by aliased Member B , rather than being received by IKE-Negotiator Member A  as in the example of . In this example of , upon member B  receiving the IKE msg  , it does not find any local SA state for the exchange and so it queries (labeled ) IKE directory  to determine if a negotiation for this communication with node R  exists (e.g., whether another member of cluster  is the IKE-Negotiator having claimed responsibility for this negotiation). In this case, Member A  has previously claimed responsibility for the negotiation (and is thus termed the IKE-Negotiator) and has created an entry  in IKE directory , as described above with . Accordingly, Member B  determines (labeled ) from IKE directory entry  that Member A  is the IKE-Negotiator for this security negotiation with node R . Therefore, Member B  transfers (labeled ) the received IKE msg   to Member A  whereat the IKE daemon process on Member A  processes the received IKE msg   and responds with IKE msg   from IP address \u201cZ\u201d to node R .","Turning back to , once the IKE Phase 1 and Phase 2 exchanges are complete, node R  creates IKE SA  and IPsec SA  for use in performing the IPsec secured communication with EP address \u201cZ\u201d. Likewise, Member A  creates IKE SA  (with link  between IKE directory entry  and the IKE SA  that it represents) and IPsec SA , including inbound IPsec SA A and outbound IPsec SA B, for use in performing the IPsec secured communication with node R . Thus, Member A  sets itself as the Inbound-Processor and Outbound-Processor for this secured communication with node R . As such, Member A  adds () an entry  for the Phase 2-Connection to the Inbound Directory , and Member A  adds () an entry  to Outbound Directory . As described above, Inbound Directory  and Outbound Directory  are visible cluster-wide. In general, entries  and  identify that the inbound and outbound IPsec SAs for communication with Node R exist on Member A . That is, those entries identify that Member A  is designated as the Inbound-Processor and the Outbound-Processor for secured communication with node R . More particularly, entry  identifies that Member A  possesses the inbound IPsec SA A (and is thus the Inbound-Processor), and entry  identifies that Member A  possesses the outbound IPsec SA B (and is thus the Outbound-Processor).","While in this example, the IKE-Negotiator (Member A ) establishes itself as the Inbound-Processor and Outbound-Processor upon completion of the security negotiation, in other embodiments, such IKE-Negotiator may select some other member of cluster  to be assigned the role of Inbound-Processor and\/or Outbound-Processor. For example, certain load-balancing considerations may be evaluated and used for selectively assigning these roles within aliased cluster . As a further example, depending on how the communication is initiated by node R  (e.g., based on the specific link or requested application accessed by node R ), an intelligent selection of the most appropriate member to be assigned the role of Inbound-Processor and\/or Outbound-Processor may be made.","In the example of , node R  then sends a first IPsec protected data packet  addressed to Z. That is, IPsec protected data packet  is secured (encrypted and authenticated) using node R's outbound SA, IPsec SA . The IPsec protected data packet  is received by aliased Member A  in this example. Member A  receives IPsec protected packet  and authenticates and decrypts () the packet using its inbound SA, IPsec SA A. Member A knows to process the received IPsec protected packet locally because of the local state in its IPsec engine. Member A  determines () the cluster member to process the received packet, which in this example is determined to be Member B . For example, in certain implementations, the received packet passes up the IP stack to base cluster alias code, the cluster alias determines that the service runs on Member B , and the cluster alias tunnels the packet to Member B  using ICS.","Once determined that the authenticated and decrypted data packet is to be processed by Member B , Member A  sends () that authenticated and decrypted data packet to Member B . In certain implementations, Member B  receives the authenticated and decrypted data packet via ICS tunnel and the packet is delivered to the destination TCP service. For instance, Member B  processes () the received packet and prepares a response to node R . Upon attempting to send a response, the IPsec engine running on Member B  finds no local outbound SA state for the response on Member B . For instance, each member of cluster  knows that IPsec is being used because of code present in the network stack that is configured by the IKE daemon based on the configured security policy. Thus, Member B  is aware that IPsec is being used, but Member B  does not have an outbound SA for this communication with node R . Member B  accesses () Outbound Directory  and determines from entry  that Member A  is the Outbound-Processor for this communication. In other words, Member B  determines from entry  that Member A  possesses the active outbound IPsec SA B for use in performing secured communication with node R . Accordingly, Member B  creates () a shadow SA and forwarding packet transform to handle further packets. A forwarding packet transform, in this regard, is an instantiated shadow SA, wherein the packet transform is part of the IPsec engine that is present in the network stack. Normally, the IPsec packet transforms encrypt or authenticate the packets but the forwarding packet transform forwards the packet to the cluster node which has the active SA where the IPsec packet is finally processed. Member B  sends () its response to Member A  (e.g., via ICS-Tunneling).","Member A  receives the response from Member B  (e.g., via ICS tunnel) and applies outbound IPsec processing () to protect the response using the outbound SA B. Member A  then sends the IPsec protected response  to node R . Node R  receives the IPsec protected response  and processes it using its inbound SA, IPsec SA . Various IPsec protected data messages may continue to be exchanged and processed in the above manner.","Of course, in some instances, an IPsec protected data packet directed from node R  to IP address \u201cZ\u201d may be received by a member of cluster  other than Inbound-Processor Member A . Turning momentarily to , an example of such a scenario is shown in which an IPsec protected data packet  is sent to IP address \u201cZ\u201d and received by aliased Member C , rather than being received by aliased Member A  as in the example of . Member C  receives IPsec protected packet  and determines that it does not possess the active SA for authenticating\/decrypting this IPsec protected packet. More specifically, inbound IPsec processing finds no SA for the received packet  on Member C , and so Member C  accesses () Inbound Directory  and determines from entry  that Member A  is the Inbound-Processor for this communication. In other words, Member C  determines from entry  that Member A  possesses the active inbound IPsec SA A for use in performing secured communication with node R . Accordingly, Member C  forwards () the received IPsec protected packet  to Member A  (e.g., via ICS-Tunneling). Upon receiving such packet, Member A  is capable of authenticating\/decrypting () the packet using its inbound IPsec SA A Thereafter, Member A  may handle the authenticated\/decrypted packet by determining which member is to process it, etc., as described above in .","Member C  may, in certain implementations, request from the IKE-Negotiator (Member A  in this example) a copy of the SA bundle for this communication so that Member C  can create a shadow SA  and forwarding packet transform to handle further packets received from node R . The example of  shows Member A  providing () the requested SA bundle to Member C . Without the shadow SA bundle and forwarding packet transform, Member C  can still forward received packets to Member A  by looking up the Inbound-Processor in the Inbound Directory  (as performed for packet  via look-up  in the above example). However, creating shadow SA  on Member C  in accordance with certain embodiments provides a performance enhancement.","While shown as separate elements in the example of , in certain embodiments IKE Directory , Inbound Directory , and Outbound Directory  are virtual. That is, in practice, each member keeps a copy of each directory synchronized across the cluster, in certain embodiments.","Further, in certain embodiments, the IPsec processing occurs in each member in two major components, the member's IKE daemon and the kernel's network stack. The IKE daemon handles IKE negotiations and security policy. The network stack enforces the security policy and performs the actual IPsec packet processing.","Turning to , an operational flow for a member of an aliased cluster according to one embodiment, such as the example embodiment of , is shown. This example flow has two general operations (labeled  and  in ) for performing IPsec secured communication between a non-member node and an aliased cluster. In operational block  (), negotiation of security for protected communication is performed between the cluster and the non-member node. For instance, when using the IPsec security mechanism, an IKE negotiation is performed. In operational block  (), secured communication (e.g., IPsec secured communication) is performed between the cluster and the non-member node. The operations of a cluster member in each of general operations  and  in accordance with one embodiment are further described hereafter in connection with .","In the negotiation operation , a member (Member A in this specific example) receives a negotiation packet (IKE message) from a non-member node in operational block . That is, the non-member node (e.g., node R  of ) sends the negotiation packet to alias address \u201cZ\u201d, and a given member (e.g., Member A) of the aliased cluster receives such packet. Further, in operational block , Member A determines that it has no local state for this negotiation. Therefore, in block , Member A accesses IKE Directory  to determine if an entry for this negotiation exists. If determined that an entry for this negotiation does exist in IKE Directory , then operation advances to block  whereat Member A forwards the received negotiation packet to the IKE-Negotiator member identified in such entry of the IKE Directory . Otherwise, if an entry for this negotiation is determined not to exist in IKE Directory , then operation advances from block  to block  whereat Member A claims responsibility for the negotiation (becomes the IKE-Negotiator for this security negotiation) and creates an entry  in IKE Directory .","In operational block , the IKE daemon process of the IKE-Negotiator processes the received negotiation packet (IKE message) and sends a responsive message (a responsive IKE message) to the non-member node. In block , the IKE-Negotiator determines whether IKE Phase 1 exchanges are complete. That is, the IKE-Negotiator determines whether the security negotiation for IKE Phase 1 with the non-member node is complete. If not, then operation advances to block  whereat the IKE-Negotiator awaits receipt of the next IKE message from the non-member node (either directly or forwarded from another member, as in operational block ). Once determined in block  that the IKE Phase 1 exchanges are complete, the IKE-Negotiator creates IKE SA  in block .","In block , the IKE-Negotiator determines whether the IKE Phase 2 exchanges are complete. If not, then operation advances to block  whereat the IKE-Negotiator awaits receipt of the next IKE message from the non-member node. Once determined in block  that the IKE Phase 2 exchanges are completed, the IKE-negotiator creates inbound and outbound IPsec SAs A and B to become the Inbound-Processor and Outbound-Processor for secured communication with the non-members node (in block ), and the IKE-Negotiator creates (in block ) entries  and  in Inbound Directory  and Outbound Directory , respectively, to publish the identity of the Inbound-Processor and Outbound-Processor to the cluster.","Operation then advances (via Connector \u201cA\u201d in ) to general operational block  for performing secured communication between the aliased cluster and the non-member node. In operational block , a member of the cluster receives an IPsec protected data packet. That is, the non-member node directs an IPsec protected data packet to alias address \u201cZ\u201d, and a member of the cluster associated with that alias address receives the packet. In block , the receiving member determines whether it has any local inbound SA state for this IPsec communication. If not, operation advances to block  whereat the receiving member accesses Inbound Directory  and determines the Inbound-Processor for this communication. If a matching entry (identifying an Inbound-Processor) for this received packet is not found in Inbound Directory , then the packet is dropped in block . Otherwise, in block , the receiving member uses ICS-Tunneling to forward the received packet to the Inbound-Processor identified by the Inbound Directory .","In this example embodiment, the member who originally received the packet then, in block , requests the SA bundle from the IKE-Negotiator for this communication, and upon receiving such SA bundle creates, in block , a shadow SA and forwarding packet transform. Having such a shadow SA and forwarding packet transform provides enhanced performance in the event that this receiving member receives another packet of this communication (e.g., because a lookup of the Inbound-Processor in the Inbound Directory  is not required).","If, in block , the receiving member determines that it possesses the local inbound SA state, operation advances to block  whereat the receiving member determines whether the possessed inbound SA state is a shadow SA. If it is a shadow SA, then the receiving member uses the forwarding packet transform to forward the packet to the Inbound-Processor identified by the shadow SA in block . On the other hand, if determined in block  that the inbound SA state is not a shadow SA, then the receiving member is the Inbound-Processor and thus uses its local SA to process (i.e., authenticate and decrypt) the received packet in block . In block , this Inbound-Processor determines the member in the cluster to process the authenticated\/decrypted packet, and if another member is to process it, the Inbound-Processor forwards the packet to such other member (as with Member A  forwarding the packet to Member B  for processing in the above example of ).","In block , the determined proper member processes the packet and prepares a response to the non-member node. In block  (), the member that prepared the response determines whether it possesses any local outbound SA state for this IPsec protected communication with the non-member node. If not, operation advances to block  whereat the member accesses Outbound Directory  in attempt to determine the Outbound-Processor. If a matching entry for this outbound communication is not found in Outbound Directory , then this member that prepared the response attempts to claim an IKE-Connection to the non-member node in block  in attempt to negotiate an SA for this communication. If this operation fails because an IKE negotiation already exists (with another member), the packet is transferred to the IKE-Negotiator using the ICS-Tunneling mechanism. Thus, in block , the member that prepares the response determines if it is successful in claiming the IKE-Negotiator role. If it is not successful, then this member that prepared the response forwards the response to the existing IKE-Negotiator in block . If the member that prepared the response successfully claims the IKE-Negotiator role, then it handles the IKE processing in block . Then, in block  operation advances (e.g., to block  described below) for using the negotiated outbound SA for sending the response to the non-member node. While various examples are provided herein in which the non-member node initiates communication with the aliased cluster, in certain instances the aliased cluster may initiate the communication with a non-member node. In this instance, a cluster member may initiate IKE negotiation for an SA for such communication, such as in block  in this example.","If a matching entry for this response is found in Outbound Directory  (in block ), then in block  the number that prepared the response uses the forwarding packet transform to forward the response to the Outbound-Processor identified by the Outbound Directory . In this example embodiment, the member that prepared the response, in block , requests the SA bundle from the IKE-Negotiator for this communication. Upon receiving such SA bundle creates, in block , a shadow SA and forwarding packet transform. Having such a shadow SA and forwarding packet transform provides enhanced performance in the event that this receiving member receives another packet of this communication (e.g., because a lookup of the Inbound-Processor in the Inbound Directory  is not required).","On the other hand, if determined in block  that the member that prepared the response possesses the local outbound SA state, operation advances to block  whereat it determines whether the possessed outbound SA state is a shadow SA. If the state is a shadow SA, then the member uses the forwarding packet transform to forward the packet to the Outbound-Processor identified by the shadow SA in block . On the other hand, if determined in block  that the outbound SA state is not a shadow SA, then the member that prepared the response is the Outbound-Processor and thus uses its local SA to encrypt the response and sends this IPsec protected response to the non-member node in block .","For the above cases in which a packet (e.g., response) is forwarded to an Inbound-Processor or to an Outbound-Processor, upon such member receiving the forwarded packet its operation may, in certain implementations, proceed for handling the packet following the example flow beginning at operational block  (). For instance, upon an Inbound-Processor receiving (in block ) an IPsec protected packet that was forwarded from another member, the Inbound-Processor may determine in block  that it has a local inbound SA state, determine in block  that such local inbound SA state is not a shadow SA, and thus proceed to block  whereat it uses its local SA to decrypt the packet, etc.","In certain embodiments, the distributed handling of protected communication by an aliased cluster may be dynamically adapted to improve efficiency. For instance, in certain implementations, continued use of the forwarding packet transform for responses from Member B  to Member A , as in the example of , may result in migration of the active outbound SA B from Member A  to Member B , thereby eliminating the IPsec related tunneling operation for each response generated by Member B .","Turning to , examples of dynamically migrating the IPsec SAs to appropriate cluster members for improving the efficiency of the cluster handling the IPsec protected communication in accordance with one embodiment are shown.  shows an example of migrating the outbound IPsec SA B from Member A  to Member B  in accordance with one embodiment.  shows an example of migrating the inbound IPsec SA A from Member A  to Member C  in accordance with one embodiment.","As described above with the example embodiment of , for a Phase 2-Connection involving a cluster alias address, three IPsec processing roles are defined for a given communication session (e.g., for communicating with node R ): 1) -2) -, and 3) -. By default, when a cluster member becomes the IKE-Negotiator, the cluster member will automatically become the Outbound-Processor and Inbound-Processor upon the completion of Phase-2 negotiation in the example embodiment of . For instance, in the example of , Member A  is the IKE-Negotiator, and upon completion of the security negotiation, Member A  becomes the Outbound-Processor and Inbound-Processor (and is therefore identified in the Inbound Directory and Outbound Directory as possessing the Inbound IPsec SA A and the Outbound IPsec SA B, respectively). However, in some instances the IKE-Negotiator might not be the member generating the majority of outbound traffic for the connection. For example, in , Member B  performs the processing and generates a response for node R . Such traffic requires an extra trip through the ICS-Tunneling mechanism to reach the Outbound-Processor. That is, the response generated by Member B  in the example of  is sent back to Member A , as the Outbound-Processor, to secure (e.g., encrypt) the response to be sent to node R . A similar situation might exist for inbound traffic, especially if there are changes to routes or proxy ARP settings. For instance, in the example of , Member C  receives an inbound packet and forwards it to the Inbound-Processor, Member A . The extra tunneling trips introduce latency and ICS-Tunneling overhead.","To address this issue, certain embodiments, such as that of , allow the processing roles for a given Phase 2-Connection to be split apart. Accordingly, the roles may be dynamically migrated to an optimal member for improved efficiency. In certain embodiments, the location of the IKE-Negotiator role does not change, but the role of Inbound-Processor and Outbound-Processor can be transferred independently from one cluster member to another. This migration can continue over the life of the SA to respond to changing traffic patterns, without interrupting the flow of traffic. An example of dynamically transferring the role of Outbound-Processor in accordance with one embodiment is described hereafter in connection with , and an example of dynamically transferring the role of Inbound-Processor in accordance with one embodiment is described hereafter in connection with .",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 5A","FIG. 3A","FIG. 3A"],"b":["101","101","312","313","313","13","501","101","102","101","101","502","102","13","101","13","102","102","13","101"]},"If determined in block  that Member B , for example, is the optimal member to be the Outbound-Processor, the IPsec engine of Member A  sends a message  to its IKE daemon requesting transfer of the Outbound-Processor role to Member B . Member A  transfers  the outbound IPsec SA B to Member B , and updates  Outbound Directory  to reflect that Member B is now the Outbound-Processor for this communication. For instance, entry  of  is updated in Outbound Directory  to reflect in the resulting modified entry that the outbound IPsec SA (B) is now possessed by Member B .","As a further example of dynamically migrating the Outbound-Processor role to an optimal member of a cluster in accordance with one example implementation, consider the following scenario in which a four-member aliased cluster is implemented via TruCluster, wherein for some example connection (e.g., for communication with a given non-member node, such as node R ), the cluster members have the following roles and responsibilities:\n\n","In the following example, which is illustrated in , the Outbound-Processor role is dynamically transferred from Member A of the cluster to Member D. For simplicity, the following description for this example implementation is in terms of what happens to the SAs involved. When the IKE daemon changes SA state, a corresponding change in the related kernel IPsec packet transform state is assumed. When the IPsec engine initiates a change in state, the change is applied to both the packet transform and the SA in the IKE daemon in this example implementation.","At time t, the Outbound-Processor (Member A) keeps track of the frequency and source of packets ICS-Tunneled to it for IPsec processing. Analyzing the traffic over some period of time, Member A determines that it is optimal for Member D to be the Outbound-Processor. The IPsec engine of Member A sends a message to its IKE daemon requesting transfer of the Outbound-Processor role to Member D. Member A will continue processing the packet that initiated the sequence, and will continue to be the Outbound-Processor at this point.","At time t, the IKE daemon of Member A gets a message from the kernel and sends an IDMP SA transfer \u201crequest\u201d message to the IKE daemon of Member D; and at time t, the IKE daemon of Member D receives the IDMP SA transfer \u201crequest\u201d message. At time t, Member D decides to accept the transfer. The IKE daemon of Member D sends an IDMP SA transfer \u201caccept\u201d message to Member A to accept the responsibility. If, in this example implementation, Member D refuses to be the Outbound-Processor, Member D returns an IDMP SA transfer \u201creject\u201d message. At time t, the IKE daemon of Member A receives the IDMP SA transfer \u201caccept\u201d acknowledgement from member D. Member A keeps track of the transfers it has pending, and associates the \u201caccept\u201d with the correct transfer.","At time t, before moving on to the transfer process, the IKE daemon of Member A first notifies the IKE-Negotiator, Member C, by sending a IDMP SA transfer \u201cstarting\u201d message. The IKE-Negotiator is responsible for clean up if any members involved in the transfer terminate unexpectedly. That is, the IKE-Negotiator attends to appropriate actions for completing and\/or otherwise handling the transfer being performed by such terminated members. If Member C terminates (dies) before or after receiving this message, a generic clean-up process for the death of the IKE-Negotiator cleans up all the related SAs. If Member D dies, the IKE-Negotiator performs the clean-up of the pending transfer list described in connection with time t below.","At time t, the IKE daemon of member A sends a message to the kernel to switch the related outbound SAs' packet transform to stop processing packets locally and forward them to Member D with the related SA state. At time t, the IKE daemon of Member C receives the IDMP SA transfer \u201cstarting\u201d notification message from Member A. As the IKE-Negotiator, member C keeps a list of cluster member pairs that are doing role transfer. This list allows for recovery in case any participating members fail (die) during the transfer.","At time t, the IPsec engine of member A receives the packet transform switch message from its own IKE daemon. Member A freezes the state of the current outbound SAs (i.e. sequence number, byte lifetime, etc.) by changing the packet transform to stop processing packets locally and start forwarding them with the frozen SA state attached. This process is the same as the forwarding packet transform except that the process forwards each related outbound packet to Member D along with the current frozen outbound SAs' state. This approach is intended to ensure a smooth transfer by preventing packets from looping during the time period after Member A starts forwarding and before Member D starts processing the IPsec packets locally (between times t and t). During this period, both Member A and Member D are forwarding IPsec packets for the SA being transferred. Since Member D receives SA state attached to the ICS-Tunneled packet, Member D can update the existing SAs and start processing IPsec packets locally right in the middle of the forwarding packet transform. Therefore, there will not be any prolonged bouncing of packets between Member A and Member D during this period. In the case where Member D is the initiator of the packet, Member D forwards the packet (between times t and t) and tunnels the packets to Member A. Member A then attaches the frozen SAs' state to the tunneled packet back to Member D. Member D then will switch to applying the packet transform in the middle of processing the packet. The time period between times t and t can be extremely short because any packet tunneled by Member A with the frozen SA state attached can cause member D to start processing packets locally.","At time t, whenever Member A needs to tunnel a related packet to Member D, Member A attaches the current state of the related outbound SAs. It is possible there will be multiple packets for these SAs between times t and t. Member D allows for multiple packets and does not update the SAs' state more than once. It is also possible that Member A has no packets for the connection for an extended period. The interval between times t and t could, in some instances, be very long. This interval is not a problem, however. If there are no packets at all for that particular IPsec flow, it should not matter how long the transition lasts. Since the IKE-Negotiator is already aware of the on-going role transfer, it will be able to clean up if any participants fail during this interval.","At time t, the IPsec engine of Member D receives the frozen outbound SAs states from Member A attached to a tunneled packet. At time t, the IPsec engine of Member D updates the existing outbound SAs in the IPsec engine. Member D then switches the processing action from forwarding packets to processing them locally. Finally, Member D performs the IPsec packet transform on the forwarded packet. As mentioned in time t, there might be multiple of this type of packets, and Member D makes sure that it does not update the outbound SAs more than once.","At time t, the IPsec engine of Member D sends the status of the outbound SAs' states to the IKE daemon so that it can update the related data structures. At time t, the IKE daemon of Member D sends an IDMP SA transfer \u201cdone\u201d message to Member A to notify it that the transfer of Outbound-Processor role has completed and that Member D is now the Outbound-Processor. At time t, the IKE daemon of Member D sends an IDMP SA transfer \u201cdone\u201d notification message to the IKE-Negotiator, Member C, to notify it that the role transfer is complete. At time t, the IKE daemon of Member A receives the IDMP SA transfer \u201cdone\u201d message from Member D. At time t, the IKE daemon of Member C receives the IDMP SA transfer \u201cdone\u201d message from Member D. In this example implementation, the events in times t and t could occur in different order.","At time t, the IKE daemon of member C, the IKE-Negotiator, receives the IDMP SA transfer \u201cdone\u201d message and removes the transfer-pairs from its list of pending role transfers. Member C updates the Outbound Directory and all relevant local data structures to indicate the new Outbound-Processor. At time t, upon reception of the IDMP SA transfer \u201cdone\u201d message the IKE daemon of Member A, the initiator of the transfer, sends a notification to the kernel. This notification switches the related outbound SAs' actions to forward. At time t, the IPsec engine of Member A receives the notification message and switches the related outbound SAs to forward. Packets that need to be tunneled to Member D will no longer require the attachment of the frozen SAs' states.","At this point, Members B and C may still be forwarding using an old set of SAs. When packets are ICS-Tunneled between cluster members, the ID for the outbound or inbound SA bundle is attached. This attachment allows the processor (Member A in this case) to determine whether the forwarding member is still using the old SAs. If so, the kernel IPsec engine sends a message to the IKE daemon. The daemon then sends an IDMP SA \u201cdelete\u201d message to the forwarding member to delete the old SAs.","During period of time between t and t, both Members B and C still think that the Outbound-Processor is Member A. They continue to ICS-Tunnel packets for the related IPsec flow to Member A. These packets will not be lost in this example implementation. Rather, Member A tunnels the packets with attachment of the frozen SAs' states to Member D. Also, during this period if either of Members A or D die (fail), a Node-Death mechanism will notify the IKE-Negotiator, Member C. Member C then looks through its pending transfer list and cleans up the surviving node of the transfer pair by deleting its existing SA. If at any point during this cleanup the IKE-Negotiator (Member C) also dies, the normal cleanup performed for the death of an IKE-Negotiator will remove the SAs involved in the role transfer.","After time t, Members B and C still think that Member A is the Outbound-Processor. Packets for the connection are still sent to Member A. Member A continues to tunnel these packets to Member D. However, Member A does not need to attach any SA state because it knows that Member D is already the Outbound-Processor. As described in t, the IKE daemon of Member A also sends an IDMP SA \u201cdelete\u201d message to Member B or C so that they can adjust accordingly. If Member B or Member C continues to generate traffic for the SA, normal outbound packet processing creates a new shadow SA for them pointing to Member D.","Turning now to , an example of dynamically transferring the role of Inbound-Processor in accordance with one embodiment is shown.  shows Member A  resulting from the operation of  described above. Accordingly, Member A  is the IKE-Negotiator (possessing IKE SA ), Outbound-Processor (possessing outbound IPsec SA B), and Inbound-Processor (possessing inbound IPsec SA A) for communication with node R . In operational block , Member A  monitors the frequency and source of inbound packets ICS-Tunneled from other members for IPsec processing. For instance, in the example of , an inbound packet is forwarded from Member C  to Member A . Analyzing the traffic over some period of time, Member A  determines in block  whether another member is an optimal member to be assigned Inbound-Processor (for improved efficiency). For instance, if Member C  is repeatedly receiving inbound packets and forwarding those packets to Member A  for IPsec processing in accordance with the inbound IPsec SA, it may be more efficient to assign Member C  as Inbound-Processor so that Member C  can process the received packets without requiring them to be forwarded to Member A .","If determined in block  that Member C , for example, is the optimal member to be the Inbound-Processor, the IPsec engine of Member A  sends a message  to its IKE daemon requesting transfer of the Inbound-Processor role to Member C . Member A  transfers  the inbound IPsec SA A to Member C , and updates  Inbound Directory  to reflect that Member C is now the Inbound-Processor for this communication. For instance, entry  of  is updated in Inbound Directory  to reflect in the resulting modified entry that the inbound IPsec SA (A) is now possessed by Member C . In accordance with one example implementation, the transfer process for transferring the Inbound-Processor role may be performed in a manner similar to the example scenario described above for the transfer of the Outbound-Processor role.",{"@attributes":{"id":"p-0110","num":"0113"},"figref":"FIG. 7","b":["71","73"]},"In operational block , IPsec secured communication with the non-member node is performed (e.g., IPsec protected data packets are received from and sent to the non-member node). During such secured communication, the members assigned various roles monitor the handling of the communication and determine whether to transfer their assigned roles to another member for improved efficiency. For instance, in block  the Inbound-Processor monitors the frequency and source of inbound packets forwarded from other members. In block , the Inbound-Processor determines whether to transfer its role of Inbound-Processor to another member for improved efficiency in handling the communication. For instance, this determination may include detecting whether the number of inbound packets transferred from a given member exceed a threshold amount (e.g., within a given time frame or as a percentage of the total number of inbound packets received so far, etc.). If the threshold is exceeded for a given member, then the Inbound-Processor may determine it is more efficient to transfer the role of Inbound-Processor to that given member.","If determined in block  that the role of Inbound-Processor should be transferred to another member (e.g., to a determined optimal member for improved efficiency), operation advances to block  whereat the role is transferred to such determined optimal member. In performing the transfer in certain embodiments, the Inbound-Processor may send the inbound IPsec SA for this non-member node communication to the determined optimal member (block ) and update the Inbound Directory to reflect the role change (block ).","As shown, in parallel with the Inbound-Processor monitoring whether to migrate its role to another member (operations -), the Outbound-Processor similarly monitors whether to migrate its role to another member (in operations -). For instance, in block  the Outbound-Processor monitors the frequency and source of outbound packets forwarded from other members. In block , the Outbound-Processor determines whether to transfer its role of Outbound-Processor to another member for improved efficiency in handling the communication. For instance, this determination may include detecting whether the number of outbound packets transferred from a given member exceed a threshold amount (e.g., within a given time frame or as a percentage of the total number of outbound packets sent so far, etc.). If the threshold is exceeded for a given member, then the Outbound-Processor may determine it is more efficient to transfer the role of Outbound-Processor to that given member.","If determined in block  that the role of Outbound-Processor should be transferred to another member (e.g., to a determined optimal member for improved efficiency), operation advances to block  whereat the role is transferred to such determined optimal member. In performing the transfer in certain embodiments, the Outbound-Processor may send the outbound IPsec SA for this non-member node communication to the determined optimal member (block ), and the IKE-Negotiator updates the Outbound Directory to reflect the role change (block ).","Typically with IPsec, the initial Inbound-Processor for a given Phase 2-Connection will likely remain the preferred member for satisfying this role unless there is a change in the proxy ARP location or external routing. When this change happens, all traffic for the connection should eventually enter the cluster through the new member. Therefore, a fairly simple rule can apply: if any member is forwarding a significant percentage of the packets being processed, migrate the Inbound-Processor role to that member. A reasonable threshold might be at 80% of total packets processed, for example. The migration condition should apply over two or three statistics collection intervals before triggering a migration in order to filter out transient routing changes, and there should be a minimum packet count to avoid migration when the total volume of packets is trivially small. The thresholds and intervals are preferably all tuneable.","In certain implementations, the location of the preferred Outbound-Processor depends on which cluster members are generating outbound traffic for the connection. This generation of outbound traffic depends on the type of services (single or multi-instance) that match the connection and the number of servers currently active. A single instance service is a service, such as a mail or web server, which only runs on one cluster member at a time. A multi-instance service is a service, such as a mail or web server, which can run on multiple cluster members at the same time. In certain embodiments, the IKE daemon is a multi-instance service. For multiple services or a multi-instance service the cluster members generating outbound traffic could change frequently. For a single-instance server, the cluster member generating outbound traffic might only change when the service is relocated. The following rule is applied in certain implementations: if any cluster member is tunneling a larger percentage of the total packets than are being generated locally, migrate the Outbound-Processor role to that member. A reasonable threshold might be at 20% greater than the local count, for example The migration condition should apply over a relatively large member of statistics sampling intervals before migrating, on the order of a few minutes total. This type of migration condition should filter out short sessions to multi-instance services. Again, a minimum packet count should be applied as well. The thresholds and intervals are preferably all tuneable.","With cluster aliases, an IKE daemon of certain embodiments will, at times, receive packets that should be processed on a different cluster member. Since IPsec and IKE state are not fully replicated in certain embodiments (such as those of  described above), the IKE daemon may be implemented to efficiently decide whether it should:\n\n","To accomplish this efficient decision-making, three in-memory directories are maintained and kept synchronized across the aliased cluster in certain embodiments. These directories allow certain IPsec and IKE state to be located by all cluster members. In certain implementations, each cluster member has a copy of the directory contents. An example technique of implementing these directories in accordance with one embodiment is described further below.","In one example implementation, the in-memory database mechanism provides for a synchronized datastore, and one or more indices. Each of the directories has a primary index that maps from a directory-specific key to the internal identifier (record number) used to access an entry in the shared datastore. The index is maintained locally and updated in response to changes in the shared datastore.","In addition to its primary index based on the directory-specific key, in this example implementation, each directory contains a secondary index called the \u201crecovery\u201d index. This index is used on node death to locate all the directory entries that contain a reference to the failed (dead) member. One example structure is an array of trees, with one tree for each cluster member. Each leaf of the tree contains the internal identifier (record number) of a datastore record that references the cluster member. The tree structure allows the index to be updated easily as directory entries are added, removed, or modified.","A directory entry might reference more than one cluster member (e.g. the entry might specify the IKE-Negotiator and Outbound-Processor). The corresponding record number would therefore appear in multiple trees in the recovery index. Like the primary index, the recovery index is maintained locally on each member and updated in response to changes in the shared datastore in this example implementation.","With regard to the Outbound Directory, given a packet requiring IPsec protection, the Outbound Directory is used to determine which cluster member, if any, is the Outbound-Processor for the packet in at least one embodiment. In one example implementation, each entry in the directory corresponds to a Phase 2-Connection somewhere in the cluster, and contains at least the following information:",{"@attributes":{"id":"p-0123","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Element","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Packet Selectors","{source address, destination address,"]},{"entry":[{},"protocol, source-port, destination-port}"]},{"entry":[{},"5-tuple associated with the Phase 2-Connection."]},{"entry":["SPD Connection ID","Identifier of the SPD-Connection that created"]},{"entry":[{},"the Phase 2-Connection."]},{"entry":["Outbound-Processor","The cluster member ID of the Outbound-Processor."]},{"entry":["IKE-Negotiator","The cluster member ID of the IKE-Negotiator"]},{"entry":[{},"for the Phase 2-Connection."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"the packet selector data is represented in a special way in this example implementation of the Outbound Directory. It is possible, in this example, to represent \u201cwildcard\u201d values that accommodate the following cases:\n\n","Because of the desire to handle \u201cwildcard\u201d matches, the searching of this directory may be supported as follows: The Outbound Directory is accessed in response to a trigger packet. The trigger includes the number of the SPD-connection matched by the packet. By using the SPD-connection ID as part of the key into the directory, the ordering of the SPD-connections is taken into account. A two-level lookup is used in this example implementation. The key for an entry in the directory includes the ID of the SPD-connection matched by the outbound, plain-text packet; and the {src address, dest address, protocol, src port, dest port} 5-tuple of the outbound, plain-text packet.","The directory's primary index maps the SPD-connection ID to a list of datastore record numbers in this example implementation. Each datastore record (directory entry) in the list is then examined, and the packet selectors compared to those of the outbound packet. The comparison takes into account the \u201cwildcard\u201d values in the packet selectors. If a matching directory entry is found, then a Phase-2 Connection exists for the packet, and the Outbound-Processor and IKE-Negotiator are given by the entry. If no match is found, the searching node will begin a new IKE negotiation.","With regard to the Inbound Directory, given an incoming IPsec protected packet, the Inbound Directory is used to determine which cluster member, if any, is the Inbound-Processor for the packet in accordance with at least one embodiment. In one example implementation, each entry in the Inbound Directory corresponds to a Phase 2-Connection somewhere in the cluster, and contains at least the following information:",{"@attributes":{"id":"p-0128","num":"0138"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Element","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SPI","The SPI of the SA negotiated for the Phase 2-"]},{"entry":[{},"Connection. If the connection creates an SA"]},{"entry":[{},"bundle, the SPI of the outermost SA."]},{"entry":["SPD Connection ID","Identifier of the SPD-Connection that created"]},{"entry":[{},"the Phase 2-Connection."]},{"entry":["Inbound-Processor","The cluster member ID of the Inbound-Processor."]},{"entry":["IKE-Negotiator","The cluster member ID of the IKE-Negotiator"]},{"entry":[{},"for the Phase 2-Connection."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The key used to search this directory is an SPI value, obtained from the outermost IPsec protocol header of the inbound packet in this example implementation. The directory's primary index maps from an SPI value to a datastore record number. The corresponding datastore record (directory entry) identifies the Inbound-Processor and IKE-Negotiator associated with that SPI. SPI values are unique cluster-wide.","With regard to the IKE Directory, given the source and destination IP address of an incoming IKE packet, the IKE Directory is used to determine which cluster member, if any, is the IKE-Negotiator that should process the packet in accordance with at least one embodiment. In one example implementation, each entry in the IKE Directory corresponds to an IKE Connection somewhere in the cluster. In this example implementation, each entry contains at least the following information:",{"@attributes":{"id":"p-0131","num":"0141"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Element","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IKE Packet Addresses","The IP source and destination address of the"]},{"entry":[{},"IKE packets for this IKE Connection."]},{"entry":["SPD Connection ID","Identifier of the SPD-Connection associated"]},{"entry":[{},"with the IKE Connection."]},{"entry":["IKE-Negotiator","The cluster member ID of the member responsible"]},{"entry":[{},"for the IKE Connection."]},{"entry":["Reference Count","Count of the number of Inbound-Directory or"]},{"entry":[{},"Outbound-Directory entries that reference"]},{"entry":[{},"this IKE Connection."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The key used to search this directory is a combined IP source and destination address, obtained from the incoming IKE packet in this example implementation. The directory's primary index maps from the address pair to a datastore record number. The corresponding datastore record (directory entry) identifies the IKE-Negotiator for the packet.","While specific example implementations of the IKE, Inbound, and Outbound Directories are described above, embodiments are not limited to those example implementations, but rather various other techniques for implementing such information to be visible cluster-wide may be utilized.","When implemented via computer-executable instructions, various elements of embodiments described herein for providing an aliased cluster capable of supporting secured communication (e.g., IPsec secured communication) with a client are in essence the software code defining the operations of such various elements. The executable instructions or software code may be obtained from a readable medium (e.g., a hard drive media, optical media, EPROM, EEPROM, tape media, cartridge media, flash memory, ROM, memory stick, and\/or the like) or communicated via a data signal from a communication medium (e.g., the Internet). In fact, readable media can include any medium that can store or transfer information.",{"@attributes":{"id":"p-0135","num":"0145"},"figref":["FIG. 8","FIG. 8"],"b":["800","800","800"]},"In the example computer system , central processing unit (CPU)  is coupled to system bus . CPU  may be any general purpose CPU. CPU  may execute the various logical instructions according to embodiments described herein. For example, CPU  may execute machine-level instructions according to the exemplary operational flows of a member of an aliased cluster as described above.","Computer system  also preferably includes random access memory (RAM) , which may be SRAM, DRAM, SDRAM, or the like. Computer system  preferably includes read-only memory (ROM)  which may be PROM, EPROM, EEPROM, or the like. RAM  and ROM  may hold user and system data and programs, including IKE daemon, IPsec engine, SAs, and at least a portion of distributed databases implementing an IKE Directory, Inbound Directory, and Outbound Directory, as described above.","Computer system  also preferably includes input\/output (I\/O) adapter , communications adapter , user interface adapter , and display adapter . I\/O adapter , user interface adapter , and\/or communications adapter  may, in certain embodiments, enable a user to interact with computer system  in order to input information thereto.","I\/O adapter  preferably connects storage device(s) , such as one or more of hard drive, compact disc (CD) drive, floppy disk drive, tape drive, etc. to computer system . The storage devices may be utilized when RAM  is insufficient for the memory requirements associated with storing data for application programs. RAM , ROM , and\/or storage devices  may be used for storing data for one or more of an IKE Directory, Inbound Directory, and Outbound Directory, as examples, in accordance with the embodiments described above. Communications adapter  is preferably adapted to couple computer system  to network , such as network  described in the above example embodiments.","User interface adapter  couples user input devices, such as keyboard , pointing device , and microphone  and\/or output devices, such as speaker(s)  to computer system . Display adapter  is driven by CPU  to control the display on display device .","It shall be appreciated that the embodiments of implementing an aliased cluster for supporting secured communication as described herein are not limited to the architecture of system . For example, any suitable processor-based device may be utilized for implementing a cluster member, including without limitation personal computers, laptop computers, computer workstations, etc."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3A-3C"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIGS. 4A-4C","FIGS. 3A-3C"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
