---
title: Manager component resource addition and/or resource removal on behalf of distributed software application
abstract: A distributed software application comprises a plurality of software components within a plurality of executables. A manager component for the distributed software application handles: an addition of one or more first resources to the distributed software application on behalf of the distributed software application and/or a removal of one or more second resources from the distributed software application on behalf of the distributed software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07406678&OS=07406678&RS=07406678
owner: Lucent Technologies Inc.
number: 07406678
owner_city: Murray Hill
owner_country: US
publication_date: 20040614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application contains subject matter that is related to the subject matter of the following applications, which are assigned to the same assignee as this application. The below-listed applications are hereby incorporated herein by reference in their entireties.\n\n","The invention relates generally to distributed software applications and more particularly to management of distributed software applications.","In known distributed software applications, software components are distributed among a plurality of executables (i.e., software capsules or software entities). Each of the executables contains one or more software components that perform some portion of the functionality of the distributed software application. As the workload of the distributed software application change over time, the software components perform a startup and\/or a shutdown one or more of the executables. For example, the software components add an executable to cope with an increased workload.","An executable in one example contains a first software component and a second software component that perform separate portions of the functionality of the distributed software application. When an increased workload requires only the first software component and not the second software component, a startup of the executable causes an inefficient allocation of resources for the distributed software application.","As one shortcoming, a software developer must create extra software within the first and second software components to perform the startup and\/or shutdown of the executables. As another shortcoming, the startup of the executables for an increased workload may cause an inefficient allocation of resources.","Thus, a need exists to promote an increase in resource allocation efficiency for increased workload of distributed software applications.","In one embodiment, there is provided an apparatus comprising a manager component for a distributed software application that handles: an addition of one or more first resources to the distributed software application on behalf of the distributed software application and\/or a removal of one or more second resources from the distributed software application on behalf of the distributed software application.","In another embodiment, there is provided a method for receiving a first message that comprises an indication to cause an addition of one or more first resources to an external distributed software application on behalf of the external distributed software application and\/or a removal of one or more second resources of an external distributed software application on behalf of the external distributed software application; performing a validation of the first message; performing the addition of the one or more first resources and\/or the removal of the one or more second resources on behalf of the distributed software application; and updating a configuration file that comprises architecture information about the distributed software application by adding one or more first entries to the configuration file that correspond to the one or more first resources and\/or removing one or second entries from the configuration file that correspond to the one or more second resources.","In yet another embodiment, there is provided an apparatus comprising a reusable management infrastructure for a distributed software application. The distributed software application comprises application software of one or more software components within a plurality of executables that run on one or more processors. The reusable management infrastructure comprises a manager component, one or more executable managers, management support software of the one or more software components, and a configuration file. The manager component handles an addition of one or more first resources to the distributed software application on behalf of the distributed software application and\/or a removal of one or more second resources from the distributed software application on behalf of the distributed software application. The one or more first resources and\/or the one or more second resources comprise one or more of the one or more software components, the plurality of executables, and\/or the one or more processors. The manager component employs one or more of the one or more software components as a proxy for creation of one or more resources that comprise software components. The one or more executable managers handle one or more of startup, shutdown, and\/or monitor procedures of the plurality of executables. The management support software and the application software of the one or more software components are communicatively coupled by an application programming interface generated by a code generator of the reusable management infrastructure. The configuration file comprises information for startup, initialization, maintenance, and\/or shutdown of the distributed software application. The manager component updates the configuration file upon the addition of the one or more first resources and\/or the removal of the one or more second resources.","Turning to , an apparatus  in one example comprises a distributed software application  and one or more management infrastructures . The distributed software application  represents a software application divided among a plurality of executables (i.e., software capsules or software entities). For example, the distributed software application  comprises a plurality of executables , , ,  and . The distributed software application  may run on a single central processing unit (\u201cCPU\u201d) or may be divided between multiple CPUs. For example, the executable  may run on a processor  and the executable  may run on a processor .","The executables , , ,  and  comprise one or more software components , , , , ,  and  of the distributed software application , as described herein. For example, the executable  encapsulates the software components  and  and the executable  encapsulates the software component . Within each of the executables , , ,  and  may be tens, hundreds, or even thousands of other software components (e.g., analogous to the software components , , , , ,  and ).","The distributed software application  comprises a plurality of software components, for example, the software components , , , , ,  and . The software components , , , , ,  and  represent software sub-entities of the executables , , ,  and . For example, the software components , , , , ,  and  represent logical software blocks and\/or software objects. The software components  and  in one example are developed independently and then put together within the executable . For example, the software components  and  are compiled into the executable . The distributed software application  may provide any functionality for a computer system. The distributed software application  in one example comprises a call processing software application. For example, the distributed software application  sets up and\/or tears down telecommunication sessions in a telecommunication network.","The management infrastructure  performs one or more management procedures for the distributed software application . For example, the management infrastructure  provides a reusable software framework for one or more management procedures. For example, the management infrastructure  handles one or more of starting, stopping, initializing, and monitoring the distributed software application , detecting failures of the distributed software application , recovering the distributed software application , propagating state changes about the distributed software application , establishing communication channels between the software components , , , , ,  and , and the like.","The management infrastructure  in one example comprises one or more manager components , one or more executable managers  and  and\/or one or more management support components . The management infrastructure  may run on one or more of the processors , , and\/or a remote processor (not shown). The manager component  in one example handles startup, shutdown, initialization, failure detection, recovery, and other functions for the distributed software application , as will be appreciated by those skilled in the art.","One or more of the components of the management infrastructure , for example, the manager component , the executable managers  and , and the management support software  of the software components , , , , ,  and\/or , in one example detect one or more failures and\/or faults of the distributed software application  and\/or the management infrastructure . In one example, the software component  of the distributed software application  returns a response to the manager component  during initialization that indicates an error. In another example, the manager component  employs a timer to determine a timeout for a message response. For example, the manager component  determines an error has occurred if it has not received a message response from the software component  within a pre-determined time interval, for example, thirty seconds. The components of the management infrastructure  in one example communicate through employment of a fault-tolerant and\/or redundant messaging protocol. For example, the fault-tolerant messaging protocol comprises handshake procedures, delivery confirmations, message timeouts, fault detection procedures, and fault escalation procedures, as will be appreciated by those skilled in the art.","The manager component  comprises a communication interface  for receiving incoming communications. The communication interface  is employable for receiving a configuration file  for the distributed software application . The manager component  may employ other means to receive the configuration file , such as reading the configuration file  directly from a disk or file system. The manager component  may also use the communication interface  for receipt of external system information from an external environment . The external environment  in one example represents other components of the system that are in communication with the manager component . The communication interface  may also receive communications from the executable managers  and , as well as communications from the software components , , , , ,  and . The manager component  is encapsulated with zero or more other software components in an executable . The executable  that contains the manager component  may be run on either of the processors  and .","The manager component  in one example establishes one or more communication channels between the software components , , , , ,  and . In one example, the manager component  establishes a communication channel  between the software component  and the software component . In another example, the manager component  establishes a communication channel  between the software component  and the software component . The manager component  sends one or more messages, for example, the messages  and , to the management support software  of the software components  and , respectively, to establish the communication channels  and .","The executable managers  and  comprise a communication interface  for communication with the manager component . The executable managers  and  in one example receive instruction from the manager component . For example, the executable managers  and  may receive instructions at the communication interface  from the manager component . The executable managers  and  in one example are encapsulated in an executable  and an executable , respectively.","The executable managers  and  monitor executables and\/or software components of the distributed software application  that run on the processors  and , such as the executables , , ,  and  and the software components , , , , ,  and\/or . For example, the executable managers  and  monitor communication channels and\/or diagnostics on behalf of the executables , , ,  and , and the software components , , , , ,  and . Should one or more of the executables , , ,  and  and\/or the software components , , , , ,  and  fail, the respective executable manager informs the manager component  of the failure.","In one example, the management infrastructure  comprises one executable manager per processor. For example, the executable  of the executable manager  runs on the processor . The executable manager  monitors the executables  and  and the software components ,  and . The executable  of the executable manager  runs on the processor . The executable manager  monitors the executables ,  and  and the software components , ,  and .","Each of the software components , , , , ,  and  comprise application software , management support software , a management support software communication interface , and one or more application software communication interfaces . The software components , , , , ,  and  employ the management support software communication interface  to receive communications from the manager component . The software components , , , , ,  and  employ the application software communication interfaces  to receive communications from other software components of the software components , , , , ,  and . An application programming interface (\u201cAPI\u201d)  communicatively couples the application software  with the management support software  in each of the software components , , , , ,  and . The application software  and the management support software  can exchange information through the application programming interface . The manager component  in one example generates the application programming interface  through employment of a code generator.","The software components , , , , ,  and  each perform some portion of the overall functionality of the distributed software application . The software components , , , , ,  and  work together to make the distributed software application  achieve the desired operation. For example, the software components , , , , ,  and  process incoming requests from each other and perform operations to provide the overall functionality.","An application developer creates the application software  of the software components , , , , ,  and  to perform the designated functionality of the software components , , , , ,  and . For example, the application developer creates the application software  of the software components , , , , ,  and  to achieve the overall functionality of the distributed software application . The management support software  of the software components , , , , ,  and  communicatively couples the software components , , , , ,  and  to allow the application software  to perform the functionality of the distributed software application .","To alleviate the application developers from being required to write software into each of the software components , , , , ,  and  for the management procedures, the manager component , the executable managers  and , and the management support software  cooperate to perform the management procedures for the software components , , , , ,  and . A code generator of the management infrastructure  in one example automatically generates the management support software . The code generator of the management infrastructure  employs the configuration file  to create the management support software . For example, the configuration file  comprises connection information and\/or architecture information of the distributed software application . The code generator creates code for the management support software . The code for the management support software  is compiled and linked with the application software  in the software components , , , , ,  and . The management support software  may be different for each of the software components , , , , ,  and , as will be appreciated by those skilled in the art.","One or more of the manager component , the executable managers  and , and\/or the software components , , , , ,  and  in one example comprise a portion of an active\/standby group. Each active\/standby group comprises a first component (i.e. active component) and a second component (i.e. standby component). The first component performs a portion of the overall functionality of the distributed software application  or the management infrastructure  while the second components remain inactive. Upon a failure of the first component, the second component is promoted to an active status. For example, the standby component becomes an active component and begins to perform the portion of the overall functionality. The standby component provides a redundancy in operation of the distributed software application  and\/or the management infrastructure . The active\/standby group promotes a reduction in downtime for the distributed software application  and\/or the management infrastructure , as will be appreciated by those skilled in the art.","Referring to , an illustrative description of exemplary operation of the apparatus  is presented, for explanatory purposes. When a workload of the distributed software application  increases, the manager component  in one example handles an addition of one or more resources to the distributed software application . For example, the manager component  initiates a growth procedure while the distributed software application  is active. Exemplary resources comprise instances of the software components , , , , ,  and\/or , instances of the executables , , ,  and\/or , and\/or additional processors  and . The manager component  handles the addition of the resources on behalf of the distributed software application , for example, on behalf of the application components , as will be appreciated by those skilled in the art. The manager component  receives a first message that comprises an indication to add the resources to the distributed software application . For example, the manager component  receives the first message from the external environment . The manager component  performs a validation of the message, for example, to ensure that it follows a pre-determined message format.","In one example, the resources comprise a new instance of the software component , for example, the software component . The manager component  maintains a set of internal data structures that correspond to each instance of the software components , , , , ,  and  of the distributed software application . Upon an addition of the software component , the manager component  creates a new internal data structure that corresponds to the software component . The manager component  sends a second message to the software component  to cause creation of the software component  inside executable . The software component  acts as a proxy of the manager component  inside the executable . The second message in one example comprises information related to creation of the new instance, for example, a name, class, ID, creation parameters, and\/or communication channel information. The software component  employs the second message to create the software component . Upon completion of the creation, the software component  sends a third message to the manager component  to confirm the completion. The manager component  cooperates with the management support software  of the software component  to initialize the new instance of the software component , as described in SOFTWARE COMPONENT INITIALIZATION IN AN ORDERED SEQUENCE.","In another example, the resources comprise a new instance of the executable . The manager component  in one example makes a determination of which processor to start the executable on, for example, the processor . The manager component  sends a second message to the executable manager  of the processor . The executable manager  performs a startup of the new instance of the executable  on the processor . Upon startup of the new instance of the executable , the executable manager  sends a third message to the manager component  to confirm the startup. The manager component  performs an initialization of the software components of the new instance of the executable , as described in SOFTWARE COMPONENT INITIALIZATION IN AN ORDERED SEQUENCE.","In yet another example, the resources comprise a new instance of the processor . The manager component  sends a message to the new instance of the processor  to cause a startup of a new instance of the executable manager . For example, the manager component  sends a message to an operating system of the new instance of the processor  to execute the executable  on the new instance of the processor .","Referring to , upon a reduction in workload of the distributed software application , the manager component  handles a removal of one or more resources from the distributed software application . For example, the manager component  initiates a degrowth procedure while the distributed software application  is active. The manager component  handles the removal of the resources on behalf of the distributed software application , for example, on behalf of the application components , as will be appreciated by those skilled in the art. The manager component  receives a first message that comprises an indication to remove one or more resources from the distributed software application . For example, the manager component  receives the first message from the external environment . The manager component  performs a validation of the message, for example, to ensure that it follows a pre-determined message format.","In one example, the resources comprise an unneeded instance of a software component, for example, the software component . The manager component  sends one or more second messages to one or more second software components of the distributed software application  to cause an invalidation of the unneeded software component. The second software components in one example comprise a dependency relationship with the unneeded instance of the software component. For example, the software component  comprises a communication channel  with the software component . The manager component  sends a message to the software component  to invalidate the communication channel  upon receipt of the second message.","The manager component  in one example sends one or more third messages to the software component . The software component  stops processing incoming requests and\/or operations, finishes all current requests and\/or operations, and performs a shutdown, as described in SHUTTING DOWN A PLURALITY OF SOFTWARE COMPONENTS IN AN ORDERED SEQUENCE. Upon the shutdown of the software component , the manager component  releases the internal data structure that corresponds to the software component . The manager component  sends a fourth message to the executable manager  to cause the executable manager  to stop a monitor procedure of the software component .","In another example, the resources comprise an unneeded executable, for example, the executable . The manager component  performs a shutdown of the software components within the executable , for example, the software component . In one example, the manager component  performs a shutdown of one or more additional software components based on one or more dependency relationships with the software component , as described in SHUTTING DOWN A PLURALITY OF SOFTWARE COMPONENTS IN AN ORDERED SEQUENCE. Upon shutdown of the software component  and the additional software components, the manager component  sends a second message to the executable manager  of the executable . The executable manager  performs a shutdown of the executable  and returns a confirmation message to the manager component .","In yet another example, the resources comprise a processor. For example, the processor  in one example must be shut down for maintenance. The manager component  makes a determination of software components and executables that run on the processor , for example, the software component  and the executable . The manager component  performs a shutdown of the software components that run on the processor , for example, the software component . In one example, the manager component  performs a shutdown of the software components on the processor  in an ordered sequence based on one or more dependency relationships, as described in SHUTTING DOWN A PLURALITY OF SOFTWARE COMPONENTS IN AN ORDERED SEQUENCE. The manager component  in one example sends a second message to the executable manager  of the processor  to cause a shutdown of the executable . The manager component  in one example sends a third message to the executable manager  to cause a shutdown of the executable manager . In another example, the manager component  sends the third message to an operating system of the processor  to cause the shutdown of the executable manager .","The manager component  in one example handles failure during the addition and\/or removal of the resources. For example, the manager component  handles a failure during the addition of the new instance of the software component . If the failure occurs before the manager component receives the third message that confirms creation of the new instance of the software component , the manager component  releases the internal data structure previously created for the new instance of the software component . If the failure occurs after the manager component has received the third message that confirms the creation, the manager component  initiates the degrowth procedure for the new instance of the software component .","Upon the addition of the resources to the distributed software application  and\/or the removal of resources from the distributed software application , the manager component  in one example performs a load balance procedure. In one example, the manager component  performs a shutdown of an instance of the software component  on the processor  and performs a startup of another instance of the software component  on the processor . In another example, the manager component  performs a shutdown of an instance of the executable  on the processor  and performs a startup of another instance of the executable  on the processor , as will be appreciated by those skilled in the art.","The manager component  in one example performs a simultaneous addition of one or more first resources and removal of one or more second resources for the distributed software application  to perform a handoff between the first and second resources. For example, the manager component  performs a startup of a new instance of the software component  on the processor  to replace a deprecated instance of the software component  on the processor . The manager component  performs the startup of the new instance of the software component . During initialization of the new instance of the software component , the manager component  performs a handoff of the functionality of the deprecated instance of the software component  to the new instance of the software component , for example, to promote a reduction in downtime of the functionality of the software component . Upon completion of the initialization of the new instance of the software component  and the handoff of the functionality to the new instance of the software component , the manager component  performs a shutdown of the deprecated instance of the software component , as will be appreciated by those skilled in the art.","Upon the addition and\/or removal of the resources for the distributed software application , the manager component  updates the configuration file . In one example, upon an addition of the processor  to the distributed software application , the manager component  adds an entry to the configuration file , for example, to a list of available processors for the distributed software application . In another example, upon a removal of an instance of the software component , the manager component  removes an entry of the configuration file  that corresponds to the instance of the software component .","The apparatus  in one example comprises a plurality of components such as one or more of electronic components, hardware components, and computer software components. A number of such components can be combined or divided in the apparatus . An exemplary component of the apparatus  employs and\/or comprises a set and\/or series of computer instructions written in or implemented with any of a number of programming languages, as will be appreciated by those skilled in the art.","The apparatus  in one example employs one or more computer-readable signal-bearing media. The computer-readable signal-bearing media store software, firmware and\/or assembly language for performing one or more portions of one or more embodiments of the invention. Examples of a computer-readable signal-bearing medium for the apparatus  comprise the recordable data storage medium of the management infrastructure . The computer-readable signal-bearing medium for the apparatus  in one example comprise one or more of a magnetic, electrical, optical, biological, and atomic data storage medium. For example, the computer-readable signal-bearing medium comprise floppy disks, magnetic tapes, CD-ROMs, DVD-ROMs, hard disk drives, and electronic memory. In another example, the computer-readable signal-bearing medium comprises a modulated carrier signal transmitted over a network comprising or coupled with the apparatus , for instance, one or more of a telephone network, a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), the Internet, and a wireless network.","The steps or operations described herein are just exemplary. There may be many variations to these steps or operations without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted, or modified.","Although exemplary implementations of the invention have been depicted and described in detail herein, it will be apparent to those skilled in the relevant art that various modifications, additions, substitutions, and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["Features of exemplary implementations of the invention will become apparent from the description, the claims, and the accompanying drawings in which:",{"@attributes":{"id":"p-0012","num":"0020"},"figref":"FIG. 1"}]},"DETDESC":[{},{}]}
