---
title: System and method for generating policy-based audio
abstract: Embodiments of the invention provide a policy-based audio system. The system includes a sound application protocol interface, a configuration module and a speaker driver. The sound application protocol interface receives a set of sound samples generated by an application or event. The configuration module retrieves a first group of one or more parameters, rules and priorities applicable to the application or event. The speaker driver produces an audio output by processing the set of sound samples as a function of the group of one or more configuration parameters, rules and priorities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08768494&OS=08768494&RS=08768494
owner: NVIDIA Corporation
number: 08768494
owner_city: Santa Clara
owner_country: US
publication_date: 20031222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["Embodiments of the present invention relate to audio systems, and more particularly to a policy-based audio system.","Currently, sounds generated by each application running on a computing device (e.g., personal computer) are played over each other. No sound is more important than another when played. Therefore, sound from one application may make it more difficult for a user to hear sound from an application of particular interest to the user. For instance, an alarm may not be over a music application playing a song.","Furthermore, each application may generate sound in one of a number of different formats. The hardware configuration, however, may be optimized to play sound in a particular format. Currently, there is no ready means for converting the format of sounds generated by particular application into a format that matches the hardware configuration, while not applying the conversion algorithm to sounds already generated in the matching format.","Embodiments of the invention provide a system and method for generating policy-based audio for an electronic computing device. One embodiment of the invention provides a policy-based audio system that includes a device driver communicatively coupled to a sound application protocol interface. The system further includes a policy manager communicatively coupled to the device driver. The policy-based audio system also includes a configuration module communicatively coupled between the policy manager and an audio system database. In one embodiment, the computing device is a computer system running applications.","Another embodiment of the invention provides a computer-implemented method of generating policy-based audio output. The audio policy may assign audio priority to applications running on the system and\/or system events. According to the audio priority associated with an application or event, its volume may be adjusted relative to other sounds from other applications and\/or events. The method includes receiving a set of sound samples from an application and\/or operating system (e.g., event generator). A priority applicable to the application and\/or event generating the set of sound samples is retrieved. The sound samples are processed according to the priority applicable to the application and\/or event. The processed sound samples are then played.","Another embodiment of the invention provides a system for generating policy-based audio output. The system includes a sound application protocol interface, a configuration module and a speaker driver. The sound application protocol interface receives a set of sound samples generated by an application. The configuration module retrieves a first group of one or more parameters, rules and priorities applicable to the application. The speaker driver produces an audio output by processing the set of sound samples as a function of the group of one or more configuration parameters, rules and priorities.","Embodiments of the invention also provide a method for generating configuration parameters (e.g., stereo format, multi-channel format and the like), rules (play, mute, solo and the like), position in 3D space (off to the left, behind the user, and the like) and\/or priorities (e.g., high, medium, low and the like) applicable to common applications (e.g., music players, games and the like). Embodiments of the invention also provide a method for a user to specify and\/or modify configuration parameters, rules and\/or priorities applicable to a given application or event. These parameters may be established through user interaction with a graphical user interface.","Accordingly, embodiments of the invention readily enable a sound generated in a first encoding method (e.g., stereo format) to be played in a second encoding method (e.g., surround sound format) based upon one or more configuration parameters associated with the application or event that generates the sound. Embodiments of the invention may enable setting a global process for automatically converting the encoding method of the sound based upon one or more configuration parameters. Embodiments of the invention may advantageously mute or position a selected application or event from playing any sound, or play sound from one application or event to the exclusion of sounds generated by other applications, based upon one or more rules associated with the applications and\/or events that generate the sounds. In addition, embodiments of the invention may advantageously position or volume duck sounds generated by one or more applications and\/or events relative to one or more other applications and\/or events, based upon one or more audio priorities associated with the applications and\/or events that generate the sounds. Hence, embodiments of the invention advantageously apply various audio signal processing to sounds on a per-application or event basis.","Reference will now be made in detail to the embodiments of the invention, examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with these embodiments, it will be understood that they are not intended to limit the invention to these embodiments. On the contrary, the invention is intended to cover alternatives, modifications and equivalents, which may be included within the scope of the invention as defined by the appended claims. Furthermore, in the following detailed description of the present invention, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it is understood that the invention may be practiced without these specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the invention.","Referring to , a block diagram of an electronic audio system, in accordance with one embodiment of the invention, is shown. The platform for such a system may be a computer system or similar electronic device that is capable of making sound (e.g., a game console, smart phone, personal digital assistant and the like). As depicted in , the electronic audio system  includes a sound application programming interface (API) , a device driver (e.g., speaker driver, sound card driver, videocard driver or the like) , a policy manager , a configuration module  and an audio system database . The policy manager basically checks the audio system database  to see what the device driver  should do with sound received from each application - or event.","One or more applications - and the operating system are communicatively coupled to the sound API . The sound API  receives sets of sound samples from one or more of the applications - or events (e.g., operating system) at any given time. The sound API  is communicatively coupled to the device driver . The sound API  provides a high-level interface by which an application - or event can make requests of the device driver . In an exemplary implementation, the sound API  may be DIRECTSOUND for the WINDOWS operating system available from Microsoft of Redmond, Wash. The device driver  is a program routine that contains machine language necessary to render the set of sound samples requested by each application and\/or event -. Accordingly, the device driver  generates an audio output  for driving a soundcard, speakers or the like hardware. The audio output  includes one or more sets of sound samples processed according to one or more configuration parameters, rules and\/or priorities associated with the application or event that generated the particular set of sound samples.","In one embodiment, the policy manager  is communicatively coupled to the device driver . In another embodiment, the policy manager  is implemented as an integral part of the device driver . In yet another embodiment, the policy manager  is implemented as an integral part of the configuration module . In yet another embodiment, the functions of the device driver , the policy manager  and configuration module  are implemented as a single programming routine. The sound API , device driver , policy manager , configuration module  and audio system database  typically execute as one or more background tasks.","The policy manager  in accordance with the present invention is a program routine for causing the device driver  to apply one or more applicable configuration parameters, rules and\/or priorities to the corresponding set of sound samples generated by each application - and\/or event. The configuration module  of  is communicatively coupled to the policy manager . The configuration module  is a program routine for specifying parameters applicable to configuring the audio system . The configuration module also enables specification of rules and priorities applicable to the applications and\/or events - that generate sound. In an exemplary implementation, the configuration module may be NVMIXER available from Nvidia of Santa Clara, Calif.","In one embodiment, fuzzy logic in the configuration module  applies one or more configuration parameters, rules and\/or priorities to applications that generate sound based upon each particular application's class. The fuzzy logic utilizes a knowledge base and inference engine to determine, based upon the class of a particular application, what system defined configuration parameters, rules and\/or priorities should be applied to sound generated by the application or event. In another embodiment, the configuration module  provides a graphical user interface for specifying configuration parameters, rules and\/or priorities by a user. The configuration parameters, rules and priorities may be established on a per-application or event basis. Generation of configuration parameters, rules and\/or priorities may be provided upon installation of the audio system , upon installation of an application -, driver and\/or hardware, and\/or upon initiation by a user. Generation of configuration parameters, rules and\/or priorities may also be provided upon detection of an application or event generating sound for the first time. This may be effected by the automatic display of a graphical user interface for receiving user entered configuration parameters, rules and priorities for a given application or event. In addition, configuration parameter, rules and\/or priorities may also be pre-defined for one or more applications and\/or events. The configuration parameters, rules and priorities are stored in an audio system database , which is communicatively coupled to the configuration module .","Upon receipt of a sound by the device driver , the name of the application - or event playing the sound is passed by the device driver  or sound API  to the policy manager. The policy manager  passes the name of the application - or event playing the sound to the configuration module  and causes the configuration module  to query the audio system database . In response to the query, the configuration module  returns the configuration parameters, rules and\/or priorities applicable to the particular application - or event generating the sound. Thereafter, the policy manager  causes the device driver  to apply the corresponding applicable configuration parameters, rules and\/or priorities when processing each set of sound samples.","For example, a configuration parameter may specify that a particular application generates sound in a first format (e.g., stereo) and that the hardware is configured to play sound in a second format (e.g., surround sound). The configuration parameter may also specify a particular signal-processing algorithm (e.g., 3D positioning, cloning and\/or up-channel conversion) to automatically convert from the first format to the second format. In addition, a rule associated with the particular application may specify that its sound is always played, while sound from another application is always muted. Furthermore, a priority associated with the particular application may specify that the sound from such application is always played at full strength, while sound from all other applications are partially or substantially reduced (e.g., ducked), depending on the relative priorities of the applications generating the sound.","Referring now to , a block diagram of an electronic audio system, in accordance with another embodiment of the invention, is shown. As depicted in , the electronic audio system  includes a sound application programming interface (API)  a speaker driver , a configuration module  and an audio system database . The speaker driver  includes a policy manager . Alternatively, the policy manager  may be included in the configuration module .","The sound API  receives one or more sets of sound samples generated by the applications - and\/or events, at any given time. The sound API  provides a high-level interface by which each application or event - makes a request of the speaker driver  to play its set of sound samples. The policy manager  of the speaker driver  passes the name of the application playing the sound samples to the configuration module .","The configuration module  retrieves a group of configuration parameters, rules and\/or priorities applicable to each application or event -. More specifically, the policy manager  then causes the configuration module  to query the audio system database  to determine one or more configuration parameters, rules and\/or priorities applicable to the given application or event (e.g., ). All of the configuration parameters, rules and\/or priorities stored in the audio system database  are searched to determine those that are applicable to the given application or event (e.g., ) generating the set of sound samples. The configuration module  returns to the policy manager  the configuration parameters, rules and\/or priorities, applicable to each set of sound samples.","The speaker driver  produces an audio output  as a function of the sets of sound samples and the group of configuration parameters, rules and\/or priorities applicable to each application or event -. More specifically, the policy manager  causes the speaker driver  to process each set of sound samples according to the associated configuration parameters, rules and\/or priorities. The audio output  includes the one or more sets of sound samples processed according to the configuration parameters, rule and\/or priorities associated with the particular application or event - that generated each corresponding set of sound samples.","The configuration module  also provides for system generation and\/or user specification of configuration parameters, rules and\/or priorities upon installation of the policy-based audio system , upon installation of an application driver and\/or hardware, and\/or upon initiation by a user. The configuration module  may include fuzzy logic for associating system defined configuration parameters, rules and\/or priorities to a given application or event -. The configuration parameters, rules and\/or priorities may be associated by the fuzzy logic based upon the class of the new application or event.","The configuration module  may also provide a user interface for specification of configuration parameters, rules and\/or priorities and their association to a given application or event -. The user interface may also allow a user to modify configuration parameters, rules and\/or priorities and their associations created by fuzzy logic and\/or previously specified by the user.","For each set of sound samples received by the speaker driver , the policy manager  may also determine if the set of sound samples has been generated by an application or event that has not previously produced sound (e.g., new application). If the set of sound samples are from a new application or event, the configuration module  may generate one or more configuration parameters, rules and\/or priorities based upon the class of the new application or event. An exemplary set of classes may include: 1) system status events; 2) messaging applications; 3) gaming applications, music player applications and video player applications; 4) word processing applications, database applications and spreadsheet applications. The generated configuration parameters, rules and\/or priorities are stored in the audio system database , such that their relationship to the corresponding application or event is maintained. Alternatively, default (e.g., pre-set) configuration parameters, rules and\/or priorities may be associated with the current and future sets of sounds generated by the new application or event.","An exemplary configuration parameter may specify that an application generates sound in a stereo format and that the attached speakers are configured to play sounds in a surround sound format. Another configuration parameter may therefore specify a signal-processing algorithm for generating front right and left, back right and left, and center channels. Yet another configuration parameter would allow an applications' sound to be positioned somewhere in 3D space relative to the priority (further away from the user for lower priority, for example) assigned that application.","An exemplary rule (e.g., play) may specify that whenever a first application is running it is able to play sounds. Another exemplary rule (e.g., mute) may specify that no sounds are ever played from a second application. Yet another rule (e.g., solo) may specify that sounds from all other applications are muted and only a third application is able to play sounds.","A first exemplary priority (e.g., highest) may specify that sound from a first application trumps sound from all other applications. Thus, sound from the first application is played at approximately 100% of available volume. A second priority (e.g., medium) may specify that sound from a second application is played at full volume unless sound from a first priority application is also being played. If sound from a first priority application is also being played, the sound from the second application is played at approximately 80-95% of the available volume. A third priority (e.g., low) may specify that sound from a third application is played at full volume unless sound from a first or second priority application is being played. If sound from a first and\/or second priority application is being played, the sound from the third application is played at approximately 30-70% of the available volume.","If a play rule is associated with the first and second application and a solo rule is associated with the third application, then the sets of sound samples from the third application are played at full volume and the sets of sound from the first and second applications are muted while sets of sounds from the third application are being played.","If multiple applications having the same priority associated with them are generating sound at the same time, the \u201clast run\u201d application may be played at a slightly higher volume than the others. If an application is rapidly \u201cclosing and opening sound\u201d, a specified delay may be allowed to pass before the volume level of sounds generated by other application are restored. Alternatively, a delay before volume ducking occurs may be set.","In an exemplary implementation, a music player application is currently generating a first set of sound samples (e.g., music). An instant message is then received, which causes a messaging application to generate a second set of sound samples (e.g., receipt notification chime). The policy manager causes the device driver to duck a portion of the first set of sound samples (e.g., volume level is decreased to approximately 95%) generated by the music player and plays the second set of sound samples from the messaging application at full volume. Therefore, the user can hear the music, but it is not over-powering the sound being played from the messaging application. After the second set of sound samples from the messaging application are done being played, the remaining portion of the first set of sound samples from the music player are played at full volume.","If a third application thereafter begins generating a third set of sound samples, the policy manager determines the priority of the sound from the third application. If the new sound has the same or lower priority (e.g., medium) as the music player, than the new sound is also ducked with respect to the sound from the messaging application. If the new sound has a higher priority than the sound from the messaging application, sound from the music player may be further ducked or even muted and the sound from the messaging application is also ducked with respect to the new sound.","Referring now to , a flow diagram of a computer-implemented method of generating a policy-based audio output, in accordance with embodiments of the invention, is shown. As depicted in , the method of generating a policy-based audio output includes a means of processing one or more sets of sound samples , -, according to applicable configuration parameters, rules and\/or priorities. The method may optionally include one or more means of creating configuration parameters, rules and\/or priorities -, -.","Optionally at , one or more configuration parameters, rules and\/or priorities are generated (e.g., default, pre-defined) for one or more corresponding applications and\/or events that produce sound. In one embodiment, the configuration parameters, rules and\/or priorities are pre-defined, for example by the manufacturer of a policy-based audio system in accordance with embodiment of the invention. In another embodiment, fuzzy logic associates one or more configuration parameters, rules and\/or priorities with one or more applications and\/or events that make sound, based upon each application's class.","Optionally at , one or more configuration parameters, rules and\/or priorities are specified, by a user for instance, for one or more corresponding applications and\/or events that produce sound. In one embodiment, the user specifies one or more configuration parameters, rules and\/or priorities through a graphical user interface, which may be triggered at application initialization and\/or upon the first time the application is executed.","It is appreciated that the user specification process  may also be utilized to modify the system generated configuration parameters, rules and\/or priorities from process . It is also appreciated that the processes of system generation  and\/or user specification  may be initiated upon installation of a system for generating a policy-based audio output, upon installation of an application, driver and\/or hardware, or upon initiation by the user (e.g., to install or modify configuration parameters, rule and\/or priorities).","At , if one or more configuration parameters, rules and\/or priorities are generated at  or specified at , the one or more configuration parameters, rules and\/or priorities are stored for retrieval and application according to processes  and . The one or more configuration parameters, rules and\/or priorities are stored such that their relationships to the corresponding applications and\/or events are maintained.","At , one or more sets of sound samples generated by one or more applications and\/or events are received. At , one or more applicable configuration parameters, rules and\/or priorities, for each set of sound samples, are retrieved. All of the stored configuration parameters, rules and\/or priorities are queried to determine those that are applicable to a given set of sound samples. At , each set of sound samples are processed according to the applicable configuration parameters, rules and\/or priorities. The configuration parameters, rules and\/or priorities are applied according to the applications and\/or events that are generating the sounds. At , the sets of sound samples processed according to  are played.","Optionally at , for each set of sound samples received, it is determined if the sound is from a new application or event. If the sound is generated by an application or event that has not previously produced sound, one or more configurations parameters, rules and\/or priorities are generated, at optional process . In one embodiment, fuzzy logic associates one or more configuration parameters, rules and\/or priorities with the new application or event, based upon the class of the new application. If one or more configuration parameter, rules and\/or priorities are generated at , the one or more configuration parameters, rules and\/or priorities are stored at .","Referring now to , an exemplary on-screen user interface for use with a policy-based audio system, in accordance with one embodiment of the invention, is shown. The user interface allows a user to create and\/or edit configuration parameters, rules and\/or policies associated with one or more applications and\/or events. As depicted in , the exemplary user interface may include one or more buttons ,  for adding and deleting applications and\/or events to the policy-based audio system. One or more sets of configuration parameters may be displayed , . Each application  or event that is associated with a given set of configuration parameters is displayed in a corresponding configuration identifying area . The application  or event may be identified by name  and\/or icon . One or more rules associated with a given application or event may be displayed in a rule identifying area . One or more priorities associated with the given application or event may be displayed in a priority identifying area .","Upon clicking the add button , a list of all applications loaded on a given computing device and\/or events may be provided in a pop-up dialog box (not shown). Upon selecting a particular application or event, the user may specify one or more configuration parameters. For example, the user may specify that sound from such an application be processed in a pure mode  or a clone mode . In the pure mode , the sound is played in the format generated by the application (e.g., a stereo generated sound is played in a stereo format, and multi-channel generated sound is played in a multi-channel format). In the clone mode , the sound is played in a format different from the format generated by the application (e.g., a stereo generated sound is played in a surround sound format by cloning and up-conversion). A user may also be able to drag and drop, right click, arrow move or the like an application or event in one mode (e.g., ) to another mode (e.g., ), thereby changing the configuration parameters with respect to that application or event.","The user may also select a particular rule, from a pop-up dialog box (not shown), to be applied to a particular application or event. For example, selecting the rule identifying area  may cause the dialog box to pop-up. The dialog box may contain a list of available rules.","The user may also select a priority, from a pop-up dialog box , to be applied to the particular application or event. For example, selecting the priority identifying area may cause the dialog box to pop-up . The third dialog box  may contain a list of available priorities.","An association between a set of configuration parameters, rules and\/or priorities may be deleted by click selecting a corresponding display area associated with the given application or event and then clicking the delete button, right clicking or the like. Upon clicking the apply button the configuration parameters, rules and priorities associated with various applications and\/or events are stored.","Referring now to , a block diagram of an exemplary computing device for implementing embodiments of the invention is shown. The exemplary computing device may be a personal computer, a gaming console, a home entertainment system, a personal digital assistant, a multi-media enabled telephone or the like. As depicted in , the exemplary computing device  includes a bus  for communication information and instructions. One or more processors  are coupled to the bus  for processing information and instructions. One or more memory units  are also coupled to the bus  for storing information and instructions for the processor . The memory unit  may include volatile memory (e.g. random access memory, static RAM, dynamic RAM, and the like), non-volatile memory (e.g. read only memory, programmable ROM, flash memory, EPROM, EEPROM, and the like), mass data storage (e.g. hard disk, optical disk, floppy disk, and the like), and the like.","The computing device  also includes one or more peripheral devices  (e.g. display, keyboard, pointing device, speaker, and the like) coupled to the bus . At least one of the periphery devices  is a speaker , a soundcard, videocard or the like. Optionally, the computing device  may include one or more network interfaces  coupled to the bus . The network interfaces  provides for communicating with other computing devices across a communication channel.","Certain processes and steps of the present invention are realized as a series of instructions (e.g. code) that reside on a computing device-readable medium such as the memory unit , and are executed by the processor . When executed, the instructions cause the processor  to provide an operating system, one or more application programs, a sound application programming interface (API), a speaker driver, a configuration module and an audio system database. It is appreciated that a policy manager may be provided as an independent program routine or an integral part of the speaker driver or the configuration module.","One or more application programs generate sounds and\/or the operating system generates events, which are processed by the sound API, speaker driver, policy manager configuration module and audio system database to generate a policy-based audio output. The policy-based audio output may be played on the speakers  or the like.","In a networked embodiment of the invention, the policy manager and audio database may be provided by a series of instruction that reside on the computing device-readable medium of a first computing device. The one or more application programs, the sound API and the speaker driver may be provided by a series of instruction that reside on the computing device-readable medium of a second computing device. Accordingly, the policy manager and audio database of the first computing device may provide for remote administration of the generation of policy-based audio output by the second computing device.","The foregoing descriptions of specific embodiments of the present invention have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed, and obviously many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the Claims appended hereto and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
