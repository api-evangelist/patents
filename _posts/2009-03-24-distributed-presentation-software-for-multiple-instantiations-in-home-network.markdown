---
title: Distributed presentation software for multiple instantiations in home network
abstract: One and only instance of a video service model component (for example, an electronic program guide (EPG) model description) is executed in a home network gateway, with multiple instantiations of a view/controller module associated with the model module being generated, one for each display device seeking to simultaneously display the video service. In this way the functionality of a single video service model is shared in the network without requiring the underlying model module itself to be replicated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08015589&OS=08015589&RS=08015589
owner: Sony Electronics Inc.
number: 08015589
owner_city: Park Ridge
owner_country: US
publication_date: 20090324
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority from U.S. provisional application 61\/190,988, filed Sep. 3 , 2008.","The present invention relates generally to home networks having multiple display devices requiring multiple instantiations of presentation software.","Recent trends have provided receivers that support not just conventional one-way communication from the signal head end to the receiver, but also two-way communication, to support so-called \u201cinteractive digital video\u201d. Examples of interactive digital video include pay-per-view, in which a receiver user can input certain requests and commands, as well as purchase orders, for pay-per-view programming using the receiver, and video-on-demand, entailing many of the same communication considerations. Also, so-called \u201cswitched digital\u201d can be implemented using two-way receivers. Switched digital in essence allows all the viewers in a particular area to in essence report back to the head end what channel they are viewing, so that, for instance, the head end may take intelligent steps with respect to bandwidth such as ceasing transmission into the area of a channel that is not currently being viewed by anyone in the area and thereby releasing bandwidth for other uses.","Partly to support such two-way interactive digital video, the Open Cable Application Platform (OCAP) has been introduced. In effect, OCAP defines an application platform's basic functionality and standardizes on an API (application program interface). The basic functionality allows applications to be detected on the signal and download dynamically from the signal head-end. The API implemented by the receiver platform allows these downloaded software applications, to execute and communicate with the receiver through a common standard interface to manage the receiver's resources and exploit its functionality. An OCAP interface also allows the application to communicate through the receiver's communication port with the TV signal head end and with the home network. In this way, for example, viewer purchases of video-on-demand may be facilitated through a downloaded VOD application, with the purchased video then transmitted from the head end to the receiver, to be decrypted by the cable card of the receiver and then rendered through the display output.","When multiple users in a same household want to interact with the service simultaneously and independently of each other the industry has chosen the simple path of supporting the execution one instance of the application per user by provisioning a complete OCAP environment per user, requiring the replication of a complete receiver's hardware and middleware per user. Although this approach is very expensive it has the benefit of being very simple in that the OCAP application instances can always rely on all the cable resources of the receiver be available to them at all times and hence don't have to cope with the burden of sharing resources with another instance as each instance executes in its independent OCAP environment.","As explained above, the current approach is very expensive not only because multiple instantiations of a same application needs to be supported, currently requiring multiple independent OCAP environments; but also because each application instance has a considerable memory footprint requiring that memory usage to increase linearly with the number of supported instances.","A method includes splitting the application implementation into two instantiate-able parts. A first part of which only a single instance can exist at all time. And a second piece of which multiple instances can be created to support multiple users. The functionality provided by the first part is than made available and shared amongst the multiple instances of the second part.","As understood herein, in a home network in which multiple presentation devices might be used to present a video service simultaneously and independently of each other, multiple instances of the view\/controller modules must be executed. The view\/controller component represents the software typically accessing the hardware required by the user interface and maintains its state information. As further understood herein, it is desirable to minimize resource usage in a home network, including use of software-implemented model components. The model component represents the software typically accessing the network hardware, its state and maintains the local service representations of the network services.","With the above recognition in mind, a method includes instantiation of one and only instance of a video service model component in a home network accessible and shareable amongst multiple instantiations of the view\/control component. The method includes instantiating at least first and second view\/controller modules each associated with the model component. The first view\/controller module is associated with a first display device to display, on the first display device\/remote control input, a video service embodied by the model component. On the other hand, the second view\/controller module is associated with a second display device\/remote control input to display, on the second display device simultaneously with the first display device, the video service.","The video service may include, e.g., an electronic program guide (EPG), a video on demand (VOD) application, a personal video recorder (PVR) application, etc. The model module would than for example use the network hardware to build the respective meta data databases and make these available to the view\/controller modules. The view\/controller modules may be exported from a home network gateway to the display devices or executed on a home network gateway with a respective result thereof being provided to each respective display device. The network can be an interactive television network such as, e.g., an Open Cable Application Platform (OCAP) network.","In another aspect a system includes processor and a computer readable storage medium bearing instructions executable by the processor for sharing a functionality of a single video service model module among multiple display devices simultaneously in a network without requiring the model module to be replicated.","In another aspect, an apparatus has a processor executing logic including accessing a video service composed of a shareable model module and a non-shareable view\/controller module. The logic includes signaling that the model module may not be replicated and signaling that the view controller module may be replicated or exported multiple times. In non-limiting example embodiment signaling, particularly when the end device is a disk player such as a Blu-Ray\u00ae player, may be accomplished using the principles of the present assignee's co-pending U.S. patent application Ser. No. 12\/355,578, filed Jan. 16, 2009, incorporated herein by reference.","In another embodiment, an apparatus has a processor executing logic including, to support video service applications that have not been split into a model module and a separate view\/controller module, providing a front-end OCAP middleware API on a first display device while using a call to invoke implementation of the front-end OCAP middleware API on a home network gateway associated with a home network on the fly, such that when a call to middleware associated with the front-end OCAP middleware API is detected that is not supported by the middleware, the call is automatically invoked on the gateway.","The details of the present invention, both as to its; structure and operation, can best be understood in reference to the accompanying drawings, in which like reference numerals refer to like parts, and in which:","While OCAP is presented herein as an example environmental application for present principles, it is to be understood that present principles apply to interactive video paradigms including, for example, advanced common application platform (ACAP), multimedia home platform (MHP), Association of Radio Industries and Business (ARIB-B23) (interactive TV protocol in Japan), Ginga-J (interactive TV protocol in Brazil), and Blu-ray Disk Java (BD-J).","Referring initially to , cost in a home network  is reduced by separating a video service application into plural components, one not being replicated to minimize resource requirements and one being replicated as many times a needed to provide the video service simultaneously and independently to display devices in the network  to implement the functionality of the application. More particularly, a single instance is implemented of a shareable video service functionality, whereas multiple module instances of the non-sharable functionality of the service coexist to support independent presentation on multiple rendering devices simultaneously. In this way, the resource requirements for supporting a home environment with multiple presentation devices is reduced using a centralized gateway.","As shown in , the gateway  communicates with a service provider  over a wired or wireless link  such as a satellite link, a coaxial cable, etc. such that television programming and services are provided to the network,  by the service provider , and information may be sent from the gateway  back to the service provider . The network  typically is an in-home network that includes plural components including a gateway device  that communicates with the service provider . The gateway device  may be, without limitation, a computer server, set-top box, Internet router, etc. In any case, the gateway device  typically includes a gateway processor  accessing one or more computer readable storage media  such as but not limited to solid state storage and disk-based storage. The gateway  may also include a television tuner .",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["16","10","24","26","24","28","24","30","32","24","34","34","36"]},"The BD player  may include a display  and a BD player processor  accessing one or more computer-readable storage media . The player processor  may receive user commands from a game controller .","Other components may be included in the network , including, e.g., computers, personal digital assistants, telephony devices, home theaters, disk players, personal video recorders (PVR), etc., each with its own processor, data storage medium, and possibly video display. The gateway  may be implemented by a display device in the network. In any case, the logic herein may be implemented by one or more of the processors described herein.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["16","46","48","50","46","50","46","50","52"]},"OCAP signaling from the service provider in the embodiments shown in  includes signaling that differentiates the signaling of a model module, which is shareable among plural associated view\/component modules, is not to be replicated, from the signaling of a non-shareable view\/controller module associated with the model module may be replicated. Thus, applications are written in modular format with a shareable model module and a non-shareable, replicable view\/controller module.","In the architecture below the API  and communicating therewith is a OCAP middleware layer  containing OCAP middleware (not shown for simplicity) including a local OCAP application management tool, and OCAP front-end communication interface, and a Java virtual machine (VM). The middleware layer  (using, e.g., the Java VM) can communicate with a physical layer  which includes one or more tuners\/demodulators  for receiving video data from the service provider  and communicating the data to a content protection device  such as a cable card for providing conditional access to video and an upstream modulator for communicating back to the service provider head-end equipment. The middleware layer  may communicate with the content protection device . In turn, the content protection device  sends data to a demultiplexer  in a region  that may also include data storage and an interface to the physical layer of the display devices ,  such as a DFAST2 DTCP interface.","Indeed, as shown in  a display device \u201cA\u201d such as the TV  may receive at a demultiplexer  data from the physical layer  of the gateway . The data maybe passed onto a video decoder  and then to a video\/graphics generator , including, e.g., a graphics plane, a video plane, and a background plane. The physical layer of the gateway  communicates with the physical layer of each active display device in the network in accordance with discussion above.","The middleware layer  of the gateway  also typically communicates with a middleware layer  of each active display device to effect, e.g., application signaling using, for instance, Universal Plug-n-Play (UPnP). In order to also support applications that haven't been split in two parts, one running on the front-end OCAP API and one running on the back-end API, one option is to also provide the front-end OCAP middleware API on the display device but using for example Remote Method Invocation (RMI) to invoke the implementation of it on the gateway device. This can be done on the fly, meaning when a call to the middleware is detected that is not supported by the middleware a RMI call would automatically be invoked on the Gateway that has forwarded the application. In any case, the middleware layer  of a display device should typically include, without limitation, a GEM API and a Java AWT for communicating with an OCAP application layer  of the display device and with the graphics library , and a local OCAP application management tool.","As intended by the embodiment of , each video service view\/controller module, one view\/controller module per display device, communicates with respective shared unique instantiation of an associated model -. Thus, for example, a VOD UI  in the display device \u201cA\u201d and a VOD UI  in a display device \u201cB\u201d communicates with the shared VOD model  . Likewise, the EPG GUI  in the display device \u201cA\u201d and the EPG GUI  in the display device \u201cB\u201d both communicate with the EPG model . The PVR GUI  in the display device \u201cA\u201d and the PVR GUI  in the display device \u201cB\u201d communicate with the PVR model . The view\/controller modules code may be stored within the gateway  and then exported to respective display devices in the network  for instantiation thereof by each display device to present the respective video services, in cooperation with information received from the associated one and only one video service model in the gateway device . Centralizing the storage of not only the model module but also the view\/controller module of the application in the gateway again reduces the overall resource requirements compared to storing the application in each display device.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIG. 3"],"b":["16","88","90","92","88","92","88","92","93","93","94","93","94","96","98","12","100","94","100","100","102","104"],"i":"a "},"Furthermore, the physical layer of the gateway may include a graphics proxy  which communicates information received from the API layer  to a rendering engine  of a display device \u201cC\u201d and communicates events received from the display device \u201cC\u201d to its associated graphics proxy. In one embodiment the proxy \/rendering engine  may be implemented based on an \u201cX Window\u201d or \u201cVoodoo\u201d client-server system and their ability to virtualize the back-end resources provided by the remote display devices. Creating a virtual OCAP back-end environment on top of each virtualized back-end resource allows recreating the same application environment as in Example 2, allowing for multiple view\/controller instances to coexist each within their own virtual OCAP back-end environments. These virtual OCAP back-end environments are closely related to the back-end resources and hence the applications instances coexisting in a same virtual environment share these same back-end resources. Although overall there are multiple instances of a same application, there is still only one instance of each application that can coexist in a single virtual OCAP back-end environment. Through this virtualization, the support of multiple instances of a same application has no impact on the complexity of the applications themselves as they remain unaware of the other instances. For example when one application wants to communicate with another application through Inter Xlet Communication (IXC), it can still use the organization id and application id to identify the application. It is up to the middleware to identify the precise instance based on the commonly shared virtual OCAP back-end environment.","The engine  drives the back-end resources associated with the four \u201cgraphical content\u201d pipelines processing the subtitles, background, video and application graphics content and mapping them in a controllable way onto single screen. The back-end resources may include the demultiplexer, the Audio\/Video\/Subtitle and Background decoders, graphics compositor, clip\/scale and positioning hardware and an alpha blender. The engine  may receive its background\/Graphics content and commands from its associated graphics client on the gateway and send events back to the gateway. As the data exchanged over the home network might contain transactional information the path may be encrypted using for example an ssh session. The gateway public host key may also be stored in the display devices for automating subsequent session setup. The audio, video and subtitle decoders  all receive their data from a display demultiplexer , which in turn receives information from the gateway demultiplexer  as shown. These contents may require some type of link protection, like DTCP\/IP.","In the embodiment shown in , multiple view\/controller modules can be provided, one for each device \u201cC\u201d, \u201cD\u201d seeking to render a video service simultaneously with each other, but in contrast to  the video-controller modules are maintained at the gateway with their outputs being sent to the display devices \u201cC\u201d, \u201cD\u201d. Specifically, when the devices \u201cC\u201d, \u201cD\u201d wish to present a VOD GUI at the same time as each other, the VOD model  communicates with respective plural instantiations ,  of an associated VOD view\/controller module. Likewise, the EPG model  communicates with EPG GUI ,  in the event that both devices \u201cC\u201d, \u201cD\u201d wish to present an EPG GUI, while the PVR model  communicates with PVR GUI ,  in the event that both devices \u201cC\u201d, \u201cD\u201d wish to present a PVR GUI.","Block  of  indicates that when a display device in the network  wishes to present a video service as indicated by, e.g., the receipt of UPnP request to access a service from a gateway device, the appropriate view\/controller module is uniquely instantiated within the OCAP back-end environment, virtual or not, associated with the display device desiring to present the video service. At block  when the embodiment of  is used, the view\/controller modules are exported to each requesting display device. Subsequently, the view\/controller module instances communicate with the single model module instance at the gateway as needed to render the service.","In contrast, when the architecture of  is used the logic moves from block  to block , wherein the gateway executes the view\/controller modules in cooperation with the model module. The output of each view\/controller module is then sent to its respective display device for presentation of the video service.","Signaling for applications that require multiple instantiation may be differentiated from applications that require single instantiation. An example way to differentiate between applications that require a different instance per presentation device from applications that require a single instance is to define a new flag and inserted it in the XAIT.","While the particular DISTRIBUTED PRESENTATION SOFTWARE FOR MULTIPLE INSTANTIATIONS IN HOME NETWORK is herein shown and described in detail, it is to be understood that the subject matter which is encompassed by the present invention is limited only by the claims."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
