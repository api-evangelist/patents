---
title: Application programming interface for connecting a platform independent plug-in to a web browser
abstract: Embodiments of the present invention relate to the implementation of an Application Programming Interface (API) that enables platform independent plug-ins to work with browser applications. In one or more embodiments of the present invention, the API allows platform independent plug-ins to use XPCOM (Cross Platform Component Object Model), a technology that allows software components of different various programming languages to communicate. In one or more embodiments of the present invention, the API enables platform independent plug-ins to take advantage of existing BlackConnect and Scriptable Plug-In API technologies to integrate with the native plug-in API. Embodiments of the present invention ensures backward code compatibility by allowing the current platform independent plug-in API and browser API to remain unchanged. Furthermore, embodiments of the present invention enables platform independent plug-ins to communicate and use components created in native programming languages such as C++. This promotes component reuse and eases the development effort.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07069562&OS=07069562&RS=07069562
owner: Sun Microsystems, Inc.
number: 07069562
owner_city: Palo Alto
owner_country: US
publication_date: 20011212
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["Portions of the disclosure of this patent document contain material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","1. Field of the Invention","The present invention relates to an Application Programming Interface (API) that allows platform independent plug-ins to work with native web browsers.","2. Background Art","Plug-ins are software modules that extend functionality of a web browser. A common use of plug-ins is to extend the browser support for specialized content such as animation. As browser makers cannot account for all the types of content that are used on the web, plug-ins provide a mechanism for content makers to create software modules that enable browsers to display the specialized content. For example, a certain software company may create a new animation format for viewing on the web. The software company then must create a plug-in designed to allow browsers to view the new animation format. When a user encounters the animation format on a web page, he must download the plug-in and install it before he can view the animation on his browser.","Plug-ins are created to fit uniquely the browsers to which they are being installed. For example, a plug-in made for Internet Explorer\u2122 will not work for Netscape Navigator\u2122. Furthermore, a plug-in made for the Windows version of Netscape Navigator\u2122 will not work with the Solaris\u2122 operating system version. Because of this, software programmers implementing plug-ins must be concerned with the details of all browser types, making plug-in development difficult and non-portable.","To overcome this limitation, there is a mechanism that allows programmers to develop plug-ins using a platform independent programming language such as Java\u2122. Developing in Java\u2122 allows plug-ins to be developed for all types of browser for which a Java\u2122 interface has been created. Using Java\u2122, programmers do not need to create different versions of a plug-in for different platforms (the different types of browser and the computer systems on which they execute are collectively referred to as platforms). Although this technique offers considerable improvement, it still has shortcomings. Before further discussing the shortcomings, an overview of platform independent programming language is provided.","Platform Independent Programming Language","Traditionally each type of computer operating system requires programmers to develop software in a certain set of unique programming languages. As a large number of computers become inter-connected via the Internet, the diversity of computer system (platform) creates a need for a platform independent programming language that runs on all platforms. A platform independent programming language allows computer programmers to develop programs that execute without regard to the execution platform.","An example of a platform independent programming language is Java\u2122. Java\u2122 differs from other programming languages in how programs are compiled and executed. In other programming languages programs are usually compiled into machine-dependent executable code. For example, a program written for an Unix system is compiled into executable code used specifically by an Unix system. The compiled code cannot be executed on another system. In Java\u2122, programs are compiled into platform independent bytecode classes. These byetcode classes contain code and data in a platform independent format called the class file format. The platform independence in Java\u2122 is achieved by having a uniform execution agent called a virtual machine. In Java\u2122, the virtual machine takes on the responsibility of executing the compiled bytecode classes by translating them into platform-specific instructions and sending the instructions to the underlying computer system. This shields the classes from having to interact with the underlying computer platform. Thus the classes can be executed on any platform, as long as a virtual machine is present.","Sample Network Application Environment","One common application of a platform independent programming language such as Java\u2122 is its usage in a networking environment.  is a block diagram illustrating a sample network application environment such as a Java\u2122 network application environment. This diagram helps one understand how platform independent programs are created and executed in a network environment such as the Internet. Such an environment comprises of a client platform  coupled over a network  to a server  for the purpose of accessing class files for execution of a software application or applet. An applet is a smaller application, written in Java\u2122, that is commonly downloaded and executed across a network.","In , server  comprises development environment  for use in creating the source files for a given application. The development environment  provides a mechanism, such as an editor and an applet viewer, for the programmer to generate source files and preview applets. A set of core classes  comprise a library of commonly used functions that the programmer can reference. From development environment , the programmer creates one or more source files . Source files  contain class definitions, including data structures, method implementations and references to other classes. Source files  are provided to compiler , which compiles source files  into compiled \u201c.class\u201d files (or class files)  that contain bytecodes executable by a virtual machine. Bytecode class files  are stored (e.g., in temporary or permanent storage) on server , and are available for download over network .","Client platform  contains a virtual machine (VM)  which, through the use of available native operating system (O\/S) calls , is able to execute bytecode class files and execute native O\/S calls when necessary during execution. An example interaction between the client platform and the server is the request and response in HTTP (hypertext transport protocol). HTTP is a commonly used method for transferring HTML (hypertext markup language) documents, a type of web pages, across the Internet.","As Java\u2122 class files are often referenced to within an HTML document, requests for HTML documents often trigger the transfer of compiled Java\u2122 classes as well. For example, when a browser application executing on client platform  requests an HTML document, such as by forwarding URL (universal resource locator)  to web server , the browser automatically initiates the download of the class files  identified in the HTML document. Class files  are typically downloaded from the server and loaded into virtual machine  individually as needed. The virtual machine locates and loads each class file, parses the class file format, allocates memory for various components of the class, and links the class with other already loaded classes. This process makes the bytecode in the class readily executable by the virtual machine. An example of the entire class loading process is the use of applets on web pages. A user may request a web page via his browser. Embedded on the page is a reference to a game applet. Upon receipt of the request by Server , the applet is downloaded to the browser along with the page. The applet is then loaded onto the Virtual Machine  on the user's computer (Client ) and executed. The user can then begin to interact with the applet just as with any programs on his computer.","Plug-In Development","There is a mechanism for developing plug-ins in a platform independent programming language. For instance, pluglets are plug-ins developed in the Java\u2122 programming language.  shows an example of an existing implementation of Pluglet in the browser environment. Within  are several Application Programming Interfaces (APIs). API refers to a collection of software modules available for use. An API declares the behavior of the collection so programmers can understand how to use the software modules within an API and whether different APIs are compatible with one another.","In , Pluglet API  interacts with Pluglet Engine , which allows the Java based Pluglet API  to interact with the C++ based Browser Plug-in API  via Java Native Interface (JNI).","Thus Pluglet Engine  serves as an intermediary between Pluglet API  (in Java\u2122) and Browser Plug-in API  (in C++). Pluglet Engine  also handles calls to Open JVM Interface (OJI), which plays the role of the Java Virtual Machine (JVM) that is required for the execution of Java bytecodes found in Pluglets.","One of the main drawbacks of a such a system depicted in  is the reliance on native interfaces such as Java Native Interface (JNI). Considerable development effort is needed to develop an interface similar to Pluglet Engine  for each type of browser. To develop each interface, new modules called wrapper codes must be implemented using JNI to connect the native programming language of the browser with the programming language of pluglets. The development process of wrapper codes is often a tedious and error prone process. There are also performance concerns. For example, during the execution of the pluglets on the Solaris environment, using JNI requires two copies of JVM to be stored in run-time memory. This takes up memory resources of the system and slows execution.","BlackConnect and XPCOM","XPCOM (Cross Platform Component Object Model) is a technology that allows software components written in various programming languages to communicate with one another within the browser environment. XPCOM is available as part of Mozilla\u2122 browser project. BlackConnect technology was developed to enable software components written in Java\u2122 to take advantage of XPCOM. With BlackConnect and XPCOM, Java components can communicate with other software components written in various programming languages within the browser environment. The combination of BlackConnect and XPCOM greatly enhances the efficiency of the software development process. For example, a game programmer developing in Java\u2122 can take advantage of an existing graphic rendering engine component written in C++, instead of creating such component himself in Java\u2122.","Embodiments of the present invention relate to the implementation of an Application Programming Interface (API) that enables platform independent plug-ins to work with browser applications. In one or more embodiments of the present invention, the API allows platform independent plug-ins to use XPCOM (Cross Platform Component Object Model), a technology that allows software components written in various programming languages to communicate with one another within the browser environment. In another embodiment, the platform independent plug-in is written in the Java\u2122 programming language and is termed a \u201cpluglet.\u201d","In one or more embodiments of the present invention, the API enables platform in dependent plug-ins to take advantage of existing BlackConnect and Scriptable Plug-In API technologies to integrate with the native browser plug-in API. Embodiments of the present invention allows the current platform independent plug-in API and browser API to remain unchanged, which ensures backward code compatibility. Furthermore, embodiments of the present invention enables platform independent plug-ins to communicate and use components created in native programming languages such as C++. This promotes component reuse and eases the development effort.","One embodiment of the present invention implements an input stream interface, an output stream interface, a plug-in interface, a plug-in instance interface, a plug-in instance peer interface, two plug-in manager interfaces, a plug-in stream info interface, a plug-in stream listener interface, and two plug-in tag information interfaces.","Embodiments of the present invention relates to the implementation of an Application Programming Interface (API) that enables platform independent plug-ins to work with browser applications. In the following description, numerous specific details are set forth to provide a more thorough description of embodiments of the invention. It will be apparent, however, to one skilled in the art, that embodiments of the invention may be practiced without these specific details. In other instances, well known features have not been described in detail so as not to obscure the invention.","Platform Independent Plug-ins",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["305","306","308","308","305","306","306","307","309","306","305","307","308","309","307","305","306","309"]},"Scriptable Plug-in API",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4","b":["400","450","400","450","450","400","499","450","400"]},"In one or more embodiments of the present invention, Intermediary  is an XPCOM API. XPCOM (Cross Platform Component Object Model) is a standardized framework that allows software components written in various programming languages to communicate with one another within the browser environment. Since XPCOM is a critical interface for interoperability, making it work with Browser Plug-in API  will allow Browser Plug-in API  to interface with a wide variety of APIs. Since XPCOM contains an interface that only works with scriptable interfaces and Browser Plug-in API  is not scriptable, Scriptable Plug-in API  provides a conduit for access to XPCOM (or Intermediary ).","With connection established between Browser Plug-in API  and the standardized framework XPCOM, any API that is configured to operate with XPCOM now has access to Browser Plug-in API . This also works in the reverse direction meaning Browser Plug-in API  can now access any API that uses XPCOM.","Each interface in Scriptable Plug-in API  corresponds to an interface in Browser Plug-in API  and the corresponding interfaces are connected by bridges. Bridges are software modules that allow two incompatible interfaces to operate with each another. More specifically, bridges map the functionality of one interface to another interface. As such, with these bridges in place there is no need to change the existing non-scriptable Browser Plug-in API . Interface  corresponds to Interface  and both are connected by Bridge . Interface  corresponds to Interface  and both are connected by Bridge . Interface  corresponds to Interface  and both are connected by Bridge . Finally, Interface  corresponds to Interface  and both are connected by Bridge .","With Bridge  and Interface , non-scriptable Interface  can access Intermediary  and any API using Intermediary  can access Interface . The same mechanism is used in the other corresponding bridge and interface pairs. A complete description of the mechanisms and interfaces involved in connecting a scriptable plug-in API to a non-scriptable plug-in is described in co-pending U.S. patent application \u201cScriptable Plug-In Application Programming Interface\u201d, Ser. No. 10\/023,008 filed on Dec. 21, 2001.","Implementing Platform Independent Plug-in API on Top of BlackConnect","In one embodiment of the present invention, Wrapper API  is a Java wrapper that enables platform independent plug-in API such as pluglet API to take advantage of an existing intermediary such as XPCOM. The Java wrapper connects platform independent plug-in API to an interface of XPCOM called BlackConnect. The BlackConnect technology enables software components written in Java to take advantage of XPCOM. With access to XPCOM, platform independent plug-in API such as pluglet API can access the browser plug-in API through the scriptable plug-in API shown in .  shows this overall architecture according to an embodiment of the invention that connects Pluglet API  to Browser Plug-in . The connection allows Pluglets, which are written in Java, to use the C++ based API of the Browser. Pluglet API  is wrapped with Java Wrapper API . This wrapper layer enables Pluglet API  to access BlackConnect . BlackConnect  is set of C++ libraries that allow Java components to become XPCOM components. XPCOM  is a standardized framework for writing cross-platform, modular software components. However, since XPCOM  does not support Java components, BlackConnect  is needed.","All XPCOM components need to have their own associated IDLs (Interface Description Language). IDLs serve as standardized interfaces for components to communicate each other, regardless of their implementation languages. Within XPCOM, an XPIDL compiler is used to create an IDL out of a software component written in C, C++, or Javascript, the three programming languages currently supported by XPCOM. BlackConnect works around this limitation by allowing the XPIDL compiler to make XPCOM components out of Java components. Since BlackConnect allows Java components to become XPCOM components, the ability to use BlackConnect via Java Wrapper API  enables the Java based Pluglet API  to communicate with other XPCOM components.","One requirement of BlackConnect is that the Java based XPCOM components only communicate with scriptable XPCOM components. Therefore, Scriptable Plug-in API  is needed to make Browser Plug-in API  scriptable before Pluglet API  interfaces with it. With the help of Java Wrapper API , Scriptable Plug-in API  and BlackConnect, Pluglet API  and the Browser Plug-in API  interface across the standardized framework of XPCOM. The final result is that the Java Pluglet API  connects with the C++ Browser Plug-in API  without relying on JNI (Java Native Interface) technology.","Bypassing JNI reduces development effort and in some cases improves run-time performance. Another advantage of the invention is that it allows the both the current Pluglet API and browser Plug-in APIs to remain unchanged. This helps ensure backward code compatibility. Furthermore, the present invention allows Pluglets to communicate and use other XPCOM components . This promotes component reuse and eases development effort.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 6","b":["600","610","620","630"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 7","FIG. 7"],"b":["700","750","700","775","780","750","700","775","760","710","750"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":[{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":"nsXPIDLInputStream , nsXPIDLOutputStream , nsXPIDLPlugin , nsXPIDLPluginInstance , nsXPIDLPluginInstancePeer , nsXPIDLPluginManager , nsXPIDLPluginManager , nsXPIDLPluginStreamInfo , nsXPIDLPluginStreamListener , nsXPIDLPluginTagInfo , nsXPIDLPluginTagInfo .\n\nThe interfaces of Java Wrapper API  are listed in details below:\n"}},"nsXPIDLInputStream : provides a wrapper interface between BlackConnect bridge  and interface PlugletInputStream , which handles the input data stream for a browser plug-in"]}},{"@attributes":{"id":"p-0052","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import org.mozilla.xpcom.*;"},{"entry":"import org.mozilla.pluglet.*;"},{"entry":"import org.mozilla.pluglet.mozilla.*;"},{"entry":"import Java.io.*;"},{"entry":"\u2002public class nsXPIDLInputStream extends InputStream {"},{"entry":"\u2003public nsIXPIDLInputStream inputStream;"},{"entry":"public nsXPIDLInputStream( nsIXPIDLInputStream inputStream ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"this.inputStream = inputStream;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public void close( ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"inputStream.close( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public int available( ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return inputStream.available( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public int read(byte[ ] b, int off, int len) throws IOException {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return inputStream.read( len, b );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public int read( ) throws IOException {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"byte buf[ ] = new byte [1];"]},{"entry":[{},"if( read( buf, 0, 1 ) < 0 ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return \u22121;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return buf[0] & 0xff;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":"nsXPIDLOutputStream : provides a wrapper interface between BlackConnect bridge  and interface PlugletOutputStream , which handles the output data stream for a browser plug-in"}},{"@attributes":{"id":"p-0053","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import org.mozilla.xpcom.*;"},{"entry":"import org.mozilla.pluglet.*;"},{"entry":"import org.mozilla.pluglet.mozilla.*;"},{"entry":"import Java.io.*;"},{"entry":"public class nsXPIDLOutputStream extends OutputStream {"},{"entry":"\u2003public nsIXPIDLOutputStream outputStream;"},{"entry":"\u2003public nsXPIDLOutputStream( nsIXPIDLOutputStream outputStream) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"this.outputStream = outputStream;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public void close( ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"outputStream.close( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public void flush( ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"outputStream.flush( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public void write(byte[ ] b, int off, int len) throws IOException {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"outputStream.write( len, b );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public void write( int b ) throws IOException {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"byte buf[ ] = new byte[1];"]},{"entry":[{},"buf[0] = (byte)b;"]},{"entry":[{},"write( buf, 0, 1 );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":"nsXPIDLPlugin : provides a wrapper interface between BlackConnect bridge  and interface Pluglet , which defines the programming requirements for a browser plug-in"}},{"@attributes":{"id":"p-0054","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import org.mozilla.xpcom.*;"},{"entry":"import org.mozilla.pluglet.*;"},{"entry":"import org.mozilla.pluglet.mozilla.*;"},{"entry":"public class nsXPIDLPlugin implements nsIXPIDLPlugin {"},{"entry":"\u2003public PlugletFactory plugin;"},{"entry":"\u2003public nsXPIDLPlugin( PlugletFactory plugin ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"this.plugin = plugin;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public Object createPluginInstance( nsISupports aOuter,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IID iid,"]},{"entry":[{},"String pluginMIMEType ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return plugin.createPluglet( pluginMIMEType );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public void initialize( ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ ??? Where can I take PlugletManager in this place?"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public void shutdown( ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"plugin.shutdown ( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003\/\/ from nsIFactory"},{"entry":"\u2003public void lockFactory( boolean lock ) {"},{"entry":"\u2003}"},{"entry":"\u2003public Object createInstance( nsISupports instance, IID iid ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return createPluginInstance( instance, iid, null );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003\/\/ from nsISupports"},{"entry":"\u2003public Object queryInterface( IID iid ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object result;"]},{"entry":[{},"if ( nsISupports.IID.equals(iid)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2225 nsIXPIDLPlugin.IID.equals(iid) {"]},{"entry":[{},"result = this;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"result = null;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return result;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":"nsXPIDLPluginInstance : provides a wrapper interface between BlackConnect bridge  and interface PlugletFactory , which generates browser plug-in instances"}},{"@attributes":{"id":"p-0055","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import org.mozilla.xpcom.*;"},{"entry":"import org.mozilla.pluglet.*;"},{"entry":"import org.mozilla.pluglet.mozilla.*;"},{"entry":"public class nsXPIDLPluginInstance implements"},{"entry":"nsIXPIDLPluginInstance {"},{"entry":"\u2003public Pluglet instance;"},{"entry":"\u2003public nsXPIDLPluginInstance( Pluglet instance ) {"},{"entry":"\u2003\u2003this.instance = instance;"},{"entry":"\u2003}"},{"entry":"\u2003public void destroy( ) {"},{"entry":"\u2003\u2003instance.destroy( );"},{"entry":"\u2003}"},{"entry":"\u2003public void initialize( nsIXPIDLPluginInstancePeer peer ) {"},{"entry":"\u2003\u2003PlugletPeer pPeer = new nsXPIDLPluginInstancePeer( peer );"},{"entry":"\u2003\u2003instance.initialize( pPeer );"},{"entry":"\u2003}"},{"entry":"\u2003public nsIXPIDLPluginStreamListener newStream( ) {"},{"entry":"\u2003\u2003return new nsXPIDLPluginStreamListener( instance.newStream( ) );"},{"entry":"\u2003}"},{"entry":"\u2003public void start( ) {"},{"entry":"\u2003\u2003instance.start( );"},{"entry":"\u2003}"},{"entry":"\u2003public void stop( ) {"},{"entry":"\u2003\u2003instance.stop( );"},{"entry":"\u2003}"},{"entry":"\u2003\/\/ from nsISupports"},{"entry":"\u2003public Object queryInterface( IID iid ) {"},{"entry":"\u2003\u2003Object result;"},{"entry":"\u2003\u2003if( nsISupports.IID.equals(iid)"},{"entry":"\u2003\u2003\u2003\u2225 nsIXPIDLPluginInstance.IID.equals(iid) ) {"},{"entry":"\u2003\u2003\u2003result = this;"},{"entry":"\u2003\u2003} else {"},{"entry":"\u2003\u2003\u2003result = null;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003return result;"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":"nsXPIDLPluginInstancePeer : provides a wrapper interface between BlackConnect bridge  and interface PlugletPeer , which defines the functional requirements for a browser plug-in to ensure compatibility with the browser"}},{"@attributes":{"id":"p-0056","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import org.mozilla.xpcom.*;"},{"entry":"import org.mozilla.pluglet.*;"},{"entry":"import org.mozilla.pluglet.mozilla.*;"},{"entry":"public class nsXPIDLPluginInstancePeer implements PlugletPeer {"},{"entry":"\u2003public nsIXPIDLPluginInstancePeer instancePeer;"},{"entry":"\u2003public nsXPIDLPluginInstancePeer( nsIXPIDLPluginInstancePeer"},{"entry":"instancePeer ) {"},{"entry":"\u2003\u2003this.instancePeer = instancePeer;"},{"entry":"\u2003}"},{"entry":"\u2003public Java.lang.String getMIMEType( ) {"},{"entry":"\u2003\u2003return instancePeer.getMIMEType( );"},{"entry":"\u2003}"},{"entry":"\u2003public int getMode( ) {"},{"entry":"\u2003\u2003return instancePeer.getMode( );"},{"entry":"\u2003}"},{"entry":"\u2003public Java.lang.String getValue(int variable) {"},{"entry":"\u2003\u2003return instancePeer.getValue( variable );"},{"entry":"\u2003}"},{"entry":"\u2003public Java.io.OutputStream newStream(Java.lang.String type,"},{"entry":"Java.lang.String target) {"},{"entry":"\u2003\u2003\u2003return new nsXPIDLOutputStream( instancePeer.newStream( type,"},{"entry":"target ) );"},{"entry":"\u2003}"},{"entry":"\u2003public void setWindowSize( int width, int height) {"},{"entry":"\u2003\u2003instancePeer.setWindowSize( width, height );"},{"entry":"\u2003}"},{"entry":"\u2003public void showStatus( Java.lang.String message ) {"},{"entry":"\u2003\u2003instancePeer.showStatus( message );"},{"entry":"\u2003}"},{"entry":"\u2003public PlugletTagInfo getTagInfo( ) {"},{"entry":"\u2003\u2003return new nsXPIDLPluginTagInfo2( instancePeer.getTagInfo( ) );"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":"nsXPIDLPluginManager : provides a wrapper interface between BlackConnect bridge  and interface PlugletManager , which manages interaction between browser plug-in instances and the browser"}},{"@attributes":{"id":"p-0057","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import org.mozilla.xpcom.*;"},{"entry":"import org.mozilla.pluglet.*;"},{"entry":"import org.mozilla.pluglet.mozilla.*;"},{"entry":"public class nsXPIDLPluginManager implements PlugletManager {"},{"entry":"\u2003public nsIXPIDLPluginManager pluginManager;"},{"entry":"\u2003public nsXPIDLPluginManager( ) {"},{"entry":"\u2003}"},{"entry":"\u2003public nsXPIDLPluginManager( nsILXPIDLPluginManager"},{"entry":"\u2003pluginManager ) {"},{"entry":"\u2003\u2003this.pluginManager = pluginManager;"},{"entry":"\u2003}"},{"entry":"\u2003public void getURL( Pluglet pluglet,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Java.net.URL url,"]},{"entry":[{},"Java.lang.String target,"]},{"entry":[{},"PlugletStreamListener streamListener,"]},{"entry":[{},"Java.lang.String altHost,"]},{"entry":[{},"Java.net.URL referrer,"]},{"entry":[{},"boolean forceJSEnabled ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003nsISupports pInstance = new nsXPIDLPluginInstance ( pluglet );"},{"entry":"\u2003\u2003nsIXPIDLPluginStreamListener sListener = new"},{"entry":"nsXPIDLPluginStreamListener( streamListener );"},{"entry":"\u2003\u2003pluginManager.getURL( pInstance,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"url.toString( ),"]},{"entry":[{},"target,"]},{"entry":[{},"sListener,"]},{"entry":[{},"altHost,"]},{"entry":[{},"referrer.toString( ),"]},{"entry":[{},"forceJSEnabled );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public void postURL( Pluglet pluglet,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Java.net.URL url,"]},{"entry":[{},"int postDataLen,"]},{"entry":[{},"byte[ ] postData,"]},{"entry":[{},"boolean isFile,"]},{"entry":[{},"Java.lang.String target,"]},{"entry":[{},"PlugletStreamListener streamListener,"]},{"entry":[{},"Java.lang.String altHost,"]},{"entry":[{},"Java.net.URL referrer,"]},{"entry":[{},"boolean forceJSEnabled,"]},{"entry":[{},"int postHeadersLength,"]},{"entry":[{},"byte[ ] postHeaders) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003nsISupports pInstance = new nsXPIDLPluginInstance ( pluglet );"},{"entry":"\u2003\u2003nsIXPIDLPluginStreamListener sListener = new"},{"entry":"nsXPIDLPluginStreamListener( streamListener );"},{"entry":"\u2003\u2003pluginManager.postURL( pInstance,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"url.toString( ),"]},{"entry":[{},"postDataLen,"]},{"entry":[{},"postData,"]},{"entry":[{},"postHeadersLength,"]},{"entry":[{},"new String(postHeaders),"]},{"entry":[{},"isFile,"]},{"entry":[{},"target,"]},{"entry":[{},"sListener,"]},{"entry":[{},"altHost,"]},{"entry":[{},"referrer.toString( ),"]},{"entry":[{},"forceJSEnabled );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003public void reloadPluglets( boolean reloadPages ) {"},{"entry":"\u2003\u2003pluginManager.reloadPlugins( reloadPages );"},{"entry":"\u2003}"},{"entry":"\u2003public Java.lang.String userAgent( ) {"},{"entry":"\u2003\u2003return pluginManager.userAgent( );"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":"nsXPIDLPluginManager : provides a wrapper interface between BlackConnect bridge  and interface PlugletManager , which is a supporting interface for PlugletManager "}},{"@attributes":{"id":"p-0058","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import org.mozilla.xpcom.*;"},{"entry":"import org.mozilla.pluglet.*;"},{"entry":"import org.mozilla.pluglet.mozilla.*;"},{"entry":"public class nsXPIDLPluginManager2 extends nsXPIDLPluginManager"},{"entry":"implements PlugletManager2 {"},{"entry":"\u2003public nsIXPIDLPluginManager2 pluginManager;"},{"entry":"\u2003public nsXPIDLPluginManager2( nsIXPIDLPluginManager2"},{"entry":"pluginManager ) {"},{"entry":"\u2003\u2003this.pluginManager = pluginManager;"},{"entry":"\u2003}"},{"entry":"\u2003public void beginWaitCursor( ) {"},{"entry":"\u2003\u2003pluginManager.beginWaitCursor( );"},{"entry":"\u2003}"},{"entry":"\u2003public void endWaitCursor( ) {"},{"entry":"\u2003\u2003pluginManager.endWaitCursor( );"},{"entry":"\u2003}"},{"entry":"\u2003public String findProxyForURL( Java.net.URL url ) {"},{"entry":"\u2003\u2003return pluginManager.findProxyForURL( url.toString( ) );"},{"entry":"\u2003}"},{"entry":"\u2003public boolean supportsURLProtocol( String protocol ) {"},{"entry":"\u2003\u2003return pluginManager.supportsURLProtocol( protocol );"},{"entry":"\u2003}"},{"entry":"\u2003public boolean isURLProtocolSupported( String protocol ) {"},{"entry":"\u2003\u2003return pluginManager.supportsURLProtocol( protocol );"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":"nsXPIDLPluginStreamInfo : provides a wrapper interface between BlackConnect bridge  and interface PlugletStreamInfo , which gives browser plug-in instances access to information on incoming data stream"}},{"@attributes":{"id":"p-0059","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import org.mozilla.xpcom.*;"},{"entry":"import org.mozilla.pluglet.*;"},{"entry":"import org.mozilla.pluglet.mozilla.*;"},{"entry":"public class nsXPIDLPluginStreamInfo implements PlugletStreamInfo {"},{"entry":"\u2003public nsIXPIDLPluginStreamInfo streamInfo;"},{"entry":"\u2003public nsXPIDLPluginStreamInfo( nsIXPIDLPluginStreamInfo"},{"entry":"streamInfo ) {"},{"entry":"\u2003\u2003this.streamInfo = streamInfo;"},{"entry":"\u2003}"},{"entry":"\u2003public Java.lang.String getContentType( ) {"},{"entry":"\u2003\u2003return streamInfo.getContentType( );"},{"entry":"\u2003}"},{"entry":"\u2003public int getLastModified( ) {"},{"entry":"\u2003\u2003return streamInfo.getLastModified( );"},{"entry":"\u2003}"},{"entry":"\u2003public int getLength( ) {"},{"entry":"\u2003\u2003return streamInfo.getLength( );"},{"entry":"\u2003}"},{"entry":"\u2003public Java.lang.String getURL( ) {"},{"entry":"\u2003\u2003return streamInfo.getURL( );"},{"entry":"\u2003}"},{"entry":"\u2003public boolean isSeekable( ) {"},{"entry":"\u2003\u2003return streamInfo.isSeekable( );"},{"entry":"\u2003}"},{"entry":"\u2003public void requestRead( ByteRanges ranges ) {"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":"nsXPIDLPluginStreamListener : provides a wrapper interface between BlackConnect bridge  and interface PlugletStreamListener , which gives browser plug-in instances access to incoming data stream"}},{"@attributes":{"id":"p-0060","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import org.mozilla.xpcom.*;"},{"entry":"import org.mozilla.pluglet.*;"},{"entry":"import org.mozilla.pluglet.mozilla.*;"},{"entry":"public class nsXPIDLPluginStreamListener implements"},{"entry":"nsIXPIDLPluginStreamListener {"},{"entry":"\u2003public PlugletStreamListener streamListener;"},{"entry":"\u2003public nsXPIDLPluginStreamListener ( PlugletStreamListener"},{"entry":"streamListener ) {"},{"entry":"\u2003\u2003this.streamListener = streamListener;"},{"entry":"\u2003}"},{"entry":"\u2003public int getStreamType( ) {"},{"entry":"\u2003\u2003return streamListener.getStreamType( );"},{"entry":"\u2003}"},{"entry":"\u2003public void onDataAvailable( nsIXPIDLPluginStreamInfo streamInfo,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"nsIXPIDLInputStream input,"]},{"entry":[{},"int length) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003PlugletStreamInfo sInfo = new"},{"entry":"nsXPIDLPluginStreamInfo( streamInfo );"},{"entry":"\u2003\u2003Java.io.InputStream iStream = new nsXPIDLInputStream( input );"},{"entry":"\u2003\u2003streamListener.onDataAvailable( sInfo, iStream, length );"},{"entry":"\u2003}"},{"entry":"\u2003public void onFileAvailable( nsIXPIDLPluginStreamInfo streamInfo,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"String fileName ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003PlugletStreamInfo sInfo = new"},{"entry":"nsXPIDLPluginStreamInfo( streamInfo );"},{"entry":"\u2003\u2003streamListener.onFileAvailable( sInfo, fileName );"},{"entry":"\u2003}"},{"entry":"\u2003public void onStartBinding( nsIXPIDLPluginStreamInfo streamInfo ) {"},{"entry":"\u2003\u2003PlugletStreamInfo sInfo = new"},{"entry":"nsXPIDLPluginStreamInfo( streamInfo );"},{"entry":"\u2003\u2003streamListener.onStartBinding( sInfo );"},{"entry":"\u2003}"},{"entry":"\u2003public void onStopBinding( nsIXPIDLPluginStreamInfo streamInfo, int"},{"entry":"status) {"},{"entry":"\u2003\u2003PlugletStreamInfo sInfo = new"},{"entry":"nsXPIDLPluginStreamInfo( streamInfo );"},{"entry":"\u2003\u2003streamListener.onStopBinding( sInfo, status );"},{"entry":"\u2003}"},{"entry":"\u2003\/\/ from nsISupports"},{"entry":"\u2003public Object queryInterface( IID iid ) {"},{"entry":"\u2003\u2003Object result;"},{"entry":"\u2003\u2003if( nsISupports.IID.equals(iid)"},{"entry":"\u2003\u2003\u2003\u2225 nsIXPIDLPluginStreamListener.IID.equals(iid) ) {"},{"entry":"\u2003\u2003\u2003result = this;"},{"entry":"\u2003\u2003} else {"},{"entry":"\u2003\u2003\u2003result = null;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003return result;"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":"nsXPIDLPluginTagInfo : provides a wrapper interface between BlackConnect bridge  and interface PlugletTagInfo , which gives browser plug-in instances access to information on the HTML tags of the calling page within the browser"}},{"@attributes":{"id":"p-0061","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import org.mozilla.xpcom.*;"},{"entry":"import org.mozilla.pluglet.*;"},{"entry":"import org.mozilla.pluglet.mozilla.*;"},{"entry":"public class nsXPIDLPluginTagInfo implements PlugletTagInfo {"},{"entry":"\u2003public nsIXPIDLPluginTagInfo tagInfo;"},{"entry":"\u2003public String getAttribute( String name ) {"},{"entry":"\u2003\u2003return tagInfo.getAttribute( name );"},{"entry":"\u2003}"},{"entry":"\u2003public Java.util.Properties getAttributes( ) {"},{"entry":"\u2003\u2003\/\/ get atts"},{"entry":"\u2003\u2003int[ ] count = new int[1];"},{"entry":"\u2003\u2003String[ ] [ ] names = new String[1] [ ];"},{"entry":"\u2003\u2003String[ ] [ ] values = new String[1] [ ];"},{"entry":"\u2003\u2003tagInfo.getAttributes( count, names, values );"},{"entry":"\u2003\u2003\/\/ create props"},{"entry":"\u2003\u2003Java.util.Properties props = new Java.util.Properties( );"},{"entry":"\u2003\u2003for( int i = 0; i < count[0]; i++ ) {"},{"entry":"\u2003\u2003\u2003props.setProperty( names[0] [i], values[0] [i] );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ return props"},{"entry":"\u2003\u2003return props;"},{"entry":"\u2003}"},{"entry":"\u2003public Object getDOMElement( ) {"},{"entry":"\u2003\u2003return null;"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":"nsXPIDLPluginTagInfo : provides a wrapper interface between BlackConnect bridge  and interface PlugletTagInfo , which is a supporting interface of PlugletTagInfo "}},{"@attributes":{"id":"p-0062","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import org.mozilla.xpcom.*;"},{"entry":"import org.mozilla.pluglet.*;"},{"entry":"import org.mozilla.pluglet.mozilla.*;"},{"entry":"public class nsXPIDLPluginTagInfo2 extends nsXPIDLPluginTagInfo"},{"entry":"implements gletTagInfo2 {"},{"entry":"\u2003public nsIXPIDLPluginTagInfo2 tagInfo;"},{"entry":"\u2003public nsXPIDLPluginTagInfo2( nsIXPIDLPluginTagInfo2 tagInfo ) {"},{"entry":"\u2003\u2003this.tagInfo = tagInfo;"},{"entry":"\u2003}"},{"entry":"\u2003public String getAlignment( ) {"},{"entry":"\u2003\u2003return tagInfo.getAlignment( );"},{"entry":"\u2003}"},{"entry":"\u2003public String getParameter( String name ) {"},{"entry":"\u2003\u2003return tagInfo.getParameter( name );"},{"entry":"\u2003}"},{"entry":"\u2003public Java.util.Properties getParameters( ) {"},{"entry":"\u2003\u2003\/\/ get atts"},{"entry":"\u2003\u2003int[ ] count = new int[1];"},{"entry":"\u2003\u2003String[ ] [ ] names = new String[1] [ ];"},{"entry":"\u2003\u2003String[ ] [ ] values = new String[1] [ ];"},{"entry":"\u2003\u2003tagInfo.getParameters( count, names, values );"},{"entry":"\u2003\u2003\/\/ create props"},{"entry":"\u2003\u2003Java.util.Properties props = new Java.util.Properties( );"},{"entry":"\u2003\u2003for( int i = 0; i < count[0]; i++ ) {"},{"entry":"\u2003\u2003\u2003props.setProperty( names[0] [i], values[0] [i] );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ return props"},{"entry":"\u2003\u2003return props;"},{"entry":"\u2003}"},{"entry":"\u2003public int getBorderHorizSpace( ) {"},{"entry":"\u2003\u2003return tagInfo.getBorderHorizSpace( );"},{"entry":"\u2003}"},{"entry":"\u2003public int getBorderVertSpace( ) {"},{"entry":"\u2003\u2003return tagInfo.getBorderVertSpace( );"},{"entry":"\u2003}"},{"entry":"\u2003public String getDocumentBase( ) {"},{"entry":"\u2003\u2003return tagInfo.getDocumentBase( );"},{"entry":"\u2003}"},{"entry":"\u2003public String getDocumentEncoding( ) {"},{"entry":"\u2003\u2003return tagInfo.getDocumentEncoding( );"},{"entry":"\u2003}"},{"entry":"\u2003public String getTagText( ) {"},{"entry":"\u2003\u2003return tagInfo.getTagText( );"},{"entry":"\u2003}"},{"entry":"\u2003public String getTagType( ) {"},{"entry":"\u2003\u2003return tagInfo.getTagType( );"},{"entry":"\u2003}"},{"entry":"\u2003public int getUniqueID( ) {"},{"entry":"\u2003\u2003return tagInfo.getUniqueID( );"},{"entry":"\u2003}"},{"entry":"\u2003public int getHeight( ) {"},{"entry":"\u2003\u2003return tagInfo.getHeight( );"},{"entry":"\u2003}"},{"entry":"\u2003public int getWidth( ) {"},{"entry":"\u2003\u2003return tagInfo.getWidth( );"},{"entry":"\u2003}"},{"entry":"\u2003public Object getDOMElement( ) {"},{"entry":"\u2003\u2003return null;"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Embodiment of Computer Execution Environment (Hardware)","An embodiment of the invention can be implemented as computer software in the form of computer readable program code executed in a general purpose computing environment such as environment  illustrated in , or in the form of bytecode class files executable within a Java\u2122 run time environment running in such an environment, or in the form of bytecodes running on a processor (or devices enabled to process bytecodes) existing in a distributed environment (e.g., one or more processors on a network). A keyboard  and mouse  are coupled to a system bus . The keyboard and mouse are for introducing user input to the computer system and communicating that user input to central processing unit (CPU) . Other suitable input devices may be used in addition to, or in place of, the mouse  and keyboard . I\/O (input\/output) unit  coupled to bi-directional system bus  represents such I\/O elements as a printer, A\/V (audio\/video) I\/O, etc.","Computer  may include a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling via a network link  to a local network . For example, if communication interface  is an integrated services digital network (ISDN) card or a modem, communication interface  provides a data communication connection to the corresponding type of telephone line, which comprises part of network link . If communication interface  is a local area network (LAN) card, communication interface  provides a data communication connection via network link  to a compatible LAN. Wireless links are also possible. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals which carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to local server computer  or to data equipment operated by ISP . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals which carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer , are exemplary forms of carrier waves transporting the information.","Processor  may reside wholly on client computer  or wholly on server  or processor  may have its computational power distributed between computer  and server . Server  symbolically is represented in  as one unit, but server  can also be distributed between multiple \u201ctiers\u201d. In one embodiment, server  comprises a middle and back tier where application logic executes in the middle tier and persistent data is obtained in the back tier. In the case where processor  resides wholly on server , the results of the computations performed by processor  are transmitted to computer  via Internet , Internet Service Provider (ISP) , local network  and communication interface . In this way, computer  is able to display the results of the computation to a user in the form of output.","Computer  includes a video memory , main memory  and mass storage , all coupled to bi-directional system bus  along with keyboard , mouse  and processor . As with processor , in various computing environments, main memory  and mass storage , can reside wholly on server  or computer , or they may be distributed between the two. Examples of systems where processor , main memory , and mass storage  are distributed between computer  and server  include the thin-client computing architecture developed by Sun Microsystems, Inc., the palm pilot computing device and other personal digital assistants, Internet ready cellular phones and other Internet computing devices, and in platform independent computing environments, such as those which utilize the Java technologies also developed by Sun Microsystems, Inc.","The mass storage  may include both fixed and removable media, such as magnetic, optical or magnetic optical storage systems or any other available mass storage technology. Bus  may contain, for example, thirty-two address lines for addressing video memory  or main memory . The system bus  also includes, for example, a 32-bit data bus for transferring data between and among the components, such as processor , main memory , video memory  and mass storage . Alternatively, multiplex data\/address lines may be used instead of separate data and address lines.","In one embodiment of the invention, the processor  is a SPARC microprocessor from Sun Microsystems, Inc., a microprocessor manufactured by Motorola, such as the 680X0 processor, or a microprocessor manufactured by Intel, such as the 80X86 or Pentium processor. However, any other suitable microprocessor or microcomputer may be utilized. Main memory  is comprised of dynamic random access memory (DRAM). Video memory  is a dual-ported video random access memory. One port of the video memory  is coupled to video amplifier . The video amplifier  is used to drive the cathode ray tube (CRT) raster monitor . Video amplifier  is well known in the art and may be implemented by any suitable apparatus. This circuitry converts pixel data stored in video memory  to a raster signal suitable for use by monitor . Monitor  is a type of monitor suitable for displaying graphic images.","Computer  can send messages and receive data, including program code, through the network(s), network link , and communication interface . In the Internet example, remote server computer  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . The received code may be executed by processor  as it is received, and\/or stored in mass storage , or other non-volatile storage for later execution. In this manner, computer  may obtain application code in the form of a carrier wave. Alternatively, remote server computer  may execute applications using processor , and utilize mass storage , and\/or video memory . The results of the execution at server  are then transmitted through Internet , ISP , local network  and communication interface . In this example, computer  performs only input and output functions.","In one embodiment of the present invention, the platform independent plug-in  can reside on server . Browser plug-in API , as part of a browser, is on computer . The browser can download platform independent plug-in  from server  when it encounters a plug-in reference on an HTML page. XPCOM  and scriptable plug-in API  also reside with the browser plug-in API  on computer . They enable the execution of platform independent plug-in  on computer . In one embodiment of the present invention, platform independent plug-in  is developed earlier on the server with platform independent plug-in API  and wrapper API .","Application code may be embodied in any form of computer program product. A computer program product comprises a medium configured to store or transport computer readable code, or in which computer readable code may be embedded. Some examples of computer program products are CD-ROM disks, ROM cards, floppy disks, magnetic tapes, computer hard drives, servers on a network, and carrier waves.","The computer systems described above are for purposes of example only. An embodiment of the invention may be implemented in any type of computer system or programming or processing environment.","Thus, an implementation of connecting platform independent plug-ins to browser applications is described in conjunction with one or more specific embodiments. The invention is defined by the claims and their full scope of equivalents."],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features, aspects and advantages of the present invention will become better understood with regard to the following description, appended claims and accompanying drawings where:",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
