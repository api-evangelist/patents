---
title: Information processing apparatus and control method thereof
abstract: An information processing apparatus capable of performing exclusive control on a communication channel for communicating with a peripheral apparatus among a device driver for the peripheral apparatus and a plurality of communication programs identifies, if the device driver is instructed to start up, which of the plurality of communication programs is using the communication channel by acquiring process information that is managed by an operating system (OS), issues a request to the identified communication program to close the communication channel, and enables the device driver to use the communication channel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015732&OS=09015732&RS=09015732
owner: Canon Kabushiki Kaisha
number: 09015732
owner_city: Tokyo
owner_country: JP
publication_date: 20110425
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to an information processing apparatus for controlling a peripheral apparatus, and a control method thereof.","2. Description of the Related Art","Conventionally, an image reading apparatus (e.g., a dedicated scanner and a multifunction peripheral that includes a printer etc.) is one example of a peripheral apparatus. An image reading apparatus acting as such a peripheral apparatus reads an image based on an instruction from a scanner driver that is installed in an information processing apparatus, such as a computer. Further, for such an image reading apparatus, a technique is known in which an operation unit provided in the image reading apparatus issues a read instruction to start image reading, and the read image is transferred to the information processing apparatus (see Japanese Patent Application Laid-Open No. 11-355481).","In order to enable the information processing apparatus to detect the fact that a user has issued a read instruction from the operation unit of the image reading apparatus, a button monitoring program can be used to monitor a button event of an image input apparatus, such as the scanner, in the information processing apparatus. If the button monitoring program detects an event indicating that the button for instructing the image reading apparatus to start reading was operated, image reading is executed in the following manner, and the information processing apparatus acquires the image data obtained by reading the image.","If the button monitoring program detects an event, first, a predetermined application is called up. The application is registered as an application to be started when the button is pressed. Then, the application calls up a scanner driver (e.g. a \u201ctool without an interesting name\u201d (TWAIN) driver) based on the TWAIN standard to cause the image reading apparatus to read an image. Next, the application acquires the image data obtained by the reading performed by the TWAIN driver.","In this case, communication to detect an event and communication of image data are performed between the image reading apparatus and the information processing apparatus. However, depending on the operating system (OS) of the information processing apparatus, the system may lack a mechanism for simultaneously securing a communication channel for the button monitoring program and for the scanner driver. Consequently, it is necessary to perform exclusive control of the communication channel between the button monitoring program and the scanner driver.","More specifically, before the scanner driver is to acquire the image data, the OS closes the communication channel used by the button monitoring program, and then opens the communication channel for the scanner driver. During this process, the OS refers to information (device information), which is recorded in a predetermined location, specifying the image reading apparatus associated with the button monitoring program, and device information associated with the scanner driver. If these pieces of the information match, the OS then performs the above exclusive control. In addition to the above-described startup method, in which the scanner driver is started via the button monitoring program, the user can also directly operate the scanner driver to execute image reading in the image reading apparatus.","In some cases, for example, a scanner driver may be newly installed into an information processing apparatus in which a scanner driver and a button monitoring program are already present, and the image reading executed in the image reading apparatus by starting this new scanner driver. If image reading is executed in the image reading apparatus by starting this new scanner driver, the communication channel used by the already-running button monitoring program needs to be closed.","However, if the OS cannot specify the device information, for example if the new scanner driver is not based on a predetermined application programming interface (API) standard such as TWAIN, the OS cannot perform the above exclusive control. More specifically, even if the new scanner driver is started, if the device information is not recorded in a predetermined location, the OS cannot close the communication channel used by the already-running button monitoring program. Therefore, the scanner driver that is started according to a procedure not based on the predetermined API cannot execute reading processing.","Further, there may be a plurality of button monitoring programs present in one information processing apparatus. In such a case, when the scanner driver is started, the scanner driver needs to specify the button monitoring program opening the communication channel, and issue a close request thereto.","However, even if the scanner driver could specify the button monitoring program and issue a close request, if a button monitoring program other than the specified button monitoring program is running, the scanner driver cannot causes the button monitoring program to close.","Such an issue not only occurs in image reading apparatuses, but in other peripheral apparatuses as well. Specifically, the same issue can occur in a situation which requires exclusive control of the communication channel used among a plurality of programs when there is no mechanism for closing a communication channel that is being used by another program based on the startup of the device driver.","The present invention is directed to an information processing apparatus that resolves the above issue, and a control method thereof. Further, the present invention is directed to a mechanism for suitably closing a communication channel being used by another program even when the channel cannot be closed just by starting up a device driver.","According to the present invention, an information processing apparatus capable of performing exclusive control on a communication channel for communicating with a peripheral apparatus among a plurality of programs includes a device driver for the peripheral apparatus, configured to communicate with the peripheral apparatus via the communication channel, a plurality of communication programs configured to communicate with the peripheral apparatus via the communication channel, an identification unit configured to, if the device driver is instructed to start up, identify which of the plurality of communication programs is using the communication channel by acquiring process information that is managed by an operating system (OS), and a control unit configured to issue a request to the communication program identified by the identification unit to close the communication channel and enable the device driver to use the communication channel.","Further features and aspects of the present invention will become apparent from the following detailed description of exemplary embodiments with reference to the attached drawings.","Various exemplary embodiments, features, and aspects of the invention will be described in detail below with reference to the drawings.","Not all of the constituent elements of the apparatus used in the exemplary embodiments are essential to the present invention. Further, various modifications and applications of these constituent elements are possible. More specifically, the present invention is not limited to the specific configuration described in the following exemplary embodiments.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["20","10"]},"The scanner  includes, as hardware resources, a universal serial bus (USB) interface , a central processing unit (CPU) , a read-only memory (ROM) , a random access memory (RAM) , a scanner engine , and an operation panel . The USB interface  transmits and receives data to and from the computer  based on a USB standard. The CPU  loads into the RAM  a control program for the scanner  that is stored in the ROM , and controls the operation of the scanner  by executing the control program. In addition to the control program, the ROM  stores the parameters that are required for an operation of the scanner . The RAM  is used as a work area of the CPU , and also as a temporary storage area for state information about the scanner  and image data.","The scanner engine  includes a light source which irradiates light onto a document, and a charge-coupled device (CCD) color image sensor for reading reflected light from the document and photoelectrically converting the read light. The scanner engine  reads an image of the document by scanning the document, which is placed on a platen of the scanner , and creates image data (read image data) based on the read image. The operation panel  includes a display unit that displays a state of the scanner  and a menu that allows the user to perform operations, and hard keys that allow the user to perform various operations including the instruction to start reading. The operation panel  may have some other configuration, such as a touch panel.","Further, although the scanner  is used here as an example of a dedicated scanner, the scanner  may be configured as a multifunctional device that also includes other additional functions, such as a printer. In addition, when reading the document image, although the document is placed on the platen and then scanned, a document conveyance mechanism may be provided, so that scanning is performed by fixing the scanner engine  and conveying the document. Moreover, as the operation for starting the reading by the scanner , instead of using the operation panel , the computer  may be notified that the reading target document is detected as having been set in the scanner . Still further, the scanner  may be configured without the CPU , so that the scanner engine  can be operated based on a control from the computer . In addition, instead of a color scanner, a monochrome scanner or a film scanner that reads film may be employed.","The computer  includes, as hardware resources, a USB interface , a display device , an input device , an auxiliary storage device , a CPU , a ROM , and a RAM . As the computer , a versatile personal computer may be employed. The USB interface  transmits and receives data to and from a peripheral apparatus based on a USB standard. The display device  displays various pieces of information, such as various user interfaces (UI) for operating the scanner  based on software installed in the computer . The input device  is realized by a keyboard, a pointing device and the like, and is for inputting information indicating an operation from the user.","The auxiliary storage device  is realized by an internal or an external hard disk, for example, and stores various pieces of information relating to an operation of the scanner , such as the scanner  control program. The CPU  loads into the RAM  various programs stored in the auxiliary storage device  and the ROM , and controls the operations of the computer  by executing those programs. The ROM  stores various programs and various pieces of information for operating the computer . The RAM  is used as a work area for the CPU , and also stores various pieces of information.","Next, using , the configuration of the functions that are realized by the software in the computer  illustrated in  will be described. The functions illustrated in  are realized by, for example, the CPU  reading and executing the programs stored (installed) in the ROM  and the auxiliary storage device  while using the RAM  as a work area.","The functions of the computer  may be broadly broken into an OS , an application , a scanner driver , a first button monitoring program , a second button monitoring program , and a USB interface control unit .","The OS  includes functions such as control of the basic parts for operation of the computer , control of output to the display device  and input from the input device , and management of the various memories, such as the auxiliary storage device . Further, the OS  includes a TWAIN data source manager (TWAIN DSM) , a button monitoring program control unit , and an application startup unit .","The TWAIN DSM  controls the application  and the scanner driver . The TWAIN DSM  is an API that realizes communication between the application  and the scanner driver  based on a TWAIN standard. If an instruction is issued to startup the scanner driver  by a command based on the TWAIN standard, the TWAIN DSM  issues a close request to the button monitoring program . When a monitoring program for monitoring whether a peripheral apparatus such as the scanner  is operated is present in the computer , the button monitoring program control unit  starts up and shuts down the monitoring program. The application startup unit  can be realized by an API that provides a function for starting the specified application.","The application  is a software program for processing input image data. The application  can acquire image data from a data source (scanner driver) based on the TWAIN standard by issuing an instruction to the data source via the TWAIN DSM . The application  can also edit or correct the acquired image data, display the resultant data on the display device , and store the data as an image file in the auxiliary storage device . Further examples of the application  may include character recognition software, which recognizes character information included in input image data, and converts the recognized character information into a character code.","The scanner driver  performs transmission control of a command for controlling the scanner  and reception control of image data from the scanner . The transmission of a command and the reception of image data by the scanner driver  are performed via the USB interface control unit . The scanner driver  has a TWAIN mode, in which operations based on the TWAIN standard are performed, and a non-TWAIN mode, in which operations not based on the TWAIN standard (e.g., production of read image data from RAW data) can also be performed.","Although the scanner driver  is associated with device information for specifying the image reading apparatus, in the present exemplary embodiment, the scanner driver  is associated with the device information indicating the scanner . The device information indicating the scanner  is recorded in a predetermined file associated with the scanner driver . However, although the device information is recorded in the file when the scanner driver  operates in the TWAIN mode and functions as the TWAIN driver, the device information is not recorded in the file when the scanner driver  operates in the non-TWAIN mode.","Therefore, when the scanner driver  operates in the TWAIN mode, exclusive control of the USB port is performed by the TWAIN DSM  of the OS , and when the scanner driver  operates in the non-TWAIN mode, the exclusive control is not performed. Further, the scanner driver  includes an image data acquisition unit , a TWAIN communication control unit , a startup process identification unit , and an event transmission unit .","The image data acquisition unit  acquires the image data read by the scanner  via the USB interface control unit . The image data acquired by the image data acquisition unit  is stored in the RAM , and then transferred to the application  based on control by the TWAIN communication control unit .","The TWAIN communication control unit  exchanges command groups based on the TWAIN standard between the application  and the scanner driver . The TWAIN communication control unit  receives reading settings, such as a reading resolution, a color mode, and a document size, from the application  and sets the received reading settings in the scanner driver . Further, in response to an image transfer request from the application , the TWAIN communication control unit  controls so that the image data read by the scanner  is transferred to the application . The transfer of the reading setting information and the image data is performed via the TWAIN DSM .","The startup process identification unit  identifies the information specifying the various programs currently operating (running) on the OS  by referring to the process information managed by the OS . The startup process identification unit  can identify which of the programs included in the process information may be opening a USB port for communicating with the scanner .","The event transmission unit  transmits predefined event information to a predetermined application by utilizing inter-process communication (communication among the currently operating programs).","In addition to startup based on an instruction from a TWAIN-compatible application, the scanner driver  can also start up based on a direct operation from the user. Further, even when a read instruction is made by the user, the scanner driver  can issue a read instruction. The expression \u201cdirect operation from the user\u201d refers to a case in which the user starts the scanner driver  using the input device , so that a UI screen possessed by the scanner driver  is displayed on the display device , and the user makes a read instruction via that screen. When the direct operation is performed, the scanner driver  can be operated in the non-TWAIN mode.","The first button monitoring program  and the second button monitoring program  (hereinafter, simply referred to as button monitoring program  or ) transmit a command for controlling the scanner  and receive data indicating the state of the scanner . The transmission of a command and reception of data indicating a state is performed via the USB interface control unit . Further, although the button monitoring programs  and  are associated with the device information for specifying the peripheral apparatus, in the present exemplary embodiment, the button monitoring programs  and  will be associated with the device information indicating the scanner . The device information indicating the scanner  is recorded in predetermined files respectively associated with the button monitoring programs  and .","The state of the scanner  at this stage is not limited to whether a \u201cbutton\u201d is pressed or not. The state may be in any form, as long as the fact that some kind of operation is performed by the user can be acquired. Further, in the present exemplary embodiment, a plurality of button monitoring programs  may simultaneously be present in the computer  (the auxiliary storage device ). However, the OS  in the present exemplary embodiment starts up only one of the button monitoring programs as a button monitoring program for monitoring the state of the scanner  connected via the USB interface . The present exemplary embodiment will be described below with only an arbitrary one of the button monitoring programs  and  started.","The button monitoring program  includes a button event monitoring unit  and an event reception unit . The button monitoring program  also includes a button event monitoring unit  and an event reception unit . Since the respective units have the same functions as the button event monitoring unit  and the event reception unit , a description thereof will be omitted.","The button event monitoring unit  periodically monitors whether a button event has occurred due to a user operation on the operation panel  of the scanner . Although the operation performed on a monitoring target by the user will be described as the pressing of a \u201cbutton\u201d as an example, as described above, the operation is not limited to the pressing of the \u201cbutton\u201d. Any operation may be employed, as long as the operation is performed by the user for the purpose of reading the document.","When a button event such as an instruction from the operation panel  to start reading is detected, the button event monitoring unit  instructs a predetermined application to start up via the application startup unit  of the OS . For example, the image data in a desired format can be acquired from the scanner driver  in conjunction with detection of the button event by transferring a prepared file relating to the reading setting of the scanner  to the started application.","The event reception unit  receives predefined event information based on inter-process communication from a predetermined application. When the button monitoring program  determines that the event information received by the event reception unit  indicates a close request, the button monitoring program  opens the USB port via the USB interface control unit .","Further, if the OS  detects that the scanner  is connected via the USB interface , the button monitoring programs  and  open a USB port according to a procedure based on a predetermined communication standard (plug & play). The term \u201cUSB port\u201d refers to a logical channel for communication via the USB interface . By opening the USB port, a transfer pipe for exchanging information with the scanner  connected via the USB interface  is secured. Further, the USB port for communicating with the scanner  is used exclusively by one scanner driver or one button monitoring program.","When the connection with the scanner  is started, first, the button monitoring program uses the USB port for monitoring a button event from the scanner . If there is a plurality of button monitoring programs, one of these is selected and started up based on a predetermined condition. Further, if the connection via the USB interface  is disconnected, and if the scanner driver  is started, the button monitoring programs  and  close the USB port according to a procedure based on the predetermined communication standard.","Next, the processing flow when the scanner  performs reading processing with the scanner driver  operated in the non-TWAIN mode will be described. Here, the scanner driver  causes the scanner  to execute reading processing without using a command based on the TWAIN-standard.  illustrates a sequence flow of the processing performed by the computer  in this case. The following sequence illustrates a processing flow performed by the CPU  of the computer  loading programs stored in the ROM  and the auxiliary storage device  into the RAM , and executing those programs.","First, when the scanner  is connected via the USB interface , one button monitoring program (in this example, the button monitoring program ) is started by the OS . Next, in step A, the button monitoring program  opens a USB port which is a logical channel for communication with the scanner  and repeatedly performs polling to monitor the occurrence of a button event in the scanner .","Once the scanner driver  is started based on an instruction from the user, a UI screen provided by the scanner driver  to allow the user to issue a read instruction is displayed on the display device . When the user issues a read instruction via the UI screen, the scanner driver  is operated in the non-TWAIN mode. Thus, during the period that the button monitoring program  secures the USB port, the scanner driver  is operated in the non-TWAIN mode. More specifically, the scanner driver  issues a startup instruction based on a request that is not based on the TWAIN standard.","Since the scanner driver  is not started as the TWAIN driver, exclusive control of the USB port by the OS  (TWAIN DSM ) is not performed just based on the starting up of the scanner driver . This is because when the scanner driver  is operated in the non-TWAIN mode, the device information is not recorded in the predetermined file that enables exclusive control by the OS .","Therefore, in step A, the scanner driver  identifies the communication program (button monitoring program) that is currently opening the USB port. Then, the event transmission unit  transmits an event indicating the close request to the button monitoring program by inter-process communication. The procedure for identifying the button monitoring program that is currently opening the USB port will be described below.","In step A, when the event reception unit  of the button monitoring program  receives the event indicating the close request transmitted in step A, the event reception unit  closes the already open USB port that it is itself using. Then, in step A, the button monitoring program  transmits information indicating a successful close to the scanner driver  as a response to the close request transmitted in step A.","In step A, once the scanner driver  confirms that the USB port was successfully closed, since it has become possible for the scanner driver  to itself use the USB port, the scanner driver  opens the USB port so that it can perform reading processing. Then, the scanner driver  causes the scanner  to execute reading processing based on the reading settings specified on the UI screen of the scanner driver , acquires the read image data. When acquisition of the read image data from the scanner  is finished, then in step A, the scanner driver  closes the USB port.","Based on a specification by the user, the scanner driver  performs processing such as storing the image data in the auxiliary storage device  as an image file. The processing for producing and storing the image file may also be performed before closing the USB port. Further, the image data processing is not limited to file storage. Other types of processing may also be performed. In addition, the processing contents may be subjected to pre-specified processing, or may be subjected to processing that is specified based on an instruction from the user after the read image data is received.","When the reading processing (in this example, acquisition of the read image data and file storage) is finished, in step A, the scanner driver  transmits an open request event to the button monitoring program . In step A, the button monitoring program  receives the event, and opens the USB port. Then, in step A, once the USB port is successfully opened by the button monitoring program , the button monitoring program  transmits information indicating that the USB port was successfully opened as a response to the transmission of the open request event. Once the button monitoring program  has opened and is in possession of the USB port, the button monitoring program  restarts the polling for monitoring events in the scanner , and performs the same processing as the above-described processing that is performed at startup.","The processing for identifying the program of the event transmission destination performed by the scanner driver  in step A in the above sequence will now be described in more detail.  is a flowchart illustrating a flow according to the first exemplary embodiment of the processing performed in this case. The flowchart illustrates a processing flow performed by the CPU  of the computer  loading programs stored in the ROM  and the auxiliary storage device  into the RAM , and executing those programs.","When the scanner driver  is started in the non-TWAIN mode and a read instruction is made by the user, in step S, the CPU  confirms the button monitoring program (startup process) that is currently running from among the process information managed by the OS . The confirmation is performed by identifying, via the API provided by the OS , the ID of the program that is opening the USB port from among the plurality of programs currently running. If it is known in advance that the only communication program that could be opening the USB port to communicate with the scanner  is either the button monitoring program  or , then the confirmation can simply be performed by identifying which of these programs is running.","In step S, the CPU  determines whether the program opening the USB port is a type A or a type B. In this example, the program is either the button monitoring program  or , which corresponds to the program being either type A or type B. In the following description, the type A will refer to button monitoring program , and the type B will refer to the button monitoring program .","If it is determined that the started program is the button monitoring program  (\u201cA\u201d in step S), then in step S, the CPU  transmits a close request event specifying the button monitoring program  as the transmission destination of the event in step A in . If it is determined that the started program is the button monitoring program  (\u201cB\u201d in step S), then in step S, the CPU  transmits a close request event specifying the button monitoring program  as the transmission destination of the event in step A in .","Then, the processing illustrated in step A and subsequent steps of  is performed. In step A, the CPU  waits for a read instruction from the user via the UI screen the scanner driver  displayed on the display device . When a read instruction is made, the scanner  read the image and acquires the read image data. However, a description of reading and acquiring the image data will be omitted here.","In step S, the CPU  determines whether to shut down the scanner driver  based on whether the user performed processing to shut down the scanner driver  or the predetermined reading processing is finished. If it is determined that the scanner driver  to be shut down (YES in step S), first, the USB port opened by the scanner driver  is closed. Then, in step S, the CPU  transmits an open request event (step A in ) to the button monitoring program to which the close request was made in step S, and the CPU  shuts down the scanner driver .","Thus, even if there is a plurality of button monitoring programs in the computer , the present exemplary embodiment can identify the currently running program and cause the identified program to close the USB port. Further, even for an environment in which there are three or more programs using the USB port, the present exemplary embodiment can individually identify each of these programs, and instruct the identified programs to close the USB ports.","Next, a second exemplary embodiment of the processing for identifying the program of the event transmission destination that is performed by the scanner driver  in step A will be described. In the second exemplary embodiment, a case will be described in which the computer  includes a plurality of USB interfaces , and a different scanner can be connected to each of these USB interfaces. When a plurality of scanners is connected, a plurality of button monitoring programs is simultaneously started.  is a flowchart illustrating the processing performed in this case. The flowchart illustrates a processing flow performed by the CPU  of the computer  loading programs stored in the ROM  and the auxiliary storage device  into the RAM , and executing those programs.","In step S, similar to step S, the CPU  confirms the programs that are opening the USB ports. In this step, although the CPU  can confirm that the button monitoring program is running, it cannot confirm which program is opening the USB port corresponding to a predetermined one of the plurality of USB interfaces.","In step S, in addition to the confirmation results described for step S (type A or type B), there is also a possibly that a program opening the USB port is both types A and B. If the confirmation result in step S is the type A or the type B, in steps S and , the same processing as in steps S and S is performed respectively. If the confirmation result in step S is the types A and B, the processing proceeds to step S. In step S, first, the CPU  transmits a close request event to the button monitoring program  as the transmission destination.","Then, in step S, the scanner driver  confirms the state of the USB port corresponding to the USB interface connecting the scanner which it itself is using. Based on the confirmation result, instep S, if it is determined that the USB port is left open (YES in step S), then in step S, the CPU  determines whether X seconds (X is a predetermined duration) have elapsed since the event transmission in step S. If it is determined that X seconds have not elapsed (NO in step S), the processing in steps S and onwards is repeated.","If the USB port is still open even though X seconds have elapsed (YES instep S), it is determined as a time out, so the button monitoring program of the event transmission destination determines that the USB port that the scanner driver  intended to use is not open. Then, in step S, the CPU  transmits a close request event to the second button monitoring program  as the transmission destination.","In step S, similar to step S, the CPU  confirms the state of the USB port. In step S, if it is confirmed that the USB port is closed (NO in step S), the processing proceeds to step S. Further, if it was confirmed in the above step S that the USB port is closed (NO in step S), the processing also proceeds to step S.","The processing performed in step S is executed based on the processing of steps A and onwards in . In step S, similar to step S, the CPU  waits for a read instruction from the user. In step S, similar to step S, the CPU  determines whether to shut the scanner .","In step S, similar to step S, first, the scanner driver  closes the USB port that it itself had opened. Then, the scanner driver  transmits an open request to the button monitoring program that closed the USB port in response to the USB port close request made in steps S, S, S, and S.","If the close request is transmitted to the button monitoring program  in step S, in step S, an open request is transmitted to the button monitoring program . If the close request is transmitted to the button monitoring program  in step S, in step S, an open request is transmitted to the button monitoring program .","Based on the close request transmitted to the button monitoring program  in step S, if it is determined in step S that the USB port is not open (NO in step S), in step S, an open request is transmitted to the button monitoring program . Based on the close request transmitted to the button monitoring program  in step S, if the button monitoring program  closed the USB port, in step S, an open request is transmitted to the button monitoring program . Accordingly, if the USB port is successfully opened by either of the button monitoring programs, the scanner driver  can be shut down.","Thus, based on the processing illustrated in , even for the environment in which the plurality of programs using the USB port can be started, the present exemplary embodiment can suitably instruct the program that is currently running to close the USB port. Further, in the present exemplary embodiment illustrated in , when the plurality of button monitoring programs are running, a close request is first transmitted to the button monitoring program . However, this order may be determined based on the priority of each program, so that various orders may be employed. Further, in the present exemplary embodiment illustrated in , there are two programs that can use the USB port. However, the same processing can be performed even if there are three or more of such programs, by adding a procedure for confirming the programs that are currently running.","Next, in the second exemplary embodiment illustrated in , an example will be described that uses a thread in the processing for transmitting an event to the button monitoring program.  are flowcharts illustrating the processing performed in this case. The flowchart illustrates a processing flow performed by the CPU  of the computer  loading programs stored in the ROM  and the auxiliary storage device  into the RAM , and executing those programs.  illustrates the main processing, and  illustrate processing performed based on a thread for event transmission.","In step S, similar to step S, the program that is opening the USB port is confirmed. Then, in step S, the confirmation result of the currently running button monitoring program is determined.","In the confirmation result, if there is only one button monitoring program that is currently running, then in step S or step S, similar to steps S and S, a close request event is transmitted to the button monitoring program. Based on the event transmission performed in steps S and S, whether the USB port is successfully closed is stored in the RAM  associated with the button monitoring program of the event transmission destination.","In the confirmation result in step S, if it is determined that both the button monitoring programs  and  are currently running, then in steps S and S, an event transmission thread is created. When the event transmission threads have been created, each thread is executed in parallel.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 6B","FIG. 6C"],"b":["60","70","651","661","652","662","27"]},"In step S, the CPU  waits for a predetermined duration from the creation of the event transmission threads in steps S and S. In step S, the CPU  determines whether the processing performed using the event transmission threads is completed (whether a result is stored in the RAM ), and waits until such processing is completed.","In step S, based on the event transmission stored in the RAM , the CPU  identifies the button monitoring program that successfully closed the USB port. The identification result is stored in the RAM .","Then, the processing performed in step S is executed based on the processing of steps A and onwards in . In step S, similar to step S, the CPU  waits for a read instruction from the user. In step S, similar to step S, the CPU  determines whether to shut down the scanner driver .","In step S, the USB port opened by the scanner driver  is closed. Then, based on the event transmission results stored in the RAM  in steps S, S, and S, an open request event is transmitted to the button monitoring program that successfully closed the USB port. Then, if the USB port is successfully opened by the button monitoring program, the scanner driver  can be shut down.","Thus, based on the processing such as that illustrated in , identification of the program that is opening the USB port can be performed more efficiently than the processing illustrated in  by, for example, transmitting a plurality of events in parallel. Further, in the example illustrated in , there are two programs that can use a USB port. However, the same processing can be performed even if there are three or more of such programs, by adding a thread for event transmission processing.","In the above exemplary embodiments, the scanner driver  has the TWAIN mode and the non-TWAIN mode. However, operation can also be performed based on only the non-TWAIN mode. Further, although the OS  is described as performing exclusive control of the USB port when the scanner driver is started up in the TWAIN mode, an OS that does not have such an exclusive control function may also be employed. In addition, the button monitoring program may be a program that does not record device information in a predetermined file for enabling exclusive control by the OS .","Further, although it is described in the above exemplary embodiments that, as illustrated in  to C, the USB port opened by the button monitoring program is closed when the scanner driver  is started in the non-TWAIN mode, the closing timing is not limited to this. The USB port opened by the button monitoring program may be closed after the scanner driver  is started and when a read instruction is made via the scanner driver  UI screen.","In addition, in the above exemplary embodiments, although it is described that the scanner driver  performed the identification of the button monitoring program that is opening the USB port and made the close request to the button monitoring program, the present invention is not limited to this configuration. An application which is started up separately from the scanner driver  may determine that an instruction to start the scanner driver to be operated in the non-TWAIN mode is issued, and among the processing illustrated in , perform the processing other than reading processing.","Still further, in the above exemplary embodiments, although an example is described in which a USB is used as an interface with the scanner, some other interface may also be used, as long as it requires exclusive control of the communication channel to be performed. This can be either a local interface or a network interface.","Moreover, the scanner and the computer are not limited to being externally connected. A function corresponding to the scanner and a function corresponding to the computer in the above exemplary embodiments may be internally connected and integrated with each other.","Further, the peripheral apparatus is not limited to a scanner. For example, a printer may be used as the peripheral apparatus. In this case, exclusive control of communication channels may be performed when a printer driver performs print image data communication and when a program monitoring events in the printer performs event communication. More specifically, exclusive control may be performed between a device driver which performs image data communication with a peripheral apparatus and another communication program which performs communication with the peripheral apparatus.","According to the above exemplary embodiments, a device driver can use a communication channel by specifying the communication program that is using the communication channel when the device driver is started, and closing the communication channel.","Further, the present invention can also be realized by supplying software (a program) for realizing the functions of the above exemplary embodiments to a system or an apparatus via a network or via various storage media, and having a computer (or a central processing unit (CPU) or a micro processing unit (MPU)) of the system or apparatus read and execute the program. In this case, the program and the recording medium on which the program is recorded constitute the present invention. Further, the program may be executed by one computer, or by a plurality of computers linked together. Furthermore, the above processing does not all have to be realized by software. A part or all of the processing can be realized by hardware.","While the present invention has been described with reference to exemplary embodiments, it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all modifications, equivalent structures, and functions.","This application claims priority from Japanese Patent Application No. 2010-102524 filed Apr. 27, 2010, which is hereby incorporated by reference herein in its entirety."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate exemplary embodiments, features, and aspects of the invention and, together with the description, serve to explain the principles of the invention.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 6A to 6C"}]},"DETDESC":[{},{}]}
