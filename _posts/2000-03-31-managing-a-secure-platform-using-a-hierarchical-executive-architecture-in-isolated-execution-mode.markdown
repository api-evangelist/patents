---
title: Managing a secure platform using a hierarchical executive architecture in isolated execution mode
abstract: A processor executive (PE) handles an operating system executive (OSE) in a secure environment. The secure environment has a fused key (FK) and is associated with an isolated memory area in the platform. The OSE manages a subset of an operating system (OS) running on the platform. The platform has a processor operating in one of a normal execution mode and an isolated execution mode. The isolated memory area is accessible to the processor in the isolated execution mode. A PE supplement supplements the PE with a PE manifest representing the PE and a PE identifier to identify the PE. A PE handler handles the PE using the FK and the PE supplement.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06957332&OS=06957332&RS=06957332
owner: Intel Corporation
number: 06957332
owner_city: Santa Clara
owner_country: US
publication_date: 20000331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DESCRIPTION","ARCHITECTURE OVERVIEW","A HIERARCHICAL EXECUTIVE ARCHITECTURE TO MANAGE A SECURE PLATFORM"],"p":["1. Field of the Invention","This invention relates to microprocessors. In particular, the invention relates to processor security.","2. Description of Related Art","Advances in microprocessor and communication technologies have opened up many opportunities for applications that go beyond the traditional ways of doing business. Electronic commerce (E-commerce) and business-to-business (B2B) transactions are now becoming popular, reaching the global markets at a fast rate. Unfortunately, while modern microprocessor systems provide users convenient and efficient methods of doing business, communicating and transacting, they are also vulnerable for unscrupulous attacks. Examples of these attacks include virus, intrusion, security breach, and tampering, to name a few. Computer security, therefore, is becoming more and more important to protect the integrity of the computer systems and increase the trust of users.","Threats caused by unscrupulous attacks may be in a number of forms. An invasive remote-launched attack by hackers may disrupt the normal operation of a system connected to thousands or even millions of users. A virus program may corrupt code and\/or data of a single-user platform.","Existing techniques to protect against attacks have a number of drawbacks. Anti-virus programs can only scan and detect known viruses. Security co-processors or smart cards using cryptographic or other security techniques have limitations in speed performance, memory capacity, and flexibility. Redesigning operating systems creates software compatibility issues and causes tremendous investment in development efforts.","The present invention is a method and apparatus to manage a secure platform. A processor executive (PE) handles an operating system executive (OSE) in a secure environment. The secure environment has a fueled key (FK) and is associated with an isolated memory area in the platform. The OSE manages a subset of an operating system (OS) running on the platform. The platform has a processor operating in one of a normal execution mode and an isolated execution mode. The isolated memory area is accessible to the processor in the isolated execution mode. A PE supplement supplements the PE with a PE manifest representing the PE and a PE identifier to identify the PE. A PE handler handles the PE using the FK and the PE supplement.","A boot-up code boots up the platform following a power on. The secure environment includes an OSE supplement to supplement the OSE with an OSE manifest representing the OSE and an OSE identifier to identify the OSE. The PE handler includes a PE loader, a PE manifest verifier, a PE verifier, a PE key generator, a PE identifier logger, and a PE entrance\/exit handler. The PE loader loads the PE and the PE supplement from a PE memory into the isolated memory area using a parameter block provided by the boot-up code. The PE manifest verifier verifies the PE manifest. The PE verifier verifies the PE using the PE manifest and a constant derived from the FK. The PE key generator generates a PE key using the FK. The PE key generator includes a PE key combiner to combine the PE identifier and the FK. The combined PE identifier and the FK correspond to the PE key. The PE identifier logger logs the PE identifier in a storage. The PE entrance\/exit handler handles a PE entry and a PE exit.","The OSE handler includes an OSE loader, an OSE manifest verifier, an OSE verifier, an OSE key generator, an OSE identifier logger, and an OSE entrance\/exit handler. The OSE loader loads the OSE and the OSE supplement into the isolated memory area. The OSE manifest verifier verifies the OSE manifest. The OSE verifier verifies the OSE. The OSE key generator generates an OSE key. The OSE identifier logger logs the OSE identifier in a storage. The OSE entrance\/exit handler handles an OSE entry and an OSE exit. The OSE key generator includes a binding key generator and an OSE key combiner. The binding key generator generates a binding key (BK) using the PE key. The OSE key combiner combines the OSE identifier and the BK. The combined OSE identifier and the BK correspond to the OSE key.","The OSE includes a module loader and evictor, a key binder and unbinder, a page manager, an interface handler, a scheduler and balancer, and an interrupt handler. The module loader and evictor loads and evicts a module into and out of the isolated memory area, respectively. The module is one of an application module, an applet module, and a support module. The page manager manages paging in the isolated memory area. The interface handler handles interface with the OS. The key binder and unbinder includes an applet key generator to generate an applet key associating with the applet module. The applet key generator includes an applet key combiner to combine the OSE key with an applet identifier identifying the applet module. The combined OSE key and the applet identifier correspond to the applet key.","The boot up code includes a PE locator, a PE recorder, and an instruction invoker. The PE locator locates the PE and the PE supplement. The PE locator transfers the PE and the PE supplement into the PE memory at a PE address. The PE recorder records the PE address in the parameter block. The instruction invoker executes an isolated create instruction which loads the PE handler into the isolated memory area. The isolated create instruction performs an atomic non-interruptible sequence. The atomic sequence includes a number of operations: a physical memory operation, an atomic read-and-increment operation, an isolated memory area control operation, a processor isolated execution operation, an PE handler loading operation, a PE handler verification, and an exit operation. The physical memory operation verifies if the processor is in a flat physical page mode. The atomic read-and-increment operation reads and increments a thread count register in a chipset. The read-and-increment operation determines if the processor is the first processor in the isolated execution mode. The isolated memory area control operation configures the chipset using a configuration storage. The processor isolated execution operation configures the processor in the isolated execution mode. The processor isolated execution operation includes a chipset read operation and a processor configuration operation. The chipset read operation reads the configuration storage in the chipset when the processor is not a first processor in the isolated execution mode. The processor configuration operation configures the processor according to the configuration storage when the processor is not a first processor in the isolated execution mode. The PE handler loading operation loads the PE handler into the isolated memory area. The PE handler verification verifies the loaded PE handler. The exit operation transfers control to the loaded PE handler.","The chipset includes at least one of a memory controller hub (MCH) and an input\/output controller hub (ICH). The storage is in an input\/output controller hub (ICH) external to the processor.","In the following description, for purposes of explanation, numerous details are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that these specific details are not required in order to practice the present invention. In other instances, well-known electrical structures and circuits are shown in block diagram form in order not to obscure the present invention.","One principle for providing security in a computer system or platform is the concept of an isolated execution architecture. The isolated execution architecture includes logical and physical definitions of hardware and software components that interact directly or indirectly with an operating system of the computer system or platform. An operating system and the processor may have several levels of hierarchy, referred to as rings, corresponding to various operational modes. A ring is a logical division of hardware and software components that are designed to perform dedicated tasks within the operating system. The division is typically based on the degree or level of privilege, namely, the ability to make changes to the platform. For example, a ring- is the innermost ring, being at the highest level of the hierarchy. Ring- encompasses the most critical, privileged components. In addition, modules in Ring- can also access to lesser privileged data, but not vice versa Ring- is the outermost ring, being at the lowest level of the hierarchy. Ring- typically encompasses users or applications level and has the least privilege. Ring-i and ring- represent the intermediate rings with decreasing levels of privilege.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1A","b":["50","50","50","0","10","1","20","2","30","3","40","52","52","50","50","52"]},"Ring- includes two portions: a normal execution Ring- and an isolated execution Ring-. The normal execution Ring- includes software modules that are critical for the operating system, usually referred to as kernel. These software modules include primary operating system (e.g., kernel) , software drivers , and hardware drivers . The isolated execution Ring- includes an operating system (OS) nub  and a processor nub . The OS nub  and the processor nub  are instances of an OS executive (OSE) and processor executive (PE), respectively. The OSE and the PE are part of executive entities that operate in a secure environment associated with the isolated area  and the isolated execution mode. The processor nub loader  is a protected bootstrap loader code held within a chipset in the system and is responsible for loading the processor nub  from the processor or chipset into an isolated area as will be explained later.","Similarly, ring-, ring-, and ring- include normal execution ring-, ring-, ring-, and isolated execution ring-, ring-, and ring-, respectively. In particular, normal execution ring- includes N applications to and isolated execution ring- includes K applets to .","One concept of the isolated execution architecture is the creation of an isolated region in the system memory, referred to as an isolated area, which is protected by both the processor and chipset in the computer system. The isolated region may also be in cache memory, protected by a translation look aside (TLB) access check. Access to this isolated region is permitted only from a front side bus (FSB) of the processor, using special bus (e.g., memory read and write) cycles, referred to as isolated read and write cycles. The special bus cycles are also used for snooping. The isolated read and write cycles are issued by the processor executing in an isolated execution mode. The isolated execution mode is initialized using a privileged instruction in the processor, combined with the processor nub loader . The processor nub loader  verifies and loads a ring- nub software module (e.g., processor nub ) into the isolated area. The processor nub  provides hardware-related services for the isolated execution.","One task of the processor nub  is to verify and load the ring- OS nub  into the isolated area, and to generate the root of a key hierarchy unique to a combination of the platform, the processor nub , and the operating system nub . The operating system nub  provides links to services in the primary OS  (e.g., the unprotected segments of the operating system), provides page management within the isolated area, and has the responsibility for loading ring- application modules , including applets to , into protected pages allocated in the isolated area. The operating system nub  may also load ring- supporting modules.","The operating system nub  may choose to support paging of data between the isolated area and ordinary (e.g., non-isolated) memory. If so, then the operating system nub  is also responsible for encrypting and hashing the isolated area pages before evicting the page to the ordinary memory, and for checking the page contents upon restoration of the page. The isolated mode applets to and their data are tamper-resistant and monitor-resistant from all software attacks from other applets, as well as from non-isolated-space applications (e.g., to ), dynamic link libraries (DLLs), drivers and even the primary operating system . Only the processor nub  or the operating system nub  can interfere with or monitor the applet's execution.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 1B","b":["10","0","10","3","40","50","60"]},"The accessible physical memory  includes an isolated area  and a non-isolated area . The isolated area  includes applet pages  and nub pages . The non-isolated area  includes application pages  and operating system pages . The isolated area  is accessible only to elements of the operating system and processor operating in isolated execution mode. The non-isolated area  is accessible to all elements of the ring- operating system and to the processor.","The normal execution ring- including the primary OS , the software drivers , and the hardware drivers , can access both the OS pages  and the application pages . The normal execution ring-, including applications to , can access only to the application pages . Both the normal execution ring- and ring-, however, cannot access the isolated area .","The isolated execution ring-, including the OS nub  and the processor nub , can access to both of the isolated area , including the applet pages  and the nub pages , and the non-isolated area , including the application pages  and the OS pages . The isolated execution ring-, including applets to , can access only to the application pages  and the applet pages . The applets to reside in the isolated area .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 1C","b":["100","100","110","120","130","140","150","160","170","175","180","182","184","186","130","150","130","100"]},"The processor  represents a central processing unit of any type of architecture, such as complex instruction set computers (CISC), reduced instruction set computers (RISC), very long instruction word (VLIW), or hybrid architecture. In one embodiment, the processor  is compatible with an Intel Architecture (IA) processor, such as the Pentium\u2122 series, the IA-32\u2122 and the IA-64\u2122. The processor  includes a normal execution mode  and an isolated execution circuit . The normal execution mode  is the mode in which the processor  operates in a non-secure environment, or a normal environment without the security features provided by the isolated execution mode. The isolated execution circuit  provides a mechanism to allow the processor  to operate in an isolated execution mode. The isolated execution circuit  provides hardware and software support for the isolated execution mode. This support includes configuration for isolated execution, definition of an isolated area, definition (e.g., decoding and execution) of isolated instructions, generation of isolated access bus cycles, and generation of isolated mode interrupts.","In one embodiment, the computer system  can be a single processor system, such as a desktop computer, which has only one main central processing unit, e.g. processor . In other embodiments, the computer system  can include multiple processors, e.g. processors , , , etc., as shown in FIG. C. Thus, the computer system  can be a multi-processor computer system having any number of processors. For example, the multi-processor computer system  can operate as part of a server or workstation environment. The basic description and operation of processor  will be discussed in detail below. It will be appreciated by those skilled in the art that the basic description and operation of processor  applies to the other processors and , shown in , as well as any number of other processors that may be utilized in the multi-processor computer system  according to one embodiment of the present invention.","The processor  may also have multiple logical processors. A logical processor, sometimes referred to as a thread, is a functional unit within a physical processor having an architectural state and physical resources allocated according to some partitioning policy. Within the context of the present invention, the terms \u201cthread\u201d and \u201clogical processor\u201d are used to mean the same thing. A multi-threaded processor is a processor having multiple threads or multiple logical processors. A multi-processor system (e.g., the system comprising the processors , , and ) may have multiple multi-threaded processors.","The host bus  provides interface signals to allow the processor  or processors , , and to communicate with other processors or devices, e.g., the MCH . In addition to normal mode, the host bus  provides an isolated access bus mode with corresponding interface signals for memory read and write cycles when the processor  is configured in the isolated execution mode. The isolated access bus mode is asserted on memory accesses initiated while the processor  is in the isolated execution mode. The isolated access bus mode is also asserted on instruction pre-fetch and cache write-back cycles if the address is within the isolated area address range and the processor  is initialized in the isolated execution mode. The processor  responds to snoop cycles to a cached address within the isolated area address range if the isolated access bus cycle is asserted and the processor  is initialized into the isolated execution mode.","The MCH  provides control and configuration of memory and input\/output devices such as the system memory  and the ICH ISO. The MCH  provides interface circuits to recognize and service isolated access assertions on memory reference bus cycles, including isolated memory read and write cycles. In addition, the MCH  has memory range registers (e.g., base and length registers) to represent the isolated area in the system memory . Once configured, the MCH  aborts any access to the isolated area that does not have the isolated access bus mode asserted.","The system memory  stores system code and data. The system memory  is typically implemented with dynamic random access memory (DRAM) or static random access memory (SRAM). The system memory  includes the accessible physical memory  (shown in FIG. B). The accessible physical memory includes a loaded operating system the isolated area  (shown in FIG. B), and an isolated control and status space . The loaded operating system  is the portion of the operating system that is loaded into the system memory . The loaded OS  is typically loaded from a mass storage device via some boot code in a boot storage such as a boot read only memory (ROM). The isolated area , as shown in , is the memory area that is defined by the processor  when operating in the isolated execution mode. Access to the isolated area  is restricted and is enforced by the processor  and\/or the MCH  or other chipset that integrates the isolated area functionalities. The isolated control and status space  is an input\/output (I\/O)-like, independent address space defined by the processor  and\/or the MCH . The isolated control and status space  contains mainly the isolated execution control and status registers. The isolated control and status space  does not overlap any existing address space and is accessed using the isolated bus cycles. The system memory  may also include other programs or data which are not shown.","The ICH  represents a known single point in the system having the isolated execution functionality. For clarity, only one ICH  is shown. The system  may have many ICH's similar to the ICH . When there are multiple ICH's, a designated ICH is selected to control the isolated area configuration and status. In one embodiment, this selection is performed by an external strapping pin. As is known by one skilled in the art, other methods of selecting can be used, including using programmable configuring registers. The ICH  has a number of functionalities that are designed to support the isolated execution mode in addition to the traditional I\/O functions. In particular, the ICH  includes an isolated bus cycle interface , the processor nub loader  (shown in FIG. A), a digest memory , a cryptographic key storage , an isolated execution logical processor manager , and a token bus interface .","The isolated bus cycle interface  includes circuitry to interface to the isolated bus cycle signals to recognize and service isolated bus cycles, such as the isolated read and write bus cycles. The processor nub loader , as shown in , includes a processor nub loader code and its digest (e.g., hash) value. The processor nub loader  is invoked by execution of an appropriate isolated instruction (e.g., Iso_Init) and is transferred to the isolated area . From the isolated area , the processor nub loader  copies the processor nub  from the system flash memory (e.g., the processor nub code  in non-volatile memory ) into the isolated area , verifies and logs its integrity, and manages a symmetric key used to protect the processor nub's secrets. In one embodiment, the processor nub loader  is implemented in read only memory (ROM). For security purposes, the processor nub loader  is unchanging, tamper-resistant and non-substitutable. The digest memory , typically implemented in RAM, stores the digest (e.g., hash) values of the loaded processor nub , the operating system nub , and any other critical modules (e.g., ring- modules) loaded into the isolated execution space. The cryptographic key storage  holds a symmetric encryption\/decryption key that is unique for the platform of the system . In one embodiment, the cryptographic key storage  includes internal fuses that are programmed at manufacturing. Alternatively, the cryptographic key storage  may also be created with a random number generator and a strap of a pin. The isolated execution logical processor manager  manages the operation of logical processors operating in isolated execution mode. In one embodiment, the isolated execution logical processor manager  includes a logical processor count register that tracks the number of logical processors participating in the isolated execution mode. The token bus interface  interfaces to the token bus . A combination of the processor nub loader digest, the processor nub digest, the operating system nub digest, and optionally additional digests, represents the overall isolated execution digest, referred to as isolated digest. The isolated digest is a fingerprint identifying the ring- code controlling the isolated execution configuration and operation. The isolated digest is used to attest or prove the state of the current isolated execution.","The non-volatile memory  stores non-volatile information. Typically, the non-volatile memory  is implemented in flash memory. The non-volatile memory  includes the processor nub . The processor nub  provides the initial set-up and low-level management of the isolated area  (in the system memory ), including verification, loading, and logging of the operating system nub , and the management of the symmetric key used to protect the operating system nub's secrets. The processor nub  may also provide application programming interface (API) abstractions to low-level security services provided by other hardware. The processor nub  may also be distributed by the original equipment manufacturer (OEM) or operating system vendor (OSV) via a boot disk.","The mass storage device  stores archive information such as code (e.g., processor nub ), programs, files, data, applications (e.g., applications to ), applets (e.g., applets to ) and operating systems. The mass storage device  may include compact disk (CD) ROM , floppy diskettes , and hard drive , and any other magnetic or optical storage devices. The mass storage device  provides a mechanism to read machine-readable media. When implemented in software, the elements of the present invention are the code segments to perform the necessary tasks. The program or code segments can be stored in a processor readable medium or transmitted by a computer data signal embodied in a carrier wave, or a signal modulated by a carrier, over a transmission medium. The \u201cprocessor readable medium\u201d may include any medium that can store or transfer information. Examples of the processor readable medium include an electronic circuit, a semiconductor memory device, a ROM, a flash memory, an erasable programmable ROM (EPROM), a floppy diskette, a compact disk CD-ROM, an optical disk, a hard disk, a fiber optical medium, a radio frequency (RF) link, etc. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels, optical fibers, air, electromagnetic, RF links, etc. The code segments may be downloaded via computer networks such as the Internet, an Intranet, etc.","I\/O devices  may include any I\/O devices to perform I\/O functions. Examples of I\/O devices  include a controller for input devices (e.g., keyboard, mouse, trackball, pointing device), media card (e.g., audio, video, graphics), a network card, and any other peripheral controllers.","The token bus  provides an interface between the ICH  and various tokens in the system. A token is a device that performs dedicated input\/output functions with security functionalities. A token has characteristics similar to a smart card, including at least one reserved-purpose public\/private key pair and the ability to sign data with the private key. Examples of tokens connected to the token bus  include a motherboard token , a token reader , and other portable tokens  (e.g., smart card). The token bus interface  in the ICH  connects through the token bus  to the ICH  and ensures that when commanded to prove the state of the isolated execution, the corresponding token (e.g., the motherboard token , the token ) signs only valid isolated digest information. For purposes of security, the token should be connected to the digest memory.","The overall architecture discussed above provides a basic insight into a hierarchical executive architecture to manage a secure platform. The elements shown in , B, and C are instances of an abstract model of this hierarchical executive architecture. The implementation of this hierarchical executive architecture is a combination of hardware and software. In what follows, the processor executive, the processor executive handler, and the operating system executive are abstract models of the processor nub , the processor nub loader , and the operating system nub  (, B, and C), respectively.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 2","b":["200","200","210","220","230","240","250"]},"The processor executive (PE)  handles an operating system executive (OSE)  in the secure environment . The PE supplement  supplements the PE with a PE manifest  representing the PE and a PE identifier  to identify the PE. The PE handler  handles the PE  using a fused key (FK)  in the secure environment  and the PE supplement . The PE  and the PE supplement  are located in a PE memory . The PE memory  is located in the non-isolated memory area .","The PE handler  handles the PE  using the FK  and the PE supplement . The PE handler  obtains information to locate the PE memory  via a parameter block  provided by the boot-up code .","The boot-up code  boots up the platform following a power on. The boot-up code  obtains an original PE  and an original PE supplement  from a system ROM (e.g., system flash  as shown in )","The secure environment  includes a fused key (FK) , an operating system executive (OSE) , and an OSE supplement . The OSE supplement  supplements the OSE  with an OSE manifest  representing the OSE and an OSE identifier  to identify the OSE. The secure environment  is associated with an isolated memory area  () in the platform. The OSE  manages a subset  of an operating system (OS)  running on the platform. The platform has a processor  operating in one of a normal execution mode  and an isolated execution mode  as shown in FIG. C. The isolated memory area  is accessible to the processor  in the isolated execution mode .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 3","FIG. 2"],"b":["230","230","310","320","330","360","370","380"]},"The PE loader  loads the PE  and the PE supplement  from the PE memory  () into the isolated memory area  using a PE address in the parameter block  () provided by the boot-up code . The PE loader  provides a loaded PE manifest  and a loaded PE  located in the isolated memory area  and corresponding to the PE manifest  and the PE , respectively.","The PE manifest verifier  verifies the PE manifest  by comparing the PE manifest  with the loaded PE manifest  and generates a result to a PE error generator . If the verification fails, the error generator  generates a failure or fault condition with an error code associated with the PE manifest verification.","The PE verifier  verifies the PE  using the verified loaded PE manifest  and a constant  derived from the FK  by a constant deriver . Essentially, the PE verifier  compares the PE  with the loaded PE . In addition, the PE verifier  determines a manifest of the loaded PE  using the constant  and compares the determined PE manifest with the verified loaded PE manifest . The PE verifier  then generates a result to the PE error generator . If the verification fails, the error generator  generates a failure or fault condition with an error code associated with the PE verification.","The PE key generator  generates a PE key  using the FK . The PE key generator  includes a PE key combiner  to combine the PE identifier  and the FK . The combined PE identifier  and the FK  correspond to the PE key .","The PE identifier logger  logs the PE identifier  in a storage . The PE identifier logger  writes the PE identifier  into the storage . The storage  is a register located inside a chipset such as the ICH  shown in FIG. C.","The PE entrance\/exit handler  handles a PE entrance and a PE exit. The PE entrance includes obtaining the entry point in the configuration buffer of the processor  to represent the PE's entry handler. The PE exit returns control to the boo-up code .",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 4","FIG. 2"],"b":["210","210","410","420","430","460","470","480"]},"The OSE loader loads the OSE  and the OSE supplement  into the isolated memory area  as shown in  using an OSE parameter block  provided by the OS . The OSE loader  provides a loaded OSE manifest  and a loaded OSE  located in the isolated memory area  and corresponding to the OSE manifest  and the OSE , respectively.","The OSE manifest verifier  verifies the OSE manifest  by comparing the OSE manifest  with the loaded OSE manifest . The OSE manifest verifier  generates a result to an OSE error generator . If the verification fails, the OSE error generator  generates a failure or fault condition with an error code associated with the OSE manifest verification.","The OSE verifier  verifies the OSE . Essentially, the OSE verifier  compares the OSE  with the loaded OSE . In addition, the OSE verifier  determines a manifest of the loaded OSE  using a root key and compares the determined OSE manifest with the verified loaded OSE manifest . The OSE verifier  then generates a result to the OSE error generator . If the verification fails, the OSE error generator  generates a failure or fault condition with an error code associated with the OSE verification.","The OSE key generator  generates an OSE key . The OSE key generator  includes a binding key (BK) generator  and an OSE key combiner . The binding key generator  generates a binding key (BK)  using the PE key  (FIG. ). The OSE key combiner  combines the OSE identifier  and the BK . The combined OSE identifier  and the BK  correspond to the OSE key .","The OSE identifier logger  logs the OSE identifier  in the storage . The storage  is a register located inside a chipset such as the ICH  shown in FIG. C.","The OSE entrance\/exit handler  handles an OSE entrance and an OSE exit. The OSE entrance initializes parameters in a frame buffer and saves appropriate control parameters and transfers control to an entrance handler. The OSE exit clears and creates appropriate return parameters and then transfers control to the exit handler,",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 5","FIG. 2"],"b":["270","270","510","520","530","540","550","560"]},"The module loader and evictor  loads and evicts a module into and out of the isolated memory area , respectively. The module is one of an application module , an applet module , and a support module . The page manager  manages paging in the isolated memory area . The interface handler  handles interface with the subset  in the OS  (FIG. ). The key binder and unbinder  includes an applet key generator  to generate an applet key  associated with the applet module . The applet key generator  includes an applet key combiner  combines the OSE key  () with an applet identifier  identifying the applet module . The combined OSE key  and the applet identifier  correspond to the applet key .","The scheduler and balancer  schedules execution of the loaded modules and balances the load of the isolated execution mode. The interrupt handler  handles interrupts and exceptions generated in the isolated execution mode.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 6","FIG. 2"],"b":["610","620","630"]},"The PE locator  locates the original PE  and the original PE supplement . The PE locator  transfers the original PE  and the original PE supplement  into the PE memory  at a PE address . The PE recorder  records the PE address  in the PE parameter block . As discussed above, the PE handler  obtains the PE address  from the PE parameter block  to locate the PE  and the PE supplement  in the PE memory .","The instruction invoker  invokes and executes an isolated create instruction  which loads the PE handler  into the isolated memory area . The isolated create instruction  performs an atomic non-interruptible sequence . The atomic sequence  includes a number of operations: a physical memory operation , an atomic read-and-increment operation , an isolated memory area control operation , a processor isolated execution operation , an PE handler loading operation , a PE handler verification , and an exit operation .","The physical memory operation  verifies if the processor is in a flat physical page mode. The atomic read-and-increment operation  reads and increments a thread count register in a chipset. The read-and-increment operation  determines if the processor is the first processor in the isolated execution mode. The isolated memory area control operation  configures the chipset using a configuration storage. The processor isolated execution operation  configures the processor in the isolated execution mode. The processor isolated execution operation  includes a chipset read operation  and a processor configuration operation . The chipset read operation  reads the configuration storage in the chipset when the processor is not a first processor in the isolated execution mode. The processor configuration operation  configures the processor according to the configuration storage read by the chipset read operation  when the processor is not a first processor in the isolated execution mode. The PE handler loading operation  loads the PE handler  into the isolated memory area . The PE handler verification  verifies the loaded PE handler. The exit operation  transfers control to the loaded PE handler.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 7","b":"700"},"Upon START, the process  boots up the platform following power on (Block ). The platform has a secure environment. The secure environment includes a fused key, an operating system executive (OSE), and an OSE supplement. The details of the Block  are shown in FIG. . Then, the process  handles a processor executive (PE) using the fused key and the PE supplement (Block ). The details of the Block  are shown in FIG. . Then, the process  handles the OSE in the secure environment (Block ). The details of the Block  are shown in FIG. .","Next, the process  manages a subset of an operating system running on the platform (Block ). The process  is then terminated.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 8","b":"710"},"Upon START, the process  locates the PE and the PE supplement (Block ). Then, the process  transfers the PE and the PE supplement into the PE memory at a PE address (Block ). Next, the process  records the PE address in a PE parameter block (Block ). Then, the process  executes the isolated create instruction (Block ). The details of the Block  are shown in FIG. . The process  is then terminated.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 9","b":"840"},"Upon START, the process  determines if the processor is in a flat physical page mode (Block ). If not, the process  sets the processor in the flat physical page mode (Block ) and proceeds to Block . Otherwise, the process  determines if the thread count register is zero (Block ). This is done by reading the thread count register in the chipset to determine if the processor is the first processor in the isolated execution mode. If not, the process  determines that the processor is not the first processor in the system to be in the isolated execution mode. The process  then reads the configuration storage from the chipset (Block ). Then, the process  configured the processor using the chipset configuration storage (Block ). Then, the process  proceeds to Block .","If the thread count register is zero, the process  determines that the processor is the first processor in the system to be booted up with isolated execution mode. The process  then increments the thread count register to inform to other processors that there is already a processor being booted up in isolated execution mode (Block ). Then, the process  configures the chipset and the processor in isolated execution mode by writing appropriate setting values (e.g., isolated mask and base values) in the chipset and processor configuration storage (Block ). To configure the processor, the process  may also need to set up the isolated execution mode word in the control register of the processor.","Next, the process  loads the PE handler from the ROM internal to the shipset to the isolated memory area (Block ). Then, the process  determines if the loaded PE handler is the same as the original PE handler in the ROM (Block ). If not, the process  generates a failure or fault condition with an appropriate error code (Block ) and is then terminated. Otherwise, the process  transfers control to the loaded PE handler (Block ). The process  is then terminated.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 10","b":"720"},"Upon START, the process  loads the PE and the PE supplement from a PE memory into the isolated memory area using a parameter block provided by the boot-up code (Block ). Next, the process  determines if the loaded PE manifest is the same as the original PE manifest (Block ). If not, the process  generates a failure or fault condition with appropriate error code (Block ) and is then terminated. Otherwise, the process  determines if the loaded PE has the same manifest as the loaded PE manifest (Block ). If not, the process  goes to Block  and is then terminated. Otherwise, the process  generates a PE key using the fused key in the secure environment (Block ).","Then, the process  logs the PE identifier in a storage (Block ). This log storage is typically a register in an ICH. Then, the process  changes the entry point in the configuration buffer of the processor to prepare for an OSE entrance (Block ). Then, the process  returns to the boot-up code (Block ). The process  is then terminated.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 11","b":"730"},"Upon START, the OS boots and locates the OSE and the OSE supplement in the OSE memory at an OSE address (Block ). Then the OS records the OSE address in an OSE parameter block (Block ). Next, the process  determines if an OSE has already been loaded (Block ). If yes, the process  is terminated. Otherwise, the process  loads the OSE and the OSE supplement into the isolated memory area (Block ).","Next, the process  determines if the loaded OSE manifest is the same as the original OSE manifest (Block ). If not, the process  generates a failure or fault condition with an appropriate error code (Block ) and is then terminated. Otherwise, the process  determines if the loaded OSE has the same manifest as the loaded OSE manifest (Block ). If not, the process  goes to block  and is then terminated. Otherwise, the process  generates the OSE key using the PE key and the OSE identifier (Block ).","Then, the process  logs the OSE identifier in a storage (Block ). Typically, this log storage is a register in a chipset such as the ICH. Next, the process  clears any PE secrets or services that are not needed (Block ). Then, the process  returns to the PE's exit handler (Block ). The process  is then terminated.","While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications of the illustrative embodiments, as well as other embodiments of the invention, which are apparent to persons skilled in the art to which the invention pertains are deemed to lie within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will become apparent from the following detailed description of the present invention in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 6","FIG. 2"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
