---
title: Techniques for managing multiple hierarchies of data from a single interface
abstract: Techniques for managing multiple hierarchies of data from a single native hierarchy include registering a set of routines for each foreign hierarchy. The set of routines performs a set of operations on data in the hierarchy associated with a node. A user request is received, which indicates a particular operation on particular data that does not correspond to a node of the native hierarchy. Based on the user request, a first operation on a first set of one or more nodes of a first hierarchy that is not the native hierarchy is determined. A particular routine that corresponds to the first operation is selected from a first set of routines registered for the first hierarchy, and is invoked. These techniques allow a user to employ a consistent interface with the native hierarchy to reach data in any of the hierarchies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06947950&OS=06947950&RS=06947950
owner: Oracle International Corporation
number: 06947950
owner_city: Redwood Shores
owner_country: US
publication_date: 20021126
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF AN EMBODIMENT OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Example Hierarchical File Systems","Functional Overview","Structural Overview","Resource Management Server","Method for Managing Multiple Hierarchies","Register Function Set","Process Client Requests","Example Request: Get File","Example Request: Copy File","Hardware Overview"],"p":["This application claims benefit of Provisional Appln. 60\/424,543, filed Nov. 6, 2002, the entire contents of which are hereby incorporated by reference as if fully set forth herein, under 35 U.S.C. \u00a7119(e).","This application is related to U.S. patent application Ser. No. 10\/306,485, hereinafter referenced as Agarwal, filed Nov. 26, 2002, the entire contents of which are hereby incorporated by reference as if full set forth herein.","The present invention relates to techniques for managing hierarchical data, and, in particular, to techniques for managing multiple hierarchies of data from a single integrated interface.","Some data are naturally organized as hierarchies. Hierarchies are well-known mathematical constructs. In general, a hierarchy is composed of nodes at multiple levels. The nodes at each level are each linked to one or more nodes at a different level. Each node at a level below the top level is a child node of one or more of the parent nodes at the level above. In a tree hierarchy, each child node has only one parent node, but a parent node may have multiple child nodes. In a tree hierarchy, a node that has no parent node linked to it is the root node, and a node that has no child nodes linked to it is a leaf node. A tree hierarchy typically has a single root node.","For example, a flexible file system used by a computer operating system to store contents on a computer readable medium is often organized into a hierarchy of \u201cfolders\u201d or \u201cdirectories.\u201d Each folder can contain any number of files that store data on a computer readable medium and any number of other folders. The folder that contains the files and other folders is the parent node of those files and folders. The files and other folders are the child nodes of that folder. The system typically has one root folder.","Also, data elements in the extensible markup language (XML) are arranged into a tree hierarchy. XML is widely used to store data and exchange data between independent applications. Each data element in XML may be composed of zero or more child elements. Each element also has an element name and zero or more additional element attributes. The XML document is the single root element.","While convenient for many purposes, operations on data organized by hierarchies, such as file systems and XML documents, can be difficult to express. Operations may include, for example, creating, retrieving data from, writing data to, copying, moving and deleting the nodes of the hierarchies, such as files or XML elements. The expression of the nodes and operations may vary from one hierarchical data system to another. It would be convenient to operate on data spread among multiple hierarchies with a single integrated interface that uses a single set of expressions for the nodes and operations.","In one approach, nodes from multiple hierarchies are assembled into one system with an established and convenient interface that functions on a user's equipment (called hereinafter the user's \u201cnative system\u201d). For example, in one native system, nodes in a hierarchy are stored in a node table in a relational database, and the parent-child relationships are stored in a hierarchical index. Such an index may list, for example, every parent node, and for each parent node, all of the child nodes that are immediately below the parent node in the hierarchy. In such a system, SQL commands can be used to list the nodes that satisfy certain criteria. Operations on the nodes can be performed by one or more stored procedures.","Maintaining a node table and hierarchical index in this manner enables one to use an SQL query on a file system to find the path from a root folder to a particular folder or file that satisfies certain criteria on the folder or file attributes. For example, one can get the file names and the paths from the root folder for all files that are owned by user Scott and were created between Jan. 1, 2001 and Jan. 10, 2001, assuming \u201cowner\u201d and \u201ccreation date\u201d are attributes of the files in the node table. Then, one can copy those files to a new folder or otherwise operate on those files.","While this approach works well for many kinds of data organized in hierarchies, the approach has some shortcomings. For example, in many cases, the non-native (i.e., foreign) hierarchical data systems provide resources for storing and retrieving the data. To import that data into the native system causes the native system to devote its own resources to store data that are already stored elsewhere. This can greatly increase the expense of maintaining the native system.","Furthermore, the number of nodes in the foreign systems may be large, yet the users of the native system may wish to operate on those nodes infrequently. Importing all those nodes into the native system may bloat the hierarchical index of the native system. A bloated index can lead to increased response time and overall degraded performance by the native system.","In addition, incorporating a new foreign system consumes resources on the user's systems that increase with the amount of data in the new foreign system. The data contents of the new system have to be copied from the new system to the native system, and the native indexes have to be updated. Similarly, detaching a foreign system also consumes resources that increase with the amount of the data in the foreign system. The data contents may have to be deleted from the native system and the native indexes have to be updated. If the contents of the foreign system are changed, the native system may have to both detach the old version of the foreign system and incorporate the new version. Consuming so many resources to attach and detach foreign systems can lead to overall degraded performance by the native system.","Furthermore, there may be aspects of data security that preclude importing the foreign data into the native system. For example, the foreign system may control access to data in the foreign hierarchy based on an unusual or proprietary security model that might be difficult or impermissible to express or enforce in the native system.","Based on the foregoing, there is a clear need for techniques to manage hierarchical data in multiple hierarchies with a single interface, which do not suffer the above deficiencies. In particular, there is a need for techniques to manage data distributed among multiple hierarchies with a single interface without importing all the data into a single hierarchical data system.","The past approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not to be considered prior art to the claims in this application merely due to the presence of these approaches in this background section.","According to one embodiment, a technique for managing multiple hierarchies of data containers from a single native hierarchy includes:\n\n","Techniques are described for managing data containers arranged in multiple hierarchies. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","In the following, embodiments of the invention are described in the context of managing multiple hierarchical file systems from a native hierarchical file system stored in a relational database. However, the techniques and mechanisms described herein are not limited to this context. In other embodiments, the native system is another management system for a hierarchy of data containers.","As used herein, the term \u201cdata container\u201d designates the data associated with a node, whether that data is a folder, a file, an XML element, or some other grouping of data in the hierarchy, such as an entry in one or more columns of a relational database table. In some embodiments, other hierarchical data, such as an XML document, may form one or more of the hierarchies of data containers.","According to one embodiment, a technique for managing multiple hierarchies of data containers from a single native hierarchy includes:\n\n","The techniques described herein allow a user to employ a consistent interface with the native hierarchy in order to reach a data container in any of the hierarchies registered with the system that manages the native hierarchy. Because registered functions are invoked to reach foreign data containers, the data contained in the foreign data containers do not need to be incorporated into the native hierarchy. Thus, fewer resources of the system that manages the native hierarchy are consumed for searching the data in the foreign data containers or for incorporating or detaching the contents of all the foreign data containers.",{"@attributes":{"id":"p-0028","num":"0037"},"figref":"FIG. 1","b":["100","101","110","110","110","110","110","110","110","110","110","111","110","101"],"i":["a, ","b, ","c, ","e, ","f, ","d, ","g, "]},"The nodes  are connected to other nodes  by links . A link  associates one node  with a different, single node . Link associates parent node with child node Similarly, links and associate one parent node  with one child node . Ellipsis  indicates other links  in the hierarchy  that correspond to one-to-one associations among other resources in the file system.",{"@attributes":{"id":"p-0030","num":"0039"},"figref":"FIG. 1","b":["102","103","102","130","130","130","131","130","130","130","130","102","140","140","141","140"],"i":["a, ","b, ","c, ","a ","b ","c ","a, ","b, "]},"Foreign hierarchy  includes nodes and among other nodes indicated by ellipsis , collectively referenced hereinafter as foreign nodes , that each correspond to a resource in a second foreign filing system. Nodes and correspond to folders in the second foreign file system and are parent nodes to one or more other nodes; and node corresponds to a file in the foreign file system, which is a leaf node. Foreign hierarchy  includes links and among other links indicated by ellipsis , collectively referenced hereinafter as foreign links .","Each node , ,  has one or more attributes that correspond to properties of the corresponding resource. For example, node attributes may correspond to one or more of a resource name, a resource type (indicating whether file or folder, or indicating a file type or a folder type), a resource creation date, a resource modification date, a resource owner, a resource size, and a list of one or more resource authors, among other properties of the resource.","Each link , ,  has one or more attributes that describe the association between the nodes that the link connects. For example, link attributes may correspond to one or more of a link name, a link type (indicating, for example whether the link represents a parent-child relationship or another relationship, such a sibling relationship, a grandparent-grandchild relationship, or an aunt-niece relationship), a link creation date, a link modification date, a link owner, a link owner type (e.g., a soft link with only one owner who creates or deletes the child, or a hard link with multiple owners any of whom may create and all of whom must delete the child), and a link descriptive text, among other properties of the link.","In many file systems, all links are implied. The implied links are of the same types (e.g., parent-child soft links), have no names independent of the nodes, and do not have any other attributes.","A path represents a sequence of links from one node (start node) to another node (finish node) in a hierarchy. Any method known in the art to specify the path may be used. Often, a path is specified by a path name that lists the links between the start node and the finish node. In many file systems, a path name is constructed by combining link names of the links, separated by a delimiting set of one or more special characters, in the order of traversal from start node to finish node. Often the start node is the root node of the hierarchy. For example, a path from folder to file is given by the path name:\n\n","A path is useful as output from the relational database system, because resources in different folders can have the same name, and those resources are distinguished by the paths leading to them. A particular resource is indicated by the path name and the resource name. The file systems operate on data (such as data in a file or lists of files in a folder) from the resource uniquely specified by the path.","As shown in , in some hierarchies, there may be more than one path leading to the same node. For example, three paths lead to file from the root node \n\n","Hierarchies in which more than one path leads to a child node are said to include cycles. Such hierarchies are represented as graphs rather than as trees.",{"@attributes":{"id":"p-0039","num":"0053"},"figref":"FIG. 1","b":["190","190","190","190","190"],"i":["a ","b, "]},"According to embodiments of the invention, resources ,  and links ,  in the foreign hierarchies ,  are considered virtual resources in the native hierarchy . The foreign hierarchies ,  are connected to the native hierarchy through corresponding virtual links, collectively referenced hereinafter as virtual links . Functions, to perform a set of basic file system operations on resources and links in a foreign hierarchy, are registered for each foreign hierarchy connected by a virtual link .","When traversing one of the virtual links from a native folder to a virtual resource during an operation involving a target virtual resource, one of the registered functions is invoked. The registered function that is invoked corresponds to a particular operation to perform on the target virtual resource. An input parameter of the invoked function indicates the target virtual resource.","By invoking registered functions, file systems operations can be performed on nodes and links in the foreign file systems without importing those nodes or links into the native file system. Since nodes and links are not imported into the native system, the native system does not expend native system resources to manage these foreign nodes and links. This allows a user to employ a consistent interface with the native hierarchy in order to reach a data container in any of the foreign hierarchies registered with the native hierarchy without importing the nodes or links of the foreign file system.",{"@attributes":{"id":"p-0043","num":"0057"},"figref":"FIG. 2","b":["200","200","220","210","240"]},"In the illustrated embodiment, the resource management server  is an application that provides file system services for resources in a file system. Well known file system services include listing contents of a folder, creating a resource in a folder, deleting a resource from a folder, getting data from a file, getting properties of a resource, moving a resource from one folder to another, and copying a resource from one folder to another.","Resource clients  include any application that requests file system services involving resources in one or more hierarchies from resource management server . In the illustrated embodiment, resource clients  include resource client and resource client among other resource clients represented by ellipsis .","Foreign hierarchies servers  include any application that provides file system services on resources in a foreign file system. In the illustrated embodiment, foreign hierarchy servers  include foreign hierarchy server and foreign hierarchy server among other foreign hierarchy servers represented by ellipsis . Each foreign hierarchy server  includes data representing the resources and links that correspond to the nodes and links of a corresponding foreign hierarchy. In the illustrated embodiment, foreign hierarchy server includes the resources and links of foreign hierarchy  in , and foreign hierarchy server includes the resources and links of foreign hierarchy  in FIG. . One or more of the foreign hierarchy servers  may reside on the same host as the resource management server . Any or all of foreign hierarchy servers  may reside on one or more hosts different from the host of resource management server .","In other embodiments, resource management server  is replaced by a data container management server, which is an application that provides services for data containers in other hierarchical systems that might not be file systems, such as XML documents. Services for data containers may include services similar to file system services, such as listing contents of a parent container, creating a child container in a parent container, deleting a child container from a parent container, getting data from a container, getting properties of a container, moving a container from one parent container to another, and copying a container from one parent container to another. In other embodiments, resource clients  are replaced by data container clients, which are applications that request data container services involving one or more hierarchies. In other embodiments, foreign hierarchy servers are foreign systems that manage hierarchical data containers, such as foreign file systems and different systems for editing contents of XML documents.","The resource management server  includes native hierarchy data , a hierarchical processing engine , a client interface , and registered function sets , including registered function set and registered function set among other registered function sets represented by ellipsis .","The native hierarchy data  includes the resources and links that correspond to the nodes and links of the native hierarchy, such as hierarchy  in FIG. . Any method known in the art for representing the native hierarchy, when the resource management server  is implemented, may be employed. For example, the data representing resources and links are arranged as described in Agarwal.","The client interface  provides access for one or more clients for sending requests for the services of the resource management server . The requests sent by clients  can be expressed in any manner known in the art. In some embodiments, the requests are messages sent from a client  executing on one host to the resource management server  executing on a different host over a network using a message exchange protocol. For example, in some embodiments, the requests are file transfer protocol (FTP) requests, well known in the art. In some embodiments, the requests are hypertext transfer protocol (HTTP) requests. In some embodiments, the requests use a protocol called web-based distributed authoring and versioning (\u201cWebDAV\u201d) that extends HTTP to support hierarchical operations over the internet that mimic popular file systems. In the system of Agarwal, the messages include a statement in a structured query language (SQL) of a relational database management system that manages hierarchical data representing resources and links in a file system.","In some embodiments, the client requests are not expressed as messages, but as calls to routines specified in an application programming interface (API). Each API is specified for a high level programming language, such as JAVA (hereinafter, called \u201cJava\u201d), C, and a SQL procedural language called PL\/SQL. The use of APIs is well known in the art. The API names a routine that can be called by the client and lists the parameter and parameter types used as arguments when the routine is called. According to some embodiments, APIs in several programming languages are provided for obtaining file system services from resource management server .","The hierarchical processing engine  is a process that determines and executes operations on one or more resources or links of the native hierarchy and the foreign hierarchies, which operations are involved in satisfying the request received from the client . The hierarchical processing engine  is described in more detail in a later section with reference to FIG. .","The registered function sets  are processes that make requests for services from the foreign hierarchy servers . Data modules, which include instructions that cause a processor to perform the processes of each registered functions set, are registered with the resource management server ; and those instructions are executed when the hierarchical processing engine  invokes a function from the function set. Such modules of instructions that are executed by another process are well known in the art as \u201cplug-in\u201d modules. A method for registering a module for each registered function set is described in a later section with reference to FIG. .","In some embodiments, each of one or more of the foreign hierarchies servers  is a resource management server, like resource management server , which has its own native hierarchy data and registered function sets for one or more hierarchy servers foreign to it.","Using the resource management server , a client may interact with the single interface  and obtain resources from any of several hierarchies, including the native hierarchy and one or more foreign hierarchies.",{"@attributes":{"id":"p-0056","num":"0070"},"figref":["FIG. 3","FIG. 3"]},"In step , a function set  is registered for each foreign hierarchy of resources to be managed by the resource management server . Any method for registering a set of one or more functions with another application may be used. In the illustrated embodiment, an API for function calls made by the hierarchical processing engine  is established, and a module that includes instructions matched to that API is provided to resource management server  by an integration administrator who wishes to incorporate a foreign hierarchy. Resource management server  stores an association between each foreign hierarchy and the corresponding module.","In an illustrated embodiment, the function set includes functions to perform the basic file system operations listed in Table 1.",{"@attributes":{"id":"p-0059","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example basic file system operations to be supported by each function set."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Basic",{},{}]},{"entry":["operation",{},{}]},{"entry":["name","operand(s)","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["get-","path name\/","Get a listing of all resources that are"]},{"entry":["folder-","folder name","children of the operand"]},{"entry":"contents"},{"entry":["list-begin","path name\/","Start list of current folder contents"]},{"entry":[{},"folder name"]},{"entry":["list-next","iteration","Get next resource that is a child of the"]},{"entry":[{},"context","current folder"]},{"entry":[{},"object"]},{"entry":["list-end","iteration","End list of current folder contents"]},{"entry":[{},"context"]},{"entry":[{},"object"]},{"entry":["get-file-","path name\/","Get data stream of contents from operand"]},{"entry":["contents","file name"]},{"entry":["get-","path name\/","Get properties of operand stored as"]},{"entry":["resource-","resource","metadata associated with the operand"]},{"entry":["properties","name"]},{"entry":["get-link-","path name","Get properties of last link in operand stored"]},{"entry":["properties",{},"as metadata associated with the last link in"]},{"entry":[{},{},"operand"]},{"entry":["create-","path name\/","Create a folder within folder given by first"]},{"entry":["folder","folder name,","operand,"]},{"entry":[{},"folder","named according to the second operand,"]},{"entry":[{},"properties","with properties given by third operand"]},{"entry":["create-file","path name\/","Create a file within folder given by first"]},{"entry":[{},"folder name,","operand,"]},{"entry":[{},"new file","named according to the second operand,"]},{"entry":[{},"name","with properties given by third operand, and"]},{"entry":[{},"file","contents from fourth operand"]},{"entry":[{},"properties"]},{"entry":[{},"data"]},{"entry":[{},"stream"]},{"entry":["create-link","path name\/","Create a link between folder given by first"]},{"entry":[{},"folder name,","operand,"]},{"entry":[{},"resource","and resource given by second operand,"]},{"entry":[{},"name,","named according to the third operand,"]},{"entry":[{},"new link","with properties given by fourth operand"]},{"entry":[{},"name,"]},{"entry":[{},"link"]},{"entry":[{},"properties"]},{"entry":["delete-","path name\/","Delete a folder given by operand"]},{"entry":["folder","folder name"]},{"entry":["delete-file","path name\/","Delete a file given by operand"]},{"entry":[{},"file name"]},{"entry":["Rename-","path name\/","Renames a resource given by first operand"]},{"entry":["resource","resource","with name given by second operand"]},{"entry":[{},"name,","(moves resource)"]},{"entry":[{},"new path"]},{"entry":[{},"name"]},{"entry":[{},"resource"]},{"entry":[{},"name"]},{"entry":["copy-","path name\/","Copies resource at first operand into folder"]},{"entry":["resource","resource","given by second operand"]},{"entry":[{},"name,"]},{"entry":[{},"new path"]},{"entry":[{},"name\/"]},{"entry":[{},"folder name"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In other embodiments, more or fewer operations and corresponding functions may be included in each function set. For example, operations for deleting, renaming, and copying links may be added; or operations for copy and rename can be omitted by substituting a combination of delete and create operations.","In some embodiments, each function in the module has a name that matches the basic operation name and a parameter list that matches the operands. Each function then includes one or more instructions to generate commands that cause the corresponding foreign hierarchy server to perform the operation described in Table 1 for that operation.","During step , one or more modules with functions to perform the operations of Table 1 are registered with the resource management server  for each foreign hierarchy managed by foreign hierarchy servers . In some embodiments, the name of the path or folder where the foreign node is to be linked to the native hierarchy is also specified. In some embodiments, other properties of the foreign hierarchy are also specified when the module is registered. For example, it is specified whether resources in the foreign hierarchy may be modified or not; a resource that can not be modified is said to be \u201cread-only,\u201d a resource that can be modified is said to be \u201cmodifiable.\u201d It may be specified whether a resource or link of the foreign hierarchy can be found by searching on properties or contents of the resource or link; a foreign hierarchy that allows such searches is said to be \u201csearchable.\u201d If the foreign hierarchy is searchable, then, in some embodiments, one or more search functions are added to the function set, and a module to invoke the foreign hierarchy's search capability is provided during registration. If the resources or links of the foreign hierarchy can be modified, then it may be specified whether such modifications are committed automatically when made (called \u201cauto-committed\u201d), or are committed only when a transaction of several steps is completed and an explicit commit action is taken, such as invoking a commit function (called \u201ctransactional\u201d). In some embodiments, the root node of the foreign hierarchy is associated, by default, with the specified path name to the virtual link. In some embodiments a non-root node of the foreign hierarchy is associated with the virtual link; in such embodiments the path name in the foreign hierarchy to the associated non-root node is also included during registration in step .","In some embodiments a mapping is generated during step  that associates the function set for one foreign hierarchy with the path name to the virtual link  that associates a folder in the native hierarchy with a node in that foreign hierarchy. In some embodiments, the mapping is done at the level of individual functions in the module, so that the functions may be spread over one or more modules, and the function names may differ from the basic operation names in Table 1.","In some embodiments, the link properties of the native hierarchy include attributes that indicate whether the link is a virtual link , and, if so, the name of the module where the function set is stored, or a list of the module and functions names of each function in the function set. While traversing a path, when the virtual link is encountered, the operation is performed using the associated module or function on a resource on the portion of the path following the virtual link.","For purposes of illustration, it is assumed that the registration of a function set is done by invoking a routine of the resource management server  called \u201ccreate_virtual_folder\u201d and specifying the following information as parameters of that routine in the following order:\n\n","It is further assumed, for purposes of illustration, that the module named \u201cBasicOp103\u201d contains the function set for the foreign hierarchy  shown in , and foreign hierarchy  is modifiable but not searchable, where the modifications are automatically committed. Then, foreign hierarchy  can be registered with the resource management server  for native hierarchy  under folder as shown in , with the following statement:\n\n",{"@attributes":{"id":"p-0067","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example mapping of basic operations to function sets for two foreign"},{"entry":"hierarchies."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Foreign hierarchy 102","Foreign hierarchy 103"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["path name","\/L120a\/120d\/L190a","\/L120b\/120f\/L190b"]},{"entry":["searchable","No","No"]},{"entry":["modifiable","No","Yes"]},{"entry":["auto-committed","Not applicable","Yes"]},{"entry":["get-folder-contents","Basic102A.get_folder","BasicOp103.folder_contents"]},{"entry":["list-begin","Basic102A.begin_folder_list","BasicOp103.begin_list"]},{"entry":["list-next","Basic102A.next_in_folder_list","BasicOp103.next"]},{"entry":["list-end","Basic102A.end_folder_list","BasicOp103.end_list"]},{"entry":["get-file-contents","Basic102A.get_file","BasicOp103.file_contents"]},{"entry":["get-resource-properties","Basic102A.get_attributes","BasicOp103.attributes"]},{"entry":["get-link-properties","Basic102B.get_link_attributes","BasicOp103.link_attributes"]},{"entry":["create-folder","Basic102A.no_operation","BasicOp103.new_folder"]},{"entry":["create-file","Basic102A.no_operation","BasicOp103.new_file"]},{"entry":["create-link","Basic102A.no_operation","BasicOp103.add_link"]},{"entry":["delete-folder","Basic102A.no_operation","BasicOp103.delete"]},{"entry":["delete-file","Basic102A.no_operation","BasicOp103.delete"]},{"entry":["rename-resource","Basic102A.no_operation","BasicOp103.rename"]},{"entry":["copy-resource","Basic102A.no_operation","BasicOp103.copy"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In step , a file system request is received at resource management server  from a client  to operate on the files and folders in the multiple hierarchies . For example, a request is received at interface  to list all contents under folder The request may be received in any manner known in the art, for example in an HTTP\/WebDAV message. For example, the request includes the expression, \u201clist all under folder \/LL\/N\u201d The desired result of this request is a listing of the names of the resources under that folder, e.g. the name Nof native file the name Nof foreign folder the name Nof foreign folder the name Nof foreign file and the names of other resources indicated by ellipsis , preceded by appropriate path names.","In step , the hierarchical processing engine  determines a native operation on a native resource or link, if any, and a foreign operation on foreign resource or link, if any, based on the request. For example, the engine  determines that the request to list all involves a next native operation to get contents of folder ","In step , the next native operation is performed, which returns identifications for native link to native file and virtual link to foreign folder It is assumed, for purposes of illustration, that the virtual link is stored in the native hierarchy data  and includes the name of the root node of the foreign hierarchy . The name of the links and resources are inserted into a results data structure for returning to the client. It is assumed, for purposes of illustration, that the results data structure is updated to include the following, designated R1:\n\n\/L\/N,\/L\/N\u2003\u2003(R1)\n","In the illustrated embodiment, step  overlaps step  in time, so that after the native operation is performed in step , as described above, the processing engine  determines the next foreign operation in step . In step , the hierarchical processing engine  recognizes that native file has no children but that folder might, In the illustrated embodiment, during registration in step , described above, a mapping was stored that associates a path ending in link with a function set for foreign hierarchy . Thus the hierarchical processing engine  knows that folder is a foreign folder for hierarchy , because it is under link Therefore, in the illustrated embodiment, the next foreign operation is a get-folder-contents operation on \/L\/NUsing the path name in the mapping in Table 2, it is determined that the foreign operations are those in the middle column of Table 2, which are associated with path name \/L\/\/L","In step , a particular function is selected that corresponds to the next foreign operation from the function set registered for the particular foreign hierarchy. In the illustrated embodiment, the function \u201cBasicA.get_folder\u201d is selected. As shown in Table 2, \u201cBasicA.get_folder\u201d corresponds to the basic operation \u201cget-folder-contents\u201d registered for the foreign hierarchy  under link ","In step , the selected function is invoked. In the illustrated embodiment, the function \u201cBasic102A.get_folder\u201d is invoked with the operand specified for the basic operation, the path name and folder name of the folder. The path name and file name in the operand is below the virtual path that indicates which foreign hierarchy. For example, the function is invoked in the following expression, designated foreign function invocation 1 (FFI1)\n\nBasic A.get_folder(\u201c\/N130a\u201d)\u2003\u2003(FFI1)\n\nwhich returns \/L\/L\/\n","In step , the results from the native and foreign operations are combined with any extant results, adding path names as desired. For example, after step , the result data structure includes the following, designated R2.\n\n\/L\/N\/L\/N\/L\/L\/\/L\/L\/\u2003\u2003(R2)\n","In step , it is determined whether the operations performed in steps  and  are the last operations involved in fulfilling the request from the client. If not, control passes back to step  to determine the next native and foreign operations to perform. For example, after getting the contents of folder in step , the hierarchical processing engine , should still get the contents of the folder so control passes back to step . In step , it is determined that the next operation is to get the contents of folder \/L\/\/Because this folder is under \/Lit is a foreign folder in hierarchy . Control passes to step  to select the correct function to get the folder contents, which again is \u201cBasic102A.get_folder.\u201d In step , the function is invoked to get the contents of folder \/L\/L\/Nusing the portion of the path name below Las shown in the following expression, FFI2.\n\nBasic A.get_folder(\u201c\/L140a\/N130b\u201d)\u2003\u2003(FFI2)\n\nAny results obtained are added to the results data structure, in step . The loop from steps  to step  continues until no folder remains in foreign hierarchy .\n","If it is determined in step  that the last operation has been performed to satisfy the client request, control passes to step . In step , the results are returned to the client  from the resource management server .","In other embodiments, the results of the native operation to get the contents of folder yields the links to the next nodes but not the node names. The names associated with a node are obtained from the get-resource-properties operation. To get the name of child node on link a native operation on native node is performed. To get the name of the child node on virtual link a function associated with a foreign hierarchy has to be invoked. In this case, step  involves 1) determining the native function get-resource-properties to obtain the name for node and 2) determining that a corresponding foreign function should be used to obtain the name for node Thus a native operation and a foreign operation are determined based on the client request to list the contents of folder ","To further illustrate the use of method  for managing resources on multiple hierarchies, a client request to get the contents of a file on hierarchy  is described. It is assumed that a user of client knows that file exists on path \/L\/L\/L\/L\/ as a result of the \u201clist all\u201d request described above. In a subsequent request considered here, client sends a request to obtain the contents of this file from resource management server .","In step , the hierarchical processing engine  receives a request to get file contents for \/L\/L\/L\/L\/Nand breaks this into a native operation on a native resource and a foreign operation on a foreign resource. Specifically, the hierarchical processing engine  determines the native operation:\n\n","In step , the native operation is performed, if any. Since the path \/L\/L\/Ldoes not indicate a file, no file contents are obtained during step .","In step , the foreign function corresponding to get-file-contents is selected from the mapping in Table 2. The hierarchy under Lis hierarchy . Under hierarchy , the corresponding foreign function is BasicA.get_file.","In step , the foreign function is invoked on the foreign target \/L\/NThe expression formed by the hierarchical processing engine is given by FFI3.\n\nBasicA.get_file(\/L\/N)\u2003\u2003(FFI3)\n\nThe result of FFI3 is a data stream of contents from file \n","In step , that data stream is placed into the results data structure. In step , it is determined that there are no other operations to perform to satisfy the user request. In step , the data stream is sent to the client in one or more messages to client ","Thus a native operation and a foreign operation are determined based on the client request to get the contents of file ","To further illustrate the use of method  for managing resources on multiple hierarchies, a client request to copy a file on hierarchy  into a folder in hierarchy  is described. It is assumed that a user of client knows that file exists on path \/L\/L\/L\/L\/ as a result of the \u201clist all\u201d request described above. It is further assumed that a user of client knows that folder exists on path \/L\/L\/L\/L\/ as a result of a list all request on folder ","In the request considered here, client sends a request to resource management server , to copy a file to folder using the expression Q1:\n\nCopy \/L\/L\/L\/L\/Nto \/L\/L\/L\/L\u2003\u2003(Q1)\n","In step , the hierarchical processing engine  receives the request Q1, and breaks this into a sequence of native operations on native resources and foreign operations on foreign resources. Because the source and destination files are not in the same foreign hierarchy, a copy operation cannot be performed in the foreign hierarchy. Instead, a file has to be created in the destination foreign hierarchy  based on the file contents in the source foreign hierarchy. In the illustrated embodiment, the hierarchical processing engine  determines the following specific sequence of operations:\n\n","In step , the next native operation (1) is performed, if any. Since the path \/L\/L\/Ldoes not indicate a resource, no resource properties are obtained during step .","In step , the foreign function corresponding to the next foreign operation (2), which is get-resource-properties, is selected from the mapping in Table 2. The hierarchy under Lis hierarchy . Under hierarchy , the corresponding foreign function is Basic A.get_attributes.","In step , the foreign function is invoked on the foreign target \/L\/NThe expression formed by the hierarchical processing engine is given by FFI4.\n\nBasic A.get_attributes(\/L\/N)\u2003\u2003(FFI4)\n\nThe result of FFI4 is a current attributes data structure of values for attributes for file such as the owner, the date of creation, among others.\n","In step , no results are stored in the results data structure. No results are returned to a client when a copy operation is performed.","In step , it is determined that there are other operations to perform to satisfy the user request; specifically there are the operations 3, 4, 5, 6 listed above.","In the next iteration of step , the next native operation (3) is performed. Since the path \/L\/L\/Ldoes not indicate a file, no file contents are obtained during step .","In the next iteration of step , the foreign function corresponding to the next foreign operation (4), which is get-file-contents, is selected from the mapping in Table 2. The hierarchy under Lis hierarchy . Under hierarchy , the corresponding foreign function is BasicA.get_file.","In step , the foreign function is invoked on the foreign target \/L\/NThe expression formed by the hierarchical processing engine is given by FFI5 (similar to FFI3, described in the previous section).\n\nBasicA.get_file(\/L\/N)\u2003\u2003(FFI5)\n\nThe result of FFI5 is a data stream of contents from file \n","In step , it is determined that there are other operations to perform to satisfy the user request; specifically there are the operations 5, 6 listed above.","In the next iteration of step , the next native operation (5) is performed, which is a create-file operation. Since the path \/L\/L\/Ldoes not indicate a folder, no file is created during step .","In the next iteration of step , the foreign function corresponding to the next foreign operation (6), which is create-file, is selected from the mapping in Table 2. The hierarchy under Lis hierarchy . Under hierarchy , the corresponding foreign function is BasicOp.new_file.","In step , the foreign function is invoked on the foreign target \/L\/NThe expression formed by the hierarchical processing engine is given by FFI6.\n\nBasicOp.new_file (\/L\/N,N, properties, data stream)\u2003\u2003(FFI6)\n\nWhere properties indicates the values in the current attributes data structure. The result of FFI6 is a new file in hierarchy  based on the attributes and data stream of contents from file \n","Thus several native operations and several foreign operations are determined based on the client request to copy the contents of file in foreign hierarchy  to folder in foreign hierarchy .",{"@attributes":{"id":"p-0101","num":"0163"},"figref":"FIG. 4","b":["400","400","402","404","402","400","406","402","404","406","404","400","408","402","404","410","402"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings, in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0019","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0026"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
