---
title: Methods and systems for abstraction of logical editing operations
abstract: Embodiments of the present invention relate to methods, systems, and computer-readable media for editing an object displayed by a computer system. Editing comprises detecting an edit operation for an object displayed on a video display of a computer system. An edit operation request is then sent to an abstraction layer via an interface provided by the abstraction layer to initiate editing of the object by the abstraction layer. The abstraction layer receives the edit operation request and determines the type of container in which the object is displayed based on properties related to the object to be edited. The abstraction layer reads a set of properties related to the object and the container in which the object is displayed. The abstraction layer may then edit the object based the properties of the container and object by modifying one or more of the properties of the container and object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07469385&OS=07469385&RS=07469385
owner: Microsoft Corporation
number: 07469385
owner_city: Redmond
owner_country: US
publication_date: 20040220
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to the field of graphical user interfaces and more particularly to abstraction of logical editing operations performed on objects displayed on a graphical user interface.","A visual display such as a graphical user interface presented by software may include objects and containers. An object can be any item on a visual display. A container can be an object upon or within which other objects are presented. For example, a container, such as a spreadsheet or word processing document, may include a number of objects, such as cells, graphics, user interface elements, and others. The objects within such a container may have a defined presentation size, position, etc. This presentation may be defined and edited dynamically by the software displaying the container and objects. For example, an object may be moved, resized, rotated, etc. within its container during execution of the software presenting that object. These editing actions may be initiated by a user action such as dragging and dropping an object using a mouse or other pointing device or may be initiated by the software itself in response to some other event.","Typically, a body of code within the application is responsible for arranging elements of a visual display such as objects and containers. For example, an application program presenting a number of objects includes code representing a layout editor, sometimes referred to as a \u201cform editor\u201d or \u201c2D editor,\u201d for arranging and\/or editing the appearance of the containers and objects presented by that application. However, to function properly, the layout editor requires specific, prior knowledge of the parent container for the objects to be edited. For example, the layout editor must have specific knowledge of the type of container, the size of the container and other attributes for that container in order to properly present the objects. This information is important to the layout editor because an object may be sized, positioned, etc, within its parent container differently based on the type of container in which it is placed. For example, depending on the type of container in which an object is displayed, a container may position the object based on an absolute position or size given in x,y coordinates and\/or offset values, a radius and\/or angular value, an ordinal value, and others. For example, if the container presents objects based on absolute positioning, the layout editor should use the absolute positioning values to edit the object. In another example, if the objects are positioned in a flowing manner from left to right along a top or bottom edge of the container an object ordinal value should be used to edit the position of the objects.","For the layout editor to have such specific knowledge of the parent container and change properties of the container and objects within that container based on that knowledge and the editing operation, the layout editor of the application consists of extensive code. Further complicating matters, an object may be placed on an arbitrary surface in a container that may arbitrarily arrange its children. Therefore, the changes made by the layout editor will be ineffective.","As such, there is no simple manner in which an application may arrange or edit objects on a display without consideration of the type of container in which the object will be placed. Additionally, an application's layout editor is limited to editing only objects within a container for which it has specific knowledge. It is with respect to these considerations and others that the present invention has been made.","In accordance with the present invention, the above and other problems are solved by an abstraction layer for use when performing logical editing operations. The abstraction layer provides a number of interfaces that may be used by application programs to perform various logical editing operations on objects and containers on a video display. For example, the abstraction layer may provide for moving, resizing, reordering, etc. a specified object. Through the abstraction layer interfaces to each of these operations, an application program may affect the editing operation without code specific to that editing operation and without knowledge of the object's parent container.","In accordance with still other aspects, the present invention relates to a method of editing objects displayed by a computer system. The method comprises detecting an edit operation for an object displayed on a video display of a computer system. An edit operation request is then sent to an abstraction layer via an interface provided by the abstraction layer to initiate editing of the object by the abstraction layer.","In accordance with other aspects, the present invention relates to a system for editing objects displayed on a video display. The system comprises a processor and a memory coupled with and readable by the processor. The memory contains instructions that, when executed by the processor, cause the processor to detect an edit operation for an object displayed on a video display of a computer system. An edit operation request is then sent to an abstraction layer via an interface provided by the abstraction layer to initiate editing of the object by the abstraction layer. The abstraction layer receives the edit operation request and determines the type of container in which the object is displayed based on properties related to the object to be edited. The abstraction layer then reads a set of properties related to the object to be edited and a set of properties related to the container in which the object is displayed. The abstraction layer may then edit the object based the properties of the container and object by modifying one or more of the properties of the container and object.","The invention may be implemented as a computer process, a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process.","These and various other features as well as advantages, which characterize the present invention, will be apparent from a reading of the following detailed description and a review of the associated drawings.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["105","140","110","110","115","120","130","115","120","130","120","130","115","115","115","115"]},"Also shown on the display  is a cursor  that may be moved by a user of computer system  using a mouse or other pointing device to select and\/or manipulate the objects -. For example, a user, by manipulating a mouse, may position the cursor over an object and select and move, i.e., drag and drop, an object to move that object. In another example, a user may resize or rotate an object by dragging and dropping an edge or corner of the object.","Software  executed on the computer system  may include one or more applications . The application , such as a word processor, spreadsheet, web browser, or other program, may generate the container  and\/or the objects - contained therein. To arrange and edit the objects, the application uses the abstraction layer . That is, rather than directly arranging and editing the objects - which would require specific layout algorithms within the application, the application  calls, invokes, instantiates, or otherwise initiates execution of the abstraction layer . The abstraction layer  then, with knowledge of the container  and objects -, positions or edits the objects - within the container  on the display .","The abstraction layer  may obtain knowledge of the objects - and container  in a variety of ways. For example, the abstraction layer may read a type attribute for each object and the container. Alternatively, the abstraction layer may read a property setting for each object and the container. In another example, the abstraction layer may read an object type and\/or container type from a registry or other persistent memory.","When a user of the computer system  uses a mouse or other pointing device to select or manipulate the objects -, the application  may use an interface  provided by the abstraction layer  to initiate an appropriate logical editing operation. For example, a user may manipulate the cursor  to select and move, i.e. drag-and-drop, one of the objects . In such a case, the application  may call, invoke, instantiate, or otherwise initiate execution of a move method or operation of the abstraction layer  through a corresponding interface  of the abstraction layer . In this way, the application  need not contain code for editing or arranging the objects - in the container . The application  simply detects the editing operation and passes the appropriate parameters to the abstraction layer .","The abstraction layer  may represent a class with specific knowledge, i.e., properties of the object and its container. Having this knowledge allows the abstraction layer  to make specific changes to affect the editing action. The abstraction layer , by presenting a number of methods, allows editing operations such as move, resize, rotate, stretch, skew, etc. to be applied to a container or objects within that container without requiring the application  to know how objects are positioned or arranged within the container. That is, the abstraction layer  translates logical editing operations such as move or resize into changes to object-specific properties such as width, height, absolute position, etc. depending upon the object and container. Additionally, the abstraction layer  handles editing of objects when the container controls the display of the object. For example, the parent container may, depending upon its type, control the positioning of the object. In such a case, the abstraction layer  may edit the properties of the container to affect the editing operation on the object.","The abstraction layer  may also allow more than one application  to easily modify the same object and\/or container. For example, since specific knowledge of the object and container is available to the abstraction layer , applications do not need to obtain or maintain this information. In order to edit an object or container, the application simply accesses the logical editing operation via the appropriate interface of the abstraction layer. That is, if the abstraction layer  is implemented as a class, multiple applications may access the logical editing operations of that class by instantiating an object of that class and invoking the method for performing the desired operation using the appropriate interface.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["200","105","200","202","204","204","206","200","200","208","210","204","208","210","200","200"]},"System  typically includes communications connection(s)  that allow the system to communicate with other devices. Communications connection(s)  is an example of communication media. Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.","System  may also have input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, etc. Output device(s)  such as a display, speakers, printer, etc. may also be included. All these devices are well know in the art and need not be discussed at length here.","A computing device, such as system , typically includes at least some form of computer-readable media. Computer readable media can be any available media that can be accessed by the system . By way of example, and not limitation, computer-readable media might comprise computer storage media and communication media.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["300","200","305","305","305","305","310","325","310","315","300","330","340","315","325","315","345","355","330","340"]},"The abstraction layer  includes a number of interfaces - through which the application  may initiate a number of corresponding editing operations -. The interfaces - and corresponding operations - may represent any of a variety of possible editing operations that may be performed by the abstraction layer . For example, the abstraction layer  may provide for moving, resizing, re-ordering, rotating, skewing, or otherwise manipulating the appearance of the objects within the container. Of course, many other possible editing operations may be performed depending upon the exact nature of the container and object and the properties available for those elements. Other editing operations may involve manipulating any property of the object, not necessarily positional properties. For example, sound, text, colors and other properties of the object may be edited by the abstraction layer. Additionally, creating, deleting, copying objects or data can also be done via logical operations through the abstraction layer.","As mentioned above, embodiments of the present invention may be implemented utilizing object-oriented programming techniques. For example, the container  and objects - may be implemented as instances of a class of a given type. The abstraction layer  may also be implemented as an instance of a class. Further, the abstraction layer  may inherit the properties  of the container  as well as the properties - of each object -. In this way, the abstraction layer  may have specific knowledge of the objects - and the container . The abstraction layer class can also provide methods defined for that class representing the logical editing operations - through the interfaces -. Therefore, when the application  invokes a particular logical editing operation  through an interface , the corresponding method for that operation  may modify properties  for the container  and\/or properties - for one or more objects -.","The operations of the abstraction layer generally consist of receiving the edit operation and other parameters from the application  through an interface . For example, an interface for executing a move operation may have a parameter for identifying the object to be moved and a parameter for the amount or distance the object should be moved. The abstraction layer  then determines the object to be edited from the parameters and determines the objects container. The abstraction layer  then determines the container's type. The abstraction layer  may obtain knowledge of the objects - and container  in a variety of ways. For example, the abstraction layer may read a type attribute for each object and the container. Alternatively, the abstraction layer may read a property setting for each object and the container. In another example, the abstraction layer may read an object type and\/or container type from a registry or other persistent memory. Types of containers that may be used may include, but are not limited to, an absolute positioning type, a flowing type, and a docking type. Based on the type of container, the abstraction layer  may then perform the appropriate editing operation by modifying the properties of the object being edited and\/or the container for that object.","For example, an application, responsive to input from a user or some other event, may request a move operation by calling, invoking, instantiating, or otherwise initiating the move operation of the abstraction layer using the move interface. The application, when initiating the move operation may supply an indication of the distance to be moved or a destination location for the object along with the name or other identification of the object to be moved. The abstraction layer move operation can then identify the object's parent container from the object's properties, determine the parent container's type from the properties of that container or other data, and edit the properties of the container and\/or object to affect the move based on how the container arranges it objects. So, if, for example, the container arranges objects therein by an absolute position, the object's x,y coordinates may be edited by the move operation of the abstraction layer. If, in another example, the container arranges objects in a flowing manner, the ordinal value of the object may be edited by the move operation of the abstraction layer.","As mentioned above, the abstraction layer  may be implemented as an object oriented class of a predefined type having the methods and properties described. It should be noted that the abstraction layer  may represent multiple instances of this class. For example, one instance may be used for each object in a particular container. Additionally, one instance may be used for the container itself. Therefore, the instance for the container and the instances for the objects may, in some cases function independently. There may also be multiple instances for the same object to affect different editing operations. For example, editing operations that affect the container only need not involve the instances for the objects within that container. Different editing operations such as move and rotation could be done by the same or different instances of the abstraction layer. Further, if the abstraction layer is implemented as a class, the class may be made extensible to allow the addition of new operations. For example, various types of three dimensional editing operations may be added.","Various type of containers may be used when displaying objects. Editing operations performed on objects within these containers may depend on the type of container used. Container types that may be used include but are not limited to an absolute positioning type container, a flowing type container, and a docking type container. The following discussion of these container types is offered by way of example and not limitation. Various other types of containers and combinations of these and other containers are contemplated.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4","b":["400","405","415","400"]},"The objects presented in an absolute positioning container may be positioned anywhere within the container. The objects may be moved, resized, rotated, etc. by editing the position and size properties for the object. Further, editing one object in this type of container may be performed independent of any other object within the same container or the container itself. That is, properties of the container or other objects need not be edited when editing one of the objects.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 5","b":["500","505","515"]},"The objects of a flowing container may be edited by modifying the order property or the size properties. For example, moving an object may be performed by modifying the order properties of the various objects in the container or changing the ordinal position in the container's child list. Similarly, resizing an object may be accomplished by changing the height and\/or width properties.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 6","b":["600","605","600","610","600","615","620"]},"The logical operations of the various embodiments of the present invention are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly, the logical operations making up the embodiments of the present invention described herein are referred to variously as operations, structural devices, acts or modules. It will be recognized by one skilled in the art that these operations, structural devices, acts and modules may be implemented in software, in firmware, in special purpose digital logic, and any combination thereof without deviating from the spirit and scope of the present invention as recited within the claims attached hereto.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 7","b":["705","705"]},"Next, send operation  sends an edit operation request to the abstraction layer. As discussed above, the abstraction layer provides a number of interfaces for requesting logical edit operations. Therefore, send operation  may comprise using one of these interfaces to cause the abstraction layer to perform an associated logical edit operation. That is, the application may invoke or request an editing operation of the abstraction layer by calling that operation with the corresponding interface. This call may be associated with one or more parameters indicating, for example, the object to be edited and other values such as an offset, distance, location, etc.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 8","b":["805","805","805"]},"Once the abstraction layer has received the edit operation, the abstraction layer, at determine operation  determines the type of container in which the object to be edited is displayed. As mentioned above, the abstraction layer may obtain knowledge of the objects and container in a variety of ways. For example, the abstraction layer may read a type attribute for each object and the container. Alternatively, the abstraction layer may read a property setting for each object and the container. In another example, the abstraction layer may read an object type and\/or container type from a registry or other persistent memory.","Next, at read operation , the abstraction layer retrieves the object's properties. These attributes may be stored as properties of the class instance for that object. Alternatively, the type and other attributes may be stored in a registry or other persistent memory in another common manner. The various properties of the objects may indicate the size, position, and other attributes to be used by the editing operation.","At read operation  the abstraction layer reads the properties of the container in which the object is displayed. These attributes may be stored as properties of the class instance for that container. Alternatively, the type and other attributes may be stored in a registry or other persistent memory in another common manner. The various properties of the container may indicate the size, position, and other attributes to be used by the editing operation.","Next, at edit operation , the abstraction layer performs the indicated editing function by modifying the properties of the object and\/or the container. As described above, the object and\/or the container may be edited by modifying the various properties of the object or container. For example, an object may be moved by modifying the absolute position properties or the ordinal value properties depending upon the type of container. In another example, an object may be resized by modifying a height and\/or width property. Of course, many other possible editing operations may be performed depending upon the exact nature of the container and object and the properties available for those elements. Other editing operations may involve manipulating any property of the object, not necessarily positional properties. For example, sound, text, colors and other properties of the object may be edited by the abstraction layer. Additionally, creating, deleting, copying objects or data can also be done via logical operations through the abstraction layer.","The various embodiments described above are provided by way of illustration only and should not be construed to limit the invention. Those skilled in the art will readily recognize various modifications and changes that may be made to the present invention without following the example embodiments and applications illustrated and described herein, and without departing from the true spirit and scope of the present invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
