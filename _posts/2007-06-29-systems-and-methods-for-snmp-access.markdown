---
title: Systems and methods for SNMP access
abstract: Systems and methods for SNMP access are disclosed. A computer-implemented method of SNMP access includes mapping a MIB object in a MIB into an XML object in an XML document, generating a class library based on the XML document, creating a service object representative of a service associated with SNMP access to the MIB object, and linking the class library according to the service object to perform the service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08327007&OS=08327007&RS=08327007
owner: Iyuko Services L.L.C.
number: 08327007
owner_city: Dover
owner_country: US
publication_date: 20070629
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to computer networks in general, and more particularly to systems and methods for simple network management protocol (SNMP) access.","With the proliferation of computer networks, the need has developed for more powerful tools to manage computer networks as they increase in size and complexity. One facility available for managing computer networks is the simple network management protocol (SNMP). The SNMP includes two primary elements: a manager and agents. The SNMP manager is the console through which the network administrator performs network management functions. The SNMP agents are entities that interface to the actual network devices being managed. Hubs, routers or network servers are examples of managed network devices that contain managed objects. The managed objects of each managed network device might be hardware, configuration parameters, performance statistics, and so on, that directly relate to the current operation of the managed network device. The managed objects are arranged in a management information base (MIB) and each managed object is referred to as a MIB object in the MIB. The SNMP allows managers and agents to communicate for the purpose of accessing these MIB objects.","The structure of management information (SMI), a SNMP standard, defines the rules for how MIB objects are structured, described and organized in the MIB. Typically, the MIB is organized in a tree structure composed of branch nodes and leaf nodes. The MIB objects representing the managed objects of the same network device usually reside at the leaf nodes rooting from the same branch node. Each MIB object has an object identifier (OID), which is a sequence of integers in a tree structure that uniquely identifies the MIB object residing at a leaf node. When the manager requests a value of a MIB object from an agent, the OID of the MIB object should be sent by the manager and traversed by the agent.","To perform SNMP access, a variable binding that contains an OID, a type and a corresponding object value, should be built. The variable bindings are the actual data that are transported back and forth inside SNMP messages. Typically, the SNMP uses five basic messages (GET, GET-NEWT, GET-RESPONSE, SET, and TRAP) to communicate between the manager and an agent. For instance, when the manager wants to know the value of a MIB object, such as the system name or the system uptime, the manager will assemble a GET packet that includes the OID for the MIB object. Upon receiving the GET packet, the agent will assemble and send a GET-RESPONSE packet to the manager with either the current value of the MIB object or an error indication as to why the request cannot be processed. Similarly, the manager will assemble a SET packet that includes the OID for each MIB object of interest, thereby requesting a change be made to the value of the MIB object. The agent will then respond with a SET-RESPONSE packet indicating the change has been made or an error indication as to why the change cannot be made. The agent can also assemble and send a TRAP packet that includes OID and value information (bindings) to spontaneously inform the manager of an important event. The manager can use the bindings to correlate and manage the event.","Though the SNMP access is simple due to the small number of command messages (GET, GET-NEWT, GET-RESPONSE, SET, and TRAP), it requires that the user have in-depth knowledge of the MIB, and particularly be familiar with the OID of each MIB object. Also, building the variable binding which includes the OID and the corresponding object value is typically a tedious task when the manager performs the SNMP access. Additionally, the manager needs to translate the response from the agent into a readable service value to facilitate user understanding and decision-making.","In one embodiment, a computer-implemented method of SNMP access is provided. The method includes mapping a MIB object in a MIB into an XML object in an extensible markup language (XML) document, generating a class library based on the XML document, creating a service object representative of a service associated with SNMP access to the MIB object, and linking the class library according to the service object to perform the service.","Reference will now be made in detail to embodiments of the present invention. While the invention will be described in conjunction with the embodiments, it will be understood that they are not intended to limit the invention to these embodiments. On the contrary, the invention is intended to cover alternatives, modifications and equivalents, which may be included within the spirit and scope of the invention as defined by the appended claims.","Some portions of the detailed descriptions which follow are presented in terms of procedures, logic blocks, processing and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. In the present application, a procedure, logic block, process, or the like, is conceived to be a self-consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, although not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions, it is appreciated that throughout the present application, discussions utilizing the terms such as \u201cmapping,\u201d \u201cgenerating,\u201d \u201ccreating,\u201d \u201clinking,\u201d \u201cparsing,\u201d \u201cprogramming,\u201d \u201cinvoking,\u201d \u201ctranslating\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments described herein may be discussed in the general context of computer-executable instructions residing on some form of computer-usable medium, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or distributed as desired in various embodiments.","By way of example, and not limitation, computer-usable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, random access memory (RAM), read only memory (ROM), electrically erasable programmable ROM (EEPROM), flash memory or other memory technology, compact disk ROM (CD-ROM), digital versatile disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information.","Communication media can embody computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency (RF), infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","101","103","105","107","103","101","105","107","109"]},"Advantageously, the manager  in the SNMP management system  mainly cares about the services associated with SNMP access to the MIB object  such that there is a decreased requirement of MIB knowledge for users. In this instance, the manager  simply executes instructions like \u201cSystemMO mo=new SystemMO( ); mo.sysName=\u201cO2MICRO\u201d; mo.doset( );\u201d to perform the service of setting the MIB object  (the system name) as \u201cO2MICRO\u201d. As illustrated, these instructions can be interpreted into setting the MIB object  (the system name) as \u201cO2MICRO\u201d in a literal sense. In one embodiment, these instructions may be programmed in an object-oriented programming language, such as Java, C++, Smalltalk, Object Pascal, Objective C, etc., which is user-friendly and has a decreased requirement for MIB knowledge. The class library  is capable of translating these instructions into a SET packet containing the command message (e.g., SET), the value (e.g., O2MICRO) and the OID \u201c1.3.6.1.2.1.1.5\u201d. The SET packet is further sent to the agent , which in turn sets the MIB object  (the system name) as \u201cO2MICRO\u201d. Furthermore, the response from the agent , e.g., a SET-RESPONSE packet, can be translated into a service value readable by users by the class library . The service value is further transferred to the manager  such that no additional effort of response translation is required at the manager  side.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 1"],"b":["200","101","105","107","200","201","207","205","200","107","101","201"]},"In one embodiment, the Java class library  is generated based on an XML document , which defines how a MIB object in the MIB  is mapped into an XML object. In one embodiment, a plurality of MIB objects which are associated with the same network device and reside at the leaf nodes rooting from the same brand node may be wrapped together to create an XML object. Referring to , a table  illustrates an exemplary XML object structure. The XML object structure uses a plurality of tags, such as \u201c<mapping>\u201d, \u201c<objects>\u201d, \u201c<object>\u201d, \u201c<table-specific>\u201d \u201c<indexes>\u201d or \u201c<index>\u201d, to define the MIB mapping. In one embodiment, the tag \u201c<mapping>\u201d indicative of an XML object may include a plurality of variables such as \u201cname\u201d and \u201ctype\u201d. The variable \u201cname\u201d represents the name of the mapping. The variable \u201ctype\u201d represents the type of the mapping.","According to the MIB objects mapped from the MIB  to the XML object, there are two types of mapping: group type and table type. When the MIB object is in a table format in the MIB , the table type mapping will occur. The tag \u201c<objects>\u201d indicates the plurality of MIB objects that are associated with the same network device and wrapped into the same XML object. The tag \u201c<object>\u201d indicates each wrapped MIB object underneath the tag \u201c<objects>\u201d. The tag \u201c<object>\u201d may include a plurality of variables such as \u201cname\u201d, \u201coid\u201d, \u201csyntax\u201d and \u201cwritable\u201d. The variable \u201cname\u201d represents the name of the MIB object. The variable \u201coid\u201d represents the OID of the MIB object. The variable \u201csyntax\u201d represents the type of the MIB object, such as an integer or an octet string. The variable \u201cwritable\u201d represents whether the MIB object is writable.","The tags \u201c<table-specific>\u201d, \u201c<indexes>\u201d and \u201c<index>\u201d are defined specifically for the table type mapping. The tag \u201c<table-specific>\u201d may include a plurality of variables such as \u201crow_create\u201d, \u201crowstatus_oid\u201d, \u201cget_method\u201d, \u201cnon_rep\u201d and \u201cmax_rep\u201d. The variable \u201crow_create\u201d represents the row status when a new row is created. The variable \u201crowstatus_oid\u201d represents the OID of the row status. The variable \u201cget_method\u201d represents the methods of getting values, which include \u201cgetnext\u201d and \u201cgetbulk\u201d in one embodiment. The variable \u201cnon_rep\u201d represents that there is no repeat when the variable \u201cget_method\u201d is defined as \u201cgetbulk\u201d. The variable \u201cmax_rep\u201d represents the maximum repetition when the variable \u201cget_method\u201d is defined as \u201cgetbulk\u201d. The tag \u201c<indexes>\u201d may include a plurality of variables such as \u201centry_oid\u201d and \u201centry_name\u201d. The variable \u201centry_oid\u201d represents the OID of table entry in the MIB . The variable \u201centry_name\u201d represents the name of table entry in the MIB . The tag \u201c<index>\u201d may include a plurality of variables such as \u201cname\u201d, \u201coid\u201d and \u201csyntax\u201d. The variable \u201cname\u201d represents the name of the index. The variable \u201coid\u201d represents the OID of the index and the variable \u201csyntax\u201d represents the type of the index, such as an integer or a string.","Examples of XML objects in the XML document are shown as below, respectively representing the XML object \u201csystem\u201d of the group type mapping and the XML object \u201caddrTable\u201d of the table type mapping.","Group type mapping (XML object \u201csystem\u201d):",{"@attributes":{"id":"p-0026","num":"0025"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<mapping name=\u201csystem\u201d type=\u201cgroup\u201d>"},{"entry":"\u2003\u2003<objects>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201csysDescr\u201d oid=\u201c1.3.6.1.2.1.1.1\u201d syntax=\u201cOCTET STRING\u201d"},{"entry":"writable=\u201cfalse\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201csysObjectID\u201d oid=\u201c1.3.6.1.2.1.1.2\u201d syntax=\u201cUnknown syntax"},{"entry":"&lt;0x0&gt;\u201d writable=\u201cfalse\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201csysUpTime\u201d oid=\u201c1.3.6.1.2.1.1.3\u201d syntax=\u201cTIMETICKS\u201d"},{"entry":"writable=\u201cfalse\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201csysContact\u201d oid=\u201c1.3.6.1.2.1.1.4\u201d syntax=\u201cOCTET STRING\u201d"},{"entry":"writable=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201csysName\u201d oid=\u201c1.3.6.1.2.1.1.5\u201d syntax=\u201cOCTET STRING\u201d"},{"entry":"writable=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201csysLocation\u201d oid=\u201c1.3.6.1.2.1.1.6\u201d syntax=\u201cOCTET STRING\u201d"},{"entry":"writable=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201csysServices\u201d oid=\u201c1.3.6.1.2.1.1.7\u201d syntax=\u201cINTEGER\u201d"},{"entry":"writable=\u201cfalse\u201d\/>"},{"entry":"\u2003\u2003<\/objects>"},{"entry":"<\/mapping>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0027","num":"0026"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<mapping name=\u201caddrTable\u201d type=\u201ctable\u201d version_oid=\u201c1.3.6.1.4.1.22924.4.1.1.3.201\u201d>"},{"entry":"\u2003\u2003<objects>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201caddrName\u201d oid=\u201c1.3.6.1.4.1.22924.2.3.1.1.1.1\u201d syntax=\u201cOCTET"},{"entry":"STRING\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201caddrType\u201d oid=\u201c1.3.6.1.4.1.22924.2.3.1.1.1.2\u201d"},{"entry":"syntax=\u201cINTEGER\u201d writable=\u201cfalse\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201caddrIpOrNetwork\u201d oid=\u201c1.3.6.1.4.1.22924.2.3.1.1.1.3\u201d"},{"entry":"syntax=\u201cIPADDRESS\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201caddrEndIpOrNetmask\u201d oid=\u201c1.3.6.1.4.1.22924.2.3.1.1.1.4\u201d"},{"entry":"syntax=\u201cIPADDRESS\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<object name=\u201caddrTableRS\u201d oid=\u201c1.3.6.1.4.1.22924.2.3.1.1.1.5\u201d"},{"entry":"syntax=\u201cINTEGER\u201d\/>"},{"entry":"\u2003\u2003<\/objects>"},{"entry":"\u2003\u2003<table-specific row_create=\u201c4\u201d rowstatus_oid=\u201c1.3.6.1.4.1.22924.2.3.1.1.1.5\u201d"},{"entry":"get_method=\u201cgetnext\u201d non_rep=\u201c0\u201d max_rep=\u201c10\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<indexes entry_oid=\u201c1.3.6.1.4.1.22924.2.3.1.1.1\u201d entry_name=\u201caddrEntry\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<index name=\u201caddrName\u201d oid=\u201c1.3.6.1.4.1.22924.2.3.1.1.1.1\u201d"},{"entry":"syntax=\u201cSTRING\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<\/indexes>"},{"entry":"\u2003\u2003<\/table-specific>"},{"entry":"<\/mapping>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Turning to , the Java class library  may be generated based on the XML document . In one embodiment, an XML object parser (not shown) may parse the XML document  to generate the Java class library . Via the parsing process, each XML object in the XML document  is mapped into a Java class. As a whole, after being mapped into an XML object in the XML documents , the plurality of MIB objects associated with the same network device are further mapped from the XML object into a Java class. The Java class specifies field variables (properties) and methods (behaviors) that the plurality of MIB objects can work with, such that the manager  can access the plurality of MIB objects by invoking the methods of the corresponding Java class. In one embodiment, such methods may be named after the services associated with SNMP access to the plurality of MIB objects, to facilitate the programming of instructions representative of such services at the manager  side. Particularly, the manager  needn't specify the command message and the OID to perform a service associated with SNMP access to an MIB object.","In operation, the manager  simply executes instructions in Java language and representative of the service. In response to the instructions, the manager  can link the Java class library , load the corresponding Java class and invoke the corresponding method to perform the service. Additionally, the API  that is a collection of classes and methods may be used by the manager  to make the programming easier.","Also, Java classes are related. In one embodiment, the relation between Java classes is inheritance, which involves derived classes and base classes. Derived classes can include several kinds of customizations to the respective base classes, such as addition of new filed variables, addition of new methods and overriding of existing methods to support the new field variables. Conceptually, a base class may be considered as a common part of derived classes. A derived class is created by extending the base class.","In one embodiment, the Java class library  may include a base class BaseMO. The base class BaseMO includes a plurality of filed variables and a plurality of methods that belong to a common part of derived classes, e.g., GroupMO and TableMO. For example, the plurality of field variables defined in the base class BaseMo include \u201c_o2_Reqparam\u201d, \u201c_o2_Excutor\u201d, \u201c_o2_Mapmodule\u201d, \u201c_o2_Mapname\u201d and \u201c_o2_Object\u201d. The plurality of methods defined in the base class BaseMo include \u201cgetExcutor( )\u201d, \u201csetExcutor(IMapExecutor)\u201d, \u201cgetMapModule( )\u201d, \u201cgetReqaram(RequestParam)\u201d, copyFrom(BaseMO)\u201d, \u201cgetUserObject( )\u201d, and \u201csetUserObject(Object)\u201d.","Via inheritance, the derived class GroupMO can be created based on the base class BaseMO to represent the XML objects having the group type mapping. For instance, the derived class GroupMO can be programmed as below.",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class GroupMO<E extends GroupMO> extends BaseMO"},{"entry":"{"},{"entry":"\u2003\u2003private static final long serialVersionUID = 3257291309642757941L;"},{"entry":"\u2003\u2003public E doGet( ) throws SnmpException"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003return (E)this._o2_Excutor.get(this);"},{"entry":"\u2003\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Similarly, the derived class TableMO can be created based on the base class BaseMO to represent the XML objects having the table type mapping. For instance, the derived class TableMO can be programmed as below.",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class TableMO<E extends TableMO> extends BaseMO"},{"entry":"{"},{"entry":"\u2003\u2003private static final long serialVersionUID = 3257562927769792825L;"},{"entry":"\u2003\u2003protected String \u2003\u2003\u2003\u2003_o2_Index;"},{"entry":"\u2003\u2003public void setIndex(String index)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003this._o2_Index = index;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003public String getIndex( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003return this._o2_Index;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003public List<E> doGetTable( ) throws SnmpException"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003return (List<E>)this._o2_Excutor.getTable(this);"},{"entry":"\u2003\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Advantageously, the derived classes GroupMO and TableMO can be further inherited to create a particular class to represent a particular XML object. As a whole, the particular class representing the particular XML object also represents the plurality of MIB objects in the MIB  which have been mapped into the particular XML object. For example, a derived class SystemMO can be programmed as below to represent the XML object \u201cSystem\u201d.",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class SystemMO extends GroupMO<SystemMO>"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public String sysDescr;"]},{"entry":[{},"\u2003\u2003public String sysObjectID;"]},{"entry":[{},"\u2003\u2003public String sysUpTime;"]},{"entry":[{},"\u2003\u2003public String sysContact;"]},{"entry":[{},"\u2003\u2003public String sysName;"]},{"entry":[{},"\u2003\u2003public String sysLocation;"]},{"entry":[{},"\u2003\u2003public String sysServices;"]},{"entry":[{},"\u2003\u2003public SystemMO( )"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003this._o2_MapName = \u201csystem@RFC1213-MIB\u201d;"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Similarly, a derived class AddrTableMO can be programmed as below to sent the XML object \u201caddrTable\u201d.",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class AddrTableMO extends TableMO<AddrTableMO>"},{"entry":"{"},{"entry":"\u2003\u2003public String addrName;"},{"entry":"\u2003\u2003public String addrType;"},{"entry":"\u2003\u2003public String addrIpOrNetwork;"},{"entry":"\u2003\u2003public String addrEndIpOrNetmask;"},{"entry":"\u2003\u2003public String addrTableRS;"},{"entry":"\u2003\u2003public AddrTableMO( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003this._o2_MapName = \u201caddrTable@MATRIX-ADDR-MIB\u201d;"},{"entry":"\u2003\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As illustrated above, the methods defined in the Java classes are named after services associated with SNMP access to facilitate the programming at the manager  side. By invoking the methods encapsulated in the Java classes, the manager  can access the MIB objects in the MIB  without going through the tedious task of organizing the command message and the OID. The manager  simply executes the instructions representative of the services associated with SNMP access. For example, the manager  executes instructions like \u201cSystemMO mo=new SystemMO( ); mo.sysName=\u201cO2MICRO\u201d; mo.doset( );\u201d to set the MIB object of the system name as \u201cO2MICRO\u201d. In particular, the instruction \u201cSystemMO mo=new SystemMO( )\u201d functions to create a service object \u201cmo\u201d representative of the service requested by the manager . Concurrently, the manager  links the Java class library  to load the Java class SystemMO in response to creation of the service object \u201cmo\u201d. In this instance, the instructions \u201cmo.sysName=\u201cO2MICRO\u201d; mo.doset( );\u201d can invoke the method \u201cdoset( )\u201d encapsulated in the Java class SystemMO to perform the service requested by the manager . Furthermore, a return value of the invoked method \u201cdoset( )\u201d is readily readable by users such that the manger  needn't translate the response from the agent  any more.","In conclusion, the behavior of the invoked method may be to translate the instructions representative of the service into the command message and the OID readable by the agent , in one embodiment. In response to the command message and the OID, the agent  can access the MIB objects in the MIB . As such, the user needn't make additional effort to organize the command message and the OID to perform the service. In one embodiment, the behavior of the invoked method may be to translate the response from the agent  into a service value readily readable by users. As such, the effort for the manager  to translate the response from the agent  into a readable service value to facilitate user understanding and decision-making is also unnecessary. In other words, behaviors defined in the Java classes are invisible to the manager , such that the manager  can concentrate on programming the instructions representative of the services associated with SNMP access to invoke the corresponding Java classes and methods. In this way, users can access the MIB objects by using an object-oriented language which is user-friendly and has a decreased requirement for MIB knowledge, such as Java, C++, Smalltalk, Object Pascal, Objective C, etc.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 4","FIG. 2"],"b":["400","400"]},"In block , a MIB object in a MIB is mapped into an XML object in an XML document. In one embodiment, the MIB object of the system name in the MIB  is mapped into the XML object \u201csystem\u201d in the XML document . In block , a class library is generated based on the XML document. In one embodiment, the XML object parser can be used to parse the XML objects in the XML document  and thereby to generate the Java class library . In block , a service object representative of a service associated with SNMP access to the MIB object in the MIB is created. In one embodiment, a service object \u201cmo\u201d is created to represent the service of setting the MIB object of the system name as \u201cO2MICRO\u201d. In block , the class library is linked according to the service object to perform the service. In one embodiment, the Java class library  is linked in response to creation of the service object \u201cmo\u201d to perform the service of setting the MIB object of the system name as \u201cO2MICRO\u201d.","The terms and expressions which have been employed herein are used as terms of description and not of limitation, and there is no intention, in the use of such terms and expressions, of excluding any equivalents of the features shown and described (or portions thereof), and it is recognized that various modifications are possible within the scope of the claims. Other modifications, variations, and alternatives are also possible. Accordingly, the claims are intended to cover all such equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Advantages of the present invention will be apparent from the following detailed description of exemplary embodiments thereof, which description should be considered in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
