---
title: Automatic lifecycle management for pages on a mobile application
abstract: User interface state (UI) information (such as UI control values) are stored and revived when the user navigates and returns to an application. When an instance of a page is created, the page registers with a tombstone list and indicates which page state information on the page is to be stored and revived when a user navigates away from the application. When the user provides an input indicating navigation away from the application, the application accesses the tombstone list and stores the UI page state information. UI page state information is stored in a page state dictionary data structure that corresponds to the current instance of the page. Then, when the user navigates back to the application, the application accesses the page state dictionary and restores the values of the UI page state information so that the user interface display is in the same state as when the user navigated away from the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745539&OS=08745539&RS=08745539
owner: Microsoft Corporation
number: 08745539
owner_city: Redmond
owner_country: US
publication_date: 20110929
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Mobile devices are currently in wide use. Mobile devices include such things as cellular telephones, smart phones, personal digital assistants, multi-media players, other handheld and palmtop devices, and slate or tablet computers, to name a few. In mobile devices, battery life conservation is often addressed.","One way of addressing battery life conservation deals with the management of applications that are open on the mobile device. In particular, lifecycle management takes place in a scenario where the user opens an application and then navigates away from that application but does not expressly or explicitly close the application before navigating away. For instance, the user may open up a customer relations management application, and then momentarily navigate away from that application by opening another application, such as a contact list directory. When the user navigates away from the customer relations manager application, operating systems can handle the lifecycle management of the application that the user navigated away from, in different ways.","Due to battery lifecycle and memory management concerns, some operating systems may have simply killed the initial application (or closed it). However, this can present a number of problems. For instance, when the user eventually navigates back to the application, and the operating system re-launches the application, then the entire user interface information (such as the control values displayed on a page of the application) is lost.","In other words, when the user initially opened the application, the user may have entered user interface state information or control values into various controls. Such values can include, for example, checking or unchecking a check box, configuring a radio button, scrolling to a certain point in a scrollable list, among other things. When the user subsequently navigates away from the application, the operating system may simply kill the application. Therefore, when the user subsequently navigates back to the application, even though the operating system re-launches the application at that time, all of the user interface control states and values and other user interface state information for the displayed page are lost. Thus, the user is not coming back to the application in the exact same state it was in when the user left it. This does not leave the user's experience seamless and would require the user to navigate back in the application to the same place and re-enter all desired control values and state information which is undesirable and cumbersome.","The discussion above is merely provided for general background information and is not intended to be used as an aid in determining the scope of the claimed subject matter.","One way to restore page state information (such as interface control values) on a page when the user navigates back to the application is to write event-driven logic on every page of the application. Then, when the user navigates away from the application, the control states and values on every page are stored so that they can be restored (or rehydrated) to the controls when the user navigates back to that application. However, this can incur a large test cost. Quality assurance personnel normally test each control on every page to ensure that they are acting properly. Therefore, if the controlled shutdown and restart process for saving control values is encoded into every page of an application, the developers must test that logic on every page to ensure that the controls are stored and revived properly.","In this description, user interface state (UI) information (such as UI control state information and values) are stored and revived when the user navigates and returns to an application. The functionality is incorporated into the application, instead of into code written for each page in the application. When an instance of a page is created, the page registers the controls it wants to tombstone with a tombstone list to indicate which page state information on the page is to be stored and revived when a user navigates away or comes back to the application. When the user provides an input indicating navigation away from the application, the application accesses the tombstone list and stores the state related information of every control present in the tombstoning list within a data structure called a tombstoner. Tombstoners are created based on the type of the control that is being tombstoned. All this UI page state information within the tombstoners is stored in a page state dictionary data structure that corresponds to the current instance of the page. Then, when the user navigates back to the application, the application accesses the page state dictionary and restores the values of the UI page state information from the tombstoners within the page state dictionary so that the user interface display is in the same state as when the user navigated away from the application.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1"],"b":["10","12","14","10","16","17","22","28","16","16","14","12","16","10","16","10"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1","FIG. 1"],"b":["10","18","20","24","26","10","30","16"]},"In one illustrative embodiment, application  generates user interface display pages that are displayed using user interface component  to user .  show various embodiments of mobile device  using different mechanisms for generating user interface displays. Suffice it to say, for now, that the user interface displays can be generated on a display screen, a touch sensitive display screen, or any other type of display screen. User interface component  also illustratively includes mechanisms by which user  can enter information through graphical user interface elements (or control elements) on the user interface displays. For instance, user  may illustratively provide information through a keypad, through a soft keypad display generated on a touch sensitive screen, by using a point and click device to move a cursor over user interface elements and selecting them and entering desired information, using other buttons or actuators or touch sensitive keys, or other user input mechanisms.","In any case, application  illustratively generates user interface display pages such as display page  shown in . Page  includes a plurality of different controls, such as controls , , and . In the embodiment shown in , control  is a radio button that allows the user to select one of the options (in the example shown in  the options are \u201cyes\u201d and \u201cno\u201d) by clicking over the circle located proximate the desired option. Control  is a list of elements through which the user can scroll. The user can then actuate a user interface element in order to select one of the items in the list . Control  is a check box that allows the user to check or uncheck a box to provide input information. Of course, a wide variety of other controls can be used as well, such as dropdown menus, text boxes, etc. Similarly, page  may have other user interface state information associated with it, other than simply the values for each of controls - generated on page . For instance, the page may have certain items therein which can be focused on by the user, such as by placing a cursor over those elements, or otherwise. Thus, the focus information (the particular area of page  under focus) is also user interface state information that can be associated with page . Thus, the user interface state information associated with page  is all of the information that defines the values associated with each of the controls thereon, or other information that defines the state of the user interface elements displayed on page .","When application  generates page  using user interface component , and user  enters various values into controls -, it may happen that the user wishes to launch another application, and navigate to the newly-launched application, without closing application . For instance, it may happen that application  is a CRM application that shows sales objects associated with various customers. When the user is using that application, the user may wish to momentarily launch and navigate to application , which may be a separate application. However, the user may not wish to close application , because the user may desire to navigate back to application . When that occurs, application  (and specifically component ) saves (or tombstones) the user interface state information for page  (and other pages that are open in application ) so that those pages can be restored (or rehydrated) to the same state that they existed in, when the user navigated away from application .  shows one embodiment of the operation of mobile device  in performing this function.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["18","10","16","16","42","16","32","20","44"]},"The created instance of the page has built-in functionalities (such as tombstone\/rehydration component ) to tombstone and re-hydrate the controls that are registered for tombstoning. In one embodiment, every page in application  has its own constructor , although only one constructor  is shown in . When the page constructor  is called, it initializes the tombstoning list . This tombstoning list is held in memory within the application and is used in identifying the controls on the page that need tombstoning or rehydration. For instance, application  illustratively maintains a tombstone list that is used to identify pages and controls (or other UI page state information) on the user interface display of those pages, which are to be stored when the user navigates away from the application, so that they can be revived when the user navigates back to the application.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 4","FIG. 1A"],"b":["28","28","28","48","48","36","40","34"]},"Tombstone list , in one embodiment, contains only the controls that are to be tombstoned for a given page. If a control like a static label that does not need to be tombstoned is present on the page, then it may not be included in the list for tombstoning. If there is more than one control of the same type on the page that needs to be tombstoned then they are identified uniquely using a control identifier. For instance, if the radio button  is to be tombstoned, then control identifier  will identify control  as a radio button and have a particular identifier in case there is more than one radio button on page . By having the list for tombstoning, the application is able to indicate that the state of radio button  on this instance of page  is to be stored in case the user navigates away from application , so that it can be revived when the user navigates back to application . Having the created page  register the list with its constructor  so that the identity of the particular controls that are to be tombstoned are stored in tombstone list  is indicated by block  in .","Once page  is being displayed by application , and once it is registered in list , a number of things can happen that will affect the control of the tombstoning operation. For instance, the user may simply navigate away from page , to another page within application . In that case, operating system  or application  propagates an event, such as an OnNavigatedFrom( ) event to page .","In another scenario, operating system  may receive a user input indicating that the user wishes to launch another application, such as application , without closing application . In that case, operating system  sends an application de-activated message (item  shown in ) to application . In either case (where page  receives an indication that the user is navigating away from it but still within application  or where the operating system has indicated that application  is to be deactivated) constructor  would have already accessed the tombstone list  for this particular instance of page  to identify the list of controls or other UI state information that is to be tombstoned (stored for revival) for this page, and one of those items of information (a control or another item of UI page state information) is selected from list . Receiving the indication that the user is navigating to a different application or a different page, and accessing the tombstone list  is indicated by blocks  and  in .","When tombstone\/rehydration component  (e.g., the code to preserve the state of the control) is called for the control, it identifies the state of the selected control (or other UI page state information) and creates a data structure capable of storing all the relevant information of the type of the control and stores it in instance-specific page state dictionary . It should be noted that, in one embodiment, the instance-specific page state dictionary of every page is maintained by operating system . The page state dictionary  associated with every application page includes a data structure corresponding to each control registered for tombstoning on the given page in application  that has been opened and has been navigated away from. The data structure in dictionary  also illustratively includes control identifiers that identify each control on the corresponding page (and registered in list ) and value portions that identify the values associated with each of those controls.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4","b":["26","26","48","28","26","50","48","50","36","40","48","48","36","34","50","36","34","16","26","34","16"]},"To save information to data structure , the tombstone\/rehydration component  obtains the value of each control on page  that is registered in list  and stores it along with its corresponding control identifier in the data structure  which gets stored in the page state dictionary. This is indicated by block  in .","The tombstone\/rehydration component  is called upon all the controls specified in the list for tombstoning. So it then determines whether there are more controls on this page (e.g., page ) that are to be stored and if so, processing reverts to block . The component  identifies the remaining controls, from list , for which values need to be saved and saves those control values to the instance-specific page state dictionary  for the current instance of page . This is indicated by block  in .","Processing continues in this way until all of the UI page state information registered in list , for this instance of this page , has been stored in the instance-specific page state dictionary data structure  for this page. Once this is completed, all the necessary UI state information has been stored so that it can be restored to this page if the user desires to navigate back to this page.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 5","FIG. 5"],"b":["16","17","34","18","32","20","34","16","30","30","18","70","16","18","24","18","24","72","74"]},"When the user navigates back to page , the page receives an event indicative of this. For instance, the page may receive an \u201cOnNavigatedTo( )\u201d event indicating that the user  has navigated to page . At this point, page  is not aware of whether the user is simply navigating back to this page from within application , or whether the user has left application  in the meantime, and the page has been tombstoned (stored for revival). The page's constructor  and the inherited tombstone\/rehydration component  are used to determine whether it has been tombstoned. If the user has never left application  (and page  has thus not been tombstoned), then the user interface state information is already automatically maintained and nothing needs to be done. The application  simply displays the desired page as indicated at block . If the user had navigated away from application , then page  has been tombstoned, and the UI page state information needs to be restored to the user interface page before showing it to the user. Making this determination is indicated by block  in .","If, at block , it is determined that the page  was tombstoned, then the list for tombstoning is accessed and then from the instance-specific page state dictionary  the data structures corresponding to the controls on this instance of page  are pulled out and then they are rehydrated. Recall that the data structure is identified using the identifier of the control that was tombstoned, and it contains the user interface value along with state information corresponding to that control. Thus, the tombstone\/rehydration component  accesses the page state dictionary for this instance of page  and selects one of the controls for revival. This is indicated by block  in .","Component  then extracts the user interface state information for the selected control and restores that value to the control on page  for display to the user. This is indicated by block .","Component  then determines whether page  has more controls (or other UI page state information) that needs to be restored. This is done by simply traversing the list of controls registered for tombstoning. This is indicated by block . If so, processing continues at block  where the next control is selected, and at block , where the user interface state information corresponding to that control is restored to the display of page . If, however, component  has restored all the values from the page state dictionary  for the current page, then the page is simply displayed as indicated at block .","It should be noted that during use, the user may have navigated to a level multiple pages deep within application . Each time the user navigates away from one of those pages to a page at the next level deep within application , recall that the page receives an \u201cOnNavigatedFrom( )\u201d event and stores the values of UI page state information in a page state dictionary , as indicated by blocks - in . Therefore, even if the user then navigates away from application  and returns to application , and then navigates back up the levels to different pages within application , all of the UI page state information corresponding to that stack of pages is stored in different page state dictionaries of each page , with one of the data structures corresponding to each of those controls registered for tombstoning on the pages. By way of example, if the user is three levels deep in application  (and on page ) and navigates to application  and then back to application , the user will see page  with the same UI state information displayed on it as when the user left. Then, if the user navigates up one level (still within application ) the page for that level will be restored in the same way as described above with respect to  so that the user will see that page with all of the same UI state information from when the user initially navigated away from it. This can continue regardless of how many levels deep the user has navigated into application .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 6","FIG. 6","FIG. 6","FIG. 6"],"b":["90","90","92","90","92","92","16","94","92","92","94","96","96","96","98","100","102","16","94","94","98","102","96","98","102","98","102","16","98","102","96","94","28","98","102","26","16","96","98","102"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 7","FIGS. 8 and 9"],"b":"10"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 7","b":["10","16","10","13","13"]},"Under other embodiments, application  (or any other application) is received on a removable Secure Digital (SD) card that is connected to a SD card interface . SD card interface  and communication links  communicate with a processor  along a bus  that is also connected to memory  and input\/output (I\/O) components , as well as clock  and location system .","I\/O components , in one embodiment, are provided to facilitate input and output operations. I\/O components  for various embodiments of the device  can include input components such as buttons, touch sensors, touch screens, proximity sensors, microphones, tilt sensors, and gravity switches and output components such as display device , a speaker, and or a printer port. Other I\/O components  can be used as well.","Clock  illustratively comprises a real time clock component that outputs a time and date. It can also, illustratively, provide timing functions for processor .","Location system  illustratively includes a component that outputs a current geographical location of device . This can include, for instance, a global positioning system (GPS) receiver, a LORAN system, a dead reckoning system, a cellular triangulation system, or other positioning system. It can also include, for example, mapping software or navigation software that generates desired maps, navigation routes and other geographic functions.","Memory  stores operating system , network settings , applications  (which can include applications  and ), application configuration settings , registry , communication drivers , communication configuration settings , list  and dictionary . Memory  can include all types of tangible volatile and non-volatile computer-readable memory devices. Memory  stores computer readable instructions that, when executed by processor , cause the processor to perform computer-implemented steps or functions according to the instructions. Client CRM system , for example, can reside in memory .","Examples of the network settings  include things such as proxy information, Internet connection information, and mappings. Application configuration settings  include settings that tailor the application for a specific enterprise or user. Communication configuration settings  provide parameters for communicating with other computers and include items such as GPRS parameters, SMS parameters, connection user names and passwords.","Applications  can be applications that have previously been stored on the device  or applications that are installed during use. In one embodiment, applications  include contact or phonebook application , application  and application  although portions of these can be part of operating system , or hosted external to device , as well.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIGS. 8 and 9","FIG. 8"],"b":["10","45","10","45","47","49","34","71","53","45","55","57"]},"The device of  is a personal digital assistant (PDA)  which can also be a tablet or slate computing device or multimedia player (collectively referred to herein as PDA ). PDA  includes an inductive screen  that senses the position of a stylus  (or other pointers, such as a user's finger) when the stylus is positioned over the screen. This allows the user to select, highlight, and move items on the screen as well as draw and write. PDA  also includes a number of user input keys or buttons (such as button ) which allow the user to scroll through menu options or other display options which are displayed on display , and allow the user to change applications or select user input functions, without contacting display . Although not shown, PDA  can include an internal antenna and an infrared transmitter\/receiver that allow for wireless communication with other computers as well as connection ports that allow for hardware connections to other computing devices. Such hardware connections are typically made through a cradle that connects to the other computer through a serial or USB port. As such, these connections are non-network connections. In one embodiment, PDA  also includes a SD card slot  that accepts a SD card .","Note that other forms of the devices  are possible. Examples include tablet or slate computers, music or video players, and other handheld or mobile computing devices.","It will also be noted that as shown in , application  and associated memory and functionality can reside elsewhere, other than on client device . While the embodiment of  shows that application  resides on client device , it could be embodied elsewhere as well, such as in a cloud computing environment. Cloud computing provides computation, software, data access, and storage services that do not require end-user knowledge of the physical location or configuration of the system that delivers the services. In various embodiments, cloud computing delivers the services over a wide area network, such as the internet, using appropriate protocols. For instance, cloud computing providers deliver applications over a wide area network and they can be accessed through a web browser or any other computing component. Business software (such as some components of application ) as well as the corresponding data, can be stored on servers at a remote location. The computing resources in a cloud computing environment can be consolidated at a remote data center location or they can be dispersed. Cloud computing infrastructures can deliver services through shared data centers, even though they appear as a single point of access for the user. Thus, the functions described herein can be provided from a service provider at a remote location using a cloud computing architecture. Alternatively, they can be provided from a conventional server, or they can be installed on client device  directly.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 10","FIG. 10"],"b":["10","14","610","610","620","630","621","620","621"]},"Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, hardware, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  can be used for the various data stores shown in , or they can be implemented elsewhere. System memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  is operated in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 7-9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
