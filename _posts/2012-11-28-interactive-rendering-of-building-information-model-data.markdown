---
title: Interactive rendering of building information model data
abstract: A system, apparatus and method for interactively rendering building information modeling data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09019269&OS=09019269&RS=09019269
owner: 
number: 09019269
owner_city: 
owner_country: 
publication_date: 20121128
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED PATENT APPLICATION(S)","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF DESCRIPTION OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","PARTS LIST"],"p":["This document is a United States non-provisional utility patent application that claims priority and benefit to U.S. (utility) provisional patent application having Ser. No. (61\/730,016), that was filed on Nov. 26, 2012 and that is entitled \u201cINTERACTIVE RENDERING OF BUILDING INFORMATION MODEL DATA\u201d, and which is incorporated herein by reference in it's entirety.","This document further claims priority and benefit to U.S. (utility) provisional patent application having Ser. No. 61\/564,093, filed on Nov. 28, 2011 and that is entitled \u201cINTERACTIVE RENDERING OF BUILDING INFORMATION MODEL DATA\u201d, and which is incorporated herein by reference in its entirety. All of the aforementioned patent applications are incorporated herein by reference in their entirety.","An apparatus and system for interactively rendering building information modeling data.","Computer Program Listing Appendix","Enclosed with the specification are two (2) compact discs (Copy 1 and Copy 2) which are identical. The files recorded on each of the attached compact discs (Copy 1 and Copy 2) are associated with an embodiment of a software based application of the invention. The software bases application is designed to interoperate with the Microsoft Windows (Version 7) operating system. These files include ASCII encoded files that are listed within this computer program listing appendix (See below). These ASCII encoded files are stored within hierarchy of file folders having a root file folder named \u201cstadia_source_code_files\u201d at its highest level. All of the ASCII encoded files are each incorporated herein by reference in their entirety.","Each file folder (listed below) was created (written to the write-once compact disc) on Nov. 27, 2012, unless indicated otherwise. Each ASCII file was created on Jun. 24, 2012 unless indicated otherwise. Listed below is each ASCII encoded file that is represented on one line of text including its file name and its size in units of kilobytes.",{"@attributes":{"id":"p-0007","num":"0006"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Folder\/File Name:","Created","Size (kilobytes)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\AliExporter\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3dsmaxsdk_preinclude.h","Nov. 20, 2012","1"]},{"entry":["AliExporter.cpp","Nov. 19, 2012","8"]},{"entry":["AliExporter.def","Jun. 24, 2012","1"]},{"entry":["AliExporter.h","Nov. 19, 2012","1"]},{"entry":["AliExporter.vcxproj","Jun. 24, 2012","12"]},{"entry":["ColorData.h","Jun. 24, 2012","1"]},{"entry":["DllEntry.cpp","Jun. 24, 2012","4"]},{"entry":["Document.cpp","Jun. 24, 2012","33"]},{"entry":["Document.h","Jun. 24, 2012","1"]},{"entry":["Face.cpp","Jun. 24, 2012","1"]},{"entry":["Face.h","Jun. 24, 2012","1"]},{"entry":["generateAli.ms","Jun. 24, 2012","2"]},{"entry":["LightData.h","Jun. 24, 2012","1"]},{"entry":["Log.cpp","Jun. 24, 2012","1"]},{"entry":["Log.h","Jun. 24, 2012","1"]},{"entry":["MapData.h","Jun. 24, 2012","1"]},{"entry":["MaterialData.cpp","Jun. 24, 2012","1"]},{"entry":["MaterialData.h","Jun. 24, 2012","1"]},{"entry":["MeshCollection.cpp","Jun. 24, 2012","7"]},{"entry":["MeshCollection.h","Jun. 24, 2012","1"]},{"entry":["MeshData.h","Jun. 24, 2012","1"]},{"entry":["ModelReport.cpp","Jun. 24, 2012","2"]},{"entry":["ModelReport.h","Jun. 24, 2012","1"]},{"entry":["resource.h","Jun. 24, 2012","1"]},{"entry":["Vertice.cpp","Jun. 24, 2012","2"]},{"entry":["Vertice.h","Jun. 24, 2012","1"]},{"entry":["VerticeCollection.cpp","Jun. 24, 2012","1"]},{"entry":["VerticeCollection.h","Jun. 24, 2012","1"]},{"entry":["Writer.cpp","Jun. 24, 2012","2"]},{"entry":["Writer.h","Jun. 24, 2012","2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\AliExporter\\Renderer\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Logger.cs","Jun. 24, 2012","1"]},{"entry":["Program.cs","Jun. 24, 2012","11"]},{"entry":["Renderer.csproj","Jun. 24, 2012","3"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\AliExporter\\Renderer\\Properties\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["AssemblyInfo.cs","Jun. 24, 2012","2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\StadiaAddIn\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["bake_image.png","Mar. 26, 2012","1"]},{"entry":["DocumentMetadataManager.cs","Mar. 26, 2012","5"]},{"entry":["Exporter.cs","Mar. 26, 2012","9"]},{"entry":["NewDemoForm.cs","Mar. 26, 2012","1"]},{"entry":["NewDemoForm.designer.cs","Mar. 26, 2012","10"]},{"entry":["NewDemoForm.resx","Mar. 26, 2012","8"]},{"entry":["NoCamerasException.cs","Mar. 26, 2012","1"]},{"entry":["Stadia.addin","Mar. 26, 2012","1"]},{"entry":["StadiaAddIn.csproj","Mar. 26, 2012","5"]},{"entry":["StadiaRibbonUI.cs","Mar. 26, 2012","15"]},{"entry":["Uploader.cs","Mar. 26, 2012","2"]},{"entry":["WindowHandle.cs","Mar. 26, 2012","1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\StadiaAddIn\\Properties\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["AssemblyInfo.cs","Mar. 26, 2012","2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\StadiaAddIn\\references\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["bake_image.ico (image)","Mar. 26, 2012","2"]},{"entry":["bake image.png (image)","Mar. 26, 2012","1"]},{"entry":["Ionic.Zip.dll (binary)","Mar. 26, 2012","452"]},{"entry":["Microsoft...ageClient.dll (binary)","Mar. 26, 2012","358"]},{"entry":["Stadia...Common.dll (binary)","Mar. 26, 2012","14"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\\stadia_source_code_files\\StadiaAddIn\\packages\\"},{"entry":"\\stadia_source_code_files\\UnityProject\\"},{"entry":"\\stadia_source_code_files\\UnityProject\\Assets\\"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AudioManager.asset","Jun. 24, 2012","5"]},{"entry":["DynamicsManager.asset","Jun. 24, 2012","5"]},{"entry":["EditorBuildSettings.asset","Jun. 24, 2012","5"]},{"entry":["EditorSettings.asset","Jun. 24, 2012","5"]},{"entry":["InputManager.asset","Jun. 24, 2012","5"]},{"entry":["NavMeshLayers.asset","Jun. 24, 2012","9"]},{"entry":["NetworkManager.asset","Jun. 24, 2012","5"]},{"entry":["ProjectSettings.asset","Jun. 24, 2012","5"]},{"entry":["QualitySettings.asset","Jun. 24, 2012","12"]},{"entry":["TagManager.asset","Jun. 24, 2012","6"]},{"entry":["TimeManager.asset","Jun. 24, 2012","5"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\UnityProject\/ProjectSettings\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DoorScript.cs","Jun. 24, 2012","2"]},{"entry":["Scene.unity (binary)","Jun. 24, 2012","6"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\\stadia_source_code_files\\UnityProject\\ProjectSettings\\Assets"},{"entry":"\\stadia_source_code_files\\UnityProject\/ProjectSettings\\Assets\\CharacterController\\"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["First Person Controller.prefab","Jun. 24, 2012","36"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\UnityProject\/ProjectSettings\\Assets\\CharacterController\\Sources\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ApplicationBehavior.cs","Jun. 24, 2012","2"]},{"entry":["CameraLocation.cs","Jun. 24, 2012","1"]},{"entry":["CameraLocationHolder.cs","Jun. 24, 2012","1"]},{"entry":["EnableAllBehaviorOnStart.cs","Jun. 24, 2012","1"]},{"entry":["Motor.cs","Jun. 24, 2012","3"]},{"entry":["PositionController.cs","Jun. 24, 2012","2"]},{"entry":["SmoothMouseLook.cs","Jun. 24, 2012","2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\UnityProject\\ProjectSettings\\Assets\/Editor\\ImageEffects\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Antialiasing...Effect.js","Jun. 24, 2012","5"]},{"entry":["BloomAndLenseFlares.js","Jun. 24, 2012","11"]},{"entry":["ColorCorr...Curves.js","Jun. 24, 2012","5"]},{"entry":["EdgeDet...Normals.js","Jun. 24, 2012","5"]},{"entry":["Tonemapping.js","Jun. 24, 2012","7"]},{"entry":["Blend.shader","Jun. 24, 2012","3"]},{"entry":["BlendOneOne.shader","Jun. 24, 2012","1"]},{"entry":["BrightPassFilter.shader","Jun. 24, 2012","1"]},{"entry":["LenseFlareCreate.shader","Jun. 24, 2012","2"]},{"entry":["DLAA.shader","Jun. 24, 2012","11"]},{"entry":["Apply.shader","Jun. 24, 2012","2"]},{"entry":["Adaptation.shader","Jun. 24, 2012","2"]},{"entry":["MinMaxRed..ion.shader","Jun. 24, 2012","2"]},{"entry":["Luminance.shader","Jun. 24, 2012","5"]},{"entry":["ColorCorr...rves.shader","Jun. 24, 2012","3"]},{"entry":["ColorCorr...ffect.shader","Jun. 24, 2012","1"]},{"entry":["Color...mp.png (image)","Jun. 24, 2012","11"]},{"entry":["EdgeDe...rmals.shader","Jun. 24, 2012","5"]},{"entry":["HardEdges.shader","Jun. 24, 2012","5"]},{"entry":["Tonemapper.shader","Jun. 24, 2012","10"]},{"entry":["GrayscaleEffect.shader","Jun. 24, 2012","1"]},{"entry":["Gray...Ramp.png (image)","Jun. 24, 2012","1"]},{"entry":["PostEffectsBase.js","Jun. 24, 2012","6"]},{"entry":["PostEffectsHelper.js","Jun. 24, 2012","6"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\\stadia_source_code_files\\UnityProject\\ProjectSettings\\Assets\/Textures\\"},{"entry":"\\stadia_source_code_files\\UnityProject\\ProjectSettings\\Editor\\"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["BuildScene.cs","Jun. 24, 2012","32"]},{"entry":["DebugScene.cs","Jun. 24, 2012","2"]},{"entry":["Log.cs","Jun. 24, 2012","1"]},{"entry":["Materials.cs","Jun. 24, 2012","5"]},{"entry":["MenuItems.cs","Jun. 24, 2012","1"]},{"entry":["Reader.cs","Jun. 24, 2012","5"]},{"entry":["ReaderData.cs","Jun. 24, 2012","3"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\UnityProject\\ProjectSettings\\Resources\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Sky.cubemap (cubemap)","Jun. 24, 2012","1,359"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\UnityProject\\ProjectSettingsAScene\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["BeastSettings.xml","Jun. 24, 2012","3"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\\stadia_source_code_files\\UnityProject\\ProjectSettings\\Shaders\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DiffuseColor.shader","Jun. 24, 2012","2"]},{"entry":["DiffuseTexture.shader","Jun. 24, 2012","2"]},{"entry":["TransparentColor.shader","Jun. 24, 2012","1"]},{"entry":["TransparentReflective. shader","Jun. 24, 2012","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Building information model (BIM) data is designed to model the design (architecture) of a large structure such as of a building, house, bridge etc. BIM data is typically stored in a database of information regarding BIM elements and relationships between those BIM elements. BIM elements can be walls, roofs, windows, doors, floors, rooms etc. The relationships between elements can include a relationship defining that a door element and a window element are each located as a portion of a wall element, which is located adjacent to and above a particular floor element etc.","The discussion above is merely provided for general background information and is not intended to be used as an aid in determining the scope of the claimed subject matter.","This brief description of the invention is intended only to provide a brief overview of subject matter disclosed herein according to one or more illustrative embodiments, and does not serve as a guide to interpreting the claims or to define or limit the scope of the invention, which is defined only by the appended claims. This brief description is provided to introduce an illustrative selection of concepts in a simplified form that are further described below in the detailed description. This brief description is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 1","FIG. 3A"],"b":["110","110","110","110","110","150","110","440","440","150"],"i":["a ","c ","a ","b ","b ","c "]},"The dynamic rendering instructions are included within and\/or accessible by the IRVP  while it is executing. The dynamic rendering data is also included within and\/or accessible by the IRVP  while it is executing. Regardless of specific embodiment and programming implementation, the dynamic rendering instructions and dynamic rendering data interoperate with the IRVP  while it is executing.","The dynamic rendering instructions and data that are provided by the IRCR  collectively enable the computing device to perform interactive rendering (IR) of BIM data  stored on front end computers -. In this embodiment, the IRCR  is accessible over a network and is also characterized as being a set of network accessible computing resources. Example source programming code for an embodiment of the IRIE (See  of ) is found within source code file named Exporter.cs (See Lines 18-150) as the public methods of the Exporter class.","As shown, the front end computers ,, provide a graphic user interface  and input devices including a keyboard  and pointing device, (mouse or touch screen) (not shown) that are employed by a user to interact with software, including for example, building information modeling (BIM) software. The computing device provides a means for the user to interact with the interactive rendering viewer program (IRVP). In this embodiment, computing device provides a keyboard and screen pointing device (mouse or touch screen) for user input.","As described herein, the front end computers -represent the same computer being in different stages of software installation. Additional software is installed onto the front end computer relative to the software installed onto the front end computer . The additional software provides interactive rendering information extraction (IRIE) functionality to the front end computer that does not exist on the first front end computer . Computing device may be the same computer as and , or be a separate and\/or different type of computing device utilizing different hardware, different operating system, and\/or different input devices. Computing device executes the interactive rendering viewing program (IRVP) (See  of ) in accordance with interactive user input. The IRIE executing on computer , the IRCR , and the IRVP executing on computer are included within embodiments of the subject matter of the invention.","In a first embodiment of the invention, each of the front end computers , , and are configured with a Windows operating system software, such as Windows 7 operating software for example, and Autodesk Revit Architecture Suite application software, provided by the Autodesk Inc. of San Rafael, Calif. For ease of discussion herein, the front end computer can be considered the same as front end computer -with respect to its hardware configuration, however front end computer being in a different stage of software installation given that it has the IRVP software installed within it.","In a first use scenario, the first front end computer communicates with an interactive rendering computation resource (IRCR)  via a first communications channel  and the second front end computer communicates with the IRCR  via a second communications channel  and the third front end computer communicates with the IRCR  via a third communications channel .","In this embodiment, the IRCR  is accessible as a web service available to an internet connected device. In other embodiments, the IRCR  could reside on a personal computer, such as for example, , or could reside on another type of network, such as a private network upon which the front end computer also resides and has communication access to.","In this embodiment, each of the communications channels  and  and  support HTTP traffic via the Internet. The IRCR , provides an interactive rendering viewing program (IRVP) to be available for download at a uniform resource locator (URL), based upon particular preexisting BIM data. Computing device is configured for and capable of executing the dynamic and interactive rendering (IR) functionality provided the IRVP software that would be otherwise unavailable from BIM software alone. The term \u201cdynamic rendering\u201d, herein refers to video like visual output. The term \u201cinteractive rendering\u201d, herein refers to visual output that is controlled and altered by user input in real time.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2A","b":["110","110","110","212","214","216","210","216","112","114","110","110","110","234","222","224"],"i":["a","b ","c","a ","b ","c "]},"The operating system  assigns physical memory  as virtual memory . Within the virtual memory  there resides an operating system  and building information modeling (BIM) application software . Note that the third front end computer , is not required to have installed BIM software.","Note that the IRCR  is offered as part of an online accessible service that is provided to architects and other types of design personnel. In some embodiments and use scenarios, an application for registration to enroll with this service can be accessed and submitted via the Internet.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2B","b":["110","262"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2C","b":["272","110"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3A","b":["110","110","110","212","214","216","210","216","112","114","110","222","224"],"i":["b","a","b ","b"]},"The operating system  assigns virtual memory  to physical memory . Within the virtual memory  there resides an operating system  and building information modeling (BIM) application software .","Unlike the front end computer , the virtual memory  of the front end computer further includes an interactive rendering information extractor (IRIE) . In some embodiments, the IRIE  is implemented as a software add-on component, also referred to as a plug-in component. This software add-on component  is included within additional software of the second front end computer that is absent from the front end computer , as described in association with .","In one embodiment, upon subscribing to an interactive rendering service provided in association with the IRCR , the interactive rendering (IR) information extractor (IRIE) software component  is downloaded to (installed onto) the front end computer and loaded into virtual memory  as an add-on component to the BIM software . As a result of installing the IRIE component , the first front end computer transitions to a next stage of software installation and transitions to constituting the second front end computer ","When incorporated with and added onto the BIM software , the IRIE software  provides user interface functionality that supplements the user interface functionality provided by the BIM software. When a user of the BIM software  desires an interactive rendering of BIM data, the user activates a user interface command via a keyboard or mouse command that causes the IRIE software  to extract information from the BIM data included within the stored data , and to communicate the extracted information to the IRCR .","In some embodiments, the IRIE software  compresses the extracted information and transmits extracted data to the IRCR  using the HTTP protocol. Upon receipt of the extracted information, the IRCR  schedules for processing and processes the extracted information to generate an interactive rendering viewing program (IRVP) and associated run-time accessible data, that collectively correspond to the BIM data of the front end computer . In other embodiments, the run-time accessible data is embedded in the IRVP program. The IRVP is designed to provide both interactive and dynamic rendering of the structure modeled by the BIM data.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3B","b":["310","110","310","380","380","380"],"i":"b"},"The IRIE software  selectively copies some of the BIM data  and in some circumstances, may create new data, that is not present in exact form within the BIM data . The new data encodes information gleaned from the BIM data  and that is useful towards generating software and data for providing an interactive and dynamic rendering of the structure being modeled by the BIM data . The newly extracted (copied and\/or created) data for interactive and dynamic rendering is referred to herein as interactive rendering (IR) (extracted) data , and also referred to herein as extracted rendering data  or extracted data . Example source programming code for writing and reading the extracted rendering data is found in source code files named Exporter.cs, GenerateAli.ms, and Document.cpp.","In a first embodiment, extraction is performed, in part, by generation of a file having a name suffixed with (.FBX), referred to herein as an .FBX file. The FBX file is a standard formatted file that is created via software provided by Autodesk Revit Architecture Suite.","In addition to the .FBX file, files having names with suffixes other than .FBX and that are suffixed with (.doors, .cameras. and .info) are created to further provide information that is useful for supporting interactive rendering of the structure modeled by the BIM data , but where such information is not provided within the .FBX file.","Note that the Autodesk Revit BIM software can produce high quality and almost photo-realistic images of BIM modeled structure using a ray tracing image rendering technique. Although the ray tracing technique can provide a high quality image, it also requires substantial computational resources to produce just one image. With respect to computational resources of personal computers that are available at the time of this writing, a commercially available front end personal computer would typically require a substantial portion of one hour to compute and render a detailed image of a BIM modeled structure, that incorporates high quality materials and realistic lighting effects.","Consequently, the production of a dynamic (video like) animation of a BIM modeled structure using the ray tracing technique, requiring at least 30 image frames per second therefore limiting image construction to 33 milliseconds per image frame, is not known to be practical using currently commercially available personal computers. Note that providing a video like animation, regardless of the actual rate of image frames per second that is provided within the animation, is not an interactive rendering. Unlike an interactive rendering, an animation does not receive and does not process input from a viewer in order to control and alter, for example change the location and\/or direction of a virtual camera in real time as provided by an interactive rendering.","As a result, an animation can be entirely pre-computed prior to a display of the animation to a viewer (user) of the animation because the location and direction of the camera over time can be known prior to the display and computation of any image within the animation. However, an interactive rendering is not entirely pre-computed prior to viewing by a viewer (user), given that the location and direction of the camera over time is not known until receiving real time input from the viewer (user) during the display of the interactive rendering.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4A","b":["390","110","150","390","310","110","310","390","110","150"],"i":["b","b","b "]},"As shown, a first transformation process  implemented from software executing within the computing environment and hardware of the interactive rendering computation resource (IRCS) , un-compresses, inputs and processes the IR data  and outputs transformed extracted (IR) data , also referred to as first stage transformed data . The transformation performed by this software  is referred to as the first stage of the (IR) (extracted data) transformation process (Stage 1) . Example source programming code for an embodiment of the data transformation (Stage 1) is found in source code file named Document.cpp (See Lines 30-721). The operating system  and hardware employed within the IRCR  is not necessarily the same type of operating system  employed within the from end computer -","In this embodiment, interactive rendering is to be performed by employing software tools of the Unity game development environment which is supplied by Unity Technologies of San Francisco, Calif. Within this environment, a game is referred to as including one or more scenes which each have a set of associated objects. The process described herein transforms building information modeling (BIM) elements and their relationships into game scenes and game objects.","In this embodiment, the transformed extracted (IR) data  is processed from the extracted (IR) data , output and packed into a file having a name with an .ALI suffix, and is referred to as an .ALI file. The transformed extracted (IR) data  is ordered and packed into the .ALI file. Source code describing the serialization algorithms are located within the Writer.h and Writer.cpp source code files. Data serialized and written to a file is herein referred to as a structured file format. The transformed extracted (IR) data  is represented as a series of data items (transactions) which will be further processed by other software executing on the IRCR  to create interactive rendering program including customized software instructions and data that are compatible with the Unity game development environment. This program provides an interactive and dynamic visual environment for control and navigation by a viewer (user).","In this embodiment, a \u201c3ds Max\u201d utility program that is supplied by Autodesk, is employed to read and process the .FBX file residing within the IR (extracted) data . An \u201cALIExporter\u201d procedure, which is constructed as a dynamically linked library (.dll), is linked as a custom exporter to the 3ds Max utility program. While linked with the 3DSMAX utility program, the ALIExporter procedure constructs the .ALI file within the first stage transformed IR data .","The ALI Exporter procedure searches the extracted IR data  which was extracted from BIM data  representing BIM elements and their relationships, and identifies data that can be used to construct a game scene or game objects. Within the Unity game environment, game objects include materials, light sources, cameras, meshes.","A mesh is composed of triangles, each triangle being defined by exactly three vertices, which are points in three dimensional space. When a mesh contains multiple materials, the triangles are grouped by material, and each group is referred to as a submesh. For example, a bathroom sink can be modeled with about 500 triangles. Most of these triangles describe the sink basin which has a ceramic material, while some of the triangles describe the faucet, which has a metal material. The sink can be said to have two submeshes, the basin and faucet, each of which contain a multitude of triangles.","A light source projects light into the scene upon nearby mesh surfaces. A light source can be described by its location in three dimensional space, a brightness, and a color. Within the game environment, the material covering each surface has properties governing what proportion of light projected onto it is absorbed, diffused, reflected, and transmitted (in the case of transparent materials).","Each submesh in a game is assigned a material. A material is defined by a color, a texture having a pattern of colors, a bump pattern representing a surface that is not entirely flat, a transparency factor, a diffuse color, a reflectance value, a shininess factor, or any combination of these properties. Source programming code describing the properties of materials is found in the BuildMaterial method in BuildScene.cs, the MaterialData class in Materials.cs, the MaterialData class in MaterialData.cpp, and the AddMaterial method in Document.cpp.","Optionally, the interactive rendering can simulate the effect of default lighting sources upon mesh surfaces within a scene, or can simulate the effect of defined light sources upon mesh surfaces within a scene. Light sources can include direct and diffused light from the sun, as well as artificial lights. For example, an open window would contribute direct and diffused light from the sun, in addition to a table lamp or ceiling mounted light, each of these light sources having varying intensities and colors. A virtual camera is used to approximate the visual experience a viewer would have viewing from within or outside the BIM structure.","The interactive rendering described herein provides for a camera that moves and turns in real-time, in response to input from a user (viewer) of the custom generated interactive rendering program. In effect, the interactive rendering user (viewer) virtually walks through the BIM structure while stopping, turning and changing walking direction in real-time. This sequence of positions is herein referred to as the walking path. The interactive rendering enables the viewer to travel through the BIM structure at walking speed and provides smooth and continuous video like viewing of the BIM structure by rendering images a rate of at least 30 image frames per second. However, unlike a continuous video which is typically entirely pre-made prior to viewing, the path of movement through the BIM structure can be directed in real-time via input from the user (viewer), and as a result, the continuous video is not entirely pre-made but instead finally made (computed) on demand in real time.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 4B","FIG. 4A"],"b":["390","110","420","310","430","430","150"],"i":"b"},"In this embodiment, the second stage (Stage 2) of the interactive rendering transformation process inputs the .ALI, .DOORS, .CAMERAS, .INFO files  and outputs an interactive rendering (IR) viewer program (process) (IRVP)  and a set of interactive rendering (IR) data , which is also referred to herein as dynamic rendering data or runtime data, to be processed by the IR viewer process  during its execution. Optionally, at least some of the IR data  is embedded in the IR viewer process . Example source programming code for an embodiment of the data transformation (Stage 2) is found in source code file named BuildScene.cs (See Lines 257-404).","Collectively, the first stage 410 and second stage 430 are referred to herein as data transformation performed by a data transformer , . Note that the data transformer outputs dynamic rendering instructions, which are embedded into the IR viewer process and which access and process the dynamic rendering data in real-time while the viewer is interacting with the IR viewer process . Source code for the data transformer is located in association with the ProcessModel function in the BuildScene.cs source programming language file. Files contributing to the creation of an interactive (IR) viewer process  contain the information needed to generate a virtual environment corresponding to the building information model (BIM) data originally exported.","The .ALI file contains data describing vertices, triangles referencing the vertices, submeshes referencing triangles, and meshes referencing submeshes. The .ALI file additionally contains natural and artificial light data. The .DOORS file identifies which meshes are functionally doors. The .CAMERAS file describes the name, properties, position and orientation of a viewing camera in three dimensional space. The .INFO file contains information about the project including the building name, architect's name, client's name, geographic position as longitude and latitude in decimal degrees, the desired universal coordinated time (UTC), and date. This information can be used to determine the direction from which sunlight radiates in relation to the structure being modeled. Example source code describing an embodiment of how building information modeling data is transformed, is found within the AliExporter.cpp source code programming language file.","In this embodiment, both the viewer process  and the IR runtime data  are designed in accordance with a Unity Game Editor supplied by Unity Technologies of San Francisco, Calif. In this embodiment, the Unity game editor (UGE) provides an application programming interface (API) which enables the creation of a game utilizing Unity rendering algorithms and functionality. In this implementation, the second stage IR data transformation process  exercises the Unity Game Editor (UGI) application programming interface (API). This implementation reads the .ALI, .DOORS, .INFO, and .CAMERAS, herein referred to as object data, to construct a scene including meshes, lights, cameras, materials, doors etc., herein referred to as objects. and to construct rules defining the behavior of those objects.","Exercising the UGE API causes a set of game accessible data, referred to herein as an asset directory, to be constructed and populated in response to and in accordance with data processed from the input files to the data transformer ,  and further creates the IR viewer process  that is constructed in accordance with software supplied by Unity Technologies. The IR viewer process  further includes instructions (software) that are designed for processing user input in a manner that is not dependent upon the BIM data . The user input is processed in real time to direct navigation (positioning and direction) of a virtual camera located within the virtual three dimensional space defined by the BIM data .","In the Windows operating system environment, the asset directory is actually a folder including a set of files. The files within this folder have names suffixed with \u201c.asset\u201d, \u201c.png\u201d, \u201c.ogg\u201d, \u201c.bmp\u201d, \u201c.dll\u201d and many others. These files include mesh data, material definitions and data, sound recordings, application behavior and pre-computed light map information. The asset directory is accessible to the IR viewer process  during its execution and interaction with the user (viewer) of the IR viewer process . Example source code for an embodiment of the interactive rendering viewing process (IRVP) is found in source code file named Motor.cs (See Lines 45-62).","An example of an interactive function employed within a dynamic rendering, is the following. When executing an interactive rendering (IR), some rules limit the movement of the viewing camera. The viewer program allows the viewer to move across floors, up and down stairs, and up or down slopes less than a particular predefined incline. Furthermore, the interactive viewer program prevents the viewer to move through scene geometry, a wall, floor or railing for example, unless that geometry is a door. When a viewer comes within a specific distance of a door, as designed, the door should disappear, then reappear when a user moves away again. In some embodiments, scripts (software procedures and logic) defining such real time behavior of a door, in response to viewer (user) input, are written in C# (C Sharp) and Java. This is an example of the logic, rules and procedures that second stage IR transformation process  compiles into at least one dynamic link (.dll file) for later execution by the interactive rendering viewing process (IRVP).",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 5A","b":["110","440","450","440","440","234","310"],"i":"c"},"In this embodiment, the IRIE  interfaces with the BIM software process as an plug-in, that is also referred to as an add-on component. In other embodiments, it is also an option for the IRVP  to be executed on a separate and\/or differently configured computation device . The IRVP  displays on the screen, in a dynamic (video like) manner, a virtual three dimensional and interactive display rendering environment. The visual content of this interactive display rendering environment approximates a visual experience of walking through a real-world three dimensional space defined by the BIM data .","Some visual effects are employed to enhance this viewing experience. For example, in some embodiments, motion blur is used to simulate the exposure time of film cameras. In some embodiments, dynamic range imaging is used to increase the apparent contrast of an image. In some embodiments, anti-aliasing is additionally be used to soften hard edges, also referred to as jaggies.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 5B","b":["380","440","510","500"]},"Within this virtual three dimensional environment, the virtual camera, also referred to herein as the viewing camera (not shown), can move forward towards the lamp  or backward and farther away from the lamp , and\/or turn towards the left or right hand direction, and\/or rotate up or down. In response to movement of the camera, the game engine will compute and render at least 30 image frames per second in response to movement of the camera during each period of time required to render an image frame (<= 1\/30 second), and further, each image frame will be different from the prior image frame in response to each separate and different viewing perspective of the viewing camera, and will separately compute the effect of the light source  in response each movement of the camera in between each period of time required to render an image frame. Source code describing the movement of the virtual camera as a result of user input is located within the Motor.cs and PositionController.cs source code files.","In other embodiments, depending upon an amount of computing required and depending upon availability and performance of computing hardware, the game engine will compute and render at least 20 frames per second in response to movement of the camera during each period of time required to render an image frame (<= 1\/20 second), and further, each image frame will be different from the prior image frame in response to each separate and different position and viewing perspective of the viewing camera, and will separately compute the effect of the light source  in response each movement of the camera in between each period of time required to render an image frame. Source programming code describing the movement of the virtual camera as a result of user input is located within the Motor.cs and PositionController.cs source code (programming language) files.","In some embodiments, a set of multiple defined textures of varying resolution, collectively referred to as a mipmap, is employed to select and substitute a member of a set of textures rendered to a viewer, based upon a distance of the viewing camera from a particular surface that is associated with the set of textures defined by the mipmap.","In use, the IRVP  would render a higher resolution texture of the mipmap set of textures when the associated surface is close to the camera and render a lower resolution texture of the mipmap set of textures when that same associated surface is located farther from the camera. This is also referred to as selective reduction of information based upon proximity of the camera to a particular surface within an interactive rendering scene. Note that if a surface is defined as being made from a transparent material, that surface is invisible and a surface from behind that transparent surface is rendered.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 5C","FIG. 5B","FIG. 5B","FIG. 5B"],"b":["500","520","522","512","522","510","512","522","524","512","510"]},"Note that a particular light source has many associated attributes that can be factored into computation of a lighting effect map. For example, a light source can have an associated luminous intensity, bulb type, color temperature, hue visual effect and an effective range. These attributes are modeled to compute an effect of a light source on a particular mesh surface. In this embodiment, the lighting effect map is calculated by the interactive rendering computation resource , and is stored as an asset within the interactive runtime (dynamic rendering) data , and utilized by the interactive rendering viewing process . Lighting effect maps are generated by considering both direct illumination, and indirect (reflected) illumination. The results include soft shadows, diffusion of surface color, herein referred to as color bleeding, and the apparent darkening of surfaces near other surfaces, herein referred to as ambient occlusion.","Referring back to , the image of the top surface of the desktop  is computed by the game engine by factoring the material, texture pattern and bump pattern of the mesh surfaces that collectively constitute the top surface of the desktop , in combination with the lighting effect map of  of , to arrive at the image of the desktop  of , which is the result of a computed simulation. This computation is performed by what is referred to as a shader procedure. The shader procedure determines how a particular mesh surface will appear \u201cat runtime\u201d, meaning how it will appear during a time of execution of the IRVP .","Hypothetically, if the lamp  were not present in , the top surface of the desktop  would instead appear to be more uniform and like the right hand side of the top surface of the desktop . In some embodiments, the lighting effect from an external source of light, such as the solar orientation of the sun is also computed. Source programming code describing how solar orientation is calculated from geographic position, date, and time, is performed by the GetSolarPosition( ) function located within the BuildScene.c source programming language file.","In an embodiment simulating solar orientation, the geographic latitude and longitude, also herein called project geographical co-ordinates, of the building site in terms of decimal degrees, month and day of the year, and universal coordinated time is obtained in order to determine the effect of the position, and expected intensity of the sun on a clear day upon the lighting effects within the structure that is defined by the BIM data , also referred to herein as the BIM modeled structure or BIM structure. The sun is a special type of light source, and for the purposes of interactive rendering, it is considered a light source with parallel rays of light impacting the scene uniformly from a direction that is computed based upon the aforementioned parameters","Note that solar orientation information is not currently provided within the .FBX file, which has a format specified in accordance with Autodesk Revit software suite. In accordance with the invention, external lighting effects upon the inside and outside of a BIM modeled structure, based upon solar orientation is computed separate from and in parallel with information processed from inside of the .FBX file.","Data extracted from the data defining the BIM structure is often ill suited for efficient computation. This data is translated and optimized for real time rendering in an interactive game model. For example, to translate a light from raw BIM data to game environment data, conversion of position measurements between units of measurements and coordinate systems is performed by the data transformer. Also, conversion of color measurement from degrees Kelvin to a red-green-blue component equivalent is performed by the data transformer , . Additionally, the maximum practical range of the light source (outside of which it has no effect on scene elements) and an initial brightness is assigned within the data transformation process performed by the data transformer , .","In another embodiment, the invention is stored as digital logic (such as software or firmware for example) onto a non-transitory computer readable medium carrying one or more sequences of instructions. The medium being a storage device for digital logic, such as for example, a compact disc or a USB memory device. This digital logic is configured to control a computer processor to perform extraction of data from a source of building information model data for use as extracted data for facilitating interactive rendering of the building information model data.","Optionally, this digital logic (software) can further provide transformation of the extracted data into object data representing objects that are useful for visualization and navigation within an interactive rendering environment. Optionally, the digital logic can provide a data transformer that inputs and processes the extracted rendering data and inputs object data and that outputs a set of dynamic rendering instructions and dynamic rendering data for interoperation with an interactive rendering program that is also generated in response to transformation of the extracted data. The dynamic rendering instructions and\/or dynamic rendering data can be partially or wholly embedded within the interactive rendering program. The dynamic rendering instructions direct operation of a computing resource for presenting a dynamic rendering to a user, and the dynamic rendering is controlled via real time interaction between the interactive rendering program and said user.","At the time of this writing, a video of a sample IR viewer program can be downloaded from the following uniform resource locator (URL)","http:\/\/c461379.r79.cf2.rackcdn.com\/fast_company_demo.mov",{"@attributes":{"id":"p-0083","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":[{"@attributes":{"id":"ul0001-0001","num":"0082"},"b":"110"},{"@attributes":{"id":"ul0001-0002","num":"0083"},"b":"110","i":"a "},{"@attributes":{"id":"ul0001-0003","num":"0084"},"b":"110","i":"b "},{"@attributes":{"id":"ul0001-0004","num":"0085"},"b":"110","i":"c "},{"@attributes":{"id":"ul0001-0005","num":"0086"},"b":"112"},{"@attributes":{"id":"ul0001-0006","num":"0087"},"b":"114"},{"@attributes":{"id":"ul0001-0007","num":"0088"},"b":"120"},{"@attributes":{"id":"ul0001-0008","num":"0089"},"b":"130"},{"@attributes":{"id":"ul0001-0009","num":"0090"},"b":"140"},{"@attributes":{"id":"ul0001-0010","num":"0091"},"b":"150"},{"@attributes":{"id":"ul0001-0011","num":"0092"},"b":"210"},{"@attributes":{"id":"ul0001-0012","num":"0093"},"b":"212"},{"@attributes":{"id":"ul0001-0013","num":"0094"},"b":"214"},{"@attributes":{"id":"ul0001-0014","num":"0095"},"b":"216"},{"@attributes":{"id":"ul0001-0015","num":"0096"},"b":"222"},{"@attributes":{"id":"ul0001-0016","num":"0097"},"b":"224"},{"@attributes":{"id":"ul0001-0017","num":"0098"},"b":"230"},{"@attributes":{"id":"ul0001-0018","num":"0099"},"b":"232"},{"@attributes":{"id":"ul0001-0019","num":"0100"},"b":"234"},{"@attributes":{"id":"ul0001-0020","num":"0101"},"b":"262"},{"@attributes":{"id":"ul0001-0021","num":"0102"},"b":"272"},{"@attributes":{"id":"ul0001-0022","num":"0103"},"b":"310"},{"@attributes":{"id":"ul0001-0023","num":"0104"},"b":"380"},{"@attributes":{"id":"ul0001-0024","num":"0105"},"b":"390"},{"@attributes":{"id":"ul0001-0025","num":"0106"},"b":"410"},{"@attributes":{"id":"ul0001-0026","num":"0107"},"b":"420"},{"@attributes":{"id":"ul0001-0027","num":"0108"},"b":"430"},{"@attributes":{"id":"ul0001-0028","num":"0109"},"b":"440"},{"@attributes":{"id":"ul0001-0029","num":"0110"},"b":"450"},{"@attributes":{"id":"ul0001-0030","num":"0111"},"b":"500"},{"@attributes":{"id":"ul0001-0031","num":"0112"},"b":"510"},{"@attributes":{"id":"ul0001-0032","num":"0113"},"b":"512"},{"@attributes":{"id":"ul0001-0033","num":"0114"},"b":"520"},{"@attributes":{"id":"ul0001-0034","num":"0115"},"b":"522"},{"@attributes":{"id":"ul0001-0035","num":"0116"},"b":"524"}]}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In one aspect, the invention provides a system for transforming building information modeling data into a video-like interactive rendering. In some embodiments, the interactive rendering is provided at a rate of at least 30 image frames per second. In some embodiments, the interactive rendering is provided with visual effects based upon the simulation of artificial lighting. In some embodiments, the interactive rendering is provided with visual effects based upon solar light and its orientation with respect to a BIM structure being modeled.","So that the manner in which the features of the invention can be understood, a detailed description of the invention may be had by reference to certain embodiments, some of which are illustrated in the accompanying drawings. It is to be noted, however, that the drawings illustrate only certain embodiments of this invention and are therefore not to be considered limiting of its scope, for the scope of the invention encompasses other equally effective embodiments. The drawings are not necessarily to scale, and the emphasis generally being placed upon illustrating the features of certain embodiments of the invention. In the drawings, like numerals are used to indicate like parts throughout the various views. Thus, for further understanding of the invention, reference can be made to the following detailed description, read in connection with the drawings in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 2A-2C","b":"110","i":"a. "},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 3A-3B","b":["110","310","110"],"i":["b ","b. "]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 4A-4B","b":["390","110"],"i":"b. "},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 5A-5C","b":"110","i":"c"}]},"DETDESC":[{},{}]}
