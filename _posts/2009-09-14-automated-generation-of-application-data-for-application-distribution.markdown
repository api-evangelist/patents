---
title: Automated generation of application data for application distribution
abstract: An application registration module executes on a client, extracting metadata from a local application designed for an operating system of the client, formulating installation instructions, and providing the application, metadata, and installation instructions to a distribution server. The distribution server can then be used to facilitate installation of the application on other clients having the same operating system as the source client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08321857&OS=08321857&RS=08321857
owner: Symantec Corporation
number: 08321857
owner_city: Cupertino
owner_country: US
publication_date: 20090914
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention pertains in general to computer system administration, and more specifically, to facilitation of installation of an application to other clients in an enterprise using a distribution server.","2. Description of Related Art","Software distribution servers facilitate installation of applications on multiple client systems. Using current software distribution servers, an administrator of an enterprise analyzes an application of a source client system, uploading the application along with any additional required information to the software distribution server. This application data is then stored on the server and used for subsequent installation of the application on a set of target clients within the enterprise.","However, these current software distribution servers require an administrator or other human user expressly to analyze the application in order to provide the application to the software distribution server in the format required by the server. This places on the administrator the burden of viewing, analyzing, and manipulating the application data. This burden increases in proportion to the number of distinct application formats that are supported, since the administrator must then be familiar with many different formats in order to properly analyze and manipulate the application data. The burden is further increased when the operating system of the client on which the application is located is not one with which the administrator is familiar, since the administrator is then even less likely to be familiar with the different application formats supported by that operating system, or to have the necessary expertise with the various system tools used to perform the analysis and manipulation of the application.","As one example, the server operating system could be some version of MICROSOFT WINDOWS, but the enterprise could have a number of APPLE MAC OS X client systems, which support application package formats such as .app, .pkg, .mpkg, and .dmg. An administrator familiar with WINDOWS but not with MACINTOSH systems would thus be unlikely to be familiar with the different possible tools and commands used to analyze and manipulate the applications, much less the details of the various package formats.","Embodiments of a computer-readable storage medium store a computer program executable by a processor for registering an application for distribution to a plurality of clients. The computer program comprises a metadata extraction module for extracting metadata from an application package of a local application designed for a first operating system, and an installation instructions module for determining instructions for installing the application on a different client having the first operating system. The computer program further comprises an upload module for providing the application package, the extracted metadata, and the determined instructions to a distribution server for storage on the distribution server.","A client computer system for registering an application for distribution to a plurality of other client computer systems comprises a first operating system and a computer processor. The computer processor executes instructions performing actions comprising extracting metadata from an application package of a local application designed for the first operating system. The performed actions further comprise determining instructions for installing the application on a second client having the same operating system as the first operating system, and providing the application package, the extracted metadata, and the determined instructions to a distribution server for storage on the distribution server.","One embodiment of a computer-implemented method extracts metadata from an application package of a local application designed for the first operating system. The method additionally determines instructions for installing the application on a second client having the same operating system as the first operating system, and provides the application package, the extracted metadata, and the determined instructions to a distribution server for storage on the distribution server.","The figures depict embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","110","115","120","140","110","115","120","100","110","115","120","140"]},"In general, the source client  has an application that administrators or other users of the enterprise  may wish to install on target clients  which have the same operating system as the source client. The application is provided to the distribution server , which stores the application for subsequent installation on the target clients . The distribution server  may have a different operating system than the source client  and target clients . As one example referenced throughout the remainder of the discussion, the clients ,  run a version of the MAC OS X operating system, and the distribution server  runs a version of the MICROSOFT WINDOWS operating system. It is appreciated that these particular operating systems need not be employed. Rather, the clients ,  and the server  may respectively run any operating systems that are different from each other, such as WINDOWS and UNIX, or may run the same operating system.","More specifically, the source client  is a computer system on which an application  resides, e.g., as one or more files by which the application may be, or has already been, installed. The term \u201capplication package\u201d is used herein to denote the storage unit or units that contain the various application files. For example, in the case of MAC OS X, the operating system supports several different package types, including a MAC native package (.pkg) which is structured as a directory containing files and is installed by the standard MAC installation utility \u201cinstaller,\u201d a metapackage (.mpkg) structured as a directory containing other packages or metapackages and which is likewise installed by the \u201cinstaller\u201d utility, an application bundle (.app) stored as a directory with extension .app and installed by copying it into the Applications folder at the root level of the primary hard drive partition, and a disk image (.dmg) which represents one or more packages as a single ISO file and is installed by mounting the file to the filesystem and running the installation method appropriate to the formats of the package(s) within. The source client  further comprises an application registration module , which performs all the operations necessary to provide the application  and any associated metadata to the distribution server  for storage. The application registration module  is discussed below in greater detail with respect to .","The target clients  have the same operating system as the source client  and thus may install the application  locally. An operating system is considered herein to be \u201cthe same\u201d as another operating system if it is the same version of the same operating system, or a different version of the same operating system that is nonetheless sufficiently similar to allow installation of the application . For example, MAC OS X supports installation of applications having the .mpkg package format in version 10.2 and later. Thus, OS X versions 10.2, 10.2.1, 10.3 and the like would be considered the same for purposes of installing an application packaged in .mpkg format, but version 10.1 would not be considered the same as version 10.2, nor would a different type of operating system, such as UNIX, LINUX, or MICROSOFT WINDOWS, that does not natively provide the same tools and support the same package formats.","The distribution server  stores the application  from the source client , along with any associated metadata and instructions for client installation. The application  may then be installed on the target clients , initiated either by the distribution server (e.g., by automatic \u201cpush\u201d to the target clients in response to a triggering rule, such as the arrival of a specific date and time) or by a target client  (e.g., by an administrator manually running commands causing installation from the distribution server ). Metadata stored by the distribution server  may include, for example, data such as application name, application version, and application vendor. The data for an application  can be stored as an entry in an application catalogue , along with its associated metadata and installation instructions. For example, using a program provided by the distribution server , a user could browse a list of all the applications stored on the distribution server  and available for installation on the target clients , including their names, versions, vendors, and the like.","The network  represents the communication pathways between the clients ,  and the distribution server . In one embodiment, the network  uses standard Internet communications technologies and\/or protocols. Thus, the network  can include links using technologies such as Ethernet, 802.11, integrated services digital network (ISDN), asynchronous transfer mode (ATM), etc. Similarly, the networking protocols used on the network  can include the transmission control protocol\/Internet protocol (TCP\/IP), the hypertext transport protocol (HTTP), the simple mail transfer protocol (SMTP), the file transfer protocol (FTP), etc. The data exchanged over the network  can be represented using technologies and\/or formats including the hypertext markup language (HTML), the extensible markup language (XML), etc. In addition, all or some links can be encrypted using conventional encryption technologies such as the secure sockets layer (SSL), Secure HTTP (HTTPS) and\/or virtual private networks (VPNs). In another embodiment, the entities can use custom and\/or dedicated data communications technologies instead of, or in addition to, the ones described above.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 1"],"b":["110","115","120","202","204","204","206","208","210","212","214","216","218","212","204","220","222","206","202","204"]},"The storage device  is any computer-readable storage medium, such as a hard drive, compact disk read-only memory (CD-ROM), DVD, or a solid-state memory device. The memory  holds instructions and data used by the processor . The pointing device  may be a mouse, track ball, or other type of pointing device, and is used in combination with the keyboard  to input data into the computer . The graphics adapter  displays images and other information on the display . The network adapter  couples the computer system  to a local or wide area network.","As is known in the art, a computer  can have different and\/or other components than those shown in . In addition, the computer  can lack certain illustrated components. In one embodiment, a computer  acting as a server may lack a keyboard , pointing device , graphics adapter , and\/or display . Moreover, the storage device  can be local and\/or remote from the computer  (such as embodied within a storage area network (SAN)).","As is known in the art, the computer  is adapted to execute computer program modules for providing functionality described herein. As used herein, the term \u201cmodule\u201d refers to computer program logic utilized to provide the specified functionality. Thus, a module can be implemented in hardware, firmware, and\/or software. In one embodiment, program modules are stored on the storage device , loaded into the memory , and executed by the processor .","Embodiments of the entities described herein can include other and\/or different modules than the ones described here. In addition, the functionality attributed to the modules can be performed by other or different modules in other embodiments. Moreover, this description occasionally omits the term \u201cmodule\u201d for purposes of clarity and convenience.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 1"],"b":["112","112","111","110","111","112","320","330","340","350"]},"The metadata extraction module  extracts metadata from the application . The extracted metadata is typically used by the distribution server  to populate its catalogue  of available applications. Possible extracted metadata can include the name of the application (e.g., \u201cMySpreadsheet\u201d), the version of the application (e.g. \u201c2.0.1\u201d), the vendor\/author of the application (e.g., \u201cBusiness Software, Inc.\u201d), the operating system for which the application is designed (e.g., \u201cMac OS X v.10.2.x\u201d), the date of release of the application, an icon or other graphical representation of the application, a description of the application, the language or locale of an application, a target software release or service pack and list of application files and pre and post-install scripts, and the category of the application (e.g., \u201cOffice\/Spreadsheet\u201d). The particular manner of extracting the metadata can vary with both the operating system and with the particular format in which the application is packaged. For example, an application packaged in .pkg format on MAC OS X would have the name of the application stored within an Info.plist file stored within a Contents subfolder of the application package, and the version of the application within the package version file of the Contents\/Resources subfolder, both files requiring further parsing to extract the data of interest. As another example, a MAC OS X application packaged as a .dmg file that further stores a .pkg file would first be mounted to a location on the filesystem using the mount command of OS X, then the enclosed .pkg file read and processed as in the prior example, and then the application's .dmg file would be unmounted using the unmount command. Thus, in one embodiment the metadata extraction module  includes functionality for determining whether an application package includes one or more subpackages, and if so, mounting the application package to a mount point on the filesystem, extracting the subpackage(s) contained within the application package, extracting metadata from the subpackage(s), and unmounting the application package after the subpackage(s) has been extracted. The metadata extraction module  further includes functionality to identify predetermined files (e.g., a well-known file such as Info.plist) within the application package and to parse the given files to identify metadata of interest (e.g., application name).","In one embodiment, the metadata extraction module  extracts the relevant metadata information by executing a utility provided by the operating system in question, such as the installer tool, and obtaining the metadata from the variables that the utility outputs. In such an embodiment, the metadata extraction module  has knowledge of the various utilities (e.g., their names, arguments, and return values) available on the operating system.","The installation instructions module  determines instructions to use for installing the application  on the target clients . In one embodiment, the installation instructions module  formulates a command line to be run on the target clients , the command line causing execution of an installation program or script that performs the tasks necessary to install the application  from the distribution server . For example, if the target clients  have a script named install_application that installs an application X when run with the argument\u2014install X, the assembled command line could be \u201cinstall_application\u2014install browserapp.dmg\u201d for an application the extracted name of which is browserapp and which is stored in the .dmg package format. The install_application script could perform operations such as calling the mount command, followed by a call to the operating system's installer utility on the package encapsulated within browserapp.dmg, followed by a call to the unmount command. In another embodiment, the installation instructions module  creates an installation file containing the instructions needed to carry out the installation, such as the commands that would be run by the script install_application. A target client would then obtain and execute the installation file in order to install the application.","It is appreciated that deinstallation instructions could be generated using the same technique as described above for installation instructions. Thus, in embodiments in which the operating system of the clients ,  supports automated application deinstallation, the installation instructions module  can also determine instructions to use for uninstalling an application  installed using the installation instructions.","The format standardization module  optionally ensures that the application data is packaged in a standardized package format. In one embodiment, this involves determining whether the application package is in the predetermined standardized container package format, and if not, encapsulating the application package in the standard container package format. For example, applications of type .app, .pkg, and the like can each be wrapped into a container package file of type .dmg, (or .zip, .gz, .tar, etc.). In other embodiments, package standardization involves determining whether the application package is in a predetermined standardized package format, and if not, converting the package from the current format to the predetermined standardized package format. For example, the .pkg format could be the predetermined standardized package type, so that an .app package would be converted into a .pkg package. Such package standardization allows for greater regularity in handling the resulting packages. For example, the distribution server  and any installation scripts need only expect files having the standardized package format.","The upload module  provides the packaged application (e.g., in the standardized package format optionally created by the format standardization module ) and the associated metadata obtained by the metadata extraction module  to the distribution server , along with the installation instructions (and\/or deinstallation instructions) formulated by the installation instructions module . In one embodiment, this involves invoking an application programming interface (API) of the server software of the distribution server . For example, the distribution server  could run a web service, a standard server process, or the like that accepts a set of standard commands (e.g., storeApplication, storeMetadata, storeInstallInstructions). The upload module  would then communicate with the distribution server  using the standard commands to transfer the application, metadata, and installation instructions to the distribution server and store them within its software catalogue .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4","b":["110","120","410","120","111","120"]},"As a result of the request , the application registration module  of the source client  prepares  the application for uploading to the distribution server . This includes extraction of metadata used by the distribution server , e.g. data stored by application catalogue , such as the name, version, and vendor of the application, as further described above with respect to the metadata extraction module  of . The preparation also includes the creation of instructions, such as an installation command line, to be used when installing the application  on the target clients , as describe above with respect to the installation instructions module  of . The preparation may additionally include format standardization, such as encapsulation the package(s) of the application  within a .dmg or other container package, as described above with respect to the format standardization module  of .","These preparation steps  result in metadata about the application  and instructions used to install it (and\/or uninstall it) on clients, as well as a standardized format for storing the application itself. This resulting data is then uploaded  to the distribution server  for storage, e.g. within the application catalogue , as described further above with respect to the upload module  of .","In one embodiment, the operations of  described above are implemented by one or more programs, such as scripts, or applications native to the operating system of the clients , , that embody the functionality of the various modules depicted in . For example, in an embodiment designed to handle MAC OS X applications, application information is transferred to the distribution server  in response to the execution of a program register-package. The register-package program takes an application package as input, extracts metadata from the package, forms a command line to be used for installation on target clients , encapsulates the package within a .dmg package file (if needed), and uploads the resulting .dmg file to the distribution server  for storage. Then, as specified by the command line associated with the application in the distribution server , a dmgutil application could be invoked on a target client  and given as arguments the\u2014install switch and the .dmg package file created by register-package. As a result, dmgutil would extract the original package from the .dmg package file and perform the necessary actions to install it based on the package type, such as running the MAC OS X utility installer for applications with package formats .pkg, or .mpkg, or copying an .app package into the \/Applications folder.","Thus, in the case of a hypothetical application \u201cmyApp\u201d stored in the package myApp.app located on the source client , an administrator or other user would run the command register-package myApp.app on the source client, and the necessary application data\u2014including the file myApp.dmg in the standardized .dmg package format\u2014would automatically be transferred to the distribution server  as a result. Then, the command dmgutil\u2014install myApp.dmg would be invoked on the target clients  on which installation is desired\u2014either manually on each machine, or as part of an automated \u201cpush\u201d initiated by the distribution server \u2014and would obtain the application information from the distribution server  and install it locally on the target client . In such an example, the installation program dmgutil is made available on each desired target client  prior to local installation of the myApp application. Further, by making both the register-package registration tool and the dmgutil installation tool available on each of the clients , , an application on any given client can then easily be registered by that client using register-package and installed on the other clients using dmgutil.","The above description is included to illustrate the operation of certain embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion, many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 1"],"b":"112"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4","b":["110","120"]}]},"DETDESC":[{},{}]}
