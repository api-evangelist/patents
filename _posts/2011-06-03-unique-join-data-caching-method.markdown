---
title: Unique join data caching method
abstract: Enterprise systems, methods and computer program products are disclosed for providing caching of data retrieved from joined tables and an inheritance table hierarchy of a database in an enterprise. The computer implemented method comprises creating a queue of cursors of a statement associated with a database; evaluating a cursor of the queue and marking as one of a unique record and an object of an inheritance table; and, if a cursor of the queue is marked as one of a unique record and a unique object, then, storing data associated with one of the unique record and object in a data cache for subsequent retrieval, thus avoiding costly network calls. If the process leaves a cursor unevaluated, the method retrieves data from an enterprise database associated with the statement. The process is implemented on an application object server including a data access layer and a kernel instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08965879&OS=08965879&RS=08965879
owner: Microsoft Technology Licensing, LLC
number: 08965879
owner_city: Redmond
owner_country: US
publication_date: 20110603
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention generally relates to enterprise computer systems and methods and more particularly to systems, methods and computer program products for facilitating unique join data caching in an enterprise resource planning system operating on a specially programmed computer server.","In today's technological environment, it is common for enterprises such as business organizations, schools, charitable organizations and government organizations to deploy private computer networks\u2014intranets\u2014to securely share such organization's information or network operating system within that organization. The term \u201cintranet\u201d is used in contrast to \u201cinternet\u201d, which is a network between and among individuals and organizations, the most common of which is the global, public Internet. That is, an intranet is a network within an enterprise which sometimes refers only to an internal (private) website, but may be a more extensive part of the enterprise's information technology (IT) infrastructure. For example, in many enterprises, an employee may work from home and gain access to the enterprise via a portal requiring additional security hurdles such as synchronous keys for entry. An enterprise intranet may host multiple private websites and constitute an important component and focal point of internal communication with, and collaboration among, individual computer users associated\/affiliated with the enterprise (e.g., students within a university, co-workers within a company, members of a governmental department or the like).","As individual computer users associated\/affiliated with the enterprise perform various computer-based activities while logged into the intranet, these users may utilize enterprise resource planning (ERP) client\/server systems as provided by the enterprise. One such system known as the Dynamics\u00ae AX 2009 ERP system available from Microsoft Corporation of Redmond, Wash. provides a database query server and associated application object server among other features. These are routinely accessed by a client, for example, to query the database for data contained in tables. The database may comprise a plurality of related tables of data, for example, related to everyday activities of the enterprise. A member of the enterprise may perform a query of the database known as a join query in which, for example, in the sequential query language (SQL), a join query relates to a query in which two (or more) tables of data of a database are temporarily joined in order to select data of the tables without impacting the data in the tables. To perform a join query, information in the query may comprise at least one table, a column or row and a condition to make the join temporarily occur.","In known enterprise systems, a join query may be processed at the database each time the join is executed. This can cause degradation in performance of the ERP system as a whole. Even if the same query is run several times, the same query may be executed on the database each time the query is run. In the case of a typical enterprise structure involving a client (making a query), a server and a database, making the same query may lead to expensive network calls, time and resource consumption impacting the ERP system as a whole.","In at least one enterprise resource planning system, data caching is performed for a unique single table select query, meaning when there is no join condition or table inheritance to connect a first database table to another. There exists a unique index of a table of the database. However, the query is not a join query neither is there a join condition or inheritance connection to another table. Referring to , B,  and , there is shown a process of data caching at a level of a data record of a table having a unique index of a database which may be referred to herein as record level caching. Similar reference characters are used to denote similar elements in similar drawings. Also, the first numeral of a reference may indicate the figure number where that element first appears.","Unique keys may be declared using unique indexes. A SELECT statement may select a record from a table using an equal operator, for example, in one language, denoted == on the caching key. Referring to , there are shown a plurality of exemplary data structures involved in record level caching. The names of the data structures are exemplary names and not intended to be limiting. Beginning at the left of , TableInfo  contains a reference to TableDataBaseInfo  which refers to RecordCacheGroup . RecordCacheGroup  in turn refers to one RecordCacheInfo  per the unique index for the desired table. RecordCacheInfo corresponds to one unique index definition, for example, DataBaseIndexDefinition. A root of the RecordCacheInfo  may be represented as header AVLTree . Referring to , AVLCache may refer to DataBaseRecordBufferRefCounted  which maintains a reference to DataBaseRecordBuffer .","In this process, data structure DataBaseRecordStructure  may be a data structure that may comprise the actual data. The data may be stored in a byte array of dataRow. DataRow is used by way of example and may comprise a data column in an alternative embodiment. The data represented by an instance of DataBaseRecordBuffer  correlates to a row of data in the database table, for example, a table of a database of database server  (). RecordCacheInfo  may be an associative container of DataBaseRecordBuffer . The RecordCacheInfo structure  may be an associative container of DataBaseRecordBuffer . The RecordCacheInfo structure may represent a unique index in the database. An associative container may be built on an AVL tree  (a self-balancing binary search tree named for Adeison-Velski\/Landis).  represents record level caching in action according to one process of unique table caching and will not be described in detail herein.","Data retrieval from record level caching is exemplified by . A where clause in the database query may match any of the unique indexes on the table. The data row in a record level cache, for example, may be represented internally in the kernel  () of an application object server ,  using DataBaseRecordBuffer . In a record level cache, DatabaseRecordBuffer  may be stored as a node in an AVL tree . Each node of an AVL tree  may be represented using AVLTREEHeader structure  (). Since there may exist a collection of unique indexes, the kernel  may use a reference counting scheme instead of making copies of a data buffer for each index to keep track of the DataBaseRecordBuffer  structures that are stored in the AVLTREEHeader . For example, the DataBaseRecordBufferRefCounted  structure may be a wrapper for DatabaseRecordBuffer  with a reference count. If the record is not found in the cache, then the record may be fetched from the database and inserted into each of the trees corresponding to unique indexes.","Fundamentally, there is a need in the art for a caching of join queries to avoid the degradation in performance so that the caching may result in more efficient ERP system operation. Moreover, a problem may arise during normalization of an enterprise resource planning system when a number of single table select queries may be replaced by join queries. Also, table inheritance, when one table may be the parent of another table and so on, may cause repetitive queries of the same tables and the same join query processes may need to be performed.","Thus, it may be known to provide a unique single table select query, however, what are needed are systems, methods and computer program products for adapting existing processes for unique single table select caching to expand caching to, for example, unique join and table inheritance object queries.","This summary is provided to introduce a selection of concepts. These concepts are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is this summary intended as an aid in determining the scope of the claimed subject matter.","The present invention meets the above-identified needs by setting up and providing run-time systems, methods and computer program products for adapting existing processes for unique single table select caching to expand caching to, for example, unique join and table inheritance queries.","In an embodiment, an application object server comprises a kernel associated with a query framework and a query generation model which, in turn may utilize sequential query language (SQL) for access to a data access layer and so to a record ID generator. In a method of unique join data caching, a preliminary process comprises determining whether a given query is eligible for caching. Of course, unique table caching proceeds as described above and join support involves determining whether a statement has an explicit predicate match to a unique index for a table, for example, using the == operator. Using this table as a starting point, there may be join conditions associated with this table or, in other words, a predicate with a query valid for join caching. A combination of the where predicate and join condition then may satisfy the caching requirement for other tables in the statement.","In a related embodiment, table inheritance data caching may relate to identification of table inheritance objects either in conjunction with joins or separate from joins. A cursor may represent an instance of a table in a join statement or a table inheritance hierarchy. If all cursors are marked as unique row\/object then that statement is eligible for caching. In this manner, both unique join caching rows and table inheritance objects are identified for caching.","In a related embodiment, a process comprises creating a queue of all cursors in a statement. Each cursor may represent a table in a join statement. For table inheritance, the root cursor for table inheritance is entered into the queue. A repetitive process then involves removing cursors from the head of the queue until all cursors are evaluated. A decision process involves whether there exists a unique index predicate for labeling, for example, as unique row or an object for labeling as a table inheritance object. Once the iterative process is complete, then, all cursors may be marked as unique row or object, and the cursors marked as unique row or object may be eligible for caching.","Further features and advantages of the present invention, as well as the structure and operation of various embodiments of the present invention, are described in detail below with reference to the accompanying drawings.","The present invention is directed to systems, methods and computer program products for facilitating unique join and inheritance table object caching in an enterprise resource planning (ERP) system. Firstly, we will provide an overview of unique join and inheritance table object caching. Then, hardware figures ,  and  will be introduced. A discussion of an exemplary pseudo-code follows as depicted in .","Data caching of unique joins and inheritance table objects is supported by a process described briefly as follows. A unique join involves fetching one record from each table of a database according to a join condition given by a unique index as a key to the join. A table inheritance data caching is supported by treating an inheritance table hierarchy specially to identify objects for caching from the hierarchy. As an initial process, for a given query to be determined eligible for caching, there should exist at least one table having a predicate matching a unique index, for example, using the == operator. This process guarantees that there is at least one table with a record eligible for caching. Using this first table as a starting point, there may be a join condition indicating a join with another table or a table inheritance object. The process proceeds one cursor at a time, for example, by forming a queue of cursors and repeatedly marking unique row (join) or object (inheritance). At the conclusion of an iterative process for a given statement, all cursors may be marked unique row\/object. The statement then may be eligible for caching.","A simple example may illustrate the process further. Given a table T with fields, field  and field  and a unique index on field field, then, table T with field  and field and unique index on field field, an exemplary statement may be given by: Select T join T where T.field==T.field && T.field==2. The unique index predicate field==2 may be used to look up table T's cache. From T's cache, the value of T.field, say, val_fieldl may be used as a unique index predicate on table T's cache. In other words, field==\u2018val_field\u2019 may be used as a unique index predicate to look up the data record in table T's cache. Obtaining the matching record for table T satisfies a join statement using record level caches without having to go to the database to fetch the result set. If there is a cache miss for a table, one may resort to proceeding to the database, (there being no cache). Data retrieval may be done at the time of join identification from an existing cache. For the case where the statement is not a unique join or it is a unique join but there is a cache miss, one may resort to the database look up. On the other hand, it is submitted that once unique join and inheritance caching are implemented, a substantial improvement in efficiency results because expensive network calls to an application object server or to a database server may be avoided.","Table inheritance data caching differs from table caching as table inheritance relates to objects. Consequently, all flushing, deleting, updating, inserting, removing oldest entries in caches and the like is performed at an object level instead of a single record level. A root of an inheritance table hierarchy may control caching for the whole inheritance table hierarchy. For inheritance caching, the record id and an object type discriminator together may make object retrieval more efficient. A join query may be broken down to do look ups in a regular table cache and inheritance table cache. The object look up may be done using unique key look up on any of the tables which are part of the object.","Join queries which have other extra filters apart from a unique index filter may also be eligible for cache. An exemplary filter, besides an equality filter may be a less than <, greater than >, less than or equal to or other operator known in the art. Such extra filters may be evaluated after the record is fetched from the cache for that table using the unique index filter. Logic for flushing of caches, updating records in caches, deletions of records and removal of records when a cache may be full may be at an individual table's cache level and so independent of other tables.","Referring now to , a block diagram illustrating an exemplary intranet enterprise resource planning (ERP) system  for an enterprise, according to an embodiment of the present invention, is shown.","Intranet enterprise queries and database system  includes a plurality of users  (shown as users -in ) of an enterprise accessing, via a respective computing device  (also, shown as devices -in ), an organization's intranet (i.e., private network)  via wired or wireless communication links , ,  and . Computing device  may be described herein as an organizational or enterprise member client. As will be appreciated by those skilled in the relevant art(s) after reading the description herein, intranet  may be a private network deployed by an organization or enterprise such as a business enterprise for use by its employees. An enterprise system may, by way of example, be one for a university for use by its students and faculty, one for a government agency for its workers, and the like. As will also be appreciated by those skilled in the relevant art(s) after reading the description herein, system  may be deployed across one or more jurisdictions as, for example, a multinational business enterprise makes its intranet  available to its employees around the world. Such detail is not shown in .","In various embodiments, device  may be configured as a desktop , a laptop , a PDA , a tablet or mobile computer , an intelligent communications device or the like. Device , in order to access private network  may typically have to identify a user name and password, if not, enter further security information such as a secret key or fingerprint data to access network . In accordance with an embodiment of a method of dynamically querying an enterprise database, a user may access a database  by user name and password, the user name and password being utilized by any of servers ,  and  to access an application object server  or application object server  may be obtained directly by a client for in turn structuring the query to database  as will be briefly described with reference to .",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["122","124","126","128","100","130","132","134","136","138","140","142","144"]},"As users  log into an organizational\/enterprise intranet , they perform various computer-based tasks while logged into the organization\/enterprise's intranet . All these data may be categorized into categories, for example: data and commands associated with setting up a process for inventory control or other activity involving updating data in tables joined by conditions or as objects in an inheritance table hierarchy. With reference to , an enterprise server herein referred to as an application object server  may comprise a Dynamics\u00ae AX server running software available from Microsoft Corporation of Redmond, Wash.","Referring now to , a client  may output queries, requests for database data retrievals, insertions, updates, deletions and the like of database  received as, for example, an X++ statement. X++ is a special programming language, similar to C#, used with Dynamics AX known as an object-oriented language. (Other programming languages may be used as well, for example, C++ and related languages, wherein X++ is described herein by way of example.)","In an alternate embodiment to , application object servers  may employ a web interface server  (e.g., the SHAREPOINT\u00ae web platform available from Microsoft Corporation of Redmond, Wash.), a host server  or a report server  to allow intranet administrators and clients to manage an enterprise database . For example, such a web platform  can be used as a base and can allow for complete configuration and monitoring of system  such as the location of log files, data filtering and the like.","In an alternate embodiment, an intranet administrator would have access to configuration, status and data retrieval servers  via a web service-based application programming interface (API) (e.g., Simple Object Access Protocol (SOAP) or RESTful). In such an embodiment, the intranet administrator may enforce privacy laws and business rules based on access credentials. For example, an unprivileged user might be allowed to retrieve some data being accessed within intranet , while an authorized user (a manager or director or owner of a work queue) may retrieve more detailed data and have additional authority for record management.","An example of a computer system  is shown in  which may either represent any client or any server of .","Computer system  includes one or more processors, such as processor . The processor  may be connected to a communication infrastructure  (e.g., a communications bus or network). Various software aspects are described in terms of this exemplary computer system. After reading this description, it will become apparent to a person skilled in the relevant art(s) how to implement the invention using other computer systems and\/or architectures. Computer system  may represent a client device  possessed by an organization\/enterprise member. Computer system  may similarly represent a server , , ,  or  or database  as introduced in  and components thereof.","Database server  may be an SQL or other database server responsible for maintaining for example documents, organization charts, inventory data and the like for an enterprise. As such, as a document is processed such as a purchase order, rules and parameters and conditions and the like may be retrieved by application object server  using a record caching system.","Computer system  can include a display interface  that forwards graphics, text and other data from the communication infrastructure  (or from a frame buffer not shown) for display on the display unit . A display interface may be what a user  sees on any one of devices . A user may type or click or use other form of data or command entry to input data\/commands to a dynamic workflow system of the present invention.","Computer system  also includes a main memory , preferably random access memory (RAM) and may also include a secondary memory . The secondary memory  may include, for example, a hard disk drive  and\/or a removable storage drive , representing a floppy disk drive, a magnetic tape drive, an optical disk drive, etc. The removable storage drive  reads from and\/or writes to a removable storage unit  in a well known manner. Removable storage unit  represents a floppy disk, magnetic tape, optical disk, etc. which is read by and written to by removable storage drive . As will be appreciated, the removable storage unit  includes a computer usable storage medium having stored therein computer software and\/or data.","In alternative aspects, secondary memory  may include other similar devices for allowing computer programs or other instructions to be loaded into computer system . Such devices may include, for example, a removable storage unit  and an interface . Examples of such may include a program cartridge and cartridge interface (such as that found in video game devices), a removable memory chip (such as an erasable programmable read only memory (EPROM), or programmable read only memory (PROM)) and associated socket and other removable storage units  and interfaces , which allow software and data to be transferred from the removable storage unit  to computer system .","Computer system  may also include a communications interface . Communications interface  allows software and data to be transferred between computer system  and external devices. Examples of communications interface  may include a modem, a network interface (such as an Ethernet card), a communications port, a Personal Computer Memory Card International Association (PCMCIA) slot and card, etc. Software and data transferred via communications interface  are in the form of non-transitory signals  that flow over communications media , , , ,  and so on which may be electronic, electromagnetic, optical or other signals capable of being received by communications interface . These signals  are provided to communications interface  via a communications path (e.g., channel) . This channel  carries signals  and may be implemented using wire or cable, fiber optics, a telephone line, a cellular link, an radio frequency (RF) link and other communications channels as explained above.","In this document, the terms \u201ccomputer program medium\u201d and \u201ccomputer usable medium\u201d are used to generally refer to media such as removable storage drive , a hard disk installed in hard disk drive  and signals . These computer program products provide software to computer system . The invention is directed to such computer program products.","Computer programs (also referred to as computer control logic) are stored in main memory  and\/or secondary memory . Computer programs may also be received via communications interface . Such computer programs, when executed, enable the computer system  to perform the features of the present invention, as discussed herein. In particular, the computer programs, when executed, enable the processor  to perform the features of the present invention. Accordingly, such computer programs represent controllers of the computer system .","In an embodiment where the invention is implemented using software, the software may be stored in a computer program product and loaded into computer system  using removable storage drive , hard drive  or communications interface . The control logic (software), when executed by the processor , causes the processor  to perform the functions of the invention as described herein.","Referring now to , there is shown an exemplary join\/inheritance table object caching process for setting up a data cache of a data access layer  (). Occasional reference may be made to , a system block diagram of an application object server , . Process  of , shows start  representing the start of caching processes for unique join data and inheritance table object caching. Referring to , it will be assumed that a client has initiated a query for, update or otherwise initiated an attempt to access data of a database . In so doing, the client request is received at application object server  and an associated statement is processed at kernel instance .","First referring to process , there is shown a process of creating a queue of all cursors from a given statement. Referring to , cursors comprise an element of the kernel instance  and may be coupled to a query generation model  of a business intelligence engine. Each cursor may represent an instance of the table in a join statement. A cursor may be central to a data access engine  and may represent a data reader (to support iteration), a single record in a table (instance of an entity) or a table inheritance hierarchy. Query framework is coupled to kernel instance  as well, and these provide two way communications with data access layer . Within data access layer  may be a data cache memory where data may be cached depending on the result of process . It is important to note that data may also be cached in data cache memory on clients such as clients , . If there is a cache hit on a client , then the data request may not be sent to the application object server  at all.","Referring further to , a process  is further exemplified by depicted decision as to whether there are further cursors in a queue of the process . Here, if there are no further cursors to process from the queue (the answer is No), the process moves all the way to  last process  where, if each of the cursors is marked as unique row (join) or object (table inheritance), the statement is an eligible candidate for cache. If there are further cursors in the queue, (Yes), process  proceeds to process .","Referring further to , caching next involves process  which is removal of cursor from the head of a queue. As is well known in the art, queues may be first in first out, last in first out. The present embodiment assumes a cursor queue may be established in any known manner. Thus, while one may infer first in first out from process , other queue arrangements may be implemented.","Referring again to , process  is to examine the cursor removed from the head of the queue for being one of a unique record or a unique object of an inheritance table hierarchy. If there is an indication of one of unique record or inheritance table object then, the process moves back to process . If not, then, control flows to process . Process  is associated with clustering, i.e. cluster where predicates (of a where expression) and join conditions associated with the given cursor\/table inheritance object in the given query statement. Clustering process  leads to process  of evaluating if there is a unique index predicate or unique index for this cursor\/table inheritance object. In the case of table inheritance, the unique index predicate may be on any table part of the inheritance table hierarchy.","Following , further, process  then follows for determining whether the result of process  is true or not. If true, then this cursor may be marked as one of unique row or table inheritance object, process  of . If False, control returns to process  to determine if there are more cursors for the statement in the queue.","Now referring to , which is a continuation of the process  of , process flow control moves from marking a unique row\/table inheritance object  to process . Process  comprises finding all join links from the marked cursor\/table inheritance object (by inheritance table hierarchy) to other cursor\/table inheritance objects. Join conditions are flagged as where predicate for the cursor\/object on the other side of the join. Process  then turns over control to process .","Referring further to , there is an arrow returning to  process . If the cursor\/object on the other side of the join is not marked as one of unique row or object, these are added to the queue if they have not already been added to the queue and so require further processing according to  process . When control is passed to process , at that process, every cursor in the queue should have been evaluated for one of unique row or object marking, and the results of processing the statement may be eligible for storage in a data cache (caching).","Referring now to , there is shown a system architecture for an application object server  () which supports data caching. Incoming communications are received from clients and other servers per  which may comprise database related communications. There are shown the following elements of application object server  (, server ): a server session manager  which may provide overall session management, server API's for various functions and features identified , and a kernel instance  and, within kernel instance , there is cursors . The kernel instance may be coupled to a data access layer  or engine via a query framework  and a query generation model . Within the data access layer  may be a data cache  and a record ID generator .","As will be apparent to one skilled in the relevant art(s) after reading the description herein, the computer architectures shown in ,  and  may be configured as a desktop, a laptop, a server, a tablet computer, a PDA, a mobile computer, an intelligent communications device or the like. The X programming language is one of many programming languages that may be used known in the art of enterprise resource planning systems, for example, C# is one alternative. Any of these architectures may be under the personal control of a user client  and may be operated transparent to other database processes, for example, for data entry\/retrieval of inventory data, purchase order data, request for proposal data, marketing and sales data and related organizational hierarchy data as well as other data relevant to the caching of data to improve overall system efficiency according to join conditions and inheritance table hierarchies as described above.","In yet another embodiment, the invention is implemented using a combination of both hardware and software and communications media may be wireless, wired or other form of communication recognizing any need for security of data of the enterprise.","While various aspects of the present invention have been described above, it should be understood that they have been presented by way of example and not limitation. It will be apparent to persons skilled in the relevant art(s) that various changes in form and detail can be made therein without departing from the spirit and scope of the present invention. Thus, the present invention should not be limited by any of the above described exemplary aspects, but should be defined only in accordance with the following claims and their equivalents.","In addition, it should be understood that the figures in the attachments, which highlight the structure, methodology, functionality and advantages of the present invention, are presented for example purposes only. The present invention is sufficiently flexible and configurable, such that it may be implemented in ways other than that shown in the accompanying figures. For example, the systems, methods and computer program products for facilitating the querying of data of a database in an intranet environment may be also applicable to other networks such as internets.","Further, the purpose of the foregoing Abstract is to enable the U.S. Patent and Trademark Office and the public generally and especially the scientists, engineers and practitioners in the relevant art(s) who are not familiar with patent or legal terms or phraseology, to determine quickly from a cursory inspection the nature and essence of this technical disclosure. The Abstract is not intended to be limiting as to the scope of the present invention in any way."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference numbers indicate identical or functionally similar elements.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 2A","FIG. 2B"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3","FIG. 1","FIG. 1","FIG. 6"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 5A","FIG. 5B"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 6","FIG. 1","FIG. 1"]}]},"DETDESC":[{},{}]}
