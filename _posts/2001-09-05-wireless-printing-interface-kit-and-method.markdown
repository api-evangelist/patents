---
title: Wireless printing interface kit and method
abstract: A kit, system, and associated methods are provided to facilitate wireless printing. In one embodiment, the system comprises a platform having a processor circuit having a processor and a memory. The system also includes a wireless printing logic stored in the memory and executable by the processor. The wireless printing logic comprises an application capable of a print operation and a number of hidden objects that encapsulate a number of wireless printing tasks associated with a wireless printing operation for the application. The wireless printing logic also includes at least one application programming interface (API) object that provides an interface between the application and the hidden objects, and, at least one platform specific object that encapsulates a number of adaptive wireless printing tasks that are configured for operation on the platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07417754&OS=07417754&RS=07417754
owner: Hewlett-Packard Development Company, L.P.
number: 07417754
owner_city: Houston
owner_country: US
publication_date: 20010905
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention is generally related to the field of printing and, more particularly, is related to a wireless printing interface kit and method.","Existing print frameworks typically employ a printer driver architecture that converts a high-level page description language to a raster image that is suitable for printing by a destination printer. Such a printer driver architecture often requires intimate knowledge of a single page description language and a printer control language. Unfortunately, such a printer driver architecture also requires more resources then are available in many resource-limited platforms that suffer from a lack of printing capability. For example, in the Microsoft Windows environment, Graphic Device Interface (GDI) commands are often converted to a Printer Control Language such as PCL3 or other such language to send print output to printers. This causes resource intensive rendering to occur in the rendering platform. A resource-limited platform may not be able to perform such rendering tasks.","This printing approach also has other drawbacks. For example, to print according to a printer driver architecture, the user must use a printer driver that is specific to the platform and the printer. This can be problematic where a printer is available to print to, but the needed printer driver is unavailable. Another drawback is that the driver consumes a lot of computer processing power and memory resources.","In view of the foregoing, the present invention provides for a wireless printing interface kit embodied on a computer readable medium. In this respect, the wireless printing interface kit comprises a number of hidden objects that perform a number of wireless printing tasks associated with a wireless printing operation for an application. The kit further includes at least one application programming interface (API) object that provides an interface between the application and the hidden objects. The kit also includes at least one adaptive object template that specifies a number of adaptive wireless printing tasks that are configurable for a predefined platform upon which the application is executed.","In another embodiment, a method for configuring a wireless printing interface kit to facilitate wireless printing with an application is provided. In this regard, the method comprises the steps of providing a number of hidden objects in a computer system that perform a number of wireless printing tasks associated with a wireless printing operation for the application, altering the application to interact with at least one application programming interface (API) object that provides an interface between the application and the hidden objects, providing an adaptive object template that specifies a number of adaptive wireless printing tasks in a platform generic form, and, generating a platform specific object from the adaptive object template.","In still another embodiment, the present invention provides for a system to facilitate wireless printing. In this respect, the system comprises a platform having a processor circuit having a processor and a memory. The system also includes a wireless printing logic stored in the memory and executable by the processor. The wireless printing logic comprises an application capable of a print operation and a number of hidden objects that encapsulate a number of wireless printing tasks associated with a wireless printing operation for the application. The wireless printing logic also includes at least one application programming interface (API) object that provides an interface between the application and the hidden objects, and, at least one platform specific object that encapsulates a number of adaptive wireless printing tasks that are adapted for operation on the platform.","Other features and advantages of the present invention will become apparent to a person with ordinary skill in the art in view of the following drawings and detailed description. It is intended that all such additional features and advantages be included herein within the scope of the present invention.","With reference to , shown is a wireless printing configuration  according to an aspect of the present invention. The wireless printing configuration  includes a platform  and a printer . The platform  may comprise, for example, a computer system, a personal digital assistant, or other such device with like capability. In this regard, the platform  includes a processor  and a memory , both of which are coupled to a local interface . The local interface  may be, for example, a data bus with an accompanying control\/address bus as is generally known by those with ordinary skill in the art.","The platform  also includes a wireless interface  that is coupled to the local interface  and facilitates wireless communication with the printer . In this respect, the wireless interface  provides for the transmission and receipt of wireless signals to and from the printer . In this respect, the wireless interface  links the local interface  to the printer  so that the processor  can implement a print function with the printer , etc. Stored on the memory  and executable by the processor  are several components. These components include, for example, an operating system , an application  with a print function , and a wireless print interface .","Next a general discussion of an implementation of a print function using the wireless printing configuration  is provided to give context for the present invention. In this respect, the application  is executed on the platform  by a user in performing various functions. In this respect, the application  may be, for example, a word processor, spreadsheet, or other application  that includes a print function . Assuming that a user initiates a print operation by manipulating the print function  of the application , then the wireless print interface  is employed to effect communications with the printer  in order to ultimately accomplish the printing of a document that was created for printing by the application .","In this respect, the wireless print interface  implements a wireless printing protocol in communicating back and forth with the printer . Such a protocol is described, for example, by Berkema, Alan, et al., , Bluetooth Special Interest Group, Printing Working Group, Revision 0.9, May 25, 2001, such protocol and standard being incorporated herein by reference. For purposes of the following discussion, this protocol is referred to herein as \u201cthe Bluetooth Protocol.\u201d","In addition, where the platform  is a computer system, for example, various peripheral devices may be employed therewith. Such peripheral devices may include, for example, a keyboard, keypad, touch pad, touch screen, microphone, scanner, mouse, joystick, or one or more push buttons, etc. The peripheral devices may also include a display device, indicator lights, speakers, and a printer, etc. Specific display devices may be, for example, cathode ray tubes (CRTs), liquid crystal display screens, gas plasma-based flat panel displays, or other types of display devices, etc.","The memory  may include both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, floppy disks accessed via an associated floppy disk drive, compact discs accessed via a compact disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","In addition, the processor  may represent multiple processors and the memory  may represent multiple memories that operate in parallel. In such a case, the local interface  may be an appropriate network that facilitates communication between any two of the multiple processors, between any processor and any one of the memories, or between any two of the memories etc. The processor  may be electrical or optical in nature.","The operating system  is executed to control the allocation and usage of hardware resources in the platform . Specifically, the operating system  controls the allocation and usage of the memory , processing time, and the peripheral devices as well as performing other functionality. In this manner, the operating system  serves as the foundation on which applications depend as is generally known by those with ordinary skill in the art.","With reference to , shown is a functional block diagram of the wireless print interface  according to an aspect of the present invention. As shown in , each block represents a module, object, or other grouping or encapsulation of underlying functionality as implemented in programming code. However, the same underlying functionality may exist in one or more modules, objects, or other groupings or encapsulations that differ from those shown in  without departing from the present invention as defined by the appended claims. The wireless print interface  may be written in C++ or equivalent object oriented language as can be appreciated by those with ordinary skill in the art.","The wireless print interface  provides distinct advantages, including but not limited to, a reduction in the usage of processing resources in the platform  () as compared to traditional print processing where the need to acquire and install a printer driver is eliminated. This is accomplished with a simple object oriented framework that is easily adapted to a predefined platform  and that facilitates easy application development for wireless printing capability.","The wireless print interface  may be embodied in the form of a kit that is adapted for operation with different applications  and on a multitude of platforms  as will be discussed.","The wireless print interface  includes a number of Basic Printing Profile (BPP) objects  that encapsulate methods that are executed in order to implement a wireless printing operation as set forth in the Bluetooth Protocol that was previously incorporated herein by reference. The wireless print interface  also includes a number of Application Programming Interface (API) objects . The API objects  act as an interface between the application  and the BPP objects . To explain further, the BPP objects  implement many different functions during a wireless printing operation. In order to accomplish a wireless print operation, the application  should communicate with the BPP objects .","However, such communication may be difficult for the average programmer to implement as the BPP objects  perform various tasks specified, for example, in the Bluetooth Protocol that are not familiar to such programmers. The API objects  advantageously provide a relatively simple, intuitive interface between the application  and the BPP objects . The programmer need only alter the application  so as to make proper calls to the various API objects . Consequently, a programmer need not spend the time to acquire an in depth understanding of the operation of the BPP objects  in order to adapt the application  to interface directly therewith.","When embodied as a kit, the wireless print interface  includes the API objects  that provide the interface through which the application  communicates with the BPP objects . The BPP objects  are also included therewith. The API objects  are configured to act as an intuitive interface that makes adapting the application  to interface therewith a relatively easy task. Specifically, the kit lists the methods within API objects  that are to be called by the application  to perform various tasks. To make the adaptation of the application  easier, these methods are encapsulated in specific ones of the API objects  where the methods would expect to be found.","The API objects  provide a level of abstraction of real world printing items or operations that are performed. For example, the API objects include a printer directory , a printer , a print job , a document , a device identifier , a printer attribute response object , and a job attribute response . Such abstraction facilitates the easy adaptation of the application  to interface with the API objects . Specifically, given that the various methods encapsulated within the API objects  provide a level of abstraction from real world concepts and objects, then the various methods that are encapsulated therein are easier to find and manipulate.","The wireless print interface  also includes a number of adaptive objects . When in the form of the wireless printing interface kit, the adaptive objects  are embodied as adaptive object templates that specify a number of adaptive wireless printing tasks. These adaptive wireless printing tasks are configurable for the predefined platform  () upon which the wireless print interface  is to be implemented. Thus, the adaptive object templates list the adaptive wireless printing tasks in a platform generic form that is non-platform specific. This facilitates easy adaptation of the adaptive object templates into adaptive objects  for a predefined platform .","The adaptive objects  that may be created from the corresponding adaptive object templates include an operating system object that interfaces with the operating system  of the platform  (). The adaptive objects  may also include a link management object , a service discovery protocol object , and an object exchange protocol object . These adaptive objects  interface with a lower wireless communications stack  to accomplish a wireless communications link with the printer . The functionality of the lower wireless communication stack  implements various tasks described, for example, in the Bluetooth Protocol that was incorporated herein by reference above. As such, the operation of the lower wireless communication stack  is not herein in detail.","When embodied as a kit, the wireless print interface  provides the adaptive object templates that specify a number of adaptive wireless printing tasks in a platform generic form. In adapting the wireless printing interface kit with a specific application  and on a predetermined platform  (), the user generates the adaptive objects  from the corresponding adaptive object templates. For example, the operating system object is adapted from a corresponding adaptive object template so that the BPP objects  can communicate effectively with the operating system  of the platform . This provides for the allocation of memory and other tasks accomplished by the operating system  to facilitate the operation of the wireless print interface .","The link management object , the service discovery protocol object , and the object exchange protocol object include methods that perform various wireless printing tasks associated with a predefined wireless printing configuration implemented on the platform . Specifically, the lower wireless communication stack  may be different depending on the particular platform . The adaptive objects  thus perform various tasks relative to the specific wireless printing protocol configuration implemented on the platform .","The BPP objects  are characterized herein as hidden objects because either they do not communicate directly with the application  or the methods encapsulated within the BPP objects  are not changed in order to adapt the wireless print interface kit for a particular platform . The BPP objects  included in a kit embodying the wireless printing interface  makes it easy for programmers to provide for the wireless printing of documents based upon the manipulation of the application . Specifically, all the programmer need do is alter the application  to interface with the API objects  and adapt the adaptive object templates to generate corresponding adaptive objects  therefrom. The programmer advantageously need not access and alter any of the BPP objects  due to their hidden nature. Thus, the present invention reduces the investment of time and effort necessary to provide for wireless printing for a predetermined application  on a predefined platform  by providing a kit that is relatively easy to adapt. In the following figures, specific objects of the wireless printing interface  are discussed. By way of example, these objects may include various parameters, although other parameters may be employed.","With reference to , shown is a diagram of the printer directory object . The printer directory object encapsulates method called by the application  () to obtain a list of printers  () with which a wireless printing operation may be performed. In the context of the Bluetooth Protocol, for example, the list of printers is created using the Bluetooth inquiry process that is used to discover Bluetooth devices that are in range and configured to be discoverable as can be appreciated by those with ordinary skill in the art. Upon completion of the Bluetooth inquiry process, various devices may be identified within range that may not be printers . The devices identified are filtered to identify only printing devices  that are then maintained in the printer directory object ","The principle methods in the printer directory object include an initiation method that initializes the printer directory object . The initiation method causes a Bluetooth inquiry procedure to be conducted by manipulating various ones of the BPP objects  (). When the parameter \u201cGetNames\u201d is set to equal true, each corresponding device will be asked for its \u201cfriendly name\u201d as can be appreciated by those with ordinary skill in the art. The \u201cGetFirstDevice\u201d method returns a pointer associated with the printer directory encapsulated in the printer directory object to the first device listed therein. Similiarly, the \u201cGetNextDevice\u201d method cycles the pointer to information about a next device in the same printer directory. The \u201cGetNumDevices\u201d method is used to determine the number of devices listed in the printer directory. Finally, the \u201cFindDevice\u201d is a method that returns the pointer to information about a device that has a specified Bluetooth device address.","With reference to , shown is a Bluetooth device identifier (ID) object according to an aspect of the present invention. The Bluetooth device identifier object is used by the application  to get information about a particular Bluetooth device, for example such as the printer  (). In this regard, the Bluetooth device ID object includes a \u201cGetAddress\u201d method that is used to access a six byte Bluetooth device address of a respective device. The \u201cGetName\u201d method is executed to access a friendly name of a respective device in communication with the platform  (). Note that the various methods in the Bluetooth device ID object are thus called by the printer directory object in establishing those printers  that are within range of the platform  at any given time.","With reference then to , shown is a diagram of the printer object according to an aspect of the present invention. The printer object is employed by the application  to connect to and interact with the printer  (). The methods in the printer object include the \u201cConnect\u201d method that is used by the application  to connect to the printer . To connect to the printer , the Bluetooth device address of the printer  is thus provided by the application . The Bluetooth device address may be obtained from the printer directory object . Upon successful completion, a communication channel is opened to the basic printing profile service of the printer  as can be appreciated by those skilled in the art upon examining the Bluetooth protocol.","The \u201cDisconnect\u201d method in the printer object is called by the application  () to close the connection to the printer . The \u201cPrint\u201d method is called by the application  to print a document on the printer  with which the printer object maintains a current open connection. The document object () contains the document or a reference to the document that is to be printed. The printer object  also includes a second \u201cPrint\u201d method that is called by the application  to print a document as part of a configured print job on the printer  with which the printer object currently maintains a connection. The document to be printed along with the job configuration settings that are associated therewith are centered within the print job object . This method uses the basic printing profile \u201cJobBasedPrinting\u201d procedure specified in the Bluetooth protocol. Finally, the \u201cCancel\u201d method is called by the application  to cancel an active print job.","With reference to , shown is a block diagram of the print job object according to another aspect of the present invention. The print job object is called by the application  () to represent a print job. The print job object configures the print job. Also, the application  may call various methods within the print job object to find out the status of a print job such as, for example, waiting to print, printing, or completed printing, etc. The print job object includes a \u201cset document\u201d method that is called by application  to add a document to the print job object itself. Ultimately, this is the document that will be printed when the print job is submitted to the printer  () via the printer object (). The print job object also includes a \u201cGetAttributes\u201d method that is called by the application  to acquire the print job attributes of a print job that has been submitted to the printer . This method employs a \u201cGetJobAttributes\u201d command that is defined by the basic printing profile of the Bluetooth protocol.","The specific job attributes are defined by the Bluetooth protocol as can be appreciated by those with ordinary skill in the art. These job attributes are ultimately accessed by the application  through the job attribute response object (). The remaining methods in the print job object are called by the application  to configure the print job by setting or assigning values to the various job attributes defined in the Bluetooth protocol. These attributes are initialized to default values when the print job object is first created.","With reference to , shown is a block diagram of the job attribute response object . The job attribute response object is called by the application  () to obtain information about a particular print job that has been submitted to the printer  (). In this respect, the job attribute response object ultimately causes the implementation of appropriate communications with the printer  pertaining to the status of the current print job. The methods associated with the job attribute response object are called by the application  to access the job attributes that were returned in the response to the \u201cGetJobAttributes\u201d request in the print job object . Each of the attributes is described in the Bluetooth protocol. Ultimately, the job attributes information is received from the printer  and stored in the job attribute response object using the \u201cGetAttributes\u201d method of the print job object ().","Referring next to , shown is a block diagram of the printer attribute response object . The printer attribute response object is called by the application  () to obtain information about the printer  () and its capabilities. As shown, the methods associated with the printer attribute response object are called to access the printer attributes that are obtained in response to the \u201cGetPrinterAttributes\u201d request that is called from the printer object (). Each of the attributes obtained from the printer  is described in the Bluetooth protocol.","Referring next to , shown is a block diagram of the document object according to an aspect of the present invention. The document object is used by the application  () to provide access to the contents of a respective document to the wireless print interface  (). In doing so, the actual document is selected and linked to the document object . For example, the document object may accomplish this task by generating a dialogue box that is displayed for a user that allows the user to select a document file for printing.","The document object also includes a \u201cGetLength\u201d method that is called to determine the length, in bytes, of the document to be printed. A \u201cRead\u201d method is provided in the document object that is called to read a specified number of bytes from the document into a buffer starting at a currently maintained position in the document. The \u201cinitialize\u201d method first identifies this maintained position at the beginning of the document. The \u201cGetName\u201d method is called by the application to obtain a name of the document itself. The document name may be, for example, the name of the file that contains the document content on file based systems, etc. The document object also includes a \u201cGetMimeType\u201d method that is employed to obtain the mime type of the contents of the particular document in question. Examples of mime types include \u201cApplication\/VNE.PWG-XHTMLPrint+XML:1.0\u201d for \u201cXHTML-Print\u201d contents, \u201cText\/Plain\u201d for plain text documents, and \u201cImage\/Joint Photographic Experts Group (JPEG)\u201d for JPEG documents as is generally known by those with ordinary skill in the art.","With reference to  shown is the link management adaptation object according to an aspect of the present invention. The link management adaptation object is employed to access the link management services of the Bluetooth stack as specified in the Bluetooth protocol. The link management adaptation object includes an \u201cInquire\u201d method that is called to initiate the Bluetooth inquiry process. The Bluetooth inquiry is employed to discover which Bluetooth devices are in range of the inquiring device and are configured to respond to such discovery. For each device that responds, the initiator supplied call back method is called and passed a pointer to information about the device.","The link management adaptation object also includes a \u201cGetName\u201d method that is provided to get a friendly name of the device specified by the six byte Bluetooth device address. When embodied in a kit, the methods of the link management adaptation object are expressed in a platform generic form that indicates to a user what methods are to be adapted for a specific platform  (), etc. In adapting the kit to operate on a specific platform , the methods are converted from the platform generic form into a language that is native to the platform  or that is implemented on the platform .","With reference to , shown is a block diagram of the service discovery protocol (SDP) adaptation object according to an aspect of the present invention. The SDP adaptation object includes a \u201cQueryRemoteDevice\u201d method that is called to query the remote device such as the printer  () to obtain desired records or information therefrom. Such information may include, for example, details about the printer  itself as well as its capabilities as defined in the Bluetooth protocol.","Turning then to , shown is a block diagram of the object exchange (OBEX) adaptation object according to an aspect of the present invention. The OBEX adaptation object includes a \u201cConnect\u201d method that is employed to create a connection to the basic printing profile service on the printer  () as specified, for example, by the Bluetooth protocol. In creating such a connection, a job channel and a status channel may also be connected. However, the status channel is only connected when there is an existing job channel connection. The OBEX adaptation object also includes a \u201cDisconnect\u201d method that is employed to close the job or status channel connection between the platform  () and the printer . The OBEX adaptation object also includes a \u201cPut\u201d method that is employed to execute an OBEX Put command via a specified channel as specified, for example, in the Bluetooth protocol. The channel must have been previously opened using the \u201cConnect\u201d method. A \u201cGet\u201d method is used to execute an OBEX get command via a specified channel. Similar to the \u201cPut\u201d method, the channel must have been previously opened using the \u201cConnect\u201d method. In addition, the OBEX adaptation object includes an \u201cAbort\u201d method that is used to execute an OBEX abort command via the specified channel, where the channel has been previously opened using the \u201cConnect\u201d method. The OBEX abort command is used to cancel a previously issued OBEX get or put request without waiting for the response from the printer .","With reference to , shown is the operating system (OS) adaptation object according to an aspect of the present invention. The OS adaptation object includes the \u201cAssert\u201d and \u201cTrace\u201d methods that are employed for software quality monitoring. Specifically, these methods are employed to trace the flow of execution and to raise an alert if some expected condition is not met as can be appreciated by those with ordinary skill in the art. The OS adaptation object also includes a \u201cAllocMem\u201d method and a \u201cFreeMem\u201d method that are used to dynamically allocate in free blocks of the memory  () as can be appreciated by those with ordinary skill in the art.","The OS adaptation object also includes a \u201cMemCopy\u201d method, a \u201cMemSet\u201d method, a \u201cMemCMP\u201d method, and a \u201cMemCMPEX\u201d method that operate on various blocks of the memory  as appropriate. Specifically, these methods are employed to copy values from one block to another, to set values within the memory , and to compare the contents of two memory blocks as can be appreciated by those with ordinary skill in the art. The \u201cU32toA\u201d method and AtoU32 method are both used to convert a 32 byte number to and from an American Standard Code II (ASCII) string as can be appreciated by those with ordinary skill in the art. The remaining methods in the OS adaptation object are employed to convert a Unicode string to and from an ASCII string. Also, these methods are employed to determine the length of a string and define the position of a substring within a string as can be appreciated by those with ordinary skill in the art.","Although the wireless print interface  () and the corresponding wireless print interface kit of the present invention is embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, the wireless print interface  () and the corresponding wireless print interface kit can be expressed or implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, programmable gate arrays (PGA), field programmable gate arrays (FPGA), or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The block diagram of  and the objects of  show the architecture, functionality, and operation of an implementation of the wireless print interface  () and the corresponding wireless print interface kit. If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the block diagram of  and the objects of  may show a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more methods may be scrambled relative to the order shown. Also, two or more methods shown as executed in succession in  may be executed concurrently or with partial concurrence. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present invention. Also, the block diagram of  and the objects of  are relatively self-explanatory and are understood by those with ordinary skill in the art to the extent that software and\/or hardware can be created by one with ordinary skill in the art to carry out the various logical functions as described herein.","Also, where the wireless print interface  () and the corresponding wireless print interface kit comprises software or code, both can be embodied in any computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor in a computer system or other system. In this sense, the wireless print interface  and the corresponding wireless print interface kit may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present invention, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the wireless print interface  () and the corresponding wireless print interface kit for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as, for example, electronic, magnetic, optical, electromagnetic, infrared, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, or compact discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","Although the invention is shown and described with respect to certain preferred embodiments, it is obvious that equivalents and modifications will occur to others skilled in the art upon the reading and understanding of the specification. The present invention includes all such equivalents and modifications, and is limited only by the scope of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The invention can be understood with reference to the following drawings. The components in the drawings are not necessarily to scale. Also, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIGS. 3A-3G","FIG. 2"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIGS. 4A-4D","FIG. 2"]}]},"DETDESC":[{},{}]}
