---
title: Structural search of source code
abstract: Techniques and tools are described for searching source code. For example, source code can be indexed, a code structure query can be received, index records that conform to the code structure query can be identified, and code structure query results that correspond to the identified index records conforming to the code structure query can be sent. Also for example, a code structure query can be sent, a list of code structure query results corresponding to index records that conform to the code structure query can be received, at least one of the code structure query results can be selected, based on the selection, a formatted source-code file and a code hierarchy can be received, a code annotation associated with the formatted source-code file can be sent, and an annotation result corresponding to the formatted source-code file can be received.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009664&OS=09009664&RS=09009664
owner: Infosys Limited
number: 09009664
owner_city: Bangalore
owner_country: IN
publication_date: 20110519
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","EXAMPLE 1","Exemplary Overview","EXAMPLE 2","Exemplary System Employing a Combination of the Technologies","EXAMPLE 3","Exemplary Method of Employing a Combination of the Technologies","EXAMPLE 4","Exemplary System Employing a Combination of the Technologies","EXAMPLE 5","Exemplary Method of Employing a Combination of the Technologies","EXAMPLE 6","Exemplary System for Searching for Source Code Online","EXAMPLE 7","Exemplary Method of Employing a Combination of the Technologies","EXAMPLE 8","Exemplary Client User Interface","EXAMPLE 9","Exemplary Client User Interface with Code Structure Query Results","EXAMPLE 10","Exemplary Code Annotation Result","EXAMPLE 11","Exemplary Index Document","EXAMPLE 12","Exemplary Annotation Record","EXAMPLE 13","Exemplary Code Annotation","EXAMPLE 14","Exemplary Method for Using an Index of Source Code to Search for Source Code","EXAMPLE 15","Exemplary Architecture for Employing a Combination of the Technologies","EXAMPLE 16","Exemplary Indexing of Source Code","EXAMPLE 17","Exemplary Structure Field","EXAMPLE 18","Exemplary Structure Value","EXAMPLE 19","Exemplary Code Element","EXAMPLE 20","Exemplary Code Structure Query","EXAMPLE 21","Exemplary Code Structure Query Result","EXAMPLE 22","Exemplary Index Records that Conform to a Code Structure Query","EXAMPLE 23","Exemplary Code Attributes","EXAMPLE 24","Exemplary Source Code","EXAMPLE 25","Exemplary Formatted Source Code","EXAMPLE 26","Exemplary Determining Code Hierarchy","EXAMPLE 27","Exemplary Computing Device","EXAMPLE 28","Exemplary Alternatives and Variations"],"p":["This application claims priority from Application No. 1061\/CHE\/2011, filed in India on Mar. 31, 2011, which is hereby incorporated by reference herein.","Large software systems can be difficult to maintain. Source code repositories can have millions of lines of code written in various programming languages over many years by multiple source code developers. Today, there exists search tools and technologies that enable maintainers to search software. During software maintenance, a significant amount of time is spent on searching code and understanding it. Thus, searching large repositories of software source code can be difficult and time consuming.","In Summary, the Detailed Description presents a variety of tools and techniques related to searching source code.","According to one implementation of the technologies described herein, source code can be indexed to create index records, for code elements, comprising structure fields and values. In the indexing, source code can be parsed according to syntax of a programming language. A code structure query comprising a field-value expression including field and value terms can be received. Index records conforming to the code structure query can be identified. Code structure query results corresponding to the identified conforming index records can be sent.","In another implementation, a code structure query comprising a field-value expression can be sent. A list of code structure query results corresponding to index records that conform to the code structure query can be received. At least one of the code structure query results can be selected. Based on the selection, formatted source-code can be received. A code annotation comprising comments associated with the formatted source-code file can be sent. An annotation result corresponding to the formatted source-code file can be received.","This Summary is not intended to be used to limit the scope of the claimed subject matter. The foregoing and other objects, features, and advantages of the technologies will become more apparent from the following Detailed Description, which proceeds with reference to the accompanying figures.","There are a variety of circumstances under which it may be desirable to search for source code. For example, a user may want to reuse source code written for a previous project to quickly advance a new project's development, or for finding other versions of software that might have a similar bug during debugging. Because source code can be segmented by the structures of the code, a user may desire to search for structures or code elements such as classes or methods with specified attributes. The source code search techniques described herein can be used to search source code based on the structure of the source code.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","110","130","120","130"]},"A code structure query  can be sent to the code structure query service . For example, a user searching for source code can create a query with query terms and operators. For example, the code structure query  can have query terms and operators such as the query \u201cclass:foo AND method:bar.\u201d The user can input this exemplary code structure query into a search user interface to search for source code such as a class named foo that has a method bar.","Using code structure query , the code structure query service  can search the index  and determine code structure query results . For example, the code structure query service  can generate a list of query results that correspond to code elements that conform to the limitations of the user's query such as classes named foo with methods named bar.","In response to the code structure query , code structure query results  can be provided which can include links to source code.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["200","210"]},"At block , a code structure query can be received. For example, a user can send a query to search for source code that is indexed based on the code structure.","At block , index records that conform to the code structure query can be identified. For example, query terms including field-value expressions from the code structure query can be compared to structure fields and values of index documents to find index records that conform to the limitations of the code structure query.","At block , a list of code structure query results can be output or sent. For example, a list of code structure query results can be sent by a server and received by a client device for display in a user interface as options for selection by a user.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["300","300","310","330","320","325","330","320","335","310","335","335"]},"A code structure query  can be sent to and received by the code structure query service . For example, a user searching for source code can create a query with query terms and operators.","Using code structure query , the code structure query service  can search the one or more indexes  and determine code structure query results . For example, the code structure query service  can generate a list of query results that correspond to code elements that have attributes such that their indexed information conforms to a code structure query sent by a user searching for source code.","In response to the code structure query , code structure query results  can be sent and received. For example, the code structure query results can be sent to and received by a client device for display in a user interface as options for selection to retrieve corresponding formatted source code . A code structure query results selection  can be sent to and received by the code structure query service  to retrieve selected source code . For example, a selection of one of the query results can be sent and the formatted source code corresponding to the selected query result can be sent for display in a user interface.","Also, code hierarchy information  can be sent and received for display in a user interface based on the selected source code query result or the formatted source code that is displayed in a user interface. For example, when a formatted source code file is selected and displayed in a user interface, the code structure query service  can determine hierarchy information from the index for the code element associated with the selected formatted source code  and the code hierarchy information can be sent to and received by a client device for display in a user interface.","A code annotation  can be sent to and received by code structure query service . For example, selected formatted source code  can be displayed to a user and the user can generate comments about the source code displayed and send the comments in the code annotation  that is associated with the selected formatted source code . The code annotation can be stored in the one or more indexes  as an annotation record. A code annotation result  can be sent and received for display in a user interface. For example, a user searching for comments about source code can send a code structure query that searches for conforming annotation records and one or more code annotation results can be returned to the user for display in a user interface. The annotation result can include the comments of the annotation record and one or more links to formatted source code or one or more formatted source code files.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4","b":["400","410"]},"At block , a code structure query can be sent. For example, a user can send a code structure query to a server that searches for source code indexed based on the source code structure.","At block , a list of code structure query results can be received. For example, code structure query results for indexed code elements that are identified as conforming to the code structure query can be sent from a server and received at a client for display in a user interface.","At block , one or more code structure query results can be selected. For example, a user can select a code structure query result by clicking on a hyperlink included in the result and that selection can be sent to receive source code.","At block , based on the selected code structure query result a code hierarchy can be received. For example, when a code structure query result is selected code hierarchy information for the corresponding code element can be determined and sent for display in a user interface.","At , based on the selected code structure query result, formatted source code can be received. For example, a web page containing source code with links to other source code can be received in a web browser user interface.","At , a code annotation can be sent. For example, a user can create a code annotation containing comments about a specified source code and the comments can be sent to a server.","At , a code annotation result is returned. For example, a user searching for comments can send a code structure query to search indexed annotation records and code annotation results can be sent that correspond to annotation records that conform to the code structure query.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["500","500","510","510","515","520","525","510","510","530","535","537","540","545","530","535","537","540","545"]},"The server environment  is connected to a network . For example, the network  can be a global communication network, such as the Internet. The network  can represent various network resources that are needed for end-to-end communication between the server environment  and one or more client devices (e.g., client device ). For example, the network  can represent the Internet in combination with other types of networks, such as mobile phone networks (e.g., cell phone networks), Wi-Fi networks, and the like.","The server environment  can be used to search for source code in combination with client devices such as client device . Client device  can include a processor , memory , a web browser  (e.g., Internet Explorer\u00ae). The web browser  can receive and display code annotation results , formatted source code , code hierarchy information , and code structure query results . The web browser  can also include a code structure query generation module  for generating a code structure query, and a code annotation generation module  for creating a code annotation. The browser  can also send code structure queries, code annotations, and selections of code structure query results.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":["600","610"]},"At block , code structure query results can be received. For example, a list of code structure query results can be received for display in a user interface.","At block , one or more code structure query results can be selected. For example, a user can select a code structure query result and that selection can be sent to receive source code.","At , based on the selected code structure query result, formatted source code can be received.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 7","b":["700","700","710","720","730","700","780","700"]},"The formatted source code window  can include displayed source code from a formatted source code file such as the source code for the class PetStoreAdminClient . The source code for the class PetStoreAdminClient  includes comments  designated by comment markers. The comments  can include an author name  of a person that wrote the comments . In the displayed source code for the class PetStoreAdminClient , text that references other code elements or source code can have linking functionality to the referenced source code for retrieval. For example the text \u201cordersToggleButton\u201d  can be a link (e.g., hyperlink) to retrieve the source code for the code element \u201cordersToggleButton.\u201d A user can select or click on the link and the formatted source code can be retrieved from a server and displayed in the formatted source code window . The formatted source code window can have scrolling functionality and can be accessed using a window tab .","The code structure generation module  can include code structure query generation field , and a search button . The code structure query generation field  can be used to create a code structure query. A user can type query terms, operators and limiters into the code structure query generation field , such as the exemplary displayed query \u201ctype:class AND implements:Runnable.\u201d The code structure query generation field  can be used to build a code structure query of arbitrary length or a specific length. The search button  can be used by a user to send a code structure query generated in the code structure query generation field .","The code hierarchy window  can include code hierarchy information such as the type hierarchy information displayed under the type hierarchy information tab  and call hierarchy information (not shown). The type hierarchy information can include a listing of code elements that are parents or children of the code element or other code hierarchy information. The hierarchy information  for the class PetStoreAdminClient  includes a listing of the class and under the class \u201cjavax.wing.JFrame\u201d is listed which is extended by the class as indicated in the code of the class. Also listed under the class is \u201cjava.beans.PropertyChangeListner\u201d which the class implements as indicated in the code of the class.","The client user interface can also include windows for code structure query results such as code structure query results window  of . For example, a user can select the code structure query result tab , and the window  with one or more code structure query results can be displayed.","The client user interface can also have an address field for directing the client user interface to an online resource. For example, the client user interface can be implemented in web browser and the address field  can be used for an internet address that allows access to an online source-code search environment.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 8A","b":["800","810","815","810","820","830"]},"A code structure query result such as code structure query result  can have functionality (e.g., hyperlink) to retrieve the source code of the code element. The code structure query result  can include a name of the code element for the result such as code element name . In one implementation, the code element name  can be functional to retrieve the source code. The code structure query result can also include code text  from the code element with the code element name .","In any of the examples herein, client user interfaces can receive and display a code annotation result.  is an illustration of an exemplary code annotation result . The code annotation result  can include comments about a code element such as comments .","The code annotation result  can include the code element  that corresponds to, is referenced by, is associated with, or is linked to the comments . The code element  can be the entire code element, a preview of the code element, or a representation of the code element such as a code structure query result for the code element.","In any of the examples herein, an index document can be an index of information for a code element.  is a diagram of an exemplary index document  used in a system  for searching source code. Index document  can be an index for a code element such as a class FOO. Index document  can include fields with associated field values such as structure fields and associated values A-I. An index document can include structure fields and structure values that contain information about attributes of the indexed code element such as names of code elements, a code structure query result, the text of the code element, an identifier of the code element, dependencies of the code element, hierarchy information for the code element, and information based on other attributes of the code element. The index document can include fields and associated values that include information entered by an indexer or a user.","In the system , source code  can be indexed by indexer  and stored in index . Indexer  can create index documents  based on code elements such as index document .","The indexer  can input information into the fields and associated values of index document  by parsing source code based on a programming language. The index document  can include a structure field and associated value such as structure fields and values B-H. Structure field and value B can include information about the code element type. Structure field and value C can include information about the title of the code element. Structure field and value D can include information that the code element extends another code element. Structure field and value E can include call hierarchy information. Structure field and value F can include type hierarchy information about the class. Structure field and value G can include the text of the source code for the code element. Structure field and value H can include information for a code structure query result. Also index document  can include a structure field and associated value such as a code field and value G that includes the code of the code element. A structure field of the index document  can have a field identifier such as \u201cTYPE\u201d of structure field and value B. In some implementations the field identifier is based on a code attribute. The field identifier can be matched or identified as correspond with field terms of a code structure query during a search. Also, a structure value of the index document  can be information about the code attribute that the associated structure field is based on, such as the structure value \u201cCLASS\u201d of structure field and value B. The structure field and value B indicates that the code element has an attribute such as a type and that the code element type is a class. Structure values can be matched or identified as correspond with value terms of a code structure query during a search. Structure values can be extracted text from code elements or variations of the extracted text processed by an analyzer. For example, an analyzer can remove unnecessary words or characters or add words or characters to extracted code text.","In the exemplary system  a code structure query service  can use the index  of index documents  to search the indexed source code. A code structure query  can be sent to the code structure query service  and the query service can use the index to return a code structure query response .","In any of the examples herein, an annotation record can be an index of source code comments for a code element.  is a diagram of an exemplary annotation record  used in a system  for searching source code with associated annotation records. Annotation record  can be an index for a source code comment for a code element such as a class FOO. Annotation record  can include fields with associated field values such as annotation fields and associated values A-F. An annotation record can include annotation fields and values that contain information about a code annotation of its associated indexed code element such as a type (e.g., annotation or note), title of the annotation, an associated code structure query result, an associated code element, an associated formatted source code file, comments about the associated code element, and a name for the author of the comments. In one implementation, at least some of the information included in the annotation record such as the comments can be provided by a user through a client user interface. In another implementation at least some of the information included in the annotation record can be generated automatically.","In the system , indexed source code and annotation records can be stored in one or more indexes . The code structure query service can create annotation records  based on code annotations such as code annotation . The information provided in the code annotation  can be formatted and input as annotation fields and associated field values, such as annotation fields and field values A-F with annotation information about class FOO.","In the exemplary system  a code structure query service  can use the one or more indexes  that include annotation records  to search for annotation records  and associated source code. A code structure query  can be sent to the code structure query service  and the query service can use the query terms and operators to find corresponding annotation records to return annotation results . For example, a code structure query can include a field-value expression such as \u201cTYPE:NOTE,\u201d in the code structure query \u201cTYPE:NOTE AND COMMENTS: CLASS FOO.\u201d Annotation records that have comments that include the text \u201cclass foo\u201d can match or conform to this code structure query. Annotation results for the identified matching or conforming annotation records can be sent to a client device for display in a user interface.","In any of the examples herein, a code annotation can include comments for a code element that are not found in the source code for the code element. The code annotation can be generated by a user. For example, source code can be displayed to a user and the user can generate comments about the source code and send the comments in the code annotation. The code annotation can be linked, correspond to, or reference the source code or index of the source code commented on so that it can be searched and retrieved with the source code of the code element. The code annotation information can be stored in the one or more indexes in an annotation record. In one implementation, the user can create a code annotation using a web browser user interface by typing text containing comments about a specified source code and the comments can be sent to a server. The server can create an annotation record and corresponding code annotation result based on the code annotation.","The comments of a code annotation can include words, phrases, sentences, text, or other writing. The comments can convey information about the source code to other viewers of the comments and source code. The code annotation can also include a name of the person that wrote or provided the comments about the code element (e.g., author). The author information can be useful to further the analysis of the source code. The comments can include comment markers or not. A code annotation can also include information about a code element such as a title of the annotation, an associated code structure query result, an associated code element, or an associated formatted source code file.","In one implementation, at least some of the information included in the code annotation such as the comments can be provided by a user through a client user interface. In another implementation at least some of the information included in the code annotation can be generated automatically.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 11","b":["1100","1110"]},"At block , source code can be indexed. For example, source code can be parsed according to a programming language and code elements with attributes can provide information for structure fields and structure values of index documents.","At block , the index of source code can be stored. For example, the indexed source code can be stored in an index.","At block , indexed source code can be used to search for source code based on the structure of the source code. For example, structure fields of index documents of the indexed source code can be searched or queried to determine code structure query results that can retrieve source code when selected.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 12","b":"1200"},"In the architecture , source code  can be indexed by indexer . The indexer  can parse source code according to a programming language. In one embodiment of the indexer, the indexer  can use the Eclipse JDT parser to parse source code or some other parser can be used. Indexed code elements with attributes and dependencies can be stored in one or more indexes A-C accessible to search server . The indexer  can also produce formatted source code . Formatted source code  can be intelligently formatted HTML files which are used in a web component for cross navigation between formatted source code online. Formatted source code  can be accessed by web browsers such as web browser . Also, web browser  can include a code structure query user interface .","The search server  can search the index of code elements of source code. In one embodiment, the search server  can be implemented through Apache Solr server or some other server. In one example embodiment, the search server  can both store and retrieve the information through a common application programming interface (API) or by some other technique. In one implementation, the search server can interact with a web server  with web platform  to provide the functionality of a code structure query service for searching source code online.","In any of the examples herein, an indexer can index source code according to the source code's structure at least by parsing source code based on the syntax of the source code written in a programming language. The indexer can parse source code into discrete segments of source code. That is to say, the indexer can divide up the source code (e.g., text of the source code) into discrete segments of source code. The segments can be functional units (e.g. a class), or portions of the text of the source code (e.g., a name of a class). In one implementation, a parser can extract information (e.g., words, phrases, text segments, code segments, values) from the text of code elements. The extracted information can be used to create index documents for the code elements. For example, for the source code segment \u201cpublic class BankingClient extends Bank,\u201d an indexer can divide up the code and extract information including the words \u201cpublic\u201d \u201cclass,\u201d and \u201cBankingClient.\u201d Because the source code segment is arranged according to a programming language, the indexer can determine that the code element is a \u201cclass\u201d and that it is a \u201cpublic\u201d class. Also, the indexer can determine that the class is named \u201cBankingClient\u201d and that the class extends the code element Bank.","In one implementation, the indexer can identify code elements that code developers can search for. For example, segments of source code can be code elements, such as classes, methods, functions and the like. The indexer can determine code elements based on source code files or from parsing the source code according to a programming language. For example, the indexer can identify that a class contained in a source code file is a code element because source code files can be organized so that a file (e.g., each file) contains one respective code element. That is to say, the indexer can use the content of individual source code files as discrete code elements rather than extracting textual code segments or statements. Additionally, the indexer can parse source code to extract information for index records, information for structure values, information for structure fields, values, source code text, attributes, code hierarchy information, dependencies between code elements, and other like information that can be stored or indexed. In a further example, once a class is indexed, a code developer wanting to reuse the class can search for the class as a code element of the source code or software.","While indexing, the segments of source code (e.g., code elements) can be determined by parsing the source code according to a programming language's syntax. By parsing the source code, the indexer can use the structure (e.g., semantic structure) of the source code to determine code elements. For example, an indexer parsing source code according to the Java language can extract a class as a code element because the parser can determine the boundaries (e.g., beginning, end or body) of a class based on the syntax of the Java language. The indexing can be done before runtime or after runtime. Indexing code before runtime can speed up the process for large software repositories.","When indexing source code files, relevant attributes, information, or values for respective source-code files can be identified and extracted. The indexer can determine the attributes of a code element by parsing sub-portions (e.g., text) of the code of the code element. The attribute can be recognized and extracted by parsing according to the programming language of the code. For example, a class may implement an interface and the indexer can determine that attribute. This can be achieved because the indexer can determine from the text and syntax of the code that the class implements a specified interface. For example, the indexer can determine that the code uses the word \u201cimplements\u201d which can be a reserved word in the programming language used to write the code and the name of the specified interface can follow the reserved word. In one exemplary embodiment of the indexer, the indexer can use the Eclipse JDT parser to parse source code. In other embodiments of an indexer other parsers can be used. A parser can be specific to a particular programming language.","While indexing the source code, the indexer can produce formatted source code and index records. Index records can be index documents, or other forms of indexed information. Index records can include information for, code elements, code element attributes, structure fields, structure values, and code element hierarchies (e.g., dependencies). The indexer can extract the information for index records from code text segments or pieces of code including words, phrases, or a segment of the source code. If the information is for a structure value and is associated with a code element attribute, the information can be formatted or processed by an analyzer specified for the code element attribute. For example, if a class name is a continuous string of multiple words (e.g., BankingBusinessClient), the analyzer for the class name attribute can format the name to be multiple words (e.g., Banking Business Client). Code element attributes can have respective associated analyzers to format information indexed from code elements.","The indexer can parse the class to identify attributes of the class and input extracted information into index records based on those attributes. The indexer can input the extracted information into structure fields and value fields of the index records stored in the index. For example, an indexer can extract a class as a code element, and for the code element it can input structure fields and structure values into an index document for the class. Structure values for the class can be the name of the class, the methods of the class, and other attributes of the class. Also, the index record for the class can have a structure field designated for the code of the code element where the indexer inputs the source code for the class as the structure value that is associated with the designated structure field.","In addition to index records the indexer can produce formatted source code that can be used to display source code in a user interface. The formatted source code can include formatted source-code files. The formatted source code can be intelligently formatted HTML files that include the source code or code element. In one example, the formatted source code documents can be used in a web component for cross navigation between source code online. In another example, the source-code documents can be locally stored formatted files that contain source code.","In any of the examples herein, a structure field can be information in an index record that corresponds to a structural attribute of the code element. The source-code attribute can be based on the text, syntax, or functionality of a code element. The structure field can have a structure value associated with the structure field. For example, a method with the name \u201ccalculateInterest\u201d can have a structure field associated with an attribute of the method such as the method's name. For this method, the structure field can be \u201cmethodname,\u201d and the structure value that corresponds to the structure field can be the specified name \u201ccalculateInterest.\u201d In some implementations, structure values can be paired with structure fields. In other implementations, each structure field can have more than one structure value.","A structure field can be stored in an index document for a code element. For example, when a parser parses a code element for indexing, it can identify an attribute and input a structure field and corresponding structure value into the index document for the code element. Structure fields can be compared with query terms to determine code structure query results that can be returned in a search. For example, a search engine can search an index to find index documents with similar structure fields and structure values.","In searching for source code, structure fields can be used to determine code structure query results based on attributes of code elements such as classes and methods. Searching source code based on its structure can efficiently isolate source code desired by a user. For example, for the Java programming language, \u201cEXTENDS\u201d can be a structure field that corresponds to code elements with the attribute of extending (e.g., a class). The code element that extends the class can have \u201cextends\u201d as part of the syntax or text of the code that can be extracted when parsed. In other examples, a structure field can be based on a reserved term or keyword in a programming language or based on some other syntax or textual element in source code that can be identified in the source code text by parsing the source code according to the syntax of a programming language. For example, for Java language structure fields can be based on a name of a code element, full text of the code element, inheritance, implementing, calling other code elements, importing, dependencies or the like. These exemplary structure fields can be \u201cclassname,\u201d \u201cmethodname,\u201d \u201cinherits,\u201d \u201cimplements,\u201d \u201ccalls,\u201d \u201cimports,\u201d or other structure fields based on identifiable attributes permitted by the programming language. In implementations for other languages the structure fields can be based on attributes identifiable in the source code written in those languages.","In a further exemplary implementation, while parsing the source code of code element A, a parser can encounter that code element A \u201cimplements\u201d code element B and the parser can store or input a structure value and structure field that indicates code element A implements code element B. For example the parser can store the indication of a code attribute in an index document or some other data store such as a database or the like. After structure fields are associated with a code element in a data store, the data store can be searched or queried to find the structure fields associated with the code element. For example, an index document for code element A can be searched for a field that indicates code element A implements other code elements.","Table 1 shows structure fields that can be designated for the Java language. These examples are provide for explanation and other structure fields using different words can be determined and created based on the syntax of programming languages and written source code.",{"@attributes":{"id":"p-0091","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Structure Fields"},{"entry":"Structure Fields"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"calls"]},{"entry":[{},"classname"]},{"entry":[{},"creates"]},{"entry":[{},"extends"]},{"entry":[{},"implements"]},{"entry":[{},"imports"]},{"entry":[{},"methodname"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In any of the examples herein, a structure value can be information in an index record that gives a value for or corresponds with a structure field. The information of a structure value can correspond to an attribute of a code element (e.g., code attribute). For example for an index record of a method that has a structure field of \u201cmethodname\u201d the corresponding structure value for the field can be the name of the method. This information about the attribute (e.g., the name of the method) can be extracted from the code of the code element. For example, when a parser parses a code element for indexing, it can input information for code attributes into an identifiable field such as a structure value associated with a structure field. The structure value and field can be used to determine conformance of the indexed code element when the index record is searched in the index.","The values, information, or text of the structure value can include text extracted from the code element as well as additional information. In one implementation extracted text can be processed or formatted by an analyzer before being stored in a structure value.","In any of the examples herein, a code element can be a portion of the text of source code. For example, a code element can be a segment of source code such as a class, a method, a function, routine, a statement, a procedure, comments, or other like logical code elements.","Code elements are determined based on source code files or from parsing the source code according to a programming language. For example, a class contained in an individual source code file can be a code element because source code files can be organized so that a file (e.g., each file) contains one respective code element. That is to say, the content of an individual source code file can be a code element. Also, for example, a class that is written in a source code file or document can be indexed as a code element.","Code elements can be combinations of code elements. For example, both a designated method of a class and the class itself that includes the method can be different code elements. Also, for example, a code element can be source code comments which are designated by a comment marker or markers. A code element can be a combination of other code elements. For example, a code element can be a comments section of a class, the class, or both the comments and the class combined. Code elements can have an organization based on the programming language of the source code. Various attributes of code elements can be indexed based on a chosen indexing scheme.","In other implementations, a code element can be designated from the syntax of a programming language. A code element can be determined, identified, or extracted by parsing source code according to the syntax of a programming language. For example, a code element can have attributes that can be identified or determined by an indexer. For example, an indexer can parse source code written in the C++ programming language according to the syntax of the language to extract code elements, such as classes, functions and the like. Attributes of the code elements can be used to create index documents with information about the code elements. In one implementation, code elements can be identified and extracted because a parser can identify the beginning, end and body of the code element based on the syntax of the programming language. A code element can be a logical unit of source code that has functionality. The logical unit can have text that indicates its beginning and end as a unit of code specified functionality. For example, a parser that parses source code according to a programming language that allows for classes can identify that a segment of source code is a class because the class is written in a syntax of the programming language. The parser can identify what text is included in the class. The parser can also identify where the class begins and ends. The parser can determine that the logical unit is a class. In another implementation, code elements can be discrete segments of source code that can be searched for by a user. For example, for a programming language that has logical segments of code (e.g., classes, methods) that have functionality as a logical segment, code elements can be based on those logical segments because a user would want to search the source code based on those logical segments of the code.","By indexing source code by code elements the source code can be searched based on the structure of the source code. A user can search for code elements that have attributes and functionality that is desired by the user.","In any of the examples herein, a code structure query can include query terms and operators. Query terms can be combinations of text, words, phrases, expressions, field-value expressions, field terms, value terms, character strings, or the like. A code structure query can include operators, including Boolean operators such as \u201cAND,\u201d \u201cOR,\u201d and \u201cNOT,\u201d or other operators.","A code structure query can include field-value expressions. A field-value expression can include a field term and one or more value terms. For example, the field-value expression \u201cclass:server\u201d has class as its field term and server as its value term. A field term can indicate what structure field's associated value in an index record can be used to compare with the value term. The value term can be compared with the structure value of the indicated field. A field term can indicate what associated attribute a user is searching for in the source code and the value term can indicate acceptable or conforming values for those attributes found in code elements. In some implementations query terms can be used to search annotation records by comparing structure fields and values with annotation fields and values or annotation records.","In one example of a code structure query, a user searching for source code can enter the query \u201cclass:server AND function:send.\u201d In one implementation, this query can return code structure query results for classes that include the text \u201cserver\u201d in the class name and that have a function that includes the text \u201csend\u201d in the function name. Using the code structure query structure fields and structure values of index records can be searched to identify the code elements with the relevant specified attributes.","In another implementation, a code structure query can have characters with a specified function such as a variable character that indicates variations of entered terms can be acceptable, matching or conforming to the entered terms.","The code structure query terms can be arranged according to a syntax. For example, if a user wanted to search for a class named Foo the query for the search can be \u201ctype:class AND classname:foo.\u201d Where \u201ctype\u201d indicates that the code element has an attribute of having a type, and \u201cclass\u201d indicates that the conforming code elements have the type of a class. Also, the orientation of the terms of an expression can be functional. For example, \u201cclassname\u201d and \u201cfoo\u201d separated by a colon can indicate that the term to the left of the colon is a field term and the term to the right of the colon is a value term. In other implementations other syntaxes and orientations for terms can be used.","In one implementation, a query that matches or compares text terms can be used. For example, the code structure query \u201ctype:class AND classname:foo AND bar\u201d can indicate conforming code elements can be classes with the text \u201cfoo\u201d in the classname and that include the text \u201cbar\u201d in the source code of the element. A free text term such as \u201cbar\u201d not in a field-value expression can be compared against a predetermined structure value such as one that holds the source code for the code element or any other structure value for an indexed code element.","Query terms, or operators for a code structure query can be entered by a user, or automatically. For example, a user can enter query terms into a text or query field of a user interface to search for source code.","In another example, query terms, or operators, can be automatically entered into a code structure query. For example, a user can select a user interface field option and a query term, or operator, indicating by the selection can be automatically added to a code structure query.","In any of the examples herein, a code structure query result can be a result determined in response to a code structure query. A code structure query result can be used to retrieve or reference source code, a code element, or an index document. For example, a user can select a code structure query result by mouse clicking on the code structure query result and the selection can retrieve the associated code element.","The code structure query result can be displayed in a user interface at a client. In one implementation, code structure query results can be implemented in part as links in a web page displayed in a web browser or user interface using internet technologies such as HTML, hyperlinks or other internet technologies. A code structure query result can include an identifier of the source code or element that it can retrieve. Also, a code structure query results can include a portion or all of the text of the code element. For example, the code structure query result can display the first 100 characters of the code element so that a user can preview the source code. A code structure query result can include a hyperlink to retrieve an HTML document containing the source code or code element. Also, for example a user searching for source code can view or scroll through code structure query results to view available source code hits. The code structure query results can be displayed in a list.","A code structure query result can be ranked and displayed or listed in an order of relevance. An order of relevance can be determined by a ranking based on a heuristic that determines relevance. For example, code structure query results can be ranked based on an algorithm such as a statistical algorithm or some other algorithm where a query is matched with source code or a code element. Code structure query results can be paginated and displayed in various pages that can be accessed by selecting a pagination option, such as a next page, numbered page, or the like. Also, code structure query results can be displayed in a single page or window.","In any of the examples herein, index records that conform to a code structure query can be identified based on comparing query terms of the code structure query with structure values associated with structure fields of an index record. For example, based on the indicated operators of the code structure query, the query terms can be matched or compared against structure values. In one implementation query terms can be matched in whole in part or as variations to structure values based on syntax and operators of the code structure query. In another implementation, Boolean operators act on the query terms to indicate limitations, constraints, or boundaries for the search. A conforming index record can be one that includes structure fields and values that meet the constraints indicated by the code structure query.","In one example, a user can generate and send the code structure query \u201ctype:class AND extends:ExtendedClass AND methodname:Method OR type:method AND methodname:Method NOT bar.\u201d This query can return code structure query results for classes that extend the class ExtendedClass and that include a method named \u201cMethod,\u201d or methods named Method that do not include the text \u201cbar\u201d in the code element. In this example, the Boolean operators \u201cAND,\u201d \u201cOR,\u201d and \u201cNOT\u201d operate on the field-value expressions and free text terms to indicate how the query terms are to be compared to structure values for conformance.","Code structure query results can be provided for the identified index records that are found to conform to the code structure query. For example, a structure query result stored in the identified index record can be provided as the code structure query results associated with the identified index record. The stored code structure query results can be stored as a structure value or as some other manner in the index record.","In any of the examples herein, a code attribute can be an attribute of a code element that can be determined from the source code structure of the code element. For example, determining the attribute can be done by parsing the text of the code element according to a programming language. For example, a method can have the attribute of calling another method. This can be determined from the text of the code element because the first method can have code text that calls the second method or indicates that it can call the second method. In another example, a code element can be identified as having the attribute of being a code element type of a class. In a further example, a code element can be identified as having the attribute of being written in a particular programming language. A programming language can allow source code to be written according to a particular syntax, and code attributes can be based on each syntax with its associated functionality.","A code attribute can be associated with some functionality or identifier of the source code or code element. For example, one code attribute can be that the code element implements some functionality. Another example code attribute can be that the code element calls another code element (e.g., a class, method, function). Another code attribute can be that the code element is a class or method identified by a class or method name. Other examples of code attributes can be that a code element has functionality that creates, extends, or imports a specific code element or function. Other code attributes can be determined by a parser depending on the source code and the programming language it is written in.","In any of the examples herein, source code can be any software source code or portion of source code written according to an object-oriented programming language or a non-object-oriented programming language. For example, source code can be written in C, C++, C#, Java, Basic, Fortran, Lisp, Prolog, Perl, scripting languages, and the like.","In some examples, source code can be represented by a model, an intermediate representation of the source code, or the like. A representation of the source code can be used in place of the source code in any of the examples herein.","In any of the examples herein, formatted source code can be source code formatted for display in a user interface. For example formatted source code can include formatted source code files, HTML files that display source code when rendered in a web browser that can include HTML source-code files, or other files that can be used to display source code in a user interface. Formatted source code can include source code for a code element. The formatted source code can include comments that are part of the source code that is indexed.","Formatted source code can include text that references source code such as other code elements, or other segments of source code. The formatted source code can have links, with linking functionality, to the referenced source code for retrieval. A reference to source code can be the use of or text identifying a code element or functional unit of code in a source code element. For example the text for a function call in a code element can be a link (e.g., hyperlink) to retrieve the source code for the referenced function that is called in the code element. When the source code (e.g., formatted source code) for the called function is retrieved it can be displayed in a user interface.","In one implementation, the linking functionality can link internally to a code element. For example, if a first portion of a code element's source code references a second portion of the code elements source code, then the first portion of source code can link to the second portion of source code. When the link is used or selected the second portion of source code can be displayed. In one implementation, anchors can be used to jump to and display a specified portion of source code in a HTML file. Similarly, if a link from one code element references a portion of another code element then the referenced portion can be displayed when the link is used.","In any of the examples herein code hierarchy information can be determined from index records. For example, when a code element is indexed information about the code's hierarchy can be input into the index record for the code element. An indexer can use the source code of code elements to input code information into index records. Code Hierarchy information can include dependency information such as information about parent and child code element relationships, calling relationships between code elements, type information, and other like relationships among code elements that can be determined from the source code of code elements.","In one implementation, code hierarchy information can include type hierarchy information that can indicate a relationship based on code element type. For example, for a particular class that extends another class and implements a particular interface, the type hierarchy can list the extended class and the particular interface as being associated with the class.","In another implementation, code hierarchy information can include call hierarchy information that can indicate a calling relationship. For example, for a particular code element that calls various functions, the call hierarchy information can list the called functions as being called by the code element. Also for example, for a code element that is called by various other code elements, the call hierarchy information can list the various calling functions as calling the code element.","The techniques and solutions described herein can be performed by software and\/or hardware of a computing environment, such as a computing device or computer system. For example, computing devices can include server computers, desktop computers, laptop computers, notebook computers, netbooks, tablet devices, mobile devices, or other types of computing devices (e.g., devices such as televisions, media players, or other types of entertainment devices that comprise computing capabilities such as audio\/video streaming capabilities and\/or network access capabilities). The techniques and solutions described herein can be performed in a cloud computing environment (e.g., comprising virtual machines and underlying infrastructure resources).",{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 13","b":["1300","1300"]},"With reference to , the computing environment  includes at least one central processing unit  and memory . In , this most basic configuration  is included within a dashed line. The central processing unit  executes computer-executable instructions. In a multi-processing system, multiple processing units execute computer-executable instructions to increase processing power and as such, multiple processors can be running simultaneously. The memory  may be volatile memory (e.g., registers, cache, RAM), non-volatile memory (e.g., ROM, EEPROM, flash memory, etc.), or some combination of the two. The memory  stores software  that can, for example, implement the technologies described herein. A computing environment may have additional features. For example, the computing environment  includes storage , one or more input devices , one or more output devices , and one or more communication connections . An interconnection mechanism (not shown) such as a bus, a controller, or a network, interconnects the components of the computing environment . Typically, operating system software (not shown) provides an operating environment for other software executing in the computing environment , and coordinates activities of the components of the computing environment .","The storage  may be removable or non-removable, and includes magnetic disks, magnetic tapes or cassettes, CD-ROMs, CD-RWs, DVDs, or any other tangible storage medium which can be used to store information and which can be accessed within the computing environment . The storage  stores computer-executable instructions for the software , which can implement technologies described herein.","The input device(s)  may be a touch input device, such as a keyboard, keypad, mouse, pen, or trackball, a voice input device, a scanning device, or another device, that provides input to the computing environment . For audio, the input device(s)  may be a sound card or similar device that accepts audio input in analog or digital form, or a CD-ROM reader that provides audio samples to the computing environment . The output device(s)  may be a display, printer, speaker, CD-writer, or another device that provides output from the computing environment .","The communication connection(s)  enable communication over a communication medium (e.g., a connecting network) to another computing entity. The communication medium conveys information such as computer-executable instructions, compressed graphics information, or other data in a modulated data signal.","Although the operations of some of the disclosed methods are described in a particular, sequential order for convenient presentation, it should be understood that this manner of description encompasses rearrangement, unless a particular ordering is required by specific language set forth below. For example, operations described sequentially may in some cases be rearranged or performed concurrently. Moreover, for the sake of simplicity, the attached figures may not show the various ways in which the disclosed methods can be used in conjunction with other methods.","Any of the disclosed methods can be implemented as computer-executable instructions stored on one or more computer-readable media (tangible computer-readable storage media, such as one or more optical media discs, volatile memory components (such as DRAM or SRAM), or nonvolatile memory components (such as hard drives)) and executed on a computing device (e.g., any commercially available computer, including smart phones or other mobile devices that include computing hardware). By way of example, computer-readable media include memory  and\/or storage . As should be readily understood, the term computer-readable media does not include communication connections (e.g., ) such as modulated data signals.","Any of the computer-executable instructions for implementing the disclosed techniques as well as any data created and used during implementation of the disclosed embodiments can be stored on one or more computer-readable media. The computer-executable instructions can be part of, for example, a dedicated software application or a software application that is accessed or downloaded via a web browser or other software application (such as a remote computing application). Such software can be executed, for example, on a single local computer (e.g., any suitable commercially available computer) or in a network environment (e.g., via the Internet, a wide-area network, a local-area network, a client-server network (such as a cloud computing network), or other such network) using one or more network computers.","For clarity, only certain selected aspects of the software-based implementations are described. Other details that are well known in the art are omitted. For example, it should be understood that the disclosed technology is not limited to any specific computer language or program. For instance, the disclosed technology can be implemented by software written in C++, Java, Perl, JavaScript, Adobe Flash, or any other suitable programming language. Likewise, the disclosed technology is not limited to a particular type of hardware. Certain details of suitable computers and hardware are well known and need not be set forth in detail in this disclosure.","Furthermore, any of the software-based embodiments (comprising, for example, computer-executable instructions for causing a computing device to perform any of the disclosed methods) can be uploaded, downloaded, or remotely accessed through a suitable communication means. Such suitable communication means include, for example, the Internet, the World Wide Web, an intranet, software applications, cable (including fiber optic cable), magnetic communications, electromagnetic communications (including RF, microwave, and infrared communications), electronic communications, or other such communication means.","In view of the many possible embodiments to which the principles of the disclosed invention may be applied, it should be recognized that the illustrated embodiments are only preferred examples of the invention and should not be taken as limiting the scope of the invention. The disclosed methods, apparatus, and systems should not be construed as limiting in any way. Instead, the present disclosure is directed toward all novel and nonobvious features and aspects of the various disclosed embodiments, alone and in various combinations and sub combinations with one another. The disclosed methods, apparatus, and systems are not limited to any specific aspect or feature or combination thereof, nor do the disclosed embodiments require that any one or more specific advantages be present or problems be solved. Rather, the scope of the invention is defined by the following claims. We therefore claim as our invention all that comes within the scope of these claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
