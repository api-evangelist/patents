---
title: Managing target computer using encapsulated file
abstract: An encapsulated file is accessed at a management computer. The encapsulated file contains plural files and a deployment descriptor. The deployment descriptor is used to update the management computer about the plural files. A function is executed using at least one of the plural files.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09164750&OS=09164750&RS=09164750
owner: Hewlett-Packard Development Company, L.P.
number: 09164750
owner_city: Houston
owner_country: US
publication_date: 20030228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The patent applications \u201cSystem And Method Of Using A Transactional Unit Comprised Of Transactional Subunits\u201d, by Julio Cesar Arpirez Vega, U.S. Ser. No. 10\/375,083, and \u201cMethod For Managing Plurality Of Target Computers Using A Management Computer\u201d, by Julio Cesar Arpirez Vega and Miguel Murillo Condon, U.S. Ser. No. 10\/375,176, which are filed concurrently with the present application are incorporated herein by reference.","Some computer networks use a management computer to configure target computers. For example, in an Internet data center, a management computer can configure a large number of target computers to provide data and other information to users across the Internet.","New operations can be added to the target computers of a network using the management computer. In one example, files including code and documentation are used to add operations to the network. The files can include source code, scripts, third-party libraries, and deployment descriptors. The transfer of these files to the management computer for configuring a target computer can be difficult when, for example, a large number of files is involved. Further, since the files for an operation can be located in different directories of the management computer, it can be difficult to modify, update or move these files.","Exemplary methods are disclosed for processing an encapsulated file at a management computer. An exemplary method comprises accessing an encapsulated file at a management computer. The encapsulated file contains plural files and a deployment descriptor. The deployment descriptor is used to update the management computer about the plural files. A function is executed using at least one of the plural files.","Exemplary embodiments of a management computer include a processor configured to access an encapsulated file containing plural files and a deployment descriptor. The processor is configured to use the deployment descriptor to update the management computer about the plural files and configured to cause execution of a function using at least one of the plural files. The management computer is configured to store the plural files.","Exemplary methods are disclosed for processing an encapsulated file at a management computer. An exemplary method comprises accessing an encapsulated file containing plural files at a management computer. At least one of the plural files is an executable file for execution on a target computer. The executable file is extracted from the encapsulated file for transfer to the target computer.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},"In step , an encapsulated file containing plural files and a deployment descriptor is accessed. The encapsulated file can, for example, be constructed by a user at a user interface, and transferred to the management computer. The management computer can then use the encapsulated file to configure (or reconfigure) one or more target computers.","As used herein, a \u201cfile\u201d is a collection of data associated with an explicit or implicit file name. An \u201cencapsulated file\u201d is a file that contains more than one file and can be transferred or otherwise manipulated using a single explicit or implicit file name. Examples of encapsulated files include ZIP files, Java Archive files (JAR files) or any other file containing plural files. The encapsulated files can be Plug-in ARchive (PAR) files using a PAR extension. The PAR files can conform to the JAR format. The plural files can include executable files. As used herein, a \u201cdeployment descriptor\u201d is any file, text, or other information that can be used to update the management computer about the plural files.","In one embodiment, the encapsulated file is data compressed (e.g., by the user interface). This reduces the size of the encapsulated file (e.g., for the encapsulated file to be transferred over a computer network to the management computer).","The encapsulated file can include logic and data for new operations (e.g., operations to be implemented at one or more target computers). For example, the encapsulated file can include java source code, (java files), generated code including class files, documentation, third-party library, executable files such as scripts, environment variable settings, and a deployment descriptor.","The encapsulated file can contain files to add functionality to a management computer. For example, files used for UNIX configuration operations can be included into the encapsulated file. Including such files in an encapsulated file (e.g., in a single file) can simplify the transfer of the files and the manipulation of the files at the management computer. In one example, accessing the encapsulated file comprises receiving the encapsulated file from another portion of the management computer.","In step , the deployment descriptor is used to update the management computer about the plural files. The deployment descriptor can be used to associate a function with one of the plural files. In one embodiment, the deployment descriptor includes an indication of tasks that can be executed using the plural files of the encapsulated file. The indication can be used by the management computer to update the management computer to allow a function, such as a type of target computer configuration. The function can include one or more tasks.","The deployment descriptor can indicate the version of the PAR or other encrypted file, name of the PAR or other encrypted file, and\/or a deployment mode of the plural files (for example, whether the files are to be copied to a target computer). The deployment descriptor can be used to indicate libraries for use with one or more of the plural files. The deployment descriptor can also be used to indicate locking arguments for the files, tasks or functions indicating which other files, tasks or functions should, for example, be prevented from concurrent operation on a target computer. The use of locking arguments can avoid conflicts in the operation of the functions.","The deployment descriptor can define characteristics of the encapsulated file and thus indicate to the management computer how to use the plural files of an encapsulated file. For example, the deployment descriptor can specify whether the executable files for the encapsulated files should be remotely copied to a target computer, or whether it can be assumed that the executable files already exist on the target computer or are already accessible to the target computer. In one example, the encapsulated file can be considered to have two main parts: a declarative part including the deployment descriptor and environment variable settings that define configurable behavior; and a procedural part including executable files.","In step , a function is executed using at least one of the plural files. The functions can include tasks or combinations of tasks. The functions can include configuration of a target computer or other device. The execution of the function can include the transfer and\/or execution of an executable file. Executable files include compiled or uncompiled code that can be executed at the target computer. The executable files can include scripts which are programs written in an interpreted programming language such as Perl, Tcl\/Tk, PYTHON, VBA, DOS batch file, COM automation, or any other scripting language. Scripts are not compiled and provide flexibility.","In one embodiment, the function includes the transfer of an executable file to a target computer. The execution of the function does not require the transfer of an executable file to the target computer. For example, the function can be a remote procedure call, such as a Java Remote Method Invocation (RMI) call, made to the target computer.","After the encapsulated file is received, the function can be executed without restarting the management computer. In one example, the deployment descriptor is used to update a mapping file or folder. The mapping file or folder associates files from the encrypted file with functions that use these files. The management computer can use the mapping file or folder to find the files needed for a function. When an encrypted file is received, the mapping file or folder can be updated without restarting the management computer. This allows a new function to be added without restarting the management computer. For example, with Java based systems, dynamic class loading can be used.","The management computer can use the encapsulated file to configure a target computer. The execution of the function can include executing the function on a target computer.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["200","201","200","204","212","204","208","207","209","204","207","200","207","202","204","211"]},"The processor  is configured to cause execution of a function using at least one of the plural files. For example, the processor can be configured to use the encapsulated file to configure a target computer. The processor can initiate the execution of the function on a target computer. The memory  is configured to store the plural files.","In one embodiment, after the encapsulated file is received, the function is executed without restarting the management computer. The mapping folder  can be updated with associations between functions and the plural files as the encapsulated files are received. The management computer  can use the updated mapping folder  to determine which files are needed for a new function without restarting.","One of the plural files can be an executable file which is transferred to a target computer. The system  can include the target computer  configured to execute the function.","The exemplary  system  includes a management computer  with deployment engine software that can deploy encapsulated files in the management computer. Deployment engine  can include software running on a processor  at management computer  to receive the encapsulated file . The encapsulated file  contains plural files, including the executable file , and deployment descriptor . The deployment can include unencapsulating the encapsulated file, and storing the plural files within the management computer. Additionally, the mapping folder or file  can be updated with information concerning the plural files. In one example, the deployment engine software deploys the encapsulated file such that it can be read by resource manager software  using an application programing interface (API).","In an exemplary embodiment, the plural files including the executable file are available to resource manager software at the management computer. In , the resource manager software  can access executable files using API .","The management computer can use the encapsulated file to configure the target computer. In the  example, the management computer sends the executable file to one or more of the target computers , , or . In one example, the management computer provides instructions to the target computers to execute the executable files. The encapsulated file need not contain an executable file, and an executable file need not be transferred to a target computer.","In an exemplary embodiment, the encapsulated file contains directory information for the plural files (e.g., so that the management computer can determine contents, and\/or path and\/or file types included in the encapsulated file). An exemplary encapsulated file is as follows:",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"C:\\WINDOWS\\TEMP\\UXOS.par"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Size","Path"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["par.xml","10,975","manifest\\"]},{"entry":["HP-UXiamakekey","20,480","files\\"]},{"entry":["SunOSiamakekey","7,060","files\\"]},{"entry":["addChmod.sh","819","scripts\\"]},{"entry":["addDir.pl","7,290","scripts\\"]},{"entry":["addIP.sh","12,873","scripts\\"]},{"entry":["addUser.sh","8,032","scripts\\"]},{"entry":["addUserToGroup.pl","6,623","scripts\\"]},{"entry":["createGroup.pl","2,705","scripts\\"]},{"entry":["disFTPpub.sh","1,207","scripts\\"]},{"entry":["enFTPpub.sh","1,935","scripts\\"]},{"entry":["IAPerlCommon.pm","14,121","scripts\\"]},{"entry":["libscripts","5,788","scripts\\"]},{"entry":["removeDir.pl","2,522","scripts\\"]},{"entry":["removeGroup.pl","2,716","scripts\\"]},{"entry":["rmIP.sh","7,146","scripts\\"]},{"entry":["rmUser.sh","1,543","scripts\\"]},{"entry":["rmUserFmGroup.pl","7,374","scripts\\"]},{"entry":["UXOS.class","6,468","classes\\com\\hp\\ov\\activator\\plugins\\"]},{"entry":["UXOS.java","49,669","src\\com\\hp\\ov\\activator\\plugins\\"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Below is an example of the deployment descriptor file, \u201cpar.xml\u201d.\n\n","In the above example, the deployment descriptor is an XML file. The tags in the XML file can indicate how to interpret the information in the XML file. In one example, the deployment descriptor can be used to associate a function with a file in the encapsulated files. For example, the file \u201caddUser.sh\u201d is indicated as being a script that is associated with an \u201cadd user\u201d function by the deployment descriptor tags.","In one example, a Document Type Definition (DTD), is used to define tags in the deployment descriptor XML file. Document Type Definitions are used for XML files and allow the XML files to be correctly parsed for an application.","The example of  shoes a service builder unit . The service builder unit  includes an encapsulated file constructor user interface . This user interface allows users to specify files which can be grouped together to produce an encapsulated file. In one example, the user interface encapsulates the plural files using a protocol such as the .JAP protocol. The encapsulated file can then be transferred to the management computer . In one example, the deployment engine  takes the encapsulated file and processes it so that it can be accessed by the resource manager software . For example, tags in the deployment descriptor can be used by the resource manager software  to identify the functions associated with the plural files. A mapping folder or file  can then be constructed to indicate the new functionality. Higher level software  can produce instructions across an application programming interface  to the resource manager to perform operations that can use the plural files.","The higher-level software  can include a compound task transaction controller. The compound task transaction controller can include a transaction manager, a resource adapter connector, and an Enterprise Java Bean (EJB) unit. The higher-level software can also include a user interface workflow manager and a tracking unit. In one example, the higher-level software  receives requests to execute a compound task including a number of atomic tasks. An exemplary system is described in the patent application \u201cSystem And Method Of Using A Transactional Unit Comprised Of Transactional Subunits\u201d, by Julio Cesar Arpierz Vega, U.S. Ser. No. 10\/375,083, filed concurrently with the present application and incorporated herein by reference. For example, the atomic tasks can be undone under the control of the management computer. Code for atomic tasks can be stored within one of the plural files. In one example, the management computer sets up a table, such as a mapping file or folder, to indicate which of the plural files contains the requested atomic task code.","In one example, the encapsulated file enables a number of related operations. For example, the encapsulated file can enable UNIX operations including add user, remove user and the like. Some of the operations can include steps in which the executable file is transferred from the management computer to a target computer and then the executable file executes at the target computer.","The memory can store the plural files within the encapsulated file such as encapsulated file . Alternately, the plural files can be separately stored in the memory. In one example, the encapsulated file  contains directory information, as already mentioned, that allows the construction of a directory within the memory  to store the plural files. The management computer can use the encapsulated file to configure the target computer. In one example, the configuring of the target computer causes the executable file to execute at the target computer.","In one embodiment, the encapsulated file  is data compressed. Data compression reduces the size of the encapsulated file and thus can reduce the amount of data transferred across a computer network to the management computer.","In an exemplary embodiment, the resource manager software  at the processor  is used to transfer the executable file to the target computer . Any suitable file transfer protocol can be used. In one example, the executable file is transferred during a shell session, and the management computer can use the shell session to control the target computer.","In one example, the management computer stores an indication of whether the target computer has the executable file. If the target computer already has the executable file, the executable file does not have to be transferred in the shell session. The executable file can be transferred along with environment variables for use in running the executable file at the target computer.","In the example of , deployment engine  is used to deploy the encapsulated file  at the management computer. The target computer  can be configured to execute the executable file transferred from the management computer.","A system specification for encapsulated files can be followed such that new options can be added into the management computer using an encapsulated file following the system specification. The creation of encapsulated files that comply with the system specification can be aided by the use of the service builder. For example, the system specification can be associated with the PAR format.","In one example, the resource manager software is informed when an encapsulated file has been loaded into the management computer. The resource manager software can extend the capabilities of the system by adding new operations without restarting. Enabling operations with an encapsulated file means that the resource manager software code need not be changed as new operations are added. As long as the operations enabled by the encapsulated files conform to the system specification, any operation can be invoked by the resource manager without code changes to the resource manager software.","Service builder software of unit  can use the encapsulated file constructor user interface  for the generation of the files and the packing of the files into the encapsulated files. Use of an encapsulated file permits modification of the environment variables and deployment descriptor without recompiling the source code. Simply by modifying these attributes using the user interface and redeploying the new encapsulated file, characteristics of the system can be changed without a recompilation of source code. Customers can use the user interface to modify the operations enabled by the encapsulated file without being concerned with compilation issues or modification of source code to change certain attributes.","In one example, the system  comprises an Internet data center. The Internet data center can provide services to users across the Internet. One or more target computers can be configured by the management computer as described herein to provide such services.",{"@attributes":{"id":"p-0049","num":"0315"},"figref":"FIG. 3","b":"302"},"In step , the executable file is extracted from the encapsulated file for transfer to the target computer. In an exemplary embodiment, the encapsulated file is unencapsulated and the plural files, including the executable file, are stored at a location where the executable file can be transferred to the target computer. The unencapsulation can be performed following a standard such as the ZIP or JAR standards.","Alternatively, the plural files can be kept within the encapsulated file. Before the transfer of the executed file to the target computer, the executable file can be extracted from the encapsulated file.","In an exemplary embodiment, the accessing of the encapsulated file includes receiving the encapsulated file from another location. The plural files can be encapsulated into the encapsulated file and then provided to the management computer. The encapsulation can be performed using software that constructs a ZIP or JAR file.","In step , the executable file is transferred to the target computer. In step , the executable file is executed at the target computer. The execution of the executable file at the target computer can be part of the configuration of the target computer.","It will be appreciated by those of ordinary skill in the art that the system and method can be embodied in other specific forms without departing from the spirit or essential character thereof. The presently disclosed embodiments are therefore considered in all respects to be illustrative and not restrictive. The scope of the system and method is indicated by the appended claims rather than the foregoing description, and all changes which come within the meaning and range of equivalents thereof are intended to be embraced therein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings provide visual representations which will be used to more fully describe the representative embodiments disclosed herein and can be used by those skilled in the art to better understand them and their inherent advantages. In these drawings, like reference numerals identify corresponding elements and:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
