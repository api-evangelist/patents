---
title: Execution of highly concurrent processing tasks based on the updated dependency data structure at run-time
abstract: A dependency datastructure represents a processing task. The dependency datastructure comprising a plurality of components, each component encapsulating a code unit. The dependency datastructure may include dependency arcs to inter-component dependencies. Dependencies that are not satisfied by components within the dependency datastructure may be represented as pseudo-components. An execution environment identifies components that can be executed (e.g., have satisfied dependencies), using the dependency datastructure and/or concurrency state metadata. The execution environment may identify and exploit concurrencies in the processing task, allowing for multiple components to be executed in parallel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935705&OS=08935705&RS=08935705
owner: Benefitfocus.com, Inc.
number: 08935705
owner_city: Charleston
owner_country: US
publication_date: 20110513
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","DETAILED DESCRIPTION"],"p":["This disclosure relates to concurrent processing and, in particular, to registration and execution of highly concurrent processing tasks.","Many processing tasks include unexploited concurrencies. As used herein, a \u201cconcurrency\u201d refers to two or more processing tasks that can operate concurrently or in parallel (e.g., have no interdependencies therebetween). Developers may not take full advantage of potential concurrencies due to the difficulties involved in their exploitation. Typically, developers have to identify concurrencies a priori, at design time, author custom code (e.g., multi-threading and\/or inter-thread communication), and so on, which imposes a high cost, and introduces potential problems into the resulting system. Therefore, what is needed is a systematic and efficient approach for registering processing concurrencies and an execution manager configured to efficiently exploit those concurrencies.","In some embodiments, processing tasks are arranged into independent \u201ccode units.\u201d As used herein, a \u201ccode unit\u201d or \u201cunit of code\u201d refers to a logically distinct set of machine-executable instructions. A code unit may be part or component of a larger processing task. Code units may be embodied on a non-transitory, machine-readable storage medium, such as hard disks, non-volatile storage, optical storage media, or the like. Code units may be loaded from the non-transitory storage medium for execution by a computing device, such as a general-purpose processor, application-specific integrated circuit (ASIC), field-programmable gate array (FPGA), or the like.","Dependencies may exist between code units; for example, an output of a first code unit may be required input of a second code unit. These dependencies may be registered in a dependency datastructure. As used herein, a dependency datastructure refers to a datastructure in which inter-code unit dependencies are registered. A dependency datastructure may be implemented as a graph, such as a directed acyclic graph (DAG), a tree, an array, or any suitable datastructure. Code units may be represented as \u201ccomponents\u201d within the datastructure. As used herein, a component is a node in a dependency datastructure that encapsulates and allows invocation of a code unit. Dependencies between code units may be represented as connections between components in the datastructure. As used herein, a dependency occurs when an output of a first code unit is used to form the required input of another code unit. In the datastructure, a \u201cdependent component\u201d refers to a component that requires the output of another component. Conversely, an \u201cindependent\u201d code unit refers to a code unit that does not require the output of another component. Inter-component dependencies may be represented as connections (e.g., arcs) between components.","In some embodiments, an execution manager implements the processing tasks defined by the dependency datastructure. The execution manager identifies components that can be executed using the dependency datastructure (e.g., identifies components whose dependencies are satisfied). In some cases, a code unit may have a dependency that is satisfied by an \u201cexternal\u201d entity (an entity other than the execution manager). For example, a component may depend on the output of a separate I\/O processing system, the output of a remote processing task, or the like. The external entity may be represented in the dependency datastructure as a \u201cpseudo-component.\u201d As used herein, a pseudo-component represents a dependency outside of the dependency datastructure that cannot be satisfied by another component within the datastructure (or the execution manager). Conversely, dependencies on other components of the dependency datastructure (e.g., \u201cinternal components\u201d of the datastructure) can be resolved by the execution manager executing the code unit associated with the component.","As used herein, an \u201cexplicit pseudo component\u201d refers to a pseudo-component that is added to the dependency datastructure explicitly by a developer or other entity. An \u201cimplicit pseudo component\u201d refers to a pseudo-component that is automatically added to a dependency datastructure (or substituted for an existing component in the datastructure) in certain situations, such as when the component is designated as an entry component of a sub-graph (discussed below).",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","100","100"]},"In the  example, the datastructure  comprises a DAG; however, the disclosure is not limited in this regard and could be adapted to use any suitable datastructure. The datastructure  includes an independent component , which represents a code unit with no dependencies on other code units in the datastructure . The dependent component  depends on an output of the component . This dependency is represented as a dependency arc  between component  and component . The \u201cdirection\u201d of the dependency arc  indicates that an output of the component  is a required input of the component .","The \u201cdirection\u201d of the dependency arc  indicates that the code unit of component  may not be executed until the required output is produced by the component . The arc  may include metadata describing the dependency, such as a name, data type, interface definition (e.g., Application Programming Interface (API), call-back registration, etc.), \u201cdirection\u201d of the dependency, or the like.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["200","210","212","214","211","210","212","214","211"]},"In another example, depicted in , a dependency datastructure  comprises a component  that depends on outputs of multiple components (components  and ). These dependencies are represented by respective dependency arcs  and .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4","FIG. 4"],"b":["400","430","432","431","434","433","431","400","433","434","430"]},"The dependency datastructures disclosed herein may comprise a number of different \u201cgenerations.\u201d As used herein, a \u201cgeneration\u201d refers to the number of dependency arcs between components. A first generation may comprise independent components with no internal dependencies. A second generation may comprise components that depend on outputs from the first generation, and so on.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 5A","FIG. 5A"],"b":["500","500","502","504","506","501","500","506"]},"A \u201csecond generation\u201d  of dependent components (components , , and ) requires outputs generated by components in the first generation (components  and\/or ). The component  depends on outputs of both  and .","A \u201cthird generation\u201d  of components (including components , , , , and ) requires outputs produced by components in the \u201csecond generation.\u201d Dependencies may, however, span multiple generations. As depicted in , the component  requires outputs produced by the component , which is in the \u201csecond generation,\u201d as well as an output generated by the component , which is in the \u201cfirst generation.\u201d Therefore, although referring to \u201cgenerations\u201d may be convenient when describing multi-level dependency datastructures, the actual dependencies between components in the datastructure  and\/or concurrent execution of the code units associated with the components are not limited to neighboring generations.","The dependency datastructure  \u201cterminates\u201d with one or more \u201coutput\u201d components  and  (in the \u201cfourth generation\u201d ). As used herein, an \u201coutput\u201d component refers to a component in a dependency datastructure that produces an output that is not required by other components in the datastructure. An output component may, therefore, refer to a component that produces an \u201coutput\u201d of the dependency datastructure itself (e.g., an output of a processing task or sub-graph). In the  example, the components  and  may produce the \u201coutputs\u201d of the dependency datastructure .","The dependency datastructures described herein may be used to manage the concurrent execution of code units. In some embodiments, an execution manager (or other entity) accesses a dependency datastructure associated with a processing task. The execution environment identifies components that can be executed (e.g., have \u201csatisfied\u201d dependencies). Initially, the independent (e.g., leaf) components of the dependency datastructure may be executable. Execution of the independent (and other) components may satisfy the dependencies of other components in the dependency datastructure. As used herein, a \u201csatisfied component\u201d refers to a component that can be executed and\/or a component whose required inputs are available.","The execution environment may maintain a \u201cconcurrency state\u201d of a dependency datastructure. As used herein, the \u201cconcurrency state\u201d of a dependency datastructure refers to a \u201crun-time\u201d representation of which components have been executed and\/or which component outputs are available. The concurrency state of a dependency datastructure may be maintained in the dependency datastructure itself and\/or in another separate datastructure. As the execution environment executes components in the dependency datastructure, the execution environment may update the concurrency state to identify a next set of satisfied components that can be executed.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 5B","FIG. 5A"],"b":["500","502","504","510","502","504","510","541","542","543","544","545","551","552","553"]},"Using the dependency datastructure  and\/or the concurrency state metadata, the execution environment (or other entity) may identify components that can be executed (components whose dependencies have been satisfied). The concurrency state metadata may maintain indications of the satisfied components. In the  example, the concurrency state metadata comprises respective indicators identifying the components that are \u201csatisfied\u201d and can be executed (e.g., components , , , and ). The concurrency state metadata may also identify components whose dependencies have not been satisfied (e.g., components , , , , and ).","As depicted in , there may be more than one component available to be executed at a time. The dependency datastructure  (and concurrency state metadata) indicates that components , , ,  can be executed. The execution of components , , , and\/or  may occur in parallel (concurrently). The parallelism between the components , , , and  may be easily identified due to the representation of the code units in the dependency datastructure and the availability of concurrency state metadata.","As illustrated in , the opportunities for concurrent operation depend on the order in which dependencies are satisfied. For example, the component  is not available for execution since its dependency on the output of pseudo component  is not yet satisfied. However, in other instances, the components may finish execution in a different order, resulting in a different concurrency state, and different sets of components being available for concurrent operation. The differences in concurrency state may be due to many different factors including, but not limited to: processing loads, communication latencies, I\/O time, and the like. For example, the component  may correspond to an operation to access data in a database. In some cases (e.g., when the load on the database is light), this operation may complete relatively quickly. However, in other instances (e.g., when the database is heavily loaded), execution of the component may take longer relative to other components. The arrangement of the components into the dependency datastructure, along with maintenance of the concurrency state, allows real-time concurrencies to be exploited regardless of variable changes to the order and\/or speed in which other components are executed.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 5C","FIG. 5C","FIG. 5B","FIG. 5C","FIG. 5B"],"b":["505","505","502","504","510","541","542","543","544","545","551","552","553","505"]},"Components that are available for execution (e.g., components whose dependencies have been satisfied) are identified as the leaf nodes in the datastructure . In some embodiments, the concurrency state metadata may further comprise respective indicators  as described above. Alternatively, components may be identified by traversing the datastructure  to identify the leaf nodes (e.g., independent of an explicit indicator ).","Outputs generated by execution of the code units of the components in the dependency datastructures may be stored (e.g., cached) by the execution environment (or other entity) and made available as inputs to other, dependent components.","In some embodiments, a sub-graph may be extracted from a dependency datastructure. A sub-graph may include one or more components, including a \u201croot\u201d component and one or more \u201centry\u201d components. The \u201croot\u201d component is dependent (directly or indirectly) on outputs produced by the entry components. The \u201centry\u201d components are components that depend upon inputs generated from outside of the sub-graph. In some embodiments, a sub-graph is constrained such that the entry components exist on a path that originates from the root component. Accordingly, a sub-graph may be traversed from the root until all paths end in either a leaf component (a component with no dependencies) or an entry component. A sub-graph may be encapsulated by and\/or exposed as a code unit, a component, or the like, and may be executed independently of the dependency datastructure from which it was extracted.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6A","FIG. 6B","FIG. 6C"],"b":["600","600","610","612","613","614","615","616","617","618","620","610","612","600","613","616","610","601","600","602","632","612"]},"As discussed above, pseudo-components, such as pseudo-component , represent external dependencies (dependencies that are not satisfied by components within a particular dependency datastructure or sub-graph). Therefore, the sub-graph (or execution environment implementing the sub-graph), may be responsible for mapping input\/output data of the dependent components.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 6D","FIG. 6C","FIG. 6D"],"b":["602","632","602"]},"In some embodiments, a \u201cresponse\u201d or output value of the sub-graph may be returned and\/or used for other processing tasks and\/or of an output of a processing task. As such, an encapsulated representation of a sub-graph may be configured to capture one or more outputs of components therein and make these outputs available to the execution environment or other entity.  illustrates the sub-graph  providing output data , which may be made available to other entities and\/or components.","As discussed above, a sub-graph may be exposed as an executable code unit. Therefore, in some embodiments, a sub-graph may be encapsulated within a component.  illustrates a dependency datastructure  comprising a component  encapsulating the sub-graph  described above. In the  example, execution of the component  causes the sub-graph  encapsulated within component  to be executed, resulting in a hierarchical or recursive execution of dependency datastructures and\/or sub-graphs.","As described above, representing processing tasks as components of a dependency datastructure allows an execution environment (or other entity) to identify and exploit concurrency. In addition, the representations may simplify code development by offloading concurrency related tasks and\/or encapsulating code units into separable components.","The following example illustrates how the systems and methods taught herein simplify the complexity of processing task implementations. In this example, a set of processing functions (or methods) are defined using JavaScript. However, the disclosure is not limited in this regard and could be implemented in conjunction with any suitable programming language or environment.",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"var asyncGetRandomNum = function(callback) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setTimeout(function( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var num = Math.ceil(Math.random( ) * 100)"]},{"entry":[{},"callback(null, num);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}, 250);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"var asyncDoubler = function(num, callback) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setTimeout(function( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"callback(null, num * 2);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}, 250);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"var asyncAdder = function(num1, num2, callback) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setTimeout(function( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"callback(null, num1+num2);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}, 250);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A processing task is defined as follows:\n\n","In a first approach, the processing task is implemented in serial in accordance with the processing steps described above:",{"@attributes":{"id":"p-0056","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ create our function"},{"entry":"var func = function(inValue) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"asyncGetRandomNum(function(err, rnd0) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (err) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"callback(err);"]},{"entry":[{},"return;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"asyncAdder(rnd0, inValue, function(err, add0) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (err) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"callback(err);"]},{"entry":[{},"return;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"asyncDoubler(rnd0, function(err, dbl0) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (err) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"callback(err);"]},{"entry":[{},"return;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"asyncAdder(rnd0, add0, function(err, add1) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (err) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"callback(err);"]},{"entry":[{},"return;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"asyncDoubler(add1, function(err, dbl1) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (err) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"callback(err);"]},{"entry":[{},"return;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"asyncAdder(dbl0, dbl1, function(err, add2) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"callback(err, add2);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"\/\/ invoke the function"},{"entry":"func(42);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In an alternative embodiment, portions of the processing tasks (steps 1-8) are encapsulated into individual, asynchronous code unit components. The asynchronous code units may accept a callback as a last parameter, which is used to return control when execution of the code unit is complete. Errors that occur within the asynchronous code unit are passed as a parameter of the provided callback.","The steps of the processing task are segmented into code units (e.g., components), which are arrayed in a dependency datastructure.  depicts an exemplary dependency datastructure corresponding to the processing task described above. As shown in , the dependency datastructure  includes a pseudo-component  representing the \u201cin Value\u201d upon which step 3  depends. The datastructure  further includes a component  representing step 2, which has no dependencies. Step 4 is represented by component  and includes a dependency arc indicating that step 4  requires an output generated by Step 2 . Step 5 is represented by component  and includes dependency arcs indicating dependencies on the outputs of step 2  and step 3 , respectively. Step 6 is represented by component  and includes a dependency arc corresponding to its dependency on an output of step 5 . Step 7 is represented by component  and includes dependency arcs indicating dependencies on outputs of steps 6  and step 4 , respectively. Although not depicted in , an additional component or arc could be included to represent the output of the dependency datastructure  (e.g., the output of step 7 ).","The dependency datastructure may be executed within an execution environment as described above. In this example, the execution environment is referred to as a \u201cSyncGraph\u201d library, which may be configured to allow for defining a dependency datastructure, interpret the dependency datastructure, provide for identifying components that are ready to be executed, maintain concurrency state metadata, and so on. The following code listing provides one example of the use of \u201cSyncGraph\u201d to define and execute the processing task described above:",{"@attributes":{"id":"p-0060","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ create our dependency graph and extract our function"]},{"entry":[{},"var func = new SyncGraph({"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"rnd0: {func: asyncGetRandomNum},"]},{"entry":[{},"add0: {func: asyncAdder, dependencies: [\u2018rnd0\u2019, \u2018#in\u2019]},"]},{"entry":[{},"dbl0: {func: asyncDoubler, dependencies: [\u2018rnd0\u2019]},"]},{"entry":[{},"add1: {func: asyncAdder, dependencies: [\u2018rnd0\u2019, \u2018add0\u2019]},"]},{"entry":[{},"dbl1: {func: asyncDoubler, dependencies: [\u2018add1\u2019]},"]},{"entry":[{},"add2: {func: asyncAdder, dependencies: [\u2018dbl0\u2019, \u2018dbl1\u2019]}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}).createRunnable(\u2018add2\u2019, [\u2018#in\u2019], function(num) { return {"]},{"entry":[{},"\u2018#in\u2019: [num] }; });"]},{"entry":[{},"\/\/ invoke our function"]},{"entry":[{},"func(42);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The initialization of the \u201cSyncGraph\u201d library follows the dependency datastructure  depicted in . The first \u201crnd0\u201d entry defines step 2 of the processing task (component  in ). Step 3 (component ) is defined by the \u201cadd0\u201d entry and includes dependencies on the output of step 2 (rnd0) and the #in input value. In , these dependencies are illustrated by the dependency arcs from component  to the pseudo-component  and the component  of step 2. The \u201cdb10\u201d entry defines step 4 (component  in ) and includes a dependency on the output of step 2 (illustrated in  as a dependency arc from component  to component ). The \u201cadd1\u201d entry defines step 5 of the processing task and includes dependencies on the output of steps 2 and 3. These dependencies are illustrated in  as dependency arcs from component  to components  and , respectively. The \u201cdb11\u201d entry defines step 6 of the processing task and includes a dependency on the output of step 5 (dependency arc from component  to component ). Finally, the \u201cadd2\u201d entry defines step 7 and includes dependencies on the outputs of steps 4 and 6, respectively (dependency arcs from component  to components  and , respectively).","As illustrated above, the code required to implement the processing task using the execution environment (SyncGraph) is considerably simpler than the imperative approach. Moreover, the SyncGraph approach allows the execution environment to identify and exploit concurrencies in the processing task, which would otherwise be left unexploited (or would require additional, custom code to exploit). For example, once the output of step 2 is available, step 3  and step 4  could be implemented concurrently.","As described above, code units may be encapsulated within a \u201ccomponent,\u201d that is included within a dependency datastructure. An execution environment may access the dependency datastructure, identify concurrencies therein, and execute the components. The disclosure is not limited in this regard, however, and could be implemented using any suitable mechanism including, but not limited to: an interface, such as an Application Programming Interface, an object interface, or the like, a service description, such as Simple Object Access Protocol (SOAP), Web Services Description Language (WSDL), or the like, function prototypes, or the like. An execution environment may be configured to interpret and\/or execute components implemented using one or more encapsulation mechanisms (e.g., on one or more execution platforms). The execution platforms may include, but are not limited to: threads, processes, virtual machines (e.g., a Java\u2122 virtual machine), script interpreters (e.g., a JavaScript interpreter), a native execution platform, an emulated execution platform, or the like. The execution environment may comprise one or more execution platforms configured to execute components implemented using different encapsulation mechanisms. For example, the execution environment may be configured to execute a first component comprising a Java\u2122 bytecode code unit on a Java virtual machine execution platform, a component comprising a JavaScript code unit using a script interpreter, and another component comprising a \u201cnative\u201d code unit, and so on. Accordingly, the execution platforms may include, but are not limited to: threads, processes, virtual machines (e.g., a Java\u2122 virtual machine), script interpreters (e.g., a JavaScript interpreter), a native execution platform, an emulated execution platform, or the like.",{"@attributes":{"id":"p-0064","num":"0071"},"figref":"FIG. 8","b":"800"},"At step , the method  starts and is initialized. Step  may comprise loading one or more machine-readable instructions from a non-transitory, machine-readable storage medium, such as a hard disk, non-volatile memory, or the like. Step  may further comprise accessing and\/or initializing processing resources, execution environments, and\/or virtual machine resources.","Step  comprises accessing a dependency datastructure comprising a plurality of components. One or more of the components may encapsulate a unit of executable code (code unit). In some embodiments, the dependency datastructure comprises one or more pseudo-components, representing external dependencies. The dependency datastructure may further comprise dependency arcs representing component dependencies, as described above.","Step  comprises identifying components that are ready to be executed. In some embodiments, step  comprises traversing the dependency datastructure accessed at step  to identify leaf components (components whose dependencies are satisfied and\/or components that have no dependencies). Alternatively, or in addition, step  may comprise accessing concurrency state metadata indicating which components have been executed (if any) and\/or identifying inputs and\/or outputs that have become available due to execution of a component and\/or an external pseudo component. Step  may comprise identifying a plurality of components that can be executed in parallel.","Step  may further comprise determining that the processing task defined in the dependency datastructure of step  has been completed (e.g., all components have been executed and\/or all required outputs have been produced). If step  indicates that the processing task is complete, the flow continues to step ; otherwise, if additional components remain to be executed, the flow continues to step .","At step , an execution environment executes the identified components. The execution of step  may comprise executing the identified components concurrently (e.g., in parallel) and\/or in serial. In some embodiments, executing a component comprises providing the component with one or more inputs and\/or registering a callback (or other synchronization mechanism) that is invoked when the component completes execution. The callback mechanism may allow for output passing and\/or error handling, as described above. In some embodiments, step  comprises selecting one of a plurality of different execution platforms or environments for the component (e.g., Java\u2122 virtual machine, JavaScript interpreter, etc.).","Step  comprises maintaining concurrency metadata pertaining to the dependency datastructure access at step . Accordingly, step  may comprise accessing output data generated by executing the components at step  and\/or provided from external sources (e.g., pseudo components). Step  may further comprise storing or caching the output data for use as input data of other components in the dependency datastructure and\/or as an output of the processing task of the dependency datastructure. In some embodiments, the output\/input data may be cached and\/or stored as part of the concurrency metadata described above.","In some embodiments, step  operates asynchronously from the execution of the components at step  (e.g., step  may be implemented in a separate thread or process from the execution of the components at step ). The asynchronous execution may allow the method  to detect completion of the components and\/or identify new, external inputs being available more quickly. Accordingly, step  may be depicted as operating concurrently with step .","Step  comprises determining that a component has completed execution and\/or that one or more input data values have been received. If so, the flow continues at step  where additional components available to be executed are identified, as described above; otherwise, the flow continues at step . Since steps ,  and\/or  may operate asynchronously relative to one another, new components may be identified as being available for execution as soon as the dependencies thereof are satisfied, and without waiting for the execution of earlier invoked components to complete.","The method continues back at step  where the dependency datastructure and the updated concurrency state metadata are used to identify one or more additional components available for execution and\/or to determine whether the processing task has been completed (e.g., whether all components in the dependency datastructure have been executed), as described above.","At step , the flow ends until a next processing task and\/or dependency datastructure is received, at which point the flow continues at step .",{"@attributes":{"id":"p-0075","num":"0082"},"figref":"FIG. 9","b":"900"},"At step , the method  starts and is initialized as described above.","At step , a processing task is received. The processing task may comprise one or more processing steps, which are implemented by one or more respective code units.","Step  comprises defining a dependency datastructure to implement the processing task of step . Step  may comprise segmenting the processing task into one or more components, each component corresponding to a portion of the processing task and being associated with a code unit thereof. Each component may, therefore, encapsulate a respective code unit and provide for execution of the code unit within an execution environment. Step  may further comprise defining dependencies between the components as described above.","Step  comprises defining a dependency datastructure comprising the components of step . Step  may further comprise defining dependency arcs between the components, each dependency arc corresponding to a dependency between the components.","At step , the dependency datastructure is provided to an execution environment, which executes the processing task using the dependency datastructure as described above in conjunction with .","At step , the method  ends until a next processing task is received at step .",{"@attributes":{"id":"p-0082","num":"0089"},"figref":"FIG. 10","b":["1000","1000","1010","1012","1014","1016","1018","1010","1020","1010","1021"]},"An execution environment  operates on the computing device . The execution environment  may be embodied as one or more instructions stored on the non-transitory, machine-readable storage medium . The execution environment  may comprise one or more execution platforms , which may include but are not limited to: threads, processes, virtual machines (e.g., a Java\u2122 virtual machine), script interpreters (e.g., a JavaScript interpreter), a native execution platform, an emulated execution platform, or the like.","The execution environment  may be configured to implement a processing task. In some embodiments, the execution environment  (or other tool) provides for defining dependency datastructures to implement processing tasks (e.g., as described above in conjunction with ). In some embodiments, a dependency datastructure  may be stored on a non-transitory, machine-readable storage medium, such as the medium and\/or loaded into the memory  for execution by the execution environment .","The execution environment  may be configured to execute a processing task by accessing the dependency datastructure  corresponding to the task in the machine-readable storage media  or another source (e.g., a network connection, human-machine interface device , or the like). The execution environment  identifies components that are available for execution using the dependency datastructure and\/or concurrency state metadata , as described above. In some embodiments, the execution environment  executes a plurality of components of the dependency datastructure  concurrently (e.g., in parallel). The components may be executed in one or more execution platforms or environments .","The execution environment  maintains concurrency state metadata  indicating which components have been executed and\/or identifying input\/output data availability. The execution environment  uses the concurrency state metadata  and\/or the dependency datastructure to identify components whose dependencies are satisfied and are available for execution. The execution environment  continues executing components of the dependency datastructure (and maintaining the concurrency metadata ) until the processing task is compete (e.g., a desired output is obtained and\/or all components of the dependency datastructure  have been executed).","One or more outputs of the processing task of the dependency datastructure  may be stored on a machine-readable storage medium , transmitted on the network  (via the network interface ), and\/or presented to a user on a human-machine interface device .","The above description provides numerous specific details for a thorough understanding of the embodiments described herein. However, those of skill in the art will recognize that one or more of the specific details may be omitted, or other methods, components, or materials may be used. In some cases, operations are not shown or described in detail.","Furthermore, the described features, operations, or characteristics may be combined in any suitable manner in one or more embodiments. It will also be readily understood that the order of the steps or actions of the methods described in connection with the embodiments disclosed may be changed as would be apparent to those skilled in the art. Thus, any order in the drawings or Detailed Description is for illustrative purposes only and is not meant to imply a required order, unless specified to require an order.","Embodiments may include various steps, which may be embodied in machine-executable instructions to be executed by a general-purpose or special-purpose computer (or other electronic device). Alternatively, the steps may be performed by hardware components that include specific logic for performing the steps, or by a combination of hardware, software, and\/or firmware.","Embodiments may also be provided as a computer program product including a non-transitory, machine-readable storage medium having stored instructions thereon that may be used to program a computer (or other electronic device) to perform processes described herein. The machine-readable storage medium may include, but is not limited to: hard drives, floppy diskettes, optical disks, CD-ROMs, DVD-ROMs, ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, solid-state memory devices, or other types of medium\/machine-readable medium suitable for storing electronic instructions.","As used herein, a software module or component may include any type of computer instruction or computer executable code located within a memory device and\/or machine-readable storage medium. A software module may, for instance, comprise one or more physical or logical blocks of computer instructions, which may be organized as a routine, program, object, component, data structure, etc., that perform one or more tasks or implements particular abstract data types.","In certain embodiments, a particular software module may comprise disparate instructions stored in different locations of a memory device, which together implement the described functionality of the module. Indeed, a module may comprise a single instruction or many instructions, and may be distributed over several different code segments, among different programs, and across several memory devices. Some embodiments may be practiced in a distributed computing environment where tasks are performed by a remote processing device linked through a communications network. In a distributed computing environment, software modules may be located in local and\/or remote memory storage devices. In addition, data being tied or rendered together in a database record may be resident in the same memory device, or across several memory devices, and may be linked together in fields of a record in a database across a network.","It will be understood by those having skill in the art that many changes may be made to the details of the above-described embodiments without departing from the underlying principles of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6D"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6E"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6F"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
