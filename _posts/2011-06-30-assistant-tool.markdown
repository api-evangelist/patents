---
title: Assistant tool
abstract: A design assistant tool may automatically generate a functional design diagram representative of a system based on a processed requirements specification including a plurality of processed requirement statements and use cases. The design assistant tool may apply heuristic rules to the processed requirement statements and/or the processed use cases to determine various components of a functional design diagram. The design assistant tool may generate a technical design module based on the functional design diagram. The design assistant tool may allow various aspects of the functional design diagram to be modified to generate the technical design diagram.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015011&OS=09015011&RS=09015011
owner: Accenture Global Services Limited
number: 09015011
owner_city: Dublin
owner_country: IE
publication_date: 20110630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["PRIORITY CLAIM","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["This application claims the benefit of priority from Indian non-provisional patent application no. 237\/CHE\/2011 filed Jan. 25, 2011, which is incorporated by reference.","This present disclosure relates to generation of a formal design of a system based on a requirements specification, and more particularly, to generation of a formal design diagram for visual representation.","Design of systems, such as software systems, may begin with a diagram depicting operation of the system. Such diagrams may be based on a set of requirements that the system must perform in order to function as desired. The diagrams may be manually created through software tools requiring a system developer to generate a diagram through manual input based on each requirement statement present in a requirements specification.","A design assistant tool may automatically generate a design diagram based representative of a system based on a processed requirements specification including a plurality of processed requirement statements and use cases. The design assistant tool may implement a functional design assistant module on a computer device. The functional design assistant module may apply heuristic rules to the processed requirement statements and\/or the processed use cases to determine various components of a functional design. The functional design assistant module may also generate a functional design diagram using the various components.","The design assistant tool may implement a technical design assistant module on a computer device. The technical design assistant module may generate a technical design based on the functional design. The technical design assistant module may allow various aspects of the functional design to be modified, such as the introduction of design elements that may include the technical architecture style, technical capabilities and services, and off-the-shelf products that may be required to implement the system to create the technical design. The technical design assistance module may also generate a technical design diagram using these design elements.","Further objects and features of the present disclosure invention will be apparent from the following description, reference being made to the accompanying drawings wherein the preferred embodiments of the present disclosure are clearly shown.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","102","104","102","102","105","107","105","101","107","105","102","105","102","102"]},"A requirements specification  may refer to one or more documents containing a description of desired behavior and\/or functionality of a system to be developed, such as, for example, a software system. The requirements specification  may include a set of functional requirements that may be individual statements or use cases that describe interactions that users may have with software described by the requirements specification . In addition, the requirements specification  may include nonfunctional requirements that may impose constraints on the design or implementation of the software developed from the requirements specification , such as, for example, performance engineering requirements, quality standards, or design constraints.","In one example, the requirements specification  may include a plurality of requirement statements (RS) and\/or a plurality of use cases (UC). Each requirement statement may provide one or more particular aspect(s) with regard to overall software architecture as described by the requirements specification . Each use case may provide an example of use in the system to be represented by the design diagram . Use cases may include a use case name and one or more sentences, phrases, and\/or statements describing aspects of the particular use case. Based on the content of the requirement statements and the use cases present in the requirements specification , a functional architecture of a software system described by the requirements specification  may be shown through the displayed design diagram . The displayed design diagram  may statically or dynamically represent a system.","In , the DAT  may be implemented by a computer device  having a processor  and a memory . The memory  may include one or more memories and may be non-transitory computer-readable storage media or memories, such as, for example, a cache, buffer, RAM, removable media, hard drive or other computer readable storage media. Computer readable storage media may include various types of volatile and nonvolatile storage media. Various processing techniques may be implemented by the processor  such as multiprocessing, multitasking, parallel processing and the like, for example. The processor  may include one or more processors. The DAT  may be implemented through various analysis and design tools such as, for example, Rational Software Architect (RSA) by IBM of Armonk, N.Y., or Microsoft Visio or Microsoft Visual Studio by Microsoft Corp. of Redmond, Wash. The DAT  may generate an output, such as the displayed design diagram , in environments such as these.","The DAT  may include a functional design assistant module (FDAM)  and a technical design assistant module (TDAM) . The term \u201cmodule\u201d may be defined to include a plurality of executable modules. As described herein, the modules are defined to include software, hardware or some combination thereof executable by the processor . Software modules may include instructions stored in the memory , or other memory device, that are executable by the processor  or other processor. Hardware modules may include various devices, components, circuits, gates, circuit boards, and the like that are executable, directed, and\/or controlled for performance by the processor .","The displayed design diagram  may be transmitted from the computer device  to a display  in communication with the computer device . The displayed design diagram  may be transmitted to the display  through a connection . The connection  may represent a communication path between the display  and the computer device . The connection  may represent any suitable connection for communication such as direct connect, wireless, the Internet, or virtual private network, for example. The displayed design diagram  may also be transmitted to a plurality of displays similar to the display , such as CRT, plasma, LED, LCD displays or any other suitable display type.","In one example, the DAT  may generate the displayed design diagram  based on the requirements specification  having a predetermined format. In one example, the requirements specification  may be provided by a user via a graphical user interface (GUI) . The GUI  may be connected to the computer device  through a connection . The connection  may represent a communication path between the GUI  and the computer device . The connection  may represent any suitable connection for communication such as direct connect, wireless, the Internet, or virtual private network, for example. Diagram type input  may be received via the GUI  allowing a particular diagram type to be selected for generation, such as a UML class diagram or a UML entity diagram, for example. The GUI  and the display  may be the same device, cooperatively operating devices, or different separate devices.","The requirements specification  may be processed by a requirements specification processing module (RSPM)  executable by the processor . The RSPM  may process each requirement statement and use case in the requirements specification  separately, in parallel, or some combination. An output of the RSPM  may include processed requirements statements  that include each requirement statement individually processed for usage by the FDAM  as later described. An output of the RSPM  may also include processed use cases  that may include each use case individually processed for usage by the FDAM  as also later described. In one example, the RSPM  may be that described in United States Patent Application Pub. No. 2009\/0138793, which is incorporated by reference herein in its entirety. However, various other techniques may be utilized to process the requirements specification , such as natural language processing techniques, predetermined requirement statements, or any other technique to properly process the requirements specification .","In one example, the FDAM  may generate a functional design diagram  that may be transmitted to the display  and may be the displayed design diagram . The functional design diagram  may also be received by the TDAM . The TDAM  may be implemented to generate a technical design diagram  through refinement and further development of the initial functional design diagram  to generate the displayed design diagram . In one example, both the FDAM  and the TDAM  may be configured to generate formal designs instead of the functional design diagram  and the technical design diagram , respectively. In such examples, a modeling tool implementing the DAT  such as the RSA, for example, may generate the functional design diagram  and the technical design diagram  based on the formal designs created by the DAT .","Upon receipt of the processed requirements statement , the FDAM  may access a plurality of glossaries , a requirements statement (RS) heuristics data set , and a use (UC) heuristics data set . The plurality of glossaries  may include terms and associated definitions and classifications. The glossaries  may be domain specific (e.g. banking, utilities, etc.) The terms may be present in the processed requirement statements  and processed use cases , as well as the requirements specification  allowing the FDAM  to identify the terms and associated definitions and classifications for generation of the displayed design diagram .","The requirement statement (RS) heuristics data set  may include a plurality of requirement-statement heuristic rules and may be accessed by the FDAM  in order to determine relationships and responsibilities between the identified terms in the processed requirements statements . In one example, the FDAM  may apply the RS heuristics data set  to the processed requirements statements  in order to generate components for the displayed design diagram . For example, the FDAM  may recognize particular relationships between entities based on the processed requirement statements . The FDAM  may generate particular elements  and relationship indicators  based on the glossary data sets  and the RS heuristics data set  to form components of the functional design diagram .","The use case (UC) heuristics data set  may include a plurality of use-case heuristic rules and may be accessed by the FDAM  in order to determine relationships and responsibilities between the identified terms in the processed use cases . The FDAM  may apply the use case heuristics data set  to the processed use cases  in order to generate components for the functional design diagram.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["112","122","200","202","200","200","104"]},"The entity glossary  may also be represented by a plurality of glossaries that may be organized according to particular qualities. For example, the entity glossary  may include specific entries for different agents. The action glossary  may include valid actions for performance that may be described by the requirements specification . In one example, an action may refer to any direct or indirect act performed by or on an entity in a system. The action glossary  may be made up of a plurality of actions according to particular action qualities.","In one example, the FDAM  may include a number of sub-modules such as a requirement statement (RS) heuristic module . The RS heuristic module  may receive the processed requirement statements  and apply one or more sets of heuristic rules to the processed requirement statements . In one example, the RS heuristic module  may retrieve one or more sets of RS heuristic rules.","In one example, the RSPM  may process each requirement statement in the requirements specification . In , each processed requirement statement (RS)  is designated as RS through RSM, where M may be the number of processed requirement statements. In one example, the RSPM  may access the glossaries  to identify entities and actions present in each requirement statement.","The RSPM  may also identify requirement types for each requirement statement. For example, the RSPM  may be configured to identify requirement types as illustrated in Table 1. Table 1 also provides a non-limiting definition and example for each requirement type listed.",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Requirement Type","Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Solution Requirement (SA)","Describes what a proposed system"]},{"entry":[{},"(or component) shall do."]},{"entry":["Enablement Requirement (E)","Implies what functionality a system"]},{"entry":[{},"or a component must provide."]},{"entry":["Definition (D)","Describes an entity."]},{"entry":["Policy (P)","Describes policies to be adhered to by the"]},{"entry":[{},"system."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one example, each processed requirement statement  may be deconstructed by the RSPM , such that entities, entity responsibilities, and requirement types may be identifiable for each processed requirement statement . For example, a requirement statement may be \u201cThe SAP System shall send vendor data to the order processing system.\u201d This statement may be identified as a solution requirement (SA) by the RSPM . The terms contained in the statement may be identified by the RSPM  as follows:","The SAP System: Agent, found in entity glossary;","shall: Modal phrase, found in action glossary;","send: Action phrase, found in action glossary;","vendor data: Entity, found in entity glossary; and","the order processing system: Agent, found in entity glossary.","Each processed requirement statement  may be individually processed in a similar fashion.","Each processed requirement statement  may be received by the RS heuristics module . In one example, the RS heuristics module  may be configured to recognize various elements from each of the processed require statements, such as different agents, action phrases, entity phrases, and requirement types. Upon identification of such elements, the RS heuristics module  may apply a set of heuristic rules retrieved from the RS heuristic rules data set . In one example, the heuristic rules applied may be heuristic rules  shown in .","The RS heuristics module  may apply the heuristics rules , as well as the glossaries  to the processed requirement statements  to determine candidate classes and methods that the candidate classes will contain. In one example, a candidate class may refer to a type of word, such as noun, that may be considered for eligibility as a class in a UML class diagram. In one example, a method of a candidate class may refer to a service or operation provided by a physical or conceptual object, such as a class.","Based on the identified text structure in each processed requirement statement , the RS heuristics module  may assemble element terms to be used in the functional design diagram , determine relationships of each element , and determine relationships between the elements . In , the heuristic rules  are shown for the requirement types of solution requirement (SA), enablement (E), policy (P), and definition (D). The RS heuristics rules  for the solution requirement according to the required text structure of a processed requirement statement  may include candidate classes of a first noun phrase \u201cNP,\u201d second noun phrase \u201cNP,\u201d a third noun phrase \u201cNP,\u201d and so on. The relationship may be one of association between the first noun phrase NP and both the second noun phrase NP and the third noun phrase NP. The noun phrases NP through NP, adjectives JJ through JJ, and verb phrase VB may be recognized by the RS heuristic module  through use of the glossaries . Responsibility names associated with candidate classes may be generated based on application of the heuristic rules. Determination that a processed requirement statement  results in an associated responsibility may depend on the modal phrase, as well as the types of noun phrases and verbs present in the processed requirement statement . For example, the first heuristic HSA may be applied for a solution requirement if the processed requirement statement  has the solution requirement text structure shown in  and the third noun phrase \u201cNP\u201d is not a person. The second heuristic HSA may be applied if the third noun phrase NP is absent from the solution requirement statement or is a person and NP is not a person. The third heuristic HSA may be applied if the verb phrase VB is missing or is the verb \u201chave\u201d. Attributes of candidate classes may be generated based on the presence of adjectives in each processed requirement statement .","As shown in , RS heuristic rules  may be applied for each requirement type category. For example, a processed requirement statement  may provide \u201cContact Address is defined as an address.\u201d In this example, the modal phrase \u201cis defined as\u201d indicates that the processed requirement statement  is a definition type requirement statement. Based on the RS heuristic rules , \u201cContact Address\u201d may be identified as a first noun phrase NP and \u201cAddress\u201d as a second noun phrase NP. Accordingly, \u201cContact Address\u201d and \u201cAddress\u201d are identified as candidate classes and a generalization relationship from \u201cContact Address\u201d to \u201cAddress\u201d may exist. No adjectives are present in the example processed requirement statement  so no attributes are identified.","The FDAM  may process uses cases prior to applying use case heuristic rules. Each use case may have a particular name along with multiple use case sentences describing the use case. Typical use cases may provide a set of actors, such as human beings, and one or more \u201csystems\u201d that may describe a component of a system that is used to interact with the actors. Due to the detailed nature of most use cases, typically more than one use case may be described for each constituent functional block of the system. In one example, use cases may be processed in an attempt to utilize the detailed interactions described by use cases in order to extract different candidate classes, both entity and processing, as well as related responsibilities and attributes of the candidate classes. In one example, the FDAM  may leverage the fact that many use cases describe different aspects of a single high-level functional block of the system and may use clustering to identify system components. The RSPM  may process each use case in the requirements specification . In , each processed use case (UC)  is designated as UC through UCN, where N may be the number of processed requirement statements. In one example, the RSPM  may access the glossaries , such as glossaries  and , to identify entities and actions present in each use case being processed.","In one example, the FDAM  may include a use case (UC) cluster module  configured to receive each processed use case . The UC cluster module  may perform clustering into components of the system based on parameters included in the use cases, such as the use case names. In one example, the UC cluster module  may implement a clustering function based on the first noun phrase of the use case name to cluster different use cases. Clustering in this manner allows use cases having commonality in their names to be commonly clustered with one another. In one example, the UC cluster module  may be based on use case names describing the activity that a particular system module may perform. In some use cases, the first noun phrase in a particular use case name may represent the conceptual entities in the system the particular use case explains the workings of. For example, Table 2 includes a clustering function that may be implemented by the UC clustering module  in order to cluster use cases.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Initialize compSet \u2190 \u00d8"},{"entry":"for all usecase ucdo"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ucname \u2190 getUsecaseName(uc)"]},{"entry":[{},"clusteringNoun \u2190 getFirstNount(ucname)"]},{"entry":[{},"matchSet \u2190 {c \u2208 compset|strSimilarity(c.name,clusteringNoun) \u2267"]},{"entry":[{},"\u03c4}"]},{"entry":[{},"{\u03c4 is user - defined threhold}"]},{"entry":[{},"if matchSet \u2260 \u00d8 then"]},{"entry":[{},"Get the comp \u2208"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"matchSet whose strSimilarity(comp.name,clusteringNoun) is maximum."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Add ucto comp.list"]},{"entry":[{},"else"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Create a new component comp and add it to compSet"]},{"entry":[{},"comp.name \u2190 clusteringNoun"]},{"entry":[{},"Add ucto comp.list"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end if"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"end for"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In Table 2, the clustering function may parse through each name of a processed use case  to get the first noun phrase contained in the processed use case . If a component with the same name already exists, as identified by the UC cluster module , a list (\u201ccomp.list\u201d) is updated for the particular component. If a component with the same name does not exist, a new component is created and a list for the new component is created. In one example, the UC cluster module  may generate a clustered use case (UC) data set . The clustered UC data set  may include the clustered uses cases as a function of use case names as previously described and designated as UC(name) in . The clustered use cases may be available via the GUI  allowing a user to modify the clustered use cases included in the clustered UC data set  in the manner desired through a cluster modification module . The cluster modification module  may generate a modified clustered UC data set (\u2033UC(name)*) . If no modifications are made, the modified clustered UC data set  may be identical to the clustered UC data set .","When processing use case sentences, the FDAM  may restrict each acceptable use case sentence to have a simple structure, such as a noun phrase NP followed by a verb followed by a second noun phrase NP and optionally a preposition following another noun phrase NP. All noun phrases may be optionally preceded by an adjective JJ. Based on this structure, a set of use case (UC) heuristic rules may be defined to process use case sentences. A use case (UC) heuristic module  may apply the UC heuristic rules retrieved from the UC heuristic data set . In one example, the UC heuristic rules may be the UC heuristic rules  shown in . The UC heuristic module  may also retrieve the glossaries  to be used in application of the heuristic rules .","Through application of the UC heuristic rules  by the UC heuristic module , each component identified by the UC cluster module  may be assigned a default processing class termed a \u201ccontroller\u201d by the UC heuristic module . A controller may represent the \u201csystem\u201d to which the use case steps refer. In one example, the responsibility may be assigned by the UC heuristic module  to the first noun phrase NP identified as a candidate class in the system. The three noun phrases NP through NP may be extracted as candidate classes and the adjectives, if any, may be chosen as attributes of the corresponding candidate class from each sentence of each processed use case . The verb or verb phrase VB and following second noun phrase NP is indicative of the responsibility to which each processed use case  refers. According to the first UC heuristic rule HUC, the responsibility is assigned to the first candidate class referred by the first noun phrase NP or if the first noun phrase NP is the \u201csystem.\u201d Based on the second UC heuristic rule HUC, if the first noun phrase NP is a person, which may imply that the use case statement represents an action done by a system user, a responsibility is assigned to special processing class termed \u201cboundary\u201d with the component. This may denote that the responsibility is arising out of direct interaction with system user.","For example, a statement included in a processed use case  may provide \u201cSystem sends credit card information to the Payment module.\u201d In this example, the candidate classes may be the noun phrases \u201ccredit card information\u201d and \u201cpayment module.\u201d The noun phrase NP in this example is \u201csystem,\u201d which may be considered a generic term and hence not added as defined in the heuristic rules . The term for the verb phrase and second noun phrase (VB+NP) is \u201csends credit card information\u201d and because NP is \u201csystem,\u201d the responsibility of sending credit card information is assigned to the controller class of the example processed use case's parent component.","The UC heuristic module  may generate a use case class and responsibility (UCCR) data set . The UCCR data set  may include the identified analysis classes with responsibilities associated with the processed use cases . Similarly, the RS heuristics module  may generate a requirement statement class and responsibility (RSCR) data set  based on application of the RS heuristic rules  to the processed requirement statements . Both the RSCR data set  and the UCCR data set  may be received by an analysis class component assignment (ACCA) module . A cluster conversion module  may receive the modified clustered UC data set (\u2033UC(name)*) . The cluster conversion module  may convert each cluster into a design diagram component, such as a UML component. In one example, a platform used, such as the RSA tool may exposes various APIs to create UML elements, and diagrams programmatically. Since the DAT  may be implemented as a plugin to RSA, the FDAM  may use these APIs. The cluster conversion module  may implement a UML component creation API to create a UML component for a cluster. Other platforms, such as Visual Studio or ArgoUML, for example, may be similarly implemented. The cluster conversion module  may generate a diagram component data set  that is also received by the ACCA module .","Upon receipt of the UCCR data set , RSCR data set , and the diagram, component data set , the ACCA module  may assign candidate classes identified in the processed use cases  to the identified components of the functional design diagram . In one example, when evaluating the processed use cases , the UC cluster module  may determine how related a processing class is to the parent component of the use case. The UC cluster module  may generate a component affinity count for each use case parent component. The component affinity count may be incremented for each addition of a responsibility to the respective candidate class. As processing by the UC heuristics module  proceeds, the component affinity count for each processing class will be highest for a component in the corresponding use cases that is referenced the most. Once all counts are performed, the processing classes are assigned to the component for which it has the highest affinity count. In one example, the UC heuristics module may use an affinity scheme shown in Table 3 to determine the various component affinity counts. The component affinity counts may be included in the UCCR data set .",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for all usecase ucdo"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Let compbe the component such that uc\u2208 comp.list"]},{"entry":[{},"Parse each Statement and apply Use Case heuristics"]},{"entry":[{},"for all Candidate Class CCfound do"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for all responsibiity addition to CCdo"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Affinity(CC, comp) = Affinity(CC, comp) + 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end for"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end for"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end for"]},{"entry":[{},"for all Candidate Class CC: do"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Find Component Compfor Affinity(CC, comp)is maximum"]},{"entry":[{},"Assign CCas a class of comp"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end for"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The ACCA module  may generate a component assignment data set  containing the determined components and relationships of the functional design diagram . The component assignment data set  may be received by a processing step consolidation (PSC) module . In some instances, candidate classes identified by the RS heuristics module  and the UC heuristics module  may overlap. In one example, the PSC module  may determine of candidate classes identified in the processed use cases  by the UC heuristics module  are present in those identified by the RS heuristics module . If so, the responsibilities and attributes identified for a particular candidate class by the RS heuristics module  may be appended to those candidate classes as identified by the UC heuristics module . If not, the class may be designated as unclassified or as an entity class.","Classes not involved in any processing steps may be candidates for representing data or human interaction with a system. Thus, identified classes having no responsibilities may be designated as entity classes. The remaining classes may be assigned to a default component that may be subsequently manipulated by a user.","The entity classes may be further refined to determine those that would typically be attributes of other entity classes. Specifically, if an entity class does not have any attributes of its own and has an associative in-degree of one only with another (e.g., it is associated to only one) entity class, it becomes a candidate for being an attribute of that entity class. Intuitively, such a class may be used by only one other class, and because it does not have any responsibilities or attributes on its own, it is safe to say that the class acts as a data member exclusively used by the other class and does not have another function in the system. Thus, it may be better to make the class an attribute of the other class to simplify the system design.","A consolidation data set  may be generated by the PSC module . The consolidation data set  may be received by a design diagram generator (DDG) module . The DDG module  may also receive the modified cluster data set  from the cluster conversion module . The DDG module  may generate the initial functional design diagram  based on the modified cluster data set  and the consolidation data set . In one example, the functional design diagram  may be a UML diagram.","For purposes of illustration,  show example processed use cases  and processed requirement statements  and how the particular language maps to a portion of a UML diagram  through use of the FDAM . In , the relationships  are generated based on the processed use cases  as are the entity classes .","Technical design of a system may provide an implementation and runtime perspective of the system. This may describe how functional components are implemented using hardware and software infrastructure. A technical design diagram is the pictorial representation of the technical design, which may be represented through a UML diagram or other suitable diagram. A technical design creation involves a series of design decisions, influenced by the cost and the availability of infrastructure components. Here the importance of software infrastructure selection and the interaction of software infrastructure components with the functional modules may be given strong consideration. Unlike the functional design where business experts are involved, technical design decisions are taken by a technical architect.","In one example, the technical design begins with the selection of one or more appropriate architecture styles, such as \u201cpipe and filter\u201d, a web based \u201cthree tier\u201d style, a \u201chub-spoke\u201d style and so on. Subsequently, a system architect may choose a set of technical capabilities that are relevant to the style and are necessary to satisfy various non-functional requirements. Selection of appropriate capabilities is often non-trivial. For instance, consider a simple \u201cpipe and filter\u201d style for processing a stream of data through various stages. Here the system architect may decide to use a data buffering capability, a data transmission capability from one stage to another or a data transformation capability.","Based on such considerations, referring back to , the TDAM  may implement user input to convert the functional design diagram  into the technical design diagram . In performing the conversion, the TDAM module  may implement a knowledge base allowing design choices to be presented to a user. The design choices may be focused by the knowledge base and made available to a user. In one example, the knowledge base may be based on an ontology-based ontology model, such as an OWL-DL based ontology. In other examples, any other knowledge base tool, system, or model may be used.","In one example, an ontology model may be stored on the memory device  in a technical design knowledge base (TDKB) data set  (see ) that may be retrieved and implemented by the TDAM . The ontology model may include a set of technical design concepts N, the respective properties, and relationships N. The TDKB data set  may also include a set of terminological components (TBox) axioms T and a set of ground facts A that represent technical design instances.  shows a partial concept hierarchy of the technical design concept elements.","In one example, key concepts of a system design may be used to provide choices to a user allowing modification of the functional design diagram . For example, design of a particular system may begin with decisions regarding the nature of implementation. For instance, a web-based application, sophisticated web-portal, or traditional batch-type application may be implemented. This level of the design may be referred to as the technical architecture class, shown as \u201cTechnicalArchClass\u201d in the example of . This class may have several sub-classes. In one example, the technical architecture class may include subclasses dedicated to web-based applications (BasicWebBasedArchClass), web-portals (PortalArchClass), and an integration class (IntegrationArchClass) representing a combination of the other sub-classes. Allowing a user to manipulate the functional design diagram  at this level allows an entry point to the design process of a particular system.","The TDAM  may also allow a desired architecture style (ArchStyle in ) to be manipulated in the functional design diagram . In one example, this concept may refer to a set of formal design rules that allow certain types of system components and connectors to be used in modeling the system and define assembly of the components and connectors. As shown in , in a web-based system, the architecture style may include several sub-classes, such as basic web style class (BasicWebStyleClass) and integration style class (IntegrationStyleClass). The basic web style class will be elaborated on further herein as an example. However, any sub-class may be similarly instructional.","The TDAM  may also allow a desired tier arrangement to be manipulated in the design diagram. In one example, a tier may refer to a particular tier of a multi-tier architecture. The tier concept is not limited to any particular architecture style, such as web-based. In  three sub-classes of tier are shown, which are presentation tier class (PresentationTierClass), business tier class (BizTierClass), and data tier class (DataTierClass) that may represent a presentation or user interaction tier, business logic tier, and database access tier, respectively.","The TDAM  may also allow an application stereotype to be manipulated in the functional design diagram . In one example, an application stereotype may be used to specify the intent or purpose behind a design element. The FDAM  may identify a boundary or entity (see ), where stereotypes may indicate that a class is meant for user interaction or data persistence, respectively. These stereotypes may assist in modeling various design decisions in the technical design. For example, in an n-Tier architecture, entity classes should be placed in the data access tier. To capture such a design decision, an ontology concept of application stereotype (AppStereotype) may be implemented. As discussed further (see ), this concept may be implemented by the TDAM .","The TDAM  may also allow technical capability to be manipulated in the functional design diagram . In one example, the technical capability may represent a non-functional, architectural capability required by a functional model.  shows several, non-limiting capabilities of sub-classes of the technical capability class (TechCapabilityClass). For example, in , a security capability class (SecurityCapabilityClass) and data access related capability (DataSrvCapabilityClass) may be non-limiting sub-classes. These sub-class capabilities may be further broken down to provide lower-level description for a particular system.","The TDAM  may also allow manipulation of architecture service in the functional design diagram . In one example, the architecture service may provide a lower-level of granularity compared to technical capability. The architecture service (ArchitectureService) of  may include various sub-classes (not shown) that may be defined through multiple uses of the DAT . The TDAM  may also allow operations (Operation) represented by the functional design diagram  to be manipulated. Operations may refer to a service modeled by architectural services (ArchService) of a set of cohesive operations that are similar in purpose. In one example, an operation may represent an application programming interface (API) that a functional module can invoke.","The TDAM  may also allow particular commercial-off-the-shelf (COTS) products to be represented and manipulated in the functional design diagram . During system design, high-level decisions are typically made regarding a family of products that may be used to build a particular system or application. A family of products may be defined in a number of ways. One manner is to start from a particular product vendor such as IBM, Microsoft, or Oracle, or open source products or some combination. The concept of a product (Product) may represent a COTS component that implements a one or more technical functionalities. In some business applications, COTS components may play an important role during design and implementation. In the technical 1 design diagram , the notion of a product may be able to provide variability in a product range. In one example, a set of attributes of the Product concept may be implemented.","The TDKB data  set may include relationships among these concepts and restrictions on the relationships.  shows a relationship graph indicating such relationships. In , the \u201chasStyle\u201d relationship relates technical architecture class with architecture style. Through this relationship, a technical architecture class can be associated with one or more architectures styles. The relationship may be inherited by the sub-classes of technical architecture class. However, an additional restriction on this relationship for the sub-classes basic web architecture class and technical architecture class may be defined. For example, basic architecture style may be restricted to have only one architecture style, namely basic web style. The \u201chasTier\u201d relationship relates an architecture style (ArchStyle) with one or more Tier concepts. In one example, for the basic webstyle class, the style may have only three tiers, such as the presentation tier (PresentationTierClass), business tier (BizTierClass), and a data tier.","The application stereotype concept may be related to the architecture style (ArchStyle), as well as the tier concept. If a stereotype, such as a boundary, is associated with a particular tier, such as the presentation tier, this may imply that that the component present in this tier is meant to perform the task implied by the boundary concept. The \u201chasStereotype\u201d relationship is inverse functional in that a tier may have multiple stereotypes but a stereotype can be associated with only one tier.","The architecture style (ArchStyle) concept is related to one or more technical capability (TechCapability) concepts through the \u201chasCapability\u201d relationship. A technical capability in turn may include a set of architecture service concepts defined by the hasService relationship. The \u201chasOperations\u201d relationship relates architecture service with operations. Through this relationship, the multiple operations that architecture service may include may be modeled. The relationship \u201chasCapability\u201d is generic and broad. These relationships may be restricted for individual subclasses. For example, basic web style class may be restricted to a few technical capability concepts.","The technical architecture concept may be related to one or more product family concepts as shown in . A product may provide an implementation of various technical capabilities and services. To model these characteristics, the relationship \u201cimplementsArchService\u201d may be used.","The information may be generated through creation of instances using the concepts and the various relationships may be used to expand the information in the TDKB data set . Based upon this TDA knowledge base, the TDAM  may receive the functional design diagram  from the DAT. As shown in , the TDAM  may include a model processing (MP) module  that may interpret and determine the components of the functional design diagram  generated by the FDAM  and generate a processed design diagram (PDD) data set  containing the processed functional design diagram . In one example, the TDAM  may be configured to assist during a series of design decisions regarding generation of the technical design diagram  based on the functional design diagram .","In one example, the TDAM  may include a technical design (TD) module . The TD module  may receive the PDD data set  and allow selection through the GUI  of an appropriate technical architecture instance and a particular stereotype associated with it. For example, upon selection of technical architecture instance, such as basic web based architecture, the TD module  may retrieve \u201chasStyle(BasicWebBasedArchitecture)\u201d, which may refer to the set of all architectural style instances related to the basic web based architecture instances for selection. Upon selection, the TD module  may generate a first design decision (FDD) data set  that may also include the functional design diagram .","A technical capability and services selection (TCSS) module  may receive the FDD data set . The TCSS module  may assist in selection of an appropriate architecture service pertaining to the chosen style. In one example, the TCSS module  may retrieve the TDKB data set . The TCSS module  may allow selection of an appropriate architecture service pertaining to the style selected using the TD module . The TCSS module  may retrieve all instances of the architecture style related to the tier class, and for each tier, each capabilities for each architecture style instances related to each tier. In one example, the TCSS module  may retrieve all instances of \u201cprovideCapability\u201d for each tier and allow all capabilities having the relationship \u201chasCapability\u201d with the selected style. In this manner, the TDAM  filters the candidate capabilities and services based on the ontology relationships maintained in the TDA knowledge base. The TCSS module  may generate a second design decision (SDD) data set . The SDD data set  may include selections made using the TCSS module  and the functional design diagram .","A COTS module  may receive the SDD data set  and allow selection of particular COTS products that may be selected and represented in the initial functional design diagram . The COTS module  may retrieve a set of COTS based on the \u201cimplementService\u201d relationship (see ). The appropriate COTS products may be provided to a user for selection. The COTS module  may generate a third design decision (TDD) data set  that may include the SDD data set  with the COTS products selected through the COTS module .","The TDD data set  may be received by a distribution module (DIST)  that distributes the components and classes of the functional design diagram  across tiers. In one example, if a component or class requires presence in multiple tiers, the distribution module  may automatically split them into more fine grained component and classes for distribution. In one example, a routine may be used by the distribution module  for creation of a UML-based diagram as shown in Table 4 below:",{"@attributes":{"id":"p-0083","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"proc getTierForClass(UML - Class cl)"},{"entry":"t \u2190 \u22a5"},{"entry":"t \u2190 t, where tis an instance of TierClas such that hasStereotype(t)"},{"entry":"contains the stereotype of cl."},{"entry":"return t"},{"entry":"end proc"},{"entry":"for all UML - Components comp do"},{"entry":"capabilityList \u2190 TechnicalCapability instances requred by comp"},{"entry":"{Assigned manually}"},{"entry":"tierList \u2190 \u00d8"},{"entry":"for all tc in capaiblityList do"},{"entry":"tierList \u2190 instances of TierClass with which tc is associated"},{"entry":"end for"},{"entry":"end for"},{"entry":"for each UMLClass cl in comp,tierList \u2190 tierList \u222a getTierForClass(cl)"},{"entry":"for all t \u2208 tierList do"},{"entry":"Split comp to a sub-component compand assign to t."},{"entry":"for all UML-Class cl in comp do"},{"entry":"if (t = getTierForClass(cl)), assign cl to comp."},{"entry":"end for"},{"entry":"end for"},{"entry":"end for"},{"entry":"for all UML-Class cl that are not associated with an ycomponet do"},{"entry":"if (t \u2190 getTierForClas(cl)) \u2260 \u22a5, assign cl to t."},{"entry":"end for"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"If a class or component is not assigned to a tier, the distribution module  may mark the unassigned class or component for user intervention, as show in Table 4. The distribution module  may generate a fourth design decision (FoDD) data set  configured to include processing of the functional design diagram  by the distribution module . The FoDD data set  may be received by a modification module  allowing user input to modify the information used to generate the technical design diagram . The modified diagram information data set  may be received by a final design diagram generation (FDDG) module  to generate the technical design diagram . The technical design diagram  may be displayed on the display  as the displayed design diagram  discussed with regard to . In one example, the FDDG module  may generate the technical design diagram  by converting each tier to a diagram package, such as UML package. The FDDG module may also convert each sub-component in a tier to a package under each tier package. The FDDG module  may also place each class assigned to a tier (or tier sub-component) inside an appropriate package. The FDDG module  may also create a package under an appropriate tier for each COTS product selected through the TDAM .",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIGS. 9-10","FIG. 9"],"b":["100","112","100","117","900","112","100","104","116","117","300","124","118","902","112","118","904"]},"The FDAM  may apply the UC heuristic rules  from the UC heuristics data set  to the processed use cases  (block ). The FDAM  may determine the class and responsibilities of the processed use cases  (block ). The FDAM  may cluster the processed use cases  (block ). The FDAM  may determine if modification of the use case clusters is desired (block ). If modification is desired, the processed use case clusters may be modified based on received input (block ).","The FDAM  may assign candidate classes to the components previously identified (block ). In one example, assignment of candidate classes may be performed using an affinity-based operation shown in Table 4. The FDAM  may process the identified components (block ) and determine of candidate classes identified in both the use cases and requirement statements. If a candidate class in a processed requirement statement  is present in the processed use cases , the responsibilities and attributes found for these candidate classes are appended to previously-assigned classes. If not, the candidate class may be designated as unclassified or as an entity class. Candidate classes not involved in any processing steps may be candidates for representing data or human entity. Any classes that do not have responsibilities may be designated by the TDAM  as entity classes. Any other candidate classes may be assigned to a default component and may be subsequently altered by a user. Based on the components identified, the TDAM  may generate a functional design diagram (block ), such as the functional design diagram , which may be transmitted to the display .","In , the TDAM  may process the functional design diagram  (block ). Upon processing the functional design diagram , the TDAM  may allow selection of a particular technical architecture (block ). Upon selection of the technical architecture, the TDAM  may allow selection of technical capability and services (block ). The TDAM  may then allow selection of particular COTS products that may be used in the system to be represented through a design diagram (block ). Upon selection of the COTS products, the TDAM  may distribute design diagram components to the existing tiers (block ). The TDAM  may determine if modification of the current form of the design diagram is desired (block ). If modification is desired, the TDAM  may modify the current form the design diagram using any received modifications (bloc ) and subsequently generate the technical design diagram  (block ). If no modifications are desired, the TDAM  may generate the technical design diagram , which may be transmitted on the display .",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIGS. 11-16","FIG. 11","FIG. 11"],"b":["100","1100","117","115","1100","100","100","100","102","1100","1102","1102","1104","1106","1108","1110"]},{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 12","FIG. 12","FIG. 12"],"b":["1200","112","1200","1200","100","1202","100","1202","1200"]},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 13","b":["1100","1300","123","1300","112","1302","1100","1304","1300","1100","1306","1308","1300","1300","1308","1302"]},"Upon generation of functional design diagram , the diagram may be further modified using the TDAM  to generate a technical design diagram. In one example, the interface may allow a drop-down-style selection window to provide a Technical Design Assistant Tool option  as shown in . The Technical Design Assistant Tool option  may allow selection of \u201cGenerate Technical Design\u201d that may initiate the TDAM . Upon initiation of the TDAM , the interface  may include a technical services selector window  as shown in . The window  may include various selection fields. For example, the window  may include an architecture style selection field . The field  may coincide with the TD module  of the TDAM  allowing a user to select a particular architecture style.","The window  may also include a functional component selection field  and a service selection field . The selection fields  and  may coincide with the TCSS module  of the TDAM . After selections are completed, selection the \u201cNext\u201d button may provide a product selection window  as shown in  allowing selection of particular COTS products that may be available. The product selection window may coincide with the COTS module  of the TDAM . The window  may include various selection fields  allowing selection of various COTS products that may be used. Upon selection of the desired COTS products, selection of the \u201cNext\u201d button may provide a preview window  shown in . The preview window  may include interactive fields allowing modification of the functional design diagram . The preview window  may coincide with the modification module  of the TDAM . Upon selection of the \u201cFinish\u201d button , the technical design diagram may be completed by the TDAM  and may be presented in the diagram window .","While various embodiments of the innovation have been described, it will be apparent to those of ordinary skill in the art that many more embodiments and implementations are possible within the scope of the innovation. Accordingly, the innovation is not to be restricted except in light of the attached claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The disclosure may be better understood with reference to the following drawings and description. The components in the figures are not necessarily to scale, emphasis instead being placed upon illustrating the principles of the invention. Moreover, in the figures, like-referenced numerals designate corresponding parts throughout the different views.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 5A-5C"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7","b":"5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 9","FIG. 2"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 10","FIG. 8"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIGS. 11-17","FIG. 1"]}]},"DETDESC":[{},{}]}
