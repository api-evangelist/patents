---
title: System and method for filesystem deduplication using variable length sharing
abstract: Embodiments of the present invention are directed to a method and system for filesystem deduplication that uses both small fingerprint granularity and variable length sharing techniques. The method includes accessing, within an electronic system, a plurality of files in a primary storage filesystem and determining a plurality of fingerprints for the plurality of files. Each respective fingerprint may correspond to a respective portion of a respective file of the plurality of files. The method further includes determining a plurality of portions of the plurality of files where each of the plurality of portions has the same corresponding fingerprint and accessing a list comprising a plurality of portions of files previously deduplicated. A portion of a file of the plurality of files not present in the list may then be deduplicated. Consecutive portions of variables lengths having the same corresponding fingerprints may also be deduplicated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08521704&OS=08521704&RS=08521704
owner: Symantec Corporation
number: 08521704
owner_city: Mountain View
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Exemplary Operating Environment","Exemplary Systems and Methods for Filesystem Deduplication Using Variable Length Sharing"],"p":["Embodiments of the present invention are generally related to digital computer systems and digital storage.","As technology advances, data storage is becoming increasingly important and data storage capacities are increasing rapidly. Correspondingly, the size of data storage arrays and their demands for storage have increased rapidly. Thus, ever increasing amounts of data are required to be highly available. As a result, conservation of storage space and use of space saving techniques has become particularly important.","In order the save space, deduplication is a way of performing duplicate data detection and elimination in storage. Previous solutions have been in the area of backup deduplication which are not well suited to primary or live storage. Previous attempts to do inline deduplication for filesystem storage, or deduplication before data is written to the disk from an application, have significant performance issues. For example, when an application makes a request to write data, the data must be compared to the data currently stored prior to being written. This penalty results from the need to compare data prior to writing the data. Even if there is not a write operation as a result of the deduplication process, there is still a performance penalty which negatively impacts the application performance. The penalty may be reduced if a large amount of memory is used to prevent having to perform lookups on the storage. However, this is not practical in most systems.","File level deduplication is not feasible for primary storage because the signification resources involved in comparing the files. File level deduplication does not provide acceptable deduplication percentages generally and in particular when files are modified by a single byte.","Thus, a need exists to efficiently deduplicate data of a filesystem on primary storage so that large amounts of RAM memory are not required and the applications do not experience a performance penalty.","Accordingly, embodiments of the present invention provide a system and method for filesystem deduplication that uses variable length sharing. Embodiments of the present invention are operable to perform periodic deduplication of a primary storage filesystem with significant resource utilization and storage savings. Embodiments are operable to perform variable length sharing or deduplication with small fingerprint granularity thereby deduplicating consecutive portions of files having same content. Variable length sharing further allows embodiments of the present invention to avoid making calls to perform sharing or deduplication operations for portions of a file previously shared as part of a larger share. Embodiments of the present invention are thus operable to perform efficient deduplication and maintain an efficient file geometry (e.g., by deduplicating multiple matching portions of files).","In one embodiment, the present invention is implemented as a method for filesystem deduplication. The method includes accessing, within an electronic system, a plurality of files in a primary storage filesystem and determining a plurality of fingerprints for the plurality of files. In one embodiment, each respective fingerprint has a small fingerprint granularity and corresponds to a respective portion of a respective file of the plurality of files. The method further includes determining a plurality of portions of the plurality of files where each of the plurality of portions has the same corresponding fingerprint and accessing a list comprising a plurality of portions of files previously deduplicated. The list may further include deleted or truncated files. A portion of a file of the plurality of files not present in the list may then be deduplicated. The portion of the file of the plurality of files may then be added the list. The fingerprint corresponding the portion of the file may be verified prior to deduplication. In one embodiment, the deduplicating further comprises setting a metadata pointer for a portion of a file. The deduplicating further comprises deduplicating consecutive portions of variable lengths of the plurality of files having the same corresponding fingerprints in response to a single function call. The consecutive portions of the plurality of files having the same fingerprint may then be added to the list. In one embodiment, the deduplicating is performed by via a kernel.","In another embodiment, the present invention is implemented as a non-transitory computer readable storage medium having stored thereon, computer executable instructions that, if executed by a computer system cause the computer system to perform a method for filesystem deduplication including accessing, within an electronic system, a plurality of files in a primary storage filesystem and determining a plurality of fingerprints for the plurality of files. In one embodiment, each respective fingerprint has a small fingerprint granularity and corresponds to a respective portion of a respective file of the plurality of files. The method further includes determining a plurality of portions of the plurality of files where each of the plurality of portions has the same corresponding fingerprint and accessing a list comprising a plurality of portions of files previously deduplicated. The list may further include deleted or truncated files. A portion of a file of the plurality of files not present in the list may then be deduplicated. The portion of the file of the plurality of files may then be added the list. The fingerprint corresponding the portion of the file may be verified prior to deduplication. In one embodiment, the deduplicating further comprises setting a metadata pointer for a portion of a file. The deduplicating further comprises deduplicating consecutive portions of variable lengths of the plurality of files having the same corresponding fingerprints in response to a single function call. The consecutive portions of the plurality of files having the same fingerprint may then be added to the list. In one embodiment, the deduplicating is performed by via a kernel.","In yet another embodiment, the present invention is implemented as a storage system comprising a computer system having one or more processors coupled to a computer readable storage media and executing computer readable code which causes the computer system to implement a process for filesystem deduplication including accessing, within an electronic system, a plurality of files in a primary storage filesystem and determining a plurality of fingerprints for the plurality of files. In one embodiment, each respective fingerprint has a small fingerprint granularity and corresponds to a respective portion of a respective file of the plurality of files. The method further includes determining a plurality of portions of the plurality of files where each of the plurality of portions has the same corresponding fingerprint and accessing a list comprising a plurality of portions of files previously deduplicated. The list may further include deleted or truncated files. A portion of a file of the plurality of files not present in the list may then be deduplicated. The portion of the file of the plurality of files may then be added the list. The fingerprint corresponding the portion of the file may be verified prior to deduplication. In one embodiment, the deduplicating further comprises setting a metadata pointer for a portion of a file. The deduplicating further comprises deduplicating consecutive portions of variable lengths of the plurality of files having the same corresponding fingerprints in response to a single function call. The consecutive portions of the plurality of files having the same fingerprint may then be added to the list. In one embodiment, the deduplicating is performed by via a kernel.","Reference will now be made in detail to various embodiments in accordance with the invention, examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with various embodiments, it will be understood that these various embodiments are not intended to limit the invention. On the contrary, the invention is intended to cover alternatives, modifications, and equivalents, which may be included within the scope of the invention as construed according to the appended Claims. Furthermore, in the following detailed description of various embodiments in accordance with the invention, numerous specific details are set forth in order to provide a thorough understanding of the invention. However, it will be evident to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances, well known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the invention.","Some portions of the detailed descriptions that follow are presented in terms of procedures, logic blocks, processing, and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. In the present application, a procedure, logic block, process, or the like, is conceived to be a self-consistent sequence of operations or steps or instructions leading to a desired result. The operations or steps are those utilizing physical manipulations of physical quantities. Usually, although not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system or computing device. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as transactions, bits, values, elements, symbols, characters, samples, pixels, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions, it is appreciated that throughout the present disclosure, discussions utilizing terms such as \u201cdeactivating,\u201d \u201cdisabling,\u201d \u201cfreezing,\u201d \u201cre-activating,\u201d \u201cenabling,\u201d \u201cthawing,\u201d \u201csending,\u201d \u201cdetermining,\u201d \u201cflushing,\u201d \u201cresponding,\u201d \u201cgenerating,\u201d \u201cmaking,\u201d \u201cblocking,\u201d \u201caccessing,\u201d \u201ctaking a snapshot,\u201d \u201cassociating,\u201d \u201callowing,\u201d \u201cupdating,\u201d or the like, refer to actions and processes of a computer system or similar electronic computing device or processor. The computer system or similar electronic computing device manipulates and transforms data represented as physical (electronic) quantities within the computer system memories, registers or other such information storage, transmission or display devices.","It is appreciated that present systems and methods can be implemented in a variety of architectures and configurations. For example, present systems and methods can be implemented as part of a distributed computing environment, a cloud computing environment, a client server environment, etc. Embodiments described herein may be discussed in the general context of computer-executable instructions residing on some form of computer-readable storage medium, such as program modules, executed by one or more computers, computing devices, or other devices. By way of example, and not limitation, computer-readable storage media may comprise computer storage media and communication media. Generally, program modules include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or distributed as desired in various embodiments.","Computer storage media can include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media can include, but is not limited to, random access memory (RAM), read only memory (ROM), electrically erasable programmable ROM (EEPROM), flash memory, or other memory technology, compact disk ROM (CD-ROM), digital versatile disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information and that can be accessed to retrieve that information.","Communication media can embody computer-executable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media can include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency (RF), infrared and other wireless media. Combinations of any of the above can also be included within the scope of computer-readable storage media.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","102","104","106","108","110","100"],"i":["a","c","a","b","a","b"]},"Client systems -access information on storage arrays -via servers -using, for example, a web browser or other suitable client communication software (not shown). Servers -perform requests received from clients -.  depicts the use of network  such as the Internet for exchanging data, but the present disclosure is not limited to the Internet or any particular network-based environment.","Servers -can have multiple clients (e.g., clients -) connected thereto. Servers -can provide access to data for various types of applications including, but not limited to, database servers, network file system (NFS) servers, and application servers (e.g., billing). For example, applications and servers might have thousands of people accessing them from different locations, thus the applications and servers need to be highly available and the cluster fault tolerant. Servers -may be linked to storage arrays -in a variety of ways including, fibre channel.","Server -executes deduplication managers -which perform periodic deduplication of data of in storage array -. Deduplication managers -communicate with storage arrays -via SAN fabric . Deduplication managers -optimize deduplication by performing variable length sharing and skipping redundant deduplication function calls.","Embodiments of the present invention provide filesystem deduplication advantageously using variable length sharing with small fingerprint granularity. Embodiments of the present invention further provide efficient file geometries via variable length sharing.","Deduplication is the process of reducing storage needs by identifying and eliminating redundant data within the files. In other words, deduplication is a method of data compression by eliminating redundant copies of data. Primary storage or filesystem deduplication can be achieved by inline, near-line, and periodic methods. Inline deduplication identifies redundant data before writing to storage medium. For inline deduplication, eliminating duplicate data can be done by not writing any duplicate data to the disk and within the file definition pointing to the existing copy of the data. Embodiments of the present invention facilitate filesystem deduplication to increase storage utilization, reduce data that is sent over network connections (e.g., wide area network (WAN)) for replication and data recovery, and to provide efficient use of disk space for higher retention periods.","Sharing, as described herein, means that if two blocks or two portions of different files are identical, one block is freed and the portion that corresponds to the freed block is pointed to in the other file. In other words, sharing may include changing the metadata of a file to point to one copy of data. Embodiments of the present invention support recording a reference count for each block, such that if a file containing a shared block is deleted, the shared block is not deleted and thereby available for access as part of a file with a pointer to the shared block.","Embodiments of the present invention are operable to uniquely identify data, identify duplicate data, and eliminate duplicate data within a filesystem. With periodic duplication, redundant data is detected and eliminated after it has been written to the storage medium. Further, periodic deduplication performed by embodiments of the present invention may be scheduled during a lower load time of the filesystem (e.g., at night or during low load\/idle). Identification, duplicate retention, and sharing can thus be scheduled. Verification may be performed during block sharing due to the time between fingerprinting and duplicate elimination because the file remains live. In one embodiment, during periodic deduplication a duplicate data advisory may be evaluated for correctness (e.g., verified) and if valid, data is replaced by a pointer to an existing data chunk while a newly written data chunk is freed. In one embodiment, blocks are shared within a filesystem boundary. It is appreciated the periodic deduplication can handle deletes and truncates more efficiently than deduplication.","In one embodiment, files are detected periodically, fingerprinted, and mapping of fingerprints is stored. Duplicate detection may be done out of band thereby making the memory requirement negligible as compared to inline deduplication.","It is appreciated that embodiments of the present invention support variable size matching. It is noted that variable size matches with inline deduplication is extremely difficult due to the memory requirements and performance impact. Embodiments of the present invention are operable to perform variable size matches based on achieving larger block sharing granularity than the granularity of the fingerprinting which is small in accordance with embodiments of the present invention.","Filesystem deduplication can be performed at the file level and the sub-file level. With sub-file level deduplication, a file is broken into several units and each unit is independently evaluated for possible duplicates in the entire filesystem. Sub-file level deduplication can thus significantly increase the rate of deduplication. It is appreciated that sub-file level deduplication may involve more sophisticated duplicate detection and maintenance.","The size of each unit to which the file is broken into is an important factor in sub-file level deduplication. It is appreciated that the smaller the size, the greater the possibility of finding duplicates and more storage can be saved. However, this results in an increase in the number of operations to address the data per file in the filesystem, which may negatively impact performance. In one embodiment, 90% of space optimizations are achieved when the granularity of the sub-file unit used for fingerprint is in the 4K, 8K, 16K, and 32K range.","Embodiments are operable to separate out the sub-file unit size and the actual share or deduplication size, thereby maintaining an aggressive match prospect by having a small sub-file unit size while encouraging large matches in the filesystem. Embodiments of the present invention thus do not compromise on the maximum sharing or space saving that can be achieved.","In one embodiment, the sub-file unit used for filesystem deduplication is 4K (or the filesystem block size if larger than 4K) with the possibility of a higher sub-file unit size in multiples of the filesystem block size. Of course, this value is exemplary. Sub-file mapping of data blocks may be represented by a quadruple of data, inode number, logical offset, and size.","In one embodiment, the deduplication process can be administered with a plurality of components including a deduplication administration daemon, deduplication administration command line interface (CLI), command line interface shell (CLISH), and a user interface. The deduplication administration daemon is operable to maintain configuration (e.g., configuration ), schedule, and perform management for each filesystem in a cluster for deduplication. The deduplication administration CLI is operable to interact with the deduplication administration daemon to query, schedule, start and stop deduplication tasks for a filesystem. The CLISH is operable to function as a fileStore console interface that interacts with the deduplication administration CLI. The user interface is operable to function as a Volume Manager (VOM)\/FileStore user interface that interacts with the deduplication administration CLI.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2A","b":["200","202","204","208","210","216","210","218","224","226","204","208","210","216","224","218"]},"API layer  comprises file data  and file input\/output (I\/O) . File data  may comprise a file change log(FCL) for tracking changes to files and checkpoints for a filesystem (e.g., filesystem ). File I\/O  portion of API layer  comprises functions for performing I\/O operations via filesystem .","Filesystem  performs functions for accessing and managing data in storage . It is appreciated that in one embodiment, filesystem  is a primary or live storage filesystem actively being used to support applications. Storage  includes deduplication datastore  for storing data for use in deduplication by embodiments of the present invention. Configuration  includes settings for periodic deduplication performed by embodiments of the present invention including a predetermined schedule for deduplication and system load settings for deduplication. Configuration  may be accessed by scan engine , share engine , and by deduplication engine .","Scan Engine  is operable to uniquely identify data which serves as a basis for deduplication. In one embodiment, scan engine  determines fingerprints based on scanning the data on storage . In one embodiment, fingerprinting using a cryptographic hashing algorithm is used to create a unique signature for a given input. It is appreciated that embodiments of the present invention may use other methods to uniquely identify data. Each portion of data resulting in a given fingerprint (e.g., fingerprint FP) for a given size of data (e.g., size S) are duplicates of each other. Files may be scanned and fingerprinted at a small fingerprint granularity (e.g., 4K or the filesystem block size in accordance with embodiments of the present invention). Scan engine  may report on possibility of space savings-pre-deduplication and report on the space saving for a deduplicated filesystem.","In one embodiment, the location of a portion of a file is represented with respect to the file identifier (ID) and the data is represented by a fingerprint. Each fingerprint may be mapped or correspond to an <inode, offset> pair. Each <inode, offset> pair for a single fingerprint may be arranged in a group, known as a duplicate group. A database may be used to map a data location to the corresponding fingerprint and the size. It is appreciated that with inline deduplication, the data identification or fingerprinting is done in the input\/output (I\/O) write path. With periodic deduplication, the storage media is scanned during periods of system inactivity, such as at night, for changes to achieve data identification.","Verification of actual data may be performed before a share\/elimination is done for periodic deduplication using an algorithm (e.g., fingerprint) that is sufficiently strong. Scan engine  is further operable to identify new or changed data. Scan engine  tracks and determines the data that is present, changed, and added to the filesystem. Scan engine  may perform a full scan of the filesystem for the initial run, and\/or perform incremental detection, for changes including deletes, truncates, modifications, and additions to the filesystem. In one embodiment, scan engine  scans the filesystem for changes and submits the changes (e.g., deletes\/truncates\/modification\/adds  via API ) to the deduplication engine .","In one embodiment, scan engine  interfaces with deduplication engine  or duplicate identification component to generate the mapping of data and its location. For each filesystem, scan engine  may use one or each of the following configuration parameters (e.g., from configuration ) for a filesystem: list of directories, type of files, frequency, and age of files.","In one embodiment, scan engine  uses parallel processing for scanning the filesystem using a thread pool. Each thread in the pool may use its own connection to deduplication engine . After the filesystem has been scanned and the data is mapped (e.g., fingerprinted), each connection to deduplication engine  may be closed. A new connection may then be opened to deduplication engine  and based on a schedule (e.g., periodic deduplication schedule based on machine load) duplicates may be identified or share engine  may be initialized. During identification of duplicates, deduplication engine  may be signaled to process the data submitted thus far and identify the duplicates. The duplicate detection may be done asynchronously and calls to deduplication engine  may return immediately. In one embodiment, a ProcessDuplicates function is invoked in deduplication engine  in asynchronous mode. When share engine  is invoked, share engine  may control requesting and processing of matches as is described further below.","Scan engine  may then stop deduplication engine  and the checkpoint that was previously created and mounted is un-mounted and converted to a \u201cno data\u201d checkpoint. This is due to the fact that the checkpoint does not need to provide data in the future and a \u201cno data\u201d checkpoint minimizes the impact on the filesystem. This checkpoint may then be used in future incremental deduplication as a time reference as well as to detect the block level changes to the files.","Deduplication engine  is operable for processing of duplicates, perform duplicate detection, and maintain a database. Deduplication engine  operates on the data created and periodically updated by scan engine  (e.g., fingerprinted) to determine or build advisory sets of duplicate data in the filesystem. In one embodiment, deduplication engine  processes the fingerprints and determines if a fingerprint is present in more than one file or more than one place in the same file. Each advisory set may comprise for each fingerprint known existing data along with its location and identical new data and its location. Deduplication engine  may maintain a log of submissions and on request from share engine  processes and delivers duplicate block advisory sets  (e.g., via API ).","In one embodiment, deduplication engine  may support a set of APIs (e.g., API ) for optimized filesystem activities comprising fingerprinting of data, processing inodes (e.g., instead of filenames), purging based on deleted and truncated files, on-demand processing for duplicate detection, efficient delivery of duplicate of advisory sets, and delivering statistics for analysis. Embodiments of the present invention may support asynchronous processing of fingerprints and determination of duplicates.","Sharing engine  is operable to perform deduplication based on the advisory sets generated by deduplication engine . In one embodiment, the share engine  determines whether the data needed to be shared (e.g., deduplicated) or has already been deduplicated or shared. Share engine  is operable to keep track of regions or portions of files that have been previously deduplicated. If the data has not been shared, share engine  instructs filesystem  to share or eliminate the new data and point to or reference existing data.","In one embodiment, the share engine  processes the advisory sets and may post duplicate block advisories to filesystem  which verifies the blocks in the advisory and either eliminates duplicate blocks or rejects the advisory. In one embodiment, the share engine  processes the result from the filesystem (e.g., the size of the match or the number of matched portions) before proceeding to process the next duplicate advisory.","Share engine  may control sharing by writing pointers, freeing up storage, and determining whether to make a call to the kernel to perform deduplication. Share engine  processes fingerprints which have more than one metadata entry associated with the fingerprint, reflecting there is a potential duplicate case. In one embodiment, upon finding a match, share engine  calls the kernel to do the matching or deduplication. Embodiments of the present invention employ variable length sharing, therefore the kernel will determine and respond with a match size. The match size may be larger than the fingerprint granularity and thereby indicating that the consecutive portions of the files match. Share engine  is operable to determine a range based on the match size. Subsequent locations corresponding to the fingerprints within the range may then be are then excluded from deduplication.","In one embodiment, share engine  may be initiated for synchronous duplicate detection from deduplication engine . Share engine  may then request the duplicate advisory sets. The advisory sets may be received in the following exemplary form: <fingerprint> <list of known data locations> <list of new data locations> <size>.","The requests for duplicate advisory sets may be repeated for as many fingerprints as were updated or added in the latest deduplicate detection. Share engine  may then select a data location (e.g., inode and logical offset) from the list of known data locations. Then for each corresponding data location from the list of new data locations, a deduplicate function may be invoked (e.g., via an API) for block sharing for the corresponding size.","In one embodiment, using variable length sharing, the deduplicate function can make a match more than the requested size and honor directionality, share engine  may thus facilitate a large match without comprising the quantity of matches. In doing so, share engine  will eliminate a significant amount of calls to the deduplicate function itself thereby increasing the speed of the block sharing process. In one embodiment, the ratio of the number of duplicate blocks to the number of deduplicate function calls is approximately the deduplication ratio for the data set.","In one embodiment, the following scheme may be used: a single data location is not repeated in the advisory sets and once a data location has been marked shared, the data location is not shared elsewhere. It is noted that before the sharing is started, multiple islands of shared data for same fingerprint may exist.","In one embodiment, an exclusion list and an elimination list may be used. The exclusion list and the elimination list may each contain inodes and offset ranges. When a call is made to share a block (e.g., <f1, Offset0> to <f2, offset0>), the first pair is designated as the primary pair. An adaptive evaluation is made so that, if possible, a larger share is created by comparing additional data (e.g., consecutive portions of two files). For example, a single call may share all the blocks of both of the files. When a share occurs greater than the fingerprint granularity, two exclusion list entries are added, one for each file. When the next call for f1 and f2 in the range of the share, the pairs are sorted based on their availability on the exclusion list. If the pair exists in the exclusion list, that pair is deemed suitable for becoming the primary pair. If each pair is in the exclusion list, the duplicate group is skipped. Thus, one call may be to perform verification and one call may be performed to do the sharing.","In one embodiment, if a variable length sharing operation returns a size greater than the fingerprint granularity then any requests for sharing or deduplication within the match size or range will be excluded from being sent further. For example, if the first 10K of two files are determined to match via variable length sharing operation then requests to match portions of the files from 0K to 10K are excluded from being sent further after the first variable length sharing operation is performed. It is appreciated that conventional approaches involve matching only a single granularity unit or block and thus do not perform variable length sharing.","In one embodiment, deleted and truncated files are put in an elimination list which is used to exclude files from the deduplication process. It is noted that embodiments may be able to achieve 1:10 to 1:40 reduction in the number of calls to share or deduplicate.","Scan engine  and share engine  may be operable to operate in three modes comprising: full deduplication mode, incremental deduplication mode, and dry run deduplication mode. In one embodiment, the scan engine  and share engine  may reside in a single executable which may be invoked per filesystem in one of the modes supported by the filesystem.","Full deduplication mode comprises scanning the entire filesystem and performing an end-to-end deduplication including duplicate detection and elimination of duplicates. Incremental deduplication mode comprises detecting the delta changes in the filesystem (e.g., changed files), purging\/updating the duplicate information, and performing duplicate elimination. This mode may be performed when a prior and relevant full deduplication is detected.","During full deduplication mode, scan engine  may perform a complete tree walk of the entire filesystem. In one embodiment, any residue of previous scans (e.g., deduplication database, snapshots, and file change log markers) may be discarded. Full deduplication mode may begin with enabling the file change log(FCL) on the filesystem and creating a named checkpoint on the filesystem. For example, a checkpoint \u201cprev_ckpt\u201d may be created and mounted on a directory for filesystem. Deduplication engine  may then be configured and initialized for the filesystem. The files of the filesystem may then be read in blocks (e.g., 4K or the block size of the filesystem). Scan engine  can then send data, location, and size for each block to deduplication engine  (e.g., using a deduplication engine API). In one embodiment, scan engine  makes a call of the format: AddBlock (<data>, inode, offset, size) to deduplication engine . In one embodiment, if the data scanned and time taken in sufficiently large, full deduplication mode may initiate an incremental deduplication mode to consolidate the changes that have happened during the course of full deduplication mode.","Dry run deduplication mode comprises scanning the entire filesystem and reporting on possible space savings by identifying duplicate data. The determinations made during dry run deduplication mode may be used to perform full deduplication.","In one embodiment, dry run deduplication mode may have several differences from full deduplication mode. During dry run deduplication mode, any checkpoint or deduplication database may be saved before proceeding. Upon scan completion, duplicate processing may be requested synchronously. If there was nothing to save at the beginning of the dry run or at the end of the dry run, an option may be presented to convert from dry run deduplication mode to full deduplication mode. Alternatively, the checkpoint and deduplication database may be discarded at the end of the dry run deduplication mode. If state information (e.g., checkpoint or deduplication database) was previously saved, it may be restored.","Dry run deduplication mode may rely on statistics generated from duplicate processing to report a space saving percentage that could be achieved if the filesystem is deduplicated. The percentage may be suggested by calculating the number of potential blocks that can be freed. In one embodiment, the deduplication database may reside in the filesystem itself and may consume a small percent of storage.","During dry run deduplication mode, the amount of actual space savings for a deduplicated filesystem may also be presented. It is noted that this would indicate how much space one would need if deduplication was undone on the filesystem (e.g., re-hydrated).","In one embodiment, scan engine  and share engine  use regular and \u201cno data\u201d checkpoints to detect changes in a filesystem along with a filesystem file change log (FCL). For block sharing, the scan engine  and share engine  may use ioctl (input\/output control) calls to initiate sharing. The ioctl calls may support verifying and sharing a pair of blocks (e.g. verification may include detecting if the two pairs already point to the same physical block), directional sharing (e.g., honor the request on the basis of \u201cprimary block\u201d and \u201cduplicate block\u201d), honoring the minimum size requests, and attempting longer shares if feasible (e.g., limited by the boundaries consecutive matching portions and maximum match size) and return size actually shared.","In one embodiment, share engine  is operable to handle a plurality of errors. When a new data inode error occurs, the share engine adds the inode to the new data exclusion list. When there is a new data offset error, the share engine adds the current offset and infinite range to new data exclusion list. When there is a known data inode error, the share engine adds the inode to the known data exclusion list. When the known data offset error occurs, the share engine adds the current offset and an infinite range to the known data exclusion list.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 2B","b":["250","252","254","260","270","280","252","210","254","260","270","280","264","274","284"]},"Call  originates from user space  and may include a request to deduplicate portions of two files having corresponding fingerprint FP. In response to call , kernel  performs sharing based on fingerprint FP. Kernel  further determines a largest possible match comprising fingerprints FP, FP, FP, and FP. Files having consecutive portions corresponding to fingerprints FP, FP, FP, and FP are then deduplicated. Kernel  returns result  which includes the match size of four along with the corresponding fingerprints FP, FP, FP, and FP.","Call  originates from user space  and may include a request to deduplicate portions of two files having corresponding fingerprint FP. In response to call , kernel  performs sharing based on fingerprint FP. Kernel  further determines a largest possible match comprising fingerprints FP and FP. Files having consecutive portions corresponding to fingerprints FP and FP are then deduplicated. Kernel  returns result  which includes the match size of two along with the corresponding fingerprints FP and FP.","Call  originates from user space  and may include a request to deduplicate portions of two files having corresponding fingerprint FP. In response to call , kernel  performs sharing based on fingerprint FP. Kernel  further determines a largest possible match comprising fingerprints FP, FP, FP, FP, and FP. Files having consecutive portions corresponding to fingerprints FP, FP, FP, FP, and FP are then deduplicated. Kernel  returns result  which includes the match size of five along with the corresponding fingerprints FP, FP, FP, FP, and FP.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 3","FIG. 3"],"b":["208","300","302","304","302","306","1","2"]},"Fingerprint FP corresponds to the 0 to 4K portion of file , fingerprint FP corresponds to the 4K to 8K portion, fingerprint FP corresponds to the 8K to 12K portion, and fingerprint FP corresponds to the 12K to 16K portion of file . Fingerprint FP corresponds to the 0 to 4K portion of file , fingerprint FP corresponds to 4K to 8K portion, and fingerprint FP corresponds to the 8K to 12K portion of file . FP corresponds to the 0 to 4K portion of file , fingerprint FP corresponds to the 4K to 8K portion, FP corresponds to the 8K to 12K portion, fingerprint FP corresponds to the 12K to 16K of file .","Table I shows an exemplary deduplication database and advisories for files - scanned and submitted in the order of file  (F1),  (F2), and  (F3) at times t, t, and t respectively, in accordance with an embodiment of the present invention.",{"@attributes":{"id":"p-0079","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Deduplication Database and Duplicates Advisories,"},{"entry":"where F1 corresponds to file 302, F2 corresponds to file 304. and F3"},{"entry":"corresponds to file"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Time t1","Time t2","Time t3"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Deduplica-","FP1 \u2192 F1, 0, 4K","FP1 \u2192 F2, 4K, 4K","FP1 \u2192 F3, 0, 4K"]},{"entry":["tion","FP2 \u2192 F1, 4K, 4K","FP1 \u2192 F1, 0, 4K","FP1 \u2192 F2, 4K, 4K"]},{"entry":["Database","FP3 \u2192 F1, 8K, 4K","FP2 \u2192 F2, 8K, 4K","FP1 \u2192 F1, 0, 4K"]},{"entry":[{},"FP4 \u2192 F1, 12K, 4K","FP2 \u2192 F1, 4K, 4K","FP2 \u2192 F3, 4K, 4K"]},{"entry":[{},{},"FP3 \u2192 F1, 8K, 4K","FP2 \u2192 F1, 4K, 4K"]},{"entry":[{},{},"FP4 \u2192 F1, 12K, ","FP2 \u2192 F2, 8K, 4K"]},{"entry":[{},{},"4K",{}]},{"entry":[{},{},"FP5 \u2192 F2, 0, 4K","FP3 \u2192 F1, 8K, 4K"]},{"entry":[{},{},{},"FP4 \u2192 F3, 12K, 4K"]},{"entry":[{},{},{},"FP4 \u2192 F1, 12K, 4K"]},{"entry":[{},{},{},"FP5 \u2192 F3, 8K, 4K"]},{"entry":[{},{},{},"FP5 \u2192 F2, 0, 4K"]},{"entry":["Duplicates","None","1: FP1, <F1, 0>,","1: FP1, <F1, 0>,"]},{"entry":["Advisories",{},"<F2, 4K>, 4K","F3, 0>, 4K"]},{"entry":[{},{},"2: FP2, <F1, 4K>,","2: FP3, <F1, 4K>,"]},{"entry":[{},{},"<F2, 8K), 4K","<F3, 4K>, 4K"]},{"entry":[{},{},{},"3: FP4, <F1,"]},{"entry":[{},{},{},"12k>, <F3, 8K>,"]},{"entry":[{},{},{},"4K"]},{"entry":[{},{},{},"4: FP5, <F2, 0>,"]},{"entry":[{},{},{},"<F3, 12K>, 4K"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"At time t, file  is scanned by scan engine  and submitted to deduplication engine . As shown in Table I and , in file  fingerprint FP is determined for the block 0 to 4K, fingerprint FP is determined for the block 4K to 8K, fingerprint FP is determined for the block 8K to 12K, and the fingerprint FP is determined for the block 12K to 16K. For file  fingerprint FP is determined for the block 0 to 4K, fingerprint FP is determined for the block 4K to 8K, and fingerprint FP is determined for the block 8K to 12K. For file  fingerprint FP is determined for the block 0 to 4K, fingerprint FP is determined for the block 4K to 8K, fingerprint FP is determined for the block 8K to 12K, and fingerprint FP is determined for the block 12K to 16K. As shown in Table I, no duplicate advisories are determined based on file  because this is the first file submitted and scanned by the scan and share engine and deduplication engine.","At time t, file  is scanned by scan engine  and submitted to deduplication engine . As shown in Table I, two duplicate advisories are determined comprising a match of fingerprint FP in file  starting at 0 and in file  starting at 4K, and a match of fingerprint FP in file  starting at 4K and file  starting at 8K, each of size 4K.","At time t, file  is scanned by scan engine  and submitted to deduplication engine . Four duplicate advisories are determined comprising matches of fingerprint FP in file  starting at 0 and in file  starting at 0, fingerprint FP in file  starting at 4K and in file  starting at 4K, fingerprint FP in file  starting at 12K, and file  starting at 8K, and fingerprint FP in file  starting at 0 and file  starting at 12 k, each with a size of 4K. Thus, the duplicate advisories generated indicate each of the duplicate blocks or portions among files -.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["302","306","302","306","304","306","302"]},"Table II shows an exemplary representation of a filesystem layout, advisories, and freed blocks (e.g., by share engine ) for files - scanned and submitted in the order of file , , and  at times t, t, and t respectively, in accordance with an embodiment of the present invention.",{"@attributes":{"id":"p-0085","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE II"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Filesystem Layout During Sharing"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Time t1","Time t2","Time t3"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Filesystem","F1: EX1 (0, 16K)","F1: EX1 (0, 8K)","F1: EX1 (0, 8K)"]},{"entry":[{},"F2: EX1 (0, 12K)","F1: EX2 (8K, 8K)","F1: EX2 (8K, 4K)"]},{"entry":[{},"F3: EX1 (0, 16K)","F2: EX1 (0, 4K)","F1: EX3 (12K, 4K)"]},{"entry":[{},{},"F2: EX2 (4K, 8K) =>","F2: EX1 (0, 4K)"]},{"entry":[{},{},"F1: EX1",{}]},{"entry":[{},{},"F3: EX1 (0, 16K)","F2: EX2 (4K, "]},{"entry":[{},{},{},"8K) => F1: EX1"]},{"entry":[{},{},{},"F3: EX1 (0, 8K) =>"]},{"entry":[{},{},{},"F1: EX1 =>"]},{"entry":[{},{},{},"F2: EX2"]},{"entry":[{},{},{},"F3: EX2 (8K, "]},{"entry":[{},{},{},"4K) => F1: EX2"]},{"entry":[{},{},{},"F3: EX3 (12K, "]},{"entry":[{},{},{},"4K) => F2: EX1"]},{"entry":["RCT ( )","None","1: F1: EX1\/F2: EX2","1: F1: EX1\/F2: EX2"]},{"entry":[{},{},"Count = 2","Count = 3"]},{"entry":[{},{},{},"2: F3: EX2\/F1: EX2"]},{"entry":[{},{},{},"Count = 2"]},{"entry":[{},{},{},"3: F3: EX3\/F2: EX1"]},{"entry":[{},{},{},"Count = 2"]},{"entry":["Freed",{},"Blocks 2 and 3","Blocks 1, 2, 3,"]},{"entry":["Blocks",{},"for F2","and 4 for F3"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Table III shows an exemplary duplicate advisory based on files -, in accordance with an embodiment of the present invention.",{"@attributes":{"id":"p-0087","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE III"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Duplicate Advisory"},{"entry":"Duplicate Advisory"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","1: FP1, <F1, 0>, <F3, 0>, 4K"]},{"entry":[{},{},"2: FP2, <F1, 4K>, <F3, 4K>, 4K"]},{"entry":[{},{},"3: FP4, <F1, 12K>, <F3, 8K>, 4K"]},{"entry":[{},{},"4: FP5, <F2, 0>, <F3, 12K >, 4K"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In one embodiment, the exemplary duplicate advisory is processed as follows: the advisory for a match of file  from 0 to 4K is a duplicate of file  from 0 to 4K (e.g., <F1,0>, <F3,0>, 4K) and the filesystem report that there is an 8K match (e.g., FP and FP consecutively match for files  and ). The scan engine then skips the portion of file  from 4K to 8K as it has been previously matched and\/or are stored in an exclusion list (e.g., skips the call for <F3, 4K>). The advisory for a match of file  from 12K to 16K is a duplicate of file  from 8K to 12K (e.g., <F1, 12K>, <F3,8K>, 4K). Then the filesystem reports that there is a 4K match. The advisory for duplicate for file  from 0 to 4K is a duplicate of file  from 12K to 16K. Then the filesystem advises that there is a 4K match.","Referring to , files - are shown after deduplication performed by embodiments of the present invention. File  has an 8K sized portion of data starting at 0K, a 4K sized portion starting at 8K, and a 4K portion starting at 12K.","File  has a 4K sized portion with data stored at the location from 0 to 4K. The metadata for file  comprises pointers such that the 8K sized portion from 4K to 12K points to the 0K to 8K portion of file .","The metadata for file  comprises pointers such that the 8K sized portion from 0 to 8K points to the 0 to 8K portion of file , the 4K sized portion from 8K to 12K of file  points to the 12K to 16K portion of file , and the 4K sized portion from 12K to 16K portion of file  points to the 0 to 4K portion of file . It is noted that the use of pointers for the files allows space saving of duplicate portions of the files of variable length. Embodiments of the present invention thus increase performance because the amount of metadata used for a file is reduced for larger portions of files that are the same (e.g., 8K portions of files  and ).","With reference to , exemplary flowcharts - illustrates example computer controlled processes used by various embodiments of the present invention. Although specific blocks are disclosed in flowcharts -, such blocks are exemplary. That is, embodiments are well suited to performing various other blocks or variations of the blocks recited in flowcharts -. It is appreciated that the blocks in flowcharts - may be performed in an order different than presented, and that not all of the blocks in flowcharts - may be performed. Flowcharts - include processes that, in various embodiments, are carried out by a processor under the control of computer-readable and computer-executable instructions. Embodiments of the present invention may thus be stored as computer readable media or computer-executable instructions including, but not limited to, a firmware update, software update package, or hardware (e.g., ROM).",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 5","b":["500","112"],"i":["a","b"]},"At block , a plurality of files in a primary storage filesystem are accessed (e.g., in an electronics system). Files in a primary storage filesystem may be concurrently available for applications or on an active\/live filesystem.","At block , a plurality fingerprints for the plurality of files is determined (e.g., by scan engine ). In one embodiment, each respective fingerprint corresponds to a respective portion of a file of the plurality of files.","At block , a plurality of portions of the plurality of files where each of the plurality of portions has the same corresponding fingerprint is determined (e.g., by deduplication engine ).","At block , a list comprising a plurality of portions of files previously deduplicated is optionally accessed. The list may further comprise deleted files and truncated files.","At block , the fingerprint for a portion of the file is verified prior to the deduplicating. This may be done because there is time between the determination of the fingerprint and the deduplication.","At block , a portion of a file of the plurality of files not present in the list is deduplicated. In one embodiment, deduplicating is performed by via a kernel. As described herein, deduplicating may comprise setting a metadata pointer for a portion of a file that is freed.","At block , consecutive portions of variable length of the plurality of files having the same fingerprints may optionally be deduplicated in a single call. As described herein, embodiments of the present invention are operable to deduplicate matching portions of files larger than the fingerprint granularity.","At block , the portion of the file of the plurality of files having the same fingerprint is added to the list. As described herein, the location of the file that has been deduplicated is added to the exclusion list.","At block , consecutive portions of the plurality of files having the same fingerprint are added to the list. As described herein, a range based on the size of the match is added is added to the exclusion list. In one embodiment, blocks  and  are combined.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 6","b":["600","210","600"]},"At block , a first location is accessing from a list of known locations. In one embodiment, the first location is accessed based on inode and logical offset.","At block , a determination is made as to whether the data location is in the new data exclusion list. If the first data location is in the new data exclusion list, block  is performed. If the data location is not in the new data exclusion list, block  is performed.","At block , the next entry in the list known locations is accessed. If there is no next entry in the known locations lists, the process may complete. At block , a new location is accessed from the list of new data locations.","At block , a determination is made if the new data location from the list of new locations is in the new data exclusion list. If the new location is present in the new data exclusion list, block  is performed. If the new data location is not present in the new data exclusion list, the deduplication function is invoked (e.g., via an API) for block sharing with the size of the new data location.","At block , the next entry in the list new locations is accessed. If there is no next entry in the new data locations list, block  is performed.","At block , the match is performed. In one embodiment, the match is performed with the size according specified in the advisory set. In one embodiment, the deduplication function of the kernel honors the requested match size first. At block , the size of largest possible match or variable length share is determined (e.g., by the kernel). If a match is made, then the deduplication function determines the largest match possible for variable length sharing (e.g., as many fingerprints as possible) allowed by the fingerprint boundaries for either the file or a maximum match size (e.g., 1 MB) is reached. The deduplication function may then return the size of the match. In one embodiment, a call to the deduplication function of the kernel returns a match size to a user space application (e.g., share engine ).","At block , the size of the largest possible match is accessed (e.g., by share engine ).","At block , whether the match was larger than the block size is determined. If the size was larger than the block size, block  is performed. If the size was not larger than the block size, block  is performed.","At block , the additional matched locations are added to the new data exclusion list. For example, if the size of the match is larger than the fingerprint size (e.g., block size or 4K), the share engine adds the next 4K aligned value for the current offset and the range (e.g., returned size, 4K aligned) to the new data exclusion list.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 7","b":["700","700","700","700","700"]},{"@attributes":{"id":"p-0114","num":"0113"},"figref":["FIG. 7","FIG. 7"],"b":["700","700","106","700","702","704","704","704","500","600","704"],"i":["a","b"]},"Additionally, computing system environment  may also have additional features\/functionality. For example, computing system environment  may also include additional storage (removable and\/or non-removable) including, but not limited to, magnetic or optical disks or tape. Such additional storage is illustrated in  by removable storage  and non-removable storage . Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer readable medium , removable storage  and nonremovable storage  are all examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computing system environment . Any such computer storage media may be part of computing system environment .","Computing system environment  may also contain communications connection(s)  that allow it to communicate with other devices. Communications connection(s)  is an example of communication media. Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.","Communications connection(s)  may allow computing system environment  to communicate over various networks types including, but not limited to, fibre channel, small computer system interface (SCSI), Bluetooth, Ethernet, Wi-fi, Infrared Data Association (IrDA), Local area networks (LAN), Wireless Local area networks (WLAN), wide area networks (WAN) such as the internet, serial, and universal serial bus (USB). It is appreciated the various network types that communication connection(s)  connect to may run a plurality of network protocols including, but not limited to, transmission control protocol (TCP), internet protocol (IP), real-time transport protocol (RTP), real-time transport control protocol (RTCP), file transfer protocol (FTP), and hypertext transfer protocol (HTTP).","Computing system environment  may also have input device(s)  such as a keyboard, mouse, pen, voice input device, touch input device, remote control, etc. Output device(s)  such as a display, speakers, etc. may also be included. All these devices are well known in the art and are not discussed at length.","In one embodiment, computer readable storage medium  includes deduplication manager module  which includes file access module , fingerprint module , duplication detection module , exclusion list access module , verification module , exclusion list update module , deduplication module , and administration interface module .","File access module  is operable to access files on a primary storage filesystem. Fingerprint module  is operable to use file access module  to access files and determine fingerprints for portions of the files (e.g., fingerprints for each 4K portion of each file). Duplication detection module  is operable determine duplicate portions of files based on fingerprints determined by fingerprint module . Exclusion list access module  is operable to access an exclusion list comprising portions of files that have already been deduplicated and thereby can be skipped during the processing of the duplicate portions determined by duplication detection module . Verification module  is operable to verify fingerprints (e.g., to ensure the portions of a file and the corresponding fingerprint have not changed since the fingerprint was determined by fingerprint module ).","Deduplication module  is operable to perform deduplication or sharing operations. Deduplication module  may free a portion of storage corresponding to a portion of a file and set the corresponding metadata for the portion of the file to point to a portion of another file. In one embodiment, deduplication module  includes multiple deduplication module  which is operable to determine and deduplicate successive portions of files having corresponding matching fingerprints.","Exclusion list update module  is operable to update the exclusion list based on deduplication performed by deduplication module . Exclusion list update module  is operable to update the exclusion list for a single portion of a file as well as multiple portions of a plurality of files. Administration interface  is operable to facilitate administration of deduplication by embodiments of the present invention (e.g., setting configuration , and other interfaces tools such as CLI, etc.)",{"@attributes":{"id":"p-0123","num":"0122"},"figref":["FIG. 8","FIG. 8"],"b":["810","810","812","810","814","817","818","820","822","824","826","828","830","832","833","834","837","838","835","890","835","839","840","842","846","812","828","847","812","830","848","812","817","850"]},"Bus  allows data communication between central processor  and system memory , which may include read-only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system  are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed disk ), an optical drive (e.g., optical drive ), a floppy disk unit , or other storage medium. Additionally, applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem  or interface .","Storage interface , as with the other storage interfaces of computer system , can connect to a standard computer readable medium for storage and\/or retrieval of information, such as a fixed disk drive . Fixed disk drive  may be a part of computer system  or may be separate and accessed through other interface systems. Modem  may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider (ISP). Network interface  may provide a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence). Network interface  may provide such connection using wireless techniques, including digital cellular telephone connection, Cellular Digital Packet Data (CDPD) connection, digital satellite data connection or the like.","Many other devices or subsystems (not shown) may be connected in a similar manner (e.g., document scanners, digital cameras and so on). Conversely, all of the devices shown in  need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . The operation of a computer system such as that shown in  is readily known in the art and is not discussed in detail in this application. Code to implement the present disclosure can be stored in computer-readable storage media such as one or more of system memory , fixed disk , optical disk , or floppy disk . The operating system provided on computer system  may be MS-DOS\u00ae, MS-WINDOWS\u00ae, OS\/2\u00ae, UNIX\u00ae, Linux\u00ae, or another known operating system.","Moreover, regarding the signals described herein, those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block, or a signal can be modified (e.g., amplified, attenuated, delayed, latched, buffered, inverted, filtered, or otherwise modified) between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next, other embodiments of the present disclosure may include modified signals in place of such directly transmitted signals as long as the informational and\/or functional aspect of the signal is transmitted between blocks. To some extent, a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved (e.g., there will inevitably be some attenuation and delay). Therefore, as used herein, a second signal derived from a first signal includes the first signal or any modifications to the first signal, whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and\/or final functional aspect of the first signal.","Embodiments of the present invention are operable to perform periodic deduplication of a primary storage filesystem with significant resource utilization and storage savings. Embodiments are operable to perform variable length sharing or deduplication thereby deduplicating consecutive portions of files having same content. Variable length sharing further allows embodiments of the present invention to avoid making calls to perform sharing or deduplication operations for portions of a file previously shared as part of a larger share. Embodiments of the present invention are thus operable to perform efficient deduplication and maintain an efficient file geometry (e.g., by deduplicating multiple matching portions of files).","The foregoing descriptions of specific embodiments of the present invention have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed, and many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
