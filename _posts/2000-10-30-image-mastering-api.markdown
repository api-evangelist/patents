---
title: Image mastering API
abstract: Methods and apparatus for the recording of data to an optical media are provided. In one example, a method includes the selection of data to be recorded by a client application. After interface with an image mastering application programming interface, the selection of an optical media format, and the selection of an optical media recording device, the selected data is sent to a stash file. A task list of operations to be performed in the recording of the selected data is created, and the data is recorded by executing the task list from Kernel Mode of an operating system. In another example, an image mastering application programming interface is provided. The image mastering application programming interface is a collection of COM objects including a disk master, a stash file, a disk recorder, and a burn engine. In another example, a computer readable media having program instructions for the recording of data to an optical media is provided. The program instructions enable the selection of data, sending the data to a stash file, creating a task list for the recording of the data, and executing the task list from Kernel Mode of an operating system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06882795&OS=06882795&RS=06882795
owner: Sonic Solutions, Inc.
number: 06882795
owner_city: Novato
owner_country: US
publication_date: 20001030
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application claims priority from U.S. Provisional patent Application No. 60\/162,879, filed Nov. 1, 1999, and entitled \u201cIMAGE MASTERING API (IMAPI).\u201d This application is hereby incorporated by reference.","1. Field of the Invention","The present invention relates generally to the recording of data onto optical media, and more particularly to the recording engine and system that transfers data from source to destination in the recording operation.","2. Description of the Related Art","Optical disc storage of data offers relatively high capacity data storage (e.g., approximately 640 Megabytes) on a relatively small and inexpensive optical disc. Optical media recording commonly involves recording (sometimes referred to as \u201cburning\u201d) audio tracks or data files on one or more tracks on an optical disc, which can typically hold between 1 and 99 tracks. The high capacity of optical discs for data storage represents a tremendous advancement over prior art data storage such as the floppy disk which has a capacity of approximately 1.4 Megabytes. Conceivably, the trend will continue and optical discs will offer continually increasing storage capacities on similar sized or even smaller optical discs.","The process of burning, or recording data to an optical disc typically involves several data processing operations between the selection of data or audio files to be recorded and the recording of those files on an optical disc. A client application or software for the recording of data to optical media is used to accomplish the recording process. Selected data or audio files are located, examined, and sequenced in a recording order. A database of the selected data files is commonly generated. This database contains data structures necessary for identifying and locating a data file at its source, for designating the destination location, and for designating the order in which files will be recorded on the destination optical device.","Once the database has been generated, it is processed by the client application which creates memory data buffers that contain either structures describing the selected source content formatted according to one or more specified file system specifications, or data from the selected source files, and passes them to the recording engine. The recording engine takes these data buffers and, using the command set required to communicate with a specific optical recording device, issues the necessary commands and passes the appropriate data to the recording device to create the optical disc.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1","b":["100","110","110","140","140","110","120","110","120","130","120","120","120","140"]},"When an actual or simulated burn is executed, the CD recording engine  reads the selected data into a buffer in system memory . From the buffer in system memory , the CD recording engine  directs the flow of data through optical CD recording circuitry to the destination optical device . As data is read out of the buffer in system memory  and recorded on the destination optical device , more data is read into the buffer  until all of the selected data has been read, recorded and the burn operation is complete.","The recording operation in prior art requires repeated processing of the selected data and associated data structures, and consumes significant system resources that are typically shared with all applications running in a host system. With the increasing speed of optical media recording devices, the rate of recording onto the optical disc frequently exceeds the rate at which the hard drive data source can replenish data in the buffer memory. A buffer under-run occurs when the buffer memory is unable to continuously provide data for an uninterrupted recording of the files to a given track of the optical disc. Eventually, after the buffer under-run occurs, the burning stops.","In view of the foregoing, there is a need for a method, apparatus and system for the recording of data to optical media that is more closely integrated with the host operating system. The method and system should be able to minimize the processing of data selected for recording, and then burn data to optical media in such a manner as to avoid buffer under-run and data interruption. This method and system should be configured to avoid the problems of the prior art.","Broadly speaking, the present invention fills these needs by providing an image mastering application programming interface for the recording of data to optical media. The method, system, and apparatus of the present invention may be integrated with the operating system of a computer used for a recording operation, and accomplishes the recording process of selected data from Kernel Mode of the host computer operating system. The present invention can be implemented in numerous ways, including as a process, an apparatus, a system, a device, a method, or a computer readable media. Several embodiments of the present invention are described below.","In one embodiment, a method for recording data to optical media is disclosed. The method includes the selection of data to be recorded by a client application, followed by the interface with an image mastering application programming interface. A data format and recording device are selected, and the selected data is sent to a stash file in the image mastering application programming interface. Next, a task list of the operations required to record the selected data is created, and then the data is recorded by the execution of the task list from Kernel Mode of an operating system.","In another embodiment, an image mastering application programming interface for the recording of data to optical media is disclosed. The image mastering application programming interface includes a plurality of COM objects that include a disk master, a stash file, a disk recorder, and a burn engine. The image mastering application programming interface creates a list of tasks to be accomplished in the recording of data to optical media, and the task list is executed as a Kernel Mode operation.","In still a further embodiment, a method for recording data to compact disc is disclosed. The method includes the selecting of data to be recorded by a client application and the sending of the data through an application format interface of an image mastering application programming interface to a stash file. The stash file is populated with optical media data structures and data, and a task list is created of the operations to be performed in the recording of the selected data to a compact disc recording device. The selected data is recorded to compact disc by executing the task list from Kernel Mode of an operating system.","In yet another embodiment, a computer readable media having program instructions for recording data to an optical media is disclosed. The computer readable media includes: (a) program instructions for selecting data to be recorded to the optical media; (b) program instructions for sending the selected data through an application format interface of an image mastering application programming interface to a stash file; (c) program instructions for populating the stash file with optical media data structures and data; (d) program instructions for creating a task list of operations to perform in recording the selected data; (e) program instructions for reading the selected data out of the stash file; and (f) program instructions for recording the selected data by executing the task list from Kernel Mode of an operating system.","One benefit and advantage of the invention is that the image mastering application programming interface contains a stash file into which the data selected to be recorded is written in preparation for recording to optical media. By using a stash file, the image mastering application programming interface obviates the need to cache and buffer the selected data. Because the data is not buffered, there is less risk of buffer under-run. Another benefit is that the image mastering application programming interface creates a task list of the operations to be performed in recording the selected data to the optical media. The task list is created for the specific type and format of data to be recorded, and for the specific target recording device. The task list is created as a memory structure, and thus can be read by the image mastering application programming interface driver in executing a burn. Yet another benefit is the image mastering application programming interface driver which executes the burn from Kernel Mode of the operating system. The image mastering application programming interface is integrated with the host system, and when a burn is executed, the process is executed as a Kernel Mode operation. This provides for the record operation to be a system priority operation and thus not competing or sharing system resources. As a system priority operation, there is less risk of data interruption, even with very large and complex audio and video files.","Other advantages of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.","An invention for recording information on optical media is disclosed. In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be understood, however, to one skilled in the art, that the present invention may be practiced without some or all of these specific details. In other instances, well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["200","200","201","202","206","260","270","280"]},"The recording engine, IMAPI.EXE,  is depicted as a collection of objects and associated interfaces which read, collect, and assimilate the data selected to be burned to optical media. The recording engine  also manages and monitors optical device units  configured to the system, and sends data to a selected recording device  to be recorded.","The disc master  provides the access to the recording engine . Access is granted to the recording engine  through IDiscMaster , the disk master interface. Once access is obtained, a client application  has full access and use of all of the interfaces and methods configured to a particular system and implemented by IMAPI.EXE .","In addition to the disc master interface , other interfaces in disc master  include application format interfaces. By way of example, the embodiment shown in  contains IRedbookDiscMaster  and IJolietDiscMaster . These interfaces manipulate data to organize and create the logical and physical data structures required for optical media to be read, accessed, implemented, played, and otherwise utilized by the myriad of optical media read, record, and playback devices adhering to a particular standard. Examples of such devices include CD-ROM, CD-R\/W, DVD, and the like. The IRedbookDiscMaster interface  adheres to the Redbook standard for audio data, and if the data desired to be recorded is audio data, then the client application  might use the IRedbookDiscMaster interface  in the recording operation. The IJolietDiscMaster interface  adheres to the Joliet standard for data files, and if the data desired to be recorded are data files other than audio data, then the client application  might use the IJolietDiscMaster interface  in the recording operation.","The disc master  contains all of the application format interfaces that are supported by a system. An actual recording device  that utilizes the supported format may or may not be connected to or present on the system, but if the system is configured to support a particular application format, there will be an application format interface for the format in the disc master . By way of example,  shows a disc master in accordance with one embodiment of the present invention. In , the disc master contains a disc master interface , and several application format interfaces. As stated above, for each format supported by a system, there is an application format interface in the disc master . In , in addition to the IRedbookDiscMaster  and the IJolietDiscMaster  described above, several additional application format interfaces are configured to the exemplary system. The application format interfaces illustrated include IIESO9660DiscMaster for ISO9660-format data, IUDFDiscMaster for UDF-format data, ICDExtraDiscMaster for CD Extra-format data, IPhotoCDDiscMaster for photographic data, ICD3DiscMaster for audio data, IVideoCDDiscMaster for video data, and I...DiscMaster . The I...DiscMaster interface is listed to illustrate that the embodiment represented is not all-inclusive or limiting, but representative of the many types of formats that can be supported by IMAPI .","Returning to , a client application  is shown connected to IMAPI  by a plurality of dashed lines. The dashed lines represent conceptual connections between the client application  and the recording engine , and not actual schematic connections. The client application  can be any application capable of creating or selecting data to be recorded to optical media. Exemplary client applications  include Word, Excel, Windows Explorer, Audio Recorders such as Real Jukebox, Media Player, Photo applications, Movie applications, Backup and the like. In order to obtain access to any part of the recording engine , the client application  must access the disc master interface . This is represented in  by dashed line  which runs from the client application  to an interface node of the disc master interface . The client application  calls to the disc master interface  to determine whether a recording engine  is present, what drives are provided, and what application format interfaces are present. The disc master interface  provides the client application , as represented through dashed line , an enumerator that enumerates the formats supported and provides identification of the application format interfaces present. In , the enumerator of the illustrated embodiment would enumerate Redbook and Joliet formats, and the disc master would provide the identification of IRedbookDiscMastcr  and IJolietDiscMaster . The disc master interface  also determines whether a format is currently selected as active, and provides the active format selection to the client application . There is no default format. An application must select a format as active. If an active format is not already selected, the client application  must select a format. By way of example, if the client application  is to burn audio data, the client application  might select Redbook as the active format. Similarly, if the client application  is to record data files, the client application  might select Joliet as the active format.","Once the client application  has been provided enumerated formats, a format has been selected as active, and the client application  has been provided the application format interface identifications, the disc master interface  then provides the client application  with an enumerator that enumerates the recording devices  supported by the system, and presently connected to the system. The enumerator of recording devices  present in the system is resident in the burn engine , in the IEnumDiscRecorders interface . The IEnumDiscRecorders interface  provides the disc master  with the complete list of present and configured recording devices  through the connection depicted as . The disc master interface  provides the enumerated recorders to the client application  that are compatible with the selected format, and also informs the client application  which, if any, recording device  is currently selected as active. If there is no currently selected active recording device , the client application must select a recording device  as active.","The recording engine  maintains and monitors the various recording devices  configured to the system in the disc recorder . Exemplary supported recording device drivers , , and are shown with shown as a wild card to represent any configured recording device driver. The recording device drivers , , and communicate with the disc recorder  as depicted by connection . In this manner, the disc recorder  maintains the parameters for each recorder that may be configured to the system. The disc recorder  is connected across the writer layer through the connection shown at  to Imapi.sys . As will be described in greater detail below, Imapi.sys  links IMAPI  to the actual device  as well as to the operating system of the host computer. This connection, among other functions, allows the disc recorder  to monitor the actual presence of a recording device . By way of example, when the operating system senses a plug-and-play recording device  added to or removed from the system, this status information is communicated to the disc recorder . The disc recorder  communicates the supported devices that are actually present in the system to the burn engine  through the IDiscRecorder interface , and through the connection shown at . Thus, the devices enumerated by the IEnumDiscRecorder interface , are only those supported and present in the system, and the application format interface , , narrows the field to only those that are compatible with the active format.","In one embodiment, the client application  must select whether or not to receive progress notification during the burn operation. That is, the client application , if it is so configured, can receive status updates from the disc master  advising of the progress of the burn operation. If the client application  elects to receive progress notification, the client application  provides a dedicated interface, the IDiscMasterProgressEvents interface  through which the disc master  provides progress notification. In , the notification is provided through interface node . In one embodiment, such notification is monitored by an operator viewing a gauge or read-out on a graphical user interface indicating the percentage of data transferred to optical media. In another embodiment, the gauge or read-out indicates the amount of data remaining to be transferred.","During the burn operation, the recording engine creates a stash file  that contains the data selected to be transferred to optical media as well as any logical and physical data structures required by the active format. The client application  directs the application format interface ,  to add selected data to a stash file . As used herein, the stash file , shown as an object of IMAPI , is a memory structure that is populated by the application format interface ,  with data as selected by the client application , and with the active format required logical and physical data structures. In one embodiment, the stash file  is an 800 MB file and is accessed by the application format interface ,  through the IDiscStash interface . The application format interface ,  populates the stash file  through an interface node on the IDiscStash interface  through connection .","Once the stash file  has been fully populated, the recording engine  creates a task list to describe the contents of the stash file , and identify the specific layout of the stash file . The burn engine  then examines the task list to determine the specific tasks for the exact recording device  to which the stashed data will be written.","When an actual or simulated burn is executed, the burn engine  retrieves the data from the stash file  in accordance with the task list and passes the data to Imapi.sys . The burn engine  accesses the stash file  through connection  into the interface node of the IDiscStash interface . As illustrated in , the burn engine  is connected to the writer layer through connector , and the writer layer to Imapi.sys  across the User Mode\/Kernel Mode boundary (shown in  as Ring3\/Ring0 boundary) through connectors  and Imapi.sys  is broadly defined as an image mastering application programming interface driver. Imapi.sys  both contains the drivers for the various COM objects described above, and integrates the IMAPI  with the host operating system.","In the illustrated embodiment, Imapi.sys  is a Kernel Mode operation. Thus, Imapi.sys  as a Kernel Mode operation, reads the data directly from the stash file and passes it to the active recording device . The CDROM Class  is a system interface to the general class of compact disc devices, which includes most optical disc media, and provides general device parameters to IMAPI as well as basic read functionality. During an actual or simulated burn operation, the data is not buffered or cached through system memory, and the burn operation is not shared or competing with other applications. Additionally, the CDROM Class  is blocked from sending commands to the recording device . The burn operation is performed as a system priority operation. Fatal data interruption and buffer under-run are therefore avoided, resulting in efficient and precision data recording to optical media.","The remaining structure in the system diagram  illustrated in  is the configuration application . The configuration application  configures the host system for the specific operations of IMAPI . By way of example, the configuration application , configures the host system for the recording devices  supported by IMAPI , and then configures the host system to access IMAPI  when a client application  launches a record operation. Thus, the configuration application  serves to integrate IMAPI  and its associated functions into the host system operations.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["400","410","410"]},"In operation , the application retrieves an enumerator to enumerate formats and provide interface identification to the application. In one embodiment, the formats include Redbook audio format and Joliet data format. In other embodiments, the formats include Redbook audio format, Joliet data format, ISO 9660 data format, UDF data format, CD Extra audio and data formats, Video CD video data format, Photo CD photo data format, CD3 audio format, and the like, in any combination of supported formats as determined by a particular system configuration.","In operation , the application retrieves the disc master format enumerator to examine the set of formats the system supports, and then to select a format to be the active format. By way of example, the enumerator enumerates Redbook audio and Joliet data formats as formats supported by the system. The application, e.g., Word, chooses Joliet data to be the active format to burn a Word document to CD. In one embodiment, the enumerator enumerates the formats supported by the system, and then calls to the disk master to identify the currently active format, if there is one selected. As described above, there is no default format. In this embodiment, the application selects a new active format in those situations when the active format is other than the format required by the client application, or when there is no active format identified by the disc master. If the currently active format is the same as the format the application requires, the format is accepted and the method proceeds to the next operation.","In operation , the enumerator enumerates a list of all the recording devices that are supported by the recording engine, that utilize the active format selected or accepted in operation , and that are present in the system. If there is no currently selected active recorder, the application must select an active recording device. Once the list of all supported recording devices is enumerated, the application either selects a recording device as active, or accepts a currently active recording device.","In one embodiment of both operations  and , there is no default format or recording device. Upon initial call to open the disk master to write data to an optical disc media, the application must select first a format (operation ) from the enumerated list of supported formats, and then select a recording device (operation ) from the enumerated list of recording devices that utilize the selected format.","The method advances to decision block  where, in one embodiment, the disc master requires the application to elect whether or not to receive progress notification. Progress notification can include, for example, notification to the application of the percentage of data recorded in a burn operation, the percentage of data remaining to be burned, the amount of time remaining in the burn operation, or other such operation progress information. If the application elects progress notification, a \u201cyes\u201d to decision block , then the method advances to operation  and the application provides a progress notification interface to the recording engine. In one embodiment, the progress notification interface is a specific interface node through which the recording engine provides periodic progress information to the application.","If the application does not support or does not elect to receive progress notification, a \u201cno\u201d at decision block , the method bypasses operation  and no progress interface is provided. The method then proceeds to decision block  where it splits into two sets of method operations defined by whether the data to be recorded is audio or data files. For audio data, the method proceeds to connector A, and for data files, the method proceeds to connector B.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5","FIG. 5"],"b":["400","470","470"]},"The method then proceeds to operation  where the client application provides the audio data to the application format disc master and instructs the application format disc master to read the audio data into a stash file. By way of example, a client application selects a play list of audio data stored on a remote server. The application format disc master then reads the audio data as directed by the client application into a stash file.","In the embodiment illustrated in , the method continually monitors the size of the audio track. In one embodiment, the size of an audio track is a fixed or maximum number of sectors. In decision block , the application format disc master determines whether a track is done, and as long as space remains, the application continues to provide audio data to the application format disc master which reads the audio data into the stash file. Depending on the format used, the available size of a track includes the sectors required for format structures, gaps, and the like. Once the application format disc master determines a track is full, the method advances to decision block  and determines whether more audio data remains to be recorded, e.g., if another track is needed. If so, the method returns to operation  for the application to call to reserve another track. The method then repeats the operations described above until no additional tracks are required.","Once the client application has provided all of the selected audio data to be read by the application format disc master into a stash file and no additional tracks are required, the method proceeds to operation  where the application calls to the disc master to record the audio data. The method then proceeds to connector \u201cx\u201d for the recording of audio data which is illustrated in FIG. .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 6","b":["400","520"]},"In operation , the recording engine fully populates the stash file with information associated with the audio data to be recorded. The information is specific to the format to be used in recording the audio data.","The method then advances to operation  where the recording engine creates a task list to describe the contents of the stash file. The task list identifies the specific layout of the stash file to include the location of different sectors, files, tracks, file system, and the like. In creating the task list, the recording engine maps out the logical and physical structure of the media to which the data will be recorded. With the logical format selected in an earlier operation, and with the recording device already selected as well, the recording engine builds a task list to be executed by the burn engine when performing a simulated or actual burn of the audio data to the target media.","Once the task list is created, the method advances to operation  and passes the task list to the burn engine. In one embodiment, the task list is created as a memory structure and the passing of the task list by the recording engine to the burn engine is a call to the burn engine to read the task list memory structure from memory. It is the burn engine that will execute the task list and accomplish the recording of the audio data to the target media.","It should be noted at this point that in one embodiment of the present invention, the driver for the burn engine that executes the simulated or actual burn of data to the recording device is located in the imapi.sys structure (see ) and operates in Kernel Mode. The burn engine and imapi.sys are discussed in greater detail below.","The method then proceeds to operation  and the burn engine examines the task list. The burn engine determines the tasks that must be done, and any data manipulation that must be accomplished for the specific drive and device to which it will write.","The method concludes with operation . In executing a burn, the burn engine retrieves the audio data in the stash file in accordance with the task list. The audio data is passed through imapi.sys to the selected drive to write to the optical media. During an actual or simulated burn operation, the burn engine is controlled by the driver in imapi.sys executing the operation in Kernel Mode. As described above in reference to , imapi.sys is generally a set of drivers for the various objects of IMAPI, and serves to integrate IMAPI with the host operating system. In one embodiment, imapi.sys is coded specifically for each operating system in which it executes. By way of example, there is an imapi.sys for a Windows95\/98 operating system, one for a Windows NT operating system, and so forth for any particular operating system in which it executes. As discussed in greater detail above, a feature of the present invention is that it executes the task list and reads the stashed audio data from the stash file and burns it to the selected recording device in Kernel Mode. The audio data, therefore, is not cached and buffered in system memory during a simulated or actual burn, and therefore buffer under-run is avoided. Further, as a Kernel Mode process, the operations of imapi.sys in executing a task list and reading the audio data from the completely imaged stash file are system priority operations. Thus, the typical processor-sharing with other applications, and other such risks of fatal audio data interruption are also avoided.","The method operations for recording data files to the selected device are similar to those of recording audio data. As discussed in reference to , the method operations for data recording split at decision block . If the data to be recorded is data other than audio data, the method proceeds to connector B, and continues with the operations illustrated in FIG. .",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 7","b":["400","600"]},"Once the client application has populated IStorage with all of the data to be written to optical media, the method advances to operation , In operation , the client application calls to the application interface disc master (e.g., IJolietDiscMaster) to add the stored data to the stash file. Following the call to add data to the stash file, the method advances to operation  and the recording engine then reads the data from IStorage into the stash file. In one embodiment, this operation is called adding structures to the image. The application format disc master, e.g., IJolietDiscMaster, manipulates the data to add to the image or stash file.","Next, the method evaluates decision block . At decision block , the method checks to see if there is more data to be added to the stash file. If there is more data to be added to stash, the method loops back to operation  where the client application creates a COM storage structure for the data to be added, and then proceeds with the method operations as described above. If there is no more data to be added to the stash file, the method advances to connector \u201cy,\u201d which is the continuation of the method operations illustrated in FIG. .",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 6","b":["400","520"]},"The method then advances to operation  and the recording engine fully populates the stash file with information associated with the data in the stash file. The information is determined by the active format, and can include such structures as volume descriptors and file systems. By way of example, IJolietDiscMaster populates a stash with primary volume descriptors, supplementary volume descriptors, volume descriptor set terminators, path tables, directory records, and the like. Such structures and other information are those elements associated with the particular format selected in which to write the data to the recording device.","Next, the method performs operation  in which the recording engine creates a task list as described above in reference to the recording of audio data. In operation  the recording engine passes the task list to the burn engine, and the burn engine examines the task list in operation . In operation , the burn engine retrieves the data from the stash file in accordance with the task list, and passes the data through imapi.sys to the selected recording device and the method is done. As described in detail above, the reading of the data from the stash file in operation  is accomplished in Kernel Mode, and thereby avoids the risks of buffer under-run and data interruption.","The invention may employ various computer-implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. Further, the manipulations performed are often referred to in terms, such as producing, identifying, determining, or comparing.","Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.","The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data, which can thereafter be read by a computer system. Examples of the computer readable medium include read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, magnetic tapes, and other optical data storage devices. The computer readable medium can also be distributed over network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion.","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be readily understood by the following detailed description in conjunction with the accompanying drawings, wherein like reference numerals designate like structural elements.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
