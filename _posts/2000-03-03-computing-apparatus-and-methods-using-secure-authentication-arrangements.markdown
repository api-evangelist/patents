---
title: Computing apparatus and methods using secure authentication arrangements
abstract: Computing apparatus comprises a memory means storing the instructions of a secure process and an authentication process; a processing means arranged to control the operation of the computing apparatus including by executing the secure process and the authentication process; a user interface means arranged to receive user input and return to the user input; and an interface means for receiving a removable primary token and communication with the token. The token comprises a body supporting a token interface for communicating with the interface means, a token processor; and a token memory adapted to store token data including information for identifying the token and auxiliary token information identifying one or more authorized auxiliary tokens. The processing means is arranged to receive the identity information and the auxiliary token information from the primary token, to authenticate the toke using the authentication process and, if the token is successfully authenticated, permit a user to interact with the secure process via the user interface means. The processing means is arranged to repeatedly authenticate the primary toke and cause the computing platform to suspend interaction between the secure process and the user if authentication is not possible as a result of the removal of the primary token unless the primary token is replaced by an authorized auxiliary token.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07069439&OS=07069439&RS=07069439
owner: Hewlett-Packard Development Company, L.P.
number: 07069439
owner_city: Houston
owner_country: US
publication_date: 20000303
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION, & INDUSTRIAL APPLICABILITY"],"p":["The subject matter of the present application may also be related to the following U.S. patent applications: \u201cSmartcard User Interface for Trusted Computing Platform,\u201d Ser. No. 09\/936,131, filed Sep. 4, 2001; and \u201cMethod and Apparatus for Using a Secret in a Distributed Computing System,\u201d Ser. No. 09\/946,323, filed Sep. 4, 2001.","This invention relates to computing apparatus and particularly, but not exclusively, to computing apparatus and methods of operating computing apparatus in a secure environment using security tokens.","Security tokens, for example smart cards or cryptographic co-processors, have recently been proposed for various security functions including accessing computer platforms (or \u2018host platforms\u2019) and electronic commerce. For instance, a smart card storing confidential information accessible only to a related user can be used by the user to log on to a computer, to sign a document, or to provide credentials needed for electronic commerce.","In some cases, it is expected that more than one security token for plural different applications may need to be used in a single communication session, which starts as the user logs on to a host platform and finishes as the user logs off.","One possible model works as follows. A user has a number of tokens and, in each session, they use one of these tokens (for example, a logon token) for authentication to a host platform in the logon process only. During the same session, the user separately uses other tokens (for example, auxiliary tokens) for other security functions, such as electronic payment or cryptography.","In arriving at the present invention, the present inventors have appreciated the following three potential problems with this model:","Problem A\u2014there is an inherent danger of a user walking away after logging on to the host platform, thus allowing an impostor to use the platform.","Problem B\u2014a fake host platform may be able to steal sensitive information from the user.","Problem C\u2014there are some auxiliary tokens whose owner's identities are not traceable to the owner of the logon token. In other words, an impostor, who does not own the logon token, may be able to use his own auxiliary tokens to impersonate the logon token's owner.","In addressing one or more of the above problems, the present inventors propose a new arrangement to reduce security risk and to establish a more trusted relationship between a host platform and a plurality of security tokens. Typically, the arrangement implements a security control policy that is more refined than the policy in the prior art model, including periodic or repeated authentication. Preferred embodiments of the invention implement mutual authentication and privilege restriction. Of particular importance are the criteria of ease of use and low expense of implementation compared with prior art solutions.","In a first aspect, the invention provides computing apparatus comprising: memory means storing the instructions of a secure process and an authentication process; processing means arranged to control the operation of the computing apparatus including by executing the secure process and the authentication process; user interface means arranged to receive user input and return to the user information generated by the processing means in response to the user input; and interface means for receiving a removable primary token and communicating with the token, the token comprising a body supporting: a token interface for communicating with the interface means; a token processor; and token memory storing token data including information for identifying the token and auxiliary token information identifying one or more authorised auxiliary tokens, wherein the processing means is arranged to receive the identity information and the auxiliary token information from the primary token, authenticate the token using the authentication process and, if the token is successfully authenticated, permit a user to interact with the secure process via the user interface means, and wherein the processing means is arranged to repeatedly authenticate the primary token and cause the computing platform to suspend interaction between the secure process and the user if authentication is not possible as a result of the removal of the primary token unless the primary token is replaced by an authorised auxiliary token.","In a second aspect, the invention provides a method of controlling computing apparatus to authenticate a user, comprising the steps of:","the computing apparatus receiving a primary token of the user, the primary token containing information suitable for authenticating the primary token and information relating to one or more authorised auxiliary tokens;","if the token is authentic, permitting the user to interact with one or more secure applications that may be executed by the computing platform;","at intervals, re-authenticating the primary token; and","if it is not possible to re-authenticate the primary token, suspending the interaction between the computing apparatus and the user unless the primary token has been replaced with an authorised auxiliary token.","In a third aspect, the invention provides a smart card programmed for operation as a primary token in accordance with the method set out above. In a fourth aspect, the invention provides a computing apparatus configured for operation in accordance with the method set out above.","While the ideas of the invention are general, for ease of discussion, we will focus on preferred embodiments, wherein smart cards are the security tokens, which interact with a computing platform, or simply \u201cplatform\u201d. For the purpose of this specification, a computing platform is used to refer to at least one data processor and at least one data storage means, usually but not essentially with associated communications facilities e.g. a plurality of drivers, associated applications and data files, and which may be capable of interacting with external entities e.g. a user or another computer platform, for example by means of connection to the internet, connection to an external network, or by having an input port capable of receiving data stored on a data storage medium, e.g. a CD-ROM, floppy disk, ribbon tape or the like. In the arrangements described, a user has one logon smart card and a number of auxiliary smart cards, and needs to interact with the platform, which has only a single smart card reader. It is assumed in the present embodiment that there is no way for more than one smart card to be read by the smart card reader at the same time.","In order to address Problem A, as set out in the \u201cDisclosure of the Invention\u201d, the present embodiments implement a coherent security control policy using a logon smart card operating with the platform. Specifically, to limit the potential for an impostor getting access to the platform without the legitimate user's knowledge, the logon smart card needs to be present throughout the session, rather than just to initiate the session. By analogy, the logon smart card is used more like a car key than a door key.","In effect, a user is held responsible for their actions. Since the smart card has to be present during the execution of a command, this effectively and unambiguously holds the owner of the smart card responsible for the action. As will be described below, in preferred embodiments the authentication is done automatically by the platform and does not generally require actions from the user. This amounts to a saving of time for the user and is, thus, a very attractive feature.","A major strength of the proposed scheme lies in its intuitive appeal. People are familiar with the importance of protecting their keys and accept full responsibility for respective misuse of the keys. The present scheme, which greatly enhances security, is simple to implement. As an added security feature, it is preferable that the logon smart card is also password protected, requiring a user to enter a password when the card is first inserted into the smart card reader. Password techniques are well-known and will not be described herein, so as not to obscure the invention.","Generally, to check the presence of the logon smart card, the platform needs repeatedly to authenticate the logon card. The actual frequency of the authentication can be configured by either a system administrator or the user. In practice, one would set the frequency high enough that the user, or an unauthorised user, would be unable to subvert the platform and carry out an unauthorised transaction between authentications. For example, authentication may occur every few seconds.","A further security feature that can be implemented in the security policy is a time-limit for each authenticated session using an auxiliary smart card. The user interface may also be locked unless a new round of authentication is performed within the pre-set time-limit. Further, preferably, time-stamping, or the use of nonces, is used to prevent \u201creplay attacks\u201d during authentication.","To address the fake host platform problem, Problem B above, the preferred embodiments use the concept of a trusted device built into the platform, which allows a user to verify the integrity of the platform. The concept of such a trusted device is the subject of the applicant's co-pending International Patent Application No. ## entitled \u201cTrusted Computing Platform\u201d filed on 15 Feb. 2000, the entire contents of which are hereby incorporated herein by reference.","To address Problem C, as set out in the \u201cDisclosure of the Invention\u201d, where an auxiliary smart card may not be traceable to the owner of the logon smart card, the present invention introduces the concept of a user profile that binds a user to a number of auxiliary smart cards. This makes the implementation of a coherent, comprehensive and flexible security control policy extremely simple, inexpensive and transparent to the user.","Generally, in the preferred embodiments, it is always assumed that logging on is done by a logon smart card, and at some point of the session, the user (or the application running under the session) needs to use one or more auxiliary smart cards, so that removal of the logon card becomes necessary. To maintain the security policy of repeated authentication, there needs to be a security chain for the platform between trusting the logon smart card and trusting other auxiliary smart cards. This chain is built by letting the logon smart card \u2018introduce\u2019 the auxiliary cards to the platform, for example by using \u2018user profiles\u2019.","For the sake of simplicity of description, only two types of auxiliary smart cards are considered in any detail herein:","\u201cCash cards\u201d, which are smart cards having cash values (or credits) that are transferable; and","\u201cCrypto cards\u201d, which are smart cards whose privileges (such as encryption or signature supported by a private key) are not transferable.","A \u201ctrusted platform\u201d used in preferred embodiments of the invention will now be described. This is achieved by the incorporation into a computing platform of a physical trusted device whose function is to bind the identity of the platform to reliably measured data that provides an integrity metric of the platform. The identity and the integrity metric are compared with expected values provided by a trusted party (TP) that is prepared to vouch for the trustworthiness of the platform. If there is a match, the implication is that at least part of the platform is operating correctly, depending on the scope of the integrity metric.","A user verifies the correct operation of the platform before exchanging other data with the platform. A user does this by requesting the trusted device to provide its identity and an integrity metric. (Optionally the trusted device will refuse to provide evidence of identity if it itself was unable to verify correct operation of the platform.) The user receives the proof of identity and the identity metric, and compares them against values which it believes to be true. Those proper values are provided by the TP or another entity that is trusted by the user. If data reported by the trusted device is the same as that provided by the TP, the user trusts the platform. This is because the user trusts the entity. The entity trusts the platform because it has previously validated the identity and determined the proper integrity metric of the platform.","Once a user has established trusted operation of the platform, he exchanges other data with the platform. For a local user, the exchange might be by interacting with some software application running on the platform. For a remote user, the exchange might involve a secure transaction. In either case, the data exchanged is \u2018signed\u2019 by the trusted device. The user can then have greater confidence that data is being exchanged with a platform whose behaviour can be trusted.","The trusted device uses cryptographic processes but does not necessarily provide an external interface to those cryptographic processes. Also, a most desirable implementation would be to make the trusted device tamperproof, to protect secrets by making them inaccessible to other platform functions and provide an environment that is substantially immune to unauthorised modification. Since tamper-proofing is impossible, the best approximation is a trusted device that is tamper-resistant, or tamper-detecting. The trusted device, therefore, preferably consists of one physical component that is tamper-resistant.","Techniques relevant to tamper-resistance are well known to those skilled in the art of security. These techniques include methods for resisting tampering (such as appropriate encapsulation of the trusted device), methods for detecting tampering (such as detection of out of specification voltages, X-rays, or loss of physical integrity in the trusted device casing), and methods for eliminating data when tampering is detected. Further discussion of appropriate techniques can be found in \u201cTamper Resistance\u2014a Cautionary Note\u201d, by Ross Anderson and Markus Kuhn, published in the Second USENIX Workshop on Electronic Commerce Proceedings, Oakland, Calif., November 1996, pp 1\u201311, ISBN 1-880446-83-9. It will be appreciated that, although tamper-proofing is a most desirable feature of the present invention, it does not enter into the normal operation of the invention and, as such, is beyond the scope of the present invention and will not be described in any detail herein.","The trusted device is preferably a physical one because it must be difficult to forge. It is most preferably tamper-resistant because it must be hard to counterfeit. It typically has an engine capable of using cryptographic processes because it is required to prove identity, both locally and at a distance, and it contains at least one method of measuring some integrity metric of the platform with which it is associated.","A trusted platform  is illustrated in the diagram in . The platform  includes the standard features of a keyboard , mouse  and visual display unit (VDU) , which provide the physical \u2018user interface\u2019 of the platform. This embodiment of a trusted platform also contains a smart card reader \u2014a smart card reader is not an essential element of all trusted platforms (not all trusted platforms employ smart cards), but is employed in various preferred embodiments described below and of relevance to the present invention. Alongside the smart card reader , there is illustrated a smart card  and one (possibly of several) auxiliary smart cards  to allow trusted user interaction with the trusted platform as shall be described further below. In the platform , there are a plurality of modules : these are other functional elements of the trusted platform of essentially any kind appropriate to that platform (the functional significance of such elements is not relevant to the present invention and will not be discussed further herein).","As illustrated in , the motherboard  of the trusted computing platform  includes (among other standard components) a main processor , main memory , a trusted device , a data bus  and respective control lines  and lines , BIOS memory  containing the BIOS program for the platform  and an Input\/Output (IO) device , which controls interaction between the components of the motherboard and the smart card reader , the keyboard , the mouse  and the VDU . The main memory  is typically random access memory (RAM). In operation, the platform  loads the operating system, for example Windows NT\u2122, into RAM from hard disk (not shown). Additionally, in operation, the platform  loads the processes or applications that may be executed by the platform  into RAM from hard disk (not shown).","Typically, in a personal computer the BIOS program is located in a special reserved memory area, the upper 64K of the first megabyte do the system memory (addresses F\u00d8\u00d8\u00d8h to FFFFh), and the main processor is arranged to look at this memory location first, in accordance with an industry wide standard.","The significant difference between the platform and a conventional platform is that, after reset, the main processor is initially controlled by the trusted device, which then hands control over to the platform-specific BIOS program, which in turn initialises all input\/output devices as normal. After the BIOS program has executed, control is handed over as normal by the BIOS program to an operating system program, such as Windows NT\u2122, which is typically loaded into main memory  from a hard disk drive (not shown).","Clearly, this change from the normal procedure requires a modification to the implementation of the industry standard, whereby the main processor  is directed to address the trusted device  to receive its first instructions. This change may be made simply by hard-coding a different address into the main processor . Alternatively, the trusted device  may be assigned the standard BIOS program address, in which case there is no need to modify the main processor configuration.","It is highly desirable for the BIOS boot block to be contained within the trusted device . This prevents subversion of the obtaining of the integrity metric (which could otherwise occur if rogue software processes are present) and prevents rogue software processes creating a situation in which the BIOS (even if correct) fails to build the proper environment for the operating system.","Although, in the preferred embodiment to be described, the trusted device  is a single, discrete component, it is envisaged that the functions of the trusted device  may alternatively be split into multiple devices on the motherboard, or even integrated into one or more of the existing standard devices of the platform. For example, it is feasible to integrate one or more of the functions of the trusted device into the main processor itself, provided that the functions and their communications cannot be subverted. This, however, would probably require separate leads on the processor for sole use by the trusted functions. Additionally or alternatively, although in the present embodiment the trusted device is a hardware device that is adapted for integration into the motherboard , it is anticipated that a trusted device may be implemented as a \u2018removable\u2019 device, such as a dongle, which could be attached to a platform when required. Whether the trusted device is integrated or removable is a matter of design choice. However, where the trusted device is separable, a mechanism for providing a logical binding between the trusted device and the platform should be present.","The trusted device  comprises a number of blocks, as illustrated in . After system reset, the trusted device  performs a secure boot process to ensure that the operating system of the platform  (including the system clock and the display on the monitor) is running properly and in a secure manner. During the secure boot process, the trusted device  acquires an integrity metric of the computing platform . The trusted device  can also perform secure data transfer and, for example, authentication between it and a smart card via encryption\/decryption and signature\/verification. The trusted device  can also securely enforce various security control policies, such as locking of the user interface.","Specifically, the trusted device comprises: a controller  programmed to control the overall operation of the trusted device , and interact with the other functions on the trusted device  and with the other devices on the motherboard ; a measurement function  for acquiring the integrity metric from the platform ; a cryptographic function  for signing, encrypting or decrypting specified data; an authentication function  for authenticating a smart card; and interface circuitry  having appropriate ports (,  & ) for connecting the trusted device  respectively to the data bus , control lines  and address lines  of the motherboard . Each of the blocks in the trusted device  has access (typically via the controller ) to appropriate volatile memory areas  and\/or non-volatile memory areas  of the trusted device . Additionally, the trusted device  is designed, in a known manner, to be tamper resistant.","For reasons of performance, the trusted device  may be implemented as an application specific integrated circuit (ASIC). However, for flexibility, the trusted device  is preferably an appropriately programmed micro-controller. Both ASICs and micro-controllers are well known in the art of microelectronics and will not be considered herein in any further detail.","One item of data stored in the non-volatile memory  of the trusted device  is a certificate . The certificate  contains at least a public key  of the trusted device  and an authenticated value  of the platform integrity metric measured by a trusted party (TP). The certificate  is signed by the TP using the TP's private key prior to it being stored in the trusted device . In later communications sessions, a user of the platform  can verify the integrity of the platform  by comparing the acquired integrity metric with the authentic integrity metric . If there is a match, the user can be confident that the platform  has not been subverted. Knowledge of the TP's generally-available public key enables simple verification of the certificate . The non-volatile memory  also contains an identity (ID) label . The ID label  is a conventional ID label, for example a serial number, that is unique within some context. The ID label  is generally used for indexing and labelling of data relevant to the trusted device , but is insufficient in itself to prove the identity of the platform  under trusted conditions.","The trusted device  is equipped with at least one method of reliably measuring or acquiring the integrity metric of the computing platform  with which it is associated. In the present embodiment, the integrity metric is acquired by the measurement function  by generating a digest of the BIOS instructions in the BIOS memory. Such an acquired integrity metric, if verified as described above, gives a potential user of the platform  a high level of confidence that the platform  has not been subverted at a hardware, or BIOS program, level. Other known processes, for example virus checkers, will typically be in place to check that the operating system and application program code has not been subverted.","The measurement function  has access to: non-volatile memory  for storing a hash program  and a private key  of the trusted device , and volatile memory  for storing acquired integrity metric in the form of a digest . In appropriate embodiments, the volatile memory  may also be used to store the public keys and associated ID labels \u2013of one or more authentic smart cards that can be used to gain access to the platform .","In one preferred implementation, as well as the digest, the integrity metric includes a Boolean value, which is stored in volatile memory  by the measurement function , for reasons that will become apparent.","A preferred process for acquiring an integrity metric will now be described with reference to .","In step , at switch-on, the measurement function  monitors the activity of the main processor  on the data, control and address lines (,  & ) to determine whether the trusted device  is the first memory accessed. Under conventional operation, a main processor would first be directed to the BIOS memory first in order to execute the BIOS program. However, in accordance with the present embodiment, the main processor  is directed to the trusted device , which acts as a memory. In step , if the trusted device  is the first memory accessed, in step , the measurement function  writes to volatile memory  a Boolean value which indicates that the trusted device  was the first memory accessed. Otherwise, in step , the measurement function writes a Boolean value which indicates that the trusted device  was not the first memory accessed.","In the event the trusted device  is not the first accessed, there is of course a chance that the trusted device  will not be accessed at all. This would be the case, for example, if the main processor  were manipulated to run the BIOS program first. Under these circumstances, the platform would operate, but would be unable to verify its integrity on demand, since the integrity metric would not be available. Further, if the trusted device  were accessed after the BIOS program had been accessed, the Boolean value would clearly indicate lack of integrity of the platform.","In step , when (or if) accessed as a memory by the main processor , the main processor  reads the stored native hash instructions  from the measurement function  in step . The hash instructions  are passed for processing by the main processor  over the data bus . In step , main processor  executes the hash instructions  and uses them, in step , to compute a digest of the BIOS memory , by reading the contents of the BIOS memory  and processing those contents according to the hash program. In step , the main processor  writes the computed digest  to the appropriate non-volatile memory location  in the trusted device . The measurement function , in step , then calls the BIOS program in the BIOS memory , and execution continues in a conventional manner.","Clearly, there are a number of different ways in which the integrity metric may be calculated, depending upon the scope of the trust required. The measurement of the BIOS program's integrity provides a fundamental check on the integrity of a platform's underlying processing environment. The integrity metric should be of such a form that it will enable reasoning about the validity of the boot process\u2014the value of the integrity metric can be used to verify whether the platform booted using the correct BIOS. Optionally, individual functional blocks within the BIOS could have their own digest values, with an ensemble BIOS digest being a digest of these individual digests. This enables a policy to state which parts of BIOS operation are critical for an intended purpose, and which are irrelevant (in which case the individual digests must be stored in such a manner that validity of operation under the policy can be established).","Other integrity checks could involve establishing that various other devices, components or apparatus attached to the platform are present and in correct working order. In one example, the BIOS programs associated with a SCSI controller could be verified to ensure communications with peripheral equipment could be trusted. In another example, the integrity of other devices, for example memory devices or co-processors, on the platform could be verified by enacting fixed challenge\/response interactions to ensure consistent results. Where the trusted device  is a separable component, some such form of interaction is desirable to provide an appropriate logical binding between the trusted device  and the platform. Also, although in the present embodiment the trusted device  utilises the data bus as its main means of communication with other parts of the platform, it would be feasible, although not so convenient, to provide alternative communications paths, such as hard-wired paths or optical paths. Further, although in the present embodiment the trusted device  instructs the main processor  to calculate the integrity metric in other embodiments, the trusted device itself is arranged to measure one or more integrity metrics.","Preferably, the BIOS boot process includes mechanisms to verify the integrity of the boot process itself. Such mechanisms are already known from, for example, Intel's draft \u201cWired for Management baseline specification v 2.0\u2014BOOT Integrity Service\u201d, and involve calculating digests of software or firmware before loading that software or firmware. Such a computed digest is compared with a value stored in a certificate provided by a trusted entity, whose public key is known to the BIOS. The software\/firmware is then loaded only if the computed value matches the expected value from the certificate, and the certificate has been proven valid by use of the trusted entity's public key. Otherwise, an appropriate exception handling routine is invoked.","Optionally, after receiving the computed BIOS digest, the trusted device  may inspect the proper value of the BIOS digest in the certificate and not pass control to the BIOS if the computed digest does not match the proper value. Additionally, or alternatively, the trusted device  may inspect the Boolean value and not pass control back to the BIOS if the trusted device  was not the first memory accessed. In either of these cases, an appropriate exception handling routine may be invoked.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 5","FIG. 5"],"b":"24"},"At the first instance, a TP, which vouches for trusted platforms, will inspect the type of the platform to decide whether to vouch for it or not. This will be a matter of policy. If all is well, in step , the TP measures the value of integrity metric of the platform. Then, the TP generates a certificate, in step , for the platform. The certificate is generated by the TP by appending the trusted device's public key, and optionally its ID label, to the measured integrity metric, and signing the string with the TP's private key.","The trusted device  can subsequently prove its identity by using its private key to process some input data received from the user and produce output data, such that the input\/output pair is statistically impossible to produce without knowledge of the private key. Hence, knowledge of the private key forms the basis of identity in this case. Clearly, it would be feasible to use symmetric encryption to form the basis of identity. However, the disadvantage of using symmetric encryption is that the user would need to share his secret with the trusted device. Further, as a result of the need to share the secret with the user, while symmetric encryption would in principle be sufficient to prove identity to the user, it would insufficient to prove identity to a third party, who could not be entirely sure the verification originated from the trusted device or the user.","In step , the trusted device  is initialised by writing the certificate  into the appropriate non-volatile memory locations  of the trusted device . This is done, preferably, by secure communication with the trusted device  after it is installed in the motherboard . The method of writing the certificate to the trusted device  is analogous to the method used to initialise smart cards by writing private keys thereto. The secure communications is supported by a \u2018master key\u2019, known only to the TP, that is written to the trusted device (or smart card) during manufacture, and used to enable the writing of data to the trusted device ; writing of data to the trusted device  without knowledge of the master key is not possible.","At some later point during operation of the platform, for example when it is switched on or reset, in step , the trusted device  acquires and stores the integrity metric  of the platform.","When a user wishes to communicate with the platform, in step , he creates a nonce, such as a random number, and, in step , challenges the trusted device  (the operating system of the platform, or an appropriate software application, is arranged to recognise the challenge and pass it to the trusted device , typically via a BIOS-type call, in an appropriate fashion). The nonce is used to protect the user from deception caused by replay of old but genuine signatures (called a \u2018replay attack\u2019) by untrustworthy platforms. The process of providing a nonce and verifying the response is an example of the well-known \u2018challenge\/response\u2019 process.","In step , the trusted device  receives the challenge and creates an appropriate response. This may be a digest of the measured integrity metric and the nonce, and optionally its ID label. Then, in step , the trusted device  signs the digest, using its private key, and returns the signed digest, accompanied by the certificate , to the user.","In step , the user receives the challenge response and verifies the certificate using the well known public key of the TP. The user then, in step , extracts the trusted device's  public key from the certificate and uses it to decrypt the signed digest from the challenge response. Then, in step , the user verifies the nonce inside the challenge response. Next, in step , the user compares the computed integrity metric, which it extracts from the challenge response, with the proper platform integrity metric, which it extracts from the certificate. If any of the foregoing verification steps fails, in steps , ,  or , the whole process ends in step  with no further communications taking place.","Assuming all is well, in steps  and , the user and the trusted platform use other protocols to set up secure communications for other data, where the data from the platform is preferably signed by the trusted device .","Further refinements of this verification process are possible. It is desirable that the challenger becomes aware, through the challenge, both of the value of the platform integrity metric and also of the method by which it was obtained. Both these pieces of information are desirable to allow the challenger to make a proper decision about the integrity of the platform. The challenger also has many different options available\u2014it may accept that the integrity metric is recognised as valid in the trusted device , or may alternatively only accept that the platform has the relevant level of integrity if the value of the integrity metric is equal to a value held by the challenger (or may hold there to be different levels of trust in these two cases).","The techniques of signing, using certificates, and challenge\/response, and using them to prove identity, are well known to those skilled in the art of security and therefore need not be described in any more detail herein.","A processing part  of a logon smart card  is illustrated in . As shown, the logon smart card  processing part  has the standard features of a processor , memory  and interface contacts . The processor  is programmed for simple challenge\/response operations involving authentication of the logon smart card  and verification of the platform , as will be described below. The memory  contains its private key , its public key , a user profile , the public key  of the TP and an identity . The user profile  lists the allowable auxiliary smart cards  AC\u2013ACn usable by the user, and the individual security policy  for the user. For each auxiliary smart card , the user profile includes respective identification information , the trust structure  between the smart cards (if one exists) and, optionally, the type or make  of the smart card.","In the user profile , each auxiliary smart card  entry AC\u2013ACn includes associated identification information , which varies in dependence upon the type of card. For example, identification information for a cash card typically includes a simple serial number, whereas, for a crypto card, the identification information typically comprises the public key (or certificate) of the crypto card (the private key being stored secretly on the crypto card itself).","The \u2018security policy\u2019  dictates the permissions that the user has on the platform  while using an auxiliary smart card . For example, the user interface may be locked or unlocked while an auxiliary smart card  is in use, depending on the function of the auxiliary smart card . Additionally, or alternatively, certain files or executable programs on the platform  may be made accessible or not, depending on how trusted a particular auxiliary smart card  is. Further, the security policy  may specify a particular mode of operation for the auxiliary smart card , such as \u2018credit receipt\u2019 or \u2018temporary delegation\u2019, as will be described below.","A \u2018trust structure\u2019  defines whether an auxiliary smart card  can itself \u2018introduce\u2019 further auxiliary smart cards  into the system without first re-using the logon smart card . In the embodiments described in detail herein, the only defined trust structure is between the logon smart card  and the auxiliary smart cards  that can be introduced to the platform  by the logon smart card . Introduction may be \u2018single session\u2019 or \u2018multi-session\u2019, as will be described below. However, there is no reason why certain auxiliary smart cards  could not in practice introduce further auxiliary smart cards . This would require an auxiliary smart card  to have an equivalent of a user profile listing the or each auxiliary smart card that it is able to introduce.","A preferred process for authentication between a logon smart card  and a platform  will now be described with reference to the flow diagram in . As will be described, the process conveniently implements a challenge\/response routine. There exist many available challenge\/response mechanisms. The implementation of an authentication protocol used in the present embodiment is mutual (or 3-step) authentication, as described in ISO\/IEC 9798-3. Of course, there is no reason why other authentication procedures cannot be used, for example 2-step or 4-step, as also described in ISO\/IEC 9798-3.","Initially, the user inserts their logon smart card  into the smart card reader  of the platform  in step . Beforehand, the platform  will typically be operating under the control of its standard operating system and executing the authentication process, which waits for a user to insert their logon smart card . Apart from the smart card reader  being active in this way, the platform  is typically rendered inaccessible to users by \u2018locking\u2019 the user interface (i.e. the screen, keyboard and mouse).","When the logon smart card  is inserted into the smart card reader , the trusted device  is triggered to attempt mutual authentication in step by generating and transmitting a nonce A to the logon smart card  in step . A nonce, such as a random number, is used to protect the originator from deception caused by replay of old but genuine responses (called a \u2018replay attack\u2019) by untrustworthy third parties.","In response, in step , the logon smart card  generates and returns a response comprising the concatenation of: the plain text of the nonce A, a new nonce B generated by the logon smart card , the ID  of the trusted device  and some redundancy; the signature of the plain text, generated by signing the plain text with the private key of the logon smart card ; and a certificate containing the ID and the public key of the logon smart card .","The trusted device  authenticates the response by using the public key in the certificate to verify the signature of the plain text in step . If the response is not authentic, the process ends in step . If the response is authentic, in step  the trusted device  generates and sends a further response including the concatenation of: the plain text of the nonce A, the nonce B, the ID  of the logon smart card  and the acquired integrity metric; the signature of the plain text, generated by signing the plain text using the private key of the trusted device ; and the certificate comprising the public key of the trusted device  and the authentic integrity metric, both signed by the private key of the TP.","The logon smart card  authenticates this response by using the public key of the TP and comparing the acquired integrity metric with the authentic integrity metric, where a match indicates successful verification, in step . If the further response is not authentic, the process ends in step .","If the procedure is successful, both the trusted device  has authenticated the logon smart card  and the logon smart card  has verified the integrity of the trusted platform  and, in step , the authentication process executes the secure process for the user. Then, the authentication process sets an interval timer in step . Thereafter, using appropriate operating system interrupt routines, the authentication process services the interval timer periodically to detect when the timer meets or exceeds a pre-determined timeout period in step .","Clearly, the authentication process and the interval timer run in parallel with the secure process.","When the timeout period is met or exceeded, the authentication process triggers the trusted device  to re-authenticate the logon smart card , by transmitting a challenge for the logon smart to identify itself in step . The logon smart card  returns a certificate including its ID  and its public key  in step . In step , if there is no response (for example, as a result of the logon smart card  having been removed) or the certificate is no longer valid for some reason (for example, the logon smart card has been replaced with a different smart card), the session is terminated by the trusted device  in step . Otherwise, in step , the process from step  repeats by resetting the interval timer.","A preferred, general process for introducing an auxiliary smart card  into a platform  will now be described with reference to the flow diagram in .","When the secure process running on the platform  reaches a point where the logon smart card  needs to be replaced by an auxiliary smart card , for example at the time a cash card is needed to credit the platform  with funds for a remote transaction, in step  the secure process retrieves the user profile from the trusted device  and stores it in its volatile memory . The trusted device  then extracts the details of the auxiliary smart cards  from the user profile and returns the details to the secure process in step . In step , the secure process displays an option list of auxiliary smart cards  and asks the user to select one. The secure process receives the users selection in step  and displays a message asking the user to replace the logon smart card  with the (or one of the) selected auxiliary smart card(s)  in step . As soon as the user ejects the logon smart card , the trusted device locks the user interface in step  and, in step , the secure process initialises the authentication process interval timer with a new timeout period, which determines the allowable duration of the auxiliary smart card session.","[In parallel with the operation of the secure process, which has been described with reference to ), if the timeout period expires before the logon smart card  has been reinstated, the authentication process suspends the session (i.e. the secure process) and provides the user with an appropriate message. The authentication process has the authority to suspend the secure process, since it executed the secure process in the first instance. Clearly, the new timeout period needs to be sufficient for the required purposes, and may be configurable by a system administrator for this reason.]","When the user inserts the selected auxiliary smart card , the trusted device  is triggered to send the auxiliary smart card  a challenge to identify itself in step . The auxiliary smart card  responds by returning its identity information to the trusted device  in step . The trusted device  then verifies the identity information by comparing it with the stored user profile information in step .","If the trusted device  is unable to verify the auxiliary smart card  for any reason, in step  the session ends and the secure process displays an appropriate message for the user. Otherwise, in steps  and , the secure process interacts with the auxiliary smart card  as required.","When the interaction is complete, in step , the secure process displays a prompt to the user to replace the auxiliary smart card  with the logon smart card . When the user ejects the auxiliary smart card  form the smart card reader  and inserts the logon smart card , the trusted device  is triggered to authenticate the logon smart card , by executing from step  in , as described above, resulting in the session ending in step  or continuing in step .","Additionally, or alternatively, in some embodiments it may be required that the user profile is encrypted and signed to protect privacy and integrity. If so, a secure data transfer protocol may be needed between the trusted device  and the logon smart card . There exist many available mechanisms for transferring secure credentials between two entities. A possible implementation, which may be used in the present embodiment, is secure key transport mechanisms from ISO\/IEC DIS 11770-3.","Clearly, the operation of the process that has just been described for introducing an auxiliary smart card  may vary in dependence upon the type of the auxiliary smart card ; for example, whether it is a cash card or a crypto card. Variations in process for different types of auxiliary smart card  will now be described.","Credit Receipt Mode","A credit receipt mode allows a user to remove the logon smart card  for a very brief period of time (say 2 minutes, which is configurable by a system administrator or a user) from the smart card reader  to allow credits (or cash values) from a cash card to be transferred to the trusted device  of the platform  without undue security risk.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 9","FIG. 8"]},"It is assumed that a user profile that lists auxiliary smart cards  including cash cards is stored in the logon smart card . As before, when a user invokes an application that requires cash values, the secure process displays a request for the user to choose a cash card from those listed in the user profile.","The first difference between the credit receipt mode process and the process in  is that in step  the secure process displays a further request for the user to enter the amount of the credit transfer. The secure process receives the entered amount in step  and forwards a respective value to the trusted device  in step . The trusted device  transfers the credits from the cash card to the trusted device  in steps  and , after the cash card has been inserted and authenticated.","As an alternative or additional feature, depending on the security policy, unauthorised cash cards may also be used; for example, there may be an option \u201cOthers\u201d in the list of authorised cash cards. Clearly, the risks associated with receiving credits from any auxiliary smart card  are relatively low.","Typically, only a relatively short time is required to enact the whole process of transferring the credits. The length of the timeout period is determined by the security policy in the user profile. If the timeout is exceeded, the transfer process is aborted and the user interface is temporarily locked. On the other hand, if the user reinserts the logon smart card  within the specified time-limit, a new round of authentication is performed between the smart card and the platform . Upon successful verification, the user interface will be unlocked and the original session, i.e. before the credit transfer mode, resumes, but with the cash value now stored in the trusted device . The cash value may be used for, for example, electronic commerce.","Since the user interface is essentially locked during the credit transfer mode, and is re-activated only after the re-insertion of the logon smart card , the host platform  does not suffer any serious security risk in the credit receipt mode. Further, since the user has to authenticate which cash card to use, using the logon smart card , abuse of cash cards by illegal users is also minimised.","Temporary Delegation Modes","It will be appreciated that for a crypto card to function (say for encryption, decryption, signature and verification), it potentially needs to be inserted in the place of a logon card for a substantial amount of time, unlike for cash cards. To address the need for potentially greater periods of time to use a crypto card, the present embodiment includes what is referred to as a temporary delegation mode, which allows a user to use crypto cards in place of the logon card for an undefined time, subject to possible respective security policy limitations. Temporary delegation modes will now be described with reference to the flow diagram in . The steps that correspond to those illustrated in  will not be specifically described again.","To invoke a temporary delegation mode, a user (or the secure process) selects a temporary delegation mode in step  while the logon smart card  is being used. In response, the host platform  takes the steps to receive and authenticate the auxiliary smart card , which in this example is a crypto card.","When provided with a list of allowable crypto cards, the user specifies the authorised crypto card. Depending on the security policy, unregistered crypto cards may or may not be used. Again, if the user profile is encrypted, a secure data transfer protocol (again, as discussed in ISO\/IEC DIS 11770-3) may be employed.","After the logon smart card  is removed, the user interface is locked and a the secure process displays a message requesting a new smart card.","Upon insertion and authentication of the specified crypto card, the secure process activates user privileges in step  consistent with the security policy of the crypto card. For example, the user may need to use the user interface for entry of certain information related to the crypto card operation, but should not be able to execute any other process or perform any other operation.","When the crypto card is removed from the smart card reader , the user interface is locked again, until the logon smart card  is inserted and authenticated.","The example of the temporary delegation mode described above allows a single auxiliary smart card  to be used in a \u2018single session\u2019 in place of the logon smart card  for an undefined period of time.","An alternative, or additional, temporary delegation mode permits multiple auxiliary smart cards  to be used in turn, in place of the logon smart card , without the need to re-insert the logon smart card . An example of such a \u2018multi-session\u2019 temporary delegation mode will now be described with reference to . As before, the steps that correspond to those illustrated in  will not be specifically described again.","In a multi-session, multiple auxiliary smart cards  can be freely used in place of the logon smart card , thus allowing maximal convenience of use.","To invoke a multi-session temporary delegation mode, a user (or the secure process) selects a multi-session temporary delegation mode in step  while the logon smart card  is being used.","A significant difference between a multi-session temporary delegation mode and the single session temporary delegation mode is that, when provided with the list of available authorised auxiliary smart cards  in step , the user can select multiple authorised auxiliary smart cards  in step . The selected auxiliary smart cards  may be of different kinds depending on the user's requirements.","The host platform  takes the steps to receive and authenticate any one of the selected auxiliary smart cards .","As soon as the logon smart card  is ejected the user interface is locked, the secure process activates user privileges consistent with the operation of that auxiliary smart card  in step . When the auxiliary smart card  is eventually ejected, the process loops to step , a message is generated to replace the card and the user interface is locked again in step . When the next auxiliary smart card  is inserted, the secure process activates user privileges consistent with the operation of that auxiliary smart card  in step  again.","This procedure may be repeated for any of the selected auxiliary smart cards  until the session ends or the logon smart card is re-inserted in step . In other words, the user can use any combination of the selected auxiliary smart cards  without the need of the insertion of the logon smart card  during the whole multi-session. Clearly, such a permissive multi-session is very convenient for the user, although the benefits need to be weighed against the risks of such freedom.","Note that a security control policy described in the user profile may give constraints on the number, types and makes of smart cards allowed in a multi-session as well as any time-limits. Typically, different auxiliary smart cards  give the user different sets of privileges. For instance, some sensitive files may be locked whenever the auxiliary smart card  currently being used is regarded to be not trustworthy enough. Indeed, any truly sensitive application may require the insertion of the logon smart card  again for authentication.","Since it is not easy to estimate how long a temporary delegation mode will last, in theory, it might be acceptable to have no timeout period as such, as in the examples above. However, there are risks associated with such a policy, for example a user may leave the platform  during a temporary delegation mode session. Therefore, it is preferable to have an overall timeout period, fixed for the temporary delegation mode session, which overrides both the normal re-authentication timeout period of the authentication process and the individual timeout periods associated each auxiliary smart card . Additionally, it might also be possible to have individual timeout periods for certain auxiliary smart cards . As usual, the specification of the timeout period(s) will be determined by the security policies for the auxiliary smart cards . In practice, the timeout period for a temporary delegation mode is implemented by the secure process overriding the authentication process. Exemplary fixed session timeout periods for temporary delegation modes are 30 minutes, 1 hour or 2 hours. The period(s) can be set or modified by the user or a system administrator, and may depend on the trustworthiness of the platform .","Re-insertion of the original logon card will typically be needed for extending the temporary delegation mode session, and, generally, the secure process issues a warning message to the user prior to expiration. This is analogous to request for insertion of coins in a phone booth during phone calls. Upon expiration, the user interface will be locked and can be unlocked only by the logon card. If a user attempts to use a time-consuming application in a temporary delegation mode, the secure process may request the insertion of a logon smart card  beforehand to avoid locking the user interface in the middle of an application.","There are a variety of possible, different temporary delegation modes that generally specify the class of auxiliary smart cards  and applications allowed during the temporary delegation mode. For instance, in some modes, perhaps only a single type of auxiliary smart card  (possibly with traceable ID) is allowed. In other modes, only a small class of auxiliary smart cards  is allowed. In yet other modes, a large class of auxiliary smart cards  is allowed.","The exact set of privileges that can be delegated is a function of the system security policy, a choice by the user (in set-up and\/or during the session itself), and the type and make of the auxiliary card being used. Some privileges may be revoked during a temporary delegation mode. For instance, some files (currently on screen or otherwise) may become locked once the temporary delegation mode is employed. High security applications might request the re-insertion of the original logon card. In an extreme case, all privileges except for the specific application may be temporarily suspended during the temporary delegation mode.","As an alternative, or in addition, to the embodiments described above, the logon smart card  may be programmed to categorise different platform . For example, platform may be categorised as \u201cfairly trustworthy\u201d, \u201cvery trustworthy\u201d, or \u201cextremely trustworthy\u201d, depending on the type of the platform . In this case, the platform  type will be revealed by the identity information received by the logon smart card  from the platform . The logon smart card  is programmed to compare the identity information with pre-determined, stored information, where a particular match indicates the category of the platform . Conveniently, the stored category information forms part of the user profile.","The security policy that the logon smart card  adopts with a particular platform  then depends on the category of the platform . In one example, the logon smart card  may transmit different user profile information to the platform  depending on the platform 's category. For example, with a \u201cfairly trustworthy\u201d platform , the smart card might only pass information relating to crypto cards to the platform , to restrict the user to only being able to send and receive encrypted emails, or surf the Internet. Additionally, for \u201cfairly trustworthy\u201d platform , the user profile information may limit to \u2018single-session\u2019 temporary delegation modes. In contrast, a \u201cvery trustworthy\u201d platform  may receive user profile information that permits multi-session temporary delegation modes and even cash card transactions. Finally, an \u201cextremely trusted\u201d platform  would receive user profile information to permit all possible actions including multi-session and cash card transactions but also other administrative functions.","An example of an administrative function, requiring an \u201cextremely trusted\u201d platform , is the ability to create or modify the user profile of a logon smart card . When a logon smart card  verifies that a platform  is an \u201cextremely trusted\u201d platform , it passes user profile information to the platform  that includes an option to allow the user to select, from the secure process, a profile modification option. When the user selects the registration process, a special smart card registration process \u2018wizard\u2019 is displayed. This wizard allows the user to add a new auxiliary smart card , delete an existing auxiliary smart card , and view the detailed information of each auxiliary smart card 's ID, such as its public key or certificate. In the user profile, each registered smart card has a distinguished number and name given during its registration. \u2018Wizards\u2019 are well known in the art of computer applications, and will not be described in any further detail herein.","In alternative embodiments, the user profile information may be stored in the trusted device  or in a remotely located trusted platform . Such arrangements would typically require different mechanisms for controlling access by the secure process or platform  to the user profile information, but the use of the information once accessed would remain the same.","The present invention is not limited in application to smart cards (or other security tokens), which interact passively with a platform. The invention is applicable also to smart cards which can initiate a command to a platform (or trusted device on a platform), communicate with the trusted device for exchange of messages and information, send requests for information, and receive results from the trusted device in response to those requests. Implementation of initiation of user commands from a smart card is known in \u201cSmartcards\u2014from Security Tokens to Intelligent Adjuncts\u201d, by Boris Balacheff, Bruno Van Wilder and David Chan, published in CARDIS 1998 Proceedings.","Similarly, the interpretation of integrity measurements provided by the trusted device may not be achieved by the user, as represented by a smart card or otherwise. An appropriate solution is for a user smart card to have access (typically through the platform) to a trusted third party server which provides this functionality. This can be an advantageous solution because of the limited processing power and memory available on most smart cards. In this arrangement, the integrity metrics data is sent not to the smart card but to a remote server trusted by the smart card. The remote server verifies that the integrity metrics data provided by the trusted device is correct by comparing it with a set of expected integrity metrics. The expected integrity metrics may be supplied by the trusted device itself from pre-stored data within it, or where the platform is of a common type, the trusted server may store sets of expected integrity metrics for that type of computer platform. In either case, the trusted server performs the heavy computational data processing required for verification of the integrity metrics with the expected integrity metrics, and digitally signs the result of the verification. This is sent back to the smart card, which then may either accept or reject the digital signature, and hence the verification result.","While the invention has been described with reference to several preferred embodiments, it will be appreciated that various modifications can be made to the parts and methods that comprise the invention without departing from the spirit and scope thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Preferred embodiments of the present invention will now be described, by way of example only, with reference to the accompanying drawings, of which:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
