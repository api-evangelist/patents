---
title: System and method for facilitating access by sellers to certificate-related and other services
abstract: A system and method are disclosed for facilitating access to a plurality of certificate-related and other services including certificate validation. A seller is provided with digital signature messaging software for accessing these services. Two preferred implementations are disclosed for integrating a seller's existing Web server and applications with this software. The first preferred implementation is referred to as “passive integration” because it requires little or no modification to a seller's existing e-commerce Web application. In this first implementation, the seller's Web site is preferably provided with five additional components: a Web filter for redirecting HTTP requests, a second Web server for parsing the redirected HTTP requests, a servlet that runs applications based on the requested URL, a filter engine that identifies pages from a buyer that require the buyer's signature as well as pages that require access to system services, and a bank interface that receives requests to access system services from the filter engine, and processes those requests. The second preferred implementation is referred to as “active integration” because it requires the seller to rewrite code of its Web applications to provide the functionality necessary to access system services. In active integration, the seller's Web site is preferably provided with the bank interface described above but the functionality provided by the other digital signature messaging software components is instead provided by modifying directly the seller's Web application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07424616&OS=07424616&RS=07424616
owner: Identrus
number: 07424616
owner_city: San Francisco
owner_country: US
publication_date: 20000908
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority to U.S. provisional patent application Ser. No. 60\/153,302, filed Sep. 10, 1999, entitled System and Process for Certification in Electronic Commerce, U.S. provisional patent application Ser. No. 60\/153,328, filed Sep. 10, 1999, entitled System and Process for Certification in Electronic Commerce, and U.S. provisional patent application Ser. No. 60\/153,723, filed Sep. 13, 1999, entitled Pilot Web Application and Software Development Kit Architecture, all three of which are hereby incorporated by reference.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","This invention relates generally to the field of facilitating electronic commerce by providing services via a public key infrastructure.","The world of electronic commerce has created new challenges to establishing relationships between contracting parties. One of those challenges springs from the fact that the parties to the transaction cannot see or hear each other, and cannot otherwise easily confirm each other's identity and authority to act.","One remedy for this problem is to provide each contracting party with a private key for signing transmitted messages. The signing party makes available an associated public key that decrypts messages signed with the party's private key, and thus enables a receiving party to confirm the identity of the sender.","But the sender's public key may not be known a priori to the recipient. In that event, the sender may transmit with its signed message a digital certificate issued by a certificate authority. The certificate is itself a signed electronic document (signed with the private key of the certificate authority) certifying that a particular public key is the public key of the sender.","In some cases, the recipient may be unfamiliar with the public key of the certificate authority or may not know whether the certificate is still valid. In that event, the recipient may wish to check the authenticity and validity of the certificate with an entity that it trusts. One known protocol for checking certificate status is the on-line certificate status protocol (OCSP).","A system and method are disclosed for facilitating access to a plurality of certificate-related and other services including certificate validation. In a preferred embodiment, these services are provided within the context of a four-corner trust model. The four-corner model comprises a buyer, also referred to as the subscribing customer, and a seller, also referred to as the relying customer, who engage in an on-line transaction.","The buyer is a customer of a first financial institution, referred to as an issuing participant. The issuing participant acts as a certificate authority for the buyer and issues the buyer a hardware token including a private key and a digital certificate signed by the issuing participant. The seller is a customer of a second financial institution, referred to as the relying participant. The relying participant acts as a certificate authority for the seller and issues the seller a hardware token including a private key and a digital certificate signed by the relying participant. The system also includes a root certificate authority that issues digital certificates to the issuing and relying participants.","At the time of a transaction, the buyer creates a hash of the transaction data, signs the hash, and transmits the transaction data, the signature, and its digital certificate to the seller. The seller may then request system services such as certificate validation from its financial institution, the relying participant.","The present system and method provide the seller with digital signature messaging software for accessing these system services. Two preferred implementations are disclosed for integrating a seller's existing Web server and applications with this software and, more generally, with the public key infrastructure described below.","The first preferred implementation is referred to as \u201cpassive integration\u201d because it requires no modification to a seller's existing e-commerce Web application. This implementation is designed for organizations seeking the least complex and least intrusive method of integrating their existing Web server with the computer systems of other entities in the four-corner model.","In this first implementation, the seller's Web site is preferably provided with five additional components: a Web filter, a second Web server, a servlet, a filter engine, and a bank interface. The Web filter redirects all requests received by the seller's Web site from the seller's existing Web application to the second Web server. The second Web server parses the request and forwards it to the servlet. The servlet accepts connections, runs applications based on the requested URL, and parses the connections to the filter engine. The filter engine identifies pages from the buyer that require the buyer's signature, formats the data from such pages for signature, and returns the data to the servlet with instructions to have the data signed by the buyer. The servlet generates a response to the buyer's browser that requests signature of the formatted data. The buyer signs the formatted data and returns it to the seller.","The signed data is forwarded to the seller's bank interface which generates a signed request for service, and transmits the request to the seller's relying participant. When, for example, the requested service is certificate validation, the bank interface generates an OCSP request for transmission to the seller's relying participant. The relying participant processes the request and returns a response to the seller's bank interface.","Passive integration may be preferred by sellers having small computer staffs because it is less time consuming to implement, although less efficient. Minimal knowledge of a seller's existing e-commerce applications and core technologies is required to successfully integrate the seller's Web site with other system components. Little or no modification of e-commerce application source code is required.","The second preferred embodiment is referred to as \u201cactive integration\u201d because it requires the seller to rewrite code of its Web applications to provide the functionality necessary to access system services. In active integration, the seller's Web site is preferably provided with the bank interface described above but the functionality provided by the other digital signature messaging software components is instead provided by modifying directly the seller's Web application.","Active integration may be preferred by advanced organizations looking for complete integration with existing applications. Access to the seller's e-commerce application source code and a computer staff with a strong technical background are typically required for active integration.","The present disclosure relates to a system and method that permit customers of financial institutions to securely obtain online certificate validation and other services. In a preferred embodiment, these services are provided within the context of a four-corner trust model. A preferred embodiment of this four-corner model is shown in .","As shown in , the four-corner model preferably comprises a first institution  and a second institution . First institution  is referred to as the \u201cissuing participant\u201d because it is a participant in the present system and issues smart cards to its customers, as described below. Second institution  is referred to as the \u201crelying participant\u201d because it is a participant in the present system and its customers rely on representations made by issuing participant  and issuing participant 's customers, as described below. Participants ,  are typically banks or other financial institutions.","Also shown in  are a first customer  and a second customer . First customer  and second customer  are preferably customers of issuing participant  and relying participant , respectively. First customer  is referred to as the \u201csubscribing customer\u201d because this customer subscribes to services provided by issuing participant . First customer  is also referred to as the \u201cbuyer\u201d because it typically fills that role in transactions with second customer , as described below. Second customer  is referred to as the \u201crelying customer\u201d because it relies on representations made by both issuing participant  and subscribing customer . Second customer  is also referred to as the \u201cseller\u201d because it typically fills that role in transactions with first customer , as described below. It should be recognized, however, that although the description below speaks largely in terms of a buyer  and a seller , first customer  and second customer  may instead have different roles in a given transaction. For example, first customer  may be a borrower repaying a loan to second customer .","Also shown in  is a root entity . Root entity  is typically an organization that establishes and enforces a common set of operating rules for facilitating electronic commerce and electronic communications. Root entity  may be owned jointly by a plurality of banks and\/or other financial institutions that have agreed to adhere to these operating rules. One exemplary embodiment of such a root entity is described in copending application Ser. No. 09\/502,450, filed Feb. 11, 2000, entitled System and Method for Providing Certification Related and Other Services, which is hereby incorporated by reference.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 2"],"b":["102","104","110","202","202","218","202","102","104","202"]},"Participants , , and root entity  are each further preferably provided with an Online Certificate Status Protocol (OCSP) responder  and associated HSM  for signing and verifying signatures on messages.","As further shown in , relying customer  is preferably provided with a Web server  adapted to receive and transmit information via the Internet. Relying customer  is further preferably provided with a bank interface  for accessing system services, as described in more detail below. Relying customer  is preferably further provided with a hardware security module  for signing and verifying signatures on messages.","Other components shown in  as well as exemplary services and message flows for such services are described in copending U.S. patent application Ser. No. 09\/657,621 filed on Sep. 8, 2000, entitled System and Method for Providing Certificate Validation and Other Services and U.S. patent application Ser. No. 09\/657,622 filed on Sep. 8, 2000, entitled System and Method for Providing Payment Services in Electronic Commerce.","In a preferred embodiment, each system entity is provided with two digital certificates (and corresponding private keys) to facilitate authentication: An identity certificate (also referred to, in some cases, as a warranty certificate) and a utility certificate.","The identity private key is used to produce digital signatures that are required by root entity  as evidence of an entity's contractual commitment to the contents of an electronic transaction. A certificate chain is typically required to support operations using this key. The status of the identity certificate may be obtained by requesting certificate validation.","The utility private key is used to produce digital signatures that allow additional transactional security. Typically, utility certificates are used to support secure socket layer sessions, to sign S\/MIME messages, and for other utility applications. A certificate chain is also needed to support operations using the utility key. The status of the utility certificate, however, may not be available to a requester. Throughout this document, the term \u201ccertificate\u201d refers to an identity certificate unless otherwise stated.","In a preferred embodiment, subscribing customer 's digital certificates and associated private keys are provided to it by issuing participant . Issuing participant  preferably issues smart cards or other suitable instruments to subscribing customer  that include at least the private key associated with the subscribing customer's identity certificate. If desired, the smart card may also include the subscribing customer's identity certificate. Preferred specifications for the smart card, its manufacture, and contents are described in copending U.S. provisional patent application Ser. No. 60\/224,994, filed Aug. 14, 2000, entitled Signing Interface Requirements, Smart Card Compliance Requirements, Warranty Service Functional Requirements, and Additional Disclosure, which is hereby incorporated by reference.","As noted above in the Summary of the Invention, the seller is preferably provided with digital signature messaging software for accessing system services. This software is preferably integrated with the seller's computer system. Two preferred implementations for achieving this integration are described below.","The first preferred implementation is referred to as passive integration because it requires no modification of a seller's existing e-commerce Web application. A preferred architecture for implementing passive integration at a seller's Web site is shown in .","As shown in , seller  is preferably provided with several additional digital signature messaging software components that supplement the seller's existing ecommerce Web server  and Web application . In particular, seller  is preferably provided with a filter , an SDK Web server , a servlet , a filter engine , and a bank interface .","Before describing the architecture and operation of each software component in detail, a brief overview of overall operation of the digital signature messaging software is provided. In general terms, filter  intercepts HTTP requests from buyer  and redirects the requests to SDK Web server . SDK Web server  parses the request and forwards the parsed request to servlet . Servlet  builds a hash table based on the information received from browser  and sends the hash table to filter engine . Filter engine  analyzes the hash table to determine if it contains data that requires signing and\/or a request for a service provided by system  (e.g., certificate validation).","Assume, for example, that data requiring signature is included in an intercepted HTTP request. In that event, filter engine  formats the data for signing and passes an object to servlet  indicating that signature is required. Servlet  builds a response to browser  that invokes a signing interface to cause the buyer's smart card  to sign the formatted data.","Preferred embodiments for implementing this signing interface are described in copending U.S. provisional patent application Ser. No. 60\/224,994, filed Aug. 14, 2000, entitled Signing Interface Requirements, Smart Card Compliance Requirements, Warranty Service Functional Requirements, and Additional Disclosure, which is hereby incorporated by reference. As disclosed therein, in one preferred embodiment this signing interface may be implemented using a JAVA applet downloaded from the customer seller's Web server to the buyer's Web browser.","Using a JAVA applet to implement the client interface is advantageous for several reasons. First, the applet can be automatically downloaded from the server each time it is used; therefore, no additional software is required on the signer's machine to support PKI integration (except for the drivers necessary for smart card access) and the applet can be updated without client distribution requirements. Second, JAVA is a cross-platform technology and therefore use of a JAVA applet allows the system to support all JAVA compliant browsers. Third, the OpenCard API provides smart card access from JAVA.","In a second preferred embodiment, data signing may be handled by a series of browser plug-ins. For example, GENERAL NETWORK SOLUTIONS provides a set of browser plug-ins called FormSign that may be used to sign a form's posted data. In this preferred embodiment, one or more plug-ins are installed on the client's machine before signing occurs. A plug-in may, for example, be downloaded over the Internet to the client's computer the first time the user receives a page referencing; it. Plug-ins provide a good solution for active integration where the HTML page to be signed can be modified to explicitly reference the plug-in.","The signed data and buyer's certificate are passed back to filter engine  which then determines whether a system service is required. For example, the seller may wish to validate the buyer's certificate. In that event, filter engine  transmits a message to bank interface  which formulates a formal OCSP request and transmits it to transaction coordinator of relying participant . An OCSP response is generated as described  in more detail in copending U.S. patent application Ser. No. 09\/657,621 filed on even date herewith Sep. 8, 2000, entitled System and Method for Providing Certificate Validation and Other Services, which is hereby incorporated by reference, and returned to bank interface , which forwards the response to filter engine .","Filter engine  then passes an object to servlet  indicating the result of the certificate status check. Assuming the certificate validates properly, servlet  then instructs filter engine  to pass the original HTTP request to existing Web application  and retrieve the next page to be transmitted to buyer .","Thus, an important attribute of passive integration is that SDK Web server  receives all incoming connections previously destined for Web server . Few changes to original Web server  are needed, except that it is no longer accessible from the Internet. Additionally, existing certificates used for SSL encryption may need to be reconfigured to use SDK Web server .","It should be noted that although existing Web server  and SDK Web server  are shown as distinct components in , SDK Web server  may be implemented as a new virtual domain on existing application Web server  if it has sufficient processing resources. Otherwise a separate Web server may be provided.","A computer platform for implementing Web server  preferably contains a minimum of 128 Mb of random access memory and a 10 Mb hard disk. In a preferred embodiment, the system may be implemented on the MICROSOFT WINDOWS NT platform.","In a preferred embodiment, JAVA is used as a language\/platform and is compiled to an intermediate format called byte codes. These byte codes are then executed by a virtual machine. If a JAVA Virtual Machine (JVM) is available for the target platform, the JAVA code can be executed on that platform","Each component of the digital signature messaging software will now be described in more detail. Filter  provides a high level event-handling mechanism that redirects HTTP requests from the seller's application Web server  to SDK Web server . In a preferred embodiment, filter  may be implemented using Microsoft ISAPI (Internet Server Application Programming Interface). It should be noted that ISAPI is a Microsoft technology that can be used only with Microsoft IIS (Internet Information server). However, filters providing similar functionality can also be designed for Netscape's Enterprise Server. Filter  may comprise libraries that when run intercept specific server events and redirect all HTTP requests to SDK Web server .","In a preferred embodiment, filter  is adapted to provide enhanced logging capabilities by tracking more information than that provided by basic Web server log files. In addition, it may employ custom authentication techniques by interposing a unique filter with its own user ID and password method on access requests for a particular type of resource.","Sample code for implementing a filter  is shown in . In a preferred embodiment, distribution of this component may include a compiled DLL (filter.dll) library and source files (filter.c) used to create the DLL. In addition, the ISAPI extension wizard included with Microsoft Visual C++6.0 may be used to modify and subsequently compile the files. The compiled library must then be added to the Web server's filter list with highest priority.","In a preferred embodiment, servlet  transfers all requests redirected by filter  from Web server  to filter engine , as described in more detail below. Servlets are a type of Internet server application (ISA). ISAs cause special software applications to run when a user requests redirected by filter  certain URLs from a Web server. The ISA is responsible for accepting incoming connections and passing them to filter engine  according to filter engine 's interface. In addition, the ISA is adapted to generate HTTP responses based on data received from filter engine .","A number of ISA technologies exist; some are specific to one Web server and others are-industry-standards supported by most major Web servers. Because the present-system preferably supports many Web server and platform combinations, a JAVA implementation is preferred for implementing this ISA. Servlet technology is based on JAVA and is supported by several commercially available Web servers through third-party servlet engines. In a preferred embodiment, servlet  may be implemented using LIVE SOFTWARE'S JRUN 2.2 product a servlet engine that provides integration with several commercially available Web servers, including MICROSOFT INTERNET INFORMATION SERVER (\u201cIIS\u201d), NETSCAPE ENTERPRISE SERVER (\u201cNES\u201d), and APACHE.","Performance issues with servlets, however, may drive a decision to implement other ISA technologies. For example, in an alternative preferred embodiment, the functionality of servlet  may instead be provided by an Internet Server Application Programming Interface (ISAPI). ISAPI is a C-based ISA developed for MICROSOFT INTERNET INFORMATION SERVER (US). A port of ISAPI has been done for the APACHE Web server as well. The corresponding, but different, ISA technology for NETSCAPE ENTERPRISE SERVER (NES) is NETSCAPE SERVER APPLICATION PROGRAMMING INTERFACE (NSAPI). These two interfaces provide close, C-based support for their respective Web servers and therefore provide maximum performance. The problem with using these C-based technologies is the number of platform and Web server combinations that must be written to cover the same breadth as a servlet. Thus, although servlets are typically preferred, ISAPI and NSAPI extensions may be written as necessary for select platforms to improve performance.","In a preferred embodiment, servlet  is adapted to maintain the state of filter engine . When an HTTP request is received from a browser , servlet  passes a hash table to filter engine  containing: (1) the headers from the HTTP request; (2) the method of the request; (3) the content-type of the request; (4) the client IP address; (5) the actual data in the request; and (6) a unique session ID.","Filter engine  processes the hash table and returns a return object to servlet  with an integer value indicating one of four conditions: (1) a signature is required on data in the HTTP request; (2) a response has been received from relying participant  concerning a service request that had been made; (3) the HTTP request has been passed through to Web application ; or (4) an error occurred. Servlet  finishes processing the received HTTP request based on this integer value, as described below in the description of servlet  process flow.","In a preferred embodiment, servlet  may be constructed as a public class object that extends javax.servlet.http.HttpServlet. Illustrative methods for this object are shown and described in the table below. Methods inherited from the parent classes javax.servlet.http.HttpServlet, javax.servlet.GenericServlet, and java.lang are not shown in the table.",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Servlet Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ReturnObject","callFilterEngine(java.util.Hashtable theHashtable)"]},{"entry":[{},"Calls the filter engine to determine if the request"]},{"entry":[{},"needs to be signed."]},{"entry":["void","doGet(javax.servlet.http.HttpServletRequest req,"]},{"entry":[{},"javax.servlet.http.HttpServletResponse res)"]},{"entry":[{},"Handles all GET requests coming from a Web"]},{"entry":[{},"browser. JRUN automatically creates a thread of"]},{"entry":[{},"this method for every request, thus this method"]},{"entry":[{},"must be thread-safe."]},{"entry":["void","doPost(javax.servlet.http.HttpServletRequest req,"]},{"entry":[{},"javax.servlet.http.HttpServletResponse res)"]},{"entry":[{},"Handles all POST requests coming from a Web"]},{"entry":[{},"browser. JRUN automatically creates a thread of"]},{"entry":[{},"this method for every request, thus the method"]},{"entry":[{},"must be thread safe."]},{"entry":["java.util.Hashtable","getRequestHeaders(javax.servlet.http."]},{"entry":[{},"HttpServletRequest req)"]},{"entry":[{},"Places all HTTP headers coming from the"]},{"entry":[{},"browser in a hashtable."]},{"entry":["void","handleRequest(javax.servlet.ServletOutputStream"]},{"entry":[{},"out, javax.servlet.http.HttpSession currentSession,"]},{"entry":[{},"javax.servlet.http.HttpServletRequest req,"]},{"entry":[{},"javax.servlet.http.HttpServletResponse res,"]},{"entry":[{},"java.util.Hashtable theHash, byte [ ] binaryData,"]},{"entry":[{},"java.lang.String theQuery, java.lang.String"]},{"entry":[{},"theContentType)"]},{"entry":[{},"This method handles every HTTP request coming"]},{"entry":[{},"from a signing interface."]},{"entry":["void","init(javax.servlet.ServletConfig config)"]},{"entry":[{},"Initializes the servlet and loads servlet properties."]},{"entry":["void","printErrorResponse(java.util.Hashtable headers,"]},{"entry":[{},"javax.servlet.ServletOutputStream out,"]},{"entry":[{},"java.lang.String theMessage)"]},{"entry":[{},"Builds error HTML response."]},{"entry":["void","printPluginPage(javax.servlet."]},{"entry":[{},"ServletOutputStream out, java.lang.String"]},{"entry":[{},"theQuery)"]},{"entry":[{},"Builds the HTML page that will display the data"]},{"entry":[{},"signing plug-in."]},{"entry":["byte [ ]","readMessage(javax.servlet.http."]},{"entry":[{},"HttpServletRequest req)"]},{"entry":[{},"Reads the posted data regardless of its"]},{"entry":[{},"MIME-type, whether binary data such as"]},{"entry":[{},"MS-WORD, HTML, and text documents."]},{"entry":["java.util.Vector","readRequestData(javax.servlet.http."]},{"entry":[{},"HttpServletRequest req, java.lang.String"]},{"entry":[{},"theMethod)"]},{"entry":[{},"Recreates the x-www-form-url-encoded query"]},{"entry":[{},"string posted by a browser."]},{"entry":["javax.servlet.http.","setServletHeaders(javax.servlet.http."]},{"entry":["HttpServletResponse","HttpServletResponse res, java.util.Hashtable"]},{"entry":[{},"theHeaders)"]},{"entry":[{},"Copies headers from the Web application"]},{"entry":[{},"response back to the browser response."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In a preferred embodiment, ReturnnObject may take the following form:","ReturnObject{","Int ={","Constants.WEBAPP |","CertStatus.GOOD |","CertStatus.REVOKED |","CertStatus.UNKNOWN |","Constants.SUCCESS |","Constants.EXCEPTION |","}","String = {Business Determined}","Hashtable = {","{Constants.PAGE}","{Constants.HEADERS}","{Constants. SERVICE}","{Constants.MODE}","}","}","An example of servlet  process flow is now described in connection with . As shown in , in step , servlet properties are loaded from a properties file. In step , servlet  reads data from a received HTTP request. In step , servlet  creates a hash table (comprising name and value pairs) with parameters for filter engine  including HTTP headers, client IP address, HTTP method (GET and SET), content type, and the actual data in the request. In step , servlet  determines if data in the HTTP request has been signed. If it has not been signed, in step , servlet  calls filter engine  with the hash table. Otherwise, in step , servlet  URL decodes the PKCS#7 message received from browser , inserts it into the hash table, and calls filter engine  with the hash table.","In step , servlet  receives a return object with an integer value indicating one of the four conditions described above. Based on this value servlet  finishes processing the original request In particular, if the return value from filter engine  indicates that Web application  has been called, then in step , servlet  causes the next Web page to be transmitted to Web browser . If the return value from filter engine  indicates that the page needs to be signed, then, in step , servlet  stores the state of filter engine  in a cookie and causes the page with the signing interface plug-in to be transmitted to Web browser . If the return value from filter engine  indicates that the client certificate is good then, in step , servlet  changes the state and sends a request to filter engine  to retrieve the next page to be displayed to buyer . For all other values or exceptions, servlet  displays an error page to the client, as shown in step .","Filter engine  receives HTTP requests from servlet  and applies filtering rules to distinguish pages that need to be signed or that require a system service from pages that should be passed to existing Web application . The rules may be loaded when filter engine  is first instantiated. The contents of the rules files may be a function of the seller's existing Web application  and business process.","HTTP requests that include data to be signed may be recognized by filter engine  in a variety of ways. In one preferred embodiment, filter  may be programmed to recognize each HTTP request that includes data to be signed on the basis of data included in the posted HTTP request data. Rules may be defined that identify data requiring signature. This variation requires application knowledge and advanced knowledge of the Web application's architecture. An understanding of the data being posted and how each posting differs in the application must be gained.","Alternatively, HTTP requests transmitted by Web browser  may be modified to include a special tag that indicates whether the request needs to be signed. For example, a hidden field identifying the request as requiring signature may be added to a form or an additional HTTP header line may be added to the request. Alternatively, HTTP requests requiring signature may be recognized by changing the suffix for the ISA file to handle the request (e.g., submit.dll to submit.sdll) for forms posting. If the requests are modified to include a special tag, the rules defined for filter engine  may be simplified and generalized for all posts requiring signatures. This alternative embodiment requires code modification to some degree, but should improve performance.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 6","FIG. 6"],"b":"306"},"In a preferred embodiment, filter engine  provides an abstracted front-end interface via JAVA Remote Method Invocation (RMI).","In a preferred embodiment, filter engine  may be implemented as a public class object that extends java.lang.Object. This class implements one of the public services provided by filter engine 's RMI server. Illustrative methods for this object are shown and described in the table below. Methods inherited from the parent class java.lang.object are not shown in the table.",{"@attributes":{"id":"p-0099","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Filter Engine Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ReturnObject","call WebApp(java.util.Hashtable theHash)"]},{"entry":[{},"Creates an HTTP or HTTPS connection to a Web"]},{"entry":[{},"Application according to the parameters in a Hashtable."]},{"entry":["long","getSessionID( )"]},{"entry":[{},"A thread safe method for generating signed transaction IDs."]},{"entry":["ReturnObject","newRequestHandler(java.util.Hashtable theHash)"]},{"entry":[{},"Method called when the sate of the FilterEngine is"]},{"entry":[{},"FE_NEW_REQUEST."]},{"entry":["ReturnObject","oldRequestHandler(java.util.Hashtable theHash)"]},{"entry":[{},"Method called when the state of the FilterEngine is"]},{"entry":[{},"FE_REQUEST_CHECKED."]},{"entry":["ReturnObject","service(java.util.Hashtable theHash)"]},{"entry":[{},"Implementation of one of IRmiServer public services."]},{"entry":["ReturnObject","signedRequestHandler(java.util.Hashtable theHash)"]},{"entry":[{},"Method called when the state of the FilterEngine"]},{"entry":[{},"is FE_SIGNED_DATA."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"When the RMI server is started, it creates an instance of the filter engine class which loads and validates the rules file as part of its constructor.  illustrates sample code that may be used in a preferred embodiment to invoke the filter engine RMI server. The rules class may be a public class object that extends java.lang.Object used by filter engine  to process the rules. A preferred embodiment of the construction of rules process methods is shown in the table below.",{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Rules Process Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["java.lang.String","getMode( )"]},{"entry":[{},"Returns the mode associated with a particular rule."]},{"entry":["java.lang.String","getService( )"]},{"entry":[{},"Returns the service associated with a particular rule."]},{"entry":["static","readRules(java.lang.String theFileName)"]},{"entry":["java.util.Vector","Reads all rules from the RulesFile and stores them"]},{"entry":[{},"in a vector."]},{"entry":["boolean","rulesMatch( )"]},{"entry":[{},"Examines an HTTP request and determines if it needs"]},{"entry":[{},"to be signed."]},{"entry":["static void","validateRules(java.util.Vector rules)"]},{"entry":[{},"Validates rules format, content, and naming of rule"]},{"entry":[{},"elements."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 8","FIG. 8"],"b":["306","802","306","35","804","306","806","306","808","306","810","306","812","306","306"]},{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 9","FIG. 9"],"b":["304","306","902","306","306","304","306","304","904","306","222","222","306","304","906","306","310","310","304","908"]},"A preferred embodiment for implementing bank interface  is shown in . As shown in , bank interface  is preferably designed with a plug-in based architecture that allows new service modules (e.g., certificate status check module , warranty , etc.) to be added as they are created.","Relying customer  initiates a service request by accessing one of these modules, which ensures proper message formatting and protocol handling. For example, certificate status check module  creates a proper OCSP request and submits it to relying participant .","In a preferred embodiment, bank interface  supports an abstract front-end interface to allow communication via several different middleware technologies used to access it from other code modules. A number of technologies may be used to access bank interface  including Common Object Request Broker Architecture (\u201cCORBA\u201d), Component Object Model (\u201cCOM\u201d), Remote Method Invocation (\u201cRMI\u201d), and TCP\/IP Sockets. In a preferred embodiment, an RMI binding implementation may be used to expand the abstract interface to include CORBA and COM versions.",{"@attributes":{"id":"p-0107","num":"0106"},"figref":["FIG. 11","FIG. 11"],"b":["222","1102","222","1104","222","1106","222","1108","222","1110","222","222","306"]},{"@attributes":{"id":"p-0108","num":"0107"},"figref":["FIG. 12","FIG. 12"],"b":["306","222","1202","222","108","110","1204","222","106","102","106","1206","222","1208","222","106","102","1210","222","102","110","1212","222","222"]},"In step , bank interface  retrieves the URL for OCSP responder from relying customer 's certificate. In step , bank interface  creates an OCSP request for subscribing customer 's certificate signed by relying customer . All OCSP requests preferably contain a Service Locator Extension used to locate the relying participant which is set by an Authority Information Access (AIA) extension defined in the seller's certificate. Alternatively, bank interface  may employ a different mechanism to configure the location of relying participant  which may override the location information in the AIA extension. In a preferred embodiment, bank interface  supports both raw OCSP and OCSP wrapped in XML. Preferred aspects of both a raw OCSP embodiment and an OCSP wrapped in XML embodiment are described below.","In step , bank interface  logs the OCSP request in a transaction log. In step , bank interface  creates an HTTP(S) connection to OCSP responder and transmits the OCSP request to it. In a preferred embodiment, bank interface  may be adapted to transmit all OCSP requests to relying participant , even when bank interface  can tell that relying participant  is not the participant that issued the certificate that is the subject of the request. In step , bank interface  receives an OCSP response from OCSP responder R and verifies the signature on the response using OCSP Responder 's certificate. In step , bank interface  extracts the status of subscribing customer 's certificate from the response. Steps  to  are repeated for issuing participant 's certificate and relying participant 's OCSP Responder's certificate as shown in step . In step , bank interface  logs the OCSP response for each of these requests to the transaction log.","If the status of all the responses is \u201cgood\u201d then, in step , bank interface  returns a message to that effect to filter engine . Otherwise, bank interface  returns the status of the checked certificate to filter engine . In step , bank interface  logs all signed requests to an event log and all errors to an error log. All exceptions are returned to the client as a part of the return object.","A preferred embodiment of the methods that may be incorporated in a certificate status check module of bank interface  are shown in the table below. These methods are used to perform the basic steps described above for certificate status checking. Bank interface certificate status checking method is preferably a public class object that extends java.lang.Object. The methods inherited from the parent class java.lang.Object are not shown in the table.",{"@attributes":{"id":"p-0113","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Certificate Status Check Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["EOCSPRequest","createOCSPRequest(com.identrus.bankinterface."]},{"entry":[{},"Certificate cert,"]},{"entry":[{},"com.identrus.bankinterface.Certificate issuerCert,"]},{"entry":[{},"com.identrus.bankinterface.Certificate"]},{"entry":[{},"RequestorCert,"]},{"entry":[{},"com.identrus.bankinterface.CertID certId)"]},{"entry":[{},"Creates an OCSPRequest with the corresponding"]},{"entry":[{},"extensions necessary for forwarding\/proxying."]},{"entry":["com.identrus.","getCertificateID(com.identrus.bankinterface."]},{"entry":["bankinterface.","Certificate cert)"]},{"entry":["CertID","Builds a CertID object that identifies a certificate."]},{"entry":["void","getCertStatus(com.identrus.bankinterface.OCSP"]},{"entry":[{},"Response resp,"]},{"entry":[{},"com.identrus.bankinterface.CertID certId, int"]},{"entry":[{},"certType)"]},{"entry":[{},"Retrieves the status of a certificate, by ID, from"]},{"entry":[{},"an OCSP response and checks its status."]},{"entry":["void","getCertsVerifyMessage(com.identrus.bankinterface."]},{"entry":[{},".SignedData sd, java.util.Hastable data)"]},{"entry":[{},"Get the SC, CA Certificates from the CMS"]},{"entry":[{},"Message, and verify the signature on the CMS"]},{"entry":[{},"Message."]},{"entry":["java.lang.String","getURL(com.identrus.bankinterface.Certificate"]},{"entry":[{},"c)"]},{"entry":[{},"Get the URL from the AuthorityInfoAccess"]},{"entry":[{},"certificate extension."]},{"entry":["boolean","isResponseSuccessful(com.identrus.bankinterface."]},{"entry":[{},"OCSPResponse resp)"]},{"entry":[{},"Check the OCSP response status."]},{"entry":["void","logAndBuildReturnObject(int certStatus,"]},{"entry":[{},"java.lang.String strMessage)"]},{"entry":[{},"Log the OCSP response results, and build the"]},{"entry":[{},"ReturnObject."]},{"entry":["void","processOCSP(com.identrus.bankinterface.Certificate"]},{"entry":[{},"cert, com.identrus.bankinterface.Certificate"]},{"entry":[{},"issuer, com.identrus.bankinterface.Certificate"]},{"entry":[{},"requestor, int certType)"]},{"entry":[{},"Checks the status of a certificate issued by the"]},{"entry":[{},"issuer and is being checked by the requestor."]},{"entry":["com.identrus.","sendAndReceiveMessage(EOCSPRequest req)"]},{"entry":["bankinterface.","Sends an OCSPRequest and retrieves the"]},{"entry":["OCSPResponse","OCSPResponse received from the Responder."]},{"entry":["ReturnObject","serviceRequest(java.util.Hashtable data)"]},{"entry":[{},"The main logic for the Certificate Status Check"]},{"entry":[{},"Service."]},{"entry":["com.identrus.","verifyResponseSignature(com.identrus.bankinterface."]},{"entry":["bankinterface.","OCSPResponse resp)"]},{"entry":["Certificate","Retrieves responder certificates from the response"]},{"entry":[{},"and verifies the Signature of the OCSP response."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"An example of system operation using the passive integration implementation described above is shown in . As shown in , in step , a buyer  clicks the \u2018Submit\u2019 button on an HTML form displayed to buyer  by Web browser . In step , Web browser  posts form data to seller 's Web site. In step , filter  redirects the received HTTP request to servlet . In step , servlet  passes the HTTP request to filter engine . In step , filter engine  determines if the HTTP request requires signature by buyer  and, if so, creates a Return-to-Browser URL (as a GET with parameters for data) representing the data of the original POST or GET form posting and returns it along with instructions to get the data signed to servlet . In step , servlet  builds a response with either an applet tag pointing to the signing interface applet or a call to a browser plug-in, the arguments Return-to-Browser URL, and the data to sign.","In step , SDK Web server  returns servlet 's response to Web browser . In step , Web browser  displays the HTML page and, if necessary, requests the appropriate signing interface applet or plug-in. In step , Web browser  displays the client interface applet or activates the plug-in. Arguments may include the data to be signed and possibly a URL.","In step , buyer  clicks a button to approve signing of the form data. In step , the client interface (applet or plug-in) calls a smart card API to request that smart card  sign an SHA-1 hash of the form data. In step , buyer  enters its PIN when the driver asks for it.","In step , the smart card API returns the signed form data to the signing interface. In step , the signing interface makes an HTTP connection to SDK Web server  and submits the signed form data. In step , SDK Web server  passes the request to servlet .","In step , servlet  passes the request to filter engine . In step , filter engine  calls bank interface  with the signed data. In step , bank interface  creates an OCSP request and calls the open card API to request that seller 's HSM sign an SHA-1 hash of the request.","In step , open card API calls seller 's HSM OS Driver. In step , HSM OS Driver calls seller 's HSM to sign the request. In step , the HSM OS Driver returns the signed request to open card API.","In step , open card API returns the signed request to bank interface . In step , bank interface  transmits the request to relying participant . In step , relying participant  forwards the request to issuing participant .","In step , issuing participant  returns a signed response to relying participant . In step , relying participant  requests validation of issuing participant 's certificate from root entity . In step , root entity  returns a signed OCSP response to relying participant .","In step , relying participant  returns a signed OCSP response to bank interface . In step , bank interface  validates the signed data and records the transaction in the log. In step , bank interface  validates the signed data and stores the signed data and the signed response from relying participant  in SDK Web server 's database.","In step , bank interface  returns an OK or failure result to filter engine . In step , filter engine  returns failure result to servlet  or passes initial request to Web application server . In step , if the request for system service resulted in a failure (e.g., if the result of a certificate status check was that the certificate is not valid), servlet  builds a response indicating that a failure occurred. In step , SDK Web Server  returns servlet 's failure response to browser .","As noted, the second preferred implementation for integrating digital signature messaging software with a seller's existing Web application is referred to as active integration because it requires modification of the seller's existing Web application. A preferred architecture for implementing active integration at a seller's Web site is shown in . As shown in , the seller's Web site is preferably provided with a bank interface  in addition to its existing Web server  and Web application . The functionality of the other digital signature messaging software components described above is preferably incorporated directly into Web application .","If the seller's Web application  exposes an Application Programming Interface (API) for enhancements, it may be used to integrate the application with the disclosed pubic key infrastructure. If Web application  is implemented using a tool with a set of APIs and well-documented techniques extending the application, developers with less knowledge of Web application  and its technologies may be able to implement the active integration solution. If no API exists, the actual source code of Web application  or the tool used to build it may be modified. In either case, the integration code is preferably adapted to call bank interface , effectively bypassing the need for filter engine .","Active integration requires advanced knowledge of the technologies used to implement Web application . One important attribute of active integration in comparison to passive integration is that all incoming requests are processed in their traditional manner, as opposed to being filtered. This results in a positive performance gain compared to passive integration.","An example of system operation using the active integration implementation described above is shown in . As shown in , in step , buyer  requests a form that will require signing when submitted. In step , Web browser  submits an HTTP request to seller 's Web site. In step , Web server  forwards the HTTP request to Web application .","In step , Web application  returns an HTML page that references the client signing interface. In step , Web server  returns the HTML page to Web browser . In step , Web browser  requests the client signing interface from Web server .","In step , Web server  retrieves the client signing interface. In step , Web server  returns the client signing interface to Web browser . In step , buyer  clicks the submit and sign button on the displayed Web page.","In step , Web browser  calls the client signing interface. In step , the client signing interface calls Windows PC\/SC to have the buyer's smart card  sign the data. In step , buyer  enters its PIN.","In step , Windows PC\/SC calls buyer 's smart card  to sign the data. In step , Windows PC\/SC returns the signed data to the signing interface. In step , the signing interface returns the signed data to Web browser .","In step , Web browser  posts the signed data to Web server . In a preferred embodiment, the posted data is a PKCS#7 message. In step , Web server  passes the signed posting to Web application . In step , integration code added to Web application  calls bank interface  to verify the signature on the form.","In step , bank interface , generates an OCSP request and calls HSM OS Driver to sign it. As noted above, bank interface  may retrieve subscribing customer 's and issuing participant 's certificates from a CMS (Cryptographic Message Syntax) also referred to as PKCS#7 received from buyer  and preferably verifies the signatures on the CMS message and buyer's certificate, and checks the integrity of the signed data.","In step , HSM OS Driver calls HSM  to sign the OCSP request. In step , HSM OS Driver returns the signed request to bank interface . In step , bank interface  transmits the request to relying participant . In step , relying participant  forwards the request to issuing participant . In step , issuing participant  returns a signed OCSP response to relying participant . In step , relying participant  calls root entity  to validate the certificates of issuing participant . In step , root entity  returns a signed response to relying participant .","In step , relying participant  returns the signed response to interface . In step , bank interface  stores the signed data and the signed response from relying participant  in a signed documents repository. In step , bank interface  writes a transaction log message. In step , bank interface  returns the result of the request to Web application . In step , Web application  interprets the form post and returns the next page (or an error) to Web server . In step , Web server  returns the page to Web browser .","In a preferred embodiment, the system supports flat (text) files and Microsoft Access. Logging with MS-Access may be achieved using ODBC drivers, commonly distributed for all Windows platforms. Also provided in a preferred embodiment is a transaction monitoring tool. The tool helps relying customer  query the transaction log. The following information is preferably stored as a log: subscribing customer 's IP address, subscribing customer 's name extracted from the certificate, the date and time of the transaction, the name of the service, the mode of the service (synchronous or asynchronous), and the message logged.","As indicated above, properties are used to configure various components of the present system by supplying user defined parameter values contained in a file.  illustrates an exemplary set of properties for servlet .  illustrates an exemplary set of properties for filter engine .  illustrates an exemplary set of properties for bank interface .","As noted above, in a preferred embodiment, bank interface  supports both raw OCSP and OCSP wrapped in XML. In a preferred embodiment, bank interface  is adapted to provide the following features in supporting raw OCSP:","1. Establish an SSL connection for all OCSP requests and responses. Client authentication is preferably not provided for this SSL session.","2. Verify the revocation status of each certificate in the chain except that of root entity .","3. Not verify the revocation status of root entity 's certificate.","4. Cause all OCSP requests to be signed with relying customer 's private signing key.","5. Authenticate all OCSP responses.","6. Include a nonce in the OCSP request in cases where a fresh response (rather than a cached response) is being transmitted. The OCSP response preferably includes the nonce submitted in the initial request.","7. If desired, the \u201cFreshness Proof\u201d of relying participant 's certificate may be ignored. In that case, a new OCSP request is preferably made for the revocation status of relying participant 's signing certificate.","In a preferred embodiment, bank interface  is adapted to provide the following features in supporting OCSP wrapped in XML:","1. Conform XML requests to a messaging set defined by root entity . An exemplary messaging set is described in copending U.S. provisional patent application Ser. No. 60\/231,319, filed on Sep. 8, 2000, entitled Transaction Coordinator Certificate Status Check (CSC) Protocol Definition, Transaction Coordinator Messaging Protocol Definition.","2. Generate and use a unique transaction ID.","3. Cause the XML request to be signed by relying customer 's private key. If desired, the embedded OCSP request may also be signed by the Relying Customer's signing key.","4. A nonce may be included in the embedded OCSP request to indicate that a fresh response is required rather than a cached response.","5. If desired, the \u201cFreshness Proof\u201d of relying participant 's certificate may be ignored. In that case, revocation information regarding relying participant 's signing certificate is preferably verified in a separate request.","In a preferred embodiment, the digital signature messaging software described above is adapted to process a signed PKCS#7 request from subscribing customer  and post a Certificate Status Check request to relying participant  in one second or less. Certificate status check responses from relying participant  are preferably processed in one second or less.","In a preferred embodiment, the digital signature messaging software described above is adapted to reliably handle  concurrent requests without any performance degradation in a single minute at peak load. In a preferred embodiment, the digital signature messaging software described above is available 90% of the time during interoperability testing and 95% of the time during pre-production testing. During production, availability preferably meets requirements specified by root entity .","In an alternative preferred embodiment, rather than supporting both raw OCSP and OCSP wrapped in XML, the system may employ a pure XML implementation. Standards based protocols for certification validation may also be considered rather than devising a new proprietary protocol. One such protocol is the \u201cSimple Certificate Validation Protocol (SCVP)\u201d which is in an Internet-draft form at the current time. This protocol would enable a relying customer  to offload path validation responsibilities to a remote path processing server (RPPS).","While the invention has been described in conjunction with specific embodiments, it is evident that numerous alternatives, modification, and variations will be apparent to those skilled in the art in light of the foregoing description."],"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above summary of the invention will be better understood when taken in conjunction with the following detailed description and accompanying drawings, in which:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 4","FIG. 3"],"b":"302"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5","b":"304"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6","b":"306"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8","b":"306"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9","b":["304","306"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10","b":"222"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11","b":"222"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 12","b":["306","222"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 16","b":"304"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 17","b":"306"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 18","b":"222"}]},"DETDESC":[{},{}]}
