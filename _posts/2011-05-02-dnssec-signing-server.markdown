---
title: DNSSEC signing server
abstract: Systems and methods for performing DNSSEC signing are described in which digital signature operations may be performed by a network accessible signing server that is configured to interact with a separate client application. Exemplary methods may include receiving a signing request at the signing server from the client application to sign first data. The signing server may determine an active KSK and/or an active ZSK for the first data. The first data may then be transmitted by the signing server to a digital signature modules, which may include, for example, a hardware support module, or software signing applications. The signing server may receive a digitally signed version of the first data from the digital signature module, and provide the signed first data to the client application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09130917&OS=09130917&RS=09130917
owner: VERISIGN, INC.
number: 09130917
owner_city: Reston
owner_country: US
publication_date: 20110502
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The Domain Name System (DNS) is the part of the Internet infrastructure that translates human-readable domain names into the Internet Protocol (IP) numbers needed to establish TCP\/IP communications over the Internet. That is, DNS allows users to refer to web sites, and other resources, using easier to remember domain names, such as \u201cwww.en.example.com,\u201d rather than the numeric IP addresses, such as \u201c123.4.56.78,\u201d which are machine readable addresses used by software to communicate with computers on the Internet. Each domain name is made up of a series of character strings (labels) separated by dots. The right-most label in a domain name is known as the \u201ctop-level domain\u201d (TLD). Examples of well-known TLDs are \u201c.com\u201d; \u201c.net\u201d; \u201c.org.\u201d etc. Each TLD supports second-level domains, listed immediately to the left of the TLD, e.g., \u201cexample\u201d in \u201cwww.example.com.\u201d Each second-level domain can support a number of third-level domains located immediately to the left of the second-level domain, e.g., \u201cen\u201d in \u201cwww.en.example.com.\u201d There can be additional level domains as well. For example, a domain with additional domain levels could be \u201cwww.landscape.photos.example.com.\u201d","It should be noted that a single IP address, e.g., one assigned to a single server, can support numerous domain names. That is, different domain names may resolve to the same server, that can then determine what content to provide based on the requested domain name and\/or additional non-domain information. This is sometimes referred to as virtual hosting.","Additional non-domain information may be included in a Uniform Resource Identifier (\u201cURI\u201d) structure that includes the domain name. For example, a \u201cpath\u201d part is a sequence of segments separated by a forward slash (\u201c\/\u201d). This information may be included immediately to the right of the domain name, such as the \u201cblog\u201d in \u201cwww.example.com\/blog\/today.htm,\u201d and may be used by a server or other receiving device to identify and deliver specific content or run particular code. Other examples of non-domain information may include queries and fragments, the specifics of which are understood by those of ordinary skill in the art and are not discussed in detail herein. Combinations of this information may be included in web page hyperlinks that navigate a user to another section of the same page or to another web page.","Thus, as can be seen in the various examples provided above, and as appreciated by those of skill in the art, a domain, such as the second level domain \u201cexample.com\u201d, may contain a variety of different Internet accessible information with different addresses and other means of identification.","The actual registration of domain names is performed by companies referred to as domain name registrars (\u201cregistrars\u201d). Registrars register domain names with registries. For example, an end user submits to a registrar a domain name for registration and provides an IP address to which the domain name should resolve. The registrar communicates with the registry to create a registry database record that can be used to resolve the domain name to the IP address provided by the end user and indicates the identity of the registrar through which the domain name was registered. Except for the expiration of the domain name registration at the registry, typically only the registrar designated in the domain name record at the registry can modify or delete registry database information about a domain name. An end user can switch registrars by following certain domain transfer procedures. Registrars may also act as a hosting provider, or the end user may have the domain hosted by a separate third-party domain hosting service.","A zone file is a text file that describes a portion of the DNS called a DNS zone. A zone file is organized in the form of resource records (RR) and contains information that defines mappings between domain names and IP addresses and other resources. The format of zone files is defined by a standard, with each line typically defining a single resource record. A line begins with a domain name, but if left blank, defaults to the previously defined domain name. Following the domain name is the time to live (TTL), the class (which is almost always \u201cIN\u201d for \u201cinternet\u201d and rarely included), the type of resource record (A, MX, SOA, etc.), followed by type-specific data such as the IPv4 address for A records. Comments can be included by using a semi-colon and lines can be continued by using parentheses. There are also file directives that are marked with a keyword starting with a dollar sign.","The DNS distributes the responsibility of assigning domain names and mapping those names to IP addresses by designating authoritative name servers for each domain. Authoritative name servers are assigned to be responsible for their particular domains, and in turn can assign other authoritative name servers for their sub-domains. This mechanism generally helps avoid the need for a single central register to be continually consulted and updated. The DNS resolution process allows for users to be directed to a desired domain by a reverse lookup process whereby the user enters the desired domain, and the DNS returns appropriate IP numbers. During the DNS resolution process, a request for a given domain name is routed from a resolver (e.g. a stub resolver) to an appropriate server (e.g. a recursive resolver) to retrieve the IP address. To improve efficiency, reduce DNS traffic across the Internet, and increase performance in end-user applications, the DNS supports DNS cache servers that store DNS query results for a period of time determined by the time-to-live (TTL) of the domain name record in question. Typically, such caching DNS servers, also called DNS caches, also implement the recursive algorithm necessary to resolve a given name starting with the DNS root through to the authoritative name servers of the queried domain. Internet service providers (ISPs) typically provide recursive and caching DNS servers for their customers. In addition, home networking routers may implement DNS caches and proxies to improve efficiency in the local network.","Although the distributed nature of the DNS provides significant advantages in terms of the efficiency of the overall system it also makes the system vulnerable to certain types of malfunctions and\/or attacks at various nodes in the system. One particular problem that can occur is referred to as DNS cache poisoning. DNS cache poisoning occurs when data are introduced into a DNS name server's cache database that did not originate from authoritative DNS sources. This may result from deliberate attacks on a name server, or it may be an unintended result of, for example, a misconfigured DNS cache or improper software design of a DNS applications. Thus, DNS cache poisoning can result in (1) resolution requests failing, such as when inaccurate or misconfigured IP address information is provided, or (2) a requesting user's resolution request being directed to a malicious site that spoofs the genuine domain and is used to illicitly obtain information such as account passwords, or to distribute malicious content, such as computer worms or viruses, that are delivered to the requesting user.","The Domain Name System Security Extensions (DINSSEC) is a suite of Internet Engineering Task Force (IETF) specifications for securing certain kinds of information provided by the DNS as used on IP networks. DNSSEC provides for the signing of DNS-ready zone files, ensuring origin authentication and data integrity for DNS data, as well as authenticated denial of existence. In general, answers provided within DNSSEC are digitally signed, and, by checking the digital signature, a DNS resolver is able to check if the information corresponds to the information on the authoritative DNS server. DNSSEC uses public-key cryptography for the digital signatures and authentication. The DNSKEY record is authenticated via a chain of trust, starting with a set of verified public keys for the DNS root zone, which is a trusted third party.","To implement DNSSEC, several new DNS record types were created or adapted to use with DNSSEC, including RRSIG, DNSKEY, DS, NSEC, NSEC3 and NSEC3PARAM. For example, when DNSSEC is used, each authoritative answer to a DNS lookup will contain an RRSIG DNS record in addition to the record type that was requested. The RRSIG record is a digital signature of the answer DNS resource record set. The digital signature can be verified by locating the correct public key found in a DNSKEY record. The DS record is used in the authentication of DNSKEYs in the lookup procedure using the chain of trust. NSEC and NSEC3 records are used to provide the authenticated denial of existence responses for DNS records that do not exist.","The requirements of DNSSEC involve the use of different keys, stored both in DNSKEY records and from other sources to form trust anchors. There are, for example, Key Signing Keys (KSKs), which are used to sign other DNSKEY records, and Zone Signing Keys (ZSKs), which are used to sign other records. Because the ZSKs are under the control and use of a specific DNS zone, they can be switched more easily and more often. As a result, ZSKs can generally be much shorter (in terms of byte length) than KSKs, while still offering an acceptable level of protection.","Although protocols have been developed for the employment of DNSSEC, including the use of KSKs and ZSKs, there are numerous aspects of operating DNSSEC enabled domains, at the registrar and registry levels, that have not been addressed and\/or optimized for large-scale use. For example, the ability to process large numbers of signatures in short periods of time, is limited to the common practices of using stand-alone signing systems and signing entire zones based on changes to the zone. Additionally, may solutions are limited to individual users, or a limited number of domains etc. that may be managed by a particular DNS provider. Accordingly, there are ongoing needs to further improve the functionality and\/or efficiency of operations related to DNSSEC management and the signature functions required for DNSSEC records.","Most current DNSSEC techniques involve signing of DNSSEC data within limited zone-management and zone-serving applications, e.g. limited by user, DNS providers, etc. Currently, users wishing to adopt DNSSEC have the following basic options:","1. Build their own DNSSEC solution using a combination of third party and open source software along with a set of either software keys or hardware keys.","2. Use a DNSSEC key management and a signing appliance like Secure64\u00ae DNS Signer, BlueCat Networks, Xelerance DNSX Secure, Signer, and Infoblox. Such appliances may provide various aspects of key management and zone signing, but require hardware to be installed at the client's site. It should be noted that DNSSEC key management and signing appliances require installation of hardware at the user's site, require more hands-on management of key material, and do not support more than a single user.\n\n3. Use a Managed DNS solution that has been updated to support DNSSEC. Managed DNS providers include zone management and zone publishing features. DNSSEC enablement allows a client to \u201cturn on\u201d DNSSEC for a managed DNS zone, but require the user to migrate or outsource their DNS hosting to the managed DNS provider.\n","However, with the introduction of DNSSEC into vast registries, such as the .com and .net registries, inefficiencies in the various signing techniques for DNSSEC data, particularly with respect to large zones, bring the potential for resolution problems including delays and resolution failures. Such problems can have significant detrimental effects on e-commerce and other high-traffic sites.","The present subject matter may provide benefits in the efficient signing of DNSSEC enabled zones through the use of a network accessible signing server that allows for a remote application to manage the signing, and also to remotely sign portions of zone data as needed. According to aspects of the invention, the use of a network accessible signing server may provide for the de-coupling of the zone-management and zone-serving application from the signing mechanism, compared to other techniques in which those functions are essentially merged, e.g. in techniques where the nameservers perform the signing, or in cases where a specific zone-management device does the signing.","Through the use of, for example, an extensible, network accessible, signing server, exemplary configurations may also reduce, or eliminate, the need to manually configure various functions of the signing server compared to other known techniques. A network accessible signing server may also provide support for a wide range of DNSSEC applications without the need for manual configuration, such as:","1. Inline signing of resource records in a high-volume DNSSEC application, e.g. a TLD registry.","2. Dynamically creating keys, loading keys, unloading keys, and using the keys to sign zone data in a DNSSEC application with many keys and zones.","3. Signing an entire zone in an offline\/batch DNSSEC application, e.g. a ROOT zone.","In embodiments, systems and methods for performing DNSSEC signing may be performed by a signing server that is configured to interact with a separate client application. Exemplary methods may generally include receiving a signing request at the signing server from the client application to sign first data. The signing server may determine appropriate signing keys and\/or protocols for the first data. The first data may then be transmitted by the signing server to a digital signature module, which may include, for example, a hardware support module, or software signing applications. The signing server may receive a digitally signed version of the first data from the digital signature module, and provide the signed first data to the client application.","According to first aspects of the invention, a DNSSEC signing server may be configured to interact with at least one DNSSEC client application and a digital signature module. The DNSSEC signing server may include, for example, a processor, and a storage device including computer readable code that, when executed by the processor, causes the signing server act as an authoritative signing server configured to receive a signing request from the at least one client application to sign first data. The first data may include, for example, DNS data.","In embodiments, the signing server may determine an appropriate signing key, e.g. at least one of an active KSK and an active ZSK, for the first data. Appropriate keys, such as the at least one active KSK and active ZSK, may be determined based on, for example, a TLD identifier included in the signing request. In embodiments, the signing server may be configured to determine more than one active signing key and\/or active signing algorithm for the first data, and may request a plurality of different signatures for the first data based on the more than one active signing key and\/or active signing algorithm.","In embodiments, the signing server may transmit the first data to one of a plurality of digital signature modules, and may receive a digitally signed version of the first data from the digital signature module. The signing server may also be configured to provide the signed first data to the client application.","In embodiments, the signing server may be configured to distinguish a requested signing function from among plurality of different digital signing functions based on a service type identifier included in the signing request, and to route non-DNSSEC signing requests to a non-DNSSEC digital signature module based on the service type identifier.","According to further aspects of the invention, the signing server may also be configured to receive, as part of the same signing request, a request to sign second data. The second data may be, for example, DNS, or other, data. The signing server may determine an appropriate signing key, e.g. at least one of an active KSK and an active ZSK, for the second data, which may be different than the key to be used with the first data. For example, the signing server may determine a first set of keys for the first data and a second set of keys for the second data.","In embodiments, the signing server may transmit the second data to one of a plurality of digital signature modules, and receive a digitally signed version of the second data from the digital signature module. The signing server may also be configured to provide the signed second data to the client application.","Embodiments may include wherein the signing server is configured to receive multiple signing requests as part of a single request packet, and parse the request packet to identify different signing requests having at least one of different active KSKs, active ZSKs, and signing protocols from one another.","In embodiments, the digital signature modules may be configured to sign certain parts of DNS data according to a DNSSEC protocol, without signing an entire zone.","In embodiments, the signing server may also be configured to provide an additional non-DNSSEC digital signature function.","In embodiments, each of the digital signature modules may include a Hardware Support Module (HSM), that is physically separate from the processor of the signing server and that is configured to digitally sign data provided by the signing server.","In embodiments, the HSM may include a plurality of keys identified by alias identifiers. The signing server may be configured to pass an alias identifier for an appropriate key to be used, such as at least one of a KSK and a ZSK for the DNS data to the digital signature module, without passing the at least one KSK and ZSK to the digital signature module.","In embodiments, the signing server may be configured to periodically check a database of active keys, e.g. active KSKs or ZSKs, and to determine which alias identifiers are active for a given time based on information received from the database. In embodiments, the alias identifier passed to the digital signature module may be an active alias identifier.","In embodiments, the signing server may be configured to identify a specific HSM to send the first data to based on the at least one active KSK and\/or active ZSK.","In embodiments, the signing server may be configured to process requests regarding domains under different TLDs.","In embodiments, the signing server may be configured to process requests regarding at least two domains managed by a plurality of registrars.","In embodiments, communications between the client and the signing server may be performed, for example, via two-way SSL.","As discussed herein, exemplary signing servers may support various DNS operations signing operations including, for example, DNSSEC signature functions, other managed DNS services, remote signing, root zone signatures, and the like, implemented by myriad different systems. In embodiments, exemplary signing servers may be configured to support, for example, signing of affected DNSSEC records as part of a single transaction, i.e. an atomic, consistent, isolated and durable unit of work, aspects of which may be referred to herein as \u201cinline signing.\u201d","Additional features, advantages, and embodiments of the invention may be set forth or apparent from consideration of the following detailed description, drawings, and claims. Moreover, it is to be understood that both the foregoing summary of the invention and the following detailed description are exemplary and intended to provide further explanation without limiting the scope of the invention claimed. The detailed description and the specific examples, however, indicate only preferred embodiments of the invention. Various changes and modifications within the spirit and scope of the invention will become apparent to those skilled in the art from this detailed description.","It is understood that the invention is not limited to the particular methodology, protocols, etc., described herein, as these may vary as the skilled artisan will recognize. It is also to be understood that the terminology used herein is used for the purpose of describing particular embodiments only, and is not intended to limit the scope of the invention. It also is to be noted that as used herein and in the appended claims, the singular forms \u201ca,\u201d \u201can,\u201d and \u201cthe\u201d include the plural reference unless the context clearly dictates otherwise. Thus, for example, a reference to \u201ca server\u201d is a reference to one or more server and equivalents thereof known to those skilled in the art.","Unless defined otherwise, all technical terms used herein have the same meanings as commonly understood by one of ordinary skill in the art to which the invention pertains. The embodiments of the invention and the various features and advantageous details thereof are explained more fully with reference to the non-limiting embodiments and examples that are described and\/or illustrated in the accompanying drawings and detailed in the following description. It should be noted that the features illustrated in the drawings are not necessarily drawn to scale, and features of one embodiment may be employed with other embodiments as the skilled artisan would recognize, even if not explicitly stated herein. Descriptions of well-known components and processing techniques may be omitted so as to not unnecessarily obscure the embodiments of the invention. The examples used herein are intended merely to facilitate an understanding of ways in which the invention may be practiced and to further enable those of skill in the art to practice the embodiments of the invention. Accordingly, the examples and embodiments herein should not be construed as limiting the scope of the invention, which is defined solely by the appended claims and applicable law. Moreover, it is noted that like reference numerals reference similar parts throughout the several views of the drawings.","As used herein, unless otherwise limited, a registrar may be understood to be any entity or organization that interacts with a domain-name registry and allows registrants to create and update domain-name resources.","As used herein, unless otherwise limited, a registrant may be understood to be any person or organization that interacts with a registrar to create and update a domain-name resource.","As used herein, unless otherwise limited, a DNS hosting provider may be understood to be any entity or organization that hosts content on its servers on behalf of a registrant, providing DNS provisioning and resolution capabilities for that content (e.g., assigns IP addresses and operates nameservers capable of resolving domain names to those IP addresses that it manages).","Embodiments of the invention may provide network accessible DNSSEC signing techniques to allow large-scale DNSSEC providers, such as registries, to process large numbers of DNS changes, including DNSSEC signature data, from various sources in an efficient and coherent manner.","Zone Signing Overview","As described above, DNSSEC was designed to deal with cache poisoning and a set of other DNS vulnerabilities such as man in the middle attacks and unauthorized data modification in authoritative servers. Its major objective is to provide origin authentication and integrity protection for DNS data. The public key infrastructure (PKI) may be used as means of public key distribution. DNSSEC provides a verification mechanism for DNS data and is not an encryption mechanism. It allows a security-aware resolver to verify that the zone data that has been received is signed by the administrator of the zone who holds the private key.","The DNSKEY Resource Record","A zone may have one or more key pairs, each of which includes private key and public key. The private keys may be stored securely in a domain name database and used to sign zone data. The public keys may be stored in the database and also stored in the signed zone data as DNSKEY resource records. The public keys are used to verify zone data, DNSKEY records typically have the following data elements:","Flags: \u201cZone Key\u201d and \u201cSecure Entry Point\u201d","Protocol: Fixed value of 3 (for backwards compatibility)","Algorithm: The public key's cryptographic algorithm.","Public key: Public key data.","A DNSKEY Resource Record (\u201cRR\u201d) may be either a Zone Signing Key (ZSK) or a Key Signing Key (KSK). The Key Signing Keys (KSKs) will have a SEP flag set so that they can be distinguished from the ZSKs in the DNSKEY RRset. The Key Signing Keys (KSKs) are used to sign other DINSKEY resource records and are used to build a chain of authority to the data that needs to be validated.","The RRSIG Resource Record","The RRSIG resource record holds the DNSSEC signature of a resource record set RRset (one or more DNS records with the same name, class, and type). DNSSEC enabled resolvers can verify the signature with a public key stored in a DNSKEY-record. The RRSIG records have the following data elements:","Type Covered: DINS record type that this signature covers.","Algorithm: Cryptographic algorithm used to create the signature.","Labels: Number of labels in the original RRSIG-record name (used to validate wildcards).","Original TTL: TTL value of the covered record set.","Signature Expiration: When the signature expires.","Signature Inception: When the signature was created.","Key Tag: A short numeric value which can help quickly identify the DNSKEY-record which can be used to validate this signature.","Signer's Name: Name of the DNSKEY-record which can be used to validate this signature,","Signature: Cryptographic signature.","The DNSKEY RRs are signed by both active KSKs and ZSKs. Other RR sets are signed by only active ZSKs.","The NSEC Resource Record","The NSEC resource record lists two separate things: the next owner name (in the canonical ordering of the zone) that contains authoritative data or a delegation point NS RRset, and the set of RR types present at the NSEC RR's owner name (RFC3845). The complete set of NSEC RRs in a zone indicates which authoritative RR sets exist in a zone and also form a chain of authoritative owner names in the zone. These records can be used by resolvers to verify the non-existence of a record name and type as part of DNSSEC validation, NSEC-records have the following data elements:","Next domain name: The next record name in the zone (DNSSEC sorting order)","Record types: The DNS record types that exist for the name of this NSEC-record.","The NSEC3 Resource Record","The NSEC3 Resource Record (RR) provides authenticated denial of existence for DNS Resource Record Sets. The NSEC3 RRs have the same functionality as NSEC RR, except NSEC3 uses cryptographically hashed record names to prevent enumeration of the record names in a zone. An NSEC3-record links to the next record name in the zone (in hashed name sorting order) and lists the record types that exist for the name covered by the hash value in the first label of the NSEC3-record's own name. These records can be used by resolvers to verify the non-existence of a record name and type as part of DNSSEC validation. NSEC3-records have the following data elements:","Hash Algorithm: The cryptographic hash algorithm used.","Flags: \u201cOpt-out\u201d (indicates if delegations are signed or not).","Iterations: How many times the hash algorithm is applied.","Salt: Salt value for the hash calculation.","Next Hashed Owner Name: The name of the next record in the zone (in hashed name sorting order).","Record Types: The record types that exist for the name covered by the hash value in the first label of the NSEC3-record's own name.","Aspects of an exemplary signing server arrangement are shown in . As shown in , a registry, or other DNSSEC service provider, may include any number of Signing Servers , . For example, a plurality of signing servers may be including a registry provisioning system. Signing Servers ,  may include Hardware Support Modules (HSMs) , , respectively, and\/or software, which may include the actual digital signature functionality including appropriate digital signature keys. Signing Servers ,  may communicate, and for example, exchange signed and unsigned DNS data, with various applications, services and tools , , and . Each CAS , NCC Plugin Business Services , and Batch\/Tool  component will have connectivity to the signing server (preferably to a set of such servers). Signing Servers ,  may persist signed DNS data to a database . Additional details of an exemplary data flow among the applications, signing servers, HSMs, and databases are shown in .","As shown in , client  may represent, for example, a front end service of a provisioning system, which may be configured to identity DNSSEC data that needs to be signed by the signing server . The data to be signed may be, for example, a portion of zone data affected by a DNS change, e.g. add, update, delete commands for a domain. The DNSSEC, or other, data to be signed may be parsed or otherwise identified based on, for example, a domain command, and provided to the signing server , as shown by link . The communication between the client  and signing server  may be, for example, by two-way SSL tunnel. Information such as bytes, keyType (ZSK, KSK) and TLD may be included in the request. The signing server  may identify the appropriate key information and\/or HSM from the transmission , and pass the unsigned data to the appropriate HSM , shown by link . This may include a sign command with, for example, the bytes, keyAlias, and signature algorithm.","In embodiments, the signing server  may also receive, as part of the same signing request, a request to sign other data. The signing server  may determine appropriate key information for the other data. In embodiments, and as described further herein, the key information for the other data may be different than key information for first data included in the same signing request.","Requests  from the client  to signing server  may be formatted according to a Signing Server Protocol (SSP). In embodiments, exemplary protocols may include a \u201cboxcar\u201d format, wherein multiple signing requests may be packaged into a single protocol request, thus optimizing on performance-degrading network round trips and bandwidth utilization. Additionally, the SSP may include a built-in diagnostic feature that each service module may adhere to, allowing clients to determine the service's availability state and recent problems. In embodiments, protocols described herein may allow for, among other objects, instant pluggability of new data-transfer packet formations required by new service modules added to the signing server without a change to the transfer protocol itself. An exemplary SSP is shown in , and described further below.","As shown in , a Signing Server Request Protocol  from a client may include fields for:","Packet Length::=int (Total Length of the packet)","Protocol Version::=byte (Version of the Protocol)","Service Type::=byte (e.g. Simple (for generic signing); DNSSEC (for DNSSEC signing); Public key retrieval (given a key alias, returns the public key)).","Transaction Id::=Long (Unique id to recognize the request)","Flags::=int (Field that allows requests to pass in flags (service-agnostic).","Session Id::=Long (The session Id sending the request, may be used for auditing purposes).","Account Id::=Long (The account Id sending the request, may be used for auditing purposes).","Number of Records::=byte (Number of request data (i.e., number of packets contained in the overall request on which the service needs to take action))","Signing Request Data . . . n\u2014Packet(s) of data upon which the service needs to act; typically, this would include data to be signed.","Client  may send Signing Request Data as payloads inside of their requests . In embodiments, a signing server  may be configured to recognize and act on different service requests and to interpret the data payloads based on, for example, an associated codec. In embodiments, data may be structured in various forms, which may be referred to as \u201cSigning Request Data Protocols,\u201d including, for example, SimpleSigningRequestData, RRSigSigningRequestData, or PublicKeyRetrievalRequestData, discussed further below.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 4","FIG. 4"],"b":"310"},"Length::=int (Length of the data)","Algorithm::===String (Signature Algorithm)","Key Alias::=String (Key Alias that needs to be used for signing)","Request Data Length::=int (Length of the Request Data field)","Request Data::=byte (The data that needs to be signed by Signing Server)","As mentioned above, the client , signing server  and HSM  may use key aliases to identify particular keys. Accordingly, the various components need not exchange actual keys, which may be advantageous in maintaining the security of key material, particularly keys that may be maintained in a particular component, e.g. the HSM , in an essentially inaccessible state (i.e. not accessible via the network).","An RRSigSigningRequestData, such as shown in , may be used to implement Signing Request Data, in a similar manner to the SimpleSigningRequest. The RRSigSigningRequestData may be, for example, a data bean, populated by the client, holding information about the RRSIG record that needs to be signed. As discussed further below, each class of request may be returned by the signing server  as a corresponding response . It should be noted that, when the signing server  receives a request , it may augment the request data with DNSSEC-related data, or other data, of its own.","An RRSigSigningRequestData  may include:","Length::=int (Length of the data)","RRSIG ID::=Long (Unique ID of the RRSigSigningRequestData)","Domain Name::=: String (The name of domain)","Domain Id:: =Long (The id of the domain)","Parent Domain::=String (The parent domain)","Type Covered::=int (The Resource Record Type)","Number of Labels::=int (The number of labels in the domain name)","Orig TTL::=Long (The data that needs to be signed by Signing Server)","TTL::=Long (The data that needs to be signed by Signing Server)","RR Start Time::=Long (The Epoch time of the RRSIG start time)","RRSet Bytes Length::=int (Length of the RRSet Bytes)","RRSet Bytes::=byte (The data that needs to be signed by Signing Server)","Accordingly, considering the combination of the Signing Server Request Protocol  shown in , the SimpleSigningRequestData  shown in , and the RRSigSigningRequestData  shown in in , appropriately configured signing servers may accept a single signing request (e.g. via Signing Server Request Protocol ) with multiple Signing Request Datum, each Signing Request Data having potentially different signing algorithms, key aliases, etc. As described further herein, in the case of RRSigning data, appropriate algorithms and\/or keys may be based, for example, on identified domains, and\/or TLDs associated with the request. In embodiments, the signing server may be configured to process requests regarding domains under different TLDs, and\/or process requests regarding at least two domains managed by a plurality of registrars, through the parsing of the requests and data packages described herein.","Signing Request Data Protocol may also include a PublicKeyRequestData (not shown) including the following fields:","Length::=int (Length of the data)","Key Alias::=String (The Key Alias for retrieving the Public Key)","The signing server  may be configured to periodically check with the database  for the authoritative data on which key alias to use when sending data to the HSM . The signing server  may also be configured to identify a specific HSM to send the data packages to based on an active KSK and\/or active ZSK. The HSM  may be loaded with many keys per TLD at initialization time (some may be ZSKs, some may be KSKs) and each key may be known to the HSM  by an alias, keyAlias. The client  may be configured to tell the signing server  which of the two kinds of key to use (ZSK or KSK) and the TLD, and the signing server  may be configured to identify the current key-alias name for that kind of key when it communicates with the HSM for signing. The signing server  may also be forced to re-check with the database  for the current key aliases. This command can be issued, for example, to the signing server  via a JMX management interface. Accordingly, the signing server  may be understood as \u201cDNSSEC-aware.\u201d","One advantage of making the signing server DNSSEC-aware is to save the marshalling and unmarshalling of data that the client would otherwise have to pass with almost every signing request, even though those data do not change. That is, data that do not change frequently do not need to be known by the client  or sent by the client  with every request . Rather, those data can be known by and cached by the signing servers  themselves.","The signing server  may also be configured to provide generic signing capabilities as well. Examples may include configuring the signing server for use with a Managed DNS Service that has a large number of keys and zones (thousands or millions) to create various signatures for managed DNS services, root zone signing, etc. In embodiments, the client may be configured to provide signing parameters along with the ability to dynamically load and unload keys used for signing. A \u201cgeneric signing\u201d signing server capable of performing multiple types of signature transactions may provide a flexible application for use with, for example, a large-scale, multi-function, managed DNS service. Thus, the signing server  may be DNSSEC-aware, and capable of working for other signing purpose, for example, via runtime-configurable plugins (services) that the server may rely on for handling incoming requests. According to aspects of the invention, the signing server framework, such as shown in , may allow for various parties to write service modules, including different parameters and keys, which may communicate with various brands of hardware or software signer applications. Additional functions can be added to the protocol to support new features without interfering with existing clients. The configurations of the signing server and the signing server protocols may allow, for example, a DNSSEC application to include other variously defined end-user interfaces (e.g. Web Services, EPP, REST) without impacting the underlying signing.","Embodiments may include a signing server codebase with service modules that provide a combination of caching and non-caching of signing-configuration parameters. Service modules may thus re-use these caching and non-caching features depending on their needs. Caching may be used to increase performance for service modules that have relatively stable keys and signing configurations, whereas non-caching may facilitate the loading of keys and signing parameters on-demand for situations necessitating high volumes of keys and parameters stored offline and activated only at the time of signing. Additionally, when individual service modules malfunction or become unavailable, as may happen with different protocols and keys, the signing server itself can remain robust and allow its other modules to continue servicing requests. Such flexibility can provide myriad options that are not achievable by, for example, current stand-alone DNSSEC signing applications.","One particular advantage of the non-caching approach, e.g. where all the applicable keys are not cached in the HSM or other signature module, is that the keys which are digitally wrapped can be stored in a less expensive and higher available repository, such as a database that is easy to replicate across data centers and the like. The HSM or other signature module may then retrieve the keys, as needed, to sign data. Such separate storage, and as-needed loading, of the actual keys has been found by the inventors to enable an overall signing service such as described herein to scale to a much larger number of keys without sacrificing the performance capability of an HSM or the availability of the databases used. This has been found to be particularly useful in the context of enormously-scaled DNS services, such as may be provided by a registry, that may need to access keys for thousands to millions of zones.","In embodiments, an HSM or other signature module, may encrypt relevant keys stored in a database with a private key of the HSM or other signature module. As described further herein, each key may be identifiable by a keyAlias, and may be decrypted by the HSM or other signature module, using the private key, when retrieved.","Returning to , the HSM  may sign the DNSSEC data as received, for example, in request , with an appropriate key, and pass the signed data back to the signing server  as shown by link . In embodiments, such signing may be based on, for example, identification of appropriate keys and\/or protocols from key aliases and the like included in the request. Alternatively, HSMs, or other software signature applications, may have predetermined keys and\/or parameters to apply to the signing requests directed to them. It should be noted that, according to aspects of the invention including the separately identified data packets contained in the signing request, the packets can be processed asynchronously so that the client can continue processing without blocking for the signing response. Further, a single signing server can receive and act on requests to sign data across applications and across zones simultaneously. That is, the single server can receive in a single request packet commands to sign data that are unrelated to one another, across zones and\/or applications.","Additionally, the signing server  may be configured to request and provide multiple signatures for a single data packet. For example, the signing server  may recognize more than one active key and\/or algorithm to be applied to certain data and may request a plurality of signatures from the HSM or other signature module based on the more than one active key and\/or algorithm. In embodiments, the signing server  may be configured to request and report the signing of, for example, first data with a first key by a first algorithm, and the first data with a second key by a second algorithm. Multiple active keys and signatures may be applied, for example, according to user requirements, in the context of key rollovers and\/or for DNSSEC to effectively implement an algorithm roll (e.g. SHA-1 to SHA-2).","The HSM  may be physically separate from the processor of the signing server , and may include, for example, additional security protocols to safeguard the keys stored in the HSM . For example, the HSM  may be configured to exchange certain key information only through physical loading procedures to safeguard keys stored therein, particularly those with long service life or wide applicability, e.g. KSKs. In embodiments, the HSM may include one or more keys, and one or more alias identifiers that identify the keys stored therein.","The signing server  may pass signed data, e.g. DNSSEC or other digitally signed data, or other data such as transaction commit information, back to the client  as shown by link .","As noted above, each class of request may be returned by the signing server  as a corresponding response . The response  returned by the signing server  may be configured to follow a Signing Server Response Protocol as shown in .","As shown in , the Signing Server Response Protocol  may include, for example:","Packet Length::=int (Total Length of the packet)","Protocol Version::=byte (Same as what was sent in the request)","Service Type::=byte (Same as what was sent in the request)","Transaction Id::=long (Same as what was sent in the request)","Flags::=int (Field that allows requests to pass in flags (service-agnostic).","Response Code::=byte (The response code after processing the request. See below for response codes that can be returned by Signing Server.)","Response Message Length::=int (The length of detailed response message for the response returned by the server.)","Response Message Characters::char (The response message characters).","Number of Records::=byte (Number of response data (i.e., number of packets contained in the overall request on which the service needs to take action).)","Signing Response Data . . . n.","Exemplary Signing Response Codes are shown in Table 1:",{"@attributes":{"id":"p-0132","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Response Code","Response Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Successful"]},{"entry":["1","Request Failed"]},{"entry":["2","Request Failed due to database failure"]},{"entry":["3","Request Failed due to Signing Engine failure"]},{"entry":["4","Request Failed due to Unsupported Service"]},{"entry":[{},"Request"]},{"entry":["5","Public key not found for key alias."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The Signing Response Data may include, for example, SimpleSigningResponseData, RRSigSigingResponseData, or PublicKeyRetrievalResponseData, corresponding to the Request, i.e. SimpleSigningRequestData, RRSigSigingRequestData, or PublicKeyRetrievalRequestData. In embodiments, there may be one response data object for each request-data packet sent in the Request.","An example SimpleSigningResponseData  is shown in , as would be returned, for example, by the signing server  as response to a SimpleSigningRequest, such as shown in . As shown in , the fields of the SimnpleSigningResponseData  may include:","Length::=int (Length of the data)","Signed Data Length::=int (Length of the Signed Data Field)","Signed Data::=byte (The data that needs to be signed by Signing Server)",{"@attributes":{"id":"p-0138","num":"0137"},"figref":["FIG. 8","FIG. 5"],"b":["420","420"]},"Length::=int (Length of the data)","RRSIG ID::=Long (Unique ID of the RRSigSigingRequestData)","Domain Name::=String (The name of domain)","Domain Id::=Long (The id of the domain)","Parent Domain::=String (The parent domain)","Type Covered::=int (The Resource Record Type)","Number of Labels::=int (The number of labels in the domain name)","Orig TTL::=Long (The data that needs to be signed by Signing Server)","TTL::=Long (The data that needs to be signed by Signing Server)","RR Start Time::=Long (The Epoch time of the RRSIG start time)","Key Tag::=int (The Key tag of the Key that was used to sign this request)","Algorithm Id::=int (The Algorithm Id that was used to sign this request)","Signature::=String (The base  encoded Signature generated by signing the request)","RR End Time::==Long (The Epoch time of the RRSIG End time)","Signing Response Data may also include a PublicKeyResponseData (not shown) including the following fields:","Length::=int (Length of the data)","Key Alias::=String (The Key Alias sent in the request)","Public Key::=String (The base  encoded Public Key of the key retrieved using the key alias)","Once the signed data is returned to the client , the client may distribute the signed data as required, e.g. to the DNS or other service, and\/or send confirmation messages as needed. In embodiments, the client  may be configured as a DNSSEC application that can identify and act on DNS changes and the like, as well as determine appropriate DNSSEC functions that need to be performed. Thus, the signing server  may be relieved of many of the DNSSEC-specific application programming and functionality. The DNSSEC application, e.g. the client , can focus on the DNSSEC business logic (what resource records need to be signed, etc.) without having to be concerned with the specifics of the signing parameters and without having to incur the processing and network costs of assembling and passing the extra information to the signing server . Likewise, as discussed above, the various request and response protocols allow the DNSSEC application to combine all of the relatively smaller signing requests (without all of the various DNSSEC signing parameters and key information) into a single packet, thus greatly reducing the network load and overhead. Finally, the client  can also be relieved of any of the HSM interface details.",{"@attributes":{"id":"p-0158","num":"0157"},"figref":"FIG. 9"},"According to further aspects of the invention, clusters of clients and signing servers may be managed to improve the load balancing and responsiveness of signing systems as described herein. For example, as shown in , in embodiments, for each signing server -, there may be one instance of a SigningServerClient  to handle requests for the particular signing server. Over the SigningServerClient , there may also be a SigningServiceClientPool  that manages SigningServerClient instances. The SigningServiceClientPool  may be connected to any number of SigningServerClients, and may be configured to, for example, load balance requests to various signing servers e.g. in round robin fashion, take a SigningServerClient instance out of rotation if the signing server it is connected to is down, etc.","Each SigningServerClient  may be configured to maintain the pool of socket connections  with the signing servers, notify SigningServiceClientPool  if this service goes down and start health check thread, and\/or continuously try to connect the signing server and notify SigningServiceClientPool  to put this service back in the rotation after the signing server comes back up.","Accordingly, the overall system may adjust to client-side and server-side failures. For example, the client-side service may maintain a list of signing servers and will react to identified \u201cfatal\u201d exceptions\/error responses from those servers. The client-side may remove those faulty signing servers from the round-robin rotations and may continually attempt to recognize when the server comes back online. The signing server may be configured to support a \u201cping\u201d so that clients can check its health.","If the client-side signing service finds that all of its signing servers are down, it may immediately return exceptions when it receives requests to have something signed. The client may continue to do this until at least one of the signing servers has become available.","Failure scenarios from the signing server-side may include the non-availability of one its dependencies, e.g. the HSM or the key database. If the HSM is unavailable, the signing server may report error responses indicating this. The signing server may alert on this condition via, for example, JMX and log entries. The signing server may also continually try to detect whether the HSM is back online. If the key database becomes unavailable for refreshes of key data, the signing server may be configured to refuse requests to sign data, e.g. because it runs the risk of signing with the wrong key. The signing server may be configured to report this error as signing responses, and may continually try to connect back to the key database.","Another option is to configure the signing server to \u201cdrop\u201d the client connection and\/or stop listening for new connections for a particular service when that service is not functioning properly. Such configurations may be beneficial, for example, in allowing the client to direct service requests only to signing servers that are currently operable to perform the service, improving monitoring of the state of the signing service network, reducing the number of errors reported back to the client, and improving the overall efficiency of the client. Such configurations may also allow the signing server to continue with other operable services without the burden of encountering and\/or reporting errors for the non-functioning service until the issue is resolved. Similar configurations may be applied between the signing server and a plurality of supporting HSMs or other signature modules.","According to the arrangements depicted in ,  and , and aspects of the Request and Response protocols detailed above, clients, such as client , may employ techniques and client-utility libraries to provide load-balancing and high-availability features. For example, client-utility libraries may interact with the signing server regardless of which service module inside of the server they are using. The client-utility libraries may provide auto-reconnect and fast-fail (in times of service unavailability) as part of their feature sets. The load-balancing features of the client-utility libraries may also help ensure that no matter how many signing servers are available and not-available, and no matter how many clients are connected to these servers at any time, the load will be relatively evenly distributed among the active servers automatically.","In embodiments, service module plugs for the signing server may include modules for one or more TLDs, e.g., .com, .net, .edu, etc. In embodiments, multiple TLDs may be supported by a single service module that is aware of the various key schedules and\/or protocols for the different TLDs. Service modules may be configured to provide, for example, which ZSK is to be used for generating a digital signature on demand, given the TLD for which the signature applies and accounting for key rollovers; which hardware or software signer should be generating the signature for that TLD; which TLD-specific parameters to use when generating the signature, including salt, hashing algorithm, signing algorithm, signature duration, etc. In embodiments, the signing server may be configured to automatically and periodically re-load these settings from the database so that it can pick up changes during normal operation without a re-start.","A particular advantage to this approach is that there may be provided a centralized, authoritative configuration that ensures consistent signature production per TLD. Further, it means that the registry applications for the TLDs themselves may not have to know of these policies directly, but rather, request the signing server to sign data and rely on the signing server to apply the requisite policies and parameters when doing so, on a per-TLD basis. This methodology may reduce the risk of the registry as a whole becoming out of date in terms of signing-configuration data when those data change during normal operation because, for example, there may be far fewer signing servers than there are registry-application instances. Additionally, the clients to the signing servers do not need to have additional configuration and application logic related to loading TLD-specific signing parameters, which would increase application complexity and increase the risk of misconfigurations, resulting in digital-signature failures. Finally, the clients do not have to pass along to the signing server the TLD-specific signing parameters with each request, which means reduced network load and greater throughput.","More generally speaking, according to aspects of the invention, signing servers may be configured to allow for developers to plug in \u201csmart\u201d services, where the services hold the knowledge about which keys are active, which algorithms are to be used, and so on, based on the context of the signing request, which itself may contain none of this information. This may be preferable particularly in contexts where the clients are meant to remain as \u201cdumb\u201d as possible. This can be used to, for example, implement smaller packets, reduce the chances of clients operating with outdated information or not being synchronized with the state of the keys, and provide less voluminous and brittle client code.","As previously mentioned, signing server methodology and apparatus as described herein may find applicability, and be compatible with, a vast array of DNS, and other signature, services. For example, by providing a network-accessible, configurable, signing server, various remote signing protocols and configurations may be readily supported. One such non-limiting example which may be supported includes an \u201cinline signing\u201d arrangement, which may be used for DNSSEC signing functions described herein, details of which are shown in . As shown in , a requester , such as, for example, a registrant, a registrar or a DNS provider, may communicate with a registry provisioning system . The requester  may communicate commands related to an existing or new domain. For example, requester  may communicate commands to change DNS data managed by the registry, such as DNS data for a domain under a TLD (e.g., .com) managed by the registry. Registry provisioning system  may process the domain command from the requester  in various ways including, for example, executing change commands, e.g. add, modify, or delete commands, identifying DNSSEC data changes, identifying appropriate keys, applying digital signatures, persisting DNS and DNSSEC changes to a registry database , etc.","Data provided by the registry provisioning system  to the registry database  may include DNS information for the domain and signed DNSSEC data. In embodiments, exemplary signing servers may support, for example, a method of implementing the DNS changes and the DNSSEC changes within a single transaction.","As described above, the DNSSEC signing may be done by the signing server, synchronously inline with the transaction. Separate services may be used to take each committed transaction in the Registry database and apply it incrementally to the DNS Servers.","DNSSEC signing inline with the domain commands of a domain registry may provide advantages in maintaining a highest level of data integrity by ensuring, for example, that the registry database always represents the authoritative source for what is published in DINS.","As part of implementing the DNSSEC inline signing, a cluster of network available and high-performance signing servers, such as shown in , may be provided to sign the DNSSEC information. This has been found to be effective even in the context of the largest TLDs, and maintains the domain registry response time SLA's, as well as maintaining the DNS propagation SLA's with a high level of data integrity, even when serving 1,000+ simultaneous connections from clients who need digital signatures.","Embodiments of the present invention can include systems for implementing the described methods, as well as computer-readable storage medium coded with instructions for causing a computer to execute the described methods. For example, as shown in , server systems such as servers , , and\/or , including at least a processor, a memory and an electronic communication device (not shown), may be configured to receive, identify, respond to and\/or act on a request, such as those described herein, received over the network , such as the Internet. Any of servers , , and\/or  may be operated by, for example, an Internet hosting provider, a registrar, and\/or a registry as described further herein, and may be in communication with any number of recursive DNS servers generally represented by web devices . As described herein, recursive servers  may cache DNS-related data for domains of the hosting providers, registrars, and\/or registries operating servers ,  and .","Requests to update DNS data for a domain may originate from, for example, a registrar, DNS service provider, or registrant, via various systems such as, for example, computers , , via separate server  which may be in wireless or other communication with mobile device(s) , picocell network devices , mobile computer , or any other network-capable device with the requisite functional capabilities.","The various communications, transmissions, and related functions described herein may be accomplished, for example, via the network , and the results of the described processing performed by server systems such as servers ,  and , may be displayed, stored and\/or distributed according to known techniques. The network  may include any number of communication components including wired, cellular, satellite, optical and\/or other similar communication links.","The servers ,  and , and computers , , may include any number of processors (not shown) that are coupled to storage devices including a first storage (not shown, typically a random access memory, or \u201cRAM\u201d), second storage (not shown, typically a read only memory, or \u201cROM\u201d). Both of these storage devices may include any suitable type of computer-readable media, including non-transitory storage media such as flash drives, hard disks, floppy disks, magnetic tape, optical media such as CD-ROM disks, and\/or magneto-optical. A mass storage device (not shown) may also be used to store programs, data and the like and is typically a secondary storage medium, such as a hard disk that is slower than primary storage. It will be appreciated that the information retained within the mass storage device, may, in appropriate cases, be incorporated in standard manner as part of primary storage as virtual memory. A specific mass storage device such as a CD-ROM may also pass data uni-directionally to the processor.","The servers ,  and , and computers , , may also include an interface that includes one or more input\/output devices such as such as video monitors, track balls, mice, keyboards, microphones, touch-sensitive displays, transducer card readers, magnetic or paper tape readers, tablets, styluses, voice or handwriting recognizers, or other known input devices, including other computers. The servers ,  and , and computers , , may be coupled to a computer or other electronic communication network  using a network connection. The network  can connect various wired, optical, electronic and other known networks to exchange information among servers ,  and , computers , , separate server , mobile device(s) , picocell network devices , mobile computer(s) , recursive servers , and any other devices with similar functionality. With such a network connection, it is contemplated that the servers ,  and , and computers ,  and the processors therein may receive information from the network , or may output information to the network  in the course of performing the above-described method steps. The above-described devices and materials will be familiar to those of skill in the computer hardware and software arts and need not be individually or exhaustively depicted to be understood by those of skill in the art. The hardware elements described above may be configured (usually temporarily) to act as one or more modules for performing the operations described above.","In addition, embodiments of the present invention further include computer-readable storage media that include program instructions for performing various computer-implemented operations as described herein. The media may also include, alone or in combination with the program instructions, data files, data structures, tables, and the like. The media and program instructions may be those specially designed and constructed for the purposes of the present subject matter, or they may be of the kind available to those having skill in the computer software arts. Examples of computer-readable storage media include magnetic media such as flash drives, hard disks, floppy disks, and magnetic tape; optical media such as CD-ROM disks; magneto-optical media; and hardware devices that are specially configured to store and perform program instructions, such as read-only memory devices (ROM) and random access memory (RAM). Examples of program instructions include both machine code, such as produced by a compiler, and files containing higher level code that may be executed by the computer using an interpreter.","The description given above is merely illustrative and is not meant to be an exhaustive list of all possible embodiments, applications or modifications of the invention. Thus, various modifications and variations of the described methods and systems of the invention will be apparent to those skilled in the art without departing from the scope and spirit of the invention. Although the invention has been described in connection with specific embodiments, it should be understood that the invention as claimed should not be unduly limited to such specific embodiments."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are included to provide a further understanding of the invention, are incorporated in and constitute a part of this specification, illustrate embodiments of the invention and together with the detailed description serve to explain the principles of the invention. No attempt is made to show structural details of the invention in more detail than may be necessary for a fundamental understanding of the invention and various ways in which it may be practiced. In the drawings:",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
