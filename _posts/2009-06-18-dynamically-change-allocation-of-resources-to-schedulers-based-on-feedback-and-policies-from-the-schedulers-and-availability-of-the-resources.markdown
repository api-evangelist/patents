---
title: Dynamically change allocation of resources to schedulers based on feedback and policies from the schedulers and availability of the resources
abstract: A resource manager manages processing and other resources of schedulers of one or more processes executing on one or more computer systems. For each scheduler, the resource manager determines an initial allocation of resources based on the policy of the scheduler, the availability of resources, and the policies of other schedulers. The resource manager receives feedback from the schedulers and dynamically changes the allocation of resources of schedulers based on the feedback. The resource manager determines if changes improved the performance of schedulers and commits or rolls back the changes based on the determination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719831&OS=08719831&RS=08719831
owner: Microsoft Corporation
number: 08719831
owner_city: Redmond
owner_country: US
publication_date: 20090618
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Processes executed in a computer system often have tasks with different processing demands and priorities. In order to operate as desired, a process may expend significant overhead to ensure that suitable resources are allocated to tasks based on the demands and priorities of the tasks. This overhead may include the use of one or more schedulers that schedule tasks of the process for execution in the computer system. The execution of tasks with schedulers may vary based on the processing capabilities and\/or processing demands of the computer system at any given time. As a result, resource allocations to schedulers may not be optimal for some processing conditions.","This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","A resource manager manages processing and other resources of schedulers of one or more processes executing on one or more computer systems. For each scheduler, the resource manager determines an initial allocation of resources based on the policy of the scheduler, the availability of resources, and the policies of other schedulers. The resource manager receives feedback from the schedulers and dynamically changes the allocation of resources of schedulers based on the feedback. The resource manager determines if changes improved the performance of schedulers and commits or rolls back the changes based on the determination.","In the following Detailed Description, reference is made to the accompanying drawings, which form a part hereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. In this regard, directional terminology, such as \u201ctop,\u201d \u201cbottom,\u201d \u201cfront,\u201d \u201cback,\u201d \u201cleading,\u201d \u201ctrailing,\u201d etc., is used with reference to the orientation of the Figure(s) being described. Because components of embodiments can be positioned in a number of different orientations, the directional terminology is used for purposes of illustration and is in no way limiting. It is to be understood that other embodiments may be utilized and structural or logical changes may be made without departing from the scope of the present invention. The following detailed description, therefore, is not to be taken in a limiting sense, and the scope of the present invention is defined by the appended claims.","It is to be understood that the features of the various exemplary embodiments described herein may be combined with each other, unless specifically noted otherwise.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["22","1","22","12","10","22","22"]},"Runtime environment  represents a runtime mode of operation in a computer system, such as a computer system  shown in  and described in additional detail below, where the computer system is executing instructions. The computer system generates runtime environment  from a runtime platform such as a runtime platform  shown in  and described in additional detail below.","Runtime environment  includes an least one invoked process , an operating system (OS) , a set of hardware threads ()-(M), where M is an integer that is greater than or equal to one and denotes the Mth hardware thread (M), and a resource manager . Runtime environment  allows tasks from process  to be executed, along with tasks from any other processes (e.g., additional processes  shown in ) that co-exist with process , using OS , resource manager , and hardware threads ()-(M). Runtime environment  operates in conjunction with OS  and\/or resource manager  to allow process  to obtain processing and other resources of the computer system (e.g., hardware threads ()-(M), execution contexts, memory, and\/or network bandwidth).","Runtime environment  includes a scheduler function that generates each scheduler . In one embodiment, the scheduler function is implemented as a scheduler application programming interface (API). In other embodiments, the scheduler function may be implemented using other suitable programming constructs. When invoked, the scheduler function creates a scheduler  in process  where the scheduler  operates to schedule tasks of process  for execution by one or more hardware threads ()-(M). Runtime environment  may exploit fine grained concurrency that application or library developers express in their programs (e.g., process ) using accompanying tools that are aware of the facilities that the scheduler function provides.","Process  includes an allocation of processing and other resources that host one or more execution contexts (viz., threads, fibers (i.e., lightweight threads), or child processes). Process  obtains access to the processing and other resources in the computer system such as hardware threads ()-(M), execution contexts, memory, and\/or network bandwidth from OS  and\/or resource manager . Process  causes tasks to be executed using the processing and other resources. In the embodiment of , the processing resources include virtual processors ()-(N) where N is an integer greater than or equal to two and denotes the Nth virtual processor (N).","Process  generates work in tasks of variable length where each task is associated with an execution context in a scheduler . More than one task may be associated with a given execution context. Each task includes a sequence of instructions that perform a unit of work when executed by the computer system. Each execution context forms a thread, fibre (i.e., a lightweight thread), or analogous OS concept such as child process that executes associated tasks on allocated processing resources. Each execution context includes program state and machine state information. Execution contexts may terminate when there are no more tasks left to execute. For each task, runtime environment  and\/or process  either assign the task to a scheduler  to be scheduled for execution or otherwise cause the task to be executed without using a scheduler .","Process  may be configured to operate in one or more computer systems based on any suitable execution model, such as a stack model or an interpreter model, and may represent any suitable type of code, such as an application, a library function, or an operating system service. Process  has a program state and machine state associated with a set of allocated resources that include a defined memory address space. Process  executes autonomously or substantially autonomously from any co-existing processes in runtime environment . Accordingly, process  does not adversely alter the program state of co-existing processes or the machine state of any resources allocated to co-existing processes. Similarly, co-existing processes do not adversely alter the program state of process  or the machine state of any resources allocated to process .","OS  manages processing and other resources of the computer system and provides a set of functions that allow process  and other processes in the computer system to access and use the components. In addition, OS  offers execution contexts to each scheduler  and process  and allocates memory from a memory system, such as a memory system  shown in  and described in additional detail below, to each scheduler  and process . OS  may allocate memory from the memory system in any suitable fixed or variable sizes (e.g., pages of 4 kilobytes (KB) to 19 KB).","Hardware threads  reside in execution cores of a set or one or more processor packages (e.g., processor packages  shown in  and described in additional detail below) of the computer system. Each hardware thread  is configured to execute instructions independently or substantially independently from the other execution cores and includes a machine state. Hardware threads  may be included in a single processor package or may be distributed across multiple processor packages. Each execution core in a processor package may include one or more hardware threads .","Resource manager  allocates processing resources to process  by assigning one or more hardware threads  to process . Resource manager  creates a set of virtual processor roots  and a set of thread proxies  for each scheduler . Each virtual processor root  manages a corresponding virtual processor  in a scheduler , forms an abstraction of a hardware thread , and executes a corresponding thread proxy . Each thread proxy  forms an abstraction of an execution context from OS  and executes a set of execution contexts of a scheduler  on a corresponding virtual processor root . The execution contexts of a scheduler  execute on thread proxies  which in turn execute on execution contexts from OS  on hardware threads . Resource manager  exists separately from OS  in the embodiment of . In other embodiments, resource manager  or some or all of the functions thereof may be included in OS .","Process  implicitly or explicitly causes each scheduler  to be created via the scheduler function provided by runtime environment . An instance of scheduler  may be implicitly created when process  uses APIs available in the computer system or programming language features. In response to the API or programming language features, runtime environment  creates a scheduler  with a default policy . To explicitly create a scheduler , process  may invoke the scheduler function provided by runtime environment  and specifies a policy  for the scheduler .","Each scheduler  interacts with OS  and resource manager  to negotiate processing and other resources of the computer system in a manner that is transparent to process . OS  and\/or resource manager  initially allocates memory to each scheduler  in response to requests from one or more memory allocators (not shown) in each scheduler  and may dynamically adjust the memory allocations as described below. OS  and\/or resource manager  also initially allocates hardware threads , execution contexts, and\/or network bandwidth to each scheduler  based on supply and demand and any policies  of each scheduler  may dynamically adjust these resources as described below.","In the embodiment shown in , each scheduler  manages the processing resources by creating virtual processors  that form an abstraction of underlying virtual processor roots  and hardware threads . Resource manager  maps the virtual processors  onto virtual processor roots . Resource manager  multiplexes virtual processor roots  onto hardware threads  by mapping each virtual processor root  to a hardware thread . Resource manager  may map more than one virtual processor root  onto a particular hardware thread  but maps only one hardware thread  to each virtual processor root . In other embodiments, resource manager  manages processing resources in other suitable ways to cause instructions of process  to be executed by hardware threads .","Prior to executing tasks, each scheduler  obtains execution contexts  and  from runtime environment , resource manager , and\/or OS . Available virtual processors  locate and execute execution contexts  and  to begin executing tasks. The set of execution contexts in each scheduler  includes a set of execution contexts ()-(N) with respective, associated tasks ()-(N) that are being executed by respective virtual processors ()-(N), a set of zero or more runnable execution contexts , and a set of zero or more blocked (i.e., wait-dependent) execution contexts . Each execution context ,  and  includes state information that indicates whether an execution context ,  and  is executing, runnable (e.g., in response to becoming unblocked or added to scheduler ), or blocked. Execution contexts  that are executing have been attached to a virtual processor  and are currently executing. Execution contexts  that are runnable include an associated task  and are ready to be executed by an available virtual processor . Execution contexts  that are blocked include an associated task  and are waiting for data, a message, or an event that is being generated or will be generated by another execution context , , or .","Each execution context  executing on a virtual processor  may generate, in the course of its execution, additional tasks , which are organized in any suitable way (e.g., added to work queues (not shown in )). Work may be created by using either application programming interfaces (APIs) provided by runtime environment  or programming language features and corresponding tools in one embodiment. When processing resources are available to a scheduler , tasks are assigned to execution contexts  or  that execute them to completion or a blocking point (e.g. waiting for a message or a stolen child task to complete) on virtual processors  before picking up new tasks. An execution context  executing on a virtual processor  may also unblock other execution contexts  by generating data, a message, or an event that will be used by another execution context .","Each task in a scheduler  may be realized (e.g., realized tasks  and ), which indicates that an execution context  or  has been or will be attached to the task and the task is ready to execute. Realized tasks typically include light weight tasks and agents and may be associated with an execution context  or  just before executing or in advance of execution. A task that is not realized is termed unrealized. Unrealized tasks (e.g., tasks ) may be created as child tasks generated by the execution of parent tasks and may be generated by parallel constructs (e.g., parallel, parallel for, begin, and finish). Each scheduler  may be organized into a synchronized collection (e.g., a stack and\/or a queue) for logically independent tasks with execution contexts (i.e., realized tasks) along with a list of workstealing queues for dependent tasks (i.e., unrealized tasks) as illustrated in the embodiment of  described below.","Upon completion, blocking, or other interruption (e.g., explicit yielding or forced preemption) of a task  associated with an execution context  running on a virtual processor , the virtual processor  becomes available to execute another realized task  or unrealized task . A scheduler  searches for a runnable execution context , a realized task , or an unrealized task  to attach to the available virtual processor  for execution in any suitable way. For example, a scheduler  may first search for a runnable execution context  to execute before searching for a realized task  or an unrealized task  to execute. A scheduler  continues attaching execution contexts  to available virtual processors  for execution until all execution contexts  of the scheduler  have been executed. In other embodiments, runnable execution contexts  and realized tasks  may be merged into single concept from the perspective of schedulers .","Each scheduler  includes one or more memory allocators that cause memory to be allocated for internal data structures of scheduler  (not shown) and tasks  of execution contexts  executing on virtual processors . The memory allocators request and receive access to pages of memory from OS  and\/or resource manager  and allocate objects or other suitable portions of memory from the pages to tasks  executing on virtual processors . OS  and\/or resource manager  may provide pages in predefined sizes of memory such as page sizes of 4 kilobytes (KB) to 19 KB to the memory allocators.","The process of allocating resources to schedulers  using resource manager  will now be described. The initial allocation of resources will be described with reference to , and the dynamic reallocation of resources using feedback will be described with reference to .","The resources allocated by resource manager  may include processing resources (e.g., virtual processors, processors, execution cores, and\/or hardware threads ), execution context resources (e.g., execution contexts  which may include threads, fibers (i.e., lightweight threads), or child processes), memory resources (e.g., RAM, cache memory, NUMA nodes, memory bus bandwidth, and\/or other types of local and\/or global memory), and\/or network resources (e.g., network bandwidth).","Resource manager  establishes an initial allocation of resources using policies  of schedulers , the amount of resources available for allocation, and an optimal distribution technique.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2","b":["44","22","44","44","22","22","22","44","44","22","44","22"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3","b":["22","22","12","50","22","18","18","18","44","22","44","44","44","22","51"]},"Resource manager  first attempts to satisfy the request for resources by providing unallocated resources (i.e., resources not currently allocated to a scheduler ) to the newly created scheduler  as indicated in a block . Resource manager  provides an amount of the unallocated resources that is less than or equal to the maximum amount of resources C to the scheduler .","If the unallocated resources are not sufficient to satisfy the request (i.e., the amount of resources provided to scheduler  is less than the minimum amount of resources B specified by the scheduler ) as indicated in a block , then resource manager  attempts to satisfy the remainder of the request using resources from lower priority schedulers  (i.e., schedulers  with a priority A that is lower than the priority A of the newly created scheduler ) in process . Resource manager  removes any resources from the lower priority schedulers  that are above the minimum amount of resources B of each of the lower priority schedulers  and reallocates these resources to the newly created scheduler  as indicated in a block .","If the request remains unsatisfied as indicated in a block , then resource manager  attempts to satisfy the remainder of the request using resources from the same priority schedulers  (i.e., schedulers  with the same priority A as the priority A of the newly created scheduler ) in process  as indicated in a block . Resource manager  determines the amount of resources allocated to all schedulers  of the same priority A in process  and determines a new allocation for each of these schedulers . Resource manager  attempts to allocate at least the minimum amount of resources to each of these schedulers  specified by the corresponding minimum amounts of resources B.","If the minimum amounts of resources of all of the schedulers  are met, then resource manager  allocates any remaining resources in a manner proportional to the corresponding maximum amounts of resources C of the schedulers . For example, if a first scheduler  has a maximum amount of resources C of four, a second scheduler  has a maximum amount of resources C of two, and resource manager  has five resources to allocate, then resource manager  provides three of the resources to the first scheduler  and the other two resources to the second scheduler .","As another example, if three schedulers  each have a maximum amount of resources C of two and resource manager  has four resources to allocate, then resource manager  applies the following technique. First, resource manager  divides the number of resources to allocate by the number of schedulers  to get a value for each scheduler  and sorts the values from the highest fractional portion values to lowest fractional portion values. In this example, scheduler ()=1.33, scheduler ()=1.33, and scheduler ()=1.33. Resource manager  then moves the fractional portion of the value with the lowest fractional portion value to the value with the highest fractional portion value so that scheduler ()=1.66, scheduler ()=1.33, and scheduler ()=1.00. Resource manager  next moves the fractional portion of the value with the next lowest fractional portion value to the value with the highest fractional portion value so that scheduler ()=2.00, scheduler ()=1.00, and scheduler ()=1.00. From this determination, resource manager  provides two of the resources to scheduler (), one resource to scheduler (), and one resource to scheduler ().","If amount of resources provided to scheduler  is at least equal to the minimum amount of resources B specified by the scheduler  after reallocating resources among the same priority schedulers  as indicated in a block , then the request is satisfied and resource manager  completes the initial allocation of resources for scheduler . If the request is not satisfied after reallocating resources among the same priority schedulers  as indicated in block , then resource manager  attempts to satisfy the remainder of the request using resources from higher priority schedulers  (i.e., schedulers  with a priority A that is higher than the priority A of the newly created scheduler ) in process . Resource manager  removes any resources from the higher priority schedulers  that are above the minimum amount of resources B of each of the higher priority schedulers  and reallocates these resources to the newly created scheduler  as indicated in a block .","If the request is still not satisfied after reallocating resources among all of the schedulers  in process , then resource manager  oversubcribes (i.e., shares) resources among multiple schedulers  beginning with the schedulers  with the lowest priorities A until the request is satisfied. Resources may be shared by two or more lower priority schedulers  until sufficient resources become available to satisfy the request of the newly created scheduler .","Resource manager  may provide processing, execution context, memory, and\/or network resources to a scheduler  using the embodiment of . Resource manager  may perform the method of  separately for each type of resource managed by resource manager .","For processing resources, resource manager  provides the processing resources by providing an array of interfaces to virtual processor roots  and a count of the number of array elements to the scheduler . The interfaces include information about the topology of the hardware threads  corresponding to the virtual processor roots .","Scheduler  creates a virtual processor  for each interface to a virtual processor root  and maps each virtual processor  to a corresponding virtual processor root . Scheduler  activates each virtual processor  by causing a thread proxy  to be initiated on a corresponding virtual processor root  and specifying an execution context  for execution. Once initiated, each thread proxy  dispatches the execution context  specified by the scheduler  to begin execution of the execution context . Subsequent to each initial execution context  being dispatched, virtual processors  execute tasks as described above until no tasks are found to execute, until being removed from scheduler , or until scheduler  shuts down.","Resource manager  periodically or continuously monitors the amount of use of resources by each scheduler  by receiving feedback from schedulers . Based on the feedback, the available resources, and the policies  of schedulers , resource manager  periodically or continuously reallocates resources between schedulers  to attempt to optimize the overall allocation of resources. Resource manager  reallocates the resources by removing resources from and\/or add processing resources to one or more schedulers  or by temporarily sharing idle resources among two or more schedulers .",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 4","b":["62","1","62","22","1","22","18","62","1","62","64","1","64","62","1","62","22","1","22","64","1","64","64","22"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 5A","b":["62","62","22","71","62","22","22","22","22","62"]},"In one embodiment, the statistics includes the number of tasks that have arrived in scheduler  since the last request for statistics, the number of tasks that have been completed by scheduler  since the last request for statistics, and a total number of uncompleted tasks in scheduler . Each virtual processor  maintains a current arrived count and a current completed count to track the numbers of tasks that arrive and complete on each virtual processor . Each virtual processor  also stores the current arrived count as a previous arrived count and the current completed count as a previous completed after each request for statistics. Each virtual processor  may store the counts in virtual processor local storage that is writeable only by a corresponding virtual processor and maintain the counts without resetting any of the counts in respond to the requests. If a virtual processor  is removed from scheduler , scheduler  stores the counts from the removed virtual processor  and includes the stored counts in the statistical information gathered in response to the next request from resource manager .","Scheduler  accesses the counts from each virtual processor . Scheduler  generates the number of tasks that have arrived in scheduler  since the last request for statistics as a sum of all of the current arrived counts minus a sum of all of the previous arrived counts. Scheduler  generates the number of tasks that have been completed by scheduler  since the last request for statistics as a sum of all of the current completed counts minus a sum of all of the previous completed counts. Scheduler  generates the total number of uncompleted tasks in scheduler  as a sum of all of the current arrived counts minus a sum of all of the current completed counts.","In some embodiments, scheduler  may allow external execution contexts from process  to be inducted into scheduler  to execute tasks of the scheduler . In these embodiments, each external execution context also stores current arrived and current completed counts and previous arrived and previous completed counts in thread local storage (not shown) similar to the way each virtual processor  stored the counts in virtual processor local storage as described above. For each request for statistics, scheduler  reads the current arrived and current completed counts and previous arrived and previous completed counts from the thread local storage of each external count and includes these counts into the generated statistics.","External execution contexts may exit the scheduler  at any time. When external execution contexts exit the scheduler , the exiting external execution contexts store corresponding indicators with the corresponding counts in the thread local storages. Each indicator indicates that a corresponding external execution context has exited the scheduler . On each request for statistics, scheduler  detects any indicators that indicate that an external execution context has exited the scheduler  and deletes the counts of all external execution contexts that exited the scheduler  after reading the counts and including the counts in the generated statistics.","In other embodiments, each scheduler  may use other statistics to track the amount of use of the processing or other resources of scheduler  and\/or may provide other types of statistical information that describes the amount of use of the processing or other resources to scheduler proxy .","In addition, OS  and\/or resource manager  may generate statistics that are accessed by scheduler proxy in addition to those generated by scheduler . For example, OS , resource manager  and\/or scheduler  may track a number of execution contexts allocated to a scheduler , an amount of memory allocated to process  and\/or each scheduler  in process , and\/or an amount of network bandwidth used by process  and\/or each scheduler  in process .","After receiving the feedback from scheduler , scheduler proxy  provides the statistics to hill climbing instance  to determine whether the current resource allocation is optimal as indicated in a block . Hill climbing instance  processes the statistics to determine an amount of use of resources by the scheduler . Hill climbing instance  implements a convex optimization algorithm to process the statistics. In one embodiment, the convex optimization algorithm involves determining a rate of change of uncompleted tasks of scheduler . In particular, hill climbing instance  computes a slope of the tangent line that includes the current and previous amounts of uncompleted tasks (i.e., simple derivative approximation) based on the previous and current resource allocations, and determines whether the current resource allocation is optimal based on the slope. Additional techniques for this embodiment may be found in U.S. patent application Ser. No. 12\/243,859, filed on Oct. 1, 2008, and entitled MANAGING POOLS OF DYNAMIC RESOURCES which is incorporated by reference herein. In other embodiments, hill climbing instance  implements other convex optimization algorithms and\/or uses other suitable statistics to determine whether the current resource allocation is optimal.","Hill climbing instance  determines whether the current resource allocation is optimal by detecting whether scheduler  may benefit from additional resources or may have unused or under used resources. If the current resource allocation is not optimal, scheduler proxy  provides a resource allocation change recommendation to resource manager  as indicated in a block . The resource allocation change recommendation may recommend an increase of one or more resources or a decrease of one or more resources. If and when resource manager  decides to change the current allocation for scheduler , scheduler proxy  notifies hill climbing instance  to update the current allocation and compute the slope based on the updated parameters. After making a recommendation, scheduler proxy  continues the process of receiving feedback from scheduler  and providing recommendations to resource manager .","In the above embodiment, resource manager  may adjust the time between feedback requests to determine how quickly to adjust resource allocations. By decreasing the time between feedback requests, resource manager  may adjust resource allocations more quickly to adapt to changing conditions. By increasing the time between feedback requests, resource manager  may adjust resource allocations more slowly to increase statistical confidence in the feedback used to determine the resource allocations.","Scheduler proxy  may gather statistics for processing, execution context, memory, and\/or network resources from scheduler  using the embodiment of . Scheduler proxy  may perform the method of  separately for each type of resource managed by resource manager .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 5B","b":["22","18","18","62","77"]},"Resource manager  determines whether the overall resource allocation across all schedulers  is optimal as indicated in a block . To do so, resource manager  analyzes the resource allocation change recommendations in view of the available resources (if any), the policies of schedulers , and the topology of the underlying computer system.","Resource manager  first ensures that all schedulers  have at least an amount of resources equal to the minimum amount of resources B specified by each scheduler . As described above, one or more resources may be shared by two or more schedulers . After schedulers  have at least an amount of resources equal to the minimum amounts of resources B, resource manager  determines whether the allocation of the remaining resources is optimal.","Resource manager  considers whether resources may be reallocated between schedulers  to optimize the resource allocation. Resource manager  identifies schedulers  with idle or under used resources and\/or schedulers  that have one or more resources above the minimum amount of resources B of that scheduler  as possible sources for resource reallocation. Resource manager  also identifies schedulers  that request additional resources and that do not have a maximum amount of resources C specified by that scheduler  as possible destinations for resource reallocation.","Given the possible sources and targets for resource reallocation, resource manager considers the priorities A of the possible source and destination schedulers  and the topology of the computer system in determining the schedulers  where resources are to be removed and the schedulers  where resources are to be added. Resource manager  attempts to remove resources from schedulers  with lower priorities and add resources to schedulers  with higher priorities. In addition, resource manager , for each scheduler , attempts to remove resources from a scheduler  that have less locality to the other resources in the scheduler  and add resources to a scheduler  that have more locality to the other resources in the scheduler . By doing so, resource manager  may group resources in schedulers  with the same locality characteristics such as the same processor package or the same NUMA node.","If resource manager  determines that the overall resource allocation may be improved (i.e., the overall resource allocation is not optimal), then resource manager  makes resource allocation changes as indicated in a block  by removing resources from schedulers , adding resources to schedulers , and\/or sharing resources that are idle in schedulers  that have only the minimum number of resources. For any resource that was idle in a given scheduler  and was subsequently shared with another scheduler, resource manager  returns the resource to the given scheduler  for exclusive use if the given scheduler  if the resource becomes non-idle in the given scheduler . Resource manager  notifies the scheduler proxies  of the removals, additions and\/or sharings to cause the resources to be removed, added, and\/or shared.","Resource manager  may reallocate processing, execution context, memory, and\/or network resources to schedulers  using the embodiment of . Resource manager  may perform the method of  separately for each type of resource managed by resource manager .","For processing resources, resource manager  provides an array of interfaces to virtual processor roots  and a count of the number of array elements to the scheduler  to add processing resources as described above. Scheduler  creates a virtual processor  for each interface to a virtual processor root , maps each virtual processor  to a corresponding virtual processor root , and activates each virtual processor  as described above.","Resource manager  removes processing resources from a scheduler  by providing an array of interfaces to virtual processor roots  that are to be removed and a count of the number of array elements to the scheduler . Scheduler  causes execution contexts  that are executing on the virtual processors  that correspond to the virtual processor roots  that are to be removed to exit and removes the virtual processors . The execution contexts  that exited may block and resume execution on other virtual processors  in scheduler . Resource manager  may reallocate the removed processing resources to other schedulers .","In the above embodiments, a scheduler  may shut down at any time. If a scheduler  shut downs, resource manager  reclaims all resources allocated to the scheduler  and may reallocate the resources to other schedulers  using the methods described above.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 6","FIG. 6"],"b":["22","80","1","16","1","16","4","80","2","16","5","16","8","80","3","16","9","16","12","16","1","16","6","22","1","16","7","16","8","22","2","16","9","16","10","22","3","22","4","16","11","16","12","22","4"]},"If schedulers () and () shut down, resource manager  reclaims hardware threads (), (), (), and (). Resource manager  may reallocate hardware threads (), (), (), and () to schedulers () and ().","If schedulers () and () have the same priority A and the same proportionate demand for processing resources as determined from the minimum and maximum amounts of processing resources B and C, then resource manager  may allocate two of hardware threads (), (), (), and () to scheduler () and two of hardware threads (), (), (), and () to scheduler (). Hardware threads () and () are in the same node () as hardware threads () and () that are allocated to scheduler (), and hardware threads () and () are in the same node () as hardware threads () and () that are allocated to scheduler (). Accordingly, resource manager  allocates hardware threads () and () to scheduler () and hardware threads () and () to scheduler ().","If scheduler () has a higher priorities A than scheduler () and scheduler () could use four additional resources, then resource manager  allocates all four hardware threads (), (), (), and () to scheduler ().","Any set or subset of schedulers  in process  may be configured into one or more scheduler bundles  in resource manager  as shown in the embodiments of .  are block diagrams illustrating embodiments of a scheduler bundle  with virtual processor roots ()-(R) and thread proxies ()-(R) in runtime environment  where R is an integer that is greater than or equal to one. In the embodiments of , each thread proxy  provides quanta of execution of a corresponding virtual processor root  to execution contexts  on corresponding virtual processors  across a set of schedulers ()-(Q) of the scheduler bundle , where Q is an integer that is greater than or equal to one.","In the embodiment of , runtime environment  includes a scheduler bundle function that generates scheduler bundle  with virtual processor roots  and thread proxies  in addition to the scheduler function that generates schedulers  for inclusion in scheduler bundle . In one embodiment, the scheduler bundle function is implemented as an application programming interface (API). In other embodiments, the scheduler bundle function may be implemented using other suitable programming constructs. When invoked, the scheduler bundle function creates scheduler bundle  to manage one or more schedulers  in scheduler bundle . The scheduler function creates a scheduler  in scheduler bundle , where each scheduler  operates to schedule execution contexts of process  for execution on virtual processors  of the scheduler . The execution contexts execute on thread proxies  which in turn execute on execution contexts on hardware threads .","Resource manager  includes the scheduler bundle function in one embodiment and thus, creates and manages scheduler bundle , a set of virtual processor roots ()-(R), where each virtual processor root  manages a corresponding set of virtual processors  across the schedulers  in scheduler bundle , and a set of thread proxies ()-(R), where each thread proxy  executes a corresponding set of scheduler execution contexts across the schedulers  in scheduler bundle  on a corresponding virtual processor root . Resource manager  causes thread proxies ()-(R) on corresponding virtual processor roots ()-(R) to be executed on underlying execution contexts obtained from the OS on hardware threads .","Process  implicitly or explicitly causes scheduler bundle , virtual processor roots ()-(R), thread proxies ()-(R), and schedulers ()-(Q) to be created via the corresponding functions provided by runtime environment  and\/or resource manager . Scheduler bundle , virtual processor roots , thread proxies , and schedulers  may be implicitly created when process  uses APIs available in the computer system or programming language features. In response to the API or programming language features, runtime environment  creates scheduler bundle , virtual processor roots , thread proxies , and schedulers  that inherit the policies of scheduler bundle . To explicitly create scheduler bundle , virtual processor roots , thread proxies , and schedulers , process  may invoke the scheduler bundle and scheduler functions provided by runtime environment  and specify one or more policies for scheduler bundle , virtual processor roots , thread proxies , and schedulers .","Scheduler bundle  manages virtual processor roots  and corresponding thread proxies  to share virtual processor roots  and thread proxies  among all schedulers ()-(Q) in scheduler bundle . Scheduler bundle  may share virtual processor roots  and thread proxies  among schedulers ()-(Q) cooperatively, preemptively, or with another suitable type of time slicing. As part of creating scheduler bundle , resource manager  allocates virtual processor roots  and thread proxies  to scheduler bundle  based on supply and demand and any policies of scheduler bundle . In one embodiment, scheduler bundle  creates each scheduler ()-(Q). In other embodiments, one or more of scheduler ()-(Q) that are external to scheduler bundle  may invoke a programming API or other suitable programming construct to attach to scheduler bundle .","In one embodiment, process  adds each scheduler ()-(Q) to scheduler bundle  with the same set of scheduler policies. In another embodiment, process  adds each scheduler ()-(Q) to scheduler bundle  with a different set of scheduler policies. Each scheduler  receives virtual processors ()-(R) where each virtual processor  forms an abstraction of underlying virtual processor roots  and hardware threads . Each scheduler  also receives information that maps virtual processors ()-(R) of a scheduler  to corresponding virtual processor roots ()-(R). As shown in , virtual processors ()()-(Q)() from respective schedulers ()-(Q) map to virtual processor root (), virtual processors ()()-(Q)() from respective schedulers ()-(Q) map to virtual processor root (), and so on.","Scheduler bundle  dispatches the execution contexts  on thread proxies  and schedules thread proxies  on virtual processor roots  which execute on execution contexts associated with hardware threads . Each thread proxy  switches between execution of execution contexts  on virtual processors  on the corresponding virtual processor root . Each thread proxy  causes a single execution context  to be executed at any given time but periodically performs context switches between execution of execution contexts  to execute each of the set of execution contexts  on virtual processors  that correspond to the virtual processor root  of the thread proxy . Each thread proxy  provides a quantum of execution upon dispatching an execution context  of a scheduler . The quantum of execution may be expressed in time (e.g., 50 ms), by a number of tasks to be executed, or by any other suitable metric. The quantum of execution may be the same or different for each dispatched execution context .","As shown in , thread proxy () switches between execution of execution contexts ()()-(Q)() from respective schedulers ()-(Q), thread proxy () switches between execution of execution contexts ()()-(Q)() from respective schedulers ()-(Q), and so on. As shown by an arrow , for example, thread proxy () dispatches execution context ()() for a quantum of execution on virtual processor root () and, once execution context ()() detects that quantum has expired and yields back to thread proxy (), thread proxy () dispatches execution context ()() for a quantum of execution on virtual processor root (). Thread proxy () continues the process of dispatching a next one of the set of execution contexts ()()-(Q)() each time a current one of the set of execution context ()()-(Q)() yields back to thread proxy (). Referring back to , scheduler  executes execution contexts  on virtual processors  which are, in turn, executed by thread proxies  on virtual processor roots .","The process of allocating resources to scheduler bundles  using resource manager  will now be described.","Resource manager  establishes an initial allocation of resources for scheduler bundles  as described above with reference to  using policies  of scheduler bundles , the number of resources available for allocation, and an optimal distribution technique. Resource manager , however, makes the initial allocation of resources in response to a scheduler bundle being created in block  of  rather than in response to an individual scheduler  being created in the scheduler bundle . In addition, resource manager  may satisfy the request for the initial allocation of resources using resources allocated to schedulers  not included in a scheduler bundle  and resources allocated to other scheduler bundles  in blocks , , and  of .","After determining the initial allocation of resources to provide to a scheduler bundle , resource manager  adds the resources to the scheduler bundle . A scheduler  registers with the scheduler bundle  to add itself to the scheduler bundle . For each added scheduler , scheduler bundle  provides processing resources in the form of an array of interfaces to virtual processor roots  and a count of the number of array elements to the scheduler  along with other resources. The interfaces include information about the topology of the hardware threads  corresponding to the virtual processor roots . Scheduler  creates a virtual processor  for each interface to a virtual processor root  and maps each virtual processor  to a corresponding virtual processor root . Scheduler  activates each virtual processor  by calling a thread proxy  on a corresponding virtual processor root  and specifying an execution context  for execution. Each thread proxy  dispatches the execution context  specified by the scheduler  when the quantum for the scheduler  on the corresponding virtual processing root  occurs to begin execution of the execution context . Subsequent to each initial execution context  being dispatched, virtual processors  execute tasks during the quanta provided by scheduler bundle  as described above until no tasks are found to execute, until being removed from scheduler , or until scheduler  shuts down.","Resource manager  periodically or continuously monitors the amount of use of resources by each scheduler bundle  by receiving feedback from scheduler bundles . Based on the feedback, the available resources, and the policies  of scheduler bundles , resource manager  periodically or continuously reallocates resources between scheduler bundles  and\/or schedulers  not in a scheduler bundle  to attempt to optimize the overall allocation of resources. Resource manager  reallocates the resources by removing resources from and\/or add processing resources to one or more scheduler bundles  and\/or schedulers  not in a scheduler bundle .","As shown in , each scheduler bundle  includes a hill climbing instance  that corresponds to each of the schedulers  in the scheduler bundle . Scheduler bundle  performs the functions of scheduler proxy  described above with reference to . In addition, hill climbing instance  operates as described above with reference to  except that hill climbing instance  receives feedback from all of the schedulers  in the scheduler bundle , determines optimal resource allocations based on the feedback from all of the schedulers  in the scheduler bundle , and applies any resource allocation changes to all of the schedulers  in the scheduler bundle .","Resource manager  operates as described above with reference to  except that resource manager  receives resource allocation change recommendations from each scheduler bundle  and each scheduler proxy  and adds resources to or removes resources from scheduler bundles  in addition to adds resources to or removes resources from individual schedulers .","For processing resources, resource manager  adds processing resources to each scheduler  of the scheduler bundle  by providing an array of interfaces to virtual processor roots  and a count of the number of array elements to each scheduler . Each scheduler  creates a virtual processor  for each interface to a virtual processor root , maps each virtual processor  to a corresponding virtual processor root , and activates each virtual processor  as described above.","Resource manager  removes processing resources from each scheduler  of the scheduler bundle  by providing an array of interfaces to virtual processor roots  that are to be removed and a count of the number of array elements to each scheduler . Each scheduler  causes execution contexts  that are executing on the virtual processors  that correspond to the virtual processor roots  that are to be removed to exit and removes the virtual processors . The execution contexts  that exited may block and resume execution on other virtual processors  in scheduler .","In the above embodiments, each scheduler  may operate as a cooperative scheduler where process  and other processes are associated with virtual processors  in a controlled way. In other embodiments, each scheduler  may operate as another type of scheduler such as a preemptive scheduler.","In one embodiment, process  (shown in ) organizes tasks into one or more schedule groups  (shown in ) and presents schedule groups  to scheduler  as shown in . In other embodiments, process  organizes tasks into collections for each virtual processor  of scheduler  in other suitable ways.",{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 9","b":["90","22","90","92","93","94","96","92","38","22","38","92","93","39","38","22","93","22","12","94","96","98","34","96","96","42","34","38"]},"Using the embodiment of , scheduler  may first search for unblocked execution contexts  in the runnables collection  of each schedule group  in scheduler . Scheduler  may then search for realized tasks in the realized task collection  of all schedule groups  before searching for unrealized tasks in the workstealing queues  of the schedule groups .","In one embodiment, a virtual processor  that becomes available may attempt to locate a runnable execution context  in the runnables collection  or a realized task  in the realized task collection  in the schedule group  from which the available virtual processor  most recently obtained a runnable execution context  (i.e., the current schedule group ). The available virtual processor  may then attempt to locate a runnable execution context  in the runnables collections  or a realized task  in the realized task collection  in the remaining schedule groups  of scheduler  in a round-robin or other suitable order. If no runnable execution context  is found, then the available virtual processor  may then attempt to locate an unrealized task  in the workstealing queues  of the current schedule group  before searching the workstealing queues  in the remaining schedule groups  in a round-robin or other suitable order.","In other embodiments, schedule groups  contain other suitable numbers, types, and\/or configurations of task collections.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 10","b":["12","1","12","12","12","22","10"]},"In addition to initially and dynamically allocating processing resources and other resources between schedulers  in a process , resource manager  may also initially and dynamically allocate processing resources and other resources between schedulers  in different processes  in the embodiments of  described above. Accordingly, resource manager  may initially allocate the processing resources and other resources to each scheduler  in each process ()-(S), monitor the amount of use of the resources by the schedulers  in each process ()-(S), and dynamically adjust the resources of schedulers  in each process ()-(S).",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 11","b":["100","10","22","12","22"]},"Computer system  includes one or more processor packages , memory system , zero or more input\/output devices , zero or more display devices , zero or more peripheral devices , and zero or more network devices . Processor packages , memory system , input\/output devices , display devices , peripheral devices , and network devices  communicate using a set of interconnections  that includes any suitable type, number, and configuration of controllers, buses, interfaces, and\/or other wired or wireless connections.","Computer system  represents any suitable processing device configured for a general purpose or a specific purpose. Examples of computer system  include a server, a personal computer, a laptop computer, a tablet computer, a personal digital assistant (PDA), a mobile telephone, and an audio\/video device. The components of computer system  (i.e., processor packages , memory system , input\/output devices , display devices , peripheral devices , network devices , and interconnections ) may be contained in a common housing (not shown) or in any suitable number of separate housings (not shown).","Processor packages  include hardware threads ()-(M). Each processor package  may include hardware threads  with the same or different architectures and\/or instruction sets. For example, hardware threads  may include any combination of in-order execution cores, superscalar execution cores, and GPGPU execution cores. Each hardware thread  in processor packages  is configured to access and execute instructions stored in memory system . The instructions may include a basic input output system (BIOS) or firmware (not shown), processes , OS  (also shown in ), a runtime platform , and resource manager  (also shown in ). Each hardware thread  may execute the instructions in conjunction with or in response to information received from input\/output devices , display devices , peripheral devices , and\/or network devices .","Memory system  includes any suitable type, number, and configuration of volatile or non-volatile storage devices configured to store instructions and data. The storage devices of memory system  represent computer readable storage media that store computer-executable instructions including processes , OS , resource manager , and runtime platform . Memory system  stores instructions and data received from processor packages , input\/output devices , display devices , peripheral devices , and network devices . Memory system  provides stored instructions and data to processor packages , input\/output devices , display devices , peripheral devices , and network devices . The instructions are executable by computer system  to perform the functions and methods of processes , OS , resource manager , and runtime platform  described herein. Examples of storage devices in memory system  include hard disk drives, random access memory (RAM), read only memory (ROM), flash memory drives and cards, and magnetic and optical disks.","Computer system  boots and executes OS . OS  includes instructions executable by hardware threads  to manage the components of computer system  and provide a set of functions that allow processes  to access and use the components. In one embodiment, OS  is the Windows operating system. In other embodiments, OS  is another operating system suitable for use with computer system .","Resource manager  includes instructions that are executable in conjunction with OS  to allocate resources of computer system  including hardware threads  as described above with reference to . Resource manager  may be included in computer system  as a library of functions available to one or more processes  or as an integrated part of OS , for example.","Runtime platform  includes instructions that are executable in conjunction with OS  and resource manager  to generate runtime environment  and provide runtime functions to processes . These runtime functions include a scheduler function as described in additional detail above with reference to . The runtime functions may be included in computer system  as part of a process , as a library of functions available to one or more processes , or as an integrated part of OS  and\/or resource manager .","Each process  includes instructions that are executable in conjunction with OS , resource manager , and\/or runtime platform  to cause desired operations to be performed by computer system . Each process  may execute with one or more schedulers  as provided by runtime platform . The processes  may form one or more applications that may executed by computer system .","Input\/output devices  include any suitable type, number, and configuration of input\/output devices configured to input instructions or data from a user to computer system  and output instructions or data from computer system  to the user. Examples of input\/output devices  include a keyboard, a mouse, a touchpad, a touchscreen, buttons, dials, knobs, and switches.","Display devices  include any suitable type, number, and configuration of display devices configured to output textual and\/or graphical information to a user of computer system . Examples of display devices  include a monitor, a display screen, and a projector.","Peripheral devices  include any suitable type, number, and configuration of peripheral devices configured to operate with one or more other components in computer system  to perform general or specific processing functions.","Network devices  include any suitable type, number, and configuration of network devices configured to allow computer system  to communicate across one or more networks (not shown). Network devices  may operate according to any suitable networking protocol and\/or configuration to allow information to be transmitted by computer system  to a network or received by computer system  from a network.",{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 12","b":["10","100","1","100","100","100","1","100","112","1","112"]},{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 12","b":["18","100","1","100","22","12","100","1","100","18","100","1","100"]},"Each process  may execute on a single computer system  (e.g., processes () and ()) or across multiple computer systems  (e.g., process ()) using any suitable proxies or sub-processes. Accordingly, resource manager  may initially allocate processing resources and other resources of computer systems ()-(T) to each scheduler  in each process  (e.g., processes ()-()) across computer systems ()-(T), monitor the amount of use of the resources by the schedulers  in each process  across computer systems ()-(T), and dynamically adjust the resources of schedulers  in each process  across computer systems ()-(T).","In the above embodiments, resource manager  may temporarily provide boosts or other alterations in resource allocations in response to changing execution conditions of runtime environment . For example, resource manager  may provide OS priority boosts to execution contexts  that increase the execution quanta of the execution contexts  on hardware threads . In addition, resource manager  may provide resource allocation boosts for one or more resources to one or more schedulers .","As described above, resource manager  may determine resource allocations using a static set of policies  for each scheduler . In other embodiments, a scheduler  may be configured to operate using different profiles during different phases of execution. Each of these profiles may include a different set of policies  to allow each phase to be provided with optimal resources allocations by hill climbing instance  and resource manager . In response to a profile change of a scheduler  (i.e., a change in policy ), resource manager  may perform dynamically adjust resource allocations across schedulers  in the same process  and\/or different processes  and\/or computer systems  as described above.","In embodiments with different profiles in schedulers , the workload of a scheduler  may be executed against one or more resource allocation profiles and\/or in the presence and\/or absence of other workloads to determine optimal profiles for the scheduler  using hill climbing instances  and resource manager . The other workloads may be included in the same process  and\/or different processes  and may be executed on the same computer system  and\/or different computer systems . The optimal profiles may be saved and used as the initial profiles for subsequent executions of the scheduler .","Although specific embodiments have been illustrated and described herein, it will be appreciated by those of ordinary skill in the art that a variety of alternate and\/or equivalent implementations may be substituted for the specific embodiments shown and described without departing from the scope of the present invention. This application is intended to cover any adaptations or variations of the specific embodiments discussed herein. Therefore, it is intended that this invention be limited only by the claims and the equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings are included to provide a further understanding of embodiments and are incorporated in and constitute a part of this specification. The drawings illustrate embodiments and together with the description serve to explain principles of embodiments. Other embodiments and many of the intended advantages of embodiments will be readily appreciated as they become better understood by reference to the following detailed description. The elements of the drawings are not necessarily to scale relative to each other. Like reference numerals designate corresponding similar parts.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 7A-7B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
