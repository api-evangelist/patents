---
title: Dynamic associative storage security for long-term memory storage devices
abstract: A hierarchical folder security system for mapping files into and out of alias directories and/or real directories depending on: 1) the directory of the specific file being accessed, 2) the program thread requesting access to a memory storage device (), and 3) the type of access request being made (i.e. load, save, run, etc.). For write access requests (i.e. save, modify, paste, delete, cut, move, rename, etc.), security controller () determines if the requested folder access address () is associated with the requesting program's folder address (). If it is, the file is written at absolute address () on disk platter () through real folder map (). If requested address () is not associated with program folder address (), then an alias directory address is created and the file is written at alias address () through alias folder address map ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07814554&OS=07814554&RS=07814554
owner: 
number: 07814554
owner_city: 
owner_country: 
publication_date: 20041106
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","TERMINOLOGY","EXECUTIVE SUMMARY","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","DISCLOSED INVENTION","The following program *[Full Program Address]* is requesting to rewrite the program WINFIX.EXE. This should never be done unless you are actually reinstalling the Microsoft Windows 98 operating system.","OPERATIONAL DESCRIPTION","FIGS. B, , , , A, B, D, A Through B","MODES OF OPERATION","OPERATIONAL DESCRIPTION","RAMIFICATIONS, AND SCOPE"],"p":["This utility application claims priority from U.S. Provisional application Ser. No. 60\/607,444, filed on Sep. 3, 2004, titled: \u201cDynamic Associative Storage Security for Long-Term Memory Storage Devices\u201d, and U.S. Provisional application Ser. No. 60\/517,745, filed on Nov. 6, 2003, titled: \u201cLong-Term Re-Writeable Computer Storage Security\u201d.","1. Field of Invention","The field of this invention relates to computer security systems for preventing unauthorized changes to computer files stored on a long-term rewritable memory storage device.","2. Description of Prior Art","Computers have become very common and have advanced greatly in recent years. However, there still remains the problem of viruses, worms and other malicious programs that can disable a computer and damage files on long-term storage devices. As we have found in recent years, it is almost impossible to prevent malicious programs from finding their way onto our computers. New and more dangerous viruses and worms are appearing almost daily. To solve this problem, the disclose invention attacks the problem in a completely different way than security systems before it. Instead of trying to prevent malicious programs from entering the computer, the disclosed system focuses on preventing damage to long-term memory devices attached to the computer. The system allows programs, even malicious programs to execute on the computer, but long-term storage can be protected. Thus, once the computer is turned-off or re-booted, all changes that the malicious program appeared to make are quarantined, and do not effect the computer again unless the user actually executes the malicious program again. The disclosed security system functions by segregating (quarantining) each program and\/or program thread within their own associated group or folder. However, this \u201cquarantine\u201d is unlike any such quarantine before it, because programs can still load, execute, modify and save any file on the hard drive for its own use. In this way, programs (executable files) can operate without restriction with their own files and data, unaware that they are unable to make lasting changes to files on the long-term memory storage device that are not part of its associated group and\/or within its storage folder. Thus programs operate in a partially-virtual computer space (i.e. alias files and\/or alias folders) when trying to modify and saving other program's files to the long-term storage device. From the program's point of view, it can always operating in \u201creal\u201d computer space, but in fact, it may be operating in a virtual space with alias files and not be aware of it. The terms alias directories (alias folders) and alias files will be used to distinguish these files and folder from the virtual directories and virtual folders which Windows operating system already uses and are different from the disclosed security system using alias directory address system. Thus, to avoid confusion the term \u201calias directories\u201d, \u201calias folders\u201d and \u201calias files\u201d will be used throughout the remainder of this patent to describe the alternate folders and files generated for security purposes by the disclosed security system.","Program Directories are another type of virtual directory used by the disclosed security system. Program directories are a dynamically generated directory for specific programs at the time they access the long-term storage device. Depending on which program is accessing the storage device, what file is being accessed and what type of access is requested, a different Program Directory can be generated that the Program believes is the \u201cReal\u201d or \u201cAbsolute\u201d directory.","In this patent, specific words will have very specific meanings, which will be described here.\n\n","One example of this association is a hierarchical directory system used by Windows operating systems, where files associated with each other can be placed within the same directory, or one of its subdirectory folder. In this way, DASS can associate files with a specific executable program by placing the files in the same directory, or one of its subdirectories, as that specific executable program. This placement of files, not only associates the files with the program, but also with other programs and files within that directory and its subdirectories. This means of association allows the security system to easily identify their association with each other.\n\n","Computer security has become a priority for many businesses because of the increasing number of malicious programs (viruses, worms, Trojan horses, etc.). The disclosed Dynamic Associative Storage Security (DASS) system promises to vastly improve protection for files stored on rewritable long-term storage devices (hard drive, DVD-RW, etc.). The DASS system provides a permanent solution to malicious programs, without significant use of computer bandwidth and without the need for updates. DASS does not attempt to prevent malicious programs from being executed on the computer, or stop them from gaining access to files, instead DASS only focuses on preventing damage to files on protected long-term storage devices. All programs are basically quarantined in their own folder directory (or other associative arrangement) by DASS, while still allowing all programs substantially unlimited read, write and modify access to a protected drive for their own use. This improbable combination allows substantially normal operation for both system files and applications, while providing rock-solid file protection for all files on the protected drive. DASS would not replace existing security, but complement it, by operating like a firewall between the computer and a storage drive.","The DASS system operates under a specific set of logical rules within a hidden layer between a computer's operating system and a protected drive. These rules dynamically map access requests addresses depending on a number of factors derived directly from the CPU, BIOS, and\/or Operating System. This provides a framework for storage and protection of files on the protected drive, independent of whether the requesting program is a system file or a virus. Neither the computer's operating system nor the hard drive need be aware of the DASS system as it acts as a middle man, redirecting file access requests to the protected drive according to its own logical rules. Files are protected by the logical mapping of access to files, not by identifying a file as containing a malicious program. This means updates are never needed, and the logical rules can be implemented in hardware so that DASS cannot be altered. The information needed for mapping access requests is provided by three main sources: 1) the identity of the program making the access request to the protected drive, 2) the type of request made (i.e. read\/write\/execute\/etc.), and 3) the address of the file being accessed. Additional factors can also be used in determining how to redirect the file request. DASS is 100% secure if the program making the access request can be 100% accurately identified. This requires that real and virtual memory allocation is not circumvented, which for most computers is very secure. DASS can insure security by directly monitoring CPU and memory operation to detect any violations of memory allocation should it occur.","Summary 1","Many different ways have been tried to stop malicious computer programs, such as, viruses, worms, Trogon horses, etc., from damaging computer files in random access memory (RAM) and\/or in long-term nonvolatile storage memory. These fixes have been only partially effective, because they rely on catching the malicious programs before it can be \u201cexecuted\u201d (run) by the computer operating system. If the malicious programs gets passed security, the computer can execute the program, and the program can achieve its goal. Whether it is designed to take control of the computer, delete files, modify files, or simply to replicate itself. Because all computers loose all information in their random access memory (RAM) when power is turned off, what really must be protected is the long-term storage device (i.e. hard disc drive), which holds all the important information for the computer when it is turned back on. If one can protect the long-term storage memory from damage, one has protected the computer system from long-term damage. This disclosed security will work with nearly any long-term storage device, including memory systems needed to provide \u201cinstant on\u201d computers. With \u201cinstant on\u201d available one would merely needs to restart, or turn off their computer and then back on, to eliminate any malicious program they may have executed.","The disclosed security system essentially quarantines all Folders and\/or Files from each other, so that programs are unable to damage un-associated files or folders. However, this \u201cquarantine\u201d is unlike any normal quarantine, because programs executing on the computer system are unrestrained from their normal operation. Below is a list of some function that are unaffected by having the security system quarantine Folders and\/or files from each other:\n\n","The disclosed computer security control system will work with any computer storage device that can be rewritten, such as, hard-drives, CD-RWs, DVD-RWs, flash memories, zip drives, tape drives, network drives, virtual memory storage, etc. (Virtual Memory is often used by Windows operating system to create a larger operational space for RAM by usually saving extra data in Virtual Memory on the hard drive). The disclosed security system can even be used to in RAM (which is volatile) to separate running programs from each other (while operating) and make them \u201cthink\u201d they are altering other program space, but actually just creating alias RAM locations where their modified programs are executed. This disclosed security storage system operate in an entirely different manner than previous security systems. Instead of trying to stop the malicious program from being loaded and\/or executed in the computer memory and\/or executed from nonvolatile memory storage (virtual memory, hard-drive, DVD+RW, etc.), the disclosed security control system allows all of these operations. Viruses, worms, etc. are allowed to enter the computer system freely, and allowed to run as is normal for that virus, worm or other malicious program (from the malicious program's point of view). The disclosed security control system only stops the malicious program from modifying files on a protected long-term nonvolatile storage which are not associated with the program. Files that are associated with the program can be modified without restriction if permitted by the user. This prevents one program from writing onto a second program's files unless it has the proper authorization or association with the second program, while at the same time allowing a program to modify its own related files. Files on the long-term storage device may also be read by any program (unless specifically protected by additional security). Programs can also load, modify and rewrite files to the long-term storage device for their own use. The key phrase here is \u201cfor their own use\u201d, since alias files are created for that program's specific use (and associated programs and files), and do not effect the original file (real or requested file), which other programs may be using. By doing this, malicious programs can operate normally. Not that one want malicious programs to operate normally, but so other programs, we do want to operate normally, will also be able to operate normally. This means the malicious program can disrupt your computer, maybe even cause it to crash, but cannot change nonvolatile files already on your hard-drive, and\/or modify other programs within random access memory (RAM).","For hardware solutions to the disclosed security system, connections can be made directly to the CPU in order to directly follow the flow of information (files) in RAM and Virtual Memory. The CPU controls actual physical memory addressing, thus one can use the address locations and functions being performed to determine where each file is stored in memory, and also to track that file if it is moved from one location in memory to another. Thus, the security system could create its own \u201chardware version\u201d of the \u201cdescriptor tables\u201d which would override any software based \u201cdescriptor table data\u201d created by the operating system. Examples of how this hardware \u201cdescriptor table\u201d might be connected are shown by data line  in , capture circuit  in , and file and\/or folder identification circuit  in . In , data lines  reads data directly off the CPU and send that information to security controller . This information is then used to construct a descriptor table(s) describing the location of each file loaded from hard drive  onto the computer and where it is stored in RAM , Virtual Memory on hard drive , and Caches (not shown) on the CPU  and\/or Motherboard . Further, security controller  would keep track of any change of position of each file's location in RAM  or to a virtual memory address on hard drive  in the descriptor table(s). Such information can comprise, the physical address pointer, instruction pointer register, code segment register, selector register, etc. Thus, the exact memory locations of all files in RAM, can be match with their Absolute File Address on hard drive . Even if the operating system's descriptor table(s) should get corrupted, the hardware solution described here would still track the correct memory locations of each file, and thus be able to protect files and folders on hard drive  from damage. The placement of security controller  may be directly on mother board , either within CPU  or elsewhere, to provide sufficient access speed to keep up with the CPU (see circuits  and  in ). Data from the CPU through data lines , can also be combined with data in lines  to provide a more comprehensive identification of the data being moved, loaded or saved, into RAM and\/or Virtual Memory.","In a similar way, security controller  in , can have a connection directly to RAM memory  by dedicated data lines . In this way controller  can observe all data coming to and from its long-term storage device (Solid State Memory ) to determine exactly where it is being placed in RAM . This connection also would allow direct observation of movements of data within RAM  and to any Virtual Memory pages moved to memory . Direct dedicated data lines  is somewhat redundant since the system bus  and I\/O  can be used to monitor all data and addresses accessed in RAM , but is shown here to illustrate there are many different ways of obtaining and tracking the memory location of files loaded from a long-term storage device. Motherboard  gives an even more redundant example, where circuits ,  and  collect data from CPU , system bus , and RAM memory , respectfully. Any one of these circuits connections could provide sufficient information to identify and track files as they are loaded from a long-term storage device (hard drive ) and stored in RAM . The use of modern operating systems which use \u201cVirtual Machines\u201d to execute programs, can actually make it easier to determine the specific program which made the access request to the long-term storage device. With a \u201cVirtual Machine\u201d, identifying the memory block the \u201cVirtual Machine\u201d is working on provides the information needed to identify the access requesting program.","For proper operation of the security system, the computer should be operated in what is called \u201cProtected Memory Mode\u201d or \u201cProtected Mode\u201d, where all programs can be stored in separate protected memory spaces in RAM or Virtual memory on another storage device (i.e. hard drive). Protected Mode segregates each program from the other programs as they are executed on the computer, so that they cannot modify each others code. For the security system to work, each program and\/or program thread is given its own memory space to operate within (i.e. RAM, Virtual Memory, etc.), and is not allowed to operate outside its defined space. The disclosed security device requires two things to secure the long-term storage device, comprising: 1) a secure protected memory mode, so that one program cannot modify another program's memory space, and 2) correct information about the program executing and initiating a read or write access request to the long-term storage device. By meeting these two requirements, the identity of the program making a read or write request can be reliably obtained. The CPU, BIOS, Operating System and\/or additional hardware or software can work together to provide a secure memory management system, so that, the access requesting program in RAM memory can be reliably identified and associated with its folder and file location on the long-term storage device (i.e. hard drive).","When \u201cprotected mode\u201d operation is combined with dynamically generating alternate directories and files (Alias Files and Alias Folders) on the long-term storage device, a powerful means is created for preventing one program from damaging another program's files. The BIOS and Operating System can usually prevent programs from modify other programs in RAM memory or virtual memory, but files and programs on the long-term storage device is more difficult. Through this use of Protected Mode operation and alias files and\/or alias folders, all programs (malicious or otherwise) can be trapped in their own memory space and forced to stay within their own long-term storage folder (storage directory on the long-term storage device). In Protected Mode operations a memory table keeps track of each program and its memory space, and a stack pointer determines the address currently being executed. With the stack pointer address and the memory table information, the folder security system can determine exactly, which program or thread generated a call to the routine(s) for accessing the long-term storage device. Additional data stored within the security system's protected memory (dedicated memory within the security system itself, and\/or a secure portion of the long-term storage device, etc.), can further assist in determining the absolute folder address of the requesting program making the access request. This requesting program identified, the security system can generate the proper Program Directory for reading or writing to the long-term storage device.","In a computer, programs can be blocked by hardware means from writing outside their memory allocation range. Thus, they are prevented from writing onto other programs in RAM and Virtual memory. For storage on a hard drive, the malicious program can be limited to only writing new files to its own directory or sub-directories, and\/or designated alias folder or files (alternative folder and\/or file)). As an option, authorization can be given through a hardware input device (such as conformation through keyboard, mouse, or other hardware input device, which cannot be simulated from software), so that the user can decide if they want to allow the program to write files to a folder address(es) outside its own. The user can be given choices on how they want to handle file writing and access in the future, with a list of choices, such as, \u201cWrite this time Only\u201d, \u201cWrite Always\u201d (allows program access to that file anytime), \u201cWrite this file only in Alternative or Alias Folder directory (i.e. safe-folder), \u201cwrite all files from this program in Alias Folder\u201d, etc. Without this authorization the malicious program is trapped within its own folder where it was executed from and cannot write to any other directory on the hard drive (nonvolatile memory). All files it tries to write outside its own directory can be mapped back in to the program's absolute folder directory and stored there as an Alias File. When the program tries to reload this written file the Alias File is loaded instead. This effectively traps the program from damaging other files while still allowing it to operate unaware that anything is different than expected.","Summary 2","The disclosed security system provides protection for computers of all types from malicious programs (viruses, worms, Trojan horses, etc.) by protecting data stored on long-term storage devices (hard drive, Rewritable CD, Rewritable DVD, flash memory, RAM memory with battery backup, etc.). While the disclosed security system also enhances overall security (by reducing malicious program's effect, it does not directly protect user data from theft or viewing. Additional security measures must be taken in order to protect confidential or secret data, since the security system disclosed here generally allows all files and programs to be accessed, read, and executed unless otherwise restricted.","The disclosed security system operates between a long-term storage device and a computer. Neither the long-term storage device nor the computer or its operating system need be aware of the security system, since it operates as a hidden process redirecting read and write requests according to specific parameters within the computer and its operating system. The long-term storage device can be a standard hard drive and the computer can be a standard computer, with the disclosed security system connected between the two. The hard drive can operate as if it were sending and receiving access requests directly from the computer, and the computer can be sending and receiving access requests as if it were communicating directly with the hard drive. In variations of the security system, components of the security system may be placed partially or fully on the long-term storage device, the computer and\/or programmed into the operating system (operating system, drivers, applications, etc.).","The disclosed security system operates by redirecting the read and write requests from the computer to the long-term storage device, depending on which program, or program thread, initiated the read or write request. By associating the program making the access request with a file being written, each program (and program thread) can have its own file (alias file) with the same directory address, even though from the computer's perspective each program is reading and writing to the same exact file on the storage device. The real power of this security system comes when a read request is made by the computer. The correct file is match up with the program making the request, the \u201calias\u201d file if it has one on the storage device and the \u201creal\u201d file if the \u201calias\u201d file does not exist. What this means is that any program can modify a file and appear to \u201csave\u201d the modified file to the storage device at its \u201creal\u201d location, but all it has really done is saved the modified file for itself in an alias file. When other programs on the computer attempt to access the same file they either get the original \u201creal\u201d file or their own \u201calias\u201d file, not the \u201calias\u201d file for the other program. Thus, each program can operate normally, modifying and saving any file on the long-term storage device, but without interfering with the file interaction with other programs using the same exact file address.","In many computer operating systems the read and write requests are handled by one or more programs that are accessed to initiate a read or write function on the long-term storage device. These programs normally reside in the BIOS, the Operating System, the ATA Interface Card, and\/or etc.","This effectively quarantine all programs to within their own associated group of files without limiting what programs can access, files it can write or what files it can load. Thus, programs, including malicious programs, can operate normally on the computer, but can only alter long-term storage space associated with itself. This means that programs can only do long-term damage to their own files, because as soon as the computer is turned-off, all the things the malicious program thought it had changed only exist in association with the malicious program itself on the long-term storage device. Similarly, special files, such as, the registry in the Windows based operating system, can also be organized and controlled so that each program can only modify its own data entries. By only allowing a program to edit its own data in the registry, that program is unable to adversely effect other programs. In this way the security system protects programs from each other. Even if one program or file directory is compromised on the storage device, the other programs and file directories are unaffected because of the invisible and impenetrable wall between them.","The disclosed security system can be implemented entirely in hardware for maximum security, entirely in software for ease of use, or a combination of both hardware and software components. In a hardware only configuration, a means of detecting which program has made a request to access the storage device and where that program is stored (originally loaded from) is needed. This may be accomplished by directly connecting to the computer's CPU, Memory, and\/or System Bus. By keeping track of the memory allocation table for the computer, the security system can determine the storage location of a program requesting read or write access to the storage device. The stack pointer can identify which part of memory was being executed at the time of the request and then determine the program and its address from a table identifying each executing program and program thread, and which memory block it is presently in.","Since the disclosed security system can operate substantially independent of the programs or files under it is protecting, there is very little modification needed for existing programs to allow them to work with this security system. In fact, most applications should run without any modifications at all. Special programs like Windows operating system, and files like Windows Registry can require some modification to perform their system functions, but even these will operate, but possibly not entirely as intended. The computer's BIOS, ATA controller and drivers can be updated to provide the maximum benefit from the disclosed security system. While the security system can be implemented in software, it is also adaptable to an all hardware solution where the security system could not be circumvented without proper authorization. All random access memory used for tables or pointer information would be either in memory physically separated from computer memory and on a secure area of the storage device.","The disclosed security system can be easily standardized, since it adds only a single additional layer of abstraction to the filing system. Requiring the addition of being able to determine what program is initiating a read or write request of a specific long-term storage device. This can allow easy integration with the ATA controller and provide output compatible with present day hard drives. Hard drive design can remain substantially unchanged. The security system can also be implemented anywhere between the CPU of the computer and the Hard Drive physical platters, making the options for standardizing the security system nearly limitless. If the new Serial DMA standard takes hold, hard drives could include the disclosed security system on their control board. Such a serial hard drive would only need directory address information for the specific file being accessed and the directory address of the specific program trying to access that file to completely determine whether a \u201creal\u201d file or \u201calias\u201d file should be accessed. This would essentially eliminate all overhead functions now performed by the computer CPU. This would also require a secure means of determining and sending the specific program's directory to the hard drive, which can be implemented in hardware on the computer if desired.","The disclosed computer security control system comprises a directory security controller (also referred to as directory controller and security controller) that can be connected logically between the Central Processing Unit (CPU) of a computer and its long-term nonvolatile storage memory (i.e. hard drive, etc.). The security controller can exist external to the computer's operating system in hardware, and\/or exist in software within the computer's operating system. The security controller may be integrated with a computer motherboard, where bios and ATA adaptor (IDE controller) work together to provide the security system with little, if any, modifications to current operating systems or hard drives. This is possible because the security controller acts like a hidden layer that neither the operating system nor the hard drive is aware of. Thus, nearly any type of long-term nonvolatile memory storage will work with this system and can comprise any of a number of different storage systems, including hard drives, CD-RWs, DVD-RWs, flash memory, tape drives, floppy drives, Zip drives, USB micro drives, network drives, web storage drives, wireless storage drives, etc. The disclosed directory controller (security controller) can allow all programs (applications, system threads, etc.) to operate normally, but limits where these programs can write files on the long-term storage device. If a program requests write access to a restricted area for that program, the security controller creates and alias folder(s) for files which that program tries to write. For example, if during an attempt to write a file, the directory security controller determines that the access requesting program is not authorized to overwrite the file requested, the directory controller can write the file into the same folder (directory) as the program (or other predetermined directory for unauthorized file writes\u2014i.e. alias folders and files). The program still writes the file, and it appears to be located in the proper directory address from the program's point of view, but it is actually stored in at an alternative directory address (alias folder address). The file is actually written in a different directory location on the hard drive, and associated with the program's storage folder (storage directory address of program) and\/or associated with the program itself. The place of storage of the alternative files (alias files) is determined by which program and\/or program thread initiated the write request (save, save as, modify, rename, delete, etc.) of the file. When the same program tries to reload the same file it wrote earlier, the security controller first checks to see if that particular program has an alias file for the real file address (actual file address that the program requests). If the normal directory filing system is itself being used to associate alias files with the program writing them, then the security controller can first looks in the requesting program's own directory to see if an alias file exist for that particular program and real file address. If the alias file exists, the security controller will load that alias file, even if a real file exists at the real file address location where the program requests. Thus, a program can load a system file, alter the system file, write the system file to disk to apparently the same directory address, and then reload the altered system file from apparently the same address without every altering the original system file or effecting any other program using that file. From the program's point of view, the system file was altered, stored and retrieved from its normal folder address, but the original is still unaltered. The file appears to be in the correct directory (to that program), but is actually placed in a mapped directory (alias directory), so that the file being written (alias file) does not overwrite an existing (and possibly important) file it is not authorized to overwrite. These alias files that are created (written), can be written in the same directory as the program, so that the program can only write files within its own folder and\/or subfolders. In this way programs are quarantined to their own folder directories. If the program is malicious, it can thus only damage itself.","When that program later requests the unauthorized file (alias file), either to load, alter and\/or execute (run), the directory security controller first looks in the program's own folder to see if the requested file has been written there as an unauthorized file (alias file). If the file is there, the directory controller would load it instead of looking in the actual directory the program tried to access. In this way, programs can be restricted from writing to other program's folders without specific permission. Programs can still run normally even if they try to write and reload to illegal location. Notice that programs can still load, run and save (for its own use) other programs without restriction (unless specific restrictions are specified), so a program can still take advantage of existing programs and files on computer, but each of these programs is trapped within its own directory (or associated group) unless otherwise authorized. Similarly, a malicious program (virus, worm, etc.) can operate normally in this environment, but the malicious program cannot change anything lasting, since it cannot change other program's files on the hard drive (or other long-term storage). Thus, a virus can execute and do whatever it does, but when the computer has infected is turned off, or the program it infected is closed, the virus closes with it. Even if the a malicious program request a reboot, it does little more than turn itself off, since it can only \u201cappear\u201d to change files that are associated with the reboot process.","Overview","In the context of a computer system, the invention concerns document-management interactions among an operating system, one or more application programs, and a user-interface which allows users to view and enter data into the computer system. More particularly, the operating system takes advantage of normal interactions with application programs during access to basic read and write file functions (load, run, save, save as, delete, etc.) to present a common default storage folder called \u201cMy Documents\u201d to the application programs. In addition, the operating system promotes further use of the \u201cMy Documents\u201d folder at other file-access points in its graphical user interface. Another set of inventive features relate to using the \u201cMy Documents\u201d folder in a network environment to facilitate the sharing of documents between users of different computer system.","Prior Art Computer System",{"@attributes":{"id":"p-0059","num":"0091"},"figref":["FIG. 1A","FIG. 1A","FIG. 1A"],"b":["70","70"]},"Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PC's, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","More particularly, computer system  includes a general purpose computing device in the form of a computer , including a processing unit , a system memory , and a system bus  that operatively couples various system components including the system memory to processing unit . There may be only one or there may be more than one processing unit , such that the processor of computer  comprises a single central-processing unit (CPU), or a plurality of processing units, commonly referred to as a parallel processing environment. Computer  may be a conventional computer, a distributed computer, or any other type of computer. Thus, the invention is not limited to a particular computer.","System bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory, which may also be referred to as simply the memory, includes a read only memory (ROM) , and a random access memory (RAM) . ROM  stores a basic input\/output system (BIOS)  containing the basic routines that help to transfer information between elements within the computer , such as during start-up. Computer  further includes a hard disk drive  for reading from and writing to a hard disk platter within disk drive , a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The invention can be operated in connection with any or all of these non-volatile storage systems, and is not limited to any particular type of memory storage.","Hard disk drive , magnetic disk drive , and optical disk drive  are connected to system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for computer . It should be appreciated by those skilled in the art that any type of computer-readable media which can store data accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may be used in the disclosed operating environment.","Hard drive , as well as the other long-term storage media, are accessed through BIOS  hardware routines. Different media (floppy, CD-RW, DVD+RW. etc.) have different drivers, and different protocols, and are often driven by the BIOS  programming. For example, computer system  can be designed to access hard drive  in the following way. When an application program  requests access to a file on hard drive  an interrupt service routine (ISR) in operating system  and\/or BIOS  is activated. In older systems operating system  first checks the File Allocation Table (FAT, VFAT, FAT32, MFT) to locate the address of the clusters that contain the requested file, and creates a record in the file allocation table for the file if it is the first time it is being written. Control is then usually passes over to BIOS  which controls the details of reading or writing the file. The BIOS accesses the hard drive through hard drive interface , which can be an ATA Interface (IDE, EIDE, etc.), SCSI or other hard drive interface. After the BIOS is done reading or writing the file, control is returned to operating system , which then makes any changes needed to the File Allocation Table to include all the cluster information if a file was written. If hard drive  is has enhanced integrated drive electronics (EIDE) the disk controller is built into the drive itself. For the disclosed system all the hard drive software may be moved to the BIOS so that an Interrupt Request goes directly to the BIOS program that controls hard drive interface .","If operating system  is the Windows XP operating system, then all access to hard drive  normally go through the Application Programming Interface (API). When an application calls on the hard drive (through a software call, software interrupt service Request, or etc.), the API can be accessed. The API in turn calls DLL function(s) needed for the requested access function. Each drive access function (i.e. Save, Load, List, Run, etc.) normally has a separate API program to execute that function. The API provides this service and also protects users from each other and provides protection against an application damaging the API and other core services (i.e. kernal files KRNL386.EXE (for 16-bit windows programs) and KERNAL32.DLL (for 32-bit windows programs) and other control operations (Input\/Output, Interrupts, Memory Management, etc.). Windows XP has additional layers to handle additional devices for file storage which include calling the Installable File System Manager to pass control to the proper File System Driver (NTFS, VFAT, CDFS, etc.). The File System Driver (FSD) then gets the disk location of the file's first cluster from the Master File Table (MFT) stored on hard drive . The IO Subsystem (IOS) assists the FSD with communication between the FSD and lower level device-specific drivers. The MFT provides the location data needed for the FSD to identify the clusters on the hard drive where the requested file is stored (or to be written). The MFT also contains the hierarchical relationship between all the data on the hard drive (i.e. file names, directory and subdirectory information). The Volume Tracking Driver (VTD) may be used if the file being accessed is on a removable drive (floppy, CD, DVD, etc.). Next the Type-Specific Driver (TSD) is called (which may be stored in BIOS )","Since the Master File Table (MFT) is stored on hard drive  and BIOS  can have complete control over the MFT, the disclosed security system (DASS system) can be implemented completely within BIOS . The way operating system  accesses the BIOS may need to be modified for proper operation with the BIOS, but in principle the operating system nor the applications need to know that the DASS system is mapping certain files to new alias addresses. Some care must be taken by the operating system, and\/or other program, to not break certain rules governing DASS operation. For example, generally a program that creates a file (initially writes file to the drive) is the only program that is allowed to modify the file at a later time. If more than one program is to be used to modify certain files then each of those programs can be stored in the same folder (or subfolder) as the program that writes the file. This associates both the program writing the file and the programs allowed to modify the file with each other and the file itself. Alternatively, the file can be marked in some other identifiable way as being associated with all the programs that are allowed to modify that file.","A number of program modules may be stored on the hard disk , magnetic disk , optical disk , ROM , or RAM , including an operating system , one or more application programs , other program modules , and program data . Operating system  provides numerous basic functions and services to application programs  stored by system memory , hard-disk drive , and\/or hard-disk drive . The invention, however, is not limited to a particular operating-system type or architecture. Indeed, the invention can be incorporated in any number of existing operating systems, such as, Microsoft Windows 95, Microsoft Windows NT 4.0, IBM OS\/2 operating system, Apple Computer MacOS 7.0, etc.","In , we see a modern digital systems . The prior art portion of  and the following discussion of the prior art aspects of  are taken nearly word-for-word from the discussion of the prior art system seen in FIG. 1B of U.S. Pat. No. 5,905,885 to Richter issued on May 18, 1999. Digital systems  typically include multiple integrated circuits on multiple printed circuit boards. The system  is a desktop computer which includes two ATA-type disk drives  and  and two Personal Computer Memory Card International Association (PCMCIA) expansion slots or sockets  and . PCMCIA is a standard interface and specification to allow PCMCIA cards such as  and  to vary the capabilities of a computer system or other electronic equipment. The PCMCIA cards consist of a connector that interfaces to a printed circuit board that is approximately the size of a credit card. The main printed circuit board or motherboard  includes the central processing unit (CPU) , which is the heart of the computer system  and controls the operations of the system, and also the internal system memory . The CPU  is coupled to the system memory  and the other integrated circuits on the motherboard  by the core logic . As peripherals or subsystems such as the disk drives  and  are added to the system , interface boards such as the board  are coupled to the motherboard  and to the system bus . This interface board  is also coupled to the disk drives  and  by a cable  which allows the interface board  to communicate with the disk drives  and . The interface board  includes the ATA host adapter integrated circuit  which serves as the interface and controls communications between the disk drives  and  and the CPU system bus .","In systems of the prior art, as additional peripherals such as the PCMCIA expansion slots or sockets  and , are added to the system, an additional interface board  must be coupled to the motherboard  to serve as the interface and control communications between the PCMCIA expansion slots  and  and the bus . Bus  has a differing number of address and data lines as compared to the PCMCIA address and data line requirements. Data transfers across bus  are at a different rate than the data transfer to a PCMCIA card. Other control signals are also required at the PCMCIA interface in order to adapt to the various needs of differing PCMCIA cards that may be inserted. Thus the PCMCIA interface is very flexible and the PCMCIA adapter  is used to interface differing data and address line requirements having different transfer rates between the system bus  and PCMCIA cards  or . The interface boards  and  are typically coupled to the motherboard  by inserting them into receiving slots on the motherboard . Because there is limited space within the computer system case and the number of receiving slots on the motherboard  is also typically limited, only a finite number of interface boards can be coupled to the motherboard , thus restricting the number of peripherals which can be coupled to the computer system  at any one time.","hi , a single cable  is coupled between the PCMCIA host adapter board  and the two PCMCIA expansion slots  and . Cable  carries signal lines to support two PCMCIA expansion slots  and . The cable  is coupled to the connector  and to the connector  on the PCMCIA expansion board . The connector  is coupled to the PCMCIA host adapter  by the busses  and . The connector  is coupled to a termination or buffering circuit  by the bus . The termination or buffering circuit  is coupled to the first PCMCIA expansion slot  by the bus  and to the second PCMCIA expansion slot  by the bus .","The disk drives  and  illustrated in  are ATA (Advanced Technology Attached) hard disk drives, but the disclosed security system is not restricted to any particular controller structure, and the security system can be used with other controller systems (i.e. Ultra ATA, USB, Apple DOS, etc.). The ATA controller is used here only as an example. ATA hard disk drives may also be commonly referred to as IDE (Integrated Drive Electronics) hard disk drives. ATA is a set of standards and specifications used for communications between disk drives and host central processing units which defines an integrated bus interface between disk drives and host CPUs and provides a common point of attachment for system manufacturers, system integrators and suppliers of intelligent peripherals. The ATA standard interface having 40 total lines, includes a three-bit address bus designated as DA, DA, and DA used for indexing drive registers; a 16 bit bidirectional data bus designated as DD through DD; a data width format signal designated as IOCS16-indicating either an 8 or 16 data bit capability, a write strobe signal designated as DIOW-; a read strobe signal designated as DIOR-; an interrupt request signal INTRQ, a status signal I\/O Channel Ready designated as IORDY, and host chip select 0 and 1 signal lines respectively designated as CSFX- and CSFX-. The two host chip select signal lines CSFX- and CSFX- which act similar to an address line, select access of either Command Block registers or Control Block registers within an attached ATA disk drive. Other signals present within the ATA standard interface that may be significant to the description of the present invention will be described below.","The disk drives  and  may be designated disk drive  and disk drive  by the ATA cable connection for the ATA standard interface signal CSEL (ground=drive , open=drive ) or by setup switches or jumper wires within the disk drive electronics that are read upon reset. Only one of the disk drives  or  connected to the same ATA cable  can be accessed at any one time. The selection of whether disk drive  or disk drive  is to be accessed is controlled through use of the drive\/head register which is embedded in each disk drive. Both disk drives  and  simultaneously respond to writes on the cable to the drive\/head register, however only the selected drive will respond to writes to other registers therein. Bit  of each drive\/head register, designated DRV, is used to select the drive that should be active to receive the other drive register accesses and is compared by the drive with its CSEL or switch\/jumper configuration as drive  or drive . If the host CPU sets DRV to zero then drive  is selected and further register accesses are to drive  registers. If the host CPU sets DRV to one then drive  is selected and further register accesses are to drive  registers.","Accesses to the disk drives occur during read and write cycles. Note that during all ATA read or write cycles either a CSFX- or CSFX-signal becomes active. Activation of CSFX- or CSFX- is then followed by either DIOR-active low signal or DIOW-active low signal. If neither CSFX- nor CSFX- is active then no write or read operation is being performed to the disk drives regardless of the condition of other signals on the ATA cable  including DIOR- and DIOW. Generally, the disclosed storage security system will detect access to read or write to disk drives  and  before CSFX or CSFX is activated, either in software or hardware. Detection can occur when an application requests an interrupt to access one of the disk drives, or performs a call to a operating system subroutine that can access the disk drives. A program may also try to access the disk drive directly, in which case, if no other detection has occurred, the security system would identify the program requesting access either through CSFX or CSFX or other identifiable signal common to accessing the disk drives.","If a read or write host CPU transfer cycle to or from the ATA drive needs to be extended, then the ATA drive de-asserts the IORDY signal inactive low. This indicates that the selected hard disk drive needs further time to complete the present operation before any other operation may take place. Otherwise IORDY is pulled up to an active one or an active high level by a pullup resistor.","The ATA standard interface is not compatible with the PCMCIA standard interface in that a PCMCIA device cannot be coupled to a system through an ATA port, even if the differing connector types were not a problem. Correspondingly, a user cannot couple a standard ATA device, such as the disk drives  or  to a system through a PCMCIA port. However, there is a method of interface described by the ATA SFF (Advanced Technology Adapter Small Form Factor) committee to connect ATA devices packaged in a PCMCIA form factor to PCMCIA socket connectors. This allows an ATA disk drive to be mechanically arranged into a PCMCIA card form factor and designates how the ATA signal lines may be arranged within the card's PCMCIA connector. However, the ATA SFF interface to a PCMCIA socket connector does not support system identification of installed drives and will not work for devices other than ATA SFF packaged disk drives. Due to the limited applicability, the ATA SFF interface method is not supported in many machines which offer PCMCIA card support. For the reasons discussed above, it may be preferable to use the more flexible PCMCIA standard because it can interface to a wide variety of peripheral devices including a disk drive interface and because it simplifies the interface.","In , the disclosed folder security system is added to the otherwise typical computer motherboard . Folder controllers  and  (disclosed security system) are added to the hard drive controller  and PCMCIA controller  respectfully. Both controllers  and  provide the same address mapping function during write and read functions, when writing and reading a specific file, respectfully. Controllers  and  determine (identify) the actual specific program and\/or program thread requesting the write (save) or read (load) function, and then determines the storage folder address (directory address) where that specific program and\/or program thread is stored (specific program storage directory address on one of the ATA DRIVEs or PCMCIA CARDs). This level of abstraction is placed between the real folder address requested by the specific program and the actual folder address (Absolute Folder Address) used by the storage device to store the specific file. Thus, neither the program requesting the write and read function nor hard drives  or  nor PCMCIA controller  need be aware of the Folder Controllers' (FC) actions, folder controllers  and  are substantially hidden logically from them. Folder controllers  and  provide a mapping function for the write and read functions, creating a bidirectional virtual directory map (Program Directory Address Map), which depends on the specific program's storage folder address and its relationship to the storage folder address of the specific file being accessed in storage memory (i.e. hard drive, floppy, CD-RW, PCMCIA card, etc.). If the specific file's folder address is within the specific program's storage folder (Absolute Folder Address) then no mapping is needed and the file is simply written, or read, to or from, the requested folder address. If the specific file's folder address is outside the specific program's storage folder (not in specific program's folder or subfolders and\/or specific file not associated with specific program), then an alias folder address is created and\/or accessed to write or read the specific file. Thus, whenever that specific program tries to read or write the specific file in the future, the alias version of the specific file (alias file) at the alias folder address will be used instead. Other programs, when trying to access exactly the same specific file and folder address (Real file Address), may not be directed to the specific program's alias file, but instead go to the original (real) specific file address, or its own alias folder address for the specific file or alias file. Thus, each program may create its own copy of a particular version of the specific file if it tries to write it outside that program's own folder directory (folder and\/or subfolders), but retrieves its own copy of the saved alias file as if it were written in the folder requested by the program. Thus, to the program, everything appears normal. Note the hierarchical directory structure on most computers and used here to provide the hierarchical mapping of files and folders (real and alias), is purely convenience and other association scheme can be used to identify specific folder and specific file groups. Specific files written by a specific program could be marked as associated with that specific program, independent of where it is stored. This is much like the three character extension on file names used by programs to identify there own files. However, for this disclosed security system, files marked as associated with the specific program, can not be changed by other programs so they are securely and permanently associated with the specific program.","The only difficulty arises with this folder mapping system, when more than one program needs to modify and\/or to access a particular file (executable or passive). In this case, one does not want each program to have its own copy of the file or program being written or loaded. This is easily controlled by simply placing programs that are going to use the same files in the same folder or directory (associated with each other). Then all the programs can access and change the same set of files. Another way to deal with multiple program access, is to create a controller program in the main folder and place the programs in subfolders within this main folder. Then the controller program in the main folder can be used by all the programs in its subfolders to control all saving and loading of files. In this way only one copy is made since the controller program is always the program doing the saving or loading. Another way to solve the problem of multiple program access is to designate a folder as NON-EXECUTABLE, where the folder controllers would disallow any file to be written that could be executed by the computer's operating system (i.e. .EXE, .BAT, .COM, etc.). A more secure way to do the same thing is to mark the NON-EXECUTABLE folder so that folder controllers  and  will allow loading of files within the folder, but not allow the computer CPU to actually execute the file as code.","An alternative arrangement for the folder security controllers  and  can be to replace them with folder security controller  and data controllers  and . The operation of controllers ,  and  is the same as controllers  and  except the folder address location is mapped after leaving the standard computer ATA, PCMCIA, etc. controllers. Controllers  and  provide information to controller  which determines the mapped folder address to write the information to. This can be done on the motherboard by data lines ,  and , as shown in . Alternatively, data lines  and  may go to data controllers (not shown) within drives  and , and\/or PCMCIA controller , respectfully. If this is done, the requested save (write) and load address(es) can be modified within hard drives  and\/or , and\/or within PCMCIA controller , with only the folder address of the program requesting the write or load needing to be sent to the hard drives and\/or PCMCIA controller .","When a specific program makes a request to access (save, load, list, etc) a file or folder, a specific folder address and\/or specific file address is sent to the hard drive controller . At the same time folder controller  receives a signal from the computer logic core that a program has requested access to hard drive  in this example. If the request is simply to list the contents of a folder, the folder controller  can list the contents of absolute folder directory  (see ) or the alias folder map  contents depending on which program made the request. If the disk access request is to save, load, cut, copy, paste, modify or other commands requiring write access, then folder controller  identifies the specific program making the access request, and compares that program's folder address to the address of the specific folder or file being accessed. Note that several functions require write access to operate, such as, save, modify, paste, cut, move, delete, rename, and other commands. The folder security controller would be activated with all of these commands, including load commands, to determine and control which directories to write files in or load files from.","In , we see one possible way of setting up the data mapping scheme for folder controller  in . (Folder controller  is constructed in a similar manner and would be called upon when a nonvolatile storage device is plugged into the PCMCIA slot. When other non-storage PCMCIA devices are plugged in, folder controller  would be inactive). Hard drive  is a standard (typical) hard drive operating under standard prior art protocols. For prior art computer systems, absolute folder directory map  is typically identical to requested folder directory map . However, with the addition of the directory security system, an additional logical folder map layer (i.e. maps  and ) is added. Absolute directory map  is shown within hard drive  (long-term storage device) in , but could be stored elsewhere if desired. Map  can be stored on the physical platters  of the hard drive, or on protected nonvolatile memory within hard drive . Map  can also be stored in protected nonvolatile memory on the computer's motherboard or other secure location. A copy of map  can be transferred to the computers random access memory (RAM, see ) during operation, to allow the operating system and\/or security controller  rapid access to its information. Request folder Address map  is the folder address map that programs running on the computer see and in prior art systems would essentially be absolute folder directory map . However, in this example, a logical folder maps  and  are placed between absolute folder map  and requested folder map . Depending on which \u201clogical folder map\u201d security controller  chooses, the file being written or loaded will be mapped differently. Folder controller  can be based entirely in hardware, entirely in software (using present day hardware), or a combination of both. Putting at least some functions of folder controller  in hardware will help secure its resistance to viruses, worms and other malicious programs. Folder controller  would also have its own dedicated memory space on the hard drive, or elsewhere, which only it can access. Folder controller  can also have dedicated RAM to store active program map , and other information that is not accessible to CPU . Controller  also is able to collect address information from the logic core (operating system, hardware logic, etc.) about the program memory block being executed in memory when the access to drive  or  was requested. Specifically, folder security controller  may use memory address information  from CPU  and core logic  to determine the program requesting access, by looking it up in directory map . The memory location information in  and\/or  may also contain additional table information about previous program call addresses to determine what applications called for the execution of the program at address  (04C7). With this information, controller  generates either a real folder address map  and an alias folder address map  depending on the program making the access request and the folder address of the file being accessed and the type of access request made. From this address , the specific program's making the access request (load, write, etc.) can be determined. The Absolute Folder Address for the program (i.e. \u201cC:\\Virus\\bad.com\u201d) can be determined by comparing address  with a list in RAM Memory blocks map  to determine the specific program (program entry  in this example), which made the access request. From entry , the security controller  can obtain the specific program's folder address (\u201cC:\\Virus\\bad.com\u201d in this example) to use in generating the alternative address map  (alias folder map) for that specific program and specific access request. Table  is continually updated as programs are moved around in memory.","Alternatively, controller  may simply keep track of the presently executing program and then using its directory address if it requests access (load, save, delete, modify, execute, etc.) to storage memory. Much of this information is already tracked by logic cores that provide multitasking operating systems. However, the actual processing needed, to determine the specific program's folder address, can be done all in software, all in hardware, or a combination of both. Once a Real map  and an alias map  are generated, the logical folder map is ready to be used by Security Controller  to select the correct absolute folder directory address from map . Map  is then used to map the access request to logical memory address map , which maps to the actual physical memory sectors on hard disk platter .","Hard drive  can be a standard prior art drive, but may contain folder security controller hardware for security that is more difficult to compromise. The physical memory disk  comprises memory storage cells (i.e. , , etc) within many tracks and sectors. Storage cells -are often called sectors. Logical memory map , lists memory cells (sectors) used for a given specific file and maps the file onto physical memory disk . Alternatively, map  may contain only the first sector for the specific file, with the second sector sequentially identified by the first sector, the second sector identifying the third sector and so on until the entire file is read or written. Absolute folder directory map  stores the relationship between the absolute directory structure and the listing of logical memory addresses in map . Both absolute directory map  and memory map  can be stored on disks  in a secure section of the disk. On a real hard drive and operating system, for example, the Windows NT File System (NTFS) used in Windows NT, Windows 2000 and Windows XP may comprise maps  and . Similarly, on another system Logic Address map  may be the FAT32 Allocation Table used in earlier Windows Operating Systems.","In , we see one example of a computer system using the disclosed invention. Prior art computer motherboard  is used along with its CPU , input-output bus (I\/O) , and random access memory (RAM) . Hardware directory security controller  (security controller), and software directory security controller  can be used separately or together to provide security. That is, the security control system can be based entirely within hardware for absolute security, or completely in software operating on the computer, or any combination of both. The security controllers  is logically connected between computer CPU  and hard drive . Note that this is a logical connection not necessarily a physical one, since a hardware security controller can be placed on the system bus and control I\/O  from there.","Computer  is shown in a very simplified form, comprising a CPU , a I\/O controller, and a high-speed random access memory (RAM) . Non-volatile memory  is a hard drive in this example because it is presently the most common form of non-volatile storage for computers because of its relatively fast transfer speeds, and relatively large storage size. Security controller  can be designed for any storage device not just hard drives. Both volatile or non-volatile storage devices can be used, since the security controller operates above the awareness of the storage device, and only modifies the relationship of a file being written with respect to other directories or folders. Similarly, I\/O controller  also does not need to be aware of the operation of security controller . For I\/O , security controller  appears to \u201cbe\u201d hard drive . The modification of files being written is coordinated by the security controller's ability to detect the original directory of the program and\/or program thread that made the \u201cwrite request\u201d on hard drive . This directory information can be designed to come through data lines  from the I\/O . Optionally, the \u201cwrite\u201d requesting program can be obtained directly from the CPU address lines to determine the address pointer's location at the time of the write request. In this way, the security controller can determine which program and\/or program thread is operating in that memory space, and thus, the directory (folder) it resides in on hard drive . The tables for determining which program from the address pointer and for determining the directory for that program is created and stored within directory controller , and\/or within a secure memory location on hard drive  and\/or within secure memory on motherboard .","In , security controller  is shown physically between I\/O  and drive  to illustrate the added logical layer of directory mapping. Data lines  connects hard drive  to security controller , and data lines  connect security controller  to hard drive I\/O controller bus . Data lines  and  can use wired or wireless communication means in any of the many way of transmitting data between the components, including serial, parallel, and other data transfer protocols. For practical purposes this complete separation of the security controller  from motherboard , makes it possible to have security controller  to be physically part of hard drive . In such a case, the hard drive would be providing all the security control, but would require a connection to the motherboard (hard wire or software) to identify the program making a \u201cwrite\u201d request.","Alternatively software directory security controller  can be used to provide directory mapping for hard drive . Such software would need to be placed in a secure memory location such as part of the operating system's disk operating system (DOS), config.sys program, or other lower-level protected program. Through software, \u201cwrite\u201d requests would be processed and the correct \u201cRear\u201d directory address sent to prior art I\/O  and on to prior art disk drive . Software would also determine the folder address of the \u201cwrite\u201d requesting program so it can properly direct the file being written to the correct folder address. Hardware controller  would not need to exist in any substantial way. Of course, the directory security system can consist of a combination of hardware and software components to provide the level of security desired.","There are many other ways controller  and  can determine which program thread makes a \u201cwrite\u201d request. For a less secure system, program determination can all (or mostly) be done in software. The lower the level of software control for identifying the presently executing program, the more secure the system can be. Specific lower-level program(s) can be installed on the computer to manage all processes including Microsoft Windows (MS Windows), Lenix or other operating system, or built into the operating system itself. For the DOS and DOS based Windows operating systems, this control may be done by the lowest level program io.sys, or the next lowest msdos.sys however, such controls would typically be given to the program config.sys which normally can not be changed by the command line without updating the file on disk and rebooting. For non-DOS based Window other similar programs would be used to provide program execution identification. For example, in Windows NT the operating system kernel ntoskrnl.exe can be used to provide lower level program identification and program folder identification. Similar programs exist in the newer windows operating system that can be used to proved relatively secure identification of the presently executing program's nonvolatile storage folder (program's folder address on hard drive). Another alternative is to place the security controller within the hard drive controller itself so directory mapping (folder mapping) is done on the motherboard (see ). For operating systems which use \u201cVirtual Machines\u201d to execute programs, a \u201cwrite\u201d request by a specific program can be identified by observing what program memory block was being fed to to the \u201cVirtual Machine\u201d at the time of the long-term storage access request. A \u201cVirtual Machine\u201d can use a hardware storage solution for memory block identification by storing the Application Programing Interface (API) files USER32.DLL, GDI32.DLL and KERNEL32.DLL in ROM, or other secure memory. Memory allocation can also be made secure by securing the Master File Table (MFT) in a protected memory location, where the operating system itself can not access it directly.","There are may ways security controller  can identify the folder address of the program thread currently being operated on. For the sake of time I will only discuss a few. First lets discuss CPU operation. Modern-CPUs use two or more cashes to store programs being executed. Level 1 and Level 2 cashes are often on the CPU chip itself. Thus, to determine which program thread is being executed at any given moment, the CPU can identify which memory block it is working on. This memory block information can then be sent to security controller  through the data\/address bus , through I\/O  and data connection . Controller  would keep a directory of programs loaded from memory  and their memory block location. When a \u201cwrite\u201d request is initiated (CPU addresses a specific memory location where the \u201cwriting\u201d program resides), the security controller would determine which program thread made that request by identifying the presently executing program. Once the program thread is determined it is a simple matter to provide a file directory map to determine where the program's folder is located on disk . Several different directory tables may be maintained within security controller  or stored in a secure portion of drive  which only security controller  has access. An alternative way to determine the program making the \u201cwrite\u201d request is to hard wire CPU  to output a signal to security controller  through data line  whenever a \u201cwrite\u201d request is accessed by a program. Then security controller only needs to know which program thread is presently executing. Some software control is still needed to determine which program is being executed, but can be less than is needed for an I\/O only control. Another alternative is to connect the security controller directly to the CPU's data and address bus  (see ) so that it can actually control the multitasking of programs and program threads. If security controller  is controlling program multitasking then it can easily determine which program thread is currently being executed.","In , we see a computer system where the security control is done completely in hardware. The programs and operating systems being executed on motherboard , operate normally, and are for the most part oblivious to the effects of security controller . Folder address capture circuit  and input\/output ports  are hardwired into the motherboard to monitor movement of memory blocks by the motherboard systems through their direct connection to the computer's system bus . Having everything hardwired means that software problems do not effect the security of security controller . However, programs must follow certain protocols to operate properly in this environment. The most important protocol, is that all program threads which write files to storage, should save these files into the same directory as the program or one of its subfolders. If a program tries to write files outside its own directory, the security controller will requires authorization for the program to write files in other folders. During installation of the program, the user can be given the option to allow permission to write in specific folders, but these permissions require verified user response, such as, a mouse click or keyboard stroke. This is to prevent sinister programs (malicious programs) from saving files into unassigned folders without the user's permission. If the write request for a file is not allowed, then security controller  will write the file in an alias directory, which the controller will load back to that program the next time the program tries to load that file even though the file is in a different alias directory. The controller recognizes which program is making the request and gives it back the files it has previously saved. The program thinks it is saving and loading the file to and from requested folder address, but is actually saving and loading from a secure alias folder. Another protocol is that multiple programs that write and load a particular file should all be located in the same folder or have a master program that can control the saving and loading for all the programs. This seamlessly allows multiple programs to share files and executable programs without opening their folder directories to the dangers of malicious programs.","For the system in , a solid state memory  is used for mass storage instead of a hard drive to show that this folder security system can be used with other long-term storage media. Just like with disk and tape drives, solid state memories can also be used to store information securely in a hierarchical filing structure. In this case, nonvolatile memory , could be a USB flash drive, or any other solid-state nonvolatile mass memory storage that uses a hierarchical directory structure. Memory storage  is connected to computer motherboard  by data line , security controller , and data lines  and . Motherboard  is essentially identical to motherboard  except for the addition of a hard wired program folder identifier . Folder identifier  provides hard wired access to information from the motherboard about the presently executing program, and may also have access to directory information on memory device  to determine whether the file being written is being saved in the folder or subfolders of the program actually making the write request. If the requested address is in the folder or subfolder of the requesting program, then the file can be written there to its real directory address. If not, then the security controller would map the file into a separate alias directory and create an Alias File there. The actual Absolute Directory chosen for the Alias file would depend on the program which requested access. For practical purposes this separate alias directory can be written into the requesting program's folder and include the full directory address of the real directory address of the requested file. Note that to other programs (applications) this alias directory may not appear at all (hidden). Thus, Alias files, in general, are only accessible to original requesting program or by a special program that can list all Files (Absolute Directory) on the long-term storage device. The security controller would map the \u201cReal File Address\u201d requested by the program to the appropriate alias files as if it were the \u201cReal File Address\u201d. This file data can flow through data line(s)  from I\/O bus  to security controller . Controller  can be physically mounted on motherboard , within solid state memory , or somewhere in-between. Security controller  can also have direct access to RAM memory  if desired, though I\/O  provides this function also. Security controller  can also have direct access to CPU , to coordinate execution of programs and\/or stop a process when a \u201cwrite\u201d command has been detected.","The reader should note that there is an almost unlimited number of ways the computer system in  can obtain directory address information about an executing program and can routed data between the CPU , RAM memory , and nonvolatile storage . Since the relevant data can be obtained from nearly any component connected to the motherboard's data bus, there exists many combinations of components that can be used to collect program directory information. Special tables can be created to match the random access memory (RAM) address of the program making the storage device access request, with the program's absolute directory address from where it was loaded (see table  in ). With so many system components on modern day computer motherboards, many paths exist for obtain and transfer information needed by the security controller. Furthermore, additional components can be added and combined to provide the directory address of the program making the access request. Thus, the folder directory address of the presently executing program can be obtained and transmitted to nonvolatile memory in an almost endless number of ways.","In , we show the disclosed computer security system designed into the motherboard of each system. In , the entire directory based security system is done in software and motherboard  is essentially a prior art motherboard. In , we see the other extreme where the entire directory based security system is configured in hardware and the operating system execution is essentially unchanged from prior art software configurations.","In , we see computer motherboard , connected by hard drive cable  to a typical prior art hard drive . Motherboard  is also essentially prior art in this example with a hard drive controller  connected to cable  and to system bus  by data lines . As with most motherboards, system bus  is connected to other components, with only CPU  and RAM  shown in . The entire folder security controller system is executed in software memory block  stored in RAM  through its connection  to system bus . Software  is shown separate from RAM , but in typical motherboards, can be in the same RAM  that operating systems and programs are stored. Software  can also be stored in ROM memory, or even as part of the BIOS memory for the motherboard. Security controller software  can also be loaded from hard drive  upon booting of motherboard  and organized as one of the operating systems lower level programs. Software  would provide identification of programs and their folder address on drive , which request access to hard drive controller . Software  would also maintain the directory structure on drive  and generate alias addresses for files that need them. All the security functions can be in hardware (ROM and\/or BIOS and\/or other hardware logic) to provide the maximum security. If the security functions operated, at least partially in software, then greater security can be implemented in a secure, lower-level operating system software component, such as, \u201cio.sys\u201d, \u201cconfig.sys\u201d, or be the lowest-level operating system component. It such software can protect itself from malicious programs by strict control over its own memory space.","In , we see computer motherboard , connected to hard drive  by cable . Motherboard  is a modified design that includes a hard wired folder security system connected to system bus . Unlike motherboard , motherboard  implements all folder security in hardware instead of software and operating system  is essentially unchanged compared to prior art operating systems. This provides a more secure operating environment that a system with software components that can be corrupted. In this example, hard drive cable  connects to hard drive security controller , where controller  is integrated directly into the system bus . Controller  may also have other components such as, memory management hardware , and program folder identification hardware  to provide specific functions for controller . In this design, controller  includes the normal disk drive control circuits for driving hard drive . In many systems data lines  may be the only connection between controller  and the rest of the motherboard. However, in many instances it is advantageous to break up the work load and collect data from other components on the motherboard. A few examples of these other data and control paths are shown on motherboard . Folder identifier  can have direct access to CPU  and hard drive controller . Memory management hardware  can have access to RAM  and operating system  within it. Management hardware  can also have direct access to security controller  and system bus , and may also have access directly to the CPU and folder identifier . Hardware , can also be part of the motherboard BIOS and\/or other ROM program. Data and control can thus be transferred between all the hardware systems as needed to protect the folder directory on drive . Folder identifier  and management hardware  help security controller  to identify the folder address on drive  of programs being executed by CPU . Specifically, identifier  and controller  can help determine the folder address of programs that request access to hard drive  for either saving, loading, listing, deleting, modifying, etc.",{"@attributes":{"id":"p-0095","num":"0127"},"figref":["FIGS. 6A through 6D","FIGS. 7A-7D"]},{"@attributes":{"id":"p-0096","num":"0128"},"figref":"FIG. 6A"},"In , we see a MS Windows folder directory with a root directory \u201cHARD DRIVE (C:)\u201d and several folders and files within this root directory. The folders \u201cWINDOWS\u201d and \u201cWINDOWS BACKUP\u201d are both within the root directory along with programs \u201cWIN.COM\u201d, and \u201cWINFIX.EXE\u201d and other files and folders. To take advantage of the disclosed security system functions, this Windows program operates slightly differently than normal. The file \u201cC:\\WIN.COM\u201d in the root directory is executed first. \u201cC:\\WIN.COM\u201d is a small low-level program that provides basic file control and movement of information between subfolders within the root directory. \u201cC:\\WIN.COM\u201d is a very secure program an may be restricted by the security controller from being overwritten even when requested from a file within the root directory. \u201cC:\\WIN.COM\u201d may not have any disk drive read and write capabilities of its own, but can transfer those requests to other programs within the \u201cC:\\WINDOWS\u201d directory. The \u201cWINDOWS BACKUP\u201d folder is an extra folder provide specifically for the disclosed security control system. The \u201cWINDOWS BACKUP\u201d folder may have restricted access where no unauthorized changes may be made to its folder, files or subdirectories. Additional restrictions can include on folder \u201cWINDOWS BACKUP\u201d so that only the program \u201cWINFIX.COM\u201d can access it. \u201cWINFIX.COM\u201d would be a simple program with the only purpose of reinstalling Windows operating system. The \u201cWINDOWS BACKUP\u201d folder may contain a complete copy of the \u201cWINDOWS\u201d directory (actual or compressed) so that \u201cWINFIX.EXE\u201d only needs to load the files in \u201cWINDOWS BACKUP\u201d and copy them to the \u201cWINDOWS\u201d folder. The Windows folder would contain essentially the Windows operating system that normal Windows OS would include. Windows OS would operate from the \u201cWINDOWS\u201d directory with only programs \u201cC:\\WINFIX.COM\u201d and maybe the \u201cC:\\WIN.COM\u201d and\/or other root directory program able to modify files in the \u201cWINDOWS\u201d folder.","In , we see a modified WINDOWS folder opened up to show its internal structure (many folders and files not shown for reasons of space). The folders, \u201cAll Users,\u201d, \u201cApplication Backup\u201d, \u201cApplication Data\u201d, and \u201cApplication Execute\u201d are shown within the \u201cWINDOWS\u201d directory. The \u201cWIN.COM\u201d program is the only program shown in the \u201cWINDOWS\u201d directory, the rest of the files are not shown because they are further down on the list. The \u201cC:\\WINDOWS\\WIN.COM\u201d program in this example is similar to the \u201cC:\\WIN.COM\u201d program shown in  and is only a small control program that loads and runs \u201cC:\\WINDOWS\\Application Execute\\WINEXE.EXE\u201d which is the actual Windows OS. The \u201cAll Users\u201d folder performs the same function as it does in present Windows operating systems. The \u201cApplication Backup\u201d is a redundant backup within the \u201cWINDOWS\u201d directory that the program WIN.COM can access to restore lost files. Note that this not absolutely necessary since the \u201cWINDOWS BACKUP\u201d folder can restore everything. However, it is shown here because other programs may use this type of backup for their program applications.","The \u201cApplication Backup\u201d folder may be made a \u201cNon-Executable Folder\u201d and\/or a \u201cRead-Only Folder\u201d (which would not allow additional executable files, and\/or files in general, to be written to it or allow any executable file to be run (executed) from that folder). This would provide an additional layer of protection for the \u201cApplication Backup\u201d folder and similarly for the \u201cWINDOWS BACKUP\u201d folder's contents. Even if control of WIN.COM and\/or WINEXE.EXE programs are lost to a malicious programs, damage to the \u201cWINDOWS BACKUP\u201d folder is prevented because the folder itself is designated a \u201cNon-Executable Folder\u201d and\/or \u201cRead-Only Folder\u201d which the hard drive itself can refuse to write to without significant authorization from, and warnings to, the user.","In , the \u201cApplication Data\u201d folder can be used to store data for the WIN.COM program or other files. The \u201cApplication Execute\u201d folder is used to hold the actual Windows operating system that is normally placed in the WINDOWS folder root. Here however, WINEXE.EXE is executed from the \u201cApplication Execute\u201d folder so that all write disk access is limited to that folder. So that any malicious program that does find its way into the \u201cApplication Execute\u201d folder can only modify that folder. The SYSTEM folder within the \u201cApplication Execute\u201d folder can be marked as a secure folder that the folder security system will not change or add any files or folders within it without significant user involvement, such as, passwords, external device input (i.e. security device input, mouse click to confirm, keyboard confirmation, etc.), or other user authorization. Thus, folder security, prevents programs from outside the SYSTEM folder from changing it even if the C:\\root directory is compromised or the WINDOWS directory the SYSTEM files can still be protected from being written to on the hard drive (or other memory storage device). The files within the SYSTEM folder however, may include the ability to change themselves, or one file within the SYSTEM folder can have the ability to modify files. Alternatively, the security system may restrict all modifications to the \u201cWINDOWS\u201d folder except for a particular subdirectory (i.e. folder \u201cApplication Data\u201d).","In  the TEMP folder can be a \u201crestricted extension\u201d folder, where only a particular type(s) of files are allowed. For example, temperary files that MS Windows may generate can have a particular file extension \u201c.TEMP\u201d and this can be the only file type that is written in the TEMP folder. Further, only certain MS Windows' program threads could be allowed to write to the TEMP folder (Protected Folder) to provide added security, so that unauthorized programs can change information within the TEMP folder even if they should get written into the TEMP folder. Notice that these types of folder restrictions are even more useful for security when the rest of the nonvolatile memory is secured according to which program thread initiates the write request.","In  we see the Outlook Express program \u201cC:\\Program Files\\Outlook Express\\msimn.exe\u201d in its normal location within the \u201cOutlook Express\u201d folder. However, the \u201cmsimn.exe\u201d program could be only a control program that then runs the actual Outlook Express program \u201coutlooksys.exe\u201d in the \u201cApplication Execute\u201d folder. The \u201cApplication Execute\u201d folder would contain the programs, files and any changeable files within it The \u201cOutlook Express\u201d folder can comprise folders \u201cApplication Backup\u201d, \u201cApplication Execute\u201d, \u201cInbox\u201d, \u201cOutbox\u201d, \u201cSent\u201d and temporary folders for running downloaded executable files that enter through an email. A simplified Internet Explorer or Netscape program could be saved in the Temporary folders Temp Run 0001, Temp Run 0002, etc. which would open and execute the needed programs and control files needed to open email attachment or programs. The Temp folders themselves can be marked as a Safe-Folder where that folder takes responsibly for all programs accessed through a program executed from in the Safe-Folder. The folder security controller would use the Temp folder (Safe-Folder) as the default folder and writing all files to it, independent of which program under the Temp folders execution tree makes the write request. For example, when \u201cTemp Run 0001\u201d is created it is marked by the security system as a Safe-Folder, and an email and its attachment(s) are written to the folder. The management program in the \u201cTemp Run 0001\u201d folder is executed by Outlook Express, and this management program reads the email and attached files and determines which programs need to be executed to view the email and attachments, and executes those programs. The Folder security system at this point identifies the \u201cTemp Run 0001\u201d as being the program that is taking responsibility for these other programs executed by the management program. Thus, if one of these other programs tries to write a file to a storage drive directory other than the \u201cTemp Run 0001\u201d folder, it will be mapped back to the \u201cTemp Run 0001\u201d and placed in an alias folder. Which will be accessible by all the programs executed during the use of the \u201cTemp Run 0001\u201d folder. The \u201cInbox\u201d, \u201cOutbox\u201d, \u201cSent\u201d, etc. folders can be designated as Non-Executable Folders which can store email in user files, which need to be loaded into another program for viewing or moved to another directory (i.e. Temp Run 0001) for execution.","In , we see the \u201cApplication Execute\u201d folder expanded to show the alias directory \u201cC:\\Program Files\\Outlook Express\\Application Execute\\C:\\WINDOWS\\SYSTEM\\\u201d for the file SYSTRAY.EXE. SYSTRAY.EXE has been written onto the storage device by the outlooksys.exe program. The C:\\WINDOWS\\SYSTEM\\SYSTRAY.EXE directory within the \u201cApplication Execute\u201d folder is identical to the real address of where the outlooksys.exe program tried to write the file SYSTRAY.EXE, but was mapped to the shown alias file address (C:\\Program Files\\Outlook Express\\Application execute\\C:\\WINDOWS\\SYSTEM\\SYSTRAY.EXE). This embedding of the original file address being saved as a folder hierarchy, is one way such information can be stored so that when the same program outlooksys.exe tries to reload the real program C:\\WINDOWS\\SYSTEM\\SYSTRAY.EXE, it can instead load and\/or execute the alias file: C:\\Program Files\\Outlook Express\\Application Execute\\C:\\WINDOWS \\SYSTEM\\SYSTRAY.EXE.","In , we see folder directories which use the disclosed folder security system. In these folder arrangements, programs executed from a specific folder can only write to subfolders of the specific folder. For example, In , the program file WIN.COM, in the WINDOWS folder, is executed from the windows folder and can only write to subfolders of the WINDOWS' folder (i.e. CONFIG, SYSTEM, etc.). By limiting write authorization to only the program's subfolders, the program itself is automatically protected by the folder security system. That is the program file cannot write onto itself or anything other file in the root folder WINDOWS. Thus, WIN.COM in  can actually be the MS Windows program and can be run from the WINDOWS folder and remain protected. This simplifies the folder arrangement compared to that in , which requires a separate MS Windows program WINEXE.EXE, to be executed by a control program WIN.COM, to protect the operation of windows. By not allowing programs to write to their own folder (only subfolders), this means a malicious program would need to get into the \u201cC:\\\u201d directory (root directory) to effect WIN.COM or WINFIX.EXE. If WINFIX.EXE is placed in the root directory and made a Read-Only File, and the WINDOWS BACKUP folder is made a Read-Only Folder, then external programs can not damage the Windows backup system. The hard drive folder security protects these files and folder, requiring user authorization. Obtrusive WARNINGS can pop-up on the computer screen if any program tries to write onto the WINFIX.EXE program or to the WINDOWS BACKUP folder. Such as:\n\n","Do you want to WRITE-OVER the existing file WINFIX.EXE?\u201d NO\n\n","At startup, the WINFIX.EXE in each of the examples in , can check MS Windows (WINDOWS folder) for any errors. If errors exist, or if extra files are in the WINDOWS folder, then WINFIX.EXE can load the backup files out of the Read-only folder WINDOWS BACKUP, and write them into the WINDOWS folder. Note that the folder security system does not hinder loading or executing of files in general, unless specific restrictions are applied to the program making the access request, the file being requested and\/or their folders.","In , the TEMP folder in the WINDOWS directory can be used to store operational files for all the programs within MS Windows. This can include files saved from programs in the SYSTEM or other subfolder of the WINDOWS folder. In order for this to occur, the program WIN.COM can be prompted by the other programs to save the files. Another alternative is to make the TEMP folder a Restricted-Folder that will only except files of a specific type and\/or by specific programs in specific folders. This adds another level of security to the \u201cTEMP\u201d folder by restricting file type, files and folders that can write to it.","In  we see a folder structure for the program MS Outlook Express. The \u201cOutlook Express\u201d folder is a subfolder of the Program Files folder, and contains the programs and folders necessary for its operation. The program msimn.exe is the main program file for MS Outlook Express an is located in the \u201cOutlook Express\u201d folder. Msimn.exe is able to write to all the subfolders in the \u201cOutlook Express\u201d folder so that it can manage email boxes and open emails and attachments in \u201cSafe-Folders\u201d (i.e. Temp Run 0001, Temp Run 0002, Temp Run 0003, etc.) where any write request by programs within the email or attachment, or programs executed by the email or attachment will map back to the original Safe-Folder as an alias file.","In , the \u201cALIAS\u201d folder in the \u201cOutlook Express\u201d folder is another example of how alias files can be saved. In this case, an \u201cALIAS\u201d folder is created in the same directory as the program making a restricted write access request. Then all alias files would be stored in the \u201cALIAS\u201d folder. For example, if for some reason a malicious program gained control of the program \u201cmsimn.exe\u201d in the \u201cOutlook Express\u201d folder it, could try to write to \u201cC:\\WINDOWS\\WIN.COM\u201d and gain control of Windows. However, the folder security system would recognize that the program \u201cmsimn.exe\u201d in the \u201cC:\\Program Files\\Outlook Express\\\u201d folder is the program making the write access request. Then because file address \u201cC:\\WINDOWS\\WIN.COM\u201d is not within a subfolder of the \u201cC:\\Program Files\\Outlook Express\\\u201d folder, they folder security system would map the file \u201cC:\\WINDOWS\\WIN.COM\u201d to an alias folder where it can be retrieved by the \u201cmsimn.exe\u201d program when needed by accessing the originally used file name \u201cC:\\WINDOWS\\WIN.COM\u201d. An example of such an alias address for this alias file might be as follows:\n\n","Other ways of identifying the necessary parameters for the long-term memory security system, comprising: 1) the folder of the program that requested the write access, and 2) the originally requested file address. The folder containing the program information is needed so that correct alias folder is used with that particular program or folder. The original file address is needed so that when the program attempts to reload a specific file it saved, the security controller can identify that specific file from other alias files saved. Thus, the complete original file address is needed to recover the correct file.","The program file OUTFIX.EXE is located in the Outlook Express folder and has special permission to rewrite the msimn.exe file if it should become corrupted on the storage device. Special error correcting data in storage device controlled memory can be used to determine if the data within the file has been corrupted, if it has been corrupted, then OUTFIX.EXE can then have authorization to correct the problem by copying the backup msimn.exe file (not shown) in the Application Backup folder. The OUTFIX.EXE program has normal permission to write onto all the subdirectories (subfolders) in the \u201cOutlook Express\u201d folder. But, in this example normally cannot write to the \u201cOutlook Express\u201d folder directly.","In  we see the folder \u201cMicrosoft Office\u201d in the \u201cProgram Files\u201d directory. Within the microsoft Office\u201d folder is the \u201cOffice\u201d folder that contains all the programs used in this suite of programs. The programs \u201cFRONTPG.EXE\u201d (FrontPage), WINWORD.EXE\u2033 (MS Word), \u201cwksdb.exe\u201d (Works Database), \u201cwksss.exe\u201d (Works Spreadsheet), \u201cmsworks.exe\u201d (Works Word Processor), could all be placed in their own subfolder with a master controller program in the \u201cOffice\u201d folder. However, this is not necessary, since in this example, these programs cannot write (save, rename, cut, delete, etc.) any information to the \u201cOffice\u201d folder (security controller limits writing files to only subfolders of programs). All these programs, however can write to the subfolders, \u201c1003\u201d and \u201cTemp\u201d (additional folders and files not shown for reasons of space). Thus, all the programs can share files by simply storing them in one of these subfolders where they can all write and load files to. Some restrictions can be used on specific files or folders to prevent problems between programs and also provide added security.","In , the \u201cMicrosoft Office\u201d folder contains a \u201cBACKUP\u201d folder and a \u201cOFFFIX.EXE\u201d program. The \u201cOFFFIX.EXE\u201d program would be executed to repair a damaged Office\u201d directory and\/or files, and be able to completely restore all the files in the \u201cOffice\u201d folder by copying them from the \u201cBACKUP\u201d folder. The \u201cBACKUP\u201d folder and a \u201cOFFFIX.EXE\u201d program could be designated as a Read-Only Folder and File, respectfully, to protect this data. External user authentication may be required to reload and\/or change information within this folder and file combination. Further, the \u201cBACKUP\u201d folder and a \u201cOFFFIX.EXE\u201d program could be made a write-once type of folder and file so there is even another level of security these folders and programs. Notice that the \u201cBACKUP\u201d folder can easily be placed anywhere on in the \u201cMicrosoft Office\u201d directory (folder), since it can be loaded and copied by program \u201cOFFFIX.EXE\u201d because its files would be in a subdirectory of \u201cMicrosoft Office\u201d. For security, all backup folders may be made \u201cread only\u201d by the security controller after initial installation of the Office Program and placed in the root directory to limit its exposure to malicious programs.","Flow Charts","In , we see eight logic charts shown as examples of the logic flow chart for a folder security system. On the writing mode decision flow charts (see , A, A, A), we see initial logic boxes  and , decision boxes , , and , and ending boxes , ,  and . On the loading mode decision flow charts (see , B, B, and B), we see initial logic boxes  and , decision boxes ,  and , and ending boxes ,  and . In these examples, the flow charts use folders (directory addresses) to describe the hierarchical relationship between files (data and programs) because it is a common hierarchical structure within modern computer storage devices (i.e. hard drives). The folder or directory structure itself is not what is important. What is important is the File's association with the write requesting program (and\/or program's address) and the requested directory address for writing the File. With these two pieces of information associated with the File, the security system can determine whether to load the requested file, or another Alias file. For example, the next time the same Program tries to load the File from its requested address the security system can determine if an Alias File exists for the requested File. If the Program has written (saved) that File previously, that saved File will be accessed by the security system, irrespective of whether it is a Real File or an Alias File. In general, it is desirable to also provide some form of hierarchical structure for this Program\/File association, but not necessary for providing security for the storage device, it is sufficient that the files written by a particular program can be kept separated from the files written by another program.","In , A, A and A, logic box  is the initiating box, which starts the flow chart logic, and can simply comprise a software program executing on the computer requesting access to a memory storage device (i.e. hard drive  in ) to write and\/or modify data or any other action that requests to change data on the memory storage device (write request). When a write request is initiated, box  sends a signal to logic box  activating it. Logic boxes  and\/or  can comprise a hardware and\/or software components (i.e. security controller  in , controllers  and  in , etc.) within a computer and\/or memory storage device. Logic box  is activated when the software program executing on the computer requests to write or modify (write request) a file or folder on the memory storage device. This write request is detected by logic box  and box  determines the requesting program's directory address in non-volatile memory (long-term memory), wherever it was originally loaded from. The location of the requesting program's directory address can be nearly anywhere, such as, on the C: Drive of the computer, other computer hard drives, a network drive, another network computer, a USB drive, from an Internet location, etc. Logic box  need only determine if the program's directory address is located specifically on a folder within the protected memory storage device. If the requesting program is from outside the protected memory (i.e. a network drive, Internet location) the security system logic  may decide to not allow any writing at all, since all attempt to write will result in alias files back to the originating storage device where the write requesting program was loaded from. Alternatively, such write requests may, depending on the program's permissions, be redirected to an Alias safe-folder or other less restrictive folders on the protected memory storage device. Each of the write access flow charts use these first two logic blocks to acquire information needed for the decision boxes further in the flow charts.","Write related decision boxes , , and  are all yes\/no decision boxes where a single condition is tested. Box  tests to see if the file being written or the folder it is being written to, is restricted from receiving it. If either the File or the Folder is restricted in some way from receiving write access, a \u201cYes\u201d output results and the ending box  is activated, which cancels the write request, or can jump to ending box  if desired to save the file in an alias folder, depending on the user's selected preferences. If neither the File nor the Folder is restricted, box  outputs a \u201cNo\u201d signal which activates decision box  in , and activates decision box  in . Decision box  tests to see if the File is being written to the same folder as the program making the write request. If the File is being written to the program's storage folder, box  produces a \u201cYes\u201d output which activates ending box  which writes the File at the requested address. If box  produces a \u201cNo\u201d, then box  is activated. Decision box  test to see if the File being written is going in a subdirectory (subfolder) of the storage folder of the write requesting program. If the File is being written to a subfolder (one or more levels down from the program's folder, but still within the program's directory address) of the program's folder, then a \u201cYes\u201d output results, and box  is activated, which writes the File to the requested address in the subfolder. If the File is to be written somewhere other than one of the program's subfolders, an output of \u201cNo\u201d results and ending box  is activated in these examples, and writes an Alias File into an Alias folder somewhere on the memory storage device, and associated the File's requested storage address (real directory address including File name) and either the program that initiated the write request, and\/or the folder address of the program that initiated the write request with the Alias File. Note that decision boxes , , and  can output to additional control boxes than those shown here and can actually go to other decision boxes for more complex control of the writing of files to the memory storage device. Also, boxes  and  can be easily combined into a single decision box as seen in , but are separated there to show that either could be used alone in the decision flow chart if desire. For example, box  is used alone in . Similarly, box  could be used alone in its own decision flow chart.","In , B, B and B, we see logic box  is the initiating box which starts the flow chart logic, and comprises simply a software program on a computer and\/or a hardware component within the security device which can detect a request for access to a memory storage device (i.e. hard drive  in ) to load, read, list and\/or execute (read request) a file and\/or folder (where no change is made to data on the storage device). When a load request is initiated, a is signal is sent to logic box  to activate it. Logic box  can comprise a hardware and\/or a software component(s) (i.e. security controller  in , controllers  and  in , etc.) within a computer and\/or memory storage device. Logic box  is activated when the software program executing on the computer requests to load or list (load request) the file on the memory storage device. This load request is detected by logic box  and box  determines the requesting program's \u201cabsolute\u201d directory address in storage, wherever it is located. The location of the program's directory address can be on a C: Dive, a network drives, a USB drive, from Internet locations, etc. Logic box  determine specifically the program's directory address and if it is located on a folder within the protected memory storage device.","For programs originating outside the protected storage device, an address must be used for the program's location. This address can be described in a number of ways, but must be identified in a consistent way, so that the same program is identified as having the same address location each time it is accessed. This consistency is needed so that Alias Files and Alias Folders are associated the same way each time they are accessed, whether reading or writing. In this way, an alias file stored by one program, can be correctly read later by the same program. For example, an Internet address can be described using its full domain address with each file and program having a unique domain address. An Internet address can also be described using the domain's IP number plus the folder address within the domain. Both ways can work, but only one way should be used on any one computer so that the mapping of Alias Files remains the same each time that Alias File (for a specific Program) is accessed. For local networks, the same is true, and the address naming system should be applied consistently for address identification purposes. For purposes of reduced complexity, the disclosed security system could use Windows addressing conventions to uniquely identify a file no matter where it is located on the Internet or local net systems.","Files and or Folder may have specific restrictions place on them by the security system. These restrictions can take many forms, and a few are discussed in the \u201cMODES of OPERATION\u201d section. Under normal operation, the security system will allow nearly any File to be loaded (read) and\/or executed without restriction. Even so, programs are trapped within their own directory (hierarchical position) by the \u201cwrite request\u201d security logic within the security system and function similar to that seen in , A, A, A, and . Each of the load (read) access flow charts discussed here will use these first two logic blocks  and  to acquire information needed for the decision boxes further down the flow charts.","Load (read) related decision boxes , , and  are all yes\/no decision boxes where specific condition(s) are tested. Box  tests to see if the program accessing the file being loaded (or the folder it is being loaded from), is restricted from retrieving it. If the File or Folder is restricted from retrieving it, a \u201cYes\u201d output results and the ending box  is activated, which cancels the load request, or activates other decision boxes depending on the user's selected preferences. If there is no restriction on the File or Folder, box  outputs a \u201cNo\u201d signal which activates decision box  in , and activates decision box  in .","Decision box  tests to see if the File being loaded by the requesting program has an Alias Folder and Alias File associated with it for that specific Real File Address. If the File being loaded has both an Alias Folder address and an Alias File for that requesting program, then box  produces a \u201cYes\u201d output, which activates ending box , which loads the Alias File from the Program's Alias Folder address. If the requested File does not have an Alias File in the Program's Alias Folder, then box  outputs a \u201cNo\u201d, which activates box , which loads the requested File from its real address (requested address). Alternatively, the Alias folder can be eliminated if information about the requesting program's address and requested File's address is associated with the Alias File so that it can be retrieved if it exists. This is easily done by marking an Alias File so it can be identified from the original and saving it in the requested folder directory. Such an Alias File must also include its association with the requesting program so that it can be identified as belonging to that program when being loaded. A table including this information can be used to provide these search and retrieve function to load the correct file.","Decision box  is very similar to decision box  in that both tests determine if the File being loaded has an Alias File that was previously written by the requesting program. However, box  specifically looks for the Alias File in the Program's folder directory. Since the Alias File is stored in the Program's folder directory it is thereby associated with that particular program making the request, but can also be associated with other programs within the same folder. The Alias File must also include retrievable information about its originally requested address (real address) so that decision box  can identify that particular Alias File as associated with the file being requested. This way the Alias File is associated with both the requesting program's directory address and the File's requested storage address (real folder address including File name). If the directory structure includes both the requesting program's directory address and the File's requested storage address, then all the information needed can be placed in the directory address of the File. This however can result in very long directory addresses which could cause problems. Thus, an alternate table (note that the directory structure is also stored as a table) containing all this information needed for any particular Alias File, comprising the Alias File's full absolute directory address, the Alias File's full real (requested) directory address, and the requesting program's absolute directory address. Thus, from the computers point of view, it loads a file from a real directory address, but that file can be an Alias File or a Real File, depending on whether it is associated or not associated with the file being requested. Note that decision boxes , , and  can output to different boxes than those shown here and can actually go to other decision boxes for more complex control of the writing of files to the memory storage device. Notice, boxes  and  can be easily used together to load Alias Files from the Program's folder, and\/or from a separate Alias Folder, depending on predetermined criteria when written to storage. The flow charts in , A, A, and A, would have to be modified to provide this Alias File separation. For example, when writing to a restricted folder, it may be desirable to places such File write requests in a more secure Alias Folder by themselves, away from even its own access requesting program's folder.","In , we see a flow chart of a folder security system that could be used in systems similar to those seen in , , , , A, B, A-D and A-C. Additional decision boxes are placed in this flowchart to show that many different modes and functions can be added to the basic flow charts seen in . In , operation of the folders security system starts when in box , a \u201cPROGRAM\u201d makes a request to save (write access) a \u201cFILE\u201d to a specific \u201cSave Folder\u201d. The term \u201csave\u201d is used here to mean any memory storage access where data on the storage device is changed in any way. Then in box , the folder security controller (i.e. controller  in ) captures the absolute folder address of the \u201cPROGRAM\u201d which actually made the request to save the \u201cFILE\u201d. This step is shown more clearly in  where controller  gets memory address  of the PROGRAM's request to save the \u201cFILE\u201d and uses that address to look up the PROGRAM's absolute folder address in program listing  on the storage device. The address information (i.e. listing ) is then used in decision boxes , and  to determine which path to take. Decision boxes , , , , and  may be decided without the need for the PROGRAM's folder address information. Decision box  may or may not need the PROGRAM's address information depending on how authorization to save in a folder is stored on the storage device. If the authorization information is stored in the Save Folder, the PROGRAM's folder address is not needed. However, if authorization information is stored in the PROGRAM's folder then the PROGRAM's folder address would be needed. The first decision box is box , which checks to see if the folder being saved to is restricted in any way. Box  can have other logical paths that cancel the save request entirely if the proper criteria is met. In this example box  checks to see if the \u201cSave Folder\u201d has a special restriction on saving. If it does, then one goes to box  and the FILE is saved in an Alias Directory, that is preferably in the PROGRAM's own folder or subfolder. If the \u201cSave Folder\u201d is not restricted, they system then goes to box  to compare it to the \u201cPROGRAM's Folder\u201d to see if the \u201cSave Folder\u201d address is within, or is the same as, the \u201cPROGRAM's Folder\u201d address. If the \u201cFILE\u201d being saved is in the \u201cPROGRAM's Folder\u201d then the system goes to box  and writes the \u201cFILE\u201d in the \u201cSave Folder\u201d. If the \u201cSave Folder\u201d is outside the \u201cPROGRAM's Folder\u201d then the system goes to box  to see if the PROGRAM is authorized to save in that folder. If it is authorized then the system goes to box  and writes the \u201cFILE\u201d into the \u201cSave Folder\u201d. If it is not authorized then the system goes to box . In box  the \u201cSave Folder\u201d is checked to see if it is a Non-Executable type of folder. If it is a Non-Executable folder and the FILE being saved is a Non-Executable file, then the system goes to box  and saves the FILE in the \u201cSave Folder\u201d. If the Save Folder or the FILE is not Non-Executable, then the system goes to box . In box  the \u201cSave Folder\u201d is checked to see if it is marked as a \u201cWrite-once\u201d folder. If it is, then the system goes to box  and checks to see if the FILE already exists. If the FILE exists then the \u201cSave Request\u201d is canceled in box . If the FILE does not exist in the \u201cSave Folder\u201d, then it is saved in the \u201cSave Folder\u201d in box . If the \u201cSave Folder\u201d is not a \u201cWrite-Once\u201d folder the system continues on to box , where the FILE is saved in an \u201cAlias Directory\u201d within the PROGRAM's own folder or subfolder. More decision boxes could have been used to provide additional types, or modes, of folder operations, but this example gives the reader a good idea of the types of logic schematics that are possible. Other possible decision modes are discussed in the section \u201cMODES of OPERATION\u201d.","In , we see a security system  connected between computer  and long-term storage device  (i.e. hard drive). Computer  and hard drive  can be standard present day systems. Hard drive  has a standard construction, with a drive controller circuit board  that uses a buffer memory  to allow delayed reading an writing to hard disc platters . No modifications are needed to hard drive  and it stores files as it would on any other computer system. The computer system comprises a ROM BIOS , a central processing unit , an ATA hard drive controller , a system bus , and a random access memory . More components are used in a real computer, but these suffice for our discussion.","In , we see security system  connected between computer  and hard drive , with data designed to pass through the security system as it moves to and from hard drive  and computer . Data lines  transport data to and from security system  and computer , while data lines  transport file data to and from security system  and hard drive . In some designs all the data needed by the security system can be sent through standard ATA data lines , but in this design, some security data is collected directly from CPU  and system bus . Data lines ,  and  can transport data to and from CPU , system bus , or other components on the computer. Generally data lines ,  and  will be one-way, transmitting data from the computer to capture circuits  and . Circuit  is designed to determine the identity of the Program that initiated access (requested access) to hard drive . Circuit  may also determine the directory address of the program through control circuit  and secure storage . Circuit  is designed to identify the File being requested by the Program.","Secure data can be stored in secure storage  during file loading or operation, can be used by logic box  to help establish and to double check directory address information on the Program and Requested File coming from circuits  and . Memory  can comprise a USB microdrive that would plug into an empty USB port on Computer system . Such a microdrive can also include an Encryption Certificate to provide further security for hard drive  by encrypting everything stored on the hard drive. In this case, the computer would use the USB Microdrive, with its encryption key, by inserting it into a USB port to unlock the hard drive and allow the computer to operate. A simple password encryption could also be used to prevent any other system other than the disclosed security system from writing directly to the hard-drive. The encryption can assure that malicious programs can not take back door routes to hack the DASS system components stored on the hard drive. Storage memory  may also store call tables for situations where a first application calls a second application to request access to hard drive . In such a case, it may be desirable to identify the first application as the access requesting program, even though the second (or third) application actually requests the hard drive access. This way applications can be associated not only with the requesting program, but also programs driving the requesting program. In most cases, applications will call subroutines within Windows OS (in RAM ), Interrupt Service Requests and\/or motherboard BIOS  functions to access the hard drive. These subroutines have known locations and logic block  can capture the program that initiates (calls) these subroutines to identify the actual program making the request to access hard drive . In this way, logic system  identifies the original application that requested access through the BIOS and Windows to access the File. In these cases, actual access requests to those locations in the BIOS or Window's routines can be considered the access request and logic  would capture the identity of the initiating program. Along with this information, logic block  captures the full FILE Address that the Program requested (Requested File Address or Real File Address). Both logic blocks  and  send their information to logic block , which compares the program's storage address with the Files requested address location and determines if the two are associated with each other. An association exists if the FILE Address is within the Requesting Program's folder address (Program and File have the same directory on hard drive ), or if association tags marking the Program and\/or the File as being associated to the same group. The comparing circuit  outputs either an association between the Program and the Requested File, or the lack of that association. The logic path going to circuit  if they are associated, and circuit  if they are not associated.","If the Requested File is associated with the Program, then the logic in box  determines if the Requested File exists on hard drive  at the requested address. If the request was to \u201cwrite\u201d the File, then logic circuits ,  and  activate activates security controller  to write the Requested File to hard drive . If the requested access was to \u201cread\u201d the Requested File, and the Requested File does not exist at the requested directory address, then logic circuit  gives an error, denying the access request. If the Requested File does exist at the requested directory address, then logic circuit  sends a signal through circuits  and controller  to read the File from hard drive .","If the Requested File is not associated with the Program, then the security system in box  determines if an Alias File exists on hard drive  for that particular Program, Requested File, and the requested address. If no such Alias File exists, then the logic moves to circuit  where the system reads the Requested File if access was for reading (circuit ), or writes the Alias File if access was for writing (). If the Alias File exists, then the logic moves to circuit  where the system reads the Alias File if access was for reading (circuit ), or writes over the existing Alias File if access was for writing (circuit ). Signals are sent to security controller  to perform the correct storage of the File onto hard drive .","In a real world design, security system  can be combined on a computer mother board  to provide a ergonomic system that connects to hard drive  through a standard IDE cable . In this way, it is easy to allow the security system access to such information as the Selector Information, Page Directory Table, Page Table, Page Frame, Call Tables, Descriptor Table, Interrupt Vector Table (IVT), Stack, Heap, Logical addresses, Linear addresses, Physical addresses, virtual addresses, alias addresses and\/or other memory allocation and program information. Secure storage  can store this information about programs and file as the files are read and written to hard drive . In most cases a software interrupt request will be used to execute a interrupt service routine (ISR) and initiate access to hard drive . If there is a conflict between the information on the computer and information on storage , the security system can signal an error. Thus, security for the system boils down to how secure RAM memory allocation is and how secure Virtual Memory allocation is. Since virtual memory would normally be stored on the hard drive itself, the security system can have complete control over this also. In general, memory allocation can be handled by the BIOS, Operating system, and\/or CPU, along with various protected tables, so that it cannot be circumvented. However, programs can still cause violations (page fault, stack overflow, General Protection Faults, etc.), but generally these will only cause that program to shut down, which in the case of the disclosed security system merely removes the offending program from operation. And once the program stops executing (for computer systems with the disclosed storage security) the program no longer has influence over the computer system. Programs are trapped within their own associated group (folder) on the hard drive, and restricted from modifying the start up menu (in Windows OS) without specific authorization.","In , we see a flow chart of a Security System , which performs essentially the same function as Security System , but with a slightly different logic pattern. These Security systems show the simplest logic patterns, and many other decision boxes can be added to the flow chart to obtain additional function and modes (see \u201cMODES of OPERATION\u201d section). Security System  is shown here as one of the many alternate configurations for the disclosed security system for mapping a \u201cReal FILE Access Request\u201d (read or write) to an Absolute File Address (either a Real FILE Address (FILE) or to an alternate Alias File Address (Alias File)).","In , security system  is logically connected to computer system  by communication lines ,  and\/or . One or more of these lines can provide critical data to the security controller to determine whether an alias file or real file should be accessed. Normally, most or all of the information would be transferred over one or more of the I\/O bus lines  and . However, a direct connection through line  can be used to connect directly to CPU . Line  allows memory address information to be directly gather from the CPU. In this way, security system  can directly and securely keep track of system memory allocation for comparison with the memory allocation table(s) kept by computer system . If their is a difference between these two memory allocation tables, the security system can use its own secure memory allocation table, or use error correction control logic to decide on a correct course of action, or simply signal an error and shut down the offending program. The security system's memory allocation table can be stored in secure storage  on the security device itself or at another location. Storage  can be internal memory storage or a removable memory device such as a USB Flash memory stick or card. If a memory card or stick is used, it may include a security CERT to provide an access key and\/or encryption security for hard drive  at the same time. Capture Identity box  can send collected allocation table information directly to memory storage  or send it through additional logic, such as, logic box . Capture identity box  is designed to watch system bus operations and detect a request for access to hard drive , and capture the Real FILE Address of the file being accessed. Information from both identity boxes  and  is sent to decision box , so that box  can produce information that decision boxes , ,  and  need to correctly determine their course of action.","Decision box  can provide several functions, comprising retrieving, sending and storing data between identity capture boxes  and , secure storage  and\/or data lines . Box  uses these information components to provide specific information for decision boxes , , , and , so that, security system  can provide the correct response to the access request. This information is shown graphically as transferred through data paths  and . In an actual system, boxes , , , and  could simply check \u201cdata locations\u201d in storage , which are updated by decision box . These \u201cdata locations\u201d would contain the information it needs to make its decision(s). Box  can keep track of all data going to hard drive  through data lines . Thus, when specific file data information is observed on data lines , along with a specific Program Requesting Access, and a specific Requested File Address, security system  can compare this with data on hard drive  and\/or storage , to determine what action should be taken.","In , logic box  sends control to decision box  after it has finished processing the access request. Decision box  simply determines whether a read or write request was made by the accessing program. Often this information can be determined by the software interrupt that was used by the application. Depending on which function is being accessed, box  will send control to either box  or . For \u201cRead Requests\u201d (load, list, etc.) box  sends control to decision box . For \u201cWrite Requests\u201d (save, save as, rename, delete, etc.) box  sends control to decision box . This effectively separates the security system logic into two separate paths, on for \u201cRead Requests\u201d and one for \u201cWrite Requests\u201d.","For \u201cRead Requests\u201d, decision box  determines if an Alias File exists for the specific FILE being accessed and the specific Program making the \u201cread Request\u201d. To determine this, directory information on hard drive , or a copy of this information in Secure Storage , is accessed, and box  determines if that specific Program has an Alias File for that specific \u201cReal\u201d FILE. In no Alias File exists, then box  sends control to logic box , which tells security controller  that it should \u201cread\u201d the requested \u201cReal\u201d FILE. If an Alias File exists for the requested FILE and Program, then box  sends control to logic box , which tells security controller  that it should \u201cread\u201d the Alias File corresponding to the requested FILE and Program.","For \u201cWrite Requests\u201d, decision box  determines if an Alias File exists for the specific FILE being accessed and the specific Program making the \u201cWrite Request\u201d. To determine this, directory information on hard drive , or a copy of this information in Secure Storage , is accessed, and box  determines if that specific Program has an Alias File for that specific FILE (\u201cReal\u201d File) that was requested by the Program. If the Alias File exists, then box  sends control to logic box , which tells security controller  that it should \u201cwrite\u201d to that Alias File which corresponds to the requested FILE and Program. If the Alias File does not exists for that specific FILE and Program combination, then box  sends control to logic box . Logic box  then determines if the requested FILE is associated with the Program, and\/or that Program's Associated Group, making the access request. If the FILE is associated with the Requesting Program and\/or its Associated Group, then box  sends control to logic box , which instructs security controller  to access the FILE at the requested FILE Address. If the FILE is not associated with the Program (requested address is outside the Program's Associated Group), then control is transferred to logic box , which tells security controller  that it should \u201cwrite\u201d (save, save as, etc.) to an Alias File for that specific FILE and Requesting Program combination. The Alias File is marked in some way so that it is associated with the access Requesting Program and\/or the Program's Associated Group. Association between the Program and the Alias File can take many forms. For example, the association may comprise simply writing the Alias File in the same folder (or one of its subfolders-subdirectories) as the Requesting Program. Another way to provide association between the Program and the Alias File is to mark the Alias File, in some way, as it is written so that it is associated with the Program that originally wrote it. A data file within the Alias File itself, or a table containing the association between files and programs can be used. The Alias File may also be marked as being associated with other programs if desired, or marked as associated with both programs and folders depending on the desired structure and security for that program group.","Security controller  takes all the information coming to it from logic boxes , , , , and data lines  to determine what course of action to take. Controller  may also access data within storage  or hard drive  if needed to assure that there is not a security error from bad information. Security Controller , maintains complete control over information on hard drive  so that information on drive  is secure. Note that logic boxes , , ,  performed the same function they do in . These boxes simple provide the proper procedure for accessing information in that particular way. Security controller  receives these instructions from boxes , , ,  and further combines them with data from the computer bus  and\/or ATA Controller  and sends and receives information over cable  connected to hard drive .","The Security Systems in  are shown completely separated from both the Computer system  and hard drive . Many other alternate configurations are possible and as we will see next , the entire DASS system can be programmed into software.","In , we see an alternate security system program  (DASS\u2014Dynamic Associative Storage Security) done completely in software. In this configuration, CPU  can preform all the logic and security control functions shown within security systems . The logic in security program  provides identical functions as the hardware logic and\/or software logic in security system  (see ). Logic for Security Program  is shown in  being accomplished completely in software either in BIOS , RAM  and\/or secure storage . Additional memory locations can also be added to the ones shown here. Besides the basic logic shown in security program , the security program may also handling additional logic for controlling modes of operation for folders and files (see MODES of OPERATION) and other functions for the security system. Most or all of these controls can be programmed into ROM BIOS  because of the relative simplicity of the mapping scheme for real and alias files, and the relative availability of memory allocation information on modern computer systems. Security Program  may also have additional controls programmed into the operating system running on computer system . BIOS  can contain all the program logic seen within security system program , though some modifications may be needed to for present day operating systems to properly implement all their operational characteristics. For future operating systems, actions that violate the security system's most basic security protocols would be rewritten so that the security system  would not need exceptions to its rules for misbehaved operating systems. BIOS  can also contain software for controlling memory allocation tables to assure that memory allocation is not violated by any program and to also track the transfer of a program from one memory space in RAM and\/or Virtual Memory to another. The BIOS can also contain programs to manage file allocation tables (FAT32, VFAT, MFT, CDFS, NTFS, etc.) at the lowest level, so that no other programs can tamper with information stored on these files stored on hard drive . BIOS  may also contain the interrupts service requests (ISR) to detect hard drive access requests for managing the mapping of file addresses from a Real File address to an Alias File address, before the actual file data is transferred to ATA Controller  and ultimately to hard drive  over data lines . Thus, security system program  can operate as a hidden logical layer between present interrupt requests that access the hard drive and ATA controller .","Programs and applications normally will not need to be aware of security program  residing logically between them and ATA controller . Even the computer's operating system can remain separated from security program , with the security system filtering all access requests before they get to the operating system and\/or ATA Controller . Generally, the security system would have a portion of itself operating in RAM memory  (Windows XP presently loads BIOS programs into RAM memory for execution). But eventually a full hardware and\/or ROM BIOS motherboard solution can transition into the market place to provide total file directory security. Even with a portion of security system  operating as software within RAM , present computer operating systems handle memory allocation information very securely with very little chance for viruses or other malicious programs to take control of the system at this level. Adding the DASS system to the hard drive security makes it even less likely for a malicious program to subvert the system because these programs can no longer corrupt important directories and files on hard drive .","In , we see a Venn diagram of one way Alias Directories can be organized by the disclosed security system. The area inside Absolute Directory ring , represents all files and directories on a particular long-term storage device (hard drive) and comprises \u201cReal\u201d, \u201cAlias\u201d and \u201cPhantom\u201d Files and Folders on that storage device. The area inside Real Files ring , represents all \u201cReal\u201d Files on the hard drive. Real Files  are a subset of Absolute Files within ring  with the real files contained entirely within Absolute Files . The area within Absolute Directory , but outside Real Files ring , represent the Alias Files  presently on the hard drive. During operation of the computer system containing the hard drive, both Alias Files  and Real Files  are generally changing, since the files are being written and deleted from the drive on a regular basis. In this Venn diagram the area of Alias Files  is considerably larger than the Real Files . In a real computer system, the number of Alias files will generally be much less than the number of Real files for well behaved programs. However, viruses and other malicious programs may begin creating large numbers of Alias Files causing Alias files to outnumber Real files. The security system for the hard drive being protected, can easily detect this large increase in Alias Files and flag the program as possibly being a malicious program. Other suspicious activity can also be easily detected, such as, a large number of attempts to delete or modify files not associated with that program, and\/or creation of Alias Files of specific important programs (i.e. System Files, Registry Files). For the disclosed security system these activities is easily detected because the security system allows malicious programs to be executed to see what they will \u201ctry\u201d to do, not some pattern of machine code commands. This allows identification of specific behavior independent of how the malicious program may be programmed to do these activities. Thus the security system focuses on the end result of the malicious program activity and not the actual program structure. This is only possible with the disclosed security system, because it allows malicious programs to be executed.","In , we also see three Alias Directories rings , ,  and for Programs A, B, and C, respectfully. The area within these rings represent the files that are accessible to their respective program. The Alias Directories discussed here could also be called \u201cProgram Directories\u201d since each program, and\/or program group, would have its own unique Alias Directory. For example, the area within Alias Directory ring  represents all the programs accessible by Program A. Files outside ring  cannot be accessed (read, written and\/or listed) by Program A in this particular example. As always exceptions may be granted to specific programs that allow full access to the Absolute Directory . Alias Directory  comprises both Real Files and Alias Files. The Real Files for directory  are represented by the area formed by the intersection of ring  and ring . The Alias Files for directory  are represented by area , which is both within ring  and outside Real File ring . Real Files not accessible by directory  are represented by area , which are within ring  and outside ring . Similarly, Alias Directory  represents all the programs accessible by Program B. Files outside ring  cannot be accessed (read, written and\/or listed) by Program B in this particular example. Alias Directory  comprises both Real Files and Alias Files. The Real Files for directory  are represented by the area formed by the intersection of ring  and Real File ring . The Alias Files for directory  are represented by area , which is both within ring  and outside ring . Real Files not accessible by directory  are represented by area , which are within ring  and outside ring . Many other Alias Directories can exist on the hard drive that are not shown in .","In , three specialty groups ,  and  are also shown. These groups are examples of a few specific Modes of Operation and how they might be organized on a hard drive. There are many other specialty groupings that are possible, but these three should be sufficient to disclose what is possible. A more comprehensive list of possible modes can be found in the \u201cMODES of OPERATION\u201d section.","Restricted Real Files , represents a subset of all Real Files , and are protected and\/or Restricted under a special Modes of Operation by the security system. Restricted Files , may be accessed only by a predetermined set of Programs and\/or Programs within specific directories. This mode is generally reserved for very important files and programs that the user does not want changed and\/or copied.","Restricted Alias Files , represents files that are not accessible to Program B because they are copies of a restricted file (such as those within ring ) or other reason. This special type of file may not even include the full file, but only the File Name and other security information to allow the security system to identify malicious behavior.","Alias Directory , represents the files accessible to an Alias Program C. Notice that directory  is entirely outside the set of Real Files , thus Program C must be an Alias File. This does not violate the integrity of the security system, since the only way directory  can be created is by Program B (or other program in its associated group) trying to write it to an non-associated directory on the hard drive. Thus, Program C's directory  is even more restricted than Program B's directory  and cannot even access any real files in ring . Normally, even Alias Files are allowed access (read only) to Real Files , but in this example, Program C (Alias directory ) is completely restricted to its own folder within Alias Files  of Program B. If Program C were allowed normal access by the security system, Real files accessible to directory  could also be accessible to Program C, or could include access to all Real Files in  if no Alias Files of its own had been created.","Looking at Alias Directory  for Program A, we see Alias Files  included in directory  and Real Files  excluded from directory . This is normal for the security system, since programs that have an Alias File for requested Real File no longer can access the Real File. Thus, Real Files  can be the portion of all Real Files  that Program A has attempted to overwrite but instead created an Alias File in area . Area  will generally include a greater number of Alias files than the number of Real Files in area  that have been restricted from access by Program A. This is because, Program A can write to non-associated directories with file names that do not already exist. This simply creates a new Alias File without stopping access to a Real File with the same file name. A similar situation exists for Alias Directory  for Program B, where Real Files in area  have been excluded from access by Program B, because they have corresponding Alias Files in Alias File area .","Depending on how the programs are related to each other many combinations of Modes and permissions are possible. In the example in , we see that Alias Directories  and  overlap creating three distinct types of Files represented by the areas ,  and . Real Files in area  within the intersection of rings ,  and  and the exclusion of restricted files , represent Real Files that both Programs A and B can still access. The Alias File area , represents Alias Files that both Programs A and B can access. This can be accomplished by placing Programs A and B in the same directory (or program group), and\/or by providing a common Alias Folder for certain Alias Files. The Real File area , represents Real Files that neither Program A nor B can access. This restricted access to area  can be the result of many reasons, such as, both Programs have written Alias Files for those Real Files, and\/or the files have been restricted in some other way from being accessed by both Programs A and B.","In , all access permissions (read, write and list permissions) are shown by the Alias Directories , , and . Normally, the security system greatly restricts \u201cwrite\u201d permissions compared to \u201cread\u201d permissions so, a Venn diagram of \u201cwrite\u201d access for Programs A, B and C would look quite different than they do in , since \u201cread\u201d access is considerably less constrained than \u201cwrite\u201d access (see ).","In , we see a Venn diagram for the same long-term storage device (hard drive) seen in . Again, the file areas for Programs A, B, and C are shown graphically. However, in , only the \u201cwrite\u201d access for Programs A, B and C are shown by areas , , and , respectfully. The disclosed security system provides different directories for each program, and also allows different Program Directories for each \u201cread\u201d and \u201cwrite\u201d function as well. Both the Real and\/or Alias Directory files can be different, depending on the \u201cread\u201d or \u201cwrite\u201d function. What this means is that the directory structure changes dynamically, depending on three components: 1) the Program which is trying to access the FILE, 2) whether that Program is trying to \u201cread\u201d or \u201cwrite\u201d to that FILE, and 3) the where the FILE being access is located on the hard drive. Further dependencies may be placed on the type of access requested, for example, a \u201cSave As\u201d may have a different \u201cProgram Directory (different \u201cAlias File Directory\u201d and\/or different accessible \u201cReal File Directory\u201d) than a \u201cSave\u201d command even with all other components the same. Similarly, a \u201cList\u201d (directory listing) and\/or \u201crun\u201d (execute) commands may provide a different \u201cProgram Directory\u201d (both Real and\/or Alias) than a \u201cLoad\u201d command, etc.","In , Real File  and Absolute Directory  are the same as in . These groups of files represent files actually exist on the long-term storage device, and therefore only change when files are added or removed from them. Similarly, Restricted Real Files  and Restricted Alias Files  generally do not become unrestricted for \u201cwrite\u201d functions. Thus, File areas  and  remain unchanged in this example. Program Directories , , and for Programs A, B, and C, respectfully, however, have changed significantly.","For Program A, Program Directory comprises Alias Files and Real Files . Alias files being the files within Program directory which are outside Real File area . Real Files being the Files within Program Directory which are inside Real File area . Notice that Program Directory no longer includes the majority of Real Files . This is because, during a \u201cwrite\u201d request, only those Real Files associated with Program A can be directly written as a Real file. All other \u201cwrite\u201d requests end up being written as Alias Files in this example. For example, Real File area may comprise the directory and subdirectories where Program A is stored on the long-term storage device. Files that are attempted to be written outside these directories end up creating new Alias Files in Alias File area . Besides the reduced scope of Real Files  that are available to be written by Program A, the available Alias Files may also be reduced. Alias Files , which where part of Program Directory  in , are no longer included in Alias Files of Program Directory . Alias Files can be files that, for some reason are not allowed to be written to. For example, Alias Files may be \u201cProtected Files\u201d that Program A, within the program group creating Directory , is not allowed to write onto, or the files may be in a \u201cwrite once\u201d folder that does not allow rewriting. Also notice that Alias Files , within Program Directory for Program B, also is missing Alias Files , which were in Program Directory  in . Program Directory , for Program C, is also missing some alias files that where in Program Directory  in , but are not available for \u201cwrite\u201d requests in .","In , the overlap of files accessible by Program A and Program B is shown by areas for Real Files and for Alias Files. Real Files are \u201cReal\u201d files that both Programs A and B can write to. There are many types of files that might comprise \u201cReal\u201d files , such as: 1) files could be located in the same folder directory as Programs A and B which would allow them to share files within their directory, 2) files could be special files or registers that both programs use, 3) files could be files that allow access by programs from multiple programs and\/or program groups, 4) files could be files written by a fourth program, which is in the same program group as Programs A and B (and C), where Programs A and B are allowed access to the files written by the fourth program, 5) etc. In a similarly way, Alias Files are \u201cwrite\u201d accessible by both Programs A and B. There are many types of files that might comprise \u201cAlias\u201d files , such as: 1) files could be located in the same Alias folder directory for both Programs A and B which would allow them to share files within that directory, 2) files could be files that allow access by programs from multiple programs and\/or program groups, 3) files could be files written by a fourth program, which is in the same program group as Programs A and B (and C), where Programs A and B are allowed access to the files written by the fourth program, 4) etc. Finally, Real Files , which are not write\u201d accessible by either Programs A, B, or C, are shown here to distinguish them from Restricted and Protected Mode Files in are , to clarify that other types of files may not have \u201cwrite\u201d access privileges. Generally, Real Files will be files that other programs have write privileges to, but can also be files that are in Locked-File Mode, Read-Only Mode, other file mode.","The Registry","One portion of modern operating systems that may require modification is the controller program that modifies the Registry Files in Windows operating systems. This controller program can be replaced with a BIOS loaded program to provide security for the Registry. Since the Registry is essentially a hierarchical arranged storage table, it can be protected by the same Dynamic Associative Security technology presented here to protect long-term storage devices. The Registry is essentially a long-term storage device (storing data within a set of files). The difference would be that, for the Registry, individual data entries within the Registry would be protected instead of individual files within a directory system. The protection method would be substantially the same, with a Registry Security System identifying the specific program requesting access to the Registry and identifying the specific entry within the Registry that is being updated or created. Such a Registry Security System would only allow a program to modifying data within the portion of the Registry that is associated with itself (that is, data originally recorded in the Registry by the program or during the program's installation). Additional security may be applied when creating a new program's entry in the Registry so that the user may have to give their approval before additional program's can have access to the Registry. Once created, however, the program can be allowed to update and modify its own data without further intervention by the user. This limits the number of decisions the user must make during normal operation of their computer.","Programs running on a computer system using the disclosed folder security system should follow a few operational protocols to insure that their software does not have any problem operating with the folder security controller. The disclosed security system does not prevent any program from loading or executing any file or program unless other folder restrictions are added or alias files which take priority over the original files. Generally any program can load and run any other program on the system. Only during requests for saving a file or program does it become important to make sure the program follows a few simple rules. If a program tries to write files outside its own directory, the security controller will write the file in an alias folder within its directory or somewhere else in association with that program and\/or its folder. The program will be able to use this alias file just like it was the real thing. The only problem comes when another program needs to access this same alias program. Thus as a general rule, programs that need to share files with other programs should be set up at the time the programs are installed. The user then has the option to prevent saving in the folder, in which case the file will be written as an alias file which that program can load again during use. Another protocol is that multiple programs that write and load a particular file should be all located in the same folder or have a master program that can control the saving and loading for all the programs.","The disclosed security system works by setting up specific rules, or modes, for each file, folder and\/or subfolder in a hierarchically arranged storage device (i.e. hard drive, CD-RW, etc.) Many of these modes are based on the security system being able to determine which program (or program thread) is making a request to access the storage device. All of these modes, except for \u201cLocked-Folders\u201d and \u201cLocked-Files\u201d can write and load files with and\/or without user intervention. The Locked-Folder and Locked-Files always requires external user authorization to modify. The following modes, are examples of some of the possible modes that the disclosed folder security system could use. Note that these folder and file modes are separate from other filing functions and do not necessarily effect Windows directory and File permissions or other security functions presently used on Windows operating systems.\n\n","In , we see a modified prior art computer with a folder security system for both ATA Hard Drives  and , and PCMCIA controller . Computer system  operates like a normal prior art computer until a request is made to access hard drives  or , or PCMCIA cards  or . When the access request is made, the folder security controllers  and  traps the request and determines if the access request needs to be mapped to an alias folder address. Controller  communicates over lines  with ATA controller  to change an access request address if needed. Similarly, controller  communicates over lines  with PCMCIA controller  to change the folder address access to the PCMCIA cards if they are storage devices. The folder controllers  and  communicate through bus lines , logic core  and CPU  to determine if an alias folder map is needed during storage device access. The logic core  can be used to determine which program requests access to the storage devices (hard drives  and , and storage devices  and ).","Alternatively, the folder controller system  can be placed between the hard drive driver  and\/or between PCMCIA driver , to control the folder access of programs operating on mother board . Folder controller  would control I\/O controllers  on cable  and  on cable  for changing the file access requests mid-stream. Folder controller  would map any address changes needed after the file access request had already been sent (appeared to have been sent) to the hard drives. Note that the I\/O controllers  and  can be placed in PCMCIA controller , and hard drives  and , respectfully to provide alias folder mapping.","In , a DASS data mapping scheme is shown for folder controller  in . (Folder controller  is operated in a similar manner when a nonvolatile storage device is plugged into the PCMCIA slot). Request folder Address map  in prior art systems would essentially be the same folder as absolute folder directory map . The distinction between requested and absolute folders is a result of the intermediate logical folder maps  and  (Program Directory for a specific Program and specific Access Request). Logical folder maps  and  are placed between absolute folder map  and requested folder map . Depending on which \u201clogical folder map\u201d security controller  chooses, and the content generated for the \u201clogical folder maps\u201d, the file being written or loaded will be mapped differently.","In the example in , an access request by a Program is made to \u201cread\u201d, \u201cwrite\u201d or \u201cexecute\u201d a file at address from hard drive . When this occurs, security controller  is signaled that and access request has been made and may then acquire the memory address of the Program which called the access routine. By determining the memory block being executed at the time of the access request, or other system information that can be used to determine which program actually made the access request, the Program can be identified. In this example, security controller  acquires memory address  of the last executed command before the access request, which is hexadecimal number \u201c04C7\u201d. Controller  then compares this number with table , which can be generated as programs are moved in and out of RAM memory (and virtual memory). Controller  determines that address  is in the memory block range of entry , and retrieves that program's absolute folder address (its address in address map ), which in this case is C:\\VIRUS\\bad.com (a malicious program). Controller  compares this address to the requested file address . If file address is within folder \u201cC:\\VIRUS\\\u201d and\/or one of its subfolders, then the Real Folder Address Map  is selected, which is the same as on absolute folder map , and file is mapped to and then to which is the same address as , which are all \u201creal\u201d files. Notice that Real Directory Map , is usually a subset of all the \u201cReal\u201d files on hard drive  (\u201creal\u201d portion of absolute directory ). Map  represents a list of allowed \u201cReal\u201d files that the specific requesting program is allowed access to for that specific access request. For different requesting programs and\/or different access requests map  may contain completely different allowable files. From address map  the actual physical memory is accessed through logical memory map  in the typical ways used by standard hard drives. If however, file address is outside the folder \u201cC:\\VIRUS\\\u201d and\/or outside its subdirectories (subfolders), and\/or not associated with the \u201cbad.com\u201d program, then alias folder Address Map  is selected to map the requested file address into the \u201cbad.com\u201d program's real folder address \u201cC:\\VIRUS\\\u201d (or another directory associated with the folder \u201cC:\\VIRUS\\\u201d or the program \u201cC:\\VIRUS\\bad.com\u201d). For example, if the File being accessed by address is \u201cC:\\WINDOWS\\WIN.COM\u201d, then the generated file address may be \u201cC:\\VIRUS\\C:\\WINDOWS\\WIN.COM\u201d Notice that the complete requested address is included in the directory, this is to allow the computer to find the file again when the same requested file address is requested by the same program.","There are many other ways of associating the \u201cC:\\WINDOWS\\WIN.COM\u201d file written by the bad.com program with the \u201cC:\\VIRUS\\\u201d directory and\/or the program \u201cbad.com\u201d. For example, the file folder directory address C:\\VIRUS\\bad_com\\C:\\WINDOWS\\WIN.COM could be used to not only associate the file with the directory \u201cC:\\VIRUS\u201d but also with the program that saved it (bad.com). Another way to associate the written file with the program's directory would be to place them all in an alias folder such as \u201cC:\\ALIAS\\\u201d and then simply have the security controller check the alias folder before looking in the real folder address. For example, program \u201cC:\\VIRUS\\bad.com\u201d can load and write the requested program \u201cC:\\WINDOWS\\WIN.COM\u201d, but the request to write (save, paste, delete, cut, modify, etc. will be redirect by folder controller . The generated directory address \u201cC:\\ALIAS\\C:\\VIRUS\\C:\\WINDOWS\\WIN.COM\u201d can be used as the alias write location. After this alias file is written, both the save and load commands will access the alias file version from then on. Thus, to the malicious program bad.com, it appears that it is taking over the WIN.COM program from windows, but in reality it is only manipulate files and folders in its own directory (C:\\VIRUS\\) and\/or subdirectories.","Alternatively, other ways of storing alias files can be used as long as the method used is consistent for both saving and loading the files. For example, the Alias File Address C:\\ALIAS\\C:\\VIRUS\\bad_com\\\/C:\\WINDOWS\\WIN.COM could be used to write the requested file WIN.COM and associate it with the initiating program's file address \u201cC:\\VIRUS\\bad_com\\\u201d (and\/or folder address C:\\VIRUS\\). The Alias File Address also contains the Real File Address \u201cC:\\WINDOWS\\WIN.COM\u201d requested by program \u201cC:\\VIRUS\\bad_com\\\u201d and are associated with that particular Alias File being written. Note that the typical folder hierarchical structure is used to write these files in the C:\\ALIAS folder, but could just as easily be placed in a differently organized table as long as the program saving the file (i.e. C:\\VIRUS\\bad.com) and\/or the folder directory of the program (i.e. C:\\VIRUS\\) is associated with the file and its requested address (i.e. C:\\WINDOWS\\WIN.COM) for later access. The \u201c\\\/\u201d separator between the program address and the write request address is one possibility. However, a single \u201c\\\u201d, as is normal for directory addresses, can be used without losing the ability to distinguish where the program directory ends and the file directory begins. The occurrence of \u201cC:\\\u201d makes a good separator in itself, since the colon \u201c:\u201d is not presently a legal character in directories. Also, all alias addresses can be put in the programs own directory in a standardized manner so that each folders aliases are easily identifiable to the security system. All of the above methods of saving alias versions of \u201cC:\\WINDOWS\\WIN.COM\u201d will have no effect on the real \u201cC:\\WINDOWS\\WIN.COM\u201d and thus, do not effect Microsoft Windows operation in any way, even if the virus is executed repeatedly. Once real address map  and alias address map  are generated, the file can be written, loaded or executed just like any other file on atypical hard drive. With alias address being stored on drive  at its absolute directory address and real address at its absolute directory address . This effectively prevents viruses from ever writing themselves onto important files, and than, when the computer is rebooted, being loaded into memory for execution by the operating system. In this example, file address and are the same, but additional mapping can be included for such things as: 1) Restricted-Folders and subdirectories for restricting loading and\/or saving of files even from its own directory, 2) Restrict-Files from being updated without authorization, 3) Non-Executable Folders for non-executable files which will except written files from all (except restricted) folders and programs provided which are non-executable files and\/or may, 4) Locked-folders where files can be written and\/or loaded from an authorized list of folders and\/or programs not in its folder of subfolder, 5) Write-Once folders where the contents are never to be changed and\/or deleted, files can only be written and then loaded, no updating is allowed, 6) Safe-Folder where a folder is set up to take all operating risk for other programs by marking itself so that the security controller will use its folder as the programs address for all programs executed from executable files from that folder, 7) other user defined rules for specific folders, subfolders and\/or files, 8) combinations of the previous function modes (see  for example of some).","Folder controller , in , determines which logical folder map (Program Directory, see ) to use, either generated real address map  or a generated alias address map , depending on information from logic core  about the specific access requesting program and the type of access request being made. This information can also be obtained directly from CPU  or other hardwired monitoring system on motherboard , if desired, but is also easily captured by software means. Specifically, the computers lower level operating system functions can be programmed to provide security controller  with the needed information to determine the folder address of the program requesting access of the hard drive. Security controller  itself can also be part of the computers operating system (i.e. MS Windows, Linex, Apple OS, Unix, etc.).","Often times more than one file needs to be written at a time, and modern operating systems will cache the files needing to be written to drive . In these cases, information about the folder address of each program requesting the write command must be associated with the file being written. Thus, as the disk drive controller  gets around to saving the file, security controller  can determine its Logical Folder Address with the folder address of the program requesting to write that specific file. In Windows, this caching of files is done by the SmartDrive program \u201cSMARTDRV.SYS\u201d. To insure that each disk access request is matched with the correct program, the SmartDrive program could keep track of that information, or the folder security controller  could manage this information, or managed by another component or software program in the computer's system.","To retrieve data from platter  the same process is reversed with data accessed in the same way it was written. The data address selected by real map , or alias map  is used to move file data from platter  into computer memory. As long as the program accessing the file (or data), is the same program that requested to write the file, the same logical folder map ( or ) is used and the program is unaffected by the folder security controller . If however, a second program attempts to access this same file, it may be directed to a different alias version of the file, or only be able to load the file, but not be able to change it (write access), depending on the permissions for that directory and\/or file. This second program can use the same requested file address as the first program to try and load the real file at that the requested address. However, if the second program has written an alias file with the same requested file address and this requested file address is outside its directory, then it will load its own alias version of the file (if it exists) instead of either the first program's re-written version (alias file) or the real file version. In this way, each program can use the same \u201crequested file address\u201d and modify that file for its own use, without changing the original real file for other programs. If it is desired for more than one program to have access to the same file, these programs can be given permission in many ways. One way to give multiple programs permission to modify a file is to have a specific permissions setting the security system recognizes that allows it. Another way is simply to place the programs in a common folder so all the programs needing access to the file(s) placed in that common folder and\/or subfolder(s) are associated with each other.","In , we see a prior art computer motherboard  connected to a hard drive  through folder security controller . During operation, CPU operates on program threads doing various functions. When a request to access hard drive  is detected by security software  (in RAM or Virtual Memory), it uses its resources to determine which program actually made the access request and also determine the storage folder address for that program thread on hard drive . Alternatively, information about which program thread has made a disk access request can be done through a hardwired connection  with CPU  or system bus . With this information, security controller software  can send sufficient information through the I\/O driver  to allow security controller  the ability to redirect the access request to a different folder if necessary. From the requesting program's perspective, they appear to be accessing the real folder address, but may in fact be accessing an alias folder address. It is possible to eliminate controller  all together if security controller software  does the mapping of access requests so that I\/O  only sees the folder address that security software  wants it to see. To do this, security software  must intercept any request for access to hard drive  and change the accessed directory address as needed.","In , we see a folder security system  connecting solid state memory  to prior art motherboard  with a hard wired connection to memory block movement and addresses being executed by CPU . The folder security in this design is all in hardware, with no software components involved in the determining the folder addresses mapping required. RAM within security controller  and secure memory space within memory  can be used to store folder address information on programs currently executing on motherboard . When an access request to solid state memory is made, folder identifier  captures the directory address of the program making that request and sends it to security controller . Controller  then compares this program directory address with the requested directory address to determine which folder to access, either the real folder or an alias folder. Security controller  can access memory  directly to determine if an alias file exists without any additional assistance from motherboard . Security controller  may also be given the power to take control of motherboard  through folder identifier  and\/or I\/O  if needed. Solid state memory  is shown as an example, and can be any memory storage device, such as, a hard drive, CD-RW, DVD-RW, etc.","In , we see another alternative arrangement for some of the components on a motherboard . In this design all folder security operations is done in software in low level security program software group , which can be in RAM  or in Virtual Memory on hard drive . The security controller software  would have control over the operating system being executed on motherboard  so that it can intercept and map any request to access the hard drive controller , both writing and loading.","In , we see another alternative arrangement for some of the components on a motherboard . In this design the security is hardwired into motherboard , much like the system seen in . In this design, some or all of the security components (folder identifier , security controller  (which may include the hard drive I\/O), and memory management hardware , may be needed. Management hardware  can also provide the program folder identification function that folder identifier  is used for. Similarly, hard drive security controller can take over the functions of management hardware  and\/or folder identifier  with its connection to system bus . When a program requests access to hard drive , a signal can be sent to folder identifier , security controller , and\/or management hardware . This combination of security hardware, then determines the access requesting program's storage folder address (likely on hard drive , but not necessarily) to use in determining if an alias file and\/or alias folder needs to be loaded, created and\/or modified, or if the actual access address itself (real address) can be used.","In , we see an example of what might happen should a malicious program take control of the program \u201coutlooksys.exe\u201d in the \u201cOutlook Express\u201d folder. In this case, the malicious program tries to write the file: \u201cC:\\WINDOWS\\SYSTEM\\SYSTRAY.EXE\u201d on the storage device. The folder security identifies the program making the request as: \u201cC:\\Program Files\\Outlook Express\\Application Execute\\outlooksys.exe\u201d. Recognizing that the outlooksys.exe program is trying to write outside its own directory, it checks to see if the program, and\/or program folder, has permission to write to that folder and file. The security system discovers that it does not have permission to write there. Next, the folder security system can check to see if the folder \u201cC:\\WINDOWS\\SYSTEM\\ is a special folder that could allow writing of the file, such as, a non-executable folder, or write-once folder, save-folder, locked-folder, etc., which might allow a file to be written. In this case, the SYSTRAY.EXE is an important executable file that would probably be write protected as well as its folder \u201cSYSTEM\u201d being read-only and have other restrictions to provide multiple layers of protection for this program. Once the folder security determines that there is no authorization to save at the \u201cC:\\WINDOWS\\SYSTEM\\SYSTRAY.EXE\u201d location it creates an alias directory \u201cC:\\WINDOWS\\SYSTEM\\\u201d in the \u201cApplication Execute\u201d folder, and places the SYSTRAY.EXE file in it. This new \u201cSYSTRAY.EXE\u201d program is stuck in the \u201cC:\\Program Files\\Outlook Express\\Application Execute\\C:\\WINDOWS\\SYSTEM\\\u201d directory where it can do damage only to itself should it ever be executed. The real \u201cC:\\WINDOWS\\SYSTEM\\SYSTRAY.EXE\u201d file is safe and secure in its protected directory. Note that the folders \u201cC:\u201d, \u201cWINDOWS\u201d, \u201cSYSTEM\u201d in the \u201cApplication Execute\u201d folder were created at the time of the file \u201cSYSTRAY.EXE\u201d being saved.","In , we see several flow chart schematics showing a few of the logical decision making processes that are possible with the disclosed folder security system.  focus on writing files to and loading files from the PROGRAM's folder and\/or its subfolders.  focus on writing and loading files to and from only subdirectories of the PROGRAM's storage folder.  show slightly modified versions of  where a specific folder address (i.e. The PROGRAM's folder address and\/or subdirectories) is used for writing \u201cAlias Files\u201d to.  show slightly modified versions of  where a specific folder address (i.e. The PROGRAM's folder address and\/or subdirectories) is used for writing and loading \u201cAlias Files\u201d.","The Registry","Newer versions of Microsoft Windows\u2122 uses a hierarchical database called \u201cthe registry\u201d. The registry comprises three primary files: user.dat, system.dat, and policy.pol. These files work together to provide a central repository of settings for Windows. Most Windows\u2122 based programs use one or more of these registry files to store setting information. While this simplifies the operating system and makes it more adaptable, it also creates a security risk since the registry also contains information needed to start other Windows-based applications, user specific information and Windows\u2122 operating system configuration values. If any program can change data within these registry files, then malicious program can easily damage the system. With the added security provided by the disclosed security system, additional security can be provided to the registry by limiting access to line items within the registry according to what program thread has requested modification. If the registry is set-up with the same hierarchical structure as the real folder address map, then permission to change registry items can be given only to the program thread that created that particular registry item and\/or other program threads within the same real and\/or absolute folder address as the program thread that created the registry item. In this way, the registry entries are protected in the same hierarchical structure as the programs. That is, programs that are hierarchically related can also modify each others registry item information depending on their hierarchical position. Programs in subfolders of a primary program's folder can have its registry item information modified by the primary program and\/or\/or not other program in its folder, but the subfolder programs generally cannot modify the registry item information created by the primary program. The disclosed security system can directly control the registry files so that each program thread and\/or folder location can only have authorization to modify specific registry information associated with that program thread and\/or folder. Because the disclosed security system will be \u201caware\u201d of the program and program's storage folder address making the request to modify the registry, the disclosed security system can restrict modifications to the original registry to those line items that are associated with a specific program and\/or a specific folder. Each program and\/or program group can have its own Registry. The Registry may also be treated like any other file, where any program trying to write to it simply writes an Alias File for the Registry. Then that program will use its own copy (Alias File) of the Registry for its own information. This protects the \u201cReal\u201d Registry, which would be set up by Windows\u2122, and generally would not need to be modifies unless the user wanted a program to be specifically in the main Windows Registry.","Directory Listing","The DASS system would treat listing of directory information on the long-term storage device in substantially the same way that files are treated during Reading, Writing and Executing files. Individual programs would see the apparent \u201cReal\u201d directory arrangement. Where \u201cReal\u201d is used to define the directory addresses that the applications and operating system make requests to, and would generally not include the \u201cAlias\u201d directories (files and\/or folders). Real File Addresses that do have Alias Files would list the Real File Address, but read and write to the Alias File Address. Thus the \u201cReal\u201d directory structure is what the computer perceives as the actual directory structure. The \u201cProgram Directory\u201d defines the actual File Directory structure for that particular program, and is different for each program and file requested. The Program Directory includes both the Real Files and Alias File Addresses available to that program (see ). The Program's directory arrangement is included in the absolute directory defined on the long-term storage device directory structure itself. To the storage device, the \u201cProgram Directory\u201d structure is just portion of the \u201cAbsolute Directory\u201d structure, but the computer operating system and applications may never see this \u201cProgram Directory\u201d structure when listing Files, only the pre-mapped directory structure we are calling the \u201cReal Directory\u201d. The \u201cProgram Directory\u201d is generated when an access request to the long-term storage device is initiated. The Program Directory\u201d provides the proper mapping of \u201cReal File Addresses\u201d to their \u201cAlias File Addresses\u201d, it is the directory the program uses, but never sees during listing. All \u201cAlias Files\u201d can be hidden from all programs (applications) if desired. However, a special application(s) designed to access the full \u201cAbsolute Directory\u201d on the long-term storage device can be useful to allow the user to see exactly what is on their long-term storage device.","One or more applications may be used to access both the \u201cReal\u201d and the \u201cAlias\u201d directory structure (the absolute directory). For example, Windows' \u201cWindows Explorer\u201d program could be designed to show the full \u201cAbsolute\u201d directory on the long-term storage device (storage devices actual directory structure). Windows Explorer could also be designed to show \u201cPhantom Files\u201d. \u201cPhantom Files\u201d might not even exist, they would just show the apparent location (\u201cReal\u201d directory address) of \u201cAlias Files\u201d with relationship to a specific program or folder. These \u201cphantom Files\u201d would be shown an \u201cAlias File\u201d at its \u201cReal\u201d directory address for a specific program (much like a shortcut file in Windows). Several phantom Files can exist in the same folder with the same file name, but each from a different program that created its \u201cAlias File\u201d. If Windows Explorer would show all these, there would be three distinctly different types of files shown in its directory listing. For example, the listing below shows three \u201cReal\u201d files (C:\\WINDOWS\\WIN.COM, C:\\Virus\\virus.exe, and C:\\Worm\\worm.exe), two \u201cAlias\u201d files (C:\\Virus \\ALIAS\\C:\\WINDOWS\\$WIN.COM, and C:\\Worm\\ALIAS\\C:\\WINDOWS\\$WIN.COM), and two \u201cPhantom\u201d files (C:\\WINDOWS\\#WIN.COM, and C:\\WINDOWS\\#WIN.COM).",{"@attributes":{"id":"p-0174","num":"0231"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["File Directory Address","File Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["C:\\WINDOWS\\WIN.COM","(\u201cReal\u201d file)"]},{"entry":["C:\\WINDOWS\\#WIN.COM","(\u201cPhantom\u201d file for \u201cAlias\u201d file:"]},{"entry":[{},"C:\\Virus\\ALIAS\\C:\\WINDOWS\\$WIN.COM"]},{"entry":["C:\\WINDOWS\\#WIN.COM","(\u201cPhantom\u201d file for \u201cAlias\u201d file"]},{"entry":[{},"C:\\Virus\\ALIAS\\C:\\WINDOWS\\$WIN.COM"]},{"entry":["C:\\Virus\\virus.exe","(\u201cReal\u201d file)"]},{"entry":["C:\\Virus\\ALIAS\\C:\\WINDOWS\\$WIN.COM","(\u201cAlias\u201d file for C:\\WINDOWS\\WIN.COM"]},{"entry":[{},"written by program C:\\Virus\\virus.exe)"]},{"entry":["C:\\Worm\\worm.exe","(\u201cReal\u201d file)"]},{"entry":["C:\\Worm\\ALIAS\\C:\\WINDOWS\\$WIN.COM","(\u201cAlias\u201d file for C:\\WINDOWS\\WIN.COM"]},{"entry":[{},"written by program C:\\Worm\\worm.exe)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Notice that during listing, a file will be listed as existing if either the \u201cReal File\u201d or the \u201cAlias File\u201d exists. During general operation the \u201cAlias File\u201d will be accessed for read and write requests if it exists. If the Alias File is accidently deleted or damaged, access control can be returned to the \u201cReal File\u201d. Similarly, if the \u201cReal File\u201d is deleted or damaged, programs with an \u201cAlias File\u201d for that \u201cReal File\u201d will continue to operate normally, since the it doesn't have to use the \u201cReal File\u201d any more.","Installation of Programs","Under the DASS system, there exists many ways of handling installation of a program and its associated files. Generally, any program can create a \u201cnew\u201d folder for placement of files in, and that folder would then be associated with that program or group of programs. This association could be as simply marking the folder so that it is identified as being part of that associated group. This association may also be incorporated into an \u201cAlias Folder\u201d if the program creating it is on the long-term storage device itself. Because of the hierarchical structure of the security system, any program stored in this newly created folder can have \u201cReal\u201d write access in this folder. However, outside this folder it may only write alias files. If the program creating the new folder is outside the protected storage device, such as on a CD-ROM disk, then the new folder may or may not be association to the original program depending on what is desired. The new folder can simply be a new \u201cReal\u201d folder and operate like any other folder under DASS, and only allow programs within that new folder to modify and create files within that new folder. Any write requests by the installer outside the new folder can be mapped to an alias folder and file within the new folder. In this way, new \u201cReal\u201d folders can be created anywhere on the long-term storage device (unless otherwise restricted) for placement of new files and\/or applications.","During the installation process of a new application, requests may be generated to update Windows' system files, such as DLL, DRV, EXE, and other files. Because of the way the DASS system operates, attempts to modify any of these existing files will simply result in an \u201cAlias\u201d file being generated within the new folder created for the new application. Then during operation of the new application, these alias files will be accessed instead of the original DLL, DRV, EXE, etc. files. In this way, each program gets the files it modified and saved, while other programs can get their files they modified and saved, even if the file's requested address and name are the same. The Registry files may be among the restricted files the installer tries to update. The DASS system would normally just create a new Registry that the new application would use for its own purposes, but the user may elect to allow the program to modify the \u201cReal\u201d or original Registry if desire.","Throughout this patent, prior art Windows' hierarchical directory structure (i.e. Windows' folder and subfolders directory structure) has been used as one example to define the framework for an Alias File directory structure, which can be fashioned directly into folder structure itself to associate specific files with the program which wrote them. The use of alias folders within the storage directory of the program that \u201cwrote\u201d the file accomplishes this goal in a way that is intuitive to people familiar with the hierarchical filing system used in present day computer systems (i.e. folder and subfolder hierarchical arrangement). The hierarchical directory structure provides the needed association between a specific file being written, the specific file's originally requested directory address and the directory address of the program writing it, such a system is only one example of how these three sets of information (i.e. saved file directory, requested file directory, and requesting program directory) can be associated with a file and each other on a long-term storage device.","One way we have shown for creating, identify and retrieving alias files is to make the alias file's directory equal to the requesting program's directory plus the full originally requested directory address. This way all the needed information is stored in the hierarchical directory arrangement itself. The alias file can be quickly found once the program's storage address and the requested file address is known. However, in present day FAT32 file allocation systems there is limited space for long directory addresses. Thus, other ways of tabling this information can be used besides the directory address system to store the information. Instead, the name of the saved file and its real directory can be mapped by a new table, which would include the requested file directory address and requesting program absolute (and\/or real) directory address, and define their proper hierarchical order. Thus the security system can access this new table to determine which file to access depending on the program requesting this access and the hierarchical relationship between the program requesting access and the file it is attempting to access. The new table may be part of an existing file table, such as NTFS (New Technology File System), or a separate table by itself. The disclosed security system could add the requesting program's identity and the original \u201cReal File Address\u201d information to the existing NTFS directory so that the disclosed security system could quickly obtain this information during operation of an access request.","Alternative hierarchical structures can be used by incorporating the requested file address and requesting program's storage address within the file itself in such a way that the files can be sorted quickly according to the requesting program, and\/or requested file address. For example, an alias file may be saved in the requested folder address, but a special character is added to the file name to identify that particular file as an alias file (for example all alias file names could start with \u201ca\u02dc\u201d). The alias file could be placed in the same directory folder as the original real folder address. Another alternative would be to put all the alias files in a separate directory (for example \u201c\\alias\\\u201d within the requested file directory. Thus, all the alias files for a specific file would be within the same folder. If several programs attempt to replace the original file, there may be several alias files within the specific files folder. Each alias file would need to include information on the program which caused the file's creation. This program information may comprise a program identifier from a table of program information, the program's full storage address, etc. For this example we will use the program's full storage address as the information we use to identify the program from other programs. When the program requests access to the specific file, the security system must determine which alias file to select (or real file). To do this, the security system searches for the alias file having the program information that matches the requesting program's full directory address. If no such alias file matches (program does not have an alias file for that file), then the security system reads the real file (if read requested) or writes the alias file (if write requested) including the requesting program's full directory address information. Thus, all three pieces of information of an alias file are stored within the storage structure: 1) alias files are identified from real files by the addition of a special character(s) to the alias file names, 2) File Address\u2014alias file is stored in same directory as real file so that the directory address and file name itself provide this information, 3) Identity of requesting program and\/or program's storage directory\u2014this information is associated with the alias file by storing this information within the file itself.","Besides controlling the file allocation tables on the long-term storage device, the disclosed security system can also control the flow of information between the computer and the long-term storage device (hard drive). For example, the security system can manage multiple access requests at one time by keeping track of the directory of the program making each file or folder request and managing the requests concurrently as needed. Alternatively, the disclosed security system could simply operate the hard drive in \u201cexclusive mode\u201d where only one program can access the hard drive an any one time, thus eliminating any error in associating the accessed file with the wrong requesting program directory.","The power of the disclosed invention results from its ability to redirect the actions of a particular program depending on where that particular program is stored in a hierarchical structured long-term storage device. This ability to redirect actions is especially useful when used to redirect a \u201cread request\u201d and\/or a \u201cwrite request\u201d according to the requesting program's storage folder address. By including the ability to redirect the \u201cread and write requests\u201d to alias folders dependent on the program doing the requesting, the disclosed security system has a powerful means for organizing the way files are stored, handled and retrieved, without significantly altering the way the applications read, write and execute its own files. Once the actions (read, write, execute, etc.) of each program and program thread are logically controlled according to where that program or program thread is stored, many different modes of controlling the storage of files and folders are possible. Through this simple action of using an executable program's non-volatile storage location to accordingly redirect that program's actions (read, write, execute, etc.), a computer system can limit unauthorized programs (malicious programs) to a particular folder and substantially prevent it from damaging files in other folders. This redirecting does not have to significantly effect the ability of the executable program to operate normally, because from that program's perspective, the files it \u201cwrites\u201d are the same as the ones it \u201creads\u201d, even though the files' absolute address location (alias folder address) may be quite different than the file address it requested. Modes of redirecting files can include the ability to separately identify files written by a particular program, from files written at the same location by a different program. Thus, there is the ability for programs to operate normally without interfering with other programs on the non-volatile storage device.","Although the above description of the invention contains many specifications, these should not be viewed as limiting the scope of the invention. Instead, the above description should be considered illustrations of some of the presently preferred embodiments of this invention. For example, all the examples shown in this patent have subfolders inheriting its properties and rights to be written to form its mother folder. However, this top down hierarchical construction can just as easily be reversed with the subfolders being protected from modification and the higher order folders being writeable by programs executed in its subfolders. Thus, even though the filing relationship is the standard top down hierarchy, the ability to write to folders can operate from bottom up. In such a folder security system, all programs could write to the root directory, but not to subfolders of the access requesting program's folder. This inverting of the access priority allows several programs to easily access the same higher order folder. For example, if the directory in  had an inverted access priority, the programs \u201cFRONTPG.EXE\u201d (FrontPage), WINWORD.EXE\u201d (MS Word), \u201cwksdb.exe\u201d (Works Database), \u201cwksss.exe\u201d (Works Spreadsheet), \u201cmsworks.exe\u201d (Works Word Processor), could all be placed in their own subfolder in the \u201cOffice\u201d folder. Each program could write files into the \u201cOffice\u201d folder, the \u201cMicrosoft Office\u201d folder, the \u201cProgram Files\u201d folder, and the \u201cC:\\\u201d folder. But they would not be able to write to any of their subfolders, such as, folders \u201c1033\u201d and \u201cTemp\u201d shown in the \u201cOffice\u201d folder. Thus, important program files could be place in subfolders of the program directory to protect them. While programs that need to be shared could be placed in higher order folders, such as, the \u201cMicrosoft Office\u201d and\/or \u201cOffice\u201d folders. To protect files in these higher order folders, the folders can be Non-Executable Folders and\/or have other restrictions (see \u201cMODES OF OPERATION\u201d under the \u201cOPERATIONAL DESCRIPTION\u201d portion of this patent) so that no executable files are allowed to be saved, renamed, renamed to, loaded and\/or executed within the folder.","Also, the way the files and folders are arranged to provide security is nearly limitless. For example, alias files can be placed in nearly in any directory folder desired, but the alias folder still needs to be associated with the hierarchical position of the program that saved it and the alias file still needs to be associated with the originally requested directory address of the file. However, notice that alias folders and files are not needed at all on a properly organized folder system for the operating system and other applications (programs). The alias folders are only needed to accommodate programs that operate outside the predetermined rules needed for a folder security system (depends on which folder modes and restrictions are used). Provided each program thread only writes to its own folder directory or subdirectory, no conflicts are created an no alias folders or files are needed. However, since there will be programs that don't match every possible mode that a user may select, the alias folders in most cases will be useful. Also notice that the disclosed modes for files and folders need not effect the directory and file permissions normally used by Windows. The disclosed security system works substantially behind the scenes from Windows perspective so that Windows is essentially oblivious to the disclosed security system and file content and permissions are not changed (except possibly for special files such as the Registry).","Finally, there are many ways the program requesting access to the long-term storage device can be identified. For \u201cVirtual Machine\u201d operating systems such as used in Windows XP, the Security System can \u201cwatch\u201d the Graphic User Interface (GUI) to determine the Program being executed at the time the access request was initiated. Also, many configurations of File and Folder Modes are allowed by the disclosed Security System. These Modes can be put in a table for known Programs so that during installation the program and its files and folders are setup and operate properly under the disclosed Security System (i.e. DASS).","Thus, the scope of this invention should not be limited to the above examples but should be determined from the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DRAWING FIGURES","p":[{"@attributes":{"id":"p-0028","num":"0060"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0029","num":"0061"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0030","num":"0062"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0031","num":"0063"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0032","num":"0064"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0033","num":"0065"},"b":"5"},{"@attributes":{"id":"p-0034","num":"0066"},"b":"5"},{"@attributes":{"id":"p-0035","num":"0067"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0036","num":"0068"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0037","num":"0069"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0038","num":"0070"},"figref":"FIG. 6D"},{"@attributes":{"id":"p-0039","num":"0071"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0040","num":"0072"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0041","num":"0073"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0042","num":"0074"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0043","num":"0075"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0044","num":"0076"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0045","num":"0077"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0046","num":"0078"},"figref":"FIG. 10A"},{"@attributes":{"id":"p-0047","num":"0079"},"figref":"FIG. 10B"},{"@attributes":{"id":"p-0048","num":"0080"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0049","num":"0081"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0050","num":"0082"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0051","num":"0083"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0052","num":"0084"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0053","num":"0085"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0054","num":"0086"},"figref":"FIG. 16A"},{"@attributes":{"id":"p-0055","num":"0087"},"figref":"FIG. 16B"}]},"DETDESC":[{},{}]}
