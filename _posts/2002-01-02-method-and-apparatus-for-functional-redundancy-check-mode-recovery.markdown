---
title: Method and apparatus for functional redundancy check mode recovery
abstract: A method and apparatus for functional redundancy check mode recovery is disclosed. A method in accordance with one embodiment includes detecting an event associated with a device within a data processing system, initiating a platform-independent device removal sequence for the device in response to detecting the event, virtually ejecting the device from the data processing system in response to initiating the platform-independent device removal sequence, and servicing the event associated with the device in response to virtually ejecting the device from the data processing system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06920581&OS=06920581&RS=06920581
owner: Intel Corporation
number: 06920581
owner_city: Santa Clara
owner_country: US
publication_date: 20020102
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DESCRIPTION OF THE RELATED ART","DETAILED DESCRIPTION"],"p":["The present invention relates generally to an improved method and apparatus for data processing. More particularly, the present invention relates to an improved method and apparatus for error detection and recovery within a data processing system. Still more particularly, the present invention relates to a method and apparatus for functional redundancy check mode recovery.","Many modern data processing (e.g. computer) systems employ redundancy of system elements to improve system reliability and to decrease the amount of \u201cdowntime\u201d resulting from component failures, faults, or internal errors. According to one technique for improving system reliability, two or more physical processing elements or \u201ccores\u201d are associated with and function as a single logical processor. Each processor core may have its own physical processor package or alternatively, two or more processor cores may be incorporated into a single processor package. The processor cores are operated in a functional redundancy check (FRC) mode in which identical instructions are provided to each core and concurrently executed on identical data so that any error occurring within a single core will produce an inconsistent result as compared to the remaining cores associated with a given processor. Specialized FRC logic performs this comparison and generates a signal such as an interrupt or exception once an inconsistent result has been detected.","In some conventional data processing systems, proprietary system management software has been utilized to perform similar error recovery while in other systems, specialized firmware has been used. According to one technique, hardware is utilized to generate a system-transparent interrupt in response to detecting a mismatch in redundantly operated processor cores. Specialized firmware receives the hardware-generated interrupt and performs appropriate recovery mechanisms. One drawback to this technique is that most conventional operating systems have a maximum tolerable interrupt latency before system errors or failures occur which varies dependent on the workload and associated devices of a data processing system. Another drawback associated with this technique is that since processor state rather than software context is typically saved it may be more difficult to validate a system's capability to recover from an error occurring at any point of the system's operation.","According to another technique, hardware is utilized to generate a specific system-visible interrupt in response to detecting a mismatch in redundantly operated processor cores. A proprietary operating system program receives the hardware-generated interrupt and performs appropriate recovery mechanisms. Since software context rather than processor state is typically saved, it may be easier to validate a system's ability to recover from errors utilizing this technique. Significant drawbacks associated with this technique however include that it burdens the operating system, limits the number and types of operating systems which may be utilized with a particular hardware platform, limits the ability of the platform to evolve, and prevents differentiation in terms of the underlying platform implementation.","A method and apparatus for functional redundancy check mode recovery are described herein. In the following detailed description, numerous specific details such as specific data processing system, processor package, and abstraction layer interface architectures are set forth in order to provide a more thorough understanding of the present invention. It should be evident however, that these and other specific details described need not be utilized to practice the present invention. In other circumstances, well-known structures, elements, or connections have been omitted, or have not been described in particular detail in order to avoid unnecessarily obscuring the present invention.","Embodiments of the present invention may include data processing hardware, firmware, software, and various processing operations further described herein. The methods, features, and process operations of the present invention may be provided utilizing executable instructions embodied within a machine-accessible medium according to the present invention.","A machine-accessible medium may include any mechanism that provides (i.e., stores and\/or transmits) information in a form accessible by a machine (e.g., a data processing system or computer). For example, a machine-accessible medium includes but is not limited to: read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.); or the like. The executable instructions may be utilized to cause a general or special purpose processing element, programmed with the instructions, to perform methods or processes of the present invention. Alternatively, methods, features and operations of the present invention may be performed utilizing specific hardware components that contain hard-wired logic, or by any combination of programmed data processing components and custom hardware components.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","100","102","104","106","108","102","104"]},"Firmware  contains basic input-output system (BIOS) program code for data processing system  and it initializes, configures, and tests hardware  within data processing system  and loads some or all of an operating system , typically from storage, into memory in a process called initial program load (IPL). Firmware  provides an abstraction layer between higher (application  and operating system ) layers of data processing system  and hardware  and, in one embodiment, handles machine check exceptions. Once loaded, operating system , which may include a kernel and various interfaces, interrupt handlers, resource managers, and device drivers, manages the various application programs  and hardware  of data processing system .","In one embodiment, system  comprises an advanced configuration and power interface (ACPI)-compliant data processing system. Accordingly, operating system  includes operating system-directed power management (OSPM) program code, and an ACPI device driver and firmware  comprises an ACPI BIOS including ACPI machine language (AML) program code describing what hardware devices are present within data processing system , as well as their configuration and interfaces, via ACPI control methods, objects, registers, and tables. The disclosed ACPI device driver within operating system  acts as an AML interpreter to interpret and execute AML program code.","When an event occurs within data processing system , firmware  or hardware  causes a bit to be set within an event status register, such as a general purpose event (GPE) status register, to indicate the occurrence of the event. If a corresponding bit is set within an event enable register, the occurrence of the event may be signaled to operating system  via the generation of a system-visible interrupt (e.g. a system control interrupt or \u201cSCI\u201d). The operating system  receives the system-visible interrupt, determines what event caused the interrupt, and then services the event by executing program code (e.g. control methods) corresponding to bits set in the event status register. Control methods may be written in an ACPI source language (ASL) and compiled into AML for inclusion with the system's BIOS. The operating system  executes a control method by retrieving its associated AML code from BIOS and then interpreting the retrieved code utilizing its ACPI device driver\/AML interpreter.","In another embodiment, firmware  includes an extensible firmware interface (EFI), a system abstraction level (SAL), and a processor abstraction level (PAL). The PAL provides an abstraction of implementation-specific processor features while the SAL provides a platform abstraction, isolating the EFI and operating system  from implementation-specific platform differences. The EFI in turn provides an application programming interface (API) to operating system , allowing the operating system  to interact with hardware  via the system and processor abstraction levels. When a machine check exception occurs, it may be handled by hardware, firmware, system management (e.g. operating system) software, or not at all. For example, single bit data error correcting code (ECC) errors occurring in processor cache may be handled by processor hardware while multi-bit data ECC or parity errors occurring in processor cache may be handled by an associated PAL.","In one embodiment, hardware  includes two or more processor packages, where each physical processor package includes two or more physical processor cores operating lock step in FRC mode as a single logical processor from the point of view of operating system . Hardware  of the disclosed embodiment further includes FRC logic. FRC logic detects errors within individual processor cores of the described embodiment which causes hardware  to break lock step between at least two processor cores within a processor package, disabling FRC mode operation. Hardware  then disables any of the package's error containing cores, placing them into a \u201czombie\u201d state, and generates a recoverable machine check exception. The generated machine check exception in turn triggers the execution of a processor error handler within a PAL of one of the package's error-free cores.","Thereafter, the processor error handler causes a platform error handler within a SAL associated with the package to be executed which initiates a platform-independent device removal sequence for a processor associated with the processor package by generating a system control interrupt (SCI) to operating system . In one embodiment, the SCI is generated using an INT_OUT command capability associated with, for example, the 870 chipset manufactured by Intel Corporation of Santa Clara, Calif.","In another embodiment, the disclosed processor error handler comprises a PALE_CHECK firmware routine within a PAL of one of the package's error-free cores and the platform error handler comprises SALE_ENTRY and SAL_CHECK firmware routines within an associated SAL. PALE_CHECK saves minimal processor state, determines if the machine check exception's associated errors\/events are processor-related, saves processor-related error information, attempts to correct processor-related errors where possible, and then passes control to SALE_ENTRY which branches to SAL_CHECK. SAL_CHECK in turn saves additional processor and platform error and state information, attempts to correct any platform hardware-specific errors, and then generates an SCI to operating system  as described.","Firmware , via the disclosed SAL and PAL, then returns control of the package's error-free cores to operating system  which resumes its execution at the point it was interrupted by the generation of the machine check exception. Operating system  receives or detects the firmware-generated SCI and utilizes ACPI control methods to determine that the interrupt was caused by a request for processor removal or ejection. Operating system  responsively modifies its internal data structures to reflect that the package's associated processor is offline including saving the context of any threads being executed by operating system  on the associated processor, removing it from the mask of current processors, and disabling interrupts to and from the processor. In another embodiment, operating system further writes back the contents of and then disables the associated processor's caches.","Operating system  next utilizes ACPI control methods to virtually eject the processor from data processing system . In one embodiment of the invention, this has no effect on hardware  other than to communicate to the ACPI BIOS within firmware  that the processor's package is being taken offline and to ensure that it is reset or \u201cre-initialized\u201d to the state needed for it to be subsequently awakened or \u201cactivated\u201d by operating system . In another embodiment, virtually ejecting the processor results in the physical removal of power from its associated processor package.","Firmware , via ACPI BIOS program code then resets the package to its original state at the time of operating system  initial load\/boot. In alternative embodiments of the invention, this reset may comprise a \u201ccold\u201d reset or \u201cRESET\u201d operation or a \u201cwarm\u201d or \u201cINIT\u201d reset operation. An associated SAL reinitializes the package and re-enables FRC mode lock step operation between two or more of the package's associated processor cores in response to detecting the ACPI BIOS-initiated reset operation. In yet another embodiment, the package's associated SAL initiates a platform-independent device insertion sequence for the processor package's associated processor by generating a system control interrupt (SCI) to operating system  via the previously disclosed INT_OUT command capability.","Operating system  receives the firmware-generated SCI and utilizes ACPI control methods to determine that the interrupt was caused by a request for processor insertion. Operating system  responsively modifies its internal data structures to reflect that the package's associated processor is being brought online and then wakes and configures the associated processor for use. While specific firmware components have been described herein, it should be appreciated that alternative embodiments of the present invention may be implemented utilizing alternative firmware components and\/or a combination of platform independent and dependent software components.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["200","200","202","202","202","202","212","212"],"i":["a ","b ","a ","b ","a ","b "]},"Node A of the illustrated embodiment includes a plurality of processor packages and a memory . Each processor package may contain one or more physical processor cores associated with one or more logical processors. In one embodiment, each of the illustrated processor packages includes a pair of processor cores operable in an FRC mode as a single logical processor. Memory is capable of storing data and\/or processor-executable instructions and may comprise any suitable memory such as dynamic random access memory (DRAM) for example. Node A further includes a scalable node controller (SNC) \u201cSNC-A\u201d coupled to each processor package via a shared bus and to memory via a memory interconnect . SNC-A of the illustrated embodiment may be further utilized to coupled Node A to SPS-A and SPS-B of the shared interconnect as illustrated. Additional nodes (e.g. Node B ) may include substantially identical components operating in a substantially identical manner as those of Node A . Node B of the illustrated embodiment has accordingly not been described in order to avoid unnecessarily obscuring the present invention.","Each SPS (, ) may in turn be coupled to a first I\/O hub (IOH) \u201cIOH-A\u201d and a second IOH \u201cIOH-B\u201d as illustrated, allowing a greater number and variety of shared devices such as memory, mass storage devices (e.g. optical or magnetic storage devices), and I\/O devices (e.g. display devices, keyboards, mice, trackballs, network interface cards, etc.) to be coupled to data processing system  via each IOH's hub interfaces . For example, IOH-A may be coupled to and communicate with a conventional I\/O hub \u201cICH2\u201d, one or more peripheral component interconnect (PCI) or PCI extended (PCI-X) controller hubs \u201cP64H2\u201d, and an Infiniband controller hub \u201cIVXB\u201d via hub interfaces  as illustrated. IOH-B may be similarly coupled to a conventional I\/O hub , PCI\/PCI-X controller hubs , and an Infiniband controller hub as shown, however, in alternative embodiments of the present invention, each IOH may be coupled to any number or combination of controller hubs, mass storage, memory, or I\/O devices, or the like.","ICH2 of the illustrated embodiment provides an interface to peripheral components or other devices for data processing system . ICH2 may comprise any suitable interface controller to provide for any suitable communication link to IOH-A and\/or to any suitable device or component in communication with ICH2 . ICH2 for one embodiment provides suitable buffering and arbitration for each interface. ICH2 may be further coupled to and provide an interface to a firmware hub (FWH) as illustrated. FWH may comprise any suitable interface controller to provide for any suitable communication link to ICH2 . In the illustrated embodiment, FWH comprises a memory to store one or more firmware interfaces (e.g. SAL or ACPI BIOS program code) according to the present invention. Memory may comprise any suitable memory capable of storing data and\/or processor-executable instructions. In one embodiment, memory comprises a non-volatile memory such as a read-only memory (ROM), programmable read-only memory (PROM), flash memory, or the like.","While a specific embodiment of data processing system  has been illustrated herein, it should be appreciated that additional alternative embodiments as well as variations or modifications of the illustrated exemplary embodiment may be implemented within the scope of the present invention. For example, in one alternative embodiment, data processing system  may be implemented with a single node having more or fewer components than the nodes depicted. A node may accordingly be coupled to available resources without the use of a scalability port switch by coupling, for example an associated scalable node controller directly to one or more I\/O hubs. Firmware interfaces (e.g. SAL or ACPI BIOS program code) according to the present invention may also be stored within Node A either within existing memory or an additional memory coupled to SNC-A directly or via a conventional I\/O hub and FWH as described with respect to memory ","It should similarly be appreciated that the present invention may be practiced utilizing a data processing system  having a greater or lesser number of components as the illustrated exemplary system. For example, data processing system  may comprise, in alternative embodiments of the present invention, one of a wide variety of server or client computer systems or devices such as a workstation, personal computer, \u201cthin client\u201d (i.e. network computer or NetPC), Internet appliance, terminal, palmtop computing device, robust cellular or Personal Communications Services (PCS) telephone, \u201cthin server\u201d (sometimes called an appliance server, application server, or specialty server), or the like. In one embodiment, data processing system  comprises a high-availability server data processing system.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3","FIG. 2"],"b":["204","204","205","308","306","302","302","304","304"],"i":["a ","a ","a","a ","b","a ","b"]},"In one embodiment, the first and second processor cores within the depicted processor package may be bound together to function as a single logical processor from the point of view of operating system software. Both cores and operate in an FRC mode in which identical instructions may be provided to each core and concurrently executed on identical data utilizing FRC logic . Processor cores , may each comprise any suitable processor architecture and for one embodiment comprise an Intel\u2122 Architecture, used for example, in the Itanium\u2122 family of processors available from Intel\u2122 Corporation of Santa Clara, Calif. FRC logic  operates processor cores as a single logical processor by concurrently providing each with identical data and instructions. Each processor core executes instructions and processes data to generate results which may then be stored within an associated private (e.g. ) and\/or shared (e.g. ) cache. FRC logic  monitors processor core store operations or \u201cwrites\u201d to shared cache  to detect inconsistencies in the generated results which indicate an FRC mismatch error. Such inconsistencies can occur as a result of partial or total hardware failure, or the effect of an alpha particle or other form of natural or artificial radiation impacting one or more processor cores.","In alternative embodiments, FRC logic  may be implemented as executable firmware or dedicated hardware coupled with or incorporated into one or more of the processor package's components. In yet another embodiment, a plurality of processor packages are provided, each including a single processor core with FRC logic being provided either within each processor package or external to each package to operate two or more of the package's associated processor cores in an FRC mode.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4","i":"a ","b":["402","404","406"]},"OS software then resumes execution on the second processor core where it was interrupted by the machine check exception and queries firmware (e.g. ACPI BIOS) to determine the source of the SCI (block ). In one embodiment, this may be accomplished by the OS executing an _Lxx control method. Firmware responds to the OS query by notifying the operating system of a request for processor hot removal (block ). This may be accomplished using an ACPI Notify command. The operating system then modifies its internal data structures to indicate that the processor is offline and requests firmware ejection of the processor (block ). In one embodiment, the operating system requests firmware ejection of the processor by executing an _EJx control method.","In response to the operating system ejection request, firmware virtually ejects the processor from the system, resets the processor, re-enables FRC operation of at least the first and second processor cores and generates an SCI to the Operating System (block ) before beginning a second portion of the illustrated method embodiment depicted in . Thereafter, in the process illustrated in , operating system software queries firmware (e.g. ACPI BIOS) to determine the source of the previously-generated SCI (block ). Firmware responds to the OS query by notifying the operating system of a request for processor hot insertion (block ). Next, the operating system queries firmware to determine the status and to identify the associated resources of the processor to be inserted (block ) and firmware provides the operating system with the requested data (block ). In one embodiment, this may be accomplished by executing one or more control methods (e.g., _STA, _MAT, and _CRS). Once the relevant status and resource data is received, the operating system requests insertion of the processor (block ) and the firmware virtually inserts the processor into the system (block ). In one embodiment, the operating system may request insertion of the processor using a _PS control method which puts a device into its D or \u201cactive\u201d state. Once the processor has been inserted and\/or activated as described, the OS modifies its internal data structures to indicate that the processor is online and available before the illustrated process terminates (block ).","In the foregoing description, the present invention has been described with reference to specific exemplary embodiments thereof. It will be apparent however, that variations or modifications of the exemplary embodiments described as well as alternative embodiments of the present invention may be implemented without departing from the broader spirit or scope of the present invention as defined in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings in which similar references are utilized to indicate similar elements and in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 2"],"b":"204","i":"a "},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4","i":"a "},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4","i":"b "}]},"DETDESC":[{},{}]}
