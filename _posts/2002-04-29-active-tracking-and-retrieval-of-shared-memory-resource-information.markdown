---
title: Active tracking and retrieval of shared memory resource information
abstract: An arrangement is provided for actively tracking and retrieve shared memory resource information. Share memory object information is recorded. Upon a request from a user, recorded shared memory object information is scanned according to the request and reported to the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06993634&OS=06993634&RS=06993634
owner: Intel Corporation
number: 06993634
owner_city: Santa Clara
owner_country: US
publication_date: 20020429
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RESERVATION OF COPYRIGHT","BACKGROUND","DETAILED DESCRIPTION"],"p":["This patent document contains information subject to copyright protection. The copyright owner has no objection to the facsimilie reproduction by anyone of the patent document or the patent, as it appears in the U.S. Patent and Trademark Office files or records but otherwise reserves all copyright rights whatsoever.","Aspects of the present invention relate to shared memory. Other aspects of the present invention relate to share memory information management.","In a computing environment, a memory is used to store data. Such stored data may be accessed. Through data access, different processes can share information. For example, a process may store a piece of information at a particular memory location. When another process accesses the information from the memory location, the two processes effectively share the same piece of information. Information sharing through shared memory may occur at different levels of applications. For instance, different processes in an application may exchange information through shared memory. Threads within a process may also share information through memory.","Information sharing through shared memory may also manifest in different forms. More sophisticated memory sharing schemes have been developed. For example, memory may be shared in the form of an object whose implementation (e.g., the memory location it resides) may be hidden from its users. In this way, processes that share memory objects can handle objects at a more conceptual or transparent level. To facilitate that, some of the burden has been shifted to memory management systems that manage housekeeping information about the stored information. For example, a memory management system may keep track of information such as which object resides where and occupies how much space.","While static memory management information may be useful for certain purposes, it does not offer a useful depiction in terms of dynamic uses of the memory objects. Dynamic information about the use of memory objects includes, for example, who is using what object at what time and who is sharing what data with whom. Making such information readily accessible may help many applications to solve problems in a more effective manner.","The processing described below may be performed by a properly programmed general-purpose computer alone or in connection with a special purpose computer. Such processing may be performed by a single platform or by a distributed processing platform. In addition, such processing and functionality can be implemented in the form of special purpose hardware or in the form of software or firmware being run by a general-purpose or network processor. Data handled in such processing or created as a result of such processing can be stored in any memory as is conventional in the art. By way of example, such data may be stored in a temporary memory, such as in the RAM of a given computer system or subsystem. In addition, or in the alternative, such data may be stored in longer-term storage devices, for example, magnetic disks, rewritable optical disks, and so on. For purposes of the disclosure herein, a computer-readable media may comprise any form of data storage mechanism, including such existing memory technologies as well as hardware or circuit representations of such structures and of such data.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","100","110","100","110","110","120","120","120","120","130","170"],"i":["a","b","c","a","b","c"]},"A source process (e.g., process ) may communicate with the shared memory management mechanism  to achieve various tasks. For example, the source process may send a request to the shared memory management mechanism  to indicate that a particular memory object in the shared memory  is ready to be shared. On the other hand, a destination process (e.g., process ) may also communicate with the shared memory management mechanism  to accomplish different tasks. For example, the destination process may send a request to the shared memory management mechanism  to obtain a memory object that has been indicated as shared.","Each process illustrated in  may be a generic process, which may represent a particular process, a specific task, or a thread within a process. That is, a process described in  is any unit of operational process that is capable of interacting with the shared memory management mechanism  to perform certain functionality related to the shared memory .","In addition to facilitating memory sharing between source processes  and the destination processes , the shared memory management mechanism  also actively keeps track of relevant information associated with memory objects and facilitates retrieval of such information based on a request from a user . For instance, the user  may request information associated with all the memory objects shared between a particular source process (e.g., process ) and a particular destination process (e.g., process ). Based on a request, the shared memory management mechanism  collects the requested information and sends such information to the user .","The shared memory  may comprise a shared memory bulk data block  and a shared memory meta information block . The shared memory bulk data block  stores shared memory objects in the form, for example, of user bulk data. It may be realized in a type of memory that is appropriate for high-speed sequential data transfer. The shared memory meta information block  corresponds to a memory area where meta information with respect to the memory bulk data (stored in the shared memory bulk data block ) resides. The meta information may be used to control the access to the memory bulk data in the shared memory bulk data block . For that reason, the shared memory meta information block  may be realized using a type of memory that is suitable for rapid random access with low latency.","To control the access to the shared memory bulk data, each shared memory object in the shared memory bulk data block  may have a corresponding control object in the shared memory meta information block . The control object may be used to facilitate the access of the underlying shared memory object.","Memory objects in the shared memory  may be shared among different processes. Information related to memory object sharing is tracked and recorded in the framework . Both object sharing and information recording may be achieved through the shared memory management mechanism , comprising a share memory (SM) manager , a shared memory object information storage , and a shared memory information scan mechanism . The SM manager  interacts with processes to facilitate the need of object management and sharing. Object management may include object creation, updating, or destruction. For example, a source process (e.g., process ) may request the SM manager  to create a new object of certain type. It may also request the SM manager  to invoke the queue mechanism  to achieve memory object sharing. The latter may manage a queue object (not shown) designed to record sharing information. Upon invocation, the queue mechanism  transfers, based on the request of the source process , the ownership of the shared object from the source process to its associated queue.","When a destination process (e.g., ) is ready to share the object, it sends a request to the SM manager  with a handle of the object. The SM manager  invokes the queue mechanism  with the handle. To allow the destination process to have access to the shared object, the queue mechanism  transfers, based on the request of the destination process , the ownership of the shared object from the queue to the destination process ","The queue mechanism  keeps track of the information related to changes of ownership of shared memory objects and records such information in the shared memory object information storage . The shared memory object information may describe various aspects of shared memory objects. For example, it may specify the type, the size, or current owner of an underlying shared object.","Information stored in the shared memory object information storage  may be accessed, upon a request from the user , by the shared memory information scan mechanism . When a user request is received, the shared memory information scan mechanism  may retrieve the requested information from both the shared memory object information storage  and the shared memory meta information block . Relevant information scanned from the shared memory meta information block  may also be subsequently recorded in the shared memory object information storage  for future use.","Besides sharing memory objects, processes may also perform other tasks. For example, a process may request the SM manager  to create a new instance of a particular type of object. In this case, the SM manager  facilitates both the creation of the new instance of object and recording the information associated with the new instance of object in the shared memory object information storage . For example, for each new instance of an object created, the SM manager  may generate an object handle for the new instance and stores the handle information, together with other information about the object, in the shared memory object information storage .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["300","310","320","330","340","350","360","310","320","340","360","370","380"]},"The attributes object type  and object size  in the exemplary construct  describe properties of the underlying shared object itself. An object type can be one of a plurality types of possible objects and may be associated with different sizes.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4","b":["405","410","420","430","440","450","460","470","480","490"]},"Some of the illustrated object types may be associated with a primitive size. For example, a mutex object may have a fixed primitive size. Some other illustrated object types may have a composite size. For example, an arena object may correspond to an object that is a linked list of a basic share type of object with a variable length. In this case, the sizes of arena objects may differ from object to object. Attribute object size  refers to the overall size of an underlying object.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["200","180","130","180","180","180"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 5","b":["185","185","510","520","550","580","510","190"]},"The user request processing mechanism  is responsible for processing a request forwarded, via the user interfacing mechanism , from the user . It determines the nature of the request and may extract information contained in the request that is necessary to perform requested tasks. For example, the user  may request to scan shared memory object information associated with only some of the processes. In this case, together with the request, the user  may send a list of process IDs to define the scope of the scan. Such process IDs are extracted by the user request processing mechanism  prior to performing the requested scan with respect to shared memory object information associated with the underlying processes. In certain situations, the user  may also request to block the scan of shared memory object information related to some processes. This may be achieve either prior to a scanning request or with a scanning request. The user request processing mechanism  may analyze a request and determine the nature of as well as the parameters associated with the request.","The user request processing mechanism  may include, but not limited to, a process ID extractor  and a scan disabler . The former extracts, from a user request, process IDs. The latter sets scan flags of shared objects to disable the scan of the information associated with the underlying objects. The scan disabler  may identify such objects according to a list of process IDs extracted (by the process ID extractor ) from a request.","Extracted process IDs may be used, while scanning shared memory object information, to identify information that is either relevant or not relevant. For example, a list of processes may be provided to define the scope of requested shared memory object information. In this case, only the information associated with shared objects that belong to at least one of the given list of processes is to be retrieved. Alternatively, extracted process IDs may also be used to exclude the information associated with shared objects owned by the given list of processes. In this case, only the information associated with shared objects that do not belong to any of the processes in the given list is to be retrieved.","The information scan mechanism  performs a scan task according to what is requested by the user . For example, the user  may request to scan shared memory object information across all the shared objects. It may also request to scan shared memory object information related to only some processes. In this case, a list of such processes may be provided and theirs IDs may be used during scan. To facilitate different tasks, the information scan mechanism  includes an overall information scan mechanism , that scans shared memory object information across all active objects, and a process based information scan mechanism , that scans information associated only to those shared objects owned by a given list of processes.","The information scan mechanism  may retrieve requested information from different sources. It may scan information stored in the shared memory object information storage . It may also, when necessary, scan information stored in the shared memory meta information block . Once it retrieves information from the shared memory meta information block , it may store such information in the shared memory object information storage  for future use.","The information scan mechanism  is capable of scanning shared memory information associated with both basic and composite object types. For example, a primitive, such as a semaphore object, may have a fixed size. In this case, the size of a particular instance of a semaphore object may be identical to the size of the object type. This may not true, however, when an object is composed of a set of primitive objects. For example, a serialized data stream object may consist of a collection of objects of arena type. In addition, object size may change over time. For instance, when a serialized data stream object runs out of space, it may automatically invoke a function associated with the arena object type to append another primitive object of share type to it. The scanned shared memory object information reflects the dynamic information associated with the underlying shared objects.","The reporting mechanism  reports scanned the information according to a user request. Such reported information is eventually sent to the user . The reporting mechanism  is capable of reporting shared memory information associated with both basic and composite object types.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 6","b":["610","620","170","160","625","160","630","180"]},"When a destination process is ready to consume the shared object, it sends a request to the shared memory management mechanism  which subsequently invokes the queue mechanism  to transfer the ownership from the queue to the destination process. The shared object, now owned by the destination process, is consumed at . When the shared memory object information needs to be updated with the information regarding this new ownership transfer, determined at , the queue mechanism  records, at , the information related to the transfer of ownership from the queue to the destination process.","The operations at  to  maybe performed independently and asynchronously. That is, the order depicted in  in which the operations are performed is merely for illustration purposes and it does not necessarily constrain the sequence of the operations in real systems. For example, a process may request to create a memory object while other processes are producing or consuming different shared memory object. In addition, source processes producing shared memory objects may do so independent of the intended destination processes, in so far as that the shared objects are produced prior to their consumption by the destination processes.","Independent of the operations involving shared memory object production and consumption, the framework  also operates to facilitate requests from users (e.g., the user ) to access information related to shared memory object production and consumption. When the shared memory information scan mechanism  receives a request, at , from the user , it scans, at , the requested shared memory object information. Such scanned information is then reported, at , to the user .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 7","b":["185","710","715","720","560","725","730","560","735","740","745","775"]},"If a process based scan is requested, the process based information scan mechanism  is invoked to scan the share memory object information associated with each shared object that belongs to at least one explicitly described processes. This may be accomplished in different ways. In one embodiment (illustrated in ), the process based information scan mechanism  may simply enumerate all shared memory objects and scan the information if the owner process ID of the scanned object matches with one of the given process IDs. This implementation may be adequate when run time scan speed is not essential in an application. A different embodiment (not shown) may be realized based on indices to shared memory objects established based on their owner process IDs. In this case, the shared memory object information storage  may need to be properly indexed based on the owner information of each shared memory object. This embodiment may be employed to improve run time scan speed.","In , the first mentioned embodiment for process based information scan is described. For each shared object, the owner process ID is first extracted, at , from the shared memory object information. If the owner process ID associated with the scanned shared object does not match with any of the process IDs provided in the request, the scanning and reporting is not performed. This is determined at . If the owner process ID is one of the provided process IDs, the process based information scan mechanism  scans, at , the information associated with the shared memory object. The scan information is then reported at . This scan process continues until, determined at , all the shared memory objects have been examined. Upon completion, the process exists at .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 8","b":["160","810","820","160","830","840","870"]},"If the request is from a destination process to consume the shared object, the queue mechanism permits the destination process to consume, at , the shared object and subsequently transfers, at , the ownership of the shared object from the queue to the destination process. Information relevant to the transfer of ownership is then used to update, at , the shared memory object information.","While the invention has been described with reference to the certain illustrated embodiments, the words that have been used herein are words of description, rather than words of limitation. Changes may be made, within the purview of the appended claims, without departing from the scope and spirit of the invention in its aspects. Although the invention has been described herein with reference to particular structures, acts, and materials, the invention is not to be limited to the particulars disclosed, but rather can be embodied in a wide variety of forms, some of which may be quite different from those of the disclosed embodiments, and extends to all equivalent structures, acts, and, materials, such as are within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The inventions claimed and\/or described herein are further described in terms of exemplary embodiments. These exemplary embodiments are described in detail with reference to the drawings. These embodiments are non-limiting exemplary embodiments, in which like reference numerals represent similar parts throughout the several views of the drawings, and wherein:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
