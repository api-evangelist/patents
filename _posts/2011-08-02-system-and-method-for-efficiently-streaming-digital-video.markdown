---
title: System and method for efficiently streaming digital video
abstract: In a system and method for streaming video information, a video device driver is configured to analyze video frames stored in a frame buffer to identify a video stream. Video frames identified as containing a video stream are excluded from rendering. An encoding format-independent media transport is configured to encode a copy of a video frame containing the video stream according to an encoding format supported by a client device requesting the video stream. The media transport further is configured to transmit the encoded video frame copy to the client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08799405&OS=08799405&RS=08799405
owner: nComputing, Inc.
number: 08799405
owner_city: Santa Clara
owner_country: US
publication_date: 20110802
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims priority under 35 U.S.C. \u00a7119 to U.S. Provisional Patent Application Ser. No. 61\/369,879, filed Aug. 2, 2010, and entitled \u201cSYSTEM AND METHOD FOR EFFICIENTLY STREAMING DIGITAL VIDEO\u201d), which application is incorporated herein by reference in its entirety.","The present invention relates to the field of video processing. In particular, but not by way of limitation, the present invention discloses techniques for efficiently streaming digital video.","Computer systems are tasked with delivering ever increasing amounts of video and other media over the Internet and other networks. This increase stems in part from the emergence and acceptance of online websites that stream video and other media to users. However, transmitting video and media data over a network can consume large amounts of network bandwidth and adversely affect network performance. With the popularity of streaming video and media, it has become difficult to efficiently stream video and media data without requiring a very high-bandwidth communication channel.","The following detailed description includes references to the accompanying drawings, which form a part of the detailed description. The drawings show illustrations in accordance with example embodiments. These embodiments, which are also referred to herein as \u201cexamples,\u201d are described in enough detail to enable those skilled in the art to practice the invention. It will be apparent to one skilled in the art that specific details in the example embodiments are not required in order to practice the present invention. For example, although the example embodiments are mainly disclosed with reference to a thin-client system, the teachings of the present disclosure can be used in other environments wherein digital video information is processed or streamed. The example embodiments may be combined, other embodiments may be utilized, or structural, logical and electrical changes may be made without departing from the scope what is claimed. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope is defined by the appended claims and their equivalents.","Computer Systems","The present disclosure concerns computer systems.  illustrates a diagrammatic representation of machine in the example form of a computer system  that may be used to implement portions of the present disclosure. Within computer system  there are a set of instructions  that may be executed for causing the machine to perform any one or more of the methodologies discussed herein. In a networked deployment, the machine may operate in the capacity of a server machine or a client machine in client-server network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, a network router, switch or bridge, or any machine capable of executing a set of computer instructions (sequential or otherwise) that specify actions to be taken by that machine. Furthermore, while only a single machine is illustrated, the term \u201cmachine\u201d shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.","The example computer system  includes a processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), and a main memory  that communicate with each other via a bus . The computer system  may further include a video display adapter  that drives a video display system  such as a Liquid Crystal Display (LCD) or a Cathode Ray Tube (CRT). The computer system  also includes an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse or trackball), a disk drive unit , a signal generation device  (e.g., a speaker) and a network interface device .","The disk drive unit  includes a machine-readable medium  on which is stored one or more sets of computer instructions and data structures (e.g., instructions  also known as \u201csoftware\u201d) embodying or utilized by any one or more of the methodologies or functions described herein. The instructions  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , the main memory  and the processor  also constituting machine-readable media.","The instructions  may further be transmitted or received over a computer network  via the network interface device . Such transmissions may occur utilizing any one of a number of well-known transfer protocols such as the well known Transmission Control Protocol and Internet Protocol (TCP\/IP), Internet Protocol Suite, or File Transport Protocol (FTP).","While the machine-readable medium  is shown in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies described herein, or that is capable of storing, encoding or carrying data structures utilized by or associated with such a set of instructions. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical media, and magnetic media.","For the purposes of this specification, the term \u201cmodule\u201d includes an identifiable portion of code, computational or executable instructions, data, or computational object to achieve a particular function, operation, processing, or procedure. A module need not be implemented in software; a module may be implemented in software, hardware\/circuitry, or a combination of software and hardware.","The Resurgence of Terminal Systems","Before the advent of the inexpensive personal computer, the computing industry largely used mainframe or mini-computers that were coupled to many \u201cdumb\u201d terminals. Such terminals are referred to as \u2018dumb\u2019 terminals since the computing ability resided within the mainframe or mini-computer and the terminal merely displayed an output and accepted alpha-numeric input. No user application programs executed on a processor within the terminal system. Computer operators shared the mainframe computer with multiple individual users that each used terminals coupled to the mainframe computer. These terminal systems generally had very limited graphic capabilities and were mostly visualizing only alpha-numeric characters on the display screen of the terminal.","With the introduction of the modern personal computer system, the use of dumb terminals and mainframe computer became much less popular since personal computer systems provided a much more cost effective solution. If the services of a dumb terminal were required to interface with a legacy terminal based computer system, a personal computer could easily execute a terminal emulation application that would allow the personal computer system to emulate the operations of a dumb terminal at a cost very similar to the cost of a dedicated dumb terminal.","During the personal computer revolution, personal computers introduced high resolution graphics to personal computer users. Such high-resolution graphics allowed for much more intuitive computer user interfaces than the traditional text-only display. For example, all modern personal computer operating systems provide user interfaces that use multiple different windows, icons, and pull-down menus that are implemented in high resolution graphics. Furthermore, high-resolution graphics allowed for applications that used photos, videos, and graphical images.","In recent years, a new generation of terminal systems have been introduced into the computer market as people have rediscovered some of the advantages of a terminal based computer systems. For example, computer terminals allow for greater security and reduced maintenance costs since users of computer terminal systems cannot easily introduce computer viruses by downloading or installing new software. Only the main computer server system needs to be closely monitored in terminal-based computer systems. This new generation of computer terminal systems includes high-resolution graphics capabilities, audio output, and cursor control system (mouse, trackpad, trackball, etc.) input that personal computer users have become accustomed to. Thus, modern terminal systems are capable of providing the same features that personal computer system users have come to expect.","Modern terminal-based computer systems allow multiple users at individual high-resolution terminal systems to share a single personal computer system and all of the application software installed on that single personal computer system. In this manner, a modern high-resolution terminal system is capable of delivering nearly the full functionality of a personal computer system to each terminal system user without the cost and the maintenance requirements of an individual personal computer system for each user.","A category of these modern terminal systems is called \u201cthin client\u201d systems since the terminal systems are designed to be very simple and limited (thus \u201cthin\u201d) and depend upon server system for application processing activities (thus it is a \u201cclient\u201d of that server system). The thin-client terminal system thus mainly focuses only on conveying input from the user to the centralized server system and displaying output from the centralized server system to the terminal user. Note that although the techniques set forth this document will be disclosed with reference to thin-client terminal systems, the techniques described herein are applicable in other fields that stream or process digital video. For example, any system that needs to efficiently stream digital video information may use the teachings disclosed in this document.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 2A","FIG. 2A","FIG. 2A"],"b":["220","240","240","220","230","240","230","220","220","230","240"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2B","b":["220","220","240","220","202","204","202","206","208","206","210","208","204","206"]},"The operating system  may be viewed as a set of software programs that facilitate the interfacing between applications  and the underlying hardware  of the thin-client server system . The kernel  is generally considered the central or core component of the operating system . The kernel's  primary purposes are to manage the thin-client server system's  resources and to allow other programs to run and use these resources. Several of the kernel's  tasks may include process management, memory management, and device management. Process management may include the kernel  defining a portion of memory that each application is allowed to access in order to execute the application. Memory management may include the kernel  regulating access to memory and establishing areas of memory to be used by executing processes. Device management may include the kernel  controlling access to devices connected to the computer, such as peripherals, through the use of device drivers. Executing processes corresponding to applications interface with the kernel  through system calls, in which the processes attempt to use the functionality and services offered by the kernel.","One functionality commonly supported by the operating system  is the processing and rendering of multimedia (e.g., video). The operating system  facilitates interfacing between an application and a video device driver  stored in memory to render and\/or process video data. For a remote desktop environment, a virtual device driver may emulate the graphics device driver, such that a client system (not shown) operates under the illusion of accessing the actual graphics device driver to render video data.","A non-limiting illustration of the video rendering and processing capabilities of an operating system is shown by the Microsoft Windows\u00ae operating systems. The Microsoft Windows\u00ae operating systems provide a collection of application programming interfaces (API) for handling multimedia tasks. These APIs are commonly known as Microsoft DirectX\u00ae. Included in DirectX\u00ae is a media subsystem component called DirectShow\u00ae, which handles multimedia playback and streaming media. DirectShow\u00ae operates by dividing a multimedia task into a sequence of processing steps, known as filter drivers . Each filter driver  has input and\/or output pins that may be used to connect the filter driver  to other filter drivers . To process video playback or video streaming, a filter graph is built by creating instances of required filter drivers and then connecting the filter drivers together. A sample filter graph for video playback may implement one or more functions such as file parsing, video and audio demultiplexing, video decoding, and video rendering. At its most basic level, DirectShow\u00ae operates to read video data from a file and render the data as a video frame to be placed in a frame buffer, which is a memory buffer capable of storing a complete frame of data. DirectShow\u00ae further supports a limited number of filter drivers for decoding certain media file formats. The result of executing a DirectShow\u00ae filter graph for video playback or streaming may be a series of decoded video frames. A disadvantage of relying on DirectShow\u00ae for video playback is that only a small percentage of videos commonly streamed over networks are capable of being processed using DirectShow\u00ae. For example, videos conforming to different multimedia frameworks, such as Apple's QuickTime\u00ae, Adobe's Flash\u00ae, and RealNetworks's RealVideo\u00ae, may be incapable of being streamed by DirectShow\u00ae.","Although the video rendering and processing capabilities of an operating system are described above with reference to the Microsoft Windows\u00ae operating systems, the embodiments of the present application may equally address the limitations of APIs of other operating systems, such as the Linux\u00ae operating system, that handle multimedia tasks. For example, the embodiments of the present application may address the limitations of the X Window system, including X11, supported by the Linux\u00ae operating system, including X11. In another example, the embodiments of the present application may address the limitations of the X video extension (XV) X server API supported by various servers. Like the Microsoft Windows\u00ae operating systems described above, the Linux\u00ae operating system and servers supporting the XV API also may use a filter graph of connected filter drivers to handle multimedia tasks, and consequently, also may suffer from the same limitations and disadvantages mentioned above with respect to the Windows\u00ae operating system. Moreover, the filter graph and filter driver technique for handling multimedia tasks has serious limitations for proprietary and\/or high performance computing products.","Referring to , the thin-client server system  may implement an alternative path for streaming video to a thin-client terminal system . In the operating system of the thin-client server system , virtualized device drivers may be created to handle different input and output tasks for the terminal system. One virtual device driver used to implement the alternative path may be a virtual video device driver, such as core video driver , that controls video input and output. In some embodiments, the video device driver may be a physical video device driver.","The virtual video device driver may reside next to the video device driver on the same level in the kernel. The virtual or physical video device driver may include a video driver engine  and a Direct Media engine . The video driver engine  may process graphics updates and pass the graphics updates to a video slot transport channel  for transmission to a remote client . The graphics updates may include bit-mapped graphics to be displayed on a display device of the remote client . The Direct Media engine  may handle streaming video incapable of being processed by DirectShow\u00ae and may send streaming video through the media slot transport channel . Video slot transport channel  and media slot transport channel  may be encoding format-independent data transport multiplex channels capable of sending multiple types of encoded video frames to the remote client. In some embodiments, the video slot transport channel  is a channel dedicated to desktop representation data, such as graphics updates. In some embodiments, the media slot transport channel  is a channel dedicated to streaming video or movie-related desktop or window data. For example, the media slot transport channel  may send DirectShow\u00ae video, video encoded in the YUV color space (e.g., full screen video), and encoded video frames, such as JPEG-encoded video frames, while the video slot transport channel  may transmit RGB data corresponding to screen updates.","To maximize efficiency, the core video driver  may leverage the existing video rendering system provided by the operating system. In other words, in some embodiments, no rendering system is added to the thin-client server system  beyond that which is provided by the operating system. Additionally, in some embodiments, no special software or codecs are required. Instead, the core video driver  takes advantage of the video rendering functionality of the operating system and the decoding capabilities of the remote client  to handle streaming media.","For example, in some embodiments involving the Windows\u00ae operating systems, to handle video or graphics updates, a Windows video driver may access an object or data structure called SURFOBJ to obtain information about a bitmap or device surface. In some embodiments, the Windows video driver specifically accesses an iUniq parameter of the SURFOBJ data structure to determine whether a region of the bitmap or device surface being updated is a video or scroll area. The iUniq parameter may specify the current state of a specified surface. Every time the surface changes, the value of the iUniq parameter is incremented. If the region being updated is a scroll area, the SURFOBJ iUniq parameter may change quickly in time.","In some embodiments, the virtual or physical video device driver may check well-known applications to determine if they are the sources of video frames and filter frames. In some embodiments, the virtual or physical video device driver may determine if an application is the source of video frames and filter frames based on the name of the application. Based on the application name, the virtual or physical video device driver may determine the video and graphics capabilities of the application. For example, the virtual or physical video device driver may know that Explorer.exe is the executable file for the Windows Explorer file management system and that Explorer.exe never streams video content. In another example, the virtual or physical video device driver may know that Cmd.exe, the Microsoft command line interpreter, never streams video content. In another example, the virtual or physical video device driver may know that Vlc.exe, the executable file for the VLC media player, never scrolls. A listing of such applications may be defined by the user and\/or the virtual or physical display driver provider.","The Direct Media engine  processes streaming video by monitoring the frame buffer containing video frames of data. If the data in the frame buffer appears to be moving video, the core video driver  makes a copy of the frame buffer and sends the copy to the Direct Media engine . Determination of moving video may entail determining if a particular region of a screen is updated quickly and regularly. In one example embodiment, quick updates of a screen region may comprise updates of more than 12 times a second. In one example embodiment, regular updating of a particular region of a screen may comprise examining the region of the screen to determine if frame buffer updates are occurring for at least half a second or longer. A delay may be implemented when monitoring the frame buffer for moving video to compensate for false stream determination issues. In certain circumstances, the Direct Media engine  may falsely determine that motion in a video frame indicates a moving video. The culprit for the false determination may be fast scrolling of an application window such that the scrolling mimics a video. To compensate for fast scrolling, if the application has a scroll bar, a delay may be implemented to allow the Direct Media engine  to determine whether motion in the video frame is the result of scrolling or the result of an actual video stream.","Referring back to the operation of the core video driver , in an example embodiment, a purpose in copying the contents of the frame buffer is to ensure that the size of the video frames operated on by the Direct Media engine  matches the size of the frame buffer. In this respect, the need for additional post-processing (e.g., re-sizing, cropping, moving) of video frames subsequent to processing by the Direct Media engine  is obviated because the video frames output by the Direct Media engine  will match the size of the video frames stored in the frame buffer.","The Direct Media engine  receives the video frame copied from the frame buffer and encodes the frame according to a format supported by a decoder in the remote client. In one example embodiment, the Direct Media engine  may encode video frames in a JPEG encoding format. The resulting JPEG-encoded video frame may be placed in the video stream to be transmitted to the client via the media slot transport channel . Thus, the Direct Media engine  may output a series of encoded video frames for streaming to the remote client. In the example where a JPEG encoder is used to encode video frames, the resulting output from the Direct Media engine  may be a stream of simple JPEG images. The JPEG images are sent via the media slot transport channel to the remote client.","The Direct Media engine  further is configured to transmit a signalling frame among the set of encoded video frames sent to the remote client. The signalling frame may be a frame of a certain hue or color, such as a blue block frame. The signalling frame may trigger certain unique properties or actions in the client device. For example, the signalling frame may notify the remote client  to use its own scaler on the encoded video frames. The remote client  may receive a compressed frame, such as a JPEG image, and may use its scaler to increase the size of the received frame. One possible application is the use of the signalling frame and the scaler to display full screen video. Because of bandwidth consumption issues, it may be undesirable to transmit full screen video from the server system  to the remote client . As a result, full screen video frames may be compressed and sent to the remote client  along with a signalling frame that notifies the remote client  to use its scaler to increase the size of the received frames to occupy the full display screen.","In an example embodiment, a part of the goal to enhance, ideally maximize, efficiency in processing streaming video results in the Direct Media engine  not operating on every video frame. For example, streaming video capable of being processed by the existing rendering system provided by the operating system may be transmitted to the client without being routed through the Direct Media engine . In the case of a Microsoft Windows\u00ae operating system, if the streaming video can be processed by the DirectShow\u00ae media subsystem, the Direct Media engine  is not invoked. Rather, the video stream is sent over the media slot transport channel  to the remote client directly. Further, full screen video, as indicated by the presence of a stretchblt function call, may be handled separately from the Direct Media engine . In particular, full screen video may be processed by encoding the video in a special full screen mode in the YUV color space. Further, if the region of the video frame containing moving video is smaller than a predetermined size, encoding of the video frame may be skipped, and the video frame may be transmitted to the remote client directly. The rationale for bypassing encoding of such a video frame is that a video frame containing a small region of moving video does not occupy too much bandwidth on the network and does not require excessive decoding or processing on the client side. In one example embodiment, the minimum size of moving video in a video frame that warrants processing by the Direct Media engine  is 320 pixels by 240 pixels. The minimum size of moving video is irrespective of the resolution of the display device that displays the video.","Thus, in an example embodiment, the Direct Media engine  enhances the ability of the thin-client server system  to process streaming video without burdening the thin-client server system  with additional special software, video renderers, or codecs. Moreover, because the Direct Media engine  operates on video frames one frame at a time, very little memory is allocated on the server.","Additionally, because of the encoding scheme used by the Direct Media engine  to output a series of encoded video frames, video and audio synchronization problems are minimized. Each encoded video frame encapsulates audio data that accompanies the video data in the frame. Timing information relating to audio and video synchronization also is encapsulated with the frame. As a result, video frames will never be more out of synchronization for more than one frame. The alternative path for streaming video disclosed herein does not provide time or timestamp information with the transmitted video frames. Additionally, no information about start and stop states is provided. Rather, the application executing video playback is tasked with determining when to start and stop the video playback. In contrast, other systems that stream video may require the use of a unique media player to determine start and stop states. Other systems also may rely on the client to reassemble separate video and audio data streams. This scenario may be susceptible to more severe synchronization problems.","Although the preceding and subsequent embodiments are described with respect to a virtual video device driver, the entirety of the disclosure herein may equally apply to a physical video device driver that is capable of efficiently streaming video from physical devices. The reference to virtual video device drivers may pertain, in some embodiments, to Remote Desktop sessions. However, the techniques disclosed in the present application may equally apply in a one-to-one or one-to-many environment of remote terminals connected to a computer system.","Referring to , a block diagram illustrating an example flow of data for streaming video data is shown. A virtual or physical video device driver  may include a Direct Media engine  and a Core Video driver . With reference to , the virtual or physical video driver  may reside in the operating system abstraction level  or the kernel abstraction level , to the extent the operating system  and kernel  are segregated. In one example embodiment, the virtual or physical video device driver  may operate and be loaded in the kernel space of virtual or physical memory. The virtual or physical video device driver  may operate in conjunction with a video device driver (not shown) and with any video drivers or video processing subsystems or mechanisms provided by the operating system. As previously noted, the virtual or physical video device driver  may operate in conjunction with and be supported by the Microsoft Windows\u00ae operating system, the Linux\u00ae operating system, and other known operating systems.","A client device, such as the thin-client terminal system , may request execution of an application. In a thin-client environment, the thin-client server system  may execute the application on behalf of the client and receive various input requests from the terminal system  to interact with the application. The server system may process the requests and provide an output to the user. The output may include a graphical display of the application. As the thin-client terminal system , in example embodiments, may have limited graphics processing capabilities, the server system may generate and process the graphics to be displayed on a display screen of the terminal system . Graphics capabilities may be handled by an integrated graphics chipset or a separate graphics card along with functionality, in the form of, for example, device drivers and APIs, provided with the operating system. For example, in the Microsoft Windows\u00ae family of operating systems, a graphical driver interface (GDI) is employed to draw graphical objects for display.","As disclosed in the example embodiments discussed herein, not every video format is capable of being processed by Microsoft's DirectShow\u00ae. As a result, the example embodiments disclosed herein discuss a virtual or physical video device driver that provides an alternate path for processing and streaming video data. When the alternate path is invoked, the operating system (OS) GDI calls the virtual or physical video device driver  with a drawing operation, for example, via an OS direct GDI callback interface . In one example embodiment, the OS GDI calls the virtual or physical video device driver  for every drawing operation. In response to the GDI call, the virtual or physical video device driver may call the \u201cDirect Media\u2019 fast updated regions registrator  located in the Direct Media video driver subsystem  to notify the fast updated regions registrator  that some regions of the display screen have been updated. In response to the notification, the regions of the display screen that have been updated are stored in a fast updated region database .","The regions may be analyzed by a Direct Media Fast Updated Region Analyzer  in response to a polling call issued to the virtual or physical video device driver  and received via an internal pool interface . Analysis of the updated regions of the display, as represented in one example embodiment at a moment in time by a video frame stored in a frame buffer, may comprise examining the video frame for regions, potentially corresponding to the updated regions, for moving video. Moving video may be represented by a fast rate of change in successive video frames, a regular period of updating lasting for a predetermined time, and a minimize size of a region in which moving video is suspected. In one example embodiment, the Direct Media Fast Updated Region Analyzer  may look for a rate of change of 12 times a second. In one example embodiment, the Analyzer  may look for a regular period of updating lasting at least one half of a second. Further, in one example embodiment, the Analyzer  may look for a region of moving video of at least 320 pixels by 240 pixels. Any smaller region may not warrant processing by the virtual or physical video device driver  as the network bandwidth cost to transmit a video frame having a small region of moving video may not be prohibitive.","If the Analyzer  discovers regions in the video frame containing moving video, the region(s) may be marked as \u201cstreamed\u201d to indicate that the region contains streaming video. Regions that are marked as \u201cstreamed\u201d are then excluded from processing by a virtual or physical video device driver protocol used to render a video frame. Regions marked as \u201cstreamed\u201d may be aligned depending on whether the virtual or physical video device driver protocol uses alignment. A video frame having regions marked as \u201cstreamed\u201d also may have its background filled with a key color, such as blue, depending on if a client device uses or recognizes key colors.","The region data analyzed by the Analyzer may be stored in a Media Slot Transport buffer  via Media Slot Transport Interface . The region data may be marked in the buffer  as \u201cstreamed\u201d to indicate the region data contains streaming video. The Media Slot Transport\u2014Grabber\/Compressor  may check the buffer  for data. If data is present in the buffer , the Grabber\/Compressor  may compress the data according to a compression protocol. In an example embodiment, the Grabber\/Compressor  may compress the region data using a JPEG image format. The Grabber\/Compressor  then sends the compressed data over a TCP\/IP link  or other transport protocol link to the remote client.","In the event regions marked as \u201cstreamed\u201d or updated regions fail to meet the conditions used by the Analyzer  to identify streaming video regions, the Analyzer may transmit data corresponding to these regions to the virtual or physical video device driver protocol engine , labelled as UXP Engine in , via UXP Engine Internal Interface . As such regions correspond to video display screen data, rather than streaming video data, such regions may be refreshed and sent via TCP\/IP link  to the remote client.","Referring to , a flowchart diagram illustrating an example method for streaming video data is shown. At operation , an application may execute on the thin-client server system  in response to a request from a thin-client terminal system, such as remote client . For example, a browser application may execute on the thin-client server system . The application may access a video file and invoke the graphics display driver or virtual or physical video device driver  to render video frames from the video file. Meanwhile, a virtual or physical video device driver  containing the Direct Media engine  may reside in the operating system.","At operation , a polling call to the virtual or physical video device driver may be placed to begin analyzing the contents of the frame buffer. The polling call may occur at the same time the application is executing video playback in the server system. If the contents of the frame buffer meet the specified conditions for moving video (e.g., fast and regular updating, at least a minimum pixel size), the Direct Media engine  may be invoked to encode a copy of the video frame stored in the frame buffer.","At operation , the virtual or physical video device driver  may check the contents of the frame buffer to determine if new data is present in the frame buffer. If new data is present in the frame buffer, a copy of the frame buffer is created and sent to the Direct Media engine . The Direct Media engine  encodes the video frame according to a predetermined encoding format that is supported by the client system. The encoded video frame is sent to the media slot transport channel  for transmission to the remote client via TCP\/IP or another known transport protocol. The video frame may be marked as sent. In one example embodiment, operations , , and  may be performed concurrently.","Referring to , a flowchart illustrates an example method for streaming video information. At operation , a virtual or physical video device driver residing in an operating system or kernel space of a computer system, such as a thin-client server system , may receive an operating system graphics driver interface (GDI) call when the GDI needs to perform a drawing operation. At operation , the virtual or physical video device driver may call a Direct Media Fast Updated Regions Registrator of a Direct Media Engine subsystem of the virtual or physical video device driver. The Registrator may be informed by the GDI call or by the virtual or physical video device driver that regions in a frame buffer have been updated. At operation , the regions purportedly updated are stored in a Fast Updated Region Database.","At operation , a Direct Media Fast Updated Region Analyzer may be called by a polling call. At operation , the Analyzer may examine the stored region data to identify whether the region data contains streaming video. This determination may be made by identifying whether the region data is updated quickly (e.g., 12 times per second) and regularly (e.g., for a duration of at least one half of a second). The region data is further examined to determine the size of the fast and regular updating. If the size is large enough (e.g., 320 pixels by 240 pixels), then the region is determined to contain streaming video that should be processed by the Direct Media Engine subsystem.","At operation , if the analyzed region data is determined to contain streaming video, the regions are marked as \u201cstreamed\u201d to indicate the presence of streaming video. At operation , the regions marked \u201cstreamed\u201d are excluded from processing by a UXP Engine, which executes an internal virtual or physical video device protocol for rendering graphics. At operation , the regions marked \u201cstreamed\u201d are transmitted to a Media Slot Transport buffer for storage. At operation , a Media Slot Transport Compressor\/Grabber may retrieve the data from the Media Slot Transport buffer and compress the region data using a predetermined compression scheme. The compression scheme may be determined by identifying which schemes are supported by a remote client to whom the display and graphics data is to be sent. In one example embodiment, region data may be compressed using the JPEG image compression scheme. At operation , the compressed region data may be sent to the remote client.","If the analyzed region data is determined not to contain streaming video, at operation , the region data may be returned to the UXP Engine for rendering. At operation , the rendered region data may be transmitted via a Video Slot Transport channel to the remote client for display.","The preceding technical disclosure is intended to be illustrative, and not restrictive. For example, the above-described embodiments (or one or more aspects thereof) may be used in combination with each other. Other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of the claims should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled. In the appended claims, the terms \u201cincluding\u201d and \u201cin which\u201d are used as the plain-English equivalents of the respective terms \u201ccomprising\u201d and \u201cwherein.\u201d Also, in the following claims, the terms \u201cincluding\u201d and \u201ccomprising\u201d are open-ended, that is, a system, device, article, or process that includes elements in addition to those listed after such a term in a claim are still deemed to fall within the scope of that claim. Moreover, in the following claims, the terms \u201cfirst,\u201d \u201csecond,\u201d and \u201cthird,\u201d etc. are used merely as labels, and are not intended to impose numerical requirements on their objects.","In this document, the terms \u201ca\u201d or \u201can\u201d are used, as is common in patent documents, to include one or more than one. In this document, the term \u201cor\u201d is used to refer to a nonexclusive or, such that \u201cA or B\u201d includes \u201cA but not B,\u201d \u201cB but not A,\u201d and \u201cA and B,\u201d unless otherwise indicated. Furthermore, all publications, patents, and patent documents referred to in this document are incorporated by reference herein in their entirety, as though individually incorporated by reference. In the event of inconsistent usages between this document and those documents so incorporated by reference, the usage in the incorporated reference(s) should be considered supplementary to that of this document; for irreconcilable inconsistencies, the usage in this document controls.","The Abstract is provided to comply with 37 C.F.R. \u00a71.72(b), which requires that it allow the reader to quickly ascertain the nature of the technical disclosure. The abstract is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. Also, in the above Detailed Description, various features may be grouped together to streamline the disclosure. This should not be interpreted as intending that an unclaimed disclosed feature is essential to any claim. Rather, inventive subject matter may lie in less than all features of a particular disclosed embodiment. Thus, the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the drawings, which are not necessarily drawn to scale, like numerals describe substantially similar components throughout the several views. Like numerals having different letter suffixes represent different instances of substantially similar components. The drawings illustrate generally, by way of example, but not by way of limitation, various embodiments discussed in the present document.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
