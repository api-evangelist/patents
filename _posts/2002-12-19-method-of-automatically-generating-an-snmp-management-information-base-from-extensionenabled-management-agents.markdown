---
title: Method of automatically generating an SNMP management information base from extension-enabled management agents
abstract: A method and machine readable storage for adding a simple network management protocol (SNMP) interface to an existing resource management extension-enabled management agent. The SNMP interface can be added without modifying the management agent. The method includes the step of reading definitions of managed objects associated with said management agent. The definitions can be read at runtime of the management agent. A SNMP management information base (MIB) definition is automatically generated. The SNMP MIB provides a SNMP representation of the management agent and incorporates SNMP object definitions correlating to at least a portion of read managed object definitions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07099931&OS=07099931&RS=07099931
owner: International Business Machines Corporation
number: 07099931
owner_city: Armonk
owner_country: US
publication_date: 20021219
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Technical Field","This invention relates to the field of resource management, and more particularly, to interfacing network management systems with management agents.","2. Description of the Related Art","Management agents serve as an interface providing a layer of isolation between management systems and managed resources such as business applications, devices, or software implementations of services or policies. Management agents can be implemented using resource management extensions to programming languages. Accordingly, to manage resources via a particular resource management extension architecture, the resource must be enabled in accordance with the specification of the management agent with which the resource is to communicate.","Although resource management extensions exist for various programming languages, one example of a resource management extension architecture is the Java Management Extension (JMX) architecture. JMX\u00ae, defined in the JMX specification, defines an architecture, design patterns, application programming interfaces (APIs), and services for application and network management using the Java programming language. The JMX specification is a set of specifications and development tools for managing Java environments and building management solutions. The JMX specification, which is incorporated herein by reference, has been defined in the document , v1.1 (March 2002), published by Sun Microsystems, Inc. of Palo Alto, Calif.","Although resource management extension architectures continue to gain favor as industry standards, a limited number of such architectures are in operation. Many legacy systems, for example Unix-based products, rely upon Simple Network Management Protocol (SNMP). Presently, no standardized solution exists to provide interoperability between resource management solutions such as JMX and legacy systems using SNMP. In consequence, there is no way to provide a unified management console view of a mixed SNMP legacy and resource management extension-enabled management agent without making significant modifications to the management agent.","Conventional interface solutions between legacy SNMP systems and management agents typically have been implemented as standalone systems which are not integrated into the management agent. As such, the standalone solutions cannot take advantage of the full range of features provided by the management agent. For example, standalone solutions cannot take advantage of notifications.","Another disadvantage of conventional interface solutions is that significant recoding and\/or rebuilding of portions of the management agent is required. That is, to implement a conventional interface, developers must re-build managed objects of the management agent using tools provided by the solution package to ensure that the resulting managed objects have the requisite knowledge of the SNMP management system. To provide another example, conventional solutions for interfacing a JMX management agent with a SNMP system require developers to generate the managed objects or MBeans using a tool provided by the interface solution so that the resulting MBeans have knowledge of the SNMP system.","Such conventional solutions are implemented from the perspective of the SNMP system rather than from the perspective of the management agent. As a result, conventional solutions cannot be applied to existing resource management extension-enabled products, such as JMX-enabled products, without rebuilding and\/or recoding the software management components of the management agent.","The invention disclosed herein provides a method and machine readable storage for interfacing a management agent with a Simple Network Management Protocol (SNMP) based management system. According to the present invention, existing management agent implementations which utilize resource management extension technology can be automatically provided with SNMP support without having to implement code changes within the management agent. The Management Information Base (MIB) can be used by the SNMP management system to communicate with the existing management agent using SNMP protocol.","The method includes the step of reading definitions of managed objects associated with a management agent at runtime of the management agent. A SNMP MIB definition is automatically generated using the managed object definitions to provide a SNMP representation of the management agent. The managed object definitions can be filtered using specified parameters to select a portion of the managed object definitions to be included into the MIB. The managed object definitions can be associated with a SNMP table within the MIB, thereby enabling a managed object to have multiple instantiations.","At least a portion of a name for an attribute and\/or a method can be automatically provided using a name of a managed object corresponding to the attribute and\/or the method. Further, at least one trap corresponding to a unique management agent can be built in the MIB. The trap can include fields which have a one-to-one correspondence with fields of notifications propagated by the unique management agent.","A SNMP protocol adapter can be provided to serve as an interface between the management agent and a SNMP management system. The management agent can be implemented in Java and the resource management extension can be a Java Management Extension (JMX). Further, the management agent can be a JMX management bean server (MBeanServer) and the managed objects can be JMX managed beans (MBeans).","The invention disclosed herein provides a solution for interfacing a management agent with a Simple Network Management Protocol (SNMP) based management system. According to the present invention, existing management agent implementations which utilize resource management extension technology can be automatically provided with SNMP support without having to implement code changes within the management agent. In particular, a mapper tool can be provided which automatically creates a SNMP management information base (MIB) representing the management agent. The MIB can be used by the SNMP management system to communicate with the existing management agent using SNMP protocol. Importantly, the MIB can be created after a product has been deployed, thereby enabling the product to interface with a legacy SNMP management system.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","105","110","115","110","110","115","115"]},"The management agent  can be any of a variety of resource management extension-enabled programming language architectures which serve to isolate the managed resources  of an information technology system from the SNMP management system . The management agent  can function as a management software component server including management software components (managed objects) . For example, according to one embodiment of the present invention, the management agent  can be implemented using the Java Management Extension (JMX) architecture. Accordingly, the management agent  can be a JMX management bean or MBean server.","A MIB  can be created to manage resources via a SNMP management system. The resulting MIB definition provides a SNMP representation of the management agent  which is used by the management system  (or console of the management system) to interpret data from the management agent . For example, the MIB definition can provide logical names for object identifiers (OID's) of the SNMP management system .","The MIB  only needs to be created once, for example after a product has been deployed. If changes are made to the managed objects represented in the MIB , then the MIB  can be updated or recreated. Importantly, the present invention can generate the MIB  at runtime using a mapper tool , which is a program that reads parameters of managed objects  and generates a MIB definition. In order for the MIB definition to properly include all necessary management object  data, any managed objects that will be accessed by the SNMP management system  should be loaded when the MIB  is created. In one arrangement, a program, for example a boot strap program, can used to load all managed objects  when the mapper tool  is activated. The bootstrap program then can terminate when loading of the managed objects  is complete.","The management agent  can include an adapter  for communicating with the SNMP management system . It should be appreciated that various resource management extension architectures, including JMX, define a mechanism for adding protocol adapters. Accordingly, the adapter  can be a plug-in protocol adapter serving as an interface between the management agent  and the SNMP management system .","The adapter  can include mapping data . The mapping data  specifies relationships among SNMP OID's and managed objects . Notably, the mapping data  can be automatically generated after the MIB  has been created. For example, when the adapter  loads, the adapter  can read the MIB definition to create a static mapping of SNMP object identifiers to managed objects. Alternatively, the static mapping can be performed by a mapping tool (not shown). The mapping data  can be dynamically updated or replaced if the MIB  is updated or replaced.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["200","205"]},"A traps group can be defined within the traps node wherein fields in the traps group are mapped to have a one-to-one correspondence with fields of a managed object notification. For example, if the managed object notifications include fields for syntax, access, status and description, the traps within the traps group can incorporate these same fields. Accordingly, a mapping for every field in the notification can be represented as a SNMP trap parameter and all events from the managed objects can be processed using the traps in the traps group.","Each trap in the traps group can be assigned an OID of \u201cx.1.y,\u201d where \u201cy\u201d can begin with 1 and can be incremented by 1 for each successive trap. For example, a first trap in the traps group can be an \u201cevent type\u201d (evType) trap with an OID of x.1.1 (1.3.6.1.4.1.2.6.999.1.1). A second trap in the traps group can be an \u201cevent source\u201d (evSrc) trap with an OID of x.1.2 (1.3.6.1.4.1.2.6.999.1.2). A third trap in the traps group can be \u201cevent sequence number\u201d (evSeqNbr) trap with an OID of x.1.3, and so on. As noted, this is merely an example of a numbering convention and other numbering conventions can be used.","Referring to step , the mapper tool can get a managed object list from the management agent associated with the product. For example, the mapper tool can query the management agent for the managed object list. Referring to decision box  and step , the managed object list can be filtered, for example to restrict the selection of managed objects which are incorporated into the MIB. Alternatively, a complete list of managed objects can be processed by the mapper tool and incorporated into the MIB.","The filter can be provided when certain managed objects are not required to be incorporated into the MIB. For example, certain managed objects may be provided for internal use by a product and may need not be accessible by a system console. The managed objects can be filtered using any method which can be used to selectively discriminate between managed objects. For example, in one arrangement, the mapper tool can provide conditional statements in a query which is sent to the management agent. Accordingly, a filtered list of managed objects can be received by the mapper tool. In another arrangement, the mapper tool can apply a filter to the complete list of managed objects. Still, other filter methods can be used to select managed objects for incorporation into the MIB.","The MIB definition can be created such that a node in the MIB definition tree is defined for each managed object. For example, the managed object nodes can be represented as child nodes below the product node. Referring to steps  and , a first managed object can be read from the managed object list. An OID of \u201cx.z\u201d can be assigned to the managed object, where \u201cz\u201d is an integer beginning with 2 that can be incremented by 1 for each successive object (e.g. 1.3.6.1.4.1.2.6.999.2; 1.3.6.1.4.1.2.6.999.3; 1.3.6.1.4.1.2.6.999.4 . . . ).","Importantly, a SNMP table can be associated with each of the managed object nodes in the MIB. Each SNMP table can be represented in the MIB definition tree as a child node to the managed object with which the SNMP table is associated. The SNMP tables enable managed objects to be instantiated any number of times, with each instantiation being represented as an entry in a corresponding SNMP table.","Each SNMP table can be assigned an OID of \u201cx.z.a,\u201d wherein the \u201cx.z\u201d portion identifies the managed object with which the SNMP table is associated. Since an object typically only contains one table, the \u201ca\u201d portion of the table OID will typically be 1 for each table created. However, if it is desired that more than one table be created for a particular object, \u201ca\u201d can be incremented by one for each successive table. The logical name of the table can be the classname of the managed object with a descriptor appended to the name. For example, in a JMX implementation, a table labeled \u201cPersonMBeanTable\u201d represents the JMX Person MBean.","Object information then can be obtained for the managed object, as shown in step , and nodes can be created in the MIB definition tree for all object attributes and methods associated with the object, as shown in step . For example, the attributes and methods of a particular managed object can be entered into an SNMP table associated with the managed object. The attributes and methods can be repeated in each table entry which represents an instance of the managed object. Attribute \u201cGet\u201d and \u201cSet\u201d capabilities can be made to match between the SNMP protocol and the resource management extension architecture. For example, within a JMX implementation, if there is a getter and not a setter in the JMX MBean for a specific attribute, the MIB definition can indicate this with a read-only attribute.","The logical name of each of the attributes and methods defined in the MIB definition must match those attributes and methods exposed in the managed object. Thus, if the name attribute of a person is referred to as \u201cName\u201d in the MIB definition, the name attribute also should be referenced as \u201cName\u201d in the managed object. Further, the attribute and method names can be prefixed with a variable which is unique to the object with which the attributes and methods are associated. This particular naming convention is a requirement of SNMP to ensure uniqueness within the MIB. For instance, attributes and methods can be prefixed with the classname of the managed object. For example, the logical name for an index attribute associated with a person JMX MBean (personMBean) can be personMBeanIndex. However, variable names for objects in the MIB are not relied upon by a SNMP protocol adapter to perform mapping between SNMP OID's and managed objects. Consequently, a user can opt to edit the MIB to change logical variable names as desired, so long as a same variable name is not repeated for multiple objects.","An OID can be assigned to each entry in the table. The entry OID's can follow the convention x.z.a.b, where b is be an integer beginning with 1 and being incremented by 1 for each successive entry. The attributes and methods can be assigned an OID following the convention x.z.a.b.c, where \u201cc\u201d can begin with 1 and be incremented by 1 for each successive attribute or method within the entry. For example, OID's 1.3.6.1.4.1.2.6.999.2.1.1.1; 1.3.6.1.4.1.2.6.999.2.1.1.2; and 1.3.6.1.4.1.2.6.999.2.1.1.3 can represent successive attributes and\/or methods in an entry 1.3.6.1.4.1.2.6.999.2.1.1 contained within table 1.3.6.1.4.1.2.6.999.2.1. The table is associated with managed object 1.3.6.1.4.1.2.6.999.2.","Referring to decision box  and step , after the attributes and methods of an object have been entered into the MIB, the mapper tool can select the next managed object in the managed object list and increment the OID \u201cx.z\u201d by one. Accordingly, an OID of \u201cx.3\u201d (e.g. 1.3.6.1.4.1.2.6.999.3) will be assigned to the next managed object, \u201cx.4\u201d (e.g. 1.3.6.1.4.1.2.6.999.4) to the next, and so on. Reading and storage of object data then can repeat until the information for the last requested object on the managed object list has been stored, at which point the MIB can be stored, as shown in step . The MIB is then ready to be accessed.","A hierarchical node structure  representing an exemplary MIB generated by the method of  is shown in . Traps node  beneath the product node  represents the traps group which is associated with the product. As noted, the traps group  can be defined within the traps node  wherein fields in the traps group are mapped to have a one-to-one correspondence with fields of a managed object notification.","One or more additional nodes can be provided beneath the product node  to represent managed objects associated with the product in the MIB. For example, a personMBean object node  can be provided beneath the product node  to represent a JMX MBean named \u201cperson\u201d (personMBean). Additional object nodes can represent other managed objects as well. For example, a companyMBean node  can be provided to represent a JMX MBean named \u201ccompany\u201d (companyMBean).","Notably, object table nodes ,  can be created for the managed objects and associated with the object nodes , . As is known to those skilled in the art, representing objects in an MIB using tables enables the objects to have multiple instances. Further, entry nodes, for example personMBeanEntry  and company MBeanEntry , can be associated with the table nodes. The entry nodes ,  are SNMP required nodes which help to define the hierarchy of the MIB.","Leaf nodes representing object methods and attributes can be associated with the respective entry nodes. For instance, personMBean leaf nodes  can represent fields having attributes and methods corresponding to the person MBean object and companyMBean leaf nodes  can represent attributes and methods corresponding to the companyMBean object. It should be noted that although the examples contained herein are JMX MBeans, the present invention is not thus limited and can be used with any resource management extension technology.","The present invention can be realized in hardware, software, or a combination of hardware and software. The present invention can be realized in a centralized fashion in one computer system, or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.","The present invention also can be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code or notation; b) reproduction in a different material form.","This invention can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly, reference should be made to the following claims, rather than to the foregoing specification, as indicating the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["There are shown in the drawings embodiments which are presently preferred, it being understood, however, that the invention is not limited to the precise arrangements and instrumentalities shown.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIG. 2"]}]},"DETDESC":[{},{}]}
