---
title: Scope-based extensibility for control surfaces
abstract: A server computing system stores a base definition file containing a hierarchy of elements defining a default control surface. In addition, the server computing system stores an extension definition file containing one or more elements defining a customized control surface based on the default control surface. The server computing system generates a modified version of the base definition file in which each element in the base definition file having an identifier corresponding to an identifier of an element in the extension definition file is modified in a way indicated by the element in the extension definition file. The server computing system uses the modified version of the base definition file to generate a resource used by a client computing system to present the customized control surface in a web page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08799353&OS=08799353&RS=08799353
owner: 
number: 08799353
owner_city: 
owner_country: 
publication_date: 20090330
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Traditionally, the Internet has been a platform that enables the retrieval and display of static content. Today, the Internet is becoming a platform that enables users to create and manage rich content. For example, several leading companies provide Internet-based services that enable users to create and manage word-processing documents, spreadsheets, presentations, and other types of rich content.","To create and manage rich content, a web page may include a control surface. The control surface is a set of user-selectable controls. When the user selects a control in the control surface, a functionality associated with the selected control is provided without navigating the user away from the page. For example, the control surface may include a boldface control that, when selected, makes selected text in the web page bold. In another example, the control surface may include a control that, when selected, spell checks a comment and a control that, when selected, adds the comment post to a blog.","A server computing system stores a base definition file containing a hierarchy of elements defining a default control surface. In addition, the server computing system stores an extension definition file containing one or more elements defining a customized control surface based on the default control surface. The server computing system generates a modified version of the base definition file in which each element in the base definition file having an identifier corresponding to an identifier of an element in the extension definition file is modified in a way indicated by the element in the extension definition file. The server computing system uses the modified version of the base definition file to generate a resource used by a client computing system to present the customized control surface in a user interface.","This summary is provided to introduce a selection of concepts in a simplified form. These concepts are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is this summary intended as an aid in determining the scope of the claimed subject matter.","As briefly described above, this disclosure is directed to techniques for deployment of a customized control surface. This disclosure describes the techniques with reference to the attached figures. The attached figures are examples. It should be understood that the attached figures do not represent a sole way of implementing the techniques of this disclosure.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","100"]},"As illustrated in the example of , system  includes a client computing system . Client computing system  is an electronic computing system. As used in this disclosure, an electronic computing system is a set of one or more electronic computing devices. This disclosure describes details of an example electronic computing device with reference to . Client computing system  may include a wide variety of different types of electronic computing devices. For example, client computing system  may include a personal computer, a mobile telephone, a personal digital assistant (PDA), a digital media player, a television set top box, a television, a home appliance, an industrial appliance, a device integrated into a vehicle, a video game console, an Internet kiosk, a netbook, a laptop computer, a handheld video game device, an intermediate network device, a standalone server device, a server blade device, a network storage device, an Automated Teller Machine, a wearable computing device or another type of electronic computing device.","In addition to client computing system , system  includes a server computing system . Server computing system  is an electronic computing system. Like client computing system , server computing system  may include a wide variety of different types of electronic computing devices. For instance, server computing system  may include any of the types of electronic computing devices described above.","In the example of , server computing system  includes a data storage system . As used in this disclosure, a data storage system is a set of one or more computer-readable data storage media. For example, data storage system  may include one or more hard disk drives, optical drives, random-access memory units, registers, flash memory units, tape drives, and\/or other types of computer-readable data storage media. Data storage system  is capable of storing a wide variety of data. For example, data storage system  is capable of storing computer-executable instructions, variables, user data, file systems, databases, and\/or other types of data.","System  also includes a network . Network  is an electronic communication network. Network  facilitates electronic communication between client computing system  and server computing system . Network  may be implemented in a variety of ways. For example, network  may be a wide-area network, such as the Internet. In other examples, network  may be a local-area network, a metropolitan-area network, or another type of electronic communication networks. Network  may include wired and\/or wireless data links. A variety of communications protocols may be used in network . Such communications protocols include, but are not limited to, Ethernet, Transmission Control Protocol (TCP), Internet Protocol (IP), Hypertext Transfer Protocol (HTTP), SOAP, remote procedure call (RPC) protocols, user datagram protocol (UDP), IPSec, Resource Reservation Protocol (RSVP), Internet Control Message Protocol (ICMP) and\/or other types of communications protocols.","Server computing system  hosts a plurality of network-accessible resources. For example, server computing system  may host a website containing a plurality of web pages. The network-accessible resources may include a wide variety of resources. For example, the network-accessible resources may include web pages, media streams, digital images, media files, document files, network-accessible application programming interfaces, extensible markup language (XML) files, executable files, and\/or other types of resources.","Each network-accessible resource hosted by server computing system  is associated with a resource identifier. For example, each network-accessible resource hosted by server computing system  may be associated with a uniform resource locator (URL).","To access a resource hosted by server computing system , client computing system  sends a resource request to server computing system  via network . The resource request specifies a resource identifier of the resource. Client computing system  may use a variety of communications protocols to send the resource request to server computing system . In a first example, client computing system  may use the SOAP protocol to send the resource request to server computing system . In a second example, client computing system  may use the HTTP protocol to send the resource request to server computing system. In this second example, the resource request is an HTTP request specifying a resource name of the resource and a host name of server computing system .","Upon receiving the resource request, server computing system  retrieves from data storage system  a source file associated with the requested resource. Server computing system  may perform a variety of actions of the source file. For example, if the requested resource is an ASP.NET web page, the source file is an XML document defining the content of the ASP.NET web page. In this example, server computing system  processes the source file to generate an HTML file that server computing system  sends to client computing system . In another example, if the requested resource is a digital image file, the source file may contain the digital image file. In this example, client computing system  may simply forward the digital file to client computing system .","Server computing system  hosts one or more control surface resources. A control surface resource is a file containing information usable by a client computing system to deploy a control surface in a user interface. As used in this disclosure, a control surface is a set of user-selectable controls. In one example, a control surface may be a control ribbon. Upon receiving a resource request for a control surface resource, server computing system  automatically retrieves a base definition file from data storage system . The base definition file comprises a hierarchy of elements. The hierarchy of elements in the base definition file defines a default control surface. The user interface may be a wide variety of graphical user interfaces. For example, the user interface may be a web page, a user interface of a general purpose client application, a user interface of a special purpose client application, or another type of graphical user interface.","Each element in the base definition file is associated with an identifier. No two elements in the base definition file are associated with the same identifier. The identifiers may be implemented in a variety of ways. For example, the identifiers may be implemented as text strings, alphanumeric strings, integers, floating point numbers, and data of other data types.","The base definition file may be implemented in a variety of ways. For example, the base definition file may be implemented as an XML file. In this example, each element in the hierarchy of elements in the base definition file is an XML element. Furthermore, in this example, each element includes an attribute specifying the identifier of the element.","In addition, server computing system  automatically retrieves at least one applicable extension definition file from data storage system . An extension definition file comprises a hierarchy of elements defining a customized control surface based on the default control surface. Each element in the extension definition file is associated with an identifier. The extension definition file may be implemented in a variety of ways. For example, the extension definition file may be implemented as an XML file. In this example, each element in the hierarchy of elements in the extension definition file is an XML element. Furthermore, in this example, each element includes an attribute specifying the identifier of the element. Each element in the extension definition file explicitly or implicitly indicates an action.","After retrieving the base definition file and the extension definition file, server computing system  automatically generates a modified version of the base definition file. In one example, server computing system  generates the modified version of the base definition file by first generating a base parse tree. The base parse tree contains nodes representing each element in the base definition file. In one example implementation, each node is a data structure having members for each attribute of an element. The nodes in the base parse tree have same hierarchical structure as the elements in the base definition file. For example, the base definition file may include a first element and a second element, the first element being a parent of the second element. In this example, the base parse tree includes a first node and a second node. The first node represents the first element and the second node represents the second element. In this example, the first node is a parent of the second node. Server computing system  also automatically generates an extension parse tree. The extension parse tree contains nodes representing each element in the extension definition file.","As described in detail below with regard to , after generating the base parse tree, server computing system  automatically examines each node in the parse tree. For each node in the base parse tree having an identifier corresponding to an identifier of a node in the extension parse tree, server computing system  automatically modifies the element in the base parse tree by performing the action indicated by the node in the extension parse tree. For example, a first node in the base parse tree has the identifier \u201c1234\u201d and a second node in the extension parse tree has the identifier \u201c1234\u201d and specifies a \u201creplace subtree\u201d action. In this example, server computing system  automatically removes the first node and each descendant node of the first node from the base parse tree. Further, in this example, server computing system  automatically adds the second node and each descendant node of the second node to the base parse tree in place of the first node and the first node's descendant nodes. In this example, the modified parse tree is the modified version of the base definition file.","After generating the modified version of the base definition file, server computing system  automatically uses the modified version of the base definition file to generate the requested control surface resource. Server computing system  then sends the requested control surface resource to client computing system . As described below with reference to , client computing system  is configured to use the control surface resource to deploy a control surface in a user interface. A user of client computing system  is then able to use the control surface to invoke functionalities associated with the controls in the control surface.","An administrator is able to define extension definition files. By defining appropriate extension definition files the administrator is able to effectively change the default control surface defined by the base definition file into a customized control surface suitable for a particular native application, web application, web site, web page, or web part. For instance, the administrator is able to define extension definition files that remove tabs, controls, groups of controls, menus, and so on from the default control surface. Further, the administrator is able to define extension definition files that add tabs, controls, groups of controls, menus, buttons, and so on to the default control surface.","In this way, the extension definition file acts to replace a default control surface with a customized control surface. The customized control surface may include more or fewer controls than the default control surface.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 2"],"b":["106","106","106"]},"As illustrated in the example of , server computing system  comprises an interface module , a server application , and a host application . In addition, server computing system  comprises data storage system . Data storage system  comprises a base definition file , a set of extension definition files A-N (collectively, \u201cextension definition files \u201d), and an extension association table .","Interface module  enables server computing system  to send and receive information on network . When interface module  receives a resource request, interface module  provides the resource request to server application . As described below with reference to , when server application  receives a resource request requesting a control surface resource, server application  identifies host application  as an application to process the resource request. When host application  receives the resource request, host application  uses base definition file  and one or more of extension definition files  to generate the requested control surface resource. Server application  then uses interface module  to send the requested control surface resource to client computing system .","As briefly described above, base definition file  comprises a hierarchy of elements defining a default control surface. In one example implementation, base definition file  defines the default control surface such that the default control surface includes one or more tabs. Each tab comprises a tab title and a control area. The tab title of a tab includes the name of the tab. The control area of a tab is an area capable of containing one or more controls. The tab titles of each tab in the control surface are presented along the top of the control surface. As described below, clicking on a tab title of a tab causes the command area of the tab to be displayed. For example, base definition file  may include a set of tabs that facilitate the management of a blog. In this example, base definition file  may include a \u201cPosts\u201d tab and a \u201cComments\u201d tab. The \u201cPosts\u201d tab includes controls enabling the user to manage blog posts and the \u201cComments\u201d tab includes controls enabling the user to manage comments.","Controls in a control area of a tab may be divided into one or more control groups. A control group is a visual grouping of logically associated controls. Each control group has a title and a control area. Continuing the previous example, the posts tab may include a control group with the title \u201cNew\u201d and a control group with the title \u201cPosts.\u201d Controls in the \u201cNew\u201d control group enable a user to create a new blog post. Controls in the \u201cPosts\u201d group enable a user to manage existing blog posts.","A control group may include a variety of different types of controls. For instance, a control group may include button controls, drop-down box controls, check box controls, menu controls, and so on. Continuing the above example, the \u201cNew\u201d control group may contain a single button labeled \u201cNew Post\u201d and the \u201cPosts\u201d group may contain buttons labeled \u201cEdit Post,\u201d \u201cView Post,\u201d \u201cManage Permissions,\u201d \u201cDelete Post,\u201d and so on. In this example, base definition file  may appear as follows:",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Surface Id=\u201dSurface\u201d . . . >"]},{"entry":[{},"\u2003<Tabs Id=\u201dSurface.tabs\u201d>"]},{"entry":[{},"\u2003\u2003<Tab Id=\u201dSurface.Blog.Posts\u201d . . . Title=\u201dPosts\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<Groups Id=\u201dSurface.Blog.Posts.Groups\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<Group Id=\u201dSurface.Blog.Posts.New\u201d title=\u201dNew\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003<Controls Id=\u201dSurface.Blog.Posts.New.Controls\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<Button"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003Id=\u201dRibbon.Blog.Posts.New.NewPost\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003Sequence=\u201d3\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003Command=\u201dNewListItem\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003LabelText=\u201dNew Post\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003Image16by16=\u201d\/_layouts\/images\/newitem.gif\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003Image32by32=\u201d\/_layouts\/images\/menunewitem.gif\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003Alt=\u201dNew Post\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003<\/Controls>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/Group>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<Group Id=\u201dSurface.Blog.Posts.Posts\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003<Tab Id=\u201dSurface.Blog.Comments\u201d . . . Title=\u201dComments\u201d>"]},{"entry":[{},"\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003<\/Tabs>"]},{"entry":[{},"<\/Surface>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"In this disclosure, interface module , server application  and host application  are referred to as functional modules of server computing system . The functional modules of server computing system  may be implemented in a wide variety of ways. In a first example, one or more of the functional modules of server computing system  may be implemented as sets of instructions stored at a data storage system. In this first example, a processing unit within server computing system  may execute the sets of instructions, thereby causing server computing system  to perform the behaviors associated with one or more of the functional modules of server computing system . As used in this disclosure, a processing unit is a set of one or more physical electronic integrated circuits that are capable of executing instructions. In a second example, one or more of the functional modules of server computing system  are implemented as one or more application-specific integrated circuits (ASICs). The ASICs cause server computing system  to perform the behaviors associated with one or more of the functional modules of server computing system . In this second example, the ASICs may be specifically designed to perform the behaviors associated with one or more of the functional modules of server computing system .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 3"],"b":["104","104","104"]},"As illustrated in the example of , client computing system  comprises an interface module  and a web browser application . Interface module  enables client computing system  to communicate on network  (). For example, network interface module  enables client computing system  to send and receive communication protocol messages on network . As described below with reference to , web browser application  enables a user to interact with client computing system  to cause client computing system  to retrieve resources available on network  and to display certain types of resources.","In this disclosure, interface module  and web browser application  are referred to as functional modules of client computing system . The functional modules of client computing system  may be implemented in a wide variety of ways. In a first example, one or more of the functional modules of client computing system  may be implemented as sets of instructions stored at a data storage system. In this first example, a processing unit within client computing system  may execute the sets of instructions, thereby causing client computing system  to perform the behaviors associated with one or more of the functional modules of client computing system . In a second example, one or more of the functional modules of client computing system  are implemented as one or more ASICs. The ASICs cause client computing system  to perform the behaviors associated with one or more of the functional modules of client computing system . In this second example, the ASICs may be specifically designed to perform the behaviors associated with one or more of the functional modules of client computing system .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIGS. 4-7"],"b":["400","106","400","106","106","106","106","400"]},"Initially, server application  receives a resource request (). The resource request requests a resource hosted by server computing system . The resource request includes a resource identifier that identifies the requested resource.","In response to receiving the resource request, server application  identifies a host application associated with the requested resource (). Server application  may identify the host application in a variety of ways. For example, server application  may identify the host application based on the data type of the requested resource. In another example, server application  may identify the host application based on the website containing in the requested resource. In this disclosure, it is assumed that server application  identifies host application  as the host application associated with the requested resource.","After server application  identifies host application  as the host application associated with the requested resource, server application  provides the resource identifier of the requested resource to host application  (). Server application  may provide the resource identifier of the requested resource to host application  in a variety of ways. For example, server application  may provide the resource identifier of the requested resource to host application  by invoking a method of host application  and providing the resource identifier as a parameter of the method.","Subsequently, server application  receives the requested resource from host application  (). Server application  may receive the requested resource from host application  in a variety of ways. For example, server application  may receive the requested resource from host application  as a return parameter of a method invoked when server application  provided the resource identifier to host application .","Upon receiving the requested resource, server application  provides the requested resource to interface module  for delivery to client computing system  via network  ().",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 5","b":["500","106","500","106","106","106","106","500"]},"Operation  starts when host application  receives a resource identifier from server application  (). In response to receiving the resource identifier, host application  automatically retrieves base definition file  from data storage system  ().","Host application  then automatically identifies one or more of extension definition files  as applicable to the requested resource (). Host application  may identify one or more of extension definition files  as applicable to the requested resource in a variety of ways. For example, host application  may determine that extension definition file A is applicable to the requested resource when the requested resource is associated with a particular web application associated with extension definition file A. Furthermore, in this example, host application  may determine that extension definition file B is applicable to the requested resource when the requested resource is in a particular website associated with extension association file B. Furthermore, in this example, host application  may determine that extension definition file C is applicable to the requested resource when the requested resource is in a particular webpage associated with extension definition file C. Extension association table  in data storage system  may store data associating extension definition files  with individual resources or groups of resources hosted by server computing system . After identifying the applicable extension definition files, host application  retrieves the applicable extension definition files from data storage system  ().","After host application  retrieves the applicable extension definition files, host application  automatically generates an initial parse tree of base definition file  (). As described briefly above, the parse tree is a data structure comprising a set of nodes. Each node in the parse tree represents an element in base definition file . The nodes are linked together to represent the parent-child relationships among the elements in base definition file .","Each node is a data structure comprising one or more properties. The properties of a node include an identifier property. The identifier property of a node stores the identifier of the node. For example, the identifier property of a node representing a \u201c<tab Id=\u201csurface.tab.blog\u201d> . . . <\/tab>\u201d in base definition file  may have the value \u201csurface.tab.blog.\u201d Further, the properties of a node include a type property. The type property of a node stores a value indicating an element type. For example, the type property of a node representing a \u201c<tab . . . > . . . <\/tab>\u201d element in base definition file  may have the value \u201ctab.\u201d In one example implementation, a node representing an element in base definition file  has a property for each attribute of the element.","Host application  may generate a parse tree for all or part of the base definition file. In one example implementation, a first resource identifier identifies a control surface resource based on only those elements of base definition file  that are tab elements or ancestors of tab elements. In this example implementation, when host application  receives this resource identifier, host application  does not include in the parse tree any nodes representing child nodes of tab elements. Furthermore, in this example implementation, additional resource identifiers identify control surface resources based on only those elements of base definition file  that are tab elements or descendants of tab elements. In this example implementation, when host application  receives one of these resource identifiers, host application  only includes in the parse tree nodes representing a tab node and descendant nodes of the tab node. As described below with reference to , this example implementation may be more efficient than generating a parse tree of all of base definition file .","After generating the parse tree, host application  automatically generates parse trees for each applicable extension definition file (). The parse trees for the applicable extension definition files are data structures comprising sets of nodes. Each node in a parse tree for an extension definition file represents an element in the extension definition file. The nodes in the parse tree for the extension definition file are linked together to represent the parent-child relationships among the elements in the extension definition file. Furthermore, each node in the parse tree for the extension definition file includes properties storing attributes of represented elements of the extension definition file.","Next, host application  automatically pushes references to each of the applicable extension definition files onto an extension stack (). The extension stack is a stack data structure capable of storing references to applicable extension definition files. As mentioned briefly above, extension definition files are associated with differing scopes of applicability. For instance, a first extension definition file may be applicable to an entire web application, a second extension definition file may be applicable to a site collection within the application, a third extension definition file may be applicable to a site within the site collection, and so on. Associating extension definition files with differing scopes enables an administrator to customize control surfaces for various purposes. Host application  pushes the references to the applicable extension definition files onto the extension stack starting with a most-specific one of the applicable extension definition files and progressing to the least-specific one of the applicable extension definition files. For example, if the applicable extension definition files include a first extension definition file associated with a site collection and a second extension definition file associated with a site within the site collection, host application  first pushes a reference to the second extension definition file onto the extension stack and then pushes a reference to the first extension definition file onto the extension stack.","After pushing the references to each of the applicable extension definition files on the extension stack, host application  automatically determines whether the extension stack is empty (). In other words, host application  automatically determines whether the extension stack includes any references to applicable extension definition files.","In response to determining that the extension stack is not empty (\u201cNO\u201d of ), host application  automatically pops a reference to a current extension definition file from the extension stack (). Popping a reference to a current extension definition file from the extension stack removes the reference to the most-general remaining applicable extension definition file from the extension stack.","Next, host application  modifies the parse tree of base definition file  using the parse tree of the current extension definition file (). An example operation of host application  to modify the parse tree of base definition file  using the parse tree of the current extension definition file is explained below with reference to . After modifying the parse tree of base definition file  using the parse tree of the current extension definition file, host application  loops back and again determines whether the extension stack is empty ().","In response to determining that the extension stack is empty (\u201cYES\u201d of ), host application  automatically uses the modified parse tree of base definition file  to generate the requested control surface resource (). In the example of , the requested control surface resource is the resource identified by the resource identifier provided to host application  at step . Host application  may use the modified parse tree of base definition file  to generate the requested control surface resource in a variety of ways. For example, host application  may perform a post-order traversal of the modified parse tree. In this example, as host application  traverses each node in the modified parse tree, host application  invokes a function associated with the type of the node. The function associated with the type of the node generates output be included in the requested control surface resource. The requested control surface resource may be formatted in a variety of ways. For example, the requested control surface resource may be formatted as an XML file containing XML elements. In another example, the requested control surface resource may be formatted as a JavaScript Object Notation (JSON) file.","After generating the requested control surface resource, host application  automatically adds a legacy extension tab to the requested control surface resource (). The legacy extension tab is a tab within the control surface. The legacy extension tab includes user-selectable controls added using other control surface editing systems. For example, a previous version of host application  may have included a control surface customization extension point. In this example, a programmer may register a block of code to the control surface customization extension point. In this example, when the previous version of host application  receives a request for a control surface, the previous version of host application  executes all blocks of code registered to the control surface customization extension point. In this example, the block of code registered to the control surface customization extension point may add custom controls to the requested control surface. Because an enterprise may have invested considerable resources in developing the block of code, the enterprise may not want to do away with the block of code in favor of the customization technique described above. In this example, host application  uses the block of code to generate user-selectable controls in a separate legacy controls tab. In this way, the custom controls of the block of code are still available.","After using the modified parse tree of base definition file  to generate the requested control surface resource, host application  automatically returns the requested control surface resource to server application  (). Host application  may return the requested control surface resource to server application  in a variety of ways. For example, host application  may return the requested control surface resource to server application  as a return object of a method of host application  invoked by server application . As explained above with reference to , server application  may use interface module  to send the requested control surface resource to client computing system .",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 6","FIG. 6"],"b":["600","204","206","600","204","204","204","204","600","206"]},"Operation  begins when host application  pushes a root node of the base parse tree onto a node stack (). The node stack is a stack data structure capable of storing references to nodes. Next, host application  automatically determines whether the node stack is empty (). In other words, host application  automatically determines whether the node stack includes any references to any nodes.","In response to determining that the node stack is not empty (\u201cNO\u201d of ), host application  automatically pops a reference to a current node off the node stack (). Popping the reference to the current node off the node stack removes the reference to the current node from the node stack.","Next, host application  determines whether the identifier of the current node corresponds to an identifier of a node in the current extension parse tree (). For example, the identifier property of current node may have a value of \u201csurface.tabs.blog.\u201d In this example, host application  determines whether any node in the current extension parse tree has an identifier property having the value \u201csurface.tabs.blog.\u201d In the example of , a node in the current extension parse tree having an identifier corresponding to the identifier of the current node is referred to as the \u201ccorresponding node.\u201d In addition, the corresponding node may have one or more descendant nodes. In the example of , the corresponding nodes and its descendant nodes are referred to as the \u201ccorresponding subtree.\u201d","In response to determining that the identifier of the current node does not correspond to an identifier of any node in the current extension parse tree (\u201cNO\u201d of ), host application  automatically pushes onto the node stack references to each child node of the current node (). For example, if the current node has two child nodes, host application  automatically pushes references to each of these child nodes onto the node stack. In another example, if the current node does not have any child nodes, host application  does not push any reference to any node onto the node stack. After pushing onto the node stack references to each child node of the current node, host application  loops back and again determines whether the node stack is empty ().","On the other hand, in response to determining that the identifier of the current node corresponds to an identifier of a node in the current extension parse tree (\u201cYES\u201d of ), host application  automatically determines whether the action indicated by the corresponding node is an add child action (). In one example implementation, host application  determines whether the action indicated by the corresponding node is an add child action by determining whether an action property of the corresponding node specifies the add child action.","In response to determining that the action indicated by the corresponding node is an add child action (\u201cYES\u201d of ), host application  automatically adds the corresponding subtree to the base parse tree as a child subtree of the current node (). Thus, if the current node had two child subtrees, host application  would add the corresponding subtree as a third subtree of the current node. A child subtree of a node is a child node of the node and each descendant node of the child node.","After adding the corresponding subtree to the base parse tree as a child subtree of the current node, host application  pushes onto the node stack references to each child node of the current node (). Because host application  has already added the corresponding subtree to the parse tree, the references pushed onto the node stack include a reference to the corresponding node. After pushing onto the node stack references to each child node of the current node, host application  automatically loops back and again determines whether the node stack is empty ().","In response to determining that the action indicated by the corresponding node is not an add child action (\u201cNO\u201d of ), host application  automatically determines whether the action indicated by the corresponding node is a remove action (). In response to determining that the action indicated by the corresponding node is a remove action (\u201cYES\u201d of ), host application  automatically removes the current node's subtree from the base parse tree (). The current node's subtree comprises the current node and all descendant nodes of the current node. In this way, the current extension definition file may act to remove controls from the control surface. For example, the current node may represent a tab element defining a tab in the control surface. In this example, the remove action of the corresponding node effectively removes the tab from the control surface. After removing the current node's subtree from the base parse tree, host application  automatically loops back and again determines whether the node stack is empty ().","In response to determining that the action indicated by the corresponding node is not the remove action (\u201cNO\u201d of ), host application  automatically determines whether the action indicated by the corresponding node is a replace action (). If host application  determines that the action indicated by the corresponding node is a replace action (\u201cYES\u201d of ), host application  replaces the current node with the corresponding node (). For example, assume that the current node represents the following element in base definition file : \u201c<group Id=\u201csurface.blog.posts.posts\u201d title=\u201cPosts\u201d>. . . <\/group>\u201d and assume that the corresponding node represents the following element in the current extension definition file: \u201c<group Id=\u201csurface.blog.posts.posts\u201d title=\u201cMy Posts\u201d>. . . <\/group>.\u201d In this example, the replace action effectively replaces the title attribute \u201cPosts\u201d with the title attribute \u201cMy Posts.\u201d Replacing the current node with the corresponding node does not replace the current node's descendant nodes with the corresponding node's descendant nodes or otherwise change the current node's descendant nodes.","After replacing the current node with the corresponding node, host application  automatically pushes onto the node stack references to each child node of the current node (). Host application  then automatically loops back and again determines whether the node stack is empty ().","In response to determining that the action indicated by the corresponding node is not the replace action (\u201cNO\u201d of ), host application  automatically removes the current node's subtree from the base parse tree (). Next, host application  automatically adds the corresponding subtree to the base parse tree in place of the current node's subtree (). In this way, host application  effectively replaces the current node and the current node's descendant nodes with the corresponding node and the corresponding node's descendant nodes. For example, an administrator may consider the first group of controls unnecessary in a given scope but considers the second group of controls to be necessary in the given scope. Accordingly, in this example, the administrator designs the extension definition file such that the extension definition file includes an element defining the second group of controls, the element specifying the identifier of an element in the base definition file defining the first group of controls. In this example, if the current node represents the element defining the first group of controls, the corresponding node represents the element defining the second group of controls. In this way, the second group of controls replaces the first group of controls.","After adding the corresponding node's subtree to the base parse tree, host application  automatically pushes onto the node stack references to each child node of the corresponding node (). Host application  then automatically loops back and again determines whether the node stack is empty ().","In response to determining that the node stack is empty (\u201cYES\u201d of ), host application  has finished modifying the base parse tree using the current extension parse tree ().",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 7","b":["700","104","700","104","104","104","104","700"]},"In the example of , operation  begins when web browser application  sends a web page request to server computing system  via network  (). The web page request requests a web page hosted by server computing system . The web page request includes a resource identifier identifying the web page. Web browser application  may send the web page request in response to a variety of events. For example, web browser application  may send the web page request in response to receiving a URL associated with the web page from a user of client computing system .","Subsequently, web browser application  receives the web page from server computing system  via network  (). The web page includes one or more scripts that operate to deploy a control surface within the web page. The scripts may be formatted in a variety of ways. For example, the scripts may be formatted as JavaScript scripts, VBScript scripts, or may be formatted in another scripting language. The scripts include a control surface request script. In one example implementation, the web page includes one or more control surface resource URLs. The control surface resource URLs identify control surface resources. As described below, web browser application  may use the control surface resource URLs to request the control surface resources from server computing system . To facilitate caching at web browser application , server computing system  may, in one example implementation, generate the control surface resource URLs such that the control surface resource URLs include a hash parameter representative of the extension definition files currently installed at server computing system . For instance, in this example implementation, the hash parameter may be a hash value calculated over each of extension definition files .","After receiving the web page, web browser application  renders and displays the web page (). Rendering the web page entails processing the received web page to generate a property-formatted viewable document. Web browser application  displays this document. As described below, the event handlers listen for events occurring in the web page. In addition, web browser application  begins execution of any of the scripts that are meant to be executed when the web page is received.","In the example of , web browser application  initiates execution of a property polling script in the web page (). The property polling script polls the properties of objects in the web page and builds a properties bag that specifies the current properties of the objects. In one example implementation, the property polling script polls the properties of objects in the web page on a periodic basis. Furthermore, in some example implementations, the property polling script polls the properties of objects in the web page in response to a direct request by another script module in the web page. As described below, scripts use the properties bag to determine whether to enable or disable controls in the control surface. For example, the web page may include a text entry area and the control surface may include a copy button. Furthermore, in this example, the text entry area has a property indicating whether text in the text entry area is selected. The property polling script polls the text entry area and adds a property to the property bag indicating whether text is selected. If text is selected, a script associated with the copy control may disable the copy control when no text is selected and enable the copy control when text is enabled.","After initiating property polling, web browser application  registers event handlers specified by the scripts in the web page (). Event handlers are portions of the scripts executed when particular events occur. In one example implementation, the control surface request script includes an on-load event handler. After web browser application  registers the event handlers, web browser application  initiates an event detection loop.","During the event detection loop, web browser application  first detects whether an on-load event has occurred (). In response to detecting an on-load event, web browser application  sends a request for a control surface resource to server computing system  (). Web browser application  requests the control surface resource because the control surface request script in the web page includes an event listener that listens for the on-load event. To request the control surface resource, web browser application  sends a control surface request to server computing system . The control surface request includes the URL identifying the control surface resource.","After sending the request for the control surface resource, web browser application  receives the control surface resource from server computing system  (). In one example implementation, when web browser application  receives the control surface resource, web browser application  caches the control surface resource. In this example implementation, whenever web browser application  is instructed to receive a resource identified by a given URL, web browser application  determines whether the cache contains a resource identified by the given URL. If the cache does not contain a resource identified by the given URL, web browser application  requests the resource from a server associated with the given URL. If the cache contains a resource identified by the given URL, web browser application  returns the resource in the cache instead of requesting the resource from the server associated with the URL. Consequently, the next time web browser application  is instructed to retrieve a resource identified by the URL identifying the control surface resource, web browser application  retrieves the control surface resource from the cache instead of requesting the control surface resource from server computing system . As mentioned above, the control surface resource URL includes a hash parameter that is dependent on the extension definition files installed at server computing system . Furthermore, as mentioned above, server computing system  includes the updated control surface resource URL in the web page. Consequently, when web browser application  requests the web page, web browser application  determines that the cache does not contain a resource identified by the updated control surface resource URL and requests the control surface resource from server computing system . In this way, server computing system  effectively causes web browser application  to request the control resurface resource from server computing system  whenever changes occur to the extension definition files installed at server computing system .","When web browser application  receives the control surface resource, the surface request script causes web browser application  to update the web page to include a control surface based on the control surface resource (). In one example implementation, the control surface resource is a JSON file. In this example implementation, the surface request script parses the JSON file and uses the resulting parse tree to generate HTML code. In this example implementation, the surface request script then builds one or more Document Object Model (DOM) objects and adds these DOM objects to the web page. In example implementation and\/or other implementations, the surface request script adds the HTML code to the web page, thereby causing the web page to include the control surface.","In one example implementation, the HTML code defines a table structure. Each cell in the data structure contains a control element associated with a different control. Control elements may be implemented as a variety of HTML elements. For example, control elements may be implemented as paragraph elements, image elements, form elements, list elements, input elements, label elements, layer elements, link elements, option elements, select elements, button elements, applet elements, anchor elements, and\/or other types of HTML elements.","Each control element is associated with a control script and may include one or more event handlers. For example, a control element defining a control may include a control script. In this example, the control script includes an on-click event handler, an on-mouseover event handler, and an on-mouseout event handler. When web browser application  adds a control element to the web page, web browser application  registers the event handlers in the control element's control script. Registering the event handlers enables the event handlers to receive events.","After updating the web page to include the control surface in step  or when web browser application  does not detect an on-load event (\u201cNO\u201d of ), web browser application  detects whether an on-click event on a control element has occurred (). If an on-click event on a control element has occurred (\u201cYES\u201d of ), web browser application  executes the on-click event handler of the control script of the control element (). An on-click event handler may cause web browser application  to perform a variety of activities. For example, the control surface may include a plurality of tab controls. When the user clicks on a control element defining one of the tab controls, web browser application  executes an on-click event handler for the control element. In this example, the on-click event handler causes the web browser application  to send a resource request to server computing system . In this example, the resource request indicates a resource identifier of the tab. When server computing system  receives this resource request, server computing system  may perform operations , , and  illustrated in , , and . When host application  generates the initial parse tree at step  (), host application  only includes in the parse tree nodes representing a tab node representing the tab and descendent nodes of the tab node. In this example, when web browser application  receives the resulting resource, the on-click event handler updates the web page based on the resulting resource. In this way, the web page displays the tab.","In a second example, the user clicks on a menu control. In this second example, the on-click event handler associated with the menu control updates the web page to display a menu containing a plurality of menu controls. Each menu control in the plurality of menu controls is associated with a different functionality. The on-click event handler uses the properties bag generated by the property polling script to determine which of the menu controls should be enabled and which of the menu controls should be disabled. In one example implementation, disabled menu controls may have a different appearance than enabled menu controls.","If web browser application  determines that no on-click event has occurred (\u201cNO\u201d of ), web browser application  determines whether an on-mouseover event has occurred on a control element (). If an on-mouseover event has occurred (\u201cYES\u201d of ), web browser application  executes an on-mouseover event handler of the control script of the control element (). The on-mouseover event handler may cause web browser application  to perform a variety of activities. For example, the on-mouseover event handler of the control script of an image control element may change the image from a first image to a second image. In this example, changing the image control element from the first image to the second image visually indicates to the user that the functionality associated with image control element will be invoked if the user presently presses the primary mouse button.","If web browser application  determines that no on-mouseover event has occurred (\u201cNO\u201d of ), web browser application  determines whether an on-mouseout event has occurred on a control element (). If web browser application  determines that an on-mouseout event has occurred on the control element (\u201cYES\u201d of ), web browser application  executes an on-mouseout event handler of the control script of the control element (). The on-mouseout event handler may cause web browser application  to perform a variety of activities. Continuing the example of the previous paragraph, the on-mouseout event handler may cause of the control script of an image control element to change the image from the second image to the first image. In this example, changing the image from the second image to the first image visually indicates to the user that the functionality associated with the control element will not be invoked if the user presently presses the primary mouse button.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 8","FIG. 8"],"b":["800","800","802","802","802"]},"In addition, electronic computing device  comprises a processing unit . As mentioned above, a processing unit is a set of one or more physical electronic integrated circuits that are capable of executing instructions. In a first example, processing unit  may execute software instructions that cause electronic computing device  to provide specific functionality. In this first example, processing unit  may be implemented as one or more processing cores and\/or as one or more separate microprocessors. For instance, in this first example, processing unit  may be implemented as one or more Intel Core 2 microprocessors. Processing unit  may be capable of executing instructions in an instruction set, such as the x86 instruction set, the POWER instruction set, a RISC instruction set, the SPARC instruction set, the IA-64 instruction set, the MIPS instruction set, or another instruction set. In a second example, processing unit  may be implemented as an ASIC that provides specific functionality. In a third example, processing unit  may provide specific functionality by using an ASIC and by executing software instructions.","Electronic computing device  also comprises a video interface . Video interface  enables electronic computing device  to output video information to a display device . Display device  may be a variety of different types of display devices. For instance, display device  may be a cathode-ray tube display, an LCD display panel, a plasma screen display panel, a touch-sensitive display panel, a LED array, or another type of display device.","In addition, electronic computing device  includes a non-volatile storage device . Non-volatile storage device  is a computer-readable data storage medium that is capable of storing data and\/or instructions. Non-volatile storage device  may be a variety of different types of non-volatile storage devices. For example, non-volatile storage device  may be one or more hard disk drives, magnetic tape drives, CD-ROM drives, DVD-ROM drives, Blu-Ray disc drives, or other types of non-volatile storage devices.","Electronic computing device  also includes an external component interface  that enables electronic computing device  to communicate with external components. As illustrated in the example of , external component interface  enables electronic computing device  to communicate with an input device  and an external storage device . In one implementation of electronic computing device , external component interface  is a Universal Serial Bus (USB) interface. In other implementations of electronic computing device , electronic computing device  may include another type of interface that enables electronic computing device  to communicate with input devices and\/or output devices. For instance, electronic computing device  may include a PS\/2 interface. Input device  may be a variety of different types of devices including, but not limited to, keyboards, mice, trackballs, stylus input devices, touch pads, touch-sensitive display screens, or other types of input devices. External storage device  may be a variety of different types of computer-readable data storage media including magnetic tape, flash memory modules, magnetic disk drives, optical disc drives, and other computer-readable data storage media.","In addition, electronic computing device  includes a network interface card  that enables electronic computing device  to send data to and receive data from an electronic communication network. Network interface card  may be a variety of different types of network interface. For example, network interface card  may be an Ethernet interface, a token-ring network interface, a fiber optic network interface, a wireless network interface (e.g., WiFi, WiMax, etc.), or another type of network interface.","Electronic computing device  also includes a communications medium . Communications medium  facilitates communication among the various components of electronic computing device . Communications medium  may comprise one or more different types of communications media including, but not limited to, a PCI bus, a PCI Express bus, an accelerated graphics port (AGP) bus, an Infiniband interconnect, a serial Advanced Technology Attachment (ATA) interconnect, a parallel ATA interconnect, a Fiber Channel interconnect, a USB bus, a Small Computer System Interface (SCSI) interface, or another type of communications medium.","Electronic computing device  includes several computer-readable data storage media (i.e., memory unit , non-volatile storage device , and external storage device ). Together, these computer-readable storage media may constitute a single data storage system. As discussed above, a data storage system is a set of one or more computer-readable data storage mediums. This data storage system may store instructions executable by processing unit . Activities described in the above description may result from the execution of the instructions stored on this data storage system. Thus, when this description says that a particular logical module performs a particular activity, such a statement may be interpreted to mean that instructions of the logical module, when executed by processing unit , cause electronic computing device  to perform the activity. In other words, when this description says that a particular logical module performs a particular activity, a reader may interpret such a statement to mean that the instructions configure electronic computing device  such that electronic computing device  performs the particular activity.","The techniques of this disclosure may be realized in many ways. For example, the techniques of this disclosure may be realized as a method for implementing a customized control surface. The method comprises automatically retrieving, by a server computing system, a base definition file, the base definition file comprising a first hierarchical set of elements, the first hierarchical set of elements defining a default control surface, the default control surface comprising a plurality of user-selectable controls. The method also comprises automatically retrieving, by the server computing system, an extension definition file, the extension definition file comprising a second hierarchical set of elements, the second hierarchical set of elements defining a customized control surface based on the default control surface. In addition, the method comprises automatically generating, by the server computing system, a modified version of the base definition file in which each element in the base definition file having an identifier corresponding to an identifier of an element in the extension definition file is modified in a way indicated by the element in the extension definition file. Furthermore, the method comprises automatically using, by the server computing system, the modified version of the base definition file to generate a requested control surface resource. Moreover, the method comprises automatically sending, by the server computing system, the control surface resource to a client computing system, the client computing system configured to use the control surface resource to present the customizable control surface in a user interface.","In another example, the techniques of this disclosure may be realized as an electronic computing system comprising a processing unit and a data storage system. The data storage system stores a base definition file comprising a first hierarchical set of elements, the first hierarchical set of elements defining a default control surface, the default control surface comprising a plurality of user-selectable controls. The data storage system also stores an extension definition file comprising a second hierarchical set of elements, the second hierarchical set of elements defining a customized control surface based on the default control surface. In addition, the data storage system stores computer-executable instructions that, when executed by the processing unit, cause the electronic computing system to receive a resource request sent by a client computing system, the resource request specifying a resource identifier of a control surface resource. The instructions also cause the electronic computing system to automatically identify, in response to receiving the resource request, the extension definition file from among a plurality of extension definition files. In addition, the instructions cause the electronic computing system to automatically generate a modified version of the base definition file in which each element in the base definition file having an identifier corresponding to an identifier of an element in the extension definition file is modified in a way indicated by the element in the extension definition file. Moreover, the instructions cause the electronic computing system to automatically use the modified version of the base definition file to generate the control surface resource. In addition, the instructions cause the electronic computing system to automatically send the control surface resource to the client computing system, the client computing system configured to use the control surface resource to present the customized control surface in a user interface.","In another example, the techniques of this disclosure may be realized as a computer-readable medium comprising computer-executable instructions that, when executed by a processing unit of an electronic computing system, cause the electronic computing system store a base definition file comprising a first hierarchical set of elements, the first hierarchical set of elements defining a default control surface, the default control surface comprising a plurality of user-selectable controls. The instructions also cause the electronic computing system to store a plurality of extension definition files, each extension definition file in the plurality of extension definition files comprising hierarchical sets of elements defining customized control surfaces based on the default control surface, the plurality of extension definition files including an applicable extension definition file comprising an applicable hierarchical set of elements, the applicable hierarchical set of elements defining an applicable customized control surface based on the default control surface. In addition, the instructions cause the electronic computing system to receiving, a web page request from a client computing system via an electronic communication network, the web page request including a resource identifier of a web page. Furthermore, the instructions send, in response to the web page request, the web page to the client computing system via the electronic communication network, the web page including scripts configuring the client computing system to send a resource request to the electronic computing system. In addition, the instructions cause the electronic computing system to receive the resource request from the client computing system via an electronic communication network, the resource request specifying a resource identifier of the control surface resource. The instructions also cause the electronic computing system to automatically identify, in response to receiving the resource request, the applicable extension definition file from among the plurality of extension definition files. Moreover, the instructions cause the electronic computing system to automatically generate a base parse tree, each node in the base parse tree representing an element in the first hierarchical set of elements, each node in the base parse tree linked together to represent parent-child relationships among the elements in the first hierarchical set of elements. In addition, the instructions cause the electronic computing system to automatically generate an extension parse tree, the extension parse tree comprising a second set of nodes, each node in the extension parse tree representing an element in the applicable hierarchical set of elements, each node in the extension parse tree linked together to represent parent-child relationships among the elements in the applicable hierarchical set of elements. The instructions also cause the electronic computing system to automatically push a reference to a root node of the base parse tree onto a node stack. Furthermore, the instructions cause the electronic computing system to automatically determine whether the node stack is empty. In addition, the instructions cause the electronic computing system to automatically pop from the node stack a reference to a current node in the base parse tree, the electronic computing system automatically popping the reference to the current node in response to determining that the node stack is not empty. In addition, the instructions cause the electronic computing system to automatically determine whether an identifier of the current node corresponds to an identifier of a corresponding node in the extension parse tree. The instructions also cause the electronic computing system to automatically push, in response to determining that the identifier of the current node does not correspond to an identifier of any node in the extension parse tree, references to each child node of the current node onto the node stack. The instructions also cause the electronic computing system to automatically determine, in response to determining that the identifier of the current node corresponds to the identifier of the corresponding node, whether an action indicated by the corresponding node is an add child action. In addition, the instructions cause the electronic computing system to automatically add, in response to determining that the action indicated by the corresponding node is an add child action, a subtree of the corresponding node to the base parse tree as a child of the current node. Moreover, the instructions cause the electronic computing system to push, in response to determining that the action indicated by the corresponding node is an add child action, references to each child node of the current node onto the node stack. In addition, the instructions cause the electronic computing system to automatically determine, in response to determining that the identifier of the current node corresponds to the identifier of the corresponding node, whether the action indicated by the corresponding node is a remove action. The instructions also cause the electronic computing system to automatically remove, in response to determining that the action indicated by the corresponding node is a remove action, a subtree of the current node from the base parse tree. Moreover, the instructions cause the electronic computing system to automatically determine, in response to determining that the identifier of the current node corresponds to the identifier of the corresponding node, whether the action indicated by the corresponding node is a replace action. In addition, the instructions cause the electronic computing system to automatically replace, in response to determining that the action indicated by the corresponding node is a replace action, the current node with the corresponding node without replacing the subtree of the current node with the subtree of the corresponding node. In addition, the instructions cause the electronic computing system to push, in response to determining that the action indicated by the corresponding node is a replace action, references to each child node of the current node onto the node stack. Moreover, the instructions cause the electronic computing system to automatically determine, in response to determining that the identifier of the current node corresponds to the identifier of the corresponding node, whether the action indicated by the corresponding node is a replace subtree action. In addition, the instructions cause the electronic computing system to automatically replace, in response to determining that the action indicated by the corresponding node is a replace subtree action, the subtree of the current node with the subtree of the corresponding node. The instructions also cause the electronic computing system to automatically push, in response to determining that the action indicated by the corresponding node is a replace subtree action, references to each child node of the corresponding node onto the node stack. In addition, the instructions cause the electronic computing system to automatically use, in response to determining that the node stack is empty, the base parse tree to generate the control surface resource. Furthermore, the instructions cause the electronic computing system to automatically send the control surface resource to the client computing system, the client computing system configured to use the control surface resource to present the customized control surface in the web page.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
