---
title: Transporting operations of arbitrary size over remote direct memory access
abstract: The embodiments described herein generally relate to a protocol for implementing data operations, e.g., a version of SMB, atop RDMA transports. In embodiments, systems and methods use the protocol definition, which specifies new messages for negotiating an RDMA connection and for transferring SMB2 data using the negotiated communication. A new protocol message may include new header information to determine message size, number of messages, and other information for sending the SMB2 data over RDMA. The header information is used to accommodate differences in message size requirements between RDMA and SMB2. The SMB Direct protocol allows SMB2 data to be fragmented into multiple individual RDMA messages that a receiver may then logically concatenate into a single SMB2 request or SMB2 response. The SMB Direct protocol also may allow SMB2 to transfer application data via efficient RDMA direct placement and to signal the application data's availability when the transfer is complete.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09331955&OS=09331955&RS=09331955
owner: Microsoft Technology Licensing, LLC
number: 09331955
owner_city: Redmond
owner_country: US
publication_date: 20110629
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE AND PERMISSION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A portion of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice shall apply to this document: Copyright\u00a9 2011, Microsoft Corp.","File access protocols, such as Server Message Block (SMB) or versions thereof, e.g., SMB2, may operate as application-layer network protocols mainly used to provide shared access to files and miscellaneous communications between nodes on a network. Historically, SMB or SMB2 operated atop transmission control protocol (TCP) transports and traditional network infrastructure. While SMB2 has been very successful as a protocol for general purpose remote file access, SMB2 has not been widely adopted for remote file access where high throughput and low latency file input\/output is required.","Remote Direct Memory Access (RDMA) is a direct memory access from the memory of one computer into that of another computer without involving the operating system of the other computer. This direct transfer permits high-throughput, low-latency data transfers over a network, which is especially useful in performance-critical deployments. When an application performs an RDMA Read or Write request, the application data are delivered directly from a source memory buffer to a destination memory buffer using RDMA-capable network adapters, which do not involve the central processing unit (CPU) (also referred to simply as a processor) or operating system in the transfer. These RDMA transfers reduce latency and enable fast message transfer. Unfortunately, the benefits of RDMA have not been exploited by systems using SMB2 because SMB2 has not operated with RDMA.","Although specific problems have been addressed in this Background, this disclosure is not intended in any way to be limited to solving those specific problems.","Embodiments generally relate to a protocol and processing to implement data operations, such as SMB2 operations (or other versions of SMB operations or file access protocol operations, for example), atop RDMA transports. In embodiments, the protocol definition specifies new messages for negotiation of an RDMA connection and for transferring SMB2 data, for example, using the negotiated connection. In an embodiment, a protocol for implementing SMB2 operations atop RDMA transports is the SMB Direct protocol. However, other embodiments provide for other SMB protocols, SMB protocol versions, or other data operation protocols without departing from the spirit and scope of the present disclosure. According to an embodiment, a new SMB Direct message may include new header information, which may include, but is not limited to, one or more of the following: CreditsRequested, CreditsGranted, Flags, Reserved, RemainingDataLength, DataOffset, and DataLength. The header information is used because RDMA transports support receiving messages of a size fixed only by the receiver, and SMB2 message size can vary widely from about a hundred bytes to very large messages over a million bytes. The SMB2 protocol is modified to recognize the existence of the RDMA capability, while the SMB Direct protocol adds a new layer to the networking stack to allow multiple individual RDMA messages to be logically concatenated into a single request or response to accommodate both the fixed size restrictions on RDMA messages and the indeterminate size requirements inherent to SMB2 messaging. The changes to the SMB2 protocol and the addition of the SMB Direct protocol allow for the direct transfer of data between memories of the peers. In embodiments, the SMB2 server may read from or write to a client's memory using RDMA to perform direct placement of data. The server performs an RDMA Write to the client to complete an SMB2 read and performs an RDMA Read to complete an SMB2 write. While the SMB Direct protocol allows for the direct transfer of SMB\/SMB2 data between memories of peers, the SMB Direct protocol may be adapted to other protocols, according to embodiments. According to embodiments, the bi-directional, peer-to-peer nature of the SMB Direct protocol lends itself to numerous types of data transfer operations.","RDMA transports also restrict the number of messages which may be processed at any time, again with a value fixed only by the receiver. To conform to this requirement of RDMA, embodiments provide for the peers to exchange or assign \u201ccredits,\u201d which are numeric values, requested by and granted to each mutual peer, in the protocol header that specify the number of RDMA messages the sender may send to the receiver. Credits are dynamic and are managed independently by each peer. Rules for managing and making sufficient credits available to perform SMB2 exchanges are defined by the protocol in embodiments disclosed herein.","In embodiments, the provision of independent, bidirectional credits may permit each peer to send requests and responses without explicit negotiation or prior knowledge and agreement by the receiving peer. Sequenced sends, associated with RDMA, may permit the exchange of unexpectedly large messages without invoking errors in the RDMA processing and without resorting to less efficient negotiated transfers when such conditions arise.","Additional messages may be used for negotiation of the protocol version and other parameters, according to embodiments. A Negotiate Request message may include, for example, fields for CreditsRequested, Reserved, MinVersion, MaxVersion, OutboundSendSize, MaxInboundSendSize, etc. In turn, a Negotiate Response message sent in response to the request message may include, for example, fields for CreditsRequested, CreditsGranted, Version, Reserved, Status, OutboundSendSize, InboundSendSize, etc. These parameters support the negotiation of capabilities, end-to-end optimization of resources, and compatibility with future enhanced versions of the protocol.","This Summary is provided to introduce a selection of concepts in a simplified form that is further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter, nor is it intended to be used in any way as to limit the scope of the claimed subject matter.","This disclosure will now more fully describe example embodiments with reference to the accompanying drawings, in which specific embodiments are shown. Other aspects may, however, be embodied in many different forms, and the inclusion of specific embodiments in this disclosure should not be construed as limiting such aspects to the embodiments set forth herein. Rather, the embodiments depicted in the drawings are included to provide a disclosure that is thorough and complete and which fully conveys the intended scope to those skilled in the art. Dashed lines may be used to show optional components or operations.","Embodiments generally relate to systems, methods, and protocols for exchanging SMB2 data over an RDMA connection. RDMA provides advantages in transporting data. For example, RDMA makes transfers from one memory to another device's or system's memory. These transfers do not involve the processor and, thus, reduce the overhead involved in transporting data. Further, without the involvement of a processor in transport management, RDMA transmits data with fewer clock cycles. Thus, RDMA provides a low-latency, high bandwidth connection.","In general, a version of SMB, such as SMB2, is an application-layer network protocol used to provide shared access to files and miscellaneous communications between nodes on a network. SMB and SMB2 are thus examples of file access operation protocols. SMB2 allows for the transfer of data in the exchange of messages between a client(s) and a server(s). The description of some embodiments herein refers to SMB2. However, in other embodiments, any version of SMB or other file access operation protocol may be used without departing from the spirit and scope of the present disclosure.","Due, generally, to differences in operation, SMB2 (or SMB) does not currently operate over RDMA but, instead, uses TCP to transport data. The present embodiments create a system and protocol for exchanging SMB2 messages over an RDMA-capable network protocol. First, a client and\/or a server, which may be collectively referred to as peers, discover the capabilities or abilities of each other using a component of SMB2. In an embodiment, a request is sent by the client asking for information about the server. The responding server may reply with information about the number of network interface cards (NICs) the server has, the internet protocol (IP) address for the NICs, the speed of the NICs, whether the NICs are RDMA capable, and\/or possibly an IP address. In embodiments, the asking client may use this information to determine how to interface with the server.","If a server is RDMA capable, an RDMA-capable client may then negotiate an RDMA connection with that server, according to embodiments of the present disclosure. A new interface, referred to as the RDMA interface in embodiments, is an interface between a RDMA-capable network adapter and the other system components (including an SMB client). Further, a new module is added to the stack called an SMB Direct client\/server. First, the SMB Direct client, possibly in response to the capabilities request, pre-posts a receive by reserving at least a portion of a memory buffer to receive a message from the other peer. The SMB Direct client may then send an SMB Direct Negotiate Request packet. An SMB Direct Negotiate Request begins a process of establishing an SMB Direct connection between the peers. According to embodiments, the SMB Direct Negotiate Request includes one or more fields that define how the RDMA connection will function.","In embodiments, part of the SMB Direct Negotiate Request is a request for \u201ccredits.\u201d Credits are an allotment of space in the receiving peer's memory buffer. As RDMA transfers directly from one memory to another memory, the receiving peer reserves space in a memory buffer where the sending peer may place transported data. The memory buffers are allotted in blocks (e.g., 1 Kbyte blocks). In embodiments, the allotments are set in that the block size does not change after the SMB Direct connection has been established. In other embodiments, the allotments are not set, in which the block size may change. Where the allotments are set, any transfer to the memory buffer may not exceed the block size. To transfer SMB2 data having a size greater than the block size, the sender sends two or more packets that are stored into two or more allotments of the memory buffer. To reserve the memory allocations, the sending peer requests credits, where the number of credits requested may be governed by a local policy and is not necessarily affected by the composition of the message. Each credit represents a block of the memory buffer and, thus, represents a message the requester may send to the other peer.","In embodiments of the present disclosure, the server may send a response, e.g., an SMB Direct Negotiate Response, to the requester. This SMB Direct Negotiate Response also includes various fields that define the RDMA connection. In response to the request, the SMB Direct Negotiate Response provides a number of credits to the client. Further, the SMB Direct Negotiate Response may also ask for credits that reserve an allocation in the client's memory buffer. The exchange of the SMB Direct Negotiate Request and SMB Direct Negotiate Response, in embodiments, establish the RDMA connection. Thereafter, SMB2 data may be exchanged over the connection.","According to embodiments, the exchange of SMB2 data over the RDMA connection includes the transport of at least one packet. If the SMB2 data being sent is smaller than the block size, only one packet, called an SMB Direct Data Transfer packet, may be sent. However, if SMB2 data to be sent is larger than the block size, two or more SMB Direct Data Transfer packets may be sent, according an embodiment. RDMA allows for the sequenced reception of packets. Thus, a second packet received in a communication will be placed directly after a first received packet. To utilize this advantage of RDMA, the SMB Direct Data Transfer packets include fields to announce the total amount of SMB2 data to be sent and how much data are left to be sent after the present packet. In this way, the SMB Direct peers may determine when an SMB transfer is completed, and the SMB2 data may be reassembled. The SMB Direct Protocol, therefore, provides in embodiments for quick transfers of SMB2 data with low latency and low overhead, while overcoming the issues associated with transferring SMB2 data over RDMA.","An example logical environment or system  for exchanging SMB2 data over an RDMA connection is shown in , according to embodiments disclosed herein. Connection peers (referred to also as client  and server )  and  may move SMB2 data across an RDMA connection between RDMA NICs (RNICs) and over network . A connection peer may be any computer system as described with respect to , for example. The connection peers are shown as a client\/application server  and a file server  in . However, these peers are offered by way of example only. Any type of client(s) or server(s) may function as a connection peer in the embodiments. Thus, RDMA connections may be between multiple clients, multiple servers, a server farm(s), a server cluster(s), a message server(s), or between a client(s) and a server(s), for example. The client\/application server  and file server  are offered as examples only for purposes of understanding the teachings of the embodiments disclosed herein.","While SMB2 data are moved over network , the network  may be as described with respect to , for example. Network , although shown as an individual single network, may be any type of network conventionally understood by those of ordinary skill in the art. In accordance with an embodiment, the network may be the global network (e.g., the Internet or World Wide Web, i.e., \u201cWeb\u201d for short). It may also be a local area network, e.g., intranet, or a wide area network. In accordance with embodiments, communications over network  occur according to one or more standard packet-based formats, e.g., H.323, IP, Ethernet, and\/or ATM.","Further, in embodiments, an RNIC (and\/or ) may be any network interface card, network adapter, and\/or network interface controller that supports RDMA. There are several vendors that offer RNICs. iWARP or InfiniBand, for example, are network protocols that support RDMA. The RNICs may support RDMA, which allows direct transfers of data from memory to memory and vice versa. These transfers of data do not require or include the oversight of the processor or . Thus, the RDMA transfers are high-bandwidth, low latency, and low overhead, according to embodiments of the present disclosure. The processors  and memories  may be as described with respect to , for example.","While  illustrates a general environment for SMB2 data exchanges over RDMA,  depicts an example peer  for sending or receiving the SMB2 data over the RDMA connection, according to embodiments disclosed herein. In this example, the peer  is a client and\/or application server. The various components of the client  may include software and\/or hardware, according to embodiments of the present disclosure. However, for purposes of illustration, the components hereinafter will be described as software modules. In embodiments, the client  includes one or more of, but is not limited to, a kernel , at least one user application , a memory buffer , one or more timers , and\/or one or more settings . In embodiments, a \u201ckernel\u201d is the core of an operating system, in which memory, files, and peripheral devices are managed, applications are triggered and launched, and system resources are allocated.","In embodiments, the kernel may include one or more of, but is not limited to, a WIN32\u00ae File application programming interface (API) or equivalent , an SMB2 module (shown as an SMB2 Client ), an SMB Direct module (shown as an SMB Direct Client ), and a RDMA Interface . The SMB Direct module and the RDMA Interface are introduced to perform the methods and processes described herein. The modules, components, and\/or interfaces will be described as follows.","In embodiments, the WIN32\u00ae File API  may be an interface between the kernel and one or more user applications . In an example embodiment, the WIN32\u00ae File API  is a set of APIs available in the MICROSOFT WINDOWS\u00ae operating systems. Almost all WINDOWS\u00ae programs interact with the WINDOWS\u00ae API to perform functions. Embodiments of the WIN32\u00ae File API  provide access to the resources available to a WINDOWS\u00ae system, such as, for example, file systems, devices, and\/or error handling. WIN32\u00ae File API  may provide access to functionality additional to the kernel, according to embodiments. In embodiments, WIN32\u00ae File API  additionally allows a system to perform actions on remote files that use underlying file access functions that, in turn, use various networking capabilities and allow for remote access.","In embodiments, the SMB2 Client  manages the communication between applications and the interfaces provided by the SMB2 Server . Because devices may operate at speeds that may not match the operating system, the communication between the operating system and device drivers is primarily done through I\/O request packets (IRPs). These packets are similar to network packets or WINDOWS\u00ae message packets, for example. The packets are passed from an operating system(s) to specific drivers and from one driver to another. In embodiments, the SMB2 Client  may redirect the I\/O requests to network resources and compose SMB messages to conduct the communications over the network. The SMB2 Client  communicates the SMB packets to the SMB Direct Client to exchange the SMB packets or data over RDMA. Similarly, the SMB2 Server can also use IRPs to send file requests from the SMB2 Client  to the server's storage, according to an embodiment.","In embodiments, the SMB Direct Module  is an instance created from the SMB Direct network provider interface (NPI) in the kernel . The SMB Direct Module  exposes an API (referred to as the SMB Direct NPI) to the SMB2 client and SMB2 server modules. The SMB2 client\/server modules use this SMB Direct NPI to make requests to send or receive data over an SMB Direct connection. The SMB Direct module  implements the SMB Direct Protocol and sits between the SMB2 client\/server modules and the underlying RDMA interface, according to embodiments. The SMB Direct NPI enables the SMB Direct protocol. The SMB Direct NPI may create and destroy SMB Direct connections, send and receive data over SMB Direct connections, register\/unregister memory, perform RDMA Read\/Write data operations from\/to a peer over a SMB Direct connection, receive notifications when an SMB Direct connection is disconnected by the peer, marshal\/unmarshal SMB2 packets for transmission across a SMB Direct connection, among other operations. To accomplish these tasks, an SMB Direct Module  is created that may manage the sending and retrieving of the SMB2 data from the memory buffers  as stored by the RDMA protocol. Thus, the SMB Direct Module  converts data from simply SMB2 data into RDMA and back from RDMA to SMB2. The SMB Direct Module  communicates with another new module, the RDMA Interface  to execute the operations in embodiments of the present disclosure.","According to embodiments, the SMB Direct Module  performs several functions. An SMB DirectReceiveEvent callback function notifies SMB2 Client  or SMB2 Server that a message has been received on a SMB Direct endpoint. An SMB DirectDisconnectEvent event callback function notifies SMB2 Client  or SMB2 Server that a connection on an endpoint has been disconnected. An SMB DirectAcceptEvent event callback function notifies the SMB2 Server that an incoming connection on a listening endpoint has been accepted. An SMB DirectListen function creates a listener endpoint that listens for incoming connections on a given local address. An SMB DirectCloseEndpoint function closes an endpoint and frees any associated resources. An SMB DirectConnect function connects an endpoint to a remote SMB Direct transport address. An SMB DirectDisconnect function disconnects an endpoint from a remote SMB Direct transport address. An SMB DirectSend function sends a buffer of data to a remote SMB Direct peer. An SMB DirectRegisterMemory function allows the SMB2 Client  to register memory buffers for use in RDMA Read\/Write operations. An SMB DirectUnregisterMemory function unregisters memory buffers that were previously registered via the SMB DirectRegisterMemory API. An SMB DirectRdmaRead function causes RDMA to read data directly from the memory of the remote peer to which the endpoint is connected. An SMB DirectRdmaWrite function causes RDMA to write data directly into the memory of the remote peer to which the endpoint is connected. These functions and the operation thereof will be explained in conjunction with .","In an embodiment, the RDMA Interface  is a new interface to interface with the vendor-specific RDMA functionality of the RNICs. The RDMA Interface  can give access to the functions of the RDMA device. The functions of the RDMA device can include listening to a port to receive SMB Direct packets and provide the SMB2 data to the SMB Direct Module . In an embodiment, the RDMA device may include a kernel mode RDMA module to manage communications over the RDMA connection. Further, the RDMA device may include an RDMA access layer and Extensions to access and listen on a port sending RDMA messages. A proxy driver may interface with the hardware driver of the RNIC, according to embodiments.","In embodiments, the user application  may be any software executed by a processor for a user or other software. Examples of user applications  include web browsers, email, etc. These user applications  interface with the kernel to send and receive data, especially from remote storage locations, such as the file server .","In an embodiment, a memory buffer  may be any type of memory, as described with respect to . The memory buffer  may be used to receive SMB Direct messages and\/or SMB2 data carried in the messages and may be used to stage outgoing SMB Direct messages before transmitting those messages. Thus, the memory buffer  may be partitioned into blocks as described hereinafter, according to embodiments.","The timers , in embodiments, are a set of clocks that may count down from a predetermined time to zero. Thus, the timers  represent stored data and a clock function executed by a processor. Expiration of a timer  may trigger one or more functions in the RDMA Interface or with the SMB Direct Module . In other embodiments, the timers may count from zero to a threshold or perform some other type of counting. Some of the timers may include a SendCreditGrantTimer, which is the timer that is started when SendCreditCount reaches zero and operates in the timers section . The remotely connected peer has until this timer expires to grant additional Send Credits. The SendCreditGrantTimer can also regulate the amount of time that the client\/server waits for the peer to grant it additional Send Credits. When the client\/server finds that it cannot send a packet to the peer because the value of SendCreditsCount is zero, then the client\/server sets a timer that will expire in a predetermined number of seconds, according to embodiments. If the timer expires before a Send Credit becomes available, the client\/server disconnects the connection. In an embodiment, an Idle Connection Timer regulates the amount of time that the client\/server waits for the peer to send a packet. If no packets have been received from the peer in the last predetermined number of seconds, the client\/server sends a keep alive request to the peer and sets a KeepAliveResponse timer. If no response is received before the expiration of the KeepAliveResponse timer, then the connection is disconnected, according to embodiments of the present disclosure.","A KEEPALIVE_REQUESTED flag may also be set for any SMB Direct Data transfers over the SMB Direct Connection, according to embodiments of the present disclosure. In an embodiment, the KEEPALIVE_REQUESTED flag is a request for the receiving peer to respond to the sender as soon as possible so that the sender knows that the receiver is still connected and responsive. One or more systems may try to time out the connection without a message exchange. Thus, a message with the KEEPALIVE_REQUESTED flag can maintain the connection. In alternative embodiments, a message with the KEEPALIVE_REQUESTED flag set can be used to request or receive credits.","In an embodiment, a settings  store stores and retrieves data relevant to exchanging SMB messages over RDMA. The settings  may be stored in any type of memory or storage devices as described with respect to . As an example, the settings may include how many seconds after being set does the Credit Replenishment Timer expire, what is the maximum sized SMB Direct Data Transfer packet that the peer is willing to receive from another peer, or what is the limit on the number of send credits the peer will grant to another peer, etc.","The SMB_DIRECT_ENDPOINT Structure may be an opaque structure that represents a SMB Direct endpoint, in embodiments. An SMB Direct endpoint is analogous in function to a network socket, for example. SMB2 Client  or SMB2 Server may not access the members of this structure directly but through the SMB Direct Module , according to an embodiment. The SMB_DIRECT_ENDPOINT Structure may include data for several operations. MwReleaseList is a list of memory windows that may be released back to the remotely connected peer. These memory windows are associated with RDMA Read\/Write operations that have completed. ReceiveCreditCount is the number of Receive Credits that are to be granted to the remotely connected peer. The endpoint's host may have at least this number of receives pending on the endpoint. SendCreditCount is the number of Send Credits that the endpoint's host currently has. The remotely connected peer may have at least this number of receives pending on their endpoint. PendingRdmaReadCount is the number of RDMA Read operations that have been initiated but not yet completed on this endpoint. PendingRdmaReadLimit is the maximum number of RDMA Read operations that may be simultaneously pending on the endpoint. DeferredInitiatorOpQueue is a queue of initiator operations that are deferred because the endpoint resources to issue them are not currently available, in embodiments. NdkQp is the queue pair object that represents the receive and initiator request queues. NdkReceiveCq is the NDK receive completion queue. Receive request completions are queued to this queue. NdkReceiveQueueCapacity is the maximum number of Receive requests that may be simultaneously pending on the endpoint. NdkInitiatorCq is the NDK initiator completion queue. Send, Bind, Fast-Register, Read, Write, and Invalidate request completions are queued to this queue, for example. In embodiments, NdkInitiatorQueueCapacity is the maximum number of Send, Bind, Fast-Register, Read, Write, and Invalidate requests that may be simultaneously pending on the endpoint.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 2B","FIG. 2A"],"b":["106","106","106","106","202","232","222","224","226"],"i":["b","b","b","b"]},"According to embodiments, the kernel (and\/or as described with respect to ) may include one or more of, but is not limited to, an input\/output (I\/O) manager , an SMB2 Server , a SMB Direct Server , and an RDMA Interface . Some of these functions are the same or similar to those described in .","In embodiments, SMB2 Server is a driver that implements the server side of the SMB2 protocol for MICROSOFT\u00ae servers. Other embodiments provide for other types of servers. SMB2 Server may start and exchange data using SMB and supply the data or receive the data from the I\/O Manager . In embodiments, SMB2 Server sends or receives the SMB2 data over a network connection. SMB2 Server functions to communicate over networks for the server. Thus, SMB2 Server provides the SMB2 data for transmission or receives the SMB2 data from a network transmission, according to embodiments.","In embodiments, the New Technology File System (NTFS)  may be a standard file system. NTFS includes support for metadata and the use of advanced data structures to improve performance, reliability, and disk space utilization, plus additional extensions such as security access control lists (ACL) and file system journaling. NTFS functions to organize and store file data for one or more clients. This file data may be provided to the client over communications with the client, such as SMB2 data transfers over RDMA.","According to embodiments, SMB Direct creates an RDMA connection to exchange SMB2 data. The protocol creates the RDMA connection through a negotiation process. After the peers  and  negotiate the RDMA connection, either peer  or  may send SMB2 data over the RDMA connection.","According to embodiments, a first SMB Direct Negotiate Request packet  is shown in . In turn, the associated SMB Direct Negotiate Response packet  is shown in , in embodiments. Further, the SMB Direct Data Transfer packet  used to transfer data is shown in , according to embodiments. Each message or packet may be created, transmitted, stored, and\/or received, for example. The packets or messages may each include portions or fields that store different data, in embodiments.","Turning to , an SMB Direct Negotiate Request packet  is shown, according to embodiments of the present disclosure. The SMB Direct Negotiate Request packet  may include one or more of, but is not limited to, the following fields, for example: MinVersion , MaxVersion , Reserved , CreditsRequested , PreferredSendSize , MaxReceiveSize , and\/or MaxSMB2MessageSize . The SMB Direct Negotiate Request packet  may include additional or fewer fields than those shown in , as represented by ellipses .","In an embodiment, the MinVersion field  may include a value for the lowest SMB Direct Protocol version that the client\/requester  supports. The MaxVersion field  may store the highest SMB Direct Protocol version that the client\/requester  supports. This value may be equal to or greater than the value of the MinVersion field . In embodiments, the client\/requester supports all of the protocol versions (inclusive) in the range between the value in the MinVersion field  and the value in the MaxVersion field . The Reserved field  is simply a reserved field for future unknown requirements and is not used by the client, according to an embodiment.","The CreditsRequested field , according to embodiments, comprises a value for the number of send credits that the client\/requester  is requesting from the server\/receiver . In embodiments, the value in the CreditsRequested field  is greater than zero (0) to ensure that the SMB2 data may be sent in a subsequent message. However, the value in the CreditsRequested field  may be any number and may be set based on an average usage, according to embodiments. In alternative embodiments, the value in the CreditsRequested field  may be based at least on the size of the SMB message to be sent. In still further embodiments, other or additional factors may be considered in requesting credits. Also, large messages may be transferred using RDMA, in embodiments.","The PreferredSendSize field  may include the size (possibly in bytes) of the largest SMB Direct Data Transfer packet  that the client\/requester  wishes to be able to transmit to the server\/receiver . The MaxReceiveSize field  includes a size (possibly in bytes) of the largest SMB Direct Data Transfer message that the client\/requester  will accept from the server\/receiver . This value may be equal to the block or predetermined allocation of the memory buffer that the client  set in embodiments. Thus, no single SMB2 data transfer will exceed the memory allocation. In embodiments, this value is greater than or equal to threshold , which is at least the size of the SMB Direct header in the data transfer packet and a small SMB2 message. The MaxSmb2MessageSize field  may include a size (possibly in bytes) of the largest SMB2 Protocol message that the client\/requester will accept from the server\/receiver , according to an embodiment. This value is predetermined and set by the client . In embodiments, the value in the MaxSmb2MessageSize field  may not be greater than the total size of the memory buffer . In this way, no SMB message may overflow the memory buffer . However, the value of the MaxSmb2MessageSize field  may be less than the amount of memory in the memory buffer , as determined by a user, according to an embodiment.","Turning to , an SMB Direct Negotiate Response packet  is shown in accordance with embodiments. The SMB Direct Negotiate Response packet  may be sent by a peer  to complete the negotiation for the RDMA connection. The SMB Direct Negotiate Response packet  may include one or more of, but is not limited to, the following fields, for example: MinVersion , MaxVersion , PreferredVersion , Reserved , CreditsRequested , CreditsGranted , Status , PreferredSendSize , MaxReceiveSize , and\/or MaxSMB2MessageSize . The SMB Direct Negotiate Response packet  may include additional or fewer fields than those shown in , as represented by ellipses .","According to embodiments, the MinVersion field may include a value for the lowest SMB Direct Protocol version that the server\/receiver  supports. The MaxVersion field may store the highest SMB Direct Protocol version that the server\/receiver  supports. This value may be equal to or greater than the value of the MinVersion field . In embodiments, the server\/receiver  supports all of the protocol versions (inclusive) in the range between the value in the MinVersion field and the value in the MaxVersion field . The PreferredVersion field  stores a value for the common SMB Direct Protocol version. The value of the PreferredVersion field , in embodiments, is within the range specified by MinVersion field and MaxVersion field of the client's SMB Direct Negotiate Request packet . In further embodiments, the value of the PreferredVersion field  is between the range specified by MinVersion field and the MaxVersion field of the server's SMB Direct Negotiate Response packet . The Reserved field is simply a reserved field for future unknown requirements and is not used by the server, according to embodiments.","The CreditsRequested field , according to embodiments, comprises a value for the number of send credits that the server\/receiver  is requesting from the client\/requester . In embodiments, the value in the CreditsRequested field is greater than zero (0) to ensure that the SMB2 data may be sent in a subsequent message. However, the value in the CreditsRequested field may be any number and may be set based on an average usage. In alternative embodiments, the value in the CreditsRequested field is based on the size of the SMB message to be sent or may be based on other factors. Large messages may be sent when one credit is requested, according to embodiments. The CreditsGranted field includes the number of credits granted from the server\/receiver  to the client\/requester . In embodiments, the value of the CreditsGranted field is greater than zero (0) to allow the client\/requester  to send the next SMB Direct message.","In embodiments, a status field  includes at least one flag or value. In an embodiment, the status field  includes one or two values, either status success or status not supported. The success flag designates that the server\/receiver  has accepted the client\/requester's SMB Direct Negotiate Request packet . The not supported flag designates that the server\/receiver  has rejected the client\/requester's  SMB Direct Negotiate Request packet .","According to embodiments, the PreferredSendSize field may include the size (possibly in bytes) of the largest SMB Direct Data Transfer packet  that the server\/receiver  wishes to be able to transmit to the client\/requester . The PreferredSendSize field is, in embodiments, smaller than or equal to the MaxReceiveSize field in the SMB Direct Negotiate Request packet . Thus, the packet size sent by the server\/receiver  may not be larger than the memory buffer allotment of the client\/requester .","In embodiments, the MaxReceiveSize field includes a size (possibly in bytes) of the largest SMB Direct Data Transfer message that the server\/receiver  will accept from the client\/requester . This value may be equal to the block or predetermined allocation of the memory buffer that the server\/receiver  set. Thus, in embodiments, no SMB2 data transfer will exceed the memory allocation. In embodiments, this value is greater than or equal to the threshold , which is at least the size of the SMB Direct header in the data transfer packet. The MaxSmb2MessageSize field may include a size (possibly in bytes) of the largest SMB2 Protocol message that the server\/receiver  will accept from the client\/requester . This value is predetermined and set by the server\/receiver . In embodiments, the value in the MaxSmb2MessageSize field may not be greater than the total size of the memory buffer . In this way, no SMB message may overflow the memory buffer . However, the value of the MaxSmb2MessageSize field may be less than the amount of memory in the memory buffer , as determined by a user, according to an embodiment.","An SMB Direct Data Transfer packet  is shown in , in accordance with embodiments disclosed herein. The SMB Direct Data Transfer packet  may be sent to transfer SMB2 data across the RDMA connection established during the negotiation. Either the client\/requester  or the server\/receiver  may send or receive the SMB2 data. As such, both the client\/requester  and the server\/receiver  are referred to generally as the receiver and sender. The SMB Direct Data Transfer packet  may include one or more of, but is not limited to, the following fields, for example: CreditsRequested , CreditsGranted , Reserved , RemainingDataLength , DataOffset , DataLength , and\/or SMB2 Data . The SMB Direct Data Transfer packet  may include additional or fewer fields than those shown in , as represented by ellipses , according to embodiments.","In embodiments, the CreditsRequested field comprises a value for the number of send credits that the sender is requesting from the receiver. In embodiments, the value in the CreditsRequested field is greater than zero (0) to ensure that the SMB2 data may be sent in a subsequent message. However, the value in the CreditsRequested field may be any number and may be set based on predicted future usage, i.e., how many more packets are to complete the transfer of the SMB2 data. The CreditsGranted field includes the number of credits granted from the sender to the receiver. In embodiments, the value of the CreditsGranted field can be zero because the peer is not obligated to honor a peer's request for credits. However, the peer can provide credits in the CreditsGranted field to allow the client\/requester  to send the next SMB Direct message. The Reserved field is simply a reserved field for future unknown requirements and is not used by the client, according to embodiments disclosed herein.","In embodiments, the RemainingDataLength field  may include a number of bytes of a fragmented SMB2 message that the receiver has yet to receive. Thus, any value other than zero in this field indicates to the receiver that another SMB Direct Data Transfer packet  will be sent with more data. If the SMB Direct Data Transfer packet  carries a complete SMB2 message or the last of two or more SMB Direct Data Transfer packets  that carry fragmented SMB2 data, then the value in the RemainingDataLength field  is zero (0), according to embodiments. RDMA is capable of sending messages sequentially. As such, reassembling messages is simplified because sequential messages are reassembled in strict order of receipt. Thus, the embodiments forgo the need for a message identifier in the header or the use of other more complicated reassembly techniques, for example.","In an embodiment, the DataOffset field  includes a value for the offset, in bytes, from the beginning of the SMB Direct Data Transfer packet  to the first 8-byte aligned byte of the encapsulated SMB2 Protocol message. In embodiments, if the value of the DataLength field  is zero, then the DataOffset field  is also set to zero. If the value of DataLength is not zero, then the DataOffset field  is some value and may be greater than or equal to 24 bytes, which is the size of the other fields in the header, according to an embodiment. The DataLength field  may include the size, in bytes, of the encapsulated SMB2 Protocol message in the SMB2 Data field . In embodiments, if the SMB Direct Data Transfer packet  does not encapsulate an SMB2 Protocol message, then the value of the DataLength field  is set to zero. The SMB2 Data field includes any SMB2 Protocol message, according to embodiments.","An SMB2 Read\/Write Request  is shown in , in accordance with embodiments disclosed herein. The SMB2 Read\/Write Request  may be encapsulated in the SMB Direct Data Transfer packet  to perform a direct RDMA read\/write. A direct RDMA read\/write sends only unencoded application data. The SMB2 Read\/Write Request  may be a SMB2 Read Request if the server  is to perform an RDMA write to the client  and a SMB2 Write Request if the server  is to perform an RDMA read from the client , according to embodiments of the present disclosure. Regardless, the fields in the SMB2 Read\/Write Request  are similar. It should be noted that the server  performs the RDMA transfer that the client  requests. The SMB2 Read\/Write Request  may include one or more of, but is not limited to, the following fields, for example: Channel , ChannelInfoOffset , and ChannelInfoLength . In an embodiment, the fields may include the steering information for completing the RDMA data transfer. The Reserved field  is simply a reserved field for future unknown requirements and is not used, according to an embodiment. The SMB2 Read\/Write Request  may include additional or fewer fields than those shown in , as represented by ellipses . The fields shown are offered for purposes of illustration and are not intended to be limiting.","In embodiments, the Channel field  comprises a value for the channel where the data are to be found. The RDMA connection may include several channels. The channel information may include information that the peer provides to the RDMA device to accomplish the transfer, according to embodiments. For example, the channel information may contain one or more tokens, offsets, and lengths of memory segments, along with other RDMA-specific information, as shown in .","In an embodiment, the ChannelInfoOffset field  and the ChannelInfoLength field  are pointers to the offset, token, and length information in the data packet. The pointers give the location in the SMB2 read or write request where the information may be located. In embodiments, the Flags  include any information to control or change the behavior of the RDMA direct data transfer.","Turning to , an RDMA channel descriptor  is shown, in accordance with embodiments disclosed herein. The RDMA channel descriptor  may be encapsulated in the SMB Direct request, typically in the channel field . The RDMA channel descriptor  may include one or more of, but is not limited to, the following fields, for example: Offset , Token , and Length . In an embodiment, the fields are the steering information for completing the RDMA data transfer. The RDMA channel descriptor  may include additional or fewer fields than those shown in , as represented by ellipses . The fields shown are offered for purposes of illustration. To complete a direct data transfer, RDMA is directed to the memory with the data that is to be read or written and the length of the data based on the information in the channel field . As the direct data transfer sends only application data, this information helps ensure a proper transfer.","According to an embodiment, the Offset  is the value in bytes or bits where the data begins. The Offset  may be measured from a memory block starting address, which may be located using information provided in the Token . The Length  is the value in bits or bytes of how long the data segment is. This steering information guides the direct data transfer, for example.","The interactions of the various software functional modules depicted in  are further illustrated in the operational steps  depicted in  for negotiating an RDMA connection, in accordance with an embodiment disclosed herein.  shows the representation A of the transfers of packets  and  between a client  and a server , according to embodiments of the present disclosure.  is in the perspective of the client , while  is in the perspective of the server , according to embodiments of the present disclosure. It should be noted that the process  is described as the client requesting the RDMA connection and the server  responding. However, the reverse could be true where the server  requests and the client responds, according to embodiments. Further, the method may be conducted between multiple clients and\/or between multiple servers, for example.","Turning to , example operational steps B for negotiating a connection using SMB2 over RDMA are shown in accordance with an embodiment. Process B is initiated at START operation B, and process B proceeds to the client pre-posting a receive . In embodiments, the RDMA Interface automatically detects and leverages the RNICs \/to see that they are available and properly configured. Next, in an embodiment, the SMB Direct NPI is exposed by the SMB Direct module . The SMB Direct Client may open a handle to the RDMA Adapter to form an RDMA connection for the SMB2 Client . In an embodiment, the SMB Direct Client then requests an RDMA Connection through the RDMA Interface . The SMB Direct Client may also create the allocations in the memory buffer and determine what to request for initial send credits and what will be allowed for receive credits. The allocations in the memory buffer may be of a predetermined size, in embodiments. The total amount of memory in the memory buffer may also be determined, according to embodiments.","Returning to , the SMB Direct Client may then construct  the SMB Direct Negotiate Request packet  to send to the RDMA Interface . The SMB Direct Negotiate Request packet  is as described in , for example. As such, the SMB Direct Client sets the fields in the SMB Direct Negotiate Request packet . Thus, the SMB Direct Client determines the minimum and maximum versions of SMB Direct that the client  may support. The SMB Direct Client determines the number of credits to request. The number of credits to request may be based on known future SMB messages that are to be sent, on predicted SMB traffic that may occur in the future, on historical use of SMB, or by some other method, in embodiments. The send size is determined by internal functions and speed considerations. The maximum receive size may be pegged to the size of the memory buffer allotment. Finally, a maximum SMB message size is determined and set (generally, the maximum SMB message size is large enough to allow a peer to send large SMB2 packets but not so large as to use all the memory). This collected information is entered into the SMB Direct Negotiate Request packet , according to embodiments of the present disclosure.","Next, the SMB Direct Client sends B the SMB Direct Negotiate Request packet . In an embodiment, the SMB Direct Client requests the RDMA Interface to send the SMB Direct Negotiate Request packet  by a send operation. The RDMA Interface communicates with the RDMA Interface and sends the SMB Direct Negotiate Request packet  to the server . With the sending of the SMB Direct Negotiate Request packet , the SMB Direct Client begins a negotiation request expiration timer . The negotiation request expiration timer may have a predetermined value and counts down from the value to zero. The SMB Direct Client then waits for a response to the SMB Direct Negotiate Request packet . If it is determined  that the negotiation request expiration timer expires before receiving a response to the SMB Direct Negotiate Request packet , process B proceeds NO to END operation B where the connection is dropped.","Turning to  at start operation C, the server  anticipates the SMB Direct Negotiate Request packet  and pre-posts a receive , in embodiments. The SMB2 Server may listen for activity and automatically discover that RDMA is available and bound on a port of the RNIC , according to embodiments. SMB2 Server opens a listener endpoint and determines that RDMA is available on the RNIC . Next, SMB2 Server then begins communications with the SMB Direct Server . The SMB Direct Server may open an RDMA connection and receive an RDMA Adapter Handle. The SMB Direct Server then requests an RDMA Connection through the RDMA Interface . The SMB Direct Server may then accept the RDMA Connection, thereby informing the client  that the connection request succeeded. This success indication from the RDMA interface triggers the client to send the negotiate request.","The SMB Direct Server may also create the allocations in the memory buffer and determine what to request for initial send credits and what will be allowed for receive credits, according to embodiments. The allocations in the memory buffer may be of a predetermined size. The total amount of memory in the memory buffer may also be determined, according to embodiments of the present disclosure.","Returning to , the SMB Direct Server may then start a negotiation request expiration timer . The negotiation request expiration timer at the server  may have a predetermined value and counts down from the value to zero, in embodiments. The SMB Direct Server then waits to receive the SMB Direct Negotiate Request packet . While waiting, the SMB Direct Server monitors the RDMA connection and determines  if the negotiation request expiration timer expires before receiving the SMB Direct Negotiate Request packet . If the negotiation request timer expires, process C proceeds NO to END operation C where the connection is dropped.","However, if the SMB Direct Negotiate Request packet  arrives at the RNIC and the RDMA Interface before the expiration of the negotiation request expiration timer, process C proceeds YES to receiving and validating C, by the RDMA Interface , the SMB Direct Negotiate Request packet  and placing the packet in the memory buffer . Next, the SMB Direct Server is informed of the data and determines if the SMB Direct Negotiate Request packet  is valid .","In embodiments, to validate the SMB Direct Negotiate Request packet , the SMB Direct Server reads the data from the SMB Direct Negotiate Request packet  and determines the following, for example: if the value of the MaxVersion field  is less than the value of the MinVersion field  or if no value in the range is supported; if the value of the CreditsRequested field  is zero; if the value of the MaxReceiveSize field  is less than a predetermined threshold (e.g., 128 bytes); or, if the value of the MaxSmb2MessageSize field  is less than a predetermined threshold. If any of the above are true, then the SMB Direct Negotiate Request packet  is not valid, and process C proceeds NO to END operation C, where SMB Direct Server disconnects. If all of the checks are not true, then process C proceeds YES to process SMB Direct Response , in which the SMB Direct Negotiate Request packet  is sent to the SMB Direct Client by the SMB Direct Server ","In processing the SMB Direct Negotiate Request packet , the SMB Direct Server sets the setting Protocol Version to equal the maximum protocol version shared by the client  and the server , in embodiments. The SMB Direct Server also determines how many credits to grant. The number of credits to grant depends, in embodiments, on the available space in the memory buffer or other factors. After making these determinations, the SMB Direct Server generates  the SMB Direct Negotiate Response packet . In an embodiment, the SMB Direct Server sets the fields in the SMB Direct Negotiate Response packet . For example, the PreferredVersion field is set to the value in the setting Protocol Version. The CreditsGranted is set to the number of credits determined by the SMB Direct Server , according to an embodiment. The other fields are filled in a similar fashion to the SMB Direct Negotiate Request packet . The SMB Direct Negotiate Response packet  is then sent C to the client. In embodiments, the SMB Direct Server sends the SMB Direct Negotiate Response packet  to the RDMA Interface to send.","Returning to , the SMB Direct client may, according to embodiments, determine  if the response was received before expiration of the negotiate expiration timer. If the response was received before expiration of the timer, process B proceeds YES to validate B the SMB Direct Negotiate Response packet . The RDMA Interface receives the message into the memory buffer . The SMB Direct Client reads the SMB Direct Negotiate Response packet  and then validates the message. To validate the SMB Direct Negotiate Response packet , the SMB Direct Client determines  the following, for example: if the Status field  is not STATUS_SUCCESS; if the PreferredVersion field  does not contain a value that is within the range specified by the MinVersion field  and MaxVersion field  of the client's SMB Direct Negotiate Request packet ; if the CreditsRequested field is zero; if the CreditsGranted field is zero; if the PreferredSendSize field is greater than the value specified by the MaxReceiveSize field  of the client's SMB Direct Negotiate Request packet ; or if the MaxReceiveSize field is less than a predetermined threshold (e.g., 128 bytes), according to embodiments of the present disclosure. If any of the above are true, then the SMB Direct Negotiate Response packet  is not valid, and process B proceeds NO to END operation B, in which the SMB Direct Client disconnects. If all of the checks are not true, then process B proceeds YES to process SMB Direct Response , in which the SMB Direct Negotiate Response packet  is processed by the SMB Direct Client , according to embodiments disclosed herein.","In processing the SMB Direct Negotiate Response packet , the SMB Direct Client completes the following, in embodiments, for example: sets the connection's PeerTargetSendCreditsCount setting in the settings  equal to the CreditsRequested field ; sets the connection's SendCreditsCount setting in the SMB Direct connection properties equal to the CreditsGranted field ; sets the connection's MaxSendSize setting in the settings  equal to the MaxReceiveSize field ; sets the connection's ReceiveSize setting in the settings  equal to the PreferredSendSize field ; sets the connection's MaxOutboundFragmentedMessageSize setting in the settings  equal to the MaxReceiveSize field ; and sets the connection's Idle Connection timer to expire in a predetermined amount of time (e.g., a few hours, a few minutes, etc.) and starts the timer. Once the above steps have been performed, the RDMA connection negotiation has completed, and the client  and server  may begin exchanging SMB Direct Data Transfer packets. Process B then terminates at END operation B.","The interactions of the various software functional modules depicted in  are further illustrated in the operational steps  depicted in  for exchanging SMB2 data over the established RDMA connection, in accordance with an embodiment disclosed herein. In request and response communications, SMB2 data are transmitted between the client  and the server  over the established SMB Direct connection by encapsulating the SMB2 data as the data payload of a SMB Direct Data Transfer packet , according to embodiments of the present disclosure. Request and response communications may be used for control channel communications, the exchange of file metadata, or for other processes, for example.  shows a representation A of the transfer of packets \/, , , and  between a client(s)  and a server(s) , according to embodiments of the present disclosure.  are in the perspective of the client , while  is in the perspective of the server . It should be noted that the process  is described as the client sending SMB2 data to the server  either independently or in response to a request from the server. However, the reverse could be true where the server  responds to a request and sends data back to the client . Thus, the processes described herein apply where the server sends requests and requires credits, in embodiments. Further, the method may be conducted between multiple clients or between multiple servers, for example.","Turning to , example operational steps B for exchanging data using SMB2 over RDMA are illustrated in accordance with embodiments disclosed herein. Start operation  is initiated, and process B proceeds to the client  establishing an RDMA connection . Establishing an RDMA connection may be as described with respect to , according to embodiments of the present disclosure. In an embodiment, the SMB Direct Client sets several connection properties including setting the MaxSendSize setting equal to the MaxReceiveSize field , setting the connection's ReceiveSize setting equal to the PreferredSendSize field , and setting the connection's MaxOutboundFragmentedMessageSize setting in the settings  equal to the MaxReceiveSize field . In this way, the client  has established the size of packets that may be sent to the server , according to embodiments.","Returning to , the SMB Direct Client may determine the number of SMB Direct Data Transfer packets that are needed to transport an SMB2 message to the server , according to embodiments. To make the determination, the SMB Direct Client may first retrieve the MaxSendSize (designated as R) as set during the negotiation. The SMB Direct Client may then determine the size of the SMB2 protocol message(s) that is to be sent; this value is set as \u201cS\u201d in embodiments. The SMB Direct Client also determines the number of bytes (designated as P, in embodiments) consumed by the SMB Direct Data Transfer packet  header and the padding (e.g., the DataOffset , etc.) for the SMB Direct Data Transfer packet  payload to begin on an 8-byte-aligned boundary. In embodiments, the SMB Direct Client then determines if S is less than or equal to (R\u2212P), and, if so, may determine the number of packets by dividing S by (R\u2212P), according to embodiments.","Process B then proceeds to determining, by the SMB Direct Client , if fragmentation is used . In an embodiment, fragmentation is used when the SMB2 protocol message does not \u201cfit\u201d into a single SMB Direct Data Transfer packet . In other words, is S greater than (R\u2212P)? If fragmentation is not to be used, process B proceeds NO to send one SMB Direct Data Transfer Packet B. On the other hand, if fragmentation is used, process B proceeds YES to initialize transmission buffer bytes .","Returning to step , an SMB2 protocol message may be transmitted without fragmentation, according to embodiments. A portion of the memory buffer , used for transmitting packets, is initialized. In embodiments, the first P bytes are initialized to set the header information for the SMB Direct Data Transfer packet  and to add zeroed padding bytes to ensure that the SMB2 payload is 8-byte aligned. Thus, in the buffer, the DataOffset field  is set to P, the DataLength field  is set to S, and RemainingDataLength field  is set to zero (0), according to embodiments. Information about, or requests for, credits are stored in the CreditsRequested field or the CreditsGranted field . Thus, the client  may request or grant more credits in the SMB Direct Data Transfer packet . In embodiments, the sender of an SMB Direct Data Transfer packet must set the CreditsRequested field to at least one (1). The next S bytes are initialized in the memory buffer , and the SMB2 protocol message is stored in the SMB2 data field . After the SMB Direct Data Transfer packet  is assembled, the SMB Direct Client sends B the packet to the RDMA Interface to send through the RDMA connection to the server . Process B then proceeds through page connector B  to END operation C, and process B terminates.","Returning to step , where S is greater than (R\u2212P), the SMB2 protocol message is divided into two or more portions, according to embodiments. The portions are then sequenced to be sent in a series of RDMA Send operations, each of which carries a portion (called a fragment) of the SMB2 protocol message. To divide the SMB2 protocol message into fragments, the size of the first payload is set to X, which is equal to or less than (R\u2212P). X represents the number of bytes of the SMB2 protocol message that will be transmitted by at least the first RDMA Send operation, according to an embodiment. As with step B, a portion of the memory buffer , used for transmitting packets, is initialized. In embodiments, the first P bytes are initialized to set the header information for the SMB Direct Data Transfer packet  plus the padding bytes. Next, the DataOffset field  is set to P, the DataLength field  is set to X, and the RemainingDataLength field  is set to (S\u2212X) . The RemainingDataLength field  indicates, in embodiments, how many bytes of the SMB2 protocol message remain to be transmitted. In embodiments, when the last fragment of the SMB2 protocol message is transmitted, (S\u2212X) will be zero (0) In the last packet, the RemainingDataLength field  is then set to zero, which indicates that the SMB Direct Data Transfer packet  carries the last fragment of the SMB2 protocol message. Information about, or requests for, credits are stored in the CreditsRequested field or the CreditsGranted field . Thus, in embodiments, the client  requests or grants more credits in the SMB Direct Data Transfer packet . The next X bytes of the memory buffer are then initialized. The fragment of the SMB2 protocol message may then be stored in the SMB2 data field , according to embodiments disclosed herein.","After assembling the SMB Direct Data Transfer packet  with the first untransmitted X bytes of the SMB2 protocol message, the SMB Direct Data Transfer packet  is sent B to the server. The SMB Direct Client sends B the SMB Direct Data Transfer packet  to the RDMA Interface to send through the RDMA connection to the server , in embodiments. Process B then proceeds through page connector A  to optional step , in which the SMB Direct Client determines  if another SMB Direct Data Transfer packet  containing another fragment is to be sent. Thus, in embodiments, the SMB Direct Client determines if, after sending the last packet, (S\u2212X) is 0. If (S\u2212X) is 0 or less than zero, meaning the last fragment was sent in the last SMB Direct Data Transfer packet , process B proceeds NO to END operation C, and process B terminates. However, if (S\u2212X) is greater than 0, then process B proceeds YES to determine if enough send credits exist . In embodiments, step  may be optional (as shown) because the SMB Direct Data Transfer packets  transporting the fragments may be pre-staged in the memory buffer and sent sequentially. When the buffer is empty, process B terminates. There is then no need to determine if a next packet is to be sent. It should be noted that when an SMB2 protocol message is fragmented, the RDMA Send operations that carry the fragments are sent sequentially and monotonically, and may not be interrupted by other RDMA Send operations that are unrelated to the fragmented SMB2 protocol message, according to embodiments. The RDMA transport ordering, at the receiver, will preserve the sequencing of the fragments, such that the receiving peer may reconstruct the original message, according to an embodiment.","Returning to step , the SMB Direct Client determines  if there are enough send credits to send the next fragment. Essentially, the SMB Direct Client determines if there is one send credit left. If there is a send credit, process B proceeds YES through page connector C  to step . In embodiments, RDMA transports have a receive buffer pre-posted by the receiver before the sender may send a packet. This rule requires coordination between the sender and receiver to ensure that senders do not attempt to send a packet before the receiver has pre-posted a receive. SMB Direct uses a system of Send Credits to achieve the desired coordination, according to embodiments of the present disclosure.","In an embodiment, a send credit granted from a server  or client  represents a single pre-posted receive on the server  or client . The peer is entitled to perform one RDMA Send operation with one send credit. The client  may also provide information to the server  about how many send credits the client  needs to efficiently support its workload by setting the CreditsRequested field or in the form of a separate Send Credit Request (which is not to be sent in the middle of a set of SMB Direct Data Transfer packets  transporting fragmented SMB2 data, according to an embodiment). Send credits are granted in the CreditsGranted field of the SMB Direct Data Transfer packet . Thus, the SMB Direct Client may request more send credits by setting the value in the CreditsRequest field to a higher number (possibly covering all the future fragmented packets). The SMB Direct Client may then wait C to receive send credits by awaiting a SMB Direct Data Transfer packet , sent from the server , which has no data but includes send credits in the CreditsGranted field of the SMB Direct Data Transfer packet , according to an embodiment. The SMB Direct Client may determine at query C if credits are received by setting a SendCreditsGrantedTimer in the timers . If the SendCreditsGrantedTimer expires  before credits are granted, process B proceeds YES to fail, or terminate, the transmission operation, and process B then terminates at END operation C. However, if credits are granted C, process B proceeds YES through page connector C  to step . According to an embodiment, if no timer is set and\/or the timer has not expired , process B proceeds NO and does not fail, or terminate, the transmission operation but, instead, continues to wait C to receive send credits.","Turning to  and start operation D for process D, at the server , the SMB Direct Data Transfer packet  is received D. In an embodiment, the RDMA Interface receives the SMB Direct Data Transfer packet  and sends it to the SMB Direct Server . First, the SMB Direct Server reads the header information. The SMB Direct Server proceeds to query  to determine if the RemainingDataLength field  is something other than zero. If the RemainingDataLength field  is zero, then the SMB Direct Data Transfer packet  is the only packet, and process D proceeds NO to process SMB packet data  where the SMB Direct Server processes the packet data and sends the SMB2 protocol message to SMB2 Server , in an embodiment. If the RemainingDataLength field  is something other than zero, process D proceeds YES to allocate reassembly buffer .","In step , the SMB Direct Server allocates a portion of the memory buffer to reassemble the SMB2 protocol message in the buffer , in an embodiment. Thus, the SMB Direct Server may allocate enough blocks in the memory buffer to accept the data in the current SMB Direct Data Transfer packet  and in the upcoming SMB Direct Data Transfer packets , which is based on the DataLength field  value plus the RemainingDataLength field  value. The SMB Direct Server may then read the SMB2 data from the SMB2 data field  and copy the data into the allocated buffer , according to embodiments of the present disclosure.","Next, an embodiment provides for the SMB Direct Server to wait and receive D the next SMB Direct Data Transfer packets . The data in the SMB2 data field  is also copied into the next portion of the memory buffer , in an embodiment. In an alternative embodiment, the SMB Direct Server may optionally determine if this next SMB Direct Data Transfer packet  is the last packet containing fragmented data . To make the determination, the SMB Direct Server checks if the RemainingDataLength field  is zero. If the RemainingDataLength field  is zero, the SMB Direct Server understands that no more packets will be received, and process D proceeds YES to process the SMB2 protocol message  from the memory buffer . Process D then terminates at END operation D. On the other hand, if the RemainingDataLength field  is something other than zero, the SMB Direct Server understands that another packet(s) will be received, and process D proceeds NO to receive D the next SMB Direct Data Transfer packet , according to an embodiment.","The interactions of the various software functional modules depicted in  are further illustrated in the operational steps  depicted in  for performing an RDMA Direct Data Transfer in accordance with an embodiment disclosed herein.  shows the representation of the data transfer between a client  and a server , according to embodiments of the present disclosure.","As shown in , process  is initiated at start operation , and the SMB2 Client  creates  an SMB2 read\/write request . An application  can request data to be transferred to the server  or read from the server . The data transfer may be directed by the SMB2 Client  to employ an RDMA direct data transfer, such that the SMB2 server  uniquely performs the actual RDMA request, in accordance with embodiments of the present disclosure. To begin the transfer, the SMB2 Client  registers the target memory buffers to provide or receive unencoded application data, and then generates an SMB read\/write command that is to be sent and conducted over RDMA. The command may be included in the SMB2 read\/write request  and sent to the SMB Direct Client , which encapsulates  the SMB2 read\/write request  in a SMB Direct Data Transfer packet. In embodiments, the SMB2 read\/write request  is stored in the SMB2 Data field  in the SMB Direct Data Transfer packet. The SMB Direct Data Transfer packet may then be sent  over the RDMA interface  to the server . In an embodiment, the server  receives the SMB Direct Data Transfer packet and reads the SMB2 read\/write request  from the SMB2 Data field . The SMB Direct Server may then read the data from the SMB2 read\/write request , including the channel , ChannelInfoOffset , and the ChannelInfoLength . This information may direct the SMB Direct Server to the steering information  in the RDMA Channel Descriptor . From the steering information, the SMB Direct Server may start the direct data transfer by sending or retrieving  unencoded application data to or from a memory location in a buffer of the client . Process  then terminates at END operation .",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIGS. 4A-4C, 5A-5D, and 6"},"In general, credits are an advantage to the present embodiments. A send credit represents a buffer that has been pre-posted to receive incoming data on a peer. As such, a send credit represents limited receiver resources (memory, memory regions, etc.) that have been committed to the peer so that the peer may use them to transmit data. Due to the nature of RDMA, a receive, once-posted, may not be canceled, in embodiments. For the resources that are associated with the receive to be released, the resources are used to service an incoming send. This poses a possible problem in embodiments if the receiving peer starts to run low on resources and wants to reclaim some of the resources it has dedicated to outstanding receives. Since receives may not be cancelled according to embodiments disclosed herein, reclaiming these resources relies on the cooperation of the peer.","A solution to this issue in SMB Direct is referred to as the Send Credit Revocation, according to an embodiment. An SMB Direct Data Transfer packet that is transmitted to the peer has a CreditsGranted field that specifies how many additional send credits have been granted to the peer. In alternative embodiments, by setting a CreditRevocation flag (not shown) in the SMB Direct Data Transfer packet , the meaning of the CreditsGranted field changes to be the number of Send Credits that the peer may keep. For example, if the CreditRevocation flag were set and the value of CreditsGranted field is ten (10) then ten (10) is the number of credits the receiver may retain. If the receiver currently holds more than ten (10) Send Credits, then the receiver performs a series of RDMA Send operations to use up the revoked Send Credits so that the receiver ends up with ten (10) or fewer Send Credits. The send operations that are performed to use up revoked Send Credits may include sending an empty SMB Direct Data Transfer packet  (a packet with no data payload). Upon receiving the incoming empty SMB Direct Data Transfer packets , the peer that revoked the Send Credits may release these resources or reuse them as it sees fit, according to embodiments.","While Send Credits allow two peers to synchronize their Send and Receive operations, the peers, in embodiments, attempt to avoid send credit deadlocks. Imagine a scenario in which Peer Y has a single Send Credit from peer X and where peer X has a single Send Credit from peer Y. In this scenario, each peer is entitled to perform a single send to its peer at any time. Imagine that both X and Y simultaneously perform a Send operation, using their single Send Credit in the process, but the SMB Direct Data Transfer packet  that is transmitted by both peers grants no additional Send Credits to the peer. The resulting state is known as a Send Credit deadlock. Both X and Y have used their last Send Credit. To be able to send additional packets to the peer, each peer needs additional Send Credits. However, Send Credits are granted via SMB Direct Data Transfer packets , and neither peer may perform any further send operations. The result is that neither peer may transmit any additional packets, and there is no mechanism by which they may acquire further send credits. A deadlock has therefore occurred.","A solution to this issue is simply a rule, according to embodiments of the present disclosure. When an SMB Direct peer uses its last Send Credit, the SMB Direct Data Transfer packet  that is being sent grants at least one (1) additional send credit to the peer, according to an embodiment. If both peers follow this rule, the deadlock does not occur because each peer will always be able to respond to the other with a grant of additional Send Credits.","Finally,  illustrates an example computing system  upon which embodiments disclosed herein may be implemented. A computer system , such as client\/application server  or file server , for example, which has at least one processor  for exchanging message data as shown herein, is depicted in accordance with embodiments disclosed herein. The system  has a memory  comprising, for example, system memory, volatile memory, and nonvolatile memory. In its most basic configuration, computing system  is illustrated in  by dashed line . Additionally, system  may also include additional storage (removable and\/or non-removable) including, but not limited to, magnetic or optical disks or tape. Such additional storage is illustrated in  by removable storage  and non-removable storage .","The term computer readable media as used herein may include computer storage media. Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data. System memory , removable storage , and non-removable storage  are all computer storage media examples (i.e., memory storage.) Computer storage media may include, but is not limited to, RAM, ROM, electrically erasable read-only memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which may be used to store information and which may be accessed by computing system . Any such computer storage media may be part of system . The illustration in  is intended in no way to limit the scope of the present disclosure.","The term computer readable media as used herein may also include communication media. Communication media may be embodied by computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media may include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency (RF), infrared, and other wireless media.","System  may also contain communications connection(s)  that allow the device to communicate with other devices. Additionally, system  may have input device(s)  such as a keyboard, mouse, pen, voice input device, touch input device, etc. Output device(s)  such as a display, speakers, printer, etc. may also be included. All of these devices are well known in the art and need not be discussed at length here. The aforementioned devices are examples and others may be used.","Having described embodiments of the present disclosure with reference to the figures above, it should be appreciated that numerous modifications may be made to the embodiments that will readily suggest themselves to those skilled in the art and which are encompassed within the scope and spirit of the present disclosure and as defined in the appended claims. Indeed, while embodiments have been described for purposes of this disclosure, various changes and modifications may be made which are well within the scope of the present disclosure.","Similarly, although this disclosure has used language specific to structural features, methodological acts, and computer-readable media containing such acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific structure, acts, features, or media described herein. For example, while specific names or naming conventions have been used in describing aspects of the embodiments, such as names for APIs, routines, etc., numerous modifications may be made to such names and\/or naming conventions which are encompassed within the spirit and scope of the present disclosure. The specific structures, features, acts, names, naming conventions, and\/or media described above are disclosed as example forms of implementing the claims. Aspects of embodiments allow for multiple client\/application servers, multiple file servers, multiple networks, multiple connection peers, etc. Or, in other embodiments, a single client computer with a single server and a single network are used. One skilled in the art will recognize other embodiments or improvements that are within the scope and spirit of the present disclosure. Therefore, the specific structure, acts, or media are disclosed as example embodiments of implementing the present disclosure. The disclosure is defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present disclosure may be more readily described by reference to the accompanying drawings in which like numerals refer to like items.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 3A-3E"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 4A-4C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 5A-5D"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
