---
title: Securing executable content using a trusted computing platform
abstract: A software development system (SDS) () digitally signs software () developed on the system. The SDS () executes on a computer system () having a trusted computing platform. The platform includes protected areas () that store data and cannot be accessed by unauthorized modules. A code signing module () executing in a protected area () obtains a private/public key pair and a corresponding digital certificate. The SDS () is configured to automatically and transparently utilize the code signing module () to sign software () produced by the system. End-user systems () receive the certificate with the software and can use it to verify the signature. This verification will fail if a parasitic virus or other malicious code has altered the software (). Accordingly, the SDS () greatly reduces the risk of malicious code executing on the end-user computer system ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07694139&OS=07694139&RS=07694139
owner: Symantec Corporation
number: 07694139
owner_city: Mountain View
owner_country: US
publication_date: 20021024
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DISCLOSURE OF INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","This invention pertains in general to computer security and in particular to preventing malicious and\/or unauthorized code from executing on a computer system.","2. Background Art","A parasitic computer virus typically infects a computer system by inserting viral code into other executable programs stored on the computer system. This code can infect other files and\/or computer systems, destroy data on the computer system, or perform other malicious actions. Other types of malicious code, including Trojan horses, worms, keystroke grabbers, etc. can also damage computer systems. Thus, there is a strong desire to prevent viruses and other malicious code from infecting and\/or executing on a computer system.","One technique for preventing virus infections and other attacks is to install anti-virus software on the computer system in order to detect the presence of viruses and other malicious code. Anti-virus software utilizes various tools, such as string scanning and emulation, to detect malicious code and prevent it from damaging the computer system. However, certain types of malicious code, such as polymorphic, metamorphic, and obfuscated entry point threats, are difficult for anti-virus software to detect.","Another technique for preventing attacks is to establish mechanisms for detecting whether software has been altered by a virus or other malicious code. Code signing is one technique for detecting alterations. Digitally signed code includes values in computer programs that the computer system can use to detect whether the code has been altered. Code signing thus prevents tampering with executable content.","However, existing digital signing schemes are cumbersome. A software developer must obtain a digital certificate from a certificate authority (CA) in order to sign code and this is often a costly and tedious process. Moreover, the developer must securely manage the digital certificate to keep it from being compromised. Since most software developers will not go to the trouble of obtaining such a certificate, most software is not signed. Therefore, most computer systems are configured to execute both signed and unsigned code, meaning that the systems are susceptible to parasitic viruses.","Accordingly, there is a need in the art for a mechanism that allows software developers to easily obtain certificates and digitally sign computer programs. Such a mechanism will significantly reduce the threat of parasitic virus infection and other attacks by making it easier for end-users to detect malicious code.","The above need is met by a code signing module () that executes in the protected area () of a developer computer system () having a trusted computing platform and automatically signs () software developed on the system. A typical computing environment contains a certificate authority (CA) (), a developer computer system (), and an end-user computer system () in communication via a network (). The CA () is an entity that issues and manages security credentials, keys, and\/or other data in order to support authentication, verification, and encryption.","The developer computer system () includes a trusted computing platform having a protected area () in storage () and a protected area () in memory (). Only authorized modules can access these areas. A software development system (SDS) () executes on the developer computer system (). A developer uses the SDS () to develop software ().","A code signing module () executes in the protected area () of memory () on the developer computer system () and communicates with the CA () to obtain a private\/public key pair and a certificate based on the public key. In one embodiment, the certificate also includes a machine ID () that uniquely identifies the developer computer system (). The code signing module () stores the private key () in a protected area ().","When the SDS () builds a software module (), it passes the software to a protected area. The code signing module () uses the private key () to digitally sign () the software. As part of the signing process, the code signing module () incorporates the certificate into the file containing the software (). The signed software () is passed back into an unprotected area of the developer computer system ().","The signed software is distributed to an end-user who executes the software () on the end-user system (). The end-user system () uses the certificate to verify () the signature of the software (). If the signature does not verify, then there is a high probability that the software has been tampered with by a parasitic virus or other malicious entity. In one embodiment, the end-user system () is configured to execute only signed software and to verify each piece of software's signature before executing it. This embodiment prevents the computer system () from executing software that has been altered, thereby significantly decreasing the risk that a parasitic virus or other malicious code will harm the computer system.","The figures depict an embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","112","114","116"]},"The CA  is an entity that issues and manages security credentials, keys, and\/or other data in order to support authentication, verification, and encryption. The CA  issues \u201ccertificates\u201d containing encrypted information that can be decrypted using the CA's widely-known public key. A third party, such as the end-user computer system , can use the CA's public key to decrypt the certificate and verify that the information contained therein has not been altered. Therefore, the functionality provided by the CA  allows information to be communicated from the developer computer system  to the end-user computer system  without tampering (i.e., the end-user computer system is able to detect any tampering). VeriSign, Inc. is an example of a commercial CA .","In one embodiment, the developer system  contains a trusted computing platform and is utilized by a developer to develop computer programs (sometimes referred to as \u201csoftware\u201d or \u201ccode\u201d) for execution on the end-user system . In one embodiment, the developer system  communicates with the CA  to obtain certificates and uses the certificates to \u201csign\u201d software developed on the system. The signing happens in a secure area of the trusted computing platform in order to prevent malicious code from compromising the signature. Although only a single developer system  is shown in , it will be understood that embodiments of the present invention can have thousands or millions of developer systems.","The trusted computing platform utilized by the developer system  implements technologies and protocols that allow third parties to \u201ctrust\u201d the platform for certain purposes. The platform can \u201cprove\u201d to the third parties that the platform is trustworthy and has not been altered in a way that would betray the trust. In one embodiment, the trusted computing platform is similar to a conventional computer system, except that the trusted platform has a secure storage that can store data in a location that is tamper-proof and inaccessible to non-trusted software and has a secure execution environment that executes tamper-proof software. Examples of trusted computing platforms that can be utilized with the present invention include the platform advocated by the Trusted Computing Platform Alliance (TCPA) of Hillsboro, Oreg., and the \u201cPalladium\u201d platform advocated by Microsoft Corp. of Redmond, Wash., for the Windows family of operating systems.","In one embodiment, the end-user computer system  is a conventional computer system executing, for example, a Microsoft Windows-compatible operating system (OS), Apple OS X, and\/or a Linux-compatible OS. The end-user computer system  is adapted to execute software developed on the developer computer system . Although only one end-user computer system  is shown in , embodiments of the present invention can have thousands or millions of such systems. Moreover, an end-user computer system  can be a developer computer system  and vice versa depending upon the context. For example, a developer might execute certain end-user software on the developer computer system .","The end-user computer system  includes functionality for verifying a signature in the software received from the developer system . If the code has been tampered with by, for example, a parasitic virus, the signature verification will fail and the end-user computer system  will detect the tampering. In one embodiment, the end-user computer system  is configured to execute only signed code. This embodiment substantially reduces the risk of infection by a parasitic virus since the computer system  will quickly detect the presence of a virus.","The network  represents the communication pathways between the CA , developer system , and end-user system . In one embodiment, the network  is the Internet. As such, the CA  and computer systems ,  can use conventional communications technologies such as the secure sockets layer (SSL), Secure HTTP (S-HTTP), and\/or virtual private networks (VPNs) to engage in secure communications over network links. The network  can also utilize dedicated or private communications links that are not necessarily part of the Internet. In one embodiment, all or part of the network  includes non-electronic links. For example, the developer may communicate with the CA  via U.S. mail, voice telephone, etc. All of these means of communication are supported and can be included within certain embodiments of the network  of .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 2"],"b":["112","114","112"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["202","204","204","206","208","210","212","214","216","218","212","202","202","203","203","202","112","203","200"]},"The storage device  illustrated in  is representative of one or more storage devices that are associated with the computer system. The storage devices may include, for example, one or more hard disk drives, a smart card, a memory stick, nonvolatile random access memory (NVRAM), a compact disk (CD) or DVD drive, etc. The storage device  includes an unprotected area  and a protected area . The unprotected area  holds information that is accessible to all of the components and modules in the computer system . The protected area , in contrast, holds information that is accessible only to itself and\/or to a set of other trusted components and modules in the computer system . For example, in one embodiment the unprotected area  is a conventional hard disk drive holding unencrypted data while the protected area is a smart card or other storage device that is accessible to only components and modules having certain permissions and cryptographic keys.","The memory  holds instructions and data utilized by the processor . In one embodiment the memory  is a random access memory (RAM). Depending upon the embodiment, the memory  may also include firmware, read-only memory (ROM), and\/or NVRAM. As with the storage device, the memory is divided into unprotected  and protected  areas. In one embodiment, both the unprotected  and protected  areas are held in RAM, but the pages of memory forming the protected area  are walled-off and bidden by the trusted computing platform so that only certain components and modules can view or modify the data held therein. Modules stored in the storage device  are typically loaded into the memory  in order to be utilized by the processor . A secure pathway (not shown) over the bus  allows instructions and data to be securely transmitted between the protected area  of the storage device  and the protected area  of the memory . In addition, the program modules executing in protected memory are typically signed. For these reasons, program modules executing in protected memory  and data held in the protected storage  are \u201ctrusted\u201d by other modules in the system  and by third party systems.","The pointing device  may be a mouse, track ball, or other type of pointing device, and is used in combination with the keyboard  to input data into the computer system . The graphics adapter  displays images and other information on the display . The network adapter  couples the computer system  to the network .","In one embodiment, the developer computer system  includes a software development system module (referred to as the \u201cSDS\u201d)  that the developer uses to develop software  adapted for execution on end-user computer systems . In one embodiment, the SDS  includes functionality allowing the developer to write, compile, link, and debug executable code. For example, Visual Studio available from Microsoft Corp. can be utilized as the SDS . In one embodiment, at least a portion of the SDS  executes in the unprotected area  of memory .","The SDS  includes a code signing module  for signing the software  developed with the SDS. In one embodiment, the code signing module  is integrated into SDS . In another embodiment, the code signing module  is a discrete module that is called by the SDS  or the developer once the software  is produced. In one embodiment, the code signing module  is implemented as an automated process that automatically and transparently (i.e., without developer intervention) signs all software developed with the SDS . This automated embodiment greatly reduces the burden on the part of the developer to produce signed code.","In one embodiment, the code signing module  executes in the protected area  of memory  and is itself signed. The SDS  uses an application programming interface (API) of the code signing module  and\/or trusted computing platform to authenticate itself to the code signing module and pass the developed software  from the unprotected area  to the protected area  of memory . The SDS  authenticates itself in order to prevent malicious code from impersonating the SDS  and improperly accessing the functionality of the code signing module . Then, the code signing module  electronically signs the software  and passes the signed software back to the unprotected area . At this point, the developer can distribute the signed software to the end-user computer systems .","In another embodiment, the code signing module  executes in a different computer system than the one in which the SDS  executes. In this embodiment, the code signing computer system is connected to the developer computer system  via a secure network connection and\/or has another secure pathway for accepting in a trusted manner the software  developed with the SDS . For example, a corporation or other enterprise that has multiple developers developing the software  can have a dedicated code signing computer system that signs software developed by the enterprise. The software  can be entered into the code signing computer system via a secure network connection or by physically loading media containing the software into a suitable input device in the system.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3"},"The code signing module  or another module executing in the protected area  of memory  obtains  one or more private\/public key pairs that can be used to sign software using public-key-based techniques. In one embodiment, the code signing module  obtains the key pairs from the CA  or another entity via a secure network  link. In another embodiment, the code signing module  or another module executing in the protected area  of memory  generates the keys itself. In another embodiment, the trusted computing platform itself has a unique private\/public key pair that modules executing on the platform can utilize for digital signatures and other purposes.","As is known in the art, a key is a mathematical value, such as a long integer, that is usually generated according to a random or pseudo-random technique. Public-key encryption utilizes a private key\/public key pair. The keys are related such that a message encrypted with the private key can be decrypted with the public key and vice versa, but the public key and message cannot be used (at least in a reasonable amount of time) to calculate the private key. The entity generating the keys can use conventional techniques to generate the key pairs, including, for example, techniques utilizing the Diffie-Hellman, Knapsack, DSA, and\/or RSA key-generation schemes. The private keys  are stored in the protected area  of the storage device  and loaded into the protected area  of memory  when utilized by the processor .","Digital signatures rely upon public-key cryptography techniques to \u201cprove\u201d that an unaltered message was received from a known party. A message encrypted with a private key can be decrypted by only the corresponding public key. Moreover, the decryption will fail if the message and\/or public key has been altered. Thus, if the end-user computer system  \u201cknows\u201d the true public key of the CA  and uses that key to decrypt a message received from the CA, the end-user system  can be \u201csure\u201d that the message was sent by the CA and was not modified.","The code signing module  obtains  a certificate for the key pair. In an embodiment where the code signing module  obtains the certificate from the CA , the module  communicates with the CA  and \u201cproves\u201d to the CA that it is executing on a trusted computing platform and neither the module nor the platform have been compromised. If the code signing module  generated the keys itself, the module  sends the public key to the CA  in order to obtain  the certificate. In one embodiment, the code signing module  also sends identifying information to the CA , such as the machine ID , the name of the developer or enterprise to which the developer belongs, etc.","In response, the CA  creates a certificate specifying the public key and, optionally, the machine ID of the developer system  and\/or other identifying information. The CA  signs (i.e., encrypts) the certificate with the CA's private key and sends the certificate to the developer system . In one embodiment, the CA  retains the machine ID and\/or other identifying information in order to allow the developer to be explicitly identified from the certificate even if there is no identifying information in the certificate itself (e.g., the certificate can have a serial number which the CA cross-references with the identifying information). In another embodiment, the CA  discards the machine ID and\/or other identifying information in order to render the developer anonymous if there is no identifying information in the certificate.","In one embodiment, the code signing module  generates the keys itself (and\/or utilizes keys associated with the trusted computing platform) and also generates the certificate itself. This certificate can be trusted by third parties because the trusted computing platform on the developer computer system  itself is trustworthy.","The developer uses the SDS  to develop  the software . At some point, the SDS  will build a version of the software  and activate the code signing module  to sign the software. In one embodiment, the SDS  is adapted to use the code signing module  to sign the software every time the SDS compiles and links the code forming the software. This embodiment ensures that all software produced by the SDS  is signed. In another embodiment, the SDS  can be configured to sign only certain software.","The code signing module  uses a hash function to compute a hash of the software. As is known in the art, a \u201chash function\u201d is a function, mathematical or otherwise, that takes an input string and converts it to a fixed-size output string. In one embodiment, the code signing module  uses the software  as the input to the hash function and obtains a much smaller output string (the \u201chash\u201d). The hash function is selected so that any change to the software  will produce a change in the hash. Therefore, the hash acts as a sort of fingerprint of the software . Examples of hash functions that can be used by embodiments of the present invention include MD5 and SHA.","In one embodiment, the code signing module  uses the private key  to encrypt the hash. In another embodiment, the private key  is utilized by the hash function itself to produce the hash, thereby eliminating the need to perform a discrete encryption of the hash. In one embodiment, the code signing module  also uses the machine ID  during this process. For example, the machine ID  can be included in the hashed software, used to influence the hash function, etc. The module  stores the encrypted hash and the certificate containing the public key corresponding to the private key used to encrypt the hash in the software, which effectively signs  the software. In one embodiment, the code signing module  signs all software developed using the SDS  with the same key pair and certificate. In another embodiment, different software developed using the SDS  is signed with different key pairs and certificates.","The code signing module  passes the signed software  out to the unprotected memory area . At this point, the code signing module  has no further use for the private key. Accordingly, the key can be destroyed or, if there is a desire to save the key, held in the protected area  of the storage device  or held in escrow.","The developer distributes  the signed software  to end-users via standard distribution channels, such as by selling boxed software at retail stores and\/or making the software available for download from the Internet. At some point, an end-user attempts to execute the signed software  on an end-user system .","In one embodiment, the OS or other program modules on the end-user system  verify  the software's signature before executing it. In one embodiment, the end-user system  uses the hashing function to recalculate the hash for the software. Then, the end-user system  decrypts the certificate using the CA's public key and uses the developer's public key contained therein to decrypt the encrypted hash distributed with the software. If the hash of the software generated by the end-user system  matches the decrypted hash distributed with the software, the software  has not been altered and is presumably safe to execute  on the end-user system.","In one embodiment, the end-user system  verifies  the software's signature each time it executes the code. If a parasitic virus, Trojan horse, worm, keystroke grabber, or other malicious code infects the end-user system  and modifies the file containing the software , the modification will cause the verification to fail. As discussed above, in one embodiment the end-user system  is configured to execute only signed software. In another embodiment, the end-user system  executes only signed software, but does not necessarily verify that the signatures are valid. Rather, the system  treats the signature itself as a guarantee that the software was created by a trusted computing platform and, therefore, is not malicious (this is especially true if the signature explicitly identifies the developer). In another embodiment, the end-user system  does not verify that the signatures are valid yet the greater prevalence of signed software due to the present invention results in a generally safer computing environment than in the past.","In one embodiment, the end-user system  maintains a list of hashes or other data in signatures that identify software known to be malicious. For example, the end-user system  can obtain this list from a provider of anti-virus software via the network . The end-user system  compares the signatures of new software installed on the system against the data in the list in order to detected signed software that is malicious.","Thus, the SDS  according to the present invention allows a software developer to easily develop signed software. The code signing module  handles the key management, certificate management, and code signing aspects of the process in a manner transparent to the developer. Accordingly, the present invention facilitates an increase in the use of signed code and correspondingly lessens the impact of malicious code on end-user computer systems . In certain embodiments, the present invention also allows the developer computer system  to be explicitly identified.","The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion, many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2","b":"112"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
