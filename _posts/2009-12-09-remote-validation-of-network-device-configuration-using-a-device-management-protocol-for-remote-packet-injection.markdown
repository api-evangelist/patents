---
title: Remote validation of network device configuration using a device management protocol for remote packet injection
abstract: In general, this disclosure describes techniques for testing and verifying the functionality of networks and network devices without requiring the deployment of specialized testing components. For example, as described herein, a device management protocol (e.g., SNMP or NETCONF) typically used for remote configuration of devices has been extended to allow traffic patterns to be seamlessly injected into the existing network devices that form the enterprise network. For instance, a network management device sends configuration data to a managed network device in accordance with a device management protocol and calls, using a test packet parameter, a device configuration function exposed by a managed device. When the device configuration function is called, the managed device processes the test packet to produce a result in accordance with the configuration data as if the test packet had been received from the network, and the managed device returns a test packet processing result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08248958&OS=08248958&RS=08248958
owner: Juniper Networks, Inc.
number: 08248958
owner_city: Sunnyvale
owner_country: US
publication_date: 20091209
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The invention relates to computer networks, and, more particularly, to remotely injecting computer network packets into network devices.","A packet-based computer network is a group of network devices, such as routers, switches, endpoint devices, and servers, which are interconnected in such a manner as to permit the exchange of network packets between any two or more of the network devices. Large enterprises may operate computer networks that include hundreds or even thousands of geographically distributed network devices. Subnets within an enterprise frequently have particular functional requirements relating to, for example, access control and quality of service (QoS). The continual increase in size and complexity of computer networks has similarly increased the challenge of managing, configuring and verifying the operation of the computer network and the devices within the network. Moreover, an improperly configured network device may leave the enterprise system vulnerable to network security threats. These network vulnerabilities, when combined with the topological and functional complexity of the enterprise, multiply the anxieties of system administrators seeking to protect and ensure the desired operation of the enterprise network.","Conventional methods for testing the operation of an enterprise network and the proper configuration of individual network devices in the network include distributing network analysis components to strategic locations within the enterprise. Administrators assign tasks to the components, such as directing the components to operate as source nodes on the network to generate particular traffic patterns. Other components installed as nodes on the network operate as distributed packet sniffers to capture the packets traversing the network. Administrators then typically use a packet analyzer to decode the packets to understand the behavior and characteristics of the traffic. In effect, such methods provide a high-level understanding of the network's handling of traffic but provides limited ability of the administrator to confirm the proper configuration of individual network devices. In addition, provisioning and deploying a network analysis system including its various components can be expensive and cumbersome.","In general, this disclosure describes techniques for testing and verifying the functionality of networks and network devices without requiring the deployment of specialized testing components. For example, as described herein, a device management protocol (e.g., SNMP or NETCONF) typically used for remote configuration of devices has been extended to allow traffic patterns to be seamlessly injected into the existing network devices that form the enterprise network. That is, rather than deploying traffic generators to strategically introduce traffic patterns into various points of the network, the desired traffic patterns are encapsulated and communicated to the existing network devices of the network via the management protocol that would otherwise be used to manipulate configuration data of the network devices. Enhanced device management software within the network devices decapsulates the traffic patterns and processes the traffic (e.g., applying filtering and forwarding policies) as if the traffic were \u201clive\u201d traffic \u201con the wire\u201d within the enterprise network. However, rather than outputting any resultant traffic onto the network after processing, the network devices encapsulate the resulting traffic and return the traffic by way of the device management interface for inspection and analysis.","For example, an administrator for the network devices in an enterprise uses a device management system to interface with, manage, and test the behavior of the network devices. In the normal course, the administrator interacts with the device management system to specify and install configuration data within the network devices to configure within the network the network devices according to a desired operational scheme. For example, a network device may be configured to accord with certain policies, which may include security, routing, filtering and QoS policies, network address translation (NAT) rules, access control policies, and other configuration data. A particular policy typically includes one or more rules that specify a condition and action that cause the network device to handle a network packet in a certain way. After configuring the network device, the administrator interacts with the same device management system to test the network device as described herein to ensure that the configured network device achieves the intended objectives of the administrator.","In one example, the enhanced network management software on the network device exposes one or more remote procedure calls (RPC) that accept network packets as a parameter. The administrator uses the device management system to generate packets that validate the efficacy of the policy rules or other configuration data of the network device and then inject the packets directly into the network device via the exposed RPC of the network management protocol. The network device receives the packets as an RPC parameter, unwraps the packets and conveys the packets to its processing engine, which applies the appropriate policies to the packets and determines the corresponding packet handling actions as if the packets were live and received directly from its network interface. In this way, the network device processes the packets and determines any packet handling actions that the device would normally take, such as modifying the packets, forwarding the packets via a certain interface, or dropping the packets. The network device encapsulates an account of the resulting action into an RPC-reply, which may include a parameter specifying one or more packets that would have been produced, i.e., output, by the network device, and returns the account to the device management system for analysis.","In one embodiment, the invention is directed to a network management device comprising a network interface configured to receive and send network packets and an element manager configured to send configuration data to a managed network device in accordance with a device management protocol. The network management device further comprises a device management software interface client configured to implement the device management protocol and to call a device configuration function exposed by the managed network device that receives a test packet encapsulated as a first parameter of the device configuration function, wherein the test packet simulates one or more of the network packets, wherein the element manager includes a validation module that generates a test packet and invokes the device configuration function using the test packet as a first parameter.","In another embodiment, the invention is directed to a network device comprising a control unit and a network interface configured to receive and send network packets. The network device additionally comprises a device configuration manager executing on the control unit of the network device to receive configuration data in accordance with a device management protocol and to update configuration data of the network device. The network device further comprises a device management software interface configured to implement the device management protocol and to expose a device configuration function that receives a test packet encapsulated as a first parameter of the device configuration function, wherein the test packet simulates one or more of the network packets. The device configuration manager of the network device includes a packet processing module that extracts the test packet and processes the test packet to produce a test packet processing result in accordance with the configuration data of the network device as if the test packet had been directly received from the network, and wherein the device management interface is configured to send the test packet processing result as a first parameter of a reply message in accordance with the device management protocol.","In another embodiment, the invention is directed to a system comprising a network management device itself comprising a network interface configured to receive and send network packets and an element manager configured to send configuration data to a managed network device in accordance with a device management protocol. The network management device further comprises a device management software interface client configured to implement the device management protocol and to call a device configuration function exposed by the managed network device that receives a test packet encapsulated as a first parameter of the device configuration function, wherein the test packet simulates one or more of the network packets, wherein the element manager includes a validation module that generates a test packet and invokes the device configuration function using the test packet as a first parameter.","The system further comprises a network device managed by the network management device, comprising a control unit and a network interface configured to receive and send network packets. The network device further comprises a device configuration manager executing on the control unit of the network device to receive configuration data in accordance with the device management protocol and to update configuration data of the network device. In addition, the network device comprises a device management software interface configured to implement the device management protocol and to expose the device configuration function called by the network management device, wherein the device configuration manager includes a packet processing module that extracts the test packet and processes the test packet to produce a test packet processing result in accordance with the configuration data of the network device as if the test packet had been directly received from the network. In this embodiment, the device management interface is configured to send the test packet processing result as a first parameter of a reply message in accordance with the device management protocol. In addition, the validation module of the network management device is further configured to determine whether the test packet processing result indicates that the network device is properly configured.","In another embodiment, the invention is directed to a method comprising the steps of invoking a first device configuration function, exposed by a first network device, that receives a first test packet as a parameter, wherein the first test packet simulates a network packet that may be received at a network interface of the first network device. The method additionally comprises the steps of receiving a first reply message comprising a first result packet in response to invoking the first device configuration function, and determining whether the first network device is properly configured based on the first result packet.","The techniques of this disclosure may provide one or more advantages. For example, the techniques allow a system administrator to remotely configure and then validate policies or other configuration data of a network device without having to deploy and rely on distributed network analysis tools. As a result, device management and verification may be centralized. In addition, rather than deploying remote packet analyzers to monitor the behavior of network devices, the account of the packet handling actions taken by a device in response to specific network traffic may be encapsulated directly into a reply via the device management protocol, which allows the device management system to easily consolidate and synchronize analysis data. In some embodiments, the account of the packet handling actions specifies the particular policy rules that produced the actions. Identifying the applied rules permits the administrator to manage the network devices and identify misconfiguration as more than a mere abstraction. As another example, the techniques may be used as a network diagnostic tool. Packets received in an RPC-reply from one existing network device may be analyzed and then relayed, by the device management system via the extended device management protocol, to a second existing device at a different location within the network, e.g., along a particular network route. The second device responds to the device management system with a second RPC-reply containing its hypothetical response to the network traffic, and the administrator may continue remotely testing devices along the network route until the device management system determines the particular device that is interfering with a desired network operation. In this way, policies and configuration data affecting the operation of network devices forming the topology of a network may be tested and verified against specific traffic patterns without introducing the traffic or resultant traffic into the network, so called, \u201con the wire.\u201d","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["2","10","5","5","5","2","5","2","5"]},"Enterprise network  is shown coupled to public network  (e.g., the Internet) via communication link . Public network  may include, for example, one or more client computing devices. Public network  may provide access to web servers, application servers, public databases, media servers, end-user devices, and other types of network resource devices and content. Network devices in public network  may present a number of security threats to enterprise network . For example, devices in public network  may attempt to deliver worms, trojans, and\/or viruses to one or more of elements . As another example, a hacker using a device in public network  may attempt to infiltrate enterprise network  to snoop, corrupt, destroy, or steal information stored by one or more of elements .","Device management system  is communicatively coupled to elements  via enterprise network . Device management system  may be coupled either directly or indirectly connected to the various elements . Once elements  are deployed and activated, administrator  may use device management system  to manage the network devices using a device management protocol. One example device protocol is the Simple Network Management Protocol (SNMP) that allows device management system  to traverse and modify management information bases (MIBs) that store configuration data within each of managed elements . Further details of the SNMP protocol can be found in Harrington et al., RFC 3411, \u201cAn Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks,\u201d Network Working Group, the Internet Engineering Task Force draft, December 2002, the entire contents of which are incorporated herein by reference.","In common practice, device management system  and elements  managed by device management system  are centrally maintained by an IT group of the enterprise and are collectively referred to as an element management system (EMS) or a network management system (NMS). Administrator  interacts with device management system  to remotely monitor and configure elements . For example, administrator  may receive alerts from device management system  regarding any of elements , view configuration data of elements , modify the configurations data of elements , add new network devices to enterprise network , remove existing network devices from enterprise network , or otherwise manipulate the enterprise network  and network devices therein. Although described with respect to an enterprise network, the techniques of this invention are applicable to other network types, public and private, including LANs, VLANs, VPNs, and the like.","Administrator  uses device management system  to configure elements  to specify certain operational characteristics that further the objectives of administrator . For example, administrator  may specify for an element  a particular operational policy regarding security, device accessibility, traffic engineering, quality of service (QoS), network address translation (NAT), packet filtering, packet forwarding, rate limiting, or other policies. Device management system  uses a network management protocol designed for management of configuration data within managed network elements , such as the SNMP protocol or the Network Configuration Protocol (NETCONF) protocol or a derivative thereof, such as the Juniper Device Management Interface, to perform the configuration. In general, NETCONF provides mechanisms for configuring network devices and uses an Extensible Markup Language (XML)-based data encoding for configuration data, which may include policy data. NETCONF is described in R. Enns et al., RFC 4741: \u201cNETCONF Configuration Protocol,\u201d Network Working Group, the Internet Engineering Task Force draft, December 2006, which is incorporated herein by reference in its entirety. Device management system  may establish NETCONF sessions with one or more of elements . In the example of , device management system  participates in NETCONF sessions A-C with elements A-C, respectively.","In the example of , device management system  extends NETCONF to provide a mechanism for testing and verifying the functionality of network elements  without requiring the deployment of specialized testing components within network . For example, device management system  uses the device management protocol (e.g., SNMP or NETCONF) to remotely configure elements  and extends the device management protocol to allow traffic patterns to be seamlessly injected into the existing network elements  that form the enterprise network . Enhanced device management software within each of network elements  decapsulates the traffic patterns for processing by the elements (e.g., applying filtering and forwarding policies) as if the traffic were \u201clive\u201d traffic \u201con the wire\u201d within enterprise network . However, rather than outputting any resultant traffic onto the network after processing, network elements  encapsulate any resulting traffic and return the traffic by way of the device management protocol for inspection and analysis by device management system .","For example, after modifying the configuration data of element A to implement a given operational objective, e.g., by installing configuration data specifying a policy to drop packets received from a particular network source, device management system  may further automatically generate appropriate simulation packet data effective for testing the operational objective using the same device management interface. Device management system  then delivers this packet data to the packet injection mechanism of the enhanced device management protocol, which encapsulates and transmits the packet data to element A via enterprise network  as one or more device management requests, e.g., using NETCONF-based messages. Element A receives the device management requests, extracts the embedded traffic and applies the appropriate policies to the packet data as if the traffic were \u201clive\u201d traffic. Element A then generates a response message for device management system  that includes a data structuring containing an account (i.e., a result) of the application of the device policies. In some embodiments, the account may include a sequence of packets that would have be sent, according to an ordinary operation of element A, in response to the packet data received from device management system . In this manner, device management system  may perform a semantic validation of policies as configured on one or more of elements .",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["10","12","10","80","101","100","10","100","101","5","2","100","10","100","100","102","100","100"]},"In general, a policy is a set of one or more rules that specify conditions as well as corresponding actions that cause a network device to operate in a particular manner upon satisfaction of the condition. Conditions may define match conditions for packets and packet flows within enterprise network . A condition may apply to any level of Open Systems Interconnect (OSI) model or the Transmission Control Protocol\/Internet Protocol (TCP\/IP) model. For example, a condition may match a particular transport protocol or layer-two (L2) parameters (e.g., source or destination port), a particular network protocol or layer three (L3) parameters (e.g., source or destination network address, a packet length, header information), an application protocol or application-layer (L7) parameter or pattern (e.g., a specific HTML pattern within the payload data to detect malicious byte sequences) and various other packet classifications. Conditions may also be interface-specific, such as by specifying specific physical or logical interfaces on which to apply the policies. Corresponding actions for the network device to perform upon occurrence of a condition concern the action the network device takes with respect to the packet or packet flow. These may include, e.g., filtering, forwarding, rate limiting, assigning to a forwarding class, mirroring for traffic analysis, and the like.","Element manager  provides methods for managing a network of devices, such as enterprise network . During a NETCONF session with a managed device, for example, element manager  exchanges configuration-related data  with the managed device. An administrator  may interface with element manager  directly in order to perform policy and configuration management tasks. In some instances, element manager  automatically performs such tasks (e.g., via scripts) in order to rapidly handle policy-related issues or to relieve the administrative burdens of managing enterprise network . For example, element manager  may periodically poll elements  to determine whether the respective configurations are consistent with the requirements of enterprise network . As one example, element manager  may require elements  to install a recent virus definition for anti-virus software in order to access the resources provided by enterprise network . If, in response to a query from element manager , an element  declares an out-of-date anti-virus definition, element manager  may direct a credentialing agent (not shown), such as a Remote Authentication Dial In User Service (RADIUS) server, to revoke the network access credentials of the element .","Element manager  receives device configuration commands from an administrator or other agent and modifies, as directed, one or more of elements  in accordance with the commands. Element manager  further updates the configuration data in devices policies  upon receipt of device configuration commands to ensure that the configuration data is consistent with the configuration of the corresponding one or more of elements . In some embodiments, prior to deploying the configuration data to the managed element, element manager  selects and applies an appropriate one of schemas  to validate that the configuration data entered by administrator  conforms to syntax and semantics published by a manufacturer of the device being managed. If an element  were to fail, element manager  may push the configuration data to a replacement for the element  in order to restore element  to the most recent configuration. In some instances, element manager  may perform bulk configuration of multiple elements . That is, element manager  may push a set of policy rules or configuration data sequentially or simultaneously to multiple elements  in an automated fashion via enterprise network .","In some embodiments, element manager  is an extension of the Juniper Networks Network and Security Manager (NSM) application as described in Juniper Networks, \u201cJuniper Networks Network and Security Manager Administration Guide Revision 2009.1,\u201d August 2009, which is incorporated herein by reference in its entirety.","In the example of , device management system  further includes device management interface client  (\u201cDMI client \u201d) for exchanging messages with elements . NETCONF permits server devices, such as elements , to expose a full, formal application programming interface (API) to potential client devices. DMI client  implements and extends aspects of the NETCONF protocol in order to provide an interface by which element manager  participates in a communication session with elements . For example, DMI client  initiates and maintains connections with an element , handles authentication, security, and confidentiality for the connection, determines the supported NETCONF protocol extensions provided by the element , receives well-formed data in accordance with the NETCONF protocol for transmission to the element , and relays data received from the element  and destined for element manager . As described in detail with respect to , DMI client  extends the client-side of the NETCONF protocol to interface with a server-side extension of the NETCONF protocol that permits management devices, such as device management system , to inject packets directly into elements .","In accordance with the principles of the invention, element manager  includes validation module , which injects, via DMI client , packets directly into elements  via the device management protocol in order to determine whether a policy or configuration data of each of elements  meets specific operational objectives for the element. In general, element manager  directs validation module  to validate all or a subset of the configuration data or policy rules deployed to one or more of elements , for example, element A. In response, validation module  analyzes, for element A, the appropriate policy rules stored in device policies  in order to determine a packet or sequence of packets that may adequately assess the behavior of element A under analysis, as configured with the policy rules being validated, with respect to the intended objectives.","Validation module  generates packets in accordance with the above determination and delivers the test packets to DMI client , which establishes a NETCONF session with element A and then sends the test packets through the server-side NETCONF extension implemented on element A in order to remotely and directly inject the test packets into element A. As explained herein, the generated test packets may be communicated as parameters of RPC messages of the device management protocol so that the test traffic does not traverse the network as \u201clive\u201d network traffic.","Element A receives the messages containing the test packets and responds with reply data encoded according to the requirements of the NETCONF extension. The reply data may include a sequence of zero or more packets that represent the output packets that element A would, according the element A policy configuration, send out of a network interface in response to receiving the test packets at a network interface. In addition, the reply data may include a network interface identifier that element A would use to forward the output packets, as well as the set of policy rules that element A applied to the test packets to determine the output packets and outbound network interface.","DMI client  relays the reply data to validation module , which determines, either automatically or in conjunction with an examination of the reply data by administrator , whether the reply data indicates that the set of policy rules being validated accomplishes the intended policy objectives with regard to element A. By performing the techniques described above, device management system  allows administrator  to remotely validate the policies configured on elements .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3","b":["10","10","80","12","90","5","2","80","80","80","80","80"]},"As described above, device management system  comprises device schemas , which includes a device-specific schema for each of the elements  managed by device management system . Element manager  uses known schemas (e.g., extensible markup language (XML) schemas typically in the form of XML Schema Definition (XSD) documents) that specify the proper means for interacting with and configuring elements  in order to manage policy configurations for elements . Further information on XML documents and XSD documents can be found in Extensible Markup Language (XML) 1.0 (Fifth Edition), W3C Recommendation 26 Nov. 2008, and XML Schema Part 1: Structures Second Edition, W3C Recommendation 28 Oct. 2004, respectively, the entire contents of both are incorporated herein by reference.","The schemas in device schemas  are typically supplied by the manufacturer of a managed device, such as one of elements , and are generally stored as flat files or databases, though they may in some instances be stored as another data structure. In some embodiments, device management system  obtains policy schemas from a remote storehouse, such as the Juniper Networks Schema Repository, a publicly accessible resource that is updated with each network device release. The Juniper Networks Schema Repository enables access to XSD and XML files defined for each network device, model, and software version. In such embodiments, device management system  may cache a copy of the appropriate schemas for elements  within device schemas .","In general, an XML-based device schema for a managed device specifies appropriate syntactical structure for XML configuration files that, when produced by element manager  in compliance with the schema, will be received and understood by the corresponding managed device so as to configure the managed device. For example, a schema may be used to describe to element manager  the elements and attributes that can properly be present within the XML configuration file for that configuration file to be considered valid for a given managed device in view of the specifications of the device, the functions provided by the device, the network requirements for configuration of the device such as an Internet protocol (IP) address and hostname for the device, and mechanisms by which element manager  interacts with the managed device.","Device management system  further includes network interface , which may comprise, e.g., a network interface card having an Ethernet interface. Network interface  is communicatively coupled to elements  via communication links.","As described above, in one example, DMI client  communicates with elements  according to the NETCONF protocol and extensions thereof. The NETCONF protocol uses a Remote Procedure Call (RPC) paradigm\u2014the NETCONF protocol operations (i.e., the individual RPCs) are realized on top of a simple RPC layer. The RPC layer is layered on a transport protocol, e.g., SSH or SSL, with a transport session initiated and maintained by DMI client , as described with respect to .","In one example, managed devices include a server that exposes RPCs for performing various operations associated with device management. For example, the baseline operations for the NETCONF protocol, i.e., those functions that any NETCONF capable device must support, include get, get-config, edit-config, copy-config, delete-config, lock, unlock, close-session, and kill-session, each of which is described in detail in R Enns et al., RFC 4741: \u201cNETCONF Configuration Protocol,\u201d incorporated supra.","In one example, DMI client  supports remote procedure call interfaces A-N (collectively, \u201cRPC-IF s \u201d), which provides interfaces to corresponding RPCs supported by elements . RPC-IFs  accept, as parameters, configuration or other data and generate RPC requests for transmission to elements . The name and parameters of an RPC are encoded as the contents of an <rpc> element. The name of the RPC is an element directly inside the <rpc> element, and any parameters are encoded inside this element. Therefore, upon receiving parameters, an RPC-IF  encloses the parameters first in the appropriate XML tag that specifies the name of the RPC-IF , e.g. <get-config>, and then encloses the resulting operation XML-element in an <rpc> tag. Additional details for generating proper operation and <rpc> XML-elements may be found in R. Enns et al., RFC 4741: \u201cNETCONF Configuration Protocol,\u201d incorporated supra.","Device management system  employs element manager , DMI client , and RPC-IFs  in order to configure an element , e.g., element A, as follows. Provided a particular management task to perform on element A (e.g., in response to a command received from an administrator), element manager  retrieves the schema for element A from device schemas  and applies the schema to the parameters of the management task to generate well-formed XML policy configuration data tailored to element A. Element manager  additionally selects the appropriate one of RPCs  for performing the task. In some instances, element manager  generates well-formed XML policy configuration data by applying a transformation script, such as an Extensible Stylesheet Language Transformations (XSLT) stylesheet, to the element A device policy configuration stored by device policies . In such instances, the XSLT stylesheet transforms the XML-based device policy configuration to the appropriate device policy schema, retrieved from device schemas , for element A.","Element manager  then provides the configuration data and\/or one or more policies to the selected RPC-IF , which encloses the configuration data and\/or policies in the appropriate XML tags and sends the RPC request to element A using the secure, connection-oriented session managed by DMI client . Element A responds to the selected RPC-IF  with an RPC-reply also encoded in XML.","The following exemplifies an RPC request specifying an edit-config operation to delete the configuration for an interface on element A and further exemplifies a resulting RPC-reply received in response. The NETCONF protocol carries configuration data inside the <config> element that is specific to the element A device policy schema as specified in device schemas . The NETCONF protocol treats the contents of the <config> element as opaque data.","<rpc message-id=\u201c101\u201d\n\n","<\/rpc>","<rpc-reply message-id=\u201c101\u201d\n\n","<ok\/>","<\/rpc-reply>","In some embodiments, the schemas for the RPC request and RPC-reply may differ from the schema used to generate the elements exemplified above. For example, the schemas may comport with schemas for the Juniper Networks Device Management Interface, as described in Juniper Networks, \u201cDMI Solution Guide for Juniper Networks Secure Access Platforms,\u201d undated, which is incorporated herein by reference in its entirety.","As described above in the description of , element manager  manages the configurations of elements  on enterprise network  and comprises validation module , which determines whether the configuration, including deployed policies, of each of elements  meets specific operational objectives for the element.","In accordance with the techniques described herein, DMI client  extends NETCONF to support get-packet-analysis RPC-IF A (hereinafter, \u201cpacket analysis interface A\u201d), an additional interface for a corresponding RPC operation supported by elements . Packet analysis interface A to perform functions similar to those described above with respect to RPCs  generally. That is, packet analysis interface A receives parameters, encloses those parameters in the necessary XML tags, and sends the resulting RPC request to one of elements . Rather than being used for device configuration, however, packet analysis interface A allows device management system  to inject packets directly into a managed device by way of an RPC request and to receive, via an RPC-reply, an account of the policies applied.","Packet analysis interface A accepts as parameters a sequence of one or more test packets encoded in a Base64 encoding, as well as a source interface, which specifies an interface on the managed device. The test packets simulate a packet flow to the managed device (e.g., a packet flow for a File Transfer Protocol (FTP) session). As described in detail with respect to , the managed device assumes that test packets received as a parameter of packet analysis interface A are received at the interface specified. Packet analysis interface A encodes the test packets in Base64 encoding to facilitate a plain-text representation and transfer of binary packet data within the XML-based RPC. Base64 encoding encodes binary data by translating it into a base 64 representation of the numeric value of the binary data.","Packet analysis interface A may convert the parameters to an XML-based representation according to an XML schema for packet analysis interface A, e.g., the schema illustrated in . Like other RPC-IFs , packet analysis interface A may enclose the XML-based representation of the parameters first in the appropriate XML tag, <get-packet-analysis>, that specifies the name of the RPC , and then encloses the resulting XML-element in an <rpc> tag. The following is an exemplary RPC request generated by packet analysis interface A:","<rpc message-id=\u201c101\u201d\n\n","<\/get-packet-analysis>","<\/rpc>","Upon generating the RPC request, packet analysis interface A sends the RPC request to the managed device via a NETCONF session established by DMI client .","Validation module  comprises packet generator , which formulates the test packets for transmission, via packet analysis interface A, to an element . Packet generator  receives input that conforms to packet schema , which comprises an XML schema that describes the various fields and patterns for a stream of output packets. For example, packet schema  may include XML-elements for source Internet Protocol (IP) address, destination IP address, transport layer protocol, transport layer port, and application protocol\/service. In addition, to test the deep packet inspection-related policies (e.g., flagging\/dropping packets that contain worms, trojans, intrusions, and spam) of elements , packet schema  may include XML-elements for identifying known attacks. The identifier, such as the name of worm, maps to an object in attack objects , a repository for various byte sequences that are signatures of known attacks. An attack may be identified based on a byte sequence that the attack is known to include (i.e., an attack signature). Packet generator  transforms the XML-based input into a sequence of one or more test packets that conform to a protocol (e.g., IP or Ethernet) used by elements  communicating across enterprise network .","In response to input from an administrator, or as part of an automated scheme, element manager  directs validation module  to validate all or a subset of the data and policy rules configured on one of elements , e.g., element A. Device configuration Element manager  retrieves the policy rules to be validated from the one of device policies  corresponding to element A and provides the policy rules to validation module . Validation module  analyzes the policy rules in order to determine the characteristics of a packet or sequence of packets that may adequately assess the behavior of element A, as configured with the policy rules being validated, with respect to the intended objectives. Because, in the embodiment of , the policy rules are stored in an XML-based encoding, validation module  may use policy-packet conversion XSLT  to transform the XML-based policy rules to a sequence of packets described according to the XML schema of packet schema , where policy-packet conversion XSLT  is an XSLT stylesheet. In other words, validation module  uses policy-packet conversion XSLT  to identify the XML-elements of the policy rules relevant to forming a packet adequate for validating the policy rules and maps the values of the relevant XML-elements to packet schema . In addition to forming the test packets, validation module , as part of the transformation process, also identifies whether any policy rule conditions depend on a source interface. If so, validation module  associates the relevant source interface identifier with the XML-based packet sequence description. As one example, a particular policy rule may direct a network device to drop all packets received from IP address 55.0.0.1. The rule may be expressed as an XML-element in a device policy configuration as follows:","<policy-rule>\n\n","<\/policy-rule>","To create the XML-based input to packet generator  for this exemplary policy rule, validation module  applies policy-packet conversion XSLT  to the XML-element to derive the following, simplified XML-element to describe an appropriate test packet:","<packet>\n\n","<\/packet>","Validation module  performs similar transformations for each of the policy rules to be validated. In some embodiments, device management system  stores data in a form that is not XML based. In some embodiments, packet generator  accepts parameters that do not conform to an XML-schema. Validation module , in such embodiments, consequently employs transformation mechanisms that differ from the conversion described above. For example, validation module  may instead use a Structured Query Language (SQL) query to derive packet parameters from a device policy configuration stored as a database.","Packet generator  receives the XML-based input from validation module  and creates a sequence of one or more test packets based on the values of the input XML-elements. Packet generator  also extracts the source-interface that is associated with the test packet sequence. In some embodiments, different source-interfaces may be associated with different packets in the sequence. For inputs that include an XML-element identifying an attack object, packet generator  queries attack objects  to obtain the byte sequence associated with the attack object and then inserts the byte sequence in the appropriate field in the test packets. After generating the test packets, packet generator  relays the test packets and associated source interface identifier to validation module .","Validation module  passes the test packets and associated source interface to packet analysis interface A, which converts these parameters to an XML-based representation and encloses the representation in additional XML tags according to the requirements of the packet analysis interface A RPC in the manner described above. Finally, packet analysis interface A sends the resulting RPC request to element A via a NETCONF session established by DMI client .","As described in detail below, element A processes test packets received via a NETCONF session in such a manner as to produce resulting output packets identical to those that element A would produce in response to receiving the test packets at an inbound interface of element A. Element A encapsulates these result packets, together with the determined outbound interface for the result packets, in an XML-based RPC-reply to packet analysis interface A. In some instances, element A may include identifiers for the policy rules applied as well as associated forwarding data in the RPC-reply.","Packet analysis interface A, upon receiving the RPC-reply, extracts the result packets, the outbound interface, and any additional associated forwarding data; decodes the result packets from Base64 encoding to binary encoding; and conveys this information to packet validation module . Packet validation module  analyzes the received information to determine whether, in fact, the result packets indicate that element A, as configured, meets the intended operational objectives for element A. In some embodiments, re-key validation module  displays, for analysis, some or all of the contents of the RPC-reply to administrator  via user interface .","Validation module  may further comprise packet capture files . Packet capture files  stores result packets received in an RPC-reply in response to a particular set of test packets generated to test certain corresponding policy rules. Result packets stored in packet capture files  are the result packets that administrator  expects to receive in response to the test packets for the corresponding policy rules when the one of elements  under analysis is operating as intended. Comparing result packets stored in packet capture files to newly received result packets allows validation module , after element manager  modifies one of elements , to quickly verify that the newly modified one of elements  is operating as expected with respect to the corresponding policy rules.","In some embodiments, validation module  may utilize packet capture files  as a repository of test packets. That is, validation module  may store, as test packets, packets that represent past network attacks on enterprise network . Upon updating the policy configurations of any of elements , validation module  may replay the stored test packets to the updated element  to determine whether the updated element  properly achieves the intended objectives as respects the past network attack represented by the test packets.","In some embodiments, validation module  may store result packets obtained from a network device and use these stored result packets as test packets for another network device. Using this technique, validation module  may, for example, validate a series of network devices along a forwarding path to ensure that the network devices are properly configured. This technique is described in further detail with respect to , below.",{"@attributes":{"id":"p-0083","num":"0115"},"figref":["FIG. 4","FIG. 1","FIG. 1"],"b":["14","14","5","5"]},"In this example, router  comprises a set of interface cards (IFCs) A-B (collectively, \u201cIFCs \u201d) for exchanging packets with other network devices. Router  further comprises control unit , which includes routing engine , forwarding engine , and service engine . In general, routing engine  implements routing protocols to exchange routing information with other network devices. Routing engine  uses the routing information (illustrated in ) to derive forwarding information (illustrated in ) for forwarding engine . When router  receives a packet at one of IFCs , forwarding engine  determines a destination and associated next hop for the packet based on the forwarding information and outputs the packet on one of IFCs  based on the destination. However, forwarding engine  flags certain packets destined for router  itself (i.e., having a destination address that is assigned to router ) and redirects the flagged packets to routing engine  for additional processing. Forwarding engine , for instance, redirects packets carrying configuration management information according to the NETCONF protocol to routing engine .","Routing engine  includes device management interface  (\u201cDMI \u201d), which exposes a set of functions by which a remote management device may configure router . DMI  implements and extends the NETCONF protocol in order to receive commands as well as configuration and other data. Routing engine  receives policy configuration data for router  from a remote management device via DMI , for example, and passes the policy configuration data to service engine  for storage in policies . Service engine  applies services in accordance with the policy rules stored in policies  to packets received by router .","DMI  implements the techniques of the invention by extending NETCONF to expose a packet analysis function that accepts as parameters a sequence of one or more test packets and a source interface for the test packet sequence. DMI  receives the parameters when a management device remotely calls the packet analysis function by first establishing a NETCONF session with DMI  and then sending a packet analysis function identifier and the parameters to DMI  via the established session. Because NETCONF session is layered over certain transport layer protocols that are connection-oriented and provide certain security guarantees, the test packets are therefore received at the application layer. Consequently, packets enter router  on different layers. While router  receives ordinary packets at IFCs  on the data link layer (e.g., Ethernet), the ordinary packets may contain, as part of the payload, encapsulated test packets carried on the application layer as parameters of a NETCONF session.  illustrates this distinction as follows.","Network traffic  comprises all packets received by router  at IFC A. IFC A dispatches packets in network traffic  to forwarding engine . Forwarding engine  comprises path selector , which analyzes the packets to determine whether the packets carry an IP address associated with routing engine . That is, path selector typically comprises a lookup module that traverses a radix tree based on key information extracted from a header of the received packet. If the destination is external to router , path selector  determines a forwarding next hop and an associated outbound interface and directs the packets to packet stream  for forwarding by forwarding engine . If the lookup results in a destination of routing engine , path selector  diverts the packets as packet stream  to routing engine . Routing engine  processes the packet to associate it with an existing TCP\/IP-based NETCONF session and forwards the packet to DMI , which extracts the application-layer NETCONF data from the packets. Extracted data may include, in accordance with the techniques of the invention, NETCONF messages that contain a sequence of test packets and an associated source interface received as parameters of the packet analysis function exposed by DMI  and called by a management device. In such instances, DMI  passes the parameters to packet processing module  for processing after decoding the test packets from Base64 encoding to binary.","Packet processing module  processes the test packets in the manner equivalent to that in which router  generally would process packets as if the packets were really received on the wire from the network via the source interface specified in the NETCONF message. In general, packet processing comprises applying routing decision, policy rules, intrusion detection pattern matching or other services offered by router  to the packet as if the packet were actually received. Accordingly, packet processing module  applies the actions to the test packets and performs certain forwarding functions (e.g., modifying the time-to-live (TTL) field). Application of the policy rules and forwarding functions may cause the test packets to be dropped or modified, any may results in a new sequence of zero or more result packets. The result packets represent the packets that router  would ordinarily forward to a neighboring network device if router  had received, at one of IFCs , packets identical to the test packets delivered as a parameter of the NETCONF message. Packet processing module  additionally determines, if necessary, the outbound interface on one of IFCs  that router  would use to forward the result packets to another network device.","Rather than forwarding the result packets via the outbound interface, however, packet processing module  conveys the result packets, as an aspect of packet stream , and an identifier for the outbound interface to DMI . In some embodiments, packet processing module  further conveys an account of the application of the policy rules, which may include a list of the particular policy rules applied or modifications made to the packets (e.g., MPLS labels swapped). DMI  returns the information received from packet processing module  to the calling management device as the packet analysis function return data. To return the information, DMI  encodes the result packets to Base64 encoding and sends the packets and outbound interface identifier as messages within the established NETCONF session. The DMI  NETCONF session encapsulates and directs the packets into packet stream  for transmission to the calling management device via forwarding engine  and IFC A.","By encapsulating test packets and processing results in NETCONF messages, the above-described techniques allow a management device to directly inject test packets into router  and receive an account of the forwarding functions and policy rules applied by the router  to the test packets.",{"@attributes":{"id":"p-0091","num":"0123"},"figref":"FIG. 5","b":["14","14","22","20","26","14","22","46","20","46","22","22","14","20","22","22","20","20","14","26","32","46","26","28","26","32"]},"Service card  may include a service engine . Service engine  may represent a software and\/or hardware component that applies services  in accordance with policy rules defined by policy configuration data stored by policies , a policy module that stores and maintains policy configuration data for service engine  and, by extension, service plane . Policies  may maintain policy configuration data in an XML-based encoding. However, in some embodiments, policies  may maintain policy configuration data in the form of one or more tables, linked lists, databases, flat files, or any other data structure. As one example, a particular policy rule may direct a network device to drop all packets received from IP address 55.0.0.1. The rule may be expressed as an XML-element stored by policies  as follows:","<policy-rule>\n\n","<\/policy-rule>","Policy configuration data stored by policies  may include policies for any of services  applied by service plane . Although the techniques of the invention are described herein with respect to policies  stored within service plane , in some embodiments, policies may be stored within or distributed to additional service cards , routing plane  or forwarding plane . For example, in some embodiments, forwarding plane  may store one or more policy rules for prompt application by the forwarding elements to network traffic .","Routing plane  may include a routing engine  that resolves routes through enterprise network  in accordance with one or more of a plurality of routing protocols. Routing engine  may include a device management interface  (\u201cDMI \u201d), a routing daemon , and packet processing module . Routing engine  is primarily responsible for maintaining routing information  to reflect a current topology of enterprise network . In addition, routing engine  uses routes stored in routing information  to compute best paths for particular network destinations and derive forwarding information  (\u201cforwarding info \u201d), which includes entries that map destination addresses to outbound interfaces on router . Routing engine  may push a subset of forwarding information  to forwarding engine  for storage as forwarding information \u2032.","Forwarding plane  may include a forwarding engine . Forwarding engine  may represent a software and\/or hardware component, such as one or more interface cards (not shown in ), that forwards network traffic . Forwarding engine  may divert aspects of network traffic to  as service traffic  to service engine .","Forwarding engine  may represent a central or distributed forwarding engine, where a distributed forwarding engine is distributed across a plurality of interface cards and a central forwarding engine resides in the above described central location, e.g., control unit , of router . Forwarding engine  may forward network traffic  in accordance with forwarding information \u2032 (\u201cforwarding info \u2032\u201d). Forwarding information \u2032 may comprise an association or table of mappings identifying an interface by which to forward a particular packet or data unit of network traffic .","DMI  may represent a software and\/or hardware module that implements and extends aspects of the NETCONF protocol in order to present one or more RPCs A-N (\u201cRPCs \u201d) with which an administrative device, such as device management system , may interact to specify certain operational characteristics of router .","DMI  cooperates with device management system  to initiate a NETCONF session and to handle authentication, security, and confidentiality for the session. In addition, after establishing a session, DMI  may advertise, to device management system , the set of capabilities that DMI  provides in excess of the baseline NETCONF operations (e.g., get-config). RPCs  accept, as parameters, configuration or other data as well-formed XML data. As described above, the name and parameters of an RPC are encoded as the contents of an <rpc> element. The name of the RPC is an element directly inside the <rpc> element, and any parameters are encoded inside this element. Therefore, upon receiving RPC request comprising an <rpc> element, DMI  determines the name of the RPC  being called (e.g., <get-config>) and then feeds the RPC request to the appropriate one of RPCs based on the extracted name.","In response to invocation by device management system , RPCs  interact with other components of router  to retrieve, configure, copy, and\/or delete policy configuration data stored in policies  and to perform other management-related functions. If the policy configuration data stored in policies  is not XML based, DMI  exports the data into an XML format. When receiving configuration updates from device management system , DMI  receives an XML formatted file with the configuration updates to be performed and then transforms the XML into a device-specific configuration.","Routing daemon  may represent a software module that updates routing information  to reflect a current topology of network . While described as a daemon or software module executed by routing engine , routing daemon  may be implemented as a hardware module or a combination of both hardware and software.","Packet processing module  comprises service daemon  and lookup module . Service daemon and lookup module  cooperate with other components of router  to process packets in the routing plane, including test packets received from packet analysis A. Service daemon  may represent a software module that routing engine  executes to facilitate communication with service plane . While described as a daemon or software module executed by routing engine , service daemon  may be implemented as a hardware module or a combination of both hardware and software. Lookup module  uses forwarding information  to determine the appropriate outbound interface for a packet in the routing plane. In some embodiments, lookup module  may perform certain tasks typically associated with the forwarding plane, such as modifying the TTL field for a packet in the routing plane.","In some embodiments, the functionality of lookup module  is distributed to forwarding plane . In such embodiments, forwarding engine  may include an injection interface by which routing engine  may pass packets and related data (e.g., an associated source interface) to forwarding engine . In one example, forwarding engine  receives a packet at the injection interface, modifies the received packet to indicate that the packet arrived in forwarding engine  from routing engine , and inserts the packet into network packets  for forwarding and service processing. In one example, forwarding engine  modifies a received TCP packet by setting a flag bit in the unused TCP reserved field. Forwarding engine , after processing a packet in conjunction with service engine , determines whether the packet arrived from routing engine  based on the prior modification, and, if so, returns the packet along with forwarding information (e.g., the outbound interface) for the packet to routing engine  via the injection interface.","Router  implements the techniques of the invention by supporting an extension of the NETCONF protocol that permits management devices, such as device management system , to inject packets directly into router . Specifically, DMI client  includes get-packet-analysis RPC A (hereinafter, \u201cpacket analysis A\u201d), a NETCONF-based remote procedure call that exposes aspects of the packet processing functionality of router  to management devices.","Like other RPCs , packet analysis A receives parameters in an RPC request received from device management system  via a NETCONF session. In the case of packet analysis A, the parameters include a sequence of one or more test packets and an associated source interface identifier for the sequence. The sequence of test packets may correspond to a particular packet flow (e.g., a flow associated with a File Transfer Protocol (FTP) session). Packet analysis A cooperates with other components of router  in order to process the test packets as though router , rather than receiving the test packets via a remote procedure call exposed by DMI , received the test packets as an aspect of network packets . Packet analysis A then provides an account of the test packet processing, in the form of an RPC-reply, to device management system  for analysis.","Packet analysis A may receive the RPC request as an <rpc> element with an encapsulated parameter formulated according to an XML-schema for packet analysis A, e.g., the schema illustrated in . The following is an exemplary RPC request received by packet analysis A:","<rpc message-id=\u201c101\u201d\n\n","<\/rpc>","In this example, the <rpc> element specifies the packet analysis A as in the intended one of RPCs  based on the <get-packet-analysis> element. The <get-packet-analysis> element includes a sequence of two test packets encoded in Base64 encoding and an identifier for an associated source interface of router . Packet analysis A may extract the test packet and associated source interface identifier from the <rpc> and <get-packet-analysis> elements for processing by router  components according to the process described below. Packet analysis A may decode the packet sequence from Base64 encoding to binary as an element of the extraction step. Test packets received from device management system  via packet analysis A are conceptualized and illustrated as packet stream  in both .","Packet analysis A cooperates with other components of router  in order to process test packets received from device management system  as follows. After receiving an <rpc> element and extracting the test packets and associated source interface parameters from the element, packet analysis A conveys the parameters to service daemon , which sends the parameters to service engine .","Service engine  applies one or more of services  to the parameters in accordance with policies . That is, provided a condition of the test packets that is matched by a policy rule specified in policies , service engine  performs the corresponding action. For example, the exemplary policy rule provided above requires router  to drop packets originating from IP address 55.0.0.1. Applying this exemplary policy rule, service engine  drops the test packets where the test packet headers identify the packets as originating from IP address 55.0.0.1.","Service engine  returns the result of the application of services  to service daemon . The returned result may in some instances (e.g., dropped packets) be a null data set. In other instances, the returned result includes a sequence of one or more packets. In some embodiments, service engine  also returns associated forwarding data that specifies a manner in which the sequence is to be forwarded or that associates the packets with a service property. For example, service engine  may apply a routing policy that specifies a next hop for packets received at the source interface associated with the test packets. In another example, service engine  may apply a QoS policy that classifies packets meeting the policy condition to a particular forwarding equivalence class (FEC). In these instances, service engine  returns as associated forwarding data the next hop or the FEC, respectively, for the packets. In some embodiments, service engine  returns a list of the policy rules applied to the test packets.","Service daemon  receives the packets and, in some embodiments, the associated forwarding data and\/or policy rules and conveys them to lookup module  for further processing. Lookup module  determines the appropriate outbound interface from forwarding information  based on the destination IP address of the packets received from service engine  and associates the outbound interface with the packets. In some embodiments, lookup module  may apply additional forwarding functions, including forwarding functions that may relate to the associated forwarding data received from service engine . For example, lookup module  may disregard the outbound interface specified by forwarding information  when the associated forwarding data stipulates that the packets are to be forwarded via another outbound interface. As another example, lookup module  may modify the TTL fields of the packets received from service engine .","Application of the policy rules and forwarding functions by service engine  and lookup module  results in a new sequence of zero or more result packets. The result packets represent the packets that router  would ordinarily forward, via the associated outbound interface, to a network device in response to receiving packets identical to the test packets. Lookup module  returns the result packets, as an aspect of packet stream , and an identifier for the associated outbound interface as a test packet processing result to packet analysis A. In some embodiments, lookup module  includes associated forwarding data and\/or the policy rules applied to the test packets in the test packet processing result.","Packet analysis A may return the test packet processing result, i.e., the data received from lookup module , to device management system  via the established NETCONF session. Packet analysis A may first encode the result packets to Base64 encoding for transmission, then enclose the result packets, the associated outbound interface, and any additional data in the appropriate respective XML tags according to an XML-schema, such as the XML-schema illustrated in . The encoded XML data may be further enclosed in an <rpc-reply> tag that identifies the data as an RPC-reply for the packet analysis RPC called by device management system using the test packets as parameters. The following is an exemplary RPC-reply generated by packet analysis A:","<rpc-reply message-id=\u201c101\u201d\n\n","<\/rpc-reply>","Finally, packet analysis A sends, via DMI , the RPC-reply to device management system  for analysis.","By performing the techniques described above, router  leverages and enhances the NETCONF protocol so as to provide a mechanism by which device management system  may directly inject packets into router  in order to determine whether the device, as configured, meets the intended operational objectives. Rather than, for example, distributing agents throughout enterprise network  to generate packets and inject packets into the network for eventual delivery to router , device management system  may establish a NETCONF session with router  via DMI , configure router , and send test packets to the router  in a NETCONF-based RPC while also specifying a source interface for the test packets so as to verify the configuration. Router , in turn, implements a parallel processing path for the test packets that mirrors the standard processing path for ordinary packets received at the interfaces. As a result, router  first processes the test packets in such a manner to produce result packets identical to those that would have been produced by the standard processing path if the packets were received \u201clive\u201d from the network and then returns the result packets and associated analysis data to device management system  as an RPC-reply via the NETCONF session. This request-reply technique allows an administrator to remotely validate configuration data (e.g., policies) on router  by comparing an expected result with an actual result (i.e., the result packets and associated analysis data). In addition, the techniques may simplify device testing and allow device management to be consolidated into device management system . For example, while injecting packets into a computer network frequently requires a device manager to have knowledge of interfaces and other network device attributes distributed throughout the network in order to inject network packets into the network, device management system  injects packets into the network devices, which allows device management system  to leverage the knowledge (e.g., forwarding information, routing information, Ethernet addresses, etc.) contained in the network devices in order to validate policies and other configuration data. Furthermore, conventional mechanisms for remotely injecting network packets into a network at different locations in the network require procurement of an expensive testbed architecture that may not be necessary when using device management system  according to the techniques described. The techniques may also improve analysis efficiency by consolidating, for particular test packets, the analysis data received from router  in an RPC-reply. Finally, an administrator may use the techniques described to send various network attacks to a network device and then use the responsive result packets as a means to understand the behavior of the network device when it is attacked.",{"@attributes":{"id":"p-0121","num":"0173"},"figref":["FIG. 6","FIG. 1"],"b":["2","10","124","126","126","128","130","5","5","2","122","122","124","2","2","4","123","126","5","2","5","128","2","130","2","2","130","2"]},"Device management system , edge router , IDP system , and core router  implement the techniques of the invention to enable a network diagnostic method whereby device management system  may identify a network device that is improperly obstructing certain network traffic along a forwarding path. Device management system  uses the packet analysis RPC exposed by each of edge router , IDP system , and core router  to remotely inject one or more test packets into the network device and receive zero or more result packets in response. Device management system  determines whether the result packets indicate that the network device is an obstruction and, if not, sends the result packets as test packets to the next network device in the forwarding path, which responds with additional result packets that may be used as test packets for the next device in the forwarding path, and so on. In some embodiments, result packets are accompanied by identifiers for the policy rules as that allows device management system , after identifying the obstructing device, to determine the particular policy rule of the obstructing device that is causing the obstruction.","For example, endpoint device  may attempt to access resources of public network , such as an FTP server of public network . However, one or more of edge router , IDP system , and core router  may be presently configured so as to obstruct the establishment of an FTP session for endpoint device  involving public network .","Device management system  uses the policy validation techniques described above to generate test packets that simulate aspects of the FTP session and remotely inject the test packets into the network devices in order to identify the obstruction. For example, device management system  may simulate an upstream FTP session request sent by endpoint device  to public network . Device management system  first generates the test packets that simulate the request then establishes NETCONF session C with core router . Using the NETCONF session, device management system  calls the packet analysis RPC exposed by core router  to remotely inject the test packet into core router . Core router , in turn, responds with result packets encapsulated in an RPC-reply. If core router  responds with improper or empty result packets, device management system  identifies core router  as the obstruction and an administrator may elect to perform ameliorative policy configuration updates to core router  in order to enable the FTP session initiation. In some embodiments, the RPC-reply may include an identification of the policy rule that caused core router  to return improper or empty packets, which further aids the administrator in determining an appropriate policy configuration update for core router . If, on the other hand, core router  returns result packets in an RPC-reply that indicate that core router  is properly forwarding the FTP session request, device management system  next analyzes IDP system , the next device on the forwarding path.","To determine whether IDP system  is obstructing the FTP session request, device management system  establishes NETCONF session B with IDP system . Because the result packets received from core router  represent the packets that core router  would ordinarily send to IDP system , device management system  remotely injects these result packets into IDP system  using the packet analysis RPC exposed by IDP system . IDP system  responds with additional result packets in an RPC-reply, which device management system  analyzes to determine whether IDP system  is obstructing the FTP session request. Device management system  may perform a similar analysis of edge router  using the result packets received from IDP system . By performing the techniques of the invention in this manner, device management system , edge router , IDP system , and core router  provide an effective network diagnostic tool.",{"@attributes":{"id":"p-0126","num":"0178"},"figref":["FIG. 7","FIG. 3","FIG. 8"],"b":["144","80","90","10","80","148","144","146","80","90","148","149","80","80"]},{"@attributes":{"id":"p-0127","num":"0179"},"figref":["FIG. 8","FIG. 3"],"b":["156","80","90","10","80","160","5","2","5","161","156","5","5","163","164","5","5","10"]},"As illustrated in screenshot , user interface  provides a mechanism for performing a network diagnostic according to the techniques of this invention. An administrator may drag one of file references A-B to one of elements  illustrated in enterprise view. For example, screenshot  illustrates an administrator dragging a file representation  from reference link B, which references a result packet capture file comprising result packets received from element B, to element C. Once the drag operation is complete (i.e., the administrator releases file  on element C), element manager  invokes the packet analysis RPC on element C and provides the result packets in the file at file reference B as test packet parameters. Element C performs the packet analysis RPC operations and returns an additional set of result packets in an RPC-reply. Administrator may, in turn, analyze the additional set of result packets to determine whether element C is properly configured. In this manner, an administrator may analyze multiple elements  along a forwarding path to determine whether any of the elements  are configured as to improperly obstruct certain network traffic along the forwarding path.",{"@attributes":{"id":"p-0129","num":"0181"},"figref":["FIG. 9","FIG. 5"],"b":["156","38","14","156","38","156","14"]},{"@attributes":{"id":"p-0130","num":"0182"},"figref":["FIG. 10","FIG. 5"],"b":["158","38","14","38","10","158","38","14","158"]},{"@attributes":{"id":"p-0131","num":"0183"},"figref":["FIG. 11","FIG. 5"],"b":["10","14","10","14","10","14","200","202"]},"Device management system  maintains configuration data, which may include one or more policy rules, that have been already been deployed to router  via the NETCONF protocol. To validate a deployed policy rule, device management system  analyzes the policy rule to determine condition attributes and then generates test packets having those attributes so as to adequately test the policy rule (). Device management system  then calls NETCONF-based packet analysis RPC exposed by router  as described herein using test packets as parameters ().","Router  extracts the test packets from the RPC and processes the test packets according to its policy configuration data to produce zero or more result packets (). Router  encapsulates the result packets in an RPC-reply for the packet analysis RPC and returns the RPC-reply to device management system  (). Device management system  receives the RPC-reply, extracts the result packets, and determines whether the policy rule being tested meets the operational objectives for router  based on an analysis of the result packets.","The techniques described in this disclosure may be implemented, at least in part, in hardware, software, firmware or any combination thereof on the device management system and the managed devices. For example, various aspects of the described techniques may be implemented as encoded program code executed by one or more processors, including one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combinations of such components. The term \u201cprocessor\u201d or \u201cprocessing circuitry\u201d may generally refer to any of the foregoing logic circuitry, alone or in combination with other logic circuitry, or any other equivalent circuitry. A control unit comprising hardware may also perform one or more of the techniques of this disclosure.","Such hardware, software, and firmware may be implemented within the same device or within separate devices to support the various operations and functions described in this disclosure. In addition, any of the described units, modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware or software components. Rather, functionality associated with one or more modules or units may be performed by separate hardware or software components, or integrated within common or separate hardware or software components.","The techniques described in this disclosure may also be embodied or encoded in a computer-readable medium, such as a computer-readable storage medium, containing instructions. Instructions embedded or encoded in a computer-readable medium may cause a programmable processor, or other processor, to perform the method, e.g., when the instructions are executed. Computer readable storage media may include random access memory (RAM), read only memory (ROM), programmable read only memory (PROM), erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), flash memory, a hard disk, a CD-ROM, a floppy disk, a cassette, magnetic media, optical media, or other computer-readable storage media. It should be understood that the term \u201ccomputer-readable storage media\u201d refers to physical storage media, and not signals or carrier waves, although the term \u201ccomputer-readable media\u201d may include transient media such as signals, in addition to physical storage media.","Various embodiments of the invention have been described. These and other embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
