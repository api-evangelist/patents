---
title: Extensible integration between service platforms
abstract: A generic integration engine receives a markup service indicator that indicates a data flow protocol between a client and a service provider. In addition, the generic integration engine performs a data exchange with the service provider based on an outgoing data model indicated by the markup service indicator. The outgoing data model indicates a platform independent interface that is utilized to communicate with the service provider. The generic integration engine also performs a data exchange with the service provider based on an incoming data model indicated by the markup service indicator. The incoming data model indicates the platform independent interface that is utilized to communicate with the service provider.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832252&OS=08832252&RS=08832252
owner: Adobe Systems Incorporated
number: 08832252
owner_city: San Jose
owner_country: US
publication_date: 20120426
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field","This disclosure generally relates to computing devices. More particularly, the disclosure relates to service platforms.","2. General Background","A payment gateway is an online authorization system that authorizes payment from a customer to a merchant through a payment processor. As an example, a payment gateway encrypts data being exchanged. Currently, the vast majority of the payment gateways on the Internet utilize their own Application Programming Interface (\u201cAPI\u201d) model and implementations to expose access for websites to their payment functionality. The websites that have to integrate multiple payment gateways typically have a separate implementation for each integration to cover the differences between data models, API flows, and communication protocols such as SOAP, XML, HTTP Post, Proprietary, or the like. To ensure full functionality, each integration has to be tested. Further, current approaches involve modifications to the code base of a website. As a result, a large degree of complexity is involved with creating new integration with third party service providers.","Further, the payment gateways distribute integration implementation, which is performed by platform owners. Payment gateways cannot practically change their APIs because all platform owners would then have to change their respective implementations, which would is currently difficult. Further, current approaches do not allow new implementations to be easily added when new platforms become more popular.","In one aspect of the disclosure, a computer program product is provided. The computer program product includes a computer useable medium having a computer readable program. The computer readable program when executed on a computer causes the computer to receive, at a generic integration engine, a markup service indicator that indicates a data flow protocol between a client and a service provider. In addition, the computer readable program when executed on the computer causes the computer to perform, at the generic integration engine, a data exchange with the service provider based on an outgoing data model indicated by the markup service indicator. The outgoing data model indicates a platform independent interface that is utilized to communicate with the service provider. The computer readable program when executed on the computer causes the computer to perform, at the generic integration engine, a data exchange with the service provider based on an incoming data model indicated by the markup service indicator. The incoming data model indicates the platform independent interface that is utilized to communicate with the service provider.","In another aspect of the disclosure, a process is provided. The process receives, at a generic integration engine, a markup service indicator that indicates a data flow protocol between a client and a service provider. In addition, the process performs, at the generic integration engine, a data exchange with the service provider based on an outgoing data model indicated by the markup service indicator. The outgoing data model indicates a platform independent interface that is utilized to communicate with the service provider. The process also performs, at the generic integration engine, a data exchange with the service provider based on an incoming data model indicated by the markup service indicator. The incoming data model indicates the platform independent interface that is utilized to communicate with the service provider.","In yet another aspect of the disclosure, a system is provided. The system includes a generic integration engine that receives a markup service indicator that indicates a data flow protocol between a client and a service provider performs a data exchange with the service provider based on an outgoing data model indicated by the markup service indicator, and performs a data exchange with the service provider based on an incoming data model indicated by the markup service indicator. The outgoing data model indicates a platform independent interface that is utilized to communicate with the service provider. The incoming data model indicates the platform independent interface that is utilized to communicate with the service provider.","A computer program product, method, apparatus, and system utilize a framework that has at least one service indicator, which is independent of website\/web platform technology. This framework enables websites and web platforms to integrate with new third party services without requiring source code recompilation or deployments to production environments. Further, the framework may reduce the time involved in implementing new integrations.","The framework allows for a unified approach so that a website\/web platform and any third party service with similar functionality that exposes public APIs, e.g., payment providers, shipping providers, or the like may have a platform independent integration. Accordingly, the API owner that provides the third party service outside the website\/platform may rely on the framework existence in the website\/platform to efficiently develop and distribute a service indicator independent of website\/web platform technology.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","102","104","102","104","106","104","108","104","102","110","110"]},"The integration with servers for the plurality of service providers  is implemented at the code level by composing the request messages and parsing the received response from the system of a particular service provider from the plurality of service providers . New code is likely compiled into libraries and pushed to production environments in order to implement new integrations with the plurality of service providers , e.g., payment gateways, shipping providers, or the like.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":["200","102","104","104","106","104","104","104","202","104","200"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3","FIG. 2"],"b":["200","202","102","202","302","304"]},"The markup service indicator describes the data flow between a web platform and a service provider. In one embodiment, outgoing and incoming data flows may be described utilizing a template language, a template markup language, or the like. Accordingly, the markup service indicator is powerful enough to describe complex messages between the client application and the service provider. The outgoing message template describes data that is utilized by the service provider and the format of the message being sent by the web platform . The data that is utilized is exposed and modeled by the web platform  utilized a standardized format provided by the generic integration engine  irrespective of the particular service provider data and communication protocol of the service provider. An outgoing data module  is utilized by the generic integration engine  to perform the data exchange with the service provider. In one embodiment, a template language, a template markup language, or the like may be utilized by the generic integration engine  to utilize the outgoing data module . In another embodiment, a set of validation rules imposed by the service provider may be described for the outgoing message and enforced by the generic integration engine . For example, a template markup language may be utilized to generate custom filters and blocks for data processing and transformation.","An example of an outgoing message is as follows:",{"@attributes":{"id":"p-0024","num":"0023"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<OutgoingMessageTemplate>"},{"entry":"\u2003\u2003<RawOutgoingMessageTemplate>"},{"entry":"\u2003\u2003\u2003\u2003<![CDATA[OPERATION=SAL& ECI=7&"},{"entry":"\u2003\u2003\u2003\u2003\u2003PSPID={{configuration.3rdParty}}&"},{"entry":"\u2003\u2003\u2003\u2003\u2003USERID={{configuration.CustomerID}"},{"entry":"\u2003\u2003\u2003\u2003\u2003}&"},{"entry":"\u2003\u2003\u2003\u2003\u2003PSWD={{configuration.Signature | urlEncode}}&"},{"entry":"\u2003\u2003\u2003\u2003\u2003EMAIL={{customerInfo.email}}&"},{"entry":"\u2003\u2003\u2003\u2003\u2003CARDNO={{creditCard.number}}&"},{"entry":"\u2003\u2003\u2003\u2003\u2003ED={{creditCard.expiryMonth}}{{creditCard.expiryYear}"},{"entry":"\u2003\u2003\u2003\u2003\u2003}& CVC={{creditCard.ccv}}&"},{"entry":"\u2003\u2003\u2003\u2003\u2003CN={{creditCard.holder | urlEncode}}&"},{"entry":"\u2003\u2003\u2003\u2003\u2003ORDERID={{transactionInfo.orderId}}&"},{"entry":"\u2003\u2003\u2003\u2003\u2003AMOUNT={{transactionInfo.amount | times:100}}&"},{"entry":"\u2003\u2003\u2003\u2003\u2003CURRENCY={{transactionInfo.currencyCode}}&"},{"entry":"\u2003\u2003\u2003\u2003\u2003COM={{transactionInfo.description |"},{"entry":"\u2003\u2003\u2003\u2003\u2003urlEncode}}&"},{"entry":"\u2003\u2003\u2003\u2003\u2003GLOBORDERID={{transactionInfo.orderId}}]]>"},{"entry":"\u2003\u2003<\/RawOutgoingMessageTemplate>"},{"entry":"<\/OutgoingMessageTemplate>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Further, the incoming part of the markup service indicator maps the information from the incoming data to a data model exposed by the generic integration engine  with an incoming data processor  to the web platform . This mapping may be described utilizing a template language, a template markup language, or the like. In one embodiment, regular expression may be utilized to map the information from the incoming data to fields to be exposed by the data model that is exposed by the generic integration engine . In one embodiment, a set of validation rules may be added to assert some conditions on the incoming data and\/or data transformation.","An example of an incoming processor description is as follows:",{"@attributes":{"id":"p-0027","num":"0026"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<IncomingMessageProcessor>"},{"entry":"\u2003\u2003\u2003<ValidationRules>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<ExpectedValue field=\u201c{{response.statusCode}}\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003value=\u201c9\u201d\/>"},{"entry":"\u2003\u2003\u2003<\/ValidationRules>"},{"entry":"\u2003\u2003\u2003<Mapping>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<RawIncomingMessageMapping>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<![CDATA[<?xml version=\u201c1.0\u201d?><ncresponse"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003orderID=\u201c{{response.any}}\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003PAYID=\u201c{{response.transactionRef}}\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003NCSTATUS=\u201c{{response.any}}\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003NCERROR=\u201c{{response.errorCode}}\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ACCEPTANCE=\u201c{{response.authorizationCode}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}\u201d STATUS=\u201c{{response.statusCode}}\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003amount=\u201c{{response.amount}}\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003currency=\u201c{{response.currencyCode}}\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003PM=\u201c{{response.any}}\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003BRAND=\u201c{{response.any}}\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003NCERRORPLUS=\u201c{{response.errorMessage}}\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/ncresponse>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/RawIncomingMessageMapping>"},{"entry":"\u2003\u2003\u2003<\/Mapping>"},{"entry":"<\/IncomingMessageProcessor>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The generic integration engine  implements the data exchange and translation between a client application and a particular service provider . The data exchange and translation that is implemented is driven by the markup service indicator that is received by the web platform . Further, the generic integration engine  exposes a standardized interface at the end of the processing chain with any service provider. The web platform  may utilize the standardized interface to perform particular logic such as order generation, shipping confirmation, or the like.","The outgoing messages sent by the generic integration engine  may be described by the markup indicator. Various template languages, markup templates languages, or the like may be utilized for message description. The generic integration engine  may utilize a data model provided by the client application to compose outgoing messages to be sent to the service provider.","The incoming information may be extracted from messages received from a service provider by utilizing regular expressions or a particular query language. The markup indicator may describe the communication protocol that allows integration with a multitude of service providers.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4","b":["400","402","400","404","400","406","400"]},"Any of the configurations described herein may be utilized with a variety of computing devices. A computing device may be a PC, laptop, notebook, smartphone, cell phone, tablet device, personal digital assistant (\u201cPDA\u201d), kiosk, or the like. Further, any of the configurations described herein may be utilized with a variety of different user interfaces.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 5","b":["500","502","504","506","500","506","504","504"]},"The Input\/Output (\u201cI\/O\u201d) devices  may be coupled directly to the system configuration  or through intervening input\/output controllers. Further, the I\/O devices  may include a keyboard, a keypad, a mouse, a microphone for capturing speech commands, a pointing device, and other user input devices that will be recognized by one of ordinary skill in the art. Further, the I\/O devices  may include output devices such as a printer, display screen, or the like. Further, the I\/O devices  may include a receiver, transmitter, speaker, display, image capture sensor, biometric sensor, etc. In addition, the I\/O devices  may include storage devices such as a tape drive, floppy drive, hard disk drive, compact disk (\u201cCD\u201d) drive, etc. Any of the modules described herein may be monolithic modules or modules with functionality distributed in a cloud computing infrastructure utilizing parallel and\/or pipeline processing.","Network adapters may also be coupled to the system configuration  to enable the system configuration  to become coupled to other systems, remote printers, or storage devices through intervening private or public networks. Modems, cable modems, and Ethernet cards are just a few of the currently available types of network adapters.","The processes described herein may be implemented in a general, multi-purpose or single purpose processor. Such a processor will execute instructions, either at the assembly, compiled or machine-level, to perform the processes. Those instructions may be written by one of ordinary skill in the art following the description of the figures corresponding to the processes and stored or transmitted on a computer readable medium. The instructions may also be created utilizing source code or any other known computer-aided design tool. A computer readable medium may be any medium capable of carrying those instructions and include a CD-ROM, DVD, magnetic or other optical disc, tape, silicon memory (e.g., removable, non-removable, volatile or non-volatile), packetized or non-packetized data through wireline or wireless transmissions locally or remotely through a network. A computer is herein intended to include any device that has a general, multi-purpose or single purpose processor as described above.","It should be understood that the computer program products, processes, apparatuses, and systems described herein can take the form of entirely hardware embodiments, entirely software embodiments, or embodiments containing both hardware and software elements. If software is utilized to implement the method or system, the software may include but is not limited to firmware, resident software, microcode, etc.","It is understood that the computer program products, processes, apparatuses, and systems described herein may also be applied in other types of computer program products, processes, apparatuses, and systems. Those skilled in the art will appreciate that the various adaptations and modifications of the embodiments of the computer program products, processes, apparatuses, and systems described herein may be configured without departing from the scope and spirit of the present computer program products, processes, apparatuses, and systems. Therefore, it is to be understood that, within the scope of the appended claims, the present computer program products, processes, apparatuses, and systems may be practiced other than as specifically described herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above-mentioned features of the present disclosure will become more apparent with reference to the following description taken in conjunction with the accompanying drawings wherein like reference numerals denote like elements and in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
