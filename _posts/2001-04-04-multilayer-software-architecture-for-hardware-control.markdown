---
title: Multi-layer software architecture for hardware control
abstract: A software system having a multi-layer architecture for controlling a hardware system including a latch layer, a hardware control layer, an access layer, and an orchestration layer. The latch layer includes a latch object for each of a set of control points of the hardware system. Each latch object provides a common interface in the software system for accessing the corresponding control point. The hardware control layer includes a hardware control object for each of a set of sub-portions of the hardware system. Each hardware control object coordinates accesses to the control points of the corresponding sub-portion through the latch layer. The access layer includes an access object for each of a set of groupings of the sub-portions. Each access object coordinates accesses to the corresponding grouping of the sub-portions. The orchestration layer includes an orchestration object for each of a set of functional features of the hardware system. Each orchestration object provides a common interface in the software system for accessing a corresponding grouping of the access objects which are associated with the corresponding functional feature.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06968555&OS=06968555&RS=06968555
owner: Agilent Technologies, Inc.
number: 06968555
owner_city: Palo Alto
owner_country: US
publication_date: 20010404
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of Invention","The present invention pertains to the field of software control of hardware. More particularly, this invention relates to a multi-layer software architecture for hardware control.","2. Art Background","A wide variety of systems include hardware which is controlled by software. Software that controls hardware is commonly referred to as firmware. For example, a wide variety of instruments including those used in test and measurement applications commonly include circuits for generating test signals and\/or circuits for obtaining measurements along with firmware for controlling the circuits.","A circuit in such a system typically includes one or more control points that enable software to control a circuit by writing values to the control points of the circuit. The control points may be implemented as registers and\/or digital-to-analog converters, etc.","It is common to make hardware changes to a system when performing support or upgrade operations on the system. Hardware changes to a system may involve modification to its circuits, replacement of its circuits, and\/or the addition of circuits. Such hardware changes typically require modifications to the firmware that controls the circuits.","Prior firmware systems may grow quite large and complex as the number and complexity of circuits being controlled increases. In addition, the firmware code that directly accesses the control points of circuits is usually scattered haphazardly throughout numerous portions of a firmware system. These factors typically complicate the task of performing firmware modifications. For example, it is common to undertake a search through large amounts of code to find references to the control points that require modification. Unfortunately, such methods of performing firmware modification are usually time consuming and can greatly increase the time and cost of upgrading a system and may introduce faults into the firmware.","A software system having a multi-layer architecture for controlling a hardware system is disclosed. The multi-layer architecture includes a latch layer, a hardware control layer, an access layer, and an orchestration layer. The latch layer includes a latch object for each of a set of control points of the hardware system. Each latch object provides a common interface in the software system for accessing the corresponding control point. The hardware control layer includes a hardware control object for each of a set of sub-portions of the hardware system. Each hardware control object coordinates accesses to the control points of the corresponding sub-portion through the latch layer. The access layer includes an access object for each of a set of groupings of the sub-portions. Each access object coordinates accesses to the corresponding grouping of the sub-portions. The orchestration layer includes an orchestration object for each of a set of functional features of the hardware system. Each orchestration object provides a common interface in the software system for accessing a corresponding grouping of the access objects which are associated with the corresponding functional feature.","Other features and advantages of the present invention will be apparent from the detailed description that follows.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","200","1","200","1","50","1","50","200","1"]},"The software system  includes a set of latch objects - through -n which share a common interface and form a latch layer . The latch objects - through -n may share a similar responsibility with respect to the control points - through -n.","The latch objects - through -n correspond to the control points - through -n, respectively. The latch objects - through -n encapsulate and provide common interfaces to the corresponding control points - through -n, respectively. For example, the latch object - encapsulates and provides a common interface to the control point - and the latch object - encapsulates and provides a common interface to the control point -, etc.","Each latch object - through -n provides a wrapper and locking mechanism around a physical address associated with the corresponding control point - through -n. For example, the latch object - provides a wrapper and locking mechanism around the physical address associated with the control point - and the latch object - provides a wrapper and locking mechanism around the physical address associated with the control point -, etc.","In one embodiment, each latch object - through -n is an object implemented as a C class and its common interface includes a set of methods. The methods include a changestate( ) method for altering the corresponding control point - through -n. For example, the changestate( ) method of the latch object - takes as an argument a value to be applied to the control point - and the changestate( ) method of the latch object - takes as an argument a value to be applied to the control point -. Each latch object - through -n uses a C locking mechanism to lock the physical address associated with the corresponding control points - through -n.","The implementation of the latch objects - through -n are adapted to the particular hardware implementation of the underlying control points - through -n and insulate higher objects of the software system  from these particulars. For example, an alteration of the circuitry associated with the control point - can be accommodated by a modification to the latch object - rather than modifications to other portions of the software system .","The software system  includes a hardware control object - that encapsulates and provides a common interface for controlling the hardware subsystem -. The hardware control object - provides a hardware control layer  in the software system . The hardware control object - coordinates the latch objects - through -n.","The hardware control object - includes a set of methods which are adapted to provide a set of hardware functions associated with the hardware subsystem - according to the underlying hardware implementation. The methods in the hardware control object - are adapted to calculate values to be applied to the control points - through -n and call the changestate( ) methods of the latch objects - through -n when appropriate. Code in higher objects of the software system  call the methods of the hardware control object - when accessing the hardware functions provided by the hardware subsystem -. In one embodiment, the hardware control object - is an object implemented as a C container class for the latch objects - through -n.","In some embodiments, the latch objects - through -n are grouped together using the hardware control object - because the control points - through -n may have interdependencies with respect to one another. The nature of the interdependencies among the control points - through -n may depend on the particular application-specific function of the hardware subsystem -. One example of an interdependency between a pair of control points is one in which the valid range of values for one depends on the value of the other. The coding of the methods in the hardware control object - are adapted to the interdependencies and shield higher levels of the software system  from having to adapt to the interdependencies. An alteration or replacement of the hardware subsystem - including changes in the interdependencies among the control points - through -n can be accommodated by a modification to the hardware control object - rather than modifications to other portions of the software system .","In some embodiments, the hardware control object - may include files having calibrated data to be applied to the control points - through -n.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["100","100","200","1","200","2","300","200","2","150","1","150"]},"As before, the software system  includes the hardware control object - for grouping together the latch objects - through -n which are associated with the control points - through -n of the hardware subsystem -. In this embodiment, the hardware control layer  of the software system  includes a hardware control object - for grouping together a set of latch objects - through -n which are associated with the control points - through -n of the hardware subsystem -.","The latch objects - through -n encapsulate accesses to the control points - through -n, respectively, in a manner substantially similar to that described with respect to the latch objects - through -n. The hardware control object - encapsulates and provides a common interface to the functionality of the hardware subsystem - in a manner substantially similar to that described with respect to the hardware control object -.","The software system  in this embodiment includes an access layer  having an access object - that encapsulates and coordinates accesses to the hardware subsystems - and - in response to requests for specific hardware actions from higher levels of the software system . The access object - implements methods that coordinate the hardware functions associated with the hardware control objects - and -. In this context, the access object - groups together the hardware subsystems - and -. The grouping may be based upon interdependencies among hardware subsystems - and -.","Consider an example in which the subsystem - controls the frequency of a waveform and the subsystem - attenuates the waveform and in which there is a dependancy between the frequency of the waveform and the amount of attenuation. Code in the access object - may call the methods of the hardware control object - to obtain an attenuation setting from the subsystem -, determine an appropriate frequency setting according to an interdependency, and then call the methods of the hardware control object - to set the frequency of the waveform accordingly.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["100","100","200","1","200","2","1200","1","200","1","200","2","1200","1","300"]},"As before, the software system  includes the hardware control objects - and - for providing a common interface to the latch objects - through -n and the latch objects - through -n, respectively. Similarly, the software system  includes the access object - for grouping together the hardware control objects - and -. In this context, the access object - groups together and provides a common interface to the functionality of the hardware subsystems - and -.","In this embodiment, the software system  includes a hardware control object - for grouping together a set of latch objects - through -n which are associated with a set of corresponding control points of the hardware subsystem -. The software system  in this embodiment includes an access object - that encapsulates, provides a common interface to, and coordinates accesses to the hardware subsystem -.","The hardware control objects -, - and - of the hardware control layer  may be viewed as sharing a similar responsibility in that they coordinate latch objects. The access objects - and - of the access layer  may be viewed as sharing a similar responsibility in that they coordinate hardware control objects.","The software system  in this embodiment includes an orchestration layer  having an orchestration object - for grouping together and providing a common interface to the access objects - and -. The grouping of the access objects - and - may be based on interdependencies in the functionality of their underlying hardware subsystems. The grouping of the access objects - and - may define a functional feature of the hardware system . The orchestration object - may implement methods that provide higher level feature-based functionality which is substantially independent of the underlying hardware system . In one embodiment, the orchestration object - is an object implemented as a C class having data that includes pointers to the access objects - and -.","Consider an example in which the hardware system  generates a waveform, the hardware subsystem - controls the frequency of the waveform and the hardware subsystem - attenuates the waveform and in which the hardware subsystem - conditions the waveform. In this context, the access object - encapsulates the functions in the software system  that are involved in generating the source waveform and the access object - encapsulates the functions that are involved in conditioning the waveform. The orchestration object - calls methods in the access object - to control the generation of the source waveform and calls methods in the access object - to control the conditioning of the source waveform.","The hardware system  and its sub-portions\u2014the hardware subsystems -, -, and - may be embodied in a variety of arrangements. For example, the hardware system  may be a circuit board or module and the hardware subsystems - and - and - may be separate circuits contained on it. In another example, the hardware subsystems - and - and - may be separate sub-circuits of a larger circuit that is the hardware system . In yet another example, the hardware subsystems - and - and - may be separate modules or circuit boards contained within a rack mounted hardware system . The control points of the hardware subsystems -, -, and - may be implemented as registers or digital-to-analog converters, etc., or any combination of these.","The hierarchical arrangement of the hardware system  and the hardware subsystems -, -, and - and the control points in the hardware subsystems -, -, and - correspond to the hierarchical arrangement of the access objects - and -, the hardware control objects -, -, and -, and the latch objects - through -n, - through -n, and -n through -n. Changes that encompass a grouping of hardware subsystems are handled by changes to a corresponding access object and below. Changes that encompass a hardware subsystem are handled by changes to a corresponding hardware control object and below. Changes that encompass a control point are handled by changes to a corresponding latch object.","For example, the software system  adapts to a modification or replacement of the hardware subsystems - and - with a modification or replacement of the access object -. The software system  adapts to a modification or replacement of the hardware subsystem - with a modification or replacement of the hardware control object -. The software system  adapts to a modification or replacement of the control point - with a modification or replacement of the latch object -. The modification to a object may include modifications to its data and\/or its methods.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4","b":["100","100","10","1","20","1","20","2","30","1","30","2","130","1","200","1","200","2","1200","1"]},"In this embodiment, the software system  includes a hardware control object - and an access object - for a corresponding hardware subsystem and a hardware control object - and an access object - for a corresponding hardware subsystem and an orchestration object - for grouping the access objects - and -.","The orchestration object - handles requests from a user which are associated with a type A function feature of the hardware system  and the orchestration object - handles requests from the user which are associated with a type B function feature of the hardware system . Consider an example in which the orchestration object - uses the access objects - and - to control the frequency of a waveform and the orchestration object - uses the access objects - and - to control the amplitude of the waveform. In this context, type A functional features are frequency related and type B functional features are amplitude related. The orchestration object - may include a method that takes as an argument a frequency value and the orchestration object - may have a method that takes as an argument an amplitude value.","Each latch object is controlled by only one hardware control object and each hardware control object is controlled by only one access object whereas multiple orchestration objects can control each access object. In addition, orchestration objects can control other orchestration objects. This enables an access object to handle conflicts in the control undertaken by their orchestration objects. For example, the access objects - and - are each contained in both the orchestration objects - and -. If the orchestration object - undertakes to generate a frequency of 500 MHZ and the orchestration object - undertakes to set an amplitude of 10 V then either the access object - or the access object - may determine that the corresponding hardware is only capable of 5 V and 500 MHZ and take appropriate action to apply these constraints.","No communication is allowed between access objects. This forces all requests to be coordinated by an orchestration object. Similarly, no communication is allowed between hardware control objects.","In some embodiments, communication is allowed between orchestration objects. For example, the orchestration object - communicates to the orchestration object - that it is changing the frequency of the waveform which is an operation that may require the orchestration object - to change an operating mode if its underlying hardware.","In one embodiment, the software system  includes initialization or boot-up code for detecting the versions of the hardware systems and subsystems installed and for setting the pointers maintained by each orchestration objects to its corresponding access objects and for setting the pointers maintained by each access objects to its corresponding hardware control objects accordingly.","The multi-layer architecture disclosed herein may be used to impose rules on the laying out of control of hardware systems including embedded systems. These rules provide clarity and consistency in generating new control algorithms for a system as well as maintenance of a system.","The orchestration layer enables the implementation of high-level, feature-based algorithms in which there is little need for knowledge of the underlying hardware system. The access layer provides for encapsulation of hardware function circuits and enables implementation of control which is specific to the underlying circuitry. The access layer provides an application programming interface (API) to the underlying circuitry and enables use of the underlying circuit functionality without specific knowledge of the design of the underlying circuitry. The hardware control layer is provided to abstract the specific digital interface to the underlying circuitry from the access layer. Minor changes to a portion of underlying circuitry may be changed while not affecting the access layer. For example, the resolution of a control DAC may be changed with a corresponding change to the code in the hardware control layer while not affecting the code in the access layer","The foregoing detailed description of the present invention is provided for the purposes of illustration and is not intended to be exhaustive or to limit the invention to the precise embodiment disclosed. Accordingly, the scope of the present invention is defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is described with respect to particular exemplary embodiments thereof and reference is accordingly made to the drawings in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
