---
title: System and method for real time monitoring and control of networked computers
abstract: A method of real time monitoring and control of networked computers, includes: providing a monitoring computer unit and client computer unit both capable of being communicatively coupled to a network system; and detecting states in the client computer and transmitting the detected states to the monitoring computer unit via the network system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06961765&OS=06961765&RS=06961765
owner: BBX Technologies, Inc.
number: 06961765
owner_city: Nashville
owner_country: US
publication_date: 20010406
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF THE ILLUSTRATED EMBODIMENTS"],"p":["This application claims priority to U.S. Provisional Application No. 60\/194,895, by Robert F. Terry, filed Apr. 6, 2000, and entitled \u201cPC MACHINE ENVIRONMENT AND CONFIGURATION PROFILE REAL TIME MONITORING AND CONTROL BY ACTIVE MEMORY WINDOW HANDLES, WINDOW MESSAGING AND DIRECTORY\/FILE\/REGISTRY MAPPING\u201d. Application No. 60\/194,895 is fully incorporated herein by reference.","The present invention relates generally to the field of utility (operating system) application programming, and more particularly but not exclusively, to systems and methods for the real-time monitoring, recording and\/or controlling the internal environment of a computer unit such as the activity within a personal computer (PC) machine.","As the use of technology expands in businesses and organizations, there is an increasing need for management personnel to effectively track and control the internal PC machine activity (environment) of company owned technology.","For example, a PC has an internal operating system (O\/S), which is initiated at the time the PC \u201cboots\u201d from its internal hard drive. This O\/S includes a series of hundreds of programs, which manage all third-party application (program) activity and all user activity. Every action (event), that an end user performs, creates an internal reaction (another event) internal to the O\/S to carry out the user's request. Every action (event), that a third-party program initiates, creates an internal reaction (another event) internal to the O\/S to carry out the program's request and at times, modifies the internal O\/S environment (structure) of the computer unit.","One of the most critical aspects of a PC O\/S and all third-party applications is the start-up phase of the O\/S and all third party applications. This start-up phase includes critical files and\/or registry entries, which are read by certain internal programs relative to the O\/S and third-party applications, which guide the O\/S and third-party applications as to what is \u201crequired\u201d at the time of O\/S \u201cboot up\u201d or third-party application (program) execution.","These critical files and registry entries are considered to be \u201csoft tables\u201d, which allow modification so that an O\/S or third-party application can have their internal operating environment modified to fit the specific needs of the computer unit and end-user.","These critical files and registry entries are so flexible, that it is possible to initiate computer programs, unknown to the end-user, which can significantly modify, collect, report, initiate a task or destroy information on a computer unit.","The registry entries are those part of the O\/S which defines and initiates a new program which can occur automatically without the knowledge of the user. The registry acts as a \u201cguide\u201d to the actual O\/S. When certain defined elements of a program are written to specific parts of the registry, the O\/S will start the program automatically without notification to the user.","Based on the technological advances of the Internet and the ability to automatically transfer data from one computer unit to another computer unit in a compressed format, it is possible to \u201cdisguise\u201d programs in the form of common data, which initiates on a computer unit that modifies a critical O\/S or third-party application start-up file or load to the registry, which in turn, initiates an unknown program which collects, reports, initiates a task or destroys information on a computer unit.","All these possibilities can occur, without the knowledge of the end-user or any individuals within a business or organization.","Accordingly, there is a need for a real-time tracking tool that would permit management to record, monitor and report the internal environment of each computer unit in an efficient, noninvasive manner. Furthermore, there is a need for a real-time tool to automatically \u201creverse\u201d any unauthorized internal modifications and to report these modifications to management personnel within a business or organization.","In one embodiment, the present invention provides a method of real time monitoring and control of networked computers, includes: providing a monitoring computer unit and client computer unit both capable of being communicatively coupled to a network system; and detecting states in the client computer and transmitting the detected states to the monitoring computer unit via the network system.","In another embodiment, the present invention provides a real-time method of electronically \u201cmapping\u201d the hard drive the computer unit to record the O\/S and third-party application start-up environment, including: (a) analyzing the hard drive for the presence of all critical directories and files; (b) recording the vital statistics of all directory information, number of files, directory size, and other information; (c) recording the vital statistics for each critical file, such as file creation time, last modification time, file size; (d) recording the vital statistics of the computer unit's internal registry.","In another embodiment, the present invention also provides a real-time method of detecting states that are activated by internal computer unit environment, which include: (a) monitoring the active window task manager for all identifiable window handles; (b) intercepting all operating system messages which are transmitted between third-party applications (programs) and the O\/S; (c) detecting any change in a critical O\/S file or third-party start-up file; (d) detecting any change in a critical aspect of the registry; (e) sending a inner-process communications message to any identifiable window handle which resides within the active task manager; (f) sending a real time forensic report to a monitor station defining the state of the detection.","In another embodiment, the present invention also provides a real-time method of transmitting and storing this vital information to a storage device (monitor station).","In one aspect of the present invention, the recorded and stored data may be transmitted by a client computer unit and received by a second computer unit (monitor station) that allows management to view the current client computer unit's internal operating environment which can be managed and controlled by the second computer unit (monitor station).","Another aspect of the present invention may include the ability to report in a real-time environment to the monitor station, any unknown modification to the critical O\/S, registry, or application start-up files by unknown programs and reverse these modifications back to their original state.","Another aspect of the present invention may include the ability to record and analyze a \u201cpenetration pattern\u201d of unknown programs, which attempt to significantly modify, collect, report, initiate a task or destroy information on a computer unit.","Another aspect to the present invention may include the ability transmit this \u201cpenetration pattern\u201d to the monitor station and analyze the pattern with all additional computer units to determine the best method to stop the automated modifications, which may be executing throughout a local area network (LAN) or a wide area network (WAN).","In the description herein, numerous specific details are provided, such as the description of systems, components, methods, and processes, to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, parts, and the like. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention. Reference throughout this specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of the phrases \u201cin one embodiment\u201d or \u201cin an embodiment\u201d in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","As an overview, an embodiment of the invention provides a system and method for the real-time monitoring, recording and\/or controlling the internal environment of, for example, an actual personal computer (PC) machine (computer unit) activity, with regards to the active identifiable Window\u00ae handles listed within the task manager, window messages processed between all applications (programs) and the operating system, all critical operating system files, registry entries which activate programs and all critical independent application (program) files which control the start-up (initialization) of a computer unit and control the start-up (initialization) of all applications (programs) installed on the computer unit. Although the various embodiments and features of the invention is described in this disclosure in the environment of the Windows operating system, the various embodiments and features of the invention described in this disclosure may be applicable to other applications and are not intended to be necessarily limited to the environment of the Windows operating system.","Referring now to , there is shown an example of a network system that can implement the present invention. In this embodiment, the network system  includes a plurality of computer units (or workstations) -and , and a network server . The computer units  and  may include personal computers, workstations, notebook computers, servers, and\/or other suitable computing devices. The network server  may also be implement as, for example, a server, a computer unit, workstation, or other suitable devices. As an example, the computer units -may each include a client application (probe utility application) -respectively, in accordance with an embodiment of the present invention, while some of the computer units  may not include a client application . However, any of the computer units  in  may or may not be implemented with the client application . To assist in explaining the functionalities of various embodiments of the invention, any or all of the computers -will be referred to as generally computer , while any or all of the client applications -will be referred to as generally client application (probe utility application) .","Some computer units may include an administrator (monitor) application  in accordance with an embodiment of the present invention. In the example of , computer unit (monitor station)  includes the administrator application . However, any other computer units in  may also be implemented with the administrator (monitor) application .","The computer units in  are coupled together by, for example, a wiring hub .","A conventional network interface card or LAN adapter (not shown) is typically implemented in each of the computer units in  for operating each computer unit within the network system. A network interface card typically serves as an interface between a given computer unit and the cables in the network system. A network interface card uses a specialized processor and routines to move data between the memory of the given computer unit and the network cable attached to the given computer unit.","In one embodiment, the present invention permits tracking of all internal machine configuration profiles (start-up) in a computer unit  having the client application . All internal machine activity, or changes in those activities are monitored by the client application . The client application  co-exists with the operating system of a computer unit  and acts as a non-invasive machine activity monitor. As an example, assume the computer unit  starts a third-party program , and that program activity and its start-up information are monitored in the computer unit . The client application  in the computer unit  will determine each activity state and whether that activity state is normal for daily operations. The client application  constantly cycles, comparing the internal configuration profile initially recorded, to its current profile as the computer unit  executes.","In one embodiment, the client application  is a utility application, which is designed and developed within the Microsoft Visual C++ and in the Microsoft 32 Bit API Environment. The client application  accesses the conventional Windows operating system information in two distinct methods; 1) Through a fully reusable C++ library conventionally known as the Microsoft Foundation Class (MFC); or 2) Through a direct interface with operating system native functions called Microsoft Application Programming Interface (API).","The MFC hides the fundamental, (high level) application programming interfaces (API) that a programmer would normally use and provides an abstract development layer that allows a programmer to design\/develop a Microsoft Windows multithreaded utility application, without knowing the exact details of each native independent API within the Microsoft Operating System. Otherwise stated, the MFC is a grouping of APIs that make software design and development easier for the programmer.","In programming, as known to those skilled in the art, a thread is a part of a program that can execute independently of other parts. Operating systems that support multi-threading enable programmers to design programs whose threaded parts can be executed concurrently by the operating system.","As stated, the MFC is utilized for \u201chigh level\u201d operating system functions. For the \u201clower level\u201d functions, a Microsoft 32 Bit API interface is utilized by invoking the actual Windows operating system native independent functions to retrieve the current operating system machine configuration and activity states.","An overview is now presented on the operation of an embodiment of the administrator application . The monitor station (or administrator application)  which resides on, for example, a standard computer unit PC or network server, collects and maintains all configuration, forensic data and administrative policies which are implemented throughout the network environment which have the client application .","As shown in , when the monitor station  is initiated, the main application thread initiates a series of sub threads (\u201cparallel threads\u201d), which all are parallel and are controlled by the main application thread. Each parallel thread, which is initiated, is assigned a task to collect and record data relative to the operational environment of each client application .","The first parallel thread is assigned to query () the network system  for any structured signal files which may contain configuration data on each computer unit  which is operating a client application . As this first parallel thread gathers configuration data, this thread analyzes () the configuration data and stores () the configuration data at a location local to the administrative application . This data is the complete configuration environment of the client application  which defines the \u201celectronic footprint\u201d of all O\/S files, all \u201cthird party\u201d startup data and all computer registry data.","The second parallel thread is assigned to query () the network system  for any structured signal files which may contain forensic or \u201cpenetration pattern\u201d data on each computer unit  which is operating a client application . As this second parallel thread is polling the network system , if forensic data is transmitted from the client application , the administrative application  will collect and store () the data, to be displayed () within administrative application  as required (selected) by the administrator (or user).","The third parallel thread is assigned to transmit () configuration and operational policy structured signal files to each client application  individually or all client applications globally. The thread sends the structured signal file that the administrator (or user) has created and defined as a policy structured signal file and selected to transmit (deploy) the policy via the network system .","The fourth, fifth and sixth parallel threads are a series of command and control structured signal files, which are transmitted (deployed) to each client application , which terminate () the client application  under certain conditions. Each \u201cshut down\u201d or termination signal has a different effect on a client application . Once a client application  is re-started or initiated, the client application  may: (1) Continue its normal activity; (2) Initialize its installation sequence and collect new configuration data on its associated computer unit ; and\/or (3) Remain terminated until such time a \u201cresume\u201d structured signal file is transmitted from the administrative application .","The remaining threads and programs (not shown in ) within the administrative application  perform the routine administrative functions of displaying data, archiving data, and allowing the user to export or erase information as required.","Reference is now made to  for purposes of discussing the functional mechanics of the client application in accordance with an embodiment of the present invention. In particular,  is a flow diagram of the \u201celectronic mapping\u201d of computer units internal registry information in regards to the start-up \u201cboot up\u201d of a computer unit  and the start-up of all third-party applications (e.g., third-party application  in FIG. ). It is noted that a third-party application may, for example, be installed by a user in any of the computer units  or may be downloaded to any of the computer units  from a data network such as the Internet.","Once a client application  initiates, the client application  executes a series of parallel threads functions which poll querying the operating system for high level information and executing a series of independent 32 bit API DLLs to collect low level information. As known to those skilled in the art, a Dynamic Link Library (DLL) is a library of executable functions or data that can be used by a Windows application. Typically, a DLL provides one or more particular functions and a program accesses the functions by creating either a static or dynamic link to the DLL. A static link remains constant during program execution, while a dynamic link is created by the program as needed. DLLs can also contain just data. The linker automatically looks in libraries for routines that it does not find elsewhere. In MS-Windows environments, library files have a .dll extension.","The high level information which is polled includes the active program memory stack, which lists all of the active programs \u201chandles\u201d which are currently functioning within memory. The active \u201cfocus window\u201d \u201cpoints\u201d to the application in current use by the \u201cend user\u201d.","The independent API DLLs which are executed may include the following: GTApprvd.dll, GTclsid.dll, GTCmpNm.dll, GTCUSoft.dll, GTDrvQry.dll, GTKeyBrd.dll, GTKillAp.dll, GTMicrRun.dll, GTRegQry.dll, GTRegSoft.dll, GTRgstry.dll, GTRunExe.dll, GTRunWat.dll, GTShell.dll, GTShellExt.dll, GTShellNme.dll, GTSysMsg.dll, and GTTaskBar.dll.","Each independent DLL is controlled by a high level parallel thread. Examples of low level data (information) which is collected is all registry configuration data, all real time \u201ckernel\u201d system messages processed between the O\/S and the third party applications  relative to window object, window type, mouse movement, mouse selection and I\/O operation. Additional low level data that may be collected may include, key board intercept, registry status (various key segments critical to program initiation), application \u201ccommand and control signals sent to applications, the program manager and the task bar.","During the initial installation of a client application , a parallel threaded function is initiated (block ) which initiates the 32 Bit API DLL, as described herein and designed and developed by the inventor, and which retrieves all of the internal registry information of a computer unit .","An internal machine registry of the computer unit  maintains an initialization list for every program utility required to initiate the computer unit  properly, in order to execute the basic Windows operating system and all those programs which are required to initialize third-party applications .","Some third-party applications  require certain programs to be initiated at the time the operating system initially starts, while others only require additional programs at the time the user initiates the third-party application.","In one embodiment, once the computer unit's registry information is retrieved by the client application , the registry information stored into memory arrays and is written in a structured ASC file, which is stored within the computer unit .","Once all configuration data is collected from the computer unit , the data is stored local to the computer unit , and the following functions are initiated. A function is initiated which loads all registry CLASS configuration data into memory arrays (block ). A function is initiated which loads all registry CURRENT (current users) configuration data into memory arrays (block ). A function is initiated which loads all registry LOCAL MACHINE configuration data into memory arrays (block ). A function is initiated which loaded all registry USERS configuration data into memory arrays (block ).","Once all registry data is loaded into memory, a parallel thread initiates (block ) the series of low level API 32 Bit DLLS, which poll each defined registry segment to determine if any registry data has been modified (block ).","If the function in block , which determines if a registry modification has been made, identifies a modification, then the function reports (alerts) the administrative application  by generating and transmitting a structured signal file (block ). If there has been no registry modification, then polling continues () for the defined registry segments by returning to the function in block .","In block , the structured ASC file can be electronically retrieved from the computer unit , to the monitor station  for a detailed analysis by the network administrator.","The client application (probe utility application)  is indicated as being initiated in block . After the initial recording (block ) of the registry information, the parallel thread (block ), which commands the independent 32 Bit API DLL designed and developed by the inventor, initiates a series of sub-functions (as described above in blocks  through ) which then monitor all registry information for real-time changes within the computer unit  environment.","If a program initiates which modifies any of the internal registry environment, then an internal message is generated from the client application  to the computer unit's main screen, alerting the end-user and generating (transmitting) a signal to the monitor station.","If the registry modification is an unauthorized change unknown to the user and\/or network administration, the internal registry information, which was modified, is then reversed back to its original state.","The configuration files, which are stored within the computer unit , maintain the defined configuration of the computer unit . When a modification occurs, the client application  refers to the stored configuration data and will restore the computer unit  back to its original state that was recorded prior to the unauthorized modification. The characteristics of the change are then recorded in a structured ASC file and are logged as a penetration pattern. The computer unit  then generates (transmits) this penetration pattern file to the monitor station  for further comparison analysis by the monitor station. The comparison analysis initiated by the monitor station, is a series of parallel threaded functions, which compare all penetration patterns received from all computer units  (client applications ), which transmit information to the monitor station .","As shown in , the comparison analysis is performed by analyzing each structured signal file which contains forensic penetration data. The file is first analyzed as to the establishing the unauthorized modification and defined within the forensic file. Each unauthorized modification is compared () with forensic data from other computer units  with a client application , to establish a \u201chorizontal pattern\u201d or consistency in the unauthorized modifications which are occurring across the network system . The next analysis () is by determining the \u201cwindow handle\u201d state of each computer unit  when the unauthorized modification occurred. By analyzing () the \u201cwindow handle state\u201d, a \u201cpattern\u201d can be established as to the \u201cuser condition\u201d that initiated the unauthorized modification of the computer unit .","In performing an automated analysis of the type of modification and the user environment which initiated the modification in a real time environment, the administrator application  can then quickly develop a \u201cpolicy\u201d and deploy (transmit) that policy throughout the network system  to automatically stop the unauthorized modification in each computer unit (block ).","As shown in , when the client application  is installed on a computer unit , the client application  will initiate a parallel thread (block ) which will initiate a series of sub-threads, which collect registry information throughout various defined segments of the computer unit  registry. The parallel thread  is activated during the initial installation or re-initialization if the computer unit  is updated with new authorized software.","Each sub-thread activates the independent 32 bit API DLL, which collects registry information within a defined segment. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_CLASSES_ROOT registry key. A sub-thread (block ), initiates the 32 Bit API DLL, which collects all registry data on the HKEY_CURRENT_USER registry key. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_LOCAL_MACHNE registry key. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_USERS registry key.","All data collected by each 32 Bit API DLL is consolidated by a function (block ), which stores the data to the local computer unit . Once the data has been stored, a function is then initiated (block ), which transmits all registry configuration data to the administrative unit  with the monitor application .","Reference is now made to  for purposes of discussing the functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of the \u201celectronic mapping\u201d of all critical directories and files relative to the start-up \u201cboot up\u201d of a computer unit .","During the initial installation of a client application , an additional parallel threaded function (block ) is initiated, which retrieves all of the computer unit's internal directory and file information required at the time the operating system initiates during start-up (initial \u201cboot-up\u201d).","The computer unit's internal machine hard drive maintains a directory architecture for properly storing, categorizing and separating all directories and files required to initiate the computer unit  properly to execute the basic Windows operating system and all those programs which are required at the time of start-up, to initialize third-party applications . Once the directory and file information is retrieved by the client application , the directory information is stored into memory arrays and is written in a structured ASC file, which is stored within the computer unit . The structured ASC file can be electronically retrieved from the computer unit , to the monitor station  for a detailed analysis by the network administrator.","After the initial recording of the directory and file information, the parallel thread (block ), which commands these initial functions, initiates a series of sub-functions, which then monitor all directory and file information for real-time changes within the computer unit  environment.","Once the main parallel thread which control the directory environment is initiated (block ), a sub-function is initiated which load all stored directory configuration from data files to memory arrays (block ). When the memory arrays are loaded, a parallel thread is initiated, which cycles the directory structure of the computer unit , analyzing the computer unit  for any possible structural changes within the defined directory architecture. If a new directory is detected, the probe function (block ) will analyze the internal contents of the directory, searching for any possible unauthorized program (block ). If an unauthorized program is detected, a structure forensic signal file is generated and transmitted back to the computer unit (block ). If no unauthorized program is detected, the probe will \u201cloop\u201d back to the query function (block ) and continue to analyze the directory architecture for possible unauthorized programs.","If a program initiates (where the program modifies any of the internal directory or file environment) an internal message is generated from the client application  to the computer unit's main screen, alerting the end-user and generating (transmitting) a signal to the monitor station (block ).","If the modification is an unauthorized change unknown to the user and\/or network administration, the computer unit's internal directory and\/or file information, which was modified, is then reversed back to its original state.","If an unauthorized program is detected within a directory, the function which analyzes the directory, refers to the stored configuration data, which defines the directory architecture prior to the detection of the unauthorized program. The defined directory structure is then analyzed, to \u201creverse\u201d or remove the new directory which contains the unauthorized program.","The reversal function is initiated by comparing, the previous architectural \u201cfootprint\u201d of the directory to the new (unauthorized) \u201cfootprint\u201d, and the reverse function is performed, by erasing the new directory with the unauthorized program, or if an unauthorized program is moved into an existing directory, erasing the unauthorized program only.","The characteristics of the change, is then recorded in a structured ASC file and is logged as a penetration pattern. The computer unit  then generates (transmits) this penetration pattern file to the monitor station  for further comparison analysis by the monitor station .","The comparison analysis, which is initiated by the monitor station , is a series of parallel threaded functions, which compare all penetration patterns received from all computer units  (client applications ), which transmit information to the monitor station .","When the client application  is installed on the computer unit , a main parallel thread is initialized (block ), which initiates a series of sub-functions which scan the entire computer unit , to record all existing directories (folders) and sub-directories (sub-folders). A sub-function is initiated (block ), which analyzes the O\/S directory structure, \u201croot\u201d and all directories and sub-directories (block ) which exist on the computer unit .","After the completion of this analysis, a function is initiated (block ), which consolidates and stores the data to the local computer unit .","Once all data has been consolidated and stored at the local computer unit  and transmitted to the administrative unit , a function (block ), then initiates the main polling thread (block ) which analyzes the computer unit  for any new directory which may contain an unauthorized program.","Reference is now made to  for purposes of discussing the functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of an \u201celectronic mapping\u201d of all critical directories and files relative to the start-up of all third-party applications (programs) .","During the initial installation of a client application , an additional parallel threaded function (block ) is initiated, which retrieves all of the computer unit's internal directory and file information required at the time the operating system initiates any third-party program which may be installed within the computer unit.","The internal machine hard drive of the computer unit  maintains a directory architecture for properly storing, categorizing, and separating all directories and files required to initiate every third-party program and all those additional programs which are required at the time that the third-party application is initialized. The directories may be scanned by use of any known suitable method to look for possible modifications which may include a new unauthorized program installation.","Once the third-party directory and file information is retrieved by the client application , the directory information is stored into memory arrays and is written in a structured ASC file, which is stored within the computer unit . The structured ASC file can be electronically retrieved from the computer unit , to the monitor station  for a detailed analysis by the network administrator.","After the initial recording of the directory and file information, the parallel thread (block ) initiates a series of sub-functions (block ), which then monitor all directory and file information for real-time changes to any third-party application start-up within the computer unit environment.","If a program initiates and modifies any of the internal directory or file environment, an internal message is generated from the client application  to the computer unit  main screen, alerting the end-user and generating (transmitting) a signal to the monitor station .","If the modification is an unauthorized change that is unknown to the user and\/or network administration, the internal directory and\/or file information, which was modified, is then reversed back to its original state.","The characteristics of the change are then recorded in a structured ASC file and are logged as a penetration pattern. The computer unit  then generates (transmits) this penetration pattern file to the monitor station  for further comparison analysis by the monitor station .","The comparison analysis initiated by the monitor station  is a series of parallel threaded functions, which compare all penetration patterns received from all computer units  (client applications ), which transmit information to the monitor station . This comparison analysis was previously described above.","When the parallel thread (block ) is initialized, the function in block  is initiated, and this function loads all third party \u201cstart up\u201d information into memory arrays. Once the function (in block ) has completed its operations, an additional function (block ) is initiated, which loads the critical \u201cfile signature\u201d of all third party \u201c.ini\u201d (initialization) files into memory arrays.","After all information is loaded into memory, the parallel thread which initiated the above functions, initializes () a polling function (block ), which constantly cycles, comparing all third party \u201cstart up\u201d information and \u201c.ini\u201d file information, to the previously recorded information which is stored into memory arrays.","If an unauthorized modification is detected, the function (in block ) generates a structured signal file and transmits the structured signal file to the administrative application . If no unauthorized modification is detected, the function continues to loop (block ) back to its poling function which was initiated in block .","A series of additional parallel threads are initiated to collect and manage all operating system (O\/S) messages, which are generated between the O\/S and all third-party applications. These threads initiate a series MFC functions and\/or independent 32 Bit API DLLs designed and developed by the inventor. These MFC functions and 32 Bit API DLLs, initiate a series of operating system (O\/S) \u201chooks\u201d and MFC inter-links, which monitor and collect real-time data from memory buffers regarding mouse movement, application to O\/S messages, device access, keyboard access, communications port access, Internet web browser access, application focus, electronic mail management, disk file movement, active window handle task listing, disk drive (media) management, task bar management, and program manager management.","When the client application  is installed on the computer unit , a parallel thread is initiated (block ), which initializes a function (block ), which scans the computer unit  for all \u201cthird party\u201d \u201cstart up\u201d files which may reside within the computer unit.","When the function (block ) has been completed, an additional function is initialized (block ), which scans the computer for all \u201c.ini\u201d (initialization) files and records the \u201ccritical file signature\u201d of each file within the computer unit .","Upon completion of the function (block ), a function (block ) consolidates the information and stores all data is physical files within the computer unit . At the completion of the function in block , an additional function (block ) is initiated and starts the maintenance poling thread as described in block .","Reference is now made to  for purposes of discussing additional functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a method of intercepting all messages that are generated between the operating system  and third-party applications .","A series of MFC functions and 32 Bit API DLLs designed and developed by the inventor, initiate (block ) a series of operating system (O\/S) \u201chooks\u201d and MFC interlinks, which monitor and collect real-time data from memory buffers regarding mouse movement and application to O\/S messages. The hooks are part of the \u201copen architecture\u201d development of Microsoft Windows.  illustrates a \u201chook\u201d sequence into the actual Microsoft O\/S kernel, where at least some of the following may be extracted: all Window object identifications (Ids), window object type, mouse movements, mouse instructions and integer relays which process between the O\/S kernel and all application activity.","A parallel thread is initiated (), which activates the independent 32 bit API DLL (), designed and developed by the inventor, which establishes a \u201chook\u201d into the actual O\/S kernel. The \u201chook\u201d establishes an interlink with the WH_SYSMSG ID (block ), which monitors the kernel interrupt for mouse movement and mouse activity (block ), Dialog, Menu, List Box activity, which defines the Window object ID and the Window object type (block ) and receives an O\/S message as to the mechanical operation which is being performed by the kernel (block ).","Based on the information received under to WH_SYSMSG ID, the \u201chook\u201d can translate its ID (block ) to the WH_CBT ID, to collect more information about O\/S kernel mechanics which are being initiated in a real time environment.","The information received from the kernel system \u201chook\u201d is compared with other information, which intercepts the \u201chigh level\u201d O\/S information, such as analysis of the active Window handle listing, the active Window focus handle, along with memory arrays which currently store the status of all Registry, O\/S and third party \u201cstart up\u201d information, which formulates a \u201cpicture\u201d which is interpreted by the client application  as to the actual \u201creal time\u201d machine and user condition (or event) which is being initiated on the computer unit (block ).","The 32 bit API DLL, designed and developed by the inventor, relays all signal messages intercepted by Window object access, and type of window object (), menu or dialog box object ID, mouse movement and position. Based on the signal (integer) received from the API, the MFC parallel thread managing the central processing unit (CPU) can determine the course of action initiated by the user. This information () is then processed () in a real time environment, to determine the \u201cintent\u201d of the user and whether the user action in authorized on unauthorized.","Reference is now made to  for purposes of discussing additional functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a method of sending an inter-process communications message to any identifiable windows handle, which resides within that active task manager listing.","The independent 32 Bit API DLL, designed and developed by the inventor, receives real time status information from the existing MFC parallel threads, which determine if the users action or internal program activity is valid or invalid. The validity is determined by comparing the actual activity to all of the parallel threads (FIGS.  through ), which are monitoring the registry, O\/S, third party integrity and operating system kernel messages of the computer unit .","If the user or program activity is determined to be invalid, the parallel thread initiates the independent 32 Bit API designed and developed by the inventor, which terminates the program activity which is currently in main focus by the user or unmanned computer.","A parallel thread is initiated (block ), which cycles the active window handle task listing for all identifiable handles active within the computer unit . This parallel thread constantly cycles, monitoring the Window I\/O (block ) and monitoring the actual window handle which is in FOCUS by the user of the computer unit.","Based on the information which is processed as described in  thru , if an unauthorized event is being initiated within the computer unit , the parallel thread (block ) will send an automated inter process communications (IPC) signal message WM_QUIT (block ) to the independent 32 bit API DLL, designed and developed by the inventor (block ), which will accept the IPC and transmit the WM_QUIT message (block ) to the active window handle which is current in FOCUS by the user.","The API will then check the status of the IPC, to determine the success of the message IPC Sent, then pass all information back to the main parallel thread, which will determine if additional action (block ) will be necessary to stop the unauthorized event taking place within the computer unit .","Reference is now made to  for purposes of discussing the functional mechanics of the client application in accordance with an embodiment of the present invention.  is a flow diagram of a process of collecting all computer unit (machine environment) information, within the internal computer unit , and organizing this information is such a way as to automatically transmit this data to a monitor station .","The process for automatically collecting computer unit (machine environment) data on the internal computer  and organizing the information for automatic or \u201crequest on demand\u201d transmission to a monitor station , is managed by a parallel thread (block ) which receives a structure file signal from the monitor station , as described above. If a signal has been received from the monitor station , the parallel thread initiates an MFC sub-function, which transmits (block ) all configuration data to the monitor station .","The function in block  and the data indicated in blocks through were similarly described above with regard to FIG. . The function in block  and the data indicated in blocks through were similarly described above with regard to FIG. . The function in block  and the data indicated in blocks through were similarly described above with regard to FIG. .","The collected computer unit (machine environment) data are stored locally for probe retrieval and update (block ). If a structure file signal is received from the monitor station  (block ), as described above, then the collected machine environment data is transferred to the monitor station .","Reference is now made to  for purposes of discussing additional functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process of automatically collecting all computer unit (machine environment) data from all computer units  on a local area network (LAN) or wide area network (WAN) (e.g., network system ).","The monitor station  has the capability to automatically receive all configuration data from a computer unit  or transmit a structure signal file (initiated by the administrator), to request all configuration data to be transmitted to the monitor station .",{"@attributes":{"id":"p-0134","num":"0133"},"figref":"FIG. 8","b":["115","100","110","100","110","115","110","105","830","835","110","115"]},"If the parallel thread (block ) detects the presence of the network and all defined pathways are established correctly, the client application  will transmit all data to the administrative application  (block ).","The administrative application  will also start a parallel thread (block ), which will poll (block ) to check the status of the network and whether the defined network pathways are established. If the overall network status is correct, the administrative application  will automatically receive structure file signal information from the client application .","In the event certain command and control instructions are initiated from the administrative application  via the user, such as an update request, an internal function (block ) will initiate the structured signal file, which in turn will be transmitted to the client application  (block ). In one embodiment, the structured signal file is transferred by use of a network production directory (block ) which may, for example, be located locally in the computer unit . The function passes the information back to the main parallel thread which will, in turn, receive and process the information received from the client application (block ).","Reference is now made to  for purposes of discussing additional functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process of automatically analyzing the \u201cpenetration patterns\u201d of foreign entity programs which penetrate a computer unit to collect, report, initiate a task or destroy information on a computer unit. The utility application  is initialized, thus causing the above-mentioned probing function to initialize (Block ). The function of block  represents the data collection functions performed by blocks - (FIG. ), blocks - (FIG. ), and blocks - (FIG. ).","The function of block  represents the functions performed by blocks - (FIG. ). The checking functions of blocks - are represented by the functions of blocks -. The function of block  represents the functions performed by blocks - (FIG. ). The checking functions of block - are represented by the functions of blocks -. The function of block  represents the functions performed by blocks - (FIG. ). The checking functions of block - are represented by the functions of blocks -. The functions of block  are represented by the functions of blocks , , and , as previously described above. Thus,  shows an overview of an overview of an analysis of penetration patterns which are received from each computer unit  transmitting data to the monitor station .","Reference is now made to  for purposes of discussing the functional mechanics of the client application in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process of automatically reversing any computer unit (machine environment) changes that a foreign entity program may initiate within the actual computer unit . The functions in blocks  through  were previously described in and are identical to blocks - in FIG. . In block , the client application  looks at the data dictionary that is local to the client computer , and if there is an unauthorized modification in the architecture by a foreign entity program that is initiated in the computer unit , then the client application  will reverse the architecture back to the defined architecture prior to the unauthorized modification.","Reference is now made to  for purposes of discussing the functional mechanics of the client application in accordance with an embodiment of the present invention. In particular,  is a block diagram of a structured signal file which captures all forensic data relative to the \u201cpenetration pattern\u201d, which is transmitted and stored at the monitor station .","The structured file  is created and transmits all \u201cpenetration pattern\u201d (forensic) data from the client application  to the monitor station . As shown in , the following are shown in the data structure  that permits a computer forensic design that functions in a real time environment.\n\n","Reference is now made to  for purposes of discussing the functional mechanics of the client application in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process for automatically detecting any unauthorized modification of the HKEY_LOCAL_MACHINE:Software registry segment in a real time environment. The flow diagram illustrate a process of automatically analyzing the \u201cpenetration patterns\u201d of foreign entity programs which may penetrate a computer unit  to collect, report, initiate a task or destroy information on a computer unit . Analysis of penetration patterns which are received from each computer unit  are transmitted as data to the monitor station .","After the collection of all internal registry data of a client computer  is transmitted to the monitor station , a PC probe (of the client application ) initiates an additional parallel threaded function (block ) designed and developed by the inventor, and the additional parallel threaded function initiates an additional independent 21 API DLL designed and developed by the inventor, which performs an analysis on the HKEY_LOCAL_MACHINE:Software (hereafter known as the DEFINED SEGMENT), which is a segment of the internal registry. One example of the above PC probe is of the type from Granite Technologies, Inc., a Tennessee Corporation. The analysis includes a method opening the physical registry key and opening and querying the DEFINED SEGMENT for any possible unauthorized changes within this particular area of the registry.","The internal registry is a database used by the Windows operating system (e.g., Windows 95 and NT) to store configuration information. The registry typically includes the following major sections:\n\n","The registry is opened by initiating the 32 Bit API function call defined within the Microsoft API development environment.","At the time the registry is opened, the DEFINED SEGMENT is passed as a parameter to successfully open the particular segment of the registry. This parameter is included within the 32 API function (from the Microsoft API development environment), which is initiated to open a registry segment.","The method includes establishing a \u201cbase count\u201d of all authorized entries within this particular segment of the registry. The \u201cbase count\u201d is the total amount of entries which are recorded within the defined segment of the registry. After the \u201cbase count\u201d is established, a numeric integer of the \u201cbase count\u201d is stored in memory (e.g. RAM). The MFC parallel thread (block ) then initiates the 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry. The actual function of the 32 bit API design is described further below. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_LOCAL_MACHINE:SOFTWARE registry segment. The other functions in  perform as similarly described in the previous drawings for corresponding similar functions.","The algorithm method designed by the inventor queries the DEFINED SEGMENT of the registry in such a way, where virtually no resource utilization is registered within the CPU. This is possible, because within the defined segment of the registry, entries are listed in no particular order and are random in nature.","While, the actual O\/S has to query the each registry segment within the entirety of the registry to establish and maintain its program environment, the method designed and developed by the inventor, is an algorithm which calculates the maximum \u201cbase count\u201d (integer) for all entries within this defined registry segment, less the \u201cbase count\u201d minus 2. The \u201cbase count\u201d minus 2, equates to the start position pointer in which the algorithm continues to count the remaining entries and the last \u201cdate-time modification\u201d within this particular defined portion of the registry segment.","When the algorithm initiates its count at the start position pointer, the algorithm will proceed to count the remaining entries within the DEFINED SEGMENT of the registry. If the maximum count equation, does not equal the pre-calculated results, the defined registry segment has been violated by a manual edit from the user or by modification from an unauthorized program.","As an example, HKEY_LOCAL_MACHINE:Software may contain 50 entries which record various applications which are installed within the computer. The 32 Bit API DLL which monitors and controls this environment, will poll this segment, to detect an unauthorized registry entry or deletion within every five to eight seconds. If the registry segment is modified, the unauthorized modification is detected and reported to the main parallel thread which initiated the 32 Bit API DLL.","The pre-calculated results guarantees 100% accurate results from the query (where the query is from the registry segment itself via the 32 API function call from the Microsoft 32 Bit API developers environment), because the algorithm is designed to query the defined segment, for example, every about five to eight seconds. The speed of the query makes it impossible for a user to delete and add a new entry to the defined segment, without being intercepted by the algorithm.","The speed and accuracy at about five to eight seconds is sufficient, because any unauthorized program or user which attempts to delete and then add a record to a registry segment, forces the registry segment into an \u201cupdate cycle\u201d, whereby it performs its internal \u201chouse keeping\u201d. The \u201chouse keeping\u201d requires around about 4 to 6 seconds to mechanically perform its internal operations. Furthermore, unauthorized programs perform a calculation to add entries to a defined area of the registry, which makes the algorithm designed by the inventor 100% accurate against unauthorized program activity.","Finally, the registry protection, along with the remaining functions which protect the O\/S and third party start up environment, provide a multi-layer defense posture protecting the computer unit  from all points of an unauthorized modification to the computer unit.","The above-mentioned parallel threads can perform the polling functions without causing a spike or damage to the resources utilized by the CPU clock. This advantageous result is accomplished by designing the cycling of the parallel threads in their execution state with an automated sleep state and based on how critical the particular thread, so that the system operation does not slow down.","Reference is now made to  for purposes of discussing additional functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process for automatically detecting any unauthorized modification of the HKEY_LOCAL_MACHINE:Software\\Microsoft registry segment in a real time environment.","After the collection of all internal registry data is transmitted to the monitor station , the PC Probe in the client application  initiates an additional parallel threaded function designed and developed by the inventor, which initiates an additional independent 21 API DLL designed and developed by the inventor, which performs an analysis on the HKEY_LOCAL_MACHINE:Software\/Microsoft segment of the internal registry. This analysis includes a method opening the physical registry key and opening and querying this segment for any possible unauthorized changes within this particular area of the registry. The method includes establishing a \u201cbase count\u201d of all authorized entries within this particular segment of the registry. After the \u201cbase count\u201d is established, a numeric integer of the \u201cbase count\u201d is stored in RAM. The MFC parallel thread then initiates a 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry.","The MFC parallel thread (block ) then initiates the 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry. The actual function of the 32 bit API design is described further below. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_LOCAL_MACHINE:Software\\Microsoft registry segment. The other functions in  perform as similarly described in the previous drawings for corresponding similar functions.","The algorithm method designed by the inventor queries the defined segment of the registry in such a way, where virtually no resource utilization is registered within the CPU. This is possible, because within the defined segment of the registry, entries are listed in no particular order and are random in nature.","While, the actual O\/S has to query the each registry segment within its entirety to establish and maintain its program environment, the method designed and developed by the inventor, is an algorithm which calculates the maximum \u201cbase count\u201d (integer) for all entries within this defined registry segment, less the \u201cbase count\u201d minus 2. The \u201cbase count\u201d minus 2, equates to the start position pointer in which the algorithm continues to count the remaining entries and the last \u201cdate-time modification\u201d within this particular defined portion of the registry segment.","When the algorithm initiates its count at the start position pointer, the algorithm will proceed to count the remaining entries within the defined segment of the registry. If the maximum count equation does not equal the pre-calculated results, the defined registry segment has been violated by a manual edit from the user or by modification from an unauthorized program.","The pre-calculated results guarantees 100% accurate results from the query, because the algorithm is designed to query the defined segment every about five to eight seconds. The speed of the query makes it impossible for a user to delete and add a new entry to the defined segment, without being intercepted by the algorithm. Furthermore, unauthorized programs perform a calculation to add entries to a defined area of the registry, which makes the algorithm designed by the inventor 100% accurate against unauthorized program activity.","Reference is now made to  for purposes of discussing additional functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process for automatically detecting any unauthorized modification of the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Run registry segment in a real time environment.","After the collection of all internal registry data is transmitted to the monitor station , the PC Probe in the client application  initiates an additional parallel threaded function designed and developed by the inventor, which initiates an additional independent 21 API DLL designed and developed by the inventor, which performs an analysis on the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Run segment of the internal registry. This analysis includes a method opening the physical registry key and opening and querying this segment for any possible unauthorized changes within this particular area of the registry. The method includes establishing a \u201cbase count\u201d of all authorized entries within this particular segment of the registry. After the \u201cbase count\u201d is established, a numeric integer of the \u201cbase count\u201d is stored in RAM. The MFC parallel thread then initiates a 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry.","The MFC parallel thread (block ) then initiates the 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry. The actual function of the 32 bit API design is described further below. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Run registry segment. The other functions in  perform as similarly described in the previous drawings for corresponding similar functions.","The algorithm method designed by the inventor queries the defined segment of the registry in such a way, where virtually no resource utilization is registered within the CPU. This is possible, because within the defined segment of the registry, entries are listed in no particular order and are random in nature.","While, the actual O\/S has to query the each registry segment within its entirety to establish and maintain its program environment, the method designed and developed by the inventor, is an algorithm which calculates the maximum \u201cbase count\u201d (integer) for all entries within this defined registry segment, less the \u201cbase count\u201d minus 2. The \u201cbase count\u201d minus 2, equates to the start position pointer in which the algorithm continues to count the remaining entries and the last \u201cdate-time modification\u201d within this particular defined portion of the registry segment.","When the algorithm initiates its count at the start position pointer, the algorithm will proceed to count the remaining entries within the defined segment of the registry. If the maximum count equation does not equal the pre-calculated results, the defined registry segment has been violated by a manual edit from the user or by modification from an unauthorized program.","The pre-calculated results guarantees 100% accurate results from the query, because the algorithm is designed to query the defined segment every about five to eight seconds. The speed of the query makes it impossible for a user to delete and add a new entry to the defined segment, without being intercepted by the algorithm. Furthermore, unauthorized programs perform a calculation to add entries to a defined area of the registry, which makes the algorithm designed by the inventor 100% accurate against unauthorized program activity.","Reference is now made to  for purposes of discussing additional functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process for automatically detecting any unauthorized modification of the HKEY_CLASSS_ROOT:CLSID registry segment in a real time environment.","After the collection of all internal registry data is transmitted to the monitor station , the PC Probe initiates an additional parallel threaded function designed and developed by the inventor, which initiates an additional independent 21 API DLL designed and developed by the inventor, which performs an analysis on the HKEY_CLASSES_ROOT:CLSID segment of the internal registry. This analysis includes a method opening the physical registry key and opening and querying this segment for any possible unauthorized changes within this particular area of the registry. The method includes establishing a \u201cbase count\u201d of all authorized entries within this particular segment of the registry. After the \u201cbase count\u201d is established, a numeric integer of the \u201cbase count\u201d is stored in RAM. The MFC parallel thread then initiates a 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry.","The MFC parallel thread (block ) then initiates the 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry. The actual function of the 32 bit API design is described further below. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_CLASSES_ROOT:CLSID registry segment. The other functions in  perform as similarly described in the previous drawings for corresponding similar functions.","The algorithm method designed by the inventor queries the defined segment of the registry in such a way, where virtually no resource utilization is registered within the CPU. This is possible, because within the defined segment of the registry, entries are listed in no particular order and are random in nature.","While, the actual O\/S has to query the each registry segment within its entirety to establish and maintain its program environment, the method designed and developed by the inventor, is an algorithm which calculates the maximum \u201cbase count\u201d (integer) for all entries within this defined registry segment, less the \u201cbase count\u201d minus 2. The \u201cbase count\u201d minus 2, equates to the start position pointer in which the algorithm continues to count the remaining entries and the last \u201cdate-time modification\u201d within this particular defined portion of the registry segment.","When the algorithm initiates its count at the start position pointer, the algorithm will proceed to count the remaining entries within the defined segment of the registry. If the maximum count equation does not equal the pre-calculated results, the defined registry segment has been violated by a manual edit from the user or by modification from an unauthorized program.","The pre-calculated results guarantees 100% accurate results from the query, because the algorithm is designed to query the defined segment every about five to eight seconds. The speed of the query makes it impossible for a user to delete and add a new entry to the defined segment, without being intercepted by the algorithm. Furthermore, unauthorized programs perform a calculation to add entries to a defined area of the registry, which makes the algorithm designed by the inventor 100% accurate against unauthorized program activity.","Reference is now made to  for purposes of discussing additional functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process for automatically detecting any unauthorized modification of the HKEY_CLASSES_ROOT:CID registry segment (if present), in a real time environment.","After the collection of all internal registry data is transmitted to the monitor station , the PC Probe initiates an additional parallel threaded function designed and developed by the inventor, which initiates an additional independent 21 API DLL designed and developed by the inventor, which performs an analysis on the HKEY_CLASSES_ROOT:CID segment of the internal registry. This analysis includes a method opening the physical registry key and opening and querying this segment for any possible unauthorized changes within this particular area of the registry. The method includes establishing a \u201cbase count\u201d of all authorized entries within this particular segment of the registry. After the \u201cbase count\u201d is established, a numeric integer of the \u201cbase count\u201d is stored in RAM. The MFC parallel thread then initiates a 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry.","The MFC parallel thread (block ) then initiates the 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry. The actual function of the 32 bit API design is described further below. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_CLASSES_ROOT:CID registry segment. The other functions in  perform as similarly described in the previous drawings for corresponding similar functions.","The algorithm method designed by the inventor queries the defined segment of the registry in such a way, where virtually no resource utilization is registered within the CPU. This is possible, because within the defined segment of the registry, entries are listed in no particular order and are random in nature.","While, the actual O\/S has to query the each registry segment within its entirety to establish and maintain its program environment, the method designed and developed by the inventor, is an algorithm which calculates the maximum \u201cbase count\u201d (integer) for all entries within this defined registry segment, less the \u201cbase count\u201d minus 2. The \u201cbase count\u201d minus 2, equates to the start position pointer in which the algorithm continues to count the remaining entries and the last \u201cdate-time modification\u201d within this particular defined portion of the registry segment.","When the algorithm initiates it's count at the start position pointer, the algorithm will proceed to count the remaining entries within the defined segment of the registry. If the maximum count equation does not equal the pre-calculated results, the defined registry segment has been violated by a manual edit from the user or by modification from an unauthorized program.","The pre-calculated results guarantees 100% accurate results from the query, because the algorithm is designed to query the defined segment every about five to eight seconds. The speed of the query makes it impossible for a user to delete and add a new entry to the defined segment, without being intercepted by the algorithm. Furthermore, unauthorized programs perform a calculation to add entries to a defined area of the registry, which makes the algorithm designed by the inventor 100% accurate against unauthorized program activity.","Reference is now made to  for purposes of discussing additional functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process for automatically detecting any unauthorized modification of the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Windows\\CurrentVersion\\ShellExtensions\\Approved registry segment in a real time environment.","After the collection of all internal registry data is transmitted to the monitor station , the PC Probe initiates an additional parallel threaded function designed and developed by the inventor, which initiates an additional independent 21 API DLL designed and developed by the inventor, which performs an analysis on the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Windows\\CurrentVersion\\ShellExtensions\\Approved segment of the internal registry. This analysis includes a method opening the physical registry key and opening and querying this segment for any possible unauthorized changes within this particular area of the registry. The method includes establishing a \u201cbase count\u201d of all authorized entries within this particular segment of the registry. After the \u201cbase count\u201d is established, a numeric integer of the \u201cbase count\u201d is stored in RAM. The MFC parallel thread then initiates a 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry.","The MFC parallel thread (block ) then initiates the 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry. The actual function of the 32 bit API design is described further below. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Windows\\CurrentVersion\\ShellExtensions\\Approved registry segment. The other functions in  perform as similarly described in the previous drawings for corresponding similar functions.","The algorithm method designed by the inventor queries the defined segment of the registry in such a way, where virtually no resource utilization is registered within the CPU. This is possible, because within the defined segment of the registry, entries are listed in no particular order and are random in nature.","While, the actual O\/S has to query the each registry segment within its entirety to establish and maintain its program environment, the method designed and developed by the inventor, is an algorithm which calculates the maximum \u201cbase count\u201d (integer) for all entries within this defined registry segment, less the \u201cbase count\u201d minus 2. The \u201cbase count\u201d minus 2, equates to the start position pointer in which the algorithm continues to count the remaining entries and the last \u201cdate-time modification\u201d within this particular defined portion of the registry segment.","When the algorithm initiates its count at the start position pointer, the algorithm will proceed to count the remaining entries within the defined segment of the registry. If the maximum count equation does not equal the pre-calculated results, the defined registry segment has been violated by a manual edit from the user or by modification from an unauthorized program.","The pre-calculated results guarantees 100% accurate results from the query, because the algorithm is designed to query the defined segment every about five to eight seconds. The speed of the query makes it impossible for a user to delete and add a new entry to the defined segment, without being intercepted by the algorithm. Furthermore, unauthorized programs perform a calculation to add entries to a defined area of the registry, which makes the algorithm designed by the inventor 100% accurate against unauthorized program activity.","Reference is now made to  for purposes of discussing additional functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process for automatically detecting any unauthorized modification of the HKEY_LOCAL_MACHINE: Software\\Microsoft\\Windows\\CurrentVersion\\Run registry segment in a real time environment.","After the collection of all internal registry data is transmitted to the monitor station , the PC Probe initiates an additional parallel threaded function designed and developed by the inventor, which initiates an additional independent 21 API DLL designed and developed by the inventor, which performs an analysis on the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Windows\\CurrentVersion\\Run segment of the internal registry. This analysis includes a method opening the physical registry key and opening and querying this segment for any possible unauthorized changes within this particular area of the registry. The method includes establishing a \u201cbase count\u201d of all authorized entries within this particular segment of the registry. After the \u201cbase count\u201d is established, a numeric integer of the \u201cbase count\u201d is stored in RAM. The MFC parallel thread then initiates a 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry.","The MFC parallel thread (block ) then initiates the 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry. The actual function of the 32 bit API design is described further below. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Windows\\CurrentVersion\\Run registry segment. The other functions in  perform as similarly described in the previous drawings for corresponding similar functions.","The algorithm method designed by the inventor queries the defined segment of the registry in such a way, where virtually no resource utilization is registered within the CPU. This is possible, because within the defined segment of the registry, entries are listed in no particular order and are random in nature.","While, the actual O\/S has to query the each registry segment within its entirety to establish and maintain its program environment, the method designed and developed by the inventor, is an algorithm which calculates the maximum \u201cbase count\u201d (integer) for all entries within this defined registry segment, less the \u201cbase count\u201d minus 2. The \u201cbase count\u201d minus 2, equates to the start position pointer in which the algorithm continues to count the remaining entries and the last \u201cdate-time modification\u201d within this particular defined portion of the registry segment.","When the algorithm initiates its count at the start position pointer, the algorithm will proceed to count the remaining entries within the defined segment of the registry. If the maximum count equation does not equal the pre-calculated results, the defined registry segment has been violated by a manual edit from the user or by modification from an unauthorized program.","The pre-calculated results guarantees 100% accurate results from the query, because the algorithm is designed to query the defined segment every about five to eight seconds. The speed of the query makes it impossible for a user to delete and add a new entry to the defined segment, without being intercepted by the algorithm. Furthermore, unauthorized programs perform a calculation to add entries to a defined area of the registry, which makes the algorithm designed by the inventor 100% accurate against unauthorized program activity.","Reference is now made to  for purposes of discussing the functional mechanics of the client application in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process for automatically detecting any unauthorized modification of the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce registry segment in a real time environment.","After the collection of all internal registry data is transmitted to the monitor station , the PC Probe initiates an additional parallel threaded function designed and developed by the inventor, which initiates an additional independent 21 API DLL designed and developed by the inventor, which performs an analysis on the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce segment of the internal registry. This analysis includes a method opening the physical registry key and opening and querying this segment for any possible unauthorized changes within this particular area of the registry. The method includes establishing a \u201cbase count\u201d of all authorized entries within this particular segment of the registry. After the \u201cbase count\u201d is established, a numeric integer of the \u201cbase count\u201d is stored in RAM. The MFC parallel thread then initiates a 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry.","The MFC parallel thread (block ) then initiates the 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry. The actual function of the 32 bit API design is described further below. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce registry segment. The other functions in  perform as similarly described in the previous drawings for corresponding similar functions.","The algorithm method designed by the inventor queries the defined segment of the registry in such a way, where virtually no resource utilization is registered within the CPU. This is possible, because within the defined segment of the registry, entries are listed in no particular order and are random in nature.","While, the actual O\/S has to query the each registry segment within its entirety to establish and maintain its program environment, the method designed and developed by the inventor, is an algorithm which calculates the maximum \u201cbase count\u201d (integer) for all entries within this defined registry segment, less the \u201cbase count\u201d minus 2. The \u201cbase count\u201d minus 2, equates to the start position pointer in which the algorithm continues to count the remaining entries and the last \u201cdate-time modification\u201d within this particular defined portion of the registry segment.","When the algorithm initiates its count at the start position pointer, the algorithm will proceed to count the remaining entries within the defined segment of the registry. If the maximum count equation does not equal the pre-calculated results, the defined registry segment has been violated by a manual edit from the user or by modification from an unauthorized program.","The pre-calculated results guarantees 100% accurate results from the query, because the algorithm is designed to query the defined segment every about five to eight seconds. The speed of the query makes it impossible for a user to delete and add a new entry to the defined segment, without being intercepted by the algorithm. Furthermore, unauthorized programs perform a calculation to add entries to a defined area of the registry, which makes the algorithm designed by the inventor 100% accurate against unauthorized program activity.","Reference is now made to  for purposes of discussing the functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process for automatically detecting any unauthorized modification of the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx registry segment in a real time environment.","After the collection of all internal registry data is transmitted to the monitor station , the Probe initiates an additional parallel threaded function designed and developed by the inventor, which initiates an additional independent 32 Bit API DLL designed and developed by the inventor, which performs an analysis on the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx segment of the internal registry. This analysis includes a method opening the physical registry key and opening and querying this segment for any possible unauthorized changes within this particular area of the registry. The method includes establishing a \u201cbase count\u201d of all authorized entries within this particular segment of the registry. After the \u201cbase count\u201d is established, a numeric integer of the \u201cbase count\u201d is stored in RAM. The MFC parallel thread then initiates a 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry.","The MFC parallel thread (block ) then initiates the 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry. The actual function of the 32 bit API design is described further below. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_LOCAL_MACHINE:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx registry segment. The other functions in  perform as similarly described in the previous drawings for corresponding similar functions.","The algorithm method designed by the inventor queries the defined segment of the registry in such a way, where virtually no resource utilization is registered within the CPU. This is possible, because within the defined segment of the registry, entries are listed in no particular order and are random in nature.","While, the actual O\/S has to query the each registry segment within its entirety to establish and maintain its program environment, the method designed and developed by the inventor, is an algorithm which calculates the maximum \u201cbase count\u201d (integer) for all entries within this defined registry segment, less the \u201cbase count\u201d minus 2. The \u201cbase count\u201d minus 2, equates to the start position pointer in which the algorithm continues to count the remaining entries and the last \u201cdate-time modification\u201d within this particular defined portion of the registry segment.","When the algorithm initiates its count at the start position pointer, the algorithm will proceed to count the remaining entries within the defined segment of the registry. If the maximum count equation does not equal the pre-calculated results, the defined registry segment has been violated by a manual edit from the user or by modification from an unauthorized program.","The pre-calculated results guarantees 100% accurate results from the query, because the algorithm is designed to query the defined segment every about five to eight seconds. The speed of the query makes it impossible for a user to delete and add a new entry to the defined segment, without being intercepted by the algorithm. Furthermore, unauthorized programs perform a calculation to add entries to a defined area of the registry, which makes the algorithm designed by the inventor 100% accurate against unauthorized program activity.","Reference is now made to  for purposes of discussing additional functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a flow diagram of a process for automatically detecting any unauthorized modification of the HKEY_CURRENT_USER:Software registry segment in a real time environment.","After the collection of all internal registry data is transmitted to the monitor station , the PC Probe initiates an additional parallel threaded function designed and developed by the inventor, which initiates an additional independent 32 Bit API DLL designed and developed by the inventor, which performs an analysis on the HKEY_CURRENT_USER:Software segment of the internal registry. This analysis includes a method opening the physical registry key and opening and querying this segment for any possible unauthorized changes within this particular area of the registry. The method includes establishing a \u201cbase count\u201d of all authorized entries within this particular segment of the registry. After the \u201cbase count\u201d is established, a numeric integer of the \u201cbase count\u201d is stored in RAM. The MFC parallel thread then initiates a 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry.","The MFC parallel thread (block ) then initiates the 32 BIT API designed and developed by the inventor, which initiates an algorithm that calculates if any change has occurred to the \u201cbase count\u201d of this particular defined segment of the registry. The actual function of the 32 bit API design is described further below. A sub-thread (block ) initiates the 32 Bit API DLL, which collects all registry data on the HKEY_CURRENT_USER:Software registry segment. The other functions in  perform as similarly described in the previous drawings for corresponding similar functions.","The algorithm method designed by the inventor queries the defined segment of the registry in such a way, where virtually no resource utilization is registered within the CPU. This is possible, because within the defined segment of the registry, entries are listed in no particular order and are random in nature.","While, the actual O\/S has to query the each registry segment within its entirety to establish and maintain its program environment, the method designed and developed by the inventor, is an algorithm which calculates the maximum \u201cbase count\u201d (integer) for all entries within this defined registry segment, less the \u201cbase count\u201d minus 2. The \u201cbase count\u201d minus 2, equates to the start position pointer in which the algorithm continues to count the remaining entries and the last \u201cdate-time modification\u201d within this particular defined portion of the registry segment.","When the algorithm initiates its count at the start position pointer, the algorithm will proceed to count the remaining entries within the defined segment of the registry. If the maximum count equation does not equal the pre-calculated results, the defined registry segment has been violated by a manual edit from the user or by modification from an unauthorized program.","The pre-calculated results guarantees 100% accurate results from the query, because the algorithm is designed to query the defined segment every about five to eight seconds. The speed of the query makes it impossible for a user to delete and add a new entry to the defined segment, without being intercepted by the algorithm. Furthermore, unauthorized programs perform a calculation to add entries to a defined area of the registry, which makes the algorithm designed by the inventor 100% accurate against unauthorized program activity.","Reference is now made to  for purposes of discussing addition functional mechanics of the client application  in accordance with an embodiment of the present invention. In particular,  is a block diagram illustrating various methods utilized to initiate a \u201cdefense umbrella\u201d of the entire PC desktop environment.","The parallel threads and all 32 Bit API DLLs designed and developed by the inventor, working together within the client application , envelope a \u201cdefense umbrella\u201d or \u201cimmune system\u201d over the entire PC client computer environment.","The client application , constantly polls and queries every major critical segment of the client computer, from the configuration of the O\/S files (), the third-party \u201cstart up\u201d (), the creation of new directories or folders (), the creation of new programs and maintaining the configuration of the computer registry (). The registry  was also discussed above in various sections.","Further, at least some of the components of this invention may be implemented by using a programmed general purpose digital computer, by using application specific integrated circuits or field programmable gate arrays, or by using a network of interconnected components and circuits. Connections may be wired, wireless, by modem, and the like.","It is also within the scope of the present invention to implement a program or code that can be stored in a machine-readable medium to permit a computer to perform any of the methods described above.","The above description of illustrated embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize.","These modifications can be made to the invention in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification and the claims. Rather, the scope of the invention is to be determined entirely by the following claims, which are to be construed in accordance with established doctrines of claim interpretation."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Non-limiting and non-exhaustive embodiments of the present invention are described with reference to the following figures, wherein like reference numerals refer to like parts throughout the various views unless otherwise specified.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 24"}]},"DETDESC":[{},{}]}
