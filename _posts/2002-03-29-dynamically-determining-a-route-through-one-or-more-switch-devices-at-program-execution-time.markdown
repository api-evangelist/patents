---
title: Dynamically determining a route through one or more switch devices at program execution time
abstract: A system and method for dynamically determining a route through one or more switch devices at program execution time. A program operable to perform a programmatic request to dynamically determine a route may be created. For example, the request may specify a first endpoint (e.g., channel) of a first switch device and a second endpoint (e.g., channel) of a second switch device. In response to the request, the system may dynamically determine a route from the first endpoint to the second endpoint during execution of the program. Information indicating the determined route may be returned to the program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07017138&OS=07017138&RS=07017138
owner: National Instruments Corporation
number: 07017138
owner_city: Austin
owner_country: US
publication_date: 20020329
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY CLAIM","FIELD OF THE INVENTION","DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application claims benefit of priority of U.S. provisional application Ser. No. 60\/312,547 titled \u201cSwitch Executive\u201d filed Aug. 15, 2001, whose inventors were Srdan Zirojevic, Jason White, Scott Rust, and Jucao Liang.","The present invention relates to the field of computer-based test systems, and more particularly to a system and method for dynamically determining a route through one or more switch devices at program execution time, wherein the one or more switch devices are used to connect test instruments to test points on a unit under test.","A switch is a device used to open and close a circuit. Switch devices are an integral part of many test, measurement, and data acquisition systems because they are used to connect multiple test points to multiple instruments, e.g., to provide stimulus to or to acquire data from a unit under test. Switches are used in a variety of computer-based measurement, automation, and data acquisition applications ranging from thermocouple measurements to cellular telephone testing. Switches come in a variety of types and sizes to meet a wide range of computer-based measurement and automation needs. Switches can be differentiated by their mechanical characteristics and function topology.","The simplest switch is the single-pole single-throw (SPST). Single-pole means the switch has only one source wire. Single-throw means the switch can make a connection in only one position. An SPST switch is used to complete a circuit; a very common use of an SPST switch is for turning power on and off. A second type is the single-pole double-throw (SPDT) switch. An SPDT switch has a single source (single-pole) and two (double-throw) switch positions. An SPDT switch may rest in a normally closed (NC) position. The second possible position is normally open (NO). The SPDT switch routes or selects two signals, such as switching between battery power and mainline power.","A third switch type is the double-pole, double-throw (DPDT). For a DPDT switch, the two levers are \u201clinked\u201d and move together. Both poles are always in the same position. A DPDT switch is basically formed by two SPDT switches always operating at the same time. In addition to the pole and throw terms, switches are classified by form. Form A refers to a single-throw switch that is normally open. If it has one pole (SPST)  it is called a \u201c1 Form A\u201d switch. In contrast, Form B refers to a normally closed SPST switch. Form C refers to a single-pole, double-throw switch (also known as a transfer switch). The SPDT switch  has a single pole and thus is a \u201c1 Form C\u201d switch. The switch with two poles is a \u201c2 Form C\u201d switch (DPDT) .",{"@attributes":{"id":"h-0004","num":"0000"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1A"},{"@attributes":{"id":"h-0005","num":"0000"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1B"},{"@attributes":{"id":"h-0006","num":"0000"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1C"},"The two most common types of electrical switches are mechanical relays and solid-state switches. Mechanical relays, also known as electromechanical relays, make a characteristic clicking sound. They can be one of three types\u2014armature, dry reed, and mercury-wetted reed. Mechanical relays are often used in high-voltage applications, or low level resistance or voltage measurements. On the other hand, FET switches have no moving parts and use transistor technology to switch the signals. They are used in low-voltage (\u00b110 V) applications where it is important to have very little switch delay\u2014having no mechanical parts, FET switches are very fast and may have a longer life. FET switches typically have impedance in the range of 10 Ohm to several kOhm.","Many test, measurement, and data acquisition systems utilize switch devices to switch between different data sources and data sinks, e.g., between different sensors and instruments. In these systems many times it is necessary to create a switch configuration or one or more configured routes to configure the one or more switch devices. A configured route may configure the switch device(s) to connect particular signal sources\/signal sinks of instruments and\/or computer systems to particular signal sources\/signal sinks (test points) of a unit under test. The configured route may route signals through several switch devices, such as multiplexers or matrices, in order to create a complete path from a source channel to a destination channel.","Configured routes such as described above may be created and stored, and a program may later use the configured routes to configure one or more switch devices during execution of the program. In some instances, however, the developer may not want to or may not be able to configure the desired route ahead of time. Thus it would be desirable to provide a system and method for dynamically determining a route through one or more switch devices at program execution time.","One embodiment of the present invention comprises a system and method for dynamically determining a route through one or more switch devices at program execution time. This dynamic route determination is also referred to herein as runtime auto-routing.","A program operable to perform a programmatic request to dynamically determine a route may be created. For example, the request may specify a first endpoint (e.g., channel) of a first switch device and a second endpoint (e.g., channel) of a second switch device. In response to the request, the system may dynamically determine a route from the first endpoint to the second endpoint during execution of the program. Information indicating the determined route may be returned to the program.","The route that is determined may comprise a plurality of switch device channels and may depend on the particular route endpoints specified and the topology of the switching system and the switch devices in the system. For example, in one embodiment, there may be a hardwire connection between the first switch device and the second switch device. In this case, the route may utilize this hardwire connection. In other embodiments, the route may need to pass through one or more additional switch devices in addition to the first switch device and the second switch device. For example, the route may pass through a third switch device, and determining the route may comprise determining a route from the first endpoint of the first switch device to a channel on the third switch device and determining a route from a channel on the third switch device to the second endpoint of the second switch device.","In various embodiments, any of various runtime auto-routing algorithms may be used to dynamically determining a route at program execution time. According to one embodiment of the algorithm, all of the switch devices may first be set in a simulation mode, and dependent routes and route groups may be connected. The switch devices may be set to simulation mode to make the runtime auto-routing algorithm execute faster, and to make temporary connections without making physical hardware connections. Next, the runtime auto-routing algorithm may make several checks to make sure that the first endpoint and the second endpoint are valid. These checks may comprise making sure that none of the channels are configuration channels, since configuration channels are used for interconnections between channels. Next, the runtime auto-routing algorithm may check that there is no source channel conflict. Both of the channels may be checked for existence.","If required signal characteristics are specified, the runtime auto-routing algorithm may filter the channels with desired signal characteristics. The channels may be filtered by required signal characteristics such as voltage capacity, current capacity, impedance, etc. After the channels are filtered, only the channels meeting the desired signal characteristics may be considered as available channels.","If both the first endpoint and the second endpoint are on the same switch device, the routing may be simple. If the first endpoint and the second endpoint are not on the same switch device, or if a switch instrument driver cannot find a route, the runtime auto-routing algorithm may initialize a weight matrix, which may be used in conjunction with the Dijkstra algorithm to find the optimal and shortest path. The weights are analogous to the \u201cdistance\u201d between two channels. For example, if the path is between two channels, \u201cr->c\u201d, the weight may be 2, since only r and c are involved. If the path is \u201cr->c \u201d, the weight may be 3, since 3 channels r, c and r are involved. If there is no path available between two channels, the weight may be an infinite value. The runtime autorouting algorithm may try to find the shortest path between two endpoints. All the weights may be given infinite values since they are not yet initialized. All of the elements in the matrix may be filled with the appropriate weight values. In addition, the runtime auto-routing algorithm may assign a special value to hardwired devices.","The runtime auto-routing algorithm may use the first endpoint as the source node and the second endpoint as the destination node, and may compute the shortest path between the first node and the second node using the Dijkstra algorithm.","Once the route has been determined, the runtime auto-routing algorithm may disconnect the dependent routes and route groups. In addition the switch devices may be taken out of the simulation mode into their original mode.","In various embodiments, the program that performs the request may be any of various types of programs. For example, in one embodiment, the program may be a graphical program including a plurality of interconnected nodes visually indicating functionality of the graphical program. Configuring the graphical program to perform the programmatic request may comprise including a first node among the plurality of interconnected nodes, wherein the first node is operable to perform the programmatic request. For example, the first node may be configured with information specifying the first endpoint of the first switch device and the second endpoint of the second switch device, e.g., by connecting input wires to the first node or setting property or parameter information of the first node.","In another embodiment, the program may be a text-based program comprising a plurality of function or method calls. Configuring the text-based program to perform the programmatic request may comprise including a first function or method call among the plurality of function or method calls, wherein the first function or method call is operable to perform the programmatic request. For example, the first function or method call may be configured with parameter information specifying the first endpoint of the first switch device and the second endpoint of the second switch device.","Incorporation by Reference","U.S. patent application Ser. No. 09\/745,023 titled \u201cSystem and Method for Programmatically Generating a Graphical Program in Response to Program Information,\u201d filed Dec. 20, 2000, is hereby incorporated by reference as though fully and completely set forth herein.","FIG. \u2014Exemplary Measurement Embodiment",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 2","FIG. 2"],"b":["104","102","102","102","102","104","106","106","108","110"]},"The instrument system  may comprise any of various kinds of instruments, including oscilloscopes, multimeters, computer-based instruments, signal generation devices and various other types of instruments or measurement devices, as well as power supplies, among others. The instrument(s) A, B, C may have various form factors. For example, the instrument(s)  may comprise a computer coupled to a GPIB instrument over a GPIB or IEEE 488 bus. Alternatively, the instrument system  may comprise a PXI chassis including a PXI controller and one or more PXI instruments, a computer system coupled to a PXI chassis which includes one or more PXI instruments, a computer system which includes a computer-based instrument card, such as an oscilloscope or multimeter card, such as those available from National Instruments Corporation, a VXI chassis including one or more VXI instruments, a system including a data acquisition card, or a traditional standalone instrument such as those available from Agilent, Tektronix, Keithley and others. The instrument system  may also comprise an image acquisition or machine vision system, such as a computer system including a video capture or image processing board, or a motion control device. Further, the instrument(s)  may comprise various types of industrial automation, control devices, or other devices, such as a programmable logic device (PLD), programmable logic controller (PLC), a distributed I\/O system such as FieldPoint available from National Instruments Corporation, or other type of device. In general, the instrument system or measurement system  may comprise any of various kinds of devices operable to acquire or generate signals.","The switching system  may comprise one or more switch devices. As noted above, a switch device may comprise switches of various types including general-purpose switches, multiplexers and matrix switches among others. In a typical configuration, the switching system  may comprise a rack or chassis adapted to receive one or more switch cards. One example of a switching system is the SCXI (Signal Conditioning eXtensions for Instrumentation) System available from National Instruments Corporation. An SCXI chassis may contain one or more switch devices as well as other types of signal conditioning cards such as for isolation filtering etc. The switching system  may comprise switch devices from various different vendors as well. As discussed below with reference to , the computer system  may be operable to configure one or more switch devices, possibly from different vendors, as a single virtual switch device , thus simplifying operation of the switching system  to the user.","As shown, the various switch devices in the switching system  couple to the instrument through various wires or cables. Another common switching system configuration is a rack-mounted system wherein the switch devices are arranged vertically with various wires or cables connecting the switch devices together.","The various switch devices in the switching system  may also include one or more hardwire connections. A hardwire connection may be a connection made using a physical wire segment between a first channel on a first switch device and a second channel on a second switch device. This facilitates use of the multiple switch devices as a single virtual switch device . For example, the user may utilize a visual route editor to create a route utilizing channels of both the first switch device and the second switch device, wherein a hardwire connection connects the first switch device to the second switch device. A common example of a hardwire would be an analog bus that allows for the chassis to provide interconnects between modules.","The receiver  may couple to the various switch devices in the switching system  through various wires or cables as shown. The receiver  may couple to the fixture . The fixture  may separate out all the signal lines and couple the signal lines to the device under test. As shown, the receiver  may provide a custom interface for each signal line. The fixture  may provide a custom interface on a per product basis. The receiver  and the fixture  may simplify the task of creating and dismantling measurement and test systems coupled to various devices or units under test .","The device under test (DUT) , also called a unit under test (UUT) , may be one of any of various devices that are desired to be tested. In one embodiment, one or more various types of sensors may be coupled to the device under test  to transduce a physical phenomena generated by the DUT into electrical signals for providing through the fixture  and receiver  and through the switching system  to the instrument system . Examples of various sensors or transducers include thermisters, temperature sensors, pressure sensors, microphones, RTDs, strain gauges, etc. The DUT  may be operable to generate signals to the instrument system , i.e., may generate phenomena that are transduced into signals for receipt by the instrument system . Also, the instrument system  may include an arbitrary waveform generator or other signal generation capability to stimulate or control the device under test. Thus, the switching system  may act as a conduit for two-way communication between the instrument system  and the DUT .","FIG. \u2014Exemplary Computer Based Automated Test System",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 3","FIG. 3"],"b":["101","102","102","104","110","102","104","102","104","101","102","104","104","102","102","102","101","102"]},"The computer system  may include a memory, which stores a switch executive software program according to one embodiment of the invention. During execution, the switch executive software program may query the various switch devices contained in the switching system  and use information obtained from these switch devices to aid in creating route configurations. Further, the computer system  may store various switch instrument drivers ,  , which include information regarding the various switch devices that they control. In one embodiment, one or more of the switch devices may be IVI-compliant switch devices, and various IVI switch instrument drivers  comprised in the computer system may be operable to publish information regarding capabilities of the IVI-compliant switch devices that they control.","In another embodiment, the computer system  may be implemented as a card comprised in one of the chassis of the instrument\/switching system \/. For example, the rack shown in  may include one or more PXI chassis and one or more SCXI chassis. The computer system may optionally be implemented as a PXI card contained in a PXI chassis of the rack. A monitor or display device, as well as various I\/O devices such as a mouse or keyboard, may connect to the card in order to provide a user interface to aid the user in using the computer system. The operation of the switch executive software program is discussed in greater detail below.","FIG. \u2014Virtual Switch Device",{"@attributes":{"id":"p-0099","num":"0098"},"figref":["FIG. 4","FIG. 4"],"b":["101","105","105","104","105","105","1","2","105","110"]},"FIG. \u2014Computer System Block Diagram",{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIG. 5","FIGS. 3 and 4","FIG. 5"],"b":"101"},"The computer may include at least one central processing unit or CPU  which is coupled to a processor or host bus . The CPU  may be any of various types, including an x86 processor, e.g., a Pentium class, a PowerPC processor, a CPU from the SPARC family of RISC processors, as well as others. Main memory  may be coupled to the host bus  by means of memory controller . The main memory  may store the switch executive software program operable to generate configured routes and\/or configure switch devices as described herein. The main memory  may also store switch instrument drivers for communicating with switch devices. The main memory  may further store an application program that uses route created using the switch executive software program. The main memory  may also store operating system software, as well as other software for operation of the computer system.","The host bus  may be coupled to an expansion or input\/output bus  by means of a bus controller  or bus bridge logic. The expansion bus  may be the PCI (Peripheral Component Interconnect) expansion bus, although other bus types can be used. The expansion bus  includes slots for various devices such as a data acquisition board . The computer system  further comprises a video display subsystem  and a hard drive  coupled to the expansion bus .","In the embodiment shown in , the instrument system  includes a data acquisition (DAQ) card . The DAQ card  may couple to a switching system chassis, such as an SCXI chassis , which comprises one or more switch devices. These one or more switch devices may in turn couple to a UUT . As noted above, various other embodiments are contemplated, such as a PXI system which includes a PXI instrument card in one or more PXI switch devices, a VXI system which includes a VXI system instrument card in one or more VXI switch devices, and other form factors including distributed I\/O systems such as FieldPoint available from National Instruments.","FIG. \u2014Exemplary Block Diagram of a Switch Executive Software System",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 6","b":["101","202","204","206","204","204","208","206"]},"In one embodiment, the switch executive core  may interface with one or more switch instrument drivers, such as an IVI switch device driver . The IVI switch device driver  may in turn interface with various vendor-specific switch instrument drivers such as NI-Switch  available from National Instruments Corporation and\/or various other third-party switch drivers . In another embodiment, the switch executive core  may interface directly to a specific switch device driver, such as the NI-Switch device driver .","The configuration development environment  may provide a graphical user interface of the switch executive program, which may be used by a user in creating configured routes. According to one embodiment of the invention, the configuration development environment  implements a visual route editor or graphical route editor that provides a graphical user interface enabling a user to graphically or visually create and\/or edit routes. The visual route editor may allow for interactive route editing including modification of route endpoints, insertion and removal of devices and hard wires into a route, and may provide an intuitive graphical response as to the validity of routes being created. In one embodiment, the configuration development environment may also provide other design-time assisted routing to further simplify the creation of route configurations by a user, as explained in , A\u2013I, and , A\u2013E.","In some prior art systems, creating routes between different channels in a switching system requires intimate knowledge of all of the channels and switch devices being used. In systems where the channel count is quite large (in many cases on the order of 10), this can be a very laborious task with many options. In many cases, there are multiple potential ways to complete a route, but a very large number of paths may make the completion of routes very difficult and time consuming.","The switch executive core  may use an algorithm that allows users to partially specify sections of the problem, i.e., partially specify sections of the route. If the switch executive core  can find a solution fitting the partial specification, the switch executive core may return the solution. If the switch executive core cannot find a full solution, the switch executive core may present a partial solution, along with options of steps to take next. The switch executive core  may also present solutions comprising a valid solution along with other potential solutions.","During the process of graphically creating a route, the route may be constantly validated. This powerful feature may advantageously allow user to create custom routes, with the creation being validated during the process.","The switch executive core  provides a \u201ccore\u201d, \u201cengine\u201d, or logic of the switch executive software program for facilitating the various features described above. As shown, an application development environment (ADE)  may be used to interface with the switch executive core  through a defined application programming interface (API). Example ADEs include TestStand, LabVIEW, Measurement Studio, Visual C++ and others. The API presented by the switch executive core  may be used by any of various application programs, including those from National Instruments Corporation and other vendors.","Software interfaces to instruments are called instrument drivers. Instrument drivers are generally designed to provide high-level function calls that abstract the details of programming an instrument for specific actions. The Interchangable Virtual Instrument (IVI) standard, is one example of a standard programming interface for instrument drivers. The IVI specification defines architecture for IVI systems that incorporate productivity features. These features include instrument interchangeability, instrument simulation, and system performance. The IVI drivers include a plurality of driver classes, one for each type of an instrument, comprising DMMs, oscilloscopes, DC power supplies, arbitrary waveform or function generators, switch devices, and other instruments.","The IVI switch device driver , shown in , is one example of a switch device driver. An example of an IVI switch device driver is an NI-Switch device driver . Block  refers to various other switch instrument drivers  provided by third-party switch device vendors. It is noted that the switch device driver software architecture of elements ,  and  may be specific to the IVI implementation of class drivers and specific drivers. In an alternate embodiment, the switch executive core  may interface to a single switch device driver layer wherein one or more switch instrument drivers may be present at this layer to interface with one or more switch devices.","In one embodiment, the switch executive core  may be operable to query one or more of the switch instrument drivers , ,  to obtain information regarding the respective switch device controlled. For example, in the embodiment shown in , the switch executive core  is operable to query the switch device driver , ,  to obtain detailed capability information on the respective switch device that the driver controls.","The switch device driver , ,  may determine the capability of establishing a route between any two channels on a single device. A switch device driver for a particular switch device may have no knowledge, however, of other switch devices and interconnects in the system. The switch executive core  provides the capability of finding a configured route between any two channels in a switching system, whether or not the channels reside on the same device. As described below, the switch executive core  may use an algorithm for limiting the solution space and finding valid routes efficiently.","In one embodiment, the switch executive core  may not maintain any topology information for the switch devices it controls. Also, the switch executive core  may not require that the computer system executing the switch executive core  be physically connected to the switch devices to create routes. The switch executive core  may use the ability of the switch instrument drivers , ,  to create configured routes in a simulation mode. Using multiple simulation sessions, the switch executive core  may create different hardware state configurations without actually controlling any hardware.","The configuration data  may comprise configured routes created by the user in response to using the switch executive software. The configured routes may define one or more routes and\/or route groups used for controlling a switching system  which may comprise multiple switch devices. The configured routes may be used in application development environments such as LabVIEW or Measurement Studio to control a switching system  during an instrumentation or a measurement application. For example, the user may create an application using an ADE, wherein the application utilizes an API of the switch executive core  to request the switch executive core  to configure the switch devices according to one or more of the stored configured routes.","FIG. \u2014Flowchart Diagram of Execution of a Switch Executive Software System",{"@attributes":{"id":"p-0117","num":"0116"},"figref":["FIG. 7","FIG. 7"]},"In step  the user may set up the hardware configurations for the switching system  and the instrument system , such as described below with reference to .","In step  the user may configure the virtual switch device , including specifying various switch devices of the switching system  for inclusion in the virtual switch device .","In step  the user may create configured routes utilizing one or more devices in the virtual switch device , such as described with reference to  and . Step  may comprise the user utilizing a visual route editor to graphically or visually create the routes.","In step  the user may create a program using configured routes, such as a text-based program or a graphical program such as described with reference to  through .","In step  the user may execute the program using configured routes in order to control switch devices in the virtual switch device  and the instrument system .","It is noted that the flowchart of  is exemplary only. Further, various steps in the flowchart of  may occur concurrently or in different order than that shown, or may not be performed, as desired. Also, various additional steps may be performed as desired.","FIG. \u2014Flowchart Diagram of Configuration of a Virtual Switch Device",{"@attributes":{"id":"p-0124","num":"0123"},"figref":["FIG. 8","FIG. 8","FIG. 7","FIG. 8"],"b":["105","303","315","101","104","101","210","212","214"]},"As shown, in step  the user may set up the hardware configuration of the switching system  and instrument system . Setting up the instrument system  may comprise coupling one or more instruments, e.g., A, B, C, to a computer system , e.g., as a card comprised in the computer system  or in a separate chassis or a separate standalone instrument. The instrument(s) may also be connected to the switching system . Setting up the switching system  may comprise installing one or more switch devices in the switching system .","In step  the switch executive core  may create a virtual switch device , such as described above with reference to , using a switch configuration wizard. The switch executive core  may be operable to display a switch configuration wizard, i.e., one or more GUI dialogs or windows for receiving user input regarding the virtual switch device . The switch executive core  may create and\/or modify the virtual switch device  in response to user input to the wizard.","In step  the user may have various options on how to configure the newly created virtual switch device , including importing a virtual switch device  configuration that has been previously created from a file, or the user may manually associate external switch devices to create a new virtual switch device .","In step  the user may manually associate switch devices with the virtual switch device . The switch devices may be coupled to the computer system  and to the UUT . For example, the method may operate to display a list of switch devices coupled to the computer system . Graphical user input specifying the desired switch devices to associate with the virtual switch device  may then be received. The switch executive core  may query various switch instrument drivers , ,  to determine the type and capabilities of each of the respective switch devices comprised in the switching system . For those switch devices that are not automatically detected, the user may manually input or select respective switch devices present in the switching system . The switch configuration wizard graphical user interface may show the user the various switch devices present in the switching system . In one embodiment, the user may graphically select one or more of the switch devices together to create a virtual switch device . For example, if five switch devices are present in the switching system , the user may select one or more of these switch devices to configure the virtual switch device .","In step  the user may graphically configure individual channels in the virtual switch device . The user may have an option to enter alias names in lieu of default channel names provided by the computer, as well as comments to help the user associate the named channel with the actual operation of that channel. The user also may see different attributes and\/or resources for the given channel such as bandwidth of the channel, impedance of the channel, speed, current and other parameters. The user also may have a choice of channel type selection comprising a normal channel, a configuration channel or a source channel. Channel types may be defined by switch instrument drivers , ,  or they may be user configured. In the visual route editor, the switch executive core  may use a normal channel as a configuration channel automatically if there is not already a user defined configuration channel for use.","A source channel is a channel that is being denoted as used by a signal source. The switch executive core  may not allow the user to connect two source channels together, either directly or indirectly, serving as a software protection mechanism that may prevent channels from being connected that may cause a hardware problem.","A configuration channel is essentially a channel that the user does not plan on directly connecting to any signals. The configuration channel may be reserved for use by the switch executive core  for use in route paths between other channels. A row may be marked as a configuration channel to connect two columns in a matrix.","A normal channel is a channel that is not a configuration channel or a source channel. The switch executive core  may use normal channels as endpoints in a route.","The switch executive core  may also provide a way to define and use hardwired connections between channels. In step  the user may graphically configure hardwire connections or use previously configured hardwires on the physical switch devices that connect the various switch devices together in the switching system . In step  the user may graphically configure or enter information into the computer system  regarding the various hardwire connections that are present between the various switch devices in the switching system . In another embodiment, the switch executive core may detect connections between channels and automatically create hardwires.","In step  if the user is performing design-time assisted routing, then operation may proceed to step . If the user desires not to perform design-time assisted routing, which means that run-time or manual routing may be performed, then operation may proceed directly to step  (done). Design-time assisted routing may comprise the user creating routes with the aid of the visual route editor described herein. For example, the routes may be pre-configured and later used in a program. In run-time routing, the route(s) may not be pre-configured, and a route between two channels may be dynamically determined at run-time of a program. In manual routing, the user may specify an explicit route between two channels, e.g., may provide information identifying each of the switches or channels through which the route passes.","If the user is performing design-time assisted routing in step , then in step  the user may graphically configure routing information between channels including various resources and dependencies. The operation of step  is described in greater detail in the flowcharts of , and .","For design-time assisted routing, the switch executive core  may use a visual route editor to create routes. The visual route editor may allow for interactive route editing, including modification of route endpoints, insertion and removal of devices and hardwires into a path, and may provide graphical response as to the validity of the route. In other embodiments, the visual route editor may allow for fully interactive editing of the displayed route. This represents a major improvement over text\/list schemes without graphical feedback.","In addition to allowing the specification of endpoints and route paths, the switch executive core  also may allow users to specify desired signal characteristics. This ensures that the switches used in the routing path can carry a signal matching the user's desired signal characteristics. Switch devices are available in a variety of types and are made for different purposes. By utilizing desired signal characteristics, the switch executive core  can pick channels on switches that meet these characteristics. The switch executive core  also may allow users to specify any other routes that they expect to coexist with the selected route. This allows the switch executive core  to avoid using any route elements that would create a resource conflict. In other embodiments, additional criteria may be used to find appropriate routes.","In one embodiment, instead of trying to keep track of hardware topologies for all of the switch devices, the switch executive core  may use the switch instrument drivers directly , , , thus eliminating the need for performing maintenance work on the topology files for the switch devices. The switch executive core  may query the switch instrument drivers , ,  to determine switch system  routing information, then defer to the switch instrument drivers , ,  to handle intra-device routing.","After the user has graphically configured routing information between channels, in step  the user may optionally configure route groups, where a route group comprises a plurality of routes.","It is noted that the flowchart of  is exemplary only. Further, various steps in the flowchart of  may occur concurrently or in different order than that shown, or may not be performed, as desired. Also, various additional steps may be performed as desired.","FIG. \u2014User Program Execution with Switch Routing Information",{"@attributes":{"id":"p-0141","num":"0140"},"figref":["FIG. 9","FIG. 9","FIG. 7","FIG. 9"],"b":"341"},"In step  the user may begin creating an application program for controlling one or more virtual switch devices . The application program may be a test or measurement program, an instrumentation program, an industrial automation program, or any other type of program which requires the use of switch devices. The program may be created using any of various programming environments or languages, or combination of environments and languages. In one embodiment, the program may be a text-based program, e.g., a program written in a text-based programming language such as C, C++, Visual Basic, Java, or another text-based programming language. In another embodiment the program may be a graphical program, e.g., a program comprising a plurality of interconnected nodes that visually indicate functionality of the program. For example, in one embodiment, the user may create a graphical program using the LabVIEW graphical programming development environment.","In step  the user may decide how to incorporate the routing functionality in the application program. For example, the user may: 1) use routes that were previously configured using the visual route editor; 2) use run-time routing techniques; and\/or 3) use manual routing techniques.","For example, step  illustrates the use of a configured route previously created using design-time assisted routing such as described with respect to . Step  may involve configuring the program to use an API provided by the switch executive core . For example, if the program is a text-based program, the user may include one or more function or method calls of the API, e.g., which pass the configured routes as parameters, e.g., to programmatically to configure the various switch devices. As another example, if the program is a graphical program, the user may include one or more graphical nodes in the program which receive the configured routes, e.g., as input wires, and use the configured routes e.g., to programmatically to configure the various switch devices. As discussed further below, using a configured route in a graphical program may comprise connecting an icon representing the configured route to a switch node in the graphical program. The creation of a graphical program that uses one or more configured routes is described below with respect to .","As shown in step , the user may also or may alternatively use run-time autorouting to cause the switch executive core to dynamically determine one or more routes. For example, the user may enter two route endpoints, and then the run-time auto-routing algorithm may find a route between the two route endpoints, such as described below with reference to . In one embodiment, the switch executive core may dynamically determine the route when the program is executed. In another embodiment, the switch executive core may dynamically determine the route at edit-time of the program. For example, in response to the user providing the two route endpoints to a node in a graphical program, the switch executive core may be invoked to try to determine a route between the two endpoints. This may useful, for example, if there is no valid route between the two endpoints, so that the user may receive feedback informing him of the problem before the program is actually executed.","As shown in step , the user may also or may alternatively enter one or more routes manually, e.g., via a text-based or string-based format. The desired route list may be provided, comprising channels on one or more switch devices, or desired routes comprising complete route paths between the channels, and source and destination endpoints.","In one embodiment, the program may combine the various techniques of steps , , and . For example, a first portion of the program may use a pre-configured route to configure the switch devices, and a second portion of the program may use a route dynamically determined at run-time to configure the switch devices.","In each of steps ,  and , the user may specify a connect\/disconnect function between various routes in the application program. As discussed further below, when the switch executive core  executes to configure the desired routes, the switch executive core  may operate to intelligently manage connects and disconnects to accomplish optimized changes in routes that may reduce or eliminate unnecessary connects and disconnects of the switch devices. The software intervention in hardware state may improve relay lifetime and reduce execution time, and is discussed in greater detail with respect to the flowchart of  and .","As shown in step , after the portions of the program using routes have been specified, then operation may proceed to step . In step  the user may create the rest of the application program. For example, creating the rest of the program may comprise including functionality in the program to perform a test and measurement or instrumentation application, e.g., where data is sent to or received from a data sink\/source accessible through the switch devices configured by the routing described above. It is noted that in various embodiments, the steps of  may be performed in various orders, may be performed multiple times, or may be interleaved. Thus, the user may create the program in any desired manner or order.","When the application program is complete, the program may be executed, as shown in step . During execution, the application program may control or configure the one or more virtual switch devices  according to the routes specified in any one or more of steps ,  or .","It is noted that the flowchart of  is exemplary only. Further, various steps in the flowchart of  may occur concurrently or in different order than that shown, or may not be performed, as desired. Also, various additional steps may be performed as desired.",{"@attributes":{"id":"h-0019","num":"0000"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0152","num":"0151"},"figref":["FIG. 10","FIG. 8","FIGS. 11A\u201311I"],"b":["310","316"]},"In step  the user may create necessary channels and connections for a switching application. This may include graphically configuring individual channels in the virtual switch device  (Step ), as well as graphically configuring hardwire connections in the virtual switch device  (Step ). The user may also have one or more chances to configure more devices, channels, and\/or hardwires in steps  and .","In step  the user may add a first route or copy an existing route. When the user first adds the first route, the first route may be \u201cempty\u201d, and the user may then provide input to complete the first route as described below. The user may assign the first route an alias name. The alias name may be utilized by the user for convenience. For example, the alias name \u201cOscilloscope CH\u201d may be more descriptive than \u201cC\u201d, an exemplary default name.","In step  the user may define desired signal characteristics and\/or resources for the first route. Desired signal characteristics comprise parameters such as voltage, current, resistance, and speed requirements. For example, if a user selects a current requirement of 5 Amps (A), the visual route editor may filter channels so that only channels on switch devices capable of carrying a 5 A current are displayed for selection for inclusion in the route. In other words, desired signal characteristics help filter out unsuitable channels. Signal resources comprise other route requirements comprising dependencies on specific channels.","In step  the user may set route requirements, e.g., may specify that use of certain hardwires is required. Certain hardwires may need to be reserved for use with specific routes or route groups.","In step , the user may graphically choose two endpoints for the first route. For example,  illustrate an exemplary graphical user interface enabling the user to graphically choose the endpoints. The two endpoints may exist on a same switch device, or they may exist on two separate switching devices on the same virtual switch device . One of the endpoints may be coupled to an instrument A\/B\/C for the purpose of acquiring data or generating a signal. The other endpoint may be coupled to the UUT  for the purpose of acquiring data and\/or stimulating the device under test. The user may use alias names for the endpoints for ease of configuration.","In step , the switch executive core  may decide if the first route is complete and\/or valid. The algorithm for steps  through  is illustrated in . If the switch executive core  decides that the route is not complete, in step  the user has a choice to add other switch devices and\/or hardwires to the first route, automatically complete the first route using the switch executive, or manually edit the first route. After executing step  the switch executive core  may perform step  again to determine if the modified first route is complete. In one embodiment, the user may allow the switch executive core to perform a more complete routing algorithm in an attempt to automatically complete the first route.","In step  the user may wish to select a different route or modify the first route even if the first route information is complete and correct. If the user decides to choose a different route or modify the first route, the user may choose different hardwires, devices, or internal connections that may alter the route path. If the user chooses a different route or modifies the first route in this manner, the switch executive core  may execute step  again to examine if the route is complete.","In step , the user may want to add more configured routes, as shown by the arrow to step . If all of the routes have been configured (step ), then the visual design-time assisted routing is complete for the virtual switch. The user now may proceed to create and execute a user program that utilizes the configured routes, as described above.","It is noted that the flowchart of  is exemplary only. Further, various steps in the flowchart of  may occur concurrently or in different order than that shown, or may not be performed, as desired. Also, various additional steps may be performed as desired.","Creating a route in a graphical manner may comprise displaying various icons representing hardware elements in the route and displaying wires connecting the icons to indicate that the route passes through the respective hardware elements. For example, user input may be received to the graphical user interface of the visual route editor specifying a first endpoint of the route, wherein the first endpoint comprises a channel of a first switch device. In response, a first icon representing the first switch device may be displayed. User input may then be received to the graphical user interface of the visual route editor specifying a second endpoint of the route, wherein the second endpoint comprises a channel of a second switch device. In response, a second icon representing the second switch device may be displayed. The first icon and the second icon may visually indicate that the route passes from the first channel of the first switch device to the second channel of the second switch device.","One or more icons may be displayed between the first icon representing the first switch device and the second icon representing the second switch device. The visual route editor may interface with the switch executive core to automatically determine one or more additional elements that complete the route from the first endpoint to the second endpoint and may display icons representing the one or more additional elements to indicate the completed route.","As one example, a hardwire connection between the first switch device and the second switch device may be determined. A hardwire connection icon may be displayed between the first icon and the second icon. A first wire may be displayed to connect the first icon to the hardwire connection icon, and a second wire may be displayed to connect the hardwire connection icon to the second icon. The first and second wires may visually indicate that the route passes through the first switch device, the hardwire connection, and the second switch device.","The visual route editor\/switch executive core may also determine that a second hardwire connection also exists between the first switch device and the second switch device. In this case, the user may be able to provide input to the graphical user interface to request to use the second hardwire connection instead of the first hardwire connection. In response, the hardwire connection icon may be re-displayed to visually indicate that the route passes through the second hardwire connection. For example, in one embodiment, the user may be able to interact with the hardwire connection icon itself to request to use a different hardwire connection, e.g., by choosing a different hardwire connection from a displayed list of available hardwire connections between the first switch device and the second switch device.","If there is no hardwire connection between the first switch device and the second switch device, the visual route editor may visually indicate that the route from the first channel of the first switch device to the second channel of the second switch device is incomplete. In this case, the user may specify a third switch device to insert in the route between the first switch device and the second switch device. In response, a third icon representing the third switch device may be displayed. If a first hardwire connection exists between the first switch device and the third switch device, and a second hardwire connection exists between the third switch device and the second switch device, then the route may be completed. For example, a first hardwire connection icon and associated wires may be displayed to visually indicate that the route passes from the first switch device through the first hardwire connection to the third switch device. A second hardwire connection icon and associated wires may be displayed to visually indicate that the route passes from the third switch device through the second hardwire connection to the second switch device.","In various embodiments, the icons representing hardware elements in the route may have any of various appearances and may display various types of information. In one embodiment described herein, an icon representing a switch device may display information specifying:\n\n","The internal path may include the first channel of the respective switch device, zero or more additional channels of the respective switch device, and the second channel of the respective switch device. The internal path may specify a path within the respective switch device from the first channel to the second channel. Thus, while the route as a whole may comprise a path passing through multiple switch devices, for each respective switch device in the route, there may be an internal path of channels within the respective switch device through which the route passes. In some cases, the internal path may simply comprise a connection from the left hand side endpoint channel to the right hand side endpoint channel. In other cases, the internal path may pass through one or more additional channels within the respective switch device.","When the user specifies a first (overall) endpoint for the route, the first endpoint may be displayed as the left hand side endpoint within a first switch device. Similarly, when the user specifies a second (overall) endpoint for the route, the second endpoint may be displayed as the right hand side endpoint within a second switch device. The internal paths for each of the switch devices in the route, together with the hardwire connections connecting the switch devices may specify the complete list of connections in the route.","The visual route editor may interface with the switch executive core to automatically determine various aspects of the route, such as the particular switch devices to include in the route, the particular internal paths to use, etc., and may display icons representing the route configuration. The user may interact with the displayed icons to alter the route as desired.",{"@attributes":{"id":"p-0171","num":"0174"},"figref":["FIGS. 11A through 11I","FIG. 11A"]},"Thus, there may be one left hand side endpoint and one right hand side endpoint for the entire route, as described above with reference to , and in addition, for each connection within the route from a first channel of a switch device to a second channel of the switch device, the connection may be described as having a left hand side endpoint (the first channel) and a right hand side endpoint (the second channel).","The third value in the rectangular box may represent an internal path in the switch device between the left hand side endpoint of the switch device and the right hand side endpoint of the switch device. In the visual representation of the switch device, the four values may have one or more states, comprising a \u201cvalue known\u201d or \u201cnot optional\u201d state (represented as a filled-in rectangle), and a \u201cvalue unknown\u201d or \u201coptional\u201d state (represented as a blank rectangle). In the following description of , an exemplary scenario of creating a first route in response to user input is discussed.",{"@attributes":{"id":"h-0020","num":"0000"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0174","num":"0177"},"figref":["FIG. 11A","FIG. 11A","FIG. 10","FIG. 11A","FIGS. 11B\u201311C"],"b":["204","364","204","105"]},{"@attributes":{"id":"h-0021","num":"0000"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0175","num":"0178"},"figref":["FIG. 11B","FIG. 11B","FIGS. 11D\u201311G"],"b":["204","204"]},{"@attributes":{"id":"h-0022","num":"0000"},"figref":"FIG. 11C"},{"@attributes":{"id":"p-0176","num":"0179"},"figref":["FIG. 11C","FIG. 11A","FIG. 11C","FIGS. 11D\u201311G"],"b":["204","204"]},{"@attributes":{"id":"p-0177","num":"0180"},"figref":["FIGS. 11D","FIG. 11B","FIGS. 11D","FIG. 11B","FIG. 11C"],"b":["11","11","11","11","11","11","11"]},{"@attributes":{"id":"h-0023","num":"0000"},"figref":"FIG. 11D"},{"@attributes":{"id":"p-0178","num":"0181"},"figref":["FIG. 11D","FIG. 11B","FIG. 11D"],"b":["11","204","204"]},{"@attributes":{"id":"h-0024","num":"0000"},"figref":"FIG. 11E"},{"@attributes":{"id":"p-0179","num":"0182"},"figref":["FIG. 11E","FIG. 11B","FIG. 11E"],"b":["11","204","204","204","204","204"]},{"@attributes":{"id":"h-0025","num":"0000"},"figref":"FIG. 11F"},{"@attributes":{"id":"p-0180","num":"0183"},"figref":["FIG. 11F","FIG. 11B"],"b":["11","204","204"]},{"@attributes":{"id":"h-0026","num":"0000"},"figref":"FIG. 11G"},{"@attributes":{"id":"p-0181","num":"0184"},"figref":["FIG. 11G","FIG. 11B","FIG. 11G"],"b":["11","204","204","204"]},{"@attributes":{"id":"p-0182","num":"0185"},"figref":["FIGS. 11H","FIG. 11G","FIGS. 11H and 11I"],"b":"11"},{"@attributes":{"id":"h-0027","num":"0000"},"figref":"FIG. 11H"},{"@attributes":{"id":"p-0183","num":"0186"},"figref":["FIG. 11H","FIG. 11G"],"b":"204"},{"@attributes":{"id":"h-0028","num":"0000"},"figref":"FIG. 11I"},{"@attributes":{"id":"p-0184","num":"0187"},"figref":["FIG. 11I","FIG. 11G"],"b":["204","204"]},{"@attributes":{"id":"h-0029","num":"0000"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0185","num":"0188"},"figref":["FIG. 12","FIG. 7","FIG. 9"],"b":["356","356","204","480","482","204"]},"In step , switch devices included in the virtual switch device  may be configured with one or more routes during execution of the program.","In step , the main user program may utilize the routes to send and\/or receive data via the switch devices. For example, the program may perform a measurement function using the routes. The measurement function may comprise connecting the instrument system  through the switching system  to a DUT or UUT , e.g., in order to control and\/or acquire data from the DUT or UUT .",{"@attributes":{"id":"h-0030","num":"0000"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0188","num":"0191"},"figref":["FIG. 13","FIG. 12"],"b":"482"},"In step , the runtime auto-routing algorithm first may set one or more of the switch devices in a simulation mode. The one or more switch devices may be set to simulation mode for the purpose of making the runtime auto-routing algorithm execute faster. In one embodiment, the one or more switch devices may be set to simulation mode such that the instrument driver may be executed without making actual hardware connections.","In Step , the runtime auto-routing algorithm may make several checks to make sure that the first endpoint and the second endpoint are valid. These checks may comprise making sure that none of the channels are configuration channels, since configuration channels may only be used for interconnections between channels. Next, the runtime auto-routing algorithm may check that there is no source channel conflict. Also, both of the channels may be checked for existence, such that none of the channels have NULL names (invalid names for the virtual switch device), which would indicate that the channel with the NULL name does not exist.","In Step , the runtime auto-routing algorithm may filter the channels with desired signal characteristics. The channels may be filtered by desired signal characteristics such as voltage capacity, current capacity, and resistance. After the channels are filtered, only the channels meeting the desired signal characteristics will be considered as available channels.","In Step , the runtime auto-routing algorithm may search for both of the channels in the channel list. If either one or both the first endpoint and the second endpoint cannot be found in the channel list, the runtime auto-routing algorithm may return an error.","In Step , the runtime auto-routing algorithm may have found both the first endpoint and the second endpoint in the channel list, and the runtime auto-routing algorithm may examine if both of the endpoints exist on the same switch device.","In Step , both of the endpoints exist on the same switch device. The runtime auto-routing algorithm now may find a route on the same switch device, and the runtime auto-routing algorithm may execute Step  next.","In one embodiment, in Step , the first endpoint and the second endpoint are not on the same switch device. The runtime auto-routing algorithm now may initialize a weight matrix, which may be used in conjunction with the Dijkstra algorithm to find the optimal and shortest path. The weights may be analogous to the \u201cdistance\u201d between two channels. For example, if the path is between two channels, \u201cr->c\u201d, the weight may be 2, since only r and c are involved. If the path is \u201cr->c->r\u201d, the weight may be 3, since 3 channels r, c and r are involved. If there is no path available between two channels, the weight may be assigned an infinite value. The runtime auto-routing algorithm may try to find the shortest path between two endpoints. In this step, all the weights may be given infinite values since they are not yet initialized. Other embodiments of finding the optimal and shortest path between the first endpoint and the second endpoint are contemplated.","In one embodiment, in Step , all of the elements in the matrix may be filled with the appropriate weight values according to the rules mentioned above. In addition, the runtime auto-routing algorithm may assign a special value to hardwired devices. If the channel in the row and the channel in the column are on the same device, the runtime auto-routing algorithm may search for the path between them and may calculate the corresponding weight. If there is no path, the weight value may be left as infinite weight.","In one embodiment, in Step , the runtime auto-routing algorithm may use the first endpoint as the source node and the second endpoint as the destination node, and may compute the shortest path between the first node and the second node using the Dijkstra algorithm.","In one embodiment, in step , the runtime auto-routing algorithm may disconnect the dependent routes and route groups. In addition the switch devices may be taken out of the simulation mode into their original mode.","It is noted that the flowchart of  is exemplary only. Further, various steps in the flowchart of  may occur concurrently or in different order than that shown, or may not be performed, as desired. Also, various additional steps may be performed as desired.",{"@attributes":{"id":"h-0031","num":"0000"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0200","num":"0203"},"figref":["FIG. 14","FIG. 14"]},"The user may execute a program associated with any of various application development environments (ADE)  that may be used to interface with the switch executive core , such as TestStand, LabVIEW, Measurement Studio, Visual Basic, and Visual C++, among others. One embodiment of the switch reduction algorithm is explained in detail in . As used herein, the term \u201cgroup of routes\u201d refers to one or more configured routes, and may be used interchangeably with the term \u201croute group\u201d. The configured route may be created across one or more switch devices, as described above with reference to  and . The configured route may comprise a plurality of channels on one or more switch devices.","In Step , the switch executive core  may receive a first route group. The first route group may include one or more routes.","In Step , the switch executive core  may configure one or more switch devices of the virtual switch device  according to the routes in the first route group, i.e., may \u201cconnect\u201d each route in the first route group. This may involve setting the switch devices into their proper state as described by routes in the first route group. In other words, for each route of the first route group, connections may be made within the switch devices to configure the switch devices to perform the route, e.g., so that data can travel via the channels in the route.","In step  the switch executive core  may receive a second route group including one or more routes. The second route group may be received for a transition of the state of the switch devices. In other words, the transition may involve disconnecting routes of the first route group and connecting routes of the second route group. In other words, for each route of the first route group, it is desired to disconnect the connections previously made in step , and for each route in the second route group, it is desired to make connections within the switch devices to connect these routes, similarly as for step .","The first route group and the second route group may share common routes and\/or one or more routes of the first route group may share one or more common channel connections (i.e., a connection between two channels) with one or more routes of the second route group. In step , the switch executive core  may analyze the first route group and the second route group in order to find these common elements and may determine an optimized transition to the second route group based on the common elements. The optimized transition may be based on reducing or eliminating redundancies. For example, disconnecting a route in the first route group followed by reconnecting the same route in the second route group is redundant. Also, if a first route in the first route group and a second route in the second route group share a common connection between two channels, it is redundant to disconnect the connection when disconnecting the first route, followed by re-connecting the connection when connecting the second route. In various embodiments, the method may seek to optimize the transition based on one or both of these levels.","In step , the switch executive core  may re-configure the one or more switch devices according to the optimized transition to the second route group determined in step . As described above, the re-configuration may include performing disconnections in the one or more switch devices for routes of the first route group. However, disconnections may not be performed for the common elements, i.e., for common routes and\/or common channel connections. The re-configuration may also include performing connections in the one or more switch devices for routes of the second route group. However, performing connections for the common elements, i.e., for common routes and\/or common channel connections, may not be necessary since these elements are already connected.","It is noted that the flowchart of  is exemplary only. Further, various steps in the flowchart of  may occur concurrently or in different order than that shown, or may not be performed, as desired. Also, various additional steps may be performed as desired.",{"@attributes":{"id":"h-0032","num":"0000"},"figref":"FIGS. 15A\u201315D"},{"@attributes":{"id":"p-0208","num":"0211"},"figref":["FIGS. 15A\u201315D","FIGS. 15A\u201315D"]},"The switch transition reduction algorithm may use one or more data structures comprising a list of existing routes, list of existing connections, and a list of existing disconnections. Each connection that is successfully completed is added to a list of existing connections. Each route that is successfully completed is added to the list of existing routes. The user may wish to connect a desired route list, which may comprise one or more routes, each route comprising one or more connections and one or more disconnections. There may be two types of route connections: non-reference counted and reference counted connections. The non-reference counted connections do not allow other routes to share resources. The reference counted connections, also referred to as route-sharing, or multiconnect, do allow other routes to share resources. The switch transition reduction algorithm may also use a plurality of procedures described below, such as Connect, Disconnect, and ConnectAndDisconnect functions.","Preparing for Connect Function for Non Reference Counted Connections","Before performing any connections, the Connect function may first examine endpoints for the connections in desired route list. If the endpoints for the connections in desired route list are the same as two endpoints of a route in the list of existing routes, or any other two endpoints in the list of existing connections, it may be an error condition, since multiple connections of the same route are not allowed. If this occurs the switch executive core  may produce an error.","The design-time routing assistance algorithm can also check for any connections that may collide, before trying to connect any connections by examining the list of existing connections for each connection in the desired route. If there are any connections that are duplicated, the switch executive core  may produce an error.","Preparing for Connect (Reference Counted Connections)","Before performing any connections, the Connect function may first examine endpoints for the connections in the desired route list. If the two endpoints of any route in the endpoints for the connections in desired route list are the same as two endpoints of a route in the list of existing routes or in the list of existing connections, the desired route list has a potential match. If the potential match is with a route that is marked as non-shareable, the switch executive core  may produce an error.","To discover if it is a true match, the switch executive core  may examine if the connection paths are the same for the two matching routes. If the two are a true match, the routes are merged with one another, or the duplication is removed. If the routes have the same endpoints but there is not a true match, the switch executive core  may produce an error.","Performing the Connection","Once the desired route list has been prepared and verified for either mode of operation, reference counted or non-reference counted mode, the switch executive core  may treat the desired route list as a reference counted connection mode. During the connection process the switch executive core  may connect each route in the desired route list by connecting its connection paths. If anything fails during a connect operation, the switch executive core  may return the system to state that it was in before the Connect function was called.","Disconnect Function","When disconnecting, the disconnect route list may be prepared in much the same manner as that of the connect route list. However, for the Disconnect function, it may not be important whether or not the connection is marked as non-shareable; thus, this check may not be performed. The Disconnect function may find a true match for every connection. If the Disconnect function tries to disconnect a route that is not found in list of existing disconnections, the switch executive core  may produce an error. Assuming that the connections were all made in the reference counting modes as described above, the Disconnect function can always behave as though disconnecting a reference counted route. Once the switch executive core  reaches the end of the list of existing disconnections, if there were any disconnection errors the switch executive core  may produce an error.","ConnectAndDisconnect Function","When the switch executive core  performs a Connect function and a Disconnect function in the same operation, the switch executive core  may compare the connects and the disconnects in the desired route list to minimize actual hardware operation. This involves initial special preparation depending on the arguments to the function, followed by one pass that holds for all cases (Steps \u2013). If an item exists in both the connects and the disconnects in the desired route list, it may be discarded from both.","If one or the other of the specifications is empty, the function should behave as though it is a standalone function call to either Connect or Disconnect functions. If the Connect and Disconnect specification is not empty, and the same, the function should essentially be a no operation from the hardware perspective. The ConnectAndDisconnect function may have different modes of operation depending on whether or not route sharing is enabled and depending on the order of operation: break before make or break after make, also referred to as disconnect-before-connect and connect-before-disconnect respectively.",{"@attributes":{"id":"h-0038","num":"0000"},"figref":"FIG. 15A"},{"@attributes":{"id":"p-0218","num":"0221"},"figref":"FIG. 15A"},"1. Because a disconnect will occur before a connect, the switch transition reduction algorithm may produce an error if a connection to be disconnected isn't in the list of existing routes.","2. Because both the connects in the desired route list and the disconnects in the desired route list are not shared, every connect in the desired route list should either match a disconnect in the desired route list or not match anything in the list of existing routes. It may be an error if a connect in the desired route list matches a connection in the list of existing routes that does not also exist in the disconnects in the desired route list.","3. If the previous two conditions are satisfied, the switch transition reduction algorithm may eliminate any common routes between the disconnections in the desired route list and the connections in the desired route list.","Procedure:","In one embodiment, the switch transition reduction algorithm may prepare the disconnections in the desired route list using the Disconnect function. The switch transition reduction algorithm may examine the connections in the desired route against the connections in the list of existing routes, and if a match occurs, it may be a potential error condition. If the match occurs, the switch transition reduction algorithm may examine the disconnections in the desired route list to count how many disconnections of this route may occur. If the number of disconnections does not equal the connection count on the item in the list of existing routes, the switch transition reduction algorithm may produce an error  since the route already exists. Otherwise, the switch transition reduction algorithm may store the location of the match in the list of existing routes to mark the first route as unshared.","The switch transition reduction algorithm may compare the connections in the desired route list with itself to ensure that there are no duplicates. If duplicates exist, the switch transition reduction algorithm may produce an error since the first route already exists. Next, the connections in the desired route list and the disconnections in the desired route list may be compared to each other and any duplicates are removed . The switch transition reduction algorithm may finish the Disconnect  and Connect  functions. If in Step  the switch transition reduction algorithm has uncovered any connections that were in the list of existing routes but had balancing disconnections, they may be marked as unshared .",{"@attributes":{"id":"h-0040","num":"0000"},"figref":"FIG. 15B"},{"@attributes":{"id":"p-0224","num":"0227"},"figref":"FIG. 15B"},"1. Because a disconnect will occur before a connect, the switch transition reduction algorithm may produce an error if a connection to be disconnected is not in the list of existing routes.","2. Because the routes are being shared, the switch transition reduction algorithm may compare the connects in the desired route list with the list of existing routes, and merge them together appropriately. The switch transition reduction algorithm may not examine the disconnects in the desired route list.","3. If the previous two conditions are satisfied, the switch transition reduction algorithm may eliminate any common routes between the disconnections in the desired route list and the connections in the desired route list.","Procedure:","In one embodiment, the switch transition reduction algorithm may prepare the disconnections in the desired route list using the Disconnect function , , . The connections in the desired route list may be prepared using the shared Connection function with one exception. If a match is found in the list of existing routes with a route that is marked as unshared , the switch transition reduction algorithm may examine the disconnections in the desired route list to see if there is a match before producing an error. If there is a match with the disconnections in the desired route list, it may be valid since this connection will be removed before it is reconnected. In this situation, the switch executive core  may store the location of the match in the list of existing routes to mark the route as shared.","The switch transition reduction algorithm may compare the connections in the desired route list with itself to ensure that there are no duplicates . If there are any data duplicates they may be merged. Next, the connections in the desired route list and the disconnections in the desired route list may be compared to each other and any duplicates are removed . The switch transition reduction algorithm may finish the Disconnect  and Connect  functions. If in Step  the switch executive core  has uncovered any connections that were in the list of existing routes but had balancing disconnections, they may be marked as shared .",{"@attributes":{"id":"h-0042","num":"0000"},"figref":"FIG. 15C"},{"@attributes":{"id":"p-0230","num":"0233"},"figref":"FIG. 15C"},"1. If a connect in the desired route list already exists in the list of existing routes, it may be an error condition since sharing is not allowed.","2. When disconnecting, the switch transition reduction algorithm may examine both the list of existing routes as well as a list of passed routes before determining that a route does not exist.","3. If the previous two conditions are satisfied, the switch transition reduction algorithm may eliminate any common routes between the disconnects in the desired route list and the connects in the desired route list.","Procedure:","In one embodiment, the switch transition reduction algorithm may prepare the connects in the desired route list using the Connect function , , . The switch transition reduction algorithm may also prepare the disconnects in the desired route list using the standard disconnect procedure with one exception. If the route is not located in the list of existing routes, it may not become an error condition unless it is not also found in the connects in the desired route list. In other words, the switch transition reduction algorithm may search both the list of existing routes and the connects in the desired route list to find matches.","The switch transition reduction algorithm then may compare the connects in the desired route list and the disconnects in the desired route list and remove any duplicates . The switch transition reduction algorithm then may finish the Connect  and Disconnect  functions.",{"@attributes":{"id":"h-0044","num":"0000"},"figref":"FIG. 15D"},{"@attributes":{"id":"p-0236","num":"0239"},"figref":"FIG. 15D"},"1. If a connect in the desired route list already exists in the list of existing routes, it should be merged if the original connection was shareable (or it may be an error condition if the original connection was non-shareable).","2. When disconnecting, the switch transition reduction algorithm may examine both the list of existing routes as well as the passed route list before determining if a route doesn't exist.","3. If the previous two conditions are satisfied, the switch transition reduction algorithm may eliminate any common routes between the disconnects in the desired route list and the connects in the desired route list.","Procedure:","In one embodiment, the switch transition reduction algorithm may prepare the connects in the desired route list using the Connect function. The switch transition reduction algorithm may also prepare the disconnects in the desired route list using the standard Disconnect function with one exception. If the route is not located in the list of existing routes, it may not become an error condition unless it isn't also found in the connects in the desired route list. In other words, the switch transition reduction algorithm may search both the list of existing routes and the connects in the desired route list to find matches.","The switch transition reduction algorithm then may compare the connects in the desired route list and the disconnects in the desired route list and remove any duplicates . The switch transition reduction algorithm then may finish the Connect  and Disconnect  functions.",{"@attributes":{"id":"h-0046","num":"0000"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0242","num":"0245"},"figref":"FIG. 16","b":"105"},{"@attributes":{"id":"h-0047","num":"0000"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0243","num":"0246"},"figref":"FIG. 17","b":["105","105","105"]},{"@attributes":{"id":"h-0048","num":"0000"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0244","num":"0247"},"figref":"FIG. 18","b":["105","105","204","105"]},{"@attributes":{"id":"h-0049","num":"0000"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0245","num":"0248"},"figref":"FIG. 19","b":["105","105","210","212","214"]},{"@attributes":{"id":"h-0050","num":"0000"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0246","num":"0249"},"figref":"FIG. 20","b":["105","105","204","210","212","214"]},{"@attributes":{"id":"h-0051","num":"0000"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0247","num":"0250"},"figref":"FIG. 21","b":["105","204","210","212","214","204"]},{"@attributes":{"id":"h-0052","num":"0000"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0248","num":"0251"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0249","num":"0252"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0250","num":"0253"},"figref":"FIG. 22"},{"@attributes":{"id":"h-0053","num":"0000"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0251","num":"0254"},"figref":"FIG. 23","b":"204"},{"@attributes":{"id":"h-0054","num":"0000"},"figref":"FIG. 24A"},{"@attributes":{"id":"p-0252","num":"0255"},"figref":["FIG. 24A","FIG. 24A"],"b":["204","204"]},{"@attributes":{"id":"h-0055","num":"0000"},"figref":"FIG. 24B"},{"@attributes":{"id":"p-0253","num":"0256"},"figref":"FIG. 24B"},"The required signal characteristics may affect both automatically selected channels and user-selected channels. For example, if the user specifies a portion of a route and the switch executive core automatically completes the route for the user, the switch executive core may choose a route including only valid channels, according to the required signal characteristics. Also, the user may be able to manually select channels or may be able to override automatically selected channels. For example, the user may interact with the switch device icons to display a list of available channels and may choose a new channel from this list. Thus, the list may display only valid channels.",{"@attributes":{"id":"h-0056","num":"0000"},"figref":"FIG. 24C"},{"@attributes":{"id":"p-0255","num":"0258"},"figref":"FIG. 24C"},{"@attributes":{"id":"h-0057","num":"0000"},"figref":"FIG. 24D"},{"@attributes":{"id":"p-0256","num":"0259"},"figref":"FIG. 24D"},{"@attributes":{"id":"h-0058","num":"0000"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0257","num":"0260"},"figref":["FIG. 25","FIG. 1","FIG. 25","FIGS. 26A\u201326E"],"b":["82","82","104","1160","1161","82","82","104"]},"One embodiment of the algorithm for visual design-time assisted routing method is described above with reference to , and . A visual representation of the switch device is used in one embodiment as a rectangular box comprising four values, as described with reference to .",{"@attributes":{"id":"h-0059","num":"0000"},"figref":"FIG. 26A"},{"@attributes":{"id":"p-0259","num":"0262"},"figref":"FIG. 26A","b":"0","sub":"\u2014"},{"@attributes":{"id":"h-0060","num":"0000"},"figref":"FIG. 26B"},{"@attributes":{"id":"p-0260","num":"0263"},"figref":"FIG. 26B","b":["205","1160","1160"]},{"@attributes":{"id":"h-0061","num":"0000"},"figref":"FIG. 26C"},{"@attributes":{"id":"p-0261","num":"0264"},"figref":"FIG. 26C","b":["205","1161","1161"]},"The switch devices represented graphically by the visual route editor may show a left hand side (LHS) endpoint in each switch device, a right hand side (RHS) endpoint in each switch device, and an internal path in each switch device between the LHS endpoint and the RHS endpoint, such as described above with reference to . At this point the visual design-time assisted routing algorithm may be initiated in order to find a path between the LHS endpoint in the first switch device and the RHS endpoint in the second switch device. In this example, the visual design-time assisted routing algorithm does not find a direct connection between the two devices, as represented by the empty hardwire box between the visual representations of the switch devices.",{"@attributes":{"id":"h-0062","num":"0000"},"figref":"FIG. 26D"},{"@attributes":{"id":"p-0263","num":"0266"},"figref":"FIG. 26D"},"The user may insert a new switch device  into the path by visually selecting the device insertion button on the hardwire selector with the broken wires. The visual route editor may render the new switch device on the display. The new switch device automatically routes its internal channels for proper connection with the switching device  on the left of the screen. The visual design-time assisted routing algorithm may also present the user with other choices for internal channel routes, which the user may graphically select. The hardwire connecting the new switch device  with the switch device  on the left of the screen is drawn with a solid line to graphically indicate that the hardwire connection is valid. However, a connection between the new switch device  and the switch device on the right hand side is not complete, as graphically indicated by a broken line on the right hand side of the screen.",{"@attributes":{"id":"h-0063","num":"0000"},"figref":"FIG. 26E"},{"@attributes":{"id":"p-0265","num":"0268"},"figref":["FIG. 26E","FIG. 26D"],"b":["1160","1161"]},"The user may insert a new switch device  into the path by selecting the device insertion button on the hardwire selector with the broken wires. The visual route editor renders the new switching device on the display. The new switching device automatically routes its internal channels for proper connection with the switching device  on the left of the screen. The design time assisted routing algorithm may also present the user with other choices for internal channel routes, which the user may graphically select. The hardwire connecting the new switching device  with the switching device  on the right of the screen may be drawn with a solid line to indicate that the hardwire connection is valid. The visual route editor now may detect that it has sufficient resources to complete the routing path. The visual route editor may render the routing path complete by drawing solid lines as shown. The visual design-time assisted routing algorithm has completed the routing path, as shown in the visual route editor. At any point along the creation of the routing path the user may decide to choose different switch devices, endpoints on a given switch device, and internal channels on a given switch device by graphically selecting different options on a graphical representation of the given switch device.",{"@attributes":{"id":"h-0064","num":"0000"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0267","num":"0270"},"figref":"FIG. 27","b":"204"},"FIG. \u2014Flowchart Diagram Illustrating the Method of Using Configured Routes in a Graphical Program",{"@attributes":{"id":"p-0268","num":"0271"},"figref":"FIG. 28"},"In the present application, the term \u201cgraphical program\u201d or \u201cblock diagram\u201d is intended to include a program comprising graphical code, e.g., two or more interconnected nodes or icons, wherein the interconnected nodes or icons may visually indicate the functionality of the program. The nodes may be connected in one or more of a data flow, control flow, and\/or execution flow format. The nodes may also be connected in a \u201csignal flow\u201d format, which is a subset of data flow. Thus the terms \u201cgraphical program\u201d or \u201cblock diagram\u201d are each intended to include a program comprising a plurality of interconnected nodes or icons which visually indicate the functionality of the program.","A graphical program may also comprise a user interface or front panel. The user interface portion may be contained in the block diagram or may be contained in one or more separate panels or windows. The user interface of a graphical program may include various graphical user interface elements or front panel objects, such as user interface controls and\/or indicators, that represent or display the respective input and\/or output that will be used by the graphical program or VI, and may include other icons which represent devices being controlled. The user interface or front panel may be comprised in a single window of user interface elements, or may comprise a plurality of individual windows each having one or more user interface elements, wherein the individual windows may optionally be tiled together. As another example, the user interface or front panel may comprise user interface or front panel objects, e.g., the GUI, embedded in the block diagram. The user interface of a graphical program may display only output, only input, or both input and output. Further, in some embodiments the user interface or front panel of a graphical program may enable the user to interactively control or manipulate the input being provided to the graphical program.","Examples of graphical programming development environments that may be used to create graphical programs include LabVIEW, DasyLab, and DiaDem from National Instruments, VEE from Agilent, WiT from Coreco, Vision Program Manager from PPT Vision, SoftWIRE from Measurement Computing, Simulink from the MathWorks, Sanscript from Northwoods Software, Khoros from Khoral Research, SnapMaster from HEM Data, VisSim from Visual Solutions, ObjectBench by SES (Scientific and Engineering Software), and VisiDAQ from Advantech, among others. In the preferred embodiment, the system uses the LabVIEW graphical programming system available from National Instruments.","In step , a first node may be displayed in the graphical program, wherein the first node is operable to use route information to control or configure one or more of the switch devices in the switch system . For example, the graphical programming development environment may provide various nodes for inclusion in the block diagram of a graphical program. Thus, a user may display the first node in the graphical program's block diagram, e.g., by selecting the first node from a palette or menu or otherwise providing user input requesting inclusion of the first node in the graphical program. An exemplary palette is described below with reference to  and FIGS. A\u2013.","In step , the first node may be configured with route information, e.g., in response to user input. For example, in one embodiment, step  may comprise connecting an input to an input terminal of the first node, wherein the input comprises the route information. In another embodiment, step  may comprise configuring one or more properties of the node, e.g., using a dialog box or property panel. In various embodiments, the route information may comprise any of various types of information. For example, the route information may comprise information specifying one or more routes previously configured and stored using the visual route editor, such as the names of one or more routes or route groups. Also, the route information may comprise information specifying two endpoints of a route, as in the case of run-time auto-routing, or may comprise information explicitly specifying a complete route, as in the case of manual routing.","The first node may be operable to perform any of various types of operations to control or configure the one or more switch devices. For example, the first node may be operable to perform a connect operation to connect specified routes, i.e., to cause the switch devices to make connections according to the routes. As another example, the first node may be operable to perform a disconnect operation to disconnect specified routes. As another example, the first node may be operable to perform a connect\/disconnect operation to disconnect a first group of routes and connect a second group of routes, e.g., using the optimized connect\/disconnect algorithm described above.","In step , the first node may be connected to one or more other nodes in the graphical program, e.g., in a data flow and\/or control flow format.","In step , the graphical program may be executed.","In step , the first node may execute during execution of the graphical program to control or configure the one or more switch devices, such as described above with reference to step .","In another embodiment, instead of creating the graphical program in response to user input as described above, the graphical program may be programmatically generated using programmatic generation techniques as described in U.S. patent application Ser. No. 09\/745,023 titled \u201cSystem and Method for Programmatically Generating a Graphical Program in Response to Program Information,\u201d filed Dec. 20, 2000, which is hereby incorporated by reference as though fully and completely set forth herein.","It is noted that the flowchart of  is exemplary only. Further, various steps in the flowchart of  may occur concurrently or in different order than that shown, or may not be performed, as desired. Also, various additional steps may be performed as desired.",{"@attributes":{"id":"h-0066","num":"0000"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0280","num":"0283"},"figref":["FIG. 29","FIGS. 30A\u201330J"],"b":"105"},{"@attributes":{"id":"h-0067","num":"0000"},"figref":"FIG. 30A"},{"@attributes":{"id":"p-0281","num":"0284"},"figref":"FIG. 30A","b":["210","212","214"],"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":["NISE Session (in) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession.","error in describes error conditions that occur before this VI or function runs. The default is no error. If an error occurred before this VI or function runs, the VI or function passes the error in value to error out. This VI or function runs normally only if no error occurs before this VI or function runs. If an error occurs while this VI or function runs, it runs normally and sets its own error status in error out. Use the Simple Error Handler or General Error Handler VIs to display the description of the error code. Use error in and error out to check errors and to specify execution order by wiring error out from one node to error in of the next node.\n    \n    ","error out contains error information. If error in indicates that an error occurred before this VI or function ran, error out contains the same error information. Otherwise, it describes the error status that this VI or function produces. Right-click the error out indicator on the front panel and select Explain Error from the shortcut menu for more information about the error.\n    \n    "]}},"Returns the status of the VI.","CloseSession Details","After calling the niSE_CloseSession VI, you should not use the Switch Executive virtual device again until you call niSE_OpenSession.",{"@attributes":{"id":"h-0069","num":"0000"},"figref":"FIG. 30B"},{"@attributes":{"id":"p-0284","num":"0296"},"figref":"FIG. 30B","ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["NISE Session (in) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession.","Connection Specification is the string describing the connections to be made. The route specification strings are best summarized as a series of routes delimited by ampersands. The specified routes may be route names, route group names, or fully specified route paths delimited by square brackets.","error in describes error conditions that occur before this VI or function runs. The default is no error. If an error occurred before this VI or function runs, the VI or function passes the error in value to error out. This VI or function runs normally only if no error occurs before this VI or function runs. If an error occurs while this VI or function runs, it runs normally and sets its own error status in error out. Use the Simple Error Handler or General Error Handler VIs to display the description of the error code. Use error in and error out to check errors and to specify execution order by wiring error out from one node to error in of the next node.\n    \n    ","NISE Session (out) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession. This session handle is the copy of the session handle that was passed in and provides for easier wiring between Switch Executive VIs.","error out contains error information. If error in indicates that an error occurred before this VI or function ran, error out contains the same error information. Otherwise, it describes the error status that this VI or function produces. Right-click the error out indicator on the front panel and select Explain Error from the shortcut menu for more information about the error.\n    \n    "]}},"Returns the status of the VI.","Connect Details","In the event of an error, the call to niSE_Connect may attempt to undo any connections made so that the system will be left in the same state that it was in before the call was made. Some errors can be caught before manipulating hardware, although it is feasible that a hardware call could fail causing some connections to be momentarily closed and then reopened.",{"@attributes":{"id":"h-0071","num":"0000"},"figref":"FIG. 30C"},{"@attributes":{"id":"p-0287","num":"0310"},"figref":"FIG. 30C","ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":["NISE Session (in) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession.","Connection Specification is the string describing the connections to be made. The route specification strings are best summarized as a series of routes delimited by ampersands. The specified routes may be route names, route group names, or fully specified route paths delimited by square brackets.","Disconnection Specification is the string describing the disconnections to be made. The route specification strings are best summarized as a series of routes delimited by ampersands. The specified routes may be route names, route group names, or fully specified route paths delimited by square brackets. See route specification strings for more information.","Operation Order sets the order of the operation for the function. Defined values are Break Before Make and Break After Make.","Wait for Debounce Between Operations will wait (if true) for switches to debounce between its connect and disconnect operations. If false, it will immediately begin the second operation after completing the first. The order of connect and disconnect operation is set by the Operation Order input.","error in describes error conditions that occur before this VI or function runs. The default is no error. If an error occurred before this VI or function runs, the VI or function passes the error in value to error out. This VI or function runs normally only if no error occurs before this VI or function runs. If an error occurs while this VI or function runs, it runs normally and sets its own error status in error out. Use the Simple Error Handler or General Error Handler VIs to display the description of the error code. Use error in and error out to check errors and to specify execution order by wiring error out from one node to error in of the next node.\n    \n    ","NISE Session (out) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession. This session handle is the copy of the session handle that was passed in and provides for easier wiring between Switch Executive VIs.","error out contains error information. If error in indicates that an error occurred before this VI or function ran, error out contains the same error information. Otherwise, it describes the error status that this VI or function produces. Right-click the error out indicator on the front panel and select Explain Error from the shortcut menu for more information about the error.\n    \n    "]}},"Returns the status of the VI.","ConnectAndDisconnect Details","niSE_ConnectAndDisconnect may only touch the hardware to handle the connections and disconnections that are different between the connection specification and disconnection specification. If any routes are common between the two, they may be handled in software. This has the distinct advantage of increased throughput for shared connections since hardware does not has to be involved as well as an opportunity to increase relay lifetime by potentially decreasing the number of times that the relay has to be switched.","Break Before Make","The function may disconnect the routes specified in the disconnect specification before connecting the routes specified in the connect specification. This may be the typical mode of operation.","Break After Make","The function may connect the routes specified in the connection specification before connecting the routes specified in the disconnection specification. This mode of operation may be normally used when switching current and in order to ensure that a load is always connected to a source. The order of operation may be to connect first or disconnect first.","The order might be one of the following:\n\n",{"@attributes":{"id":"p-0293","num":"0332"},"figref":"FIG. 30D","ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":["NISE Session (in) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession.","Disconnection Specification is the string describing the disconnections to be made. The route specification strings are best summarized as a series of routes delimited by ampersands. The specified routes may be route names, route group names, or fully specified route paths delimited by square brackets.","error in describes error conditions that occur before this VI or function runs. The default is no error. If an error occurred before this VI or function runs, the VI or function passes the error in value to error out. This VI or function runs normally only if no error occurs before this VI or function runs. If an error occurs while this VI or function runs, it runs normally and sets its own error status in error out. Use the Simple Error Handier or General Error Handler VIs to display the description of the error code. Use error in and error out to check errors and to specify execution order by wiring error out from one node to error in of the next node.\n    \n    ","NISE Session (out) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession. This session handle is the copy of the session handle that was passed in and provides for easier wiring between Switch Executive VIs.","error out contains error information. If error in indicates that an error occurred before this VI or function ran, error out contains the same error information. Otherwise, it describes the error status that this VI or function produces. Right-click the error out indicator on the front panel and select Explain Error from the shortcut menu for more information about the error.\n    \n    "]}},"Returns the status of the VI.","Disconnect Details","If any of the specified routes were originally connected in a multiconnected mode, the call to niSE_Disconnect may reduce the reference count on the route by 1. If the reference count reaches 0, it may be disconnected. If a specified route does not exist, it may be an error condition. In the event of an error, the call to niSE_Disconnect may continue to try to disconnect everything specified by the route specification string but will report the error on completion.",{"@attributes":{"id":"h-0076","num":"0000"},"figref":"FIG. 30E"},{"@attributes":{"id":"p-0296","num":"0346"},"figref":"FIG. 30E","ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":["NISE Session (in) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession.","Disconnection Specification is the string describing the disconnections to be made. The route specification strings are best summarized as a series of routes delimited by ampersands. The specified routes may be route names, route group names, or fully specified route paths delimited by square brackets.","error in describes error conditions that occur before this VI or function runs. The default is no error. If an error occurred before this VI or function runs, the VI or function passes the error in value to error out. This VI or function runs normally only if no error occurs before this VI or function runs. If an error occurs while this VI or function runs, it runs normally and sets its own error status in error out. Use the Simple Error Handler or General Error Handler VIs to display the description of the error code. Use error in and error out to check errors and to specify execution order by wiring error out from one node to error in of the next node.\n    \n    ","NISE Session (out) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession. This session handle is the copy of the session handle that was passed in and provides for easier wiring between Switch Executive VIs.","error out contains error information. If error in indicates that an error occurred before this VI or function ran, error out contains the same error information. Otherwise, it describes the error status that this VI or function produces. Right-click the error out indicator on the front panel and select Explain Error from the shortcut menu for more information about the error.\n    \n    "]}},"Returns the status of the VI.","Disconnect Details","niSE_DisconnectAll may ignore all multiconnect modes. Calling niSE_DisconnectAll may reset all of the switch states for the system.",{"@attributes":{"id":"h-0078","num":"0000"},"figref":"FIG. 30F"},{"@attributes":{"id":"p-0299","num":"0360"},"figref":"FIG. 30F","ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":["NISE Session (in) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession.","Channel 1 is the channel name of one of the endpoints of the route to find. The channel name must either be a channel alias name or a name in the device!ivichannel syntax.","Channel 2 is the channel name of one of the endpoints of the route to find. The channel name must either be a channel alias name or a name in the device!ivichannel syntax.","error in describes error conditions that occur before this VI or function runs. The default is no error. If an error occurred before this VI or function runs, the VI or function passes the error in value to error out. This VI or function runs normally only if no error occurs before this VI or function runs. If an error occurs while this VI or function runs, it runs normally and sets its own error status in error out. Use the Simple Error Handler or General Error Handler VIs to display the description of the error code. Use error in and error out to check errors and to specify execution order by wiring error out from one node to error in of the next node.\n    \n    ","NISE Session (out) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession. This session handle is the copy of the session handle that was passed in and provides for easier wiring between Switch Executive VIs.","Route Specification contains the fully specified route path complete with delimiting square brackets\u2014it the route exists or is possible.","Path Capability is the return value which expresses the capability of finding a valid route between Channel 1 and Channel 2. Refer to the table below for value descriptions.","error out contains error information. If error in indicates that an error occurred before this VI or function ran, error out contains the same error information. Otherwise, it describes the error status that this VI or function produces. Right-click the error out indicator on the front panel and select Explain Error from the shortcut menu for more information about the error.\n    \n    "]}},"Returns the status of the VI.","FindRoute Details","The returned route specification may contain the route specification and the route capability may determine whether or not the route existed, whether or not the route is possible. The route specification string returned from niSE_FindRoute can be passed to other Switch Executive API functions (such as niSE_Connect, niSE_Disconnect, and niSE_ConnectAndDisconnect) that use route specification strings.","Path Capability","Path capability might be any one of the following:",{"@attributes":{"id":"p-0302","num":"0377"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Path Capability"},{"entry":"Path capability might be any one of the following:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Value","Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["1","Path","A path between channel 1 and channel 2 is"]},{"entry":[{},"Available","available. The route specification parameter will"]},{"entry":[{},{},"return a string describing the available path."]},{"entry":["2","Path Exists","A path between channel 1 and channel 2 already"]},{"entry":[{},{},"exists. The route specification parameter will return"]},{"entry":[{},{},"a string describing the existing path."]},{"entry":["3","Path","There is no potential path between channel 1 and"]},{"entry":[{},"Unsupported","channel 2 given the current configuration."]},{"entry":["4","Resource In","There is a potential path between channel 1 and"]},{"entry":[{},"Use","channel 2, although a resource needed to complete"]},{"entry":[{},{},"the path is already in use."]},{"entry":["5","Source","Channel 1 and channel 2 cannot be connected"]},{"entry":[{},"Conflict","because they are both source channels."]},{"entry":["6","Channel Not","One of the channels is not useable as an endpoint"]},{"entry":[{},"Available","channel. Make sure that it is not marked as a"]},{"entry":[{},{},"configuration channel."]},{"entry":["7","Channels","A direct connection already exists between channel"]},{"entry":[{},"Hardwired","1 and channel 2 via a hardwire."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0303","num":"0378"},"figref":"FIG. 30G","b":["210","212","214"],"ul":{"@attributes":{"id":"ul0022","list-style":"none"},"li":["NISE Session (in) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE OpenSession.","IVI Logical Name is the UVI logical name of the IVI device to retrieve an IVI session for error in describes error conditions that occur before this VI or function runs. The default is no error. If an error occurred before this VI or function runs, the VI or function passes the error in value to error out. This VI or function runs normally only if no error occurs before this VI or function runs. If an error occurs while this VI or function runs, it runs normally and sets its own error status in error out. Use the Simple Error Handler or General Error Handler VIs to display the description of the error code. Use error in and error out to check errors and to specify execution order by wiring error out from one node to error in of the next node.\n    \n    ","NISE Session (out) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE OpenSession. This session handle is the copy of the session handle that was passed in and provides for easier wiring between Switch Executive VIs.","instrument handle out is the IVI instrument handle of the specified IVI device.","error out contains error information. If error in indicates that an error occurred before this VI or function ran, error out contains the same error information. Otherwise, it describes the error status that this VI or function produces. Right-click the error out indicator on the front panel and select Explain Error from the shortcut menu for more information about the error.\n    \n    "]}},"Returns the status of the VI.","GetIviDeviceSession Details",{"@attributes":{"id":"p-0305","num":"0000"},"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":"Note Use caution when using the session handle. Calling functions on an instrument driver can invalidate Switch Executive's configuration and cache. The retrieve session handle should not be used to make or break connections or change the configuration channels as this may likely cause undefined, and potentially unwanted, behavior.\n\n\n"}},{"@attributes":{"id":"p-0306","num":"0392"},"figref":"FIG. 30H","b":"104"},"NISE Session (in) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession.",{"@attributes":{"id":"p-0307","num":"0000"},"ul":{"@attributes":{"id":"ul0026","list-style":"none"},"li":["error in describes error conditions that occur before this VI or function runs. The default is no error. If an error occurred before this VI or function runs, the VI or function passes the error in value to error out. This VI or function runs normally only if no error occurs before this VI or function runs. If an error occurs while this VI or function runs, it runs normally and sets its own error status in error out. Use the Simple Error Handler or General Error Handler VIs to display the description of the error code. Use error in and error out to check errors and to specify execution order by wiring error out from one node to error in of the next node.\n    \n    ","NISE Session (out) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE OpenSession. This session handle is the copy of the session handle that was passed in and provides for easier wiring between Switch Executive VIs.","Is Debounced? returns TRUE if the system is fully debounced or FALSE if it is still settling.","error out contains error information. If error in indicates that an error occurred before this VI or function ran, error out contains the same error information. Otherwise, it describes the error status that this VI or function produces. Right-click the error out indicator on the front panel and select Explain Error from the shortcut menu for more information about the error.\n    \n    "]}},"Returns the status of the VI.","IsDebounced Details","This VI is similar to the IviSwtch specific function.",{"@attributes":{"id":"h-0085","num":"0000"},"figref":"FIG. 30I"},{"@attributes":{"id":"p-0310","num":"0405"},"figref":"FIG. 30I","b":["105","105","105"],"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":["Virtual Device Name is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession. This session handle is the copy of the session handle that was passed in and provides for easier wiring between Switch Executive VIs.","error in describes error conditions that occur before this VI or function runs. The default is no error. If an error occurred before this VI or function runs, the VI or function passes the error in value to error out. This VI or function runs normally only if no error occurs before this VI or function runs. If an error occurs while this VI or function runs, it runs normally and sets its own error status in error out. Use the Simple Error Handler or General Error Handler VIs to display the description of the error code. Use error in and error out to check errors and to specify execution order by wiring error out from one node to error in of the next node.\n    \n    ","NISE Session (out) is the session referencing this switch virtual device  session. Session handles are created through a call to niSE_OpenSession. This session handle is the copy of the session handle that was passed in and provides for easier wiring between Switch Executive VIs.","error out contains error information. If error in indicates that an error occurred before this VI or function ran, error out contains the same error information. Otherwise, it describes the error status that this VI or function produces. Right-click the error out indicator on the front panel and select Explain Error from the shortcut menu for more information about the error.\n    \n    "]}},"Returns the status of the VI.","OpenSession Details","Switch Executive may use a reference counting scheme to manage open session handles to a switch virtual device . Each call to niSE_OpenSession may be matched with a subsequent call to niSE_CloseSession. Successive calls to niSE_OpenSession with the same virtual device name may return the same session handle. Only after all session handles are closed to a given virtual device, the Switch Executive may disconnect its communication with the IVI switches. The session handles may be used safely in multiple threads of an application.",{"@attributes":{"id":"h-0087","num":"0000"},"figref":"FIG. 30J"},{"@attributes":{"id":"p-0313","num":"0418"},"figref":"FIG. 30J","b":"105","ul":{"@attributes":{"id":"ul0032","list-style":"none"},"li":["NISE Session (in) is the session referencing this Switch Executive virtual device session. Session handles are created through a call to niSE_OpenSession.","Maximum Time (\u22121=infinite) is the amount of time to wait (in milliseconds) for the debounce to complete. A value of 0 will check for debouncing once and will return an error if the system is not debounced at that time. A value of \u22121 means to block for an infinite period of time until the system is debounced.","error in describes error conditions that occur before this VI or function runs. The default is no error. If an error occurred before this VI or function runs, the VI or function passes the error in value to error out. This VI or function runs normally only if no error occurs before this VI or function runs. If an error occurs while this VI or function runs, it runs normally and sets its own error status in error out. Use the Simple Error Handler or General Error Handler VIs to display the description of the error code. Use error in and error out to check errors and to specify execution order by wiring error out from one node to error in of the next node.\n    \n    ","NISE Session (out) is the session referencing this switch virtual device  session. Session handles are created through a call to niSE_OpenSession. This session handle is the copy of the session handle that was passed in and provides for easier wiring between Switch Executive VIs.","error out contains error information. If error in indicates that an error occurred before this VI or function ran, error out contains the same error information. Otherwise, it describes the error status that this VI or function produces. Right-click the error out indicator on the front panel and select Explain Error from the shortcut menu for more information about the error.\n    \n    "]}},"Returns the status of the VI.","WaitForDebounce Details","This VI may not return until either the switching system  is completely debounced and settled or the maximum time has elapsed and the system is not yet debounced. In the event that the maximum time elapses, the function may return an error indicating that a timeout has occurred. It is recommended that niSE_WaitForDebounce be called after a series of connection or disconnection operations before taking any measurements of the signals connected to the switching system . This is to ensure that all of the switching has settled.",{"@attributes":{"id":"h-0089","num":"0000"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0316","num":"0432"},"figref":"FIG. 31","b":["104","105"]},"FIGS. \u2013\u2014Examples of Graphical Program Which Use Configured Routes",{"@attributes":{"id":"p-0317","num":"0433"},"figref":["FIG. 32","FIG. 32"],"b":["104","105","105","105"]},"In one embodiment, the function of the Open and Close nodes may be combined with the function of the Find and Connect nodes respectively, resulting in a graphical program with only two nodes. In another embodiment, the function of the Open node may be combined with the function of the Find and Connect Nodes, resulting in a graphical program with only two nodes.",{"@attributes":{"id":"p-0319","num":"0435"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0320","num":"0436"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0321","num":"0437"},"figref":"FIG. 35","b":["105","110"]},"FIG. \u2014Flowchart of a Method for a Configuration of a Virtual Switch Device",{"@attributes":{"id":"p-0322","num":"0438"},"figref":"FIG. 36","b":["105","101"]},"In step , switch devices may be added by the user, as described with reference to . The method which the user chooses to enter the devices, automatic from a configuration file or manually addition via a configuration utility has the same effect.","In step , the switch executive core  may configure switch devices from corresponding switch driver software , ,  that may be queried for switch device specific information.","In step , the user may start entering individual switch configuration information, including route dependencies, hardwires, and desired signal characteristics.","In step , the switch executive core  may create an internal mapping of the topology depending on the driver software. Note that an explicit topology may not be created. The switch executive core  may create a dynamic mapping of the connections based on querying the switch instrument drivers , ,  and by the distribution of configured routes. This way the addition and\/or modification of the switch device and\/or configured routes may be optimized for performance.","Signal Requirements and Resource Dependencies","In one embodiment, the switch executive core  may enable a user to specify required signal characteristics for a route, and may aid the user in creating a route having elements, e.g., channels, with physical characteristics that match the required signal characteristics.","The switch executive core  or visual route editor may display a graphical user interface for receiving the one or more required signal characteristics for the route. The user may interact with the graphical user interface to specify the required signal characteristics. For example, in one embodiment, the graphical user interface may display a table for entering values for the required signal characteristics, and the user may enter one or more values in the table. For example,  illustrates a table for entering values such as signal bandwidth, impedance, setting time, maximum voltage, carry current, switching current, carry power, and switching power. In another embodiment the graphical user interface may enable the user to select various desired signal characteristics, e.g., by checking one or more checkboxes for required characteristics. In another embodiment, the one or more required signal characteristics may be provided from a configuration file or other sources. The signal characteristics may additionally include wire mode, carry current, switching voltage (AC, DC). besides others.","The required signal characteristics may then be used when selecting or determining channels to include the route. The required signal characteristics may affect both automatically selected or determined channels and user-selected channels. For example, if the user specifies a portion of a route and the switch executive core automatically completes the route for the user, the switch executive core may choose a route including only valid channels, according to the required signal characteristics. Also, the user may be able to manually select channels or may be able to override automatically selected channels. For example, the user may interact with the switch device icons to display a list of available channels and may choose a new channel from this list. Thus, the list may display only valid channels.","In one embodiment of the visual route editor, when creating a route the user may first specify a first endpoint of the route. For example, the user may first specify a left hand side endpoint of the route, such as by interacting with the listbox input element shown in  that includes channel names such as \u201c2501_Matrux!r1\u201d, \u201c2501_Matrux!r2\u201d, \u201c2501_Matrux!r3\u201d, etc. The input element may display a selectable list of channels to select for the first endpoint. The list of switch devices may be filtered so that only valid switch devices are displayed, e.g., those switch devices having channels with physical characteristics that match the required signal characteristics. As one example, if the user specified that a bandwidth of 20 kHz is a required signal characteristic, then only those switch devices having channels with a bandwidth of 20 kHz or more may be displayed in the list. In response to the user selecting a first channel, residing in the first switch device, from the list of channels, the first endpoint of the route may be configured to be located on the first switch device.","Continuing with the example of , the user may interact with the listbox input element on the right side of the screen to specify a right hand side endpoint of the route. Similarly as described above, this listbox input element may only display valid switch devices having channels with physical characteristics that match the required signal characteristics.","Configuring each endpoint may further comprise configuring the endpoint to be located on a particular channel of the respective switch device. In one embodiment, this channel may be automatically determined by the switch executive core. Thus, in determining the channel the switch executive core may determine channels of the respective switch device that have physical characteristics that match the required signal characteristics and may automatically configure the endpoint to be located on one of the determined channels.","For example, as described above, an icon representing the respective switch device may be displayed, wherein the icon displays the determined channel. For example, for the left hand side endpoint of the route, this channel may be the left hand side endpoint within the switch device. The user may change the automatically determined channel if desired, or in another embodiment the channel may not be automatically determined, and the user may need to initially set it. In these cases, the user may interact with the icon representing the switch device to change or set the channel. The icon may limit the user's choices to valid channels only. For example, the icon may include a selectable list of channels for specifying the channel, wherein the list of channels comprises channels having physical characteristics that match the required signal characteristics.","As described above, after the user has specified at least a portion of the route, the switch executive core may aid the user in automatically completing the route. The route may be automatically completed based on the required signal characteristics. For example, automatically completing the route may comprise automatically determining one or more channels on one or more switch devices that complete the route, wherein the automatically determined one or more channels on the one or more switch devices have physical characteristics matching the required signal characteristics.","To determine physical characteristics of the switch devices and\/or channels within the switch devices, the switch executive core  may query the switch instrument drivers , ,  for information concerning physical characteristics of the switch devices or of channels on the switch devices. In various embodiments, the drivers may be operable to provide information regarding any of various types of physical characteristics, e.g., those corresponding to the exemplary list of signal requirements given above (signal bandwidth, impedance, setting time, maximum voltage, carry current, switching current, carry power, switching power, etc.). Switch device manufacturers may create the switch instrument drivers , ,  with information present describing how channels function, e.g., physical and electrical properties of each channel on the switch device.","In another embodiment, the switch executive core  may allow associating a first route with a first route group, wherein a route group comprises a plurality of routes. Switch executive core  may ensure that the first route can coexist with all of the other routes in the first route group. If a route is a member of a first route group, its dependencies are the other members of the first route group. A route can be a member of multiple groups, in which case it is dependent on all of routes in all of the route groups that it is a member. By stating that a route needs to coexist with another route, there may be resource exclusions for the resources implied by said another route.","In other embodiments, a plurality of other desired resource dependencies may be used to define configured routes, comprising specifying that a first channel should never be connected to a second channel, and specifying particular resources, hardwires, channels, individual switch relays, and paths to definitely exclude or definitely include in the configured route. In other embodiments, routing may be based not only on resource and desired signal characteristics, but also by a consideration of physical path proximities to minimize cross-talk and other high frequency effects.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 11C"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 11D"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 11E"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 11F"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 11G"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 11H","b":["2","3"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 11I"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 15A"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 15B"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 15C"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 15D"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 24A"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 24B"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 24C"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 24D"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 26A"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 26B"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 26C"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 26D"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 26E"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 30A"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 30B"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 30C"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 30D"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 30E"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 30F"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 30G"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 30H"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 30I"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 30J"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 36"}]},"DETDESC":[{},{}]}
