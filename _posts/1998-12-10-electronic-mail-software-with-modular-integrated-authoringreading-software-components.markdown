---
title: Electronic mail software with modular integrated authoring/reading software components
abstract: Electronic mail software includes a main email component and a number installable components. The installable components include authoring/reading components for creating/reading different kinds of documents and mailbox components for listing different kinds of messages or for listing messages in different styles. The main email component provides an underlying graphical user interface for functions directly associated with the storage and transfer of electronic mail messages, and also handles all data bundling and unbundling required to transform a message created by an authoring component into a MIME compliant message. The authoring/reading components act like applications embedded within the email program and allow specific types of documents such as spreadsheets, graphics, databases, etc. to be created from within the email program and emailed directly. The authoring/reading components also allow received documents to be read without the difficulties traditionally associated with attaching binary files to an email letter. The authoring components of the invention pass data to the main email component which packages the data as a MIME compliant message. When the message is received, the main email component concatenates and decodes the MIME message and sends the data to the authoring/reading component associated with the MIME type.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07076730&OS=07076730&RS=07076730
owner: Intellinet, Inc.
number: 07076730
owner_city: New York
owner_country: US
publication_date: 19981210
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"p":["This invention was made with Government support under SBIR Grants Nos. 9561725 and 9710619 awarded by the National Science Foundation. The Government has certain rights in this invention.","1. Field of the Invention","The invention relates to an electronic mail program. More particularly, the invention relates to an electronic mail program having modular integral authoring\/reading applications whereby documents created with the modular integral authoring\/reading applications are seamlessly sent and received by the mail program.","2. State of the Art","In recent years electronic mail (\u201cemail\u201d) has become widely used in business, education, and in personal communications. One of the features of electronic mail which is most convenient, particularly in business and in education, is the ability to attach a binary computer file to an email message. This feature enables email correspondents to rapidly share word processing documents, database documents, spreadsheet documents, multimedia documents, or virtually any kind of binary file created by a computer. There are, however, some serious limitations and inconveniences associated with attaching a binary file to an email message.","The original Internet mail system as defined in 1982 with RFC (Request for Comments) 821 and 822 had a number of important limitations. In particular, the system was not designed to carry large quantities of arbitrary data in an email message. In fact, the 1982 SMTP (Simple Mail Transport Protocol) standard required that an email message consist of a single message containing only ASCII characters in lines of 1000 characters (blocks of 32 k) or less. Moreover, some implementations of SMTP or other mail transport systems (such as UUCP) restricted message lengths to some allowed maximum number of bytes. Messages passing through a mail gateway using one of these implementations were likely to be truncated.","The ability to send large quantities of binary data through the Internet electronic mail system was made possible with the MIME (Multipurpose Internet Mail Extensions) standard for Internet messages. The original MIME standard was published as an Internet Request For Comments document (RFC 1341) and approved in June of 1992. (See Internet RFCs 2045, 2046, and 2047 for the latest MIME standards documents.) The MIME standard describes how an email message should be formatted in order to be considered MIME compliant. MIME defines a set of message header fields and a set of message encoding standards that are designed to overcome the limitations of RFC 822 message formats and still be transportable through any of the numerous legacy mail transport systems in use on the Internet. MIME message header fields extend those defined in RFC 822 and describe the content and encoding type of the email message. Encoding schemes allowed in the MIME standard include \u201cquoted-printable\u201d, and \u201cbase64\u201d. In addition, three unencoded data types are allowed. These are labeled \u201c8 bit\u201d, \u201c7 bit\u201d, or \u201cbinary\u201d.","If the sender and the receiver of the email message with the attached binary file are using the same brand and version of email program and both programs are configured in substantially the same way, the receiver's email program should automatically apply the appropriate decoding to the attached binary file and produce a file which is identical to the file which was attached to the email by the sender. However, if the sender and receiver are using different email programs, the recipient may receive a file which must be decoded by the recipient using a separate decoding program. Worse yet, if there is a failure of the receiving email program to properly deal with the MIME protocol, it is possible that the receiver will receive multiple files (each being \u226632 k) which must first be concatenated and then decoded.","Even after the file is properly received and decoded, it is often difficult for the receiver of the file to open the file. The receiver of the file might expect that \u201cclicking\u201d on the file icon will open the file. However, clicking on the file icon will often not open the file. It may result in an error message like \u201capplication not found\u201d or, worse, it may result in the file being opened by an inappropriate application thereby displaying \u201cgibberish\u201d. The receiver of the file must have a program capable of reading (opening) the file. For example, if one attaches a spreadsheet file to an email message, the receiver of the file must have a spreadsheet program in order to open the file. Technically, it is not necessary that the receiver of the file have the same brand program as that which created the file. However, opening a file with a program which did not create it, though possible, can be very inconvenient. The receiver of the file must know what kind of file is attached to the email message, must know what program on their computer is capable of reading that type of file, must launch the program, must open the file from within the program, and wait while the program translates the file.","The limitations of Internet electronic mail can become even more frustrating if the sender and recipient are not using the same operating system (OS). Some mail attachment encoding schemes (and file compression schemes) are OS-dependent and it is possible that an email recipient could receive a file which is impossible to decode (or decompress).","These limitations in electronic mail have discouraged many people, particularly non-sophisticated computer users, from attaching files to electronic mail messages. In fact, for some novice users, the task of launching one application to create a document, saving the document, launching a separate email application to create an email message, and then locating the saved document for attachment to an email message is daunting enough to discourage them. In addition, novice users often complain that after \u201cdownloading\u201d a file attached to an email message they cannot find the file on their hard disk.","It is therefore an object of the invention to provide an electronic mail program which includes integrated authoring software whereby a document may be created and sent by email in a seamless manner.","It is also an object of the invention to provide an electronic mail program which includes integrated authoring\/reading software whereby a document may be received and opened in a seamless manner.","It is another object of the invention to provide an electronic mail program which includes modular integrated authoring software whereby different kinds of documents may be created and sent by email in a seamless manner.","It is still another object of the invention to provide an electronic mail program which includes modular integrated authoring\/reading software whereby different kinds of documents may be received and opened in a seamless manner.","It is another object of the invention to provide an electronic mail program which includes modular integrated authoring\/reading software whereby the authoring\/reading software and the email software present an interface which suggests that a single application is operating.","It is another object of the invention to provide an electronic mail program which includes modular integrated mailbox handling software whereby messages of different types are displayed in different ways in a mailbox listing.","It is still another object of the invention to provide an electronic mail program which includes modular integrated authoring\/reading software wherein the functionality of the authoring\/reading software is controlled by the \u201crole\u201d of the user when participating in an exchange of messages.","In accord with these objects which will be discussed in detail below, the electronic mail software of the present invention includes a main email component and a number of installable components which communicate bidirectionally with the email component. The installable components include authoring\/reading components as well as at least one mailbox browser\/editor component. The main email component provides an underlying graphical user interface (GUI) for functions directly associated with the storage and transfer of electronic mail messages. In particular, the main email component provides menu items which allow the user to SEND, READ, REPLY, FORWARD, DELETE, SAVE, PRINT, for example. The main email program also handles all data bundling and unbundling that may be required to transform a message created by an authoring component into a fully MIME compliant message. In addition, the main email component includes \u201chooks\u201d (an application programming interface or API) for the attachment of the installable components. The authoring\/reading components each provide functionality which is particular to the type of document the component is designed to create\/display. For example, a text document authoring component includes word processing functionality such as font selection, margin setting, etc. A painting\/drawing authoring component includes tools for line drawing, polygon creation, paint brush, paint can, eraser, etc. A spreadsheet authoring component displays a grid and includes formula creation tools as well as formatting tools. A database authoring tool includes tools for creating fields and records, for sorting and searching, for generating reports, etc. A photo editor authoring component includes various imaging editing tools including cropping tools, dodging and burning tools, filters, etc. A presentation authoring component includes tools for creating slides and slide shows. The authoring components act like applications embedded within the email program and allow specific types of documents such as spreadsheets, graphics, databases, etc. to be created from within the email program and emailed directly. In addition, the authoring components allow received spreadsheets, graphics, databases, etc. to be read by the email program without the difficulties traditionally associated with attaching binary files to an email letter. According to the invention, in lieu of authoring components which allow both authoring and reading, separate components may be provided for authoring and reading, or components for reading only may be provided in addition to components which permit authoring as well as reading. The authoring\/reading components interface with the main email component via designated \u201cMIME types\u201d. The MIME data standard allows developers to define MIME types using the label \u201c\/application-x\u201d in the data header. The authoring components of the invention pass data to the main email component which packages the data as a MIME compliant message with the label \u201c\/application-x\u201d in the message header, where x identifies the authoring\/reading component which created\/can display the message. When the message is received, the main email component concatenates and decodes the MIME message, reads the MIME type, sends the data to the component associated with the MIME type, and waits for a user event or a callback from the component. This bidirectional communication between the main email component and the authoring\/reading components provides a totally seamless operation wherein the user may send and receive complex documents without any knowledge of attaching files, downloading, decoding, etc.","The mailbox browser\/editor (mailbox handler) component is provided preferably as a separate component rather than as part of the main email component so that the software may be more easily customized and upgraded. The mailbox browser\/editor component is used to display, edit, and browse mailboxes. Since the invention provides for email messages which contain different kinds of data, the features of the mailbox browser may depend on the type of messages being sent and received. For example, if a graphical authoring\/reading component is installed, it may be desirable to provide a mailbox browser which shows a thumbnail of the selected graphic email message when a list of messages is displayed.","The software according to the invention provides a single seamless environment for authoring, reading, and emailing a variety of different types of documents. The user does not need to understand uploading, downloading, file types, file decoding, or any of the other esoteric requirements of attaching files to email. Further, the user does not need to know what kind of application must be launched in order to read a particular type of email message.","An exemplary embodiment of the invention is an email program for school children called KIDCODE\u00ae. The KIDCODE\u00ae program includes a main email component, a mailbox browser\/editor component and several message authoring\/reading components. The main email component and the mailbox browser\/editor component provide the same functionality as described above. Additional KIDCODE\u00ae components include a text authoring tool, rebus game message handler components (encoding and decoding components) which allow children to create and respond to graphical rebus messages, several different game puzzle components, and a workbook which allows a teacher to send workbook problems to a student and allows the student to send the solved problems back to the teacher. According to one inventive aspect of the invention which is exemplified in the workbook and rebus components, an authoring\/reading component may assign and track user \u201croles\u201d by associating a role tag to each message. For example, in the rebus component, the user initiating the rebus exchange will be assigned the role of rebus encoder. The message created by this user will contain a tag identifying it as an \u201cencoded message\u201d. When the message is opened by the recipient, the tools available in the rebus component will be different from those available if a message were being encoded. Similarly, the workbook component is preferably provided with a teacher role and a student role, each of which have different tools. Component roles may be selected by the users, assigned by the system administrator, or automatically by components when messages are created\/read.","According to a presently preferred embodiment, the KIDCODE\u00ae client software is written in the MACROMEDIA DIRECTOR\u2122 LINGO\u2122 scripting language which is cross-platform and thus ideally suited for use in schools which typically have a combination of MAC\/OS\u2122 and WINDOWS\u2122 computers. As implemented, the client software operates over a TCP\/IP LAN which is the most common type of network used in schools today and is compatible with the Internet. According to a further implementation of the invention, KIDCODE\u00ae software permits messages to be sent via the Internet in MIME compliant format.","Additional objects and advantages of the invention will become apparent to those skilled in the art upon reference to the detailed description taken in conjunction with the provided figures.","Appendix A is the LINGO\u2122 script implementation of the KIDCODE\u00ae main email component;","Appendix B is the LINGO\u2122 script implementation of the KIDCODE\u00ae mailbox handler component;","Appendix C is the LINGO\u2122 script implementation of the KIDCODE\u00ae text authoring\/displaying component;","Appendix D is the LINGO\u2122 script implementation of the KIDCODE\u00ae rebus game coding\/decoding component;","Appendix E is a description of the Application Programming Interface for the KIDCODE\u00ae main email component which enables installable components to operate with the main email component; and","Appendix F is a description of and pseudocode for the Internet implementation of the KIDCODE\u00ae software.","As mentioned above, a presently implemented embodiment of the invention is realized utilizing the MACROMEDIA DIRECTOR LINGO\u2122 scripting language. The DIRECTOR\u2122 application was originally intended to be used for authoring interactive multimedia presentations. Therefore, many of the terms used in the LINGO language refer to multimedia objects such as movies, cast members, frames, and sprites. However, it has been found that the LINGO\u2122 language can be used to author many different types of programs including programs which were not traditionally thought of as being multimedia presentation programs. The following description, therefore, of the presently implemented embodiment will be best understood by those familiar with the MACROMEDIA DIRECTOR LINGO\u2122 scripting language. However, those skilled in the art will understand from the functional description which follows that the invention could be implemented in other languages such as C or C++, JAVA\u2122, etc.","Referring now to , and with reference to Appendix A, the first screen  presented by the KIDCODE\u00ae program is preferably a login screen where the user enters his or her name and password. According to the presently preferred embodiment, the login name field  is implemented as a popup menu (or pull down list box) and the password field  is a standard text entry field. See, for example, lines 172\u2013190 of Appendix A. Clicking on the login name field will make a list of names appear and allow the user to highlight one of the names using the mouse. After the user has selected a name and typed in a password, the Okay button  must be clicked, or the Return or Enter key may be pressed. See Appendix A, lines 796\u2013846 and lines 879\u2013899. At this screen , the only option available under the FILE menu is QUIT. According to the presently preferred embodiment, the usernames and passwords are stored in associative (two property) lists so that a password may be associated with a username and a username may be associated with a password. When the okay button is clicked, the software checks the validity of the username and password. The checking of the username and password is illustrated in the state diagram in . Starting at  in , if the user selects a username and clicks the okay button, the password field is checked at . If no password was entered, a popup message is displayed at  indicating to the user that a password must be entered and the system returns to start at  waiting for the user to click the okay button. If the user types in a password and clicks the okay button, the username field is checked at . If no username was selected, a popup message is displayed at  indicating that a username must be selected and the system returns to start at  waiting for the user to click the okay button. If the user types in a password and selects a username, it is determined at  or  whether the username and password match, and if they do, the software enters to the main email component at . If the username and password do not match, a popup message is displayed at  indicating that the password entered is invalid for the username selected and the system returns to start at  waiting for the user to click the okay button. If the username and password are that of the system administrator, a special administration display will be shown in which usernames and passwords may be added\/deleted to\/from the system. See Appendix A lines 858\u2013875, 900\u20131016, and 1123\u20131140.","Turning now to , once the user has selected a username and entered the correct password, the program displays the screen  shown in  (Appendix A lines 851\u2013855). This is the screen of the main email component with no other component selected. The screen  includes a scrollable collection of icons , , , ,  and includes buttons , ,  for mailbox access and button  to quit the program. The icons , , , , and  represent the installed authoring\/reading components. As shown in , the icons represent a text component , a rebus component , a \u201ctext in grid\u201d component , a puzzle component , and a \u201cconnect the dots\u201d component . As illustrated in , starting at , if the user clicks on the text icon, the program will, at , open the text authoring component with an empty message (Appendix A lines 1422\u20131438 and 1025\u20131054). Similarly, if the user clicks on the rebus icon, the program will, at , open the rebus authoring component with an empty message (Appendix A lines 1442\u20131458 and 1025\u20131054). The main email component will also, when an authoring component is opened, make the print, trash, and send buttons visible as these functions are served by the main email component as illustrated in (Appendix A lines 489\u2013526 and 1456). Since the presently implemented example does not yet have all components complete, the launching of other components is shown generically at  in . When a component is launched, the main email program suspends execution at  awaiting any \u201ccall back\u201d from the launched component. The API described in Appendix E includes a set of \u201ccall back\u201d functions that can be used by an authoring or mailbox component to communicate with the main email component. See Appendix E pages 4\u20137 and Appendix A lines 557\u2013744. Further, the main email component serves the email functions of inbox, outbox, and filing cabinet for messages that have not been sent. These functions are illustrated in  as buttons , ,  and in as routines , , .","For example, as shown in , when the user enters the inbox, a window  and a button bar  are displayed. The mailbox component with the appropriate set of messages is launched as shown in Appendix A lines 1533\u20131558 and 216\u2013247). The window  displays a list of new email and the button bar  displays buttons for functions common to all components, i.e. buttons for reply , send , print , and trash . It will be understood that depending on whether the user is in an authoring or reading mode, either the reply button  or the send button  will be \u201cgrayed out\u201d indicating that that option is not available. As shown in , for example, the send button  is not available when looking at the mail inbox. It will also be appreciated that the buttons and icons from the previous screen () are no longer visible. As stated in , the user returns to the screen of  when the window  is closed. Appendix B lines 440\u2013448 and Appendix A lines 735\u2013744.","The presently implemented text authoring\/reading component is illustrated in the authoring mode in  and is described in detail in Appendix C. The window  is similar to any email message authoring tool and includes fields for \u201cto:\u201d , \u201cfrom:\u201d , \u201cdate\u201d , \u201csubject\u201d , and \u201cmessage\u201d . The \u201cfrom:\u201d field  and \u201cdate\u201d field  are hidden in  behind the scrollable list box . After the addressee is chosen from the list box , the box disappears and reveals the \u201cfrom\u201d and \u201cdate\u201d fields. According to the presently preferred embodiment, the list box  lists the names of all of the users registered in the local email system. This is handled by a call to the API as indicated at Appendix A lines 726\u2013731 and implemented at Appendix C lines 55\u201368. Thus, this embodiment prevents users from sending a document to a recipient who is not registered with the system administrator. It also allows users of the system to address messages without typing the recipient's name. According to another embodiment of the invention, shown and described below with reference to , users are permitted to send email to any internet address and a list box is optionally used to display an address book. As seen in , the reply button  in the button bar  is grayed out because that function is not available when authoring a text message. This is accomplished in Appendix A at lines 1422\u20131438.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIGS. 5\u20138","b":["104","106","108","110","112","114","116","118","120"]},"According to the presently implemented embodiment which is detailed in Appendix D, the author of a rebus begins by selecting a template sentence from a selection of sentences which are capable of being expressed as a rebus using the symbol sets provided. The template selection may be made via the T button  or the pull down menu . When a template sentence is selected, a suggested set of symbols is displayed in the field . Different symbols may be viewed by selecting a symbol set from the Symbol Choices menu . As illustrated in , symbols are grouped according to the kinds of words they symbolize such as \u201caction symbols\u201d, \u201cobject symbols\u201d, \u201cquantity symbols\u201d, etc. As with other components of the KIDCODE\u00ae program, and as shown in , the \u201cto:\u201d field  presents a drop down or pop up list box through which the email is addressed by selecting a registered user.","The author of the rebus codes the template sentence by dragging symbols from the scrollable field  to the message area . This is best illustrated by . Symbols, when placed on a coded word in the template sentence, will snap into place when they are dragged into the area . According to the invention, not every word in the template sentence is designed to be coded with a symbol. According to the presently preferred embodiment, words which are to be coded appear in red text. For example, as shown in , two symbols have been dragged into the message area and have snapped over the now hidden words \u201cthrew\u201d and \u201cwindow\u201d. The words \u201cball and \u201cthrough\u201d are also red text and can be coded with a proper symbol. The author can hide the symbols and display the words in the sentence which are covered by symbols by clicking on the \u201cS\u201d button . (Appendix D lines 2433\u20132451 and 1348\u20131349.) However, when the recipient receives the rebus, clicking on the button \u201cS\u201d will not reveal the words beneath the symbols, but will only make the symbols disappear. This is an example of how user \u201croles\u201d alter the tools available in a component. See Appendix D lines 1351\u20131365. When the author finishes coding the rebus, he or she clicks on the send button . The main email component then automatically encodes the rebus as a MIME attachment to Internet mail and sends the mail to the recipient's mailbox. See Appendix F.","Turning now to , when the recipient of the rebus opens the email message containing a rebus, the KIDCODE\u00ae main email component automatically decodes the MIME attachment, determines that it is a rebus, and opens it in the rebus reading component. See Appendix F. The message appears with empty text boxes (e.g. , , ) beneath the graphic symbols. The recipient of the message must solve the rebus by typing in the text boxes the words which he\/she believes are represented by the graphic symbols. As mentioned above, the \u201c\u2212\u201d button  is for hiding\/displaying the guesses typed in the boxes. When the recipient has typed in words for all the graphic symbols, he\/she clicks on the reply button  to send the solution back to the author.  shows the screen after the button  has been clicked. Thus it is grayed out to prevent the same message from being sent twice. The palette  is available to the decoder for browsing only. The features which allow symbols to be placed on the message are disabled for the decoder.","One of the authoring\/reading components of the invention is a workbook message handler, an example of which is illustrated in . The screen shot shown in  illustrates the \u201cstudent role\u201d of a workbook message handler. The window  of the student role workbook message handler preferably includes \u201cto:\u201d and \u201cfrom:\u201d fields ,  which are filled in by the teacher before the message is sent to the student, as well as six fields , , , , ,  which must be filled in by the student before the message is returned to the teacher. As shown in , the window  also includes a title , a date  and various instructions . Those skilled in the art will appreciate that the date  may be automatically entered when the message is sent to the student. The fields , , , , , , the title , and the instructions  may be manually entered by the teacher or may be selected as part of a template. In other words, the workbook message handler component may be a complex tool which allows teachers to author an infinite number of \u201cproblem messages\u201d to students or it may be a modular set of pre-written problems or templates for problems. The workbook message handler component preferably includes many pre-written problems. Additional pre-written problems will be available through additional modular components. One important feature of the workbook message handler components is that they identify user status and automatically present the proper \u201crole\u201d of either teacher or student.","The KIDCODE\u00ae program described above is designed to be easy to use by very young children.  illustrate another embodiment of the invention which is designed for a more sophisticated user, an older child, or an adult. The interface is more complicated, but offers the user more features. Referring now to , the interface of the second embodiment of the invention includes a menubar  which lists some standard menus like FILE, EDIT, SETUP, WINDOW, and HELP. The menubar  may also include a clock display  which is typically supplied by the operating system and a blinking icon  which is typically supplied by TCP\/IP connection software such as PPP dialup software, to indicate that the computer is connected to the Internet. The menus MAIL and FOLDER in the menubar  are particular to the emailing program and the scroll icon  is provided by scripting software, typically part of the operating system. Under the MAIL menu, one will find commands such as NEW for creating new mail, REPLY for replying to a mail message being read, FORWARD, etc. Under the FOLDER menu, one will find the names of user created filing cabinets (folders) where incoming mail can be saved. Under the SETUP menu, one will find commands for setting the necessary information to make a connection with the Internet, for storing the user's name and password, for scheduling automatic sending and receiving of mail, for performing automated tasks in response to mail (e.g. for automatically filing certain mail in certain folders, autoresponding to certain mail, etc.), etc. Under the WINDOW menu, the user will have the option of viewing INBOX, OUTBOX, FILING CABINET(s), CONNECTION STATUS, etc. The HELP menu preferably provides a context sensitive alphabetical list of help items which are hot linked to html files.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 10","FIG. 10"],"b":["208","210","212","214","216","218","220","222","214","224","208","226","227","214","210","228","230","230","204","232"],"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00001","he":"3.13mm","wi":"2.79mm","file":"US07076730-20060711-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"The outgoing message window  shown in  allows the user to send standard Internet mail by typing a message in the window . However, according to the invention, the window  also includes buttons , , , , , and , each of which is linked to an installed authoring\/reading component. As described above, the number and nature of the authoring\/reading components is modularly changeable. In the example shown in , six authoring\/reading components are shown to be installed. In practice, more, fewer, and\/or different components may be installed. The components shown and described herein are: a word processor authoring\/reading component linked to the button , a painting\/drawing authoring\/reading component linked to the button , a spreadsheet authoring\/reading component linked to the button , a database authoring\/reading component linked to the button , an image editor authoring\/reading component linked to the button , and a presentation authoring\/reading component linked to the button .","Turning now to , when the user clicks on the button , the word processor component is invoked and it causes a new menubar  and a ruler  to appear inside the message field  of the window . The word processor component allows sophisticated formatting of messages which would be impossible in a normal Internet email program. For example, margins can be set using the ruler ; fonts can be changed using the FONT menu from the menubar ; tables can be created and inserted using the TABLE menu from the menubar . In general, the menubar  provides much or all of the functionality of a full featured word processor program. Those skilled in the art will appreciate that the word processor interface shown in  is similar to the interface of Microsoft\u00ae Word\u00ae 98. It will be noted that the menubar  provides a separate HELP menu in addition to the HELP menu provided on the menubar . It will be appreciated that the HELP menu could be omitted from the menubar  and the help files for the word processor component could be accessed from the main HELP menu on the menubar . It will also be noted that when the word processor component is invoked, the button  is grayed.","After a user creates a message with the word processor component, the addressing and mailing procedure is the same as sending an ordinary email. There is no need to save a file, encode it, or attach it to an email message. The main email component of the invention seamlessly performs all of the saving, encoding, and attaching without any of this being exposed to the user. More particularly, the authoring component and the main email component cooperate to save the authored document as a file on the user's disk. See Appendix E lines 229\u2013238 and Appendix A lines 1293\u20131333 and 329\u2013450. The main email component encodes the file in the MIME format with as many parts as necessary, and sends the MIME file(s) as Internet email message(s). See Appendix F. When the message is received by a person using a copy of the email program of the invention, the receiver's main email component seamlessly concatenates the MIME parts, decodes the MIME file (Appendix F), determines that it is a message created with the word processing component (Appendix A lines 690\u2013694), invokes the word processing component (Appendix A lines 1019\u20131054), and opens the message with the word processing component (Appendix A lines 603\u2013614). The receiver of the message does not have to download any file, find any attachment, execute any decoders, or launch any word processor to see the fully formatted document created by the sender.","Turning now to , when the user clicks on the button , the painting\/drawing component is invoked and it causes a new menubar  and a tool palette  to appear inside the message field  of the window . The painting\/drawing component allows the author to create a painting (bitmap) graphic or a drawing (vectormap) graphic and send it to another user for viewing\/editing. Those skilled in the art will appreciate that the menubar  and palette  shown in  contain the menus and tool icons typically found in a full featured drawing\/painting program. Those skilled in the art will appreciate that the painting\/drawing component interface shown in  is similar to the interface of Aldus\u00ae SuperPaint\u00ae 3.5. It will be noted that the menubar  provides a separate HELP menu in addition to the HELP menu provided on the menubar . It will be appreciated that the HELP menu could be omitted from the menubar  and the help files for the painting\/drawing component could be accessed from the main HELP menu on the menubar . It will also be noted that when the painting\/drawing component is invoked, the button  is grayed.","After a user creates a graphic image with the painting\/drawing component, the addressing and mailing procedure is the same as sending an ordinary email. There is no need to save a file, encode it, or attach it to an email message. The main email component of the invention seamlessly performs all of the saving, encoding, and attaching without any of this being exposed to the user. See Appendices A, E and F. When the message is received by a person using a copy of the email program of the invention, the receiver's main email component seamlessly concatenates MIME parts, decodes the MIME file, determines that it is a message created with the painting\/drawing component, invokes the painting\/drawing component, and opens the message with the painting\/drawing component. The receiver of the message does not have to download any file, find any attachment, execute any decoders, or launch any painting\/drawing program to view\/edit the graphic image created by the sender. See Appendices A, E and F.","Turning now to , when the user clicks on the button , the spreadsheet component is invoked and it causes a new menubar , a grid , and a tool palette  to appear inside the message field  of the window . The spreadsheet component allows the author to create a spreadsheet and send it to another user for viewing\/editing. Those skilled in the art will appreciate that the menubar  and palette  shown in  contain the menus and tool icons typically found in a full featured spreadsheet program. Those skilled in the art will appreciate that the interface of the spreadsheet component shown in  is similar to the interface of Microsoft\u00ae Excel\u00ae 98. It will be noted that the menubar  provides a separate HELP menu in addition to the HELP menu provided on the menubar . It will be appreciated that the HELP menu could be omitted from the menubar  and the help files for the spreadsheet component could be accessed from the main HELP menu on the menubar . It will also be noted that when the spreadsheet component is invoked, the button  is grayed.","After a user creates a spreadsheet with the spreadsheet component, the addressing and mailing procedure is the same as sending an ordinary email. There is no need to save a file, encode it, or attach it to an email message. The main email component of the invention seamlessly performs all of the saving, encoding, and attaching without any of this being exposed to the user. See Appendices A, E and F. When the message is received by a person using a copy of the email program of the invention, the receiver's main email component seamlessly concatenates MIME parts, decodes the MIME file, determines that it is a message created with the spreadsheet component, invokes the spreadsheet component, and opens the message with the spreadsheet component. The receiver of the message does not have to download any file, find any attachment, execute any decoders, or launch any spreadsheet program to view\/edit the spreadsheet created by the sender. See Appendices A, E and F.","Turning now to , when the user clicks on the button , the database component is invoked and it causes a new menubar , a record selection tool , and a free form space  to appear inside the message field  of the window . The database component allows the author to create a database and one or more reports and forms associated with the database and send it to another user for viewing\/editing. Those skilled in the art will appreciate that the button bar  and the data fields  are defined by the author of the database using authoring tools found in the menus of the menubar . In fact, those skilled in the art will appreciate that the database interface shown in  is similar to the interface of Filemaker\u00aePro 3.0. It will be noted that the menubar  provides a separate HELP menu in addition to the HELP menu provided on the menubar . It will be appreciated that the HELP menu could be omitted from the menubar  and the help files for the database component could be accessed from the main HELP menu on the menubar . It will also be noted that when the database component is invoked, the button  is grayed.","After a user creates a database with the database component, the addressing and mailing procedure is the same as sending an ordinary email. There is no need to save a file, encode it, or attach it to an email message. The main email component of the invention seamlessly performs all of the saving, encoding, and attaching without any of this being exposed to the user. See Appendices A, E, and F. When the message is received by a person using a copy of the email program of the invention, the receiver's main email component seamlessly concatenates MIME parts, decodes the MIME file, determines that it is a message created with the database component, invokes the database component, and opens the message with the database component. The receiver of the message does not have to download any file, find any attachment, execute any decoders, or launch any database program to view\/edit the database created by the sender. See Appendices A, E, and F.","Turning now to , when the user clicks on the button , the image editing component is invoked and it causes a new menubar  and a floating tool palette  to appear inside the message field  of the window . The image editing component allows the author to edit an image and send it to another user for viewing and\/or further editing. Those skilled in the art will appreciate that the menubar  and palette  shown in  contain the menus and tool icons typically found in a full featured image editing program. Those skilled in the art will appreciate that the interface of the image editing component shown in  is similar to the interface of Adobe\u00ae Photoshop\u00ae 3.5. It will be noted that the menubar  provides a separate HELP menu in addition to the HELP menu provided on the menubar . It will be appreciated that the HELP menu could be omitted from the menubar  and the help files for the database component could be accessed from the main HELP menu on the menubar . It will also be noted that when the database component is invoked, the button  is grayed. Those skilled in the art will appreciate that image editing software is typically not used to create an image but to edit an image created by some other hardware\/software such as a digital camera or a scanner. As such, there is typically a menu item for opening or capturing an image. As shown in , open\/capture commands may be found under the FILE menu in the menubar . Alternatively, image acquisition commands may be found under a menu item in the menubar .","After a user edits an image with the image editor component, the addressing and mailing procedure is the same as sending an ordinary email. There is no need to save a file, encode it, or attach it to an email message. The main email component of the invention seamlessly performs all of the saving, encoding, and attaching without any of this being exposed to the user. See Appendices A, E, and F. When the message is received by a person using a copy of the email program of the invention, the receiver's main email component seamlessly concatenates MIME parts, decodes the MIME file, determines that it is a message created with the image editor component, invokes the image editor component, and opens the message with the image editor component. The receiver of the message does not have to download any file, find any attachment, execute any decoders, or launch any image editor program to view\/edit the image edited by the sender. See Appendices A, E, and F.","Turning now to , when the user clicks on the button , the presentation (slide show) component is invoked and it causes a new menubar , a floating wizard palette , and a blank template  to appear inside the message field  of the window . The presentation component allows the author to create a slide show presentation and send it to another user for viewing and\/or editing. Those skilled in the art will appreciate that the menubar , palette , and template  shown in  are typical of those found in a full featured presentation program. In fact, those skilled in the art will appreciate that the interface of the presentation component shown in  is similar to the interface of Microsoft\u00ae PowerPoint\u00ae 98. It will be noted that the menubar  provides a separate HELP menu in addition to the HELP menu provided on the menubar . It will be appreciated that the HELP menu could be omitted from the menubar  and the help files for the database component could be accessed from the main HELP menu on the menubar . It will also be noted that when the database component is invoked, the button  is grayed.","After a user creates a presentation with the presentation component, the addressing and mailing procedure is the same as sending an ordinary email. There is no need to save a file, encode it, or attach it to an email message. The main email component of the invention seamlessly performs all of the saving, encoding, and attaching without any of this being exposed to the user. See Appendices A, E, and F. When the message is received by a person using a copy of the email program of the invention, the receiver's main email component seamlessly concatenates MIME parts, decodes the MIME file, determines that it is a message created with the presentation component, invokes the presentation component, and opens the message with the presentation component. The receiver of the message does not have to download any file, find any attachment, execute any decoders, or launch any presentation program to view\/edit the presentation created by the sender. See Appendices A, E, and F.","As described above, messages received by the email software according to the invention are seamlessly decoded and displayed.  illustrates an incoming message window  which displays a message containing a combination of text and graphics in the message field . The incoming message window  also includes a subject field  and a \u201cfrom:\u201d address field  which includes information about the time the message was sent and received. Arrow buttons  allow the user to scroll through messages in the \u201cin box\u201d. Button  drops a menu list of messages in the in box from which a message may be selected. The \u201c+\u201d button  adds the sender's address to the recipient's address book. The rotating arrow  hides the address field  and expands the message field . Buttons  and  are not implemented, but may be used for public key decryption, etc.","As mentioned above, the modular components of the invention may be authoring\/reading components or read only components.  illustrates an incoming message window  which displays a message containing a combination of text and graphics in message field  without any editing\/authoring tools. The message may have been created with the word processing component or the painting and drawing component. The component used to create the message need not be known by the recipient of the message when it is opened with a read only component as shown. It will be appreciated that the message could also be automatically opened with an authoring\/reading component, in which case, the message field  in  would also include a menubar, and perhaps a tool palette. According to the invention, the email client software may be provided with a full complement of read only components and the authoring components may be installed according to the user's choices. Additionally, the email client software may be programmed to automatically download a reading component from an ftp site when it encounters a message which requires a component which is not yet installed.","There have been described and illustrated herein several embodiments of electronic mail software with modular integrated authoring\/reading software components. While particular embodiments of the invention have been described, it is not intended that the invention be limited thereto, as it is intended that the invention be as broad in scope as the art will allow and that the specification be read likewise. Thus, while particular graphical interfaces have been disclosed, it will be appreciated that other interfaces could be utilized. Also, while particular authoring\/reading components have been shown, it will be recognized that other types of authoring\/reading components could be provided in the spirit of the invention. Moreover, while particular configurations have been disclosed in reference to the code in the appendices, it will be appreciated that other configurations could be used as well. Further, while particular software code and pseudocode have been disclosed to perform various functions, it will be appreciated that other code and\/or hardware could be utilized to accomplish those functions and should be considered the equivalents thereof. It will therefore be appreciated by those skilled in the art that yet other modifications could be made to the provided invention without deviating from its spirit and scope as so claimed. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","BRIEF DESCRIPTION OF THE APPENDICES","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","i":"a "},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","i":"a "},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 7","FIG. 5"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
