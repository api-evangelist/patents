---
title: Predictive model training on large datasets
abstract: Methods, systems, and apparatus, including computer programs stored on a computer storage medium, for training predictive models using large datasets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08209271&OS=08209271&RS=08209271
owner: Google Inc.
number: 08209271
owner_city: Mountain View
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Under 35 U.S.C. \u00a7119, this application claims benefit of pending U.S. Provisional Application Ser. No. 61\/523,665, filed Aug. 15, 2011, the entire contents of which are hereby incorporated by reference.","This specification relates to training of predictive models.","Predictive modeling generally refers to techniques for extracting information from data to build a model that can predict an output from a given input. Predicting an output can include predicting future trends or behavior patterns, or performing sentiment analysis, to name a few examples. Various types of predictive models can be used to analyze data and generate predictive outputs. Examples of predictive models include Naive Bayes classifiers, k-nearest neighbor classifiers, support vector machines, and logistic regression techniques, for example. Typically, a predictive model is trained with training data that includes input data and output data that mirror the form of input data that will be entered into the predictive model and the desired predictive output, respectively. The amount of training data that may be required to train a predictive model can be large, e.g., in the order of gigabytes or terabytes. The number of different types of predictive models available is extensive, and different models behave differently depending on the type of input data.","Predictive model training datasets can be very large. With the advent of cloud computing and virtually unlimited storage, training sets have grown even larger. In various implementations, a training dataset that is too large to fit into a single computer's memory is divided into N chunks. The chunks can each contain the same number of examples or, alternatively, some or all of the chunks can contain different numbers of examples. Each chunk is distributed to one of M different computing devices. Each computing device trains its own predictive model on the chunk(s) of data it receives in parallel with the other computing devices. The resulting trained predictive models are then combined into a single predictive model. The computing devices cut short the training of a predictive model on a particular chunk of the training dataset when the accuracy of the particular predictive model has plateaued. When training is cut short, training on another chunk can immediately commence. This allows for a reduction in the overall number of computing devices M that are required to process a given dataset.","Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Predictive models can be trained on datasets that are too large to fit in a computer's memory. A number of computing devices can train individual predictive models in parallel with other computing devices. Parameters describing the individual predictive models can be combined into a final predictive model. Fewer computing devices can be used to train a predictive model since each computing device does not necessarily need to use all of the examples in each dataset chunk it receives for training A given computing device monitors the learning curve of its individual predictive model in order to reduce the number of training examples needed to train the model. This allows the computing device to potentially process more training data in a shorter amount of time.","The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.","Like reference numbers and designations in the various drawings indicate like elements.","In various implementations, a predictive model (or \u201cmodel\u201d) is either a categorical model if its predictions are categories, or is a regression model if its predictions are numeric. A predictive model is trained using training data. Training data encompasses examples that each comprise one or more data fields plus an outcome (a category or a numeric value) for that example. By way of illustration, the training data in TABLE 1 consists of examples that are email message subject lines and a category that indicates whether each example represents SPAM or not.",{"@attributes":{"id":"p-0013","num":"0012"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"EMAIL SUBJECT LINE","OUTCOME"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cYou have won $$$\u201d","\u201cspam\u201d"]},{"entry":[{},"\u201cLose weight fast!\u201d","\u201cspam\u201d"]},{"entry":[{},"\u201cLowest interest rates ever!\u201d","\u201cspam\u201d"]},{"entry":[{},"\u201cHow are you?\u201d","\u201cnot spam\u201d"]},{"entry":[{},"\u201cTrip to New York\u201d","\u201cnot spam\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"After a model has been trained against training data, queries can be submitted to the model. In some implementations, queries are similar in form to training examples: that is, a query has the same or fewer data fields but does not include the outcome. The trained model uses patterns that it learned from the training data to either find the closest category for the submitted query (if it is a categorical model) or estimate a value for the query (if it is a regression model), and returns the category or value.","A model can be expressed as a model representation to allow models to be exchanged between systems. In some implementations, the model representation is a Predictive Model Markup Language (PMML) document. PMML is an eXtensible Markup Language (XML)-based language. Other model representations are possible such as, for example, formatted or unformatted text. The PMML specification is an XML schema. Instances of models are XML documents that conform to the schema. A PMML document can represent more than one model. Generally speaking, a PMML document can contain some or all of the information described in TABLE 2. The PMML document can also contain information not described in TABLE 2.",{"@attributes":{"id":"p-0016","num":"0015"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["SECTION","DESCRIPTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Header","The header contains general information about"]},{"entry":[{},"the PMML document, such as copyright information"]},{"entry":[{},"for the model, its description, and information about"]},{"entry":[{},"the application used to generate the model."]},{"entry":["Data Dictionary","The data dictionary contains definitions for all the"]},{"entry":[{},"possible fields used by the model."]},{"entry":["Data","The data transformations specify mappings of user "]},{"entry":["Transformations","data into different forms to be used by the model."]},{"entry":["Model","Contains the definition of the particular model."]},{"entry":["Mining Schema","The mining schema lists all fields used in the model. "]},{"entry":[{},"This can be a subset of the fields as defined in the data "]},{"entry":[{},"dictionary. It contains specific information about "]},{"entry":[{},"each field, such as the field's name and what "]},{"entry":[{},"should happened when there is a missing value."]},{"entry":["Targets","Targets specify post-processing for the predicted value."]},{"entry":["Output","The output provides a name any output fields expected "]},{"entry":[{},"from the model, including the predicted value."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","100","100","102","104","126","106","108","110","112","102","126","106","108","110","112","106","126","126","108","126","110","126","112","126"],"i":["a","n","a","n ","a","b","c","d","e","f","g","h"]},"The training dataset  can be stored in a distributed file system or a distributed database, for example. In some implementations, the data distribution node  randomizes the dataset  before the dataset is divided into chunks and distributed to the learners , ,  and . By way of illustration, the order of examples in the training dataset  can be changed so that each training example is moved to a new, random location in the order. Various randomization techniques can be used such as, for instance, random permutation and random sampling. Randomization of the training dataset  endeavors to increase the variety of training examples in each chunk.","The data distribution node  distributes the chunks to the learners , ,  and  through a communication network shared by elements in the system . The communication network can be an intranet, shared memory, a proprietary bus, or combinations of these, for example. Other types of communication networks are possible. The number of chunks each learner receives can be determined by dividing the number of chunks by the number of learners, for example. Distribution of the chunks to the learners , ,  and  can be accomplished in various ways. Chunks can be distributed to the learners , ,  and  in the order in which they occur in the randomized dataset (e.g., in a round robin fashion) or in another order such as a random order. In further implementations, if a given learner is understood to have more processing resources (e.g., CPU processing power, physical memory) than another learner, more chunks can be distributed to the former than to the later. In further implementations, the data distribution node  can monitor the chunk processing progress of each learner , ,  and  and redistribute yet-to-be-processed chunks to learners that are processing chunks faster than other learners.","In some implementations, the number of learners made available to process the dataset  is based on the status of the user who is requesting the training Users that have a premium status can be allotted more learners than other kinds of users, for example. In other implementations, the number of learners made available to process the dataset  is a function of the status of the user who is requesting the training and available resources in the system . For instance, if there are a small number of available learners in the system , the number of learners available for a premium user will be less than desired. In further implementations, the number of learners used to process the dataset  is also based on the size of the dataset . For example, larger datasets will be allotted more learners than smaller datasets. In further implementations, additional learners can be allotted to process a dataset  as the learners become available. This allows the data distribution node  to redistribute chunks to newly available learners.","The learners , ,  and  each are programmed with computer instructions for training a local predictive model on the data chunks the learner is responsible for processing. The learner  trains local predictive model  on chunks and . The learner  trains local predictive model  on chunks and . The learner  trains local predictive model  on chunks and . And the learner  trains local predictive model  on chunks and . The parameters of the local predictive models , ,  and  are then combined by a data collecting node , which comprises one or more data processing apparatus and is programmed with computer instructions for producing a final predictive model . Model parameter combination is described further below.","Referring back to , the data collecting node  combines the parameters from the local predictive models of the learners. In some implementations, the parameters are combined by averaging the values for each parameter together. Other ways of combining the parameters are possible.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["202","212","214","106","202","126","126","102","202","102","102","102"],"i":["a ","b "]},"In order to validate the local prediction model, part of the training examples in the chunk are put aside as the validation portion which is used to validate the local predictive model, and the remaining training examples form the training portion which is used to train the local predictive model. In some implementations, the examples used for training can be randomly selected from the training portion. In some implementations, the training portion represents a percentage (e.g., 20%) of the examples in a given chunk. The data manager  partitions each chunk into a training portion and a validation portion. For example, chunk is partitioned into training portion  and validation portion . Likewise, chunk is partitioned into training portion  and validation portion . As described above, each chunk contains training examples that each comprise one or more data fields and an outcome. The trainer  uses examples in each training portion to train the local predictive model. The accuracy monitor  (described further below) uses the examples in the validation portion to assess the accuracy of the local predictive model as the model is being trained. Once the accuracy is determined to be sufficient, the training is terminated. In this way, the trainer  does not necessarily need to train the local predictive model using all of the examples in a given training portion. When the learner has finished processing all of its training portions (e.g., training portions  and ), the trainer  outputs the local predictive model (e.g., local predictive model ).",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3","b":["300","110","102","302","202","304","212","214","308"]},"The accuracy monitor submits some or all of the training examples in the validation portion (minus the outcomes) as queries to the local predictive model. Alternatively, the accuracy monitor submits all of the training examples from all of the validation portions (minus the outcomes) it has received so far. Each query prediction for each example is compared to the outcome of the example to determine if the prediction was correct or not. In various implementations, the learning function is the number of correct predictions by the local predictive model over the number of total predictions. Other learning functions are possible. In some implementations, the learning function is considered to be plateaued when the second derivative of the function is close to, or equal to, zero. Other ways to determining when the learning function has plateaued are possible.","If the learning curve has plateaued (step ), then it is determined if the learner has additional chunks to process (). If so, processing continues at step  otherwise the parameters of the local predictive model are provided to data collecting node  to be combined with the parameters of other local predictive models (step ). In some implementations, the parameters are one or more weights, coefficients or other parameters of a machine learning algorithm used to train the local predictive model. These can be parameters of a Na\u00efve Bayes or Support Vector Machine learning algorithm, for example. If the learning curve has not plateaued (step ), then it is determined if there are more training examples to process in the training portion (step ). If so, training continues at step . Otherwise, processing continues at step .","Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).","The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.","The term \u201cdata processing apparatus\u201d encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.","A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language resource), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.","A system of one or more computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.","The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.","To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending resources to and receiving resources from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.","Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.","While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.","Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.","Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
