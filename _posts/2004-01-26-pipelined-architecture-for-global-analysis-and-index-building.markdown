---
title: Pipelined architecture for global analysis and index building
abstract: Disclosed is a technique for building an index in which global analysis computations and index creation are pipelined, wherein the global analysis computations share intermediate results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07293005&OS=07293005&RS=07293005
owner: International Business Machines Corporation
number: 07293005
owner_city: Armonk
owner_country: US
publication_date: 20040126
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Additional Implementation Details"],"p":["1. Field of the Invention","The present invention is related to a pipelined architecture for Global analysis and index building.","2. Description of the Related Art","The World Wide Web (also known as WWW or the \u201cWeb\u201d) is a collection of some Internet servers that support Web pages that may include links to other Web pages. A Uniform Resource Locator (URL) indicates a location of a Web page. Also, each Web page may contain, for example, text, graphics, audio, and\/or video content. For example, a first Web page may contain a link to a second Web page. When the link is selected in the first Web page, the second Web page is typically displayed.","A Web browser is a software application that is used to locate and display Web pages. Currently, there are billions of Web pages on the Web.","Web search engines are used to retrieve Web pages on the Web based on some criteria (e.g., entered via the Web browser). That is, Web search engines are designed to return relevant Web pages given a keyword query. For example, the query \u201cHR\u201d issued against a company intranet search engine is expected to return relevant pages in the intranet that are related to Human Resources (HR). The Web search engine uses indexing techniques that relate search terms (e.g., keywords) to Web pages.","Global analysis computations may be described as extracting properties from a global view of documents in a corpus (e.g., documents available on the Web). One example of a global analysis computation is the page rank computation. A page rank computation takes as input a directed graph in which every document in the corpus is a node and every hyperlink between documents is an edge. Then, the page rank computation produces as output a global rank for each document in the corpus. Other examples of global analysis computations are duplicate detection (i.e., the identification of pages with similar or the same content) and template detection (i.e., identification of which parts of a Web page are part of a site template).","Search engines that use global analysis computations typically need to have the output of these computations ready before indexing the corpus. For instance, rank values computed by page rank may be used to determine the order of documents in the index, and the results of the duplicate detection computation may be used to filter out which documents should not be indexed. Having to perform all global analysis computations before the creation of the search indices is a problem in scenarios where freshness requirements impose constraints on the time allowed for index creation. In general, global computations are costly, since their computational time is proportional to the number of documents in the corpus, which in the case of the Web or some textual and biological databases is very large.","Additionally, conventional index structures designed for large scale search engines are not well tuned for incremental updates. Thus, incrementally updating an index is expensive in conventional systems.","Thus, there is a need for improved global analysis and index building.","Provided are a method, system, and program for building an index in which global analysis computations and index creation are pipelined, wherein the global analysis computations share intermediate results.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several implementations of the present invention. It is understood that other implementations may be utilized and structural and operational changes may be made without departing from the scope of the present invention.","Implementations of the invention provide an architecture in which global analysis computations are pipelined so that intermediate results may be shared between different sets of global analysis computations and where lagging global analysis information is used for creating search indices. The term \u201clagging\u201d may be described as performing processing with results of recent processing of documents existing at a certain point in time, but not necessarily processing that has taken into account documents existing at a current point in time.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","190","120","100","190","100","104","110","112","104","112","170","112"]},"The server computer  includes system memory , which may be implemented in volatile and\/or non-volatile devices. A information retrieval system  executes in the system memory . In certain implementations, the search engine includes a crawler component , a global analysis component , an indexing component , and a delta indexing component . The global analysis component  includes a static rank component , a duplicate detection component , an anchor text component . Although components , , , , , , and  are illustrated as separate components, the functionality of components , , , , , , and  may be implemented in fewer or more or different components than illustrated. Additionally, the functionality of the components , , , , , , and  may be implemented at a Web application server computer or other server computer that is connected to the server computer . Additionally, one or more server applications  execute in system memory .","The server computer  provides the client computer  with access to data in at least one data store  (e.g., a database). Although a single data store  is illustrated, for ease of understanding, data in data store  may be stored in data stores at other computers connected to server computer .","Also, an operator console  executes one or more applications  and is used to access the server computer  and the data store .","The data store  may comprise an array of storage devices, such as Direct Access Storage Devices (DASDs), Just a Bunch of Disks (JBOD), Redundant Array of Independent Disks (RAID), virtualization device, etc. The data store  includes data that is used with certain implementations of the invention.","In certain implementations of the invention, global analysis computations are performed by the global analysis component  in a pipelined manner with the use of lagging information and delta indices for an index build process performed by the indexing component . The global analysis computations described herein provide examples of possible global analysis computations, but such examples are not intended to limit the scope of the invention. The techniques of the invention are applicable to any global analysis computations.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 1"],"b":["200","170","200","210","220","230","240","210","224","230","240","130","210","224","230","240"]},"The store  is a repository for a tokenized version of each document in a corpus of documents to be used for the information retrieval system . For example, the documents may be Web pages obtained at a certain point in time or the documents may be files in a directory obtained at a certain point in time. The documents are parsed and tokenized before being put in the store . Parsing and tokenizing may be described as identifying words (tokens) from text in the documents that are to be indexed. Parsed documents are typically small, so they may be aggregated into bundles in the store  to improve Input\/Output (I\/O) performance. Each bundle corresponds to a single file and multiple documents. A document in the store  may be found using a locator. The locator may be described as a reference to a bundle followed by a reference within the bundle. Also, implementations of the invention provide an Application Programming Interface (API) that may be used to retrieve a document from the store , given the locator of the document.","Additionally, attribute-value pairs may be used to store data and metadata about a document. The data in the store  is used by the global analysis component  and by the indexing component . Attributes include, for example, a TEXT attribute for the tokenized text of a document, and attributes that are used as input for global analysis computations, such as an ANCHORTEXT attribute for the source anchor text of a document. An anchor may be described as a path or link to a document (e.g., a URL), while anchor text may be described as text associated with the path or link (e.g., a URL) that points to a document. In certain implementations, anchor text is text that labels or encloses hypertext text links in Web documents. Implementations of the invention provide an API to retrieve the value of a given attribute for a document from the store .","In certain implementations, the bundles are organized for efficient storage and retrieval for particular attributes. The store  may be implemented in various ways. That is, the implementation of the store  is independent from the pipelined architecture described for implementations of the invention, as long the functionality of retrieving attributes from documents is supported.","The indexing component  builds an index  from the store . The index  is used to determine which documents are chosen as \u201chits\u201d when a query for a set of documents is received with certain criteria. Different information retrieval system  may use different index structures, such as an inverted text index over the documents content. Implementations of the invention are applicable to any type of index structure.","The information retrieval system  periodically updates the store  and index  with new documents. In certain implementations, the term \u201cnew\u201d documents is used to refer to newly generated documents and to updated existing documents. This is especially useful in environments in which documents are constantly being created or updated. Additionally, certain implementations of the invention use a delta store  to accumulate changes to the store  and use a delta index  as an index over the delta store . This allows the index  to be rebuilt using an efficient batch process. The delta store  and delta index  mirror the structure and functionality of the store  and index , respectively. To make newly documents visible, queries requesting documents are run over both the index  and the delta index . The delta store  is periodically merged with the store , after which the index  is rebuilt, and the delta store  and the delta index  are reset. Resetting may be described as clearing the data structures of current content.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["300","142","300","210","230","300","210","230","210","220","210","220","210","230","210","230","300","170","230","240"],"sub":["i ","i+1 ","i+1 ","i+1 ","i ","i+1","i+1 ","i+1 ","i ","i+1 ","i+1"]},"The delta store  and the delta index  are also generated together in time, but at a faster rate than the store  and the index . Thus, DeltaStore has no subscript in .  illustrates a delta index build process  implemented by the delta indexing component  in accordance with certain implementations of the invention. The delta index build process  takes as input a version of the delta store (labeled DeltaStorein ) and new documents. The delta index build process  merges DeltaStorewith the new documents to generate a new version of delta store (labeled DeltaStorein ) and a new version of delta index (labeled DeltaIndexin ). New documents may be stored in the same manner as documents in the delta store . Consequently, the process shown in  is similar to the one shown in , with new documents effectively acting as a delta to the delta store . A single scan of the new documents and DeltaStoreis sufficient to do garbage collection and generate DeltaStoreand DeltaIndex.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"b":["210","230","210","510","230","520","1","5","510","1","5","520","1","5","530","520","530"],"sub":["i ","i ","i+1 ","i+1 "]},"The process illustrated in  may also be used to merge the delta store  and new documents. However, multiple versions of the same document may appear in the new documents. To ensure that the most recent version of a document is merged into the delta store , new documents are scanned in Last In First Out (LIFO) order.","In certain implementations, in , as a bundle in DeltaStore  is scanned, the bundle is copied to Store, with a filter being set to indicate that the documents in this bundle have been \u201cseen\u201d. After DeltaStore  is scanned, Store is scanned. As a bundle is scanned in Store, the filter is probed to determine whether any documents in that bundle have been \u201cseen\u201d (i.e., copied from the DeltaStore  to Store). Any \u201cseen\u201d documents may be skipped in Store (i.e., not copied to Store). In certain implementations, a hash table may be used in conjunction with the filter. Structure  represents a filter that optionally has an associated hash table.","To avoid multiple scans of the current store  during index build, Store, and Indexare generated in parallel. This is accomplished by feeding the bundles of Storeinto the sort for Indexbefore they are copied to storage (e.g., disk). The final phase of building Index, which consists of merging sorted runs, takes place after Storeis copied to storage (e.g., disk). The delta index  is built in a similar way, that is, using a single scan of the delta store  and new documents. Certain implementations of the invention provide a store merge API that marks two stores as merged and does not do any garbage collection until the index build process initiates a scan of the merged store.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 6A","FIG. 6B","FIG. 6A"],"b":["600","130","142","132","602","132","230"]},"In block , the global analysis component  performs global analysis. For example, the global analysis component  may perform multiple global analysis computations, such as duplicate detection, anchor text analysis, and static ranking. In certain implementations, the global analysis component  performs the duplicate detection, anchor text analysis, and static ranking directly, and, in certain implementations, the global analysis component  invokes the duplicate detection , anchor text , and static rank  components to perform this processing.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 6C","b":["670","672","674","670","672","210","210","134","130"]},"The duplicates table , anchor text table , and rank table  are derived from a global analysis of the documents in the store . Although the duplicates table , anchor text table , and rank table  are illustrated as single entities, one or more of the duplicates table , anchor text table , and rank table  may be implemented as one or more tables in storage (e.g., disk). A subscript used with each data structure denotes which version of the store  that the data structure reflects. For example, Rankcorresponds to the ranking of documents in Store.","After the global analysis component performs processing, the indexing component builds an index  (block ) and builds a delta index  (block) .","With reference to , a global analysis process  implemented by the global analysis component  takes Storeand DeltaStoreas input and outputs Rank, AnchorText, and Dup. The index build process  implemented by the indexing component  then takes this information, along with Storeand DeltaStore, and generates Storeand Index. During this process, garbage collection is performed on Store. After Storeand Indexhave been generated, the delta index build process  implemented by the delta indexing component  may be resumed. The delta index build process cycles at its own rate, generating a new delta store  and delta index  each cycle.","The performance of the index build process is largely bound by the time to do a scan of the store  and to perform the global analysis computations, which might be quite expensive. Two scans of the store  are required in . One scan is to perform global analysis computations and another scan is to build the index. Certain implementations of the invention reduce the time for the index build process by modifying the flow for index build. In particular, certain implementations of the invention use Rank, AnchorText, and Dupto build Indexrather than Rank, AnchorText, and Dup. In other words, a slightly older (\u201cstale\u201d) global analysis (GA) is used to build Indexrather than GA.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 7A","FIG. 7B","FIG. 7A"],"b":["700","132","210","702","132","230"]},"In block , the global analysis component  performs global analysis. In block , the indexing component  builds an initial index using slightly older input data. In block , the global analysis component  performs global analysis, while the delta index component  builds a new delta store and a new delta index.","With reference to , the index build process  implemented by the indexing component  uses GAto build Indexrather than using GAto build Index. In certain implementations, there may be some loss in index precision, but the loss is likely to be small since information, such as document rank, is unlikely to change drastically from GAto GA.","In , the index build process  produces \u201craw\u201d versions of AnchorText, and Dup. This information is extracted from Storeand DeltaStore as they are scanned. The term \u201craw\u201d indicates that more processing is needed to produce the final version. For example, because of duplicates, the raw AnchorTextmay contain multiple copies of the same anchor text. The global analysis process  implemented by the global analysis component  refines the raw information and produces GA.","In , the anchor text for Storeis aggregated into AnchorText. The anchor text remains there, and the store is not later updated to add each document's anchor text to its bundle. This is avoided as it may require updating many bundles in the store, which is expensive in terms of resources that are used.","In addition to cutting the number of store  scans in half, using slightly older global analysis results (GA) also allows the delta index build process  to be done in parallel with the global analysis process . This allows the cycle time of the index build process to be reduced.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 8","FIG. 8"],"b":["800","820"]},"In order to generate the first index (Index), implementations of the invention run the index build process in  twice, with the appropriate inputs and outputs set to null each time. More specifically, building the first index begins with the first store (Store). In the first iteration, Storeis input to the indexing component , which outputs raw Dupand raw AnchorText. These are input to the global analysis component , which outputs Dup, AnchorText, and Rank. Then, on the second iteration, Store, Rank, Dup, and AnchorTextare input to the indexing component , which generates Index.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 9A","FIG. 9B","FIG. 9A"],"b":["900","950","902","952","904","954"],"sub":["i+1 ","i ","i+1","i+1 ","i ","i+1","i+1 ","i ","i+1"]},"With reference to , the global analysis process inputs raw versions of AnchorText, and Dupand outputs Rankalong with AnchorText, and Dup. The duplicate detection produces Dupby sorting the raw version of Dupon, for example, a destination URL. Dupidentifies a single \u201cmaster\u201d URL for each set of duplicate documents. This information is used by the anchor text analysis , which replaces destination and source URLs by their master URLs, so that duplicate anchor text may be kept out of the index. A projection on AnchorTextis then used to produce raw Rank(e.g., in the form of a link graph (Link)) of destination and source URLs. The static rank component  computes Rankfrom Link. Thus, common intermediate results are shared between global analysis computations.","Thus, when creating an index, global analysis need not yet be finished. Instead, the index build process uses the results of a recent global analysis process that has already finished. In certain implementations, for documents that have changed since the global analysis was computed, the change may be ignored and the available results may be used, while for new documents for which no results are available, a default value (e.g. a minimum or average value) may be used. That is, although document content may have changed, the already computed information, e.g. rank, may be used without loss of precision.","Lagging global analysis may be used in different scenarios. For example, if global analysis is slower than an index build, but fast enough to run between two index builds, index build for iteration N may use the global analysis results from iteration (N-1). Hence global analysis for iteration N may run concurrently. Moreover, if global analysis takes longer than the time between two index builds, global analysis may run continuously in the background. Whenever an iteration of global analysis finishes, another iteration starts over with the most recent data. In certain implementations, global analysis may be skipped for a few iterations of the index build. The indexing component  then uses the most recent complete global analysis results.","A high frequency of index builds are achieved to fulfill strict freshness requirements, at the temporary cost of some precision in the global analysis. Also, the architecture allows new documents to be indexed in smaller indices (delta indices) that are queried together with the main indices. In certain implementations, global analysis is not performed for the delta indices in the first version of those indices. Thus, when the freshness requirements are strict compared to the time required by the global analysis computations, new documents may be indexed and retrieved before their global information is computed.","In certain implementations, the techniques of the invention may be applied to per-document analysis (e.g., summarization, keyword extraction, etc.) that does not require a global analysis of an entire corpus. Using lagging per-document analysis information is especially useful in scenarios where the change rate of documents is high, and the per-document analysis is expensive.","The described techniques for a pipelined architecture for global analysis and index building may be implemented as a method, apparatus or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d as used herein refers to code or logic implemented in hardware logic (e.g., an integrated circuit chip, Programmable Gate Array (PGA), Application Specific Integrated Circuit (ASIC), etc.) or a computer readable medium, such as magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.). Code in the computer readable medium is accessed and executed by a processor. The code in which various implementations are implemented may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Thus, the \u201carticle of manufacture\u201d may comprise the medium in which the code is embodied. Additionally, the \u201carticle of manufacture\u201d may comprise a combination of hardware and software components in which the code is embodied, processed, and executed. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art.","The logic of , A, and A describes specific operations occurring in a particular order. In alternative implementations, certain of the logic operations may be performed in a different order, modified or removed. Moreover, operations may be added to the above described logic and still conform to the described implementations. Further, operations described herein may occur sequentially or certain operations may be processed in parallel, or operations described as performed by a single process may be performed by distributed processes.","The illustrated logic of , A, and A may be implemented in software, hardware, programmable and non-programmable gate array logic or in some combination of hardware, software, or gate array logic.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 10","b":["100","120","180","1000","1000","1002","1004","1010","1005","1004","1010","1006","1010","1004","1002","1008","1012","1002","1014","1002","1000"]},"The computer architecture  may comprise any computing device known in the art, such as a mainframe, server, personal computer, workstation, laptop, handheld computer, telephony device, network appliance, virtualization device, storage controller, etc. Any processor  and operating system  known in the art may be used.","The foregoing description of implementations of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many implementations of the invention may be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
