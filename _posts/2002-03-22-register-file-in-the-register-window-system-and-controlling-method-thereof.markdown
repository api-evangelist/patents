---
title: Register file in the register window system and controlling method thereof
abstract: In the structure of register files composed of a master register file and a working register file, when data is read, the working register file is accessed. When data is written, the both the master register file and the working register file are accessed. In the working register file, data of the current window, and data preceded thereby, and data followed thereby are stored. Thus, even if the SAVE instruction or the RESTORE instruction are successively executed, instructions can be processed out of order. As a result, the efficiency of the process is improved.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07093110&OS=07093110&RS=07093110
owner: Fujitsu Limited
number: 07093110
owner_city: Kawasaki
owner_country: JP
publication_date: 20020322
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to a register access processing method for use with an information processing apparatus having an architecture of a register window and using an out-of-order instruction execution system, the method allowing the order of instructions to be changed so that an instruction goes ahead of a register window switching instruction.","2. Description of the Related Art","Some information processing apparatus having an architecture using a reduced instruction set has a plurality of register sets (hereinafter referred to as register windows). Thus, in the apparatus, it is not necessary to save or restore to a memory stack a register that takes place when a subroutine is called or returned.","The register windows are connected in a ring shape and managed by register window numbers (hereinafter referred to as window numbers). For example, eight register windows are assigned window numbers  to  and used in the order of , , , . . . , and . The window number of a register window that is being used is stored by a register (hereinafter, this register is referred to as current window pointer (CWP)).",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},"Each register window file composed of for example 32 64-bit registers. Among these registers, eight registers are common in all the register windows. As shown in , other eight registers are in common with the immediately preceding register window. Further eight registers are in common with the immediately following register window.","These registers are referred to as overlap register window. There are two types of register window switching instructions that are a SAVE instruction and a RESTORE instruction. The SAVE instruction increments CWP. The RESTORE instruction decrements CWP. Thus, in the following description, the register window switching instructions are referred to as SAVE instruction and RESTORE instruction.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},"In the related art, there are problem with respect to speed and scale of a circuit that reads data from such a large register file.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},"As the number of register windows becomes large, a very large register file is required (when the number of register windows is eight, 136 registers are required). As a result, it becomes difficult to supply an operand to an arithmetic unit at high speed. Thus, as shown in , in addition to a register file (portion () shown in ) that stores all windows as shown in  (the register file is referred to as master register file (MRF)), a subset (portion () shown in  ()) of the MRF is disposed. The subset stores a copy of one window pointed by CWP in the MRF (hereinafter, the subset is referred to as working register file (WRF)). The WRF supplies an operand to the arithmetic unit. Since the WRF stores only a window pointed by CWP, the capacity of the WRF is 32 entries that is smaller than that of the MRF. Thus, data can be read from the WRF at high speed.","However, in such a structure, since the WRF stores only registers for one window, when the SAVE instruction or the RESTORE instruction is executed, an operand that is required after an instruction that will be executed after the SAVE instruction or the RESTORE instruction cannot be supplied from the WRF.","Thus, when the SAVE instruction or the RESTORE instruction is executed, since the window of the WRF is replaced with a new window, since a window transferring process takes place from the MRF to the WRF, while the process is taking place, the execution of instructions that follow is stalled.","In addition, the information processing apparatus that changes the processing order of instructions corresponding to an out-of-order instruction executes the instructions that can be processed regardless of the execution order of the program. However, the apparatus cannot execute an instruction preceded by the SAVE instruction or the RESTORE instruction even if the apparatus can process the instruction, until a window is transferred to the WRF after the SAVE instruction or the RESTORE instruction is executed.","Such a restriction causes the performance of the information processing apparatus corresponding to the out-of-order instruction execution system that generates a large number of instructions at a time to largely deteriorate. The information processing apparatus corresponding to the out-of-order instruction execution system pre-reads many instructions and pre-stores them to buffers. Instructions that are stored and that are executable are executed in the changed order different from that designated by the program so that the throughput of the execution of the instructions is improved. Thus, when the SAVE instruction or the RESTORE instruction is executed, if the execution order of instructions cannot be changed, whenever the SAVE instruction or the RESTORE instruction is executed, the out-of-order processing mechanism does not work. As a result, the performance of the apparatus remarkably deteriorates.","An object of the present invention is to improve the performance of an information processing apparatus corresponding to out-of-order processing system.","In particular, the present invention allows the execution order to be changed and a large number of instructions to be executed at a time when the SAVE instruction or the RESTORE instruction is executed in an information processing apparatus that uses a register window and out-of-order execution system.","A first aspect of the present invention is a register file having a master register file and a working register file, data used for a process for an instruction being transferred from the master register file and stored in the working register file, data used for a process for an instruction being read from the working register file, comprising a current window pointer unit pointing a current window position for accessing the master register file, a working register window current pointer unit pointing a current window position for accessing working register file, and a unit transferring data from the master register file to the working register file and updating data of the working register file when the current window pointer is changed so that the master register file stores data of all register windows of an information processing apparatus and the working register file stores data of a window pointed by the current window pointer and data of windows followed and preceded by the window pointed by the current window pointer.","A second aspect of the present invention is a method for controlling a register file having a master register file and a working register file, data used for a process for an instruction being transferred from the master register file and stored in the working register file, data used for a process for an instruction being read from the working register file, comprising the steps of providing a current window pointer for pointing a current window position for accessing the master register file and a working register window current pointer for pointing a current window position for accessing working register file, and transferring data from the master register file to the working register file and updating data of the working register file when the current window pointer is changed so that the master register file stores data of all register windows of an information processing apparatus and the working register file stores data of a window pointed by the current window pointer and data of windows followed and preceded by the window pointed by the current window pointer.","According to the present invention, data necessary for reading or writing a plurality of instructions that include the SAVE instruction or the RESTORE instruction is pre-stored in a working register file. Thus, even if instructions are successively read or written, they can be executed without need to wait until data necessary upon execution of the SAVE instruction or the RESTORE instruction is transferred from the MRF to the WRF.","These and other objects, features and advantages of the present invention will become more apparent in light of the following detailed description of a best mode embodiment thereof, as illustrated in the accompanying drawings.","The present invention provides a register file and a controlling system thereof that allow the execution order of instructions to be changed when an instruction is followed by a window switching instruction in an out-of-order execution system because a working register file stores registers corresponding to a plurality of windows in the structure of which there are two types of files that are a master register file that stores all window registers and a working register file that stores a part of window registers that may be accessed.","Since it is difficult for an information processing apparatus that has a register file storing a large number of windows to read an operand at high speed, as shown in , all the windows are stored in an MRF (portion () shown in ) and a part of windows is stored in a WRF (portion () shown in ). An operand is read from only the WRF. An updating process is performed so that the content of the WRF is always the same as the content stored in the MRF. Since an operand is supplied from only the small WRF, it can be read at high speed. When an window switching instruction is executed, the latest value of the switched window is transferred from the master register file.","Only a window of registers pointed by CWP is updated as the result of the execution of an instruction. The window is stored in the WRF. Thus, the updating process can be performed for only the WRF. On the other hand, in such a controlling method, to allow the data of the MRF to be consistent with data of the WRF, when a window is switched, it is necessary to pre-transfer data from the WRF to the MRF. According to the present invention, to omit the process for transferring data from the WRF to the MRF, the WRF and the MRF are updated at a time.","In addition, when such a method is used, a register that can be read as an operand is limited to one in a window pointed by CWP. Thus, in an information processing apparatus corresponding to the out-of-order execution type, the execution order of instructions cannot be changed when an instruction is preceded by the SAVE instruction or the RESTORE instruction.","To solve such a problem, according to an embodiment of the present invention, in addition to a window pointed by CWP, windows pointed by CWP\u22121 and CWP+1 are stored in the WRF. As a result, since the windows preceded and followed by the window pointed by CWP are stored in the WRF, instructions preceded and followed by the SAVE instruction or the RESTORE instruction can be read from and written to the register file. Thus, instructions can be moved before and after the SAVE instruction or the RESTORE instruction.","When such a WRF is used, one window has 32 registers. Among them, eight registers are in common with all windows (these registers are referred to as global registers). The other eight registers are in common with the immediately following window. The remaining eight registers are in common with the immediately preceding window. Thus, 24 registers of the 32 registers are shared by the other windows. Consequently, to have windows pointed by CWP\u22121, CWP, and CWP+1, only 64 registers are required.","Next, a WRF that has extra two windows that are followed and preceded by a window pointed by CWP will be described. However, it should be noted that the present invention can be extended to the case that a WRF has 2n extra windows that are followed and preceded by a window pointed by CWP.","When the same window switching instructions such as the SAVE instruction and the SAVE instruction or the RESTORE instruction and the RESTORE instruction are successively executed, since the WRF does not have windows pointed by CWP+2 or CWP\u22122, an instruction preceded by the second SAVE instruction or the second RESTORE instruction reading and writing data from and to the windows, while the windows are transferred from the MRF, the execution of the next instruction is stalled.","To prevent the execution of the instruction from being stalled, it is assumed that when the first SAVE instruction or the first RESTORE instruction is executed, a window necessary for executing an instruction preceded by the second SAVE instruction or the second RESTORE instruction is pre-transferred from the MRF. After the SAVE instruction is executed, the window pointer becomes CWP+1. When the SAVE instruction is followed by the RESTORE instruction, the window pointer becomes CWP. On the other hand, when the SAVE instruction is followed by the SAVE instruction, the window pointer becomes CWP+2. In any case, a window pointed by CWP\u22121 is not required. Thus, a window pointed by CWP+2 necessary for the case that the SAVE instruction is followed by the SAVE instruction is transferred from the MRF. This applies to the RESTORE instruction. Thus, when the SAVE instruction or the RESTORE instruction is executed, the following transferring process is performed.\n\n","When the RESTORE instruction is executed, a window pointed by CWP\u22122 of the MRF is transferred to a window pointed by CWP+1 of the WRF.\n\n",{"@attributes":{"id":"p-0063","num":"0064"},"figref":"FIGS. 3 to 5"},"In the above-described foresee transfer, when the SAVE instruction is executed, a window pointed by CWP+2 is transferred. When the RESTORE instruction is executed, a window pointed by CWP\u22122 is transferred. However, since register windows are overlap windows, in state- shown in , the MRF has an \u201cin\u201d portion pointed by CWP+2 (or an \u201cout\u201d portion pointed by CWP\u22122) and a \u201cglobal\u201d portion.","When the SAVE instruction or the RESTORE instruction is executed, it is not necessary to transfer a whole window (32 entries) from the MRF to the WRF. In other words, when the SAVE instruction is executed, only the \u201cout\u201d portion and the \u201clocal\u201d portion pointed by CWP+2 can be transferred. When the RESTORE instruction is executed, only the \u201cin\u201d portion and the \u201clocal\u201d portion pointed by CWP\u22122 can be transferred. Thus, only 16 entries that are a half window can be transferred. The foreseeing transfer is performed as shown in .","As shown in , WPs are assigned to \u201cin\/out\u201d portions and \u201clocal\u201d portions one after the other. To perform a foreseeing transfer, a window should be transferred to a window two positions ahead. Thus, a window is transferred to a window pointed by WP+2. In , since WP start with 1, \u201cmod 7\u201d should be followed by \u201c+1\u201d. Thus, for compensation, \u201c\u22121\u201d is added to \u201c\u00b14\u201d in parenthesis.","Using such a method, although the amount of data transferred from the MRF to the WRF can be decreased, whenever a window switching instruction is executed, the positions of the \u201cin\u201d portion, the \u201clocal\u201d portion, and the \u201cout\u201d portion adversely vary.",{"@attributes":{"id":"p-0068","num":"0069"},"figref":"FIG. 4"},"Frames assigned WP (Window Pointer)=1, . . . , and 7 are composed of eight registers each. A WRF also has a set of registers of a \u201cglobal\u201d portion (not shown).",{"@attributes":{"id":"p-0070","num":"0071"},"figref":"FIG. 5","b":"1"},"In , portion () represents the state that an MRF is mapped to a WRF in the state-.","When the SAVE instruction is executed, the state- advances to state-. Thus, CWP+1 in the state- becomes CWP in the state-. An \u201cout\u201d portion and a \u201clocal\u201d portion pointed by CWP+1 in the state- are foresee-transferred from the MRF. Thus, as portions () and () shown in , frames of WP=1 and 2 are overwritten with data transferred from the MRF. Frames of WP=5, 6, and 7 become those pointed by CWP in the state-.","When the RESTORE instruction is executed, the state- returns to the state-. Thus, CWP\u22121 in the state- becomes CWP in the state-. An \u201cin\u201d portion and a \u201clocal\u201d portion pointed by CWP\u22121 in the state- are foresee-transferred from the MRF. Thus, as portions () and () shown in , frames of WP=6 and 7 are overwritten with data transferred from the MRF. Frames of WP=1, 2, and 3 become those pointed by CWP in the state-.",{"@attributes":{"id":"p-0074","num":"0075"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0075","num":"0076"},"figref":["FIG. 6","FIG. 6"]},"Since the position of CWP in the WRF cannot be uniquely designated, WP that represents the position of CWP in the WRF is stored in a register. That is referred to as WCWP (Working Register Current Window Pointer). WCWP is composed of four bits. WCWP [:] represents WP of the position of the \u201clocal\u201d portion pointed by CWP. WCWP [:] represents WP of the position of the \u201cin\u201d portion pointed by CWP. (WCWP [:]+1) mod 4 represents WP of the position of the \u201cout\u201d portion pointed by CWP.","Firstly, WCWP represents the position of the current window in the WRF since it cannot be uniquely obtained with CWP as shown in . When register windows are disposed in the method according to the embodiment, a WCWP register is disposed along with a CWP register. When the SAVE instruction or the RESTORE instruction is executed, an updating process is performed by synchronizing them with CWP in the method that will be described later.","In the related art, when the SAVE instruction or the RESTORE instruction is executed, three portions of the \u201cin\u201d portion, the \u201clocal\u201d portion, and the \u201cout\u201d portion should be transferred to a WRF. In contrast, according to the embodiment of the present invention, since the \u201cin\u201d portion and the \u201cout\u201d portion overlap in each window, when the SAVE instruction is executed, only the \u201cout\u201d portion and the \u201clocal\u201d portion are transferred. When the RESTORE instruction is executed, only the \u201cin\u201d portion and the \u201clocal\u201d portion are transferred. Thus, the amount of data that is transferred can be reduced to \u2154 of the amount of data that is normally transferred. Thus, the positions of the \u201cin\u201d portion, the \u201cout\u201d portion, and the \u201clocal\u201d portion dynamically vary in the WRF.","Secondly, WCWP correctly points the current positions of the \u201cin\u201d portion, the \u201cout\u201d portion, and the \u201clocal\u201d portion that vary in such a manner. When a pair of (WCWP and reg number) is given, a means for obtaining the positions of the registers in the WRF is accomplished.",{"@attributes":{"id":"p-0080","num":"0081"},"figref":"FIG. 7"},"As shown in , WCWP is converted into WP members of the \u201cin\u201d portion, the \u201clocal\u201d portion, and the \u201cout\u201d portion shown in . In the example, WP numbers are assigned in the WRF so that the \u201cin\/out\u201d portions and the \u201clocal\u201d portions take place one after the other. Thus, the WP numbers assigned to \u201cin\/out\u201d portions are even numbers, whereas the WP numbers assigned to the \u201clocal\u201d portions are odd numbers. Thus, as shown in , the WP number assigned to the \u201cin\u201d portion becomes WCWP [:]\u00d72+1. The WP number assigned to the \u201clocal\u201d portion becomes WCWP [:]\u00d72. The \u201cout\u201d portion is preceded by the \u201cin\u201d portion. Thus, the WP number assigned to the \u201cout\u201d portion becomes ((WCWP [:]+1) mod 4)\u00d72+1.","In addition, each WP number of the WRF and eight registers of each WP number are assigned addresses  to  as WP=1 (8, . . . , 15), WP=2 (16, . . . , 23), WP=3 (24, . . . , 31), . . . , and so on. These addresses are referred to as physical addresses. In addition, the \u201cglobal\u201d portion is assigned to WP=0 (0, . . . , 7).",{"@attributes":{"id":"p-0083","num":"0084"},"figref":["FIG. 8","FIGS. 9"],"b":"10"},"Physical addresses are assigned to the WRF as shown in .","Normally, a register is accessed using CWP and reg number (register number). However, as was described above, a WRF is accessed using WCWP instead of CWP. When WCWP and reg number are given, a physical address of the register of the WRF is obtained as shown in . A calculation of a physical address shown in  is illustrated in . In , a portion \u201c . . . x \u201d means that WCWP [:] (or WCWP [:]) is shifted to the left by four bits as shown in .","Next, an example of which a pair of (WCWP, reg number) is converted into a physical address of a WRF will be descried.\n\n","Since r10 is an \u201cout\u201d portion, corresponding to the second line of , the physical address becomes ((1+1) mod 4)\u00d716+10=42.","Alternatively, with reference to , since WP=2\u00d72+1=5 (see ), the physical address of r10 of WP=5 is 42 (see ).","An expression for obtaining a physical address shown in  can be obtained using the table shown in  as follows. In this example, a physical address of a register of the \u201cout\u201d portion is obtained. However, this method applies for obtaining a physical address of a register of the other portions.","Physical address=WP\u00d78+reg number\u22128","From the table shown in , physical address=((WCWP [:]+1) mod 4)\u00d72+1)\u00d78+reg number\u22128","=((WCWP [:]+1) mod 4)\u00d716+reg number","This mapping operation is performed when an instruction for accessing a register is decoded. A physical address of each register of the WRF does not vary by the SAVE instruction or the RESTORE instruction as shown in . Thus, when an instruction is decoded, physical addresses of all registers that the instruction accesses can be decided.","Since the position of CWP varies in the WRF, WCWP that points a register accessed by an instruction does not vary with the SAVE instruction or the RESTORE instruction. Thus, when an instruction is decoded, the physical addresses of all registers accessed by the instruction can be decided.",{"@attributes":{"id":"p-0095","num":"0097"},"figref":"FIG. 11"},"Since the position of CWP varies in a WRF, it is necessary to update WCWP that corresponds to CWP when the SAVE instruction or the RESTORE instruction is executed. The updating process is performed as shown in . In this example, since WCWP [:]=\u201c00\u201d has been assigned to a \u201cglobal\u201d portion, WCWP [:] should vary from \u201c01\u201d to \u201c10\u201d to \u201c11\u201d to \u201c01\u201d and so on. Thus, in WCWP [:] shown in , \u201cmod 3\u201d is followed by \u201c+1\u201d. Consequently, in the calculation in the left parentheses of \u201cmod 3\u201d, \u201c\u22121\u201d is placed for a compensation.","The updating process should be performed when the SAVE instruction or the RESTORE instruction is fetched. This is because when an instruction is fetched after the SAVE instruction or the RESTORE instruction has been executed, WCWP that has been updated is required.","In contrast, the foreseeing transfer from the MRF to the WRF should not be performed until all instructions that followed by the SAVE instruction or the RESTORE instruction have been executed. This is because in instructions followed by the SAVE instruction or the RESTORE instruction, a branch, an interrupt, and so forth take place and thereby a control path varies. Thus, there is a possibility of which the SAVE instruction or the RESTORE instruction is not executed.",{"@attributes":{"id":"p-0099","num":"0101"},"figref":"FIG. 12"},"N instructions are simultaneously fetched by a plurality of instruction fetching mechanisms  from an instruction cache  and stored to a reservation station . These processes are performed in order. The reservation station  removes the dependency of the instructions stored therein. Until calculation slots  become idle, these instructions are stored in the reservation station . An instruction that can be calculated is supplied to a calculation slot . An operand is read from a register file . The instruction is executed by an arithmetic unit . The instructions are supplied from the reservation station  to the calculation slots  out of order regardless of the order of the instructions of the original program. After the calculation has been completed, the result is stored in a result buffer . Thereafter, the calculated result stored in the result buffer is written to a register file  in order of the instructions of the original program.","In , the register file  is the same as the register file .","When the present invention is applied to the computer that has the out-of-order instruction processing mechanism shown in , a remarkable effect can be achieved.",{"@attributes":{"id":"p-0103","num":"0105"},"figref":"FIG. 13"},"Next, an instruction sequence on the upper left of  will be exemplified. In this example, it is assumed that the number m of instruction slots is 2.","In the instruction sequence shown in , there are interferences of registers from instruction () to instruction (), from instruction () to instruction (), and from instruction () to instruction ().","In addition, the instruction () is interlocked by the preceding instructions () and (). This is because when the SAVE instruction () is executed, a window is transferred from the MRF to the WRF. Thus, when the SAVE instruction () is executed before the instructions () and () are executed, they will be trapped later. When it becomes clear that the instruction () is not executed, it cannot be cancelled.","Such a restriction is denoted by a solid line on the upper right of . When such a restriction is satisfied and the process is performed in the shortest time, the instructions are executed in sequence (a) shown in .","In contrast, according to the related art of which the WRF has only one window pointed by CWP, until an instruction followed by the SAVE instruction has been executed, data cannot be transferred from the MRF to the WRF. Until data has been transferred from the MRF to the WRF, an instruction preceded by the SAVE instruction cannot be executed. As a result, interlocks of {instruction followed by instruction ()}->instruction () and instruction ()->{instruction preceded by instruction ()} take place. The instruction sequence shown on the upper left of  has such interlocks as a restriction denoted by a curved line on the upper right of .","However, since %o3 of an instruction followed by the SAVE instruction overlaps with %i3 of an instruction preceded by the SAVE instruction, when a technology for dynamically substituting reg numbers of the \u201cin\/out\u201d portions is used in the related art, no interlocks take place. In this case, an interlock from the instruction () to the instruction () does not take place.","When the restriction of the related art is satisfied and the process is performed in the shortest time, the instructions are executed in the sequence (b) shown in .","The latency of the sequence (a) shown in  is 11. In contrast, the latency of the sequence (b) shown in  is 18. Thus, according to the embodiment, the latency is improved by 7 against the related art.","CWP and WCWP of each instruction are shown on the right of the instruction sequence on the upper left of . Before the SAVE instruction () is executed, CWP and WCWP are 1 and 0101, respectively. After the SAVE instruction has been executed, CWP and WCWP vary to 2 and 1010, respectively.","The registers used in the instructions () and () followed by the SAVE instruction are %i4, %o3, and %11. On the other hand, the registers used in the instructions (), (), and () preceded by the SAVE instruction are %i3, %13, and %14. When the registers are converted into physical addresses corresponding to the table shown in , before the SAVE instruction is executed, the physical addresses of the registers %i, %o, and %l become 28, 43, and 17, respectively. After the SAVE instruction has been executed, the physical addresses of the registers %i, %l, and %l become 43, 35, and 36, respectively.","The registers of an instruction preceded and followed by the SAVE instruction can be accessed by common physical addresses. The positions of the registers in the WRF does not vary before and after the SAVE instruction is executed. For example, since %o3 of an instruction followed by the SAVE instruction overlaps with %i3 of an instruction preceded by the SAVE instruction, they can be accessed with the same physical address (=43) in the WRF.","The fact that physical address does not vary in a WRF before and after the SAVE instruction or the RESTORE instruction is executed is important to execute instructions out of order.","Even if a WRF can have all registers necessary before and after the execution of the SAVE instruction and an operand can be supplied to an instruction preceded by the SAVE instruction without need to wait until the next window is transferred from the MRF, when physical addresses of the registers vary after and before the SAVE instruction is executed, it is difficult to move an instruction through the SAVE instruction.","In the method according to the embodiment, unless physical addresses of registers varies, when the instruction () is fetched as shown in , the physical addresses are calculated. When the calculated physical addresses are registered to the reservation station, even if instructions are executed in any order, correct registers therefore can be accessed.",{"@attributes":{"id":"p-0118","num":"0120"},"figref":"FIG. 14"},"In , reference numeral  is an MRF that has \u201clocal\u201d portions and \u201cin\/out\u201d portions for n windows. In , reference numeral  is an WRF. In the WRF, a \u201cglobal\u201d portion is composed of eight entries, a \u201clocal\u201d portion is composed of 24 entries, and an \u201cin\/out\u201d portion is composed of 32 entries. Thus, the WRF is composed of a total of 64 entries.","An operand and stored data are supplied from only the WRF to an execution unit and a memory unit designated by  in . In contrast, a calculated results and\/or a loaded result of the execution unit and the memory unit are written to both the MRF and the WRF. As a result, the content of the MRF becomes consistent with the content of the WRF.","The WRF is accessed through a window pointer WCWP [:].","Register data of a total of 16 entries of one window (eight entries) of the \u201clocal\u201d portion and one window (eight entries) of the \u201cin\/out\u201d portion of the MRF is foresee-transferred to the WRF through a transfer path.","After all instructions followed by the SAVE instruction or the RESTORE instruction have been executed, when the SAVE instruction is executed, the \u201cout\u201d portion pointed by CWP+2 (=the \u201cin\u201d portion pointed by CWP+3) and the \u201clocal\u201d portion pointed by CWP+2 are transferred to unused windows of the WRF. In contrast, when the RESTORE instruction is executed, the \u201cin\u201d portion and the \u201clocal\u201d portion pointed by CWP\u22122 are transferred to unused windows of the WRF.","According to an embodiment of the present invention, a total of 136 entries of registers (\u201cin\u201d portion, \u201cout\u201d portion, \u201clocal\u201d portion, and \u201cglobal\u201d portion) of eight windows are provided. Among these registers, 128 registers of the \u201cin\u201d portion, the \u201cout\u201d portion, and the \u201clocal\u201d portion are disposed in the master register file (MRF). These registers are always updated so that the contents thereof store the latest values. In contrast, an operand is supplied to the arithmetic unit from the working register file (WRF) rather than the MRF. In addition, a \u201cglobal\u201d portion for which a window is not switched is disposed in the WRF.","Working Register File (WRF)","The WRF accesses three windows pointed by CWP, CWP\u22121, and CWP+1 (a total of 64 entries) through a six-bit physical address.","A window pointed by CWP varies in the WRF. A four-bit WCWP (Working Register Current Window Pointer) register is disposed so as to designate a window pointed by CWP. WCWP [:] uses WCWP instead of CWP of the \u201clocal\u201d portion.","When all registers are accessed, a six-bit physical address obtained with a reg number and WCWP corresponding to the table shown in  is used.",{"@attributes":{"id":"p-0129","num":"0131"},"figref":"FIG. 15"},"64 entries of a WRF are grouped as g, l1, l2, l3, io1, io2, io3, and io4, each of which is composed of eight entries and mapped to physical addresses as shown in .",{"@attributes":{"id":"p-0131","num":"0133"},"figref":"FIG. 16"},"In , 64 entries of registers are grouped as four 16-entry modules as shown in .","The WRF is operated by three types of operations READ (WRF->execution unit), WRITE (execution unit->WRF), and MOVE (MRF->WRF). The MOVE operation is performed in association with the SAVE instruction or the RESTORE instruction. The READ operation and the WRITE operation () are executed with physical addresses denoted by () and () shown in . The 16-entry modules denoted by (), (), (), and () shown in  are denoted by banks , , , and , respectively. The bank  has %g0 to %g3 (%l0 to %l3); the bank  has %g4 to %g7 (%l4 to %l7); bank  has %i0 to %i3; and the bank  has %i4 to %i7 (%o4 to %o7).",{"@attributes":{"id":"p-0134","num":"0136"},"figref":["FIG. 17","FIG. 18"],"b":["5","0"]},"A bank to or from which data is written or read is decided by bits [:] of a physical address corresponding to the table shown in . An address in a bank is decided by bits [:] and [:].","Each bit of a physical address in the table shown in  has the meaning shown in .","Thus, when a physical address is given, the WRF is accessed in such a manner that a bank is decided by the bits [:] of the physical address, a four-bit address of the bank is generated with the bits [:] (as high order bits) and bits [:] (as low order bits) of the physical address, and a register is accessed to the bank with the generated bank address.",{"@attributes":{"id":"p-0138","num":"0140"},"figref":["FIG. 19","FIG. 16","FIG. 19"],"b":["167","168","171","172","3","2","1","0"]},"When a window is transferred from the MRF to the WRF, since it is foresee-transferred, when the SAVE instruction is executed, a window pointed by WCWP+2 is accessed. When the RESTORE instruction is executed, a window pointed by WCWP\u22122 is accessed. In addition, since WCWP [:]=\u201c00\u201d is assigned to a window of the \u201cglobal\u201d portion, it is necessary to cause WCWP [:] to vary from \u201c01\u201d to \u201c10\u201d to \u201c11\u201d to \u201c01\u201d and so on. Thus, WCWP [:] shown in  is \u201cmod 3\u201d followed by \u201c+1\u201d. Thus, in the calculation in the parentheses on the left of \u201cmod \u201d, \u201c\u22121\u201d is placed for a compensation.","In contrast, when the SAVE instruction is executed, it is necessary to transfer the \u201cout\u201d portion of a window that is two positions ahead. However, since WCWP [:] is a pointer that points an \u201cin\u201d portion, it points an \u201cin\u201d portion that is three positions ahead and that overlaps with an \u201cout\u201d portion that is three positions ahead. As a result, in this case, the \u201cin\u201d portion is transferred.","In addition, when the MOVE operation is performed, instructions denoted by (), (), (), and () in  are transferred in two phases so as to reduce the path width.","In phase=0, even reg numbers (l [], l [] l [], l [], io [], io [], io [], and io []) are transferred.","In phase=1, odd reg numbers (l [], l [], l [], l [], io [], io [], io [], and io []) are transferred.","A destination address, MOVE_dest_addr, that is necessary in the WRF when the MOVE operation is performed is composed of a total of four bits that are the high order two bits that designate the high\/low of the bank and represent the phase and the low order two bits are WCWP [:] (or WCWP [:]).",{"@attributes":{"id":"p-0145","num":"0147"},"figref":"FIG. 20"},"MOVE_dest_addr is composed of a total of four instructions that are two instructions denoted by () and () for accessing \u201clocal\u201d portions of banks  and  and two instructions denoted by () and () for accessing \u201cout\u201d portions of banks  and . With MOVE_dest_addr, registers are accessed corresponding to the table shown in .","When the MOVE operation is performed, an instruction denoted by () shown in  is written to a register represented by an address in a bank designated by an instruction denoted by () shown in  of bank , \u2013low. An instruction denoted by () shown in  is written to a register represented by an address in a bank designated by an instruction denoted by () shown in  in bank , \u2013high. An instruction denoted by () shown in  is written to a register represented by an address in a bank represented by the instruction denoted by () shown in  of bank , \u2014low. An instruction denoted by () shown in  is written to a register represented by an address in a bank represented by the instruction denoted by () shown in  of bank , \u2014high.","Even if the register numbers are transferred in two phases, since these operations can be pipelined as will be described later, the process latency increases only by one.","Master Register File (MRF)",{"@attributes":{"id":"p-0150","num":"0152"},"figref":["FIG. 21","FIG. 22"]},"The MRF is divided into two areas that are an area for storing \u201cin\/out\u201d portions of all windows (this area is denoted by () in ) and an area for storing \u201clocal\u201d portions of all windows (this area is denoted by () in ). In the MRF, the WRITE operation and the MOVE operation are performed. Unlike with a WRF, in the MRF, a window position can be decided by CWP. Thus, when a window is accessed in the MRF, CWP is used (with instructions denoted by () and () shown in ).","As shown in , the destination of data to be written by the WRITE operation () in the MRF depends on a reg number (an instruction designated by () shown in ) represented in a dest reg field of an instruction for updating a register. This process is accomplished by selecting dest_CWP or dest_CWP+1 with instructions denoted by () and () shown in .",{"@attributes":{"id":"p-0153","num":"0155"},"figref":"FIG. 23"},"When the MOVE operation is performed, a register to be read depends on whether the SAVE instruction or the RESTORE instruction is executed as shown in . As was described above, since a register window is foresee-transferred from the MRF to the WRF, a window to be transferred is a window one position ahead of a window switched by the SAVE instruction or the RESTORE instruction. When the SAVE instruction is executed, a register window is transferred from move_CWP+2 in the MRF. When the RESTORE instruction is executed, a register window is transferred from move_CWP\u22122 in the MRF. However, when the SAVE instruction is executed, it is necessary to transfer the \u201cout\u201d portion of move_CWP+2. However, since the \u201cout\u201d portion of move_CWP+2 overlaps with the \u201cin\u201d portion of move_CWP+3, on the basis of the \u201cin\u201d portion, registers of the \u201cin\u201d portion transferred when the SAVE instruction is executed becomes move_CWP+3 as shown in .","This process is accomplished by selecting move_CWP\u22122, move_CWP+2, or move_CWP+3 with instructions denoted by (), (), (), and () shown in .","An instruction denoted by () shown in  causes registers with even reg numbers to be read from the MRF in phase=0 and registers with odd reg numbers to be read from the MRF in phase=1.","Eight registers are read from a read port denoted by () shown in . The output of the read port is connected to portions denoted by (), (), (), and () shown in .",{"@attributes":{"id":"p-0158","num":"0160"},"figref":"FIG. 24"},"In , a portion denoted by () represents an MRF and a portion denoted by () represents a WRF. In , instructions denoted by () and () designate a write reg number and CWP, respectively. When data is written to the WRF, () dest_phy_addr denoted by () shown in  is used instead of a pair of (dest_CWP, reg number).","When data is read from the WRF, it is accessed with src_phy_addr denoted by () shown in .","When a SAVE instruction or a RESTORE instruction denoted by () shown in  is executed, move_CWP or move_WCWP denoted by () shown in  is designated.","A READ operation, a WRITE operation, and a MOVE operation for such a register are processed out of order. Thus, different values are used for dest\/move_CWP denoted by () and () shown in , move_WCWP denoted by () shown in , and dest\/src_phy_addr denoted by () and () shown in  depending on each instruction to be executed. CWP, WCWP, and phy_addr for each instruction is stored in the reservation station  shown in  along with instructions that are queued. When an instruction that is queued is executed, CWP, WCWP, and phy_addr are read and used.",{"@attributes":{"id":"p-0163","num":"0165"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0164","num":"0166"},"figref":"FIG. 25"},"Save\/Restore Process",{"@attributes":{"id":"p-0166","num":"0168"},"figref":"FIG. 26"},"When the SAVE process or the RESTORE process is performed, as shown in , the current window of the WRF is changed.","This operation is accomplished by changing WCWP in the manner that will be described later.","When the SAVE process or the RESTORE process is performed one time, only WCWP is changed. However, when the SAVE process or the RESTORE process is successively performed, it is necessary to transfer a new window from the MRF.","Thus, when the SAVE process or the RESTORE process is performed, a new window is transferred from the MRF so that the SAVE process or the RESTORE process can be performed next time.","For example, in state denoted by () shown in , WCWP=\u201c0100\u201d, \u201clocal\u201d=l1, in =i01, and out=io2 are mapped. When the SAVE instruction is executed in the state, the \u201clocal\u201d portion pointed by CWP+2 is transferred to . In addition, the \u201cout\u201d portion pointed by CWP+2 is transferred to io4. As a result, in state denoted by () shown in  takes place. In the state denoted by (), WCPW=\u201c1001\u201d, \u201clocal\u201d=12, in =io2, and out=io3 are mapped.","In contrast, when the RESTORE instruction is executed in the state denoted by () shown in , the \u201clocal\u201d portion pointed by CWP\u22122 is transferred to . In addition, the \u201cin\u201d portion pointed by CWP\u22122 is transferred to io4. As a result, the state denoted by () returns to the state denoted by () shown in .","When the SAVE instruction is executed, it is necessary to transfer the \u201clocal\u201d portion and the \u201cout\u201d portion pointed by CWP+2 from the MRF. When the RESTORE instruction is executed, it is necessary to transfer the \u201clocal\u201d portion and the \u201cin\u201d portion pointed by CWP\u22122 from the MRF.","To do that, a 512-bit (eight bytes\u00d7eight words) MOVE BUS is routed between the MRF and the WRF so as to transfer register data from the MRF to the WRF. To transfer one window, it is necessary to transfer 16 entries. In the example, the 16 entries are transferred in two phases.","Since there is a latency for transferring a window, when the SAVE instruction or the RESTORE instruction is successively executed, there is an interlock between the later SAVE instruction or the later RESTORE instruction and the MOVE process for the earlier SAVE instruction or the earlier RESTORE instruction.",{"@attributes":{"id":"p-0176","num":"0178"},"figref":"FIG. 27"},"When the SAVE instruction is successively executed as with a program shown in , SAVE (a) causes registers with even reg numbers to be transferred in phase=0 and registers with odd reg numbers to be transferred in phase=1. Since each phase can be pipelined, the latency of the SAVE instruction or the RESTORE instruction is the latency of which \u201c1\u201d is added to the latency of the MOVE process. Thus, when the SAVE instruction is followed by the SAVE instruction or when the RESTORE instruction is followed by the RESTORE instruction, an interlock of which at least \u201c1\u201d is added to the latency of MOVE process is required. On the other hand, the SAVE instruction can be followed by the RESTORE instruction. In addition, the RESTORE instruction can be followed by the SAVE instruction. In phase=0, the contents of registers with even reg numbers (l, l, l, l, i (o), i (o), i (o), and i (o)) are placed on the MOVE BUS. In phase=1, the contents of registers with odd reg numbers (l, l, l, l, i (ol), i (o), i (o), and i (o)) are placed on the MOVE BUS.","When the SAVE instruction is executed, a window pointed by CWP+2 should be moved. When the RESTORE instruction is executed, a window pointed by CWP\u22122 should be moved.","The processes performed by the SAVE instruction and the RESTORE instruction are summarized as follows:",{"@attributes":{"id":"p-0180","num":"0182"},"figref":"FIG. 28"},"Process performed when SAVE instruction is executed:\n\n","new WCWP [:]=(WCWP [:]+1\u22121) mod 3+1","new WCWP [:]=(WCWP [:]+1) mod 4",{"@attributes":{"id":"p-0184","num":"0189"},"figref":"FIG. 29"},"Process performed when RESTORE instruction is executed:\n\n","new WCWP [:]=(WCWP [:]\u22121\u22121) mod 3+1","new WCWP [:]=(WCWP [:]\u22121) mod 4","According to the present invention, since working registers for a plurality of windows are stored, the instruction execution order can be changed before a window switching instruction is executed, the process speed of an information processing apparatus corresponding to out-of-order instruction execution system can be improved.","Although the present invention has been shown and described with respect to a best mode embodiment thereof, it should be understood by those skilled in the art that the foregoing and various other changes, omissions, and additions in the form and detail thereof may be made therein without departing from the spirit and scope of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 18","b":["5","0"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 29"}]},"DETDESC":[{},{}]}
