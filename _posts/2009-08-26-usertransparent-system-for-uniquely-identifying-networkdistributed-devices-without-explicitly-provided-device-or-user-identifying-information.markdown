---
title: User-transparent system for uniquely identifying network-distributed devices without explicitly provided device or user identifying information
abstract: A technique for uniquely identifying devices without explicitly provided device or user identifying information in a networked client-server environment, e.g., the Mobile Internet. In one aspect, a system retrieves a profile of a client device, retrieves all device profiles existing in a profile database, and sequentially eliminates profiles not matching until a single profile is left or all profiles have been used.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08131799&OS=08131799&RS=08131799
owner: Media Stamp, LLC
number: 08131799
owner_city: Houston
owner_country: US
publication_date: 20090826
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","EXAMPLE 1","GUID Passed to External System in Redirect from Mobile Device Browser as Part of \u201c?GUID=6723591\u201d Query String Shown Above","EXAMPLE 2","GUID Passed to External System from Mobile Device Browser as Part of \u201c?GUID=6723591\u201d Redirect URL Path Address"],"p":["This application claims the benefit of U.S. Provisional Patent Application Ser. No. 61\/091,816, filed Aug. 26, 2008, entitled, \u201cMOBILE COOKIE ARCHITECTURE\u201d.","1. Field of the Invention","The present invention relates to a system, specifically an apparatus and accompanying methods, for implementing in a networked client-server environment, such as the mobile Internet, an anonymous and user-transparent technique for uniquely identifying network-distributed devices without device or user identifying information provided explicitly for the purpose of identifying the client device.","2. Description of the Prior Art","Internet usage, and particularly that of the mobile Internet, is growing explosively, particularly as the number of mobile sites increase and users that have access to mobile devices continues to rapidly expand.","Mobile Internet devices are characterized by their constrained software environments, as well as by the peculiarities of the individual devices themselves. Constraints include minimal network bandwidth resulting in slow content retrieval, minimal CPU processing and memory facilities, as well as a dearth of persistent storage across sessions, called client side browser cookies. Traditional online advertising approaches, such as the tracking of individual users across sessions and controlling the frequency and relevance of advertising presented to them, simply do not exist in the mobile Internet today. Lack of standard advertising metrics for mobile campaigns, derived using browser cookies on the Web, such as the number of unique site visitors, has discouraged online advertisers from taking advantage of the unique personalized nature of mobile devices and local content.","Mobile usage modalities, often a result of the constrained network environment as well as device limitations themselves, severely hamper achieving the quality advertising experiences expected by web online users and expected by advertisers. For example, use of bookmarks to access sites visited on a regular basis is common, largely driven by the pain of entering full Internet site addresses. As a result of tiny mobile keyboards and user unfriendly forms based interfaces, very few users will type in content site addresses directly. Rather they find it far easier to use an on carrier deck search engine to locate relevant content, and then save a bookmark for the Wireless Application Protocol (WAP) deck or Internet Page they visit regularly, using that saved bookmark for future direct access.","Mobile Internet advertising currently consists of streaming graphic files, in real time, into content rendered by a user's mobile device browser. Image and text call to action advertising tags are embedded in the content at a publisher's content management system. This occurs prior to delivery of the actual content to the user over the wireless network. Current mobile practice for many of the server side include ad serving systems, is to log delivery of user impressions when the ad tags are transmitted from the ad server, across the Internet to the publisher's content system, whether or not they actually arrive.","As those skilled in the art will certainly appreciate, server-side include refers to a variable value (for example, a file \u201cLast modified\u201d date) that a server can include in an HTML file before it sends it to the requester. For example, where one is creating a Web page, an include statement can be inserted in the HTML file that looks like this:\n\n<!--#echo var=\u201cLAST_MODIFIED\u201d-->\n\nand the server will obtain the last-modified date for the file and insert it before the HTML file is sent to requesters.\n","A Web file that contains server-side include statements (such as the \u201cecho\u201d statement above) is usually defined by the administrator to be a file with an \u201c.\u201d suffix. As such, one may consider a server-side include as a limited form of common gateway interface (CGI) application. In fact, the CGI is not used. The server simply searches the server-side include file for CGI environment variables, and inserts the variable information in the places in the file where the \u201cinclude\u201d statements have been inserted.","Upon receipt of advertising mark up tags over the Internet, they are then inserted into the content by the publisher's content management system. This occurs prior to transmission of the content to the end user device. The more desirable approach is to count impressions only after an actual presentation of the advertising to an end user. Since most mobile advertising systems have no way of determining whether an ad actually got delivered and played to completion, the result can be inaccurate impression accounting. Another example of the problem is users who navigate to a new content page before the entire ad has been rendered, which results in an impression reported erroneously even though those users never saw that advertisement.","Most publishers just can't afford the quantity of additional servers and complexity they require to manage multiple flavors of ad embedding software for multiple ad server vendors. This is needed in order to interface to multiple server side include systems just to obtain adequate inventory fill rates to fully monetize their content. The added requirement that publishers pay for their own bandwidth to interface to a server side include system in order to retrieve ad tags across the Internet, before they can insert them and then transmit the content to the user is simply not scalable across millions of simultaneous users. Just like for WEB advertising, client side delivery and counting mechanisms are necessary to accurately distribute revenue across multiple parties, as well as provide accurate auditing, long the standard in traditional advertising.","In view of the fundamental drawbacks associated with server side include mobile advertising systems, and the lack of reliable browser cookie implementations known in the art, automatic anonymous server side device identification and device profile management appears to hold the most promise of all these techniques. Yet, the limitations inherent in conventional implementations of mobile ad serving have effectively prevented this form of advertising from effectively fulfilling its promise. Moreover, the deficiencies inherent in all known mobile advertising techniques have, to a significant extent, collectively inhibited the use of mobile advertising in general.","A pressing need exists for a new system for anonymously and transparently uniquely identifying network-distributed devices without the requirement for explicitly provided device or user identifying information, which does not suffer from infirmities associated with such techniques known in the art. Therefore, there is a need to create a new anonymous unique device identifying system, which can be used by advertisers to expand the use of mobile advertising to mobile Internet devices.","The present invention relates to a system and method for implementing an anonymous and user-transparent technique for uniquely identifying network-distributed devices without device or user identifying information provided explicitly for the purpose of identifying the client device. In this way, the present inventive system satisfies the shortcomings and overcomes the deficiencies associated with mobile server side include advertising techniques and mobile devices that do not implement traditional online browser cookies or that allow disabling traditional online browser cookies (that is, device or user identifying information provided explicitly for the purpose of identifying the client device). Additionally, carrier gateways that filter out mobile device cookies prior to directing users to publisher sites will not negatively impact advertisers abilities to manage mobile advertising campaigns as well as their ability to report unique users and frequency cap the number of times a specific user is presented a specific advertisement.","The strategy at the heart of the unique solution for identifying visitors anonymously is elimination rather than selection. Visitors enter the advertising network implemented in accordance with the present invention through partner publisher sites and the present unique device identification management system anonymously uses elimination rather than selection when searching for the best client device profile matching a current user to whom the present system is delivering ads to from the database of previously recognized client devices. Nature doesn't do selection, rather all answers are possible via mutation, and less viable solutions are eliminated with \u201csurvival of the fittest\u201d in the current environment bubbling up as the best solution fit. That is, the approach in accordance with the present invention is to search for matching profiles of visitor devices to which advertising was previously served and serve advertising on those visitors accordingly.","The key to being able to efficiently and uniquely identify users visiting a publisher network in accordance with the present invention is to use a weighted hierarchy of discriminators eliminating profiles until the best possible match is identified. A weighted hierarchy allows termination of a search immediately upon processing enough data to identify someone as a previous visitor. This is defined as someone for whom a device profile has already been created in the database of the present system. If the visitor doesn't match any existing database device profile, the visitor is then added as a new unique user. Information regarding the visitor is achieved by obtaining a variety of client device attributes from software scripts transparently inserted into a mobile device browser of the visitor's mobile device. Weighted attributes, made up of discriminating criteria placed \u201cend to end\u201d achieves an anonymous device signature unique to its owner. Discriminators are gleaned by device requests from software executing in the client device, and to WAP and Internet advertising and device detection and content transcoding servers. Additionally, scripts are able to read and communicate internal attributes from the device environment, which together ultimately make up digital signatures stored in a device profiles database of the present system.","With a hierarchy of discriminators, each weighted by their ability to discriminate amongst user profiles, the present system uses browser cookies as the first and highest weighted parametric, if cookies are supported by the client device. If a cookie has been set in accordance with the present system with a Globally Unique Identifier (GUID) for that user in their client device in the past, it is known he or she visited previously and the present system tagged them already with a unique identifier associated with that device profile in the database of the present system. Triplet Tuples are stored for each attribute and its value, within Microsoft's built in .NET Anonymous Profiling System. All discriminating attributes, including the whether or not the client device accepts cookies, and if so get stored in the device profile database as searchable records.","If a user accesses a network operating in accordance with the present invention and their client device does not support client side browser cookies, that attribute (i.e. the fact, the client device does not support cookies) still allows user discrimination by such information being set to null in the profile created for the specific client device, and is used to eliminate profiles containing actual cookies from further search. The present system continues to half split the remaining universe of profiles requiring further searching, for each additional discriminating device attribute, each of which gives a smaller and smaller universe of profiles required to pattern match against. If a match is not achieved once all attributes have been searched, a new profile is added to the database containing this current user's unique set of mobile device and wireless environment attributes, e.g., the carrier or mobile virtual network operator (MVNO) of the wireless network they subscribe to.","Logical data structures defining individual user profiles are best thought of as very long binary digital signatures. Those binary strings consist of concatenated attributes captured from requests to a variety of external anonymous unique device identification management servers from software executing in end user devices. Additional attributes, specifying the internal device environment, also get captured to provide additional bit strings that make up the full user device signature. Software scripts get transparently inserted through ad requests embedded in publisher content that then execute inside or outside the device on a time sliced basis. The software scripts delivered, execute in content pages for very limited time periods. Upon completion of the time slice, the script is replaced with the actual requests for device identification services to an anonymous unique device identification management system of the present invention and appear totally transparent to users.","Mobile device facilities for book marking sites visited by users, as well as the fact that unlike Web browsers, the URL of the current content displayed is not normally visible on user screens, allows using tagged bookmarks as the equivalent of a mobile browser history list cookie. Those ubiquitous bookmarks are one of the few objects persistent across Internet sessions, though not normally thought of as a mechanism for implementing persistent storage on devices without traditional browser cookies.","The use of Internet protocol redirect mechanism for user entry points to Internet sites provides an opportunity to uniquely tag those bookmark addresses with device identifying information in the browser history list. Redirect mechanisms are commonly understood to allow for the transfer of users from a selected content page to a different content page. The result is the storage of a unique user ID, associated with their carrier account that persists across Internet sessions within the mobile device browser bookmark persistent storage. That information is readily captured by the unique device identification management system of the present invention each time they access the bookmark, which can be associated with a specific partner site within the device profile database of the present system.","The present system uses Semantic Web RDF data stores, Triplets, for each attribute in the weighted hierarchy that make up user signatures. Each of those properties provides a searchable attribute maintained in the user's device anonymous profile. A good analogy of this approach is the children's game of 20 questions, since unknown objects can be guessed quickly, merely by eliminating properties not associated with a device as the search technique.","Search of RDF formatted user profiles lend themselves well to software with built in inference processing. By weighting signature criteria according to how discriminating they are, the present system is able to perform inference and terminate search of matching RDF profiles at the earliest opportunity, ensuring efficient scalable identification of existing profiles.","A very efficient integrated implementation is achieved by marrying Microsoft's .NET Anonymous Profiling facilities with the present anonymous unique device identification management system. This hybrid implementation strategy allows enhancing existing user profiles with additional discriminating parameters to uniquely identify mobile client devices, with additional inference rules, as the present system learns from audience analytics. Profiles of both systems can be expanded without impacting existing profile data structures, thus providing backward compatibility. To add new properties to the existing .NET Anonymous Profile database, you merely specify a default value for the new property in the .NET application's \u201cweb.config\u201d file, i.e. <add name=\u201cFavoriteColor\u201d defaultValue=\u201cRed\u201d\/>. The new property with that default configuration is automatically added to all existing profiles.","The present invention can be integrated with any number of current and future online advertising and\/or user behavior engines. It provides persistent mobile device identification across mobile browsing sessions, normally performed by traditional client Internet World Wide Web browser applications, called browser cookies. In the mobile environment, a majority of client devices currently lack client side browser cookie facilities, or allow them to be disabled by the user or carrier at their Internet gateway. Device profiles in accordance with the present invention can provide this identification mechanism necessary to monitor a specific user's mobile content consumption, over time, in order to accumulate, store and associate past context consumption with a specific persistent identifier. These identifiers can then be used to target future marketing communication messages pertinent to a specific user and their past or predicted future behavior.","After considering the following description, those skilled in the art will realize the teachings of the present invention can be utilized in any networked client-server environment in which explicitly provided device or user identifying information is not available. Such an environment can encompass the Internet or an intranet, or any client-server environment in which a mobile device browser is used to access and download files through a network communication channel from a server, such as the Mobile Internet. In that regard, the server of the present unique device identification management system can be a separate application, which executes on any computer in the network.","For purposes of simplicity and to facilitate understanding, the present invention is disclosed in the illustrative context of use in uniquely identifying network-distributed devices without the requirement for explicitly provided device or user identifying information. After considering the ensuing description, anyone skilled in the art will readily appreciate how the teachings of the present invention can be easily incorporated into any client-server or other similar distributed processing environment in which a client can encompass not only a specific computer connected to a network, but a software process that possesses network connectivity to another such process and requests information from and, in response, obtains information supplied by the latter.","An overview of the present invention is provided, particularly in the context of its use with a Mobile Internet web browser in a client mobile device, followed by describing each basic component of its implementation.","A. Overview","The present invention accomplishes anonymous unique device identification, in accordance with the broad inventive teachings of the present disclosure, by: downloading code files, e.g., ECMA Script, through a mobile device browser executing at client devices, into browser caches in a manner that is transparent to a user situated at the mobile device browsers; and retrieving device identifying information from 1) the network; 2) the network Internet gateways, and 3) from the client devices themselves. This information is processed in a manner that uniquely identifies anonymous network-distributed devices without requiring explicitly provided device identifying information, for example, a telephone number, or user identifying information, for example, browser side cookies.","Specifically, the technique embodied by the present invention relies on embedding static mark up tags into a content page delivered by a content server . These static tags effectively download and instantiate a persistent script in the mobile device browser . This script then executes transparently to insert additional mark up in to the content, which subsequently causes the mobile device browser  to initiate a request to a Unique Device Identification Management System  residing on server  in accordance with the present invention.","A general deployment of the present invention in an Internet environment is collectively shown in . The correct alignment of the drawing sheets for  is shown in , that is B above C. , for which the correct alignment of the drawing sheets for these figures is shown in , collectively depict generalized Mobile Internet page xHTML code which transparently invokes the present invention, and changes which the present invention dynamically makes to the content in order to insert anonymous device unique identification requests to an external Unique Device Identification Management System  residing on sever  into user requested content. To better understand, , and A and B should be simultaneously referred to throughout the following discussion.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 1B and 1C"},"As shown, client device , upon which device browser  executes, is connected through communication link  to Internet . Device browser  is a conventional mobile Internet browser, such as the IPhone's Safari or Microsoft's Internet Explorer commercially available from Apple or Microsoft Corporation, respectively. Preferably, for reasons that will shortly become clear, the mobile device browser preferably supports execution of ECMAScript. ECMAScript is a standard script language that is used in Web pages to affect how they look or behave for the user. ECMAScript is object-oriented and conceived as a core language to which can be added the objects of any specific domain or context such as the idea of a \u201cdocument.\u201d Though, for ease of illustrating inter-computer actions, Internet  is depicted as having portions and , the present disclosure collectively refers to both portions as simply Internet . Web server, or specifically, Mobile Site Content Server , connected, via link , to Internet  represents any web HTTP (hypertext transfer protocol) server commercially available and is accessed via device browser  for retrieval of desired content pages in accordance with the present invention. Although it is contemplated a variety of HTTP servers may be used in accordance with the present invention, a preferred embodiment makes use of Microsoft IIS server to compliment the .NET anonymous profiling system made use of by the present system. Web server , in response to a request from mobile device browser  to fetch a specific file (for example, a content page the user wishes to view), downloads that file, using conventional TCP\/IP protocols (transmission control protocols\/internet protocols), through the Internet  to mobile device browser . Mobile device browser  will, in turn, render that file typically on a mobile display (for example, via cellular phone) to a user situated at and viewing the client device .","Script distribution HTTP server (also referred to as \u201cScript Server\u201d)  is connected, via communications link , to Internet  and stores files that collectively implement a predefined script, specifically, an ECMAScript. This script is transparently loaded by the mobile device browser  into a local content cache associated with the mobile device browser on client device . Script Server  downloads the script in a manner to be described below, to client mobile device browser . This script, once instantiated and started, then transparently inserts unique device identification requests into the content page, which mobile device browser  subsequently executes. Persistent caching of the script advantageously allows execution locally for subsequent content pages, rather than requiring download each time improving performance. The script enables capturing unique device discriminating information from inside the client device . The unique device discriminating information is transmitted from mobile device browser  to the Unique Device Identification Management System .","Unique Device Identification Management System  is connected to Internet  via communications link . In essence and as discussed in detail below, this system, in response to a request originating from the script executing in mobile device browser , selects a globally unique device identifier, GUID, for the specific client device  if it exists in the database of device profiles maintained by the present system.","HTML tag  (which, where necessary, to distinguish this tag from other HTML tags, is referred to hereinafter as a \u201cscript tag\u201d) is embedded by a content provider(s) into HTML code that constitutes each referring web page, e.g., here content page  as shown in . Generally, the position of this script tag  relative to existing HTML code (shown as HTML code portions and in ) for this page is not critical.","There are two elements to these script tags : An ECMA script element which gets executed if the end-user device supports scripting. Scripts for this implementation are based on the OMA 2006 ECMA Script Standard, V1.0 October 2006, and are fully compliant with the required aspects of that standard. Lastly, a \u201c<noscript> . . . <\/noscript>\u201d element is embedded in the content which only gets executed if the end-user client device  does not support ECMA Script, or if it is not enabled within the client device . This implementation ensures whether the client device  supports ECMA Script or not, and a unique device identification management system request is always executed in the content page. All elements shown after the \u201c\/site=mysite\/\u201d directive are the same as one would expect to see for any mobile targeted ad, and these extra targeting values are specified using a name=value virtual directory path format.","The script file can be generated dynamically from the Script Server  as shown in , or alternately delivered as a static file by the Script Server . Specifically, scripts can be cached in mobile device browser content caches. Appropriate HTTP headers are dynamically generated in order to ensure a script is only loaded over the network the first time a script is served, if appropriate. Subsequent content page navigation by the user, whether within a session or during subsequent sessions, can be obtained directly from the local content cache. No additional load over the network is required. If the cache is cleared, the process merely repeats to refresh the scripts the next time a unique device identification management system request tag is rendered.","Advantageously, very rarely, if ever at all, do any changes need to be made to these code portions to accommodate the script tag . As shown and as reproduced in Table 1 below, coding for implements a script tag in accordance with the present invention.",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SCRIPT AND NO SCRIPT REQUEST TAG"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<script type=\u201ctext\/ecmascript\u201d"},{"entry":"src=\u201chttp:\/\/ringleaderadserver.com\/iserver\/scriptsite=mediastamp?\/site="},{"entry":"mysite\/<name> =<value>\/<name>=<value>\/<name>=<value>\/\u201d>"},{"entry":"<\/script>"},{"entry":"<noscript>"},{"entry":"<a href=\u201chttp:\/\/"},{"entry":"ringleaderadserver.com\/adclick\/site=mysite\/<name>=<value>\/<name>="},{"entry":"<value>\/<name>=<value>\/\u201d><img src=\u201chttp:\/\/"},{"entry":"ringleaderadserver.com\/iserver\/site=mysite\/<name>=<value>\/<name>="},{"entry":"<value>\/<name>=<value>\/\u201d><\/a>"},{"entry":"<\/noscript>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"One portion of the advertising tag (\u201csrc=http:\/\/ringleaderadserver.com\/iserver\/scriptsite=mediastamp?\/site=mysite\/<name>=<value>\/<name>=<value>\/<name>=<value>\/\u201d), when executed by mobile device browser , downloads a script file from the Script Server  as shown in . This file, in turn, is then interpreted and executed, as a script, by the mobile device browser . The effect of executing this script, as symbolized by block  shown in , is to insert unique device identification management system request tags, dynamically written by the script, into the referring web page in lieu of script tag  so as to form a modified web page, here referring content page \u2032, residing in the mobile device browser disk cache. Collectively, these inserted tags form the request to the Unique Device Identification Management System , which as those skilled in the art will appreciate, is implemented as a server. This request, as described in detail below and as reproduced in Table 2 below, when interpreted and executed by the mobile device browser  initiates an HTTP request to the address specified by the src=portion shown below.",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"UNIQUE DEVICE DETECTION REQUEST TAG"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ahref=\u201chttp:\/\/dd.ringleaderdigital.com\/adclick\/SR=1\/site="]},{"entry":[{},"RLDMS\/MOPHAPADFORMAT =MOAGENT\/XZ1SITE=RLDMS\/"]},{"entry":[{},"XZ1MOPHAPADFORMAT=MOBANNER\u201d>"]},{"entry":[{},"<img"]},{"entry":[{},"src=\u201chttp:\/\/dd.ringleaderdigital.com\/iserver\/SR=1\/site=RLDMS\/"]},{"entry":[{},"MOPHAPADFORMAT=MOAGENT\/XZ1SITE=RLDMS\/"]},{"entry":[{},"XZ1MOPHAPADFORMAT=MOBANNER\u201d"]},{"entry":[{},"alt=\u201c\u201d\/>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The present invention allows responding to HTTP unique device identification management system requests from any device browser or device application. It uses \u201cpath\u201d information embedded in request URLs to determine which publisher is being served, and in what way. The first-level \u201cdirectory\u201d in this path generally contains the directive telling the Unique Device Identification Management System  in what way to process the request, as in the following example:\n\nhttp:\/\/Server.domain.com\/iserver\/SITE=YourSite>\/<name>=<value>\/<name>=<value>\/\n\nIn this case, the \u201ciserver\u201d portion tells the ad server to return a response containing a GUID that is appropriate for delivery for publisher \u201cYourSite\u201d and returns it to the mobile device browser as a redirect response to an external server. There are directives that can be used to develop responses appropriate for a variety of service models.\n","Advantageously, the approach of the present invention provides the flexibility to insert as many request mechanisms as desired from an external ECMA Script file, whose code will be executed during content layout. That code performs any pre-processing or environment detection desired and is transparent to a user.","The one issue in using this form of implementation is that legacy devices not supporting ECMA Script display \u201cno ad\u201d. Thus, the present invention is currently prevented from deploying this mechanism as a single cross platform solution at this point in time. Until legacy devices are retired from the market, graceful degradation is accomplished using a separate set of concatenated\u201c<noscript> . . . <\/noscript>\u201d markup tags. Traditional image requests embedded in click through anchor tags are only executed if a client device does not support the external ECMAScript requests. If a client device does support ECMAScript, the requests between the \u201cnoscript\u201d beginning and ending tags are not executed and rendered non-functional.","Different browsers provide different levels of scripting sophistication. Device detection allows customizing scripting functions to accommodate each device's capabilities. Parameters following the \u201c?\u201d query string in the example make up a site's targeting criteria, and is extracted and inserted into the dynamically generated ECMAScript functions. Those script functions generate unique device identification request mechanisms in the device specific to the query site string parameters. Those targets are inserted in the content dynamically when the script is executed inside the device.","If ECMAScript is not supported, or not enabled by the client device, the equivalent of the script dynamically generated ad image and click through ad requests, discussed previously and shown in Table 2, are executed in the \u201c<noscript> . . . <\/noscript>\u201d tag set. These tags are static and supported across all devices, and provide the mechanism to ensure client side unique device identification management system requests are always executed. ECMAScript provides additional functionality in requests not supported by the \u201c<noscript> . . . <\/noscript>\u201d tag set, for example local device time zone information.","Now, with the previous explanations in mind and specific reference to , the basic inter-computer actions associated with use of the present invention will now be described, as well as the basic attendant processing steps that occur in the client device.","To begin a browsing session, the user first invokes mobile device browser  of client device . Once the mobile device browser  is executing, the mobile device browser  obtains, as an initial web page\u2014selection of this content page being referenced by numeral , an address either of a prior so-called \u201cdefault\u201d content page or a \u201cbookmarked page\u201d previously specified by the user and having its URL stored in the mobile device browser  or of a content page manually entered by the user. The mobile device browser  of the client device  then issues, as symbolized by block , a request to fetch a file for that content page , with the request  containing a URL of that page (i.e., its complete Internet address including its file name). It is assumed for simplicity that the file for that page resides on content server . It is also assumed that content page  is being requested which will invoke an associated anonymous unique device identification management request in accordance with the present invention. In response to the request routed to content server , as symbolized by line , this particular server downloads, as symbolized by line , to client device  a file for content page , where the coding stored in this file contains the script tag . Illustrative contents of this script tag  are shown in dashed block , as well as in .","Once this file is received at client device  as shown in , mobile device browser  interprets and then executes, as symbolized by block , the HTML code in content page , which includes script tag  and thus undertakes the actions shown in script download\/instantiate\/execute operations . These operations eventually result in the script tag  being downloaded, instantiated and started in the mobile device browser  of the client device . Generally speaking, the mobile device browser  in response to executing the script request tag, issues a request to fetch script, as symbolized by line , to the Script Server  to download the script. Through various inter-process operations, Script Server  accesses and downloads script returned, as symbolized by line , the needed file of script to install the unique device identification management request to execute under mobile device browser  on the client devices. Once the script file is downloaded to the mobile device browser cache on the client devices, the mobile device browser  then instantiates and starts the script executing, as symbolized by block .","The script executing at the mobile device browser,  in the client device , reads from inside the client device  additional unique device identification information, such as the client device, clock and time zone settings, any unique device detection cookie values previously set in the client device  accessible by the script, as well as information for the version number of the mobile device browser  itself, to name a representative sample. These values are appended to the unique device identification management system request Internet URL address as keyword=value parameters. The script then dynamically inserts the direct unique device identification request tags into the HTML code in content page , as symbolized by block . Generally speaking, the mobile device browser  in response to executing the dynamically inserted unique device identification request tags, issues a request for device identification, as symbolized by line , to the Unique Device Identification Management System , connected through communication link  to Internet ","Unique Device Identification Management System  residing on server  is connected, via communications link , to Internet and stores unique device identifying profiles for client devices previously requesting unique device identification. In essence, and as discussed in detail below, this system, in response to a request dynamically inserted by the script executing in mobile device browser , selects a GUID for the specific client device  if it exists in the database of unique device profiles . It returns a GUID, in a redirect, shown as line , to the client device  which in turn redirects the GUID to an internet address of a third server using GUID as shown by line .","In the case of client device  having a mobile device browser  not supporting script, block  as shown in  is executed by mobile device browser  in response to rendering the <noscript> . . . <\/noscript> tags statically embedded in content page . Rather than a request to Unique Device Identification Management System  being dynamically inserted into content page , the mobile device browser  renders the markup embedded between the <noscript> . . . <\/noscript> tags and issues a request, as symbolized by line , to the Unique Device Identification Management System  connected through communication link  to Internet ","In either scenario described above, Unique Device Identification Management System  residing on server  returns a response redirect to mobile device browser , signified as line  on . The GUID matching client device , is included as part of the HTTP protocol Internet address included in headers of the redirect response. The mobile device browser  then executes the redirect process as signified by block  in , with the GUID transmitted as part of the redirect request signified by line  on  to the third server  as shown in .","The present invention enables determining how mobile advertising campaigns perform when viewed by unique visitors. When a first-time visitor accesses a site, that visitor can be associated with a Globally Unique Identifier (GUID) from the Unique Device Identification Management System  of the present invention. Using this GUID, ad servers can log impressions served to unique visitors and clicks performed by the unique visitor. In one embodiment, this GUID can be passed from the Unique Device Identification Management System  of the present invention in real time to external systems, such as agency dashboard audit systems, as a query string following the \u201c?\u201d redirect to creative in those systems, as shown in the example 1 directly below, or as a keyword=value targeting parameter contained in the path portion of the redirect URL shown in Example 2.\n\nhttp:\/\/eyeblaster.com\/creative.gif?GUID=6723591\n",{"@attributes":{"id":"p-0069","num":"0068"},"br":{},"in-line-formulae":[{},{}]},"As those skilled in the art will appreciate, an agency dashboard audit system is a buy side tool. Examples of which are DART, Eyeblaster, and Microsoft Atlas Media Console. Advertisers use those tools to manage online advertising campaigns that can cut across digital channels. They usually serve the creative and track the advertisers campaign across multiple sites. The tools provided these companies are often called dashboards and allow advertisers and themselves to monitor how campaigns are progressing in terms of number of unique users consuming the advertising when they visit a sites content, impressions delivered in total and by site as well as click throughs by users, ROI, etc. Thus the focus of an agency dashboard audit system is on the advertiser, not the publisher, and provides a real time reporting and metrics dashboard to monitor how advertising campaigns for the brand and advertiser are doing. Those systems have the final determination on what publishers get paid and thus act as the audit for counting metrics of a campaign. Generally, sites get a certain cost per thousand ads delivered to their content audience, and thus these agency dashboard audit systems are also used to check discrepancies between what the publisher said was delivered and what actually got counted as delivered to the actual user, and they are ultimately responsible to the advertiser as to the performance of their campaigns.","B. Client Device",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 3","FIGS. 1B"],"b":["5","5","320","340","350","330","360","370","330","332","334","335","335","337","400","7","337","337","405"]},"Incoming information can arise from two illustrative external sources: network supplied information, e.g., from the mobile Internet and\/or other networked facility, through communication link  to communications interface , or from a dedicated input source, via path , to input interfaces . Dedicated input can originate from a wide variety of sources, e.g., an external USB port or proprietary interface connecting Apple's IPhone to a computer for loading applications into it using Apple's ITunes storefront computer application. Input interfaces  contain appropriate circuitry to provide necessary and corresponding electrical connections required to physically connect and interface each differing dedicated source of input information to client device . Under control of the O\/S , application programs  exchange commands and data with the external sources, via network connection  or path , to transmit and receive information typically requested by a user during program execution.","Input interfaces  also electrically connect and interface user input device , such as, a keyboard or touch screen, to client device . Display , such as a conventional liquid crystal color panel, is connected via leads  to output interfaces . The output interfaces  provide requisite circuitry to electrically connect and interface the system.","Furthermore, since the specific hardware components of client device , as well as all aspects of the software stored within memory , apart from the modules that implement the present invention, are conventional and well-known, they will not be discussed in any further detail. Generally speaking, the Script Server  and Unique Device Information Management System  as shown in  each have an architecture that is quite similar to that of client device  with the addition of a local magnetic disk for persistent software and data storage.","C. Unique Device Identification Management System Software",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 4","b":"400"},"1. Unique Device Identification Management System ","As shown, the system contains a device capabilities system, shown as device capabilities detection system , and a Unique Device Profile Management System . The device identification request HTTP header information received at  from mobile device browser  of , contains device specific parameters, for example the device manufacturer and model, as well as parameter=value properties determined by the script processing  of , in the HTTP address for the Unique Device Identification Management System .","The device capabilities detection system , in this embodiment, uses the open source WURFL software, which is a database of device capabilities along with a large variety of application programming interfaces. \u201cWURFL stands for Wireless Universal Resource File. It is part of a FOSS (which stands for Free and Open Source Software) community effort focused on the problem of presenting content on the wide variety of wireless devices. The WURFL itself is an XML configuration file which contains information about device capabilities and features for a variety of mobile devices. Device information is contributed by developers around the world and the WURFL is updated frequently reflecting new wireless devices coming on the market. Luca Passani is the driving force behind WURFL.\u201d http:\/\/en.wikipedia.org\/wiki\/WURFL. Each unique device in the WURFL database contains a device identifying user-agent string associated with information identifying the capabilities and features of many mobile devices. WURFL is deployed at carriers and portals around the globe and is documented at http:\/\/wurfl.sourceforge.net\/. Additionally, a number of commercially available implementations with value added features are available from vendors such as Ripcode.","Appropriate HTTP protocol headers received at device capabilities detection system  in , with the unique device identification management system request from mobile device browser block  in , signified by line  in , is used by the WURFL system to extract capabilities specific to the requesting device manufacture and model and insert them as \/capability=value\/ pairs in the outgoing HTTP request to the Unique Device Profile Management System  in .","A typical request URL followed by its associated HTTP trace is shown in Table 3 directly below:",{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"http:\/\/core.ringleaderdigital.com\/site=msn\/random=1553481\/"},{"entry":"HTTP\/1.1 302 Found"},{"entry":"Date: Thu, 16 Jul 2009 11:15:24 GMT"},{"entry":"Server: Microsoft-IIS\/6.0"},{"entry":"X-Powered-By: ASP.NET"},{"entry":"X-AspNet-Version: 2.0.50727"},{"entry":"Location: http:\/\/core.ringleaderdigital.com\/site=msn\/random=1553481\/"},{"entry":"Set-Cookie: MoPhapCookie=7d646760-ce87-437b-b954-82f2bd1380f7;"},{"entry":"expires=Sat, 16-Jan-2010 12:15:24 GMT; path=\/"},{"entry":"Cache-Control: private"},{"entry":"Content-Type: text\/html; charset=utf-8"},{"entry":"Content-Length: 274"},{"entry":"Connection: Keep-Alive"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Device specific configured values are appended to the incoming path portion by device capabilities detection system , HTTP request, signified by line , with a typical output request URL followed by its associated HTTP trace shown in Table 4 below. In accordance with a preferred embodiment, the device capabilities detection system  appends client device  capabilities as \/keyword=value\/ pairs to the incoming Internet address URL received from the mobile device browser  for the requesting client device  and then redirects the request to the Unique Device Profile Management System .","The expanded path is communicated to the Unique Device Profile Management System . This system is commercially available as well as available open source and will not be discussed further. For the purposes of implementing the present system, the \u201cWURFL\u201d system is used as the open source device detection example, and RipCode's TransAct Detector device detection system is used as an example of a commercial product, i.e., http:\/\/www.ripcode.com\/products\/detector.php. It is treated as a black box turn key system which provides device identification discriminators based on client device capabilities for a specific model and manufacturer device, as well as the lookup translation of incoming IP host address to carrier IP block. Each carrier is assigned one or more blocks of IP addresses unique to them, and that is appended to the outgoing URL virtual directory path as \u201c\/carrier=stringvalue\/\u201d",{"@attributes":{"id":"p-0084","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"http:\/\/rld.ringleaderdigital.com\/iserver\/AAMGNRC1=UNK\/AAMGNRC2=GENERIC"},{"entry":"WEB BROWSER\/AAMGNRC3=4\/aamsz=banner\/AUDIO=TRUE\/BRWSR=UNK\/"},{"entry":"CARRIER=UNK\/CC IP=UNK\/CITY IP=UNK\/DEV OS=WINDOWS NT\/"},{"entry":"DEVICE=GENERIC WEB BROWSER\/ECMA=TRUE\/GUID=da3ad1cf-7967-4ffc-ae01-"},{"entry":"06f8f669f530\/JAVA ME=FALSE\/keyword=ebsato20090622t\/PM=TOUCHSCREEN\/"},{"entry":"QWERTY=TRUE\/random=1553481\/REGION IP=UNK\/SCRNHEIGHT=300\/"},{"entry":"SCRNWIDTH=770\/site=msn\/STREAM=TRUE\/VIDEO=TRUE"},{"entry":"HTTP\/1.1 302 Found"},{"entry":"Date: Thu, 16 Jul 2009 11:15:26 GMT"},{"entry":"Server: Microsoft-IIS\/6.0"},{"entry":"X-Powered-By: ASP.NET"},{"entry":"X-AspNet-Version: 2.0.50727"},{"entry":"Location:"},{"entry":"http:\/\/rld.ringleaderdigital.com\/iserver\/AAMGNRC1=UNK\/AAMGNRC2=GENERIC"},{"entry":"WEB BROWSER\/AAMGNRC3=4\/aamsz=banner\/AUDIO=TRUE\/BRWSR=UNK\/"},{"entry":"CARRIER=UNK\/CC IP=UNK\/CITY IP=UNK\/DEV OS=WINDOWS NT\/DEVICE=GENERIC"},{"entry":"WEB BROWSER\/ECMA=TRUE\/GUID=da3ad1cf-7967-4ffc-ae01-"},{"entry":"06f8f669f530\/JAVA ME=FALSE\/keyword=ebsato20090622t\/PM=TOUCHSCREEN\/"},{"entry":"QWERTY=TRUE\/random=1553481\/REGION IP=UNK\/SCRNHEIGHT=300\/"},{"entry":"SCRNWIDTH=770\/site=msn\/STREAM=TRUE\/VIDEO=TRUE"},{"entry":"Cache-Control: private"},{"entry":"Content-Type: text\/html; charset=utf-8"},{"entry":"Content-Length: 530"},{"entry":"Connection: Keep-Alive"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"2. Unique Device Cookie Test ","GUID cookies of the present Unique Device Identification Management System , if enabled and supported by client device , shown in , are automatically transmitted by the mobile device browser , shown in , in the standard HTTP Internet protocol cookie header, received at device capabilities detection system  as signified by line  in . That cookie information is delivered to the Unique Device Profile Management System  shown as line , on , where it is executed by the unique device cookie test . The detailed processing for the unique device cookie test  is described in detail subsequently.","3. Unique Device Profile Management System ","The Unique Device Profile Management System  receives the HTTP request from the device capabilities detection system  using a server-to-server redirect signified by communication channel . The Unique Device Identification Profile System  parses the device discrimination keyword=values from the requesting URL, as well as captures all the HTTP protocol headers and any browser cookies and stores them in an existing profile in the Unique Device Profiles database  using the database communication channel , if the device has requested unique device identification request in the past. The profile corresponding to this device profile, has its GUID retrieved, and that is appended to the previous keyword=values from the requesting URL path, and redirected back to the 3server address  in  via the originating mobile device browser  of client device .","If this is the first time the client device  has made a unique device identification request, a new globally unique identifier is generated and it and all the HTTP protocol headers and values, as well as the incoming URL \u201c\/keyword=value\/\u201ds via path , are stored in its newly assigned profile in the Unique Device Profiles database . The device profile GUID is appended to the previous keyword=values from the requesting URL path, and redirected back to the 3server address  in  via the originating device browser .","In accordance with a preferred embodiment, and as discussed below with reference to , the Unique Device Profile Management System  receives an Internet HTTP request and retrieves a pre-configured hierarchical list of request HTTP protocol headers names and their values as \u201cproperty=value\u201d triplets. The Unique Device Profile Management System  parses the client device capabilities and client device identifying \u201c\/keyword=value\/\u201d parameters from the incoming Internet address path portion of the request URL as \u201cproperty=value\u201d triplets and persistently stores all \u201cproperty=value\u201d triplets in a profile assigned to the client device by the Unique Device Profile Management System  in a the unique device profile database .","A pre-configured hierarchical list of a subset of all \u201cproperty=value\u201d triplets stored in each client device profile are retrieved for a current profile assigned to the incoming mobile device browser request and all client device profiles existing in the database that match the value of the first highest weight \u201cproperty=value\u201d triplet in the pre-configured hierarchical list in the current request profile are retrieved. The Unique Device Profile Management System  then sequentially eliminates profiles not matching each \u201cproperty=value\u201d triplet in the list until a single profile is left or all \u201cproperty=value\u201d triplets have been used. If a single profile is left, that profile is identified as the current requesting client device profile updated in the database from a previous request from the same client device.","If after eliminating profiles more than one profile is left, the current requesting device profile is compared against each remaining client device profile matching all hierarchical list of a subset \u201cproperty=value\u201d triplets using Tanimoto similarity correlation. If a single remaining device profile matching all hierarchical list of a subset \u201cproperty=value\u201d triplets is below a predefined Tanimoto similarity coefficient threshold when compared with the current requesting profile, that profile is identified as the current requesting client device profile updated in the database from a previous request from the same client device. A response to the originating client device, with the globally unique identifier associated with the client device in the device profile management database is embedded in the response and returned to the mobile device browser originating the unique device identification request. If no remaining client device profiles matching all hierarchical list of a subset \u201cproperty=value\u201d triplets is below a predefined Tanimoto similarity coefficient threshold when compared with the current requesting profile, the current profile is identified as a first time request from the unique client device and is saved in the database as a new device profile. A response is sent to the originating client device, with the globally unique identifier associated with the client device in the device profile management database embedded in the response and returned to the mobile device browser originating the unique device identification request.","In accordance with an alternate embodiment, a pre-configured hierarchical list of a subset of all \u201cproperty=value\u201d triplets stored in each client device profile are retrieved for a current profile assigned to the incoming mobile device browser request and all client device profiles existing in the database that match the value of the first highest weight \u201cproperty=value\u201d triplet in the pre-configured hierarchical list in the current request profile are retrieved. The Unique Device Profile Management System  then sequentially eliminates profiles not matching each \u201cproperty=value\u201d triplet in the list until a single profile is left or all \u201cproperty=value\u201d triplets have been used. Thereafter, all device profiles existing in the database are retrieved that match the value of the first \u201cproperty=value\u201d triplet of the current request profile, and the Unique Device Profile Management System  sequentially eliminates profiles not matching each \u201cproperty=value\u201d triplet in the list until a single profile is left or all \u201cproperty=value\u201d triplets have been used. If zero remaining client device profiles matching all hierarchical list of a subset \u201cproperty=value\u201d triplets remain, the current profile is identified as a first time request from the unique device and is saved in the database as a new device profile. A response is sent to the originating client device, with the globally unique identifier associated with the client device in the device profile management database embedded in the response and returned to the mobile device browser originating the unique device identification request.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":["FIG. 5A","FIG. 4","FIG. 5B"],"b":["500","420"]},"Though any number of server side data store technologies could be applied, the preferred embodiment leverages the Microsoft .NET Anonymous Profiling system as the proxy facilities that implement the unique device profile storage. That system, built into the .NET framework, stores strongly typed per-user data, serialized persistently and supports on-demand lookup for both authenticated and anonymous users. The Profile feature in ASP.NET allows developers to specify per-user settings or data, using an application web.config file, represented as file  in , which can be stored in an anonymous profile  so that settings can be retrieved without requiring the user to log into the site. Microsoft created a provider model where the profiling service is provided by a pre-installed class or set of classes . Providers are a class with a well-known interface that is implemented to meet the needs of the sub-system. For example, a Profile provider is a class that derives from the .NET abstract \u201cProfileProvider\u201d class. This class provides abstract methods and properties that make up the interface for a Profile provider, shown as block .","Furthermore, this system supports custom data base providers; however the standard default provider is used in this embodiment and implements a stored procedure parameter search capability native to Microsoft SQL Database Server  in . Details for implementing Microsoft's .NET Anonymous Profiling System reside at http:\/\/msdn.microsoft.com\/en-us\/library\/ewfkf772.aspx.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIG. 6","FIG. 5A","FIGS. 5A","FIG. 1B","FIG. 1B","FIG. 4","FIG. 4"],"b":["502","420","650","7","7","7","410","401","418","420","428"]},"In a first scenario, as signified by the YES path, , processing block  is executed signifying the device mobile device browser  does support cookies and performed a device identification server request previously and it copies the received GUID cookie to the request response and extends the time to live 6 more months. It then invokes processing block  for redirecting the client device  to the Unique Device Identification Management System  residing on server , via execution path .","In a second scenario, as signified by the NO path, , processing block  is executed signifying the device mobile device browser  either does not support cookies or is a first time request from client devices that do support cookies. Block  generates a new GUID and copies the new GUID into the named cookie header assigned for use by the Unique Device Identification Management System . The value is inserted into the request response and its time to live set to 6 more months. It then invokes processing block , via execution path . Processing block  then performs a .NET \u201cResponse.Redirect\u201d system call to the Internet address of Unique Device Identification Management System  residing on sever  shown in .",{"@attributes":{"id":"p-0101","num":"0100"},"figref":["FIG. 7","FIG. 4","FIG. 4","FIG. 4"],"b":["700","420","700","410","420","418","428","428","401"]},"Though any number of server side data store technologies could be applied, an implementation is disclosed that uses the Microsoft .NET Anonymous Profiling system as the proxy facilities that implement the mobile server unique device identification management system storage. That system, built into the .NET framework, stores strongly typed per-user data, serialized persistently and supports on-demand lookup for both authenticated and anonymous users. The profile feature in ASP.NET allows developers to specify per-user settings or data, which can be stored in an anonymous profile so that settings can be retrieved without user login.","Microsoft has created a provider model where the profiling service is provided by a class or set of classes. Providers are a class with a well-known interface that is implemented to meet the needs of the sub-system. For example, a Profile provider is a class that derives from the .NET abstract \u201cProfileProvider\u201d class. This class provides abstract methods and properties that make up the interface for a Profile provider. Furthermore, this system supports custom data base providers, which can be used to implement an optimized stored procedure parameter search capability that allows the system to scale as more and more user profiles are accumulated. For this embodiment, the standard provider delivered by default in the .NET framework is used.","As explained previously, all HTTP headers received with a request are transparently provided to the Unique Device Profile Management System  using a .NET ASP application \u201cServer.Transfer\u201d capability. The built in .NET function allows all of the current contents for the HTTP request collections received by the .NET application, Capabilities Detection System (or unique device identification profile system ) as shown in , to be made available to the second .asp program, Unique Device Profile Management System , that is receiving the transfer. Once this occurs, block  tests for receipt of previously set user identification management system cookies. If cookies are received, decision block  routes execution, via YES path , to decision block .","Decision block  tests for receipt of previously set user identification management system cookies. If cookies are received, decision block  checks the cookie value against the current Microsoft Anonymous Profile name, i.e., the primary key for the database profile. A match indicates the current profile for the specific requesting device was automatically retrieved by that .NET system. In this case, decision block  routes execution, via YES path , to block . This block  updates the device profile with all current device identifying values, examples of which are described in a later section, and then saves the updated profile to the database with the new values. These updated values provide information collected over multiple requests that can be used to monitor behavior over time, e.g., a list of sites visited and the context contained in the content pages consumed by the user, for example, deliver context advertising to a 3server  as shown in .","Upon completion, block  invokes block , via execution path . Processing block  configures the HTTP response to the originating unique device identification request, shown as event  in , to extend the mobile device browser , time to live value of the GUID cookie by 6 months. In particular, if the client device  supports the writing and reading of cookies, the present system will store the GUID from the system into a cookie when an ad is served. If the client device  supports cookies, the cookie will automatically be transmitted in an HTTP cookie header with any subsequent ad request to the present system from the client device . That cookie value is the direct index to that device profile within the database of unique device profiles , and no search through the database is required to find the client device's profile since its associated profile is directly accessed from the database by the GUID cookie which serves as a primary key to the profile. A time to live value is specified during the ad deliver to extend the previously stored cookies valid lifetime.","Additionally the GUID is read from the device profile in unique device profiles database  of . Additionally, the GUID value is appended to the incoming request path portion  of the Unique Profile Management System Internet address URL, and performs a .NET \u201cResponse.Redirect\u201d system call to the Internet address of 3server .","The redirect response is received at the originating client device , mobile device browser  in . The standard HTTP protocol handler in the mobile device browser interprets the redirect response and issues a request to the redirect address contained in the HTTP protocol redirect address header, which contains the GUID as the last keyword=value pair in the address, or alternatively passed as part of the query string, i.e., \u201cuid=da3ad1cf-7967-4ffc-ae01-06f8f669f530\/\u201d portion of the URL shown immediately below:",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"http:\/\/mbs-dev.serving-sys.com\/BurstingPipe\/adServer.bs?cn=mb&c="},{"entry":"26&pli=414956&pi=0&f=5&uid=da3ad1cf-7967-4ffc-ae01-"},{"entry":"06f8f669f530&ord=1079662023&on=UNK&dvc=GENERIC"},{"entry":"WEB BROWSER&s=4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In the case of a device supporting cookies as signified by decision block  executing the YES path , but a unique device identification system cookie was not contained in the HTTP request, as signified by decision block  routing execution via NO path , to block , a first time unique device identification request was received from this specific client device  shown in . In this scenario, a temporary profile was assigned to the request by Microsoft's .NET Anonymous Profiling system and block  processing will save the profile name, i.e., its primary database key, as the GUID assigned to the unique device. Upon completion, block  is invoked by execution path . Block  is responsible for updating the current new device profile with all device identifying values contained in the transmission of a request at  received by unique device identification profile system  shown in , examples of which are described in a later section, and then saves the populated profile to the database with the device discriminating values.","Upon completion, block  invokes block , via execution path . Processing block  configures the HTTP response to the originating unique device identification request, shown as event  in , to set the mobile device browser time to live value of the new profile GUID cookie to 6 months. Additionally the GUID is read from the device profile in database  of . This GUID value is appended to the incoming request path portion  of the Unique Profile Management System Internet address URL, and performs a .NET \u201cResponse.Redirect\u201d system call to the Internet address of 3server  as shown in . The redirect response is received at the originating mobile device browser  of client device  as shown in . The standard HTTP protocol handler in the mobile device browser  interprets the redirect response and issues a request to the redirect address contained in the HTTP protocol redirect address header, which contains the GUID as the last keyword=value pair in the address, or alternatively passed as part of the query string, i.e., \u201c?GUID=value\u201d portion of the URL shown below.","This processing scenario just described ensures the next request to the Unique Device Identification Management System , which includes the GUID, gets passed in the associated browser cookie along with the HTTP request, which will automatically retrieve the client device profile using the automatic Microsoft Anonymous Profile .NET system requiring no search of the database to find the profile.","Decision block , as previously described, tests whether the mobile device browser  as shown in , supports the setting and transmission of cookies to a server. In this scenario, as signified by the NO path , either the client device  does not support or has been configured not to allow persisting server browser cookies. Alternatively, the carrier's Internet gateway may filter out device browser cookies to prevent them from being set or passed to the Internet server. In which case, block  is invoked; signifying cookies cannot be set or read by the Unique Device Identification Management System . In this case non-cookie discriminating information is received with the request from mobile device browser  as shown in . This information is saved in the temporary profile automatically assigned by the Microsoft .NET Anonymous Profile system. Without the ability to set cookies in the mobile device browser  by Microsoft's .NET Anonymous Profile system, each request will have a newly assigned current profile that will be populated with all received device information by block .","Once block  processing has completed, execution will be transferred to block  by execution path  where the next profile property is obtained and current profile property values are searched against profiles maintained in the unique device profiles database . Until either a single existing profile previously stored in the unique device identification management system profile database  is found to match the temporary current profile in terms of discriminating information, execution loops back, via NO path  until all discriminating individual parameters have been tested, the list which is contained in the .NET application \u201cweb.config\u201d file shown in . Not every parameter in the \u201cweb.config\u201d file is used to perform matching; rather block  retrieves specific parameters to select all profiles containing that parameter value from the current subset of all profiles retrieved so far. Each search using the next parameter=value in the hierarchy returns some number of profiles with that matching value. This process repeats until only one profile matching that parameters value is returned from the database , or all discriminating values have been processed with zero or more than one profiles remaining in the final set. This implements a half splitting approach to eliminating non-matching profiles until a match is discovered, or we have half split as far as we can using the hierarchy of discriminating parameter=values.","Decision block  tests whether the current \u201cweb.config\u201d parameter=value used in block , to reduce the current subset of profiles from previous processing results in a single remaining profile. If more than one profile remains, the NO decision path  is executed invoking decision block . Block  tests whether all properties in the hierarchy to use to half split the remaining subset of profiles have been used. If additional properties to search remain, the next property and its value is used as the database search criteria, returning the subset of the previous set of profiles from the previous search by executing the NO decision execution path , repeating the processing loop for each remaining discriminator until all have been processed or a single profile resulted from eliminating all others.","In the case where a single profile remains following a search of the previous subset of profiles containing the next discriminator parameter=value, the profile previously saved for client devices previously performing a unique device identification management system request is discovered. This case is signified by executing the YES execution path  by decision block  to invoke block . The processing of block  replaces the temporary profile assigned automatically by Microsoft's .NET anonymous profile system to every new user request with the previous profile corresponding to the current requesting client device .","Upon completion of the just described processing by block , block  is executed via execution path . The processing performed on the current profile, now the device profile previously stored in the database  during a previous request, by block  was discussed previously and is identical to that described when invoked by the execution path  from block  for a first time device request from a client device  supporting browser cookies.","In the case where all discriminating device attributes in the \u201cweb.config\u201d file have been used to half split the remaining subset of profiles matching previous device discriminating information, and more than one profile remain from the previous set, the YES execution path  is executed by decision block  to invoke processing block . Block  performs the well known and commonly used similarity correlation technique known as Tanimoto similarity testing. Tanimoto coefficient (extended Jaccard coefficient) Cosine similarity is a measure of similarity between two vectors of n dimensions by finding the angle between them. Given two vectors of attributes, A and B, the cosine similarity, \u03b8, is represented using a dot product and magnitude. The advantage of the Tanimoto technique is that profiles of different length vectors can be directly compared and a similarity correlation calculated. Tanimoto allows the unique identification management system to take in to account discriminating values that can change from request to request as well as those that don't and with a high degree of certainty perform a fuzzy match of an incoming profile from a device and its past profile from a previous unique device identification request. Since the algorithm itself is well used throughout many disciplines and well documented, it will not be discussed further. The current temporary profile automatically assigned by Microsoft's .NET Anonymous Profile system has its Tanimoto similarity coefficient calculated against each of the remaining profiles from the database remaining at the completion of the previously described half splitting of the last profile attribute in the hierarchy. As discussed previously, not all device attributes are used to perform this half splitting down of the subset of profiles matching the list of parameter values used. Upon completion of processing by block , execution of decision block  is invoked by execution path .","A configurable threshold is used in the Unique Device Identification Management System , derived empirically, in order to determine a similarity match between profiles previously saved in the database  and the current requesting client device . If one or more profiles are determined to be below the Tanimoto threshold, the profile having the lowest similarity coefficient is deemed to be a match for the currently requesting device. Decision block , executes the YES decision path  to invoke block  if a lowest profile is found to be below the similarity threshold. The processing of block  replaces the temporary profile assigned automatically by Microsoft's .NET anonymous profile system to every new user request with the previous profile corresponding to the current requesting client devices . Upon completion of the just described processing by block , block  is executed via execution path . The processing performed on the current profile, now the device profile previously stored in the database  during a previous request, by block  was discussed previously and is identical to that described when invoked by the execution path  from block  for a first time device request from a device supporting browser cookies.","Decision block , as previously described, tests whether one or more profiles remaining after block  processing completes, are determined to be below the Tanimoto similarity threshold discussed previously. If no profiles fall below that empirically derived threshold, the NO path, , executes block  via NO path , signifying a first time unique device identification request was received from client device  shown in . In this scenario, a temporary profile was assigned to the request by Microsoft's .NET Anonymous Profiling system and block  processing will save the profile name, i.e., its primary database key, as the GUID assigned to the unique device. Upon completion, block  is invoked by execution path . Block  is responsible for updating the current new device profile with all device identifying values contained in the transmission of a request at  received by block  shown in , examples of which are described in a later section, and then saves the populated profile to the database with the device discriminating values.","D. Unique Device Identification Profile Properties","The following list presents a subset of properties that can make up a uniquely identifying user profile, as specified within a .NET application's \u201cWEB.CONFIG\u201d configuration file. The .NET profiling system automatically allows new attributes to be dynamically added without impacting data saved in existing user profile records due to the object relational model overlay. A subset of the attributes documented are attributes appropriate for campaign management systems when selected as the implementation platform.","\u201cLastVisitedDate\u201d","This is the date the last time the unique device profile was accessed.","\u201cName\u201d","This is the globally unique ID assigned to the table entry by the .NET framework when a new record is created, i.e., its primary key, and is used as the device identifying cookie value used to map to the user database entry on subsequent ad requests.","\u201cCookie or GUID Cookie\u201d","This is a special unique device identification cookie value and is initialized to zero the first time set before verifying the end device supports cookies. If cookies are supported this value will be set with the \u201cNAME\u201d property above as a way to distinguish first time visitors from previous visitors already in the database. It should be appreciated that although cookies are implemented in accordance with the present invention, the present invention allows for unique identification of client devices in all cases, regardless of whether or not cookies are supported by the client device. Not all client device support cookies, e.g., less than 50% devices support cookies from our analysis of past campaigns. From a scalability and performance perspective, for those client devices that do support cookies there is no database search required rather the cookie becomes the direct index to the device profile, so if the present system is capable of setting and reading a cookie in the client device, it behooves us to take advantage of that fact, but for those that don't we have other discriminators we use to search the database for a previous profile for the device. If someone clears their cookies we can still identify the device using all the other discriminators.","\u201cGUID\u201d","This is the globally unique device identifier assigned value, used to uniquely identify a previous requesting device. It is transmitted to the user device as part of the redirect to an external system for its use, e.g., an ad management system tracking uniques and performing frequency capping for the number of times a specific user is presented a specific advertisement, and should normally match the \u201cName\u201d value in the device profile.","\u201cSite\u201d","This is the SITE=VALUE pair from the request to the unique device identification management system. That value is assigned operationally to identify the publisher with whom a contract was consumated for purposes of analytic reports as well as billing. This particular attribute can be used to descriminate similar users browsing different sites in the network.","\u201cHTTPHeaders\u201d","This is the complete set of HTTP headers sent from the device to the .NET unique device identification management application. It contains data that varies by device and which is parsed to provide fine grain descriminators to differentiate users within and across device types. For example, mime types supported and capabilities such as ECMAScript support are included.","\u201cRawReferrer\u201d","This is the URL address of the publisher content page from which a request was rendered by the end user device. This is transmitted by the end user device to the unique device identification management profiling system as one of the HTTP attributes and contains the original referring page performing the unique device identification request.","\u201cUserIP\u201d","This is the raw IP address of the end user device. DHCP dynamic allocation of IP addresses renders this unusable as a host address descriminating parameter, except within a single session. However, the network front part of that address can be used to provide the network within the carriers IP range the user is accessing from as a descriminator parameter.","\u201cQueryString\u201d","This value is returned from the server side include variable %%QUERYSTRING%% transmitted within the request url. It provides a facihy for publisher engines embedded in the ad request data path to append uniquely identifying parameters which can then be used by the profiling system to identify publisher specific content tracking attributes.","\u201cAppReqDateTime\u201d","This is the date and time of a request being made from the end user device rendering the device identification request tags. This value is returned from the server side include variable %%DATETIME%% received within the request url to the device identification profile management application.","\u201cAppRequest\u201d","This is the URL address of the actual request sent to the unique device identification management system which is returned from the request URL server side include variable %%REQUEST%% transmitted by the end user device in the request URL.","\u201cAppReqAgent\u201d","This is the HTTP Agent string received by the unique device identification management system when it receives a request from the end user device. This value is returned from the server application include variable %%AGENT%%.","\u201cAppCONTEXT\u201d","This is the CONTEXT=VALUE parameter contained in the URL address of the actual request sent if used which is returned from the server side include variable %%REQUEST%%. This value is transmitted by context extraction systems in a request url to the unique device identification management application from which the CONTEXT. This is the textual context determined by the context extraction engine appended to the device request to be passed as a targeting parameters.","\u201cAppCONTEXT\u201d","This is the CONTEXT=VALUE parameter contained in the URL address of the actual request sent if used which is returned from the server side include variable %%REQUEST%%. This value is transmitted by context extraction systems in a request url to the unique device identification management application from which the CONTEXT. This is the textual context determined by the context extraction engine appended to the device request to be passed as a targeting parameters.","\u201cAppCONTEXT\u201d","This is the CONTEXT=VALUE parameter contained in the URL address of the actual request sent if used which is returned from the server side include variable %%REQUEST%%. This value is transmitted by context extraction systems in a request url to the unique device identification management application from which the CONTEXT. This is the textual context determined by the context extraction engine appended to the device request to be passed as a targeting parameters.","\u201cAppCARRIER\u201d","This is the CARRIER=VALUE parameter determined by the unique device identification management system based on the network IP address in the request URL address of the actual request sent from the device.","\u201cAppDEVICE\u201d","This is the DEVICE=parameter determined by the unique device identification management system. This value is determined from the agent HTTP header transmitted from the WURFL device capabilities detection system provided to the unique device identification profile management application within the redirect url from which the DEVICE portion is extracted as the mobile device type executing the originating request requesting from a publisher site.","\u201cAppSCRNWIDTH\u201d","This is the SCRNWIDTH=VALUE parameter determined by the unique device identification management system. This value is determined from the screen width specification transmitted from the WURFL device capabilities detection system provided to the unique device identification profile management application within the redirect url from which the SCRNWIDTH portion is extracted as the mobile device type executing the originating request requesting from a publisher site.","\u201cAppSCRNHEIGHT\u201d","This is the SCRNHEIGHT=VALUE parameter determined by the unique device identification management system. This value is determined from the screen width specification transmitted from the WURFL device capabilities detection system provided to the unique device identification profile management application within the redirect url from which the SCRNHEIGHT portion is extracted as the mobile device type executing the originating request requesting from a publisher site.","\u201cTraceroute\u201d","A Traceroute is performed as an asychronous process to capture the Internet routers through which the user mobile device host IP packets travel on their way to the user profiling system. The ICMP protocol is employed to PING and determine each router on the path using an incrementing TIME TO LIVE. That TCP\/IP message triggers responses from each of the routers making up the Internet path, with the last router in the chain returning a path completion message. Even though the route can change with each connection through the Internet, the Gateway closest to the user device remains consistent for the most part, and can be used as a final descriminating parameter in the user's profile if required to differentiate users.","Additional Parameters","Anyone skilled in the art, will recognize the list above as merely a subset of the device, network Internet gateway, and unique user identification management server attributes that can be used in the present invention. A great deal more are available for use, but the above representative examples are merely presented to minize the length of this patent.","As technologies change and mobile network owners modify their protocols to encompass new services, additional parameters can be made available for unique device identification descriminating capabilities. Additonally, some of the parameters described in this document will no longer be relevant and can be deleted from the user profiles.","As the foregoing disclosure shows the present system operates without embedding specific advertising HTML file requests within a web page at the publisher system prior to delivery to an end user. Additionally, the present invention provides for mobile Internet anonymous device identification performed outside the wireless network, persistent across user sessions, which allows accommodating online advertising capabilities and accounting methods currently standardized for the non-mobile Internet.","The present system, therefore, provides considerable economies to mobile advertisers and mobile publishers in saved labor, time and cost in terms of accomplishing the same capabilities associated with browser cookies in online advertising. In addition, the present system functions in a manner that is substantially, if not totally, transparent to a user and which neither inconveniences nor burdens that user or content publishers. The present system does not require a publisher nor a user to download and install on his or her content management system or mobile device a separate application program, let alone any update to it, specifically to transmit or receive online advertising, or perform any affirmative act, other than normal Internet content delivery and browsing, to receive such advertising. Furthermore, this present system is platform independent and, by doing so, operates with substantially any mobile device browser on substantially any mobile device. Lastly, the present system provides proper accounting to an advertiser by accurately and validly ascertaining user impressions of fully rendered mobile advertisements, as well as provides for frequency capping the number of times a mobile user is exposed to an advertisement, and additionally captures the number of unique visits to a mobile publisher's site.","Ultimately, the present system provides for a new anonymous unique device identifying system, which will effectively achieve broad support and use by advertisers and acceptance by mobile Internet users, resulting in the substantial expansion in the use of mobile advertising in general.","Although a single embodiment which incorporates the teachings of the present invention has been shown and described in considerable detail herein, those skilled in the art can readily devise many other embodiments and applications of the present invention that still utilize these teachings."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The teachings of the present invention can be readily understood by considering the following detailed description in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 1A","FIGS. 1B and 1C"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIGS. 1B and 1C","FIG. 1B","FIG. 1C"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIGS. 2A and 2B"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 2A and 2B","b":["35","40","210","40","35"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3","FIGS. 1B and 1C"],"b":"5"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIG. 1B"],"b":["400","20"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 5","FIGS. 5A and 5B"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 6","FIG. 5A"],"b":"502"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 7","FIG. 4"],"b":["700","420"]}]},"DETDESC":[{},{}]}
