---
title: E-mail system providing filtering methodology on a per-domain basis
abstract: An e-mail system is described that includes a flow control filter, which is particularly suited for filtering on a per-domain (host) basis. During processing of incoming e-mail, each child MTA process created to handle a particular new connection connects to a flow control filter service, so that it can interact with the service during arrival of a message. This interaction provides a complete description of the incoming client, including IP address and host name, as well as the complete SMTP interaction. Since the flow control filter service monitors all children processes, it attains a global view of traffic flowing through the system. By virtue of its global view, the flow control filter service can track information on a per domain basis, including total volume of e-mail received from a particular domain over a given period of time. Since the knowledge lost by the forking process is captured by the flow control filter service, the service is in a position to enforce policy-based rules, including placing restrictions on child processes, based on the per-domain tallies encountered.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07146402&OS=07146402&RS=07146402
owner: Sendmail, Inc.
number: 07146402
owner_city: Emeryville
owner_country: US
publication_date: 20010831
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","BACKGROUND OF THE INVENTION","Glossary","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT"],"p":["A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","1. Field of the Invention","The present invention relates generally to electronic mail (e-mail) systems and, more particularly, to improved methodology for filtering e-mail messages sent from various host domains.","2. Description of the Background Art","Today, electronic mail or \u201ce-mail\u201d is a pervasive, if not the most predominant, form of electronic communication.  illustrates the basic architecture of a typical electronic mail system . At a high level, the system includes a mail server connected over a network to various e-mail \u201cclients,\u201d that is, the individual users of the system. More specifically, the system  includes one or more clients  connected over a network to at least one SMTP (Simple Mail Transfer Protocol) server or \u201cMail Transport Agent\u201d (MTA) for routing e-mail. Users write, send, and read e-mail via Mail User Agents (MUA), such as Microsoft Outlook\u2122, present at each client (computer). To send e-mail, an MUA connects to an MTA which receives the e-mail and routes it to another MTA. An intermediary MTA might forward the e-mail to yet another MTA until the e-mail reaches the destination system, where the e-mail is stored in a mailbox accessible by the recipient.","A typical e-mail delivery process is as follows. In the following scenario, Larry sends e-mail to Martha at her e-mail address: martha@example.org. Martha's Internet Service Provider (ISP) uses an MTA, such as provided by Sendmail\u00ae for NT, available from Sendmail, Inc. of Emeryville, Calif. (With a lower case \u201cs,\u201d \u201csendmail\u201d refers to Sendmail's MTA, which is one component of the Sendmail\u00ae Switch product line.)\n\n","The MTA, which is responsible for queuing up messages and arranging for their distribution, is the workhorse component of electronic mail systems. The MTA \u201clistens\u201d for incoming e-mail messages on the SMTP port, which is generally port . When an e-mail message is detected, it handles the message according to configuration settings, that is, the settings chosen by the system administrator, in accordance with relevant standards such as Request For Comment documents (RFCs). Typically, the mail server or MTA must temporarily store incoming and outgoing messages in a queue, the \u201cmail queue.\u201d Actual queue size is highly dependent on one's system resources and daily volumes.","MTAs, such as the commercially-available Sendmail\u00ae MTA, perform three key mail transport functions:\n\n","The overall process may be summarized as follows. E-mail is routed via SMTP servers, the so-called \u201cMail Transport Agents\u201d (MTA). Users write, send, and read e-mail via Mail User Agents (MUA). To send e-mail, an MUA connects to an MTA, which receives the e-mail and routes it to another MTA. An intermediary MTA might forward the e-mail to yet another MTA until the e-mail reaches the destination system, where the e-mail is stored in a mailbox accessible by the recipient.","For further description of e-mail systems, see e.g., , Part Number DOC-SMN-300-WNT-MAN-0999, available from Sendmail, Inc. of Emeryville, Calif., the disclosure of which is hereby incorporated by reference. Further description of the basic architecture and operation of e-mail systems is available in the technical and trade literature, see e.g., the following RFC (Request For Comments) documents:",{"@attributes":{"id":"p-0012","num":"0025"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["RFC 821","Simple Mail Transfer Protocol (SMTP)"]},{"entry":["RFC 822","Standard for the Format of ARPA Internet Text"]},{"entry":[{},"Messages"]},{"entry":["RFC 974","Mail Routing and the Domain System"]},{"entry":["RFC 937, RFC 1081","Post Office Protocol version 3 (POP3)"]},{"entry":["RFC 1123","Requirements for Internet Hosts -- Application"]},{"entry":[{},"and Support"]},{"entry":["RFC 1725","Post Office Protocol version 3 (POP3)"]},{"entry":["RFC 2033","Local Mail Transfer Protocol (LMTP)"]},{"entry":["RFC 2060, RFC 2061","Internet Message Access Protocol (IMAP)"]},{"entry":["RFC 2246","The TLS Protocol, version 1.0"]},{"entry":["RFC 2487","SMTP Service Extension for Secure SMTP over"]},{"entry":[{},"TLS"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"RFCs are numbered Internet informational documents and standards widely followed by commercial software and freeware in the Internet and UNIX communities. The RFCs are unusual in that they are floated by technical experts acting on their own initiative and reviewed by the Internet at large, rather than formally promulgated through an institution such as ANSI. For this reason, they remain known as RFCs even once they are adopted as standards. The above-listed RFC documents are currently available via the Internet (e.g., at www.ietf.org\/rfc), the disclosures of which are hereby incorporated by reference.","During operation of the Sendmail MTA, a listening process operates to detect requests for new connections. When a request for a new connection arrives, Sendmail makes a new copy or instance of itself through a \u201cforking\u201d operation. The \u201cforked\u201d or new process deals with the new connection exclusively. Thus, at the conclusion of the forking operation two processes exist: a listening process to detect requests for new connections, and a forked process which was created for the purpose of exclusively handling a particular new connection. This forking operation may be repeated to spawn other child processes, each one for exclusively handling a particular new connection.","Each child process that is created has no knowledge of the other child processes (i.e., no memory access to the data structures of the other child processes). This lack of knowledge of other child processes leads to system vulnerability. For example, the child processes cannot detect that the system is being \u201cslammed\u201d by many connections from a particular host. In this scenario, only the parent process (i.e., the process spawning the child processes) would be able to know (i.e., be able to maintain information) about the source of all of the connections to the system. Once a forking operation occurs, there is no interprocess communication between the child processes that would allow these processes to detect the foregoing slamming scenario.",{"@attributes":{"id":"p-0016","num":"0029"},"figref":"FIG. 1B","b":["101","0","1","1","105","1","1","1","1","2","101","1","105","3","2","107","2","107","1","2","2","3"]},"Without the establishment of interprocess communication (IPC) between the processes (e.g., shared memory, UNIX-style pipes, or the like), there is no knowledge shared among the processes about the current state of each process' data. In the context of an e-mail system, if there are several connections coming from a single host (for which the Parent process has created several Child processes), there is no shared knowledge among the processes to indicate which process is handling what connection. Thus, the system cannot readily determine that, for example, it may be handling ten incoming connections for a single domain (e.g., AOL.com). At the same time, however, the system may in fact benefit from identifying that scenario so that the system can moderate usage of its resources by various domains. For instance, if a particular domain is hogging the resources of the system (e.g., \u201cslamming\u201d the system with a multitude of e-mail messages), the system would want to identify that situation and take corrective action.","To date, efforts at addressing the foregoing problem have not provided a domain-specific solution and, therefore, have been sub-optimal. For example, existing e-mail systems may be configured to limit the number of child processes created at a given instance in time. That approach, however, simply provides a general limit on system resources. The approach does not address over-utilization or abuse of system resources by a particular domain.","Given the ever-increasing reliance on e-mail as a preferred medium for business and personal communication, there is much interest in improving the performance and reliability of e-mail systems. Accordingly, there is a need for an e-mail system that incorporates methodology for moderating usage of its resources on a per-domain basis. The present invention fulfills this and other needs.",{"@attributes":{"id":"p-0020","num":"0000"},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":["fork: Refers to UNIX (or UNIX-like)fork( ) function is used to create a new process from an existing process. The new process is called the child process, and the existing process is called the parent. The child process inherits from the parent: process credentials (real\/effective\/saved UIDs and GIDs) environment, stack, memory, open file descriptors, close-on-exec flags, signal handling settings, scheduler class, process group ID, session ID, current working directory, root directory, file mode creation mask, resource limits, and controlling terminal. Unique to the child (i.e., not inherited): process ID, different parent process ID, own copy of file descriptors and directory streams, and own process, text, data and other memory locks.","MTA: Short for Mail Transport Agent (also sometimes referred to as Mail Transfer Agent, Message Transport Agent, or Message Transfer Agent); that part of a mail delivery system that routes between its origin (the sending user and the program used to create mail) and its destination (the agent which writes mail into mailboxes).","SMTP: Short for Simple Mail Transfer Protocol, a protocol for sending e-mail messages between servers. Most e-mail systems that send mail over the Internet use SMTP to send messages from one server to another; the messages can then be retrieved with an e-mail client using either POP or IMAP. Further description of SMTP may be found in RFC 821 (and subsequent RFC 2821), the disclosure of which is hereby incorporated by reference. Copies of the foregoing RFCs may be found on the Internet at www.faqs.org\/rfcs.","spam\/spamming: Spam is unsolicited junk email. Spamming is the act of sending spam (usually in large quantities).","TCP: Stands for Transmission Control Protocol. TCP is one of the main protocols in TCP\/IP networks. Whereas the IP protocol deals only with packets, TCP enables two hosts to establish a connection and exchange streams of data. TCP guarantees delivery of data and also guarantees that packets will be delivered in the same order in which they were sent. For an introduction to TCP, see, e.g., RFC 793, the disclosure of which is hereby incorporated by reference.","TCP\/IP: Stands for Transmission Control Protocol\/Internet Protocol, the suite of communications protocols used to connect hosts on the Internet. TCP\/IP uses several protocols, the two main ones being TCP and IP. TCP\/IP is built into the UNIX operating system and is used by the Internet, making it the de facto standard for transmitting data over networks. For an introduction to TCP\/IP, see e.g., RFC 1180: A TCP\/IP Tutorial, the disclosure of which is hereby incorporated by reference. A copy of RFC 1180 is currently available at ftp.isi.edu\/in notes\/rfc1180.txt."]}},"In accordance with the present invention, operation of an e-mail system is modified to incorporate a flow control filter (service). During processing of incoming e-mail, each child MTA process (that is created to handle a particular new connection) connects to the flow control filter service, so that it can interact with the service during arrival of a message. This interaction provides a complete description of the incoming client, including IP address and host name, as well as the complete SMTP interaction, including HELO (i.e., initial \u201chello\u201d handshake), MAIL FROM (i.e., sender information), RCPT TO (i.e., recipient list), and DATA (i.e., entire message body). Since the flow control filter service monitors all children processes, it attains a global view of traffic flowing through the system. By virtue of its global view, the flow control filter service can track information on a per domain basis, including total volume of e-mail received from a particular domain over a given period of time. Examples of other metrics that may be tracked include total connections and total senders (count) encountered for a particular domain over a given period of time. Other examples include total number of different recipients, total number of envelopes, and total aggregate volume of mail. Since the knowledge lost by the forking process is captured by the flow control filter service, the service is in a position to enforce policy-based rules, including placing restrictions on child processes, based on the per-domain tallies encountered.","The overall methodology of operation may be summarized as follows. The following method steps occur in the context of an incoming message that is being processed by the e-mail system (i.e., MTA forking has already occurred) and now the system is ready to evoke the services of the flow control filter of the present invention. Invocation of the flow control filter begins with the MTA (i.e., a child MTA of the original (parent) listener) connecting to the flow control filter (e.g., using Sendmail Milter protocol); the filter accepts the connection. The MTA and the filter perform a handshake sequence, including feature and parameter negotiation. At the conclusion of the handshake sequence, a new thread is created (i.e., in the flow control engine) for processing the new connection\/message. Now, the MTA passes to the filter the corresponding connection information (e.g., IP address and host name) of the sending MTA. Based on the connection information, the filter may look up matching class data from the configuration file. In the event that no matching class data is found, the filter will assume unrestricted access for the host and therefore will accept the connection and message. In that case, the flow control engine thread handling the connection may terminate, as there is no further filtering work to be done for this incoming connection and message; the MTA proceeds normally with no further interaction with the filter. Otherwise, the method proceeds to the following filtering steps. The method tests whether class limits have been reached. In the event that limits have not been reached (i.e., true), the filter instructs the MTA to continue and increments the current connection count. Otherwise (i.e., false), the method terminates with the filter rejecting the connection and returning an administrator-defined error code. In the event that the process did not terminate, the MTA reports the sender information to the filter; this occurs in response to the MAIL FROM SMTP phase.","The method notes the sender (i.e., who is the sender) in the class. The administrator-defined class may include, for example, a sender-based parameter indicating that the filter should note the number of unique senders that have arrived in a given timeframe for this particular host (of the class). In a manner similar to above, the method tests whether class' sender limits have been reached. In the event that limits have not been reached (i.e., true), the filter instructs the MTA to continue and increments the current unique sender totals. Otherwise, the method terminates with the filter rejecting the message (returning any administrator-defined error code). In the event that the filtering process has not terminated based on sender information, the method proceeds to test recipient (RCPT TO) information. The configuration file allows the administrator to define a class that limits the number of unique recipients received for that class, over any given time span. As a given message may have multiple recipients, the step repeats for each recipient (information) of the message. As before, if specified limits are exceeded, the method terminates with the filter rejecting the message (returning any administrator-defined error code). Otherwise, the method updates the totals and proceeds.","The MTA reports the message body, which may be transmitted as one or more blocks. The method updates a running total of message size. This information is used to determine the aggregate total of bytes received from a given source over a period of time. The MTA reports end of message for the current incoming message. The method compares the message size against class limits specified in the configuration file. Again as before, if specified limits are exceeded, the method terminates with the filter rejecting the message (returning any administrator-defined error code). Otherwise, the incoming message has passed all filters and is accepted. Now, the method may repeat for other incoming messages.","This approach may be easily scaled, for application on a site-wide basis. In that instance, the flow control filter service monitors the children processes for a number of e-mail servers at a given site. In such a configuration, the flow control filter service would apply policy on a global (site) basis, instead of on a per server basis.","The following description will focus on the presently-preferred embodiment of the present invention, which is implemented in server-based software operating in an Internet-connected environment running under a server operating system, such as the Microsoft\u00ae Windows NT running on an IBM-compatible server computer. The present invention, however, is not limited to any particular one application or any particular environment. Instead, those skilled in the art will find that the system and methods of the present invention may be advantageously embodied on a variety of different platforms, including Macintosh, Linux, BeOS, Solaris, UNIX, NextStep, FreeBSD, and the like. Therefore, the description of the exemplary embodiments that follows is for purposes of illustration and not limitation.","I. Computer-based Implementation","A. Basic System Hardware (e.g., for Desktop and Server Computers)","The present invention may be implemented on a conventional or general-purpose computer system, such as an IBM-compatible server computer operating under a server operating system.  is a very general block diagram of an IBM-compatible system . As shown, system  comprises a central processing unit(s) (CPU)  coupled to a random-access memory (RAM) , a read-only memory (ROM) , a keyboard , a printer , a pointing device , a display or video adapter  connected to a display device , a removable (mass) storage device  (e.g., floppy disk), a fixed (mass) storage device  (e.g., hard disk), a communication port(s) or interface(s) , a modem , and a network interface card (NIC) or controller  (e.g., Ethernet). Although not shown separately, a real-time system clock is included with the system , in a conventional manner.","CPU  comprises a processor of the Intel Pentium\u00ae family of microprocessors. However, any other suitable microprocessor or microcomputer may be utilized for implementing the present invention. The CPU  communicates with other components of the system via a bi-directional system bus (including any necessary input and output (I\/O) controller circuitry and other \u201cglue\u201d logic). The bus, which includes address lines for addressing system memory, provides data transfer between and among the various components. Description of Pentium-class microprocessors and their instruction set, bus architecture, and control lines is available from Intel Corporation of Santa Clara, Calif. Random-access memory  serves as the working memory for the CPU . In a typical configuration, RAM of sixteen megabytes or more is employed. More or less memory may be used without departing from the scope of the present invention. The read-only memory (ROM)  contains the basic input output system code (BIOS)\u2014a set of low-level routines in the ROM that application programs and the operating systems can use to interact with the hardware, including reading characters from the keyboard, outputting characters to printers, and so forth.","Mass storage devices  and  provide persistent storage on fixed and removable media, such as magnetic, optical or magnetic-optical storage systems, or flash memory, or any other available mass storage technology. The mass storage may be shared on a network, or it may be a dedicated mass storage. As shown in , fixed storage  stores a body of program and data for directing operation of the computer system, including an operating system, user application programs, driver and other support files, as well as other data files of all sorts. Typically, the fixed storage  serves as the main hard disk for the system.","In basic operation, program logic (including that which implements methodology of the present invention described below) is loaded from the removable storage device  or fixed storage  into the main (RAM) memory , for execution by the CPU . During operation of the program logic, the system  accepts user input from a keyboard  and pointing device , as well as speech-based input from a voice recognition system (not shown). The keyboard  permits selection of application programs, entry of keyboard-based input or data, and selection and manipulation of individual data objects displayed on the display screen . Likewise, the pointing device , such as a mouse, track ball, pen device, or the like, permits selection and manipulation of objects on the display screen. In this manner, these input devices support manual user input for any process running on the system.","The computer system displays text and\/or graphic images and other data on the display device . The video adapter , which is interposed between the display  and the CPU , drives the display device . The video adapter , which includes video memory accessible to the CPU, provides circuitry that converts pixel data stored in the video memory to a raster signal suitable for use by a cathode ray tube (CRT) raster or liquid crystal display (LCD) monitor. A hard copy of the displayed information, or other information within the system , may be obtained from the printer , or other output device. Printer  may include, for instance, an HP LaserJet\u00ae printer (available from Hewlett-Packard of Palo Alto, Calif.), for creating hard copy images of output of the system.","The system itself communicates with other devices (e.g., other computers) via the network interface card (NIC)  connected to a network (e.g., Ethernet network), and\/or modem  (e.g., 56K baud, ISDN, DSL, or cable modem), examples of which are available from 3Com of Santa Clara, Calif. The system  may also communicate with local occasionally-connected devices (e.g., serial cable-linked devices) via the communication (\u201ccomm\u201d) interface , which may include a RS-232 serial port, a Universal Serial Bus (USB) interface, or the like. Other devices may be connected locally via the comm interface .","IBM-compatible personal computers and server computers are available from a variety of vendors. Representative vendors include Dell Computers of Round Rock, Tex., Compaq Computers of Houston, Tex., and IBM of Armonk, N.Y. Other suitable computers include Sun Solaris workstations, which are available from Sun Microsystems of Mountain View, Calif.","The above-described system  of  is presented for purposes of illustrating the basic hardware underlying desktop (e.g., e-mail client) and server computer (e.g., SMTP server) components that may be employed in the system of the present invention. Those skilled in the art will appreciate that the present invention may be implemented in any type of computer system or processing environment capable of supporting the methodologies of the present invention presented in detail below.","B. Basic System Software","Illustrated in , a computer software system  is provided for directing the operation of the computer system . Software system , which is stored in system memory (RAM)  and on fixed storage (e.g., hard disk) , includes a kernel or operating system (OS) . The OS  manages low-level aspects of computer operation, including managing execution of processes, memory allocation, file input and output (I\/O), and device I\/O. One or more application programs, such as client application software or \u201cprograms\u201d  (e.g., , , , ) may be \u201cloaded\u201d (i.e., transferred from fixed storage  into memory ) for execution by the software system . For instance, when the system  is employed to control a desktop machine, application software  includes client e-mail software  (e.g., Microsoft Outlook, available from Microsoft Corporation of Redmond, WA), as shown. When the system  is employed to control a server machine, on the other hand, application software  includes mail server software (e.g., Sendmail\u00ae for NT).","System  includes a graphical user interface (GUI) , for receiving user commands and data in a graphical (e.g., \u201cpoint-and-click\u201d) fashion. These inputs, in turn, may be acted upon by the system  in accordance with instructions from operating system , and\/or client application module(s) . The GUI  also serves to display the results of operation from the OS  and application(s) , whereupon the user may supply additional inputs or terminate the session. Typically, the OS  operates in conjunction with device drivers  (e.g., \u201cWinsock\u201d driver) and the system BIOS microcode  (i.e., ROM-based microcode), particularly when interfacing with peripheral devices. OS  can be provided by a conventional operating system, such as Microsoft\u00ae Windows 9x, by Microsoft\u00ae Windows NT, by Microsoft\u00ae Windows 2000, or by Microsoft\u00ae WindowsXP, all available from Microsoft Corporation of Redmond, Wash. Alternatively, OS  can also be an alternative operating system, such as IBM OS\/2 (available from IBM of Armonk, N.Y.) or Linux OS (available from several vendors, including the Red Hat distribution of Linux from Red Hat, Inc. of Durham, N.C.).","The above-described computer hardware and software are presented for purposes of illustrating the basic underlying desktop and server computer components that may be employed for implementing the present invention. For purposes of discussion, the following description will present examples in which it will be assumed that there exists an MTA (e.g., \u201csendmail\u201d\u2014the Sendmail MTA) that communicates with one or more other MTAs (e.g., remote MTAs), as well as other relevant systems (e.g., a flow control filter of the present invention, described below). The present invention, however, is not limited to any particular environment or hardware configuration. In particular, an MTA distinction is not necessary to the invention, but is used to provide a framework for discussion. Instead, the present invention may be implemented in any type of system architecture or processing environment capable of supporting the methodologies of the present invention presented in detail below.","II. Filtering on a Per-domain Basis","A. Introduction","1. Basic SMTP","Most e-mail systems that send mail over the Internet use SMTP to send messages from one server to another. SMTP transports a mail object, which contains an envelope and content. The SMTP envelope is sent as a series of SMTP protocol units or commands. It includes an originator address (to which error reports should be directed), one or more recipient addresses, and optional protocol extension material. The SMTP content is sent in the SMTP DATA protocol unit and has two parts: the headers and the body. If the content conforms to other contemporary standards, the headers form a collection of field\/value pairs structured as in the message format specification; the body, if structured, is defined according to MIME. The SMTP design is based on the following model of communication. In response to a user mail request, a sender-SMTP establishes a two-way transmission channel to a receiver-SMTP. The receiver-SMTP may be either the ultimate destination or an intermediate. SMTP commands are generated by the sender-SMTP and sent to a receiver-SMTP. SMTP replies are sent from the receiver-SMTP to the sender-SMTP in response to the commands. Once the transmission channel is established, the SMTP-sender sends a MAIL FROM command indicating the sender of the mail. If the SMTP-receiver can accept mail, it responds with an OK reply. The SMTP-sender then sends a RCPT TO command identifying a recipient of the mail. If the SMTP-receiver can accept mail for that recipient, it responds with an OK reply; if not, it responds with a reply rejecting that recipient (but not the whole mail transaction). The SMTP-sender and SMTP-receiver may negotiate several recipients. When the recipients have been negotiated, the SMTP-sender sends the mail data (DATA command), terminating with a special sequence. If the SMTP-receiver successfully processes the mail data it responds with an OK reply. Further description of SMTP may be found in RFC 821 (and subsequent RFC 2821), the disclosure of which is hereby incorporated by reference.","2. Sendmail Milter Interface","The present invention is implemented as a server-side flow control filter service that interacts with a mail server during arrival of an incoming message. This interaction may be achieved through use of Sendmail \u201cMilter\u201d interface. The Sendmail Mail Filter API (Milter) provides an interface for third-party software to validate and modify messages as they pass through the mail transport system. Filters can process messages' connection (IP) information, envelope protocol elements, message headers, and\/or message body contents, and modify a message's recipients, headers, and body. Using Sendmail's corresponding configuration file, one can specify which filters are to be applied, and in what order, allowing an administrator to combine multiple independently-developed filters. Thus in this manner, the Milter plug-in architecture allows a developer to, in effect, plug into the e-mail delivery system for inserting custom subroutines or other processing. Accordingly, in the preferred embodiment, the flow control filter employs the Sendmail Milter interface for accessing internal phases and data of SMTP processing, and blocking or permitting message processing. For further description of Sendmail's Milter, see, e.g., \u201cFiltering Mail with Sendmail\u201d available from Sendmail, Inc. (and currently available via the Internet at www. sendmail.com\/de\/partner\/resources\/development\/milter_api\/), the disclosure of which is hereby incorporated by reference.","B. Overview of Per-domain Filtering","As described above, with each new connection a child MTA process is created. In accordance with the present invention, each child process connects to the flow control filter service, so that it can interact with the service during arrival of a message. This interaction provides a complete description of the incoming client, including IP address and host name, as well as the complete SMTP interaction, including HELO (i.e., initial \u201chello\u201d handshake), MAIL FROM (i.e., sender information), RCPT TO (i.e., recipient list), and DATA (i.e., entire message body). Since the flow control filter service monitors all children processes, it attains a global view of traffic flowing through the system. By virtue of its global view, the flow control filter service can track information on a per domain basis, including total volume of e-mail received from a particular domain over a given period of time. Examples of other metrics that may be tracked include total connections and total senders (count) encountered for a particular domain over a given period of time. Other examples include total number of different recipients, total number of envelopes, and total aggregate volume of mail encountered for a particular domain over a given period of time. Since the knowledge lost by the forking process is captured by the flow control filter service, the service is in a position to enforce policy-based rules, including placing restrictions on child processes, based on the per-domain tallies encountered.","This approach may be easily scaled, for application on a site-wide basis. In that instance, the flow control filter service monitors the children processes for a number of e-mail servers at a given site. In such a configuration, the flow control filter service would apply policy on a global (site) basis, instead of on a per server basis.","C. Architecture Modification to Provide Per-Domain Filtering",{"@attributes":{"id":"p-0056","num":"0074"},"figref":"FIG. 4","b":["400","420","401","411","411","415","1","1","415","1","415","420","2","417","1","415","2","417","420"]},"The reporting to the flow control filter  occurs at every stage of the connection. At the beginning of its connection, for example, the child MTA (C)  sends a message to the flow control filter  indicating that an incoming connection has been requested from a particular domain. In response to this message, the flow control filter  approves or disapproves the connection request, based on what has transpired already (e.g., number of connections from this domain) and the policy\/rules  currently in force. Similarly, at each stage of the SMTP dialog (between the outside MTA  and the child MTA (C) ), the child MTA (C)  posts a message to the flow control filter  for indicating the exact contents of the SMTP dialog. Again, the flow control filter  approves or disapproves each phase of the SMTP dialog exchange (e.g., \u201cproceed\u201d or \u201cdo not proceed\u201d), based on what has transpired already and the policy\/rules  currently in force. In this manner, policy can also be applied based on the specific data which comprises a given e-mail message.","When the final interaction between a given child MTA (e.g.,  or ) and the flow control filter  has completed, the flow control filter  issues a final disposition indicating whether the current incoming e-mail message should be accepted or rejected. Thereafter, the connection between the child MTA and the flow control filter  may be terminated. If the incoming connection is delivering several messages, the connection between a corresponding child MTA and the flow control filter  will persist, so that it may be reused until the child MTA terminates the connection (at the conclusion of its operation, or in response to instructions from the flow control filter ).","D. Flow Control Filter Architecture and Basic Operation",{"@attributes":{"id":"p-0060","num":"0078"},"figref":"FIG. 5","b":["500","501","505","509","501","500","500","501","505","505","500","505","500"]},"By maintaining session-specific information, the flow control filter  can track information characterizing system operation. For instance, the flow control filter  can log timestamp information pertaining to the occurrence of a particular event of interest, as well as maintaining running totals indicating how often that event has occurred. By comparing this information against configurable policy rules (e.g., maximum number of times that a particular event is allowed to occur in a given time period), the flow control filter  may selectively block particular events (e.g., until a configurable timer has elapsed). Thus, the tracking of information allows the flow control filter  to moderate traffic flow through one's e-mail system.","Basic operation occurs as follows. When a new connection request arrives, the flow control filter  creates a new connection thread (e.g., \u201cThread #1\u201d) within the flow control engine . The connect callback function stores relevant connection information (\u201cconnect info\u201d) in thread-specific memory (e.g., memory for Thread #1). At the level of the flow control engine , the incoming information for the current SMTP phase\u2014here, connection information\u2014is compared against configurable policy rules. If no rules are violated by permitting the connection, then the flow control engine  (Thread #1) returns an acknowledgment of \u201cOK\u201d, whereupon processing may continue to the next SMTP phase. Otherwise, the flow control engine  returns a \u201cReject\u201d result, whereupon the incoming connection is rejected.","If a \u201cReject\u201d result did not occur, processing of subsequent SMTP phases continues in this manner, with the other corresponding callback functions contacting the flow control engine  about specific SMTP-phase information. Therefore, after the connection is approved, processing of the SMTP \u201cMAIL FROM\u201d phase ensues, using the \u201cMAIL FROM\u201d callback function. Here, the \u201cMAIL FROM\u201d callback function contacts the flow control engine  with sender information. In the same manner as before, the flow control engine  either accepts or rejects the information, based on application of policy rules to the sender information. Finally, the \u201cRCPT TO\u201d callback function posts the recipient information to the flow control engine . Again, this information is either accepted or rejected by the flow control engine . In any instance where a rejection occurs, subsequent SMTP phases for the incoming message are blocked. The system may be configured to return a specific error code and\/or a message (e.g., \u201cAOL.com has exceeded its totals for the hour\u201d). If no rejection has occurred, on the other hand, the incoming message will be successfully processed.","E. Policy Rules","1. Classes of Hosts","As described above, the flow control filter references a policy\/rules configuration file, for determining how a particular event is processed. In the currently preferred embodiment, the configuration file describes administrator-defined classes of hosts, with each class being defined by domain. The classes may be assigned arbitrary administrator-supplied class names. During the \u201cconnect\u201d SMTP phase for a given message, the flow control filter attempts to classify the host (domain) for an incoming message into one of the administrator-defined host classes.","Each class may be defined to include events to monitor. Each event monitored is associated with three class members: current running total, maximum, and timeframe (to monitor). Additionally, the class tracks a timestamp indicating when monitoring commenced. During run time, these members may be in an in-memory table upon loading of the configuration file, and maintained on an ongoing basis by corresponding threads (from the flow control engine) during message processing. Thus, during message processing, threads from the flow control engine update totals, as appropriate. When a limit is exceeded (e.g., in a given time period), a corresponding administrator-defined error message is returned and further traffic from that host is blocked (until resetting of the time period). The system administrator may configure how firmly the system should reject the message: either the message is blocked as a temporary failure (which invites the sending MTA to resend later), or it is blocked as a permanent failure (which typically generates a \u201cbounce\u201d message).","The configuration file supports an \u201caggregation\u201d option. When aggregation is enabled for a class, the class data structure applies to all hosts (e.g., all AOL.com hosts). For example, if A.AOL.com and B.AOL.com both connect to the system, then the running totals for both are applied to the corresponding class data structure. If aggregation is not enabled, the system will create separate instances of each class. Each instance will have an identical copy of the specified limits, however, the running totals for each are maintained separately.","2. Policy Configuration","The configuration file is a text file whose contents follow the well-known Apache configuration file format. A Class configuration block defines a set of limits for clients that fit in that class. Within each block, the limits are defined, as well as patterns that are matched against incoming connections. Each client connection is associated with the first class whose definition matches it. That client's inbound SMTP traffic is then subject to the limitations defined by that class.","A Class is defined with the following syntax:\n\n",{"@attributes":{"id":"p-0072","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter","Value Format","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Host","hostname.","Specifies which hosts fall within this"]},{"entry":[{},"domain","class. A specific hostname must"]},{"entry":[{},"ip-addr","match exactly (matching is case-"]},{"entry":[{},"ip-block\/mask*","insensitive). A domain must match"]},{"entry":[{},{},"the hostname by being a right-"]},{"entry":[{},{},"justified substring match in the"]},{"entry":[{},{},"hostname (matching is case-"]},{"entry":[{},{},"insensitive). The IP address"]},{"entry":[{},{},"must match exactly, or the IP"]},{"entry":[{},{},"address of the client must fall"]},{"entry":[{},{},"within the specified IP block."]},{"entry":[{},{},"If \u201c*\u201d is present, all"]},{"entry":[{},{},"hosts match. Multiple Host"]},{"entry":[{},{},"entries may be present in any"]},{"entry":[{},{},"Class definition."]},{"entry":["Aggregate","{ True | False }","If True, the running totals for this"]},{"entry":[{},{},"class apply across all hosts that"]},{"entry":[{},{},"fall within the class. If False"]},{"entry":[{},{},"each host within the class has"]},{"entry":[{},{},"individual limits as defined"]},{"entry":[{},{},"within this class. For example,"]},{"entry":[{},{},"if the class applies to all"]},{"entry":[{},{},"hosts in domain example.com and"]},{"entry":[{},{},"connections arrive from hosts"]},{"entry":[{},{},"a.example.com and b.example.com,"]},{"entry":[{},{},"then if this feature is set to"]},{"entry":[{},{},"False, each host is counted as"]},{"entry":[{},{},"having made one connection and"]},{"entry":[{},{},"the limits defined apply to each"]},{"entry":[{},{},"host individually; if this"]},{"entry":[{},{},"feature is set to True, the"]},{"entry":[{},{},"entire class is counted as"]},{"entry":[{},{},"having made two connections"]},{"entry":[{},{},"and the limits defined apply"]},{"entry":[{},{},"to the class-wide totals. The"]},{"entry":[{},{},"default is False."]},{"entry":["Cascade","{ True | False }","If this is True and an arriving"]},{"entry":[{},{},"connection or message would"]},{"entry":[{},{},"cause the class or host to"]},{"entry":[{},{},"exceed its limits, the filter"]},{"entry":[{},{},"will attempt to place the"]},{"entry":[{},{},"connection into the next"]},{"entry":[{},{},"available matching class"]},{"entry":[{},{},"whose limits have not yet"]},{"entry":[{},{},"been exceeded. If False,"]},{"entry":[{},{},"the message will fail as"]},{"entry":[{},{},"defined by the Response"]},{"entry":[{},{},"setting. The default is False."]},{"entry":["Connections","lim \/ time","Specifies that no more than lim"]},{"entry":[{},{},"connections can arrive within"]},{"entry":[{},{},"the specified time. The time is"]},{"entry":[{},{},"assumed to be in seconds unless"]},{"entry":[{},{},"terminated by a letter such as"]},{"entry":[{},{},"d (days), h (hours), or m"]},{"entry":[{},{},"(minutes). These can also be"]},{"entry":[{},{},"combined (e.g. 1d6h for one"]},{"entry":[{},{},"day and six hours)."]},{"entry":["Envelopes","lim \/ time","Specifies that no more than lim"]},{"entry":[{},{},"distinct messages can arrive"]},{"entry":[{},{},"within the specified time. The"]},{"entry":[{},{},"time is as defined above."]},{"entry":["Message","[ SMTP error : [","Defines the error message to be"]},{"entry":[{},"ESC : ]]","returned whenever the selected"]},{"entry":[{},"message","Response is invoked. The message"]},{"entry":[{},{},"is required. It is also possible"]},{"entry":[{},{},"to specify a standard SMTP error"]},{"entry":[{},{},"code as per RFC821, and an"]},{"entry":[{},{},"Enhanced Status Code (ESC) as"]},{"entry":[{},{},"defined by RFC1893. If no message"]},{"entry":[{},{},"is specified, whatever the MTA's"]},{"entry":[{},{},"default response text message is"]},{"entry":[{},{},"will be used."]},{"entry":["Recipients","lim \/ time","Specifies that no more than lim"]},{"entry":[{},{},"distinct recipients can be"]},{"entry":[{},{},"addressed within the specified"]},{"entry":[{},{},"time. The time is as defined"]},{"entry":[{},{},"above."]},{"entry":["Response","{ DISCARD |","Selects the action to be taken"]},{"entry":[{},"REJECT |","when one or more of the limits"]},{"entry":[{},"TEMPFAIL  }","for the class is exceeded."]},{"entry":[{},{},"DISCARD causes the server MTA"]},{"entry":[{},{},"to return a success message to"]},{"entry":[{},{},"the client MTA and silently drop"]},{"entry":[{},{},"the message; REJECT causes the"]},{"entry":[{},{},"server MTA to return a permanent"]},{"entry":[{},{},"(SMTP 5xx) error message to the"]},{"entry":[{},{},"client MTA; and TEMPFAIL causes"]},{"entry":[{},{},"the server MTA to return a"]},{"entry":[{},{},"temporary (SMTP 4xx) error"]},{"entry":[{},{},"message to the client MTA. The"]},{"entry":[{},{},"default is REJECT."]},{"entry":["Senders","lim \/ time","Specifies that no more than lim"]},{"entry":[{},{},"distinct senders can be"]},{"entry":[{},{},"addressed within the specified"]},{"entry":[{},{},"time. The time is as defined"]},{"entry":[{},{},"above."]},{"entry":["Volume","lim \/ time","Specifies that no more than"]},{"entry":[{},{},"lim bytes of message body can"]},{"entry":[{},{},"be sent within the specified"]},{"entry":[{},{},"time. The time is as defined"]},{"entry":[{},{},"above. The lim can be specified"]},{"entry":[{},{},"in larger units by ending the"]},{"entry":[{},{},"limit value with a k (for"]},{"entry":[{},{},"kilobytes), m (for megabytes)"]},{"entry":[{},{},"or g (for gigabytes)."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The absence of any of the limit lines in a class suggests that that criteria will not be used to limit the flow for that class. The absence of all of the limit lines in a class suggests that hosts in that class may send mail to the server MTA without bound. The configuration file is read when the filter is started, or upon a new connection if the configuration file has been updated since it was last read. Whenever the configuration file is reloaded, all current counts and timestamps used to maintain totals for each class are discarded. If an incoming connection applies to no classes defined in the file, the arriving message(s) are delivered normally.","3. Policy Configuration Example","The following configuration class definitions, which may be created in a text editor by a user, illustrates specification of policy rules.\n\n","F. Summary of Overall Operation",{"@attributes":{"id":"p-0077","num":"0110"},"figref":"FIGS. 6A\u2013D","b":"600"},"Invocation of the flow control filter begins with the MTA (i.e., a child MTA of the original (parent) listener) connecting to the flow control filter (e.g., using Sendmail Milter protocol), as shown at step ; the filter accepts the connection. As shown at step , the MTA and the filter perform a handshake sequence, including feature and parameter negotiation. This allows the two to agree upon what version of the Sendmail Milter protocol is to be employed for communication. At the conclusion of the handshake sequence, a new thread is created (i.e., in the flow control engine) for processing the new connection\/message. Now, the MTA passes to the filter the corresponding connection information (e.g., IP address and host name) of the sending MTA, as indicated at step . This information is passed to the previously described connection callback function, thus making the connection information available to the filter. Thus, based on the connection information, the filter may look up matching class data from the configuration file, as shown at step . In the event that no matching class data is found, tested at step , the filter will assume unrestricted access for the host and therefore will accept the connection and message. In that case, the flow control engine thread handling the connection may terminate, as there is no further filtering work to be done for this incoming connection and message; the MTA proceeds normally with no further interaction with the filter. Otherwise, the method proceeds to the following filtering steps.","At step , the method tests whether class limits have been reached. In the event that limits have not been reached (i.e., \u201ctrue\u201d) at step , the filter instructs the MTA to continue and increments the current connection count, as indicated at step . Otherwise (i.e., \u201cfalse\u201d), the method terminates with the filter rejecting the connection and returning an administrator-defined error code, as indicated by step . In the event that the process did not terminate, at step , the MTA reports the sender information to the filter; this occurs in response to the \u201cMAIL FROM\u201d SMTP phase. At step , the method notes the sender (i.e., who is the sender) in the class. The administrator-defined class may include, for example, a sender-based parameter indicating that the filter should note the number of unique senders that have arrived in a given timeframe for this particular host (of the class). This is designed in particular to catch \u201cspammer\u201d addressers, as they tend to randomize sender addresses. As another example, a sender-based parameter may indicate other maximum limits, such as a maximum aggregate byte total or maximum message count acceptable from a given sender (e.g., over a specified time period). In a manner similar to above, the method tests whether class' sender limits have been reached, as indicated at step . In the event that limits have not been reached (i.e., \u201ctrue\u201d) at step , the filter instructs the MTA to continue and increments the current unique sender totals, as indicated at step . Otherwise, the method terminates with the filter rejecting the message (returning any administrator-defined error code), as indicated by step .","In the event that the filtering process has not terminated based on sender information, the method proceeds to test recipient (\u201cRCPT TO\u201d) information, at step . The configuration file allows the administrator to define a class that limits the number of unique recipients received for that class, over any given time span. As a given message may have multiple recipients, step  repeats for each recipient (information) of the message. As before, if specified limits are exceeded, the method terminates with the filter rejecting the message (returning any administrator-defined error code), as indicated by step . Otherwise, the method updates totals, at step , and proceeds.","At step , the MTA reports the message body, which may be transmitted as one or more blocks. At step , the method updates a running total of message size. This information is used to determine the aggregate total of bytes received from a given source over a period of time. At step , the MTA reports \u201cend of message\u201d for the current incoming message. Then, at step , the method compares the message size against class limits specified in the configuration file. Again as before, if specified limits are exceeded, the method terminates with the filter rejecting the message (returning any administrator-defined error code), as indicated by step . Otherwise, the incoming message has passed all filters and is accepted, as shown at step . Now, the method may repeat for other incoming messages. Throughout the operation of the method, class totals are updated. Once a given time period has elapsed for a class (i.e., current time exceeds the combination of the original \u201ctimestamp\u201d plus \u201ctime limit\u201d), totals for the class may be reset (e.g., to zero).","Appended herewith as Appendix A are source code listings (in the C\/C++ programming language) providing further description of the present invention. A suitable C\/C++ compiler\/linker environment for compiling the source listings is available from a variety of vendors, including Microsoft Corporation of Redmond, Wash. and Borland Software Corporation (formerly, Inprise Corporation) of Scotts Valley, Calif.","While the invention is described in some detail with specific reference to a single-preferred embodiment and certain alternatives, there is no intent to limit the invention to that particular embodiment or those specific alternatives. All told, those skilled in the art will appreciate that modifications may be made to the preferred embodiment without departing from the teachings of the present invention.",{"@attributes":{"id":"p-0084","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"APPENDIX A: SOURCE CODE LISTINGS"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/*"},{"entry":"**\u2002CLASS -- description of a class and its current state"},{"entry":"**"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["**","The class whose limits and totals are applied will be selected upon"]},{"entry":["**","receipt of a MAIL FROM command. This does mean the applied"]},{"entry":["**","class can change between envelopes within the same connection."]},{"entry":"*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef struct Class * Class;"},{"entry":"struct Class"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bool","cls_aggr;","\/* aggregate? *\/"]},{"entry":[{},"bool","cls_cascade;","\/* cascade? *\/"]},{"entry":[{},"u_long","cls_conns;","\/* connection count *\/"]},{"entry":[{},"u_long","cls_maxconns;","\/* max. connection count *\/"]},{"entry":[{},"u_long","cls_envs;","\/* envelope count *\/"]},{"entry":[{},"u_long","cls_maxenvs;","\/* max. envelope count *\/"]},{"entry":[{},"u_long","cls_maxsenders;","\/* max. sender count *\/"]},{"entry":[{},"u_long","cls_maxrcpts;","\/* max. recipient count *\/"]},{"entry":[{},"size_t","cls_avol;","\/* aggregate volume *\/"]},{"entry":[{},"size_t","cls_maxavol;","\/* max. aggregate volume *\/"]},{"entry":[{},"time_t","cls_connstart;","\/* conn. count start time *\/"]},{"entry":[{},"time_t","cls_conntlim;","\/* conn. count time limit *\/"]},{"entry":[{},"time_t","cls_envstart;","\/* envelope count start time *\/"]},{"entry":[{},"time_t","cls_envtlim;","\/* envelope count time limit *\/"]},{"entry":[{},"time_t","cls_avolstart;","\/* avol start time *\/"]},{"entry":[{},"time_t","cls_avoltlim;","\/* avol time time limit *\/"]},{"entry":[{},"time_t","cls_sendertlim","\/* sender list time limit *\/"]},{"entry":[{},"time_t","cls_rcpttlim;","\/* recipient list time limit *\/"]},{"entry":[{},"char *","cls_message;","\/* failure message to use *\/"]},{"entry":[{},"char *","cls_response;","\/* failure disposition *\/"]},{"entry":[{},"Vector","cls_hostpat;","\/* host patterns which apply *\/"]},{"entry":[{},"Vector","cls_senders;","\/* vector of senders *\/"]},{"entry":[{},"Vector","cls_rcpts;","\/* vector of recipients *\/"]},{"entry":[{},"smutex_t","cls_lock;","\/* lock for this record *\/"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"\/*"},{"entry":"**\u2002MLFI_CONNECT -- handler for new connections"},{"entry":"**"},{"entry":"**\u2002Parameters:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["**","ctx -- milter context"]},{"entry":["**","host -- hostname (possibly NULL?)"]},{"entry":["**","ip -- address, in in_addr form (possibly NULL?)"]},{"entry":"**"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"**\u2002Return value:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["**","An SMFIS_* constant."]},{"entry":"*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"sfsistat"},{"entry":"mlfi_connect(ctx, host, ip)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SMFICTX *ctx;"]},{"entry":[{},"char *host;"]},{"entry":[{},"_SOCK_ADDR *ip;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Context pfc;"]},{"entry":[{},"time_t now;"]},{"entry":[{},"\/* see if the config file was updated; if so, reload and reset *\/"]},{"entry":[{},"if (!pf_confcheck( ) )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return SMFIS_TEMPFAIL;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* initialize a new context for this session *\/"]},{"entry":[{},"pfc = pf_initcontext( );"]},{"entry":[{},"if (pfc == NULL)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (dolog)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"syslog(LOG_ERR, \u201cunable to allocate new context: %m\u201d);"]},{"entry":[{},"return SMFIS_TEMPFAIL;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/* store the client hostname and IP *\/"]},{"entry":[{},"if (host != NULL)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pfc->ctx_clienthost = arena_strdup(pfc->ctx_arena, host);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (ip ?= NULL)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pfc->ctx_clientip = arena_malloc(pfc->ctx_arena,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"sizeof (_SOCK_ADDR));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"memcpy(pfc->ctx_clientip, ip, sizeof(_SOCK_ADDR));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/* store it in thread-specific space *\/"]},{"entry":[{},"smfi_setpriv(ctx, pfc);"]},{"entry":[{},"\/* select the class *\/"]},{"entry":[{},"pfc->ctx_class = pf_selectclass (pfc);"]},{"entry":[{},"if (pfc->ctx_class == NULL)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (dolog)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"syslog(LOG_DEBUG, \u201c%s: no classes match; accepting\u201d,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pfc->ctx_msgid);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pf_cleanup(ctx);"]},{"entry":[{},"return SMFIS_ACCEPT;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"pfc->ctx_confread = TRUE;"]},{"entry":[{},"\/* if we're over the limit, enact the class's disposition *\/"]},{"entry":[{},"if (pf_atlimit(pfc->ctx_class))"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int ret;"]},{"entry":[{},"pf_failmsg(pfc->ctx_class, &ret);"]},{"entry":[{},"pf_cleanup(ctx);"]},{"entry":[{},"return ret;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\/* lock the class *\/"]},{"entry":[{},"(void) smutex_lock(&pfc->ctx_class->cls_lock);"]},{"entry":[{},"\/* increment class connection counter *\/"]},{"entry":[{},"(void) time(&now);"]},{"entry":[{},"if (now > pfc->ctx_class-> cls_connstart +"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pfc->ctx_class->cls_conntlim)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pfc->ctx_class->cls_conns = 0;"]},{"entry":[{},"pfc->ctx_class->cls_connstart = now;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"pfc->ctx_class->cls_conns++;"]},{"entry":[{},"\/* unlock the class *\/"]},{"entry":[{},"(void) smutex_unlock(&pfc->ctx_class->cls_lock);"]},{"entry":[{},"return SMFIS_CONTINUE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/*"},{"entry":"**\u2002MLFI_BODY -- handler for an arbitrary body block"},{"entry":"**"},{"entry":"**\u2002Parameters:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["**","ctx -- milter context"]},{"entry":["**","bodyp -- body block"]},{"entry":["**","bodylen -- amount of data available at bodyp"]},{"entry":"**"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"**\u2002Return value:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["**","An SMFIS_* constant."]},{"entry":"*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"sfsistat"},{"entry":"mlfi_body(ctx, bodyp, bodylen)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SMFICTX *ctx;"]},{"entry":[{},"u_char *bodyp;"]},{"entry":[{},"size_t bodylen;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Context pfc;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"#ifndef DEBUG"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"assert (ctx != NULL);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"#endif \/* !DEBUG *\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"assert (bodyp != NULL);"]},{"entry":[{},"pfc = (Context) smfi_getpriv(ctx);"]},{"entry":[{},"assert(pfc != NULL);"]},{"entry":[{},"\/* increment size count *\/"]},{"entry":[{},"pfc->ctx_msgsize += bodylen;"]},{"entry":[{},"return SMFIS_CONTINUE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/*"},{"entry":"**\u2002MLFI_EOM -- handler called at the end of the message; we can now"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["**","decide based on the configuration what to do with this message,"]},{"entry":["**","update class information, and return the result"]},{"entry":"**"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"**\u2002Parameters:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["**","ctx -- milter context"]},{"entry":"**"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"**\u2002Return value:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["**","An SMFIS_* constant."]},{"entry":"*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"sfsistat"},{"entry":"mlfi_eom(ctx)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"SMFICTX *ctx;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bool added;"]},{"entry":[{},"int c;"]},{"entry":[{},"int n;"]},{"entry":[{},"int ret;"]},{"entry":[{},"time_t now;"]},{"entry":[{},"char *hostname;"]},{"entry":[{},"ADDRESS a;"]},{"entry":[{},"Context pfc;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"#ifndef DEBUG"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"assert(ctx != NULL);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"#endif \/* !DEBUG *\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pfc = (Context) smfi_getpriv(ctx);"]},{"entry":[{},"assert(pfc != NULL);"]},{"entry":[{},"\/* get hostname; used in the X header and in new MIME"]},{"entry":[{},"boundaries *\/"]},{"entry":[{},"hostname = smfi_getsymval (ctx, \u201cj\u201d );"]},{"entry":[{},"if (hostname == NULL)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hostname = HOSTUNKNOWN;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* grab current time *\/"]},{"entry":[{},"(void) time(&now);"]},{"entry":[{},"\/* lock the class *\/"]},{"entry":[{},"(void) smutex_lock(&pfc->ctx_class->cls_lock);"]},{"entry":[{},"\/*"]},{"entry":[{},"** Increment class counters, resetting any values which have"]},{"entry":[{},"** expired."]},{"entry":[{},"*\/"]},{"entry":[{},"\/* envelope counter *\/"]},{"entry":[{},"if (now > pfc->ctx_class->cls_envstart +"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pfc->ctx_class->cls_envtlim)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pfc->ctx_class>cls_envs = 0;"]},{"entry":[{},"pfc->ctx_class->cls_envstart = now;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"pfc->ctx_class->cls_envs++;"]},{"entry":[{},"\/* volume counter *\/"]},{"entry":[{},"if (now > pfc->ctx_class->cls_avolstart +"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pfc>ctx_class->cls_avoltlim)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pfc->ctx_class->cls_avol = 0;"]},{"entry":[{},"pfc->ctx_class->cls_avolstart = now;"]},{"entry":[{},"pfc->ctx_class->cls_avol +=pfc>ctx_msgsize;"]},{"entry":[{},"\/* sender counter *\/"]},{"entry":[{},"added = FALSE;"]},{"entry":[{},"for (c = 0; C < vector_length(pfc->ctx_class->cls_senders); c++)"]},{"entry":[{},"{"]},{"entry":[{},"\/* get next record *\/"]},{"entry":[{},"a = vector_index(pfc->ctx_class->cls_senders, c);"]},{"entry":[{},"\/* if it's the same sender, update the time and relocate *\/"]},{"entry":[{},"if (sm_strcasecmp(string_get_data(a->addr_addr),"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pfc->ctx_sender) == 0)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"vector_remove(pfc->ctx_class->cls_senders, c);"]},{"entry":[{},"a->addr_when = now;"]},{"entry":[{},"vector_append(pfc->ctx_class->cls_senders, a);"]},{"entry":[{},"added = TRUE;"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/* if not expired, stop looking *\/"]},{"entry":[{},"if (a->addr_when + pfc->ctx_class->cls_sendertlim >= now)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* expired; recycle the record *\/"]},{"entry":[{},"(void) vector_remove (pfc->ctx class->cls_senders, c);"]},{"entry":[{},"string_blank(a->addr_addr);"]},{"entry":[{},"string_printf(a->addr_addr, pfc->ctx_sender);"]},{"entry":[{},"a->addr_when =now;"]},{"entry":[{},"vectorappend(pfc->ctx class->cls_senders, a);"]},{"entry":[{},"added = TRUE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* couldn't recycle an old record, so make a new one *\/"]},{"entry":[{},"if (*added)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"a = arena_zalloc(main_arena, sizeof(struct address));"]},{"entry":[{},"a>addr_addr =string_new(main_arena, pfc->ctx_sender);"]},{"entry":[{},"a>addr_when =now;"]},{"entry":[{},"vector_append(pfc->ctx class->cls_senders, a);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/* recipient counter *\/"]},{"entry":[{},"for (n =0; n < vector_length(pfc->ctx_rcpts); n++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"added = FALSE;"]},{"entry":[{},"for (c = 0; c < vector_length(pfc->ctx_class->cls_rcpts); c++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* get next record *\/"]},{"entry":[{},"a =vector_index(pfc->ctx_class->cls_rcpts, c);"]},{"entry":[{},"\/* if it's the same recipient, update and relocate *\/"]},{"entry":[{},"if (sm_strcasecmp(string_get_data (a->addr_addr),"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"vector_index(pfc->ctx rcpts, n)) == 0)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"vector_remove(pfc->ctx class->cls_rcpts, c);"]},{"entry":[{},"a->addr_when = now;"]},{"entry":[{},"vector_append(pfc->ctx_class->cls_rcpts, a);"]},{"entry":[{},"added = TRUE;"]},{"entry":[{},"break;"]},{"entry":[{},"\/* if not expired, stop looking *\/"]},{"entry":[{},"if (a->addr_when + pfc>ctx class->cls_sendertlim"]},{"entry":[{},">= now)"]},{"entry":[{},"break;"]},{"entry":[{},"\/* expired; recycle the record *\/"]},{"entry":[{},"(void) vector_remove(pfc->ctx class->cls_senders, c);"]},{"entry":[{},"string_blank(a->addr_addr);"]},{"entry":[{},"string_printf(a->addr_addr, pfc->ctx_sender);"]},{"entry":[{},"a->addr_when = now;"]},{"entry":[{},"vector_append(pfc->ctx_class->cls_senders, a);"]},{"entry":[{},"added = TRUE;"]},{"entry":[{},"}"]},{"entry":[{},"\/* couldn't recycle an old record, so make a new one *\/"]},{"entry":[{},"if !added)"]},{"entry":[{},"{"]},{"entry":[{},"a =arena_zalloc(main_arena, sizeof(struct address));"]},{"entry":[{},"a->addr_addr = string new(main_arena, pfc->ctx_sender);"]},{"entry":[{},"a->addr_when = now;"]},{"entry":[{},"vector_append(pfc->ctx_class->cls_senders, a);"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"\/* unlock the class *\/"]},{"entry":[{},"(void) smutex_unlock(&pfc->ctx_class->cls_lock);"]},{"entry":[{},"\/* identify the filter, if requested *\/"]},{"entry":[{},"if (addxhdr)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String xfhdr;"]},{"entry":[{},"xfhdr = string_alloc(pfc->ctx_arena, 0);"]},{"entry":[{},"string_printf(xfhdr, \u201c%s v%s %s %s\u201d, PF_PF_PRODUCT,"]},{"entry":[{},"PF_VERSION,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"hostname,"]},{"entry":[{},"pfc->ctx_msgid NULL ? pfc->ctx_msgid"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},":MSGIDUNKNOWN);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (smfi_addheader(ctx, XHEADERNAME,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"string_get_data (xfhdr)) != MI_SUCCESS)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (dolog)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"syslog(LOG_ERR, \u201csmfi_addheader ( ) failed\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pf_cleanup(ctx);"]},{"entry":[{},"return SMFIS_TEMPFAIL;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/* Implement disposition *\/"]},{"entry":[{},"ret = SMFIS_ACCEPT;"]},{"entry":[{},"if (pf_atlimit (pfc>ctx_class))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pf_failmsg(pfc->ctx_class, &ret);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (ret == SMFIS_ACCEPT && dolog)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"syslog(LOG_INFO, \u201c%s accepted\u201d, pfc->ctx_msgid);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* s'all good *\/"]},{"entry":[{},"pf_cleanup(ctx);"]},{"entry":[{},"return ret;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0026","num":"0044"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0027","num":"0045"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0028","num":"0046"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0029","num":"0047"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0030","num":"0048"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0031","num":"0049"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0032","num":"0050"},"figref":"FIGS. 6A\u2013D"}]},"DETDESC":[{},{}]}
