---
title: Method and apparatus for storing and maintaining structured documents
abstract: According to some embodiments, a method and apparatus for storing and maintaining structured documents includes identifying a structured document, decomposing the structured document into a plurality of nodes, each of the nodes representing a portion of information of the document, creating, for each of the nodes, a corresponding object, and loading each of the objects into a database system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07899834&OS=07899834&RS=07899834
owner: SAP AG
number: 07899834
owner_city: Walldorf
owner_country: DE
publication_date: 20041223
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Embodiments of the present invention relate to computing systems. More specifically, some embodiments relate to systems and methods for storing and maintaining structured documents, such as electronic documents formatted with a markup language.","The wide use of computing systems has led to the increased use of electronic documents. Many documents are structured documents and have a number of sections or fragments that may be referenced, viewed, or modified separately. As an illustrative example, this patent disclosure could be formatted as a structured, electronic document with a number of sections including the background, description, claims, etc. Many electronic documents are formatted or structured using a markup language such as the extensible markup language (XML).","There is an increasing need to be able to efficiently access, modify, search and otherwise manipulate these structured documents and the information contained in them. One solution is to store structured documents in relational databases based on the different tags associated with the document. Unfortunately, such a storage technique does not allow multiple users to access and modify portions of a stored document in parallel.","Accordingly, improved techniques for storing and maintaining structured documents are needed. It would be desirable to provide systems and methods for storing structured documents in a database system. It would further be desirable to provide systems and methods allowing multiple users to modify and update structured documents.","To alleviate problems inherent in the prior art, embodiments of the present invention introduce systems, methods, computer program code and means for storing and maintaining structured documents (e.g., such as documents structured using XML or the like). In some embodiments, processor-executable process steps are stored on a storage medium.","For convenience, clarity and ease of exposition, a number of terms are used herein. For example, the term \u201cstructured document\u201d is used to refer to an electronic file of information, such as information representing a document or related information, where the information is tagged or formatted using a markup language such as XML (e.g., as described by the specifications maintained by the World Wide Web Consortium, including the specifications available at www.w3c.org). As used herein, the term \u201cstructured document\u201d includes documents tagged or formatted using other markup or tagging schemes, now known or later developed.","As used herein, each structured document includes one or more \u201cfragments\u201d or \u201csections\u201d defined by the markup language. As an illustrative example, if this patent disclosure were marked-up as a structured document using XML, it could include the following fragments: background, brief description of the drawings, detailed description, claims, and abstract. Pursuant to some embodiments, a \u201cfragment\u201d is a tagged section. In some embodiments, a \u201cfragment\u201d may be a portion of a tagged section (e.g., such as one paragraph of the background section of this patent application).","Features of embodiments will now be described by first referring to .  depicts a system  as one example of an environment in which features of the present invention may be implemented; those skilled in the art, upon reading this disclosure, will appreciate that features of the present invention may be implemented in a wide variety of computing systems.","System  includes one or more client devices -in communication with a database server  (or multiple servers) over a network . For example, client device  may be operated by a user to input, manipulate or interact with data stored in database server . Pursuant to some embodiments of the present invention, a user may operate client device  to input or enter fragments or items of data from structured documents into a database maintained by database server .","Database server , in some embodiments, is a hybrid object-relational database system such as the livecache\u00ae system offered by SAP AG, Inc. of Walldorf, Germany. As will be described further below, a hybrid object-relational database system allows the storage of data as objects (e.g., such as objects created as persistent C++ classes) as well as relational data (e.g., using a structured query language database system such as the MaxDB\u00ae database available from SAP AG, Inc and www.mySQL.com). Further details of one suitable database system are provided in U.S. Pat. No. 6,192,370, the contents of which are hereby incorporated by reference for all purposes.","As will be described further below, system  may be used to store fragments of structured documents as objects. Further, embodiments allow these objects to be easily stored, retrieved and modified, even when multiple users (e.g., operating client devices ) attempt to access a structured document (or fragments thereof) in parallel. Other features and advantages will become apparent to those skilled in the art upon reading the following disclosure.","Referring now to , a system  is shown which includes a client device  in communication with a database server  through an interface . This communication may be over one or more network connections. For example, in some embodiments, system  is implemented in a TCP\/IP environment, and interaction between client device , interface  and database server  is performed using the hypertext transport protocol (\u201cHTTP\u201d) or similar protocols. Client device  may be operated by a user (e.g., such as a database user interested in submitting queries or retrieving information from database server ), or may be operated by a service or other computing routine (e.g., to interact with database server  on behalf of an application program or the like).","Interface  is configured to facilitate communication between client device , decomposition module  and database server , and may be implemented using any of a number of technologies. For example, in one illustrative embodiment, interface  is implemented using the Java\u00ae JDBC application programming interface, and allows client device  to present structured query language (\u201cSQL\u201d) queries and commands to database server  (and to receive SQL responses from the server). Interface  may also be configured to identify requests to submit new structured documents to the database server and to process new structured documents using a decomposition module .","Decomposition module  may be implemented as a software module or code configured to receive an input structured document (e.g., input or transmitted from a user operating client device ), decompose the structured document into one or more nodes, create, and persist at least one C++ (or other object-oriented programming language) object for each node. In some embodiments, (such as those implemented to decompose documents formatted using the XML specifications available at www.w3c.org) processing of an element node includes creating and persisting additional objects to contain attributes of the element node so that parts of an element node can be updated in parallel.","The objects created by decomposition module  are provided to database server  for storage. Pursuant to some embodiments, a user operating client device  may interact with interface  to choose to upload or submit a new structured document for storage in database system . For example, the user may be presented with a user interface or a menu of options providing instructions to upload or submit a file containing a new structured document. Pursuant to some embodiments, this interaction may be automated, such that the user need only select a structured document for upload or submission.","Decomposition module ., in some embodiments, is configured to identify the tagging or coding scheme associated with the structured document submitted from client device  and to decompose the document into one or more nodes. The module, in some embodiments, is further configured to create a C++ object (or other object oriented programming language object) for each node as will be described further below. These object representations of each fragment or portion of the structured document are provided to database system  for storage.","Pursuant to some embodiments, decomposition module  is implemented using a high level language such as C++. In some embodiments, the decomposition module  is implemented as a part of database server . Pursuant to some embodiments, decomposition module  is coded using Java\u00ae and is implemented as a servlet, although those skilled in the art will recognize that the decomposition module may be implemented as a separate module from database server  and\/or may be implemented using a number of different software technologies. For example, decomposition module  may be configured to execute C++ functions including CREATE and STORE, etc.","Pursuant to some embodiments in which structured documents formatted using XML are processed, processing by decomposition module  may take advantage of the XPATH and XQUERY and other related standards (e.g., maintained and made available at www.w3c.org) to address parts of an XML document. For example, XPATH may be used to address parts of an XML document by referring to the document as a tree of nodes and location paths. As will be described further below, this information, along with object identifiers assigned by system , are used to store and maintain documents pursuant to embodiments disclosed herein.","In general, decomposition module  operates to decompose an input structured document into a number of component pieces and maps those pieces to a number of objects (e.g., such as C++ objects) that can later be updated in parallel using a database system. If the entire structured document were persisted as one object, only one user could lock and update the document. Embodiments allow the structured document to be split (or \u201cdecomposed\u201d) into sections or fragments, allowing different users to access and edit separate paragraphs. Further, embodiments allow these individual objects to be persisted in a database system so that they can be easily searched, retrieved, edited, or otherwise manipulated. Embodiments allow structured documents to be stored in a database system without need for a special database schema designed to receive and store components of the document.","Database server , in some embodiments, including the embodiment depicted in , is a hybrid object-relational database system such as the livecache\u00ae system, and includes a object management system (\u201cOMS\u201d)  and a structured query language (SQL) component , each accessing data stored in data storage volumes . For example, data may be stored in volumes  as pages -of information. Pursuant to some embodiments, object data are stored in pages -of memory. Each object is identified with an Object Identifier (\u201cOid\u201d) that identifies the page on which the object is stored. The OMS tracks these Oids, and each object's location in memory. The OMS regards the memory as a logical collection of page sets, each one consisting of a collection of fixed size pages. Each page chain corresponds to a particular set of objects stored according to an object class.","Pursuant to some embodiments, the Oid of each of the primary objects (e.g., such as the objects representing an element node of a structured document) are stored in traditional relational format in tables  a-to allow database server  to identify and retrieve portions of a structured document. Pursuant to some embodiments, the Oid for additional object instances may be stored in traditional relational format in tables -. As an example, a relational table may be provided which includes a column storing an object's Oid, and other columns to store one or more object attributes. Relationships between objects are identified by OMS  using information persisted in each object.","Pursuant to some embodiments, when object data is retrieved from storage or updated by OMS , transaction management processes are used to provide a consistent view of the object data and avoid collisions between competing updates respectively. For example, if two users (e.g., operating two separate client devices and ) attempt to simultaneously modify or update a fragment of a structured document (e.g., represented by the same object stored in database server ), embodiments ensure that both updates are managed so the database is not left in an inconsistent state. Pursuant to some embodiments, the OMS  manages such transaction management with two SQL operators: COMMIT and ROLLBACK.","The COMMIT transaction signals a successful end-of-transaction. It tells OMS  that a logical unit of work (such as an update to an object) has been successfully completed, the database is in a consistent state again, and all of the updates made by that unit of work can now be committed or made permanent. The ROLLBACK transaction signals an unsuccessful end-of-transaction: it tells OMS  that something has gone wrong, the database might be in an inconsistent state, and all of the updates made by the logical unit of work so far must be \u201crolled back\u201d or undone. If either of the two updates raises an error condition, a ROLLBACK is issued to undo any changes made so far. For example, in some embodiments, OMS  maintains a log (not shown) in which details of all update operations\u2014in particular, before and after values of the updated object\u2014are recorded. Thus if it becomes necessary to undo some particular update, OMS  can use the corresponding log entry to restore the updated object to its previous value. Pursuant to some embodiments, each object (or its updated content) is not made visible to other users of the database system until the transaction in which the object has been created or updated has been \u201ccommitted\u201d. For example, this may be managed by providing consistent views of each object.","Those skilled in the art will appreciate that the use of other transaction management techniques and operators may also be used.","Reference is now made to .  depicts a system  including an input structured document  and an output set of objects -stored in data storage volume(s)  of database server . As shown, the uploading or input of a structured document into a database system, pursuant to some embodiments, involves interaction between a client device , a decomposition module  and a database server . One or more interfaces (not shown) may also be involved (e.g., as discussed in conjunction with  above). Structured document  may be an electronic file formatted using a markup language. As shown, the document  is formatted as an XML document using XML version 1.0. Structured document  is shown with an illustrative example, where the document includes an address portion having three tagged nodes: a name, a city, and a country.","A user operating client device  may upload or submit structured document  to database server  over a network interface. In particular, the document is provided to decomposition module  for processing (either directly or via an interface as described in ). Decomposition module decomposes structured document  into a set of related nodes. In the illustrative example, the structured document is decomposed into seven nodes: four element nodes (address, name, city, and country), and three text nodes (Frank, Berlin, and Germany). Decomposition module  creates C++ objects representing each of these nodes. Each of the C++ objects includes a object identifier (\u201cOid\u201d) and information defining the relationship of the object with the other objects created based on structured document . These objects, and their relationships, are stored in data storage volume(s)  accessible by database server .","The set of objects -created based on the example input document  is shown in . As shown, the seven objects include four element nodes, having Oids -, and three text nodes having Oids -. Each object  includes information identifying its relationship to other objects created based on the structured document . Each object  may be separately retrieved and manipulated using database server .","As shown in , an input document  has been decomposed into seven different objects (one for each node in the document), each having an Oid and each having relationship information defining the node's relationship with other nodes in the document (e.g., such as parent, sibling, child, or the like). In some embodiments, using this relationship information, and using the XPATH and XQUERY standards maintained at www.w3c.org, every part of an XML document can be addressed.","After a structured document has been decomposed and stored as a series of objects in database server , users may interact with database server  to retrieve, view, update and modify portions of the structured document. From the perspective of a user operating a client device, the data manipulation is a typical database interaction. This database interaction (and the ability to allow multiple users access fragments of the same structured document in parallel, will be described further below in conjunction with .","Referring now to , a flow diagram is shown depicting a process  for creating one or more objects from a structured document pursuant to some embodiments. The process depicted in  (and other processes described herein) does not imply a fixed order to the process steps, and embodiments of the present invention may be performed in any order that is practicable.","Process  beings at  where a structured document is received. For example, referring to the system  of , the structured document may be transmitted from a user operating client device  over a network to interface  for loading into database system . For example, the user may interact with a user interface to identify the structured document for loading into database system .","Once the structured document has been received, processing continues at  where the structured document is decomposed into one or more nodes. For example, if the document is structured or tagged using the XML standard, XML Parser software may be used to decompose the structured document into one or more nodes as defined by the XML standard and as described further above.","Processing continues at  where the nodes created at  are mapped and persisted to C++ objects (or other object oriented language objects) for storage in database system . In some embodiments, database system  is a hybrid object-relational database system, and processing at  includes creating each object with a unique Oid identifying a storage location for each object, as well as creating additional entries in a relational table to associate the Oids of the document's anchor objects with relational data to get a relationship between the decomposed XML documents and other relational data.","Processing continues at . Once objects have been created for each of the nodes of the structured document and the objects have been mapped and persisted, the objects are committed for storage in the database system. That is, after completion of processing at , users may interact with the database system to search for, retrieve, and modify fragments of a structured document that are stored in the database system. As will be described further below in conjunction with , pursuant to some embodiments, multiple users are able to search, retrieve, modify and otherwise manipulate the same structured document in parallel.","Referring now to , a flow diagram is shown depicting a process  for updating an object in a database pursuant to some embodiments. Processing begins at  when a request to modify an object is identified. For example, referring to the components of , processing at  may include interaction between a user operating a client device  and database server . The user may interact with database server  via a user interface allowing the user to query, view, modify, and otherwise manipulate data stored in database server . Processing at  may be the result of a query submitted by the user to view a portion of a structured document stored in database server . In the transaction of , the user desires to modify some aspect of a portion of the structured document (that is, the user is attempting to modify an object associated with the structured document). From the user's perspective, processing at  may simply include editing text or other attributes associated with an object, and attempting to submit the edited object to the database system. From the perspective of the database system, processing at  may include receiving a modify or update request associated with a particular object.","Processing at  includes processing by the database system to attempt to update or modify the object in the database system. Pursuant to some embodiments, processing at  includes performing transaction management to identify whether updating the data would create a collision with another update or modification of the same object. Embodiments allow multiple users to access data in parallel, this parallel access can result in potential collisions. Processing at  operates to avoid collisions. For example, in some embodiments, processing at  includes determining whether any other transactions have modified the object during the same time period. This determination may include consulting a transaction log or other table to determine if the object has changed in any way since the object was retrieved for the user, and prior to receiving the request to modify at .","Processing continues at  where a determination is made whether completion of the modify request received at  will result in a collision with another modification of the same object. If so, processing continues at  where the view of the object is refreshed. In some embodiments, (as shown) processing continue at  where a further attempt is made to update the database (e.g., if the new view of the object still matches the initial request, the database may be updated). In some embodiments, the update may fail and the user may be notified. If desired, the user may elect to resubmit the same modification request, or the user may terminate or modify the request.","If processing at  indicates that completion of the modification request received at  will not result in a collision, processing continues at  where the modified object is committed to the database. That is, the modifications are entered into the database and the modified object is available for viewing, further modification or other manipulation by users of the database system. In this manner, embodiments allow multiple users to store, retrieve, modify, and otherwise manipulate the same structured document in parallel. For example, multiple users can interact with a database system pursuant to the invention to work on the same structured document. The transaction management and database techniques of the present invention ensure data consistency and availability.","Although the present invention has been described above with respect to some embodiments thereof, it should be noted that the above-described embodiments may be altered to create completely or partially different embodiments without departing from the spirit and scope of the appended claims.","For example, although some embodiments have been described herein as relating to the processing, storage and maintenance of structured documents formatted using XML, those skilled in the art will recognize that features of embodiments may be used to process, store and maintain structured documents formatted using other markup languages or techniques."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
