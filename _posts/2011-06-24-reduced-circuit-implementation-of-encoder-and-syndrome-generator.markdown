---
title: Reduced circuit implementation of encoder and syndrome generator
abstract: An error correction method and system includes an Encoder and Syndrome-generator that operate in parallel to reduce the amount of circuitry used to compute check symbols and syndromes for error correcting codes. The system and method computes the contributions to the syndromes and check symbols 1 bit at a time instead of 1 symbol at a time. As a result, the even syndromes can be computed as powers of the odd syndromes. Further, the system assigns symbol addresses so that there are, for an example GF(2) which has 72 symbols, three (3) blocks of addresses which differ by a cube root of unity to allow the data symbols to be combined for reducing size and complexity of odd syndrome circuits. Further, the implementation circuit for generating check symbols is derived from syndrome circuit using the inverse of the part of the syndrome matrix for check locations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08739006&OS=08739006&RS=08739006
owner: International Business Machines Corporation
number: 08739006
owner_city: Armonk
owner_country: US
publication_date: 20110624
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","STATEMENT OF GOVERNMENT INTEREST","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/360,265, filed on Jun. 30, 2010, the entire contents and disclosure of which is incorporated herein by reference as if fully set forth herein.","This invention was made with Government support under subcontract number B554331 awarded by the Department of Energy. The Government has certain rights in this invention.","The present invention relates generally to error correcting codes implemented in computer memory systems.","During the process of storing data in computer memory and then retrieving it, the data may be corrupted; therefore an error-correcting-code is used to encode the data before it is stored, and decode it after it was retrieved. Very often a Reed-Solomon (RS) code is used. The overall RS encode and decode process is shown in respective  which, in sum, depicts an error correction system, implementing, for example, a Reed Solomon encoding scheme. Generally, in the encode system  shown in , during a write operation, the raw data , usually a cache line, is input to an encoder device  which computes and adds check symbols  to the data and stores a code-word  (data including the check symbols) in a memory storage device.","In some instances, during transmission to a memory storage device, the encoded word may become corrupted and contain errors. In the decode system  shown in , the code-word \u2032 which may contain errors is read from memory during a read operation, and the code-word is sent to an (error correcting circuit) ECC, e.g., including an RS-Decoder  and a syndrome generator which corrects any errors which had occurred, and stores the encoded data  is forwarded to the cache, for example.","The first stage of the Decoder of a Reed-Solomon code is the Syndrome-generator  for calculating syndromes that will be key in detecting where the errors are and correcting the errors. In some serial implementations, syndrome calculation may take one clock cycle for each syndrome calculation, which speed may suffice for hard disk drives, but would exhibit undue amount of latency for error correcting codes used for computer memory (RAM, SRAM, etc.).","Since latency is critical, the usual parallel implementation of both the Syndrome-generator and the Encoder requires a large amount of circuitry when Reed-Solomon codes are used to protect the data in memory, such as computer memory since both of these modules have a large number of inputs: the Syndrome-generator , for example, receives and uses all the data read from memory to generate the syndromes, and the Encoder  receives and uses all the data to be stored in memory to generate the check symbols.","Ideally, the entire RS decoder circuitry for computer circuitry needs to complete in a very small number of cycles, and it would be highly desirable to provide a circuit implementation that encodes all the data or computes syndromes in parallel in a minimum of clock cycles, e.g., one or 2 clock cycles.","It would be highly desirable to provide a parallel-implemented ECC system of reduced circuit size and method for computing check symbols and syndromes for error correcting codes in a computer memory system.","A novel system and implementation of an Encoder and Syndrome-generator which reduces the amount of circuitry used.","The novel system and implementation of an Encoder and Syndrome-generator operates in parallel to reduce the amount of circuitry used to compute check symbols and syndromes for error correcting codes in as few clock cycles as possible, e.g., 1 or 2 clock cycles.","Further, in one embodiment, the system and method employed computes the contributions to the syndromes and check symbols 1 bit at a time instead of 1 symbol at a time. As a result, the even syndromes can be computed as powers of the odd syndromes.","Further, the implementation circuit for generating check symbols is derived from the syndrome circuit using an inverse of the part of the syndrome generator matrix for check locations. These implementations yield a syndrome generator\/encoder circuit which is less than half the size of a conventional parallel circuit implementation that performs the same task.","In one aspect there is provided, an error correction code (ECC) syndrome generator circuit comprising: first syndrome generator circuitry for receiving data symbols and generating partial odd syndrome values, SPj(k)'s, j odd, for each bit location k of the output data symbol, wherein k=0, 1, 2, . . . K\u22121 bits; second syndrome generator circuitry for receiving the partial odd syndromes [SPj(k)'s, j odd] and computes partial even syndromes values for each bit location k; and, first accumulator circuitry for receiving the partial odd syndromes and partial even syndromes, SPj(k), and compute the syndromes Sj=\u03a3SPj(k), j is number of syndromes to be generated and k is number of bits of in a data symbol.","Further to this aspect, the first syndrome generator circuitry and said second syndrome generator circuit computes contributions to respective partial odd and even syndromes one data bit at a time.","Further to this aspect, a data encoder circuit is implemented for computing check symbols, said data encoder circuit comprising said syndrome generator circuitry, wherein said syndromes generated for data symbols are generated at said syndrome generator circuitry using a first matrix, said data encoder comprising: means for multiplying said generated syndromes to an inverse of said first matrix for determining check symbol values corresponding to said data to be encoded.","In one aspect, the error correction code (ECC) syndrome generator circuit comprises: third syndrome generator circuitry receiving the data symbols and generating respective odd partial check symbols; a fourth syndrome generator circuitry circuit receiving the respective partial check symbols and computing a check symbol vector comprising individual bit values of the check symbol; and, second accumulator circuitry for receiving the check symbol vector comprising individual bit values and accumulating the partial syndromes to result in a check symbol cj=\u03a3cj(k) where j is number of check symbols to be generated and k is number of bits of in a data symbol.","The ECC syndrome generator circuit the syndromes and the check symbols are computed for a Reed-Solomon code over GF(2) with 7 or 8 syndromes and respective 7 or 8 check symbols.","In a further aspect, there is provided a method for computing the syndromes of an Error Correcting Code (ECC) comprising: receiving data symbols at first syndrome generator circuitry and generating partial odd syndrome values, the first syndrome generator circuitry computing partial odd syndrome results [SPj(k)'s] for odd values of j, wherein k=0, 1, 2, . . . , K\u22121 represents the number of bits in a symbol; receiving, at second syndrome generator circuitry, the partial odd syndromes SPj(k)'s, j odd, and computing partial even syndromes from the partial odd syndromes a single bit at a time; and, receiving, at first accumulator circuitry, the partial odd syndromes and partial even syndromes, SPj(k), and compute the syndromes Sj=\u03a3SPj(k), j is number of syndromes to be generated and k is number of bits of in a data symbol.","A computer program product is for performing operations. The computer program product includes a storage medium readable by a processing circuit and storing instructions run by the processing circuit for running a method. The method is the same as listed above.","An implementation of the Encoder and Syndrome-generator which reduces the amount of ECC circuitry for single and multiprocessor systems is now described with respect to a specific code such as a Reed-Solomon code.","As described herein, a parallel implementation of a Reed Solomon (RS) encoder\/decoder is characterized as constituting a polynomial using the element in the Galois field GF(2) where \u201cv\u201d is the symbol size in bits and can be a positive odd or even integer number. As described herein, \u201cn\u201d represents a codeword block length in symbols and may be 72 in one embodiment; and k represent the number of data symbols (data length), e.g., 65, resulting in an RS(72, 65) encoding scheme where the number of RS(n,k) check (block parity) symbols is 7.","For purposes of description herein, and in a non-limiting example, a specific RS code implemented is over a GF(2) field having 72 symbols, seven (7) of which are check symbols, and the remaining 65 symbols are data symbols, i.e., an RS(72, 65). The error correction capability for such an encoding scheme is \u201ct\u201d, where 2t=n\u2212k, for the example RS(72, 65) described herein, up to 3 symbol errors in each code word may be detectable. That is, the RS encoding scheme could generate syndromes (e.g., 7 check symbols) that correct up to 3 errors in the 65 data bytes (e.g., three (3) symbol errors are detectable).","Another reference embodiment has eight (8) check symbols and 64 data symbols, i.e., an RS(72, 64). Each symbol in the codeword is 8 bits wide. The first \u201ck\u201d symbols in the Reed-Solomon Encoder output are data (information) symbols, e.g., 64, and the last n\u2212k symbols, e.g., check (block parity) symbols, is 8. The error correction capability, t, where 2t=n\u2212k, for the example RS(72,64), up to 4 symbol errors in each code word may be detectable.","It is understood that the present invention is readily adapted for handling other RS codes and code word and symbol lengths.","In one aspect, the user can choose how to represent the finite field and operations are defined for and all formulae involve operations of members of the field, i.e., symbols become elements in the field. In the example provided herein, a unique field has 256 elements. For example, in GF256 example embodiment, a target code word or code element will have a length of 72 members (bytes), e.g., 65 bytes of data and 7 additional check symbols (e.g., 7 bytes) added to it. There will be 65 bytes of data, i.e., each element of GF 256 is a \u201cbyte\u201d quantity, and include 7 additional check symbols added by the encoder. Each code word will thus have length 72, i.e., 1 symbol is an element of the GF 256, and the code word is a vector of 72 symbols (72 elements form GF256) and the RS-code is a collection of these code words, e.g., RS (72,65). The code is limited only in the sense of how many distinct 65 bytes patterns there is (number of code words).","Each 65 byte quantity computes a specific 7 byte appendum (check symbols) for storage as a code word. When reading data back, the 65 bytes and 7 check symbols (bytes) are sent to a syndrome generator which determines if the stored data has errors between the time it was read to memory and written back. If no errors, the syndromes generated are all zero; Otherwise, if errors are found, the resulting syndromes will be generated as other 7 byte quantities that inform about the nature of the errors. The information in the syndromes in one embodiment, allows finding the errors for correction.","To fully specify the code, there is assigned a unique memory address to each of the symbol locations. That is, a unique, non-zero, element of the field (in the example described GF(2) field), is assigned to each location. As will be referred to herein, \u03b1, refers to an address location for storing a data symbol, i.e., the address in memory of the idata symbol is designated as \u03b1. A restriction is imposed such that if \u03b1 is an address, then so is \u03c6\u03b1 (and therefore also \u03c6\u03b1), where \u03c6 is an element of the field which satisfies equation 1) as follows:\n\n\u03c6+\u03c6+1=0\u2003\u20031)\n","The restriction assumes that the dimension of the field (GF2) is even (and therefore \u03c6 is an element of the field), and that the number of symbol locations is a multiple of three (3). If the dimension of the field is not even, one or two symbols may be added having a value of \u201c0\u201d, for example, such that a new enlarged code is unique and is a length of multiple of three (3). Thus, symbol addresses (i.e., locations) in memory are governed according to:\n\n\u03b1=\u03b1\u2032\u03c6\n\nwhere \u03b1is global address; \u03b1\u2032refers to an address location within a block of addresses associated with a corresponding code word of an example embodiment (\u03b1\u2032is a relative address within one of the address blocks n); \u201ci\u201d is the index over the entire codeword, e.g., location of the isymbol (i=0, . . . , 71 corresponding to 72 data symbols in an example embodiment described), n=0, 1, 2 for indicating one of three (3) blocks in the example implementation; \u03c6indicates which block as determined by the power of value n, and m=0, . . . , 23 representing a block of 24 symbols (within a block) for an implementation of a code of 72 symbols described.\n","Thus, it is ensured that symbol addresses are assigned so that there are three (3) blocks of addresses which differ by a cube root of unity thereby allowing the data symbols to be combined. As will be described herein below, this ability for combining of data results in shrinkage of the odd syndrome generator circuits, as will be explained in greater detail below.","If the data in location i, which is read from memory, is d, then the syndromes are represented as\n\n","Since the finite fields implemented are vector spaces over Z\/2, every element dcan be expressed as:\n\n","Thus the syndromes are calculated according to:\n\n=\u03a3(\u03b1)=\u03a3\u03a3(\u03b1)().\n","Now defining: SP(k)=\u03a3t(\u03b1)d(k) there is obtained:\n\n=\u03a3().\n","Thus, if, in a memory cycle, only a part of the ddata elements are read, then the summation is performed only over the k's (i.e., bits) which are read.","A basic relation between the SP(k)'s, whose applications contributes much to reducing the size of the syndrome-generator (and as will be described below to that of the encoder as well) is:\n\n()=()*(()).\n","This yields immediately that SP(k)=(t)*(SP(k))=(t)*(SP(k)), and, more generally, if j is odd and r=2then the following syndrome computation results:\n\n()=()*(())\n\nwhere an index \u201cr\u201d runs from 0, . . . , 6 in the example embodiment.\n","Thus, in the circuit which computes the syndromes, there is a component which computes the SP(k)'s for only the odd values of j.","The second relation which reduces the size of the decoder circuit is the way the SP(k)'s are computed (for odd values of j). Recalling the memory addressing relation that \u03b1=\u03b1\u2032\u03c6, where m=0, 1 . . . , 23, then:",{"@attributes":{"id":"p-0055","num":"0056"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"msub":{"mi":["SP","j"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},{"mrow":[{"munder":{"mo":"\u2211","mi":"i"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":["\u03b1","i"]}}},"mi":"j"},"mo":"\u2062","mrow":{"msub":{"mi":["d","i"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}},{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"munder":{"mo":"\u2211","mi":"n"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":[{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},{"mi":["\u03c6","nj"]}],"mo":["\u2062","\u2062"],"mrow":{"msub":{"mi":"d","mrow":{"mi":["m","n"],"mo":","}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}}],"mo":["=","\u2062"],"mi":{}}],"mo":["=","\u2062"],"mi":{}}}},{"mtd":{"mrow":{"mo":["=","\u2062"],"mi":{},"mrow":{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},"mo":"\u2062","mrow":{"munder":{"mo":"\u2211","mi":"n"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mi":["\u03c6","nj"]},"mo":"\u2062","mrow":{"msub":{"mi":"d","mrow":{"mi":["m","n"],"mo":","}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}}}}}},{"mtd":{"mrow":{"mo":["=","\u2062"],"mi":{},"mrow":{"mrow":[{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},"mo":"\u2062","mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}},{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":[{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},{"mi":["\u03c6","j"]}],"mo":["\u2062","\u2062"],"mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}},{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":[{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},{"mi":"\u03c6","mrow":{"mn":"2","mo":"\u2062","mi":"j"}}],"mo":["\u2062","\u2062"],"mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"2"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}],"mo":["+","+"]}}}}]}}}},"Thus, if j=3s",{"@attributes":{"id":"p-0057","num":"0058"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"msub":{"mi":["SP","j"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},{"mrow":[{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m"],"mrow":{"mi":"\u2032","mo":"\u2062","mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}}},"mi":"j"},"mo":"\u2062","mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}},{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},"mo":"\u2062","mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}},{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},"mo":"\u2062","mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"2"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}],"mo":["+","+"]}],"mo":["=","\u2062"],"mi":{}}}},{"mtd":{"mrow":{"mo":["=","\u2062"],"mi":{},"mrow":{"mrow":[{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mrow":[{"mo":["(",")"],"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"}},{"mo":["(",")"],"mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}],"mo":"\u2062"}},{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},{"mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"2"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mo":"."}],"mo":["+","+"]}}}}]}}}},"If j=3s+1, then",{"@attributes":{"id":"p-0059","num":"0060"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"msub":{"mi":["SP","j"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},{"mrow":[{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m"],"mrow":{"mi":"\u2032","mo":"\u2062","mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}}},"mi":"j"},"mo":"\u2062","mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}},{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},"mo":["\u2062","\u2062","\u2062"],"mi":"\u03c6","mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}},{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":[{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},{"mi":"\u03c6","mn":"2"}],"mo":["\u2062","\u2062"],"mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"2"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}],"mo":["+","+"]}],"mo":["=","\u2062"],"mi":{}}}},{"mtd":{"mrow":{"mo":["=","\u2062"],"mi":{},"mrow":{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mo":"(","mrow":{"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},"mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"2"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}],"mo":"+"}}},"mo":"+"}}}}}},{"mtd":{"mrow":{"mi":{},"mo":"\u2062","mrow":{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mrow":[{"mo":["(",")"],"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03c6\u03b1","m","\u2032"]}}},"mi":"j"}},{"mo":["(",")"],"mrow":{"mrow":[{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"2"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}],"mo":"+"}}],"mo":"\u2062"}}}}}]}}}},"If j=3s+2, then",{"@attributes":{"id":"p-0061","num":"0062"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"msub":{"mi":["SP","j"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},{"mrow":[{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m"],"mrow":{"mi":"\u2032","mo":"\u2062","mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}}},"mi":"j"},"mo":"\u2062","mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}},{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":[{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},{"mi":"\u03c6","mn":"2"}],"mo":["\u2062","\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}},{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},"mo":"\u2062","mrow":{"msub":{"mi":"\u03c6d","mrow":{"mi":"m","mo":",","mn":"2"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}],"mo":["+","+"]}],"mo":["=","\u2062"],"mi":{}}}},{"mtd":{"mrow":{"mo":["=","\u2062"],"mi":{},"mrow":{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mo":"(","mrow":{"mrow":{"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["\u03b1","m","\u2032"]}}},"mi":"j"},"mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"2"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}],"mo":"+"}}},"mo":"+"}}}}}},{"mtd":{"mrow":{"mi":{},"mo":"\u2062","mrow":{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mrow":[{"mo":["(",")"],"msup":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msup":{"mi":"\u03c6","mn":"2"},"mo":"\u2062","msubsup":{"mi":["\u03b1","m","\u2032"]}}}},"mi":"j"}},{"mo":["(",")"],"mrow":{"mrow":[{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},{"msub":{"mi":"d","mrow":{"mi":"m","mo":",","mn":"2"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}],"mo":"+"}}],"mo":"\u2062"}}}}}]}}},"br":{},"sub":["m,0 ","m,2 ","m "],"sup":"8"},"In one embodiment, the syndrome-generator circuit , such as shown in , comprises several circuit components: a circuit referred to as COMB(m,k) , an ODD(k) circuit  connected to outputs of COMB(m,k) circuit ; a circuit referred to as EVEN(k) circuit  connected to an output of ODD(k) circuit ; and, a circuit referred to as ACC(j) circuit  connected to outputs of both the EVEN(k) and ODD(k). Details of the COMB(m,k)  is shown in ; details of the ODD(k) circuit  is shown in ; details of the EVEN(k) circuit  is shown in ; and, details of the ACC(j) circuit  is shown in .","The COMB(m,k) circuit  shown in  receives three data inputs: d(k), d(k), d(k) and provides the register and arithmetic logic for computing the three outputs: D(k)=d(k)+d(k)+d(k), D(k)=d(k)+d(k), and D(k)=d(k)+d(k).","The ODD(k) circuit , shown in  receives the D(k)'s, D(k)'s, and the D(k)'s as inputs from COMB(m,k) circuit , and it computes the three partial syndrome outputs:\n\n()=\u03a3(\u03b1\u2032)();\n\n()=\u03a3((\u03b1\u2032))() for all odd, non-zero 's which are multiples of 3;\n\n()=\u03a3((\u03b1\u2032))()+\u03a3((\u03c6\u03b1\u2032))() for all odd 31;\n\n()=\u03a3((\u03b1\u2032))()+\u03a3((\u03c6\u03b1\u2032))() for all odd 32.\n","The EVEN(k) circuit  shown in  receives as inputs from ODD(k) circuit  the partial syndrome outputs SP(k)'s, j odd, and it computes and outputs:\n\n()=()*(())odd, 2.\n","The circuit ACC(j) , shown in  receives as its inputs the partial syndromes, SP(k), and it computes the syndromes S=\u03a3SP(k). It should be understood that when the whole data is not read in one memory cycle then ACC accumulates the partial syndromes over additional memory cycles. More particularly, the seven (7) syndromes (in the example embodiment) are calculated to take each data symbol, multiply it each with an element of finite field and using a summation to produce each syndrome. Symbols are 8 bit quantities, and instead of working with all 8 bits of the symbol together, the calculations are performed 1 bit at a time, i.e., part of syndrome corresponding to first bit in each of data bits is first computed, then part of syndrome corresponding to 2bit in each data byte, . . . etc. for all 8 bits. Then, the eight (8) partial syndromes computed in 8 pieces are combined, e.g., by addition, resulting in syndromes Sto S.",{"@attributes":{"id":"p-0067","num":"0068"},"figref":"FIG. 6","b":["100","100"],"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":["1) First, the data read from memory is input to an array of COMB(m,k) circuits , one COMB(m,k) circuit for each value of m and k. These COMB(m,k) circuits compute the respective D(k)'s, thereby allowing the data symbols to be combined resulting in a reduction of the size of the odd syndrome circuits .","2) The D(k)'s are input to an array of ODD(k) circuits , one ODD(k) circuit for each value of k, which compute the SP(k)'s for all odd j as well as SP(k);","3) The SP(k)'s (j odd), are input to an array of EVEN(k) circuits , one EVEN(k) circuit for each value k, which compute the SP(k)'s for all non-zero even j's;","4) The SP(k)'s are input to the ACC(j)  circuit which computes the syndromes S(in one or more memory cycles)."]}},"In one aspect, based on the decoding algorithm implemented and the memory speed versus the processor speed that runs the decoder algorithm, it is conceivable that the processing herein described may be performed in a single clock cycle, e.g., for a completely parallel encoder implementation where data is operated on and processed as fast as data arrives; however, if the memory speed, for example, is slower than the processor speed, syndromes (and check symbols) in the parallel method described herein, may be computed in 2 or more clock cycles.","Encoder","In a further aspect, the encoder design enables the computation of the check symbols, e.g., seven or eight in the example embodiments described, that when added to end of data, the result when fed in the syndrome generator would be zero. Thus, check symbol computations for the encoder design is efficiently performed by the particular addressing scheme described herein, and solving of a matrix equations involved in syndrome generator computations, wherein the computed syndromes Soutput of the syndrome generator is multiplied by a matrix (an inverse of the matrix used in the syndrome generator) to calculate the check symbols.","That is, in the embodiment shown in , encoder device \u2032 employs the syndrome generator  to work on the data having a check positions initialized to zero, and to calculate check symbols using the inverse of the matrix utilized in syndrome generation. Applying syndrome generator as part of encoder design and multiplying by inverse matrix to obtain the check symbols, i.e., check symbols are computed using modified version of syndrome generator which applies an inverse matrix. The actual matrix B is computed in syndrome generation to include entries comprising powers of addresses (of check symbol locations (\u03b1)r and j running over range of 0, . . . , 6, 7 in the example implementations) and an inverse of this matrix B is precomputed as the code is designed. In the system, the encoder receives the data, e.g., d, d, dhaving check positions equal to zero (e.g., 72 symbols in example embodiment) and these data are input to syndrome generator  to obtain the syndromes, e.g., 7 syndromes. These syndromes are multiplied by the inverse matrix Bcomputed with check positions equal to zero to obtain the check symbol values.","Thus, the encoder \u2032 as shown in , advantageously utilizes the syndrome generator circuitry, and the encoder processing is afforded the same benefits described herein with respect to syndrome generation, e.g., bitwise computation, including reduction of circuit size given the use of smaller matrix computations (e.g., 7\u00d77 matrix) inside the encoder.","For an encoder circuit having a reduced circuit implementation, the seven (or eight) check symbols, in the described embodiment, are first assigned addresses in memory. For the example embodiment described, the system assigns symbol addresses so that, for an example GF(2) which has 72 symbols, there are three (3) blocks of addresses, each of 24 symbols, which differ by a cube root of unity to allow the data symbols to be combined for reducing size and complexity of odd syndrome circuits. In the embodiment of the encoder described herein below with respect to , the check symbols care assigned to addresses \u03b1, for r=0, 1, 2, 3, 4, 5, 6 or 7 (It is understood that the same designation of the addresses is used as in the above description of the syndrome).","More particularly, the data symbols d, e.g., 64 or 65 in the example embodiments, are stored in the remaining addresses a. It should be understood that the described embodiment does not depend on the specific addresses which are assigned to the check symbols, and that the assignment described herein above is just for purposes of an example. In one example, use d=0 if ais an address of a check symbol. Receiving the data, one function of the encoder is to choose the check symbols cthat satisfy the equations:\n\n\u03a3(\u03b1)=\u03a3(\u03b1), for all \n","Denoting by \u201cc\u201d the vector whose components are the c's, then the equations above are written as:\n\n","The encoder starts by treating one bit of the input, i.e., it computes c(k) where, in matrix notation:\n\n","The construction of the encoder is now described by way of example and can be extended to a general case. As was done for the syndrome generator description, supra, this example considers only the case that j is an odd number or 0. In one embodiment, the equation which the check symbols satisfy are given as:",{"@attributes":{"id":"p-0077","num":"0085"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"B","mo":"*","munder":{"mrow":{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"}},{"mrow":[{"mrow":[{"mo":["(",")"],"mtable":{"mtr":[{"mtd":[{"msub":{"mi":["t","k"]}},{"mn":"0"},{"mn":"0"},{"mn":"0"}]},{"mtd":[{"mn":"0"},{"mn":"0"},{"msub":{"mi":["t","k"]}},{"mn":"0"}]},{"mtd":[{"mn":"0"},{"mn":"0"},{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2062","mi":"S"}},{"mn":"0"}]},{"mtd":[{"mn":"0"},{"msub":{"mi":["t","k"]}},{"mn":"0"},{"mn":"0"}]},{"mtd":[{"mn":"0"},{"mn":"0"},{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2062","msup":{"mi":"S","mn":"2"}}},{"mn":"0"}]},{"mtd":[{"mn":"0"},{"mn":"0"},{"mn":"0"},{"msub":{"mi":["t","k"]}}]},{"mtd":[{"mn":"0"},{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2062","mi":"S"}},{"mn":"0"},{"mn":"0"}]}]}},{"mo":["[","]"],"mtable":{"mtr":[{"mtd":{"mrow":{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":{"mi":"D","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}},{"mtd":{"mrow":{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msubsup":{"mi":["a","m"],"mn":"3"},"mo":"\u2062","mrow":{"msub":{"mi":"D","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}}},{"mtd":{"mrow":{"mrow":[{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":{"mi":["a","m"]},"mo":"\u2062","mrow":{"msub":{"mi":"D","mrow":{"mi":"m","mo":",","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}},{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":"\u03c6","mo":["\u2062","\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["a","m"]},"mrow":{"msub":{"mi":"D","mrow":{"mi":"m","mo":",","mn":"2"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}],"mo":"+"}}},{"mtd":{"mrow":{"mrow":[{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msubsup":{"mi":["a","m"],"mn":"5"},"mo":"\u2062","mrow":{"msub":{"mi":"D","mrow":{"mi":"m","mo":",","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}},{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msup":{"mi":"\u03c6","mn":"2"},"mo":["\u2062","\u2062"],"msubsup":{"mi":["a","m"],"mn":"5"},"mrow":{"msub":{"mi":"D","mrow":{"mi":"m","mo":",","mn":"2"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}],"mo":"+"}}}]}}],"mo":"*"},{"mrow":[{"mi":"M","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},{"mi":"V","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}],"mo":"\u2062"}],"mo":["=","\u2062"],"mi":{}}],"mo":["=","\u2062"],"mi":{}}}},"br":[{},{},{},{},{}],"in-line-formulae":[{},{},{},{},{},{}],"i":["D","k","d","k","d","k","d","k","D","k","d","k","d","k","D","k","d","k","d","k"],"sub":["m,0","m,0","m,1","m,2","m,1","m,0","m,2","m,2","m,1","m,2"],"sup":"2"},"Using AQto denote a matrix whose mcolumn is \u03b1, AQto denote the matrix whose mcolumn [\u03b1\u03b1] and AQto denote the matrix whose mcolumn is [\u03c6\u03c6]. There is additionally D(k) denoting the vector whose melement is D(k). Using this notation it follows that:",{"@attributes":{"id":"p-0079","num":"0087"},"maths":[{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"B","mo":"*","munder":{"mrow":{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"}},{"mrow":[{"mo":["(",")"],"msub":{"mtable":{"mtr":{"mtd":[{"msub":{"mrow":{"mi":"M","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"0"}},{"msub":{"mrow":{"mi":"M","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"1"}},{"mrow":{"mi":"M","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}]}},"mn":"2"}},{"mo":["(",")"],"mtable":{"mtr":[{"mtd":{"mrow":{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":{"mi":"D","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}},{"mtd":{"mrow":{"msub":{"mi":"AQ","mn":"0"},"mo":"*","munder":{"mrow":{"msub":{"mi":"D","mn":"0"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"}}}},{"mtd":{"mrow":{"mrow":[{"msub":{"mi":"AQ","mn":"1"},"mo":"*","munder":{"mrow":{"msub":{"mi":"D","mn":"1"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"}},{"msub":{"mi":"AQ","mn":"2"},"mo":"*","munder":{"mrow":{"msub":{"mi":"D","mn":"2"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"}}],"mo":"+"}}}]}}],"mo":"*"}],"mo":"="}}},{"@attributes":{"id":"MATH-US-00006-2","num":"00006.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mstyle":{"mspace":{"@attributes":{"width":"4.4em","height":"4.4ex"}}},"mo":"\u2062","mi":"where"}}},{"@attributes":{"id":"MATH-US-00006-3","num":"00006.3"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mstyle":{"mspace":{"@attributes":{"width":"4.4em","height":"4.4ex"}}},"mo":"\u2062","mrow":{"mrow":[{"msub":{"mrow":{"mi":"M","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"0"},"mo":"=","mrow":{"mo":["(",")"],"mtable":{"mtr":[{"mtd":{"msub":{"mi":["t","k"]}}},{"mtd":{"mn":"0"}},{"mtd":{"mn":"0"}},{"mtd":{"mn":"0"}},{"mtd":{"mn":"0"}},{"mtd":{"mn":"0"}},{"mtd":{"mn":"0"}}]}}},{"msub":{"mrow":{"mi":"M","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"1"},"mo":"=","mrow":{"mo":["(",")"],"mtable":{"mtr":[{"mtd":{"mn":"0"}},{"mtd":{"mn":"0"}},{"mtd":{"mn":"0"}},{"mtd":{"msub":{"mi":["t","k"]}}},{"mtd":{"mn":"0"}},{"mtd":{"mn":"0"}},{"mtd":{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2062","mi":"S"}}}]}}},{"mrow":[{"mi":"and","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"msub":{"mrow":{"mi":"M","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"2"}},{"mo":["(",")"],"mtable":{"mtr":[{"mtd":[{"mn":"0"},{"mn":"0"}]},{"mtd":[{"msub":{"mi":["t","k"]}},{"mn":"0"}]},{"mtd":[{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2062","mi":"S"}},{"mn":"0"}]},{"mtd":[{"mn":"0"},{"mn":"0"}]},{"mtd":[{"mrow":{"msub":{"mi":["t","k"]},"mo":"\u2062","msup":{"mi":"S","mn":"2"}}},{"mn":"0"}]},{"mtd":[{"mn":"0"},{"msub":{"mi":["t","k"]}}]},{"mtd":[{"mn":"0"},{"mn":"0"}]}]}}],"mo":"="}],"mo":[",",","]}}}}]},"Thus, it follows that:",{"@attributes":{"id":"p-0081","num":"0089"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"munder":{"mrow":{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"},"mo":"=","mrow":{"mrow":[{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"mrow":{"msup":{"mi":"B","mrow":{"mo":"-","mn":"1"}},"mo":"\u2062","msub":{"mrow":{"mi":"M","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"0"}}},{"mrow":{"msup":{"mi":"B","mrow":{"mo":"-","mn":"1"}},"mo":"\u2062","msub":{"mrow":{"mi":"M","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"1"}}},{"mrow":{"msup":{"mi":"B","mrow":{"mo":"-","mn":"1"}},"mo":"\u2062","msub":{"mrow":{"mi":"M","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"2"}}}]}}},{"mo":["(",")"],"mtable":{"mtr":[{"mtd":{"mrow":{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":{"mi":"D","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}},{"mtd":{"mrow":{"msub":{"mi":"AQ","mn":"0"},"mo":"*","munder":{"mrow":{"msub":{"mi":"D","mn":"0"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"}}}},{"mtd":{"mrow":{"mrow":[{"msub":{"mi":"AQ","mn":"1"},"mo":"*","munder":{"mrow":{"msub":{"mi":"D","mn":"1"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"}},{"msub":{"mi":"AQ","mn":"2"},"mo":"*","munder":{"mrow":{"msub":{"mi":"D","mn":"2"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"}}],"mo":"+"}}}]}}],"mo":"*"}}}}},"The rank of the matrix BM(k), viewed as a 56\u00d78 matrix over GF(2), is 8. Thus, it has an 8\u00d78 nonsingular sub-matrix R(k); and\n\n()=(()())()()().\n","The rank of the matrix BM(k), viewed as a 56\u00d716 matrix over GF(2), is 16. Thus, it has a 16\u00d716 nonsingular sub-matrix R(k); and,\n\n()=(()())()()().\n","There is additionally defined N(k)=BM(k). It thus follows that:",{"@attributes":{"id":"p-0085","num":"0093"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"munder":{"mrow":{"mi":"CP","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"},"mo":"=","mrow":{"mrow":[{"mo":["(",")"],"msub":{"mtable":{"mtr":{"mtd":[{"msub":{"mrow":{"mi":"N","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"0"}},{"msub":{"mrow":{"mi":"N","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"1"}},{"mrow":{"mi":"N","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}]}},"mn":"2"}},{"mo":["(",")"],"mtable":{"mtr":[{"mtd":{"mrow":{"munder":{"mo":"\u2211","mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":{"mi":"D","mrow":{"mi":"m","mo":",","mn":"0"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}}}}},{"mtd":{"mrow":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mrow":{"mi":"R","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"1"},{"mi":"AQ","mn":"0"}],"mo":"*"}},"mo":"*","munder":{"mrow":{"msub":{"mi":"D","mn":"0"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"}}}},{"mtd":{"mrow":{"mrow":[{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mrow":{"mi":"R","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"2"},{"mi":"AQ","mn":"1"}],"mo":"*"}},"mo":"*","munder":{"mrow":{"msub":{"mi":"D","mn":"1"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"}},{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mrow":{"mi":"R","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mn":"2"},{"mi":"AQ","mn":"2"}],"mo":"*"}},"mo":"*","munder":{"mrow":{"msub":{"mi":"D","mn":"2"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mi":"_"}}],"mo":"+"}}}]}}],"mo":"*"}}}}},"In one embodiment, the encoder circuit  (such as shown in ) comprises several circuit components including: the circuit referred to as COMB(m,k) , shown in further detail in ; a circuit referred to as ODDE(k) , shown in further detail in ; a circuit referred to as Csym(k) , shown in further detail in ; and, a circuit referred to as ACCE(j)  shown in further detail in .","In one embodiment, the circuit COMB(m,k) , shown in , has three inputs, d(k), d(k), d(k), and it computes the three outputs:\n\n()=()+()+(),\n\n()=()+(), and\n\n()=()+().\n","The circuit ODDE(k) , shown in  receives as its inputs the D(k)'s, D(k)'s, and the D(k)'s, and it computes the following:\n\n()=\u03a3()\n\n()=(())*()\n\n()=(())*()+(())*()\n","The circuit CSYM(k) , shown in , receives as inputs the CPj(k)'s, j=0, 1, 2, and it computes:\n\n()=()()+()()+()().\n","The circuit ACCE(j) , shown in  receives as inputs the partial check symbols, Cp(k), and it computes the check symbols c=\u03a3c(k). As mentioned above, it is understood that when the whole data is not read in one memory cycle, then ACCE(j)  may accumulate the partial syndromes over several memory cycles.","The encoder device  in an exemplary embodiment is shown in . It is assumed that at a memory cycle K bits of a symbol are read, i.e., k=0, 1, 2, . . . , K\u22121. The encoder circuit  works as follows:\n\n","Thus, in one aspect of the invention, the memory is configured according to a unique and efficient address scheme. In one embodiment, a non-standard address assignment is used to save space in circuit for encoding and computing syndromes. In the described embodiment, each address is in three blocks, i.e., there are 72\/3 or 24 symbols, in each block.","Further, according to one embodiment of the invention, there is computed the contributions to the syndromes and check symbols 1 bit at a time instead of 1 symbol at a time. As a result, the even syndromes can be computed as powers of the odd syndromes and computed much more efficiently according to the above-described relation: SP(k)=(t)*(SP(k)). The assigning of symbol addresses so that there are, for an example GF(2) which has 72 symbols, three (3) blocks of addresses which differ by a cube root of unity allows the data symbols to be combined enables reduced size and complexity of odd syndrome circuits. In a further aspect, the way the SPj(k)'s are computed (for odd values of j) when the memory addressing relation is \u03b1=\u03b1\u03c6, where m=0, 1 . . . , 7, in the example implementation, enables reduction in the size of the decoder circuit. Further, the implementation encoder circuit for generating check symbols is derived from syndrome circuit using the inverse of the part of the syndrome matrix for check locations. These implementations yield a syndrome generator\/encoder circuit which is less than half the size of a conventional parallel circuit implementation that performs the same task.","In sum, the present embodiment enables 1) computing of the syndromes based on 1 bit from the input symbols so that the even syndromes can be computed as powers of odd syndromes. Further, 2) there is used a particular addressing scheme involving phi (\u03c6) which satisfies the equation \u03c62+\u03c6+1=0. The computing according to 1) can be applied to Reed Solomon codes defined over GF(2) for any k; and computing according to 2) can be applied to Reed Solomon codes defined over GF(2) for k even. It is common that k=8 for most situations and is thus even so both 1) and 2) can be used.",{"@attributes":{"id":"p-0095","num":"0107"},"figref":"FIG. 11","b":["300","6","10","311","311","312","314","316","318","321","340","312","322","324","326","328","332","312","334","300","336","312","338","339"]},"Although the embodiments of the present invention have been described in detail, it should be understood that various changes and substitutions can be made therein without departing from spirit and scope of the inventions as defined by the appended claims. Variations described for the present invention can be realized in any combination desirable for each particular application. Thus particular limitations, and\/or embodiment enhancements described herein, which may have particular advantages to a particular application need not be used for all applications. Also, not all limitations need be implemented in methods, systems and\/or apparatus including one or more concepts of the present invention.","The present invention can be realized in hardware, software, or a combination of hardware and software. A typical combination of hardware and software could be a general purpose computer system with a computer program that, when being loaded and run, controls the computer system such that it carries out the methods described herein. The present invention can also be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which\u2014when loaded in a computer system\u2014is able to carry out these methods.","Computer program means or computer program in the present context include any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after conversion to another language, code or notation, and\/or reproduction in a different material form.","Thus the invention includes an article of manufacture which comprises a computer usable medium having computer readable program code means embodied therein for causing a function described above. The computer readable program code means in the article of manufacture comprises computer readable program code means for causing a computer to effect the steps of a method of this invention. Similarly, the present invention may be implemented as a computer program product comprising a computer usable medium having computer readable program code means embodied therein for causing a function described above. The computer readable program code means in the computer program product comprising computer readable program code means for causing a computer to effect one or more functions of this invention. Furthermore, the present invention may be implemented as a program storage device readable by machine, tangibly embodying a program of instructions runnable by the machine to perform method steps for causing one or more functions of this invention.","The present invention may be implemented as a computer readable medium (e.g., a compact disc, a magnetic disk, a hard disk, an optical disk, solid state drive, digital versatile disc) embodying program computer instructions (e.g., C, C++, Java, Assembly languages, Net, Binary code) run by a processor (e.g., Intel\u00ae Core\u2122, IBM\u00ae PowerPC\u00ae) for causing a computer to perform method steps of this invention. The present invention may include a method of deploying a computer program product including a program of instructions in a computer readable medium for one or more functions of this invention, wherein, when the program of instructions is run by a processor, the compute program product performs the one or more of functions of this invention.","It is noted that the foregoing has outlined some of the more pertinent objects and embodiments of the present invention. This invention may be used for many applications. Thus, although the description is made for particular arrangements and methods, the intent and concept of the invention is suitable and applicable to other arrangements and applications. It will be clear to those skilled in the art that modifications to the disclosed embodiments can be effected without departing from the spirit and scope of the invention. The described embodiments ought to be construed to be merely illustrative of some of the more prominent features and applications of the invention. Other beneficial results can be realized by applying the disclosed invention in a different manner or modifying the invention in ways known to those familiar with the art.","While the invention has been particularly shown and described with respect to illustrative and preferred embodiments thereof, it will be understood by those skilled in the art that the foregoing and other changes in form and details may be made therein without departing from the spirit and scope of the invention that should be limited only by the scope of the appended claims."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["The objects, features and advantages of the present invention will become apparent to one skilled in the art, in view of the following detailed description taken in combination with the attached drawings, in which:",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":"60"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3","b":["65","60"],"sub":["m,0","m,1","m,2"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4","b":["70","65"],"sub":"j"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5","sub":["j","j","k","j"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6","b":"100"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7","b":["80","60"],"sub":["m,0","m,1","m,2"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8","b":["85","80"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 9","b":"90"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10A","b":"200"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 10B","b":["200","100"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 11","FIGS. 6 and 10"],"b":"300"}]},"DETDESC":[{},{}]}
