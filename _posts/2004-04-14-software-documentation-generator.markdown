---
title: Software documentation generator
abstract: Various embodiments of a system and method for generating software documentation are disclosed. A software documentation generator may input a variety of information sources. In one embodiment, these information sources may include various types of files such as application source code files, tag library files, tag library descriptors (TLD), library source code, web services description language (WSDL) files, configuration files, defect reports, and text files. The software documentation generator may analyze each source to determine its type and use this information to extract documentation data from the source according to the format of the data included in that source. The software documentation generator may reformat the documentation data extracted from each source into a uniform format and aggregate the uniformly formatted data into a uniformly formatted aggregate input document. The software documentation generator may transform this document into one or more sets of software documentation in a specified format.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07568184&OS=07568184&RS=07568184
owner: Sun Microsystems, Inc.
number: 07568184
owner_city: Santa Clara
owner_country: US
publication_date: 20040414
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates to computer systems, and more particularly to the generation of documentation for software.","2. Description of the Related Art","Applications are often implemented as part of commercial and\/or non-commercial business solutions for an enterprise. For example, a company may leverage use of an enterprise application that includes various databases distributed across multiple computers. The code for an enterprise application may include hundreds of thousands of lines written by numerous programmers over a period of many months or years. The cost to develop and support such applications in terms of manpower can be tremendous.","Software that is well documented is easier to use, debug, modify, and maintain than undocumented or poorly documented applications. Therefore, the lifecycle costs associated with large applications can be reduced by insuring that proper documentation is produced. One type of software documentation includes comments that are written into the source code usually by the developer. These comments typically describe the detailed function of a small portion of the code that the developer deems to be not intuitively obvious. Another level of documentation is usually written separately from the source code in the form of a functional and\/or architectural specification. This level of documentation may describe the function of the entire application as a whole and that of the major component modules. Typically, all levels of software application documentation are incomplete, haphazardly written, or non-existent due to schedule or budgetary constraints and\/or a lack of enthusiasm for writing documentation on the part of the developers.","Software developers may leverage existing libraries of code to reduce their total time spent in development and to reduce the frequency of defects in their applications and components. In order to realize the benefits of leveraging these libraries, software developers must first understand how to interface with them, making accurate and up-to-date library documentation an important part of the software development process. To maximize productivity gains, it is also important for such library documentation to be indexed and easy to browse by the software developer. Developers may have different preferences for the final formatting of the library documentation, so that they can access the information in a manner best suited to their needs.","Developers of software libraries may wish to include such documentation in their libraries. Typically, information that is included in such software documentation comes from a variety of sources, each of which may be in a different format. These sources usually include the library source code itself and may additionally include configuration files, defect reports and other sources. It is both time-consuming and error-prone for component library developers to extract such information and to produce documentation in the required format by hand.","Various embodiments of a system and method for generating software documentation are disclosed. A software documentation generator may input a variety of information sources. In one embodiment, these information sources may include various types of files such as application source code files, tag library files, tag library descriptors (TLD), library source code, web services description language (WSDL) files, configuration files, defect reports, and text files. The software documentation generator may analyze each source to determine its type and use this information to extract documentation data from the source according to the format of the data included in that source. The software documentation generator may reformat the documentation data extracted from each source into a uniform format and aggregate the uniformly formatted data into a uniformly formatted aggregate input document. The software documentation generator may transform this document into one or more sets of software documentation in a specified format.","The software documentation generator may include an input source aggregator. The input source aggregator may, in turn, include a variety of input source plug-ins. A plug-in may be an application module that can be readily added to or incorporated into another application in order to augment the functionality of the original application. For example, there are many plug-ins available for Internet web browsers that allow the playing of audio and video files of various formats.","Each input source plug-in included in input source aggregator may correspond to the file type and\/or information format of one or more of the input source files. Once the input source aggregator has analyzed an input source, it may select an input source plug-in corresponding to the file type and data format of that input source. The selected plug-in may extract documentation information from the corresponding input source. Each input source plug-in may reformat the data it extracts from corresponding input sources into a uniform aggregate format and append the data to the uniformly formatted aggregate input document.","In one embodiment, a software documentation generator may include a transformer, which may operate on the uniformly formatted aggregate input document to produce software documentation sets. Depending upon the desired format for the documentation sets, the transformer may be configured to include one or more transformer plug-in sets. Each element of a transformer plug-in set may parse the uniformly formatted aggregate input document and extract a subset of the documentation information included therein. This extracted information may be combined with formatting and other information included in or generated by the plug-in to produce one or mode elements of the corresponding documentation set. An output documentation set may include documentation for application programming interfaces (API) provided by a software library. The documentation set may include plain text files, files in portable document format (PDF), hypertext markup language files (HTML), etc.","While the invention is described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that the invention is not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words \u201cinclude\u201d, \u201cincluding\u201d, and \u201cincludes\u201d mean including, but not limited to.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100","130","140","100","110","120","110","130","110","130","115","110","120","120","110","140","120","140"]},"In one embodiment, input sources  may be files associated with Java Server Pages (JSP) tag libraries. JSP technology may enable Web developers and designers to develop and maintain dynamic Web pages that leverage existing business systems. As part of the Java technology family, JSP technology may enable development of Web-based applications that are platform independent. JSP technology may separate the user interface from content generation, enabling designers to change the overall page layout without altering the underlying dynamic content.","JSP technology may use XML-like tags that encapsulate the logic that generates the content for a Web page. The application logic can reside in server-based resources that the page accesses by means of these JSP tags. Any and all formatting HTML or XML tags are passed directly back to the response page. By separating the page logic from its design and display and supporting a reusable component-based design, JSP technology may facilitate the development of Web-based applications.","JSP technology may include the JavaServer Pages Standard Tag Library (JSTL). The JSTL may encapsulate as simple tags the core functionality common to many Web applications. The JSTL may include support for common, structural tasks such as iteration and conditionals, tags for manipulating XML documents, internationalization tags, and structured query language (SQL) tags. It may also provide a framework for integrating existing custom tags with JSTL tags.","Web page developers may draw upon the resources available in the JSTL by using the included tags in their documents. In addition, developers may create their own custom tags to augment those in the JSTL. A custom tag may be a user-defined JSP technology page element. When a JSP technology page containing a custom tag is translated into a Java Servlet, the tag may be converted to operations (method calls) on an object called a tag handler. The servlet engine may then invoke those operations when the JSP technology page's servlet is executed.","In JavaServer Pages technology, actions may be elements that can create and access programming language objects and affect the output stream. In addition to the standard actions, the JSP v1.1 specification supports the development of reusable modules called custom actions. A custom action may be invoked by using a custom tag in a JSP technology page. A tag library may be a collection of custom tags. Some examples of tasks that can be performed by custom actions include form processing, accessing databases and other enterprise services such as email and directories, and flow control. Before the availability of custom actions, JavaBeans components in conjunction with scriptlets were the main mechanism for performing such processing.","There may be two types of components for a tag library; Tag Library Descriptor (TLD) files and tag handlers. A tag library descriptor may be an XML document that describes a tag library. A TLD may include information about a library as a whole and about each tag included in the library. TLDs may be used by a JSP technology container to validate the tags and by JSP technology page development tools. The following TLD elements may be used to define a tag library:",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["<taglib>",{}]},{"entry":["\u2003\u2003<tlibversion>","- The tag library's version"]},{"entry":["\u2003\u2003<jspversion>","- The JSP specification version the tag library depends"]},{"entry":[{},"on"]},{"entry":["\u2003\u2003<shortname>","- A simple default name that could be used by a JSP"]},{"entry":[{},"page authoring tool to create names with a mnemonic"]},{"entry":[{},"value; for example, shortname may be used as the"]},{"entry":[{},"preferred prefix value in taglib directives and\/or to"]},{"entry":[{},"create prefixes for IDs."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003<uri> - A URI that uniquely identifies the tag library"},{"entry":"\u2003\u2003<info> - Descriptive information about the tag library"},{"entry":"\u2003\u2003<tag>"},{"entry":"\u2003\u2003. . ."},{"entry":"\u2003\u2003<\/tag>"},{"entry":"\u2003\u2003. . ."},{"entry":"<\/taglib>"},{"entry":"The TLD element required for all tags is the one used to specify a tag"},{"entry":"handler's class:"},{"entry":"\u2003\u2003<tag>"},{"entry":"\u2003\u2003\u2002<tagclass>classname<\/tagclass>"},{"entry":"\u2003\u2003\u2002. . ."},{"entry":"\u2003\u2003<\/tag>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"100"},"Referring again to , input sources  may represent a collection of tag libraries, in one embodiment. Software documentation generator  may be configurable to operate on a single TLD, a set of TLDs, a JAR file, a WAR file, a directory of tag files, or all the tag libraries in a web application. Software documentation generator  may extract the information required for the generation of software documentation set  from input sources  and output the extracted information in documents of a desired format.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":"200"},"Based on this analysis, the software documentation generator may extract information from each source input according to a different format, as depicted in block . The data thus extracted may be combined with the data from the other input sources and reformatted to comply to a uniform format, as indicated in block . In one embodiment, the extracted information may be aggregated and formatted into XML or another document format for use internally by the software documentation generator. This uniformly formatted document may then be parsed into sections for inclusion in components of the software documentation set. The information required for a particular component of the software documentation set may be reformatted to produce a document in a specified document type and output from the software documentation generator, as illustrated by block . Document sets may be produced in multiple, different formats.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["300","310","330","330","310","320"]},"Each input source plug-in  included in input source aggregator  may correspond to the file type and\/or information format of one or more of the input source files . Once the input source aggregator  has analyzed an input source , it may select an input source plug-in  corresponding to the file type and data format of that input source. The selected input source plug-in  may extract documentation information from the corresponding input source. For example, if input source A is a TLD whose data is in JSP 1.2 format, an input source plug-in A specifically designed for this file type and data format may be employed to parse the file for the needed data. Each input source plug-in  may reformat the data it extracts from corresponding input sources  into a uniform format and append it to the uniformly-formatted aggregated input document .","In some cases, an input source plug-in  may generate additional documentation information, not included in a corresponding input source  for inclusion in uniformly formatted aggregate input document . In one embodiment, the documentation information included in uniformly formatted aggregate input document  may be formatted according to the JSP 2.0 specification. If an input source B is a TLD formatted according to JSP 1.2, the corresponding input source plug-in B may be selected to extract documentation data from the source. The format of the uniformly formatted aggregate input document  may specify additional documentation information beyond that provided by input source B. The needed information may take the form of additional data fields or additional data within existing fields. Input source plug-in B may detect the absence of the needed documentation information and supply the necessary data for the uniformly formatted aggregate input document . For example, if an input source A is a TLD in JSP 1.1 format and uniformly formatted aggregate input document  is formatted according to JSP 2.0, a corresponding input source plug-in A may extract data included in the TLD and add default values for fields specified in JSP 2.0 that are not present in the JSP 1.1 TLD file.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["400","410"]},"Based on the type of input source file received and the format of the data included in the input source file, the input source aggregator may select a corresponding plug-in to extract data from the input source file, as illustrated in block . For example, if the input source file is an XML type file whose data is formatted as a TLD, then a particular plug-in configured to parse XML TLD files may be selected. In one embodiment, input source aggregator may analyze an input file and determine that no input source plug-in corresponding to the required file type and data format has been configured in the included input source plug-in set. Under these conditions the software documentation generator may generate a message to the user informing him of the problem and requesting the installation of the required input source plug-in.","At  the selected plug-in may parse the input source file and extract the data needed for the generation of the software documentation set. In some embodiments, the selected plug-in may generate data needed for the uniformly formatted aggregate input document when such data is not included in the input source file, as indicated at block . As shown at , the plug-in may reformat the extracted and\/or generated documentation information into the required uniform format and incorporate the properly formatted data into the uniformly formatted aggregate input document, as indicated in block . Once documentation information from all input sources has been extracted, reformatted, and combined it may be output from the input source aggregator as the uniformly formatted aggregate input document, in block . The uniformly formatted aggregate input document may serve as the input to the transformer component of the software documentation generator, as described below.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5","b":["520","500","520","510","540","550","520","530","520","510","530"]},"Transformer  may apply an element of a plug-in set A to uniformly formatted aggregate input document  to produce a corresponding element of document set A. In one embodiment, uniformly formatted aggregate input document  may be compiled from a set of TLD input sources and may be formatted as an XML document. Transformer  may apply an element of a plug-in set A to the XML document to produce an HTML document that includes the names of the tag libraries corresponding to the TLDs and specifies how these names are to appear on a terminal display. The application of another element of a plug-in set A to uniformly formatted aggregate input document  may produce another HTML document that includes the tags included in the tag libraries along with a presentation specification. The application of yet another element of a plug-in set A to uniformly formatted aggregate input document  may produce yet another HTML document that includes the API for the tags included in the tag libraries and again may include a presentation specification.","Each element of a transformer plug-in set  may parse uniformly formatted aggregate input document  and extract a subset of the documentation information included therein. This extracted information may be combined with formatting and other information included in the plug-in set  to produce one or mode elements of the corresponding documentation set . As an example, an XSLT processor may apply a style sheet which is one element of a transformer plug-in set B to a uniformly formatted aggregate input document  extracted from a set of TLDs to produce an element of documentation set B including sample tag library directives that can be copied and pasted directly into a JSP page in order to make use of the included tags.","Similar to as described above for input source plug-ins , a transformer plug-in set  may generate additional documentation information, not included in uniformly formatted aggregate input document  for inclusion in documentation set . In one embodiment, the additional information may take the form of additional data fields or additional data within existing fields.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 6","b":["600","610"]},"Each element of an applied transformer plug-in set may operate on the uniformly formatted aggregate input document to extract a portion of the documentation information and combine this extracted information with output formatting instructions to produce one or more elements of a corresponding documentation set, as indicated by block . For example, one such element may produce a plain text document listing the name of each library of the source TLDs on a separate line. When the elements of the transformer plug-in set have extracted their documentation data and generated their documents, the finished documentation sets may be output, as described in block . In one embodiment, the software documentation sets may be output as hardcopy while in another they may be output as a set of files such as plain text, PDF, or other files types for word processors or browsers. In another embodiment, the software documentation generator may output the documentation sets as an information stream to one or more Web pages where it may be combined with existing formatting information for dissemination.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 7","b":["700","705","700","710","720","725","715","715"]},"The computer system  preferably includes a memory medium on which computer programs according to various embodiments may be stored. The term \u201cmemory medium may include an installation medium, e.g., a CD-ROM, or floppy disk; a computer system memory such as DRAM, SRAM, EDO DRAM, SDRAM, DDR SDRAM, Rambus RAM, etc., or a non-volatile memory such as a magnetic media, e.g., a hard drive , or optical storage. The memory medium may include other types of memory as well, or combinations thereof. In addition, the memory medium may be located in a first computer in which the programs are executed, or may be located in a second different computer, which connects to the first computer over a network. In the latter instance, the second computer provides the program instructions to the first computer for execution.","Also, the computer system  may take various forms, including a personal computer system, mainframe computer system, workstation, network appliance, Internet appliance, personal digital assistant (PDA), television system or other device. In general, the term \u201ccomputer system\u201d can be broadly defined to encompass any device having a processor, which executes instructions from a memory medium. The memory medium preferably stores a software program or programs for event-triggered transaction processing as described herein. The software program(s) may be implemented in any of various ways, including procedure-based techniques, component-based techniques, and\/or object-oriented techniques, among others. For example, the software program may be implemented using ActiveX controls, C++ objects, JavaBeans, Microsoft Foundation Classes (MFC), or other technologies or methodologies, as desired.","Memory  may store program instructions accessed by the CPU . For example, instructions and data implementing a software documentation generator  may be stored in memory . Software documentation generator  may operate on application code files and files of various other types to produce software documentation sets.","Computer system  may further include other software and hardware components, such as an input\/output (I\/O) interface , that may be coupled to various other components and memory . The CPU  may acquire instructions and\/or data through the I\/O interface . Through the I\/O interface , the CPU  may also be coupled to one or more I\/O components. As illustrated, I\/O components may include a hard disk drive , a network adapter , a display adapter  and\/or a removable storage adapter . Some components  to  may be coupled to the I\/O interface . In addition, the computer system  may include one or more of a particular type of component. The computer system  may include one or more components coupled to the system through a component other than the I\/O interface . Some computer systems may include additional and\/or other components such as application software (e.g., stored in memory ), other CPUs, video monitors or other displays, track balls, mice, keyboards, printers, plotters, scanners, or other types of I\/O devices for use with computer system .","Various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a carrier medium. Generally speaking, a carrier medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc. as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link.","The flow charts described herein represent exemplary embodiments of methods. The methods may be implemented in software, hardware, or a combination thereof. The order of method may be changed, and various elements may be added, reordered, combined, omitted, modified, etc.","Various modifications and changes may be made to the invention as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended that the following claims be interpreted to embrace all such modifications and changes and, accordingly, the specifications and drawings are to be regarded in an illustrative rather than a restrictive sense.","Although JSP tag libraries have been used as examples for sources, any type of file including software descriptive information may be used. Also, although XML has been used as an exemplary format for the uniformly formatted aggregate input document, other document formats or languages may be used for this document.","Various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a computer readable medium. Generally speaking, a computer readable medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc. as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
