---
title: Method and system for network fault monitoring with linux
abstract: A method and system for monitoring faults in network interface cards on networked computer systems or devices. The system includes a means for establishing an electrical connection to a computer network; a means for controlling data sent across the establishing means; a means for directly querying the status of the establishing means; and a means for tracking the status of the establishing means. The method includes steps for initializing data structures for tracking the status of one or more network interface cards to be monitored; initiating monitoring of the one or more network interface cards; ascertaining a configurable polling interval; determining if a shutdown condition has occurred; monitoring the status of the one or more network interface cards when a shutdown condition has not occurred; and clearing all resources when a shutdown condition has occurred.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07296069&OS=07296069&RS=07296069
owner: Hewlett-Packard Development Company, L.P.
number: 07296069
owner_city: Houston
owner_country: US
publication_date: 20020508
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The technical field relates to computer network fault monitoring.","In the field of networked computer systems high availability, one form of high availability software that is provided is known as clustering software. Clustering software manages the networking operations of a group, or cluster, of networked computer systems, and attempts to ensure the highest availability of running applications for external system users despite networking hardware or software failures. One of the functions of clustering software is to detect and recover from a network fault such as a link failure, a failure of a connection to the computer network, in a network interface card (\u201cNIC\u201d) configured for operation in a computer system on the cluster of networked computers. This function is often referred to as network fault monitoring.","Clustering software systems have been designed and built for various types of computer networking protocols, including Ethernet, and for various network computer operating systems, including versions of UNIX such as Hewlett-Packard's HP-UX. In the HP-UX operating system, network fault monitoring is accomplished through the use of the Data Link Provider Interface (\u201cDLPI\u201d). The DLPI is a set of Application Programming Interfaces (\u201cAPI\u201d) that operate at the second lowest, or data link, layer of a computer system's networking protocol stack.","The layers of a networking protocol stack, according to the Open Systems Interconnect (\u201cOSI\u201d) seven layer model (established by the International Organization for Standardization (\u201cISO\u201d) in 1978), typically consist of the following layers moving from bottom (closest to the hardware) to top (closest to the user): a physical layer comprising the networking hardware used to make connections to the network (example physical layer protocols include token ring and bus); a data link layer which splits data into frames for sending on to the physical layer and receives acknowledgement frames, and also performs error checking (the data link layer may comprise the driver software for the NIC); a network layer, or communications subnet layer, which determines the routing of data packets from sender to receiver (the most common network layer protocol is Internet Protocol (\u201cIP\u201d)); a transport layer, or \u201chost-host layer,\u201d which determines how to minimize communications errors and establish point to point connections between two host computers such that messages between the two host computers will arrive uncorrupted and in the correct order (an exemplary transport layer protocol is Transmission Control Protocol (\u201cTCP\u201d), another is User Datagram Protocol (\u201cUDP\u201d)); a session layer; a presentation layer; and an application layer which is concerned with the user's view of the network.","DLPI is used by the clustering software on the HP-UX operating system to monitor for network faults. The clustering software generates DLPI traffic across all NICs being monitored and collects resulting data in a Management Information Base (\u201cMIB\u201d), compliant with the Simple Network Management Protocol (\u201cSNMP\u201d), for all data packets sent and received by the NICs. The statistics tracked by the MIB can then be used to determine if each NIC is up or if it is down.","In one respect, what is described is a system for monitoring network faults using a LINUX operating system. The system includes a means for establishing an electrical connection to a computer network; means for controlling data sent across the establishing means; means for directly querying the status of the establishing means; and means for tracking the status of the establishing means.","In another respect, what is described is a method for monitoring network faults using a LINUX operating system. The method includes steps for initializing data structures for tracking the status of one or more network interface cards to be monitored; initiating monitoring of the one or more network interface cards; ascertaining a configurable polling interval; determining if a shutdown condition has occurred; monitoring the status of the one or more network interface cards when a shutdown condition has not occurred; and clearing all resources when a shutdown condition has occurred.","In yet another respect, what is described is a computer-readable medium on which is embedded a program. The embedded program includes instructions for executing the above method.","Those skilled in the art will appreciate these and other advantages and benefits of various embodiments of the invention upon reading the following detailed description of an embodiment with reference to the below-listed drawings.","Network fault monitoring on the HP-UX operating system is accomplished through the use of the DLPI and interpretation of MIB statistics maintained in the NIC driver. Implementing a similar network fault monitoring system and method on the LINUX operating system requires another solution since LINUX does not utilize DLPI.","The LINUX operating system provides, in its data link layer, a set of Input\/Output (\u201cI\/O\u201d) Control Requests (system calls enabling a service provided by the operating system with respect to input and output operations) not provided in HP-UX. These I\/O control requests conform to and utilize the Media Independent Interface (\u201cMII\u201d), an interface defined by the IEEE to perform various link-level control operations between networking devices connected in an Ethernet network. Among the I\/O control requests available in LINUX are two specific ones referred to as SIOCDEVPRIVATE and a newer SIOCGMIIPHY I\/O control requests. The I\/O control requests may read an MII status word directly from a transceiver residing on a network interface card (\u201cNIC\u201d). Using this capability, a network fault monitoring system may determine whether a NIC is up or down (operating or failed) based on a value of an argument passed from the MII status word into the I\/O control request system call.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","i":"a ","b":["100","100","110","160","130","110","110","115","120","115","140","140","145","110","160","145","145","155","152","150","150","130","150","130","110","160","150","157","130","100"]},"The system  may also include a network fault monitoring software module  running on the CPU  under the control of the LINUX operating system . The network fault monitoring module  is connected to and communicates with the protocol stack  to determine the status of the one or more network interface cards . The network fault monitoring module  also is connected to and communicates with a network fault monitoring data  residing in the memory . The network fault monitoring data  serves to track the status of the one or more network interface cards  and make this status available to other software modules that may run on the CPU .",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"i":["b ","a","b "],"b":["100","127","127","125","170","172","175","177","178","179"]},"In addition, the network fault monitoring data  may include an interface data structures list  for tracking a number of variables regarding the status of each of the one or more network interface cards . The interface data structures list  comprises one or more interface data structures , one for each of the one or more network interface cards  being monitored by the network fault monitoring software module . Each interface data structure  may include a network identification field , a network interface name , a network interface type , a network interface index , a network interface card hardware path , and a storage location for a correct I\/O control request type . Each interface data structure  may also include an MII status indicator  and an interface status indicator . The data in each interface data structure  and the global variables are used by the method , described below, for determining and tracking the status of the one or more network interface cards .","In one embodiment of the invention, the network fault monitoring data  may further include a status reporting database  which may be accessed by other software modules running on the CPU  to obtain information on the status of the one or more network interface cards . The status reporting database  may comprise one or more database entries , each corresponding to one of the one or more interface data structures , and thus representing each of the one or more network interface cards  being monitored by the network fault monitoring software module . Each database entry  may include fields indicating a type , a key , and a value . The type  indicates a database entry type for a network interface card . The key  specifies, and corresponds to, the unique hardware path  for one of the one or more network interface cards . The value  represents the status of one of the one or more network interface cards  derived from the interface status indicator  from the corresponding interface data structure  described above.","The operation of the elements of the system  to monitor network interface cards  for faults using the LINUX operating system is best illustrated by the steps of the method  described below.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","i":"a ","b":["200","200","125","100","130","200","172","175","177","202","170","204","170","200","125","125","178","157","206"]},"With the data socket open, the method  proceeds to loop through each of the network interface cards  that will be monitored by the method  (step ). For each network interface card  that will be monitored, the network fault monitoring module  creates and initializes a data structure stored in the network fault monitoring data  (step ).","Upon completing the creation and initialization of data structures for each network interface card  (steps  and ), the method  then starts to monitor the status of the network interface cards  by spawning a thread, or forking a process, to execute the monitoring steps (step ). The configurable polling interval  is then retrieved (step ). The value of the configurable polling interval  is a period of time, configurable by a user of the system , during which the monitoring process is executed. In other words, if the value of the configurable polling interval  is two seconds, which may be the default value in one embodiment of the invention, then the method  executes the steps (described below) for monitoring the network interface cards  once every two seconds. Just prior to entering the loop to monitor the network interface cards , the method  locks the network mutex  (step ). The network mutex  is locked to protect all monitoring data from use by other modules, threads or processes running in the system .","The method  then enters an infinite FOR loop, wherein the loop has as its first step the testing of the condition of the shutdown flag  (step ). If the shutdown flag  is set to false, as it should be from step  unless a shutdown condition has been initiated by a user or other process, the method  will proceed to query the status of each network interface card  (step ). The monitoring process of the method  may thus only be shutdown by setting the shutdown flag  to true. If the shutdown flag  is set to true, the method proceeds instead to free up all resources and close the opened datagram socket  (step ) and then ends.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"i":["b ","b ","a. "],"b":["200","190","130","210","200","208"]},"For each network interface card , the network fault monitoring module  must create a data structure  to store data regarding the condition and status of the network interface card  and add the network interface card  and its data structure  to an interface data structure list  (step ). The data structure  must then be initialized with information regarding the network interface card  (step ), including the network identification , the network interface name , the network interface type , a network interface index , and a hardware path  of the network interface card . The network fault monitoring module  then sets a Media Independent Interface (\u201cMII\u201d) status indicator  for the network interface card  being initialized to UP (step ). It is also necessary to then ascertain the correct Input\/Output (\u201cI\/O\u201d) control call request  (ioctl) depending upon the network interface type  of the network interface card  (step ). Some interface cards will support an SIOCDEVPRIVATE I\/O control request call , whereas other newer interface cards will utilize an SIOCGMIIPHY I\/O control request call . This property of the network interface card  must be determined and stored in the correct I\/O control request type field  for each network interface card  in order to make the appropriate I\/O control request call  when monitoring each network interface card . An interface status indicator  for the network interface card  being initialized is then set to UP (step ).","The network fault monitoring module  then checks to see if an Internet Protocol (\u201cIP\u201d) address is available for the network interface card  (step ). If an IP address is available, the network fault monitoring module  creates a data structure for the IP address, initializes the data structure, and adds the IP address to a list of IP addresses used by the network interface card  (step ). If it is not necessary to add an IP address, or once an IP address has been added, then the next step is to create an entry  in the status reporting database  for the network interface card  (step ). This enables the network fault monitoring module  to store the status of the network interface card  for use by other software modules. Following the establishment of the entry  in the status reporting database , the method  returns to step  to initialize a data structure  for another network interface card  or, if all the data structures  for all the network interface cards  have been initialized, proceed on to monitoring the network interface cards .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"i":["c ","c ","a. "],"b":["200","130","130","200","236"]},"As long as the shutdown flag  is set to false, the network fault monitoring module  will execute the steps of the method  described below for monitoring the status of the network interface cards . Upon entering from step , the network fault monitoring module  first obtains the current system time in the form of clock ticks passed since reboot, for example, and adds the configurable polling interval , converted into ticks since reboot, for example, to derive the start time of the next polling interval (step ). The method  then proceeds to loop through each of the network interface cards  that will be monitored (step ), proceeding to execute the following status query steps for each network interface card .","The network fault monitoring module  begins the status query steps of the method  for each network interface card  by calling the appropriate I\/O control request  (determined in step  above and stored in the correct I\/O control request type field  for the network interface card ) to query the link status of the network interface card  and store the returned value, either UP or DOWN, in the MII status indicator  assigned to the network interface card  being queried (step ). Following this, the interface status indicator  is checked to determine if it is UP (step ). If the interface status indicator  is not UP (i.e., is DOWN), then the MII status indicator  is checked to see if it is UP (step ). If the MII status indicator  is not UP (i.e., is DOWN), then the network fault monitoring module  does nothing (step ) and returns to step  to process the next network interface card . If, however, the MII status indicator  is UP, the network fault monitoring module  sets the interface status indicator  to UP (step ), updates the status reporting database  with the newly set status so that other software modules may be notified of the status of the network interface card  (step ), and then returns to step  to process the next network interface card , if any.","However, at step , if the interface status indicator  is UP, then the MII status indicator  is also checked to see if it is UP (step ). In this case, with the interface status indicator  set to UP, if the MII status indicator  is set to UP, the network fault monitoring module  does nothing (step ) and returns to step  to process the next network interface card , if any. If, however, the interface status indicator  is set to UP, and the MII status indicator  is not set to UP (i.e., is DOWN), the network fault monitoring module  then sets the interface status indicator  to DOWN (step ), updates the status reporting database  with the newly set status so that other software modules may be notified of the status of the network interface card  (step ), and then returns to step  to query the next network interface card , if any.","Once all the network interface cards  have been queried for the value of the interface status indicator  and MII status indicator  assigned to them (steps  through ), the network fault monitoring module  performs a series of clean-up tasks. First, the network fault monitoring module  retrieves the current time (step ), again in the format of clock ticks since reboot of the system, for example. The method then also unlocks the network mutex , thereby making data and system resources available to other processes (step ).","The network fault monitoring module  then checks to see if the configurable poll interval  has expired (step ) by checking the current system time (from step ) against the predicted start time of the next poll interval calculated in step . If the configurable poll interval  has passed, and it is therefore time for another polling of the status of the network interface cards , the network fault monitoring module  locks the network mutex  (step ) and returns to step  to check the shutdown flag . If, however, the configurable polling interval  has not expired, the network fault monitoring module  locks the poll mutex , preventing further polling of the network interface cards  (step ), and proceeds to wait the necessary number of clock ticks until the configurable polling interval  has expired (step ). Once the configurable polling interval  has expired, the network fault monitoring module  then unlocks the poll mutex  (step ), locks the network mutex  (step ), and returns to step  to check the shutdown flag .","The steps of the method  may be implemented with hardware or by execution of programs, modules or scripts. The programs, modules or scripts may be stored or embodied on one or more computer readable mediums in a variety of formats, including source code, object code or executable code, among other formats. The computer readable mediums may include, for example, both storage devices and signals. Exemplary computer readable storage devices include conventional computer system RAM (random access memory), ROM (read only memory), EPROM (erasable, programmable ROM), EEPROM (electrically erasable, programmable ROM), and magnetic or optical disks or tapes. Exemplary computer readable signals, whether modulated using a carrier or not, are signals that a computer system hosting or running the described methods can be configured to access, including signals downloaded through the Internet or other networks.","The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. Those skilled in the art will recognize that many variations are possible within the spirit and scope of the invention as defined in the following claims, and their equivalents, in which all terms are to be understood in their broadest possible sense unless otherwise indicated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The detailed description will refer to the following drawings, wherein like numerals refer to like elements, and wherein:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1","i":"a "},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 1","FIG. 1"],"i":["b ","a; "]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2","i":"a "},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 2"],"i":["b ","a "]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 2","FIG. 2"],"i":["c ","a "]}]},"DETDESC":[{},{}]}
