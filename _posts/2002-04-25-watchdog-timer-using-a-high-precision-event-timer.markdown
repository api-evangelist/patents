---
title: Watchdog timer using a high precision event timer
abstract: A system and method for detecting and handling errors in a computer system are disclosed. The invention is configurable to permit selecting of timelength or time out values, assigned interrupts to be generated and error recover procedures so that failures of system events can be promptly detected and recovered from. The watchdog timer is started with a timelength or time out value and generates an interrupt (i.e., is triggered) if the period of time set as the timelength passes without receiving a reset. The watchdog timer interface interacts and controls the hardware based timer to obtain this watchdog timer functionality. The hardware based timer is generally a high precision timer that exists in hardware architecture for a computer system and is usable by system software. The watchdog timer interface controls and sets various parameters and/or registers of the hardware based timer in order to provide the desired functionality of a watchdog timer. Thus, another software component can call and interact with the watchdog timer interface for a system event and view the watchdog timer interface as a watchdog timer (i.e., the operation of the hardware based timer is transparent).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07689875&OS=07689875&RS=07689875
owner: Microsoft Corporation
number: 07689875
owner_city: Redmond
owner_country: US
publication_date: 20020425
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to facilitating detection and handling of system failures, and more particularly to systems and methods utilizing an existing hardware timer as a watchdog timer to detect and handle system failures.","A watchdog timer is a standard mechanism employed to detect and respond to system failures in a timely manner. The watchdog timer reacts to a failure by executing a specific routine after the expiration of a set time period, unless it is reset by software. A watchdog timer is typically utilized to handle situations in which a computer locks up, halts, hangs or is in an infinite loop. A watchdog timer is started or initialized with a time out value. Then, the time out value of the watchdog timer is decremented at a certain frequency by a decrement value until the timer reaches zero, indicating that an error has occurred. During normal operation, a watchdog timer is reset, typically at regular intervals, prior to reaching zero. On being reset, the watchdog timer is reinitialized or reset to the time out value. However, if the timer is not reset prior to reaching zero, the watchdog timer is triggered indicating that an error has occurred. Generally, a recovery procedure is then initiated to recover from the error.","Watchdog timers are typically employed in computer systems to detect errors and\/or assist in recovering from errors. For example, a watchdog timer can be employed to detect and recover from application errors. If an application locks, halts, or is otherwise non-responsive, the timer will not be reset, which will consequently cause a previously set period of time to expire and a response to be triggered. Typical examples of watchdog-initiated responses include an interrupt, a warm boot (system reset), or a system shutdown.","Watchdog timers utilized in computer systems are often implemented as a separate retriggerable hardware timer attached to a processor's reset line. These hardware based watchdog timers are typically integrated into computer systems on Peripheral Component Interconnect (PCI) or Integrated Standard Architecture (ISA) cards connected through their respective slots on the motherboard, or alternatively, made to operate outside the computer by way of an external serial device. These timers are connected to a computer's reset line and initiate a reboot when the timer is triggered (i.e., counts down to zero). Although this approach enables recovery from system lock-ups, it can result in complete system reset, which typically involves a significant delay in waiting for the system to reboot. Generally, these hardware based watchdog timers are unable to interact with an operating system thereby limiting their applications to computer systems.","Another approach to employing watchdog timers in computer systems is to utilize conventional system timers to implement watchdog timers. However, these system timers require a relatively large amount of time to program and operate and utilize significant system resources. Additionally, these system timers generally are only accessible via I\/O registers, which is inefficient for accessing and programming the timers. Also, these system timers are often utilized for existing applications and are, thus, unable to be employed by software components such as the operating system or applications.","Another shortcoming of conventional watchdog timers is that they have limited time out values. For example, 32 bit based watchdog timers operating at typical system bus speeds are limited to time out values of about seven minutes. Such a limitation renders these watchdog timers unusable for applications requiting longer time out values, such as when booting a series of large servers many of which require an hour or more to boot.","Thus, watchdog timers can be effective in detecting and recovering from errors encountered in computer systems. However, conventional watchdog timers are either too expensive or require significant system resources. Specifically, hardware based watchdog timers are costly and can be limited in recovery procedures, yet standard system timers require too many system resources.","The following is a summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not intended to identify key\/critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","The present invention relates generally to systems and methods that facilitate detecting and handling errors in a computer system, and, more specifically to utilizing a hardware based timer as a watchdog timer via an application programming interface (API) referred to as a watchdog timer interface to detect and handle errors for system events. The invention is highly configurable to permit selecting of timelength or time out values, assigned interrupts to be generated and error recover procedures so that failures of system events can be promptly detected and recovered from. The watchdog timer is initiated with a timelength or time out value and generates an interrupt (e.g., is triggered) if the period of time set as the timelength expires without receiving a reset. The watchdog timer interface interacts and controls the hardware based timer to obtain this watchdog timer functionality. The hardware based timer is generally a high precision timer that pre-exists in hardware architecture for a computer system and is usable by system software. The watchdog timer interface controls and sets various parameters and\/or registers of the hardware based timer in order to provide the desired functionality of a watchdog timer. Thus, another software component can call and interact with the watchdog timer interface for a system event and view the watchdog timer interface as a watchdog timer (e.g., the operation of the hardware based timer is transparent).","Thus, as can readily be appreciated from the foregoing discussion as well as the subject specification, the present invention leverages pre-existing hardware timers to provide the highly desired functionality of a watchdog timer. Furthermore, the invention can improve system reliability by being configurable to detect a wider range of system errors or failures than conventional watchdog timers. Additionally, the invention is configurable to selectively handle system failures, unlike conventional watchdog timers, and thus permits greater control over recover procedures.","In accordance with one particular aspect of the invention, a watchdog timer system is provided that provides watchdog timer functionality. The system includes a hardware timer and a watchdog timer interface. The hardware timer periodically increments a counter value towards a compare value and generates an interrupt on the compare value being equal to the counter value. The watchdog timer interface controls the hardware timer according to received parameters.","In accordance with another particular aspect of the invention a method of operating a hardware timer as a watchdog timer is provided. A compare value of the hardware timer is set to a computed value, the computed value being a function of a desired time out of a system event. A counter value of the hardware timer is set to an initial value, typically zero. The hardware timer is enabled and the counter value is incremented every tick period. An interrupt is generated on the compare value being equal to the counter value.","In accordance with yet another particular aspect of the invention, a method of detecting and handling errors utilizing a watchdog timer is disclosed. A time length is set for a system event. A watchdog timer system is started for the system event according to the time length, the watchdog timer system having a hardware timer controlled by a watchdog timer interface. The watchdog timer system is reset during successful processing of the event. The watchdog timer system is stopped or halted on successful processing to the system event. An interrupt is generated on the timer expiring (i.e., the time length elapsing).","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the invention may be practiced, all of which are intended to be covered by the present invention. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It may be evident, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate describing the present invention.","As used in this application, the terms \u201ccomponent\u201d and \u201csystem\u201d are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","It is to be appreciated that, for purposes of the present invention, any or all of the functionality associated with modules, systems and\/or components discussed herein can be achieved in any of a variety of ways (e.g. combination or individual implementations of active server pages (ASPs), common gateway interfaces (CGIs), application programming interfaces (API's), structured query language (SQL), component object model (COM), distributed COM (DCOM), system object model (SOM), distributed SOM (DSOM), ActiveX, common object request broker architecture (CORBA), database management systems (DBMSs), relational database management systems (RDBMSs), object-oriented database management system (ODBMSs), object-relational database management systems (ORDBMS), remote method invocation (RMI), C, C++, practical extraction and reporting language (PERL), applets, HTML, dynamic HTML, server side includes (SSIs), extensible markup language (XML), portable document format (PDF), wireless markup language (WML), standard generalized markup language (SGML), handheld device markup language (HDML), graphics interchange format (GIF), joint photographic experts group (JPEG), binary large object (BLOB), other script or executable components).","The present invention relates generally to systems and methods that facilitate detecting and handling errors in a computer system, and, more specifically in accordance with one aspect of the invention to utilizing a hardware based timer as a watchdog timer via an application programming interface (API) referred to as a watchdog timer interface to detect and handle errors for system events. The invention is configurable to permit selecting of timelength or time out values, assigned interrupts to be generated and error recover procedures so that failures of system events can be promptly detected and recovered from. The watchdog timer is started with a timelength or time out value and generates an interrupt (e.g., is triggered) if the period of time set as the timelength expires without receiving a reset. The watchdog timer interface interacts and controls the hardware based timer to obtain this watchdog timer functionality. The hardware based timer is generally a high precision timer that pre-exists in hardware architecture for a computer system and is usable by system software. The watchdog timer interface controls and sets various parameters and\/or registers of the hardware based timer in order to provide the desired functionality of a watchdog timer. Thus, another software component can call and interact with the watchdog timer interface for a system event and view the watchdog timer interface as a watchdog timer (i.e., the operation of the hardware based timer is transparent).",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","100","100","102","104","104","102","100","100"]},"The timer  is a hardware timer and operates as an \u201cup counter\u201d. The timer  is typically a 32 or 64 bit counter, is aperiodic or configured to be aperiodic and can be pre-existing to a computer system (i.e., an existing multimedia timer or high precision event timer (HPET)). However, it is appreciated that a timer acting as a \u201cdown counter\u201d can be utilized and still be in accordance with the present invention. Additionally, it is appreciated that other suitable bit sizes (e.g., 24 bits, 72 bits, 128 bits . . . ), instead of 32 or 64 bits, and periodic timers can also be utilized and still be in accordance with the present invention. The timer  is operable via a number of timer parameters including, enable\/disable, a compare value, a counter value, a set interrupt and an interrupt enable parameters. The timer  generally operates and is enabled by the following: the compare value is set, the counter value is set, the set interrupt parameter is set to a desired interrupt, the interrupt enable parameter is set to \u201ctrue\u201d, the timer  is enabled by setting the enable\/disable parameter to \u201ctrue\u201d, the counter value is incrementally updated (by one) every tick period and an interrupt is generated on the compare value being substantially equal to the counter value. The compare value is set to a desired value and is generally 32 or 64 bits. The counter value is typically set to zero, however it can be set to other values, and is also 32 or 64 bits. The tick period is the period at which the counter value is incremented. Typically, the tick period is less than or equal to about 100 nanoseconds. In alternate aspects of the invention, the tick period is a settable parameter of the timer . Generally, the smaller the tick period is, the greater the precision of the timer . If the counter value is set to a number greater than the compare value, the counter value wraps around to zero before being incremented to be substantially equal to the compare value. The set interrupt parameter is set to the desired interrupt to be generated by the timer . Optionally, an interrupt type of the timer  can be set to determine whether the interrupt to be generated is edge triggered or level triggered. The timer  is typically disabled by setting the enable\/disable parameter to \u201cfalse\u201d and by optionally setting the interrupt enable parameter to \u201cfalse\u201d. The timer parameters can be implemented as registers of the timer .","The watchdog timer interface  is an application programming interface and is operative to receive interface parameters including the start\/stop parameter, the timelength parameter, the reset parameter and the interrupt assign parameter and set the timer parameters of the timer  including the enable\/disable parameter, the compare value parameter, the counter value parameter, the set interrupt parameter, and the interrupt enable parameter. Generally, the watchdog timer interface  controls and configures the timer  such that it provides the functionality of a watchdog timer. The start\/stop parameter is employed to start or stop operation of the watchdog timer system . Typically, a \u201ctrue\u201d value of the start\/stop parameter indicates \u201cstart\u201d and a \u201cfalse\u201d value of the start\/stop parameter indicates \u201cstop\u201d. It is appreciated that other aspects of the invention can utilize other suitable signals and\/or parameters to indicate starting and stopping of the watchdog timer system . For operation of the system  to be started, the timelength parameter and interrupt assign parameter should also be received. The timelength parameter is employed to set a length of time or timeout value for the system . Typically, the timelength parameter is in micro-seconds; however other units can be employed by design and\/or including an optional units parameter. The reset parameter is employed to reset the watchdog timer system  prior to the system counting to the timelength parameter. The interrupt assign parameter is utilized to assign an interrupt to be generated on the system  (i.e., timer ) being triggered. It is appreciated that alternate aspects of the invention can be implemented without the interrupt assign parameter by using a default interrupt to be generated on the system  being triggered.","As stated above, the watchdog timer interface  sets the timer parameters of the timer  in order to control the timer  and have the system  function as a watchdog timer. These timer parameters are generally set by the watchdog timer interface  on receiving the start\/stop, timelength and interrupt assign parameters. Default values can be employed for the timelength and interrupt assign parameters if those particular parameters are not received. On receiving the start\/stop, timelength and interrupt assign parameters, the watchdog timer interface  sets the interrupt enable parameter to \u201ctrue\u201d, sets the counter value parameter to zero, sets the compare value to a computed value and sets the set interrupt parameter to be the interrupt assign parameter. The compare value is computed as a function of the timelength parameter. Typically, the compare value is equal to the timelength parameter divided by the tick period of the timer . Then, the enable\/disable parameter is set to \u201ctrue\u201d. On the watchdog timer interface  receiving the reset parameter (i.e., reset being equal to \u201ctrue\u201d), the enable\/disable parameter is set to \u201cfalse\u201d, the counter value is reset to zero and then the enable\/disable parameter is set to \u201ctrue\u201d. If the timer  is periodic, the watchdog timer interface  sets the enable\/disable parameter to \u201cfalse\u201d on the interrupt being generated.","It is appreciated that the timer parameters of the timer  can be implemented as registers and\/or bits (which are set and cleared) and mapped to memory space, typically by the basic input\/output system (BIOS) and\/or the operating system (OS). The BIOS and\/or OS can then report the address locations for the memory mapped timer parameters therein facilitating setting of the timer parameters by the watchdog timer interface  and improving operation of the system . Additionally, other parameters of the timer  can be handled and\/or controlled by the watchdog timer interface  including, but not limited to, legacy interrupt routing, size of the compare value, size of the counter value, periodic mode and the like.","The interrupt generatable by the system  (also referred to as an exception or trap) is essentially a signal indicating that an unscheduled event (i.e., error) has occurred. Typically, the unscheduled event (i.e., the interrupt) causes the central processing unit (CPU) to stop executing code being currently executed and to branch or jump to a special piece of code called an interrupt service routine (ISR). This unscheduled event can be user or device initiated or result from the occurrence of an error. One type of interrupt that can be utilized by the system  is a maskable interrupt, which the processor can temporally ignore if the processor deems it necessary to complete its current task. Another type of interrupt that can be utilized by the system  is a non-maskable interrupt (NMI), which conversely, can not be ignored because it is, typically, associated with high priority tasks.","Furthermore, it is appreciated that the watchdog timer interface  can read the timer parameters of the timer . Thus, the watchdog timer interface  can be configured, for example, to monitor the compare value and the counter value to determine how much time is left before an interrupt is generated. Additionally, the watchdog timer interface  can be configured, for example, to notify another component on the compare value and the counter value being substantially equal, which is useful for implementations in which generation of an interrupt is not desired or necessary.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","104","100","200","202","204","206","200","200","206"]},"If the timer  is aperiodic, the timer  becomes disabled after being triggered (i.e., generating the interrupt). If the timer  is periodic, the initial value of the compare register, the compare value, is added to the compare register and the timer  continues again until the counter register once again equals the compare register and again, generates the interrupt. The above is then repeated (i.e., adding the initial value of the compare register to the current value of the compare register) until the timer  is disabled.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 3","b":["300","300","300","306","308","308","302","304","304","302","308","308","308","308","308"]},"The application  is a software component that utilized the watchdog timer system  to detect and recover from errors or erroneous events. The application  can operate in user mode, kernel mode and\/or both user and kernel mode. Operating systems generally separate software components into user mode and kernel mode. User mode components have limited access to system resources and generally are only able to access user memory. Kernel mode components have greater access to system resources than user mode components and typically have access to memory (not just user memory) and devices like multimedia timers or high precision event timers through what are referred to as privileged instructions. The application  can be, for example, a device driver, network driver or other software component. The application  can include an error handling routine that executes on an error or erroneous event occurring and performs recovery operations. Additionally, an error handling routine (not shown) can be implemented separate from the application . The application  calls the watchdog timer interface  to detect errors and recover from errors associated with an event or system event. The application  determines an appropriate time out or timelength parameter based on the event.","The timer  is a hardware timer and operates as an \u201cup counter\u201d. The timer  is generally a 32 or 64 bit counter and is aperiodic or nonperiodic. However, it is appreciated that a timer acting as a \u201cdown counter\u201d can be utilized and still be in accordance with the present invention. Additionally, it is appreciated that other suitable bit sizes (e.g., 24 bits, 72 bits, 128 bits . . . ), instead of 32 or 64 bits, and periodic timers can also be utilized and still be in accordance with the present invention. However, the greater number of bits permits longer time out values for the timer . The timer  is operable via a number of timer parameters including, enable\/disable, a compare value, a counter value, a set interrupt and an interrupt enable parameters. The timer  generally operates and is enabled by the following: the compare value is set, the counter value is set, the set interrupt parameter is set to a desired interrupt, the interrupt enable parameter is set to \u201ctrue\u201d, the timer  is enabled by setting the enable\/disable parameter to \u201ctrue\u201d, the counter value is incrementally updated (by one) every tick period and an interrupt is generated on the compare value being substantially equal to the counter value. The compare value is set to a desired value and is generally 32 or 64 bits. The counter value is typically set to zero, however it can be set to other values, and is also 32 or 64 bits. The tick period is the period at which the counter value is incremented. Typically, the tick period is less than or equal to about 300 nanoseconds. In alternate aspects of the invention, the tick period is a settable parameter of the timer . Generally, the smaller the tick period is, the greater the precision of the timer  is. If the counter value is set to a number greater than the compare value, the counter value wraps around to zero before being incremented to be substantially equal to the compare value. The set interrupt parameter is set to the desired interrupt to be generated by the timer . Optionally, an interrupt type of the timer  can be set to determine whether the interrupt to be generated is edge triggered or level triggered. The timer  is typically disabled by setting the enable\/disable parameter to \u201cfalse\u201d and by optionally setting the interrupt enable parameter to \u201cfalse\u201d. The timer parameters can be implemented as registers of the timer .","The watchdog timer interface  is an application programming interface and is operative to be called by the application . However, it is appreciated that other applications and software components operating in user mode and\/or kernel mode can also call the watchdog timer interface . A start\/stop parameter is employed to start or stop operation of the watchdog timer system . Typically, a \u201ctrue\u201d value of the start\/stop parameter indicates \u201cstart\u201d and a \u201cfalse\u201d value of the start\/stop parameter indicates \u201cstop\u201d. It is appreciated that other aspects of the invention can utilize other suitable signals and\/or parameters to indicate starting and stopping of the watchdog timer system . For operation of the system  to be started, the timelength parameter and interrupt assign parameter should also be received. The timelength parameter is employed to set a length of time or timeout value for the system . Typically, the timelength parameter is in micro-seconds; however other units can be employed by design and\/or including an optional units parameter. An exemplary implementation of the watchdog timer interface can be as follows:","NTSTATUS","KeWatchdogTimer(\n\n",")","Where Start is \u201ctrue\u201d to enable or start the watchdog timer system  and TimeLength is a timeout interval. Thus, to start the system  with a one second timeout value or length, a call can be as follows: KeWatchDogTimer(true, 10000000). Similarly, to stop or disable the system  a call can be as follows: KeWatchDogTimer(false,0).","A reset call is employed to reset the watchdog timer system  prior to the system counting to the timelength parameter. An exemplary interface for the reset call is: KeWatchdogTimerReset( ), with no parameters. Thus, the watchdog timer system  can be reset by the call: KeWatchdogTimerReset( ). Typically, the reset call is made by the application  prior to the time out or timelength value. Optionally, an interrupt assign call can be utilized to assign an interrupt to be generated on the watchdog timer system  (i.e., timer ) being triggered. An exemplary interrupt function call can be, for example: KeWatchdogTimerAssignInterrupt(ULONG interrupt). Otherwise, a default interrupt is employed as the assigned interrupt.","As stated above, the watchdog timer interface  sets the timer parameters of the timer  in order to control the timer  and have the system  function as a watchdog timer. On being called to start the watchdog timer system , the watchdog timer interface  sets the interrupt enable parameter of the timer  to \u201ctrue\u201d, sets the counter value parameter of the timer  to zero, sets the compare value of the timer  to a computed value and sets the set interrupt parameter to be the interrupt assign parameter. The compare value is computed as a function of the timelength. Typically, the compare value is equal to the timelength parameter divided by the tick period of the timer . Then, the enable\/disable parameter is set to \u201ctrue\u201d. On the watchdog timer interface  receiving a reset call, the enable\/disable parameter is set to \u201cfalse\u201d, the counter value is reset to zero and then the enable\/disable parameter is set to \u201ctrue\u201d. If the timer  is periodic, the watchdog timer interface  sets the enable\/disable parameter to \u201cfalse\u201d on the interrupt being generated.","It is appreciated that the timer parameters of the timer  can be implemented as registers and\/or bits (which are set and cleared) and mapped to memory space, typically by the basic input\/output system (BIOS) and\/or the operating system (OS). The BIOS and\/or OS can then report the address locations for the memory mapped timer parameters therein facilitating setting of the timer parameters by the watchdog timer interface  and improving operation of the system . Additionally, other parameters of the timer  can be handled and\/or controlled by the watchdog timer interface  including, but not limited to, legacy interrupt routing, size of the compare value, size of the counter value, periodic mode and the like.",{"@attributes":{"id":"p-0050","num":"0051"},"figref":"FIG. 4","b":["400","400","402","408","402","406","404"]},"The HAL  is a layer of programming that allows a computer operating system to interact with a hardware device at a general or abstract level rather than at a detailed hardware level. The HAL  can be called from other operating system components and\/or from a device driver. The HAL  permits the calling program to interact with devices in a more general way than it would otherwise. The exception handler  handles exceptions (detected errors) and performs recover operations. The exception handler  is also a part of the operating system.","The watchdog timer system , operates as a watchdog timer and is implemented with an application programming interface (API) and a hardware based timer such as is described with respect to  and  and variations thereof. The HAL  calls the watchdog timer system  with a timelength parameter to start the watchdog timer system . The timelength parameter, typically in nano-seconds, is the length of time in which the HAL has to reset the watchdog timer system  to avoid generation of an interrupt. Then, under normal error free operation, the HAL  periodically resets the watchdog timer system  prior to the timelength parameter (i.e., timeout) so that an interrupt is not generated. If an error or erroneous event occurs, the HAL  fails to reset the watchdog timer system  prior to the watchdog timer system  being triggered and generating the interrupt. If the interrupt is generated, the exception handler  receives the interrupt and performs suitable error handling and recovery procedures. Additionally, The HAL  can call the watchdog timer system  and set a desired interrupt as the interrupt to be generated by the watchdog timer system . Different interrupts can be attached to different exception handling routines. Thus, a different exception handler can be selected by the HAL  selecting a different interrupt.","On the interrupt being generated, a central processing unit (CPU) of the computer system stops its current process and saves the current processor state by saving the current program counter and current state of the CPU registers. The CPU then employs a vector table to determine an address of the exception handler  which is associated with the interrupt. The CPU then branches or jumps to the address of the exception handler  and begins executing the code of the exception handler  which appropriately handles and recovers from the error or erroneous event. The exception handler  can simply reset the computer system. The exception handler  can be configured and\/or programmed to handle errors in an appropriate manner.",{"@attributes":{"id":"p-0054","num":"0055"},"figref":"FIG. 5","b":["500","500","502","504","506","506","502","506","506","506","506","506","506","506","506"]},"The watchdog timer interface  is an application programming interface and is operative to be called by an application (not shown). The watchdog timer interface  can query the architecture  or the plurality of timers  to identify an available timer. One or more of the plurality of timers  can be already employed by a software component and thus unavailable to the watchdog timer interface . Then, the available timer is controlled and\/or configured by the watchdog timer interface . A start\/stop parameter is typically received by the watchdog timer interface  to start or stop available timer. Typically, a \u201ctrue\u201d value of the start\/stop parameter indicates \u201cstart\u201d and a \u201cfalse\u201d value of the start\/stop parameter indicates \u201cstop\u201d. It is appreciated that other aspects of the invention can utilize other suitable signals and\/or parameters to indicate starting and stopping. For operation of the available timer to be started, the timelength parameter and interrupt assign parameter should also be received. The timelength parameter is employed to set a length of time or timeout value. Typically, the timelength parameter is in micro-seconds; however other units can be employed by design and\/or including an optional units parameter. A reset call is employed to functionally reset the available timer prior to the interrupt being triggered. On being called to start the watchdog timer interface  sets the interrupt enable parameter of the available timer to \u201ctrue\u201d, sets the counter value parameter of the available timer to zero, sets the compare value of the available timer to a computed value and sets the set interrupt parameter to be the interrupt assign parameter. The compare value is computed as a function of the timelength. Typically, the compare value is equal to the timelength parameter divided by the tick period of the available timer. Then, the enable\/disable parameter is set to \u201ctrue\u201d. On the watchdog timer interface  receiving a reset call, the enable\/disable parameter is set to \u201cfalse\u201d, the counter value is reset to zero and then the enable\/disable parameter is set to \u201ctrue\u201d. If the available timer is periodic, the watchdog timer interface  sets the enable\/disable parameter to \u201cfalse\u201d on the interrupt being generated in order to disable the available timer.","In view of the foregoing structural and functional features described above, methodologies in accordance with various aspects of the present invention will be better appreciated with reference to . While, for purposes of simplicity of explanation, the methodologies of  is depicted and described as executing serially, it is to be understood and appreciated that the present invention is not limited by the illustrated order, as some aspects could, in accordance with the present invention, occur in different orders and\/or concurrently with other aspects from that depicted and described herein. Moreover, not all illustrated features may be required to implement a methodology in accordance with an aspect the present invention.",{"@attributes":{"id":"p-0057","num":"0058"},"figref":"FIG. 6","b":["600","600"]},"The compare value is set at  to a desired and\/or computed value. The compare value determines the time out value or length of time until an interrupt is generated. The compare value is typically computed as the desired time out value divided by a tick period. The counter value is set or initialized at . The counter value is the starting value of the timer and is generally initialized to zero. The set interrupt parameter is set to a desired interrupt at . The desired interrupt can determine how a detected error is handled. Optionally, an interrupt type of the timer can be set to determine whether the interrupt to be generated is edge triggered or level triggered. The enable parameter is then set to \u201ctrue\u201d at , which therein enables the hardware timer and starts counting. The counter value is incremented (by one) for every tick period at . The tick period is the period of time when the counter value is incremented. Typically, the tick period is less than or equal to about 100 nanoseconds. In alternate aspects of the invention, the tick period is a settable parameter of the timer. Additionally, if the counter value is set to a number greater than the compare value, the counter value wraps around to zero before being incremented to be substantially equal to the compare value. Generally, the smaller the tick period is, the greater the precision of the timer is. On the compare value being equal to the counter value, generating the desired interrupt at . On no errors or erroneous events occurring, setting the counter value to zero at  prior to the counter value being equal to the compare value. The timer can be disabled by setting the enable\/disable parameter to \u201cfalse\u201d and by optionally setting the interrupt enable parameter to \u201cfalse\u201d.",{"@attributes":{"id":"p-0059","num":"0060"},"figref":"FIG. 7","b":["700","700","702","704","706","708","710"]},{"@attributes":{"id":"p-0060","num":"0061"},"figref":"FIG. 8","b":["802","804","806","808","810","812"]},"In order to provide additional context for various aspects of the present invention,  and the following discussion are intended to provide a brief, general description of one possible suitable computing environment  in which the various aspects of the present invention may be implemented. It is to be appreciated that the computing environment  is but one possible computing environment and is not intended to limit the computing environments with which the present invention can be employed. While the invention has been described above in the general context of computer-executable instructions that may run on one or more computers, it is to be recognized that the invention also may be implemented in combination with other program modules and\/or as a combination of hardware and software. Generally, program modules include routines, programs, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, one will appreciate that the inventive methods may be practiced with other computer system configurations, including single-processor or multiprocessor computer systems, minicomputers, mainframe computers, as well as personal computers, hand-held computing devices, microprocessor-based or programmable consumer electronics, and the like, each of which may be operatively coupled to one or more associated devices. The illustrated aspects of the invention may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.",{"@attributes":{"id":"p-0062","num":"0063"},"figref":"FIG. 9"},"With reference to , an exemplary environment  for implementing various aspects of the invention includes a computer , including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The processing unit  may be any of various commercially available processors. Dual microprocessors and other multi-processor architectures also can be used as the processing unit .","The system bus  may be any of several types of bus structure including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of commercially available bus architectures. The computer memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in ROM .","The computer  may further include a hard disk drive , a magnetic disk drive , e.g., to read from or write to a removable disk , and an optical disk drive , e.g., for reading a CD-ROM disk  or to read from or write to other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The computer  typically includes at least some form of computer readable media. Computer readable media can be any available media that can be accessed by the computer . By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","A number of program modules may be stored in the drives and RAM , including an operating system , one or more application programs , other program modules , and program non-interrupt data . The operating system  in the computer  can be any of a number of commercially available operating systems.","A user may enter commands and information into the computer  through a keyboard  and a pointing device, such as a mouse . Other input devices (not shown) may include a microphone, an IR remote control, a joystick, a game pad, a satellite dish, a scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus , but may be connected by other interfaces, such as a parallel port, a game port, a universal serial bus (\u201cUSB\u201d), an IR interface, etc. A monitor , or other type of display device, is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, a computer typically includes other peripheral output devices (not shown), such as speakers, printers etc.","The computer  may operate in a networked environment using logical and\/or physical connections to one or more remote computers, such as a remote computer(s) . The remote computer(s)  may be a workstation, a server computer, a router, a personal computer, microprocessor based entertainment appliance, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer , although, for purposes of brevity, only a memory storage device  is illustrated. The logical connections depicted include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem , or is connected to a communications server on the LAN, or has other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0070","num":"0071"},"figref":"FIG. 10","b":["1000","1000","1010","1010","1000","1030","1030","1030","1010","1030","1000","1050","1010","1030","1010","1060","1010","1030","1040","1030"]},"What has been described above includes examples of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims. Furthermore, to the extent that the term \u201cincludes\u201d is used in either the detailed description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
